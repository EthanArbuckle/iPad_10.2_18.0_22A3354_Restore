uint64_t sub_1000F2FC0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1000FA14C(a1, a2, a3, a4, &qword_100211A98, CKRecordZone_ptr, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
}

void sub_1000F2FE4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSString v39;
  id v40;
  unint64_t v41;
  Class isa;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  double v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t Strong;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t countAndFlagsBits;
  id v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  void *v114;
  void *v115;
  Swift::String v116;
  Swift::String v117;
  Class v118;
  Swift::String v119;
  id v120;
  uint64_t v121;
  void *v122;
  void *v123;
  Swift::String v124;
  id v125;
  uint64_t v126;
  void *v127;
  void *v128;
  Swift::String v129;
  void *object;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  id v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  __int128 v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  NSString *v184;
  uint64_t v185;
  uint64_t v186;
  Swift::String aBlock;
  __int128 v188;
  uint64_t (*v189)();
  uint64_t v190;
  char v191[48];
  _QWORD *v192;

  LODWORD(v184) = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v170 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for URL(0);
  v179 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v13 = (char *)&v170 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v170 - v15;
  __chkstk_darwin(v17);
  v181 = (char *)&v170 - v18;
  aBlock._countAndFlagsBits = a1;
  swift_errorRetain(a1);
  v19 = sub_1000A0980(&qword_100210710);
  type metadata accessor for CKError(0);
  v186 = v20;
  v21 = swift_dynamicCast(&v192, &aBlock, v19, v20, 6);
  if ((_DWORD)v21)
  {
    v183 = v2;
    v172 = v11;
    v173 = v9;
    v174 = v8;
    v175 = v7;
    v176 = v5;
    v177 = v4;
    v22 = v192;
    v23 = static os_log_type_t.default.getter(v21);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v24 = qword_100218DD8;
    v182 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v25 = swift_allocObject(v182, 72, 7);
    v180 = xmmword_100184870;
    *(_OWORD *)(v25 + 16) = xmmword_100184870;
    v26 = v22;
    v27 = related decl 'e' for CKErrorCode.description.getter();
    v29 = v28;

    *(_QWORD *)(v25 + 56) = &type metadata for String;
    v178 = sub_1000A0DF4();
    *(_QWORD *)(v25 + 64) = v178;
    *(_QWORD *)(v25 + 32) = v27;
    *(_QWORD *)(v25 + 40) = v29;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Error with cloud operation %@", 29, 2, v25);
    swift_bridgeObjectRelease(v25);
    v30 = String._bridgeToObjectiveC()();
    v31 = sub_1000A0980((uint64_t *)&unk_100212320);
    inited = swift_initStackObject(v31, v191);
    *(_OWORD *)(inited + 16) = xmmword_1001858F0;
    *(_QWORD *)(inited + 32) = 0x43726F7272456B63;
    *(_QWORD *)(inited + 40) = 0xEB0000000065646FLL;
    aBlock._countAndFlagsBits = (uint64_t)v26;
    v33 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
    v34 = v186;
    *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", _BridgedStoredNSError.errorCode.getter(v186, v33));
    *(_QWORD *)(inited + 56) = 0xD000000000000012;
    *(_QWORD *)(inited + 64) = 0x80000001001AF1D0;
    aBlock._countAndFlagsBits = (uint64_t)v26;
    v35 = sub_1000A0940(&qword_100210530, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185138);
    Error.localizedDescription.getter(v34, v35);
    v37 = v36;
    v38 = objc_allocWithZone((Class)NSString);
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37);
    v40 = objc_msgSend(v38, "initWithString:", v39);

    *(_QWORD *)(inited + 72) = v40;
    v41 = sub_1000A5628(inited);
    sub_1000AB31C(0, &qword_1002119D0, NSObject_ptr);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v41);
    CUMetricsLog(v30, isa);

    v192 = v26;
    v43 = v34;
    v44 = v33;
    v45 = _BridgedStoredNSError.userInfo.getter(v43, v33);
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
    v48 = v47;
    if (*(_QWORD *)(v45 + 16) && (v49 = sub_1000AA00C(v46, v47), (v50 & 1) != 0))
    {
      sub_100104A08(*(_QWORD *)(v45 + 56) + 32 * v49, (uint64_t)&aBlock);
    }
    else
    {
      aBlock = (Swift::String)0;
      v188 = 0u;
    }
    v51 = v183;
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v45);
    if (*((_QWORD *)&v188 + 1))
    {
      v52 = sub_1000A0980(&qword_1002119D8);
      v53 = swift_dynamicCast(&v192, &aBlock, (char *)&type metadata for Any + 8, v52, 6);
      if ((v53 & 1) != 0)
      {
        v54 = (uint64_t)v192;
        v55 = static os_log_type_t.error.getter(v53);
        v56 = qword_100218DD8;
        v57 = swift_allocObject(v182, 72, 7);
        *(_OWORD *)(v57 + 16) = v180;
        v58 = swift_bridgeObjectRetain(v54);
        v59 = Dictionary.description.getter(v58, &type metadata for AnyHashable, v186, &protocol witness table for AnyHashable);
        v61 = v60;
        swift_bridgeObjectRelease(v54);
        v62 = v178;
        *(_QWORD *)(v57 + 56) = &type metadata for String;
        *(_QWORD *)(v57 + 64) = v62;
        *(_QWORD *)(v57 + 32) = v59;
        *(_QWORD *)(v57 + 40) = v61;
        os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "Handling partial internal errors - %@", 37, 2, v57);
        v51 = v183;
        v63 = swift_bridgeObjectRelease(v57);
        __chkstk_darwin(v63);
        *(&v170 - 2) = v51;
        *((_BYTE *)&v170 - 8) = v184 & 1;
        sub_10010325C(v54, (void (*)(_BYTE *, id))sub_100104F88);
        swift_bridgeObjectRelease(v54);
      }
    }
    else
    {
      sub_1000A1000((uint64_t)&aBlock, &qword_100211980);
    }
    v64 = v185;
    aBlock._countAndFlagsBits = (uint64_t)v26;
    v65 = _BridgedStoredNSError.code.getter(&v192, v186, v44);
    switch((unint64_t)v192)
    {
      case 3uLL:
      case 4uLL:
        if ((v184 & 1) == 0)
          goto LABEL_32;
        v66 = 150.0;
        goto LABEL_17;
      case 6uLL:
      case 7uLL:
        v66 = COERCE_DOUBLE(related decl 'e' for CKErrorCode.retryAfterSeconds.getter(v26));
        if ((v67 & 1) != 0)
          v66 = 600.0;
LABEL_17:
        sub_1000F7140(v66);
        goto LABEL_32;
      case 0xEuLL:
        v76 = static os_log_type_t.error.getter(v65);
        v77 = qword_100218DD8;
        v78 = v182;
        v79 = swift_allocObject(v182, 72, 7);
        *(_OWORD *)(v79 + 16) = v180;
        v80 = v26;
        v81 = related decl 'e' for CKErrorCode.description.getter();
        v83 = v82;

        v84 = v178;
        *(_QWORD *)(v79 + 56) = &type metadata for String;
        *(_QWORD *)(v79 + 64) = v84;
        *(_QWORD *)(v79 + 32) = v81;
        *(_QWORD *)(v79 + 40) = v83;
        os_log(_:dso:log:_:_:)(v76, &_mh_execute_header, v77, "Server Record Changed, We need to Fetch the data again: %@", 58, 2, v79);
        swift_bridgeObjectRelease(v79);
        v85 = related decl 'e' for CKErrorCode.serverRecord.getter(v80);
        if (v85)
        {
          v86 = (void *)v85;
          v87 = static os_log_type_t.error.getter(v85);
          v88 = qword_100218DD8;
          v89 = swift_allocObject(v78, 72, 7);
          *(_OWORD *)(v89 + 16) = v180;
          v90 = v86;
          v91 = objc_msgSend(v90, "description");
          v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
          v94 = v93;

          *(_QWORD *)(v89 + 56) = &type metadata for String;
          *(_QWORD *)(v89 + 64) = v84;
          v95 = v183;
          *(_QWORD *)(v89 + 32) = v92;
          *(_QWORD *)(v89 + 40) = v94;
          os_log(_:dso:log:_:_:)(v87, &_mh_execute_header, v88, "Resolving with server record - %@", 33, 2, v89);
          swift_bridgeObjectRelease(v89);
          Strong = swift_unknownObjectWeakLoadStrong(v95 + 24, v96);
          if (Strong)
          {
            v99 = Strong;
            v100 = sub_1000A0980(&qword_100211998);
            v101 = swift_allocObject(v100, 40, 7);
            *(_OWORD *)(v101 + 16) = xmmword_100187640;
            *(_QWORD *)(v101 + 32) = v90;
            aBlock._countAndFlagsBits = v101;
            specialized Array._endMutation()(v101);
            countAndFlagsBits = aBlock._countAndFlagsBits;
            v103 = v90;
            sub_100100D2C(v95, (uint64_t)_swiftEmptyArrayStorage, countAndFlagsBits, v99);
            swift_bridgeObjectRelease(countAndFlagsBits);
            swift_unknownObjectRelease(v99);
          }
          v104 = swift_unknownObjectWeakLoadStrong(v95 + 24, v98);
          if (v104)
          {
            v105 = v104;
            sub_100103600(*(_BYTE *)(v95 + 104), v104);
            swift_unknownObjectRelease(v105);
          }

        }
        else
        {
          sub_1000F7140(30.0);

        }
        return;
      case 0x15uLL:
        v170 = v44;
        v171 = v26;
        sub_1000E1A74((uint64_t)v13);
        URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x80000001001AD940, 1);
        v106 = *(void (**)(char *, uint64_t))(v179 + 8);
        v106(v13, v64);
        v107 = (uint64_t)v181;
        URL.appendingPathComponent(_:)(0x2E65746176697250);
        v106(v16, v64);
        sub_10010383C(v107, 0);
        v108 = v51 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
        v179 = *(_QWORD *)(v108 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0) + 32));
        v109 = *(_QWORD *)(v179 + 16);
        if (v109)
        {
          v185 = sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
          v184 = CKCurrentUserDefaultName;
          v110 = (void **)(swift_bridgeObjectRetain(v179) + 40);
          do
          {
            v111 = (uint64_t)*(v110 - 1);
            v112 = *v110;
            v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
            v115 = v114;
            swift_bridgeObjectRetain(v112);
            v116._countAndFlagsBits = v111;
            v116._object = v112;
            v117._countAndFlagsBits = v113;
            v117._object = v115;
            v118 = CKRecordZoneID.init(zoneName:ownerName:)(v116, v117).super.isa;
            sub_1000E1A74((uint64_t)v13);
            URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
            v106(v13, v64);
            v119._countAndFlagsBits = 0x65746176697250;
            v119._object = (void *)0xE700000000000000;
            URL.appendPathComponent(_:)(v119);
            v120 = -[objc_class ownerName](v118, "ownerName");
            v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
            v123 = v122;

            v124._countAndFlagsBits = v121;
            v124._object = v123;
            URL.appendPathComponent(_:)(v124);
            swift_bridgeObjectRelease(v123);
            v125 = -[objc_class zoneName](v118, "zoneName");
            v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
            v128 = v127;

            aBlock._countAndFlagsBits = v126;
            aBlock._object = v128;
            v129._countAndFlagsBits = 0x6E656B6F742ELL;
            v129._object = (void *)0xE600000000000000;
            String.append(_:)(v129);
            object = aBlock._object;
            URL.appendPathComponent(_:)(aBlock);

            swift_bridgeObjectRelease(object);
            sub_10010383C((uint64_t)v16, 0);
            v106(v16, v64);
            v110 += 2;
            --v109;
          }
          while (v109);
          swift_bridgeObjectRelease(v179);
        }
        v51 = v183;
        sub_1000F7140(30.0);
        v106(v181, v64);
        v26 = v171;
        v44 = v170;
        goto LABEL_32;
      case 0x1AuLL:
        v131 = static os_log_type_t.error.getter(v65);
        v132 = qword_100218DD8;
        v70 = swift_allocObject(v182, 72, 7);
        *(_OWORD *)(v70 + 16) = v180;
        v133 = v26;
        v134 = related decl 'e' for CKErrorCode.description.getter();
        v136 = v135;

        v137 = v178;
        *(_QWORD *)(v70 + 56) = &type metadata for String;
        *(_QWORD *)(v70 + 64) = v137;
        *(_QWORD *)(v70 + 32) = v134;
        *(_QWORD *)(v70 + 40) = v136;
        os_log(_:dso:log:_:_:)(v131, &_mh_execute_header, v132, "Zone not found: %@", 18, 2, v70);
        goto LABEL_31;
      default:
        v68 = static os_log_type_t.error.getter(v65);
        v69 = qword_100218DD8;
        v70 = swift_allocObject(v182, 72, 7);
        *(_OWORD *)(v70 + 16) = v180;
        v71 = v26;
        v72 = related decl 'e' for CKErrorCode.description.getter();
        v74 = v73;

        v75 = v178;
        *(_QWORD *)(v70 + 56) = &type metadata for String;
        *(_QWORD *)(v70 + 64) = v75;
        *(_QWORD *)(v70 + 32) = v72;
        *(_QWORD *)(v70 + 40) = v74;
        os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Uncaught error: %@", 18, 2, v70);
LABEL_31:
        swift_bridgeObjectRelease(v70);
LABEL_32:
        v192 = v26;
        v138 = _BridgedStoredNSError.code.getter(&aBlock, v186, v44);
        if (aBlock._countAndFlagsBits == 110)
        {
          v148 = static os_log_type_t.error.getter(v138);
          v149 = qword_100218DD8;
          v150 = os_log(_:dso:log:_:_:)(v148, &_mh_execute_header, qword_100218DD8, "Attempting to use Manatee from a non-HSA2 account!", 50, 2, _swiftEmptyArrayStorage);
          if (*(_BYTE *)(v51 + 104) == 1)
          {
            *(_BYTE *)(v51 + 104) = 0;
            v151 = static os_log_type_t.fault.getter(v150);
            os_log(_:dso:log:_:_:)(v151, &_mh_execute_header, v149, "Manatee was available, but is not available now.", 48, 2, _swiftEmptyArrayStorage);
          }

        }
        else
        {
          v139 = v182;
          if (aBlock._countAndFlagsBits == 112)
          {
            v152 = static os_log_type_t.default.getter(v138);
            os_log(_:dso:log:_:_:)(v152, &_mh_execute_header, qword_100218DD8, "Private Missing Manatee Identity, Reset...", 42, 2, _swiftEmptyArrayStorage);
            v189 = sub_100104F80;
            v190 = v51;
            aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
            aBlock._object = (void *)1107296256;
            *(_QWORD *)&v188 = sub_1000E6A24;
            *((_QWORD *)&v188 + 1) = &unk_1001E9FF8;
            v153 = _Block_copy(&aBlock);
            v154 = swift_retain(v51);
            v155 = v172;
            static DispatchQoS.unspecified.getter(v154);
            v192 = _swiftEmptyArrayStorage;
            v156 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v157 = sub_1000A0980(&qword_100211D00);
            v158 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
            v159 = v175;
            v160 = v157;
            v161 = v177;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v192, v160, v158, v177, v156);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v155, v159, v153);
            _Block_release(v153);

            (*(void (**)(char *, uint64_t))(v176 + 8))(v159, v161);
            (*(void (**)(char *, uint64_t))(v173 + 8))(v155, v174);
            swift_release(v190);
          }
          else if (aBlock._countAndFlagsBits == 111)
          {
            v140 = static os_log_type_t.default.getter(v138);
            v141 = qword_100218DD8;
            v142 = swift_allocObject(v139, 72, 7);
            *(_OWORD *)(v142 + 16) = v180;
            v143 = v51 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
            v144 = (uint64_t *)(v143 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0) + 24));
            v146 = *v144;
            v145 = v144[1];
            v147 = v178;
            *(_QWORD *)(v142 + 56) = &type metadata for String;
            *(_QWORD *)(v142 + 64) = v147;
            *(_QWORD *)(v142 + 32) = v146;
            *(_QWORD *)(v142 + 40) = v145;
            swift_bridgeObjectRetain(v145);
            os_log(_:dso:log:_:_:)(v140, &_mh_execute_header, v141, "PCS Keys for %@ are not yet synced.", 35, 2, v142);
            swift_bridgeObjectRelease(v142);

          }
          else
          {
            v162 = static os_log_type_t.error.getter(v138);
            v163 = qword_100218DD8;
            v164 = swift_allocObject(v139, 72, 7);
            *(_OWORD *)(v164 + 16) = v180;
            v165 = v26;
            v166 = related decl 'e' for CKErrorCode.description.getter();
            v168 = v167;

            v169 = v178;
            *(_QWORD *)(v164 + 56) = &type metadata for String;
            *(_QWORD *)(v164 + 64) = v169;
            *(_QWORD *)(v164 + 32) = v166;
            *(_QWORD *)(v164 + 40) = v168;
            os_log(_:dso:log:_:_:)(v162, &_mh_execute_header, v163, "Uncaught private error: %@", 26, 2, v164);
            swift_bridgeObjectRelease(v164);

          }
        }
        break;
    }
  }
}

uint64_t sub_1000F3FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject **v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  v9 = *(_QWORD *)(v8 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0) + 32));
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain(v9);
    v11 = (NSObject **)(v9 + 40);
    do
    {
      v12 = (uint64_t)*(v11 - 1);
      v13 = *v11;
      swift_bridgeObjectRetain(*v11);
      sub_1000F2728(v12, v13);
      swift_bridgeObjectRelease(v13);
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease(v9);
  }
  sub_1000F08D8();
  v14 = swift_allocObject(&unk_1001E9568, 24, 7);
  swift_weakInit(v14 + 16, a1);
  aBlock[4] = sub_100104FFC;
  v27 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EA070;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain(v14);
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_1000A0980(&qword_100211D00);
  v19 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v2, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);
  v20 = v27;
  swift_release(v14);
  return swift_release(v20);
}

uint64_t sub_1000F4268(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1000E8AC4(0);
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_1000F42C0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v43[12];
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void **aBlock;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  void *v54;
  uint64_t (*v55)();
  _QWORD *v56;

  v45 = a3;
  v46 = a4;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v43[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v49 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2)
  {
    v14 = swift_errorRetain(a2);
    v15 = static os_log_type_t.error.getter(v14);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v16 = qword_100218DD8;
    v17 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100184870;
    aBlock = a2;
    swift_errorRetain(a2);
    v19 = sub_1000A0980(&qword_100210710);
    v20 = String.init<A>(describing:)(&aBlock, v19);
    v22 = v21;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v18 + 32) = v20;
    *(_QWORD *)(v18 + 40) = v22;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "error fetching account status: %@", 33, 2, v18);
    swift_bridgeObjectRelease(v18);
    v23 = swift_allocObject(&unk_1001E9E50, 32, 7);
    *(_QWORD *)(v23 + 16) = v46;
    *(_QWORD *)(v23 + 24) = a5;
    v55 = sub_1000C6F08;
    v56 = (_QWORD *)v23;
    aBlock = _NSConcreteStackBlock;
    v52 = 1107296256;
    v53 = sub_1000E6A24;
    v54 = &unk_1001E9E68;
    v24 = _Block_copy(&aBlock);
    v25 = swift_retain(a5);
    static DispatchQoS.unspecified.getter(v25);
    v50 = _swiftEmptyArrayStorage;
    v26 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_1000A0980(&qword_100211D00);
    v28 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v27, v28, v8, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v24);
    _Block_release(v24);
    swift_errorRelease(a2);
  }
  else
  {
    v44 = static os_log_type_t.default.getter(v11);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v29 = qword_100218DD8;
    v30 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100184870;
    v32 = (id)CKStringFromAccountStatus(a1);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v31 + 32) = v33;
    *(_QWORD *)(v31 + 40) = v35;
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v29, "Fetched CK account status: %{public}@", 37, 2, v31);
    swift_bridgeObjectRelease(v31);
    v36 = (_QWORD *)swift_allocObject(&unk_1001E9E00, 40, 7);
    v36[2] = v46;
    v36[3] = a5;
    v36[4] = a1;
    v55 = sub_1000C6E10;
    v56 = v36;
    aBlock = _NSConcreteStackBlock;
    v52 = 1107296256;
    v53 = sub_1000E6A24;
    v54 = &unk_1001E9E18;
    v37 = _Block_copy(&aBlock);
    v38 = swift_retain(a5);
    static DispatchQoS.unspecified.getter(v38);
    v50 = _swiftEmptyArrayStorage;
    v39 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v40 = sub_1000A0980(&qword_100211D00);
    v41 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v40, v41, v8, v39);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v37);
    _Block_release(v37);
  }
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v10, v8);
  (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v13, v49);
  return swift_release(v56);
}

void sub_1000F4794(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_1000F47F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD v9[5];
  _QWORD *v10;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_100218DD8, "CKAccountChanged notification received", 38, 2, _swiftEmptyArrayStorage);
  v3 = swift_allocObject(&unk_1001E9D88, 25, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 0;
  v4 = swift_retain(v1);
  v5 = sub_1000E7CF8(v4);
  v6 = (_QWORD *)swift_allocObject(&unk_1001E9DB0, 40, 7);
  v6[2] = v1;
  v6[3] = sub_100104EF0;
  v6[4] = v3;
  v9[4] = sub_100104F00;
  v10 = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_1000F4794;
  v9[3] = &unk_1001E9DC8;
  v7 = _Block_copy(v9);
  v8 = v10;
  swift_retain(v1);
  swift_retain(v3);
  swift_release(v8);
  objc_msgSend(v5, "accountStatusWithCompletionHandler:", v7);
  _Block_release(v7);
  swift_release(v3);

}

uint64_t sub_1000F49FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[26];

  v4[0] = "\b";
  v4[1] = &unk_100187730;
  v4[2] = &unk_100187748;
  v4[3] = &unk_100187748;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10] = &unk_100187760;
  v4[11] = &unk_100187760;
  v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[14] = &unk_100187760;
  result = type metadata accessor for CloudCoordinatorConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[15] = *(_QWORD *)(result - 8) + 64;
    v4[16] = &unk_100187748;
    v4[17] = &unk_100187778;
    v4[18] = &unk_100187748;
    v4[19] = &unk_100187748;
    v4[20] = &unk_100187748;
    v4[21] = &unk_100187748;
    v4[22] = &unk_100187748;
    v4[23] = &unk_100187748;
    v4[24] = &unk_100187748;
    v4[25] = &unk_100187760;
    return swift_updateClassMetadata2(a1, 256, 26, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_1000F4AEC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a2 + 72);
  v14 = swift_allocObject(&unk_1001E9EA0, 33, 7);
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a1;
  *(_BYTE *)(v14 + 32) = a3;
  aBlock[4] = sub_100104F54;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E9EB8;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_1000A0980(&qword_100211D00);
  v19 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

void sub_1000F4CE4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t Strong;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void **aBlock;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  void *v79;
  uint64_t (*v80)();
  uint64_t v81;
  char v82[24];
  _QWORD v83[4];

  v68 = a3;
  v74 = type metadata accessor for DispatchWorkItemFlags(0);
  v72 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v71 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for DispatchQoS(0);
  v70 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v69 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_log_type_t.default.getter(v7);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v9 = qword_100218DD8;
  v67 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v10 = swift_allocObject(v67, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1001858F0;
  v11 = (id)CKStringFromAccountStatus(*(_QWORD *)(a1 + 96));
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_1000A0DF4();
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  v16 = (id)CKStringFromAccountStatus(a2);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 72) = v17;
  *(_QWORD *)(v10 + 80) = v19;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "iCloud accountDidChange %{public}@ -> %{public}@", 48, 2, v10);
  v20 = swift_bridgeObjectRelease(v10);
  v21 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = a2;
  *(_BYTE *)(a1 + 105) = a2 == 1;
  switch(a2)
  {
    case 0:
      v22 = static os_log_type_t.error.getter(v20);
      os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_100218DD8, "Could not determine account status!", 35, 2, _swiftEmptyArrayStorage);
      break;
    case 1:
      v24 = static os_log_type_t.default.getter(v20);
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_100218DD8, "iCloud accountDidChange available", 33, 2, _swiftEmptyArrayStorage);
      sub_1000F5AB0(v68 & 1);
      break;
    case 2:
      v25 = static os_log_type_t.error.getter(v20);
      os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_100218DD8, "iCloud Account not available due to restrictions!", 49, 2, _swiftEmptyArrayStorage);
      if (*(_QWORD *)(a1 + 96) != 2)
      {
        v80 = sub_100104F68;
        v81 = a1;
        aBlock = _NSConcreteStackBlock;
        v77 = 1107296256;
        v78 = sub_1000E6A24;
        v79 = &unk_1001E9F08;
        v26 = _Block_copy(&aBlock);
        v27 = swift_retain(a1);
        v28 = v69;
        static DispatchQoS.unspecified.getter(v27);
        v83[0] = _swiftEmptyArrayStorage;
        v29 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v30 = sub_1000A0980(&qword_100211D00);
        v31 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
        v32 = v71;
        v33 = v30;
        v34 = v74;
        dispatch thunk of SetAlgebra.init<A>(_:)(v83, v33, v31, v74, v29);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v32, v26);
        _Block_release(v26);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v32, v34);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v28, v73);
        swift_release(v81);
        goto LABEL_17;
      }
      break;
    case 3:
      v35 = static os_log_type_t.error.getter(v20);
      v36 = qword_100218DD8;
      v37 = os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, qword_100218DD8, "iCloud Account not available!", 29, 2, _swiftEmptyArrayStorage);
      v38 = static os_log_type_t.default.getter(v37);
      os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v36, "reset timers", 12, 2, _swiftEmptyArrayStorage);
      objc_msgSend(*(id *)(a1 + 40), "invalidate");
      v39 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

      v40 = *(_QWORD *)(a1 + 48);
      if (v40)
      {
        swift_getObjectType(*(_QWORD *)(v40 + 40));
        swift_retain(v40);
        OS_dispatch_source.cancel()();
        swift_release(v40);
        v41 = *(_QWORD *)(a1 + 48);
      }
      else
      {
        v41 = 0;
      }
      *(_QWORD *)(a1 + 48) = 0;
      swift_release(v41);
      swift_beginAccess(a1 + 112, v83, 1, 0);
      v43 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = _swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v43);
      swift_beginAccess(a1 + 120, v82, 1, 0);
      v44 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = _swiftEmptyDictionarySingleton;
      v45 = swift_bridgeObjectRelease(v44);
      if (v21 == 3)
      {
        v46 = static os_log_type_t.default.getter(v45);
        os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, qword_100218DD8, "Account was already in .noAccount state", 39, 2, _swiftEmptyArrayStorage);
      }
      else
      {
        v47 = static os_log_type_t.error.getter(v45);
        v48 = qword_100218DD8;
        v49 = swift_allocObject(v67, 72, 7);
        *(_OWORD *)(v49 + 16) = xmmword_100184870;
        Strong = swift_unknownObjectWeakLoadStrong(a1 + 24, v50);
        v52 = *(_QWORD *)(a1 + 32);
        aBlock = (void **)Strong;
        v77 = v52;
        v53 = sub_1000A0980((uint64_t *)&unk_100211A80);
        v54 = String.init<A>(describing:)(&aBlock, v53);
        *(_QWORD *)(v49 + 56) = &type metadata for String;
        *(_QWORD *)(v49 + 64) = v15;
        *(_QWORD *)(v49 + 32) = v54;
        *(_QWORD *)(v49 + 40) = v55;
        os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Tell delegate to remove local cache: %@", 39, 2, v49);
        swift_bridgeObjectRelease(v49);
        v80 = sub_100104F60;
        v81 = a1;
        aBlock = _NSConcreteStackBlock;
        v77 = 1107296256;
        v78 = sub_1000E6A24;
        v79 = &unk_1001E9EE0;
        v56 = _Block_copy(&aBlock);
        v57 = swift_retain(a1);
        v58 = v69;
        static DispatchQoS.unspecified.getter(v57);
        v75 = _swiftEmptyArrayStorage;
        v59 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v60 = sub_1000A0980(&qword_100211D00);
        v61 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
        v62 = v71;
        v63 = v60;
        v64 = v74;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v63, v61, v74, v59);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v58, v62, v56);
        _Block_release(v56);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v62, v64);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v73);
        v65 = swift_release(v81);
        if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available) & 1) != 0)
        {
LABEL_17:
          sub_1000E8AC4(0);
        }
        else
        {
          v66 = static os_log_type_t.default.getter(v65);
          os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, qword_100218DD8, "CloudSync: finish Setup", 23, 2, _swiftEmptyArrayStorage);
          sub_1000E87A0();
        }
      }
      break;
    case 4:
      v42 = static os_log_type_t.error.getter(v20);
      os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_100218DD8, "Account available but not ready!", 32, 2, _swiftEmptyArrayStorage);
      break;
    default:
      v23 = static os_log_type_t.error.getter(v20);
      os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_100218DD8, "Unknown CKAccountStatus!", 24, 2, _swiftEmptyArrayStorage);
      break;
  }
}

uint64_t sub_1000F5494(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Class isa;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  objc_class *v42;
  _QWORD *v43;
  _QWORD aBlock[5];
  uint64_t v45;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  __chkstk_darwin(v2);
  v38 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  __chkstk_darwin(v4);
  v35 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  result = *(_QWORD *)(v6 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0) + 32));
  v8 = *(_QWORD *)(result + 16);
  if (v8)
  {
    v41 = a1 + 24;
    v34 = CKCurrentUserDefaultName;
    v33 = swift_bridgeObjectRetain(result);
    v10 = (void **)(v33 + 40);
    v11 = v38;
    do
    {
      v12 = (uint64_t)*(v10 - 1);
      v13 = *v10;
      Strong = swift_unknownObjectWeakLoadStrong(v41, v9);
      if (Strong)
      {
        v15 = Strong;
        sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v18 = v17;
        swift_bridgeObjectRetain(v13);
        v19._countAndFlagsBits = v12;
        v19._object = v13;
        v20._countAndFlagsBits = v16;
        v20._object = v18;
        isa = CKRecordZoneID.init(zoneName:ownerName:)(v19, v20).super.isa;
        v22 = *(void **)(v15 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
        v23 = swift_allocObject(&unk_1001E9F40, 32, 7);
        *(_QWORD *)(v23 + 16) = isa;
        *(_QWORD *)(v23 + 24) = v15;
        aBlock[4] = sub_1000C631C;
        v45 = v23;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1000E6A24;
        aBlock[3] = &unk_1001E9F58;
        v24 = _Block_copy(aBlock);
        v25 = v22;
        v42 = isa;
        v26 = swift_unknownObjectRetain(v15);
        v27 = v35;
        static DispatchQoS.unspecified.getter(v26);
        v43 = _swiftEmptyArrayStorage;
        v28 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v29 = sub_1000A0980(&qword_100211D00);
        v30 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
        v31 = v40;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v29, v30, v40, v28);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v11, v24);
        _Block_release(v24);

        (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v31);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v37);
        v32 = v45;

        swift_unknownObjectRelease(v15);
        swift_release(v32);
      }
      v10 += 2;
      --v8;
    }
    while (v8);
    return swift_bridgeObjectRelease(v33);
  }
  return result;
}

uint64_t sub_1000F5790(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Class isa;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSString *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  objc_class *v47;
  _QWORD *v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin(v2);
  v43 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  __chkstk_darwin(v4);
  v40 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  v7 = *(_QWORD *)(v6 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0) + 32));
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    v38 = a1;
    v46 = a1 + 24;
    v39 = CKCurrentUserDefaultName;
    v37 = swift_bridgeObjectRetain(v7);
    v11 = (void **)(v37 + 40);
    v12 = v43;
    do
    {
      v13 = (uint64_t)*(v11 - 1);
      v14 = *v11;
      Strong = swift_unknownObjectWeakLoadStrong(v46, v10);
      if (Strong)
      {
        v16 = Strong;
        sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v19 = v18;
        swift_bridgeObjectRetain(v14);
        v20._countAndFlagsBits = v13;
        v20._object = v14;
        v21._countAndFlagsBits = v17;
        v21._object = v19;
        isa = CKRecordZoneID.init(zoneName:ownerName:)(v20, v21).super.isa;
        v23 = *(void **)(v16 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
        v24 = swift_allocObject(&unk_1001E9F90, 32, 7);
        *(_QWORD *)(v24 + 16) = isa;
        *(_QWORD *)(v24 + 24) = v16;
        aBlock[4] = sub_100105CDC;
        v50 = v24;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1000E6A24;
        aBlock[3] = &unk_1001E9FA8;
        v25 = _Block_copy(aBlock);
        v26 = v23;
        v47 = isa;
        v27 = swift_unknownObjectRetain(v16);
        v28 = v40;
        static DispatchQoS.unspecified.getter(v27);
        v48 = _swiftEmptyArrayStorage;
        v29 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v30 = sub_1000A0980(&qword_100211D00);
        v31 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
        v32 = v45;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v30, v31, v45, v29);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v12, v25);
        _Block_release(v25);

        (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v32);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v42);
        v33 = v50;

        swift_unknownObjectRelease(v16);
        swift_release(v33);
      }
      v11 += 2;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease(v37);
    a1 = v38;
  }
  result = swift_unknownObjectWeakLoadStrong(a1 + 24, v8);
  if (result)
  {
    v35 = result;
    sub_100101568(result);
    return swift_unknownObjectRelease(v35);
  }
  return result;
}

void sub_1000F5AB0(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (_QWORD *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v1 + 72);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v3 = static os_log_type_t.default.getter(v10);
  if (qword_1002101D0 != -1)
LABEL_5:
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_100218DD8, "CloudSync: iCloud Account available", 35, 2, _swiftEmptyArrayStorage);
  v11 = swift_allocObject(&unk_1001E9BD0, 25, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_BYTE *)(v11 + 24) = a1 & 1;
  v12 = swift_retain(v1);
  v13 = sub_1000E7CF8(v12);
  v14 = swift_allocObject(&unk_1001E9BF8, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100104E38;
  *(_QWORD *)(v14 + 24) = v11;
  aBlock[4] = sub_100104E48;
  v18 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000F713C;
  aBlock[3] = &unk_1001E9C10;
  v15 = _Block_copy(aBlock);
  v16 = v18;
  swift_retain(v11);
  swift_release(v16);
  objc_msgSend(v13, "accountInfoWithCompletionHandler:", v15);
  _Block_release(v15);
  swift_release(v11);

}

void sub_1000F5C9C(void *a1, char a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString *v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  uint64_t v49;
  NSString v50;
  uint64_t v51;
  uint64_t inited;
  unint64_t v53;
  Class isa;
  uint64_t Strong;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  Swift::String v83;
  Swift::String v84;
  Class v85;
  uint64_t v86;
  Swift::String v87;
  id v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  id v93;
  uint64_t v94;
  void *v95;
  void *v96;
  Swift::String v97;
  void *object;
  void *v99;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  BOOL v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  Class v140;
  objc_class *v141;
  id v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  objc_class *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  int v174;
  __int128 v175;
  NSString *v176;
  uint64_t v177;
  uint64_t v178;
  char v179[56];
  _QWORD *v180;
  Swift::String aBlock;
  uint64_t (*v182)(uint64_t);
  void *v183;
  uint64_t (*v184)();
  uint64_t v185;

  v174 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v173 = (char *)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  v178 = (uint64_t)&v161 - v16;
  __chkstk_darwin(v17);
  v22 = (char *)&v161 - v21;
  if ((a2 & 1) != 0)
  {
    v101 = swift_errorRetain(a1);
    v102 = static os_log_type_t.error.getter(v101);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v103 = qword_100218DD8;
    v104 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v105 = swift_allocObject(v104, 72, 7);
    *(_OWORD *)(v105 + 16) = xmmword_100184870;
    aBlock._countAndFlagsBits = (uint64_t)a1;
    swift_errorRetain(a1);
    v106 = sub_1000A0980(&qword_100210710);
    v107 = String.init<A>(describing:)(&aBlock, v106);
    v109 = v108;
    *(_QWORD *)(v105 + 56) = &type metadata for String;
    *(_QWORD *)(v105 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v105 + 32) = v107;
    *(_QWORD *)(v105 + 40) = v109;
    os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v103, "CloudSync: accountInfo error: %@", 32, 2, v105);
    swift_bridgeObjectRelease(v105);
    v110 = a1;
    v111 = 1;
    goto LABEL_22;
  }
  v176 = v20;
  v177 = v19;
  v171 = v18;
  v166 = v12;
  v167 = v11;
  v168 = v10;
  v169 = v8;
  v170 = v7;
  v172 = a3;
  v23 = a1;
  v24 = static os_log_type_t.default.getter(v23);
  v25 = a1;
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v26 = qword_100218DD8;
  v27 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v28 = swift_allocObject(v27, 72, 7);
  v175 = xmmword_100184870;
  *(_OWORD *)(v28 + 16) = xmmword_100184870;
  v29 = v23;
  v30 = objc_msgSend(v29, "description");
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  sub_100104E50(v25, 0);
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v34 = sub_1000A0DF4();
  *(_QWORD *)(v28 + 64) = v34;
  *(_QWORD *)(v28 + 32) = v31;
  *(_QWORD *)(v28 + 40) = v33;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v26, "CloudSync: accountInfo: %@", 26, 2, v28);
  swift_bridgeObjectRelease(v28);
  v35 = objc_msgSend(v29, "accountStatus");
  v36 = static os_log_type_t.default.getter(v35);
  v37 = v36;
  v38 = qword_100218DD8;
  if (v35 != (id)1)
  {
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, qword_100218DD8, "CloudSync: Account not available", 32, 2, _swiftEmptyArrayStorage);
    sub_100104E50(v25, 0);
    return;
  }
  v163 = v34;
  v165 = v25;
  v39 = swift_allocObject(v27, 72, 7);
  *(_OWORD *)(v39 + 16) = v175;
  v40 = v172;
  v41 = *(_BYTE *)(v172 + 104);
  *(_QWORD *)(v39 + 56) = &type metadata for Bool;
  *(_QWORD *)(v39 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v39 + 32) = v41;
  os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "CloudSync: Setting previousManateeState to %d", v161);
  v42 = swift_bridgeObjectRelease(v39);
  v43 = *(unsigned __int8 *)(v40 + 104);
  v44 = static os_log_type_t.default.getter(v42);
  v45 = qword_100218DD8;
  v164 = v27;
  v46 = swift_allocObject(v27, 72, 7);
  *(_OWORD *)(v46 + 16) = v175;
  v47 = objc_msgSend(v29, "supportsDeviceToDeviceEncryption");
  *(_QWORD *)(v46 + 56) = &type metadata for Bool;
  *(_QWORD *)(v46 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v46 + 32) = v47;
  os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "CloudSync: Setting manateeAvailable to %d", v161);
  swift_bridgeObjectRelease(v46);
  v48 = objc_msgSend(v29, "supportsDeviceToDeviceEncryption");
  *(_BYTE *)(v40 + 104) = v48;
  if (v43 == 1 && (v48 & 1) == 0)
  {
    v50 = String._bridgeToObjectiveC()();
    v51 = sub_1000A0980((uint64_t *)&unk_100212320);
    inited = swift_initStackObject(v51, v179);
    *(_OWORD *)(inited + 16) = v175;
    *(_QWORD *)(inited + 32) = 0xD000000000000027;
    *(_QWORD *)(inited + 40) = 0x80000001001AEDE0;
    *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", *(unsigned __int8 *)(v40 + 104));
    v53 = sub_1000A5628(inited);
    sub_1000AB31C(0, &qword_1002119D0, NSObject_ptr);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v53);
    CUMetricsLog(v50, isa);

  }
  Strong = swift_unknownObjectWeakLoadStrong(v40 + 24, v49);
  v56 = v171;
  if (Strong)
  {
    v57 = Strong;
    sub_100103600(*(_BYTE *)(v40 + 104), Strong);
    swift_unknownObjectRelease(v57);
  }
  if ((v43 & 1) != 0 || (v58 = objc_msgSend(v29, "supportsDeviceToDeviceEncryption"), (v58 & 1) == 0))
  {
    v110 = v165;
    v111 = 0;
LABEL_22:
    sub_100104E50(v110, v111);
    return;
  }
  v59 = static os_log_type_t.default.getter(v58);
  v162 = (id)qword_100218DD8;
  v60 = swift_allocObject(v164, 72, 7);
  *(_OWORD *)(v60 + 16) = v175;
  v61 = v40 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  v62 = type metadata accessor for CloudCoordinatorConfiguration(0);
  v63 = v176;
  ((void (*)(char *, uint64_t, uint64_t))v176[2])(v22, v61 + *(int *)(v62 + 28), v56);
  v64 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v65 = dispatch thunk of CustomStringConvertible.description.getter(v56, v64);
  v67 = v66;
  v68 = (void (*)(char *, uint64_t))v63[1];
  v68(v22, v56);
  v69 = v163;
  *(_QWORD *)(v60 + 56) = &type metadata for String;
  *(_QWORD *)(v60 + 64) = v69;
  *(_QWORD *)(v60 + 32) = v65;
  *(_QWORD *)(v60 + 40) = v67;
  os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v162, "CloudSync: directoryURL: %@", 27, 2, v60);
  swift_bridgeObjectRelease(v60);
  v70 = v177;
  sub_1000E1A74(v177);
  v71 = v178;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x80000001001AD940, 1);
  v68((char *)v70, v56);
  URL.appendingPathComponent(_:)(0x2E65746176697250);
  v68((char *)v71, v56);
  v162 = (id)sub_1000E204C((uint64_t)v22);
  v72 = ((uint64_t (*)(char *, uint64_t))v68)(v22, v56);
  v73 = *(_QWORD *)(v61 + *(int *)(v62 + 32));
  v74 = *(_QWORD *)(v73 + 16);
  if (v74)
  {
    v177 = sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
    v176 = CKCurrentUserDefaultName;
    swift_bridgeObjectRetain(v73);
    v75 = v74 - 1;
    v161 = v73;
    v76 = (void **)(v73 + 40);
    do
    {
      v77 = v75;
      v79 = (uint64_t)*(v76 - 1);
      v78 = *v76;
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v176);
      v82 = v81;
      swift_bridgeObjectRetain(v78);
      v83._countAndFlagsBits = v79;
      v83._object = v78;
      v84._countAndFlagsBits = v80;
      v84._object = v82;
      v85 = CKRecordZoneID.init(zoneName:ownerName:)(v83, v84).super.isa;
      v86 = v178;
      sub_1000E1A74(v178);
      URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
      v68((char *)v86, v56);
      v87._countAndFlagsBits = 0x65746176697250;
      v87._object = (void *)0xE700000000000000;
      URL.appendPathComponent(_:)(v87);
      v88 = -[objc_class ownerName](v85, "ownerName");
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v91 = v90;

      v92._countAndFlagsBits = v89;
      v92._object = v91;
      URL.appendPathComponent(_:)(v92);
      swift_bridgeObjectRelease(v91);
      v93 = -[objc_class zoneName](v85, "zoneName");
      v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
      v96 = v95;

      aBlock._countAndFlagsBits = v94;
      aBlock._object = v96;
      v97._countAndFlagsBits = 0x6E656B6F742ELL;
      v97._object = (void *)0xE600000000000000;
      String.append(_:)(v97);
      object = aBlock._object;
      URL.appendPathComponent(_:)(aBlock);

      swift_bridgeObjectRelease(object);
      v99 = (void *)sub_1000E204C((uint64_t)v22);
      v68(v22, v56);

      v100 = v99 == 0;
      if (!v99)
        break;
      v75 = v77 - 1;
      v76 += 2;
    }
    while (v77);
    v72 = swift_bridgeObjectRelease(v161);
  }
  else
  {
    v100 = 0;
  }
  v112 = static os_log_type_t.default.getter(v72);
  v113 = qword_100218DD8;
  v114 = os_log(_:dso:log:_:_:)(v112, &_mh_execute_header, qword_100218DD8, "CloudSync: Manatee PCS keys are now available", 45, 2, _swiftEmptyArrayStorage);
  v115 = static os_log_type_t.default.getter(v114);
  v116 = v174;
  v117 = v164;
  v118 = v162;
  if ((v174 & 1) != 0 || !v162 || v100)
  {
    v122 = swift_allocObject(v164, 112, 7);
    v123 = v122;
    v124 = 0x206563726F46;
    if ((v116 & 1) == 0)
      v124 = 0;
    v125 = 0xE000000000000000;
    v126 = 0xE600000000000000;
    if ((v116 & 1) == 0)
      v126 = 0xE000000000000000;
    v129 = v118 == 0;
    *(_OWORD *)(v122 + 16) = xmmword_1001858F0;
    v127 = v163;
    *(_QWORD *)(v122 + 56) = &type metadata for String;
    *(_QWORD *)(v122 + 64) = v127;
    *(_QWORD *)(v122 + 32) = v124;
    *(_QWORD *)(v122 + 40) = v126;
    v128 = v129 || v100;
    v129 = v128 == 0;
    if (v128)
      v130 = 0xD000000000000034;
    else
      v130 = 0;
    *(_QWORD *)(v122 + 96) = &type metadata for String;
    *(_QWORD *)(v122 + 104) = v127;
    if (!v129)
      v125 = 0x80000001001AEC60;
    *(_QWORD *)(v122 + 72) = v130;
    *(_QWORD *)(v122 + 80) = v125;
    os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v113, "CloudSync: %@Fetching from CloudKit %@", 38, 2, v122, v161);
    v131 = swift_bridgeObjectRelease(v123);
    v132 = static os_log_type_t.default.getter(v131);
    v133 = qword_100218DD8;
    v134 = swift_allocObject(v117, 72, 7);
    *(_OWORD *)(v134 + 16) = v175;
    v135 = sub_1000E7E94();
    *(_QWORD *)(v134 + 56) = &type metadata for String;
    *(_QWORD *)(v134 + 64) = v127;
    *(_QWORD *)(v134 + 32) = v135;
    *(_QWORD *)(v134 + 40) = v136;
    os_log(_:dso:log:_:_:)(v132, &_mh_execute_header, v133, "CloudSync: Subscribing to %@", 28, 2, v134);
    swift_bridgeObjectRelease(v134);
    v137 = sub_1000E7E94();
    v139 = v138;
    v140 = sub_100104238(v137, v138);
    swift_bridgeObjectRelease(v139);
    v141 = v140;
    v142 = sub_1000E7F54();
    -[objc_class setGroup:](v141, "setGroup:", v142);

    swift_retain(v40);
    CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(sub_100104E5C, v40);
    v143 = *(NSObject **)(v40 + 64);
    v144 = swift_allocObject(&unk_1001E9C48, 32, 7);
    *(_QWORD *)(v144 + 16) = v40;
    *(_QWORD *)(v144 + 24) = v141;
    v145 = swift_allocObject(&unk_1001E9C70, 32, 7);
    *(_QWORD *)(v145 + 16) = sub_100105CD4;
    *(_QWORD *)(v145 + 24) = v144;
    v184 = sub_100105CD8;
    v185 = v145;
    v146 = v40;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    v182 = sub_1000E6A70;
    v183 = &unk_1001E9C88;
    v147 = _Block_copy(&aBlock);
    v148 = v185;
    v149 = v141;
    swift_retain(v40);
    swift_retain(v145);
    swift_release(v148);
    dispatch_sync(v143, v147);
    _Block_release(v147);
    LOBYTE(v147) = swift_isEscapingClosureAtFileLocation(v145, "", 123, 1179, 55, 1);
    swift_release(v145);
    if ((v147 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v150 = swift_allocObject(&unk_1001E9CC0, 25, 7);
      *(_QWORD *)(v150 + 16) = v40;
      *(_BYTE *)(v150 + 24) = v116 & 1;
      v184 = sub_100104EA8;
      v185 = v150;
      aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
      aBlock._object = (void *)1107296256;
      v182 = sub_1000E6A24;
      v183 = &unk_1001E9CD8;
      v151 = _Block_copy(&aBlock);
      v152 = swift_retain(v146);
      v153 = v173;
      static DispatchQoS.unspecified.getter(v152);
      v180 = _swiftEmptyArrayStorage;
      v154 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v155 = sub_1000A0980(&qword_100211D00);
      v156 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
      v157 = v168;
      v158 = v155;
      v159 = v170;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v158, v156, v170, v154);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v153, v157, v151);

      _Block_release(v151);
      sub_100104E50(v165, 0);
      (*(void (**)(char *, uint64_t))(v169 + 8))(v157, v159);
      (*(void (**)(char *, uint64_t))(v166 + 8))(v153, v167);
      v160 = v185;
      swift_release(v144);
      swift_release(v160);
    }
  }
  else
  {
    v119 = swift_allocObject(v164, 152, 7);
    *(_OWORD *)(v119 + 16) = xmmword_100187620;
    *(_QWORD *)(v119 + 56) = &type metadata for Bool;
    *(_QWORD *)(v119 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v119 + 32) = 0;
    *(_QWORD *)(v119 + 96) = &type metadata for Int;
    *(_QWORD *)(v119 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v119 + 72) = 0;
    *(_QWORD *)(v119 + 136) = &type metadata for Bool;
    *(_QWORD *)(v119 + 144) = &protocol witness table for Bool;
    *(_BYTE *)(v119 + 112) = 0;
    os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v113, "CloudSync: not fetching from CloudKit. Conditions not met - forceFetch: %d, serverDatabaseChangeToken == nil: %d, missingZoneChangeTokens: %d", v161, (_DWORD)v162, v163);
    v120 = swift_bridgeObjectRelease(v119);
    v121 = static os_log_type_t.default.getter(v120);
    os_log(_:dso:log:_:_:)(v121, &_mh_execute_header, qword_100218DD8, "CloudSync: finish Setup", 23, 2, _swiftEmptyArrayStorage);
    sub_1000E87A0();
    sub_100104E50(v165, 0);

  }
}

uint64_t sub_1000F6B84(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((a2 & 1) != 0)
  {
    v11 = swift_errorRetain(a1);
    v12 = static os_log_type_t.error.getter(v11);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v13 = qword_100218DD8;
    v14 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100184870;
    v20 = a1;
    swift_errorRetain(a1);
    v16 = sub_1000A0980(&qword_100210710);
    v17 = String.init<A>(describing:)(&v20, v16);
    v19 = v18;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v15 + 32) = v17;
    *(_QWORD *)(v15 + 40) = v19;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "CloudSync: Subscription error: %@", 33, 2, v15);
    swift_bridgeObjectRelease(v15);
    return sub_100104C94(a1, 1);
  }
  else
  {
    v2 = static os_log_type_t.default.getter(a1);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v3 = qword_100218DD8;
    v4 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100184870;
    v6 = sub_1000E7E94();
    v8 = v7;
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = v8;
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "CloudSync: Successfully subscribed to %@", 40, 2, v5);
    return swift_bridgeObjectRelease(v5);
  }
}

uint64_t sub_1000F6D6C(uint64_t a1, char a2)
{
  swift_retain(a1);
  sub_1000F050C(2, a2, (uint64_t)sub_100104EB4, a1);
  return swift_release(a1);
}

uint64_t sub_1000F6DAC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;

  if ((a2 & 1) != 0)
  {
    v5 = swift_errorRetain(a1);
    v6 = static os_log_type_t.error.getter(v5);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v7 = qword_100218DD8;
    v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100184870;
    v22 = a1;
    swift_errorRetain(a1);
    v10 = sub_1000A0980(&qword_100210710);
    v11 = String.init<A>(describing:)(&v22, v10);
    v13 = v12;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v13;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "CloudSync: Error from fetchChanges: %@", 38, 2, v9);
    swift_bridgeObjectRelease(v9);
    v22 = a1;
    swift_errorRetain(a1);
    type metadata accessor for CKError(0);
    v15 = v14;
    if ((swift_dynamicCast(&v21, &v22, v10, v14, 6) & 1) != 0)
    {
      v16 = v21;
      v17 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
      _BridgedStoredNSError.code.getter(&v22, v15, v17);
      if ((unint64_t)(v22 - 3) > 1)
      {
        v18 = v16;
        sub_1000F2FE4((uint64_t)v18, 0);
        sub_100104C94(a1, 1);

      }
      else
      {
        sub_1000F7140(150.0);
        sub_100104C94(a1, 1);

      }
    }
    else
    {
      v3 = sub_100104C94(a1, 1);
    }
  }
  else
  {
    v2 = static os_log_type_t.default.getter(a1);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v3 = os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_100218DD8, "CloudSync: fetchChanges succeeded", 33, 2, _swiftEmptyArrayStorage);
  }
  v19 = static os_log_type_t.default.getter(v3);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_100218DD8, "CloudSync: finish Setup", 23, 2, _swiftEmptyArrayStorage);
  return sub_1000E87A0();
}

void sub_1000F706C(void *a1, void *a2, void (*a3)(void *, uint64_t))
{
  id v6;

  if (a2)
  {
    swift_errorRetain(a2);
    a3(a2, 1);
    swift_errorRelease(a2);
  }
  else if (a1)
  {
    v6 = a1;
    a3(a1, 0);

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000038, 0x80000001001AEB20, "audioaccessoryd/CloudCoordinator.swift", 38, 2, 1221, 0);
    __break(1u);
  }
}

uint64_t sub_1000F7140(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(v1 + 72);
  v10 = swift_allocObject(&unk_1001E9568, 24, 7);
  swift_weakInit(v10 + 16, v1);
  v11 = swift_allocObject(&unk_1001E9B80, 32, 7);
  *(double *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_100104E08;
  v23 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E9B98;
  v12 = _Block_copy(aBlock);
  v13 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v13);
  v21 = _swiftEmptyArrayStorage;
  v14 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_1000A0980(&qword_100211D00);
  v16 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v17 = v23;
  swift_release(v10);
  return swift_release(v17);
}

uint64_t sub_1000F7374(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  double v10;
  _BYTE v11[24];

  v3 = a1 + 16;
  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v5 = qword_100218DD8;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  *(_QWORD *)(v7 + 56) = &type metadata for Double;
  *(_QWORD *)(v7 + 64) = &protocol witness table for Double;
  *(double *)(v7 + 32) = a2;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "scheduleRetryFetch for %f", v10);
  swift_bridgeObjectRelease(v7);
  swift_beginAccess(v3, v11, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v9 = result;
    if (!*(_QWORD *)(result + 40))
      sub_1000E8F40(a2);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_1000F7490(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  id v45;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - v9;
  v42 = static os_log_type_t.default.getter(v11);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v41 = qword_100218DD8;
  v12 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1001858F0;
  v44 = a1;
  v45 = objc_msgSend(a1, "scope");
  type metadata accessor for Scope(0);
  v15 = String.init<A>(describing:)(&v45, v14);
  v17 = v16;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v18 = sub_1000A0DF4();
  v19 = v18;
  *(_QWORD *)(v13 + 64) = v18;
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v17;
  if (!a2)
  {
    v28 = (_QWORD *)(v13 + 72);
    *(_QWORD *)(v13 + 96) = &type metadata for String;
    *(_QWORD *)(v13 + 104) = v18;
LABEL_8:
    v29 = v43;
    v30 = v44;
    v31 = v42;
    v32 = &selRef_setEarTipFitTestCapability_;
    v33 = v41;
    *v28 = 7104878;
    v27 = 0xE300000000000000;
    goto LABEL_9;
  }
  v39 = v5;
  v40 = a2;
  v20 = objc_msgSend(a2, "data");
  v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  Data.hexString.getter(v21, v23);
  v25 = v24;
  v27 = v26;
  sub_1000A103C(v21, v23);
  v28 = (_QWORD *)(v13 + 72);
  *(_QWORD *)(v13 + 96) = &type metadata for String;
  *(_QWORD *)(v13 + 104) = v19;
  if (!v27)
  {
    v5 = v39;
    a2 = v40;
    goto LABEL_8;
  }
  *v28 = v25;
  v5 = v39;
  a2 = v40;
  v29 = v43;
  v30 = v44;
  v31 = v42;
  v32 = &selRef_setEarTipFitTestCapability_;
  v33 = v41;
LABEL_9:
  *(_QWORD *)(v13 + 80) = v27;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v33, "New database change token, database, %@, token, %@", 50, 2, v13);
  swift_bridgeObjectRelease(v13);
  v34 = v29 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  v35 = type metadata accessor for CloudCoordinatorConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v34 + *(int *)(v35 + 28), v4);
  sub_1000E18B0((uint64_t)v7, (uint64_t)objc_msgSend(v30, v32[350]));
  v36 = *(void (**)(char *, uint64_t))(v5 + 8);
  v36(v7, v4);
  sub_10010383C((uint64_t)v10, a2);
  return ((uint64_t (*)(char *, uint64_t))v36)(v10, v4);
}

uint64_t sub_1000F772C(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  id v52;

  v6 = type metadata accessor for URL(0);
  v51 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v50 = (char *)&v45 - v10;
  v47 = static os_log_type_t.default.getter(v11);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v46 = qword_100218DD8;
  v12 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v13 = swift_allocObject(v12, 152, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100187620;
  v49 = a1;
  v52 = objc_msgSend(a1, "scope");
  type metadata accessor for Scope(0);
  v15 = String.init<A>(describing:)(&v52, v14);
  v17 = v16;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v18 = sub_1000A0DF4();
  *(_QWORD *)(v13 + 64) = v18;
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v17;
  v19 = a2;
  v20 = objc_msgSend(a2, "zoneName");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  *(_QWORD *)(v13 + 96) = &type metadata for String;
  *(_QWORD *)(v13 + 104) = v18;
  *(_QWORD *)(v13 + 72) = v21;
  *(_QWORD *)(v13 + 80) = v23;
  if (!a3)
  {
    v33 = (_QWORD *)(v13 + 112);
    *(_QWORD *)(v13 + 136) = &type metadata for String;
    *(_QWORD *)(v13 + 144) = v18;
LABEL_8:
    v35 = v19;
    v37 = (uint64_t)v50;
    v36 = v51;
    v38 = v48;
    v39 = v49;
    v40 = v47;
    v34 = v46;
    *v33 = 7104878;
    v32 = 0xE300000000000000;
    goto LABEL_9;
  }
  v45 = v6;
  v24 = a3;
  v25 = objc_msgSend(a3, "data");
  v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  Data.hexString.getter(v26, v28);
  v30 = v29;
  v32 = v31;
  sub_1000A103C(v26, v28);
  v33 = (_QWORD *)(v13 + 112);
  *(_QWORD *)(v13 + 136) = &type metadata for String;
  *(_QWORD *)(v13 + 144) = v18;
  if (!v32)
  {
    a3 = v24;
    v6 = v45;
    goto LABEL_8;
  }
  *v33 = v30;
  a3 = v24;
  v6 = v45;
  v34 = v46;
  v35 = v19;
  v37 = (uint64_t)v50;
  v36 = v51;
  v38 = v48;
  v39 = v49;
  v40 = v47;
LABEL_9:
  *(_QWORD *)(v13 + 120) = v32;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v34, "New zone change token, database, %@, zoneName, %@, token, %@", 60, 2, v13);
  swift_bridgeObjectRelease(v13);
  v41 = v38 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  v42 = type metadata accessor for CloudCoordinatorConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v8, v41 + *(int *)(v42 + 28), v6);
  sub_1000E1E20((uint64_t)v8, (uint64_t)objc_msgSend(v39, "scope"), v35);
  v43 = *(void (**)(char *, uint64_t))(v36 + 8);
  v43(v8, v6);
  sub_10010383C(v37, a3);
  return ((uint64_t (*)(uint64_t, uint64_t))v43)(v37, v6);
}

uint64_t sub_1000F7A24()
{
  return sub_1000E780C();
}

uint64_t sub_1000F7A44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void **aBlock;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  void *v41;
  uint64_t (*v42)();
  _QWORD *v43;

  v3 = v2;
  v32 = a1;
  v33 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_1000FEAE8, v2, &type metadata for Bool);
  v10 = aBlock;
  v11 = static os_log_type_t.default.getter(v9);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v12 = qword_100218DD8;
  v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100184870;
  *(_QWORD *)(v14 + 56) = &type metadata for Bool;
  *(_QWORD *)(v14 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v14 + 32) = v10;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "localAvailable: %d", v31);
  v15 = swift_bridgeObjectRelease(v14);
  v16 = static os_log_type_t.default.getter(v15);
  v17 = qword_100218DD8;
  if (v10)
  {
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_100218DD8, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v18 = (_QWORD *)swift_allocObject(&unk_1001E9450, 40, 7);
    v19 = v33;
    v18[2] = v32;
    v18[3] = v19;
    v18[4] = v3;
    v42 = sub_1000FEB30;
    v43 = v18;
    aBlock = _NSConcreteStackBlock;
    v39 = 1107296256;
    v20 = &unk_1001E9468;
  }
  else
  {
    v21 = os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_100218DD8, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v17, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v23 = (_QWORD *)swift_allocObject(&unk_1001E9400, 40, 7);
    v24 = v32;
    v19 = v33;
    v23[2] = v3;
    v23[3] = v24;
    v23[4] = v19;
    v42 = sub_1000FEB00;
    v43 = v23;
    aBlock = _NSConcreteStackBlock;
    v39 = 1107296256;
    v20 = &unk_1001E9418;
  }
  v40 = sub_1000E6A24;
  v41 = v20;
  v25 = _Block_copy(&aBlock);
  swift_retain(v19);
  v26 = swift_retain(v3);
  static DispatchQoS.unspecified.getter(v26);
  v37 = _swiftEmptyArrayStorage;
  v27 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_1000A0980(&qword_100211D00);
  v29 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v28, v29, v4, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v6, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v36);
  return swift_release(v43);
}

uint64_t sub_1000F7DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.default.getter(v10);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v14 = qword_100218DD8;
  v15 = os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_100218DD8, "Done waiting for availableWaitQueue", 35, 2, _swiftEmptyArrayStorage);
  v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v14, "Call completion on non-head-of-queue job", 40, 2, _swiftEmptyArrayStorage);
  v17 = (_QWORD *)swift_allocObject(&unk_1001E94A0, 40, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a1;
  aBlock[4] = sub_1000FEB30;
  v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E94B8;
  v18 = _Block_copy(aBlock);
  swift_retain(a3);
  v19 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_1000A0980(&qword_100211D00);
  v22 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release(v29);
}

uint64_t sub_1000F8080(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;

  v59 = a4;
  v57 = a3;
  v58 = a2;
  v6 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  v7 = *(_QWORD *)(v60 + 64);
  __chkstk_darwin(v6);
  v56 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v62 = (char *)&v54 - v9;
  v11 = static os_log_type_t.default.getter(v10);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v12 = qword_100218DD8;
  v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100184870;
  v15 = a1;
  v16 = objc_msgSend(v15, "description");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v20 = sub_1000A0DF4();
  *(_QWORD *)(v14 + 64) = v20;
  *(_QWORD *)(v14 + 32) = v17;
  *(_QWORD *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "CloudSync: Attempting to create the record: %@", 46, 2, v14);
  v21 = swift_bridgeObjectRelease(v14);
  v22 = IsAppleInternalBuild(v21);
  if ((_DWORD)v22)
    v23 = static os_log_type_t.default.getter(v22);
  else
    v23 = static os_log_type_t.debug.getter(v22);
  v55 = v23;
  v54 = qword_100218DD8;
  v24 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1001858F0;
  v25 = objc_msgSend(v15, "recordID");
  v26 = objc_msgSend(v25, "description");
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = v20;
  *(_QWORD *)(v24 + 32) = v27;
  *(_QWORD *)(v24 + 40) = v29;
  v30 = objc_msgSend(v15, "encryptedValues");
  v31 = objc_msgSend(v30, "allKeys");
  swift_unknownObjectRelease(v30);
  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, &type metadata for String);

  v33 = v15;
  v34 = sub_100101418(v32, v33);
  swift_bridgeObjectRelease(v32);

  v35 = sub_1000A0980(&qword_100210400);
  v36 = Array.description.getter(v34, v35);
  v38 = v37;
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(v24 + 96) = &type metadata for String;
  *(_QWORD *)(v24 + 104) = v20;
  *(_QWORD *)(v24 + 72) = v36;
  *(_QWORD *)(v24 + 80) = v38;
  os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v54, "Creating CKRecord %@ - values: %@", 33, 2, v24);
  v39 = swift_bridgeObjectRelease(v24);
  v40 = v62;
  static Date.now.getter(v39);
  v42 = v60;
  v41 = v61;
  v43 = v56;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v56, v40, v61);
  v44 = *(unsigned __int8 *)(v42 + 80);
  v45 = (v44 + 40) & ~v44;
  v46 = v45 + v7;
  v47 = (v45 + v7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (char *)swift_allocObject(&unk_1001E97C0, v47 + 16, v44 | 7);
  v49 = v59;
  *((_QWORD *)v48 + 2) = v57;
  *((_QWORD *)v48 + 3) = v49;
  *((_QWORD *)v48 + 4) = v4;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v48[v45], v43, v41);
  LOBYTE(v43) = v58 & 1;
  v48[v46] = v58 & 1;
  *(_QWORD *)&v48[v47 + 8] = v33;
  v50 = swift_allocObject(&unk_1001E97E8, 49, 7);
  *(_QWORD *)(v50 + 16) = v4;
  *(_QWORD *)(v50 + 24) = v33;
  *(_QWORD *)(v50 + 32) = sub_100102EB8;
  *(_QWORD *)(v50 + 40) = v48;
  *(_BYTE *)(v50 + 48) = (_BYTE)v43;
  v51 = v33;
  swift_retain_n(v4, 2);
  v52 = v51;
  swift_retain(v49);
  swift_retain(v48);
  sub_1000F7A44((uint64_t)sub_100102F28, v50);
  swift_release(v48);
  swift_release(v50);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v62, v41);
}

void sub_1000F8494(void *a1, char a2, void (*a3)(void *, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(_QWORD, _QWORD);
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t *v69;
  uint64_t v70;
  void (*v71)(void *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(_QWORD, _QWORD);
  uint64_t v90;
  void *v91;
  __int128 v92;
  __int128 v93;
  _QWORD v94[3];
  char v95[8];
  _QWORD v96[3];
  char v97[8];
  uint64_t v98[2];

  v91 = a8;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v19 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    v20 = a1;
    a3(a1, 0);
    sub_1001043D0(v20, a6, a7 & 1, 0);
    sub_100104E50(a1, 0);
    return;
  }
  v87 = v18;
  v88 = a5;
  v89 = (void (*)(_QWORD, _QWORD))a3;
  v90 = a4;
  *(_QWORD *)&v92 = a1;
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  v21 = sub_1000A0980(&qword_100210710);
  type metadata accessor for CKError(0);
  v23 = v22;
  v24 = swift_dynamicCast(v98, &v92, v21, v22, 6);
  if ((_DWORD)v24)
  {
    v86 = a6;
    v25 = (void *)v98[0];
    v26 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
    v27 = _BridgedStoredNSError.code.getter(&v92, v23, v26);
    if ((_QWORD)v92 == 26)
    {
LABEL_5:
      v84 = v25;
      v85 = a7;
      v28 = v91;
      v29 = static os_log_type_t.error.getter(v27);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v30 = qword_100218DD8;
      v31 = os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_100218DD8, "Setting up zone after zoneNotFound error", 40, 2, _swiftEmptyArrayStorage);
      v32 = static os_log_type_t.default.getter(v31);
      os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v30, "Re-attempting created record after creating zone", 48, 2, _swiftEmptyArrayStorage);
      v33 = objc_msgSend(v28, "recordID");
      v34 = objc_msgSend(v33, "zoneID");

      v35 = objc_msgSend(v34, "zoneName");
      v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v82 = v36;

      v37 = swift_allocObject(&unk_1001E9568, 24, 7);
      swift_weakInit(v37 + 16, v88);
      v38 = v87;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v86, v87);
      v39 = *(unsigned __int8 *)(v16 + 80);
      v40 = (v39 + 48) & ~v39;
      v41 = v40 + v17;
      v42 = (char *)swift_allocObject(&unk_1001E99A0, v40 + v17 + 1, v39 | 7);
      v43 = v89;
      *((_QWORD *)v42 + 2) = v37;
      *((_QWORD *)v42 + 3) = v43;
      v44 = v90;
      v45 = v91;
      *((_QWORD *)v42 + 4) = v90;
      *((_QWORD *)v42 + 5) = v45;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v42[v40], v19, v38);
      v42[v41] = v85 & 1;
      swift_retain(v37);
      swift_retain(v44);
      v46 = v45;
      v47 = v82;
      sub_1000F1084(v83, v82, 0, (void (*)(void))sub_1001049B8, (uint64_t)v42);
      swift_bridgeObjectRelease(v47);

      sub_100104E50(a1, 1);
      swift_release(v37);
      swift_release(v42);
      return;
    }
    v98[0] = (uint64_t)v25;
    v57 = _BridgedStoredNSError.userInfo.getter(v23, v26);
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
    v60 = v59;
    if (*(_QWORD *)(v57 + 16) && (v61 = sub_1000AA00C(v58, v59), (v62 & 1) != 0))
    {
      sub_100104A08(*(_QWORD *)(v57 + 56) + 32 * v61, (uint64_t)&v92);
    }
    else
    {
      v92 = 0u;
      v93 = 0u;
    }
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v57);
    if (*((_QWORD *)&v93 + 1))
    {
      v63 = sub_1000A0980(&qword_100211988);
      v64 = swift_dynamicCast(v98, &v92, (char *)&type metadata for Any + 8, v63, 6);
      if ((v64 & 1) == 0)
      {
        v68 = v25;
LABEL_25:
        v70 = static os_log_type_t.error.getter(v64);
        v71 = (void (*)(void *, uint64_t))v89;
        if (qword_1002101D0 != -1)
          swift_once(&qword_1002101D0, sub_1001686F0);
        v72 = qword_100218DD8;
        v73 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v74 = swift_allocObject(v73, 72, 7);
        *(_OWORD *)(v74 + 16) = xmmword_100184870;
        swift_getErrorValue(a1, v95, v94);
        v75 = Error.localizedDescription.getter(v94[1], v94[2]);
        v77 = v76;
        *(_QWORD *)(v74 + 56) = &type metadata for String;
        *(_QWORD *)(v74 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v74 + 32) = v75;
        *(_QWORD *)(v74 + 40) = v77;
        os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v72, "Error saving ck record to cloud - %@", 36, 2, v74);
        swift_bridgeObjectRelease(v74);
        v78 = v68;
        v71(v68, 1);

        v79 = v78;
        sub_1000F2FE4((uint64_t)v79, 0);

        v80 = v79;
        sub_1001043D0(v91, v86, a7 & 1, (uint64_t)v68);

        sub_100104E50(a1, 1);
        return;
      }
      v65 = v98[0];
      sub_1000E6A90(v98[0], (uint64_t)&v92);
      v66 = swift_bridgeObjectRelease(v65);
      if (*((_QWORD *)&v93 + 1))
      {
        v67 = static os_log_type_t.error.getter(v66);
        if (qword_1002101D0 != -1)
          swift_once(&qword_1002101D0, sub_1001686F0);
        os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, qword_100218DD8, "zoneNotFound error in partial errors.", 37, 2, _swiftEmptyArrayStorage);
        v27 = (_QWORD *)sub_1000A1000((uint64_t)&v92, &qword_100211990);
        goto LABEL_5;
      }
      v68 = v25;
      v69 = &qword_100211990;
    }
    else
    {
      v68 = v25;
      v69 = &qword_100211980;
    }
    v64 = sub_1000A1000((uint64_t)&v92, v69);
    goto LABEL_25;
  }
  v48 = a6;
  v49 = v91;
  v50 = static os_log_type_t.error.getter(v24);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v51 = qword_100218DD8;
  v52 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v53 = swift_allocObject(v52, 72, 7);
  *(_OWORD *)(v53 + 16) = xmmword_100184870;
  swift_getErrorValue(a1, v97, v96);
  v54 = Error.localizedDescription.getter(v96[1], v96[2]);
  v56 = v55;
  *(_QWORD *)(v53 + 56) = &type metadata for String;
  *(_QWORD *)(v53 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v53 + 32) = v54;
  *(_QWORD *)(v53 + 40) = v56;
  os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "Error saving record to cloud - %@", 33, 2, v53);
  swift_bridgeObjectRelease(v53);
  swift_errorRetain(a1);
  v89(a1, 1);
  sub_1001043D0(v49, v48, a7 & 1, (uint64_t)a1);
  sub_100104E50(a1, 1);
  sub_100104E50(a1, 1);
}

uint64_t sub_1000F8C50(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t result;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  objc_class *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  objc_class *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  objc_class *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD aBlock[5];
  uint64_t v60;
  char v61[24];

  v58 = a6;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v61, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
  {
    v32 = sub_100102DDC();
    v33 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v32, 0, 0);
    *v34 = 0;
    a3(v33, 1);
    return swift_errorRelease(v33);
  }
  isEscapingClosureAtFileLocation = Strong;
  v57 = a7;
  if (a1)
  {
    v19 = swift_errorRetain(a1);
    v20 = static os_log_type_t.error.getter(v19);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v21 = qword_100218DD8;
    v22 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100184870;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    v24 = sub_1000A0980(&qword_100210710);
    v25 = String.init<A>(describing:)(aBlock, v24);
    v27 = v26;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v23 + 32) = v25;
    *(_QWORD *)(v23 + 40) = v27;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Unable to create zone - %@", 26, 2, v23);
    swift_bridgeObjectRelease(v23);
    v28 = sub_100102DDC();
    v29 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v28, 0, 0);
    *v30 = a1;
    swift_errorRetain(a1);
    a3(v29, 1);
    swift_errorRelease(v29);
    swift_errorRetain(a1);
    sub_1001043D0(a5, v58, v57 & 1, a1);
    swift_release(isEscapingClosureAtFileLocation);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  v35 = sub_1000A0980(&qword_100211998);
  v36 = swift_allocObject(v35, 40, 7);
  *(_OWORD *)(v36 + 16) = xmmword_100187640;
  *(_QWORD *)(v36 + 32) = a5;
  aBlock[0] = v36;
  specialized Array._endMutation()(v36);
  v56 = aBlock[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v58, v13);
  v37 = *(unsigned __int8 *)(v14 + 80);
  v38 = (v37 + 48) & ~v37;
  v39 = v38 + v15;
  v40 = (char *)swift_allocObject(&unk_1001E99C8, v38 + v15 + 1, v37 | 7);
  *((_QWORD *)v40 + 2) = a3;
  *((_QWORD *)v40 + 3) = a4;
  *((_QWORD *)v40 + 4) = isEscapingClosureAtFileLocation;
  *((_QWORD *)v40 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v40[v38], v16, v13);
  v40[v39] = v57 & 1;
  v41 = a5;
  swift_retain(a4);
  swift_retain(isEscapingClosureAtFileLocation);
  v42 = v56;
  v43 = sub_1000F92C0(v56, (uint64_t)sub_100104ACC, (uint64_t)v40);
  swift_release(v40);
  v44 = swift_bridgeObjectRelease(v42);
  if (!v43)
    return swift_release(isEscapingClosureAtFileLocation);
  v45 = static os_log_type_t.default.getter(v44);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v46 = qword_100218DD8;
  v47 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v48 = swift_allocObject(v47, 72, 7);
  *(_OWORD *)(v48 + 16) = xmmword_100184870;
  *(_QWORD *)(v48 + 56) = sub_1000AB31C(0, &qword_1002119A0, CKModifyRecordsOperation_ptr);
  *(_QWORD *)(v48 + 64) = sub_100104B2C(&qword_1002119A8, &qword_1002119A0, CKModifyRecordsOperation_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v48 + 32) = v43;
  v49 = v43;
  os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v46, "[Second Attempt] Adding CloudKit operation for create record %@", 63, 2, v48);
  swift_bridgeObjectRelease(v48);
  v50 = *(NSObject **)(isEscapingClosureAtFileLocation + 64);
  v51 = swift_allocObject(&unk_1001E99F0, 32, 7);
  *(_QWORD *)(v51 + 16) = isEscapingClosureAtFileLocation;
  *(_QWORD *)(v51 + 24) = v49;
  v52 = swift_allocObject(&unk_1001E9A18, 32, 7);
  *(_QWORD *)(v52 + 16) = sub_100105CD4;
  *(_QWORD *)(v52 + 24) = v51;
  aBlock[4] = sub_100105CD8;
  v60 = v52;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A70;
  aBlock[3] = &unk_1001E9A30;
  v53 = _Block_copy(aBlock);
  v54 = v60;
  swift_retain(isEscapingClosureAtFileLocation);
  v55 = v49;
  swift_retain(v52);
  swift_release(v54);
  dispatch_sync(v50, v53);
  swift_release(isEscapingClosureAtFileLocation);

  _Block_release(v53);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v52, "", 123, 1388, 69, 1);
  swift_release(v51);
  result = swift_release(v52);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    return swift_release(isEscapingClosureAtFileLocation);
  }
  return result;
}

void sub_1000F9184(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a3(a1, 1);
    sub_1001043D0(a6, a7, a8 & 1, a1);
    sub_100104C30(a1, 1);
    return;
  }
  if (!((unint64_t)a1 >> 62))
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v13)
      goto LABEL_4;
LABEL_13:
    sub_100104C30(a1, 0);
    __break(1u);
    goto LABEL_14;
  }
  if (a1 >= 0)
    v16 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v16 = a1;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v16))
    goto LABEL_13;
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_14:
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_7;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(a1 + 32);
LABEL_7:
    v15 = v14;
    sub_100104C30(a1, 0);
    a3((uint64_t)v15, 0);

    sub_1001043D0(a6, a7, a8 & 1, 0);
    return;
  }
  __break(1u);
}

objc_class *sub_1000F92C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  id v34;
  objc_class *result;
  objc_class *v36;
  objc_class *v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t aBlock;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  Swift::OpaquePointer_optional v71;
  Swift::OpaquePointer_optional v72;

  v5 = v3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v61 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v59 = *(_QWORD *)(v12 - 8);
  v60 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v63 = a2;
    if (v15)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease(a1);
    v29 = aBlock;
    if ((aBlock & 0x8000000000000000) != 0)
      goto LABEL_33;
    goto LABEL_22;
  }
  if (a1 < 0)
    v30 = a1;
  else
    v30 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v15 = _CocoaArrayWrapper.endIndex.getter(v30);
  v63 = a2;
  if (!v15)
    goto LABEL_21;
LABEL_3:
  if (v15 < 1)
  {
    __break(1u);
    goto LABEL_35;
  }
  v16 = a3;
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v15; ++i)
    {
      v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      v21 = CKRecord.changedKeys()();
      v22 = *(_QWORD *)(v21 + 16);
      swift_bridgeObjectRelease(v21);
      if (v22)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v18 = *(void **)(aBlock + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v20);
        specialized ContiguousArray._endMutation()(v19);
      }
      else
      {
        swift_unknownObjectRelease(v20);
      }
    }
  }
  else
  {
    for (j = 0; j != v15; ++j)
    {
      v26 = *(id *)(a1 + 8 * j + 32);
      v27 = CKRecord.changedKeys()();
      v28 = *(_QWORD *)(v27 + 16);
      swift_bridgeObjectRelease(v27);
      if (v28)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v24 = *(void **)(aBlock + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
        v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v26);
        specialized ContiguousArray._endMutation()(v25);
      }
      else
      {

      }
    }
  }
  swift_bridgeObjectRelease(a1);
  a3 = v16;
  v29 = aBlock;
  if ((aBlock & 0x8000000000000000) != 0)
    goto LABEL_33;
LABEL_22:
  if ((v29 & 0x4000000000000000) == 0)
  {
    v31 = *(_QWORD *)(v29 + 16);
    goto LABEL_24;
  }
LABEL_33:
  v58 = swift_bridgeObjectRetain(v29);
  v31 = _CocoaArrayWrapper.endIndex.getter(v58);
  swift_release(v29);
LABEL_24:
  v32 = swift_release(v29);
  if (!v31)
  {
    v4 = a3;
    a2 = static os_log_type_t.default.getter(v32);
    if (qword_1002101D0 == -1)
    {
LABEL_31:
      v42 = qword_100218DD8;
      v43 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v44 = swift_allocObject(v43, 72, 7);
      *(_OWORD *)(v44 + 16) = xmmword_100184870;
      v45 = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
      v46 = swift_bridgeObjectRetain(a1);
      v47 = Array.description.getter(v46, v45);
      v49 = v48;
      swift_bridgeObjectRelease(a1);
      *(_QWORD *)(v44 + 56) = &type metadata for String;
      *(_QWORD *)(v44 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v44 + 32) = v47;
      *(_QWORD *)(v44 + 40) = v49;
      os_log(_:dso:log:_:_:)(a2, &_mh_execute_header, v42, "No updates in the records. Skipping - %@", 40, 2, v44);
      swift_bridgeObjectRelease(v44);
      v50 = (_QWORD *)swift_allocObject(&unk_1001E9AB8, 40, 7);
      v50[2] = v63;
      v50[3] = v4;
      v50[4] = a1;
      v69 = sub_100104C04;
      v70 = v50;
      aBlock = (unint64_t)_NSConcreteStackBlock;
      v66 = 1107296256;
      v67 = sub_1000E6A24;
      v68 = &unk_1001E9AD0;
      v51 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain(a1);
      v52 = swift_retain(v4);
      static DispatchQoS.unspecified.getter(v52);
      v64 = _swiftEmptyArrayStorage;
      v53 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v54 = sub_1000A0980(&qword_100211D00);
      v55 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
      v56 = v54;
      v57 = v62;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v56, v55, v62, v53);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v51);
      _Block_release(v51);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v57);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v60);
      swift_release(v70);
      return 0;
    }
LABEL_35:
    swift_once(&qword_1002101D0, sub_1001686F0);
    goto LABEL_31;
  }
  sub_1000AB31C(0, &qword_1002119A0, CKModifyRecordsOperation_ptr);
  v71.value._rawValue = (void *)swift_bridgeObjectRetain(a1);
  v71.is_nil = 0;
  v33 = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v71, v72).super.super.super.super.isa;
  v34 = sub_1000E7F7C();
  -[objc_class setGroup:](v33, "setGroup:", v34);

  -[objc_class setCallbackQueue:](v33, "setCallbackQueue:", *(_QWORD *)(v5 + 80));
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
    -[objc_class setQualityOfService:](v33, "setQualityOfService:", 25);
  result = (objc_class *)-[objc_class configuration](v33, "configuration");
  if (result)
  {
    v36 = result;
    -[objc_class setAutomaticallyRetryNetworkFailures:](result, "setAutomaticallyRetryNetworkFailures:", 0);

    result = (objc_class *)-[objc_class configuration](v33, "configuration");
    if (result)
    {
      v37 = result;
      -[objc_class setDiscretionaryNetworkBehavior:](result, "setDiscretionaryNetworkBehavior:", 0);

      v38 = (_QWORD *)swift_allocObject(&unk_1001E9A68, 48, 7);
      v39 = v63;
      v38[2] = a1;
      v38[3] = v39;
      v38[4] = a3;
      v38[5] = v5;
      v69 = sub_100104BB4;
      v70 = v38;
      aBlock = (unint64_t)_NSConcreteStackBlock;
      v66 = 1107296256;
      v67 = sub_1000FA128;
      v68 = &unk_1001E9A80;
      v40 = _Block_copy(&aBlock);
      v41 = v70;
      swift_bridgeObjectRetain(a1);
      swift_retain(a3);
      swift_retain(v5);
      swift_release(v41);
      -[objc_class setModifyRecordsCompletionBlock:](v33, "setModifyRecordsCompletionBlock:", v40);
      _Block_release(v40);
      return v33;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F98F8()
{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  uint64_t v10;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  type metadata accessor for CKError(0);
  v2 = v1;
  v3 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
  _BridgedStoredNSError.code.getter(&v10, v2, v3);
  v4 = (id)stringForCKErrorCode(v10);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  return swift_bridgeObjectRelease(v7);
}

void sub_1000F99B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  void *v34;
  BOOL v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSString v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v66)(uint64_t, _QWORD);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  _QWORD v75[3];
  _BYTE v76[16];

  v6 = a3;
  if (a1)
  {
    if (!a3)
    {
      v8 = static os_log_type_t.default.getter(a1);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v9 = qword_100218DD8;
      v10 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v11 = swift_allocObject(v10, 72, 7);
      *(_OWORD *)(v11 + 16) = xmmword_100184870;
      *(_QWORD *)(v11 + 56) = sub_1000A0980(&qword_1002119B0);
      *(_QWORD *)(v11 + 64) = sub_1000AAD14(&qword_1002119B8, &qword_1002119B0, (uint64_t)&protocol conformance descriptor for [A]);
      *(_QWORD *)(v11 + 32) = a4;
      swift_bridgeObjectRetain(a4);
      os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Records (%@) saved successfully.", 32, 2, v11);
      v12 = swift_bridgeObjectRelease(v11);
      v13 = IsAppleInternalBuild(v12);
      if ((_DWORD)v13)
        v14 = static os_log_type_t.default.getter(v13);
      else
        v14 = static os_log_type_t.debug.getter(v13);
      v62 = v14;
      v64 = qword_100218DD8;
      v63 = swift_allocObject(v10, 72, 7);
      *(_OWORD *)(v63 + 16) = xmmword_100184870;
      if ((unint64_t)a4 >> 62)
      {
        if (a4 < 0)
          v59 = a4;
        else
          v59 = a4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a4);
        v6 = _CocoaArrayWrapper.endIndex.getter(v59);
      }
      else
      {
        v6 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(a4);
      }
      v66 = (void (*)(uint64_t, _QWORD))a5;
      a5 = _swiftEmptyArrayStorage;
      if (!v6)
      {
        v32 = _swiftEmptyArrayStorage;
LABEL_42:
        swift_bridgeObjectRelease(a4);
        v56 = Array.description.getter(v32, &type metadata for String);
        v58 = v57;
        swift_bridgeObjectRelease(v32);
        *(_QWORD *)(v63 + 56) = &type metadata for String;
        *(_QWORD *)(v63 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v63 + 32) = v56;
        *(_QWORD *)(v63 + 40) = v58;
        os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v64, "Update cloud with CKRecords - %@", 32, 2, v63);
        swift_bridgeObjectRelease(v63);
        v66(a1, 0);
        return;
      }
      v31 = 0;
      v69 = v6;
      v70 = a4 & 0xC000000000000001;
      v67 = a4 + 32;
      v68 = a4;
      v32 = _swiftEmptyArrayStorage;
      while (1)
      {
        v33 = v70 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, a4) : *(id *)(v67 + 8 * v31);
        v34 = v33;
        v35 = __OFADD__(v31, 1);
        v36 = v31 + 1;
        if (v35)
          break;
        v71 = v32;
        v72 = v36;
        v37 = objc_msgSend(v33, "encryptedValues");
        v38 = objc_msgSend(v37, "allKeys");
        swift_unknownObjectRelease(v37);
        v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, &type metadata for String);

        v74 = (uint64_t)_swiftEmptyArrayStorage;
        v40 = *(_QWORD *)(v39 + 16);
        if (v40)
        {
          swift_bridgeObjectRetain(v39);
          v41 = (_QWORD *)(v39 + 40);
          do
          {
            v43 = *v41;
            swift_bridgeObjectRetain(*v41);
            v44 = objc_msgSend(v34, "encryptedValues");
            v45 = String._bridgeToObjectiveC()();
            v46 = objc_msgSend(v44, "objectForKeyedSubscript:", v45);
            swift_bridgeObjectRelease(v43);

            v47 = swift_unknownObjectRelease(v44);
            if (v46)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
              v49 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v48 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v49 >= v48 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
              v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v46);
              specialized Array._endMutation()(v42);
            }
            v41 += 2;
            --v40;
          }
          while (v40);
          swift_bridgeObjectRelease(v39);
          a5 = (_QWORD *)v74;
          a4 = v68;
        }
        swift_bridgeObjectRelease(v39);
        v50 = sub_1000A0980(&qword_100210400);
        v51 = Array.description.getter(a5, v50);
        v11 = v52;

        swift_bridgeObjectRelease(a5);
        v32 = v71;
        if ((swift_isUniquelyReferenced_nonNull_native(v71) & 1) == 0)
          v32 = sub_100169644(0, v71[2] + 1, 1, v71);
        a5 = _swiftEmptyArrayStorage;
        v54 = v32[2];
        v53 = v32[3];
        if (v54 >= v53 >> 1)
          v32 = sub_100169644((_QWORD *)(v53 > 1), v54 + 1, 1, v32);
        v32[2] = v54 + 1;
        v55 = &v32[2 * v54];
        v55[4] = v51;
        v55[5] = v11;
        v6 = v69;
        v31 = v72;
        if (v72 == v69)
          goto LABEL_42;
      }
      __break(1u);
      goto LABEL_44;
    }
  }
  else if (!a3)
  {
    v27 = static os_log_type_t.error.getter(0);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_100218DD8, "Record not found in saved records.", 34, 2, _swiftEmptyArrayStorage);
    v28 = sub_100102DDC();
    v29 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v28, 0, 0);
    *v30 = 0;
    ((void (*)(uint64_t, uint64_t))a5)(v29, 1);
    swift_errorRelease(v29);
    return;
  }
  a4 = a1;
  v15 = swift_errorRetain(a3);
  v11 = static os_log_type_t.error.getter(v15);
  if (qword_1002101D0 != -1)
LABEL_44:
    swift_once(&qword_1002101D0, sub_1001686F0);
  v16 = qword_100218DD8;
  v17 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100184870;
  swift_getErrorValue(v6, v76, v75);
  v19 = Error.localizedDescription.getter(v75[1], v75[2]);
  v21 = v20;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v16, "Error saving records. Error - %@", 32, 2, v18);
  swift_bridgeObjectRelease(v18);
  sub_1000F2FE4(v6, 0);
  v74 = v6;
  swift_errorRetain(v6);
  v22 = sub_1000A0980(&qword_100210710);
  type metadata accessor for CKError(0);
  v24 = v23;
  if ((swift_dynamicCast(&v73, &v74, v22, v23, 6) & 1) != 0)
  {
    v25 = v73;
    v26 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
    _BridgedStoredNSError.code.getter(&v74, v24, v26);
    if (v74 == 2 && a4)
    {
      if ((unint64_t)a4 >> 62)
      {
        if (a4 >= 0)
          v60 = a4 & 0xFFFFFFFFFFFFFF8;
        else
          v60 = a4;
        swift_bridgeObjectRetain(a4);
        v61 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease(a4);
        if (v61 >= 2)
          goto LABEL_14;
      }
      else if (*(uint64_t *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2)
      {
LABEL_14:
        ((void (*)(uint64_t, _QWORD))a5)(a4, 0);
        swift_errorRetain(v6);
        ((void (*)(uint64_t, uint64_t))a5)(v6, 1);
        swift_errorRelease(v6);
        swift_errorRelease(v6);

        return;
      }
    }

  }
  swift_errorRetain(v6);
  ((void (*)(uint64_t, uint64_t))a5)(v6, 1);
  swift_errorRelease(v6);
  swift_errorRelease(v6);
}

uint64_t sub_1000FA128(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1000FA14C(a1, a2, a3, a4, (unint64_t *)&qword_1002103F0, CKRecord_ptr, &qword_1002111C0, CKRecordID_ptr);
}

uint64_t sub_1000FA14C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5, _QWORD *a6, unint64_t *a7, _QWORD *a8)
{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, void *);
  uint64_t v15;
  uint64_t v16;
  id v17;

  v12 = a2;
  v14 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v15 = sub_1000AB31C(0, a5, a6);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v15);
  }
  if (a3)
  {
    v16 = sub_1000AB31C(0, a7, a8);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v16);
  }
  swift_retain(v13);
  v17 = a4;
  v14(v12, a3, a4);
  swift_release(v13);

  swift_bridgeObjectRelease(a3);
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_1000FA214(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void (*v13)(_QWORD *);
  void (*v14)(_QWORD *);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  id v49;
  NSString v50;
  id v51;
  NSString v52;
  id v53;
  uint64_t v54;
  id v55;
  NSString v56;
  id v57;
  _QWORD *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  id v74;
  NSString v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void (*v86)(uint64_t *);
  void (*v87)(uint64_t *);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t *);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  void *v119;
  uint64_t v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  id v127;
  uint64_t v128;
  id v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  _OWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  id v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  id v154;
  id v155;
  uint64_t v156;
  id v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v177;
  uint64_t v178;
  id v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  id v185;
  uint64_t v186;
  id v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  void (*v201)(uint64_t *);
  void *v202;
  unsigned int v205;
  _QWORD *v207;
  uint64_t v208;
  id v209;
  id v210;
  id v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  id v216;
  uint64_t v217;
  uint64_t (*v218)(uint64_t);
  uint64_t v219;
  _QWORD v220[4];
  char v221[32];

  v7 = a1 + 120;
  swift_beginAccess(a1 + 120, v221, 0, 0);
  v208 = a1;
  v8 = *(_QWORD *)(a1 + 120);
  v9 = a2;
  v10 = swift_bridgeObjectRetain(v8);
  sub_1001027FC(v10, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease(v8);

  if (v12)
  {
    v17 = sub_100102DDC();
    v18 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v17, 0, 0);
    *v19 = 5;
    v220[0] = v18;
    v14(v220);
    swift_errorRelease(v18);
    swift_beginAccess(v7, v220, 33, 0);
    v20 = sub_1000FED6C((uint64_t)v12, (uint64_t (*)(uint64_t))sub_1000AA144, (uint64_t *)&unk_1002108C0);
    v22 = v21;
    v23 = swift_endAccess(v220);
    if (v20)
      v23 = sub_1000FECF0(v20, v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v25 = qword_100218DD8;
    v26 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v27 = swift_allocObject(v26, 72, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100184870;
    v28 = v12;
    v29 = objc_msgSend(v28, "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    *(_QWORD *)(v27 + 56) = &type metadata for String;
    *(_QWORD *)(v27 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v27 + 32) = v30;
    *(_QWORD *)(v27 + 40) = v32;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Updating cancelled pending record deletion for: %@", 50, 2, v27);
    swift_release(v16);

    swift_bridgeObjectRelease(v27);
  }
  swift_beginAccess(v208 + 112, v220, 0, 0);
  v33 = *(_QWORD *)(v208 + 112);
  v34 = v9;
  v35 = swift_bridgeObjectRetain(v33);
  sub_100101CF4(v35, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  swift_bridgeObjectRelease(v33);

  v207 = (_QWORD *)(v208 + 112);
  if (v37)
  {
    v42 = swift_allocObject(&unk_1001E9900, 32, 7);
    *(_QWORD *)(v42 + 16) = v39;
    *(_QWORD *)(v42 + 24) = v41;
    v200 = v42;
    v209 = v37;
    v43 = objc_msgSend(v37, "encryptedValues");
    v44 = objc_msgSend(v43, "allKeys");
    swift_unknownObjectRelease(v43);
    v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, &type metadata for String);

    v46 = *(_QWORD *)(v45 + 16);
    v212 = v34;
    if (v46)
    {
      v47 = (_QWORD *)(v45 + 40);
      do
      {
        v54 = *v47;
        swift_bridgeObjectRetain(*v47);
        v55 = objc_msgSend(v34, "encryptedValues");
        v56 = String._bridgeToObjectiveC()();
        v57 = objc_msgSend(v55, "objectForKeyedSubscript:", v56);
        swift_unknownObjectRelease(v57);
        swift_unknownObjectRelease(v55);

        if (v57)
        {
          v48 = objc_msgSend(v209, "encryptedValues");
          v49 = objc_msgSend(v34, "encryptedValues");
          v50 = String._bridgeToObjectiveC()();
          v51 = objc_msgSend(v49, "objectForKeyedSubscript:", v50);

          swift_unknownObjectRelease(v49);
          v52 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v54);
          objc_msgSend(v48, "setObject:forKeyedSubscript:", v51, v52);
          v53 = v51;
          v34 = v212;
          swift_unknownObjectRelease(v53);
          swift_unknownObjectRelease(v48);

        }
        else
        {
          swift_bridgeObjectRelease(v54);
        }
        v47 += 2;
        --v46;
      }
      while (v46);
    }
    swift_bridgeObjectRelease(v45);
    v58 = (_QWORD *)swift_allocObject(&unk_1001E9928, 56, 7);
    v58[2] = v209;
    v58[3] = sub_100102FC8;
    v58[4] = v200;
    v58[5] = a3;
    v58[6] = a4;
    v59 = v209;
    swift_retain(v200);
    v60 = swift_retain(a4);
    v61 = static os_log_type_t.default.getter(v60);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v62 = qword_100218DD8;
    v63 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v64 = swift_allocObject(v63, 72, 7);
    *(_OWORD *)(v64 + 16) = xmmword_100184870;
    v65 = swift_allocObject(&unk_1001E9950, 32, 7);
    *(_QWORD *)(v65 + 16) = sub_100102FC8;
    *(_QWORD *)(v65 + 24) = v200;
    v217 = (uint64_t)v59;
    v218 = sub_100102FC4;
    v219 = v65;
    v210 = v59;
    swift_retain(v200);
    v66 = sub_1000A0980(&qword_100211978);
    v67 = String.init<A>(describing:)(&v217, v66);
    v69 = v68;
    *(_QWORD *)(v64 + 56) = &type metadata for String;
    v70 = sub_1000A0DF4();
    *(_QWORD *)(v64 + 64) = v70;
    *(_QWORD *)(v64 + 32) = v67;
    *(_QWORD *)(v64 + 40) = v69;
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Updating existing pending record: %@", 36, 2, v64);
    v71 = swift_bridgeObjectRelease(v64);
    v72 = IsAppleInternalBuild(v71);
    if ((_DWORD)v72)
      v73 = static os_log_type_t.default.getter(v72);
    else
      v73 = static os_log_type_t.debug.getter(v72);
    v205 = v73;
    v119 = v212;
    v214 = qword_100218DD8;
    v120 = swift_allocObject(v63, 112, 7);
    *(_OWORD *)(v120 + 16) = xmmword_1001858F0;
    v121 = objc_msgSend(v119, "recordID");
    v122 = objc_msgSend(v121, "description");
    v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
    v125 = v124;

    *(_QWORD *)(v120 + 56) = &type metadata for String;
    *(_QWORD *)(v120 + 64) = v70;
    *(_QWORD *)(v120 + 32) = v123;
    *(_QWORD *)(v120 + 40) = v125;
    v126 = objc_msgSend(v119, "encryptedValues");
    v127 = objc_msgSend(v126, "allKeys");
    swift_unknownObjectRelease(v126);
    v128 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v127, &type metadata for String);

    v129 = v119;
    v130 = sub_100101418(v128, v129);
    swift_bridgeObjectRelease(v128);

    v131 = sub_1000A0980(&qword_100210400);
    v132 = Array.description.getter(v130, v131);
    v134 = v133;
    swift_bridgeObjectRelease(v130);
    *(_QWORD *)(v120 + 96) = &type metadata for String;
    *(_QWORD *)(v120 + 104) = v70;
    *(_QWORD *)(v120 + 72) = v132;
    *(_QWORD *)(v120 + 80) = v134;
    os_log(_:dso:log:_:_:)(v205, &_mh_execute_header, v214, "Updating existing pending CKRecord %@ - %@", 42, 2, v120);
    swift_bridgeObjectRelease(v120);
    v135 = swift_allocObject(&unk_1001E9978, 32, 7);
    *(_QWORD *)(v135 + 16) = sub_100103004;
    *(_QWORD *)(v135 + 24) = v58;
    swift_beginAccess(v207, &v217, 33, 0);
    swift_retain(v58);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v207);
    v216 = (id)*v207;
    *v207 = 0x8000000000000000;
    v137 = sub_100100BC0((uint64_t)sub_100102FC4, v135, v210, isUniquelyReferenced_nonNull_native, (uint64_t (*)(void *))sub_1000AA0F8, &qword_100211970, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
    v139 = v138;
    v140 = *v207;
    *v207 = v216;
    swift_bridgeObjectRelease(v140);
    swift_endAccess(&v217);
    swift_release(v200);

    v141 = swift_release(v58);
    if (v137)
    {
LABEL_31:
      v142 = a5;
      v143 = (_OWORD *)&unk_100185000;
      v141 = sub_1000FECF0(v137, v139);
      goto LABEL_37;
    }
  }
  else
  {
    v74 = objc_msgSend(v34, "encryptedValues");
    v75 = String._bridgeToObjectiveC()();
    v76 = objc_msgSend(v74, "objectForKeyedSubscript:", v75);
    swift_unknownObjectRelease(v74);

    if (!v76)
      goto LABEL_27;
    v216 = v76;
    v78 = sub_1000A0980(&qword_100210400);
    v77 = swift_dynamicCast(&v217, &v216, v78, &type metadata for String, 6);
    if ((v77 & 1) == 0)
      goto LABEL_27;
    v79 = v217;
    v80 = (uint64_t)v218;
    v81 = *(_QWORD *)(v208 + 112);
    v82 = v34;
    swift_bridgeObjectRetain(v80);
    v83 = swift_bridgeObjectRetain(v81);
    sub_100101FCC(v83, v79, v80);
    v85 = v84;
    v87 = (void (*)(uint64_t *))v86;
    v89 = v88;
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease_n(v80, 2);

    if (v85)
    {
      v211 = (id)v78;
      v90 = swift_allocObject(&unk_1001E9888, 32, 7);
      v91 = v87;
      v92 = v90;
      v201 = v91;
      *(_QWORD *)(v90 + 16) = v91;
      *(_QWORD *)(v90 + 24) = v89;
      v93 = swift_retain(v89);
      v199 = static os_log_type_t.default.getter(v93);
      v213 = v89;
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v196 = qword_100218DD8;
      v198 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v94 = swift_allocObject(v198, 112, 7);
      *(_OWORD *)(v94 + 16) = xmmword_1001858F0;
      v95 = swift_allocObject(&unk_1001E98B0, 32, 7);
      *(_QWORD *)(v95 + 16) = sub_100102FC8;
      *(_QWORD *)(v95 + 24) = v92;
      v217 = (uint64_t)v85;
      v218 = sub_100102FC4;
      v219 = v95;
      v96 = v85;
      swift_retain(v92);
      v97 = sub_1000A0980(&qword_100211978);
      v98 = String.init<A>(describing:)(&v217, v97);
      v100 = v99;
      v101 = v92;
      *(_QWORD *)(v94 + 56) = &type metadata for String;
      v102 = sub_1000A0DF4();
      *(_QWORD *)(v94 + 64) = v102;
      *(_QWORD *)(v94 + 32) = v98;
      *(_QWORD *)(v94 + 40) = v100;
      v103 = v82;
      v104 = objc_msgSend(v103, "description");
      v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
      v107 = v106;

      *(_QWORD *)(v94 + 96) = &type metadata for String;
      *(_QWORD *)(v94 + 104) = v102;
      *(_QWORD *)(v94 + 72) = v105;
      *(_QWORD *)(v94 + 80) = v107;
      os_log(_:dso:log:_:_:)(v199, &_mh_execute_header, v196, "Updating existing pending record %@ with same bluetooth address with: %@", 72, 2, v94);
      swift_bridgeObjectRelease(v94);
      v108 = sub_100102DDC();
      v109 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v108, 0, 0);
      *v110 = 5;
      v217 = v109;
      LOBYTE(v218) = 1;
      swift_retain(v101);
      v201(&v217);
      swift_errorRelease(v109);
      swift_release(v101);
      swift_beginAccess(v207, &v217, 33, 0);
      v202 = v96;
      v111 = sub_1000FED6C((uint64_t)v96, (uint64_t (*)(uint64_t))sub_1000AA0F8, &qword_100211970);
      v113 = v112;
      v114 = swift_endAccess(&v217);
      if (v111)
        v114 = sub_1000FECF0(v111, v113);
      v115 = IsAppleInternalBuild(v114);
      if ((_DWORD)v115)
        v116 = static os_log_type_t.default.getter(v115);
      else
        v116 = static os_log_type_t.debug.getter(v115);
      v177 = v116;
      v197 = qword_100218DD8;
      v178 = swift_allocObject(v198, 112, 7);
      *(_OWORD *)(v178 + 16) = xmmword_1001858F0;
      v179 = objc_msgSend(v103, "recordID");
      v180 = objc_msgSend(v179, "description");
      v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v180);
      v183 = v182;

      *(_QWORD *)(v178 + 56) = &type metadata for String;
      *(_QWORD *)(v178 + 64) = v102;
      *(_QWORD *)(v178 + 32) = v181;
      *(_QWORD *)(v178 + 40) = v183;
      v184 = objc_msgSend(v103, "encryptedValues");
      v185 = objc_msgSend(v184, "allKeys");
      swift_unknownObjectRelease(v184);
      v186 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v185, &type metadata for String);

      v187 = v103;
      v188 = sub_100101418(v186, v187);
      swift_bridgeObjectRelease(v186);

      v189 = Array.description.getter(v188, v211);
      v191 = v190;
      swift_bridgeObjectRelease(v188);
      *(_QWORD *)(v178 + 96) = &type metadata for String;
      *(_QWORD *)(v178 + 104) = v102;
      *(_QWORD *)(v178 + 72) = v189;
      *(_QWORD *)(v178 + 80) = v191;
      os_log(_:dso:log:_:_:)(v177, &_mh_execute_header, v197, "Updating existing pending CKRecord %@ - %@", 42, 2, v178);
      swift_bridgeObjectRelease(v178);
      v192 = swift_allocObject(&unk_1001E98D8, 32, 7);
      *(_QWORD *)(v192 + 16) = a3;
      *(_QWORD *)(v192 + 24) = a4;
      swift_beginAccess(v207, &v217, 33, 0);
      swift_retain(a4);
      v193 = swift_isUniquelyReferenced_nonNull_native(*v207);
      v216 = (id)*v207;
      *v207 = 0x8000000000000000;
      v137 = sub_100100BC0((uint64_t)sub_100102FC4, v192, v187, v193, (uint64_t (*)(void *))sub_1000AA0F8, &qword_100211970, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
      v139 = v194;
      v195 = *v207;
      *v207 = v216;
      swift_bridgeObjectRelease(v195);
      swift_endAccess(&v217);
      swift_release(v213);
      swift_release(v101);

      if (v137)
        goto LABEL_31;
    }
    else
    {
LABEL_27:
      v117 = IsAppleInternalBuild(v77);
      if ((_DWORD)v117)
        v118 = static os_log_type_t.default.getter(v117);
      else
        v118 = static os_log_type_t.debug.getter(v117);
      v215 = v118;
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v144 = qword_100218DD8;
      v145 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v146 = swift_allocObject(v145, 112, 7);
      *(_OWORD *)(v146 + 16) = xmmword_1001858F0;
      v147 = objc_msgSend(v34, "recordID");
      v148 = objc_msgSend(v147, "description");
      v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
      v150 = v34;
      v152 = v151;

      *(_QWORD *)(v146 + 56) = &type metadata for String;
      v153 = sub_1000A0DF4();
      *(_QWORD *)(v146 + 64) = v153;
      *(_QWORD *)(v146 + 32) = v149;
      *(_QWORD *)(v146 + 40) = v152;
      v154 = objc_msgSend(v150, "encryptedValues");
      v155 = objc_msgSend(v154, "allKeys");
      swift_unknownObjectRelease(v154);
      v156 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v155, &type metadata for String);

      v157 = v150;
      v158 = sub_100101418(v156, v157);
      swift_bridgeObjectRelease(v156);

      v159 = sub_1000A0980(&qword_100210400);
      v160 = Array.description.getter(v158, v159);
      v162 = v161;
      swift_bridgeObjectRelease(v158);
      *(_QWORD *)(v146 + 96) = &type metadata for String;
      *(_QWORD *)(v146 + 104) = v153;
      *(_QWORD *)(v146 + 72) = v160;
      *(_QWORD *)(v146 + 80) = v162;
      os_log(_:dso:log:_:_:)(v215, &_mh_execute_header, v144, "Staging pending CKRecord %@ - %@", 32, 2, v146);
      swift_bridgeObjectRelease(v146);
      v163 = swift_allocObject(&unk_1001E9860, 32, 7);
      *(_QWORD *)(v163 + 16) = a3;
      *(_QWORD *)(v163 + 24) = a4;
      swift_beginAccess(v207, &v217, 33, 0);
      swift_retain(a4);
      v164 = swift_isUniquelyReferenced_nonNull_native(*v207);
      v216 = (id)*v207;
      *v207 = 0x8000000000000000;
      v137 = sub_100100BC0((uint64_t)sub_100102FC4, v163, v157, v164, (uint64_t (*)(void *))sub_1000AA0F8, &qword_100211970, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
      v139 = v165;
      v166 = *v207;
      *v207 = v216;
      swift_bridgeObjectRelease(v166);
      v141 = swift_endAccess(&v217);
      if (v137)
        goto LABEL_31;
    }
  }
  v142 = a5;
  v143 = &unk_100185000;
LABEL_37:
  v167 = static os_log_type_t.default.getter(v141);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v168 = qword_100218DD8;
  v169 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v170 = swift_allocObject(v169, 112, 7);
  *(_OWORD *)(v170 + 16) = v143[143];
  v171 = *(_QWORD *)(v208 + 112);
  v172 = *(_QWORD *)(v171 + 16);
  *(_QWORD *)(v170 + 56) = &type metadata for Int;
  *(_QWORD *)(v170 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v170 + 32) = v172;
  v173 = swift_bridgeObjectRetain(v171);
  sub_1000E6EB8(v173);
  v175 = v174;
  swift_bridgeObjectRelease(v171);
  *(_QWORD *)(v170 + 96) = sub_1000A0980(&qword_100210740);
  *(_QWORD *)(v170 + 104) = sub_1000AAD14(&qword_100211960, &qword_100210740, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v170 + 72) = v175;
  os_log(_:dso:log:_:_:)(v167, &_mh_execute_header, v168, "Pending records[%d]: %@", 23, 2, v170);
  swift_bridgeObjectRelease(v170);
  return sub_1000E9504(v142 & 1);
}

uint64_t sub_1000FB304@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(id *)a1;
  swift_retain(v3);
  v5 = objc_msgSend(v4, "recordID");
  v6 = objc_msgSend(v5, "recordName");

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = 58;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11 = v9;
  v12 = v4;
  v13 = CKRecord.recordType.getter(v12);
  v15 = v14;

  v29 = v7;
  v30 = v11;
  swift_bridgeObjectRetain(v11);
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRetain(v11);
  v17._countAndFlagsBits = 58;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_release(v3);
  swift_bridgeObjectRelease(v11);
  v19 = v7;
  v18 = v11;
  v20 = objc_msgSend(v12, "encryptedValues");

  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "objectForKeyedSubscript:", v21);
  swift_unknownObjectRelease(v20);

  if (v22
    && (v31 = v22,
        v23 = sub_1000A0980(&qword_100210400),
        swift_dynamicCast(&v29, &v31, v23, &type metadata for String, 6)))
  {
    v24 = v29;
    v25 = v30;
  }
  else
  {
    v25 = (void *)0xE200000000000000;
    v24 = 15932;
  }
  v29 = v19;
  v30 = v18;
  swift_bridgeObjectRetain(v18);
  v26._countAndFlagsBits = v24;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  result = swift_bridgeObjectRelease(v18);
  v28 = (uint64_t)v30;
  *a2 = v29;
  a2[1] = v28;
  return result;
}

uint64_t sub_1000FB53C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, char a7)
{
  return sub_1000FB574(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_1001E96D0, (uint64_t)sub_1000FED60, (uint64_t)&unk_1001E96E8);
}

uint64_t sub_1000FB574(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v30[0] = a10;
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v19 - 8);
  v32 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[1] = *(_QWORD *)(a3 + 72);
  v22 = swift_allocObject(a8, 49, 7);
  *(_QWORD *)(v22 + 16) = a3;
  *(_QWORD *)(v22 + 24) = a4;
  *(_QWORD *)(v22 + 32) = a5;
  *(_QWORD *)(v22 + 40) = a6;
  *(_BYTE *)(v22 + 48) = a7;
  aBlock[4] = a9;
  v36 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = v30[0];
  v23 = _Block_copy(aBlock);
  swift_retain(a3);
  v24 = a4;
  v25 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v25);
  v34 = _swiftEmptyArrayStorage;
  v26 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_1000A0980(&qword_100211D00);
  v28 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v27, v28, v16, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v18, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v16);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v32);
  return swift_release(v36);
}

uint64_t sub_1000FB784(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void (*v13)(uint64_t *);
  void (*v14)(uint64_t *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[24];
  uint64_t v85;
  char v86;
  char v87[24];

  v6 = a1;
  v7 = a1 + 112;
  swift_beginAccess(a1 + 112, v87, 0, 0);
  v8 = *(_QWORD *)(v6 + 112);
  v9 = a2;
  v10 = swift_bridgeObjectRetain(v8);
  sub_100102344(v10, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease(v8);

  v81 = v6;
  if (v12)
  {
    v77 = v14;
    v18 = v16;
    v19 = static os_log_type_t.default.getter(v17);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v20 = qword_100218DD8;
    v21 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100184870;
    v23 = v12;
    v24 = objc_msgSend(v23, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v22 + 32) = v25;
    *(_QWORD *)(v22 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Removing pending update for record: %@", 38, 2, v22);
    swift_bridgeObjectRelease(v22);
    v28 = sub_100102DDC();
    v29 = swift_allocError(&type metadata for CloudCoordinator.CloudCoordinatorError, v28, 0, 0);
    *v30 = 5;
    v85 = v29;
    v86 = 1;
    v77(&v85);
    swift_errorRelease(v29);
    swift_beginAccess(v7, &v85, 33, 0);
    v31 = sub_1000FED6C((uint64_t)v23, (uint64_t (*)(uint64_t))sub_1000AA0F8, &qword_100211970);
    v33 = v32;
    swift_endAccess(&v85);
    swift_release(v18);

    v6 = v81;
    if (v31)
      sub_1000FECF0(v31, v33);
  }
  v34 = (_QWORD *)(v6 + 120);
  swift_beginAccess(v6 + 120, &v85, 0, 0);
  v35 = *(_QWORD *)(v6 + 120);
  v36 = v9;
  v37 = swift_bridgeObjectRetain(v35);
  sub_100102AB0(v37, v36);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  swift_bridgeObjectRelease(v35);

  if (v39)
  {
    v44 = swift_allocObject(&unk_1001E9748, 32, 7);
    *(_QWORD *)(v44 + 16) = v41;
    *(_QWORD *)(v44 + 24) = v43;
    v45 = (_QWORD *)swift_allocObject(&unk_1001E9770, 56, 7);
    v45[2] = v39;
    v45[3] = sub_100102D68;
    v45[4] = v44;
    v45[5] = a3;
    v45[6] = a4;
    swift_retain(a4);
    v46 = v39;
    v47 = swift_retain(v44);
    v48 = static os_log_type_t.default.getter(v47);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v49 = qword_100218DD8;
    v50 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v51 = swift_allocObject(v50, 72, 7);
    *(_OWORD *)(v51 + 16) = xmmword_100184870;
    v52 = v46;
    v53 = objc_msgSend(v52, "description");
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

    *(_QWORD *)(v51 + 56) = &type metadata for String;
    *(_QWORD *)(v51 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v51 + 32) = v54;
    *(_QWORD *)(v51 + 40) = v56;
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "Updating existing pending record: %@", 36, 2, v51);
    swift_bridgeObjectRelease(v51);
    v57 = swift_allocObject(&unk_1001E9798, 32, 7);
    *(_QWORD *)(v57 + 16) = sub_100102D9C;
    *(_QWORD *)(v57 + 24) = v45;
    swift_beginAccess(v34, v84, 33, 0);
    swift_retain(v45);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
    v82 = *v34;
    *v34 = 0x8000000000000000;
    v59 = sub_100100BC0((uint64_t)sub_100105CE0, v57, v52, isUniquelyReferenced_nonNull_native, (uint64_t (*)(void *))sub_1000AA144, (uint64_t *)&unk_1002108C0, &qword_1002111C0, CKRecordID_ptr);
    v61 = v60;
    v62 = *v34;
    *v34 = v82;
    swift_bridgeObjectRelease(v62);
    swift_endAccess(v84);
    swift_release(v44);

    v63 = swift_release(v45);
    v6 = v81;
    if (v59)
      goto LABEL_10;
  }
  else
  {
    v73 = swift_allocObject(&unk_1001E9720, 32, 7);
    *(_QWORD *)(v73 + 16) = a3;
    *(_QWORD *)(v73 + 24) = a4;
    swift_beginAccess(v6 + 120, v84, 33, 0);
    swift_retain(a4);
    v74 = swift_isUniquelyReferenced_nonNull_native(*v34);
    v83 = *v34;
    *v34 = 0x8000000000000000;
    v59 = sub_100100BC0((uint64_t)sub_100102D44, v73, v36, v74, (uint64_t (*)(void *))sub_1000AA144, (uint64_t *)&unk_1002108C0, &qword_1002111C0, CKRecordID_ptr);
    v61 = v75;
    v76 = *v34;
    *v34 = v83;
    swift_bridgeObjectRelease(v76);
    v63 = swift_endAccess(v84);
    if (v59)
LABEL_10:
      v63 = sub_1000FECF0(v59, v61);
  }
  v64 = static os_log_type_t.default.getter(v63);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v65 = qword_100218DD8;
  v66 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v67 = swift_allocObject(v66, 112, 7);
  *(_OWORD *)(v67 + 16) = xmmword_1001858F0;
  v68 = *(_QWORD *)(v6 + 120);
  v69 = *(_QWORD *)(v68 + 16);
  *(_QWORD *)(v67 + 56) = &type metadata for Int;
  *(_QWORD *)(v67 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v67 + 32) = v69;
  v70 = swift_bridgeObjectRetain(v68);
  v71 = sub_1000E713C(v70);
  swift_bridgeObjectRelease(v68);
  *(_QWORD *)(v67 + 96) = sub_1000A0980(&qword_100210740);
  *(_QWORD *)(v67 + 104) = sub_1000AAD14(&qword_100211960, &qword_100210740, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v67 + 72) = v71;
  os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Pending deletion for records[%d]: %@", 36, 2, v67);
  swift_bridgeObjectRelease(v67);
  return sub_1000E9504(a5 & 1);
}

uint64_t sub_1000FBDF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSPredicate *v15;
  Swift::String v16;
  Class isa;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *queue;
  id v28;
  uint64_t v34;
  void (*v35)();
  _QWORD aBlock[5];
  uint64_t v37;

  v7 = *(_QWORD *)(result + 16);
  if (v7)
  {
    v8 = result;
    sub_1000AB31C(0, &qword_100211938, CKQuery_ptr);
    v9 = objc_opt_self(NSPredicate);
    queue = *(NSObject **)(v6 + 64);
    v28 = (id)v9;
    swift_bridgeObjectRetain(v8);
    v34 = 0;
    v35 = 0;
    v10 = v7 - 1;
    v26 = v8;
    v11 = (_QWORD *)(v8 + 40);
    v12 = v6;
    while (1)
    {
      v13 = *(v11 - 1);
      v14 = (void *)*v11;
      swift_bridgeObjectRetain_n(*v11, 2);
      v15 = (NSPredicate *)objc_msgSend(v28, "predicateWithValue:", 1);
      v16._countAndFlagsBits = v13;
      v16._object = v14;
      isa = CKQuery.init(recordType:predicate:)(v16, v15).super.isa;
      v18 = objc_msgSend(objc_allocWithZone((Class)CKQueryOperation), "initWithQuery:", isa);
      objc_msgSend(v18, "setZoneID:", a2);
      v19 = swift_allocObject(&unk_1001E9568, 24, 7);
      swift_weakInit(v19 + 16, v12);
      v20 = (_QWORD *)swift_allocObject(&unk_1001E95E0, 72, 7);
      v20[2] = a3;
      v20[3] = a4;
      v20[4] = a5;
      v20[5] = a6;
      v20[6] = v19;
      v20[7] = v13;
      v20[8] = v14;
      sub_1000FEBE0(a3, a4, a5, a6);
      swift_retain(v19);
      CKQueryOperation.recordMatchedBlock.setter(sub_1000FECA0, v20);
      swift_release(v19);
      v21 = swift_allocObject(&unk_1001E9608, 32, 7);
      *(_QWORD *)(v21 + 16) = v12;
      *(_QWORD *)(v21 + 24) = v18;
      swift_retain(v12);
      v22 = v18;
      sub_1000FECF0((uint64_t)v35, v34);
      v23 = swift_allocObject(&unk_1001E9630, 32, 7);
      *(_QWORD *)(v23 + 16) = sub_1000FECD8;
      *(_QWORD *)(v23 + 24) = v21;
      aBlock[4] = sub_1000FED10;
      v37 = v23;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000E6A70;
      aBlock[3] = &unk_1001E9648;
      v24 = _Block_copy(aBlock);
      v25 = v37;
      swift_retain(v23);
      swift_release(v25);
      dispatch_sync(queue, v24);

      _Block_release(v24);
      LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v23, "", 123, 1581, 29, 1);
      result = swift_release(v23);
      if ((v22 & 1) != 0)
        break;
      if (!v10)
      {
        swift_release(v21);
        return swift_bridgeObjectRelease(v26);
      }
      v11 += 2;
      --v10;
      v34 = v21;
      v35 = sub_1000FECD8;
    }
    __break(1u);
  }
  return result;
}

void sub_1000FC0BC(void *a1, void **a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  char v39;
  void **v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t Strong;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  void **aBlock;
  uint64_t v69;
  void (*v70)(uint64_t, void *, void *);
  void *v71;
  uint64_t (*v72)(void *, void *);
  uint64_t v73;
  _QWORD v74[3];

  if ((a3 & 1) != 0)
  {
    v24 = swift_errorRetain(a2);
    v25 = static os_log_type_t.error.getter(v24);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v26 = qword_100218DD8;
    v27 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v28 = swift_allocObject(v27, 112, 7);
    *(_OWORD *)(v28 + 16) = xmmword_1001858F0;
    v29 = a1;
    v30 = objc_msgSend(v29, "description");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    *(_QWORD *)(v28 + 56) = &type metadata for String;
    v34 = sub_1000A0DF4();
    *(_QWORD *)(v28 + 64) = v34;
    *(_QWORD *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v33;
    aBlock = a2;
    swift_errorRetain(a2);
    v35 = sub_1000A0980(&qword_100210710);
    v36 = String.init<A>(describing:)(&aBlock, v35);
    *(_QWORD *)(v28 + 96) = &type metadata for String;
    *(_QWORD *)(v28 + 104) = v34;
    *(_QWORD *)(v28 + 72) = v36;
    *(_QWORD *)(v28 + 80) = v37;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "error querying the record to delete: %@: %@", 43, 2, v28);
    swift_bridgeObjectRelease(v28);
    v38 = a2;
    v39 = 1;
    goto LABEL_11;
  }
  v14 = a10;
  if (!a5)
  {
    v40 = a2;
LABEL_18:
    v49 = a8 + 16;
    v50 = static os_log_type_t.default.getter(v40);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v51 = qword_100218DD8;
    v52 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v53 = swift_allocObject(v52, 72, 7);
    *(_OWORD *)(v53 + 16) = xmmword_100184870;
    v54 = a1;
    v55 = objc_msgSend(v54, "description");
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v58 = v57;

    *(_QWORD *)(v53 + 56) = &type metadata for String;
    *(_QWORD *)(v53 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v53 + 32) = v56;
    *(_QWORD *)(v53 + 40) = v58;
    os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "CloudSync: Attempting to delete record: %@", 42, 2, v53);
    swift_bridgeObjectRelease(v53);
    swift_beginAccess(v49, v74, 0, 0);
    Strong = swift_weakLoadStrong(v49);
    if (Strong)
    {
      v60 = Strong;
      v61 = sub_1000E7CF8(Strong);
      v62 = objc_msgSend(v61, "privateCloudDatabase");
      swift_release(v60);

      v63 = swift_allocObject(&unk_1001E9680, 32, 7);
      *(_QWORD *)(v63 + 16) = a9;
      *(_QWORD *)(v63 + 24) = v14;
      v72 = sub_1000FED54;
      v73 = v63;
      aBlock = _NSConcreteStackBlock;
      v69 = 1107296256;
      v70 = sub_1000F713C;
      v71 = &unk_1001E9698;
      v64 = _Block_copy(&aBlock);
      v65 = v73;
      swift_bridgeObjectRetain(v14);
      swift_release(v65);
      objc_msgSend(v62, "deleteRecordWithID:completionHandler:", v54, v64);
      sub_100104E50(a2, 0);
      _Block_release(v64);

      return;
    }
    v38 = a2;
    v39 = 0;
LABEL_11:
    sub_100104E50(v38, v39);
    return;
  }
  sub_1000FEC54(a2, 0);
  sub_1000FEBE0(a4, a5, a6, a7);
  v18 = objc_msgSend(a2, "encryptedValues");
  swift_bridgeObjectRetain(a5);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  v20 = objc_msgSend(v18, "objectForKeyedSubscript:", v19);
  swift_unknownObjectRelease(v18);

  if (!v20)
  {
    sub_100104E50(a2, 0);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a5);
    return;
  }
  v74[0] = v20;
  v21 = sub_1000A0980(&qword_100210400);
  if ((swift_dynamicCast(&aBlock, v74, v21, &type metadata for String, 6) & 1) != 0)
  {
    v22 = v69;
    if (aBlock == (void **)a6 && v69 == a7)
    {
      v23 = swift_bridgeObjectRelease(v69);
LABEL_15:
      v67 = static os_log_type_t.default.getter(v23);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v66 = qword_100218DD8;
      v42 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v43 = swift_allocObject(v42, 152, 7);
      *(_OWORD *)(v43 + 16) = xmmword_100187620;
      *(_QWORD *)(v43 + 56) = &type metadata for String;
      v44 = sub_1000A0DF4();
      *(_QWORD *)(v43 + 32) = a4;
      *(_QWORD *)(v43 + 40) = a5;
      *(_QWORD *)(v43 + 96) = &type metadata for String;
      *(_QWORD *)(v43 + 104) = v44;
      *(_QWORD *)(v43 + 64) = v44;
      *(_QWORD *)(v43 + 72) = a6;
      *(_QWORD *)(v43 + 80) = a7;
      v45 = objc_msgSend(a2, "description");
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

      sub_100104E50(a2, 0);
      *(_QWORD *)(v43 + 136) = &type metadata for String;
      *(_QWORD *)(v43 + 144) = v44;
      *(_QWORD *)(v43 + 112) = v46;
      *(_QWORD *)(v43 + 120) = v48;
      os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v66, "CloudSync: Found %@ to delete record: %@: %@", 44, 2, v43);
      v40 = (void **)swift_bridgeObjectRelease(v43);
      v14 = a10;
      goto LABEL_18;
    }
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(aBlock, v69, a6, a7, 0);
    v23 = swift_bridgeObjectRelease(v22);
    if ((v41 & 1) != 0)
      goto LABEL_15;
  }
  sub_100104E50(a2, 0);
  swift_bridgeObjectRelease(a7);
  swift_bridgeObjectRelease(a5);
}

uint64_t sub_1000FC68C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  if (a2)
  {
    v6 = swift_errorRetain(a2);
    v7 = static os_log_type_t.error.getter(v6);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v8 = qword_100218DD8;
    v9 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v10 = swift_allocObject(v9, 112, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1001858F0;
    v32 = a1;
    v11 = a1;
    v12 = sub_1000A0980((uint64_t *)&unk_100211950);
    v13 = String.init<A>(describing:)(&v32, v12);
    v15 = v14;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    v16 = sub_1000A0DF4();
    *(_QWORD *)(v10 + 64) = v16;
    *(_QWORD *)(v10 + 32) = v13;
    *(_QWORD *)(v10 + 40) = v15;
    v32 = a2;
    swift_errorRetain(a2);
    v17 = sub_1000A0980(&qword_100210710);
    v18 = String.init<A>(describing:)(&v32, v17);
    *(_QWORD *)(v10 + 96) = &type metadata for String;
    *(_QWORD *)(v10 + 104) = v16;
    *(_QWORD *)(v10 + 72) = v18;
    *(_QWORD *)(v10 + 80) = v19;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "CloudSync: error deleting the recordID: %@: %@", 46, 2, v10);
    swift_bridgeObjectRelease(v10);
    return swift_errorRelease(a2);
  }
  else
  {
    v23 = static os_log_type_t.default.getter(a1);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v24 = qword_100218DD8;
    v25 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v26 = swift_allocObject(v25, 112, 7);
    *(_OWORD *)(v26 + 16) = xmmword_1001858F0;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    v27 = sub_1000A0DF4();
    *(_QWORD *)(v26 + 64) = v27;
    *(_QWORD *)(v26 + 32) = a3;
    *(_QWORD *)(v26 + 40) = a4;
    v32 = a1;
    v28 = a1;
    swift_bridgeObjectRetain(a4);
    v29 = sub_1000A0980((uint64_t *)&unk_100211950);
    v30 = String.init<A>(describing:)(&v32, v29);
    *(_QWORD *)(v26 + 96) = &type metadata for String;
    *(_QWORD *)(v26 + 104) = v27;
    *(_QWORD *)(v26 + 72) = v30;
    *(_QWORD *)(v26 + 80) = v31;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "CloudSync: Deleted record Type: %@: %@", 38, 2, v26);
    return swift_bridgeObjectRelease(v26);
  }
}

void sub_1000FC8C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_1000FC93C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_1000E7CF8(a1);
  v4 = objc_msgSend(v3, "privateCloudDatabase");

  objc_msgSend(v4, "addOperation:", a2);
}

uint64_t sub_1000FC9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  dispatch_group_t v34;
  NSPredicate *v35;
  Swift::String v36;
  Class isa;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  dispatch_group_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  dispatch_group_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD aBlock[5];
  _QWORD *v86;
  char v87[32];

  v78 = a8;
  v79 = a6;
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v87, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v81 = result;
    v71 = v22;
    v72 = v20;
    v70 = a11;
    v24 = a10;
    v80 = dispatch_group_create();
    v25 = swift_allocObject(&unk_1001E94F0, 24, 7);
    *(_QWORD *)(v25 + 16) = _swiftEmptyArrayStorage;
    v26 = a4;
    v27 = *(_QWORD *)(a4 + 16);
    v82 = v25;
    if (v27)
    {
      v64 = a10;
      v66 = v19;
      v67 = v18;
      v68 = v16;
      v69 = v15;
      v77 = a9;
      v76 = sub_1000AB31C(0, &qword_100211938, CKQuery_ptr);
      v75 = (id)objc_opt_self(NSPredicate);
      swift_bridgeObjectRetain(v26);
      v28 = 0;
      v65 = v26;
      v29 = (_QWORD *)(v26 + 40);
      v74 = a7;
      v73 = a5;
      v30 = v79;
      do
      {
        v83 = v28;
        v31 = *(v29 - 1);
        v32 = (void *)*v29;
        swift_bridgeObjectRetain(*v29);
        v33 = v27;
        v34 = v80;
        dispatch_group_enter(v80);
        v35 = (NSPredicate *)objc_msgSend(v75, "predicateWithValue:", 1);
        v36._countAndFlagsBits = v31;
        v36._object = v32;
        isa = CKQuery.init(recordType:predicate:)(v36, v35).super.isa;
        v38 = objc_msgSend(objc_allocWithZone((Class)CKQueryOperation), "initWithQuery:", isa);
        objc_msgSend(v38, "setZoneID:", v73);
        v39 = (_QWORD *)swift_allocObject(&unk_1001E9518, 56, 7);
        v40 = v74;
        v39[2] = v30;
        v39[3] = v40;
        v41 = v77;
        v42 = v78;
        v39[4] = v78;
        v39[5] = v41;
        v43 = v82;
        v39[6] = v82;
        swift_retain(v43);
        sub_1000FEBE0(v30, v40, v42, v41);
        CKQueryOperation.recordMatchedBlock.setter(sub_1000FEBCC, v39);
        v44 = swift_allocObject(&unk_1001E9540, 24, 7);
        *(_QWORD *)(v44 + 16) = v34;
        v45 = v34;
        v46 = v33;
        CKQueryOperation.queryResultBlock.setter(sub_1000FEC34, v44);
        v47 = v81;
        v48 = *(void **)(v81 + 64);
        v49 = swift_allocObject(&unk_1001E9568, 24, 7);
        v50 = swift_weakInit(v49 + 16, v47);
        __chkstk_darwin(v50);
        *(&v64 - 2) = v49;
        *(&v64 - 1) = (uint64_t)v38;
        v51 = v48;
        v52 = sub_1000A0980((uint64_t *)&unk_100211940);
        v28 = v83;
        OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100105EF4, &v64 - 4, v52);

        swift_release(v49);
        v29 += 2;
        v27 = v46 - 1;
      }
      while (v27);
      swift_bridgeObjectRelease(v65);
      v15 = v69;
      v16 = v68;
      v18 = v67;
      v19 = v66;
      v25 = v82;
      v24 = v64;
    }
    v53 = v81;
    v83 = *(_QWORD *)(v81 + 80);
    v54 = (_QWORD *)swift_allocObject(&unk_1001E9590, 40, 7);
    v55 = v70;
    v54[2] = v24;
    v54[3] = v55;
    v54[4] = v25;
    aBlock[4] = sub_1000FEC48;
    v86 = v54;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001E95A8;
    v56 = _Block_copy(aBlock);
    swift_retain(v55);
    v57 = swift_retain(v25);
    v58 = v71;
    static DispatchQoS.unspecified.getter(v57);
    v84 = _swiftEmptyArrayStorage;
    v59 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v60 = sub_1000A0980(&qword_100211D00);
    v61 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v60, v61, v15, v59);
    v62 = v80;
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v58, v18, v83, v56);
    _Block_release(v56);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v19);
    swift_release(v53);
    v63 = v86;
    swift_release(v82);
    return swift_release(v63);
  }
  return result;
}

void sub_1000FCEDC(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char v36;
  id v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  id v62;
  void *v63;
  uint64_t v64;

  if ((a3 & 1) != 0)
  {
    v21 = swift_errorRetain(a2);
    v22 = static os_log_type_t.error.getter(v21);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v23 = qword_100218DD8;
    v24 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v25 = swift_allocObject(v24, 112, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1001858F0;
    v26 = a1;
    v27 = objc_msgSend(v26, "description");
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    *(_QWORD *)(v25 + 56) = &type metadata for String;
    v31 = sub_1000A0DF4();
    *(_QWORD *)(v25 + 64) = v31;
    *(_QWORD *)(v25 + 32) = v28;
    *(_QWORD *)(v25 + 40) = v30;
    v63 = a2;
    swift_errorRetain(a2);
    v32 = sub_1000A0980(&qword_100210710);
    v33 = String.init<A>(describing:)(&v63, v32);
    *(_QWORD *)(v25 + 96) = &type metadata for String;
    *(_QWORD *)(v25 + 104) = v31;
    *(_QWORD *)(v25 + 72) = v33;
    *(_QWORD *)(v25 + 80) = v34;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "error querying the record: %@: %@", 33, 2, v25);
    swift_bridgeObjectRelease(v25);
    v35 = a2;
    v36 = 1;
    goto LABEL_24;
  }
  if (!a5)
  {
    v37 = a2;
LABEL_18:
    v47 = (_QWORD *)(a8 + 16);
    v48 = static os_log_type_t.default.getter(v37);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v49 = qword_100218DD8;
    v50 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v51 = swift_allocObject(v50, 72, 7);
    *(_OWORD *)(v51 + 16) = xmmword_100184870;
    v52 = a2;
    v53 = objc_msgSend(v52, "description");
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

    sub_100104E50(a2, 0);
    *(_QWORD *)(v51 + 56) = &type metadata for String;
    *(_QWORD *)(v51 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v51 + 32) = v54;
    *(_QWORD *)(v51 + 40) = v56;
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "Found record: %@", 16, 2, v51);
    swift_bridgeObjectRelease(v51);
    swift_beginAccess(v47, &v63, 33, 0);
    v57 = v52;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v57);
    v59 = *(_QWORD *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v58 = *(_QWORD *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v59 >= v58 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
    v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v57);
    specialized Array._endMutation()(v60);
    swift_endAccess(&v63);
    goto LABEL_23;
  }
  sub_1000FEC54(a2, 0);
  sub_1000FEBE0(a4, a5, a6, a7);
  v14 = objc_msgSend(a2, "encryptedValues");
  swift_bridgeObjectRetain(a5);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  v16 = objc_msgSend(v14, "objectForKeyedSubscript:", v15);
  swift_unknownObjectRelease(v14);

  if (!v16)
  {
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a5);
    sub_100104E50(a2, 0);
    return;
  }
  v62 = v16;
  v17 = sub_1000A0980(&qword_100210400);
  if ((swift_dynamicCast(&v63, &v62, v17, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a5);
LABEL_23:
    v35 = a2;
    v36 = 0;
LABEL_24:
    sub_100104E50(v35, v36);
    return;
  }
  v18 = v64;
  if (v63 == (void *)a6 && v64 == a7)
  {
    v19 = swift_bridgeObjectRelease(v64);
LABEL_15:
    v61 = static os_log_type_t.default.getter(v19);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v39 = qword_100218DD8;
    v40 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v41 = swift_allocObject(v40, 152, 7);
    *(_OWORD *)(v41 + 16) = xmmword_100187620;
    *(_QWORD *)(v41 + 56) = &type metadata for String;
    v42 = sub_1000A0DF4();
    *(_QWORD *)(v41 + 32) = a4;
    *(_QWORD *)(v41 + 40) = a5;
    *(_QWORD *)(v41 + 96) = &type metadata for String;
    *(_QWORD *)(v41 + 104) = v42;
    *(_QWORD *)(v41 + 64) = v42;
    *(_QWORD *)(v41 + 72) = a6;
    *(_QWORD *)(v41 + 80) = a7;
    v43 = objc_msgSend(a2, "description");
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

    sub_100104E50(a2, 0);
    *(_QWORD *)(v41 + 136) = &type metadata for String;
    *(_QWORD *)(v41 + 144) = v42;
    *(_QWORD *)(v41 + 112) = v44;
    *(_QWORD *)(v41 + 120) = v46;
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v39, "Found %@ record: %@: %@", 23, 2, v41);
    v37 = (id)swift_bridgeObjectRelease(v41);
    goto LABEL_18;
  }
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, a6, a7, 0);
  v19 = swift_bridgeObjectRelease(v18);
  if ((v38 & 1) != 0)
    goto LABEL_15;
  sub_100104E50(a2, 0);
  swift_bridgeObjectRelease(a7);
  swift_bridgeObjectRelease(a5);
}

void sub_1000FD41C(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  id v8;
  id v9;
  _BYTE v10[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  v7 = Strong;
  if (Strong)
  {
    v8 = sub_1000E7CF8(Strong);
    v9 = objc_msgSend(v8, "privateCloudDatabase");
    swift_release(v7);

    objc_msgSend(v9, "addOperation:", a2);
  }
  *a3 = v7 == 0;
}

uint64_t sub_1000FD4D4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(a3 + 16, v8, 0, 0);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = swift_bridgeObjectRetain(v5);
  a1(v6);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_1000FD790(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v3 = objc_msgSend(a1, "databaseScope");
  v4 = static os_log_type_t.default.getter(v3);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v5 = qword_100218DD8;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  *(_QWORD *)(v7 + 56) = sub_1000AB31C(0, &qword_100211A50, CKDatabaseNotification_ptr);
  *(_QWORD *)(v7 + 64) = sub_100104B2C(&qword_100211A58, &qword_100211A50, CKDatabaseNotification_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v7 + 32) = a1;
  v8 = a1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "DatabaseNotification: %@", 24, 2, v7);
  swift_bridgeObjectRelease(v7);
  v9 = swift_allocObject(&unk_1001E9568, 24, 7);
  swift_weakInit(v9 + 16, v1);
  v10 = swift_allocObject(&unk_1001E9B08, 32, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v3;
  swift_retain(v9);
  sub_1000F7A44((uint64_t)sub_100104CC4, v10);
  swift_release(v9);
  return swift_release(v10);
}

uint64_t sub_1000FD914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;
  char v33[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v33, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v15 = result;
    v29 = *(_QWORD *)(result + 72);
    v16 = swift_allocObject(&unk_1001E9568, 24, 7);
    v28 = v7;
    v17 = v16;
    swift_weakInit(v16 + 16, v15);
    v18 = swift_allocObject(&unk_1001E9B30, 32, 7);
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = a4;
    aBlock[4] = sub_100104CCC;
    v32 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001E9B48;
    v19 = _Block_copy(aBlock);
    v20 = swift_retain(v17);
    static DispatchQoS.unspecified.getter(v20);
    v30 = _swiftEmptyArrayStorage;
    v21 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v22 = sub_1000A0980(&qword_100211D00);
    v27 = v10;
    v23 = v22;
    v24 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v23, v24, v6, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    swift_release(v15);
    v25 = v32;
    swift_release(v17);
    return swift_release(v25);
  }
  return result;
}

uint64_t sub_1000FDB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    swift_retain(a1);
    sub_1000F050C(a2, 0, (uint64_t)sub_100104CD4, a1);
    swift_release(v6);
    return swift_release(a1);
  }
  return result;
}

void sub_1000FDBF8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  _QWORD v21[3];
  void *v22;
  _QWORD v23[3];
  _BYTE v24[8];

  if ((a2 & 1) != 0)
  {
    v6 = swift_errorRetain(a1);
    v7 = static os_log_type_t.error.getter(v6);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v8 = qword_100218DD8;
    v9 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100184870;
    swift_getErrorValue(a1, v24, v23);
    v11 = Error.localizedDescription.getter(v23[1], v23[2]);
    v13 = v12;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = v13;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "APS fetchChanges error: %@", 26, 2, v10);
    swift_bridgeObjectRelease(v10);
    v21[0] = a1;
    swift_errorRetain(a1);
    v14 = sub_1000A0980(&qword_100210710);
    type metadata accessor for CKError(0);
    v16 = v15;
    if ((swift_dynamicCast(&v22, v21, v14, v15, 6) & 1) != 0)
    {
      v17 = v22;
      v18 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
      _BridgedStoredNSError.code.getter(v21, v16, v18);
      if (v21[0] != 4)
      {
        v22 = v17;
        _BridgedStoredNSError.code.getter(v21, v16, v18);
        if (v21[0] != 3)
        {
          sub_100104C94(a1, 1);

          return;
        }
      }
      swift_beginAccess(a3 + 16, v21, 0, 0);
      Strong = swift_weakLoadStrong(a3 + 16);
      if (Strong)
      {
        v20 = Strong;
        sub_1000F7140(150.0);

        sub_100104C94(a1, 1);
        swift_release(v20);
        return;
      }

    }
    sub_100104C94(a1, 1);
    return;
  }
  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_100218DD8, "APS fetchChanges completed.", 27, 2, _swiftEmptyArrayStorage);
}

void sub_1000FDEAC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;

  v2 = v1;
  v4 = objc_msgSend(a1, "recordZoneID");
  if (v4)
  {
    v30 = v4;
    v5 = objc_msgSend(a1, "databaseScope");
    v6 = static os_log_type_t.default.getter(v5);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v7 = qword_100218DD8;
    v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100184870;
    *(_QWORD *)(v9 + 56) = sub_1000AB31C(0, &qword_100211A30, CKRecordZoneNotification_ptr);
    *(_QWORD *)(v9 + 64) = sub_100104B2C(&qword_100211A38, &qword_100211A30, CKRecordZoneNotification_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v9 + 32) = a1;
    v10 = a1;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "RecordZoneNotification: %@", 26, 2, v9);
    v11 = swift_bridgeObjectRelease(v9);
    if (v5 == (id)1)
    {
      v21 = static os_log_type_t.default.getter(v11);
      os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_100218DD8, "Nothing", 7, 2, _swiftEmptyArrayStorage, 1, 2);
      goto LABEL_13;
    }
    if (v5 == (id)3)
    {
      v22 = static os_log_type_t.default.getter(v11);
      os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_100218DD8, "Nothing shared", 14, 2, _swiftEmptyArrayStorage, 1, 2);
      goto LABEL_13;
    }
    if (v5 == (id)2)
    {
      v12 = sub_1000E7CF8(v11);
      v13 = objc_msgSend(v12, "privateCloudDatabase");

      v14 = sub_1000A0980(&qword_100211998);
      v15 = swift_allocObject(v14, 40, 7);
      *(_OWORD *)(v15 + 16) = xmmword_100187640;
      *(_QWORD *)(v15 + 32) = v30;
      v31 = v15;
      specialized Array._endMutation()(v15);
      v30 = v30;
      swift_retain(v2);
      sub_1000EE710(v13, 0, v31, (uint64_t)sub_100104C88, v2);

      swift_bridgeObjectRelease(v31);
      swift_release(v2);
LABEL_13:

      return;
    }
    v23 = static os_log_type_t.error.getter(v11);
    v24 = qword_100218DD8;
    v25 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_100184870;
    v31 = (uint64_t)v5;
    type metadata accessor for Scope(0);
    v27 = String.init<A>(describing:)(&v31, v26);
    v29 = v28;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v25 + 32) = v27;
    *(_QWORD *)(v25 + 40) = v29;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Unknown databaseScope: %@", 25, 2, v25);
    swift_bridgeObjectRelease(v25);

  }
  else
  {
    v16 = static os_log_type_t.error.getter(0);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v17 = qword_100218DD8;
    v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100184870;
    *(_QWORD *)(v19 + 56) = sub_1000AB31C(0, &qword_100211A30, CKRecordZoneNotification_ptr);
    *(_QWORD *)(v19 + 64) = sub_100104B2C(&qword_100211A38, &qword_100211A30, CKRecordZoneNotification_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v19 + 32) = a1;
    v20 = a1;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "No recordZoneID in %@", 21, 2, v19);
    swift_bridgeObjectRelease(v19);
  }
}

void sub_1000FE2D4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[3];
  _BYTE v27[8];

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v5 = qword_100218DD8;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  v8 = sub_1000E7CF8(v7);
  v9 = objc_msgSend(v8, "privateCloudDatabase");

  *(_QWORD *)(v7 + 56) = sub_1000AB31C(0, &qword_100211A40, CKDatabase_ptr);
  *(_QWORD *)(v7 + 64) = sub_100104B2C(&qword_100211A48, &qword_100211A40, CKDatabase_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v7 + 32) = v9;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "database: %@ updateCache completed.", 35, 2, v7);
  v10 = swift_bridgeObjectRelease(v7);
  if ((a2 & 1) != 0)
  {
    v12 = swift_errorRetain(a1);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = qword_100218DD8;
    v15 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100184870;
    swift_getErrorValue(a1, v27, v26);
    v16 = Error.localizedDescription.getter(v26[1], v26[2]);
    v18 = v17;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v15 + 32) = v16;
    *(_QWORD *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "APS fetchZoneChanges error: %@", 30, 2, v15);
    swift_bridgeObjectRelease(v15);
    v25 = a1;
    swift_errorRetain(a1);
    v19 = sub_1000A0980(&qword_100210710);
    type metadata accessor for CKError(0);
    v21 = v20;
    if ((swift_dynamicCast(&v24, &v25, v19, v20, 6) & 1) != 0)
    {
      v22 = v24;
      v23 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
      _BridgedStoredNSError.code.getter(&v25, v21, v23);
      if (v25 == 4 || (v24 = v22, _BridgedStoredNSError.code.getter(&v25, v21, v23), v25 == 3))
        sub_1000F7140(150.0);
      sub_100104C94(a1, 1);

    }
    else
    {
      sub_100104C94(a1, 1);
    }
  }
  else
  {
    v11 = static os_log_type_t.default.getter(v10);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_100218DD8, "APS fetchZoneChanges completed.", 31, 2, _swiftEmptyArrayStorage);
  }
}

void sub_1000FE5F0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  Class isa;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v3 = qword_100218DD8;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100184870;
  *(_QWORD *)(v5 + 56) = sub_1000AB31C(0, &qword_100211A18, APSIncomingMessage_ptr);
  *(_QWORD *)(v5 + 64) = sub_100104B2C((unint64_t *)&unk_100211A20, &qword_100211A18, APSIncomingMessage_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v5 + 32) = a1;
  v6 = a1;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "ContainerPushDelegate: didReceiveMessage: %@", 44, 2, v5);
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v6, "userInfo");
  if (!v7)
  {
    __break(1u);
    JUMPOUT(0x1000FEA9CLL);
  }
  v8 = v7;
  v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  v11 = objc_msgSend((id)objc_opt_self(CKNotification), "notificationFromRemoteNotificationDictionary:", isa);

  v13 = static os_log_type_t.error.getter(v12);
  v14 = qword_100218DD8;
  v15 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100184870;
  v48 = v11;
  v16 = v4;
  v17 = v11;
  v18 = sub_1000A0980(&qword_100211D20);
  v19 = String.init<A>(describing:)(&v48, v18);
  v21 = v20;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v22 = sub_1000A0DF4();
  *(_QWORD *)(v15 + 64) = v22;
  *(_QWORD *)(v15 + 32) = v19;
  *(_QWORD *)(v15 + 40) = v21;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CKNotification received: %@", 27, 2, v15);
  v23 = v15;
  v24 = v17;
  v25 = swift_bridgeObjectRelease(v23);
  if (v17)
  {
    v26 = objc_msgSend(v17, "notificationType");
    switch((unint64_t)v26)
    {
      case 1uLL:
        v27 = static os_log_type_t.error.getter(v26);
        os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_100218DD8, "Query notifications are not handled", 35, 2, _swiftEmptyArrayStorage);
        goto LABEL_16;
      case 2uLL:
        v33 = objc_opt_self(CKRecordZoneNotification);
        v34 = swift_dynamicCastObjCClass(v17, v33);
        if (!v34)
          goto LABEL_15;
        v35 = (void *)v34;
        v36 = v24;
        sub_1000FDEAC(v35);
        goto LABEL_13;
      case 3uLL:
        v37 = static os_log_type_t.error.getter(v26);
        os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_100218DD8, "Read notifications are not handled", 34, 2, _swiftEmptyArrayStorage);
        goto LABEL_16;
      case 4uLL:
        v38 = objc_opt_self(CKDatabaseNotification);
        v34 = swift_dynamicCastObjCClass(v17, v38);
        if (v34)
        {
          v39 = (void *)v34;
          v36 = v24;
          sub_1000FD790(v39);
LABEL_13:

        }
        else
        {
LABEL_15:
          v47 = static os_log_type_t.error.getter(v34);
          os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, qword_100218DD8, "Unable to cast to CKRecordZoneNotification", 42, 2, _swiftEmptyArrayStorage);
LABEL_16:

        }
        break;
      default:
        v40 = v26;
        v41 = static os_log_type_t.error.getter(v26);
        v42 = qword_100218DD8;
        v43 = swift_allocObject(v16, 72, 7);
        *(_OWORD *)(v43 + 16) = xmmword_100184870;
        v48 = v40;
        type metadata accessor for NotificationType(0);
        v45 = String.init<A>(describing:)(&v48, v44);
        *(_QWORD *)(v43 + 56) = &type metadata for String;
        *(_QWORD *)(v43 + 64) = v22;
        *(_QWORD *)(v43 + 32) = v45;
        *(_QWORD *)(v43 + 40) = v46;
        os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Unknown notificationType: %@", 28, 2, v43);
        swift_bridgeObjectRelease(v43);
        goto LABEL_16;
    }
  }
  else
  {
    v28 = static os_log_type_t.error.getter(v25);
    v29 = qword_100218DD8;
    v30 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v30 + 16) = xmmword_100184870;
    v48 = 0;
    v31 = String.init<A>(describing:)(&v48, v18);
    *(_QWORD *)(v30 + 56) = &type metadata for String;
    *(_QWORD *)(v30 + 64) = v22;
    *(_QWORD *)(v30 + 32) = v31;
    *(_QWORD *)(v30 + 40) = v32;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Unknown notification: %@", 24, 2, v30);
    swift_bridgeObjectRelease(v30);
  }
}

void sub_1000FEAE8(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available);
}

uint64_t sub_1000FEB00()
{
  uint64_t *v0;

  return sub_1000F7DF8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000FEB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000FEB1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000FEB24()
{
  return sub_100104BCC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000FEB34()
{
  return sub_100104BCC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000FEB40()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _UNKNOWN **))(v0 + 16))(*(_QWORD *)(v0 + 32), &off_1001E9380);
}

uint64_t sub_1000FEB70()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FEB94()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[5]);
  }
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000FEBCC(void *a1, void *a2, char a3)
{
  uint64_t *v3;

  sub_1000FCEDC(a1, a2, a3 & 1, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_1000FEBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1000FEC10()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000FEC34()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_1000FEC3C()
{
  return sub_100104BCC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000FEC48()
{
  uint64_t v0;

  return sub_1000FD4D4(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

id sub_1000FEC54(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

uint64_t sub_1000FEC60()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[5]);
  }
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

void sub_1000FECA0(void *a1, void **a2, char a3)
{
  uint64_t *v3;

  sub_1000FC0BC(a1, a2, a3 & 1, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8]);
}

void sub_1000FECD8()
{
  uint64_t v0;

  sub_1000FC93C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000FECF0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_1000FED00()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FED10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000FED30()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FED54(void *a1, void *a2)
{
  uint64_t v2;

  return sub_1000FC68C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000FED60()
{
  return sub_100102FB0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FB784);
}

uint64_t sub_1000FED6C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = v3;
  v8 = *v6;
  swift_bridgeObjectRetain(*v6);
  v9 = a2(a1);
  LOBYTE(a1) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v12 = *v6;
  v16 = *v6;
  *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10010060C(a3);
    v12 = v16;
  }

  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v9);
  sub_100100040(v9, v12);
  v14 = *v6;
  *v6 = v12;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_1000FEE4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1000AA00C(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100100964();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_1001001F0(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

Swift::Int sub_1000FEF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_1000A0980(&qword_100211AF0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000AB31C(0, &qword_100211AF8, CKFetchRecordZoneChangesConfiguration_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1000FFA5C(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_1000FF168(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000A0980(&qword_1002108D0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000FF470(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000A0980(&qword_100211B48);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v23 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v24 = v23 | (v15 << 6);
      goto LABEL_34;
    }
    v25 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v12)
      break;
    v26 = (_QWORD *)(v5 + 64);
    v27 = *(_QWORD *)(v36 + 8 * v25);
    ++v15;
    if (!v27)
    {
      v15 = v25 + 1;
      if (v25 + 1 >= v12)
        goto LABEL_36;
      v27 = *(_QWORD *)(v36 + 8 * v15);
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v12)
        {
LABEL_36:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = *(_QWORD *)(v36 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v15 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v27 = *(_QWORD *)(v36 + 8 * v15);
            ++v28;
            if (v27)
              goto LABEL_33;
          }
        }
        v15 = v28;
      }
    }
LABEL_33:
    v11 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v15 << 6);
LABEL_34:
    v33 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v24);
    v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v24);
    if ((a2 & 1) == 0)
    {
      v34 = v33;
      swift_retain(*((_QWORD *)&v37 + 1));
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    type metadata accessor for CFString(0);
    v17 = v16;
    v18 = sub_1000A0940(&qword_100211B50, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1001849EC);
    _CFObject.hash(into:)(v38, v17, v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v8 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v13 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v13 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v21 == v30;
        if (v21 == v30)
          v21 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v13 + 8 * v21);
      }
      while (v32 == -1);
      v22 = __clz(__rbit64(~v32)) + (v21 << 6);
    }
    *(_QWORD *)(v13 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v22) = v33;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v22) = v37;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v26 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v26, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000FF790(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  __int128 v35;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_1000A0980(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v34 = v4;
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v11 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v14 = (unint64_t)(v10 + 63) >> 6;
    v15 = v8 + 64;
    result = swift_retain(v6);
    v17 = 0;
    while (1)
    {
      if (v13)
      {
        v22 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v23 = v22 | (v17 << 6);
      }
      else
      {
        v24 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v24 >= v14)
          goto LABEL_36;
        v25 = v11[v24];
        ++v17;
        if (!v25)
        {
          v17 = v24 + 1;
          if (v24 + 1 >= v14)
            goto LABEL_36;
          v25 = v11[v17];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v14)
            {
LABEL_36:
              swift_release(v6);
              if ((a2 & 1) == 0)
              {
                result = swift_release(v6);
                v4 = v34;
                goto LABEL_43;
              }
              v33 = 1 << *(_BYTE *)(v6 + 32);
              if (v33 >= 64)
                bzero((void *)(v6 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v11 = -1 << v33;
              v4 = v34;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v25 = v11[v26];
            if (!v25)
            {
              while (1)
              {
                v17 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_45;
                if (v17 >= v14)
                  goto LABEL_36;
                v25 = v11[v17];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v17 = v26;
          }
        }
LABEL_33:
        v13 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v17 << 6);
      }
      v31 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v23);
      v35 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + 16 * v23);
      if ((a2 & 1) == 0)
      {
        v32 = v31;
        swift_retain(*((_QWORD *)&v35 + 1));
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
      v18 = -1 << *(_BYTE *)(v9 + 32);
      v19 = result & ~v18;
      v20 = v19 >> 6;
      if (((-1 << v19) & ~*(_QWORD *)(v15 + 8 * (v19 >> 6))) != 0)
      {
        v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v15 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v29 = v20 == v28;
          if (v20 == v28)
            v20 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v20);
        }
        while (v30 == -1);
        v21 = __clz(__rbit64(~v30)) + (v20 << 6);
      }
      *(_QWORD *)(v15 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v21) = v31;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21) = v35;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
LABEL_43:
  *v4 = v9;
  return result;
}

Swift::Int sub_1000FFA5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000A0980(&qword_100211AF0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000FFD2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000A0980(&qword_100211A10);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_unknownObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_100100040(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 16 * v3);
            v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1001001F0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001003C4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_10010040C(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

void *sub_100100454()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_1000A0980(&qword_1002108D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100100600()
{
  return sub_10010060C(&qword_100211B48);
}

void *sub_10010060C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v2 = v1;
  sub_1000A0980(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 16 * v16;
    v24 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v19) = v24;
    v20 = v18;
    result = (void *)swift_retain(*((_QWORD *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001007C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1000A0980(&qword_100211AF0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100100964()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1000A0980(&qword_100211A10);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_unknownObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100100B18(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = swift_stdlib_random(&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_100100B18(v6, a2, a3);
  return result;
}

uint64_t sub_100100BC0(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t (*a5)(void *), uint64_t *a6, unint64_t *a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v11;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t result;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  uint64_t v34;

  v11 = v8;
  v16 = *v8;
  v18 = a5(a3);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v22 = v17;
  v23 = *(_QWORD *)(v16 + 24);
  if (v23 >= v21 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v23 >= v21 && (a4 & 1) == 0)
  {
    sub_10010060C(a6);
LABEL_7:
    v24 = (_QWORD *)*v11;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = (uint64_t *)(v24[7] + 16 * v18);
      result = *v25;
      *v25 = a1;
      v25[1] = a2;
      return result;
    }
LABEL_11:
    v24[(v18 >> 6) + 8] |= 1 << v18;
    *(_QWORD *)(v24[6] + 8 * v18) = a3;
    v29 = (uint64_t *)(v24[7] + 16 * v18);
    *v29 = a1;
    v29[1] = a2;
    v30 = v24[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (!v31)
    {
      v24[2] = v32;
      v33 = a3;
      return 0;
    }
    goto LABEL_14;
  }
  sub_1000FF790(v21, a4 & 1, a6);
  v27 = a5(a3);
  if ((v22 & 1) == (v28 & 1))
  {
    v18 = v27;
    v24 = (_QWORD *)*v11;
    if ((v22 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v34 = sub_1000AB31C(0, a7, a8);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v34);
  __break(1u);
  return result;
}

uint64_t sub_100100D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v23 = *(_QWORD *)(v11 - 8);
  v24 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(a4 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  v15 = (_QWORD *)swift_allocObject(&unk_1001EA030, 56, 7);
  v15[2] = a4;
  v15[3] = a1;
  v15[4] = &off_1001E9380;
  v15[5] = a2;
  v15[6] = a3;
  aBlock[4] = sub_100104FF0;
  v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EA048;
  v16 = _Block_copy(aBlock);
  v17 = v14;
  swift_retain(a4);
  swift_retain(a1);
  swift_bridgeObjectRetain(a2);
  v18 = swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v18);
  v26 = _swiftEmptyArrayStorage;
  v19 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_1000A0980(&qword_100211D00);
  v21 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v8, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v24);
  return swift_release(v28);
}

uint64_t sub_100100F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(char *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;

  v5 = v4;
  v54 = a2;
  v55 = a4;
  v52 = a1;
  v53 = a3;
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  v50 = v13;
  __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 16) = 1;
  *(_QWORD *)(v4 + 32) = 0;
  v51 = v4 + 24;
  swift_unknownObjectWeakInit(v4 + 24, 0);
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = dispatch_semaphore_create(0);
  v48 = sub_1000AB31C(0, (unint64_t *)&qword_1002119F0, OS_dispatch_queue_ptr);
  v56 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v49 = *(uint64_t (**)(char *))(v14 + 104);
  v17 = v49(v16);
  static DispatchQoS.unspecified.getter(v17);
  v57 = _swiftEmptyArrayStorage;
  v18 = sub_1000A0940((unint64_t *)&unk_1002123A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_1000A0980((uint64_t *)&unk_100211A00);
  v20 = sub_1000AAD14((unint64_t *)&qword_1002123B0, (uint64_t *)&unk_100211A00, (uint64_t)&protocol conformance descriptor for [A]);
  v46 = v18;
  v47 = v20;
  v45 = v6;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v19, v20, v6, v18);
  v21 = v12;
  v22 = v12;
  v23 = v8;
  v44 = v16;
  *(_QWORD *)(v4 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000013, 0x80000001001ADB70, v22, v8, v16, 0);
  v24 = v16;
  v26 = v49;
  v25 = v50;
  v27 = ((uint64_t (*)(char *, _QWORD, uint64_t))v49)(v24, v56, v50);
  static DispatchQoS.unspecified.getter(v27);
  v57 = _swiftEmptyArrayStorage;
  v28 = v20;
  v29 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v19, v28, v45, v18);
  v30 = v44;
  *(_QWORD *)(v4 + 72) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000039, 0x80000001001AE5C0, v21, v23, v44, 0);
  v31 = ((uint64_t (*)(char *, _QWORD, uint64_t))v26)(v30, v56, v25);
  static DispatchQoS.unspecified.getter(v31);
  v57 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v19, v47, v29, v46);
  v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000040, 0x80000001001AE600, v21, v23, v30, 0);
  *(_QWORD *)(v4 + 88) = v32;
  *(_QWORD *)(v4 + 96) = 0;
  *(_WORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v4 + 120) = &_swiftEmptyDictionarySingleton;
  *(_BYTE *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container) = 0;
  v33 = (_QWORD *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId);
  *v33 = 0;
  v33[1] = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudPushTriggeredGroup) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___forcedGroup) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudInitialSetupGroup) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudUserActionExplicitGroup) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___deferredUpdatesGroup) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___multipleUpdatesGroup) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_identityUpdateNotificationListener) = 0;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator__available) = 0;
  v34 = static os_log_type_t.default.getter(v32);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v35 = qword_100218DD8;
  v36 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100184870;
  v38 = v52;
  v39 = sub_1000D8EF0();
  v41 = v40;
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v37 + 32) = v39;
  *(_QWORD *)(v37 + 40) = v41;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "CloudCoordinator init for %@", 28, 2, v37);
  swift_bridgeObjectRelease(v37);
  sub_100104C44(v38, v5 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration);
  v42 = v54;
  *(_QWORD *)(v5 + 32) = v53;
  swift_unknownObjectWeakAssign(v51, v42);
  *(_QWORD *)(v5 + 80) = v55;
  return v5;
}

_QWORD *sub_100101418(uint64_t a1, void *a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    v6 = (_QWORD *)(a1 + 40);
    do
    {
      v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      v9 = objc_msgSend(a2, "encryptedValues");
      v10 = String._bridgeToObjectiveC()();
      v11 = objc_msgSend(v9, "objectForKeyedSubscript:", v10);
      swift_bridgeObjectRelease(v8);

      v12 = swift_unknownObjectRelease(v9);
      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
        specialized Array._endMutation()(v7);
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100101568(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(a1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  aBlock[4] = sub_100104F78;
  v20 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E9FD0;
  v10 = _Block_copy(aBlock);
  v11 = v9;
  v12 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v12);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_1000A0980(&qword_100211D00);
  v15 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v20);
}

uint64_t sub_100101754(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_31;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v24))
  {
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    a2 += OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    v26 = v3 + 32;
    v27 = a2;
    v28 = v3 & 0xC000000000000001;
    v29 = v4;
    while (1)
    {
      v7 = v6 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3) : *(id *)(v26 + 8 * v5);
      v8 = v7;
      if (__OFADD__(v5++, 1))
        break;
      v10 = *(_QWORD **)(a2 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration(0) + 32));
      swift_bridgeObjectRetain(v10);
      v30 = v8;
      v11 = objc_msgSend(v8, "zoneName");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v15 = v10[2];
      if (v15)
      {
        a2 = v3;
        v16 = v10[4];
        v17 = v10[5];
        v18 = v16 == v12 && v17 == v14;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v12, v14, 0) & 1) != 0)
        {
LABEL_27:
          swift_bridgeObjectRelease(a2);

          swift_bridgeObjectRelease(v10);
          v4 = 1;
          goto LABEL_36;
        }
        if (v15 != 1)
        {
          v19 = v10 + 7;
          v20 = 1;
          while (1)
          {
            v3 = v20 + 1;
            if (__OFADD__(v20, 1))
              break;
            v21 = *(v19 - 1);
            v22 = *v19;
            v23 = v21 == v12 && v22 == v14;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v12, v14, 0) & 1) != 0)
              goto LABEL_27;
            v19 += 2;
            ++v20;
            if (v3 == v15)
              goto LABEL_4;
          }
          __break(1u);
          break;
        }
LABEL_4:
        swift_bridgeObjectRelease(v10);
        v3 = a2;
        v6 = v28;
        v4 = v29;
        a2 = v27;
      }
      else
      {
        swift_bridgeObjectRelease(v10);
      }
      swift_bridgeObjectRelease(v14);

      if (v5 == v4)
      {
        v4 = 0;
        v14 = v3;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_31:
    if (v3 < 0)
      v24 = v3;
    else
      v24 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
  }
  v14 = v3;
LABEL_36:
  swift_bridgeObjectRelease(v14);
  return v4;
}

void sub_100101980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v33;
  int64_t v34;
  uint64_t v36;
  uint64_t v37;
  id v38;

  v33 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v34 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v9 << 6);
LABEL_24:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v11 + 8);
    v16 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    swift_retain_n(v15, 2);
    v17 = v16;
    v18 = objc_msgSend(v17, "encryptedValues");
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v18, "objectForKeyedSubscript:", v19);
    swift_unknownObjectRelease(v18);

    if (v20
      && (v38 = v20,
          v22 = sub_1000A0980(&qword_100210400),
          v21 = swift_dynamicCast(&v36, &v38, v22, &type metadata for String, 6),
          (_DWORD)v21))
    {
      v23 = v37;
      if (!a3)
      {
        swift_release(v15);

        swift_bridgeObjectRelease(v23);
        goto LABEL_6;
      }
      if (v36 == a2 && v37 == a3)
      {
        v21 = swift_bridgeObjectRelease(v37);
      }
      else
      {
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, a2, a3, 0);
        v21 = swift_bridgeObjectRelease(v23);
        if ((v24 & 1) == 0)
        {
LABEL_5:
          swift_release(v15);

          goto LABEL_6;
        }
      }
    }
    else if (a3)
    {
      goto LABEL_5;
    }
    v25 = CKRecord.recordType.getter(v21);
    if (v25 == a4 && v26 == a5)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(a5);
      swift_release(v15);

      return;
    }
    v28 = v26;
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, a4, a5, 0);
    swift_bridgeObjectRelease(v28);
    swift_release(v15);

    if ((v29 & 1) != 0)
    {
LABEL_37:
      swift_release(a1);
      return;
    }
LABEL_6:
    swift_release(v15);

  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v12 >= v34)
    goto LABEL_37;
  v13 = *(_QWORD *)(v33 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_23;
  v9 = v12 + 1;
  if (v12 + 1 >= v34)
    goto LABEL_37;
  v13 = *(_QWORD *)(v33 + 8 * v9);
  if (v13)
    goto LABEL_23;
  v9 = v12 + 2;
  if (v12 + 2 >= v34)
    goto LABEL_37;
  v13 = *(_QWORD *)(v33 + 8 * v9);
  if (v13)
    goto LABEL_23;
  v9 = v12 + 3;
  if (v12 + 3 >= v34)
    goto LABEL_37;
  v13 = *(_QWORD *)(v33 + 8 * v9);
  if (v13)
    goto LABEL_23;
  v14 = v12 + 4;
  if (v14 >= v34)
    goto LABEL_37;
  v13 = *(_QWORD *)(v33 + 8 * v14);
  v9 = v14;
  if (v13)
  {
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v34)
      goto LABEL_37;
    v13 = *(_QWORD *)(v33 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
}

void sub_100101CF4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  int64_t v27;
  int64_t v30;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v30 = v5;
  for (i = v6 | (v5 << 6); ; i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    v14 = objc_msgSend(v13, "recordID");
    v15 = objc_msgSend(v14, "recordName");

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = objc_msgSend(a2, "recordID");
    v20 = objc_msgSend(v19, "recordName");

    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    if (v16 == v21 && v18 == v23)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v18, 2);
      return;
    }
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v21, v23, 0);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v23);
    if ((v25 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }
    swift_release(v12);

    v5 = v30;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v27)
      goto LABEL_28;
    v9 = *(_QWORD *)(v26 + 8 * v8);
    v10 = v5 + 1;
    if (!v9)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v27)
        goto LABEL_28;
      v9 = *(_QWORD *)(v26 + 8 * v10);
      if (!v9)
      {
        v10 = v5 + 3;
        if (v5 + 3 >= v27)
          goto LABEL_28;
        v9 = *(_QWORD *)(v26 + 8 * v10);
        if (!v9)
        {
          v10 = v5 + 4;
          if (v5 + 4 >= v27)
            goto LABEL_28;
          v9 = *(_QWORD *)(v26 + 8 * v10);
          if (!v9)
          {
            v11 = v5 + 5;
            if (v5 + 5 >= v27)
              goto LABEL_28;
            v9 = *(_QWORD *)(v26 + 8 * v11);
            v10 = v5 + 5;
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v9 - 1) & v9;
    v30 = v10;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v27)
      goto LABEL_28;
    v9 = *(_QWORD *)(v26 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_19;
  }
LABEL_31:
  __break(1u);
}

void sub_100101FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v32 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v33 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  if (v6)
    goto LABEL_6;
LABEL_7:
  while (2)
  {
    v10 = v7 + 1;
    if (!__OFADD__(v7, 1))
    {
      if (v10 < v33)
      {
        v11 = *(_QWORD *)(v32 + 8 * v10);
        ++v7;
        if (v11)
          goto LABEL_21;
        v7 = v10 + 1;
        if (v10 + 1 >= v33)
          goto LABEL_35;
        v11 = *(_QWORD *)(v32 + 8 * v7);
        if (v11)
          goto LABEL_21;
        v7 = v10 + 2;
        if (v10 + 2 >= v33)
          goto LABEL_35;
        v11 = *(_QWORD *)(v32 + 8 * v7);
        if (v11)
          goto LABEL_21;
        v7 = v10 + 3;
        if (v10 + 3 >= v33)
          goto LABEL_35;
        v11 = *(_QWORD *)(v32 + 8 * v7);
        if (v11)
        {
LABEL_21:
          v6 = (v11 - 1) & v11;
          for (i = __clz(__rbit64(v11)) + (v7 << 6); ; i = v8 | (v7 << 6))
          {
            v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
            v14 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
            swift_retain_n(v13, 2);
            v15 = v14;
            v16 = objc_msgSend(v15, "encryptedValues");
            v17 = String._bridgeToObjectiveC()();
            v18 = objc_msgSend(v16, "objectForKeyedSubscript:", v17);
            swift_unknownObjectRelease(v16);

            if (!v18)
              break;
            v36 = v18;
            v19 = sub_1000A0980(&qword_100210400);
            if ((swift_dynamicCast(&v34, &v36, v19, &type metadata for String, 6) & 1) == 0)
              break;
            v20 = v35;
            if (v34 == a2 && v35 == a3)
            {
              v21 = swift_bridgeObjectRelease(a3);
            }
            else
            {
              v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, a2, a3, 0);
              v21 = swift_bridgeObjectRelease(v20);
              if ((v22 & 1) == 0)
                break;
            }
            v23 = CKRecord.recordType.getter(v21);
            v25 = v24;
            v27 = CKRecord.recordType.getter(v23);
            v28 = v26;
            if (v23 == v27 && v25 == v26)
            {
              swift_bridgeObjectRelease_n(v25, 2);
              swift_release(v13);

              goto LABEL_35;
            }
            v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0);
            swift_bridgeObjectRelease(v25);
            swift_bridgeObjectRelease(v28);
            swift_release(v13);

            if ((v29 & 1) != 0)
              goto LABEL_35;
            swift_release(v13);

            if (!v6)
              goto LABEL_7;
LABEL_6:
            v8 = __clz(__rbit64(v6));
            v6 &= v6 - 1;
          }
          swift_release_n(v13, 2);

          if (!v6)
            continue;
          goto LABEL_6;
        }
        v12 = v10 + 4;
        if (v12 < v33)
        {
          v11 = *(_QWORD *)(v32 + 8 * v12);
          v7 = v12;
          if (!v11)
          {
            while (1)
            {
              v7 = v12 + 1;
              if (__OFADD__(v12, 1))
                goto LABEL_37;
              if (v7 >= v33)
                goto LABEL_35;
              v11 = *(_QWORD *)(v32 + 8 * v7);
              ++v12;
              if (v11)
                goto LABEL_21;
            }
          }
          goto LABEL_21;
        }
      }
LABEL_35:
      swift_release(a1);
      return;
    }
    break;
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_100102344(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  int64_t v26;
  int64_t v29;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v29 = v5;
  for (i = v6 | (v5 << 6); ; i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    v14 = objc_msgSend(v13, "recordID");
    v15 = objc_msgSend(v14, "recordName");

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = objc_msgSend(a2, "recordName");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    if (v16 == v20 && v18 == v22)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v18, 2);
      return;
    }
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v20, v22, 0);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }
    swift_release(v12);

    v5 = v29;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v26)
      goto LABEL_28;
    v9 = *(_QWORD *)(v25 + 8 * v8);
    v10 = v5 + 1;
    if (!v9)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v26)
        goto LABEL_28;
      v9 = *(_QWORD *)(v25 + 8 * v10);
      if (!v9)
      {
        v10 = v5 + 3;
        if (v5 + 3 >= v26)
          goto LABEL_28;
        v9 = *(_QWORD *)(v25 + 8 * v10);
        if (!v9)
        {
          v10 = v5 + 4;
          if (v5 + 4 >= v26)
            goto LABEL_28;
          v9 = *(_QWORD *)(v25 + 8 * v10);
          if (!v9)
          {
            v11 = v5 + 5;
            if (v5 + 5 >= v26)
              goto LABEL_28;
            v9 = *(_QWORD *)(v25 + 8 * v11);
            v10 = v5 + 5;
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v9 - 1) & v9;
    v29 = v10;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v26)
      goto LABEL_28;
    v9 = *(_QWORD *)(v25 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_19;
  }
LABEL_31:
  __break(1u);
}

void sub_1001025F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  char v16;
  int64_t v17;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v17 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v7 | (v6 << 6); ; i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    v12 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * i);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    sub_1000AB31C(0, &qword_1002119D0, NSObject_ptr);
    v14 = v12;
    swift_retain_n(v13, 2);
    v15 = v14;
    v16 = static NSObject.== infix(_:_:)();
    swift_release(v13);

    if ((v16 & 1) != 0)
    {
LABEL_23:
      swift_release(a1);
      return;
    }
    swift_release(v13);

    if (v5)
      goto LABEL_4;
LABEL_5:
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v17)
      goto LABEL_23;
    v10 = *(_QWORD *)(v2 + 8 * v9);
    ++v6;
    if (!v10)
    {
      v6 = v9 + 1;
      if (v9 + 1 >= v17)
        goto LABEL_23;
      v10 = *(_QWORD *)(v2 + 8 * v6);
      if (!v10)
      {
        v6 = v9 + 2;
        if (v9 + 2 >= v17)
          goto LABEL_23;
        v10 = *(_QWORD *)(v2 + 8 * v6);
        if (!v10)
        {
          v6 = v9 + 3;
          if (v9 + 3 >= v17)
            goto LABEL_23;
          v10 = *(_QWORD *)(v2 + 8 * v6);
          if (!v10)
          {
            v11 = v9 + 4;
            if (v11 >= v17)
              goto LABEL_23;
            v10 = *(_QWORD *)(v2 + 8 * v11);
            v6 = v11;
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_19:
    v5 = (v10 - 1) & v10;
  }
  while (1)
  {
    v6 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v6 >= v17)
      goto LABEL_23;
    v10 = *(_QWORD *)(v2 + 8 * v6);
    ++v11;
    if (v10)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

void sub_1001027FC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  int64_t v26;
  int64_t v29;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v29 = v5;
  for (i = v6 | (v5 << 6); ; i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    v14 = objc_msgSend(v13, "recordName");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18 = objc_msgSend(a2, "recordID");
    v19 = objc_msgSend(v18, "recordName");

    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    if (v15 == v20 && v17 == v22)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v17, 2);
      return;
    }
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v20, v22, 0);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }
    swift_release(v12);

    v5 = v29;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v26)
      goto LABEL_28;
    v9 = *(_QWORD *)(v25 + 8 * v8);
    v10 = v5 + 1;
    if (!v9)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v26)
        goto LABEL_28;
      v9 = *(_QWORD *)(v25 + 8 * v10);
      if (!v9)
      {
        v10 = v5 + 3;
        if (v5 + 3 >= v26)
          goto LABEL_28;
        v9 = *(_QWORD *)(v25 + 8 * v10);
        if (!v9)
        {
          v10 = v5 + 4;
          if (v5 + 4 >= v26)
            goto LABEL_28;
          v9 = *(_QWORD *)(v25 + 8 * v10);
          if (!v9)
          {
            v11 = v5 + 5;
            if (v5 + 5 >= v26)
              goto LABEL_28;
            v9 = *(_QWORD *)(v25 + 8 * v11);
            v10 = v5 + 5;
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v9 - 1) & v9;
    v29 = v10;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v26)
      goto LABEL_28;
    v9 = *(_QWORD *)(v25 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_19;
  }
LABEL_31:
  __break(1u);
}

void sub_100102AB0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  int64_t v25;
  int64_t v28;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v28 = v5;
  for (i = v6 | (v5 << 6); ; i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    v14 = objc_msgSend(v13, "recordName");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18 = objc_msgSend(a2, "recordName");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    if (v15 == v19 && v17 == v21)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v17, 2);
      return;
    }
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v21, 0);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v21);
    if ((v23 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }
    swift_release(v12);

    v5 = v28;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v25)
      goto LABEL_28;
    v9 = *(_QWORD *)(v24 + 8 * v8);
    v10 = v5 + 1;
    if (!v9)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v25)
        goto LABEL_28;
      v9 = *(_QWORD *)(v24 + 8 * v10);
      if (!v9)
      {
        v10 = v5 + 3;
        if (v5 + 3 >= v25)
          goto LABEL_28;
        v9 = *(_QWORD *)(v24 + 8 * v10);
        if (!v9)
        {
          v10 = v5 + 4;
          if (v5 + 4 >= v25)
            goto LABEL_28;
          v9 = *(_QWORD *)(v24 + 8 * v10);
          if (!v9)
          {
            v11 = v5 + 5;
            if (v5 + 5 >= v25)
              goto LABEL_28;
            v9 = *(_QWORD *)(v24 + 8 * v11);
            v10 = v5 + 5;
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v9 - 1) & v9;
    v28 = v10;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v25)
      goto LABEL_28;
    v9 = *(_QWORD *)(v24 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_19;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_100102D44(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_100102D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_100102D9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(v1 + 40);
  (*(void (**)(void))(v1 + 24))();
  return v3(a1);
}

unint64_t sub_100102DDC()
{
  unint64_t result;

  result = qword_100211968;
  if (!qword_100211968)
  {
    result = swift_getWitnessTable(&unk_1001878D0, &type metadata for CloudCoordinator.CloudCoordinatorError);
    atomic_store(result, (unint64_t *)&qword_100211968);
  }
  return result;
}

uint64_t sub_100102E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v8, v6);
}

void sub_100102EB8(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_1000F8494(a1, v4, *(void (**)(void *, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v2 + v6, *(unsigned __int8 *)(v2 + v6 + *(_QWORD *)(v5 + 64)), *(void **)(((v6 + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFF8) + v2 + 8));
}

uint64_t sub_100102F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000FB574(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48), (uint64_t)&unk_1001E9810, (uint64_t)sub_100102FA4, (uint64_t)&unk_1001E9828);
}

uint64_t sub_100102F70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100102FA4()
{
  return sub_100102FB0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FA214);
}

uint64_t sub_100102FB0(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_100102FD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100103004(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = a2 & 1;
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40);
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(a1, v4);
  return v5(a1, v4);
}

uint64_t sub_100103058()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010307C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  void *v22;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    for (i = 4; ; ++i)
    {
      v5 = i - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      v7 = i - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_19;
LABEL_9:
      v22 = v6;
      v8 = objc_msgSend(v6, "recordID");
      v9 = objc_msgSend(v8, "recordName");

      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = objc_msgSend(a2, "recordName");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      if (v10 == v14 && v12 == v16)
      {
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v12);
LABEL_18:
        v3 = (uint64_t)v22;
        swift_bridgeObjectRelease(v12);
        return v3;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v14, v16, 0);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
      {
        v12 = a1;
        goto LABEL_18;
      }

      if (v7 == v3)
      {
        swift_bridgeObjectRelease(a1);
        return 0;
      }
    }
    v6 = *(id *)(a1 + 8 * i);
    v7 = i - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_9;
LABEL_19:
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v19);
  }
  swift_bridgeObjectRelease(a1);
  return v3;
}

uint64_t sub_10010325C(uint64_t a1, void (*a2)(_BYTE *, id))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _BYTE v16[40];
  id v17;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      return swift_release(a1);
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release(a1);
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          return swift_release(a1);
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v8)
            return swift_release(a1);
          v14 = *(_QWORD *)(v4 + 8 * v10);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_1000AB400(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    v17 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    a2(v16, v17);
    result = sub_1000A1000((uint64_t)v16, (uint64_t *)&unk_1002119E0);
  }
  v15 = v13 + 4;
  if (v15 >= v8)
    return swift_release(a1);
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release(a1);
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1001033F8(uint64_t a1, void (*a2)(id, uint64_t (*)(uint64_t), _OWORD *))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  int64_t v19;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v19)
      goto LABEL_23;
    v14 = *(_QWORD *)(v17 + 8 * v13);
    ++v7;
    if (!v14)
    {
      v7 = v13 + 1;
      if (v13 + 1 >= v19)
        goto LABEL_23;
      v14 = *(_QWORD *)(v17 + 8 * v7);
      if (!v14)
      {
        v7 = v13 + 2;
        if (v13 + 2 >= v19)
          goto LABEL_23;
        v14 = *(_QWORD *)(v17 + 8 * v7);
        if (!v14)
        {
          v7 = v13 + 3;
          if (v13 + 3 >= v19)
            goto LABEL_23;
          v14 = *(_QWORD *)(v17 + 8 * v7);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v7 << 6);
LABEL_5:
    v18 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + 16 * v9);
    __chkstk_darwin();
    v16[1] = v18;
    v11 = v10;
    v12 = *((_QWORD *)&v18 + 1);
    swift_retain(*((_QWORD *)&v18 + 1));
    a2(v11, sub_100105D4C, v16);
    swift_release(v12);

  }
  v15 = v13 + 4;
  if (v15 >= v19)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v14 = *(_QWORD *)(v17 + 8 * v15);
  if (v14)
  {
    v7 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v7 >= v19)
      goto LABEL_23;
    v14 = *(_QWORD *)(v17 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100103600(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(a2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  v11 = swift_allocObject(&unk_1001E9D10, 24, 7);
  swift_weakInit(v11 + 16, a2);
  v12 = swift_allocObject(&unk_1001E9D38, 25, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_BYTE *)(v12 + 24) = a1;
  aBlock[4] = sub_100104EE4;
  v26 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001E9D50;
  v13 = _Block_copy(aBlock);
  v14 = v10;
  v15 = swift_retain(v11);
  static DispatchQoS.unspecified.getter(v15);
  v24 = _swiftEmptyArrayStorage;
  v16 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_1000A0980(&qword_100211D00);
  v18 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
  v19 = v26;
  swift_release(v11);
  return swift_release(v19);
}

void sub_10010383C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  if (a2)
  {
    v28 = a2;
    v3 = sub_1000E23A4((uint64_t)v28, a1);
    v5 = static os_log_type_t.default.getter(v3);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v6 = qword_100218DD8;
    v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v8 = swift_allocObject(v7, 112, 7);
    *(_OWORD *)(v8 + 16) = xmmword_1001858F0;
    v9 = URL.absoluteString.getter();
    v11 = v10;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    v12 = sub_1000A0DF4();
    *(_QWORD *)(v8 + 64) = v12;
    *(_QWORD *)(v8 + 32) = v9;
    *(_QWORD *)(v8 + 40) = v11;
    v13 = objc_msgSend(v28, "data");
    v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    Data.hexString.getter(v14, v16);
    v18 = v17;
    v20 = v19;
    sub_1000A103C(v14, v16);
    *(_QWORD *)(v8 + 96) = &type metadata for String;
    *(_QWORD *)(v8 + 104) = v12;
    *(_QWORD *)(v8 + 72) = v18;
    *(_QWORD *)(v8 + 80) = v20;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Updated change token, URL, %@, token, %@", 40, 2, v8);
    swift_bridgeObjectRelease(v8);

  }
  else
  {
    v4 = sub_1000E22C0();
    v21 = static os_log_type_t.default.getter(v4);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    v22 = qword_100218DD8;
    v23 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100184870;
    v25 = URL.absoluteString.getter();
    v27 = v26;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Deleted change token, URL, %@", 29, 2, v24);
    swift_bridgeObjectRelease(v24);
  }
}

uint64_t sub_100103C88(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v6 = 0;
    v22 = v3;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, "recordID", v22);
      v10 = objc_msgSend(v9, "recordName");

      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      v14 = objc_msgSend(a2, "recordName");
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v16 = v15;

      if (v11 == v3 && v13 == v16)
      {

        swift_bridgeObjectRelease_n(v13, 2);
        return v6;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v3, v16, 0);

      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
        return v6;
      v19 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      ++v6;
      if (v19 == v5)
        return 0;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t sub_100103E48(uint64_t *a1, void *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  id v9;
  unint64_t i;
  unint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  id v25;
  id v26;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;

  v5 = *a1;
  v6 = swift_bridgeObjectRetain(*a1);
  v45 = a2;
  v46 = sub_100103C88(v6, a2);
  v8 = v7;
  swift_bridgeObjectRelease(v5);
  v44 = v2;
  if (v2)
    return v46;
  if ((v8 & 1) == 0)
  {
    v9 = (id)(v46 + 1);
    if (__OFADD__(v46, 1))
      goto LABEL_63;
    v5 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_64:
      if ((v5 & 0x8000000000000000) != 0)
        v40 = v5;
      else
        v40 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v41 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v5);
      if (v9 != (id)v41)
        goto LABEL_6;
    }
    else if (v9 != *(id *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v46 + 5; ; ++i)
      {
        v5 = i - 4;
        v11 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v11);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          if (v5 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v12 = *(id *)(v11 + 8 * i);
        }
        v13 = v12;
        v14 = objc_msgSend(v12, "recordID", v44);
        v15 = objc_msgSend(v14, "recordName");

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        v9 = objc_msgSend(v45, "recordName");
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v21 = v20;

        if (v16 == v19 && v18 == v21)
        {

          swift_bridgeObjectRelease_n(v18, 2);
          goto LABEL_38;
        }
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v21, 0);

        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v21);
        if ((v23 & 1) != 0)
          goto LABEL_38;
        if (v5 != v46)
          break;
LABEL_35:
        if (__OFADD__(v46, 1))
          goto LABEL_56;
        ++v46;
LABEL_38:
        v9 = (id)(i - 3);
        if (__OFADD__(v5, 1))
          goto LABEL_55;
        v35 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v35 < 0)
            v37 = *a1;
          else
            v37 = v35 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v36 = _CocoaArrayWrapper.endIndex.getter(v37);
          swift_bridgeObjectRelease(v35);
        }
        else
        {
          v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == (id)v36)
          return v46;
      }
      v24 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, *a1);
        v24 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_21:
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_59;
          if (v5 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_60;
          v26 = *(id *)(v24 + 8 * i);
          goto LABEL_24;
        }
      }
      else
      {
        if ((v46 & 0x8000000000000000) != 0)
          goto LABEL_57;
        if (v46 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_58;
        v25 = *(id *)(v24 + 8 * v46 + 32);
        if ((v24 & 0xC000000000000001) == 0)
          goto LABEL_21;
      }
      v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v24);
      v24 = *a1;
LABEL_24:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v24);
      *a1 = v24;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v24 < 0 || (v24 & 0x4000000000000000) != 0)
      {
        v24 = sub_100169B3C(v24);
        *a1 = v24;
      }
      v28 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v46 + 0x20);
      *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v46 + 0x20) = v26;

      specialized Array._endMutation()(v29);
      v30 = *a1;
      v31 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v30;
      if (!v31 || v30 < 0 || (v30 & 0x4000000000000000) != 0)
      {
        v30 = sub_100169B3C(v30);
        *a1 = v30;
      }
      if ((v5 & 0x8000000000000000) != 0)
        goto LABEL_61;
      v32 = v30 & 0xFFFFFFFFFFFFFF8;
      if (v5 >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_62;
      v33 = *(void **)(v32 + 8 * i);
      *(_QWORD *)(v32 + 8 * i) = v25;

      specialized Array._endMutation()(v34);
      goto LABEL_35;
    }
    return v46;
  }
  v38 = *a1;
  if (!((unint64_t)v38 >> 62))
    return *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v38 < 0)
    v42 = v38;
  else
    v42 = v38 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v38);
  v43 = _CocoaArrayWrapper.endIndex.getter(v42);
  swift_bridgeObjectRelease(v38);
  return v43;
}

Class sub_100104238(uint64_t a1, void *a2)
{
  Swift::String v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  _QWORD *v10;
  uint64_t v11;
  CKModifySubscriptionsOperation v12;
  Class result;
  Class v14;
  Class v15;
  uint64_t v16;
  Swift::OpaquePointer_optional v17;

  sub_1000AB31C(0, &qword_100211A70, CKDatabaseSubscription_ptr);
  swift_bridgeObjectRetain(a2);
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  isa = CKDatabaseSubscription.init(subscriptionID:)(v4).super.super.isa;
  v6 = objc_msgSend(objc_allocWithZone((Class)CKNotificationInfo), "init");
  objc_msgSend(v6, "setShouldSendContentAvailable:", 1);
  -[objc_class setNotificationInfo:](isa, "setNotificationInfo:", v6);
  sub_1000AB31C(0, &qword_100211A78, CKModifySubscriptionsOperation_ptr);
  v7 = sub_1000A0980(&qword_100211998);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100187640;
  *(_QWORD *)(v8 + 32) = isa;
  v16 = v8;
  specialized Array._endMutation()(v8);
  v9 = isa;
  v10 = _swiftEmptyArrayStorage;
  v11 = v16;
  v12.super.super.super.super.isa = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(*(Swift::OpaquePointer_optional *)(&v10 - 1), v17).super.super.super.super.isa;
  result = (Class)-[objc_class configuration](v12.super.super.super.super.isa, "configuration");
  if (result)
  {
    v14 = result;
    -[objc_class setAutomaticallyRetryNetworkFailures:](result, "setAutomaticallyRetryNetworkFailures:", 0);

    result = (Class)-[objc_class configuration](v12.super.super.super.super.isa, "configuration");
    if (result)
    {
      v15 = result;
      -[objc_class setDiscretionaryNetworkBehavior:](result, "setDiscretionaryNetworkBehavior:", 0);

      return v12.super.super.super.super.isa;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001043D0(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  id v28;
  NSString v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  id v38;
  unint64_t v39;
  Class isa;
  NSString v41;
  __int128 v43;
  __int128 v44;
  void *v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];

  if (a4)
  {
    swift_getErrorValue(a4, &v47, v46);
    v49[0] = Error.localizedDescription.getter(v46[1], v46[2]);
    v49[1] = v6;
    *(_QWORD *)&v43 = a4;
    swift_errorRetain(a4);
    v7 = sub_1000A0980(&qword_100210710);
    type metadata accessor for CKError(0);
    v9 = v8;
    if ((swift_dynamicCast(&v45, &v43, v7, v8, 6) & 1) != 0)
    {
      v10 = v45;
      v11 = sub_1000A0940(&qword_100210590, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100185228);
      _BridgedStoredNSError.code.getter(&v43, v9, v11);
      v12 = (id)stringForCKErrorCode(v43);
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      swift_bridgeObjectRelease(v49[1]);
      v49[0] = v13;
      v49[1] = v15;
      v45 = v10;
      v16 = _BridgedStoredNSError.userInfo.getter(v9, v11);
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
      v19 = v18;
      if (*(_QWORD *)(v16 + 16) && (v20 = sub_1000AA00C(v17, v18), (v21 & 1) != 0))
      {
        sub_100104A08(*(_QWORD *)(v16 + 56) + 32 * v20, (uint64_t)&v43);
      }
      else
      {
        v43 = 0u;
        v44 = 0u;
      }
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v16);
      if (*((_QWORD *)&v44 + 1))
      {
        v22 = sub_1000A0980(&qword_1002119D8);
        v23 = swift_dynamicCast(&v45, &v43, (char *)&type metadata for Any + 8, v22, 6);
        if ((v23 & 1) != 0)
        {
          v24 = (uint64_t)v45;
          __chkstk_darwin(v23);
          sub_10010325C(v24, (void (*)(_BYTE *, id))sub_100104C3C);
          swift_bridgeObjectRelease(v24);
        }

      }
      else
      {

        sub_1000A1000((uint64_t)&v43, &qword_100211980);
      }
    }
  }
  else
  {
    strcpy((char *)v49, "NotApplicable");
    HIWORD(v49[1]) = -4864;
  }
  v41 = String._bridgeToObjectiveC()();
  v25 = sub_1000A0980((uint64_t *)&unk_100212320);
  inited = swift_initStackObject(v25, &v48);
  *(_OWORD *)(inited + 16) = xmmword_100187650;
  *(_QWORD *)(inited + 32) = 0x726F727245;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v27 = v49[1];
  v28 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain(v27);
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v30 = objc_msgSend(v28, "initWithString:", v29);

  *(_QWORD *)(inited + 48) = v30;
  *(_QWORD *)(inited + 56) = 0x6D69547473726946;
  *(_QWORD *)(inited + 64) = 0xE900000000000065;
  v31 = objc_msgSend(a1, "recordChangeTag");
  v32 = v31;
  if (v31)

  v33 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v32 == 0);
  *(_QWORD *)(inited + 72) = v33;
  *(_QWORD *)(inited + 80) = 0x795464726F636552;
  *(_QWORD *)(inited + 88) = 0xEA00000000006570;
  CKRecord.recordType.getter(v33);
  v35 = v34;
  v36 = objc_allocWithZone((Class)NSString);
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  v38 = objc_msgSend(v36, "initWithString:", v37);

  *(_QWORD *)(inited + 96) = v38;
  *(_QWORD *)(inited + 104) = 0x73736563637553;
  *(_QWORD *)(inited + 112) = 0xE700000000000000;
  *(_QWORD *)(inited + 120) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", a4 == 0);
  strcpy((char *)(inited + 128), "SyncDuration");
  *(_BYTE *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(_QWORD *)(inited + 144) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", 0.0);
  strcpy((char *)(inited + 152), "UploadDuration");
  *(_BYTE *)(inited + 167) = -18;
  *(_QWORD *)(inited + 168) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", -Date.timeIntervalSinceNow.getter());
  strcpy((char *)(inited + 176), "UserInitiated");
  *(_WORD *)(inited + 190) = -4864;
  *(_QWORD *)(inited + 192) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", a3 & 1);
  v39 = sub_1000A5628(inited);
  sub_1000AB31C(0, &qword_1002119D0, NSObject_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v39);
  CUMetricsLog(v41, isa);
  swift_bridgeObjectRelease(v27);

}

uint64_t sub_100104930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001049B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1000F8C50(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), v1 + v4, *(unsigned __int8 *)(v1 + v4 + *(_QWORD *)(v3 + 64)));
}

uint64_t sub_100104A08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100104A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_100104ACC(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_1000F9184(a1, v4, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), v2 + v6, *(_BYTE *)(v2 + v6 + *(_QWORD *)(v5 + 64)));
}

uint64_t sub_100104B2C(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000AB31C(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100104B70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100104B80()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100104BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000F99B4(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD **)(v3 + 24));
}

uint64_t sub_100104BC0()
{
  return sub_100104BCC((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100104BCC(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_100104C04()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), 0);
}

uint64_t sub_100104C30(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100104C3C()
{
  return sub_1000F98F8();
}

uint64_t sub_100104C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudCoordinatorConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100104C88(uint64_t a1, char a2)
{
  sub_1000FE2D4(a1, a2 & 1);
}

uint64_t sub_100104C94(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_100104CA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100104CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000FD914(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100104CCC()
{
  uint64_t v0;

  return sub_1000FDB6C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100104CD4(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1000FDBF8(a1, a2 & 1, v2);
}

uint64_t sub_100104CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v12 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v13 = qword_100218DD8;
  v14 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v15 = swift_allocObject(v14, 152, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100187620;
  Data.hexString.getter(a1, a2);
  v17 = v16;
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_1000A0DF4();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v20;
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 72) = a3;
  *(_QWORD *)(v15 + 80) = a4;
  *(_QWORD *)(v15 + 136) = &type metadata for String;
  *(_QWORD *)(v15 + 144) = v20;
  *(_QWORD *)(v15 + 112) = a5;
  *(_QWORD *)(v15 + 120) = a6;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "APS token: <%@> forTopic: [%@] identifier: [%@]", 47, 2, v15);
  return swift_bridgeObjectRelease(v15);
}

uint64_t sub_100104E08()
{
  uint64_t v0;

  return sub_1000F7374(*(_QWORD *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_100104E14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_100104E38(void *a1, char a2)
{
  uint64_t v2;

  sub_1000F5C9C(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

void sub_100104E48(void *a1, void *a2)
{
  uint64_t v2;

  sub_1000F706C(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

void sub_100104E50(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_100104E5C(uint64_t a1, char a2)
{
  return sub_1000F6B84(a1, a2 & 1);
}

uint64_t sub_100104E6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100104E98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100104EA8()
{
  uint64_t v0;

  return sub_1000F6D6C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100104EB4(uint64_t a1, char a2)
{
  return sub_1000F6DAC(a1, a2 & 1);
}

uint64_t sub_100104EC0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100104EE4()
{
  uint64_t v0;

  return sub_10014CC94(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100104EF0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F4AEC(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_100104F00(uint64_t a1, void **a2)
{
  uint64_t *v2;

  return sub_1000F42C0(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100104F0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100104F30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 33, 7);
}

void sub_100104F54()
{
  uint64_t v0;

  sub_1000F4CE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_100104F60()
{
  uint64_t v0;

  return sub_1000F5790(v0);
}

uint64_t sub_100104F68()
{
  uint64_t v0;

  return sub_1000F5494(v0);
}

void sub_100104F78()
{
  uint64_t v0;

  sub_10014CDE8(v0);
}

uint64_t sub_100104F80()
{
  uint64_t v0;

  return sub_1000F3FFC(v0);
}

uint64_t sub_100104F88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000F2FE4(a2, *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_100104FB4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100104FF0()
{
  return sub_1000A4F0C(sub_10014BAB0);
}

uint64_t sub_100104FFC()
{
  uint64_t v0;

  return sub_1000F4268(v0);
}

uint64_t sub_100105004()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100105014()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100105050()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F2A7C);
}

uint64_t sub_10010505C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_100105090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000F2DB8(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(NSObject **)(v3 + 40));
}

uint64_t sub_10010509C()
{
  uint64_t v0;

  return sub_1000F21C4(v0);
}

uint64_t sub_1001050A4()
{
  uint64_t v0;

  return sub_1000F245C(v0);
}

uint64_t sub_1001050AC()
{
  return sub_100105318((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release, 64);
}

uint64_t sub_1001050C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100105104(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000F1674(a1, a2 & 1, *(void **)(v2 + 16), *(uint64_t (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100105138()
{
  return sub_100105318((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 64);
}

void sub_100105150(void *a1, char a2)
{
  uint64_t v2;

  sub_1000F199C(a1, a2 & 1, *(void (**)(void))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100105164()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100105198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 40);
  if (!__OFADD__(v1, 1))
    return sub_1000F1084(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v1 + 1, *(void (**)(void))(v0 + 48), *(_QWORD *)(v0 + 56));
  __break(1u);
  return result;
}

uint64_t sub_1001051D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1001051FC(uint64_t a1)
{
  uint64_t v1;

  sub_1000F0E9C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_100105208()
{
  return sub_100105318((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release, 64);
}

void sub_100105220()
{
  uint64_t *v0;

  sub_1000F13C0(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_100105230()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

id sub_10010526C()
{
  uint64_t v0;

  return sub_1000EE9C8(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

void sub_100105280(void *a1, void *a2, char a3)
{
  uint64_t v3;

  sub_1000EF2AC(a1, a2, a3 & 1, v3);
}

uint64_t sub_10010528C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000EF698(a1, a2, a3, v3);
}

uint64_t sub_100105294()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

void sub_1001052D0(void *a1, void *a2, uint64_t a3, unint64_t a4, __int16 a5)
{
  uint64_t v5;

  sub_1000EF874(a1, a2, a3, a4, a5 & 0x1FF, *(_BYTE *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(void **)(v5 + 48));
}

uint64_t sub_100105300()
{
  return sub_100105318((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release, 56);
}

uint64_t sub_100105318(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;

  a1(v3[3]);
  swift_release(v3[4]);
  a2(v3[6]);
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_100105368(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000F00F4(a1, a2 & 1, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(uint64_t, uint64_t))(v2 + 40));
}

uint64_t sub_10010537C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1001053A8()
{
  uint64_t v0;

  return sub_1000F03E4(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001053B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001053C0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000EFED4(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_1001053C8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return swift_errorRelease(a1);

  return sub_1000B2D78(a2, a3);
}

uint64_t sub_1001053FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100105430()
{
  uint64_t v0;

  sub_1000ECA58(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32), *(unsigned __int8 *)(v0 + 33), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100105444(void *a1)
{
  uint64_t v1;

  return sub_1000ED108(a1, v1);
}

uint64_t sub_10010544C(void *a1)
{
  uint64_t v1;

  return sub_1000ED290(a1, v1);
}

uint64_t sub_100105454()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100105464(void *a1)
{
  uint64_t v1;

  return sub_1000ED328(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_10010546C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

void sub_1001054B0(void *a1, __int16 a2)
{
  uint64_t v2;

  sub_1000ED4E0(a1, a2 & 0x1FF, *(_QWORD *)(v2 + 16), *(void (**)(void *, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(void **)(v2 + 64));
}

void sub_1001054E8(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_1001054F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100105524()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100105560(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000EE544(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40));
}

id sub_100105574(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

uint64_t sub_100105580()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1001055B4()
{
  uint64_t v0;

  sub_1000EC15C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void *, _QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001055C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001055EC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = a2 & 1;
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(a1, v4);
  return v5(a1, v4);
}

uint64_t sub_100105640(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10010566C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 26, 7);
}

void sub_100105690()
{
  uint64_t v0;

  sub_1000E9B94(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(unsigned __int8 *)(v0 + 25));
}

uint64_t sub_1001056A0()
{
  return sub_1001058A8((void (*)(_QWORD))&_swift_release);
}

void sub_1001056AC(void *a1, void *a2, char a3)
{
  uint64_t v3;

  sub_1000EA65C(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16));
}

void sub_1001056B8(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_1000EAA78(a1, a2, a3 & 1, v3);
}

uint64_t sub_1001056C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 50, 7);
}

uint64_t sub_100105700(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000EAE58(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48), *(unsigned __int8 *)(v2 + 49));
}

void sub_100105718(BOOL *a1@<X8>)
{
  uint64_t v1;

  sub_1000FD41C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100105730()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100104C94(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 58, 7);
}

uint64_t sub_100105770()
{
  uint64_t v0;

  return sub_1000EB0C0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(unsigned __int8 *)(v0 + 57));
}

uint64_t sub_100105788(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_100105794(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1001057CC(void *a1)
{
  uint64_t v1;

  return sub_1000E91E0(a1, v1);
}

void sub_1001057D4()
{
  uint64_t v0;

  sub_1000E94C4(v0);
}

uint64_t sub_1001057DC()
{
  uint64_t v0;

  return sub_1000E8E80(v0);
}

uint64_t sub_1001057E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100105814()
{
  uint64_t v0;

  return sub_1000E8A38(v0);
}

uint64_t sub_10010581C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100105840()
{
  return sub_1001058A8((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

void sub_10010584C()
{
  uint64_t v0;

  sub_10010AFA8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100105854()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100105864()
{
  sub_1000E8AC4(1);
}

uint64_t sub_10010586C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10010587C(id a1)
{
  if (a1 != (id)1)

}

id sub_10010588C(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_10010589C()
{
  return sub_1001058A8((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_1001058A8(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, 32, 7);
}

uint64_t sub_1001058D8()
{
  uint64_t v0;

  return sub_10010B354(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001058E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t storeEnumTagSinglePayload for CloudCoordinator.DatabaseToken(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10010593C + 4 * byte_10018766B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100105970 + 4 * byte_100187666[v4]))();
}

uint64_t sub_100105970(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100105978(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100105980);
  return result;
}

uint64_t sub_10010598C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100105994);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100105998(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001059A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudCoordinator.DatabaseToken()
{
  return &type metadata for CloudCoordinator.DatabaseToken;
}

_QWORD *initializeBufferWithCopyOfBuffer for CloudCoordinator.CloudCoordinatorError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for CloudCoordinator.CloudCoordinatorError(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease(result);
  return result;
}

unint64_t *assignWithCopy for CloudCoordinator.CloudCoordinatorError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v4;
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }
  return a1;
}

_QWORD *initializeWithTake for CloudCoordinator.CloudCoordinatorError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for CloudCoordinator.CloudCoordinatorError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudCoordinator.CloudCoordinatorError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF9 && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483642);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 5;
  if (v4 >= 7)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CloudCoordinator.CloudCoordinatorError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 5;
  }
  return result;
}

uint64_t sub_100105BB0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100105BC8(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CloudCoordinator.CloudCoordinatorError()
{
  return &type metadata for CloudCoordinator.CloudCoordinatorError;
}

unint64_t sub_100105C00()
{
  unint64_t result;

  result = qword_100211B58;
  if (!qword_100211B58)
  {
    result = swift_getWitnessTable(&unk_1001878A8, &type metadata for CloudCoordinator.DatabaseToken);
    atomic_store(result, (unint64_t *)&qword_100211B58);
  }
  return result;
}

unint64_t sub_100105C44()
{
  unint64_t result;

  result = qword_100211B60;
  if (!qword_100211B60)
  {
    result = swift_getWitnessTable(&unk_100187828, &type metadata for CloudCoordinator.CloudCoordinatorError);
    atomic_store(result, (unint64_t *)&qword_100211B60);
  }
  return result;
}

_QWORD *sub_100105C88(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

unint64_t sub_100105CC4(unint64_t result)
{
  if (result >= 6)
    return swift_errorRelease(result);
  return result;
}

void sub_100105EF4(BOOL *a1@<X8>)
{
  sub_100105718(a1);
}

void sub_100105FE4()
{
  byte_100211B70 = 0;
}

void sub_100105FF0()
{
  byte_100211B71 = 0;
}

void sub_100105FFC()
{
  byte_100211B72 = 0;
}

void sub_100106008()
{
  byte_100211B73 = 0;
}

uint64_t sub_100106014()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A09C0(v7, qword_100218D68);
  sub_1000A0A00(v3, (uint64_t)qword_100218D68);
  URL.init(string:)(0x6552646568636143, 0xED00007364726F63);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x6563697665444141, 0xEE0064726F636552, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

Class AADeviceRecord.description.getter()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  objc_class *v17;
  Class isa;
  char *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *object;
  Swift::String v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  Swift::String v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  Swift::String v46;
  void *v47;
  void *v48;
  Class v49;
  Swift::String v50;
  id v51;
  void *v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  void *v57;
  uint64_t v58;
  char *v59;
  void *v60;
  Class v61;
  id v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  char *v73;
  void *v74;
  Class v75;
  id v76;
  void *v77;
  Swift::String v78;
  Swift::String v79;
  id v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  Swift::String v85;
  Swift::String v86;
  id v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  Class v100;
  Class v101;
  unint64_t v102;
  Class v103;
  unint64_t v104;

  v1 = v0;
  v2 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v2);
  v97 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v98 = (uint64_t)&v94 - v5;
  __chkstk_darwin(v6);
  v96 = (char *)&v94 - v7;
  __chkstk_darwin(v8);
  v95 = (uint64_t)&v94 - v9;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD **)(v10 - 8);
  __chkstk_darwin(v10);
  v99 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_autoreleasePoolPush();
  v14 = &v0[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v15 = *(_QWORD *)&v0[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v16 = *((_QWORD *)v14 + 1);
  sub_1000A0E74(v15, v16);
  sub_100109DEC(v15, v16);
  isa = v17;
  sub_1000A103C(v15, v16);
  if (!isa)
  {
    v19 = v1;
    isa = sub_1000A9DB8((uint64_t)v19).super.isa;

  }
  v100 = isa;
  v101 = isa;
  sub_10010894C((id *)&v101);
  objc_autoreleasePoolPop(v13);
  v101 = 0;
  v102 = 0xE000000000000000;
  _StringGuts.grow(_:)(239);
  v103 = v101;
  v104 = v102;
  v20._countAndFlagsBits = 0x6563697665444141;
  v20._object = (void *)0xEF2864726F636552;
  String.append(_:)(v20);
  v21 = type metadata accessor for UUID(0);
  v22 = sub_1000A0940((unint64_t *)&unk_100210750, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
  object = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(object);
  v25._countAndFlagsBits = 2108704;
  v25._object = (void *)0xE300000000000000;
  String.append(_:)(v25);
  v26 = *(_QWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  v27 = *(void **)&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
  swift_bridgeObjectRetain(v27);
  v28._countAndFlagsBits = v26;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  v29._countAndFlagsBits = 0xD00000000000001ELL;
  v29._object = (void *)0x80000001001B07A0;
  String.append(_:)(v29);
  LOBYTE(v101) = v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig];
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  v31 = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v31);
  v32._countAndFlagsBits = 0xD00000000000001BLL;
  v32._object = (void *)0x80000001001B07C0;
  String.append(_:)(v32);
  LOBYTE(v101) = v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff];
  v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int8, &protocol witness table for Int8);
  v34 = v33._object;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v34);
  v35._countAndFlagsBits = 0xD00000000000001CLL;
  v35._object = (void *)0x80000001001B07E0;
  String.append(_:)(v35);
  LOBYTE(v101) = v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig];
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  v37 = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v37);
  v38._object = (void *)0x80000001001B0800;
  v38._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v38);
  LOBYTE(v101) = v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode];
  v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int8, &protocol witness table for Int8);
  v40 = v39._object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v40);
  v41._countAndFlagsBits = 0xD000000000000014;
  v41._object = (void *)0x80000001001AAFA0;
  String.append(_:)(v41);
  v42 = &v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate];
  swift_beginAccess(&v1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate], &v101, 0, 0);
  v43 = (void (*)(char *, char *, uint64_t))v11[2];
  v44 = v99;
  v43(v99, v42, v10);
  v45 = sub_1000A0940(&qword_100211B90, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v45);
  v47 = v46._object;
  String.append(_:)(v46);
  v48 = v47;
  v49 = v100;
  swift_bridgeObjectRelease(v48);
  v94 = (void (*)(char *, uint64_t))v11[1];
  v94(v44, v10);
  v50._countAndFlagsBits = 0xD00000000000001ALL;
  v50._object = (void *)0x80000001001AAFC0;
  String.append(_:)(v50);
  v51 = -[objc_class creationDate](v49, "creationDate");
  if (v51)
  {
    v52 = v51;
    v53 = (uint64_t)v96;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

    v54 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11[7];
    v54(v53, 0, 1, v10);
  }
  else
  {
    v54 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11[7];
    v53 = (uint64_t)v96;
    v54((uint64_t)v96, 1, 1, v10);
  }
  v55 = v95;
  sub_1000A0F38(v53, v95);
  v56 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v11[6];
  if (v56(v55, 1, v10))
  {
    sub_1000A1000(v55, (uint64_t *)&unk_1002103D0);
    v57 = (void *)0xE200000000000000;
    v58 = 15932;
  }
  else
  {
    v59 = v99;
    v43(v99, (char *)v55, v10);
    sub_1000A1000(v55, (uint64_t *)&unk_1002103D0);
    v60 = (void *)objc_opt_self(NSDateFormatter);
    v61 = Date._bridgeToObjectiveC()().super.isa;
    v62 = objc_msgSend(v60, "localizedStringFromDate:dateStyle:timeStyle:", v61, 2, 2);

    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    v57 = v63;

    v49 = v100;
    v94(v59, v10);
  }
  v64._countAndFlagsBits = v58;
  v64._object = v57;
  String.append(_:)(v64);
  swift_bridgeObjectRelease(v57);
  v65._countAndFlagsBits = 0xD000000000000012;
  v65._object = (void *)0x80000001001AAFE0;
  String.append(_:)(v65);
  v66 = -[objc_class modificationDate](v49, "modificationDate");
  if (v66)
  {
    v67 = v66;
    v68 = (uint64_t)v97;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v66);

    v69 = 0;
  }
  else
  {
    v69 = 1;
    v68 = (uint64_t)v97;
  }
  v54(v68, v69, 1, v10);
  v70 = v98;
  sub_1000A0F38(v68, v98);
  if (v56(v70, 1, v10))
  {
    sub_1000A1000(v70, (uint64_t *)&unk_1002103D0);
    v71 = (void *)0xE200000000000000;
    v72 = 15932;
  }
  else
  {
    v73 = v99;
    v43(v99, (char *)v70, v10);
    sub_1000A1000(v70, (uint64_t *)&unk_1002103D0);
    v74 = (void *)objc_opt_self(NSDateFormatter);
    v75 = Date._bridgeToObjectiveC()().super.isa;
    v76 = objc_msgSend(v74, "localizedStringFromDate:dateStyle:timeStyle:", v75, 2, 2);

    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v71 = v77;

    v49 = v100;
    v94(v73, v10);
  }
  v78._countAndFlagsBits = v72;
  v78._object = v71;
  String.append(_:)(v78);
  swift_bridgeObjectRelease(v71);
  v79._object = (void *)0x80000001001AB000;
  v79._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v79);
  v80 = -[objc_class modifiedByDevice](v49, "modifiedByDevice");
  if (v80)
  {
    v81 = v80;
    v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v84 = v83;

  }
  else
  {
    v84 = (void *)0xE200000000000000;
    v82 = 15932;
  }
  v85._countAndFlagsBits = v82;
  v85._object = v84;
  String.append(_:)(v85);
  swift_bridgeObjectRelease(v84);
  v86._countAndFlagsBits = 0x746520202020202CLL;
  v86._object = (void *)0xEC000000203A6761;
  String.append(_:)(v86);
  v87 = -[objc_class recordChangeTag](v49, "recordChangeTag");
  if (v87)
  {
    v88 = v87;
    v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v91 = v90;

  }
  else
  {
    v91 = (void *)0xE200000000000000;
    v89 = 15932;
  }
  v92._countAndFlagsBits = v89;
  v92._object = v91;
  String.append(_:)(v92);

  swift_bridgeObjectRelease(v91);
  return v103;
}

_QWORD *sub_100106A4C(id a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  char *v46;
  _QWORD *v47;
  NSString v48;
  id v49;
  id v50;
  char v51;
  NSString v52;
  id v53;
  char v54;
  NSString v55;
  id v56;
  char v57;
  NSString v58;
  id v59;
  char v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  id v67;
  void *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(uint64_t, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  int v77;
  uint64_t v78;
  char *v79;
  id v80;
  void *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(uint64_t, char *, uint64_t);
  char *v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  objc_class *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  objc_super v101;
  _QWORD v102[2];
  id v103;

  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v95 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v98 = (char *)&v89 - v7;
  v8 = type metadata accessor for Date(0);
  v99 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v96 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v94 = (char *)&v89 - v11;
  v12 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v12);
  v14 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v97 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v1;
  v18 = CKRecord.recordType.getter(v17);
  v20 = v19;
  if (v18 == 0x6563697665444141 && v19 == 0xEE0064726F636552)
  {
    swift_bridgeObjectRelease(0xEE0064726F636552);
LABEL_5:
    v22 = objc_msgSend(a1, "encryptedValues");
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "objectForKeyedSubscript:", v23);

    if (!v24
      || (v93 = v2,
          v103 = v24,
          v25 = sub_1000A0980(&qword_100210400),
          (swift_dynamicCast(v102, &v103, v25, &type metadata for String, 6) & 1) == 0))
    {

      goto LABEL_10;
    }
    v91 = v8;
    v92 = v22;
    v26 = v102[1];
    v90 = v102[0];
    v27 = objc_msgSend(a1, "recordID");
    v28 = objc_msgSend(v27, "recordName");

    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    UUID.init(uuidString:)(v29, v31);
    swift_bridgeObjectRelease(v31);
    v32 = v100;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v100) == 1)
    {
      swift_bridgeObjectRelease(v26);

      v33 = sub_1000A1000((uint64_t)v14, &qword_1002103E0);
      v22 = v92;
LABEL_10:
      v34 = static os_log_type_t.error.getter(v33);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v35 = qword_100218DE8;
      v36 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v37 = swift_allocObject(v36, 72, 7);
      *(_OWORD *)(v37 + 16) = xmmword_100184870;
      *(_QWORD *)(v37 + 56) = sub_1000A0FC4();
      *(_QWORD *)(v37 + 64) = sub_1000A0940((unint64_t *)&qword_1002108A0, (uint64_t (*)(uint64_t))sub_1000A0FC4, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v37 + 32) = a1;
      a1 = a1;
      os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Invalid AADeviceRecord - %@", 27, 2, v37);
      swift_bridgeObjectRelease(v37);
      v38 = sub_100109818();
      v39 = swift_allocError(&type metadata for AADeviceRecord.AADeviceRecordError, v38, 0, 0);
      *v40 = 4;
      swift_willThrow(v39);
      swift_unknownObjectRelease(v22);
      goto LABEL_14;
    }
    v46 = v97;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v97, v14, v32);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))((uint64_t)v17 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier, v46, v32);
    v47 = (_QWORD *)((char *)v17 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
    *v47 = v90;
    v47[1] = v26;
    v48 = String._bridgeToObjectiveC()();
    v49 = v92;
    v50 = objc_msgSend(v92, "objectForKeyedSubscript:", v48);

    if (v50 && (v102[0] = v50, swift_dynamicCast(&v103, v102, v25, &type metadata for UInt8, 6)))
    {
      v51 = (char)v103;
    }
    else
    {
      if (qword_100210190 != -1)
        swift_once(&qword_100210190, sub_100105FE4);
      v51 = byte_100211B70;
    }
    *((_BYTE *)v17 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig) = v51;
    v52 = String._bridgeToObjectiveC()();
    v53 = objc_msgSend(v49, "objectForKeyedSubscript:", v52);

    if (v53 && (v102[0] = v53, swift_dynamicCast(&v103, v102, v25, &type metadata for Int8, 6)))
    {
      v54 = (char)v103;
    }
    else
    {
      if (qword_100210198 != -1)
        swift_once(&qword_100210198, sub_100105FF0);
      v54 = byte_100211B71;
    }
    *((_BYTE *)v17 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff) = v54;
    v55 = String._bridgeToObjectiveC()();
    v56 = objc_msgSend(v49, "objectForKeyedSubscript:", v55);

    if (v56 && (v102[0] = v56, swift_dynamicCast(&v103, v102, v25, &type metadata for UInt8, 6)))
    {
      v57 = (char)v103;
    }
    else
    {
      if (qword_1002101A0 != -1)
        swift_once(&qword_1002101A0, sub_100105FFC);
      v57 = byte_100211B72;
    }
    *((_BYTE *)v17 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig) = v57;
    v58 = String._bridgeToObjectiveC()();
    v59 = objc_msgSend(v49, "objectForKeyedSubscript:", v58);

    if (v59 && (v102[0] = v59, swift_dynamicCast(&v103, v102, v25, &type metadata for Int8, 6)))
    {
      v60 = (char)v103;
    }
    else
    {
      if (qword_1002101A8 != -1)
        swift_once(&qword_1002101A8, sub_100106008);
      v60 = byte_100211B73;
    }
    *((_BYTE *)v17 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode) = v60;
    v61 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
    objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v61);
    objc_msgSend(v61, "finishEncoding");
    v62 = objc_msgSend(v61, "encodedData");
    v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v65 = v64;

    v66 = (_QWORD *)((char *)v17 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata);
    *v66 = v63;
    v66[1] = v65;
    v67 = objc_msgSend(a1, "modificationDate");
    if (v67)
    {
      v68 = v67;
      v69 = v96;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v67);

      v70 = v99;
      v71 = *(void (**)(uint64_t, char *, uint64_t))(v99 + 32);
      v72 = v15;
      v73 = (uint64_t)v98;
      v74 = v91;
      v71((uint64_t)v98, v69, v91);
      v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
      v75(v73, 0, 1, v74);
      v76 = v73;
      v15 = v72;
      v32 = v100;
      v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v76, 1, v74);
      v78 = (uint64_t)v95;
      if (v77 != 1)
      {
        swift_unknownObjectRelease(v92);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v97, v32);
        v79 = v94;
        v71((uint64_t)v94, v98, v74);
LABEL_50:
        v71((uint64_t)v17 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate, v79, v74);

        v88 = (objc_class *)type metadata accessor for AADeviceRecord(0);
        v101.receiver = v17;
        v101.super_class = v88;
        v17 = objc_msgSendSuper2(&v101, "init");

        return v17;
      }
    }
    else
    {
      v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56);
      v74 = v91;
      v75((uint64_t)v98, 1, 1, v91);
      v78 = (uint64_t)v95;
    }
    v80 = objc_msgSend(a1, "creationDate");
    if (v80)
    {
      v81 = v80;
      v82 = v96;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v80);

      v83 = v99;
      v84 = *(void (**)(uint64_t, char *, uint64_t))(v99 + 32);
      v85 = v82;
      v74 = v91;
      v84(v78, v85, v91);
      v75(v78, 0, 1, v74);
      v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
      v32 = v100;
      v87 = v86(v78, 1, v74);
      if ((_DWORD)v87 != 1)
      {
        swift_unknownObjectRelease(v92);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v97, v32);
        v79 = v94;
        v84((uint64_t)v94, (char *)v78, v74);
LABEL_49:
        sub_1000A1000((uint64_t)v98, (uint64_t *)&unk_1002103D0);
        v71 = *(void (**)(uint64_t, char *, uint64_t))(v99 + 32);
        goto LABEL_50;
      }
    }
    else
    {
      v87 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v75)(v78, 1, 1, v74);
    }
    v79 = v94;
    static Date.now.getter(v87);
    swift_unknownObjectRelease(v92);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v97, v32);
    sub_1000A1000(v78, (uint64_t *)&unk_1002103D0);
    goto LABEL_49;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0x6563697665444141, 0xEE0064726F636552, 0);
  swift_bridgeObjectRelease(v20);
  if ((v21 & 1) != 0)
    goto LABEL_5;

  v41 = sub_100109818();
  v42 = swift_allocError(&type metadata for AADeviceRecord.AADeviceRecordError, v41, 0, 0);
  *v43 = 0;
  swift_willThrow(v42);
LABEL_14:

  v44 = type metadata accessor for AADeviceRecord(0);
  swift_deallocPartialClassInstance(v17, v44, *(unsigned int *)((swift_isaMask & *v17) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v17) + 0x34));
  return v17;
}

void (*sub_100107508(uint64_t a1, uint64_t a2, unint64_t a3, void *a4))(uint64_t, uint64_t)
{
  char *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t *v34;
  id v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  id v39;
  char *v40;
  objc_class *v41;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  objc_super v51;
  id v52;

  v10 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  __chkstk_darwin(v10);
  v43 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v4[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  v13 = &v4[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier];
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v47 = v13;
  v48 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  v16 = v4;
  v49 = a2;
  v50 = a3;
  sub_1000A0E74(a2, a3);
  v52 = a4;
  v17 = objc_msgSend(a4, "bluetoothAddress");
  if (!v17)
  {
    v24 = 2;
    goto LABEL_11;
  }
  v18 = v17;
  v46 = a1;
  v42[1] = v5;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v21 = v20;

  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = v19 & 0xFFFFFFFFFFFFLL;
  if (v22)
  {
    if (v19 == 0xD000000000000011)
    {
      v23 = 0x80000001001AB220;
      if (v21 == 0x80000001001AB220)
        goto LABEL_9;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, 0xD000000000000011, 0x80000001001AB220, 0) & 1) == 0)
    {
      v34 = (uint64_t *)&v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
      *v34 = v19;
      v34[1] = v21;
      v35 = v52;
      v36 = objc_msgSend(v52, "acceptReplyPlayPauseConfig");
      v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig] = v36;
      v37 = objc_msgSend(v35, "listeningModeOffAllowed");
      v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff] = v37;
      v38 = objc_msgSend(v35, "declineDismissSkipConfig");
      v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig] = v38;
      v39 = objc_msgSend(v35, "headGestureToggle");
      v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode] = (char)v39;
      v40 = v43;
      static Date.now.getter(v39);
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate], v40, v45);

      v41 = (objc_class *)type metadata accessor for AADeviceRecord(0);
      v51.receiver = v16;
      v51.super_class = v41;
      v31 = (void (*)(uint64_t, uint64_t))objc_msgSendSuper2(&v51, "init");

      sub_1000A103C(v49, v50);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v14);
      return v31;
    }
  }
  v23 = v21;
LABEL_9:
  swift_bridgeObjectRelease(v23);
  v24 = 3;
  a1 = v46;
LABEL_11:
  v26 = v49;
  v25 = v50;
  v27 = v48;
  v28 = sub_100109818();
  v29 = swift_allocError(&type metadata for AADeviceRecord.AADeviceRecordError, v28, 0, 0);
  *v30 = v24;
  swift_willThrow(v29);

  sub_1000A103C(v26, v25);
  v31 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v31(a1, v14);
  sub_1000A103C(*(_QWORD *)v12, *((_QWORD *)v12 + 1));
  v31((uint64_t)v47, v14);

  v32 = type metadata accessor for AADeviceRecord(0);
  swift_deallocPartialClassInstance(v16, v32, *(unsigned int *)((swift_isaMask & *(_QWORD *)v16) + 0x30), *(unsigned __int16 *)((swift_isaMask & *(_QWORD *)v16) + 0x34));
  return v31;
}

id AADeviceRecord.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AADeviceRecord.init(from:)(a1);
}

id AADeviceRecord.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  void (*v24)(_QWORD, _QWORD, _QWORD);
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  objc_class *v38;
  char *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  void *v46;
  unint64_t v47;
  uint64_t v48;
  objc_class *v49;
  Class isa;
  char *v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  objc_class *v61;
  Class v62;
  char *v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  void (*v83)(_QWORD, _QWORD, _QWORD);
  id v84[4];
  objc_super v85;
  char v86;

  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v72 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v73 = (uint64_t)&v70 - v6;
  __chkstk_darwin(v7);
  v75 = (uint64_t)&v70 - v8;
  v9 = type metadata accessor for Date(0);
  v77 = *(_QWORD *)(v9 - 8);
  v78 = v9;
  __chkstk_darwin(v9);
  v74 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v76 = (char *)&v70 - v12;
  v13 = type metadata accessor for UUID(0);
  v79 = *(char **)(v13 - 8);
  v80 = v13;
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_1000A0980(&qword_100211B98);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v20 = (char *)a1[4];
  v81 = a1;
  v82 = v20;
  sub_1000A20D8(a1, v21);
  v22 = (id)sub_1001090A8();
  v23 = v1;
  v24 = v83;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AADeviceRecord.CodingKeys, &type metadata for AADeviceRecord.CodingKeys, v22, v21, v82);
  if (!v24)
  {
    v25 = v80;
    v86 = 0;
    v26 = sub_1000A2160();
    v27 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v84, &type metadata for Data, &v86, v16, &type metadata for Data, v26);
    *(_OWORD *)((char *)v23 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata) = *(_OWORD *)v84;
    LOBYTE(v84[0]) = 1;
    v30 = sub_1000A0940((unint64_t *)&unk_1002105C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v25, v84, v16, v25, v30);
    (*((void (**)(uint64_t, _QWORD *, uint64_t))v79 + 4))((uint64_t)v23 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier, v15, v25);
    LOBYTE(v84[0]) = 2;
    v31 = KeyedDecodingContainer.decode(_:forKey:)(v84, v16);
    v32 = (_QWORD *)((char *)v23 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
    *v32 = v31;
    v32[1] = v33;
    LOBYTE(v84[0]) = 3;
    *((_BYTE *)v23 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig) = KeyedDecodingContainer.decode(_:forKey:)(v84, v16);
    LOBYTE(v84[0]) = 4;
    *((_BYTE *)v23 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff) = KeyedDecodingContainer.decode(_:forKey:)(v84, v16);
    LOBYTE(v84[0]) = 5;
    *((_BYTE *)v23 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig) = KeyedDecodingContainer.decode(_:forKey:)(v84, v16);
    LOBYTE(v84[0]) = 6;
    v34 = KeyedDecodingContainer.decode(_:forKey:)(v84, v16);
    *((_BYTE *)v23 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode) = v34;
    v35 = v76;
    static Date.now.getter(v34);
    v36 = v78;
    v37 = v77;
    v83 = *(void (**)(_QWORD, _QWORD, _QWORD))(v77 + 32);
    v83((char *)v23 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate, v35, v78);

    v38 = (objc_class *)type metadata accessor for AADeviceRecord(0);
    v85.receiver = v23;
    v85.super_class = v38;
    v39 = v27;
    v40 = v16;
    v41 = objc_msgSendSuper2(&v85, "init");
    LOBYTE(v84[0]) = 7;
    v42 = sub_1000A0940(&qword_100210790, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v43 = (char *)v41;
    v44 = v75;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, v84, v40, v36, v42);
    v82 = v43;
    v79 = v39;
    v80 = v40;
    v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    if (v45(v44, 1, v36) != 1)
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v79, v80);
      v57 = v74;
      v83(v74, v44, v36);
LABEL_22:
      v22 = v82;
      v69 = &v82[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate];
      swift_beginAccess(&v82[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate], v84, 33, 0);
      (*(void (**)(char *, char *, uint64_t))(v77 + 40))(v69, v57, v36);
      swift_endAccess(v84);
      sub_1000A2140(v81);

      return v22;
    }
    v46 = objc_autoreleasePoolPush();
    v48 = *(_QWORD *)&v82[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
    v47 = *(_QWORD *)&v82[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
    v71 = (uint64_t *)&v82[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
    sub_1000A0E74(v48, v47);
    sub_100109DEC(v48, v47);
    isa = v49;
    sub_1000A103C(v48, v47);
    if (!isa)
    {
      v51 = v82;
      isa = sub_1000A9DB8((uint64_t)v51).super.isa;

    }
    v84[0] = isa;
    sub_10010894C(v84);
    objc_autoreleasePoolPop(v46);
    v52 = -[objc_class modificationDate](isa, "modificationDate");

    if (v52)
    {
      v53 = v76;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);

      v54 = v73;
      v55 = v78;
      v83(v73, v53, v78);
      v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
      v56(v54, 0, 1, v55);
      if (v45(v54, 1, v55) != 1)
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v79, v80);
        v83(v74, v73, v78);
LABEL_21:
        sub_1000A1000(v75, (uint64_t *)&unk_1002103D0);
        v36 = v78;
        v57 = v74;
        goto LABEL_22;
      }
    }
    else
    {
      v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
      v56(v73, 1, 1, v78);
    }
    v58 = objc_autoreleasePoolPush();
    v60 = *v71;
    v59 = v71[1];
    sub_1000A0E74(*v71, v59);
    sub_100109DEC(v60, v59);
    v62 = v61;
    sub_1000A103C(v60, v59);
    if (!v62)
    {
      v63 = v82;
      v62 = sub_1000A9DB8((uint64_t)v63).super.isa;

    }
    v84[0] = v62;
    sub_10010894C(v84);
    objc_autoreleasePoolPop(v58);
    v64 = -[objc_class creationDate](v62, "creationDate");

    if (v64)
    {
      v65 = v76;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v64);

      v66 = v72;
      v67 = v78;
      v83(v72, v65, v78);
      v56(v66, 0, 1, v67);
      v68 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v45)(v66, 1, v67);
      if ((_DWORD)v68 != 1)
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v79, v80);
        v83(v74, v72, v78);
LABEL_20:
        sub_1000A1000(v73, (uint64_t *)&unk_1002103D0);
        goto LABEL_21;
      }
    }
    else
    {
      v68 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v56)(v72, 1, 1, v78);
    }
    static Date.now.getter(v68);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v79, v80);
    sub_1000A1000(v72, (uint64_t *)&unk_1002103D0);
    goto LABEL_20;
  }

  sub_1000A2140(v81);
  v28 = type metadata accessor for AADeviceRecord(0);
  swift_deallocPartialClassInstance(v23, v28, *(unsigned int *)((swift_isaMask & *v23) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v23) + 0x34));
  return v22;
}

void AADeviceRecord.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("audioaccessoryd.AADeviceRecord", 30, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1001082CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10010830C
                                                            + 4 * asc_100187930[a1]))(0x74654D64756F6C63, 0xED00006174616461);
}

uint64_t sub_10010830C()
{
  return 0x696669746E656469;
}

unint64_t sub_100108328()
{
  return 0xD000000000000010;
}

uint64_t sub_1001083C8()
{
  unsigned __int8 *v0;

  return sub_1001082CC(*v0);
}

uint64_t sub_1001083D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001094AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001083F4(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100108400(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001090A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100108428(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001090A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

id AADeviceRecord.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AADeviceRecord(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t AADeviceRecord.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD v40[2];
  char v41;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000A0980((uint64_t *)&unk_100211BB0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_1000A20D8(a1, v12);
  v13 = sub_1001090A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AADeviceRecord.CodingKeys, &type metadata for AADeviceRecord.CodingKeys, v13, v12, v11);
  v14 = v2;
  v40[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata);
  v41 = 0;
  v15 = sub_1000A21A4();
  v16 = v10;
  v17 = v39;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v40, &v41, v7, &type metadata for Data, v15);
  if (v17)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v39 = v6;
  v19 = v37;
  v20 = v38;
  v21 = v14 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier;
  LOBYTE(v40[0]) = 1;
  v22 = type metadata accessor for UUID(0);
  v23 = sub_1000A0940((unint64_t *)&unk_1002105E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v24 = v21;
  v25 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v24, v40, v7, v22, v23);
  v26 = *(_QWORD *)(v14 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
  v27 = *(_QWORD *)(v14 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8);
  LOBYTE(v40[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v26, v27, v40, 0);
  v28 = v8;
  v29 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig);
  LOBYTE(v40[0]) = 3;
  KeyedEncodingContainer.encode(_:forKey:)(v29, v40, 0);
  v30 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff);
  LOBYTE(v40[0]) = 4;
  KeyedEncodingContainer.encode(_:forKey:)(v30, v40, 0);
  v31 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig);
  LOBYTE(v40[0]) = 5;
  KeyedEncodingContainer.encode(_:forKey:)(v31, v40, 0);
  v32 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode);
  LOBYTE(v40[0]) = 6;
  KeyedEncodingContainer.encode(_:forKey:)(v32, v40, 0);
  v33 = v14 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate;
  swift_beginAccess(v14 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate, v40, 0, 0);
  v34 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v39, v33, v20);
  v41 = 7;
  v35 = sub_1000A0940((unint64_t *)&unk_100210EB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v34, &v41, 0, v20, v35);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v34, v20);
  return (*(uint64_t (**)(char *, _QWORD))(v28 + 8))(v25, 0);
}

uint64_t sub_100108860()
{
  return 0x6563697665444141;
}

uint64_t sub_100108884()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata;
  v2 = *(_QWORD *)v1;
  sub_1000A0E74(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t sub_1001088C4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10010892C(id *a1)
{
  return sub_10010894C(a1);
}

uint64_t sub_10010894C(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;

  v2 = v1;
  v4 = static os_log_type_t.debug.getter(a1);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v5 = qword_100218DE8;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  v8 = *a1;
  v9 = objc_msgSend(v8, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Updating main aaDevice record: %@", 33, 2, v7);
  swift_bridgeObjectRelease(v7);
  v13 = objc_msgSend(v8, "encryptedValues");
  ObjectType = swift_getObjectType(v13);
  CKRecordKeyValueSetting.subscript.getter(&v24, 0xD000000000000010, 0x80000001001AA8D0, ObjectType, &type metadata for String, &protocol witness table for String);
  v15 = v25;
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8);
  if (!v25)
    goto LABEL_8;
  if (v24 != v17 || v25 != v16)
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *(_QWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress), *(_QWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8), 0);
    swift_bridgeObjectRelease(v15);
    if ((v18 & 1) != 0)
      goto LABEL_9;
LABEL_8:
    v26 = &type metadata for String;
    v27 = &protocol witness table for String;
    v24 = v17;
    v25 = v16;
    swift_bridgeObjectRetain(v16);
    CKRecordKeyValueSetting.subscript.setter(&v24, 0xD000000000000010, 0x80000001001AA8D0, ObjectType);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease(v25);
LABEL_9:
  CKRecordKeyValueSetting.subscript.getter(&v24, 0xD00000000000001ALL, 0x80000001001B08B0, ObjectType, &type metadata for UInt8, &protocol witness table for UInt8);
  v19 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig);
  if ((v24 & 0x100) != 0 || v24 != v19)
  {
    v26 = &type metadata for UInt8;
    v27 = &protocol witness table for UInt8;
    LOBYTE(v24) = v19;
    CKRecordKeyValueSetting.subscript.setter(&v24, 0xD00000000000001ALL, 0x80000001001B08B0, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v24, 0xD000000000000017, 0x80000001001B08D0, ObjectType, &type metadata for Int8, &protocol witness table for Int8);
  v20 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff);
  if ((v24 & 0x100) != 0 || v24 != v20)
  {
    v26 = &type metadata for Int8;
    v27 = &protocol witness table for Int8;
    LOBYTE(v24) = v20;
    CKRecordKeyValueSetting.subscript.setter(&v24, 0xD000000000000017, 0x80000001001B08D0, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v24, 0xD000000000000018, 0x80000001001B08F0, ObjectType, &type metadata for UInt8, &protocol witness table for UInt8);
  v21 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig);
  if ((v24 & 0x100) != 0 || v24 != v21)
  {
    v26 = &type metadata for UInt8;
    v27 = &protocol witness table for UInt8;
    LOBYTE(v24) = v21;
    CKRecordKeyValueSetting.subscript.setter(&v24, 0xD000000000000018, 0x80000001001B08F0, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v24, 0x7473654764616568, 0xEF65646F4D657275, ObjectType, &type metadata for Int8, &protocol witness table for Int8);
  v22 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode);
  if ((v24 & 0x100) != 0 || v24 != v22)
  {
    v26 = &type metadata for Int8;
    v27 = &protocol witness table for Int8;
    LOBYTE(v24) = v22;
    CKRecordKeyValueSetting.subscript.setter(&v24, 0x7473654764616568, 0xEF65646F4D657275, ObjectType);
  }
  return swift_unknownObjectRelease(v13);
}

uint64_t sub_100108D54@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id sub_100108D9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  id result;

  v5 = objc_allocWithZone((Class)type metadata accessor for AADeviceRecord(0));
  result = AADeviceRecord.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100108DF0(_QWORD *a1)
{
  return AADeviceRecord.encode(to:)(a1);
}

uint64_t sub_100108E10(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BOOL8 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_100109038((_BOOL8)a1);
  if (v7)
  {
    v8 = a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig];
    if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig) != v8)
      *(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig) = v8;
    v9 = a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff];
    if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff) != v9)
      *(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff) = v9;
    v10 = a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig];
    if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig) != v10)
      *(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig) = v10;
    v11 = a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode];
    if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode) != v11)
      *(_BYTE *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode) = v11;
    static Date.now.getter(v7);
    v12 = v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate;
    swift_beginAccess(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate, v24, 33, 0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 40))(v12, v6, v3);
    return swift_endAccess(v24);
  }
  else
  {
    v14 = static os_log_type_t.info.getter(v7);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v15 = qword_100218DE8;
    v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100184870;
    v18 = a1;
    v19 = objc_msgSend(v18, "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v17 + 32) = v20;
    *(_QWORD *)(v17 + 40) = v22;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "No change in updated device: %@", 31, 2, v17);
    return swift_bridgeObjectRelease(v17);
  }
}

BOOL sub_100109038(_BOOL8 result)
{
  uint64_t v1;

  if (result)
    return *(unsigned __int8 *)(result + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig) != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_acceptReplyPlayPauseConfig)
        || *(unsigned __int8 *)(result + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff) != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_allowNoiseManagementOff)
        || *(unsigned __int8 *)(result + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig) != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_declineDismissSkipConfig)
        || *(unsigned __int8 *)(result + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode) != *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_headGestureMode);
  return result;
}

unint64_t sub_1001090A8()
{
  unint64_t result;

  result = qword_100211BA0;
  if (!qword_100211BA0)
  {
    result = swift_getWitnessTable(&unk_100187AEC, &type metadata for AADeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211BA0);
  }
  return result;
}

uint64_t type metadata accessor for AADeviceRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100211C00;
  if (!qword_100211C00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AADeviceRecord);
  return result;
}

uint64_t sub_100109128(uint64_t a1)
{
  uint64_t result;

  result = sub_1000A0940(&qword_100211BC0, type metadata accessor for AADeviceRecord, (uint64_t)&unk_100187968);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100109164(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000A0940(&qword_100211BC8, type metadata accessor for AADeviceRecord, (uint64_t)&protocol conformance descriptor for AADeviceRecord);
  result = sub_1000A0940(&qword_100211BD0, type metadata accessor for AADeviceRecord, (uint64_t)&protocol conformance descriptor for AADeviceRecord);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1001091C0()
{
  return type metadata accessor for AADeviceRecord(0);
}

uint64_t sub_1001091C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  v5[0] = &unk_1001879F8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_100187A10;
    v5[3] = (char *)&value witness table for Builtin.Int8 + 64;
    v5[4] = (char *)&value witness table for Builtin.Int8 + 64;
    v5[5] = (char *)&value witness table for Builtin.Int8 + 64;
    v5[6] = (char *)&value witness table for Builtin.Int8 + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[7] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 8, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AADeviceRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AADeviceRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100109354 + 4 * byte_10018793D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100109388 + 4 * byte_100187938[v4]))();
}

uint64_t sub_100109388(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100109390(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100109398);
  return result;
}

uint64_t sub_1001093A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001093ACLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1001093B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001093B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AADeviceRecord.CodingKeys()
{
  return &type metadata for AADeviceRecord.CodingKeys;
}

unint64_t sub_1001093D8()
{
  unint64_t result;

  result = qword_100211C10;
  if (!qword_100211C10)
  {
    result = swift_getWitnessTable(&unk_100187AC4, &type metadata for AADeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211C10);
  }
  return result;
}

unint64_t sub_100109420()
{
  unint64_t result;

  result = qword_100211C18;
  if (!qword_100211C18)
  {
    result = swift_getWitnessTable(&unk_100187A34, &type metadata for AADeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211C18);
  }
  return result;
}

unint64_t sub_100109468()
{
  unint64_t result;

  result = qword_100211C20;
  if (!qword_100211C20)
  {
    result = swift_getWitnessTable(&unk_100187A5C, &type metadata for AADeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100211C20);
  }
  return result;
}

uint64_t sub_1001094AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461)
  {
    v5 = 0xED00006174616461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63, 0xED00006174616461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000001001AA8D0;
    if (a2 == 0x80000001001AA8D0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AA8D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001001B08B0)
  {
    v9 = 0x80000001001B08B0;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001001B08B0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000001001B08D0)
  {
    v10 = 0x80000001001B08D0;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000001001B08D0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001001B08F0)
  {
    v11 = 0x80000001001B08F0;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001001B08F0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x7473654764616568 && a2 == 0xEF65646F4D657275)
  {
    v12 = 0xEF65646F4D657275;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7473654764616568, 0xEF65646F4D657275, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001AAA20)
  {
    swift_bridgeObjectRelease(0x80000001001AAA20);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AAA20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_100109818()
{
  unint64_t result;

  result = qword_100211C28;
  if (!qword_100211C28)
  {
    result = swift_getWitnessTable(&unk_100187BBC, &type metadata for AADeviceRecord.AADeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_100211C28);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AADeviceRecord.AADeviceRecordError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001098A8 + 4 * byte_100187947[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001098DC + 4 * byte_100187942[v4]))();
}

uint64_t sub_1001098DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001098E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001098ECLL);
  return result;
}

uint64_t sub_1001098F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100109900);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100109904(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010990C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AADeviceRecord.AADeviceRecordError()
{
  return &type metadata for AADeviceRecord.AADeviceRecordError;
}

unint64_t sub_10010992C()
{
  unint64_t result;

  result = qword_100211C38;
  if (!qword_100211C38)
  {
    result = swift_getWitnessTable(&unk_100187B94, &type metadata for AADeviceRecord.AADeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_100211C38);
  }
  return result;
}

Class sub_100109970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  Class v7;

  v5 = objc_autoreleasePoolPush();
  sub_1001099E4(v2, a1, a2, &v7);
  objc_autoreleasePoolPop(v5);
  return v7;
}

uint64_t sub_1001099E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Class *a4@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  objc_class *v17;
  Class isa;
  uint64_t result;
  uint64_t v20;
  Class v21;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 32))(v13, v12, v9);
  v16 = v15;
  sub_100109DEC(v14, v15);
  isa = v17;
  sub_1000A103C(v14, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a2);
  if (!isa)
    isa = sub_100109AEC((uint64_t)v11, a2, a3).super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a2);
  v21 = isa;
  result = (*(uint64_t (**)(Class *, uint64_t, uint64_t))(a3 + 64))(&v21, a2, a3);
  *a4 = isa;
  return result;
}

CKRecord sub_100109AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  Class isa;
  Swift::String v20;
  CKRecordID v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v32;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 32))(a2);
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v15 = v14;
  v16._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v16._object = v17;
  v18._countAndFlagsBits = v13;
  v18._object = v15;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
  v20._countAndFlagsBits = v10;
  v20._object = v12;
  v21.super.isa = CKRecordID.init(recordName:zoneID:)(v20, (CKRecordZoneID)isa).super.isa;
  v22 = static os_log_type_t.default.getter(v21.super.isa);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v23 = qword_100218DE8;
  v24 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v25 = swift_allocObject(v24, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100184870;
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  v27 = v26(a2, a3);
  v29 = v28;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v25 + 32) = v27;
  *(_QWORD *)(v25 + 40) = v29;
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Failed to unarchive record -- creating new %@ record", 52, 2, v25);
  swift_bridgeObjectRelease(v25);
  sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  v30._countAndFlagsBits = v26(a2, a3);
  return CKRecord.init(recordType:recordID:)(v30, v21);
}

id sub_100109D30()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v5;
  id v7;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = 0;
  v2 = objc_msgSend(v0, "initForReadingFromData:error:", isa, &v7);

  v3 = v7;
  if (v2)
  {
    v4 = v7;
  }
  else
  {
    v5 = v7;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }
  return v2;
}

void sub_100109DEC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

id sub_100109E2C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v16;
  uint64_t v17;
  uint64_t v18;

  if ((v1 & 0xFF000000000000) != 0)
  {
    v3 = objc_allocWithZone((Class)NSKeyedUnarchiver);
    sub_1000A0E74(v2, v1);
    v4 = sub_100109D30();
    v5 = sub_1000A103C(v2, v1);
    if (v0)
    {
      v6 = ((uint64_t (*)(uint64_t))static os_log_type_t.error.getter)(v5);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v7 = qword_100218DE8;
      v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v9 = swift_allocObject(v8, 72, 7);
      *(_OWORD *)(v9 + 16) = xmmword_100184870;
      v18 = v0;
      swift_errorRetain(v0);
      v10 = sub_1000A0980(&qword_100210710);
      v11 = ((uint64_t (*)(uint64_t *, uint64_t))String.init<A>(describing:))(&v18, v10);
      v13 = v12;
      *(_QWORD *)(v9 + 56) = &type metadata for String;
      *(_QWORD *)(v9 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v9 + 32) = v11;
      *(_QWORD *)(v9 + 40) = v13;
      os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Unable to create unarchiver: %@", 31, 2, v9, v18);
      swift_bridgeObjectRelease(v9);
      swift_errorRelease(v0);
    }
    else
    {
      v16 = objc_msgSend(objc_allocWithZone((Class)CKRecord), "initWithCoder:", v4);
      if (v16)
      {
        v14 = v16;

        return v14;
      }
      v17 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_100218DE8, "Unable to extract CKRecord from cloudKitMetadata", 48, 2, _swiftEmptyArrayStorage);

    }
  }
  return 0;
}

id sub_10010A024()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CloudPushService()), "init");
  qword_100218DB8 = (uint64_t)result;
  return result;
}

id sub_10010A090()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  objc_super v25;
  _QWORD *v26;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates] = _swiftEmptyDictionarySingleton;
  v24 = OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue;
  sub_1000C8110();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
  v13 = v1;
  static DispatchQoS.unspecified.getter(v13);
  v26 = _swiftEmptyArrayStorage;
  v14 = sub_1000A0940((unint64_t *)&unk_1002123A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_1000A0980((uint64_t *)&unk_100211A00);
  v16 = sub_1000C7224((unint64_t *)&qword_1002123B0, (uint64_t *)&unk_100211A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v15, v16, v2, v14);
  v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000020, 0x80000001001B0F60, v8, v4, v12, 0);
  *(_QWORD *)&v1[v24] = v17;
  v18 = &v13[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushEnvironment];
  *(_QWORD *)v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
  *((_QWORD *)v18 + 1) = v19;
  *(_QWORD *)&v13[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_apsConnection] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_buddyStateWatcher] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_firstUnlockStateWatcher] = 0;

  v20 = (objc_class *)type metadata accessor for CloudPushService();
  v25.receiver = v13;
  v25.super_class = v20;
  v21 = objc_msgSendSuper2(&v25, "init");
  v22 = static os_log_type_t.default.getter(v21);
  if (qword_1002101C8 != -1)
    swift_once(&qword_1002101C8, sub_10016869C);
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_100218DD0, "APS Wrapper init, add needed delegates before we start...", 57, 2, _swiftEmptyArrayStorage);

  return v21;
}

void sub_10010A368()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  int v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  void **aBlock;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  void (*v29)();
  uint64_t v30;

  v1 = v0;
  v2 = (void *)objc_opt_self(BTSystemConfiguration);
  v3 = objc_msgSend(v2, "isBuddyComplete");
  if (!(_DWORD)v3)
  {
    v15 = static os_log_type_t.default.getter(v3);
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_100218DD8, "CloudPushService buddy is NOT done, wait...", 43, 2, _swiftEmptyArrayStorage);
    v16 = swift_allocObject(&unk_1001EAF68, 24, 7);
    swift_unknownObjectWeakInit(v16 + 16, v1);
    v29 = sub_10010D10C;
    v30 = v16;
    aBlock = _NSConcreteStackBlock;
    v26 = 1107296256;
    v27 = sub_1000E6A24;
    v28 = &unk_1001EB160;
    v17 = _Block_copy(&aBlock);
    swift_release(v30);
    v18 = objc_msgSend(v2, "addBuddyCompleteObserver:", v17);
    _Block_release(v17);
    v19 = OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_buddyStateWatcher;
    goto LABEL_13;
  }
  v4 = objc_msgSend(v2, "isFirstUnlocked");
  v5 = (int)v4;
  v6 = static os_log_type_t.default.getter(v4);
  if (!v5)
  {
    if (qword_1002101D0 != -1)
      swift_once(&qword_1002101D0, sub_1001686F0);
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_100218DD8, "CloudPushService cannot start, device needs to be first unlocked after boot", 75, 2, _swiftEmptyArrayStorage);
    v20 = swift_allocObject(&unk_1001EAF68, 24, 7);
    swift_unknownObjectWeakInit(v20 + 16, v1);
    v29 = sub_10010D114;
    v30 = v20;
    aBlock = _NSConcreteStackBlock;
    v26 = 1107296256;
    v27 = sub_1000E6A24;
    v28 = &unk_1001EB188;
    v21 = _Block_copy(&aBlock);
    swift_release(v30);
    v18 = objc_msgSend(v2, "addFirstUnlockObserver:", v21);
    _Block_release(v21);
    v19 = OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_firstUnlockStateWatcher;
LABEL_13:
    v22 = *(void **)&v1[v19];
    *(_QWORD *)&v1[v19] = v18;

    return;
  }
  if (qword_1002101C8 != -1)
    swift_once(&qword_1002101C8, sub_10016869C);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_100218DD0, "Start APS connection", 20, 2, _swiftEmptyArrayStorage);
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8 = objc_msgSend(v7, "bundleIdentifier");

  if (v8)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v12);
    v14 = objc_allocWithZone((Class)type metadata accessor for BTUserTransaction());
    v24 = sub_1000B3CA0("com.apple.bluetooth.user.setupAPS", 33, (__objc2_meth_list **)2);
    sub_10010A9B0(v24, v1, 0xD000000000000018, 0x80000001001B0D40, 0xD00000000000001BLL, 0x80000001001B0D20);
    swift_bridgeObjectRelease(0x80000001001B0D20);

  }
  else
  {
    v23 = static os_log_type_t.error.getter(v9);
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_100218DD0, "Unable to get bundleIdentifier!", 31, 2, _swiftEmptyArrayStorage);
  }
}

void sub_10010A778(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _DWORD v13[6];
  _BYTE v14[24];

  v1 = a1 + 16;
  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v3 = qword_100218DD8;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100184870;
  v6 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isBuddyComplete");
  *(_QWORD *)(v5 + 56) = &type metadata for Bool;
  *(_QWORD *)(v5 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v5 + 32) = v6;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "CloudPushService buddy done callback: %i", v13[0]);
  swift_bridgeObjectRelease(v5);
  swift_beginAccess(v1, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    sub_10010A368();

  }
  swift_beginAccess(v1, v13, 0, 0);
  v11 = (char *)swift_unknownObjectWeakLoadStrong(v1, v10);
  if (v11)
  {
    v12 = *(void **)&v11[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_buddyStateWatcher];
    *(_QWORD *)&v11[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_buddyStateWatcher] = 0;

  }
}

void sub_10010A8C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_100218DD8, "Setting up CloudPushService after device first unlocked after boot", 66, 2, _swiftEmptyArrayStorage);
  swift_beginAccess(v1, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_10010A368();

  }
  swift_beginAccess(v1, &v9, 0, 0);
  v7 = (char *)swift_unknownObjectWeakLoadStrong(v1, v6);
  if (v7)
  {
    v8 = *(void **)&v7[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_firstUnlockStateWatcher];
    *(_QWORD *)&v7[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_firstUnlockStateWatcher] = 0;

  }
}

uint64_t sub_10010A9B0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  _QWORD *v36;

  v30 = a5;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v14 - 8);
  v33 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C8110();
  v31 = static OS_dispatch_queue.main.getter();
  v17 = (_QWORD *)swift_allocObject(&unk_1001EB1C0, 64, 7);
  v17[2] = a2;
  v17[3] = a3;
  v18 = v30;
  v17[4] = a4;
  v17[5] = v18;
  v17[6] = a6;
  v17[7] = a1;
  aBlock[4] = sub_10010D158;
  v36 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EB1D8;
  v19 = _Block_copy(aBlock);
  v20 = v36;
  v21 = a2;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  v22 = a1;
  v23 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1000A0980(&qword_100211D00);
  v26 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v11, v24);
  v27 = (void *)v31;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v33);
}

uint64_t sub_10010ABE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  Class isa;
  void *v24;
  id v25;
  NSString v26;
  uint64_t v27;

  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushEnvironment + 8);
  v10 = *(void **)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  v11 = objc_allocWithZone((Class)APSConnection);
  swift_bridgeObjectRetain(v9);
  v12 = v10;
  swift_bridgeObjectRetain(a3);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v15 = objc_msgSend(v11, "initWithEnvironmentName:namedDelegatePort:queue:", v13, v14, v12);

  v16 = OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_apsConnection;
  v17 = *(void **)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_apsConnection);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_apsConnection) = v15;

  v19 = *(void **)(a1 + v16);
  if (v19)
  {
    v20 = sub_1000A0980((uint64_t *)&unk_1002123C0);
    v21 = swift_allocObject(v20, 48, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100184870;
    *(_QWORD *)(v21 + 32) = a4;
    *(_QWORD *)(v21 + 40) = a5;
    v22 = v19;
    swift_bridgeObjectRetain(a5);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    objc_msgSend(v22, "_setEnabledTopics:", isa);

    v24 = *(void **)(a1 + v16);
    if (v24)
    {
      v25 = v24;
      v26 = String._bridgeToObjectiveC()();
      objc_msgSend(v25, "requestTokenForTopic:identifier:", v26, 0);

      v18 = *(id *)(a1 + v16);
      if (v18)
        v18 = objc_msgSend(v18, "setDelegate:", a1);
    }
  }
  v27 = static os_log_type_t.default.getter(v18);
  if (qword_1002101C8 != -1)
    swift_once(&qword_1002101C8, sub_10016869C);
  return os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_100218DD0, "Set up APS connection", 21, 2, _swiftEmptyArrayStorage);
}

uint64_t sub_10010AE48(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t result;
  _QWORD v11[5];
  uint64_t v12;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  v4 = swift_allocObject(&unk_1001EAF68, 24, 7);
  swift_unknownObjectWeakInit(v4 + 16, v1);
  v5 = swift_allocObject(&unk_1001EB0F8, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = swift_allocObject(&unk_1001EB120, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_10010584C;
  *(_QWORD *)(v6 + 24) = v5;
  v11[4] = sub_1000C7560;
  v12 = v6;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1000E6A70;
  v11[3] = &unk_1001EB138;
  v7 = _Block_copy(v11);
  v8 = v12;
  swift_unknownObjectRetain(a1);
  swift_retain(v6);
  v9 = v3;
  swift_release(v8);
  dispatch_sync(v9, v7);

  _Block_release(v7);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v6, "", 123, 94, 31, 1);
  swift_release(v5);
  result = swift_release(v6);
  if ((v9 & 1) != 0)
    __break(1u);
  return result;
}

void sub_10010AFA8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _QWORD v30[3];

  if (a1)
  {
    v3 = a2 + 16;
    v4 = swift_unknownObjectRetain(a1);
    v5 = static os_log_type_t.default.getter(v4);
    if (qword_1002101C8 != -1)
      swift_once(&qword_1002101C8, sub_10016869C);
    v6 = qword_100218DD0;
    v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v8 = swift_allocObject(v7, 112, 7);
    *(_OWORD *)(v8 + 16) = xmmword_1001858F0;
    v30[0] = a1;
    swift_unknownObjectRetain(a1);
    v9 = sub_1000A0980((uint64_t *)&unk_100211D08);
    v10 = String.init<A>(describing:)(v30, v9);
    v12 = v11;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    v13 = sub_1000A0DF4();
    *(_QWORD *)(v8 + 64) = v13;
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v12;
    v14 = objc_msgSend(a1, "cloudContainerIdentifier");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    *(_QWORD *)(v8 + 96) = &type metadata for String;
    *(_QWORD *)(v8 + 104) = v13;
    *(_QWORD *)(v8 + 72) = v15;
    *(_QWORD *)(v8 + 80) = v17;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Add push delegate: %@ using key: %@", 35, 2, v8);
    swift_bridgeObjectRelease(v8);
    swift_beginAccess(v3, v30, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v3, v18);
    if (Strong)
    {
      v20 = (char *)Strong;
      v21 = objc_msgSend(a1, "cloudContainerIdentifier");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v25 = &v20[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates];
      swift_beginAccess(&v20[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates], v29, 33, 0);
      swift_unknownObjectRetain(a1);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v25);
      v28 = *(_QWORD *)v25;
      *(_QWORD *)v25 = 0x8000000000000000;
      sub_1000AA9C0((uint64_t)a1, v22, v24, isUniquelyReferenced_nonNull_native);
      v27 = *(_QWORD *)v25;
      *(_QWORD *)v25 = v28;
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v27);
      swift_endAccess(v29);
      swift_unknownObjectRelease(a1);

    }
    else
    {
      swift_unknownObjectRelease(a1);
    }
  }
}

uint64_t sub_10010B1F4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t result;
  _QWORD v11[5];
  uint64_t v12;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  v4 = swift_allocObject(&unk_1001EAF68, 24, 7);
  swift_unknownObjectWeakInit(v4 + 16, v1);
  v5 = swift_allocObject(&unk_1001EB080, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = swift_allocObject(&unk_1001EB0A8, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_1001058D8;
  *(_QWORD *)(v6 + 24) = v5;
  v11[4] = sub_1000A4EB0;
  v12 = v6;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1000E6A70;
  v11[3] = &unk_1001EB0C0;
  v7 = _Block_copy(v11);
  v8 = v12;
  swift_unknownObjectRetain(a1);
  swift_retain(v6);
  v9 = v3;
  swift_release(v8);
  dispatch_sync(v9, v7);

  _Block_release(v7);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v6, "", 123, 105, 31, 1);
  swift_release(v5);
  result = swift_release(v6);
  if ((v9 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10010B354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  _QWORD v22[3];

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1002101C8 != -1)
    swift_once(&qword_1002101C8, sub_10016869C);
  v5 = qword_100218DD0;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  v22[0] = a1;
  swift_unknownObjectRetain(a1);
  v8 = sub_1000A0980(&qword_100211D18);
  v9 = String.init<A>(describing:)(v22, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Remove push delegate: %@", 24, 2, v7);
  result = swift_bridgeObjectRelease(v7);
  if (a1)
  {
    v13 = a2 + 16;
    swift_beginAccess(v13, v22, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(v13, v14);
    if (result)
    {
      v15 = (char *)result;
      v16 = objc_msgSend((id)swift_unknownObjectRetain(a1), "cloudContainerIdentifier");
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      swift_beginAccess(&v15[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates], v21, 33, 0);
      v20 = sub_1000FEE4C(v17, v19);
      swift_endAccess(v21);

      swift_unknownObjectRelease(a1);
      swift_bridgeObjectRelease(v19);
      return swift_unknownObjectRelease(v20);
    }
  }
  return result;
}

void sub_10010B524(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7;

  swift_unknownObjectRetain(a3);
  v7 = a1;
  a4(a3);
  swift_unknownObjectRelease(a3);

}

void sub_10010B628(void *a1)
{
  Class isa;
  NSString v3;
  id v4;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "didReceiveWithToken:forTopic:identifier:", isa, v3, v4);

}

uint64_t sub_10010B850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
  v12 = swift_allocObject(&unk_1001EAF68, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  v13 = (_QWORD *)swift_allocObject(&unk_1001EAF90, 40, 7);
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_10010BE84;
  v27 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EAFA8;
  v14 = _Block_copy(aBlock);
  v15 = v11;
  swift_retain(v12);
  v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_1000A0980(&qword_100211D00);
  v19 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  v20 = v27;
  swift_release(v12);
  return swift_release(v20);
}

void sub_10010BA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char *v23;
  _BYTE v24[8];
  _BYTE v25[24];
  _BYTE v26[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    v9 = Strong + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates;
    v10 = swift_beginAccess(Strong + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates, v25, 0, 0);
    v11 = *(_QWORD *)(*(_QWORD *)v9 + 16);
    v12 = static os_log_type_t.default.getter(v10);
    if (v11)
    {
      if (qword_1002101C8 != -1)
        swift_once(&qword_1002101C8, sub_10016869C);
      v13 = qword_100218DD0;
      v14 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v15 = swift_allocObject(v14, 112, 7);
      *(_OWORD *)(v15 + 16) = xmmword_1001858F0;
      v16 = *(_QWORD *)v9;
      v17 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(v15 + 56) = &type metadata for Int;
      *(_QWORD *)(v15 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v15 + 32) = v17;
      swift_bridgeObjectRetain(v16);
      v18 = sub_1000A0980((uint64_t *)&unk_100211D08);
      v19 = Dictionary.description.getter(v16, &type metadata for String, v18, &protocol witness table for String);
      v21 = v20;
      swift_bridgeObjectRelease(v16);
      *(_QWORD *)(v15 + 96) = &type metadata for String;
      *(_QWORD *)(v15 + 104) = sub_1000A0DF4();
      *(_QWORD *)(v15 + 72) = v19;
      *(_QWORD *)(v15 + 80) = v21;
      os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "invokeDelegates[%i] : %@", 24, 2, v15);
      swift_bridgeObjectRelease(v15);
      swift_unknownObjectWeakInit(v24, v8);
      v22 = objc_allocWithZone((Class)type metadata accessor for BTUserTransaction());
      v23 = sub_1000B3CA0("com.apple.bluetooth.user.services.aps.processPush", 49, (__objc2_meth_list **)2);
      sub_10010CDD0((uint64_t)v24, a2, a3);

      swift_unknownObjectWeakDestroy(v24);
    }
    else
    {
      if (qword_1002101C8 != -1)
        swift_once(&qword_1002101C8, sub_10016869C);
      os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_100218DD0, "No delegates to invoke", 22, 2, _swiftEmptyArrayStorage);

    }
  }
}

uint64_t sub_10010BCDC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE v12[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (result)
  {
    v8 = (void *)result;
    v9 = (uint64_t *)(result + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates);
    swift_beginAccess(result + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates, v11, 0, 0);
    v10 = *v9;
    swift_bridgeObjectRetain(v10);

    swift_retain(a3);
    sub_10010BEA8(v10, a2, a3);
    swift_bridgeObjectRelease(v10);
    return swift_release(a3);
  }
  return result;
}

id sub_10010BD90()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudPushService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CloudPushService()
{
  return objc_opt_self(_TtC15audioaccessoryd16CloudPushService);
}

uint64_t sub_10010BE5C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10010BE84()
{
  uint64_t *v0;

  sub_10010BA90(v0[2], v0[3], v0[4]);
}

uint64_t sub_10010BE90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010BEA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10010BEA8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t i;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  _QWORD *v53;
  _QWORD aBlock[5];
  _QWORD *v55;

  v48 = a2;
  v49 = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v44 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  __chkstk_darwin(v6);
  v41 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 64);
  v40 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v47 = (unint64_t)(v9 + 63) >> 6;
  v50 = a1;
  result = swift_bridgeObjectRetain(a1);
  v13 = 0;
  v14 = v46;
  if (v11)
    goto LABEL_6;
LABEL_7:
  v31 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v31 < v47)
    {
      v32 = *(_QWORD *)(v40 + 8 * v31);
      ++v13;
      if (v32)
        goto LABEL_22;
      v13 = v31 + 1;
      if (v31 + 1 >= v47)
        return swift_release(v50);
      v32 = *(_QWORD *)(v40 + 8 * v13);
      if (v32)
        goto LABEL_22;
      v13 = v31 + 2;
      if (v31 + 2 >= v47)
        return swift_release(v50);
      v32 = *(_QWORD *)(v40 + 8 * v13);
      if (v32)
        goto LABEL_22;
      v13 = v31 + 3;
      if (v31 + 3 >= v47)
        return swift_release(v50);
      v32 = *(_QWORD *)(v40 + 8 * v13);
      if (v32)
      {
LABEL_22:
        v11 = (v32 - 1) & v32;
        for (i = __clz(__rbit64(v32)) + (v13 << 6); ; i = v29 | (v13 << 6))
        {
          v34 = (uint64_t *)(*(_QWORD *)(v50 + 48) + 16 * i);
          v35 = *v34;
          v36 = v34[1];
          v37 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * i);
          swift_bridgeObjectRetain(v36);
          v38 = objc_msgSend((id)swift_unknownObjectRetain(v37), "pushDelegateQueue");
          if (v38)
          {
            v15 = v38;
            v16 = (_QWORD *)swift_allocObject(&unk_1001EB030, 56, 7);
            v17 = v49;
            v16[2] = v48;
            v16[3] = v17;
            v16[4] = v35;
            v16[5] = v36;
            v16[6] = v37;
            aBlock[4] = sub_10010D090;
            v55 = v16;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_1000E6A24;
            aBlock[3] = &unk_1001EB048;
            v18 = _Block_copy(aBlock);
            v51 = v11;
            v19 = v18;
            swift_bridgeObjectRetain(v36);
            swift_unknownObjectRetain(v37);
            v20 = swift_retain(v17);
            v52 = v13;
            v21 = v41;
            static DispatchQoS.unspecified.getter(v20);
            v53 = _swiftEmptyArrayStorage;
            v22 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v23 = sub_1000A0980(&qword_100211D00);
            v24 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
            v25 = v44;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v23, v24, v14, v22);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v25, v19);
            v26 = v19;
            v11 = v51;
            _Block_release(v26);

            (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v14);
            v27 = v21;
            v13 = v52;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v43);
            v28 = v55;
            swift_unknownObjectRelease(v37);
            swift_bridgeObjectRelease(v36);
            result = swift_release(v28);
            if (!v11)
              goto LABEL_7;
          }
          else
          {
            v48(v37);
            swift_unknownObjectRelease(v37);
            result = swift_bridgeObjectRelease(v36);
            if (!v11)
              goto LABEL_7;
          }
LABEL_6:
          v29 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
        }
      }
      v33 = v31 + 4;
      if (v33 < v47)
      {
        v32 = *(_QWORD *)(v40 + 8 * v33);
        if (v32)
        {
          v13 = v33;
          goto LABEL_22;
        }
        while (1)
        {
          v13 = v33 + 1;
          if (__OFADD__(v33, 1))
            goto LABEL_28;
          if (v13 >= v47)
            return swift_release(v50);
          v32 = *(_QWORD *)(v40 + 8 * v13);
          ++v33;
          if (v32)
            goto LABEL_22;
        }
      }
    }
    return swift_release(v50);
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10010C2A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;

  if (a2 >> 60 == 15)
  {
    v2 = static os_log_type_t.error.getter(a1);
    if (qword_1002101C8 != -1)
      swift_once(&qword_1002101C8, sub_10016869C);
    return os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_100218DD0, "Invalid Public Token", 20, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v6 = sub_1000A0E74(a1, a2);
    v7 = IsAppleInternalBuild(v6);
    if ((_DWORD)v7)
    {
      v8 = static os_log_type_t.default.getter(v7);
      if (qword_1002101C8 != -1)
        swift_once(&qword_1002101C8, sub_10016869C);
      v9 = qword_100218DD0;
      v10 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v11 = swift_allocObject(v10, 72, 7);
      *(_OWORD *)(v11 + 16) = xmmword_100184870;
      v12 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(v11 + 56) = &type metadata for String;
      *(_QWORD *)(v11 + 64) = sub_1000A0DF4();
      *(Swift::String *)(v11 + 32) = v12;
      os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "didReceivePublicToken: %@", 25, 2, v11);
      swift_bridgeObjectRelease(v11);
    }
    v13 = swift_allocObject(&unk_1001EB2B0, 32, 7);
    *(_QWORD *)(v13 + 16) = a1;
    *(_QWORD *)(v13 + 24) = a2;
    sub_1000A0E74(a1, a2);
    sub_10010B850((uint64_t)sub_10010D240, v13);
    swift_release(v13);
    return sub_1000B2D78(a1, a2);
  }
}

uint64_t sub_10010C470(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  if (a2 >> 60 == 15 || a4 == 0 || a6 == 0)
  {
    v8 = static os_log_type_t.error.getter(a1);
    if (qword_1002101C8 != -1)
      swift_once(&qword_1002101C8, sub_10016869C);
    return os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_100218DD0, "Invalid APS data arguments", 26, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    sub_1000B2D8C(a1, a2);
    swift_bridgeObjectRetain(a4);
    v16 = swift_bridgeObjectRetain(a6);
    v17 = IsAppleInternalBuild(v16);
    if ((_DWORD)v17)
    {
      v18 = static os_log_type_t.default.getter(v17);
      if (qword_1002101C8 != -1)
        swift_once(&qword_1002101C8, sub_10016869C);
      v24 = qword_100218DD0;
      v19 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v20 = swift_allocObject(v19, 152, 7);
      *(_OWORD *)(v20 + 16) = xmmword_100187620;
      v21 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(v20 + 56) = &type metadata for String;
      v22 = sub_1000A0DF4();
      *(Swift::String *)(v20 + 32) = v21;
      *(_QWORD *)(v20 + 96) = &type metadata for String;
      *(_QWORD *)(v20 + 104) = v22;
      *(_QWORD *)(v20 + 64) = v22;
      *(_QWORD *)(v20 + 72) = a3;
      *(_QWORD *)(v20 + 80) = a4;
      *(_QWORD *)(v20 + 136) = &type metadata for String;
      *(_QWORD *)(v20 + 144) = v22;
      *(_QWORD *)(v20 + 112) = a5;
      *(_QWORD *)(v20 + 120) = a6;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRetain(a6);
      os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v24, "didReceiveToken: %@, for topic: %@, identifier: %@", 50, 2, v20);
      swift_bridgeObjectRelease(v20);
    }
    v23 = (_QWORD *)swift_allocObject(&unk_1001EB288, 64, 7);
    v23[2] = a1;
    v23[3] = a2;
    v23[4] = a3;
    v23[5] = a4;
    v23[6] = a5;
    v23[7] = a6;
    sub_1000A0E74(a1, a2);
    sub_10010B850((uint64_t)sub_10010D20C, (uint64_t)v23);
    swift_release(v23);
    return sub_1000B2D78(a1, a2);
  }
}

void sub_10010C6B4(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  id v75;
  char *v76;
  _QWORD *v77;
  _QWORD aBlock[5];
  uint64_t v79;
  char v80[32];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v12 = a1;
    v13 = objc_msgSend(v12, "userInfo");
    if (v13)
    {
      v14 = v13;
      v75 = v12;
      v76 = v1;
      v68 = v11;
      v69 = v8;
      v70 = v7;
      v71 = v6;
      v72 = v4;
      v73 = v3;
      v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v15);
      v17 = objc_msgSend((id)objc_opt_self(CKNotification), "notificationFromRemoteNotificationDictionary:", isa);

      v19 = static os_log_type_t.error.getter(v18);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v20 = qword_100218DD8;
      v21 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v22 = swift_allocObject(v21, 72, 7);
      v74 = xmmword_100184870;
      *(_OWORD *)(v22 + 16) = xmmword_100184870;
      aBlock[0] = v17;
      v23 = v17;
      v24 = sub_1000A0980(&qword_100211D20);
      v25 = String.init<A>(describing:)(aBlock, v24);
      v27 = v26;
      *(_QWORD *)(v22 + 56) = &type metadata for String;
      v28 = sub_1000A0DF4();
      *(_QWORD *)(v22 + 64) = v28;
      *(_QWORD *)(v22 + 32) = v25;
      *(_QWORD *)(v22 + 40) = v27;
      v29 = v23;
      os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "payload received: %@", 20, 2, v22);
      swift_bridgeObjectRelease(v22);
      if (v23 && (v30 = objc_msgSend(v23, "containerIdentifier")) != 0)
      {
        v31 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v34 = v33;

        v35 = v75;
        if (v32)
          goto LABEL_15;
      }
      else
      {
        v32 = 0;
        v34 = 0xE000000000000000;
        v35 = v75;
      }
      if (v34 == 0xE000000000000000)
      {
        v36 = 0xE000000000000000;
        goto LABEL_23;
      }
LABEL_15:
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, 0, 0xE000000000000000, 0) & 1) != 0
        || (v38 = (unint64_t *)&v76[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates],
            swift_beginAccess(&v76[OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushDelegates], v80, 0, 0),
            v39 = *v38,
            !*(_QWORD *)(v39 + 16)))
      {
        v36 = v34;
      }
      else
      {
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v39);
        v40 = sub_1000AA00C(v32, v34);
        if ((v41 & 1) != 0)
        {
          v76 = *(char **)(*(_QWORD *)(v39 + 56) + 8 * v40);
          swift_unknownObjectRetain(v76);
          swift_bridgeObjectRelease(v34);
          v42 = swift_bridgeObjectRelease(v39);
          LODWORD(v75) = static os_log_type_t.default.getter(v42);
          if (qword_1002101C8 != -1)
            swift_once(&qword_1002101C8, sub_10016869C);
          *(_QWORD *)&v74 = qword_100218DD0;
          v43 = swift_allocObject(v21, 112, 7);
          *(_OWORD *)(v43 + 16) = xmmword_1001858F0;
          *(_QWORD *)(v43 + 56) = &type metadata for String;
          *(_QWORD *)(v43 + 64) = v28;
          *(_QWORD *)(v43 + 32) = v32;
          *(_QWORD *)(v43 + 40) = v34;
          aBlock[0] = v17;
          v44 = Optional.debugDescription.getter(v24);
          *(_QWORD *)(v43 + 96) = &type metadata for String;
          *(_QWORD *)(v43 + 104) = v28;
          *(_QWORD *)(v43 + 72) = v44;
          *(_QWORD *)(v43 + 80) = v45;
          os_log(_:dso:log:_:_:)(v75, &_mh_execute_header, v74, "didReceive: message for container %@", 36, 2, v43);
          swift_bridgeObjectRelease(v43);
          v46 = v76;
          v47 = objc_msgSend(v76, "pushDelegateQueue");
          if (v47)
          {
            v48 = v47;
            v49 = swift_allocObject(&unk_1001EB238, 32, 7);
            *(_QWORD *)(v49 + 16) = v46;
            *(_QWORD *)(v49 + 24) = v35;
            aBlock[4] = sub_10010D1C8;
            v79 = v49;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_1000E6A24;
            aBlock[3] = &unk_1001EB250;
            v50 = _Block_copy(aBlock);
            v51 = v35;
            v52 = swift_unknownObjectRetain(v46);
            v53 = v68;
            static DispatchQoS.unspecified.getter(v52);
            v77 = _swiftEmptyArrayStorage;
            v54 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v55 = sub_1000A0980(&qword_100211D00);
            v56 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
            v57 = v29;
            v58 = v71;
            v59 = v55;
            v60 = v73;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v59, v56, v73, v54);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v53, v58, v50);
            _Block_release(v50);

            swift_unknownObjectRelease(v46);
            (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v60);
            (*(void (**)(char *, uint64_t))(v69 + 8))(v53, v70);
            swift_release(v79);
            return;
          }
          objc_msgSend(v46, "didReceiveWithMessage:", v35);
          swift_unknownObjectRelease(v46);
          goto LABEL_26;
        }
        swift_bridgeObjectRelease_n(v34, 2);
        v36 = v39;
      }
LABEL_23:
      v61 = swift_bridgeObjectRelease(v36);
      v62 = static os_log_type_t.default.getter(v61);
      if (qword_1002101C8 != -1)
        swift_once(&qword_1002101C8, sub_10016869C);
      v63 = qword_100218DD0;
      v64 = swift_allocObject(v21, 72, 7);
      *(_OWORD *)(v64 + 16) = v74;
      aBlock[0] = v17;
      v65 = Optional.debugDescription.getter(v24);
      *(_QWORD *)(v64 + 56) = &type metadata for String;
      *(_QWORD *)(v64 + 64) = v28;
      *(_QWORD *)(v64 + 32) = v65;
      *(_QWORD *)(v64 + 40) = v66;
      os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v63, "didReceive: message: %@", 23, 2, v64);
      swift_bridgeObjectRelease(v64);
      v67 = swift_allocObject(&unk_1001EB210, 24, 7);
      *(_QWORD *)(v67 + 16) = v35;
      v35 = v35;
      sub_10010B850((uint64_t)sub_10010D18C, v67);
      swift_release(v67);
LABEL_26:

      return;
    }
    __break(1u);
  }
  else
  {
    v37 = static os_log_type_t.error.getter(v9);
    if (qword_1002101C8 != -1)
      swift_once(&qword_1002101C8, sub_10016869C);
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_100218DD0, "Invalid message Token", 21, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_10010CDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[5];
  _QWORD *v38;
  char v39[24];
  _QWORD *v40;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1, v39, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1, v14);
  if (result)
  {
    v16 = (void *)result;
    v34 = v3;
    v17 = *(void **)(result + OBJC_IVAR____TtC15audioaccessoryd16CloudPushService_pushServiceQueue);
    v18 = swift_allocObject(&unk_1001EAF68, 24, 7);
    v33 = v10;
    v19 = v18;
    swift_unknownObjectWeakInit(v18 + 16, v16);
    v20 = (_QWORD *)swift_allocObject(&unk_1001EAFE0, 40, 7);
    v20[2] = v19;
    v20[3] = a2;
    v20[4] = a3;
    aBlock[4] = sub_10010D050;
    v38 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001EAFF8;
    v21 = _Block_copy(aBlock);
    v32 = v17;
    swift_retain(v19);
    v22 = swift_retain(a3);
    static DispatchQoS.unspecified.getter(v22);
    v40 = _swiftEmptyArrayStorage;
    v23 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = v8;
    v24 = v23;
    v25 = sub_1000A0980(&qword_100211D00);
    v26 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
    v27 = v33;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v25, v26, v7, v24);
    v28 = v32;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v27, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v7);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v36);
    v29 = v38;
    swift_release(v19);
    return swift_release(v29);
  }
  return result;
}

uint64_t sub_10010D050()
{
  uint64_t v0;

  return sub_10010BCDC(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10010D05C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010D090()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 48));
}

uint64_t sub_10010D0BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010D0D0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010D0FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10010D10C()
{
  uint64_t v0;

  sub_10010A778(v0);
}

void sub_10010D114()
{
  uint64_t v0;

  sub_10010A8C8(v0);
}

uint64_t sub_10010D11C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10010D158()
{
  uint64_t *v0;

  return sub_10010ABE4(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_10010D168()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10010D18C(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, "didReceiveWithMessage:", *(_QWORD *)(v1 + 16));
}

uint64_t sub_10010D19C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

id sub_10010D1C8()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "didReceiveWithMessage:", *(_QWORD *)(v0 + 24));
}

uint64_t sub_10010D1D8()
{
  _QWORD *v0;

  sub_1000A103C(v0[2], v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_10010D20C(void *a1)
{
  sub_10010B628(a1);
}

uint64_t sub_10010D21C()
{
  uint64_t v0;

  sub_1000A103C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10010D240(void *a1)
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "didReceiveWithPublicToken:", isa);

}

void sub_10010D2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)(a1);
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_10010D314(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char v7;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  void *object;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  Swift::String v47;
  ValueMetadata *v48;
  unint64_t v49;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = &type metadata for AudioAccessoryFeatures;
  v6 = sub_1000A42C4();
  v49 = v6;
  v7 = isFeatureEnabled(_:)(&v47);
  result = sub_1000A2140(&v47);
  if ((v7 & 1) != 0)
  {
    v9._object = (void *)0x80000001001AAD20;
    v9._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0xD00000000000002BLL;
    v10._object = (void *)0x80000001001AAD50;
    String.append(_:)(v10);
    v11._countAndFlagsBits = 0xD00000000000002ELL;
    v11._object = (void *)0x80000001001B1150;
    String.append(_:)(v11);
    v12._object = (void *)0x80000001001AADB0;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (qword_1002101F8 != -1)
      swift_once(&qword_1002101F8, sub_100168914);
    v15 = (uint64_t)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_100218E00, "-------------AAProxCards Records-------------", 45, 2, _swiftEmptyArrayStorage);
    v16 = sub_1000B4AC8();
    v48 = &type metadata for AudioAccessoryFeatures;
    v49 = v6;
    v17 = isFeatureEnabled(_:)(&v47);
    sub_1000A2140(&v47);
    if ((v17 & 1) == 0)
      goto LABEL_11;
    v18 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
    if (!(_DWORD)v18)
    {
      v17 = static os_log_type_t.error.getter(v18);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_100218DE8, "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
      goto LABEL_11;
    }
    v17 = sub_100129690();
    if (qword_100210130 != -1)
      goto LABEL_26;
    while (1)
    {
      v19 = sub_1000A0A00(v2, (uint64_t)qword_100218C00);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v19, v2);
      v15 = sub_100127B18((uint64_t)v5);
      swift_release(v17);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_11:
      swift_release(v16);
      if ((unint64_t)v15 >> 62)
      {
        if (v15 < 0)
          v17 = v15;
        else
          v17 = v15 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v15);
        v20 = _CocoaArrayWrapper.endIndex.getter(v17);
        swift_bridgeObjectRelease(v15);
        if (!v20)
          return swift_bridgeObjectRelease(v15);
      }
      else
      {
        v20 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v20)
          return swift_bridgeObjectRelease(v15);
      }
      if (v20 >= 1)
        break;
      __break(1u);
LABEL_26:
      swift_once(&qword_100210130, sub_1000A5BC0);
    }
    v21 = 0;
    v45 = v15 & 0xC000000000000001;
    v44 = xmmword_100184870;
    v46 = a1;
    v43 = v15;
    do
    {
      if (v45)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v15);
      else
        v22 = *(id *)(v15 + 8 * v21 + 32);
      v23 = v22;
      ++v21;
      v24 = static os_log_type_t.default.getter(v22);
      v25 = qword_100218E00;
      v26 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v27 = swift_allocObject(v26, 72, 7);
      *(_OWORD *)(v27 + 16) = v44;
      v28 = v23;
      v29 = objc_msgSend(v28, "description");
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      *(_QWORD *)(v27 + 56) = &type metadata for String;
      *(_QWORD *)(v27 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v27 + 32) = v30;
      *(_QWORD *)(v27 + 40) = v32;
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@", 2, 2, v27);
      swift_bridgeObjectRelease(v27);
      v33 = v28;
      v34 = objc_msgSend(v33, "description");
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;

      v47._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v47._object = (void *)0xE700000000000000;
      v38._countAndFlagsBits = v35;
      v38._object = v37;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(v37);
      object = v47._object;
      swift_bridgeObjectRetain(v47._object);
      v40._countAndFlagsBits = 10;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(object);
      v41 = v47._object;
      String.append(_:)(v47);

      swift_bridgeObjectRelease(v41);
      v15 = v43;
    }
    while (v20 != v21);
    return swift_bridgeObjectRelease(v15);
  }
  return result;
}

void sub_10010D7CC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _BYTE v17[24];

  v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v8, v9);
  if (Strong)
  {
    v11 = (void *)Strong;
    v12 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v13 = qword_100218DE0;
    v14 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100184870;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v15 + 32) = a4;
    *(_QWORD *)(v15 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "fetchAAProxCardsRecord: %@", 26, 2, v15);
    swift_bridgeObjectRelease(v15);
    v16 = sub_10010D91C(a4, a5);
    a2();

  }
  else
  {
    a2();
  }
}

id sub_10010D91C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;
  id v10;
  uint64_t v11;
  char v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v36[3];
  ValueMetadata *v37;
  unint64_t v38;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = &type metadata for AudioAccessoryFeatures;
  v8 = sub_1000A42C4();
  v38 = v8;
  v9 = isFeatureEnabled(_:)(v36);
  sub_1000A2140(v36);
  v10 = 0;
  if ((v9 & 1) == 0)
    return v10;
  v11 = sub_1000B4AC8();
  v37 = &type metadata for AudioAccessoryFeatures;
  v38 = v8;
  v12 = isFeatureEnabled(_:)(v36);
  sub_1000A2140(v36);
  if ((v12 & 1) != 0)
  {
    v37 = &type metadata for AudioAccessoryFeatures;
    v38 = v8;
    v13 = isFeatureEnabled(_:)(v36);
    sub_1000A2140(v36);
    if ((v13 & 1) != 0)
    {
      v14 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
      if ((_DWORD)v14)
      {
        v15 = sub_100129690();
        if (qword_100210130 != -1)
          swift_once(&qword_100210130, sub_1000A5BC0);
        v16 = sub_1000A0A00(v4, (uint64_t)qword_100218C00);
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
        v17 = (_QWORD *)sub_100127B18((uint64_t)v7);
        swift_release(v15);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
      else
      {
        v19 = static os_log_type_t.error.getter(v14);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v17 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_100218DE8, "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
      }
    }
    else
    {
      v17 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain(a2);
    v20 = sub_10010E9E0((uint64_t)v17, a1, a2);
    swift_release(v11);
    swift_bridgeObjectRelease(v17);
    v18 = swift_bridgeObjectRelease(a2);
    if (v20)
    {
      v21 = static os_log_type_t.default.getter(v18);
      if (qword_1002101D8 != -1)
        swift_once(&qword_1002101D8, sub_100168748);
      v22 = qword_100218DE0;
      v23 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v24 = swift_allocObject(v23, 72, 7);
      *(_OWORD *)(v24 + 16) = xmmword_100184870;
      v25 = v20;
      v26 = objc_msgSend(v25, "description");
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      *(_QWORD *)(v24 + 56) = &type metadata for String;
      *(_QWORD *)(v24 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v24 + 32) = v27;
      *(_QWORD *)(v24 + 40) = v29;
      os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Found AAProxCardsRecord: %@", 27, 2, v24);
      swift_bridgeObjectRelease(v24);
      v10 = sub_10010E704();

      return v10;
    }
  }
  else
  {
    v18 = swift_release(v11);
  }
  v30 = static os_log_type_t.debug.getter(v18);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v31 = qword_100218DE0;
  v32 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v33 = swift_allocObject(v32, 72, 7);
  *(_OWORD *)(v33 + 16) = xmmword_100184870;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  *(_QWORD *)(v33 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v33 + 32) = a1;
  *(_QWORD *)(v33 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "AAProxCardsRecord not found for  - %@", 37, 2, v33);
  swift_bridgeObjectRelease(v33);
  return 0;
}

uint64_t sub_10010DD1C(uint64_t a1, uint64_t a2)
{
  char *v2;
  char v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v15;
  _QWORD aBlock[3];
  ValueMetadata *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = &type metadata for AudioAccessoryFeatures;
  v18 = sub_1000A42C4();
  v5 = isFeatureEnabled(_:)(aBlock);
  sub_1000A2140(aBlock);
  if ((v5 & 1) == 0)
    return 0;
  v20 = 0;
  v6 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  v7 = (_QWORD *)swift_allocObject(&unk_1001EB3F0, 48, 7);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = &v20;
  v7[5] = v2;
  v8 = swift_allocObject(&unk_1001EB418, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_10010F448;
  *(_QWORD *)(v8 + 24) = v7;
  v18 = (unint64_t)sub_1000A4EB0;
  v19 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A70;
  v17 = (ValueMetadata *)&unk_1001EB430;
  v9 = _Block_copy(aBlock);
  v10 = v19;
  v11 = v6;
  swift_bridgeObjectRetain(a2);
  v12 = v2;
  swift_retain(v8);
  swift_release(v10);
  dispatch_sync(v11, v9);

  _Block_release(v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v8, "", 131, 36, 27, 1);
  result = swift_release(v8);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v15 = v20;
    swift_release(v7);
    return v15;
  }
  __break(1u);
  return result;
}

void sub_10010DEB4(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;

  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v7 = qword_100218DE0;
  v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100184870;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "fetchAAProxCardsRecordSync: %@", 30, 2, v9);
  swift_bridgeObjectRelease(v9);
  v10 = sub_10010D91C(a1, a2);
  v11 = *a3;
  *a3 = v10;

}

uint64_t sub_10010E018(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE v22[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9, v10);
  if (Strong)
  {
    v12 = (void *)Strong;
    v13 = static os_log_type_t.default.getter(Strong);
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v14 = qword_100218DE0;
    v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100184870;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v16 + 32) = a4;
    *(_QWORD *)(v16 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CloudSync: remove AAProxCardsRecord with BT Address: %@", 55, 2, v16);
    swift_bridgeObjectRelease(v16);
    v17 = sub_1000B4AC8();
    sub_100138B38(a4, a5, 0xD000000000000011, 0x80000001001B1050, a2, a3);

    return swift_release(v17);
  }
  else
  {
    v19 = sub_1000A4CC0();
    v20 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v19, 0, 0);
    *v21 = 0;
    a2();
    return swift_errorRelease(v20);
  }
}

uint64_t sub_10010E1C0(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _BYTE v37[24];

  v8 = type metadata accessor for UUID(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v37, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v11);
  if (Strong)
  {
    v13 = (void *)Strong;
    v14 = objc_msgSend(a4, "bluetoothAddress");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18 = sub_10010E454();
    UUID.init()(v18);
    v19 = objc_allocWithZone((Class)type metadata accessor for AAProxCardsRecord(0));
    v24 = (char *)sub_1000A7328((uint64_t)v10, 0, 0xC000000000000000, v15, v17, (uint64_t)v18);
    v25 = static os_log_type_t.default.getter(v24);
    v36 = v25;
    if (qword_1002101D8 != -1)
      swift_once(&qword_1002101D8, sub_100168748);
    v26 = qword_100218DE0;
    v27 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v28 = swift_allocObject(v27, 72, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100184870;
    v29 = a4;
    v30 = objc_msgSend(v29, "description");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    *(_QWORD *)(v28 + 56) = &type metadata for String;
    *(_QWORD *)(v28 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v33;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v26, "CloudSync: updateAAProxCardsInfo: %@", 36, 2, v28);
    swift_bridgeObjectRelease(v28);
    v34 = sub_1000B4AC8();
    sub_100141C60(v24, a2, a3);

    return swift_release(v34);
  }
  else
  {
    v20 = sub_1000A4CC0();
    v21 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v20, 0, 0);
    *v22 = 0;
    a2();
    return swift_errorRelease(v21);
  }
}

_QWORD *sub_10010E454()
{
  void *v0;
  id v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  char v4;
  id v5;
  char v6;
  id v7;
  char v8;
  id v9;
  char v10;

  if (objc_msgSend(v0, "caseDoubleTapVersion"))
  {
    v1 = objc_msgSend(v0, "caseDoubleTapVersion");
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_1000AA774((uint64_t)v1, 0x62756F4465736163, 0xED0000706154656CLL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (objc_msgSend(v0, "headGesturesVersion"))
  {
    v3 = objc_msgSend(v0, "headGesturesVersion");
    v4 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_1000AA774((uint64_t)v3, 0x7473654764616568, 0xEC00000073657275, v4);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (objc_msgSend(v0, "heartRateVersion"))
  {
    v5 = objc_msgSend(v0, "heartRateVersion");
    v6 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_1000AA774((uint64_t)v5, 0x7461527472616568, 0xE900000000000065, v6);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (objc_msgSend(v0, "voiceQualityVersion"))
  {
    v7 = objc_msgSend(v0, "voiceQualityVersion");
    v8 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_1000AA774((uint64_t)v7, 0x6175516563696F76, 0xEC0000007974696CLL, v8);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (objc_msgSend(v0, "whatsNewVersion"))
  {
    v9 = objc_msgSend(v0, "whatsNewVersion");
    v10 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_1000AA774((uint64_t)v9, 0x77654E7374616877, 0xE800000000000000, v10);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return _swiftEmptyDictionarySingleton;
}

id sub_10010E704()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE v29[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8);
  v2 = objc_allocWithZone((Class)AAProxCardsInfo);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithBluetoothAddress:", v3);

  v5 = (_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions, v29, 0, 0);
  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 16);
  v8 = v4;
  if (v7)
  {
    swift_bridgeObjectRetain(v6);
    v9 = sub_1000AA00C(0x62756F4465736163, 0xED0000706154656CLL);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v9);
      swift_bridgeObjectRelease(v6);
      if (v11)
        objc_msgSend(v8, "setCaseDoubleTapVersion:", v11);
    }
    else
    {
      swift_bridgeObjectRelease(v6);
    }
  }
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 16))
  {
    swift_bridgeObjectRetain(*v5);
    v13 = sub_1000AA00C(0x7473654764616568, 0xEC00000073657275);
    if ((v14 & 1) != 0)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRelease(v12);
      if (v15)
        objc_msgSend(v8, "setHeadGesturesVersion:", v15);
    }
    else
    {
      swift_bridgeObjectRelease(v12);
    }
  }
  v16 = *v5;
  if (*(_QWORD *)(*v5 + 16))
  {
    swift_bridgeObjectRetain(*v5);
    v17 = sub_1000AA00C(0x7461527472616568, 0xE900000000000065);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
      swift_bridgeObjectRelease(v16);
      if (v19)
        objc_msgSend(v8, "setHeartRateVersion:", v19);
    }
    else
    {
      swift_bridgeObjectRelease(v16);
    }
  }
  v20 = *v5;
  if (*(_QWORD *)(*v5 + 16))
  {
    swift_bridgeObjectRetain(*v5);
    v21 = sub_1000AA00C(0x6175516563696F76, 0xEC0000007974696CLL);
    if ((v22 & 1) != 0)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
      swift_bridgeObjectRelease(v20);
      if (v23)
        objc_msgSend(v8, "setVoiceQualityVersion:", v23);
    }
    else
    {
      swift_bridgeObjectRelease(v20);
    }
  }
  v24 = *v5;
  if (*(_QWORD *)(*v5 + 16))
  {
    swift_bridgeObjectRetain(*v5);
    v25 = sub_1000AA00C(0x77654E7374616877, 0xE800000000000000);
    if ((v26 & 1) == 0)
    {

      swift_bridgeObjectRelease(v24);
      return v8;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
    swift_bridgeObjectRelease(v24);
    if (v27)
      objc_msgSend(v8, "setWhatsNewVersion:", v27);
  }

  return v8;
}

void *sub_10010E9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v7 = 4;
    while (1)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : (char *)*(id *)(a1 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v11 = &v8[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
      v12 = *(_QWORD *)&v8[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
      v13 = *((_QWORD *)v11 + 1);
      v14 = *(_QWORD *)v11 == a2 && v13 == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v9;
      }

      ++v7;
      if (v10 == v6)
        goto LABEL_21;
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_21:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_10010EB20(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[3];
  ValueMetadata *v33;
  unint64_t v34;
  _QWORD *v35;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_1001EB468, 24, 7);
  *(_QWORD *)(v14 + 16) = a4;
  v33 = &type metadata for AudioAccessoryFeatures;
  v34 = sub_1000A42C4();
  _Block_copy(a4);
  v15 = isFeatureEnabled(_:)(aBlock);
  sub_1000A2140(aBlock);
  if ((v15 & 1) != 0)
  {
    v16 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    v17 = swift_allocObject(&unk_1001EB300, 24, 7);
    swift_unknownObjectWeakInit(v17 + 16, a3);
    v18 = (_QWORD *)swift_allocObject(&unk_1001EB490, 56, 7);
    v18[2] = v17;
    v18[3] = sub_1000A4EB8;
    v18[4] = v14;
    v18[5] = a1;
    v18[6] = a2;
    v34 = (unint64_t)sub_10010F468;
    v35 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v33 = (ValueMetadata *)&unk_1001EB4A8;
    v19 = _Block_copy(aBlock);
    v20 = v16;
    swift_retain(v17);
    swift_retain(v14);
    v21 = swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v21);
    v31 = _swiftEmptyArrayStorage;
    v22 = sub_1000A4D80();
    v23 = sub_1000A0980(&qword_100211D00);
    v24 = sub_1000A4DC8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v8, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v29);
    v25 = v35;
    swift_release(v14);
    swift_release(v17);
    v26 = (uint64_t)v25;
  }
  else
  {
    a4[2](a4, 0);
    v26 = v14;
  }
  return swift_release(v26);
}

uint64_t sub_10010EDC0(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[3];
  ValueMetadata *v37;
  unint64_t v38;
  _QWORD *v39;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_1001EB378, 24, 7);
  *(_QWORD *)(v14 + 16) = a4;
  v37 = &type metadata for AudioAccessoryFeatures;
  v38 = sub_1000A42C4();
  _Block_copy(a4);
  v15 = isFeatureEnabled(_:)(aBlock);
  sub_1000A2140(aBlock);
  if ((v15 & 1) != 0)
  {
    v16 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    v17 = swift_allocObject(&unk_1001EB300, 24, 7);
    swift_unknownObjectWeakInit(v17 + 16, a3);
    v18 = (_QWORD *)swift_allocObject(&unk_1001EB3A0, 56, 7);
    v18[2] = v17;
    v18[3] = sub_1000A4F20;
    v18[4] = v14;
    v18[5] = a1;
    v18[6] = a2;
    v38 = (unint64_t)sub_10010F410;
    v39 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v37 = (ValueMetadata *)&unk_1001EB3B8;
    v19 = _Block_copy(aBlock);
    v20 = v16;
    swift_retain(v17);
    swift_retain(v14);
    v21 = swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v21);
    v35 = _swiftEmptyArrayStorage;
    v22 = sub_1000A4D80();
    v23 = sub_1000A0980(&qword_100211D00);
    v24 = sub_1000A4DC8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v23, v24, v8, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v33);
    v25 = v39;
    swift_release(v14);
    swift_release(v17);
    v26 = (uint64_t)v25;
  }
  else
  {
    v27 = sub_1000A4CC0();
    v28 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v27, 0, 0);
    *v29 = 4;
    v30 = (void *)_convertErrorToNSError(_:)(v28);
    ((void (**)(_QWORD, void *))a4)[2](a4, v30);

    swift_errorRelease(v28);
    v26 = v14;
  }
  return swift_release(v26);
}

uint64_t sub_10010F09C(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[3];
  ValueMetadata *v35;
  unint64_t v36;
  _QWORD *v37;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_1001EB2D8, 24, 7);
  *(_QWORD *)(v13 + 16) = a3;
  v35 = &type metadata for AudioAccessoryFeatures;
  v36 = sub_1000A42C4();
  _Block_copy(a3);
  v14 = isFeatureEnabled(_:)(aBlock);
  sub_1000A2140(aBlock);
  if ((v14 & 1) != 0)
  {
    v31 = v7;
    v15 = *(void **)(a2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    v16 = swift_allocObject(&unk_1001EB300, 24, 7);
    swift_unknownObjectWeakInit(v16 + 16, a2);
    v17 = (_QWORD *)swift_allocObject(&unk_1001EB328, 48, 7);
    v17[2] = v16;
    v17[3] = sub_1000A4CB8;
    v17[4] = v13;
    v17[5] = a1;
    v36 = (unint64_t)sub_10010F3E8;
    v37 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v35 = (ValueMetadata *)&unk_1001EB340;
    v18 = _Block_copy(aBlock);
    v19 = v15;
    swift_retain(v16);
    swift_retain(v13);
    static DispatchQoS.unspecified.getter(a1);
    v33 = _swiftEmptyArrayStorage;
    v20 = sub_1000A4D80();
    v21 = sub_1000A0980(&qword_100211D00);
    v22 = sub_1000A4DC8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v21, v22, v6, v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v32);
    v23 = v37;
    swift_release(v13);
    swift_release(v16);
    v24 = (uint64_t)v23;
  }
  else
  {
    v25 = sub_1000A4CC0();
    v26 = swift_allocError(&type metadata for DeviceManager.DeviceManagerError, v25, 0, 0);
    *v27 = 4;
    v28 = (void *)_convertErrorToNSError(_:)(v26);
    ((void (**)(_QWORD, void *))a3)[2](a3, v28);

    swift_errorRelease(v26);
    v24 = v13;
  }
  return swift_release(v24);
}

uint64_t sub_10010F36C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010F390()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010F3B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10010F3E8()
{
  uint64_t v0;

  return sub_10010E1C0(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10010F3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010F404(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10010F410()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10010E018);
}

uint64_t sub_10010F41C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10010F448()
{
  uint64_t v0;

  sub_10010DEB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void ***)(v0 + 32));
}

uint64_t sub_10010F454()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010F468()
{
  return sub_1000A4F0C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10010D7CC);
}

id DefaultsObserver.__allocating_init(keys:defaults:notificationBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  objc_super v12;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults] = a2;
  v10 = &v9[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_notify];
  *(_QWORD *)v10 = a3;
  *((_QWORD *)v10 + 1) = a4;
  v12.receiver = v9;
  v12.super_class = v4;
  return objc_msgSendSuper2(&v12, "init");
}

id DefaultsObserver.init(keys:defaults:notificationBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  objc_super v7;

  *(_QWORD *)&v4[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults] = a2;
  v5 = &v4[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_notify];
  *(_QWORD *)v5 = a3;
  *((_QWORD *)v5 + 1) = a4;
  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for DefaultsObserver();
  return objc_msgSendSuper2(&v7, "init");
}

uint64_t type metadata accessor for DefaultsObserver()
{
  return objc_opt_self(_TtC15audioaccessoryd16DefaultsObserver);
}

id DefaultsObserver.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  NSString v6;
  objc_super v8;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(void **)&v0[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults];
    swift_bridgeObjectRetain(*(_QWORD *)&v0[OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys]);
    v4 = (_QWORD *)(v1 + 40);
    do
    {
      v5 = *v4;
      swift_bridgeObjectRetain(*v4);
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
      objc_msgSend(v3, "removeObserver:forKeyPath:context:", v0, v6, 0);

      v4 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for DefaultsObserver();
  return objc_msgSendSuper2(&v8, "dealloc");
}

Swift::Void __swiftcall DefaultsObserver.start()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  NSString v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys));
    v4 = (_QWORD *)(v1 + 40);
    do
    {
      v5 = *v4;
      swift_bridgeObjectRetain(*v4);
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
      objc_msgSend(v3, "addObserver:forKeyPath:options:context:", v0, v6, 0, 0);

      v4 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
}

Swift::Void __swiftcall DefaultsObserver.stop()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  NSString v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_defaults);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_monitoredKeys));
    v4 = (_QWORD *)(v1 + 40);
    do
    {
      v5 = *v4;
      swift_bridgeObjectRetain(*v4);
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v5);
      objc_msgSend(v3, "removeObserver:forKeyPath:context:", v0, v6, 0);

      v4 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
}

uint64_t DefaultsObserver.observeValue(forKeyPath:of:change:context:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  if (a2)
  {
    v4 = result;
    v6 = *(void (**)(uint64_t, uint64_t))(v2 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_notify);
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd16DefaultsObserver_notify + 8);
    swift_retain(v5);
    v6(v4, a2);
    return swift_release(v5);
  }
  return result;
}

void DefaultsObserver.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("audioaccessoryd.DefaultsObserver", 32, "init()", 6, 0);
  __break(1u);
}

unint64_t sub_10010FBA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002105F0;
  if (!qword_1002105F0)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = swift_getWitnessTable(&unk_10018517C, v1);
    atomic_store(result, (unint64_t *)&qword_1002105F0);
  }
  return result;
}

uint64_t sub_10010FBE8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10010FC0C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t DarwinNotificationHelper.__allocating_init(notificationHandlers:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 24, 7);
  DarwinNotificationHelper.init(notificationHandlers:)(a1);
  return v3;
}

uint64_t DarwinNotificationHelper.init(notificationHandlers:)(uint64_t a1)
{
  _QWORD *v1;
  const void *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  const void *v35;
  __CFNotificationCenter *v36;
  _BYTE v37[24];

  v2 = v1;
  v36 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v36)
  {
    v1[2] = a1;
    v4 = qword_100210158;
    swift_bridgeObjectRetain(a1);
    if (v4 != -1)
LABEL_30:
      swift_once(&qword_100210158, sub_1000C7858);
    v5 = (_QWORD *)(static DarwinNotificationManager.shared
                  + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
    swift_beginAccess(static DarwinNotificationManager.shared + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers, v37, 33, 0);
    v6 = swift_retain(v2);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
    v8 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v8 >= v7 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
    v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v2);
    specialized Array._endMutation()(v9);
    v10 = swift_endAccess(v37);
    v11 = static os_log_type_t.default.getter(v10);
    if (qword_1002101C0 != -1)
      swift_once(&qword_1002101C0, sub_10016864C);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_100218DC8, "Setup darwin callback handlers", 30, 2, _swiftEmptyArrayStorage);
    v12 = 0;
    v33 = a1 + 64;
    v13 = 1 << *(_BYTE *)(a1 + 32);
    v14 = -1;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    v15 = v14 & *(_QWORD *)(a1 + 64);
    v34 = (unint64_t)(v13 + 63) >> 6;
    v35 = v2;
    while (1)
    {
      if (v15)
      {
        v16 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v17 = v16 | (v12 << 6);
      }
      else
      {
        v28 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        if (v28 >= v34)
          goto LABEL_27;
        v29 = *(_QWORD *)(v33 + 8 * v28);
        ++v12;
        if (!v29)
        {
          v12 = v28 + 1;
          if (v28 + 1 >= v34)
            goto LABEL_27;
          v29 = *(_QWORD *)(v33 + 8 * v12);
          if (!v29)
          {
            v12 = v28 + 2;
            if (v28 + 2 >= v34)
              goto LABEL_27;
            v29 = *(_QWORD *)(v33 + 8 * v12);
            if (!v29)
            {
              v30 = v28 + 3;
              if (v30 >= v34)
              {
LABEL_27:
                swift_release(a1);

                return (uint64_t)v2;
              }
              v29 = *(_QWORD *)(v33 + 8 * v30);
              if (!v29)
              {
                while (1)
                {
                  v12 = v30 + 1;
                  if (__OFADD__(v30, 1))
                    goto LABEL_29;
                  if (v12 >= v34)
                    goto LABEL_27;
                  v29 = *(_QWORD *)(v33 + 8 * v12);
                  ++v30;
                  if (v29)
                    goto LABEL_26;
                }
              }
              v12 = v30;
            }
          }
        }
LABEL_26:
        v15 = (v29 - 1) & v29;
        v17 = __clz(__rbit64(v29)) + (v12 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v17 + 8);
      v19 = (__CFString *)*(id *)(*(_QWORD *)(a1 + 48) + 8 * v17);
      v20 = swift_retain(v18);
      v21 = static os_log_type_t.default.getter(v20);
      v22 = qword_100218DC8;
      v23 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v24 = swift_allocObject(v23, 72, 7);
      *(_OWORD *)(v24 + 16) = xmmword_100184870;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v27 = v26;
      *(_QWORD *)(v24 + 56) = &type metadata for String;
      *(_QWORD *)(v24 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v24 + 32) = v25;
      *(_QWORD *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Setting up darwin callback handler for %@", 41, 2, v24);
      swift_bridgeObjectRelease(v24);
      v2 = v35;
      CFNotificationCenterAddObserver(v36, v35, (CFNotificationCallback)sub_1001100B4, v19, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      swift_release(v18);

    }
  }
  v32 = static os_log_type_t.error.getter(0);
  if (qword_1002101C0 != -1)
    swift_once(&qword_1002101C0, sub_10016864C);
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, qword_100218DC8, "darwinCenter not available", 26, 2, _swiftEmptyArrayStorage);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x80000001001B1270, "audioaccessoryd/DarwinNotificationHelper.swift", 46, 2, 20, 0);
  __break(1u);
  return result;
}

void sub_1001100B4(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a1;
  v9 = a3;
  v10 = a5;
  sub_100110960(a2, a3);

}

uint64_t DarwinNotificationHelper.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  const void *v17;
  uint64_t v18;
  __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  __CFNotificationCenter *center;
  _BYTE v33[24];

  v1 = v0;
  if (qword_100210158 != -1)
    goto LABEL_29;
  while (1)
  {
    v2 = (uint64_t *)(static DarwinNotificationManager.shared
                   + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
    swift_beginAccess(static DarwinNotificationManager.shared + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers, v33, 1, 0);
    v3 = *v2;
    swift_retain(v1);
    v4 = swift_bridgeObjectRetain(v3);
    v5 = sub_1000C7FB8(v4, v1);
    swift_bridgeObjectRelease(v3);
    swift_release(v1);
    v6 = *v2;
    *v2 = (uint64_t)v5;
    swift_bridgeObjectRelease(v6);
    center = CFNotificationCenterGetDarwinNotifyCenter();
    if (!center)
      break;
    v7 = *(_QWORD *)(v1 + 16);
    v29 = v7 + 64;
    v8 = 1 << *(_BYTE *)(v7 + 32);
    v9 = -1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    v10 = v9 & *(_QWORD *)(v7 + 64);
    v30 = (unint64_t)(v8 + 63) >> 6;
    v31 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain(v7);
    v11 = 0;
    if (v10)
    {
LABEL_6:
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_21;
    }
    while (1)
    {
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        goto LABEL_28;
      }
      if (v14 >= v30)
        goto LABEL_25;
      v15 = *(_QWORD *)(v29 + 8 * v14);
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v30)
          goto LABEL_25;
        v15 = *(_QWORD *)(v29 + 8 * v11);
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v30)
            goto LABEL_25;
          v15 = *(_QWORD *)(v29 + 8 * v11);
          if (!v15)
            break;
        }
      }
LABEL_20:
      v10 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_21:
      v17 = (const void *)v1;
      v18 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 16 * v13 + 8);
      v19 = (__CFString *)*(id *)(*(_QWORD *)(v31 + 48) + 8 * v13);
      v20 = swift_retain(v18);
      v21 = static os_log_type_t.default.getter(v20);
      if (qword_1002101C0 != -1)
        swift_once(&qword_1002101C0, sub_10016864C);
      v22 = qword_100218DC8;
      v23 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v24 = swift_allocObject(v23, 72, 7);
      *(_OWORD *)(v24 + 16) = xmmword_100184870;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v27 = v26;
      *(_QWORD *)(v24 + 56) = &type metadata for String;
      *(_QWORD *)(v24 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v24 + 32) = v25;
      *(_QWORD *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Remove darwin callback handler for %@", 37, 2, v24);
      swift_bridgeObjectRelease(v24);
      v1 = (uint64_t)v17;
      CFNotificationCenterRemoveObserver(center, v17, v19, 0);
      swift_release(v18);

      if (v10)
        goto LABEL_6;
    }
    v16 = v14 + 3;
    if (v16 >= v30)
    {
LABEL_25:
      swift_release(v31);

      break;
    }
    v15 = *(_QWORD *)(v29 + 8 * v16);
    if (v15)
    {
      v11 = v16;
      goto LABEL_20;
    }
    while (1)
    {
      v11 = v16 + 1;
      if (__OFADD__(v16, 1))
        break;
      if (v11 >= v30)
        goto LABEL_25;
      v15 = *(_QWORD *)(v29 + 8 * v11);
      ++v16;
      if (v15)
        goto LABEL_20;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    swift_once(&qword_100210158, sub_1000C7858);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  return v1;
}

uint64_t DarwinNotificationHelper.__deallocating_deinit()
{
  uint64_t v0;

  DarwinNotificationHelper.deinit();
  return swift_deallocClassInstance(v0, 24, 7);
}

Swift::Void __swiftcall DarwinNotificationHelper.onNotification(notificationName:)(CFStringRef notificationName)
{
  uint64_t v1;
  uint64_t v2;
  __CFString *v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = (id)notificationName;
    swift_bridgeObjectRetain(v2);
    v4 = sub_1000AA070((uint64_t)v3);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v2 + 56) + 16 * v4;
      v8 = *(void (**)(uint64_t))v6;
      v7 = *(_QWORD *)(v6 + 8);
      swift_retain(v7);

      v9 = swift_bridgeObjectRelease(v2);
      v10 = static os_log_type_t.default.getter(v9);
      if (qword_1002101C0 != -1)
        swift_once(&qword_1002101C0, sub_10016864C);
      v11 = qword_100218DC8;
      v12 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v13 = swift_allocObject(v12, 72, 7);
      *(_OWORD *)(v13 + 16) = xmmword_100184870;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v16 = v15;
      *(_QWORD *)(v13 + 56) = &type metadata for String;
      *(_QWORD *)(v13 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v13 + 32) = v14;
      *(_QWORD *)(v13 + 40) = v16;
      os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Invoking callback, notification, %@", 35, 2, v13);
      v17 = swift_bridgeObjectRelease(v13);
      v8(v17);
      swift_release(v7);
    }
    else
    {

      swift_bridgeObjectRelease(v2);
    }
  }
}

uint64_t _s15audioaccessoryd24DarwinNotificationHelperC20notificationHandlersACSgSDySSyycG_tcfC_0(_QWORD *a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (**v8)();
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  uint64_t v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t (**v29)();
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  _QWORD *v38;
  int64_t v39;
  __int128 v41;

  v1 = 0;
  v4 = a1[8];
  v2 = a1 + 8;
  v3 = v4;
  v5 = 1 << *((_BYTE *)v2 - 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v3;
  v38 = v2;
  v39 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v1 << 6);
    }
    else
    {
      v11 = v1 + 1;
      if (__OFADD__(v1, 1))
        goto LABEL_36;
      if (v11 >= v39)
      {
LABEL_33:
        swift_release(a1);
        v34 = type metadata accessor for DarwinNotificationHelper();
        v35 = swift_allocObject(v34, 24, 7);
        DarwinNotificationHelper.init(notificationHandlers:)((uint64_t)&_swiftEmptyDictionarySingleton);
        return v35;
      }
      v12 = v38[v11];
      ++v1;
      if (!v12)
      {
        v1 = v11 + 1;
        if (v11 + 1 >= v39)
          goto LABEL_33;
        v12 = v38[v1];
        if (!v12)
        {
          v1 = v11 + 2;
          if (v11 + 2 >= v39)
            goto LABEL_33;
          v12 = v38[v1];
          if (!v12)
          {
            v13 = v11 + 3;
            if (v13 >= v39)
              goto LABEL_33;
            v12 = v38[v13];
            if (!v12)
            {
              while (1)
              {
                v1 = v13 + 1;
                if (__OFADD__(v13, 1))
                  goto LABEL_37;
                if (v1 >= v39)
                  goto LABEL_33;
                v12 = v38[v1];
                ++v13;
                if (v12)
                  goto LABEL_21;
              }
            }
            v1 = v13;
          }
        }
      }
LABEL_21:
      v7 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v1 << 6);
    }
    v14 = 16 * v10;
    v15 = a1[7];
    v16 = *(_QWORD *)(a1[6] + 16 * v10 + 8);
    v17 = swift_allocObject(&unk_1001EB508, 32, 7);
    v41 = *(_OWORD *)(v15 + v14);
    *(_OWORD *)(v17 + 16) = v41;
    swift_bridgeObjectRetain(v16);
    swift_retain(*((_QWORD *)&v41 + 1));
    v18 = String._bridgeToObjectiveC()();
    v19 = swift_allocObject(&unk_1001EB530, 32, 7);
    *(_QWORD *)(v19 + 16) = sub_1000FED10;
    *(_QWORD *)(v19 + 24) = v17;
    swift_retain(v17);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v22 = sub_1000AA070((uint64_t)v18);
    v23 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (*((_QWORD *)&_swiftEmptyDictionarySingleton + 3) >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v21 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100100600();
        if ((v26 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_1000FF470(v25, isUniquelyReferenced_nonNull_native);
      v27 = sub_1000AA070((uint64_t)v18);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_38;
      v22 = v27;
      if ((v26 & 1) != 0)
      {
LABEL_4:
        v8 = (uint64_t (**)())(*((_QWORD *)&_swiftEmptyDictionarySingleton + 7) + 16 * v22);
        swift_release(v8[1]);
        *v8 = sub_1000A4EB0;
        v8[1] = (uint64_t (*)())v19;
        goto LABEL_5;
      }
    }
    *((_QWORD *)&_swiftEmptyDictionarySingleton + (v22 >> 6) + 8) |= 1 << v22;
    *(_QWORD *)(*((_QWORD *)&_swiftEmptyDictionarySingleton + 6) + 8 * v22) = v18;
    v29 = (uint64_t (**)())(*((_QWORD *)&_swiftEmptyDictionarySingleton + 7) + 16 * v22);
    *v29 = sub_1000A4EB0;
    v29[1] = (uint64_t (*)())v19;
    v30 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_35;
    *((_QWORD *)&_swiftEmptyDictionarySingleton + 2) = v32;
    v33 = v18;
LABEL_5:
    swift_release(v17);
    swift_bridgeObjectRelease(v16);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  type metadata accessor for CFString(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v37);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DarwinNotificationHelper()
{
  return objc_opt_self(_TtC15audioaccessoryd24DarwinNotificationHelper);
}

void sub_100110960(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *notificationName;

  if (!a1)
  {
    v12 = static os_log_type_t.error.getter(0);
    if (qword_1002101C0 != -1)
      swift_once(&qword_1002101C0, sub_10016864C);
    v13 = qword_100218DC8;
    v14 = "Observer for darwin callback handler not found";
    v15 = v12;
    v16 = 46;
    goto LABEL_12;
  }
  if (!a2)
  {
    v17 = static os_log_type_t.error.getter(a1);
    if (qword_1002101C0 != -1)
      swift_once(&qword_1002101C0, sub_10016864C);
    v13 = qword_100218DC8;
    v14 = "cfNotificationName for darwin callback handler not found";
    v15 = v17;
    v16 = 56;
LABEL_12:
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v13, v14, v16, 2, _swiftEmptyArrayStorage);
    return;
  }
  v4 = a2;
  v5 = static os_log_type_t.default.getter(v4);
  if (qword_1002101C0 != -1)
    swift_once(&qword_1002101C0, sub_10016864C);
  v6 = qword_100218DC8;
  v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100184870;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v11 = v10;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = v11;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "On darwin notification, %@", 26, 2, v8);
  swift_bridgeObjectRelease(v8);
  notificationName = (__CFString *)v4;
  swift_retain(a1);
  DarwinNotificationHelper.onNotification(notificationName:)(notificationName);
  swift_release(a1);

}

uint64_t sub_100110B68()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100110B90(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100110BFC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100110C88 + 4 * byte_100187CC5[a2]))(0x7473654764616568);
}

uint64_t sub_100110C88(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7473654764616568 && v1 == 0xEC00000073657275)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7473654764616568, 0xEC00000073657275, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC00000073657275);
  return v2 & 1;
}

uint64_t sub_100110D60(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x6574656C6564;
  else
    v2 = 0x657461647075;
  if ((a2 & 1) != 0)
    v3 = 0x6574656C6564;
  else
    v3 = 0x657461647075;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE600000000000000, v3, 0xE600000000000000, 0);
  swift_bridgeObjectRelease_n(0xE600000000000000, 2);
  return v4 & 1;
}

uint64_t sub_100110DD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  NSString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;

  v2 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v29 - v10;
  v12 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v13 = objc_msgSend(v12, "environment");

  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v14 + 16))
  {
    sub_1000AA00C(0xD00000000000001BLL, 0x80000001001AD820);
    v16 = v15;
    v17 = swift_bridgeObjectRelease(v14);
    if ((v16 & 1) != 0)
    {
      v18 = static os_log_type_t.default.getter(v17);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_100218DE8, "Under test appContainerURL to tmp", 33, 2, _swiftEmptyArrayStorage);
      v19 = NSTemporaryDirectory();
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      URL.init(fileURLWithPath:isDirectory:)(v20, v22, 1);
      return swift_bridgeObjectRelease(v22);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v14);
  }
  v24 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v25 = 1;
  v26 = objc_msgSend(v24, "URLsForDirectory:inDomains:", 5, 1);

  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v5);
  if (*(_QWORD *)(v27 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v4, v27 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
    v25 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v25, 1, v5);
  swift_bridgeObjectRelease(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000A1000((uint64_t)v4, (uint64_t *)&unk_100210840);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000031, 0x80000001001AD880, "audioaccessoryd/DeviceStore.swift", 33, 2, 2212, 0);
    __break(1u);
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v28(v11, v4, v5);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000022, 0x80000001001AD8C0, 1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(a1, v9, v5);
  }
  return result;
}

uint64_t sub_100111180(uint64_t a1)
{
  return sub_1001215A4(a1, (uint64_t)&unk_1001EBBC0, (uint64_t)sub_100165B58, (uint64_t)&unk_1001EBBD8);
}

uint64_t sub_10011119C(uint64_t a1)
{
  return sub_1001215A4(a1, (uint64_t)&unk_1001EBC10, (uint64_t)sub_100165BBC, (uint64_t)&unk_1001EBC28);
}

uint64_t sub_1001111B8(uint64_t a1)
{
  return sub_1001215A4(a1, (uint64_t)&unk_1001ECED0, (uint64_t)sub_1001680B0, (uint64_t)&unk_1001ECEE8);
}

uint64_t sub_1001111D4(uint64_t a1)
{
  return sub_1001215A4(a1, (uint64_t)&unk_1001EB940, (uint64_t)sub_1001650A8, (uint64_t)&unk_1001EB958);
}

void *sub_1001111F0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  id v15;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v15 = v9;
      v12 = a1(&v15);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v10;
      }
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }

      ++v8;
      if (v11 == v7)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_11:
  swift_bridgeObjectRelease(a3);
  return 0;
}

char *sub_100111310(uint64_t a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v7 = &a2[*(int *)(a3(0) + 24)];
    v8 = 4;
    while (1)
    {
      a3 = (uint64_t (*)(_QWORD))(v8 - 4);
      v9 = (a1 & 0xC000000000000001) != 0
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1)
         : (char *)*(id *)(a1 + 8 * v8);
      a2 = v9;
      v10 = v8 - 3;
      if (__OFADD__(a3, 1))
        break;
      v11 = objc_msgSend(v9, "bluetoothAddress");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v15 = *((_QWORD *)v7 + 1);
      if (v12 == *(_QWORD *)v7 && v14 == v15)
      {
        swift_bridgeObjectRelease(a1);
LABEL_17:
        swift_bridgeObjectRelease(v14);
        return a2;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, *(_QWORD *)v7, v15, 0);
      swift_bridgeObjectRelease(v14);
      if ((v17 & 1) != 0)
      {
        v14 = a1;
        goto LABEL_17;
      }

      ++v8;
      if (v10 == v6)
        goto LABEL_23;
    }
    __break(1u);
LABEL_19:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_23:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_1001114A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  v10 = swift_allocObject(&unk_1001EB698, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  v11 = swift_allocObject(&unk_1001EBA08, 32, 7);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_1001653CC;
  v25 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EBA20;
  v12 = _Block_copy(aBlock);
  v13 = v9;
  swift_retain(v10);
  v14 = swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v14);
  v23 = _swiftEmptyArrayStorage;
  v15 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_1000A0980(&qword_100211D00);
  v17 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v21);
  v18 = v25;
  swift_release(v10);
  return swift_release(v18);
}

void sub_1001116EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  Class isa;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  Class v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int *v96;
  char *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  Class v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  Class v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  Class v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  unsigned __int8 *v168;
  uint64_t v169;
  void *v170;
  id v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t (*v185)(uint64_t, uint64_t, uint64_t);
  int v186;
  Class v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  id v192;
  unsigned __int8 *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  Class v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  _QWORD *v214;
  uint64_t v215;
  Class v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  int *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t i;
  id v228;
  void *v229;
  id v230;
  uint64_t v231;
  uint64_t v232;
  id v233;
  NSString v234;
  id v235;
  id v236;
  id v237;
  id v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  Class v245;
  uint64_t v246;
  _QWORD *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  char *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  char *v259;
  uint64_t (*v260)(uint64_t, uint64_t, uint64_t);
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unsigned __int8 *v265;
  int *v266;
  _BYTE v267[24];
  char v268[24];
  unint64_t v269;
  _QWORD v270[5];
  uint64_t v271;
  char v272[24];

  v265 = (unsigned __int8 *)a2;
  v3 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v3);
  v5 = (char *)&v246 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v258 = (uint64_t)&v246 - v7;
  v8 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v8);
  v253 = (char *)&v246 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v264 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  *(_QWORD *)&v252 = *(_QWORD *)(v264 - 8);
  __chkstk_darwin(v264);
  v11 = (char *)&v246 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DeviceSupportInformationRecord(0);
  v254 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v246 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v255 = (char *)&v246 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v18);
  v257 = (char *)&v246 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = type metadata accessor for DeviceRecord(0);
  v263 = *(_QWORD *)(v261 - 8);
  __chkstk_darwin(v261);
  v21 = (char *)&v246 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
  v260 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v266 - 1);
  __chkstk_darwin(v266);
  v23 = (char *)&v246 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v256 = (uint64_t)&v246 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v246 - v27;
  swift_beginAccess(a1 + 16, v272, 0, 0);
  v262 = a1 + 16;
  Strong = (char *)swift_unknownObjectWeakLoadStrong(a1 + 16, v29);
  if (!Strong)
    return;
  v249 = v5;
  v248 = v11;
  v259 = Strong;
  v250 = v16;
  v251 = v15;
  v31 = static os_log_type_t.default.getter(Strong);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v32 = qword_100218DE0;
  v33 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v34 = swift_allocObject(v33, 72, 7);
  *(_OWORD *)(v34 + 16) = xmmword_100184870;
  v35 = (uint64_t)v265;
  v36 = swift_bridgeObjectRetain(v265);
  v37 = Array.description.getter(v36, v264);
  v39 = v38;
  swift_bridgeObjectRelease(v35);
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  *(_QWORD *)(v34 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v34 + 32) = v37;
  *(_QWORD *)(v34 + 40) = v39;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "records Added: %@", 17, 2, v34);
  swift_bridgeObjectRelease(v34);
  v40 = sub_1001133F4(v35, &qword_100210CD8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EDE8, type metadata accessor for LegacyMagicPairingSettingsRecords);
  if (v40)
  {
    v42 = v40;
    v43 = v259;
    v44 = swift_unknownObjectWeakLoadStrong(&v259[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate], v41);
    if (v44)
    {
      v45 = (void *)v44;
      v46 = _swiftEmptyArrayStorage;
      v270[0] = _swiftEmptyArrayStorage;
      v47 = v42[2];
      if (v47)
      {
        v265 = (unsigned __int8 *)v44;
        v48 = *((unsigned __int8 *)v260 + 80);
        v264 = (unint64_t)v42;
        v49 = (uint64_t)v42 + ((v48 + 32) & ~v48);
        v50 = *((_QWORD *)v260 + 9);
        do
        {
          sub_1000AE548(v49, (uint64_t)v28, type metadata accessor for MagicPairingSettingsRecord);
          v51 = &v28[v266[6]];
          v52 = *((_QWORD *)v51 + 1);
          if (*(_QWORD *)v51 == 0xD000000000000011 && v52 == 0x80000001001AB220
            || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v51, v52, 0xD000000000000011, 0x80000001001AB220, 0) & 1) != 0)
          {
            sub_1000AE58C((uint64_t)v28, type metadata accessor for MagicPairingSettingsRecord);
          }
          else
          {
            v53 = sub_1000BEDB4();
            v54 = sub_1000AE58C((uint64_t)v28, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
            v56 = *(_QWORD *)((v270[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v55 = *(_QWORD *)((v270[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v56 >= v55 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
            v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v53);
            specialized Array._endMutation()(v57);
          }
          v49 += v50;
          --v47;
        }
        while (v47);
        v46 = (_QWORD *)v270[0];
        v43 = v259;
        v42 = (_QWORD *)v264;
        v45 = v265;
      }
      swift_bridgeObjectRelease(v42);
      sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v46);
      objc_msgSend(v45, "magicPairingRecordsUpdatedWithRecords:", isa);

      v76 = v45;
      goto LABEL_26;
    }

    v77 = v42;
LABEL_28:
    swift_bridgeObjectRelease(v77);
    return;
  }
  v58 = sub_1001133F4(v35, &qword_100210CD8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE40, type metadata accessor for LegacyMagicPairingSettingsRecords);
  v60 = v259;
  v61 = v260;
  if (!v58)
  {
    v78 = sub_1001133F4(v35, &qword_100210CD8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE14, type metadata accessor for LegacyMagicPairingSettingsRecords);
    if (v78)
    {
      v80 = v78;
      v81 = swift_unknownObjectWeakLoadStrong(&v60[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate], v79);
      if (v81)
      {
        v82 = (void *)v81;
        v83 = _swiftEmptyArrayStorage;
        v270[0] = _swiftEmptyArrayStorage;
        v84 = v80[2];
        if (v84)
        {
          v85 = (uint64_t)v80
              + ((*(unsigned __int8 *)(v254 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v254 + 80));
          v86 = *(_QWORD *)(v254 + 72);
          do
          {
            sub_1000AE548(v85, (uint64_t)v14, type metadata accessor for DeviceSupportInformationRecord);
            v87 = sub_1000BB014();
            v88 = sub_1000AE58C((uint64_t)v14, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v88);
            v90 = *(_QWORD *)((v270[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v89 = *(_QWORD *)((v270[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v90 >= v89 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
            v91 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v90, v87);
            specialized Array._endMutation()(v91);
            v85 += v86;
            --v84;
          }
          while (v84);
          v83 = (_QWORD *)v270[0];
        }
        swift_bridgeObjectRelease(v80);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v138 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v83);
        objc_msgSend(v82, "deviceSupportInformationRecordsUpdatedWithRecords:", v138);

        v76 = v82;
        goto LABEL_26;
      }

      v77 = v80;
      goto LABEL_28;
    }
    v131 = sub_100113638(v35, type metadata accessor for LegacyMagicPairingSettingsRecords, (void (*)(BOOL, unint64_t, uint64_t))sub_10014EE88);
    if (!v131)
    {
LABEL_80:
      v139 = (uint64_t)v265;
      v140 = sub_100113524((uint64_t)v265, &qword_100210CD8, type metadata accessor for LegacyMagicPairingSettingsRecords);
      if (v140)
      {
        v141 = v140;
        v142 = v262;
        swift_beginAccess(v262, &v271, 0, 0);
        v144 = swift_unknownObjectWeakLoadStrong(v142, v143);
        if (v144)
        {
          v145 = (char *)v144;
          v270[3] = &type metadata for AudioAccessoryFeatures;
          v270[4] = sub_1000A42C4();
          v146 = isFeatureEnabled(_:)(v270);
          sub_1000A2140(v270);
          if ((v146 & 1) != 0)
          {
            v148 = swift_unknownObjectWeakLoadStrong(&v145[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v147);
            if (v148)
            {
              v149 = (void *)v148;
              type metadata accessor for AADeviceRecord(0);
              v150 = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v149, "aaDeviceRecordsUpdatedWithRecords:", v150);

              swift_bridgeObjectRelease(v141);
              v76 = v149;
LABEL_26:
              swift_unknownObjectRelease(v76);
              return;
            }
          }

        }
      }
      else
      {
        v210 = sub_100113524(v139, &qword_100210CD8, type metadata accessor for LegacyMagicPairingSettingsRecords);
        if (!v210)
        {

          return;
        }
        v141 = v210;
        v211 = v262;
        swift_beginAccess(v262, v270, 0, 0);
        v213 = (void *)swift_unknownObjectWeakLoadStrong(v211, v212);
        if (v213)

      }
      v77 = v141;
      goto LABEL_28;
    }
    v132 = v131;
    if (v131[2])
    {
      v133 = v252;
      v134 = (uint64_t)v253;
      sub_1000AE548((uint64_t)v131 + ((*(unsigned __int8 *)(v252 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v252 + 80)), (uint64_t)v253, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v135 = 0;
      v136 = (uint64_t)v248;
      v137 = v264;
    }
    else
    {
      v135 = 1;
      v136 = (uint64_t)v248;
      v134 = (uint64_t)v253;
      v137 = v264;
      v133 = v252;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v133 + 56))(v134, v135, 1, v137);
    swift_bridgeObjectRelease(v132);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v133 + 48))(v134, 1, v137) == 1)
    {
      sub_1000A1000(v134, &qword_100210CD8);
      goto LABEL_80;
    }
    sub_1000C6CD0(v134, v136, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v151 = v262;
    swift_beginAccess(v262, v270, 0, 0);
    v153 = swift_unknownObjectWeakLoadStrong(v151, v152);
    if (!v153
      || (v155 = (void *)v153,
          v156 = (char *)swift_unknownObjectWeakLoadStrong(v153 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v154), v155, !v156))
    {
LABEL_138:
      v218 = v262;
      swift_beginAccess(v262, v267, 0, 0);
      v220 = swift_unknownObjectWeakLoadStrong(v218, v219);
      if (!v220)
      {
LABEL_158:

        sub_1000AE58C(v136, type metadata accessor for LegacyMagicPairingSettingsRecords);
        return;
      }
      v222 = (void *)v220;
      v223 = (int *)swift_unknownObjectWeakLoadStrong(v220 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v221);

      if (!v223)
      {
        sub_1000AE58C(v136, type metadata accessor for LegacyMagicPairingSettingsRecords);

        return;
      }
      sub_1000E2648();
      v225 = v224;
      v269 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v224 >> 62)
      {
        if (v224 < 0)
          v244 = v224;
        else
          v244 = v224 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v224);
        v226 = _CocoaArrayWrapper.endIndex.getter(v244);
        if (v226)
        {
LABEL_142:
          v266 = v223;
          if (v226 >= 1)
          {
            for (i = 0; i != v226; ++i)
            {
              if ((v225 & 0xC000000000000001) != 0)
                v228 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v225);
              else
                v228 = *(id *)(v225 + 8 * i + 32);
              v229 = v228;
              v230 = objc_msgSend(v228, "bluetoothAddress");
              static String._unconditionallyBridgeFromObjectiveC(_:)(v230);
              v232 = v231;

              v233 = objc_allocWithZone((Class)BTCloudDevice);
              v234 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v232);
              v235 = objc_msgSend(v233, "initWithBluetoothAddress:", v234);

              v236 = objc_msgSend(v229, "name");
              objc_msgSend(v235, "setNickname:", v236);

              v237 = objc_msgSend(v229, "productID");
              objc_msgSend(v235, "setProductID:", v237);

              v238 = objc_msgSend(v229, "vendorID");
              objc_msgSend(v235, "setVendorID:", v238);

              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v239);
              v241 = *(_QWORD *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v240 = *(_QWORD *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v241 >= v240 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v240 > 1, v241 + 1, 1);
              v242 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v241, v235);
              specialized Array._endMutation()(v242);
            }
            swift_bridgeObjectRelease(v225);
            v243 = (_QWORD *)v269;
            v60 = v259;
            v136 = (uint64_t)v248;
            v223 = v266;
            goto LABEL_157;
          }
LABEL_160:
          __break(1u);
          return;
        }
      }
      else
      {
        v226 = *(_QWORD *)((v224 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v224);
        if (v226)
          goto LABEL_142;
      }
      swift_bridgeObjectRelease(v225);
      v243 = _swiftEmptyArrayStorage;
LABEL_157:
      swift_bridgeObjectRelease(v225);
      sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
      v245 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v243);
      objc_msgSend(v223, "devicesUpdatedWithRecords:", v245);
      swift_unknownObjectRelease(v223);

      goto LABEL_158;
    }
    v257 = v156;
    sub_1000E2648();
    v158 = v157;
    v159 = v262;
    swift_beginAccess(v262, &v271, 0, 0);
    v161 = (void *)swift_unknownObjectWeakLoadStrong(v159, v160);
    swift_unknownObjectWeakInit(v267, v161);

    v269 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v158 >> 62)
    {
      if (v158 < 0)
        v215 = v158;
      else
        v215 = v158 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v158);
      v162 = _CocoaArrayWrapper.endIndex.getter(v215);
      if (v162)
        goto LABEL_89;
    }
    else
    {
      v162 = *(_QWORD *)((v158 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v158);
      if (v162)
      {
LABEL_89:
        if (v162 < 1)
        {
          __break(1u);
          goto LABEL_160;
        }
        v264 = v158 & 0xC000000000000001;
        swift_beginAccess(v267, v268, 0, 0);
        v163 = 0;
        v263 = v158;
        v261 = v162;
        do
        {
          if (v264)
            v164 = (int *)specialized _ArrayBuffer._getElementSlowPath(_:)(v163, v158);
          else
            v164 = (int *)*(id *)(v158 + 8 * v163 + 32);
          v166 = v164;
          v167 = swift_unknownObjectWeakLoadStrong(v267, v165);
          if (v167)
          {
            v168 = (unsigned __int8 *)v167;
            v169 = sub_1000B4AC8();
            v170 = (void *)objc_opt_self(BTSystemConfiguration);
            v171 = objc_msgSend(v170, "isFirstUnlocked");
            if ((_DWORD)v171)
            {
              v265 = v168;
              v172 = v166;
              v173 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v174 = v251;
              v175 = sub_1000A0A00(v251, (uint64_t)qword_100218C68);
              v176 = v250;
              v177 = (uint64_t)v255;
              (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v255, v175, v174);
              v178 = sub_100128330(v177, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v173);
              (*(void (**)(uint64_t, uint64_t))(v176 + 8))(v177, v174);
              v179 = v178[2];
              v180 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              v181 = *(_QWORD *)(v180 - 8);
              if (v179)
              {
                v182 = v258;
                sub_1000AE548((uint64_t)v178+ ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80)), v258, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v181 + 56))(v182, 0, 1, v180);
              }
              else
              {
                v182 = v258;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v181 + 56))(v258, 1, 1, v180);
              }
              swift_release(v169);
              swift_bridgeObjectRelease(v178);
              v166 = v172;
              v168 = v265;
            }
            else
            {
              v183 = static os_log_type_t.error.getter(v171);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v183, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              v180 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              v182 = v258;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v180 - 8) + 56))(v258, 1, 1, v180);
              swift_release(v169);
            }
            type metadata accessor for LegacyAccountMagicKeysRecord(0);
            v184 = *(_QWORD *)(v180 - 8);
            v185 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v184 + 48);
            v186 = v185(v182, 1, v180);
            v265 = (unsigned __int8 *)v184;
            if (v186 == 1)
            {
              sub_1000A1000(v182, (uint64_t *)&unk_1002122E0);
              v187 = 0;
            }
            else
            {
              v188 = Data.subdata(in:)(1, 17, *(_QWORD *)(v182 + *(int *)(v180 + 20)), *(_QWORD *)(v182 + *(int *)(v180 + 20) + 8));
              v190 = v189;
              sub_1000AE58C(v182, type metadata accessor for LegacyAccountMagicKeysRecord);
              v187 = Data._bridgeToObjectiveC()().super.isa;
              sub_1000A103C(v188, v190);
            }
            objc_msgSend(v166, "setMasterKey:", v187);

            v191 = sub_1000B4AC8();
            v192 = objc_msgSend(v170, "isFirstUnlocked");
            v266 = v166;
            if ((_DWORD)v192)
            {
              v260 = v185;
              v193 = v168;
              v194 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v195 = v251;
              v196 = sub_1000A0A00(v251, (uint64_t)qword_100218C68);
              v197 = v250;
              v198 = (uint64_t)v255;
              (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v255, v196, v195);
              v199 = sub_100128330(v198, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v194);
              (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v198, v195);
              if (v199[2])
              {
                v200 = (uint64_t)v265;
                v201 = (uint64_t)v249;
                sub_1000AE548((uint64_t)v199 + ((v265[80] + 32) & ~(unint64_t)v265[80]), (uint64_t)v249, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v200 + 56))(v201, 0, 1, v180);
              }
              else
              {
                v201 = (uint64_t)v249;
                (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v265 + 7))(v249, 1, 1, v180);
              }
              swift_release(v191);
              swift_bridgeObjectRelease(v199);
              v168 = v193;
              v185 = v260;
            }
            else
            {
              v202 = static os_log_type_t.error.getter(v192);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v202, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              v201 = (uint64_t)v249;
              (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v265 + 7))(v249, 1, 1, v180);
              swift_release(v191);
            }
            if (v185(v201, 1, v180) == 1)
            {
              sub_1000A1000(v201, (uint64_t *)&unk_1002122E0);
              v203 = 0;
            }
            else
            {
              v204 = Data.subdata(in:)(17, 33, *(_QWORD *)(v201 + *(int *)(v180 + 20)), *(_QWORD *)(v201 + *(int *)(v180 + 20) + 8));
              v206 = v205;
              sub_1000AE58C(v201, type metadata accessor for LegacyAccountMagicKeysRecord);
              v203 = Data._bridgeToObjectiveC()().super.isa;
              sub_1000A103C(v204, v206);
            }
            v158 = v263;
            v162 = v261;
            v166 = v266;
            objc_msgSend(v266, "setMasterHint:", v203);

          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v167);
          v208 = *(_QWORD *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v207 = *(_QWORD *)((v269 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v208 >= v207 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v207 > 1, v208 + 1, 1);
          ++v163;
          v209 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v208, v166);
          specialized Array._endMutation()(v209);
        }
        while (v162 != v163);
        swift_bridgeObjectRelease(v158);
        v214 = (_QWORD *)v269;
        v60 = v259;
        v136 = (uint64_t)v248;
        goto LABEL_137;
      }
    }
    swift_bridgeObjectRelease(v158);
    v214 = _swiftEmptyArrayStorage;
LABEL_137:
    swift_bridgeObjectRelease(v158);
    swift_unknownObjectWeakDestroy(v267);
    sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
    v216 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v214);
    v217 = v257;
    objc_msgSend(v257, "magicPairingRecordsUpdatedWithRecords:", v216);

    swift_unknownObjectRelease(v217);
    goto LABEL_138;
  }
  v62 = v58;
  v253 = &v259[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate];
  v63 = swift_unknownObjectWeakLoadStrong(&v259[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate], v59);
  v64 = v261;
  v247 = v62;
  if (v63)
  {
    v65 = (void *)v63;
    v66 = _swiftEmptyArrayStorage;
    v270[0] = _swiftEmptyArrayStorage;
    v67 = v62[2];
    if (v67)
    {
      v68 = (uint64_t)v62
          + ((*(unsigned __int8 *)(v263 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80));
      v69 = *(_QWORD *)(v263 + 72);
      swift_bridgeObjectRetain(v62);
      do
      {
        sub_1000AE548(v68, (uint64_t)v21, type metadata accessor for DeviceRecord);
        v70 = sub_1000B7110();
        v71 = sub_1000AE58C((uint64_t)v21, type metadata accessor for DeviceRecord);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
        v73 = *(_QWORD *)((v270[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v72 = *(_QWORD *)((v270[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v73 >= v72 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1);
        v74 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v70);
        specialized Array._endMutation()(v74);
        v68 += v69;
        --v67;
      }
      while (v67);
      v62 = v247;
      swift_bridgeObjectRelease(v247);
      v66 = (_QWORD *)v270[0];
      v60 = v259;
      v61 = v260;
      v64 = v261;
    }
    sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
    v92 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v66);
    objc_msgSend(v65, "devicesUpdatedWithRecords:", v92);

    swift_unknownObjectRelease(v65);
  }
  v93 = v62[2];
  if (v93)
  {
    v94 = v263;
    v265 = (unsigned __int8 *)v62
         + ((*(unsigned __int8 *)(v263 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80));
    swift_bridgeObjectRetain(v62);
    swift_beginAccess(v262, v270, 0, 0);
    v95 = 0;
    v264 = *(_QWORD *)(v94 + 72);
    v258 = (uint64_t)"Invalid AAProxCardsRecord - %@";
    v263 = 0x80000001001AB220;
    v252 = xmmword_100187640;
    v96 = v266;
    v97 = v257;
    v254 = v93;
    while (1)
    {
      v98 = &v265[v264 * v95 + *(int *)(v64 + 24)];
      v99 = *((_QWORD *)v98 + 1);
      if ((*(_QWORD *)v98 != 0xD000000000000011 || v99 != v263)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v98, v99, 0xD000000000000011, v258 | 0x8000000000000000, 0) & 1) == 0)
      {
        v101 = swift_unknownObjectWeakLoadStrong(v262, v100);
        if (v101)
        {
          v102 = (void *)v101;
          v103 = sub_1000B4AC8();

          v104 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
          if ((v104 & 1) != 0)
          {
            v105 = sub_100129690();
            if (qword_100210160 != -1)
              swift_once(&qword_100210160, sub_1000C81B8);
            v106 = v251;
            v107 = sub_1000A0A00(v251, (uint64_t)qword_100218C90);
            v108 = v250;
            v109 = (uint64_t)v255;
            (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v255, v107, v106);
            v110 = sub_100128330(v109, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
            swift_release(v105);
            (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v109, v106);
            v96 = v266;
            v61 = v260;
            v64 = v261;
          }
          else
          {
            v111 = static os_log_type_t.error.getter(v104);
            if (qword_1002101E0 != -1)
              swift_once(&qword_1002101E0, sub_1001687B0);
            v112 = v111;
            v110 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)(v112, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
          }
          swift_release(v103);
          v113 = v110[2];
          if (v113)
          {
            v114 = (uint64_t)v110
                 + ((*((unsigned __int8 *)v61 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v61 + 80));
            swift_bridgeObjectRetain(v110);
            v115 = v61[9];
            while (1)
            {
              sub_1000AE548(v114, (uint64_t)v23, type metadata accessor for MagicPairingSettingsRecord);
              v116 = &v23[v96[6]];
              v117 = *((_QWORD *)v116 + 1);
              v118 = *((_QWORD *)v98 + 1);
              v119 = *(_QWORD *)v116 == *(_QWORD *)v98 && v117 == v118;
              if (v119
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v116, v117, *(_QWORD *)v98, v118, 0) & 1) != 0)
              {
                break;
              }
              sub_1000AE58C((uint64_t)v23, type metadata accessor for MagicPairingSettingsRecord);
              v114 += v115;
              if (!--v113)
              {
                swift_bridgeObjectRelease(v110);
                v64 = v261;
                goto LABEL_63;
              }
            }
            swift_bridgeObjectRelease(v110);
            v97 = v257;
            sub_1000C6CD0((uint64_t)v23, (uint64_t)v257, type metadata accessor for MagicPairingSettingsRecord);
            ((void (*)(char *, _QWORD, uint64_t, int *))v61[7])(v97, 0, 1, v96);
            v64 = v261;
          }
          else
          {
LABEL_63:
            v97 = v257;
            ((void (*)(char *, uint64_t, uint64_t, int *))v61[7])(v257, 1, 1, v96);
          }
          swift_bridgeObjectRelease(v110);
          v120 = ((uint64_t (*)(char *, uint64_t, int *))v61[6])(v97, 1, v96);
          v93 = v254;
          if (v120 != 1)
          {
            v121 = v256;
            sub_1000C6CD0((uint64_t)v97, v256, type metadata accessor for MagicPairingSettingsRecord);
            v123 = swift_unknownObjectWeakLoadStrong(v253, v122);
            if (v123)
            {
              v124 = (void *)v123;
              v125 = sub_1000A0980(&qword_100211998);
              v126 = swift_allocObject(v125, 40, 7);
              *(_OWORD *)(v126 + 16) = v252;
              v127 = sub_1000BEDB4();
              *(_QWORD *)(v126 + 32) = v127;
              v271 = v126;
              specialized Array._endMutation()(v127);
              v128 = v271;
              sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
              v129 = Array._bridgeToObjectiveC()().super.isa;
              v130 = v128;
              v121 = v256;
              swift_bridgeObjectRelease(v130);
              objc_msgSend(v124, "magicPairingRecordsUpdatedWithRecords:", v129);
              swift_unknownObjectRelease(v124);

            }
            sub_1000AE58C(v121, type metadata accessor for MagicPairingSettingsRecord);
            v93 = v254;
            goto LABEL_42;
          }
        }
        else
        {
          ((void (*)(char *, uint64_t, uint64_t, int *))v61[7])(v97, 1, 1, v96);
        }
        sub_1000A1000((uint64_t)v97, (uint64_t *)&unk_100212190);
      }
LABEL_42:
      if (++v95 == v93)
      {

        swift_bridgeObjectRelease_n(v247, 2);
        return;
      }
    }
  }
  swift_bridgeObjectRelease(v62);

}

uint64_t sub_100113164(uint64_t a1, void (*a2)(_QWORD, uint64_t, _QWORD))
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v4 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  a2(0, v5 & ~(v5 >> 63), 0);
  v6 = _swiftEmptyArrayStorage;
  if (v4)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease(a1);
    if (!v8)
      return (uint64_t)v6;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return (uint64_t)v6;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    swift_release(_swiftEmptyArrayStorage);
    swift_unknownObjectRelease(v12);
    return 0;
  }
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_release(_swiftEmptyArrayStorage);
  if (v9)
    return 0;
  __break(1u);
  return result;
}

_QWORD *sub_100113280(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v14);
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = (_QWORD *)swift_bridgeObjectRelease(a1);
    if (!v3)
      return _swiftEmptyArrayStorage;
  }
  else
  {
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return _swiftEmptyArrayStorage;
  }
  if (v3 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v4 = 0;
      do
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4++, a1);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v6 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
        specialized ContiguousArray._endMutation()(v7);
      }
      while (v3 != v4);
    }
    else
    {
      v8 = (void **)(a1 + 32);
      do
      {
        v9 = *v8++;
        v10 = v9;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
        specialized ContiguousArray._endMutation()(v12);
        --v3;
      }
      while (v3);
    }
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001133F4(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD, uint64_t, _QWORD, __n128), uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;

  v8 = sub_1000A0980(a2);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v19 = _swiftEmptyArrayStorage;
  a3(0, v12, 0, v9);
  if (v12)
  {
    v13 = a4(0);
    v14 = *(_QWORD *)(v13 - 8);
    sub_1000AE548(a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v11, a4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    sub_1000A1000((uint64_t)v11, a2);
    swift_release(v19);
    return 0;
  }
  else
  {
    v15 = v19;
    v16 = a4(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v11, 1, 1, v16);
  }
  return v15;
}

_QWORD *sub_100113524(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v6 = sub_1000A0980(a2);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = _swiftEmptyArrayStorage;
  v9 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v9);
  v10 = a3(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (v9)
  {
    sub_1000AE548(a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), (uint64_t)v8, a3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    sub_1000A1000((uint64_t)v8, a2);
    swift_release(v14);
    return 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v8, 1, 1, v10);
    return v14;
  }
}

_QWORD *sub_100113638(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(BOOL, unint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v6 = a2(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  v20 = _swiftEmptyArrayStorage;
  ((void (*)(_QWORD, uint64_t, _QWORD, __n128))a3)(0, v11, 0, v8);
  v12 = v20;
  if (v11)
  {
    v13 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14 = a1 + v13;
    v15 = *(_QWORD *)(v7 + 72);
    do
    {
      sub_1000AE548(v14, (uint64_t)v10, a2);
      v20 = v12;
      v17 = v12[2];
      v16 = v12[3];
      if (v17 >= v16 >> 1)
      {
        a3(v16 > 1, v17 + 1, 1);
        v12 = v20;
      }
      v12[2] = v17 + 1;
      sub_1000C6CD0((uint64_t)v10, (uint64_t)v12 + v13 + v17 * v15, a2);
      v14 += v15;
      --v11;
    }
    while (v11);
  }
  return v12;
}

_QWORD *sub_100113764(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  sub_10014EE88(0, v3 & ~(v3 >> 63), 0);
  v4 = _swiftEmptyArrayStorage;
  if (!v2)
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      return v4;
    goto LABEL_10;
  }
  if (a1 < 0)
    v5 = a1;
  else
    v5 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(a1);
  if (v6)
  {
LABEL_10:
    if ((a1 & 0xC000000000000001) != 0)
    {
      v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      swift_release(_swiftEmptyArrayStorage);
      swift_unknownObjectRelease(v9);
    }
    else
    {
      swift_release(_swiftEmptyArrayStorage);
    }
    return 0;
  }
  return v4;
}

_QWORD *sub_10011386C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t Strong;
  uint64_t v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *result;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  NSString v73;
  id v74;
  NSString v75;
  NSString v76;
  NSString v77;
  NSString v78;
  NSString v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  NSArray v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  Class isa;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  Class v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  Class v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  void *v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  Class v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  void *v202;
  uint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  Class v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  void *v227;
  _QWORD *v228;
  uint64_t v229;
  Class v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t i;
  id v241;
  void *v242;
  id v243;
  uint64_t v244;
  uint64_t v245;
  id v246;
  NSString v247;
  id v248;
  id v249;
  id v250;
  id v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  Class v258;
  uint64_t v259;
  char *v260;
  __int128 v261;
  uint64_t v262;
  uint64_t *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD v276[3];
  _BYTE v277[24];
  unint64_t v278;
  _QWORD v279[5];
  _QWORD v280[2];

  v4 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v4);
  v275 = (uint64_t)&v259 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v271 = (uint64_t)&v259 - v7;
  v8 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v8);
  v264 = (char *)&v259 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  *(_QWORD *)&v261 = *(_QWORD *)(v262 - 8);
  __chkstk_darwin(v262);
  v269 = (uint64_t)&v259 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DeviceSupportInformationRecord(0);
  v259 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v260 = (char *)&v259 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v267 = type metadata accessor for URL(0);
  v266 = *(_QWORD *)(v267 - 8);
  __chkstk_darwin(v267);
  v265 = (char *)&v259 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v14);
  v268 = (uint64_t)&v259 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DeviceRecord(0);
  v273 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v259 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MagicPairingSettingsRecord(0);
  v270 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v259 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v263 = (uint64_t *)((char *)&v259 - v23);
  __chkstk_darwin(v24);
  v26 = (char *)&v259 - v25;
  v274 = (_QWORD *)(a2 + 16);
  v28 = static os_log_type_t.default.getter(v27);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v29 = qword_100218DE0;
  v30 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v31 = swift_allocObject(v30, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100184870;
  v32 = swift_bridgeObjectRetain(a1);
  v272 = v19;
  v33 = Array.description.getter(v32, v19);
  v35 = v34;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v31 + 32) = v33;
  *(_QWORD *)(v31 + 40) = v35;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "records Updated: %@", 19, 2, v31);
  swift_bridgeObjectRelease(v31);
  v36 = sub_100113638(a1, type metadata accessor for MagicPairingSettingsRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10014EDE8);
  if (v36)
  {
    v37 = v36;
    v38 = v274;
    swift_beginAccess(v274, v279, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v38, v39);
    if (Strong)
    {
      v42 = (void *)Strong;
      v43 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v41);

      if (v43)
      {
        v44 = _swiftEmptyArrayStorage;
        v280[0] = _swiftEmptyArrayStorage;
        v45 = v37[2];
        if (v45)
        {
          v274 = v37;
          v275 = (uint64_t)v43;
          v46 = (uint64_t)v37
              + ((*(unsigned __int8 *)(v270 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v270 + 80));
          v47 = *(_QWORD *)(v270 + 72);
          swift_bridgeObjectRetain(v37);
          v48 = v272;
          do
          {
            sub_1000AE548(v46, (uint64_t)v26, type metadata accessor for MagicPairingSettingsRecord);
            v49 = &v26[*(int *)(v48 + 24)];
            v50 = *((_QWORD *)v49 + 1);
            if (*(_QWORD *)v49 == 0xD000000000000011 && v50 == 0x80000001001AB220
              || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v49, v50, 0xD000000000000011, 0x80000001001AB220, 0) & 1) != 0)
            {
              sub_1000AE58C((uint64_t)v26, type metadata accessor for MagicPairingSettingsRecord);
            }
            else
            {
              v51 = sub_1000BEDB4();
              v52 = sub_1000AE58C((uint64_t)v26, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
              v54 = *(_QWORD *)((v280[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v53 = *(_QWORD *)((v280[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v54 >= v53 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
              v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
              specialized Array._endMutation()(v55);
              v48 = v272;
            }
            v46 += v47;
            --v45;
          }
          while (v45);
          v37 = v274;
          swift_bridgeObjectRelease(v274);
          v44 = (_QWORD *)v280[0];
          v43 = (void *)v275;
        }
        swift_bridgeObjectRelease(v37);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        v84.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v44);
        objc_msgSend(v43, "magicPairingRecordsUpdatedWithRecords:", v84.super.isa);
LABEL_29:

        return (_QWORD *)swift_unknownObjectRelease(v43);
      }
    }
    v56 = v37;
    return (_QWORD *)swift_bridgeObjectRelease(v56);
  }
  v58 = sub_1001133F4(a1, (uint64_t *)&unk_100212190, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE40, type metadata accessor for MagicPairingSettingsRecord);
  if (v58)
  {
    v59 = v58;
    v60 = v274;
    swift_beginAccess(v274, v279, 0, 0);
    v62 = swift_unknownObjectWeakLoadStrong(v60, v61);
    v64 = v272;
    v65 = v270;
    if (v62)
    {
      v66 = (void *)v62;
      v67 = (void *)swift_unknownObjectWeakLoadStrong(v62 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v63);

      if (v67)
      {
        v68 = _swiftEmptyArrayStorage;
        v280[0] = _swiftEmptyArrayStorage;
        v69 = v59[2];
        if (v69)
        {
          v271 = (uint64_t)v67;
          v70 = (uint64_t)v59
              + ((*(unsigned __int8 *)(v273 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80));
          v275 = *(_QWORD *)(v273 + 72);
          v262 = (uint64_t)v59;
          swift_bridgeObjectRetain(v59);
          do
          {
            sub_1000AE548(v70, (uint64_t)v18, type metadata accessor for DeviceRecord);
            v71 = *(_QWORD *)&v18[*(int *)(v16 + 24) + 8];
            v72 = objc_allocWithZone((Class)BTCloudDevice);
            swift_bridgeObjectRetain(v71);
            v73 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v71);
            v74 = objc_msgSend(v72, "initWithBluetoothAddress:", v73);

            v75 = String._bridgeToObjectiveC()();
            objc_msgSend(v74, "setNickname:", v75);

            v76 = String._bridgeToObjectiveC()();
            objc_msgSend(v74, "setModelNumber:", v76);

            v77 = String._bridgeToObjectiveC()();
            objc_msgSend(v74, "setManufacturer:", v77);

            v78 = String._bridgeToObjectiveC()();
            objc_msgSend(v74, "setProductID:", v78);

            v79 = String._bridgeToObjectiveC()();
            objc_msgSend(v74, "setVendorID:", v79);

            v80 = sub_1000AE58C((uint64_t)v18, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v80);
            v82 = *(_QWORD *)((v280[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v81 = *(_QWORD *)((v280[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v82 >= v81 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
            v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v74);
            specialized Array._endMutation()(v83);
            v70 += v275;
            --v69;
          }
          while (v69);
          v59 = (_QWORD *)v262;
          swift_bridgeObjectRelease(v262);
          v68 = (_QWORD *)v280[0];
          v67 = (void *)v271;
          v64 = v272;
          v65 = v270;
        }
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v68);
        objc_msgSend(v67, "devicesUpdatedWithRecords:", isa);

        swift_unknownObjectRelease(v67);
      }
    }
    v103 = v59[2];
    if (!v103)
    {
      v56 = v59;
      return (_QWORD *)swift_bridgeObjectRelease(v56);
    }
    v104 = v273;
    v105 = (uint64_t)v59
         + ((*(unsigned __int8 *)(v273 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80));
    v262 = (uint64_t)v59;
    swift_bridgeObjectRetain(v59);
    v264 = (char *)v103;
    v106 = v274;
    swift_beginAccess(v274, v280, 0, 0);
    v107 = v106;
    v108 = (uint64_t)v264;
    swift_beginAccess(v107, v277, 0, 0);
    v109 = 0;
    v275 = *(_QWORD *)(v104 + 72);
    v110 = v105;
    v271 = (uint64_t)"Invalid AAProxCardsRecord - %@";
    v273 = 0x80000001001AB220;
    v261 = xmmword_100187640;
    v111 = v268;
    v269 = v110;
    while (1)
    {
      v112 = (_QWORD *)(v110 + v275 * v109 + *(int *)(v16 + 24));
      v113 = v112[1];
      if ((*v112 != 0xD000000000000011 || v113 != v273)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*v112, v113, 0xD000000000000011, v271 | 0x8000000000000000, 0) & 1) == 0)
      {
        v115 = swift_unknownObjectWeakLoadStrong(v274, v114);
        if (v115)
        {
          v116 = (void *)v115;
          v117 = sub_1000B4AC8();

          v118 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
          if ((v118 & 1) != 0)
          {
            v119 = sub_100129690();
            if (qword_100210160 != -1)
              swift_once(&qword_100210160, sub_1000C81B8);
            v120 = v267;
            v121 = sub_1000A0A00(v267, (uint64_t)qword_100218C90);
            v122 = v266;
            v123 = (uint64_t)v265;
            (*(void (**)(char *, uint64_t, uint64_t))(v266 + 16))(v265, v121, v120);
            v124 = sub_100128330(v123, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
            swift_release(v119);
            (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v123, v120);
            v64 = v272;
            v65 = v270;
          }
          else
          {
            v125 = static os_log_type_t.error.getter(v118);
            if (qword_1002101E0 != -1)
              swift_once(&qword_1002101E0, sub_1001687B0);
            v126 = v125;
            v124 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)(v126, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
          }
          v110 = v269;
          swift_release(v117);
          v127 = v124[2];
          if (v127)
          {
            v128 = (uint64_t)v124
                 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
            swift_bridgeObjectRetain(v124);
            v129 = *(_QWORD *)(v65 + 72);
            while (1)
            {
              sub_1000AE548(v128, (uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
              v130 = &v21[*(int *)(v64 + 24)];
              v131 = *((_QWORD *)v130 + 1);
              v132 = v112[1];
              v133 = *(_QWORD *)v130 == *v112 && v131 == v132;
              if (v133
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v130, v131, *v112, v132, 0) & 1) != 0)
              {
                break;
              }
              sub_1000AE58C((uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
              v128 += v129;
              if (!--v127)
              {
                swift_bridgeObjectRelease(v124);
                v110 = v269;
                v65 = v270;
                goto LABEL_65;
              }
            }
            swift_bridgeObjectRelease(v124);
            v111 = v268;
            sub_1000C6CD0((uint64_t)v21, v268, type metadata accessor for MagicPairingSettingsRecord);
            v65 = v270;
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v270 + 56))(v111, 0, 1, v64);
            v110 = v269;
          }
          else
          {
LABEL_65:
            v111 = v268;
            (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v65 + 56))(v268, 1, 1, v64);
          }
          swift_bridgeObjectRelease(v124);
          v134 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v65 + 48))(v111, 1, v64);
          v108 = (uint64_t)v264;
          if (v134 != 1)
          {
            v135 = (uint64_t)v263;
            sub_1000C6CD0(v111, (uint64_t)v263, type metadata accessor for MagicPairingSettingsRecord);
            v137 = swift_unknownObjectWeakLoadStrong(v274, v136);
            if (v137)
            {
              v139 = (void *)v137;
              v140 = (void *)swift_unknownObjectWeakLoadStrong(v137 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v138);

              if (v140)
              {
                v141 = sub_1000A0980(&qword_100211998);
                v142 = swift_allocObject(v141, 40, 7);
                *(_OWORD *)(v142 + 16) = v261;
                v143 = sub_1000BEDB4();
                *(_QWORD *)(v142 + 32) = v143;
                v276[0] = v142;
                specialized Array._endMutation()(v143);
                v144 = v276[0];
                sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
                v145 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v144);
                objc_msgSend(v140, "magicPairingRecordsUpdatedWithRecords:", v145);
                swift_unknownObjectRelease(v140);

                v111 = v268;
              }
            }
            sub_1000AE58C(v135, type metadata accessor for MagicPairingSettingsRecord);
            v108 = (uint64_t)v264;
            v110 = v269;
            goto LABEL_44;
          }
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v65 + 56))(v111, 1, 1, v64);
          v110 = v269;
        }
        sub_1000A1000(v111, (uint64_t *)&unk_100212190);
      }
LABEL_44:
      if (++v109 == v108)
        return (_QWORD *)swift_bridgeObjectRelease_n(v262, 2);
    }
  }
  v85 = sub_1001133F4(a1, (uint64_t *)&unk_100212190, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE14, type metadata accessor for MagicPairingSettingsRecord);
  if (v85)
  {
    v86 = v85;
    v87 = v274;
    swift_beginAccess(v274, v279, 0, 0);
    v89 = swift_unknownObjectWeakLoadStrong(v87, v88);
    if (v89)
    {
      v91 = (void *)v89;
      v43 = (void *)swift_unknownObjectWeakLoadStrong(v89 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v90);

      if (v43)
      {
        v92 = _swiftEmptyArrayStorage;
        v280[0] = _swiftEmptyArrayStorage;
        v93 = v86[2];
        if (v93)
        {
          v94 = (uint64_t)v86
              + ((*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80));
          v95 = *(_QWORD *)(v259 + 72);
          swift_bridgeObjectRetain(v86);
          v96 = (uint64_t)v260;
          do
          {
            sub_1000AE548(v94, v96, type metadata accessor for DeviceSupportInformationRecord);
            v97 = sub_1000BB014();
            v98 = sub_1000AE58C(v96, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v98);
            v100 = *(_QWORD *)((v280[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v99 = *(_QWORD *)((v280[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v100 >= v99 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v99 > 1, v100 + 1, 1);
            v101 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v100, v97);
            specialized Array._endMutation()(v101);
            v94 += v95;
            --v93;
          }
          while (v93);
          swift_bridgeObjectRelease(v86);
          v92 = (_QWORD *)v280[0];
        }
        swift_bridgeObjectRelease(v86);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v84.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v92);
        objc_msgSend(v43, "deviceSupportInformationRecordsUpdatedWithRecords:", v84.super.isa);
        goto LABEL_29;
      }
    }
    v56 = v86;
    return (_QWORD *)swift_bridgeObjectRelease(v56);
  }
  v146 = sub_1001133F4(a1, (uint64_t *)&unk_100212190, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE88, type metadata accessor for MagicPairingSettingsRecord);
  if (v146)
  {
    v147 = v146;
    if (v146[2])
    {
      v148 = v261;
      v149 = (uint64_t)v264;
      sub_1000AE548((uint64_t)v146 + ((*(unsigned __int8 *)(v261 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v261 + 80)), (uint64_t)v264, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v150 = 0;
      v151 = v271;
      v152 = v262;
    }
    else
    {
      v150 = 1;
      v151 = v271;
      v149 = (uint64_t)v264;
      v152 = v262;
      v148 = v261;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 56))(v149, v150, 1, v152);
    swift_bridgeObjectRelease(v147);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v149, 1, v152) == 1)
    {
      sub_1000A1000(v149, &qword_100210CD8);
      goto LABEL_83;
    }
    sub_1000C6CD0(v149, v269, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v164 = v274;
    swift_beginAccess(v274, v279, 0, 0);
    v166 = swift_unknownObjectWeakLoadStrong(v164, v165);
    if (!v166
      || (v168 = (void *)v166,
          v169 = (void *)swift_unknownObjectWeakLoadStrong(v166 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v167), v168, !v169))
    {
LABEL_140:
      v231 = v274;
      swift_beginAccess(v274, v276, 0, 0);
      v233 = swift_unknownObjectWeakLoadStrong(v231, v232);
      if (!v233)
        return (_QWORD *)sub_1000AE58C(v269, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v235 = (void *)v233;
      v236 = (void *)swift_unknownObjectWeakLoadStrong(v233 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v234);

      if (!v236)
        return (_QWORD *)sub_1000AE58C(v269, type metadata accessor for LegacyMagicPairingSettingsRecords);
      sub_1000E2648();
      v238 = v237;
      v278 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v237 >> 62)
      {
        if (v237 < 0)
          v257 = v237;
        else
          v257 = v237 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v237);
        result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v257);
        v239 = (uint64_t)result;
        if (result)
        {
LABEL_144:
          v275 = (uint64_t)v236;
          if (v239 >= 1)
          {
            for (i = 0; i != v239; ++i)
            {
              if ((v238 & 0xC000000000000001) != 0)
                v241 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v238);
              else
                v241 = *(id *)(v238 + 8 * i + 32);
              v242 = v241;
              v243 = objc_msgSend(v241, "bluetoothAddress");
              static String._unconditionallyBridgeFromObjectiveC(_:)(v243);
              v245 = v244;

              v246 = objc_allocWithZone((Class)BTCloudDevice);
              v247 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v245);
              v248 = objc_msgSend(v246, "initWithBluetoothAddress:", v247);

              v249 = objc_msgSend(v242, "name");
              objc_msgSend(v248, "setNickname:", v249);

              v250 = objc_msgSend(v242, "productID");
              objc_msgSend(v248, "setProductID:", v250);

              v251 = objc_msgSend(v242, "vendorID");
              objc_msgSend(v248, "setVendorID:", v251);

              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v252);
              v254 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v253 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v254 >= v253 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v253 > 1, v254 + 1, 1);
              v255 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v254, v248);
              specialized Array._endMutation()(v255);
            }
            swift_bridgeObjectRelease(v238);
            v256 = (_QWORD *)v278;
            v236 = (void *)v275;
            goto LABEL_158;
          }
LABEL_161:
          __break(1u);
          return result;
        }
      }
      else
      {
        v239 = *(_QWORD *)((v237 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = (_QWORD *)swift_bridgeObjectRetain(v237);
        if (v239)
          goto LABEL_144;
      }
      swift_bridgeObjectRelease(v238);
      v256 = _swiftEmptyArrayStorage;
LABEL_158:
      swift_bridgeObjectRelease(v238);
      sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
      v258 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v256);
      objc_msgSend(v236, "devicesUpdatedWithRecords:", v258);
      swift_unknownObjectRelease(v236);

      return (_QWORD *)sub_1000AE58C(v269, type metadata accessor for LegacyMagicPairingSettingsRecords);
    }
    sub_1000E2648();
    v171 = v170;
    v172 = v274;
    swift_beginAccess(v274, v280, 0, 0);
    v174 = (void *)swift_unknownObjectWeakLoadStrong(v172, v173);
    swift_unknownObjectWeakInit(v276, v174);

    v278 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v171 >> 62)
    {
      if (v171 < 0)
        v229 = v171;
      else
        v229 = v171 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v171);
      result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v229);
      v175 = (uint64_t)result;
      if (result)
        goto LABEL_92;
    }
    else
    {
      v175 = *(_QWORD *)((v171 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (_QWORD *)swift_bridgeObjectRetain(v171);
      if (v175)
      {
LABEL_92:
        v262 = (uint64_t)v169;
        if (v175 < 1)
        {
          __break(1u);
          goto LABEL_161;
        }
        v272 = v171 & 0xC000000000000001;
        swift_beginAccess(v276, v277, 0, 0);
        v176 = 0;
        v270 = v171;
        v268 = v175;
        do
        {
          if (v272)
            v177 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v176, v171);
          else
            v177 = (char *)*(id *)(v171 + 8 * v176 + 32);
          v179 = v177;
          v180 = swift_unknownObjectWeakLoadStrong(v276, v178);
          if (v180)
          {
            v181 = (void *)v180;
            v182 = sub_1000B4AC8();
            v183 = (void *)objc_opt_self(BTSystemConfiguration);
            v184 = objc_msgSend(v183, "isFirstUnlocked");
            v273 = (unint64_t)v181;
            if ((v184 & 1) != 0)
            {
              v185 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v186 = v267;
              v187 = sub_1000A0A00(v267, (uint64_t)qword_100218C68);
              v188 = v266;
              v189 = (uint64_t)v265;
              (*(void (**)(char *, uint64_t, uint64_t))(v266 + 16))(v265, v187, v186);
              v190 = sub_100128330(v189, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v185);
              (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v189, v186);
              v191 = v190[2];
              v192 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              v193 = *(_QWORD *)(v192 - 8);
              v151 = v271;
              if (v191)
              {
                sub_1000AE548((uint64_t)v190+ ((*(unsigned __int8 *)(v193 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80)), v271, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v193 + 56))(v151, 0, 1, v192);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v193 + 56))(v271, 1, 1, v192);
              }
              swift_release(v182);
              swift_bridgeObjectRelease(v190);
              v181 = (void *)v273;
            }
            else
            {
              v194 = static os_log_type_t.error.getter(v184);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v194, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              v192 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v192 - 8) + 56))(v151, 1, 1, v192);
              swift_release(v182);
            }
            type metadata accessor for LegacyAccountMagicKeysRecord(0);
            v195 = *(_QWORD *)(v192 - 8);
            v196 = *(uint64_t **)(v195 + 48);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v196)(v151, 1, v192) == 1)
            {
              sub_1000A1000(v151, (uint64_t *)&unk_1002122E0);
              v197 = 0;
            }
            else
            {
              v198 = Data.subdata(in:)(1, 17, *(_QWORD *)(v151 + *(int *)(v192 + 20)), *(_QWORD *)(v151 + *(int *)(v192 + 20) + 8));
              v264 = (char *)v192;
              v199 = v176;
              v200 = v179;
              v201 = v195;
              v202 = v183;
              v203 = v196;
              v205 = v204;
              sub_1000AE58C(v151, type metadata accessor for LegacyAccountMagicKeysRecord);
              v197 = Data._bridgeToObjectiveC()().super.isa;
              v206 = v205;
              v196 = v203;
              v183 = v202;
              v195 = v201;
              v179 = v200;
              v176 = v199;
              v192 = (uint64_t)v264;
              sub_1000A103C(v198, v206);
            }
            objc_msgSend(v179, "setMasterKey:", v197);

            v207 = sub_1000B4AC8();
            v208 = objc_msgSend(v183, "isFirstUnlocked");
            if ((v208 & 1) != 0)
            {
              v263 = v196;
              v264 = v179;
              v209 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v210 = v267;
              v211 = sub_1000A0A00(v267, (uint64_t)qword_100218C68);
              v212 = v266;
              v213 = (uint64_t)v265;
              (*(void (**)(char *, uint64_t, uint64_t))(v266 + 16))(v265, v211, v210);
              v214 = sub_100128330(v213, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v209);
              (*(void (**)(uint64_t, uint64_t))(v212 + 8))(v213, v210);
              if (v214[2])
              {
                v215 = v275;
                sub_1000AE548((uint64_t)v214+ ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80)), v275, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v195 + 56))(v215, 0, 1, v192);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v195 + 56))(v275, 1, 1, v192);
              }
              swift_release(v207);
              swift_bridgeObjectRelease(v214);
              v151 = v271;
              v179 = v264;
              v181 = (void *)v273;
              v196 = v263;
            }
            else
            {
              v216 = static os_log_type_t.error.getter(v208);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v216, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v195 + 56))(v275, 1, 1, v192);
              swift_release(v207);
            }
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v196)(v275, 1, v192) == 1)
            {
              sub_1000A1000(v275, (uint64_t *)&unk_1002122E0);
              v217 = 0;
            }
            else
            {
              v218 = v275;
              v219 = Data.subdata(in:)(17, 33, *(_QWORD *)(v275 + *(int *)(v192 + 20)), *(_QWORD *)(v275 + *(int *)(v192 + 20) + 8));
              v221 = v220;
              sub_1000AE58C(v218, type metadata accessor for LegacyAccountMagicKeysRecord);
              v217 = Data._bridgeToObjectiveC()().super.isa;
              sub_1000A103C(v219, v221);
            }
            v171 = v270;
            v175 = v268;
            objc_msgSend(v179, "setMasterHint:", v217);

          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v180);
          v223 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v222 = *(_QWORD *)((v278 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v223 >= v222 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v222 > 1, v223 + 1, 1);
          ++v176;
          v224 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v223, v179);
          specialized Array._endMutation()(v224);
        }
        while (v175 != v176);
        swift_bridgeObjectRelease(v171);
        v228 = (_QWORD *)v278;
        v169 = (void *)v262;
        goto LABEL_139;
      }
    }
    swift_bridgeObjectRelease(v171);
    v228 = _swiftEmptyArrayStorage;
LABEL_139:
    swift_bridgeObjectRelease(v171);
    swift_unknownObjectWeakDestroy(v276);
    sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
    v230 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v228);
    objc_msgSend(v169, "magicPairingRecordsUpdatedWithRecords:", v230);

    swift_unknownObjectRelease(v169);
    goto LABEL_140;
  }
LABEL_83:
  v153 = sub_100113524(a1, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord);
  if (v153)
  {
    v154 = v153;
    v155 = v274;
    swift_beginAccess(v274, v280, 0, 0);
    v157 = swift_unknownObjectWeakLoadStrong(v155, v156);
    if (v157)
    {
      v158 = (char *)v157;
      v279[3] = &type metadata for AudioAccessoryFeatures;
      v279[4] = sub_1000A42C4();
      v159 = isFeatureEnabled(_:)(v279);
      sub_1000A2140(v279);
      if ((v159 & 1) != 0)
      {
        v161 = swift_unknownObjectWeakLoadStrong(&v158[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v160);
        if (v161)
        {
          v162 = (void *)v161;
          type metadata accessor for AADeviceRecord(0);
          v163 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v162, "aaDeviceRecordsUpdatedWithRecords:", v163);

          swift_bridgeObjectRelease(v154);
          return (_QWORD *)swift_unknownObjectRelease(v162);
        }
      }

    }
    goto LABEL_133;
  }
  result = sub_100113524(a1, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord);
  if (result)
  {
    v154 = result;
    v225 = v274;
    swift_beginAccess(v274, v279, 0, 0);
    v227 = (void *)swift_unknownObjectWeakLoadStrong(v225, v226);
    if (v227)
    {

      v56 = v154;
      return (_QWORD *)swift_bridgeObjectRelease(v56);
    }
LABEL_133:
    v56 = v154;
    return (_QWORD *)swift_bridgeObjectRelease(v56);
  }
  return result;
}

_QWORD *sub_10011540C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t Strong;
  uint64_t v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *result;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  NSString v75;
  id v76;
  NSString v77;
  NSString v78;
  NSString v79;
  NSString v80;
  NSString v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  NSArray v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  Class isa;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  Class v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  Class v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  void *v185;
  id v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  Class v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  void *v204;
  uint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  Class v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  void *v229;
  _QWORD *v230;
  uint64_t v231;
  Class v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t i;
  id v243;
  void *v244;
  id v245;
  uint64_t v246;
  uint64_t v247;
  id v248;
  NSString v249;
  id v250;
  id v251;
  id v252;
  id v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  Class v260;
  uint64_t v261;
  uint64_t v262;
  __int128 v263;
  _QWORD *v264;
  char *v265;
  uint64_t *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  _QWORD v279[3];
  _BYTE v280[24];
  unint64_t v281;
  _QWORD v282[5];
  unint64_t v283;

  v4 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v4);
  v278 = (uint64_t)&v261 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v274 = (uint64_t)&v261 - v7;
  v8 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v8);
  v267 = (char *)&v261 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  v264 = *(_QWORD **)(v10 - 8);
  __chkstk_darwin(v10);
  v272 = (uint64_t)&v261 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DeviceSupportInformationRecord(0);
  v262 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  *(_QWORD *)&v263 = (char *)&v261 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = type metadata accessor for URL(0);
  v269 = *(_QWORD *)(v270 - 8);
  __chkstk_darwin(v270);
  v268 = (char *)&v261 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v15);
  v271 = (uint64_t)&v261 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DeviceRecord(0);
  v276 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v261 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v275 = type metadata accessor for MagicPairingSettingsRecord(0);
  v273 = *(_QWORD *)(v275 - 8);
  __chkstk_darwin(v275);
  v265 = (char *)&v261 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v266 = (uint64_t *)((char *)&v261 - v22);
  __chkstk_darwin(v23);
  v25 = (char *)&v261 - v24;
  v277 = (_QWORD *)(a2 + 16);
  v27 = static os_log_type_t.default.getter(v26);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v28 = qword_100218DE0;
  v29 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v30 = swift_allocObject(v29, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100184870;
  v31 = swift_bridgeObjectRetain(a1);
  v32 = Array.description.getter(v31, v10);
  v34 = v33;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  *(_QWORD *)(v30 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v30 + 32) = v32;
  *(_QWORD *)(v30 + 40) = v34;
  v35 = a1;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "records Updated: %@", 19, 2, v30);
  swift_bridgeObjectRelease(v30);
  v36 = sub_1001133F4(a1, &qword_100210CD8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EDE8, type metadata accessor for LegacyMagicPairingSettingsRecords);
  if (v36)
  {
    v37 = v36;
    v38 = v277;
    swift_beginAccess(v277, v282, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v38, v39);
    if (Strong)
    {
      v42 = (void *)Strong;
      v43 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v41);

      if (v43)
      {
        v44 = _swiftEmptyArrayStorage;
        v283 = (unint64_t)_swiftEmptyArrayStorage;
        v45 = v37[2];
        if (v45)
        {
          v277 = v37;
          v278 = (uint64_t)v43;
          v46 = (uint64_t)v37
              + ((*(unsigned __int8 *)(v273 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80));
          v47 = *(_QWORD *)(v273 + 72);
          swift_bridgeObjectRetain(v37);
          v48 = v275;
          do
          {
            sub_1000AE548(v46, (uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            v49 = &v25[*(int *)(v48 + 24)];
            v50 = *((_QWORD *)v49 + 1);
            if (*(_QWORD *)v49 == 0xD000000000000011 && v50 == 0x80000001001AB220
              || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v49, v50, 0xD000000000000011, 0x80000001001AB220, 0) & 1) != 0)
            {
              sub_1000AE58C((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            }
            else
            {
              v51 = sub_1000BEDB4();
              v52 = sub_1000AE58C((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
              v54 = *(_QWORD *)((v283 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v53 = *(_QWORD *)((v283 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v54 >= v53 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
              v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
              specialized Array._endMutation()(v55);
              v48 = v275;
            }
            v46 += v47;
            --v45;
          }
          while (v45);
          v37 = v277;
          swift_bridgeObjectRelease(v277);
          v44 = (_QWORD *)v283;
          v43 = (void *)v278;
        }
        swift_bridgeObjectRelease(v37);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        v86.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v44);
        objc_msgSend(v43, "magicPairingRecordsUpdatedWithRecords:", v86.super.isa);
LABEL_29:

        return (_QWORD *)swift_unknownObjectRelease(v43);
      }
    }
    v56 = v37;
    return (_QWORD *)swift_bridgeObjectRelease(v56);
  }
  v58 = v10;
  v59 = sub_1001133F4(a1, &qword_100210CD8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE40, type metadata accessor for LegacyMagicPairingSettingsRecords);
  if (v59)
  {
    v60 = v59;
    v61 = v277;
    swift_beginAccess(v277, v282, 0, 0);
    v63 = swift_unknownObjectWeakLoadStrong(v61, v62);
    v65 = v275;
    v66 = v273;
    v67 = (uint64_t)v265;
    if (v63)
    {
      v68 = (void *)v63;
      v69 = (void *)swift_unknownObjectWeakLoadStrong(v63 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v64);

      if (v69)
      {
        v70 = _swiftEmptyArrayStorage;
        v283 = (unint64_t)_swiftEmptyArrayStorage;
        v71 = v60[2];
        if (v71)
        {
          v274 = (uint64_t)v69;
          v72 = (uint64_t)v60
              + ((*(unsigned __int8 *)(v276 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80));
          v278 = *(_QWORD *)(v276 + 72);
          v264 = v60;
          swift_bridgeObjectRetain(v60);
          do
          {
            sub_1000AE548(v72, (uint64_t)v19, type metadata accessor for DeviceRecord);
            v73 = *(_QWORD *)&v19[*(int *)(v17 + 24) + 8];
            v74 = objc_allocWithZone((Class)BTCloudDevice);
            swift_bridgeObjectRetain(v73);
            v75 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v73);
            v76 = objc_msgSend(v74, "initWithBluetoothAddress:", v75);

            v77 = String._bridgeToObjectiveC()();
            objc_msgSend(v76, "setNickname:", v77);

            v78 = String._bridgeToObjectiveC()();
            objc_msgSend(v76, "setModelNumber:", v78);

            v79 = String._bridgeToObjectiveC()();
            objc_msgSend(v76, "setManufacturer:", v79);

            v80 = String._bridgeToObjectiveC()();
            objc_msgSend(v76, "setProductID:", v80);

            v81 = String._bridgeToObjectiveC()();
            objc_msgSend(v76, "setVendorID:", v81);

            v82 = sub_1000AE58C((uint64_t)v19, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v82);
            v84 = *(_QWORD *)((v283 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v83 = *(_QWORD *)((v283 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v84 >= v83 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
            v85 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v84, v76);
            specialized Array._endMutation()(v85);
            v72 += v278;
            --v71;
          }
          while (v71);
          v60 = v264;
          swift_bridgeObjectRelease(v264);
          v70 = (_QWORD *)v283;
          v69 = (void *)v274;
          v65 = v275;
          v66 = v273;
        }
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v70);
        objc_msgSend(v69, "devicesUpdatedWithRecords:", isa);

        swift_unknownObjectRelease(v69);
      }
    }
    v105 = v60[2];
    if (!v105)
    {
      v56 = v60;
      return (_QWORD *)swift_bridgeObjectRelease(v56);
    }
    v106 = v276;
    v107 = (uint64_t)v60
         + ((*(unsigned __int8 *)(v276 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80));
    v264 = v60;
    swift_bridgeObjectRetain(v60);
    v267 = (char *)v105;
    v108 = v277;
    swift_beginAccess(v277, &v283, 0, 0);
    v109 = v108;
    v110 = (uint64_t)v267;
    swift_beginAccess(v109, v280, 0, 0);
    v111 = 0;
    v278 = *(_QWORD *)(v106 + 72);
    v112 = v107;
    v274 = (uint64_t)"Invalid AAProxCardsRecord - %@";
    v276 = 0x80000001001AB220;
    v263 = xmmword_100187640;
    v113 = v271;
    v272 = v112;
    while (1)
    {
      v114 = (_QWORD *)(v112 + v278 * v111 + *(int *)(v17 + 24));
      v115 = v114[1];
      if ((*v114 != 0xD000000000000011 || v115 != v276)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*v114, v115, 0xD000000000000011, v274 | 0x8000000000000000, 0) & 1) == 0)
      {
        v117 = swift_unknownObjectWeakLoadStrong(v277, v116);
        if (v117)
        {
          v118 = (void *)v117;
          v119 = sub_1000B4AC8();

          v120 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
          if ((v120 & 1) != 0)
          {
            v121 = sub_100129690();
            if (qword_100210160 != -1)
              swift_once(&qword_100210160, sub_1000C81B8);
            v122 = v270;
            v123 = sub_1000A0A00(v270, (uint64_t)qword_100218C90);
            v124 = v269;
            v125 = (uint64_t)v268;
            (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v268, v123, v122);
            v126 = sub_100128330(v125, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
            swift_release(v121);
            (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v125, v122);
            v65 = v275;
            v66 = v273;
          }
          else
          {
            v127 = static os_log_type_t.error.getter(v120);
            if (qword_1002101E0 != -1)
              swift_once(&qword_1002101E0, sub_1001687B0);
            v128 = v127;
            v126 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)(v128, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
          }
          v112 = v272;
          swift_release(v119);
          v129 = v126[2];
          if (v129)
          {
            v130 = (uint64_t)v126
                 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
            swift_bridgeObjectRetain(v126);
            v131 = *(_QWORD *)(v66 + 72);
            while (1)
            {
              sub_1000AE548(v130, v67, type metadata accessor for MagicPairingSettingsRecord);
              v132 = (_QWORD *)(v67 + *(int *)(v65 + 24));
              v133 = v132[1];
              v134 = v114[1];
              v135 = *v132 == *v114 && v133 == v134;
              if (v135 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v132, v133, *v114, v134, 0) & 1) != 0)
                break;
              sub_1000AE58C(v67, type metadata accessor for MagicPairingSettingsRecord);
              v130 += v131;
              if (!--v129)
              {
                swift_bridgeObjectRelease(v126);
                v112 = v272;
                v66 = v273;
                goto LABEL_65;
              }
            }
            swift_bridgeObjectRelease(v126);
            v113 = v271;
            sub_1000C6CD0(v67, v271, type metadata accessor for MagicPairingSettingsRecord);
            v66 = v273;
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v273 + 56))(v113, 0, 1, v65);
            v112 = v272;
          }
          else
          {
LABEL_65:
            v113 = v271;
            (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v66 + 56))(v271, 1, 1, v65);
          }
          swift_bridgeObjectRelease(v126);
          v136 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v66 + 48))(v113, 1, v65);
          v110 = (uint64_t)v267;
          if (v136 != 1)
          {
            v137 = (uint64_t)v266;
            sub_1000C6CD0(v113, (uint64_t)v266, type metadata accessor for MagicPairingSettingsRecord);
            v139 = swift_unknownObjectWeakLoadStrong(v277, v138);
            if (v139)
            {
              v141 = (void *)v139;
              v142 = (void *)swift_unknownObjectWeakLoadStrong(v139 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v140);

              if (v142)
              {
                v143 = sub_1000A0980(&qword_100211998);
                v144 = swift_allocObject(v143, 40, 7);
                *(_OWORD *)(v144 + 16) = v263;
                v145 = sub_1000BEDB4();
                *(_QWORD *)(v144 + 32) = v145;
                v279[0] = v144;
                specialized Array._endMutation()(v145);
                v146 = v279[0];
                sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
                v147 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v146);
                objc_msgSend(v142, "magicPairingRecordsUpdatedWithRecords:", v147);
                swift_unknownObjectRelease(v142);

                v113 = v271;
              }
            }
            sub_1000AE58C(v137, type metadata accessor for MagicPairingSettingsRecord);
            v110 = (uint64_t)v267;
            v112 = v272;
            goto LABEL_44;
          }
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v66 + 56))(v113, 1, 1, v65);
          v112 = v272;
        }
        sub_1000A1000(v113, (uint64_t *)&unk_100212190);
      }
LABEL_44:
      if (++v111 == v110)
        return (_QWORD *)swift_bridgeObjectRelease_n(v264, 2);
    }
  }
  v87 = sub_1001133F4(a1, &qword_100210CD8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE14, type metadata accessor for LegacyMagicPairingSettingsRecords);
  if (v87)
  {
    v88 = v87;
    v89 = v277;
    swift_beginAccess(v277, v282, 0, 0);
    v91 = swift_unknownObjectWeakLoadStrong(v89, v90);
    if (v91)
    {
      v93 = (void *)v91;
      v43 = (void *)swift_unknownObjectWeakLoadStrong(v91 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v92);

      if (v43)
      {
        v94 = _swiftEmptyArrayStorage;
        v283 = (unint64_t)_swiftEmptyArrayStorage;
        v95 = v88[2];
        if (v95)
        {
          v96 = (uint64_t)v88
              + ((*(unsigned __int8 *)(v262 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80));
          v97 = *(_QWORD *)(v262 + 72);
          swift_bridgeObjectRetain(v88);
          v98 = v263;
          do
          {
            sub_1000AE548(v96, v98, type metadata accessor for DeviceSupportInformationRecord);
            v99 = sub_1000BB014();
            v100 = sub_1000AE58C(v98, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v100);
            v102 = *(_QWORD *)((v283 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v101 = *(_QWORD *)((v283 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v102 >= v101 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1, v102 + 1, 1);
            v103 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v102, v99);
            specialized Array._endMutation()(v103);
            v96 += v97;
            --v95;
          }
          while (v95);
          swift_bridgeObjectRelease(v88);
          v94 = (_QWORD *)v283;
        }
        swift_bridgeObjectRelease(v88);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v86.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v94);
        objc_msgSend(v43, "deviceSupportInformationRecordsUpdatedWithRecords:", v86.super.isa);
        goto LABEL_29;
      }
    }
    v56 = v88;
    return (_QWORD *)swift_bridgeObjectRelease(v56);
  }
  v148 = sub_100113638(a1, type metadata accessor for LegacyMagicPairingSettingsRecords, (void (*)(BOOL, unint64_t, uint64_t))sub_10014EE88);
  if (v148)
  {
    v149 = v148;
    if (v148[2])
    {
      v150 = v264;
      v151 = (uint64_t)v267;
      sub_1000AE548((uint64_t)v148 + ((*((unsigned __int8 *)v264 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v264 + 80)), (uint64_t)v267, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v152 = 0;
      v153 = v274;
      v154 = v58;
    }
    else
    {
      v152 = 1;
      v153 = v274;
      v151 = (uint64_t)v267;
      v154 = v58;
      v150 = v264;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v150[7])(v151, v152, 1, v154);
    swift_bridgeObjectRelease(v149);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v150[6])(v151, 1, v154) == 1)
    {
      sub_1000A1000(v151, &qword_100210CD8);
      goto LABEL_83;
    }
    sub_1000C6CD0(v151, v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v166 = v277;
    swift_beginAccess(v277, v282, 0, 0);
    v168 = swift_unknownObjectWeakLoadStrong(v166, v167);
    if (!v168
      || (v170 = (void *)v168,
          v171 = (char *)swift_unknownObjectWeakLoadStrong(v168 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v169), v170, !v171))
    {
LABEL_140:
      v233 = v277;
      swift_beginAccess(v277, v279, 0, 0);
      v235 = swift_unknownObjectWeakLoadStrong(v233, v234);
      if (!v235)
        return (_QWORD *)sub_1000AE58C(v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v237 = (void *)v235;
      v238 = (void *)swift_unknownObjectWeakLoadStrong(v235 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v236);

      if (!v238)
        return (_QWORD *)sub_1000AE58C(v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
      sub_1000E2648();
      v240 = v239;
      v281 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v239 >> 62)
      {
        if (v239 < 0)
          v259 = v239;
        else
          v259 = v239 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v239);
        result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v259);
        v241 = (uint64_t)result;
        if (result)
        {
LABEL_144:
          v278 = (uint64_t)v238;
          if (v241 >= 1)
          {
            for (i = 0; i != v241; ++i)
            {
              if ((v240 & 0xC000000000000001) != 0)
                v243 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v240);
              else
                v243 = *(id *)(v240 + 8 * i + 32);
              v244 = v243;
              v245 = objc_msgSend(v243, "bluetoothAddress");
              static String._unconditionallyBridgeFromObjectiveC(_:)(v245);
              v247 = v246;

              v248 = objc_allocWithZone((Class)BTCloudDevice);
              v249 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v247);
              v250 = objc_msgSend(v248, "initWithBluetoothAddress:", v249);

              v251 = objc_msgSend(v244, "name");
              objc_msgSend(v250, "setNickname:", v251);

              v252 = objc_msgSend(v244, "productID");
              objc_msgSend(v250, "setProductID:", v252);

              v253 = objc_msgSend(v244, "vendorID");
              objc_msgSend(v250, "setVendorID:", v253);

              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v254);
              v256 = *(_QWORD *)((v281 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v255 = *(_QWORD *)((v281 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v256 >= v255 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v255 > 1, v256 + 1, 1);
              v257 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v256, v250);
              specialized Array._endMutation()(v257);
            }
            swift_bridgeObjectRelease(v240);
            v258 = (_QWORD *)v281;
            v238 = (void *)v278;
            goto LABEL_158;
          }
LABEL_161:
          __break(1u);
          return result;
        }
      }
      else
      {
        v241 = *(_QWORD *)((v239 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = (_QWORD *)swift_bridgeObjectRetain(v239);
        if (v241)
          goto LABEL_144;
      }
      swift_bridgeObjectRelease(v240);
      v258 = _swiftEmptyArrayStorage;
LABEL_158:
      swift_bridgeObjectRelease(v240);
      sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
      v260 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v258);
      objc_msgSend(v238, "devicesUpdatedWithRecords:", v260);
      swift_unknownObjectRelease(v238);

      return (_QWORD *)sub_1000AE58C(v272, type metadata accessor for LegacyMagicPairingSettingsRecords);
    }
    sub_1000E2648();
    v173 = v172;
    v174 = v277;
    swift_beginAccess(v277, &v283, 0, 0);
    v176 = (void *)swift_unknownObjectWeakLoadStrong(v174, v175);
    swift_unknownObjectWeakInit(v279, v176);

    v281 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v173 >> 62)
    {
      if (v173 < 0)
        v231 = v173;
      else
        v231 = v173 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v173);
      result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v231);
      v177 = (uint64_t)result;
      if (result)
        goto LABEL_92;
    }
    else
    {
      v177 = *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (_QWORD *)swift_bridgeObjectRetain(v173);
      if (v177)
      {
LABEL_92:
        v265 = v171;
        if (v177 < 1)
        {
          __break(1u);
          goto LABEL_161;
        }
        v275 = v173 & 0xC000000000000001;
        swift_beginAccess(v279, v280, 0, 0);
        v178 = 0;
        v273 = v173;
        v271 = v177;
        do
        {
          if (v275)
            v179 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v178, v173);
          else
            v179 = (char *)*(id *)(v173 + 8 * v178 + 32);
          v181 = v179;
          v182 = swift_unknownObjectWeakLoadStrong(v279, v180);
          if (v182)
          {
            v183 = (void *)v182;
            v184 = sub_1000B4AC8();
            v185 = (void *)objc_opt_self(BTSystemConfiguration);
            v186 = objc_msgSend(v185, "isFirstUnlocked");
            v276 = (unint64_t)v183;
            if ((v186 & 1) != 0)
            {
              v187 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v188 = v270;
              v189 = sub_1000A0A00(v270, (uint64_t)qword_100218C68);
              v190 = v269;
              v191 = (uint64_t)v268;
              (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v268, v189, v188);
              v192 = sub_100128330(v191, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v187);
              (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v191, v188);
              v193 = v192[2];
              v194 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              v195 = *(_QWORD *)(v194 - 8);
              v153 = v274;
              if (v193)
              {
                sub_1000AE548((uint64_t)v192+ ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80)), v274, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v195 + 56))(v153, 0, 1, v194);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v195 + 56))(v274, 1, 1, v194);
              }
              swift_release(v184);
              swift_bridgeObjectRelease(v192);
              v183 = (void *)v276;
            }
            else
            {
              v196 = static os_log_type_t.error.getter(v186);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v196, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              v194 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 56))(v153, 1, 1, v194);
              swift_release(v184);
            }
            type metadata accessor for LegacyAccountMagicKeysRecord(0);
            v197 = *(_QWORD *)(v194 - 8);
            v198 = *(uint64_t **)(v197 + 48);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v198)(v153, 1, v194) == 1)
            {
              sub_1000A1000(v153, (uint64_t *)&unk_1002122E0);
              v199 = 0;
            }
            else
            {
              v200 = Data.subdata(in:)(1, 17, *(_QWORD *)(v153 + *(int *)(v194 + 20)), *(_QWORD *)(v153 + *(int *)(v194 + 20) + 8));
              v267 = (char *)v194;
              v201 = v178;
              v202 = v181;
              v203 = v197;
              v204 = v185;
              v205 = v198;
              v207 = v206;
              sub_1000AE58C(v153, type metadata accessor for LegacyAccountMagicKeysRecord);
              v199 = Data._bridgeToObjectiveC()().super.isa;
              v208 = v207;
              v198 = v205;
              v185 = v204;
              v197 = v203;
              v181 = v202;
              v178 = v201;
              v194 = (uint64_t)v267;
              sub_1000A103C(v200, v208);
            }
            objc_msgSend(v181, "setMasterKey:", v199);

            v209 = sub_1000B4AC8();
            v210 = objc_msgSend(v185, "isFirstUnlocked");
            if ((v210 & 1) != 0)
            {
              v266 = v198;
              v267 = v181;
              v211 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v212 = v270;
              v213 = sub_1000A0A00(v270, (uint64_t)qword_100218C68);
              v214 = v269;
              v215 = (uint64_t)v268;
              (*(void (**)(char *, uint64_t, uint64_t))(v269 + 16))(v268, v213, v212);
              v216 = sub_100128330(v215, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v211);
              (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v215, v212);
              if (v216[2])
              {
                v217 = v278;
                sub_1000AE548((uint64_t)v216+ ((*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80)), v278, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v197 + 56))(v217, 0, 1, v194);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v197 + 56))(v278, 1, 1, v194);
              }
              swift_release(v209);
              swift_bridgeObjectRelease(v216);
              v153 = v274;
              v181 = v267;
              v183 = (void *)v276;
              v198 = v266;
            }
            else
            {
              v218 = static os_log_type_t.error.getter(v210);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v218, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v197 + 56))(v278, 1, 1, v194);
              swift_release(v209);
            }
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v198)(v278, 1, v194) == 1)
            {
              sub_1000A1000(v278, (uint64_t *)&unk_1002122E0);
              v219 = 0;
            }
            else
            {
              v220 = v278;
              v221 = Data.subdata(in:)(17, 33, *(_QWORD *)(v278 + *(int *)(v194 + 20)), *(_QWORD *)(v278 + *(int *)(v194 + 20) + 8));
              v223 = v222;
              sub_1000AE58C(v220, type metadata accessor for LegacyAccountMagicKeysRecord);
              v219 = Data._bridgeToObjectiveC()().super.isa;
              sub_1000A103C(v221, v223);
            }
            v173 = v273;
            v177 = v271;
            objc_msgSend(v181, "setMasterHint:", v219);

          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v182);
          v225 = *(_QWORD *)((v281 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v224 = *(_QWORD *)((v281 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v225 >= v224 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v224 > 1, v225 + 1, 1);
          ++v178;
          v226 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v225, v181);
          specialized Array._endMutation()(v226);
        }
        while (v177 != v178);
        swift_bridgeObjectRelease(v173);
        v230 = (_QWORD *)v281;
        v171 = v265;
        goto LABEL_139;
      }
    }
    swift_bridgeObjectRelease(v173);
    v230 = _swiftEmptyArrayStorage;
LABEL_139:
    swift_bridgeObjectRelease(v173);
    swift_unknownObjectWeakDestroy(v279);
    sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
    v232 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v230);
    objc_msgSend(v171, "magicPairingRecordsUpdatedWithRecords:", v232);

    swift_unknownObjectRelease(v171);
    goto LABEL_140;
  }
LABEL_83:
  v155 = sub_100113524(v35, &qword_100210CD8, type metadata accessor for LegacyMagicPairingSettingsRecords);
  if (v155)
  {
    v156 = v155;
    v157 = v277;
    swift_beginAccess(v277, &v283, 0, 0);
    v159 = swift_unknownObjectWeakLoadStrong(v157, v158);
    if (v159)
    {
      v160 = (char *)v159;
      v282[3] = &type metadata for AudioAccessoryFeatures;
      v282[4] = sub_1000A42C4();
      v161 = isFeatureEnabled(_:)(v282);
      sub_1000A2140(v282);
      if ((v161 & 1) != 0)
      {
        v163 = swift_unknownObjectWeakLoadStrong(&v160[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v162);
        if (v163)
        {
          v164 = (void *)v163;
          type metadata accessor for AADeviceRecord(0);
          v165 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v164, "aaDeviceRecordsUpdatedWithRecords:", v165);

          swift_bridgeObjectRelease(v156);
          return (_QWORD *)swift_unknownObjectRelease(v164);
        }
      }

    }
    goto LABEL_133;
  }
  result = sub_100113524(v35, &qword_100210CD8, type metadata accessor for LegacyMagicPairingSettingsRecords);
  if (result)
  {
    v156 = result;
    v227 = v277;
    swift_beginAccess(v277, v282, 0, 0);
    v229 = (void *)swift_unknownObjectWeakLoadStrong(v227, v228);
    if (v229)
    {

      v56 = v156;
      return (_QWORD *)swift_bridgeObjectRelease(v56);
    }
LABEL_133:
    v56 = v156;
    return (_QWORD *)swift_bridgeObjectRelease(v56);
  }
  return result;
}

_QWORD *sub_100116FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t Strong;
  uint64_t v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *result;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  NSString v72;
  id v73;
  NSString v74;
  NSString v75;
  NSString v76;
  NSString v77;
  NSString v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  NSArray v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  Class isa;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  Class v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  Class v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void *v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  Class v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  void *v201;
  uint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  Class v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  void *v226;
  _QWORD *v227;
  uint64_t v228;
  Class v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t i;
  id v240;
  void *v241;
  id v242;
  uint64_t v243;
  uint64_t v244;
  id v245;
  NSString v246;
  id v247;
  id v248;
  id v249;
  id v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  Class v257;
  uint64_t v258;
  char *v259;
  __int128 v260;
  uint64_t v261;
  uint64_t *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD v275[3];
  _BYTE v276[24];
  unint64_t v277;
  _QWORD v278[5];
  _QWORD v279[2];

  v4 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v4);
  v274 = (uint64_t)&v258 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v270 = (uint64_t)&v258 - v7;
  v8 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v8);
  v263 = (char *)&v258 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  *(_QWORD *)&v260 = *(_QWORD *)(v261 - 8);
  __chkstk_darwin(v261);
  v268 = (uint64_t)&v258 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DeviceSupportInformationRecord(0);
  v258 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v259 = (char *)&v258 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = type metadata accessor for URL(0);
  v265 = *(_QWORD *)(v266 - 8);
  __chkstk_darwin(v266);
  v264 = (char *)&v258 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v14);
  v267 = (uint64_t)&v258 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DeviceRecord(0);
  v272 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v258 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = type metadata accessor for MagicPairingSettingsRecord(0);
  v269 = *(_QWORD *)(v271 - 8);
  __chkstk_darwin(v271);
  v20 = (char *)&v258 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v262 = (uint64_t *)((char *)&v258 - v22);
  __chkstk_darwin(v23);
  v25 = (char *)&v258 - v24;
  v273 = (_QWORD *)(a2 + 16);
  v27 = static os_log_type_t.default.getter(v26);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v28 = qword_100218DE0;
  v29 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v30 = swift_allocObject(v29, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100184870;
  v31 = swift_bridgeObjectRetain(a1);
  v32 = Array.description.getter(v31, v11);
  v34 = v33;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  *(_QWORD *)(v30 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v30 + 32) = v32;
  *(_QWORD *)(v30 + 40) = v34;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "records Updated: %@", 19, 2, v30);
  swift_bridgeObjectRelease(v30);
  v35 = sub_1001133F4(a1, &qword_100210CE8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EDE8, type metadata accessor for DeviceSupportInformationRecord);
  if (v35)
  {
    v36 = v35;
    v37 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v37, v38);
    if (Strong)
    {
      v41 = (void *)Strong;
      v42 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v40);

      if (v42)
      {
        v43 = _swiftEmptyArrayStorage;
        v279[0] = _swiftEmptyArrayStorage;
        v44 = v36[2];
        if (v44)
        {
          v273 = v36;
          v274 = (uint64_t)v42;
          v45 = (uint64_t)v36
              + ((*(unsigned __int8 *)(v269 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v269 + 80));
          v46 = *(_QWORD *)(v269 + 72);
          swift_bridgeObjectRetain(v36);
          v47 = v271;
          do
          {
            sub_1000AE548(v45, (uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            v48 = &v25[*(int *)(v47 + 24)];
            v49 = *((_QWORD *)v48 + 1);
            if (*(_QWORD *)v48 == 0xD000000000000011 && v49 == 0x80000001001AB220
              || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v48, v49, 0xD000000000000011, 0x80000001001AB220, 0) & 1) != 0)
            {
              sub_1000AE58C((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            }
            else
            {
              v50 = sub_1000BEDB4();
              v51 = sub_1000AE58C((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
              v53 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v52 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v53 >= v52 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
              v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v50);
              specialized Array._endMutation()(v54);
              v47 = v271;
            }
            v45 += v46;
            --v44;
          }
          while (v44);
          v36 = v273;
          swift_bridgeObjectRelease(v273);
          v43 = (_QWORD *)v279[0];
          v42 = (void *)v274;
        }
        swift_bridgeObjectRelease(v36);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        objc_msgSend(v42, "magicPairingRecordsUpdatedWithRecords:", v83.super.isa);
LABEL_29:

        return (_QWORD *)swift_unknownObjectRelease(v42);
      }
    }
    v55 = v36;
    return (_QWORD *)swift_bridgeObjectRelease(v55);
  }
  v57 = sub_1001133F4(a1, &qword_100210CE8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE40, type metadata accessor for DeviceSupportInformationRecord);
  if (v57)
  {
    v58 = v57;
    v59 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    v61 = swift_unknownObjectWeakLoadStrong(v59, v60);
    v63 = v271;
    v64 = v269;
    if (v61)
    {
      v65 = (void *)v61;
      v66 = (void *)swift_unknownObjectWeakLoadStrong(v61 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v62);

      if (v66)
      {
        v67 = _swiftEmptyArrayStorage;
        v279[0] = _swiftEmptyArrayStorage;
        v68 = v58[2];
        if (v68)
        {
          v270 = (uint64_t)v66;
          v69 = (uint64_t)v58
              + ((*(unsigned __int8 *)(v272 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v272 + 80));
          v274 = *(_QWORD *)(v272 + 72);
          v261 = (uint64_t)v58;
          swift_bridgeObjectRetain(v58);
          do
          {
            sub_1000AE548(v69, (uint64_t)v18, type metadata accessor for DeviceRecord);
            v70 = *(_QWORD *)&v18[*(int *)(v16 + 24) + 8];
            v71 = objc_allocWithZone((Class)BTCloudDevice);
            swift_bridgeObjectRetain(v70);
            v72 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v70);
            v73 = objc_msgSend(v71, "initWithBluetoothAddress:", v72);

            v74 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setNickname:", v74);

            v75 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setModelNumber:", v75);

            v76 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setManufacturer:", v76);

            v77 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setProductID:", v77);

            v78 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setVendorID:", v78);

            v79 = sub_1000AE58C((uint64_t)v18, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            v81 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v80 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v81 >= v80 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
            v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v73);
            specialized Array._endMutation()(v82);
            v69 += v274;
            --v68;
          }
          while (v68);
          v58 = (_QWORD *)v261;
          swift_bridgeObjectRelease(v261);
          v67 = (_QWORD *)v279[0];
          v66 = (void *)v270;
          v63 = v271;
          v64 = v269;
        }
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v67);
        objc_msgSend(v66, "devicesUpdatedWithRecords:", isa);

        swift_unknownObjectRelease(v66);
      }
    }
    v102 = v58[2];
    if (!v102)
    {
      v55 = v58;
      return (_QWORD *)swift_bridgeObjectRelease(v55);
    }
    v103 = v272;
    v104 = (uint64_t)v58
         + ((*(unsigned __int8 *)(v272 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v272 + 80));
    v261 = (uint64_t)v58;
    swift_bridgeObjectRetain(v58);
    v263 = (char *)v102;
    v105 = v273;
    swift_beginAccess(v273, v279, 0, 0);
    v106 = v105;
    v107 = (uint64_t)v263;
    swift_beginAccess(v106, v276, 0, 0);
    v108 = 0;
    v274 = *(_QWORD *)(v103 + 72);
    v109 = v104;
    v270 = (uint64_t)"Invalid AAProxCardsRecord - %@";
    v272 = 0x80000001001AB220;
    v260 = xmmword_100187640;
    v110 = v267;
    v268 = v109;
    while (1)
    {
      v111 = (_QWORD *)(v109 + v274 * v108 + *(int *)(v16 + 24));
      v112 = v111[1];
      if ((*v111 != 0xD000000000000011 || v112 != v272)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*v111, v112, 0xD000000000000011, v270 | 0x8000000000000000, 0) & 1) == 0)
      {
        v114 = swift_unknownObjectWeakLoadStrong(v273, v113);
        if (v114)
        {
          v115 = (void *)v114;
          v116 = sub_1000B4AC8();

          v117 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
          if ((v117 & 1) != 0)
          {
            v118 = sub_100129690();
            if (qword_100210160 != -1)
              swift_once(&qword_100210160, sub_1000C81B8);
            v119 = v266;
            v120 = sub_1000A0A00(v266, (uint64_t)qword_100218C90);
            v121 = v265;
            v122 = (uint64_t)v264;
            (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v264, v120, v119);
            v123 = sub_100128330(v122, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
            swift_release(v118);
            (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v119);
            v63 = v271;
            v64 = v269;
          }
          else
          {
            v124 = static os_log_type_t.error.getter(v117);
            if (qword_1002101E0 != -1)
              swift_once(&qword_1002101E0, sub_1001687B0);
            v125 = v124;
            v123 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)(v125, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
          }
          v109 = v268;
          swift_release(v116);
          v126 = v123[2];
          if (v126)
          {
            v127 = (uint64_t)v123
                 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
            swift_bridgeObjectRetain(v123);
            v128 = *(_QWORD *)(v64 + 72);
            while (1)
            {
              sub_1000AE548(v127, (uint64_t)v20, type metadata accessor for MagicPairingSettingsRecord);
              v129 = &v20[*(int *)(v63 + 24)];
              v130 = *((_QWORD *)v129 + 1);
              v131 = v111[1];
              v132 = *(_QWORD *)v129 == *v111 && v130 == v131;
              if (v132
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v129, v130, *v111, v131, 0) & 1) != 0)
              {
                break;
              }
              sub_1000AE58C((uint64_t)v20, type metadata accessor for MagicPairingSettingsRecord);
              v127 += v128;
              if (!--v126)
              {
                swift_bridgeObjectRelease(v123);
                v109 = v268;
                v64 = v269;
                goto LABEL_65;
              }
            }
            swift_bridgeObjectRelease(v123);
            v110 = v267;
            sub_1000C6CD0((uint64_t)v20, v267, type metadata accessor for MagicPairingSettingsRecord);
            v64 = v269;
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v269 + 56))(v110, 0, 1, v63);
            v109 = v268;
          }
          else
          {
LABEL_65:
            v110 = v267;
            (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v64 + 56))(v267, 1, 1, v63);
          }
          swift_bridgeObjectRelease(v123);
          v133 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v64 + 48))(v110, 1, v63);
          v107 = (uint64_t)v263;
          if (v133 != 1)
          {
            v134 = (uint64_t)v262;
            sub_1000C6CD0(v110, (uint64_t)v262, type metadata accessor for MagicPairingSettingsRecord);
            v136 = swift_unknownObjectWeakLoadStrong(v273, v135);
            if (v136)
            {
              v138 = (void *)v136;
              v139 = (void *)swift_unknownObjectWeakLoadStrong(v136 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v137);

              if (v139)
              {
                v140 = sub_1000A0980(&qword_100211998);
                v141 = swift_allocObject(v140, 40, 7);
                *(_OWORD *)(v141 + 16) = v260;
                v142 = sub_1000BEDB4();
                *(_QWORD *)(v141 + 32) = v142;
                v275[0] = v141;
                specialized Array._endMutation()(v142);
                v143 = v275[0];
                sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
                v144 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v143);
                objc_msgSend(v139, "magicPairingRecordsUpdatedWithRecords:", v144);
                swift_unknownObjectRelease(v139);

                v110 = v267;
              }
            }
            sub_1000AE58C(v134, type metadata accessor for MagicPairingSettingsRecord);
            v107 = (uint64_t)v263;
            v109 = v268;
            goto LABEL_44;
          }
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v64 + 56))(v110, 1, 1, v63);
          v109 = v268;
        }
        sub_1000A1000(v110, (uint64_t *)&unk_100212190);
      }
LABEL_44:
      if (++v108 == v107)
        return (_QWORD *)swift_bridgeObjectRelease_n(v261, 2);
    }
  }
  v84 = sub_100113638(a1, type metadata accessor for DeviceSupportInformationRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10014EE14);
  if (v84)
  {
    v85 = v84;
    v86 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    v88 = swift_unknownObjectWeakLoadStrong(v86, v87);
    if (v88)
    {
      v90 = (void *)v88;
      v42 = (void *)swift_unknownObjectWeakLoadStrong(v88 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v89);

      if (v42)
      {
        v91 = _swiftEmptyArrayStorage;
        v279[0] = _swiftEmptyArrayStorage;
        v92 = v85[2];
        if (v92)
        {
          v93 = (uint64_t)v85
              + ((*(unsigned __int8 *)(v258 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v258 + 80));
          v94 = *(_QWORD *)(v258 + 72);
          swift_bridgeObjectRetain(v85);
          v95 = (uint64_t)v259;
          do
          {
            sub_1000AE548(v93, v95, type metadata accessor for DeviceSupportInformationRecord);
            v96 = sub_1000BB014();
            v97 = sub_1000AE58C(v95, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v97);
            v99 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v98 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v99 >= v98 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1);
            v100 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v99, v96);
            specialized Array._endMutation()(v100);
            v93 += v94;
            --v92;
          }
          while (v92);
          swift_bridgeObjectRelease(v85);
          v91 = (_QWORD *)v279[0];
        }
        swift_bridgeObjectRelease(v85);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v91);
        objc_msgSend(v42, "deviceSupportInformationRecordsUpdatedWithRecords:", v83.super.isa);
        goto LABEL_29;
      }
    }
    v55 = v85;
    return (_QWORD *)swift_bridgeObjectRelease(v55);
  }
  v145 = sub_1001133F4(a1, &qword_100210CE8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE88, type metadata accessor for DeviceSupportInformationRecord);
  if (v145)
  {
    v146 = v145;
    if (v145[2])
    {
      v147 = v260;
      v148 = (uint64_t)v263;
      sub_1000AE548((uint64_t)v145 + ((*(unsigned __int8 *)(v260 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80)), (uint64_t)v263, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v149 = 0;
      v150 = v270;
      v151 = v261;
    }
    else
    {
      v149 = 1;
      v150 = v270;
      v148 = (uint64_t)v263;
      v151 = v261;
      v147 = v260;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56))(v148, v149, 1, v151);
    swift_bridgeObjectRelease(v146);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v148, 1, v151) == 1)
    {
      sub_1000A1000(v148, &qword_100210CD8);
      goto LABEL_83;
    }
    sub_1000C6CD0(v148, v268, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v163 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    v165 = swift_unknownObjectWeakLoadStrong(v163, v164);
    if (!v165
      || (v167 = (void *)v165,
          v168 = (void *)swift_unknownObjectWeakLoadStrong(v165 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v166), v167, !v168))
    {
LABEL_140:
      v230 = v273;
      swift_beginAccess(v273, v275, 0, 0);
      v232 = swift_unknownObjectWeakLoadStrong(v230, v231);
      if (!v232)
        return (_QWORD *)sub_1000AE58C(v268, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v234 = (void *)v232;
      v235 = (void *)swift_unknownObjectWeakLoadStrong(v232 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v233);

      if (!v235)
        return (_QWORD *)sub_1000AE58C(v268, type metadata accessor for LegacyMagicPairingSettingsRecords);
      sub_1000E2648();
      v237 = v236;
      v277 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v236 >> 62)
      {
        if (v236 < 0)
          v256 = v236;
        else
          v256 = v236 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v236);
        result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v256);
        v238 = (uint64_t)result;
        if (result)
        {
LABEL_144:
          v274 = (uint64_t)v235;
          if (v238 >= 1)
          {
            for (i = 0; i != v238; ++i)
            {
              if ((v237 & 0xC000000000000001) != 0)
                v240 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v237);
              else
                v240 = *(id *)(v237 + 8 * i + 32);
              v241 = v240;
              v242 = objc_msgSend(v240, "bluetoothAddress");
              static String._unconditionallyBridgeFromObjectiveC(_:)(v242);
              v244 = v243;

              v245 = objc_allocWithZone((Class)BTCloudDevice);
              v246 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v244);
              v247 = objc_msgSend(v245, "initWithBluetoothAddress:", v246);

              v248 = objc_msgSend(v241, "name");
              objc_msgSend(v247, "setNickname:", v248);

              v249 = objc_msgSend(v241, "productID");
              objc_msgSend(v247, "setProductID:", v249);

              v250 = objc_msgSend(v241, "vendorID");
              objc_msgSend(v247, "setVendorID:", v250);

              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v251);
              v253 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v252 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v253 >= v252 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v252 > 1, v253 + 1, 1);
              v254 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v253, v247);
              specialized Array._endMutation()(v254);
            }
            swift_bridgeObjectRelease(v237);
            v255 = (_QWORD *)v277;
            v235 = (void *)v274;
            goto LABEL_158;
          }
LABEL_161:
          __break(1u);
          return result;
        }
      }
      else
      {
        v238 = *(_QWORD *)((v236 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = (_QWORD *)swift_bridgeObjectRetain(v236);
        if (v238)
          goto LABEL_144;
      }
      swift_bridgeObjectRelease(v237);
      v255 = _swiftEmptyArrayStorage;
LABEL_158:
      swift_bridgeObjectRelease(v237);
      sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
      v257 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v255);
      objc_msgSend(v235, "devicesUpdatedWithRecords:", v257);
      swift_unknownObjectRelease(v235);

      return (_QWORD *)sub_1000AE58C(v268, type metadata accessor for LegacyMagicPairingSettingsRecords);
    }
    sub_1000E2648();
    v170 = v169;
    v171 = v273;
    swift_beginAccess(v273, v279, 0, 0);
    v173 = (void *)swift_unknownObjectWeakLoadStrong(v171, v172);
    swift_unknownObjectWeakInit(v275, v173);

    v277 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v170 >> 62)
    {
      if (v170 < 0)
        v228 = v170;
      else
        v228 = v170 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v170);
      result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v228);
      v174 = (uint64_t)result;
      if (result)
        goto LABEL_92;
    }
    else
    {
      v174 = *(_QWORD *)((v170 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (_QWORD *)swift_bridgeObjectRetain(v170);
      if (v174)
      {
LABEL_92:
        v261 = (uint64_t)v168;
        if (v174 < 1)
        {
          __break(1u);
          goto LABEL_161;
        }
        v271 = v170 & 0xC000000000000001;
        swift_beginAccess(v275, v276, 0, 0);
        v175 = 0;
        v269 = v170;
        v267 = v174;
        do
        {
          if (v271)
            v176 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v175, v170);
          else
            v176 = (char *)*(id *)(v170 + 8 * v175 + 32);
          v178 = v176;
          v179 = swift_unknownObjectWeakLoadStrong(v275, v177);
          if (v179)
          {
            v180 = (void *)v179;
            v181 = sub_1000B4AC8();
            v182 = (void *)objc_opt_self(BTSystemConfiguration);
            v183 = objc_msgSend(v182, "isFirstUnlocked");
            v272 = (unint64_t)v180;
            if ((v183 & 1) != 0)
            {
              v184 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v185 = v266;
              v186 = sub_1000A0A00(v266, (uint64_t)qword_100218C68);
              v187 = v265;
              v188 = (uint64_t)v264;
              (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v264, v186, v185);
              v189 = sub_100128330(v188, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v184);
              (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v188, v185);
              v190 = v189[2];
              v191 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              v192 = *(_QWORD *)(v191 - 8);
              v150 = v270;
              if (v190)
              {
                sub_1000AE548((uint64_t)v189+ ((*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80)), v270, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v192 + 56))(v150, 0, 1, v191);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 56))(v270, 1, 1, v191);
              }
              swift_release(v181);
              swift_bridgeObjectRelease(v189);
              v180 = (void *)v272;
            }
            else
            {
              v193 = static os_log_type_t.error.getter(v183);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v193, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              v191 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 56))(v150, 1, 1, v191);
              swift_release(v181);
            }
            type metadata accessor for LegacyAccountMagicKeysRecord(0);
            v194 = *(_QWORD *)(v191 - 8);
            v195 = *(uint64_t **)(v194 + 48);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v195)(v150, 1, v191) == 1)
            {
              sub_1000A1000(v150, (uint64_t *)&unk_1002122E0);
              v196 = 0;
            }
            else
            {
              v197 = Data.subdata(in:)(1, 17, *(_QWORD *)(v150 + *(int *)(v191 + 20)), *(_QWORD *)(v150 + *(int *)(v191 + 20) + 8));
              v263 = (char *)v191;
              v198 = v175;
              v199 = v178;
              v200 = v194;
              v201 = v182;
              v202 = v195;
              v204 = v203;
              sub_1000AE58C(v150, type metadata accessor for LegacyAccountMagicKeysRecord);
              v196 = Data._bridgeToObjectiveC()().super.isa;
              v205 = v204;
              v195 = v202;
              v182 = v201;
              v194 = v200;
              v178 = v199;
              v175 = v198;
              v191 = (uint64_t)v263;
              sub_1000A103C(v197, v205);
            }
            objc_msgSend(v178, "setMasterKey:", v196);

            v206 = sub_1000B4AC8();
            v207 = objc_msgSend(v182, "isFirstUnlocked");
            if ((v207 & 1) != 0)
            {
              v262 = v195;
              v263 = v178;
              v208 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v209 = v266;
              v210 = sub_1000A0A00(v266, (uint64_t)qword_100218C68);
              v211 = v265;
              v212 = (uint64_t)v264;
              (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v264, v210, v209);
              v213 = sub_100128330(v212, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v208);
              (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v212, v209);
              if (v213[2])
              {
                v214 = v274;
                sub_1000AE548((uint64_t)v213+ ((*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80)), v274, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v194 + 56))(v214, 0, 1, v191);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v194 + 56))(v274, 1, 1, v191);
              }
              swift_release(v206);
              swift_bridgeObjectRelease(v213);
              v150 = v270;
              v178 = v263;
              v180 = (void *)v272;
              v195 = v262;
            }
            else
            {
              v215 = static os_log_type_t.error.getter(v207);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v215, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v194 + 56))(v274, 1, 1, v191);
              swift_release(v206);
            }
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v195)(v274, 1, v191) == 1)
            {
              sub_1000A1000(v274, (uint64_t *)&unk_1002122E0);
              v216 = 0;
            }
            else
            {
              v217 = v274;
              v218 = Data.subdata(in:)(17, 33, *(_QWORD *)(v274 + *(int *)(v191 + 20)), *(_QWORD *)(v274 + *(int *)(v191 + 20) + 8));
              v220 = v219;
              sub_1000AE58C(v217, type metadata accessor for LegacyAccountMagicKeysRecord);
              v216 = Data._bridgeToObjectiveC()().super.isa;
              sub_1000A103C(v218, v220);
            }
            v170 = v269;
            v174 = v267;
            objc_msgSend(v178, "setMasterHint:", v216);

          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v179);
          v222 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v221 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v222 >= v221 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v221 > 1, v222 + 1, 1);
          ++v175;
          v223 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v222, v178);
          specialized Array._endMutation()(v223);
        }
        while (v174 != v175);
        swift_bridgeObjectRelease(v170);
        v227 = (_QWORD *)v277;
        v168 = (void *)v261;
        goto LABEL_139;
      }
    }
    swift_bridgeObjectRelease(v170);
    v227 = _swiftEmptyArrayStorage;
LABEL_139:
    swift_bridgeObjectRelease(v170);
    swift_unknownObjectWeakDestroy(v275);
    sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
    v229 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v227);
    objc_msgSend(v168, "magicPairingRecordsUpdatedWithRecords:", v229);

    swift_unknownObjectRelease(v168);
    goto LABEL_140;
  }
LABEL_83:
  v152 = sub_100113524(a1, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord);
  if (v152)
  {
    v153 = v152;
    v154 = v273;
    swift_beginAccess(v273, v279, 0, 0);
    v156 = swift_unknownObjectWeakLoadStrong(v154, v155);
    if (v156)
    {
      v157 = (char *)v156;
      v278[3] = &type metadata for AudioAccessoryFeatures;
      v278[4] = sub_1000A42C4();
      v158 = isFeatureEnabled(_:)(v278);
      sub_1000A2140(v278);
      if ((v158 & 1) != 0)
      {
        v160 = swift_unknownObjectWeakLoadStrong(&v157[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v159);
        if (v160)
        {
          v161 = (void *)v160;
          type metadata accessor for AADeviceRecord(0);
          v162 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v161, "aaDeviceRecordsUpdatedWithRecords:", v162);

          swift_bridgeObjectRelease(v153);
          return (_QWORD *)swift_unknownObjectRelease(v161);
        }
      }

    }
    goto LABEL_133;
  }
  result = sub_100113524(a1, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord);
  if (result)
  {
    v153 = result;
    v224 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    v226 = (void *)swift_unknownObjectWeakLoadStrong(v224, v225);
    if (v226)
    {

      v55 = v153;
      return (_QWORD *)swift_bridgeObjectRelease(v55);
    }
LABEL_133:
    v55 = v153;
    return (_QWORD *)swift_bridgeObjectRelease(v55);
  }
  return result;
}

_QWORD *sub_100118B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t Strong;
  uint64_t v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *result;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  NSString v72;
  id v73;
  NSString v74;
  NSString v75;
  NSString v76;
  NSString v77;
  NSString v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  NSArray v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  Class isa;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  Class v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  Class v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void *v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  Class v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  void *v201;
  uint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  Class v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  void *v226;
  _QWORD *v227;
  uint64_t v228;
  Class v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t i;
  id v240;
  void *v241;
  id v242;
  uint64_t v243;
  uint64_t v244;
  id v245;
  NSString v246;
  id v247;
  id v248;
  id v249;
  id v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  Class v257;
  uint64_t v258;
  char *v259;
  __int128 v260;
  uint64_t v261;
  uint64_t *v262;
  char *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD v275[3];
  _BYTE v276[24];
  unint64_t v277;
  _QWORD v278[5];
  _QWORD v279[2];

  v4 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v4);
  v274 = (uint64_t)&v258 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v270 = (uint64_t)&v258 - v7;
  v8 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v8);
  v263 = (char *)&v258 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  *(_QWORD *)&v260 = *(_QWORD *)(v261 - 8);
  __chkstk_darwin(v261);
  v268 = (uint64_t)&v258 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DeviceSupportInformationRecord(0);
  v258 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v259 = (char *)&v258 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = type metadata accessor for URL(0);
  v265 = *(_QWORD *)(v266 - 8);
  __chkstk_darwin(v266);
  v264 = (char *)&v258 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v14);
  v267 = (uint64_t)&v258 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DeviceRecord(0);
  v272 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v258 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = type metadata accessor for MagicPairingSettingsRecord(0);
  v269 = *(_QWORD *)(v271 - 8);
  __chkstk_darwin(v271);
  v20 = (char *)&v258 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v262 = (uint64_t *)((char *)&v258 - v22);
  __chkstk_darwin(v23);
  v25 = (char *)&v258 - v24;
  v273 = (_QWORD *)(a2 + 16);
  v27 = static os_log_type_t.default.getter(v26);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v28 = qword_100218DE0;
  v29 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v30 = swift_allocObject(v29, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100184870;
  v31 = swift_bridgeObjectRetain(a1);
  v32 = Array.description.getter(v31, v16);
  v34 = v33;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  *(_QWORD *)(v30 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v30 + 32) = v32;
  *(_QWORD *)(v30 + 40) = v34;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "records Updated: %@", 19, 2, v30);
  swift_bridgeObjectRelease(v30);
  v35 = sub_1001133F4(a1, &qword_100210CF8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EDE8, type metadata accessor for DeviceRecord);
  if (v35)
  {
    v36 = v35;
    v37 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v37, v38);
    if (Strong)
    {
      v41 = (void *)Strong;
      v42 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v40);

      if (v42)
      {
        v43 = _swiftEmptyArrayStorage;
        v279[0] = _swiftEmptyArrayStorage;
        v44 = v36[2];
        if (v44)
        {
          v273 = v36;
          v274 = (uint64_t)v42;
          v45 = (uint64_t)v36
              + ((*(unsigned __int8 *)(v269 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v269 + 80));
          v46 = *(_QWORD *)(v269 + 72);
          swift_bridgeObjectRetain(v36);
          v47 = v271;
          do
          {
            sub_1000AE548(v45, (uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            v48 = &v25[*(int *)(v47 + 24)];
            v49 = *((_QWORD *)v48 + 1);
            if (*(_QWORD *)v48 == 0xD000000000000011 && v49 == 0x80000001001AB220
              || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v48, v49, 0xD000000000000011, 0x80000001001AB220, 0) & 1) != 0)
            {
              sub_1000AE58C((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
            }
            else
            {
              v50 = sub_1000BEDB4();
              v51 = sub_1000AE58C((uint64_t)v25, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
              v53 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v52 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v53 >= v52 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
              v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v50);
              specialized Array._endMutation()(v54);
              v47 = v271;
            }
            v45 += v46;
            --v44;
          }
          while (v44);
          v36 = v273;
          swift_bridgeObjectRelease(v273);
          v43 = (_QWORD *)v279[0];
          v42 = (void *)v274;
        }
        swift_bridgeObjectRelease(v36);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        objc_msgSend(v42, "magicPairingRecordsUpdatedWithRecords:", v83.super.isa);
LABEL_29:

        return (_QWORD *)swift_unknownObjectRelease(v42);
      }
    }
    v55 = v36;
    return (_QWORD *)swift_bridgeObjectRelease(v55);
  }
  v57 = sub_100113638(a1, type metadata accessor for DeviceRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10014EE40);
  if (v57)
  {
    v58 = v57;
    v59 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    v61 = swift_unknownObjectWeakLoadStrong(v59, v60);
    v63 = v271;
    v64 = v269;
    if (v61)
    {
      v65 = (void *)v61;
      v66 = (void *)swift_unknownObjectWeakLoadStrong(v61 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v62);

      if (v66)
      {
        v67 = _swiftEmptyArrayStorage;
        v279[0] = _swiftEmptyArrayStorage;
        v68 = v58[2];
        if (v68)
        {
          v270 = (uint64_t)v66;
          v69 = (uint64_t)v58
              + ((*(unsigned __int8 *)(v272 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v272 + 80));
          v274 = *(_QWORD *)(v272 + 72);
          v261 = (uint64_t)v58;
          swift_bridgeObjectRetain(v58);
          do
          {
            sub_1000AE548(v69, (uint64_t)v18, type metadata accessor for DeviceRecord);
            v70 = *(_QWORD *)&v18[*(int *)(v16 + 24) + 8];
            v71 = objc_allocWithZone((Class)BTCloudDevice);
            swift_bridgeObjectRetain(v70);
            v72 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v70);
            v73 = objc_msgSend(v71, "initWithBluetoothAddress:", v72);

            v74 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setNickname:", v74);

            v75 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setModelNumber:", v75);

            v76 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setManufacturer:", v76);

            v77 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setProductID:", v77);

            v78 = String._bridgeToObjectiveC()();
            objc_msgSend(v73, "setVendorID:", v78);

            v79 = sub_1000AE58C((uint64_t)v18, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            v81 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v80 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v81 >= v80 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
            v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v73);
            specialized Array._endMutation()(v82);
            v69 += v274;
            --v68;
          }
          while (v68);
          v58 = (_QWORD *)v261;
          swift_bridgeObjectRelease(v261);
          v67 = (_QWORD *)v279[0];
          v66 = (void *)v270;
          v63 = v271;
          v64 = v269;
        }
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v67);
        objc_msgSend(v66, "devicesUpdatedWithRecords:", isa);

        swift_unknownObjectRelease(v66);
      }
    }
    v102 = v58[2];
    if (!v102)
    {
      v55 = v58;
      return (_QWORD *)swift_bridgeObjectRelease(v55);
    }
    v103 = v272;
    v104 = (uint64_t)v58
         + ((*(unsigned __int8 *)(v272 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v272 + 80));
    v261 = (uint64_t)v58;
    swift_bridgeObjectRetain(v58);
    v263 = (char *)v102;
    v105 = v273;
    swift_beginAccess(v273, v279, 0, 0);
    v106 = v105;
    v107 = (uint64_t)v263;
    swift_beginAccess(v106, v276, 0, 0);
    v108 = 0;
    v274 = *(_QWORD *)(v103 + 72);
    v109 = v104;
    v270 = (uint64_t)"Invalid AAProxCardsRecord - %@";
    v272 = 0x80000001001AB220;
    v260 = xmmword_100187640;
    v110 = v267;
    v268 = v109;
    while (1)
    {
      v111 = (_QWORD *)(v109 + v274 * v108 + *(int *)(v16 + 24));
      v112 = v111[1];
      if ((*v111 != 0xD000000000000011 || v112 != v272)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*v111, v112, 0xD000000000000011, v270 | 0x8000000000000000, 0) & 1) == 0)
      {
        v114 = swift_unknownObjectWeakLoadStrong(v273, v113);
        if (v114)
        {
          v115 = (void *)v114;
          v116 = sub_1000B4AC8();

          v117 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
          if ((v117 & 1) != 0)
          {
            v118 = sub_100129690();
            if (qword_100210160 != -1)
              swift_once(&qword_100210160, sub_1000C81B8);
            v119 = v266;
            v120 = sub_1000A0A00(v266, (uint64_t)qword_100218C90);
            v121 = v265;
            v122 = (uint64_t)v264;
            (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v264, v120, v119);
            v123 = sub_100128330(v122, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
            swift_release(v118);
            (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v119);
            v63 = v271;
            v64 = v269;
          }
          else
          {
            v124 = static os_log_type_t.error.getter(v117);
            if (qword_1002101E0 != -1)
              swift_once(&qword_1002101E0, sub_1001687B0);
            v125 = v124;
            v123 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)(v125, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
          }
          v109 = v268;
          swift_release(v116);
          v126 = v123[2];
          if (v126)
          {
            v127 = (uint64_t)v123
                 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
            swift_bridgeObjectRetain(v123);
            v128 = *(_QWORD *)(v64 + 72);
            while (1)
            {
              sub_1000AE548(v127, (uint64_t)v20, type metadata accessor for MagicPairingSettingsRecord);
              v129 = &v20[*(int *)(v63 + 24)];
              v130 = *((_QWORD *)v129 + 1);
              v131 = v111[1];
              v132 = *(_QWORD *)v129 == *v111 && v130 == v131;
              if (v132
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v129, v130, *v111, v131, 0) & 1) != 0)
              {
                break;
              }
              sub_1000AE58C((uint64_t)v20, type metadata accessor for MagicPairingSettingsRecord);
              v127 += v128;
              if (!--v126)
              {
                swift_bridgeObjectRelease(v123);
                v109 = v268;
                v64 = v269;
                goto LABEL_65;
              }
            }
            swift_bridgeObjectRelease(v123);
            v110 = v267;
            sub_1000C6CD0((uint64_t)v20, v267, type metadata accessor for MagicPairingSettingsRecord);
            v64 = v269;
            (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v269 + 56))(v110, 0, 1, v63);
            v109 = v268;
          }
          else
          {
LABEL_65:
            v110 = v267;
            (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v64 + 56))(v267, 1, 1, v63);
          }
          swift_bridgeObjectRelease(v123);
          v133 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v64 + 48))(v110, 1, v63);
          v107 = (uint64_t)v263;
          if (v133 != 1)
          {
            v134 = (uint64_t)v262;
            sub_1000C6CD0(v110, (uint64_t)v262, type metadata accessor for MagicPairingSettingsRecord);
            v136 = swift_unknownObjectWeakLoadStrong(v273, v135);
            if (v136)
            {
              v138 = (void *)v136;
              v139 = (void *)swift_unknownObjectWeakLoadStrong(v136 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v137);

              if (v139)
              {
                v140 = sub_1000A0980(&qword_100211998);
                v141 = swift_allocObject(v140, 40, 7);
                *(_OWORD *)(v141 + 16) = v260;
                v142 = sub_1000BEDB4();
                *(_QWORD *)(v141 + 32) = v142;
                v275[0] = v141;
                specialized Array._endMutation()(v142);
                v143 = v275[0];
                sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
                v144 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v143);
                objc_msgSend(v139, "magicPairingRecordsUpdatedWithRecords:", v144);
                swift_unknownObjectRelease(v139);

                v110 = v267;
              }
            }
            sub_1000AE58C(v134, type metadata accessor for MagicPairingSettingsRecord);
            v107 = (uint64_t)v263;
            v109 = v268;
            goto LABEL_44;
          }
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v64 + 56))(v110, 1, 1, v63);
          v109 = v268;
        }
        sub_1000A1000(v110, (uint64_t *)&unk_100212190);
      }
LABEL_44:
      if (++v108 == v107)
        return (_QWORD *)swift_bridgeObjectRelease_n(v261, 2);
    }
  }
  v84 = sub_1001133F4(a1, &qword_100210CF8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE14, type metadata accessor for DeviceRecord);
  if (v84)
  {
    v85 = v84;
    v86 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    v88 = swift_unknownObjectWeakLoadStrong(v86, v87);
    if (v88)
    {
      v90 = (void *)v88;
      v42 = (void *)swift_unknownObjectWeakLoadStrong(v88 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v89);

      if (v42)
      {
        v91 = _swiftEmptyArrayStorage;
        v279[0] = _swiftEmptyArrayStorage;
        v92 = v85[2];
        if (v92)
        {
          v93 = (uint64_t)v85
              + ((*(unsigned __int8 *)(v258 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v258 + 80));
          v94 = *(_QWORD *)(v258 + 72);
          swift_bridgeObjectRetain(v85);
          v95 = (uint64_t)v259;
          do
          {
            sub_1000AE548(v93, v95, type metadata accessor for DeviceSupportInformationRecord);
            v96 = sub_1000BB014();
            v97 = sub_1000AE58C(v95, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v97);
            v99 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v98 = *(_QWORD *)((v279[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v99 >= v98 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1);
            v100 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v99, v96);
            specialized Array._endMutation()(v100);
            v93 += v94;
            --v92;
          }
          while (v92);
          swift_bridgeObjectRelease(v85);
          v91 = (_QWORD *)v279[0];
        }
        swift_bridgeObjectRelease(v85);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v91);
        objc_msgSend(v42, "deviceSupportInformationRecordsUpdatedWithRecords:", v83.super.isa);
        goto LABEL_29;
      }
    }
    v55 = v85;
    return (_QWORD *)swift_bridgeObjectRelease(v55);
  }
  v145 = sub_1001133F4(a1, &qword_100210CF8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE88, type metadata accessor for DeviceRecord);
  if (v145)
  {
    v146 = v145;
    if (v145[2])
    {
      v147 = v260;
      v148 = (uint64_t)v263;
      sub_1000AE548((uint64_t)v145 + ((*(unsigned __int8 *)(v260 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80)), (uint64_t)v263, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v149 = 0;
      v150 = v270;
      v151 = v261;
    }
    else
    {
      v149 = 1;
      v150 = v270;
      v148 = (uint64_t)v263;
      v151 = v261;
      v147 = v260;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56))(v148, v149, 1, v151);
    swift_bridgeObjectRelease(v146);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v148, 1, v151) == 1)
    {
      sub_1000A1000(v148, &qword_100210CD8);
      goto LABEL_83;
    }
    sub_1000C6CD0(v148, v268, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v163 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    v165 = swift_unknownObjectWeakLoadStrong(v163, v164);
    if (!v165
      || (v167 = (void *)v165,
          v168 = (void *)swift_unknownObjectWeakLoadStrong(v165 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v166), v167, !v168))
    {
LABEL_140:
      v230 = v273;
      swift_beginAccess(v273, v275, 0, 0);
      v232 = swift_unknownObjectWeakLoadStrong(v230, v231);
      if (!v232)
        return (_QWORD *)sub_1000AE58C(v268, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v234 = (void *)v232;
      v235 = (void *)swift_unknownObjectWeakLoadStrong(v232 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v233);

      if (!v235)
        return (_QWORD *)sub_1000AE58C(v268, type metadata accessor for LegacyMagicPairingSettingsRecords);
      sub_1000E2648();
      v237 = v236;
      v277 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v236 >> 62)
      {
        if (v236 < 0)
          v256 = v236;
        else
          v256 = v236 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v236);
        result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v256);
        v238 = (uint64_t)result;
        if (result)
        {
LABEL_144:
          v274 = (uint64_t)v235;
          if (v238 >= 1)
          {
            for (i = 0; i != v238; ++i)
            {
              if ((v237 & 0xC000000000000001) != 0)
                v240 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v237);
              else
                v240 = *(id *)(v237 + 8 * i + 32);
              v241 = v240;
              v242 = objc_msgSend(v240, "bluetoothAddress");
              static String._unconditionallyBridgeFromObjectiveC(_:)(v242);
              v244 = v243;

              v245 = objc_allocWithZone((Class)BTCloudDevice);
              v246 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v244);
              v247 = objc_msgSend(v245, "initWithBluetoothAddress:", v246);

              v248 = objc_msgSend(v241, "name");
              objc_msgSend(v247, "setNickname:", v248);

              v249 = objc_msgSend(v241, "productID");
              objc_msgSend(v247, "setProductID:", v249);

              v250 = objc_msgSend(v241, "vendorID");
              objc_msgSend(v247, "setVendorID:", v250);

              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v251);
              v253 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v252 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v253 >= v252 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v252 > 1, v253 + 1, 1);
              v254 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v253, v247);
              specialized Array._endMutation()(v254);
            }
            swift_bridgeObjectRelease(v237);
            v255 = (_QWORD *)v277;
            v235 = (void *)v274;
            goto LABEL_158;
          }
LABEL_161:
          __break(1u);
          return result;
        }
      }
      else
      {
        v238 = *(_QWORD *)((v236 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = (_QWORD *)swift_bridgeObjectRetain(v236);
        if (v238)
          goto LABEL_144;
      }
      swift_bridgeObjectRelease(v237);
      v255 = _swiftEmptyArrayStorage;
LABEL_158:
      swift_bridgeObjectRelease(v237);
      sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
      v257 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v255);
      objc_msgSend(v235, "devicesUpdatedWithRecords:", v257);
      swift_unknownObjectRelease(v235);

      return (_QWORD *)sub_1000AE58C(v268, type metadata accessor for LegacyMagicPairingSettingsRecords);
    }
    sub_1000E2648();
    v170 = v169;
    v171 = v273;
    swift_beginAccess(v273, v279, 0, 0);
    v173 = (void *)swift_unknownObjectWeakLoadStrong(v171, v172);
    swift_unknownObjectWeakInit(v275, v173);

    v277 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v170 >> 62)
    {
      if (v170 < 0)
        v228 = v170;
      else
        v228 = v170 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v170);
      result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v228);
      v174 = (uint64_t)result;
      if (result)
        goto LABEL_92;
    }
    else
    {
      v174 = *(_QWORD *)((v170 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (_QWORD *)swift_bridgeObjectRetain(v170);
      if (v174)
      {
LABEL_92:
        v261 = (uint64_t)v168;
        if (v174 < 1)
        {
          __break(1u);
          goto LABEL_161;
        }
        v271 = v170 & 0xC000000000000001;
        swift_beginAccess(v275, v276, 0, 0);
        v175 = 0;
        v269 = v170;
        v267 = v174;
        do
        {
          if (v271)
            v176 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v175, v170);
          else
            v176 = (char *)*(id *)(v170 + 8 * v175 + 32);
          v178 = v176;
          v179 = swift_unknownObjectWeakLoadStrong(v275, v177);
          if (v179)
          {
            v180 = (void *)v179;
            v181 = sub_1000B4AC8();
            v182 = (void *)objc_opt_self(BTSystemConfiguration);
            v183 = objc_msgSend(v182, "isFirstUnlocked");
            v272 = (unint64_t)v180;
            if ((v183 & 1) != 0)
            {
              v184 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v185 = v266;
              v186 = sub_1000A0A00(v266, (uint64_t)qword_100218C68);
              v187 = v265;
              v188 = (uint64_t)v264;
              (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v264, v186, v185);
              v189 = sub_100128330(v188, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v184);
              (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v188, v185);
              v190 = v189[2];
              v191 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              v192 = *(_QWORD *)(v191 - 8);
              v150 = v270;
              if (v190)
              {
                sub_1000AE548((uint64_t)v189+ ((*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80)), v270, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v192 + 56))(v150, 0, 1, v191);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 56))(v270, 1, 1, v191);
              }
              swift_release(v181);
              swift_bridgeObjectRelease(v189);
              v180 = (void *)v272;
            }
            else
            {
              v193 = static os_log_type_t.error.getter(v183);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v193, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              v191 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 56))(v150, 1, 1, v191);
              swift_release(v181);
            }
            type metadata accessor for LegacyAccountMagicKeysRecord(0);
            v194 = *(_QWORD *)(v191 - 8);
            v195 = *(uint64_t **)(v194 + 48);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v195)(v150, 1, v191) == 1)
            {
              sub_1000A1000(v150, (uint64_t *)&unk_1002122E0);
              v196 = 0;
            }
            else
            {
              v197 = Data.subdata(in:)(1, 17, *(_QWORD *)(v150 + *(int *)(v191 + 20)), *(_QWORD *)(v150 + *(int *)(v191 + 20) + 8));
              v263 = (char *)v191;
              v198 = v175;
              v199 = v178;
              v200 = v194;
              v201 = v182;
              v202 = v195;
              v204 = v203;
              sub_1000AE58C(v150, type metadata accessor for LegacyAccountMagicKeysRecord);
              v196 = Data._bridgeToObjectiveC()().super.isa;
              v205 = v204;
              v195 = v202;
              v182 = v201;
              v194 = v200;
              v178 = v199;
              v175 = v198;
              v191 = (uint64_t)v263;
              sub_1000A103C(v197, v205);
            }
            objc_msgSend(v178, "setMasterKey:", v196);

            v206 = sub_1000B4AC8();
            v207 = objc_msgSend(v182, "isFirstUnlocked");
            if ((v207 & 1) != 0)
            {
              v262 = v195;
              v263 = v178;
              v208 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v209 = v266;
              v210 = sub_1000A0A00(v266, (uint64_t)qword_100218C68);
              v211 = v265;
              v212 = (uint64_t)v264;
              (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v264, v210, v209);
              v213 = sub_100128330(v212, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v208);
              (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v212, v209);
              if (v213[2])
              {
                v214 = v274;
                sub_1000AE548((uint64_t)v213+ ((*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80)), v274, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v194 + 56))(v214, 0, 1, v191);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v194 + 56))(v274, 1, 1, v191);
              }
              swift_release(v206);
              swift_bridgeObjectRelease(v213);
              v150 = v270;
              v178 = v263;
              v180 = (void *)v272;
              v195 = v262;
            }
            else
            {
              v215 = static os_log_type_t.error.getter(v207);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v215, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v194 + 56))(v274, 1, 1, v191);
              swift_release(v206);
            }
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v195)(v274, 1, v191) == 1)
            {
              sub_1000A1000(v274, (uint64_t *)&unk_1002122E0);
              v216 = 0;
            }
            else
            {
              v217 = v274;
              v218 = Data.subdata(in:)(17, 33, *(_QWORD *)(v274 + *(int *)(v191 + 20)), *(_QWORD *)(v274 + *(int *)(v191 + 20) + 8));
              v220 = v219;
              sub_1000AE58C(v217, type metadata accessor for LegacyAccountMagicKeysRecord);
              v216 = Data._bridgeToObjectiveC()().super.isa;
              sub_1000A103C(v218, v220);
            }
            v170 = v269;
            v174 = v267;
            objc_msgSend(v178, "setMasterHint:", v216);

          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v179);
          v222 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v221 = *(_QWORD *)((v277 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v222 >= v221 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v221 > 1, v222 + 1, 1);
          ++v175;
          v223 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v222, v178);
          specialized Array._endMutation()(v223);
        }
        while (v174 != v175);
        swift_bridgeObjectRelease(v170);
        v227 = (_QWORD *)v277;
        v168 = (void *)v261;
        goto LABEL_139;
      }
    }
    swift_bridgeObjectRelease(v170);
    v227 = _swiftEmptyArrayStorage;
LABEL_139:
    swift_bridgeObjectRelease(v170);
    swift_unknownObjectWeakDestroy(v275);
    sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
    v229 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v227);
    objc_msgSend(v168, "magicPairingRecordsUpdatedWithRecords:", v229);

    swift_unknownObjectRelease(v168);
    goto LABEL_140;
  }
LABEL_83:
  v152 = sub_100113524(a1, &qword_100210CF8, type metadata accessor for DeviceRecord);
  if (v152)
  {
    v153 = v152;
    v154 = v273;
    swift_beginAccess(v273, v279, 0, 0);
    v156 = swift_unknownObjectWeakLoadStrong(v154, v155);
    if (v156)
    {
      v157 = (char *)v156;
      v278[3] = &type metadata for AudioAccessoryFeatures;
      v278[4] = sub_1000A42C4();
      v158 = isFeatureEnabled(_:)(v278);
      sub_1000A2140(v278);
      if ((v158 & 1) != 0)
      {
        v160 = swift_unknownObjectWeakLoadStrong(&v157[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v159);
        if (v160)
        {
          v161 = (void *)v160;
          type metadata accessor for AADeviceRecord(0);
          v162 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v161, "aaDeviceRecordsUpdatedWithRecords:", v162);

          swift_bridgeObjectRelease(v153);
          return (_QWORD *)swift_unknownObjectRelease(v161);
        }
      }

    }
    goto LABEL_133;
  }
  result = sub_100113524(a1, &qword_100210CF8, type metadata accessor for DeviceRecord);
  if (result)
  {
    v153 = result;
    v224 = v273;
    swift_beginAccess(v273, v278, 0, 0);
    v226 = (void *)swift_unknownObjectWeakLoadStrong(v224, v225);
    if (v226)
    {

      v55 = v153;
      return (_QWORD *)swift_bridgeObjectRelease(v55);
    }
LABEL_133:
    v55 = v153;
    return (_QWORD *)swift_bridgeObjectRelease(v55);
  }
  return result;
}

uint64_t sub_10011A6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  Class isa;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v8);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v10 = qword_100218DE0;
  v11 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100184870;
  v13 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
  v14 = swift_bridgeObjectRetain(a1);
  v15 = Array.description.getter(v14, v13);
  v17 = v16;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v17;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "records Updated: %@", 19, 2, v12);
  swift_bridgeObjectRelease(v12);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = _swiftEmptyArrayStorage;
  v48 = _swiftEmptyArrayStorage;
  sub_10014EDE8(0, v18, 0);
  v20 = v48;
  if (v18)
  {
    swift_release(v48);
    v48 = _swiftEmptyArrayStorage;
    sub_10014EE40(0, v18, 0);
    swift_release(v48);
    v48 = _swiftEmptyArrayStorage;
    sub_10014EE14(0, v18, 0);
    swift_release(v48);
    v48 = _swiftEmptyArrayStorage;
    sub_10014EE88(0, v18, 0);
    swift_release(v48);
    v48 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    swift_release(v48);
    v48 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    v21 = v48;
    return swift_release(v21);
  }
  swift_beginAccess(a2 + 16, &v48, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2 + 16, v22);
  if (!Strong
    || (v25 = (void *)Strong,
        v26 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v24), v25, !v26))
  {
    v21 = v20;
    return swift_release(v21);
  }
  v47 = (unint64_t)_swiftEmptyArrayStorage;
  v27 = v20[2];
  if (v27)
  {
    v44 = v26;
    v45 = v20;
    v28 = (uint64_t)v20 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v29 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(v20);
    v30 = (unint64_t)"Invalid AAProxCardsRecord - %@";
    v31 = 0x80000001001AB220;
    v46 = 0x80000001001AB220;
    do
    {
      sub_1000AE548(v28, (uint64_t)v7, type metadata accessor for MagicPairingSettingsRecord);
      v32 = &v7[*(int *)(v4 + 24)];
      v33 = *((_QWORD *)v32 + 1);
      if (*(_QWORD *)v32 == 0xD000000000000011 && v33 == v31
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v32, v33, 0xD000000000000011, v30 | 0x8000000000000000, 0) & 1) != 0)
      {
        sub_1000AE58C((uint64_t)v7, type metadata accessor for MagicPairingSettingsRecord);
      }
      else
      {
        v34 = v4;
        v35 = (const char *)v30;
        v36 = sub_1000BEDB4();
        v37 = sub_1000AE58C((uint64_t)v7, type metadata accessor for MagicPairingSettingsRecord);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
        v39 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v38 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v39 >= v38 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v36);
        specialized Array._endMutation()(v40);
        v30 = (unint64_t)v35;
        v4 = v34;
        v31 = v46;
      }
      v28 += v29;
      --v27;
    }
    while (v27);
    v20 = v45;
    swift_release(v45);
    v19 = (_QWORD *)v47;
    v26 = v44;
  }
  swift_release(v20);
  sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v26, "magicPairingRecordsUpdatedWithRecords:", isa);

  return swift_unknownObjectRelease(v26);
}

_QWORD *sub_10011AAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Strong;
  uint64_t v40;
  void *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSArray v70;
  _QWORD *result;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  Class isa;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  Class v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void *v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  Class v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  void *v174;
  uint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  Class v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  Class v208;
  uint64_t v209;
  uint64_t v210;
  Class v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  void *v223;
  id v224;
  uint64_t v225;
  uint64_t v226;
  id v227;
  NSString v228;
  id v229;
  id v230;
  id v231;
  id v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  Class v239;
  uint64_t v240;
  char *v241;
  __int128 v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  _QWORD v258[3];
  _BYTE v259[24];
  unint64_t v260;
  _QWORD v261[5];
  unint64_t v262;

  v4 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v4);
  v256 = (char *)&v240 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v253 = (uint64_t)&v240 - v7;
  v8 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v8);
  v244 = (char *)&v240 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  *(_QWORD *)&v242 = *(_QWORD *)(v243 - 8);
  __chkstk_darwin(v243);
  v254 = (uint64_t)&v240 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DeviceSupportInformationRecord(0);
  v240 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v241 = (char *)&v240 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = type metadata accessor for DeviceRecord(0);
  v255 = *(_QWORD *)(v250 - 8);
  __chkstk_darwin(v250);
  v14 = (char *)&v240 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v249 = type metadata accessor for URL(0);
  v248 = *(_QWORD *)(v249 - 8);
  __chkstk_darwin(v249);
  v247 = (char *)&v240 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v16);
  v251 = (uint64_t)&v240 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = type metadata accessor for MagicPairingSettingsRecord(0);
  v252 = *(_QWORD *)(v257 - 8);
  __chkstk_darwin(v257);
  v19 = (char *)&v240 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v246 = (uint64_t *)((char *)&v240 - v21);
  __chkstk_darwin(v22);
  v24 = (uint64_t)&v240 - v23;
  v25 = a2 + 16;
  v27 = static os_log_type_t.default.getter(v26);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v28 = qword_100218DE0;
  v29 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v30 = swift_allocObject(v29, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100184870;
  v31 = type metadata accessor for AAProxCardsRecord(0);
  v32 = swift_bridgeObjectRetain(a1);
  v33 = Array.description.getter(v32, v31);
  v35 = v34;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  *(_QWORD *)(v30 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v30 + 32) = v33;
  *(_QWORD *)(v30 + 40) = v35;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "records Updated: %@", 19, 2, v30);
  swift_bridgeObjectRelease(v30);
  v36 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EDE8);
  if (v36)
  {
    v37 = v36;
    swift_beginAccess(v25, v261, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v25, v38);
    if (Strong)
    {
      v41 = (void *)Strong;
      v42 = (char *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v40);

      if (v42)
      {
        v43 = _swiftEmptyArrayStorage;
        v262 = (unint64_t)_swiftEmptyArrayStorage;
        v44 = *(_QWORD *)(v37 + 16);
        if (v44)
        {
          v255 = v37;
          v256 = v42;
          v45 = v37 + ((*(unsigned __int8 *)(v252 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v252 + 80));
          v46 = *(_QWORD *)(v252 + 72);
          swift_bridgeObjectRetain(v37);
          do
          {
            sub_1000AE548(v45, v24, type metadata accessor for MagicPairingSettingsRecord);
            v47 = (_QWORD *)(v24 + *(int *)(v257 + 24));
            v48 = v47[1];
            if (*v47 == 0xD000000000000011 && v48 == 0x80000001001AB220
              || (_stringCompareWithSmolCheck(_:_:expecting:)(*v47, v48, 0xD000000000000011, 0x80000001001AB220, 0) & 1) != 0)
            {
              sub_1000AE58C(v24, type metadata accessor for MagicPairingSettingsRecord);
            }
            else
            {
              v49 = sub_1000BEDB4();
              v50 = sub_1000AE58C(v24, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
              v52 = *(_QWORD *)((v262 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v51 = *(_QWORD *)((v262 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v52 >= v51 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
              v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v49);
              specialized Array._endMutation()(v53);
            }
            v45 += v46;
            --v44;
          }
          while (v44);
          v37 = v255;
          swift_bridgeObjectRelease(v255);
          v43 = (_QWORD *)v262;
          v42 = v256;
        }
        swift_bridgeObjectRelease(v37);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        v70.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        objc_msgSend(v42, "magicPairingRecordsUpdatedWithRecords:", v70.super.isa);
LABEL_27:

        return (_QWORD *)swift_unknownObjectRelease(v42);
      }
    }
    return (_QWORD *)swift_bridgeObjectRelease(v37);
  }
  v54 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE40);
  v55 = v25;
  v245 = v25;
  if (v54)
  {
    v37 = v54;
    swift_beginAccess(v25, v261, 0, 0);
    v57 = swift_unknownObjectWeakLoadStrong(v25, v56);
    if (v57)
    {
      v59 = (void *)v57;
      v60 = (void *)swift_unknownObjectWeakLoadStrong(v57 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v58);

      if (v60)
      {
        v61 = _swiftEmptyArrayStorage;
        v262 = (unint64_t)_swiftEmptyArrayStorage;
        v62 = *(_QWORD *)(v37 + 16);
        if (v62)
        {
          v63 = v37 + ((*(unsigned __int8 *)(v255 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v255 + 80));
          v64 = *(_QWORD *)(v255 + 72);
          v243 = v37;
          swift_bridgeObjectRetain(v37);
          do
          {
            sub_1000AE548(v63, (uint64_t)v14, type metadata accessor for DeviceRecord);
            v65 = sub_1000B7110();
            v66 = sub_1000AE58C((uint64_t)v14, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v66);
            v68 = *(_QWORD *)((v262 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v67 = *(_QWORD *)((v262 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v68 >= v67 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
            v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v65);
            specialized Array._endMutation()(v69);
            v63 += v64;
            --v62;
          }
          while (v62);
          v37 = v243;
          swift_bridgeObjectRelease(v243);
          v61 = (_QWORD *)v262;
        }
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v61);
        objc_msgSend(v60, "devicesUpdatedWithRecords:", isa);

        swift_unknownObjectRelease(v60);
        v55 = v245;
      }
    }
    v89 = *(char **)(v37 + 16);
    v90 = v252;
    if (!v89)
      return (_QWORD *)swift_bridgeObjectRelease(v37);
    v91 = v255;
    v256 = (char *)(v37 + ((*(unsigned __int8 *)(v255 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v255 + 80)));
    v243 = v37;
    swift_bridgeObjectRetain(v37);
    swift_beginAccess(v55, &v262, 0, 0);
    swift_beginAccess(v55, v259, 0, 0);
    v92 = 0;
    v93 = *(_QWORD *)(v91 + 72);
    v253 = (uint64_t)"Invalid AAProxCardsRecord - %@";
    v254 = 0x80000001001AB220;
    v255 = v93;
    v242 = xmmword_100187640;
    v94 = v257;
    v95 = v250;
    v244 = v89;
    while (1)
    {
      v97 = &v256[v255 * v92 + *(int *)(v95 + 24)];
      v98 = *((_QWORD *)v97 + 1);
      if ((*(_QWORD *)v97 != 0xD000000000000011 || v98 != v254)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v97, v98, 0xD000000000000011, v253 | 0x8000000000000000, 0) & 1) == 0)
      {
        v100 = swift_unknownObjectWeakLoadStrong(v55, v99);
        if (v100)
        {
          v101 = (void *)v100;
          v102 = sub_1000B4AC8();

          v103 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
          if ((v103 & 1) != 0)
          {
            v104 = sub_100129690();
            if (qword_100210160 != -1)
              swift_once(&qword_100210160, sub_1000C81B8);
            v105 = v249;
            v106 = sub_1000A0A00(v249, (uint64_t)qword_100218C90);
            v107 = v248;
            v108 = (uint64_t)v247;
            (*(void (**)(char *, uint64_t, uint64_t))(v248 + 16))(v247, v106, v105);
            v109 = sub_100128330(v108, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
            swift_release(v104);
            (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v108, v105);
            v94 = v257;
            v55 = v245;
            v90 = v252;
          }
          else
          {
            v110 = static os_log_type_t.error.getter(v103);
            if (qword_1002101E0 != -1)
              swift_once(&qword_1002101E0, sub_1001687B0);
            v111 = v110;
            v109 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)(v111, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
          }
          swift_release(v102);
          v112 = v109[2];
          if (v112)
          {
            v113 = (uint64_t)v109
                 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
            swift_bridgeObjectRetain(v109);
            v114 = *(_QWORD *)(v90 + 72);
            while (1)
            {
              sub_1000AE548(v113, (uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              v115 = &v19[*(int *)(v94 + 24)];
              v116 = *((_QWORD *)v115 + 1);
              v117 = *((_QWORD *)v97 + 1);
              v118 = *(_QWORD *)v115 == *(_QWORD *)v97 && v116 == v117;
              if (v118
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v115, v116, *(_QWORD *)v97, v117, 0) & 1) != 0)
              {
                break;
              }
              sub_1000AE58C((uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              v113 += v114;
              if (!--v112)
              {
                swift_bridgeObjectRelease(v109);
                v55 = v245;
                v90 = v252;
                goto LABEL_64;
              }
            }
            swift_bridgeObjectRelease(v109);
            v96 = v251;
            sub_1000C6CD0((uint64_t)v19, v251, type metadata accessor for MagicPairingSettingsRecord);
            v90 = v252;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v252 + 56))(v96, 0, 1, v94);
            v55 = v245;
          }
          else
          {
LABEL_64:
            v96 = v251;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v251, 1, 1, v94);
          }
          swift_bridgeObjectRelease(v109);
          v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v96, 1, v94);
          v95 = v250;
          v89 = v244;
          if (v119 != 1)
          {
            v120 = (uint64_t)v246;
            sub_1000C6CD0(v96, (uint64_t)v246, type metadata accessor for MagicPairingSettingsRecord);
            v122 = swift_unknownObjectWeakLoadStrong(v55, v121);
            if (v122)
            {
              v124 = (void *)v122;
              v125 = (void *)swift_unknownObjectWeakLoadStrong(v122 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v123);

              if (v125)
              {
                v126 = sub_1000A0980(&qword_100211998);
                v127 = swift_allocObject(v126, 40, 7);
                *(_OWORD *)(v127 + 16) = v242;
                v128 = sub_1000BEDB4();
                *(_QWORD *)(v127 + 32) = v128;
                v258[0] = v127;
                specialized Array._endMutation()(v128);
                v129 = v258[0];
                sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
                v130 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v129);
                objc_msgSend(v125, "magicPairingRecordsUpdatedWithRecords:", v130);
                swift_unknownObjectRelease(v125);

                v95 = v250;
              }
            }
            sub_1000AE58C(v120, type metadata accessor for MagicPairingSettingsRecord);
            v89 = v244;
            goto LABEL_43;
          }
        }
        else
        {
          v96 = v251;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v251, 1, 1, v94);
        }
        sub_1000A1000(v96, (uint64_t *)&unk_100212190);
      }
LABEL_43:
      if ((char *)++v92 == v89)
        return (_QWORD *)swift_bridgeObjectRelease_n(v243, 2);
    }
  }
  v72 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE14);
  if (v72)
  {
    v73 = v72;
    swift_beginAccess(v25, v261, 0, 0);
    v75 = swift_unknownObjectWeakLoadStrong(v25, v74);
    if (v75)
    {
      v77 = (void *)v75;
      v42 = (char *)swift_unknownObjectWeakLoadStrong(v75 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v76);

      if (v42)
      {
        v78 = _swiftEmptyArrayStorage;
        v262 = (unint64_t)_swiftEmptyArrayStorage;
        v79 = *(_QWORD *)(v73 + 16);
        if (v79)
        {
          v80 = v73 + ((*(unsigned __int8 *)(v240 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80));
          v81 = *(_QWORD *)(v240 + 72);
          swift_bridgeObjectRetain(v73);
          v82 = (uint64_t)v241;
          do
          {
            sub_1000AE548(v80, v82, type metadata accessor for DeviceSupportInformationRecord);
            v83 = sub_1000BB014();
            v84 = sub_1000AE58C(v82, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v84);
            v86 = *(_QWORD *)((v262 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v85 = *(_QWORD *)((v262 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v86 >= v85 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1);
            v87 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, v83);
            specialized Array._endMutation()(v87);
            v80 += v81;
            --v79;
          }
          while (v79);
          swift_bridgeObjectRelease(v73);
          v78 = (_QWORD *)v262;
        }
        swift_bridgeObjectRelease(v73);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v70.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v78);
        objc_msgSend(v42, "deviceSupportInformationRecordsUpdatedWithRecords:", v70.super.isa);
        goto LABEL_27;
      }
    }
    return (_QWORD *)swift_bridgeObjectRelease(v73);
  }
  v131 = sub_100113764(a1);
  if (v131)
  {
    v132 = v131;
    if (v131[2])
    {
      v133 = v242;
      v134 = v244;
      sub_1000AE548((uint64_t)v131 + ((*(unsigned __int8 *)(v242 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80)), (uint64_t)v244, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v135 = 0;
      v14 = (char *)v253;
      v24 = v243;
    }
    else
    {
      v135 = 1;
      v14 = (char *)v253;
      v134 = v244;
      v24 = v243;
      v133 = v242;
    }
    (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v133 + 56))(v134, v135, 1, v24);
    swift_bridgeObjectRelease(v132);
    if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v133 + 48))(v134, 1, v24) != 1)
    {
      a1 = v254;
      sub_1000C6CD0((uint64_t)v134, v254, type metadata accessor for LegacyMagicPairingSettingsRecords);
      swift_beginAccess(v25, v261, 0, 0);
      v140 = swift_unknownObjectWeakLoadStrong(v25, v139);
      if (!v140
        || (v142 = (void *)v140,
            v143 = (char *)swift_unknownObjectWeakLoadStrong(v140 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v141), v142, !v143))
      {
LABEL_147:
        swift_beginAccess(v25, v258, 0, 0);
        v214 = swift_unknownObjectWeakLoadStrong(v25, v213);
        if (!v214)
          return (_QWORD *)sub_1000AE58C(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
        v216 = (void *)v214;
        v217 = (void *)swift_unknownObjectWeakLoadStrong(v214 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v215);

        if (!v217)
          return (_QWORD *)sub_1000AE58C(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
        sub_1000E2648();
        v219 = v218;
        v260 = (unint64_t)_swiftEmptyArrayStorage;
        if ((unint64_t)v218 >> 62)
        {
          if (v218 < 0)
            v238 = v218;
          else
            v238 = v218 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v218);
          result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v238);
          v220 = (uint64_t)result;
          if (result)
          {
LABEL_151:
            v257 = (uint64_t)v217;
            if (v220 >= 1)
            {
              v221 = 0;
              do
              {
                if ((v219 & 0xC000000000000001) != 0)
                  v222 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v221, v219);
                else
                  v222 = *(id *)(v219 + 8 * v221 + 32);
                v223 = v222;
                v224 = objc_msgSend(v222, "bluetoothAddress");
                static String._unconditionallyBridgeFromObjectiveC(_:)(v224);
                v226 = v225;

                v227 = objc_allocWithZone((Class)BTCloudDevice);
                v228 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(v226);
                v229 = objc_msgSend(v227, "initWithBluetoothAddress:", v228);

                v230 = objc_msgSend(v223, "name");
                objc_msgSend(v229, "setNickname:", v230);

                v231 = objc_msgSend(v223, "productID");
                objc_msgSend(v229, "setProductID:", v231);

                v232 = objc_msgSend(v223, "vendorID");
                objc_msgSend(v229, "setVendorID:", v232);

                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v233);
                v235 = *(_QWORD *)((v260 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v234 = *(_QWORD *)((v260 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v235 >= v234 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v234 > 1, v235 + 1, 1);
                ++v221;
                v236 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v235, v229);
                specialized Array._endMutation()(v236);
                a1 = v254;
              }
              while (v220 != v221);
              swift_bridgeObjectRelease(v219);
              v237 = (_QWORD *)v260;
              v217 = (void *)v257;
              goto LABEL_165;
            }
LABEL_169:
            __break(1u);
            return result;
          }
        }
        else
        {
          v220 = *(_QWORD *)((v218 & 0xFFFFFFFFFFFFF8) + 0x10);
          result = (_QWORD *)swift_bridgeObjectRetain(v218);
          if (v220)
            goto LABEL_151;
        }
        swift_bridgeObjectRelease(v219);
        v237 = _swiftEmptyArrayStorage;
LABEL_165:
        swift_bridgeObjectRelease(v219);
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        v239 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v237);
        objc_msgSend(v217, "devicesUpdatedWithRecords:", v239);
        swift_unknownObjectRelease(v217);

        return (_QWORD *)sub_1000AE58C(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }
      v244 = v143;
      sub_1000E2648();
      v24 = v144;
      swift_beginAccess(v25, &v262, 0, 0);
      v146 = (void *)swift_unknownObjectWeakLoadStrong(v25, v145);
      swift_unknownObjectWeakInit(v258, v146);

      v260 = (unint64_t)_swiftEmptyArrayStorage;
      if (!((unint64_t)v24 >> 62))
      {
        v147 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = (_QWORD *)swift_bridgeObjectRetain(v24);
        if (!v147)
        {
LABEL_145:
          swift_bridgeObjectRelease(v24);
          v197 = _swiftEmptyArrayStorage;
LABEL_146:
          swift_bridgeObjectRelease(v24);
          swift_unknownObjectWeakDestroy(v258);
          sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
          v211 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v197);
          v212 = v244;
          objc_msgSend(v244, "magicPairingRecordsUpdatedWithRecords:", v211);

          swift_unknownObjectRelease(v212);
          goto LABEL_147;
        }
LABEL_92:
        if (v147 < 1)
        {
          __break(1u);
          goto LABEL_169;
        }
        v255 = v24 & 0xC000000000000001;
        swift_beginAccess(v258, v259, 0, 0);
        v148 = 0;
        v252 = v24;
        v251 = v147;
        do
        {
          if (v255)
            v149 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v148, v24);
          else
            v149 = *(id *)(v24 + 8 * v148 + 32);
          v151 = v149;
          v152 = swift_unknownObjectWeakLoadStrong(v258, v150);
          if (v152)
          {
            v153 = (void *)v152;
            v154 = sub_1000B4AC8();
            v155 = (void *)objc_opt_self(BTSystemConfiguration);
            v156 = objc_msgSend(v155, "isFirstUnlocked");
            v257 = (uint64_t)v153;
            if ((_DWORD)v156)
            {
              v157 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v158 = v249;
              v159 = sub_1000A0A00(v249, (uint64_t)qword_100218C68);
              v160 = v248;
              v161 = (uint64_t)v247;
              (*(void (**)(char *, uint64_t, uint64_t))(v248 + 16))(v247, v159, v158);
              v162 = sub_100128330(v161, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v157);
              (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v161, v158);
              v163 = v162[2];
              v164 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              v165 = *(_QWORD *)(v164 - 8);
              if (v163)
              {
                v14 = (char *)v253;
                sub_1000AE548((uint64_t)v162+ ((*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80)), v253, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v14, 0, 1, v164);
              }
              else
              {
                v14 = (char *)v253;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v165 + 56))(v253, 1, 1, v164);
              }
              swift_release(v154);
              swift_bridgeObjectRelease(v162);
              v153 = (void *)v257;
            }
            else
            {
              v166 = static os_log_type_t.error.getter(v156);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v166, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              v164 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56))(v14, 1, 1, v164);
              swift_release(v154);
            }
            type metadata accessor for LegacyAccountMagicKeysRecord(0);
            v167 = *(_QWORD *)(v164 - 8);
            v168 = *(uint64_t **)(v167 + 48);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v168)(v14, 1, v164) == 1)
            {
              sub_1000A1000((uint64_t)v14, (uint64_t *)&unk_1002122E0);
              v169 = 0;
            }
            else
            {
              v170 = Data.subdata(in:)(1, 17, *(_QWORD *)&v14[*(int *)(v164 + 20)], *(_QWORD *)&v14[*(int *)(v164 + 20) + 8]);
              v250 = v164;
              v171 = v148;
              v172 = v151;
              v173 = v167;
              v174 = v155;
              v175 = v168;
              v177 = v176;
              sub_1000AE58C((uint64_t)v14, type metadata accessor for LegacyAccountMagicKeysRecord);
              v169 = Data._bridgeToObjectiveC()().super.isa;
              v178 = v177;
              v168 = v175;
              v155 = v174;
              v167 = v173;
              v151 = v172;
              v148 = v171;
              v164 = v250;
              sub_1000A103C(v170, v178);
            }
            objc_msgSend(v151, "setMasterKey:", v169);

            v179 = sub_1000B4AC8();
            v180 = objc_msgSend(v155, "isFirstUnlocked");
            if ((_DWORD)v180)
            {
              v246 = v168;
              v250 = (uint64_t)v151;
              v181 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v182 = v249;
              v183 = sub_1000A0A00(v249, (uint64_t)qword_100218C68);
              v184 = v248;
              v185 = (uint64_t)v247;
              (*(void (**)(char *, uint64_t, uint64_t))(v248 + 16))(v247, v183, v182);
              v186 = sub_100128330(v185, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v181);
              (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v185, v182);
              if (v186[2])
              {
                v187 = (uint64_t)v256;
                sub_1000AE548((uint64_t)v186+ ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80)), (uint64_t)v256, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v167 + 56))(v187, 0, 1, v164);
              }
              else
              {
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v167 + 56))(v256, 1, 1, v164);
              }
              swift_release(v179);
              swift_bridgeObjectRelease(v186);
              v14 = (char *)v253;
              v151 = (void *)v250;
              v153 = (void *)v257;
              v168 = v246;
            }
            else
            {
              v188 = static os_log_type_t.error.getter(v180);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v188, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v167 + 56))(v256, 1, 1, v164);
              swift_release(v179);
            }
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v168)(v256, 1, v164) == 1)
            {
              sub_1000A1000((uint64_t)v256, (uint64_t *)&unk_1002122E0);
              v189 = 0;
            }
            else
            {
              v190 = (uint64_t)v256;
              v191 = Data.subdata(in:)(17, 33, *(_QWORD *)&v256[*(int *)(v164 + 20)], *(_QWORD *)&v256[*(int *)(v164 + 20) + 8]);
              v193 = v192;
              sub_1000AE58C(v190, type metadata accessor for LegacyAccountMagicKeysRecord);
              v189 = Data._bridgeToObjectiveC()().super.isa;
              sub_1000A103C(v191, v193);
            }
            v24 = v252;
            v147 = v251;
            objc_msgSend(v151, "setMasterHint:", v189);

          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v152);
          v195 = *(_QWORD *)((v260 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v194 = *(_QWORD *)((v260 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v195 >= v194 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v194 > 1, v195 + 1, 1);
          ++v148;
          v196 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v195, v151);
          specialized Array._endMutation()(v196);
        }
        while (v147 != v148);
        swift_bridgeObjectRelease(v24);
        v197 = (_QWORD *)v260;
        v25 = v245;
        a1 = v254;
        goto LABEL_146;
      }
LABEL_141:
      if (v24 < 0)
        v210 = v24;
      else
        v210 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v24);
      result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v210);
      v147 = (uint64_t)result;
      if (!result)
        goto LABEL_145;
      goto LABEL_92;
    }
    sub_1000A1000((uint64_t)v134, &qword_100210CD8);
    v55 = v25;
  }
  v261[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v198 = a1;
    else
      v198 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v24 = _CocoaArrayWrapper.endIndex.getter(v198);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v24);
    swift_bridgeObjectRetain(a1);
    v199 = _CocoaArrayWrapper.endIndex.getter(v198);
    swift_bridgeObjectRelease(a1);
    if (v199)
      goto LABEL_82;
  }
  else
  {
    specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_82:
      if ((a1 & 0xC000000000000001) != 0)
      {
        v209 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        swift_unknownObjectRelease(v209);
LABEL_84:
        swift_release(v261[0]);
        result = sub_100113280(a1);
        if (result)
        {
          v136 = result;
          swift_beginAccess(v55, v261, 0, 0);
          v138 = (void *)swift_unknownObjectWeakLoadStrong(v55, v137);
          if (v138)

          return (_QWORD *)swift_bridgeObjectRelease(v136);
        }
        return result;
      }
      if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_84;
      __break(1u);
      goto LABEL_141;
    }
  }
  v200 = v261[0];
  swift_beginAccess(v55, &v262, 0, 0);
  v202 = swift_unknownObjectWeakLoadStrong(v55, v201);
  if (v202)
  {
    v203 = (char *)v202;
    v261[3] = &type metadata for AudioAccessoryFeatures;
    v261[4] = sub_1000A42C4();
    v204 = isFeatureEnabled(_:)(v261);
    sub_1000A2140(v261);
    if ((v204 & 1) != 0)
    {
      v206 = swift_unknownObjectWeakLoadStrong(&v203[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v205);
      if (v206)
      {
        v207 = (void *)v206;
        type metadata accessor for AADeviceRecord(0);
        v208 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v207, "aaDeviceRecordsUpdatedWithRecords:", v208);

        swift_release(v200);
        return (_QWORD *)swift_unknownObjectRelease(v207);
      }
    }

  }
  return (_QWORD *)swift_release(v200);
}

uint64_t sub_10011C54C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Strong;
  uint64_t v40;
  void *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSArray v70;
  uint64_t result;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  Class isa;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  Class v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  Class v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  void *v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  Class v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  void *v183;
  uint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  Class v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  Class v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  id v226;
  void *v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  id v231;
  NSString v232;
  id v233;
  id v234;
  id v235;
  id v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  Class v243;
  uint64_t v244;
  char *v245;
  __int128 v246;
  uint64_t v247;
  char *v248;
  uint64_t *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  _QWORD v262[3];
  _BYTE v263[24];
  unint64_t v264;
  _QWORD v265[5];
  unint64_t v266;

  v4 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v4);
  v260 = (char *)&v244 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v256 = (uint64_t)&v244 - v7;
  v8 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v8);
  v248 = (char *)&v244 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  *(_QWORD *)&v246 = *(_QWORD *)(v247 - 8);
  __chkstk_darwin(v247);
  v258 = (uint64_t)&v244 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DeviceSupportInformationRecord(0);
  v244 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v245 = (char *)&v244 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = type metadata accessor for DeviceRecord(0);
  v259 = *(_QWORD *)(v253 - 8);
  __chkstk_darwin(v253);
  v14 = (char *)&v244 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = type metadata accessor for URL(0);
  v251 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252);
  v250 = (char *)&v244 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v16);
  v254 = (uint64_t)&v244 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = type metadata accessor for MagicPairingSettingsRecord(0);
  v255 = *(_QWORD *)(v261 - 8);
  __chkstk_darwin(v261);
  v19 = (char *)&v244 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v249 = (uint64_t *)((char *)&v244 - v21);
  __chkstk_darwin(v22);
  v24 = (uint64_t)&v244 - v23;
  v257 = a2 + 16;
  v26 = static os_log_type_t.default.getter(v25);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v27 = qword_100218DE0;
  v28 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v29 = swift_allocObject(v28, 72, 7);
  *(_OWORD *)(v29 + 16) = xmmword_100184870;
  v30 = type metadata accessor for AADeviceRecord(0);
  v31 = swift_bridgeObjectRetain(a1);
  v32 = Array.description.getter(v31, v30);
  v34 = v33;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v29 + 56) = &type metadata for String;
  *(_QWORD *)(v29 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v29 + 32) = v32;
  *(_QWORD *)(v29 + 40) = v34;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "records Updated: %@", 19, 2, v29);
  swift_bridgeObjectRelease(v29);
  v35 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EDE8);
  if (v35)
  {
    v36 = v35;
    v37 = v257;
    swift_beginAccess(v257, v265, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v37, v38);
    if (Strong)
    {
      v41 = (void *)Strong;
      v42 = (char *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v40);

      if (v42)
      {
        v43 = _swiftEmptyArrayStorage;
        v266 = (unint64_t)_swiftEmptyArrayStorage;
        v44 = *(_QWORD *)(v36 + 16);
        if (v44)
        {
          v260 = v42;
          v45 = v36 + ((*(unsigned __int8 *)(v255 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v255 + 80));
          v46 = *(_QWORD *)(v255 + 72);
          v259 = v36;
          swift_bridgeObjectRetain(v36);
          do
          {
            sub_1000AE548(v45, v24, type metadata accessor for MagicPairingSettingsRecord);
            v47 = (_QWORD *)(v24 + *(int *)(v261 + 24));
            v48 = v47[1];
            if (*v47 == 0xD000000000000011 && v48 == 0x80000001001AB220
              || (_stringCompareWithSmolCheck(_:_:expecting:)(*v47, v48, 0xD000000000000011, 0x80000001001AB220, 0) & 1) != 0)
            {
              sub_1000AE58C(v24, type metadata accessor for MagicPairingSettingsRecord);
            }
            else
            {
              v49 = sub_1000BEDB4();
              v50 = sub_1000AE58C(v24, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
              v52 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v51 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v52 >= v51 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
              v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v49);
              specialized Array._endMutation()(v53);
            }
            v45 += v46;
            --v44;
          }
          while (v44);
          v36 = v259;
          swift_bridgeObjectRelease(v259);
          v43 = (_QWORD *)v266;
          v42 = v260;
        }
        swift_bridgeObjectRelease(v36);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        v70.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v43);
        objc_msgSend(v42, "magicPairingRecordsUpdatedWithRecords:", v70.super.isa);
LABEL_27:

        return swift_unknownObjectRelease(v42);
      }
    }
    return swift_bridgeObjectRelease(v36);
  }
  v54 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE40);
  v55 = v257;
  if (v54)
  {
    v36 = v54;
    swift_beginAccess(v257, v265, 0, 0);
    v57 = swift_unknownObjectWeakLoadStrong(v55, v56);
    if (v57)
    {
      v59 = (void *)v57;
      v60 = (void *)swift_unknownObjectWeakLoadStrong(v57 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v58);

      if (v60)
      {
        v61 = _swiftEmptyArrayStorage;
        v266 = (unint64_t)_swiftEmptyArrayStorage;
        v62 = *(_QWORD *)(v36 + 16);
        if (v62)
        {
          v63 = v36 + ((*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80));
          v64 = *(_QWORD *)(v259 + 72);
          v247 = v36;
          swift_bridgeObjectRetain(v36);
          do
          {
            sub_1000AE548(v63, (uint64_t)v14, type metadata accessor for DeviceRecord);
            v65 = sub_1000B7110();
            v66 = sub_1000AE58C((uint64_t)v14, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v66);
            v68 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v67 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v68 >= v67 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
            v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v65);
            specialized Array._endMutation()(v69);
            v63 += v64;
            --v62;
          }
          while (v62);
          v36 = v247;
          swift_bridgeObjectRelease(v247);
          v61 = (_QWORD *)v266;
        }
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v61);
        objc_msgSend(v60, "devicesUpdatedWithRecords:", isa);

        swift_unknownObjectRelease(v60);
        v55 = v257;
      }
    }
    v89 = *(char **)(v36 + 16);
    v90 = v255;
    if (!v89)
      return swift_bridgeObjectRelease(v36);
    v91 = v259;
    v260 = (char *)(v36 + ((*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80)));
    v247 = v36;
    swift_bridgeObjectRetain(v36);
    swift_beginAccess(v55, &v266, 0, 0);
    swift_beginAccess(v55, v263, 0, 0);
    v92 = 0;
    v93 = *(_QWORD *)(v91 + 72);
    v256 = (uint64_t)"Invalid AAProxCardsRecord - %@";
    v258 = 0x80000001001AB220;
    v259 = v93;
    v246 = xmmword_100187640;
    v94 = v261;
    v95 = v253;
    v248 = v89;
    while (1)
    {
      v97 = &v260[v259 * v92 + *(int *)(v95 + 24)];
      v98 = *((_QWORD *)v97 + 1);
      if ((*(_QWORD *)v97 != 0xD000000000000011 || v98 != v258)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v97, v98, 0xD000000000000011, v256 | 0x8000000000000000, 0) & 1) == 0)
      {
        v100 = swift_unknownObjectWeakLoadStrong(v55, v99);
        if (v100)
        {
          v101 = (void *)v100;
          v102 = sub_1000B4AC8();

          v103 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
          if ((v103 & 1) != 0)
          {
            v104 = sub_100129690();
            if (qword_100210160 != -1)
              swift_once(&qword_100210160, sub_1000C81B8);
            v105 = v252;
            v106 = sub_1000A0A00(v252, (uint64_t)qword_100218C90);
            v107 = v251;
            v108 = (uint64_t)v250;
            (*(void (**)(char *, uint64_t, uint64_t))(v251 + 16))(v250, v106, v105);
            v109 = sub_100128330(v108, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
            swift_release(v104);
            (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v108, v105);
            v94 = v261;
            v55 = v257;
            v90 = v255;
          }
          else
          {
            v110 = static os_log_type_t.error.getter(v103);
            if (qword_1002101E0 != -1)
              swift_once(&qword_1002101E0, sub_1001687B0);
            v111 = v110;
            v109 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)(v111, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
          }
          swift_release(v102);
          v112 = v109[2];
          if (v112)
          {
            v113 = (uint64_t)v109
                 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
            swift_bridgeObjectRetain(v109);
            v114 = *(_QWORD *)(v90 + 72);
            while (1)
            {
              sub_1000AE548(v113, (uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              v115 = &v19[*(int *)(v94 + 24)];
              v116 = *((_QWORD *)v115 + 1);
              v117 = *((_QWORD *)v97 + 1);
              v118 = *(_QWORD *)v115 == *(_QWORD *)v97 && v116 == v117;
              if (v118
                || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v115, v116, *(_QWORD *)v97, v117, 0) & 1) != 0)
              {
                break;
              }
              sub_1000AE58C((uint64_t)v19, type metadata accessor for MagicPairingSettingsRecord);
              v113 += v114;
              if (!--v112)
              {
                swift_bridgeObjectRelease(v109);
                v55 = v257;
                v90 = v255;
                goto LABEL_64;
              }
            }
            swift_bridgeObjectRelease(v109);
            v96 = v254;
            sub_1000C6CD0((uint64_t)v19, v254, type metadata accessor for MagicPairingSettingsRecord);
            v90 = v255;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v255 + 56))(v96, 0, 1, v94);
            v55 = v257;
          }
          else
          {
LABEL_64:
            v96 = v254;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v254, 1, 1, v94);
          }
          swift_bridgeObjectRelease(v109);
          v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v96, 1, v94);
          v95 = v253;
          v89 = v248;
          if (v119 != 1)
          {
            v120 = (uint64_t)v249;
            sub_1000C6CD0(v96, (uint64_t)v249, type metadata accessor for MagicPairingSettingsRecord);
            v122 = swift_unknownObjectWeakLoadStrong(v55, v121);
            if (v122)
            {
              v124 = (void *)v122;
              v125 = (void *)swift_unknownObjectWeakLoadStrong(v122 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v123);

              if (v125)
              {
                v126 = sub_1000A0980(&qword_100211998);
                v127 = swift_allocObject(v126, 40, 7);
                *(_OWORD *)(v127 + 16) = v246;
                v128 = sub_1000BEDB4();
                *(_QWORD *)(v127 + 32) = v128;
                v262[0] = v127;
                specialized Array._endMutation()(v128);
                v129 = v262[0];
                sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
                v130 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v129);
                objc_msgSend(v125, "magicPairingRecordsUpdatedWithRecords:", v130);
                swift_unknownObjectRelease(v125);

                v95 = v253;
              }
            }
            sub_1000AE58C(v120, type metadata accessor for MagicPairingSettingsRecord);
            v89 = v248;
            goto LABEL_43;
          }
        }
        else
        {
          v96 = v254;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v254, 1, 1, v94);
        }
        sub_1000A1000(v96, (uint64_t *)&unk_100212190);
      }
LABEL_43:
      if ((char *)++v92 == v89)
        return swift_bridgeObjectRelease_n(v247, 2);
    }
  }
  v72 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE14);
  if (v72)
  {
    v73 = v72;
    swift_beginAccess(v55, v265, 0, 0);
    v75 = swift_unknownObjectWeakLoadStrong(v55, v74);
    if (v75)
    {
      v77 = (void *)v75;
      v42 = (char *)swift_unknownObjectWeakLoadStrong(v75 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v76);

      if (v42)
      {
        v78 = _swiftEmptyArrayStorage;
        v266 = (unint64_t)_swiftEmptyArrayStorage;
        v79 = *(_QWORD *)(v73 + 16);
        if (v79)
        {
          v80 = v73 + ((*(unsigned __int8 *)(v244 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v244 + 80));
          v81 = *(_QWORD *)(v244 + 72);
          swift_bridgeObjectRetain(v73);
          v82 = (uint64_t)v245;
          do
          {
            sub_1000AE548(v80, v82, type metadata accessor for DeviceSupportInformationRecord);
            v83 = sub_1000BB014();
            v84 = sub_1000AE58C(v82, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v84);
            v86 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v85 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v86 >= v85 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1);
            v87 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, v83);
            specialized Array._endMutation()(v87);
            v80 += v81;
            --v79;
          }
          while (v79);
          swift_bridgeObjectRelease(v73);
          v78 = (_QWORD *)v266;
        }
        swift_bridgeObjectRelease(v73);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v70.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v78);
        objc_msgSend(v42, "deviceSupportInformationRecordsUpdatedWithRecords:", v70.super.isa);
        goto LABEL_27;
      }
    }
    return swift_bridgeObjectRelease(v73);
  }
  v131 = sub_100113764(a1);
  if (v131)
  {
    v132 = v131;
    if (v131[2])
    {
      v133 = v246;
      v134 = v248;
      sub_1000AE548((uint64_t)v131 + ((*(unsigned __int8 *)(v246 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80)), (uint64_t)v248, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v135 = 0;
      v14 = (char *)v256;
      v24 = v247;
    }
    else
    {
      v135 = 1;
      v14 = (char *)v256;
      v134 = v248;
      v24 = v247;
      v133 = v246;
    }
    (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v133 + 56))(v134, v135, 1, v24);
    swift_bridgeObjectRelease(v132);
    if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v133 + 48))(v134, 1, v24) != 1)
    {
      a1 = v258;
      sub_1000C6CD0((uint64_t)v134, v258, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v146 = v257;
      swift_beginAccess(v257, v265, 0, 0);
      v148 = swift_unknownObjectWeakLoadStrong(v146, v147);
      if (!v148
        || (v150 = (void *)v148,
            v151 = (char *)swift_unknownObjectWeakLoadStrong(v148 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v149), v150, !v151))
      {
LABEL_148:
        v216 = v257;
        swift_beginAccess(v257, v262, 0, 0);
        v218 = swift_unknownObjectWeakLoadStrong(v216, v217);
        if (!v218)
          return sub_1000AE58C(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
        v220 = (void *)v218;
        v221 = (void *)swift_unknownObjectWeakLoadStrong(v218 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v219);

        if (!v221)
          return sub_1000AE58C(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
        sub_1000E2648();
        v223 = v222;
        v264 = (unint64_t)_swiftEmptyArrayStorage;
        if ((unint64_t)v222 >> 62)
        {
          if (v222 < 0)
            v242 = v222;
          else
            v242 = v222 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v222);
          result = _CocoaArrayWrapper.endIndex.getter(v242);
          v224 = result;
          if (result)
          {
LABEL_152:
            v261 = (uint64_t)v221;
            if (v224 >= 1)
            {
              v225 = 0;
              do
              {
                if ((v223 & 0xC000000000000001) != 0)
                  v226 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v225, v223);
                else
                  v226 = *(id *)(v223 + 8 * v225 + 32);
                v227 = v226;
                v228 = objc_msgSend(v226, "bluetoothAddress");
                static String._unconditionallyBridgeFromObjectiveC(_:)(v228);
                v230 = v229;

                v231 = objc_allocWithZone((Class)BTCloudDevice);
                v232 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(v230);
                v233 = objc_msgSend(v231, "initWithBluetoothAddress:", v232);

                v234 = objc_msgSend(v227, "name");
                objc_msgSend(v233, "setNickname:", v234);

                v235 = objc_msgSend(v227, "productID");
                objc_msgSend(v233, "setProductID:", v235);

                v236 = objc_msgSend(v227, "vendorID");
                objc_msgSend(v233, "setVendorID:", v236);

                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v237);
                v239 = *(_QWORD *)((v264 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v238 = *(_QWORD *)((v264 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v239 >= v238 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v238 > 1, v239 + 1, 1);
                ++v225;
                v240 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v239, v233);
                specialized Array._endMutation()(v240);
                a1 = v258;
              }
              while (v224 != v225);
              swift_bridgeObjectRelease(v223);
              v241 = (_QWORD *)v264;
              v221 = (void *)v261;
              goto LABEL_166;
            }
LABEL_169:
            __break(1u);
            return result;
          }
        }
        else
        {
          v224 = *(_QWORD *)((v222 & 0xFFFFFFFFFFFFF8) + 0x10);
          result = swift_bridgeObjectRetain(v222);
          if (v224)
            goto LABEL_152;
        }
        swift_bridgeObjectRelease(v223);
        v241 = _swiftEmptyArrayStorage;
LABEL_166:
        swift_bridgeObjectRelease(v223);
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        v243 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v241);
        objc_msgSend(v221, "devicesUpdatedWithRecords:", v243);
        swift_unknownObjectRelease(v221);

        return sub_1000AE58C(a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }
      v248 = v151;
      sub_1000E2648();
      v24 = v152;
      v153 = v257;
      swift_beginAccess(v257, &v266, 0, 0);
      v155 = (void *)swift_unknownObjectWeakLoadStrong(v153, v154);
      swift_unknownObjectWeakInit(v262, v155);

      v264 = (unint64_t)_swiftEmptyArrayStorage;
      if (!((unint64_t)v24 >> 62))
      {
        v156 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain(v24);
        if (!v156)
        {
LABEL_146:
          swift_bridgeObjectRelease(v24);
          v206 = _swiftEmptyArrayStorage;
LABEL_147:
          swift_bridgeObjectRelease(v24);
          swift_unknownObjectWeakDestroy(v262);
          sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
          v214 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v206);
          v215 = v248;
          objc_msgSend(v248, "magicPairingRecordsUpdatedWithRecords:", v214);

          swift_unknownObjectRelease(v215);
          goto LABEL_148;
        }
LABEL_89:
        if (v156 < 1)
        {
          __break(1u);
          goto LABEL_169;
        }
        v259 = v24 & 0xC000000000000001;
        swift_beginAccess(v262, v263, 0, 0);
        v157 = 0;
        v255 = v24;
        v254 = v156;
        do
        {
          if (v259)
            v158 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v157, v24);
          else
            v158 = *(id *)(v24 + 8 * v157 + 32);
          v160 = v158;
          v161 = swift_unknownObjectWeakLoadStrong(v262, v159);
          if (v161)
          {
            v162 = (void *)v161;
            v163 = sub_1000B4AC8();
            v164 = (void *)objc_opt_self(BTSystemConfiguration);
            v165 = objc_msgSend(v164, "isFirstUnlocked");
            v261 = (uint64_t)v162;
            if ((_DWORD)v165)
            {
              v166 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v167 = v252;
              v168 = sub_1000A0A00(v252, (uint64_t)qword_100218C68);
              v169 = v251;
              v170 = (uint64_t)v250;
              (*(void (**)(char *, uint64_t, uint64_t))(v251 + 16))(v250, v168, v167);
              v171 = sub_100128330(v170, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v166);
              (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v170, v167);
              v172 = v171[2];
              v173 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              v174 = *(_QWORD *)(v173 - 8);
              if (v172)
              {
                v14 = (char *)v256;
                sub_1000AE548((uint64_t)v171+ ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80)), v256, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v174 + 56))(v14, 0, 1, v173);
              }
              else
              {
                v14 = (char *)v256;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v174 + 56))(v256, 1, 1, v173);
              }
              swift_release(v163);
              swift_bridgeObjectRelease(v171);
              v162 = (void *)v261;
            }
            else
            {
              v175 = static os_log_type_t.error.getter(v165);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v175, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              v173 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v173 - 8) + 56))(v14, 1, 1, v173);
              swift_release(v163);
            }
            type metadata accessor for LegacyAccountMagicKeysRecord(0);
            v176 = *(_QWORD *)(v173 - 8);
            v177 = *(uint64_t **)(v176 + 48);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v177)(v14, 1, v173) == 1)
            {
              sub_1000A1000((uint64_t)v14, (uint64_t *)&unk_1002122E0);
              v178 = 0;
            }
            else
            {
              v179 = Data.subdata(in:)(1, 17, *(_QWORD *)&v14[*(int *)(v173 + 20)], *(_QWORD *)&v14[*(int *)(v173 + 20) + 8]);
              v253 = v173;
              v180 = v157;
              v181 = v160;
              v182 = v176;
              v183 = v164;
              v184 = v177;
              v186 = v185;
              sub_1000AE58C((uint64_t)v14, type metadata accessor for LegacyAccountMagicKeysRecord);
              v178 = Data._bridgeToObjectiveC()().super.isa;
              v187 = v186;
              v177 = v184;
              v164 = v183;
              v176 = v182;
              v160 = v181;
              v157 = v180;
              v173 = v253;
              sub_1000A103C(v179, v187);
            }
            objc_msgSend(v160, "setMasterKey:", v178);

            v188 = sub_1000B4AC8();
            v189 = objc_msgSend(v164, "isFirstUnlocked");
            if ((_DWORD)v189)
            {
              v249 = v177;
              v253 = (uint64_t)v160;
              v190 = sub_100129690();
              if (qword_100210148 != -1)
                swift_once(&qword_100210148, sub_1000B0C18);
              v191 = v252;
              v192 = sub_1000A0A00(v252, (uint64_t)qword_100218C68);
              v193 = v251;
              v194 = (uint64_t)v250;
              (*(void (**)(char *, uint64_t, uint64_t))(v251 + 16))(v250, v192, v191);
              v195 = sub_100128330(v194, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
              swift_release(v190);
              (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v194, v191);
              if (v195[2])
              {
                v196 = (uint64_t)v260;
                sub_1000AE548((uint64_t)v195+ ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80)), (uint64_t)v260, type metadata accessor for LegacyAccountMagicKeysRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v176 + 56))(v196, 0, 1, v173);
              }
              else
              {
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v176 + 56))(v260, 1, 1, v173);
              }
              swift_release(v188);
              swift_bridgeObjectRelease(v195);
              v14 = (char *)v256;
              v160 = (void *)v253;
              v162 = (void *)v261;
              v177 = v249;
            }
            else
            {
              v197 = static os_log_type_t.error.getter(v189);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              os_log(_:dso:log:_:_:)(v197, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v176 + 56))(v260, 1, 1, v173);
              swift_release(v188);
            }
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v177)(v260, 1, v173) == 1)
            {
              sub_1000A1000((uint64_t)v260, (uint64_t *)&unk_1002122E0);
              v198 = 0;
            }
            else
            {
              v199 = (uint64_t)v260;
              v200 = Data.subdata(in:)(17, 33, *(_QWORD *)&v260[*(int *)(v173 + 20)], *(_QWORD *)&v260[*(int *)(v173 + 20) + 8]);
              v202 = v201;
              sub_1000AE58C(v199, type metadata accessor for LegacyAccountMagicKeysRecord);
              v198 = Data._bridgeToObjectiveC()().super.isa;
              sub_1000A103C(v200, v202);
            }
            v24 = v255;
            v156 = v254;
            objc_msgSend(v160, "setMasterHint:", v198);

          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v161);
          v204 = *(_QWORD *)((v264 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v203 = *(_QWORD *)((v264 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v204 >= v203 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v203 > 1, v204 + 1, 1);
          ++v157;
          v205 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v204, v160);
          specialized Array._endMutation()(v205);
        }
        while (v156 != v157);
        swift_bridgeObjectRelease(v24);
        v206 = (_QWORD *)v264;
        a1 = v258;
        goto LABEL_147;
      }
LABEL_142:
      if (v24 < 0)
        v213 = v24;
      else
        v213 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v24);
      result = _CocoaArrayWrapper.endIndex.getter(v213);
      v156 = result;
      if (!result)
        goto LABEL_146;
      goto LABEL_89;
    }
    sub_1000A1000((uint64_t)v134, &qword_100210CD8);
    v55 = v257;
  }
  v136 = sub_100113280(a1);
  if (!v136)
  {
    v265[0] = _swiftEmptyArrayStorage;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v207 = a1;
      else
        v207 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v24 = _CocoaArrayWrapper.endIndex.getter(v207);
      swift_bridgeObjectRelease(a1);
      specialized ContiguousArray.reserveCapacity(_:)(v24);
      swift_bridgeObjectRetain(a1);
      v208 = _CocoaArrayWrapper.endIndex.getter(v207);
      swift_bridgeObjectRelease(a1);
      if (v208)
        goto LABEL_128;
    }
    else
    {
      specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
      if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_128:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v212 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
          swift_unknownObjectRelease(v212);
          return swift_release(v265[0]);
        }
        if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
          return swift_release(v265[0]);
        __break(1u);
        goto LABEL_142;
      }
    }
    v209 = v265[0];
    swift_beginAccess(v55, v265, 0, 0);
    v211 = (void *)swift_unknownObjectWeakLoadStrong(v55, v210);
    if (v211)

    return swift_release(v209);
  }
  v137 = v136;
  swift_beginAccess(v55, &v266, 0, 0);
  v139 = swift_unknownObjectWeakLoadStrong(v55, v138);
  if (v139)
  {
    v140 = (char *)v139;
    v265[3] = &type metadata for AudioAccessoryFeatures;
    v265[4] = sub_1000A42C4();
    v141 = isFeatureEnabled(_:)(v265);
    sub_1000A2140(v265);
    if ((v141 & 1) != 0)
    {
      v143 = swift_unknownObjectWeakLoadStrong(&v140[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v142);
      if (v143)
      {
        v144 = (void *)v143;
        v145 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v144, "aaDeviceRecordsUpdatedWithRecords:", v145);

        swift_bridgeObjectRelease(v137);
        return swift_unknownObjectRelease(v144);
      }
    }

  }
  return swift_bridgeObjectRelease(v137);
}

_QWORD *sub_10011DFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  id v38;
  NSString v39;
  NSString v40;
  NSString v41;
  NSString v42;
  NSString v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  Class isa;
  _QWORD *result;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  NSArray v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  Class v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  _QWORD v106[5];
  unint64_t v107[3];

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v102 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceSupportInformationRecord(0);
  v103 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DeviceRecord(0);
  v104 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = (void *)(a2 + 16);
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v15 = qword_100218DE0;
  v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100184870;
  v18 = type metadata accessor for AAProxCardsRecord(0);
  v19 = swift_bridgeObjectRetain(a1);
  v20 = Array.description.getter(v19, v18);
  v22 = v21;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v17 + 32) = v20;
  *(_QWORD *)(v17 + 40) = v22;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Removed: %@", 19, 2, v17);
  swift_bridgeObjectRelease(v17);
  v23 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE40);
  if (v23)
  {
    v24 = v23;
    v25 = v105;
    swift_beginAccess(v105, v106, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v25, v26);
    if (Strong)
    {
      v29 = (void *)Strong;
      v30 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v28);

      if (v30)
      {
        v31 = _swiftEmptyArrayStorage;
        v107[0] = (unint64_t)_swiftEmptyArrayStorage;
        v32 = *(_QWORD *)(v24 + 16);
        if (v32)
        {
          v105 = v30;
          v33 = v24 + ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
          v34 = *(_QWORD *)(v104 + 72);
          v104 = v24;
          swift_bridgeObjectRetain(v24);
          do
          {
            sub_1000AE548(v33, (uint64_t)v12, type metadata accessor for DeviceRecord);
            v35 = *(_QWORD *)&v12[*(int *)(v10 + 24) + 8];
            v36 = objc_allocWithZone((Class)BTCloudDevice);
            swift_bridgeObjectRetain(v35);
            v37 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v35);
            v38 = objc_msgSend(v36, "initWithBluetoothAddress:", v37);

            v39 = String._bridgeToObjectiveC()();
            objc_msgSend(v38, "setNickname:", v39);

            v40 = String._bridgeToObjectiveC()();
            objc_msgSend(v38, "setModelNumber:", v40);

            v41 = String._bridgeToObjectiveC()();
            objc_msgSend(v38, "setManufacturer:", v41);

            v42 = String._bridgeToObjectiveC()();
            objc_msgSend(v38, "setProductID:", v42);

            v43 = String._bridgeToObjectiveC()();
            objc_msgSend(v38, "setVendorID:", v43);

            v44 = sub_1000AE58C((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
            v46 = *(_QWORD *)((v107[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v45 = *(_QWORD *)((v107[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v46 >= v45 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
            v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v38);
            specialized Array._endMutation()(v47);
            v33 += v34;
            --v32;
          }
          while (v32);
          v24 = v104;
          swift_bridgeObjectRelease(v104);
          v31 = (_QWORD *)v107[0];
          v30 = v105;
        }
        swift_bridgeObjectRelease(v24);
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        objc_msgSend(v30, "devicesRemovedWithRecords:", isa);

        return (_QWORD *)swift_unknownObjectRelease(v30);
      }
    }
    v48 = (_QWORD *)v24;
    return (_QWORD *)swift_bridgeObjectRelease(v48);
  }
  v49 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE14);
  if (v49)
  {
    v50 = v49;
    v51 = v105;
    swift_beginAccess(v105, v106, 0, 0);
    v53 = swift_unknownObjectWeakLoadStrong(v51, v52);
    if (v53)
    {
      v55 = (void *)v53;
      v56 = (void *)swift_unknownObjectWeakLoadStrong(v53 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v54);

      if (v56)
      {
        v57 = _swiftEmptyArrayStorage;
        v107[0] = (unint64_t)_swiftEmptyArrayStorage;
        v58 = *(_QWORD *)(v50 + 16);
        if (v58)
        {
          v59 = v50 + ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80));
          v60 = *(_QWORD *)(v103 + 72);
          swift_bridgeObjectRetain(v50);
          do
          {
            sub_1000AE548(v59, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            v61 = sub_1000BB014();
            v62 = sub_1000AE58C((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v62);
            v64 = *(_QWORD *)((v107[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v63 = *(_QWORD *)((v107[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v64 >= v63 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
            v65 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v61);
            specialized Array._endMutation()(v65);
            v59 += v60;
            --v58;
          }
          while (v58);
          swift_bridgeObjectRelease(v50);
          v57 = (_QWORD *)v107[0];
        }
        swift_bridgeObjectRelease(v50);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v57);
        objc_msgSend(v56, "deviceSupportInformationRecordsRemovedWithRecords:", v83.super.isa, v102);
LABEL_45:

        return (_QWORD *)swift_unknownObjectRelease(v56);
      }
    }
    goto LABEL_32;
  }
  v68 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EDE8);
  if (v68)
  {
    v50 = v68;
    v69 = v105;
    swift_beginAccess(v105, v106, 0, 0);
    v71 = swift_unknownObjectWeakLoadStrong(v69, v70);
    if (v71)
    {
      v73 = (void *)v71;
      v56 = (void *)swift_unknownObjectWeakLoadStrong(v71 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v72);

      if (v56)
      {
        v74 = _swiftEmptyArrayStorage;
        v107[0] = (unint64_t)_swiftEmptyArrayStorage;
        v75 = *(_QWORD *)(v50 + 16);
        if (v75)
        {
          v76 = v50 + ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80));
          v77 = *(_QWORD *)(v102 + 72);
          swift_bridgeObjectRetain(v50);
          do
          {
            sub_1000AE548(v76, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            v78 = sub_1000BEDB4();
            v79 = sub_1000AE58C((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            v81 = *(_QWORD *)((v107[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v80 = *(_QWORD *)((v107[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v81 >= v80 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
            v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v78);
            specialized Array._endMutation()(v82);
            v76 += v77;
            --v75;
          }
          while (v75);
          swift_bridgeObjectRelease(v50);
          v74 = (_QWORD *)v107[0];
        }
        swift_bridgeObjectRelease(v50);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v74);
        objc_msgSend(v56, "magicPairingRecordsRemovedWithRecords:", v83.super.isa, v102);
        goto LABEL_45;
      }
    }
LABEL_32:
    v48 = (_QWORD *)v50;
    return (_QWORD *)swift_bridgeObjectRelease(v48);
  }
  v106[0] = _swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_38;
LABEL_50:
    v92 = v105;
    v91 = v106[0];
    swift_beginAccess(v105, v107, 0, 0);
    v94 = swift_unknownObjectWeakLoadStrong(v92, v93);
    if (v94)
    {
      v95 = (char *)v94;
      v106[3] = &type metadata for AudioAccessoryFeatures;
      v106[4] = sub_1000A42C4();
      v96 = isFeatureEnabled(_:)(v106);
      sub_1000A2140(v106);
      if ((v96 & 1) != 0)
      {
        v98 = swift_unknownObjectWeakLoadStrong(&v95[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v97);
        if (v98)
        {
          v99 = (void *)v98;
          type metadata accessor for AADeviceRecord(0);
          v100 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v99, "aaDeviceRecordsRemovedWithRecords:", v100);

          swift_release(v91);
          return (_QWORD *)swift_unknownObjectRelease(v99);
        }
      }

    }
    return (_QWORD *)swift_release(v91);
  }
  if (a1 < 0)
    v88 = a1;
  else
    v88 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v89 = _CocoaArrayWrapper.endIndex.getter(v88);
  swift_bridgeObjectRelease(a1);
  specialized ContiguousArray.reserveCapacity(_:)(v89);
  swift_bridgeObjectRetain(a1);
  v90 = _CocoaArrayWrapper.endIndex.getter(v88);
  result = (_QWORD *)swift_bridgeObjectRelease(a1);
  if (!v90)
    goto LABEL_50;
LABEL_38:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v101 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    swift_unknownObjectRelease(v101);
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return result;
  }
  swift_release(v106[0]);
  result = sub_100113280(a1);
  if (result)
  {
    v84 = result;
    v85 = v105;
    swift_beginAccess(v105, v106, 0, 0);
    v87 = (void *)swift_unknownObjectWeakLoadStrong(v85, v86);
    if (v87)

    v48 = v84;
    return (_QWORD *)swift_bridgeObjectRelease(v48);
  }
  return result;
}

uint64_t sub_10011E900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  id v37;
  NSString v38;
  NSString v39;
  NSString v40;
  NSString v41;
  NSString v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Class isa;
  uint64_t result;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  NSArray v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  Class v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  _QWORD v108[5];
  unint64_t v109[3];

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v104 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v103 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DeviceSupportInformationRecord(0);
  v105 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DeviceRecord(0);
  v106 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = (void *)(a2 + 16);
  v13 = static os_log_type_t.default.getter(v12);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v14 = qword_100218DE0;
  v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100184870;
  v17 = type metadata accessor for AADeviceRecord(0);
  v18 = swift_bridgeObjectRetain(a1);
  v19 = Array.description.getter(v18, v17);
  v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v16 + 32) = v19;
  *(_QWORD *)(v16 + 40) = v21;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "records Removed: %@", 19, 2, v16);
  swift_bridgeObjectRelease(v16);
  v22 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE40);
  if (v22)
  {
    v23 = v22;
    v24 = v107;
    swift_beginAccess(v107, v108, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v24, v25);
    if (Strong)
    {
      v28 = (void *)Strong;
      v29 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v27);

      if (v29)
      {
        v30 = _swiftEmptyArrayStorage;
        v109[0] = (unint64_t)_swiftEmptyArrayStorage;
        v31 = *(_QWORD *)(v23 + 16);
        if (v31)
        {
          v107 = v29;
          v32 = v23 + ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
          v33 = *(_QWORD *)(v106 + 72);
          v106 = v23;
          swift_bridgeObjectRetain(v23);
          do
          {
            sub_1000AE548(v32, (uint64_t)v11, type metadata accessor for DeviceRecord);
            v34 = *(_QWORD *)&v11[*(int *)(v9 + 24) + 8];
            v35 = objc_allocWithZone((Class)BTCloudDevice);
            swift_bridgeObjectRetain(v34);
            v36 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v34);
            v37 = objc_msgSend(v35, "initWithBluetoothAddress:", v36);

            v38 = String._bridgeToObjectiveC()();
            objc_msgSend(v37, "setNickname:", v38);

            v39 = String._bridgeToObjectiveC()();
            objc_msgSend(v37, "setModelNumber:", v39);

            v40 = String._bridgeToObjectiveC()();
            objc_msgSend(v37, "setManufacturer:", v40);

            v41 = String._bridgeToObjectiveC()();
            objc_msgSend(v37, "setProductID:", v41);

            v42 = String._bridgeToObjectiveC()();
            objc_msgSend(v37, "setVendorID:", v42);

            v43 = sub_1000AE58C((uint64_t)v11, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
            v45 = *(_QWORD *)((v109[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v44 = *(_QWORD *)((v109[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v45 >= v44 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
            v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
            specialized Array._endMutation()(v46);
            v32 += v33;
            --v31;
          }
          while (v31);
          v23 = v106;
          swift_bridgeObjectRelease(v106);
          v30 = (_QWORD *)v109[0];
          v29 = v107;
        }
        swift_bridgeObjectRelease(v23);
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v30);
        objc_msgSend(v29, "devicesRemovedWithRecords:", isa);

        return swift_unknownObjectRelease(v29);
      }
    }
    v47 = (_QWORD *)v23;
    return swift_bridgeObjectRelease(v47);
  }
  v48 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE14);
  if (v48)
  {
    v49 = v48;
    v50 = v107;
    swift_beginAccess(v107, v108, 0, 0);
    v52 = swift_unknownObjectWeakLoadStrong(v50, v51);
    if (v52)
    {
      v54 = (void *)v52;
      v55 = (void *)swift_unknownObjectWeakLoadStrong(v52 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v53);

      if (v55)
      {
        v56 = _swiftEmptyArrayStorage;
        v109[0] = (unint64_t)_swiftEmptyArrayStorage;
        v57 = *(_QWORD *)(v49 + 16);
        if (v57)
        {
          v58 = v49 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
          v59 = *(_QWORD *)(v105 + 72);
          swift_bridgeObjectRetain(v49);
          do
          {
            sub_1000AE548(v58, (uint64_t)v8, type metadata accessor for DeviceSupportInformationRecord);
            v60 = sub_1000BB014();
            v61 = sub_1000AE58C((uint64_t)v8, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
            v63 = *(_QWORD *)((v109[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v62 = *(_QWORD *)((v109[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v63 >= v62 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
            v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
            specialized Array._endMutation()(v64);
            v58 += v59;
            --v57;
          }
          while (v57);
          swift_bridgeObjectRelease(v49);
          v56 = (_QWORD *)v109[0];
        }
        swift_bridgeObjectRelease(v49);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v56);
        objc_msgSend(v55, "deviceSupportInformationRecordsRemovedWithRecords:", v83.super.isa);
LABEL_42:

        return swift_unknownObjectRelease(v55);
      }
    }
    goto LABEL_33;
  }
  v67 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EDE8);
  if (v67)
  {
    v49 = v67;
    v68 = v107;
    swift_beginAccess(v107, v108, 0, 0);
    v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
    if (v70)
    {
      v72 = (void *)v70;
      v55 = (void *)swift_unknownObjectWeakLoadStrong(v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v71);

      if (v55)
      {
        v73 = _swiftEmptyArrayStorage;
        v109[0] = (unint64_t)_swiftEmptyArrayStorage;
        v74 = *(_QWORD *)(v49 + 16);
        if (v74)
        {
          v75 = v49 + ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
          v76 = *(_QWORD *)(v104 + 72);
          swift_bridgeObjectRetain(v49);
          v77 = (uint64_t)v103;
          do
          {
            sub_1000AE548(v75, v77, type metadata accessor for MagicPairingSettingsRecord);
            v78 = sub_1000BEDB4();
            v79 = sub_1000AE58C(v77, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            v81 = *(_QWORD *)((v109[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v80 = *(_QWORD *)((v109[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v81 >= v80 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
            v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v78);
            specialized Array._endMutation()(v82);
            v75 += v76;
            --v74;
          }
          while (v74);
          swift_bridgeObjectRelease(v49);
          v73 = (_QWORD *)v109[0];
        }
        swift_bridgeObjectRelease(v49);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v73);
        objc_msgSend(v55, "magicPairingRecordsRemovedWithRecords:", v83.super.isa);
        goto LABEL_42;
      }
    }
LABEL_33:
    v47 = (_QWORD *)v49;
    return swift_bridgeObjectRelease(v47);
  }
  v84 = sub_100113280(a1);
  if (v84)
  {
    v85 = v84;
    v86 = v107;
    swift_beginAccess(v107, v109, 0, 0);
    v88 = swift_unknownObjectWeakLoadStrong(v86, v87);
    if (v88)
    {
      v89 = (char *)v88;
      v108[3] = &type metadata for AudioAccessoryFeatures;
      v108[4] = sub_1000A42C4();
      v90 = isFeatureEnabled(_:)(v108);
      sub_1000A2140(v108);
      if ((v90 & 1) != 0)
      {
        v92 = swift_unknownObjectWeakLoadStrong(&v89[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v91);
        if (v92)
        {
          v29 = (void *)v92;
          v93 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v29, "aaDeviceRecordsRemovedWithRecords:", v93);

          swift_bridgeObjectRelease(v85);
          return swift_unknownObjectRelease(v29);
        }
      }

    }
    v47 = v85;
    return swift_bridgeObjectRelease(v47);
  }
  v108[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v94 = a1;
    else
      v94 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v95 = _CocoaArrayWrapper.endIndex.getter(v94);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v95);
    swift_bridgeObjectRetain(a1);
    v96 = _CocoaArrayWrapper.endIndex.getter(v94);
    result = swift_bridgeObjectRelease(a1);
    if (v96)
      goto LABEL_45;
LABEL_54:
    v98 = v107;
    v97 = v108[0];
    swift_beginAccess(v107, v108, 0, 0);
    v100 = (void *)swift_unknownObjectWeakLoadStrong(v98, v99);
    if (v100)

    return swift_release(v97);
  }
  result = specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_54;
LABEL_45:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v101 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    swift_unknownObjectRelease(v101);
    return swift_release(v108[0]);
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    return swift_release(v108[0]);
  __break(1u);
  return result;
}

_QWORD *sub_10011F23C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  id v37;
  NSString v38;
  NSString v39;
  NSString v40;
  NSString v41;
  NSString v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t Strong;
  uint64_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Class v65;
  _QWORD *result;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  NSArray v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  Class isa;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  void *v103;
  _QWORD v104[5];
  unint64_t v105[3];

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v99 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v100 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DeviceSupportInformationRecord(0);
  v101 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DeviceRecord(0);
  v102 = *(_QWORD **)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = (void *)(a2 + 16);
  v13 = static os_log_type_t.default.getter(v12);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v14 = qword_100218DE0;
  v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100184870;
  v17 = type metadata accessor for SoundProfileRecord(0);
  v18 = swift_bridgeObjectRetain(a1);
  v19 = Array.description.getter(v18, v17);
  v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v16 + 32) = v19;
  *(_QWORD *)(v16 + 40) = v21;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "records Removed: %@", 19, 2, v16);
  swift_bridgeObjectRelease(v16);
  v22 = sub_1001133F4(a1, &qword_100212230, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE40, type metadata accessor for SoundProfileRecord);
  if (!v22)
  {
    v48 = sub_1001133F4(a1, &qword_100212230, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE14, type metadata accessor for SoundProfileRecord);
    if (v48)
    {
      v49 = v48;
      v50 = v103;
      swift_beginAccess(v103, v104, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v50, v51);
      if (Strong)
      {
        v54 = (void *)Strong;
        v55 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v53);

        if (v55)
        {
          v56 = _swiftEmptyArrayStorage;
          v105[0] = (unint64_t)_swiftEmptyArrayStorage;
          v57 = v49[2];
          if (v57)
          {
            v58 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
            v59 = *(_QWORD *)(v101 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000AE548(v58, (uint64_t)v8, type metadata accessor for DeviceSupportInformationRecord);
              v60 = sub_1000BB014();
              v61 = sub_1000AE58C((uint64_t)v8, type metadata accessor for DeviceSupportInformationRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
              v63 = *(_QWORD *)((v105[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v62 = *(_QWORD *)((v105[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v63 >= v62 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
              v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
              specialized Array._endMutation()(v64);
              v58 += v59;
              --v57;
            }
            while (v57);
            swift_bridgeObjectRelease(v49);
            v56 = (_QWORD *)v105[0];
          }
          swift_bridgeObjectRelease(v49);
          sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
          v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v56);
          objc_msgSend(v55, "deviceSupportInformationRecordsRemovedWithRecords:", v83.super.isa);
LABEL_42:

          return (_QWORD *)swift_unknownObjectRelease(v55);
        }
      }
    }
    else
    {
      v67 = sub_1001133F4(a1, &qword_100212230, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EDE8, type metadata accessor for SoundProfileRecord);
      if (!v67)
      {
        v84 = sub_100113524(a1, &qword_100212230, type metadata accessor for SoundProfileRecord);
        if (v84)
        {
          v85 = v84;
          v86 = v103;
          swift_beginAccess(v103, v105, 0, 0);
          v88 = swift_unknownObjectWeakLoadStrong(v86, v87);
          if (v88)
          {
            v89 = (char *)v88;
            v104[3] = &type metadata for AudioAccessoryFeatures;
            v104[4] = sub_1000A42C4();
            v90 = isFeatureEnabled(_:)(v104);
            sub_1000A2140(v104);
            if ((v90 & 1) != 0)
            {
              v92 = swift_unknownObjectWeakLoadStrong(&v89[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v91);
              if (v92)
              {
                v93 = (void *)v92;
                type metadata accessor for AADeviceRecord(0);
                isa = Array._bridgeToObjectiveC()().super.isa;
                objc_msgSend(v93, "aaDeviceRecordsRemovedWithRecords:", isa);

                swift_bridgeObjectRelease(v85);
                return (_QWORD *)swift_unknownObjectRelease(v93);
              }
            }

          }
        }
        else
        {
          result = sub_100113524(a1, &qword_100212230, type metadata accessor for SoundProfileRecord);
          if (!result)
            return result;
          v85 = result;
          v95 = v103;
          swift_beginAccess(v103, v104, 0, 0);
          v97 = (void *)swift_unknownObjectWeakLoadStrong(v95, v96);
          if (v97)
          {

            v47 = v85;
            return (_QWORD *)swift_bridgeObjectRelease(v47);
          }
        }
        v47 = v85;
        return (_QWORD *)swift_bridgeObjectRelease(v47);
      }
      v49 = v67;
      v68 = v103;
      swift_beginAccess(v103, v104, 0, 0);
      v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
      if (v70)
      {
        v72 = (void *)v70;
        v55 = (void *)swift_unknownObjectWeakLoadStrong(v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v71);

        if (v55)
        {
          v73 = _swiftEmptyArrayStorage;
          v105[0] = (unint64_t)_swiftEmptyArrayStorage;
          v74 = v49[2];
          if (v74)
          {
            v75 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
            v76 = *(_QWORD *)(v99 + 72);
            swift_bridgeObjectRetain(v49);
            v77 = (uint64_t)v100;
            do
            {
              sub_1000AE548(v75, v77, type metadata accessor for MagicPairingSettingsRecord);
              v78 = sub_1000BEDB4();
              v79 = sub_1000AE58C(v77, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
              v81 = *(_QWORD *)((v105[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v80 = *(_QWORD *)((v105[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v81 >= v80 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
              v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v78);
              specialized Array._endMutation()(v82);
              v75 += v76;
              --v74;
            }
            while (v74);
            swift_bridgeObjectRelease(v49);
            v73 = (_QWORD *)v105[0];
          }
          swift_bridgeObjectRelease(v49);
          sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
          v83.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v73);
          objc_msgSend(v55, "magicPairingRecordsRemovedWithRecords:", v83.super.isa);
          goto LABEL_42;
        }
      }
    }
    v47 = v49;
    return (_QWORD *)swift_bridgeObjectRelease(v47);
  }
  v23 = v22;
  v24 = v103;
  swift_beginAccess(v103, v104, 0, 0);
  v26 = swift_unknownObjectWeakLoadStrong(v24, v25);
  if (!v26
    || (v28 = (void *)v26,
        v29 = (void *)swift_unknownObjectWeakLoadStrong(v26 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v27), v28, !v29))
  {
    v47 = v23;
    return (_QWORD *)swift_bridgeObjectRelease(v47);
  }
  v30 = _swiftEmptyArrayStorage;
  v105[0] = (unint64_t)_swiftEmptyArrayStorage;
  v31 = v23[2];
  if (v31)
  {
    v103 = v29;
    v32 = (uint64_t)v23 + ((*((unsigned __int8 *)v102 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v102 + 80));
    v33 = v102[9];
    v102 = v23;
    swift_bridgeObjectRetain(v23);
    do
    {
      sub_1000AE548(v32, (uint64_t)v11, type metadata accessor for DeviceRecord);
      v34 = *(_QWORD *)&v11[*(int *)(v9 + 24) + 8];
      v35 = objc_allocWithZone((Class)BTCloudDevice);
      swift_bridgeObjectRetain(v34);
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      v37 = objc_msgSend(v35, "initWithBluetoothAddress:", v36);

      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setNickname:", v38);

      v39 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setModelNumber:", v39);

      v40 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setManufacturer:", v40);

      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setProductID:", v41);

      v42 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setVendorID:", v42);

      v43 = sub_1000AE58C((uint64_t)v11, type metadata accessor for DeviceRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      v45 = *(_QWORD *)((v105[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v44 = *(_QWORD *)((v105[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v45 >= v44 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
      specialized Array._endMutation()(v46);
      v32 += v33;
      --v31;
    }
    while (v31);
    v23 = v102;
    swift_bridgeObjectRelease(v102);
    v30 = (_QWORD *)v105[0];
    v29 = v103;
  }
  swift_bridgeObjectRelease(v23);
  sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
  v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  objc_msgSend(v29, "devicesRemovedWithRecords:", v65);

  return (_QWORD *)swift_unknownObjectRelease(v29);
}

_QWORD *sub_10011FB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  id v37;
  NSString v38;
  NSString v39;
  NSString v40;
  NSString v41;
  NSString v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t Strong;
  uint64_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Class v65;
  _QWORD *result;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  NSArray v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  Class isa;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  _QWORD v101[5];
  unint64_t v102[3];

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v97 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceSupportInformationRecord(0);
  v98 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DeviceRecord(0);
  v99 = *(_QWORD **)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = (void *)(a2 + 16);
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v15 = qword_100218DE0;
  v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100184870;
  v18 = swift_bridgeObjectRetain(a1);
  v19 = Array.description.getter(v18, v4);
  v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Removed: %@", 19, 2, v17);
  swift_bridgeObjectRelease(v17);
  v22 = sub_1001133F4(a1, (uint64_t *)&unk_100212190, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE40, type metadata accessor for MagicPairingSettingsRecord);
  if (!v22)
  {
    v48 = sub_1001133F4(a1, (uint64_t *)&unk_100212190, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE14, type metadata accessor for MagicPairingSettingsRecord);
    if (v48)
    {
      v49 = v48;
      v50 = v100;
      swift_beginAccess(v100, v101, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v50, v51);
      if (Strong)
      {
        v54 = (void *)Strong;
        v55 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v53);

        if (v55)
        {
          v56 = _swiftEmptyArrayStorage;
          v102[0] = (unint64_t)_swiftEmptyArrayStorage;
          v57 = v49[2];
          if (v57)
          {
            v58 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
            v59 = *(_QWORD *)(v98 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000AE548(v58, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              v60 = sub_1000BB014();
              v61 = sub_1000AE58C((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
              v63 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v62 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v63 >= v62 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
              v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
              specialized Array._endMutation()(v64);
              v58 += v59;
              --v57;
            }
            while (v57);
            swift_bridgeObjectRelease(v49);
            v56 = (_QWORD *)v102[0];
          }
          swift_bridgeObjectRelease(v49);
          sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
          v82.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v56);
          objc_msgSend(v55, "deviceSupportInformationRecordsRemovedWithRecords:", v82.super.isa, v97);
LABEL_42:

          return (_QWORD *)swift_unknownObjectRelease(v55);
        }
      }
    }
    else
    {
      v67 = sub_100113638(a1, type metadata accessor for MagicPairingSettingsRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10014EDE8);
      if (!v67)
      {
        v83 = sub_100113524(a1, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord);
        if (v83)
        {
          v84 = v83;
          v85 = v100;
          swift_beginAccess(v100, v102, 0, 0);
          v87 = swift_unknownObjectWeakLoadStrong(v85, v86);
          if (v87)
          {
            v88 = (char *)v87;
            v101[3] = &type metadata for AudioAccessoryFeatures;
            v101[4] = sub_1000A42C4();
            v89 = isFeatureEnabled(_:)(v101);
            sub_1000A2140(v101);
            if ((v89 & 1) != 0)
            {
              v91 = swift_unknownObjectWeakLoadStrong(&v88[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v90);
              if (v91)
              {
                v92 = (void *)v91;
                type metadata accessor for AADeviceRecord(0);
                isa = Array._bridgeToObjectiveC()().super.isa;
                objc_msgSend(v92, "aaDeviceRecordsRemovedWithRecords:", isa);

                swift_bridgeObjectRelease(v84);
                return (_QWORD *)swift_unknownObjectRelease(v92);
              }
            }

          }
        }
        else
        {
          result = sub_100113524(a1, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord);
          if (!result)
            return result;
          v84 = result;
          v94 = v100;
          swift_beginAccess(v100, v101, 0, 0);
          v96 = (void *)swift_unknownObjectWeakLoadStrong(v94, v95);
          if (v96)
          {

            v47 = v84;
            return (_QWORD *)swift_bridgeObjectRelease(v47);
          }
        }
        v47 = v84;
        return (_QWORD *)swift_bridgeObjectRelease(v47);
      }
      v49 = v67;
      v68 = v100;
      swift_beginAccess(v100, v101, 0, 0);
      v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
      if (v70)
      {
        v72 = (void *)v70;
        v55 = (void *)swift_unknownObjectWeakLoadStrong(v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v71);

        if (v55)
        {
          v73 = _swiftEmptyArrayStorage;
          v102[0] = (unint64_t)_swiftEmptyArrayStorage;
          v74 = v49[2];
          if (v74)
          {
            v75 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
            v76 = *(_QWORD *)(v97 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000AE548(v75, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              v77 = sub_1000BEDB4();
              v78 = sub_1000AE58C((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
              v80 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v79 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v80 >= v79 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
              v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
              specialized Array._endMutation()(v81);
              v75 += v76;
              --v74;
            }
            while (v74);
            swift_bridgeObjectRelease(v49);
            v73 = (_QWORD *)v102[0];
          }
          swift_bridgeObjectRelease(v49);
          sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
          v82.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v73);
          objc_msgSend(v55, "magicPairingRecordsRemovedWithRecords:", v82.super.isa, v97);
          goto LABEL_42;
        }
      }
    }
    v47 = v49;
    return (_QWORD *)swift_bridgeObjectRelease(v47);
  }
  v23 = v22;
  v24 = v100;
  swift_beginAccess(v100, v101, 0, 0);
  v26 = swift_unknownObjectWeakLoadStrong(v24, v25);
  if (!v26
    || (v28 = (void *)v26,
        v29 = (void *)swift_unknownObjectWeakLoadStrong(v26 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v27), v28, !v29))
  {
    v47 = v23;
    return (_QWORD *)swift_bridgeObjectRelease(v47);
  }
  v30 = _swiftEmptyArrayStorage;
  v102[0] = (unint64_t)_swiftEmptyArrayStorage;
  v31 = v23[2];
  if (v31)
  {
    v100 = v29;
    v32 = (uint64_t)v23 + ((*((unsigned __int8 *)v99 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v99 + 80));
    v33 = v99[9];
    v99 = v23;
    swift_bridgeObjectRetain(v23);
    do
    {
      sub_1000AE548(v32, (uint64_t)v12, type metadata accessor for DeviceRecord);
      v34 = *(_QWORD *)&v12[*(int *)(v10 + 24) + 8];
      v35 = objc_allocWithZone((Class)BTCloudDevice);
      swift_bridgeObjectRetain(v34);
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      v37 = objc_msgSend(v35, "initWithBluetoothAddress:", v36);

      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setNickname:", v38);

      v39 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setModelNumber:", v39);

      v40 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setManufacturer:", v40);

      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setProductID:", v41);

      v42 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setVendorID:", v42);

      v43 = sub_1000AE58C((uint64_t)v12, type metadata accessor for DeviceRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      v45 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v44 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v45 >= v44 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
      specialized Array._endMutation()(v46);
      v32 += v33;
      --v31;
    }
    while (v31);
    v23 = v99;
    swift_bridgeObjectRelease(v99);
    v30 = (_QWORD *)v102[0];
    v29 = v100;
  }
  swift_bridgeObjectRelease(v23);
  sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
  v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  objc_msgSend(v29, "devicesRemovedWithRecords:", v65);

  return (_QWORD *)swift_unknownObjectRelease(v29);
}

_QWORD *sub_100120400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  id v37;
  NSString v38;
  NSString v39;
  NSString v40;
  NSString v41;
  NSString v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t Strong;
  uint64_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Class v65;
  _QWORD *result;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  NSArray v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  Class isa;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  _QWORD v101[5];
  unint64_t v102[3];

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v97 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceSupportInformationRecord(0);
  v98 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DeviceRecord(0);
  v99 = *(_QWORD **)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = (void *)(a2 + 16);
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v15 = qword_100218DE0;
  v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100184870;
  v18 = swift_bridgeObjectRetain(a1);
  v19 = Array.description.getter(v18, v7);
  v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Removed: %@", 19, 2, v17);
  swift_bridgeObjectRelease(v17);
  v22 = sub_1001133F4(a1, &qword_100210CE8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE40, type metadata accessor for DeviceSupportInformationRecord);
  if (!v22)
  {
    v48 = sub_100113638(a1, type metadata accessor for DeviceSupportInformationRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10014EE14);
    if (v48)
    {
      v49 = v48;
      v50 = v100;
      swift_beginAccess(v100, v101, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v50, v51);
      if (Strong)
      {
        v54 = (void *)Strong;
        v55 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v53);

        if (v55)
        {
          v56 = _swiftEmptyArrayStorage;
          v102[0] = (unint64_t)_swiftEmptyArrayStorage;
          v57 = v49[2];
          if (v57)
          {
            v58 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
            v59 = *(_QWORD *)(v98 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000AE548(v58, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              v60 = sub_1000BB014();
              v61 = sub_1000AE58C((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
              v63 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v62 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v63 >= v62 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
              v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
              specialized Array._endMutation()(v64);
              v58 += v59;
              --v57;
            }
            while (v57);
            swift_bridgeObjectRelease(v49);
            v56 = (_QWORD *)v102[0];
          }
          swift_bridgeObjectRelease(v49);
          sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
          v82.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v56);
          objc_msgSend(v55, "deviceSupportInformationRecordsRemovedWithRecords:", v82.super.isa, v97);
LABEL_42:

          return (_QWORD *)swift_unknownObjectRelease(v55);
        }
      }
    }
    else
    {
      v67 = sub_1001133F4(a1, &qword_100210CE8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EDE8, type metadata accessor for DeviceSupportInformationRecord);
      if (!v67)
      {
        v83 = sub_100113524(a1, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord);
        if (v83)
        {
          v84 = v83;
          v85 = v100;
          swift_beginAccess(v100, v102, 0, 0);
          v87 = swift_unknownObjectWeakLoadStrong(v85, v86);
          if (v87)
          {
            v88 = (char *)v87;
            v101[3] = &type metadata for AudioAccessoryFeatures;
            v101[4] = sub_1000A42C4();
            v89 = isFeatureEnabled(_:)(v101);
            sub_1000A2140(v101);
            if ((v89 & 1) != 0)
            {
              v91 = swift_unknownObjectWeakLoadStrong(&v88[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v90);
              if (v91)
              {
                v92 = (void *)v91;
                type metadata accessor for AADeviceRecord(0);
                isa = Array._bridgeToObjectiveC()().super.isa;
                objc_msgSend(v92, "aaDeviceRecordsRemovedWithRecords:", isa);

                swift_bridgeObjectRelease(v84);
                return (_QWORD *)swift_unknownObjectRelease(v92);
              }
            }

          }
        }
        else
        {
          result = sub_100113524(a1, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord);
          if (!result)
            return result;
          v84 = result;
          v94 = v100;
          swift_beginAccess(v100, v101, 0, 0);
          v96 = (void *)swift_unknownObjectWeakLoadStrong(v94, v95);
          if (v96)
          {

            v47 = v84;
            return (_QWORD *)swift_bridgeObjectRelease(v47);
          }
        }
        v47 = v84;
        return (_QWORD *)swift_bridgeObjectRelease(v47);
      }
      v49 = v67;
      v68 = v100;
      swift_beginAccess(v100, v101, 0, 0);
      v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
      if (v70)
      {
        v72 = (void *)v70;
        v55 = (void *)swift_unknownObjectWeakLoadStrong(v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v71);

        if (v55)
        {
          v73 = _swiftEmptyArrayStorage;
          v102[0] = (unint64_t)_swiftEmptyArrayStorage;
          v74 = v49[2];
          if (v74)
          {
            v75 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
            v76 = *(_QWORD *)(v97 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000AE548(v75, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              v77 = sub_1000BEDB4();
              v78 = sub_1000AE58C((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
              v80 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v79 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v80 >= v79 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
              v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
              specialized Array._endMutation()(v81);
              v75 += v76;
              --v74;
            }
            while (v74);
            swift_bridgeObjectRelease(v49);
            v73 = (_QWORD *)v102[0];
          }
          swift_bridgeObjectRelease(v49);
          sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
          v82.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v73);
          objc_msgSend(v55, "magicPairingRecordsRemovedWithRecords:", v82.super.isa, v97);
          goto LABEL_42;
        }
      }
    }
    v47 = v49;
    return (_QWORD *)swift_bridgeObjectRelease(v47);
  }
  v23 = v22;
  v24 = v100;
  swift_beginAccess(v100, v101, 0, 0);
  v26 = swift_unknownObjectWeakLoadStrong(v24, v25);
  if (!v26
    || (v28 = (void *)v26,
        v29 = (void *)swift_unknownObjectWeakLoadStrong(v26 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v27), v28, !v29))
  {
    v47 = v23;
    return (_QWORD *)swift_bridgeObjectRelease(v47);
  }
  v30 = _swiftEmptyArrayStorage;
  v102[0] = (unint64_t)_swiftEmptyArrayStorage;
  v31 = v23[2];
  if (v31)
  {
    v100 = v29;
    v32 = (uint64_t)v23 + ((*((unsigned __int8 *)v99 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v99 + 80));
    v33 = v99[9];
    v99 = v23;
    swift_bridgeObjectRetain(v23);
    do
    {
      sub_1000AE548(v32, (uint64_t)v12, type metadata accessor for DeviceRecord);
      v34 = *(_QWORD *)&v12[*(int *)(v10 + 24) + 8];
      v35 = objc_allocWithZone((Class)BTCloudDevice);
      swift_bridgeObjectRetain(v34);
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      v37 = objc_msgSend(v35, "initWithBluetoothAddress:", v36);

      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setNickname:", v38);

      v39 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setModelNumber:", v39);

      v40 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setManufacturer:", v40);

      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setProductID:", v41);

      v42 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setVendorID:", v42);

      v43 = sub_1000AE58C((uint64_t)v12, type metadata accessor for DeviceRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      v45 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v44 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v45 >= v44 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
      specialized Array._endMutation()(v46);
      v32 += v33;
      --v31;
    }
    while (v31);
    v23 = v99;
    swift_bridgeObjectRelease(v99);
    v30 = (_QWORD *)v102[0];
    v29 = v100;
  }
  swift_bridgeObjectRelease(v23);
  sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
  v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  objc_msgSend(v29, "devicesRemovedWithRecords:", v65);

  return (_QWORD *)swift_unknownObjectRelease(v29);
}

_QWORD *sub_100120CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  id v37;
  NSString v38;
  NSString v39;
  NSString v40;
  NSString v41;
  NSString v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t Strong;
  uint64_t v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Class v65;
  _QWORD *result;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  NSArray v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  Class isa;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  _QWORD v101[5];
  unint64_t v102[3];

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v97 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceSupportInformationRecord(0);
  v98 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DeviceRecord(0);
  v99 = *(_QWORD **)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = (void *)(a2 + 16);
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v15 = qword_100218DE0;
  v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100184870;
  v18 = swift_bridgeObjectRetain(a1);
  v19 = Array.description.getter(v18, v10);
  v21 = v20;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Removed: %@", 19, 2, v17);
  swift_bridgeObjectRelease(v17);
  v22 = sub_100113638(a1, type metadata accessor for DeviceRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10014EE40);
  if (!v22)
  {
    v48 = sub_1001133F4(a1, &qword_100210CF8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE14, type metadata accessor for DeviceRecord);
    if (v48)
    {
      v49 = v48;
      v50 = v100;
      swift_beginAccess(v100, v101, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v50, v51);
      if (Strong)
      {
        v54 = (void *)Strong;
        v55 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v53);

        if (v55)
        {
          v56 = _swiftEmptyArrayStorage;
          v102[0] = (unint64_t)_swiftEmptyArrayStorage;
          v57 = v49[2];
          if (v57)
          {
            v58 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
            v59 = *(_QWORD *)(v98 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000AE548(v58, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              v60 = sub_1000BB014();
              v61 = sub_1000AE58C((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
              v63 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v62 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v63 >= v62 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
              v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
              specialized Array._endMutation()(v64);
              v58 += v59;
              --v57;
            }
            while (v57);
            swift_bridgeObjectRelease(v49);
            v56 = (_QWORD *)v102[0];
          }
          swift_bridgeObjectRelease(v49);
          sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
          v82.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v56);
          objc_msgSend(v55, "deviceSupportInformationRecordsRemovedWithRecords:", v82.super.isa, v97);
LABEL_42:

          return (_QWORD *)swift_unknownObjectRelease(v55);
        }
      }
    }
    else
    {
      v67 = sub_1001133F4(a1, &qword_100210CF8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EDE8, type metadata accessor for DeviceRecord);
      if (!v67)
      {
        v83 = sub_100113524(a1, &qword_100210CF8, type metadata accessor for DeviceRecord);
        if (v83)
        {
          v84 = v83;
          v85 = v100;
          swift_beginAccess(v100, v102, 0, 0);
          v87 = swift_unknownObjectWeakLoadStrong(v85, v86);
          if (v87)
          {
            v88 = (char *)v87;
            v101[3] = &type metadata for AudioAccessoryFeatures;
            v101[4] = sub_1000A42C4();
            v89 = isFeatureEnabled(_:)(v101);
            sub_1000A2140(v101);
            if ((v89 & 1) != 0)
            {
              v91 = swift_unknownObjectWeakLoadStrong(&v88[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate], v90);
              if (v91)
              {
                v92 = (void *)v91;
                type metadata accessor for AADeviceRecord(0);
                isa = Array._bridgeToObjectiveC()().super.isa;
                objc_msgSend(v92, "aaDeviceRecordsRemovedWithRecords:", isa);

                swift_bridgeObjectRelease(v84);
                return (_QWORD *)swift_unknownObjectRelease(v92);
              }
            }

          }
        }
        else
        {
          result = sub_100113524(a1, &qword_100210CF8, type metadata accessor for DeviceRecord);
          if (!result)
            return result;
          v84 = result;
          v94 = v100;
          swift_beginAccess(v100, v101, 0, 0);
          v96 = (void *)swift_unknownObjectWeakLoadStrong(v94, v95);
          if (v96)
          {

            v47 = v84;
            return (_QWORD *)swift_bridgeObjectRelease(v47);
          }
        }
        v47 = v84;
        return (_QWORD *)swift_bridgeObjectRelease(v47);
      }
      v49 = v67;
      v68 = v100;
      swift_beginAccess(v100, v101, 0, 0);
      v70 = swift_unknownObjectWeakLoadStrong(v68, v69);
      if (v70)
      {
        v72 = (void *)v70;
        v55 = (void *)swift_unknownObjectWeakLoadStrong(v70 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v71);

        if (v55)
        {
          v73 = _swiftEmptyArrayStorage;
          v102[0] = (unint64_t)_swiftEmptyArrayStorage;
          v74 = v49[2];
          if (v74)
          {
            v75 = (uint64_t)v49
                + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
            v76 = *(_QWORD *)(v97 + 72);
            swift_bridgeObjectRetain(v49);
            do
            {
              sub_1000AE548(v75, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              v77 = sub_1000BEDB4();
              v78 = sub_1000AE58C((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
              v80 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
              v79 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v80 >= v79 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
              v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
              specialized Array._endMutation()(v81);
              v75 += v76;
              --v74;
            }
            while (v74);
            swift_bridgeObjectRelease(v49);
            v73 = (_QWORD *)v102[0];
          }
          swift_bridgeObjectRelease(v49);
          sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
          v82.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v73);
          objc_msgSend(v55, "magicPairingRecordsRemovedWithRecords:", v82.super.isa, v97);
          goto LABEL_42;
        }
      }
    }
    v47 = v49;
    return (_QWORD *)swift_bridgeObjectRelease(v47);
  }
  v23 = v22;
  v24 = v100;
  swift_beginAccess(v100, v101, 0, 0);
  v26 = swift_unknownObjectWeakLoadStrong(v24, v25);
  if (!v26
    || (v28 = (void *)v26,
        v29 = (void *)swift_unknownObjectWeakLoadStrong(v26 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v27), v28, !v29))
  {
    v47 = v23;
    return (_QWORD *)swift_bridgeObjectRelease(v47);
  }
  v30 = _swiftEmptyArrayStorage;
  v102[0] = (unint64_t)_swiftEmptyArrayStorage;
  v31 = v23[2];
  if (v31)
  {
    v100 = v29;
    v32 = (uint64_t)v23 + ((*((unsigned __int8 *)v99 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v99 + 80));
    v33 = v99[9];
    v99 = v23;
    swift_bridgeObjectRetain(v23);
    do
    {
      sub_1000AE548(v32, (uint64_t)v12, type metadata accessor for DeviceRecord);
      v34 = *(_QWORD *)&v12[*(int *)(v10 + 24) + 8];
      v35 = objc_allocWithZone((Class)BTCloudDevice);
      swift_bridgeObjectRetain(v34);
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      v37 = objc_msgSend(v35, "initWithBluetoothAddress:", v36);

      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setNickname:", v38);

      v39 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setModelNumber:", v39);

      v40 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setManufacturer:", v40);

      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setProductID:", v41);

      v42 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setVendorID:", v42);

      v43 = sub_1000AE58C((uint64_t)v12, type metadata accessor for DeviceRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      v45 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v44 = *(_QWORD *)((v102[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v45 >= v44 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v37);
      specialized Array._endMutation()(v46);
      v32 += v33;
      --v31;
    }
    while (v31);
    v23 = v99;
    swift_bridgeObjectRelease(v99);
    v30 = (_QWORD *)v102[0];
    v29 = v100;
  }
  swift_bridgeObjectRelease(v23);
  sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
  v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  objc_msgSend(v29, "devicesRemovedWithRecords:", v65);

  return (_QWORD *)swift_unknownObjectRelease(v29);
}

uint64_t sub_1001215A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v12 - 8);
  v27 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(v4 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  v16 = swift_allocObject(&unk_1001EB698, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v4);
  v17 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = v16;
  aBlock[4] = a3;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = a4;
  v18 = _Block_copy(aBlock);
  v19 = v15;
  swift_bridgeObjectRetain(a1);
  v20 = swift_retain(v16);
  static DispatchQoS.unspecified.getter(v20);
  v29 = _swiftEmptyArrayStorage;
  v21 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_1000A0980(&qword_100211D00);
  v23 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v9, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
  v24 = v31;
  swift_release(v16);
  return swift_release(v24);
}

_QWORD *sub_1001217D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSArray v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *result;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  Class isa;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  Class v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD v94[3];

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v90 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceSupportInformationRecord(0);
  v91 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DeviceRecord(0);
  v92 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2 + 16;
  v15 = static os_log_type_t.default.getter(v14);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v16 = qword_100218DE0;
  v17 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100184870;
  v19 = type metadata accessor for AAProxCardsRecord(0);
  v20 = swift_bridgeObjectRetain(a1);
  v21 = Array.description.getter(v20, v19);
  v23 = v22;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = v23;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "records Purged: %@", 18, 2, v18);
  swift_bridgeObjectRelease(v18);
  v24 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE40);
  if (v24)
  {
    v25 = v24;
    swift_beginAccess(v13, v94, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v13, v26);
    if (Strong)
    {
      v29 = (void *)Strong;
      v30 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v28);

      if (v30)
      {
        v31 = _swiftEmptyArrayStorage;
        v93 = (unint64_t)_swiftEmptyArrayStorage;
        v32 = *(_QWORD *)(v25 + 16);
        if (v32)
        {
          v33 = v25 + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
          v34 = *(_QWORD *)(v92 + 72);
          swift_bridgeObjectRetain(v25);
          do
          {
            sub_1000AE548(v33, (uint64_t)v12, type metadata accessor for DeviceRecord);
            v35 = sub_1000B7110();
            v36 = sub_1000AE58C((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
            v38 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v37 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v38 >= v37 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
            v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
            specialized Array._endMutation()(v39);
            v33 += v34;
            --v32;
          }
          while (v32);
          swift_bridgeObjectRelease(v25);
          v31 = (_QWORD *)v93;
        }
        swift_bridgeObjectRelease(v25);
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        v56.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        objc_msgSend(v30, "allDevicesRemovedWithRecords:", v56.super.isa);
LABEL_34:

        return (_QWORD *)swift_unknownObjectRelease(v30);
      }
    }
    v40 = (_QWORD *)v25;
    return (_QWORD *)swift_bridgeObjectRelease(v40);
  }
  v41 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE14);
  if (v41)
  {
    v42 = v41;
    swift_beginAccess(v13, v94, 0, 0);
    v44 = swift_unknownObjectWeakLoadStrong(v13, v43);
    if (v44)
    {
      v46 = (void *)v44;
      v30 = (void *)swift_unknownObjectWeakLoadStrong(v44 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v45);

      if (v30)
      {
        v47 = _swiftEmptyArrayStorage;
        v93 = (unint64_t)_swiftEmptyArrayStorage;
        v48 = *(_QWORD *)(v42 + 16);
        if (v48)
        {
          v49 = v42 + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
          v50 = *(_QWORD *)(v91 + 72);
          swift_bridgeObjectRetain(v42);
          do
          {
            sub_1000AE548(v49, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            v51 = sub_1000BB014();
            v52 = sub_1000AE58C((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
            v54 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v53 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v54 >= v53 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
            v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
            specialized Array._endMutation()(v55);
            v49 += v50;
            --v48;
          }
          while (v48);
          swift_bridgeObjectRelease(v42);
          v47 = (_QWORD *)v93;
        }
        swift_bridgeObjectRelease(v42);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v56.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v47);
        objc_msgSend(v30, "allDeviceSupportInformationRecordsRemovedWithRecords:", v56.super.isa);
        goto LABEL_34;
      }
    }
    v40 = (_QWORD *)v42;
    return (_QWORD *)swift_bridgeObjectRelease(v40);
  }
  v57 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EDE8);
  if (v57)
  {
    v58 = v57;
    swift_beginAccess(v13, v94, 0, 0);
    v60 = swift_unknownObjectWeakLoadStrong(v13, v59);
    if (v60)
    {
      v62 = (void *)v60;
      v63 = (void *)swift_unknownObjectWeakLoadStrong(v60 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v61);

      if (v63)
      {
        v64 = _swiftEmptyArrayStorage;
        v93 = (unint64_t)_swiftEmptyArrayStorage;
        v65 = *(_QWORD *)(v58 + 16);
        if (v65)
        {
          v66 = v58 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
          v67 = *(_QWORD *)(v90 + 72);
          swift_bridgeObjectRetain(v58);
          do
          {
            sub_1000AE548(v66, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            v68 = sub_1000BEDB4();
            v69 = sub_1000AE58C((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v69);
            v71 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v70 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v71 >= v70 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
            v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v68);
            specialized Array._endMutation()(v72);
            v66 += v67;
            --v65;
          }
          while (v65);
          swift_bridgeObjectRelease(v58);
          v64 = (_QWORD *)v93;
        }
        swift_bridgeObjectRelease(v58);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v64);
        objc_msgSend(v63, "allMagicPairingRecordsRemovedWithRecords:", isa);

        return (_QWORD *)swift_unknownObjectRelease(v63);
      }
    }
    v40 = (_QWORD *)v58;
    return (_QWORD *)swift_bridgeObjectRelease(v40);
  }
  v94[0] = _swiftEmptyArrayStorage;
  if (!((unint64_t)a1 >> 62))
  {
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_38;
LABEL_52:
    v81 = v94[0];
    swift_beginAccess(v13, v94, 0, 0);
    v83 = swift_unknownObjectWeakLoadStrong(v13, v82);
    if (v83)
    {
      v85 = (void *)v83;
      v86 = swift_unknownObjectWeakLoadStrong(v83 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate, v84);
      if (v86)
      {
        v63 = (void *)v86;
        type metadata accessor for AADeviceRecord(0);
        v87 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v63, "aaDeviceRecordsRemovedWithRecords:", v87);

        swift_release(v81);
        return (_QWORD *)swift_unknownObjectRelease(v63);
      }

    }
    return (_QWORD *)swift_release(v81);
  }
  if (a1 < 0)
    v78 = a1;
  else
    v78 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v79 = _CocoaArrayWrapper.endIndex.getter(v78);
  swift_bridgeObjectRelease(a1);
  specialized ContiguousArray.reserveCapacity(_:)(v79);
  swift_bridgeObjectRetain(a1);
  v80 = _CocoaArrayWrapper.endIndex.getter(v78);
  result = (_QWORD *)swift_bridgeObjectRelease(a1);
  if (!v80)
    goto LABEL_52;
LABEL_38:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v88 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    swift_unknownObjectRelease(v88);
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return result;
  }
  swift_release(v94[0]);
  result = sub_100113280(a1);
  if (result)
  {
    v74 = result;
    swift_beginAccess(v13, v94, 0, 0);
    v76 = (void *)swift_unknownObjectWeakLoadStrong(v13, v75);
    if (v76)

    v40 = v74;
    return (_QWORD *)swift_bridgeObjectRelease(v40);
  }
  return result;
}

uint64_t sub_100121F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  NSArray v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t result;
  void *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  Class v85;
  Class isa;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD v100[3];

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v95 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceSupportInformationRecord(0);
  v96 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DeviceRecord(0);
  v97 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = a2 + 16;
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v15 = qword_100218DE0;
  v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100184870;
  v18 = type metadata accessor for AADeviceRecord(0);
  v19 = swift_bridgeObjectRetain(a1);
  v20 = Array.description.getter(v19, v18);
  v22 = v21;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v17 + 32) = v20;
  *(_QWORD *)(v17 + 40) = v22;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "records Purged: %@", 18, 2, v17);
  swift_bridgeObjectRelease(v17);
  v23 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE40);
  if (v23)
  {
    v24 = v23;
    v25 = v98;
    swift_beginAccess(v98, v100, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v25, v26);
    if (Strong)
    {
      v29 = (void *)Strong;
      v30 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v28);

      if (v30)
      {
        v31 = _swiftEmptyArrayStorage;
        v99 = (unint64_t)_swiftEmptyArrayStorage;
        v32 = *(_QWORD *)(v24 + 16);
        if (v32)
        {
          v33 = v24 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
          v34 = *(_QWORD *)(v97 + 72);
          swift_bridgeObjectRetain(v24);
          do
          {
            sub_1000AE548(v33, (uint64_t)v12, type metadata accessor for DeviceRecord);
            v35 = sub_1000B7110();
            v36 = sub_1000AE58C((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
            v38 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v37 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v38 >= v37 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
            v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
            specialized Array._endMutation()(v39);
            v33 += v34;
            --v32;
          }
          while (v32);
          swift_bridgeObjectRelease(v24);
          v31 = (_QWORD *)v99;
        }
        swift_bridgeObjectRelease(v24);
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        v57.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        objc_msgSend(v30, "allDevicesRemovedWithRecords:", v57.super.isa, v95);
LABEL_35:

        v75 = v30;
        return swift_unknownObjectRelease(v75);
      }
    }
    v40 = (_QWORD *)v24;
    return swift_bridgeObjectRelease(v40);
  }
  v41 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EE14);
  if (v41)
  {
    v42 = v41;
    v43 = v98;
    swift_beginAccess(v98, v100, 0, 0);
    v45 = swift_unknownObjectWeakLoadStrong(v43, v44);
    if (v45)
    {
      v47 = (void *)v45;
      v30 = (void *)swift_unknownObjectWeakLoadStrong(v45 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v46);

      if (v30)
      {
        v48 = _swiftEmptyArrayStorage;
        v99 = (unint64_t)_swiftEmptyArrayStorage;
        v49 = *(_QWORD *)(v42 + 16);
        if (v49)
        {
          v50 = v42 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80));
          v51 = *(_QWORD *)(v96 + 72);
          swift_bridgeObjectRetain(v42);
          do
          {
            sub_1000AE548(v50, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            v52 = sub_1000BB014();
            v53 = sub_1000AE58C((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
            v55 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v54 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v55 >= v54 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
            v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v52);
            specialized Array._endMutation()(v56);
            v50 += v51;
            --v49;
          }
          while (v49);
          swift_bridgeObjectRelease(v42);
          v48 = (_QWORD *)v99;
        }
        swift_bridgeObjectRelease(v42);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v57.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v48);
        objc_msgSend(v30, "allDeviceSupportInformationRecordsRemovedWithRecords:", v57.super.isa, v95);
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  v58 = sub_100113164(a1, (void (*)(_QWORD, uint64_t, _QWORD))sub_10014EDE8);
  if (v58)
  {
    v42 = v58;
    v59 = v98;
    swift_beginAccess(v98, v100, 0, 0);
    v61 = swift_unknownObjectWeakLoadStrong(v59, v60);
    if (v61)
    {
      v63 = (void *)v61;
      v64 = (void *)swift_unknownObjectWeakLoadStrong(v61 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v62);

      if (v64)
      {
        v65 = _swiftEmptyArrayStorage;
        v99 = (unint64_t)_swiftEmptyArrayStorage;
        v66 = *(_QWORD *)(v42 + 16);
        if (v66)
        {
          v67 = v42 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
          v68 = *(_QWORD *)(v95 + 72);
          swift_bridgeObjectRetain(v42);
          do
          {
            sub_1000AE548(v67, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            v69 = sub_1000BEDB4();
            v70 = sub_1000AE58C((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v70);
            v72 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v71 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v72 >= v71 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
            v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v69);
            specialized Array._endMutation()(v73);
            v67 += v68;
            --v66;
          }
          while (v66);
          swift_bridgeObjectRelease(v42);
          v65 = (_QWORD *)v99;
        }
        swift_bridgeObjectRelease(v42);
        sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v65);
        objc_msgSend(v64, "allMagicPairingRecordsRemovedWithRecords:", isa);

        v75 = v64;
        return swift_unknownObjectRelease(v75);
      }
    }
LABEL_32:
    v40 = (_QWORD *)v42;
    return swift_bridgeObjectRelease(v40);
  }
  v76 = sub_100113280(a1);
  if (v76)
  {
    v77 = v76;
    v78 = v98;
    swift_beginAccess(v98, v100, 0, 0);
    v80 = swift_unknownObjectWeakLoadStrong(v78, v79);
    if (v80)
    {
      v82 = (void *)v80;
      v83 = swift_unknownObjectWeakLoadStrong(v80 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate, v81);
      if (v83)
      {
        v84 = (void *)v83;
        v85 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v84, "aaDeviceRecordsRemovedWithRecords:", v85);

        swift_bridgeObjectRelease(v77);
        v75 = v84;
        return swift_unknownObjectRelease(v75);
      }

    }
    v40 = v77;
    return swift_bridgeObjectRelease(v40);
  }
  v100[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v87 = a1;
    else
      v87 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v88 = _CocoaArrayWrapper.endIndex.getter(v87);
    swift_bridgeObjectRelease(a1);
    specialized ContiguousArray.reserveCapacity(_:)(v88);
    swift_bridgeObjectRetain(a1);
    v89 = _CocoaArrayWrapper.endIndex.getter(v87);
    result = swift_bridgeObjectRelease(a1);
    if (v89)
      goto LABEL_44;
LABEL_53:
    v90 = v100[0];
    v91 = v98;
    swift_beginAccess(v98, v100, 0, 0);
    v93 = (void *)swift_unknownObjectWeakLoadStrong(v91, v92);
    if (v93)

    return swift_release(v90);
  }
  result = specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_53;
LABEL_44:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v94 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    swift_unknownObjectRelease(v94);
    return swift_release(v100[0]);
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    return swift_release(v100[0]);
  __break(1u);
  return result;
}

_QWORD *sub_100122764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSArray v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *result;
  void *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  Class v80;
  Class isa;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE v89[24];

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  v85 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceSupportInformationRecord(0);
  v86 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DeviceRecord(0);
  v87 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2 + 16;
  v15 = static os_log_type_t.default.getter(v14);
  if (qword_1002101D8 != -1)
    swift_once(&qword_1002101D8, sub_100168748);
  v16 = qword_100218DE0;
  v17 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100184870;
  v19 = swift_bridgeObjectRetain(a1);
  v20 = Array.description.getter(v19, v10);
  v22 = v21;
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "records Purged: %@", 18, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = sub_100113638(a1, type metadata accessor for DeviceRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10014EE40);
  if (v23)
  {
    v24 = v23;
    swift_beginAccess(v13, v89, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v13, v25);
    if (Strong)
    {
      v28 = (void *)Strong;
      v29 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v27);

      if (v29)
      {
        v30 = _swiftEmptyArrayStorage;
        v88 = (unint64_t)_swiftEmptyArrayStorage;
        v31 = v24[2];
        if (v31)
        {
          v32 = (uint64_t)v24
              + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
          v33 = *(_QWORD *)(v87 + 72);
          swift_bridgeObjectRetain(v24);
          do
          {
            sub_1000AE548(v32, (uint64_t)v12, type metadata accessor for DeviceRecord);
            v34 = sub_1000B7110();
            v35 = sub_1000AE58C((uint64_t)v12, type metadata accessor for DeviceRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
            v37 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v36 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v37 >= v36 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
            v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
            specialized Array._endMutation()(v38);
            v32 += v33;
            --v31;
          }
          while (v31);
          swift_bridgeObjectRelease(v24);
          v30 = (_QWORD *)v88;
        }
        swift_bridgeObjectRelease(v24);
        sub_1000AB31C(0, &qword_100210D00, BTCloudDevice_ptr);
        v55.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v30);
        objc_msgSend(v29, "allDevicesRemovedWithRecords:", v55.super.isa);
LABEL_35:

        v72 = v29;
        return (_QWORD *)swift_unknownObjectRelease(v72);
      }
    }
    v39 = v24;
    return (_QWORD *)swift_bridgeObjectRelease(v39);
  }
  v40 = sub_1001133F4(a1, &qword_100210CF8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EE14, type metadata accessor for DeviceRecord);
  if (v40)
  {
    v41 = v40;
    swift_beginAccess(v13, v89, 0, 0);
    v43 = swift_unknownObjectWeakLoadStrong(v13, v42);
    if (v43)
    {
      v45 = (void *)v43;
      v29 = (void *)swift_unknownObjectWeakLoadStrong(v43 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v44);

      if (v29)
      {
        v46 = _swiftEmptyArrayStorage;
        v88 = (unint64_t)_swiftEmptyArrayStorage;
        v47 = v41[2];
        if (v47)
        {
          v48 = (uint64_t)v41
              + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80));
          v49 = *(_QWORD *)(v86 + 72);
          swift_bridgeObjectRetain(v41);
          do
          {
            sub_1000AE548(v48, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            v50 = sub_1000BB014();
            v51 = sub_1000AE58C((uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
            v53 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v52 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v53 >= v52 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
            v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v50);
            specialized Array._endMutation()(v54);
            v48 += v49;
            --v47;
          }
          while (v47);
          swift_bridgeObjectRelease(v41);
          v46 = (_QWORD *)v88;
        }
        swift_bridgeObjectRelease(v41);
        sub_1000AB31C(0, (unint64_t *)&unk_100212280, BTCloudDeviceSupportInformation_ptr);
        v55.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v46);
        objc_msgSend(v29, "allDeviceSupportInformationRecordsRemovedWithRecords:", v55.super.isa);
        goto LABEL_35;
      }
    }
    goto LABEL_32;
  }
  v56 = sub_1001133F4(a1, &qword_100210CF8, (void (*)(_QWORD, uint64_t, _QWORD, __n128))sub_10014EDE8, type metadata accessor for DeviceRecord);
  if (v56)
  {
    v41 = v56;
    swift_beginAccess(v13, v89, 0, 0);
    v58 = swift_unknownObjectWeakLoadStrong(v13, v57);
    if (!v58
      || (v60 = (void *)v58,
          v61 = (void *)swift_unknownObjectWeakLoadStrong(v58 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_deviceDelegate, v59), v60, !v61))
    {
LABEL_32:
      v39 = v41;
      return (_QWORD *)swift_bridgeObjectRelease(v39);
    }
    v62 = _swiftEmptyArrayStorage;
    v88 = (unint64_t)_swiftEmptyArrayStorage;
    v63 = v41[2];
    if (v63)
    {
      v64 = (uint64_t)v41 + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80));
      v65 = *(_QWORD *)(v85 + 72);
      swift_bridgeObjectRetain(v41);
      do
      {
        sub_1000AE548(v64, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
        v66 = sub_1000BEDB4();
        v67 = sub_1000AE58C((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v67);
        v69 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v68 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v69 >= v68 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
        v70 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, v66);
        specialized Array._endMutation()(v70);
        v64 += v65;
        --v63;
      }
      while (v63);
      swift_bridgeObjectRelease(v41);
      v62 = (_QWORD *)v88;
    }
    swift_bridgeObjectRelease(v41);
    sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v62);
    objc_msgSend(v61, "allMagicPairingRecordsRemovedWithRecords:", isa);

LABEL_43:
    v72 = v61;
    return (_QWORD *)swift_unknownObjectRelease(v72);
  }
  v73 = sub_100113524(a1, &qword_100210CF8, type metadata accessor for DeviceRecord);
  if (v73)
  {
    v74 = v73;
    swift_beginAccess(v13, v89, 0, 0);
    v76 = swift_unknownObjectWeakLoadStrong(v13, v75);
    if (v76)
    {
      v78 = (void *)v76;
      v79 = swift_unknownObjectWeakLoadStrong(v76 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_aaDeviceDelegate, v77);
      if (!v79)
      {

        v39 = v74;
        return (_QWORD *)swift_bridgeObjectRelease(v39);
      }
      v61 = (void *)v79;
      type metadata accessor for AADeviceRecord(0);
      v80 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v61, "aaDeviceRecordsRemovedWithRecords:", v80);

      swift_bridgeObjectRelease(v74);
      goto LABEL_43;
    }
LABEL_47:
    v39 = v74;
    return (_QWORD *)swift_bridgeObjectRelease(v39);
  }
  result = sub_100113524(a1, &qword_100210CF8, type metadata accessor for DeviceRecord);
  if (result)
  {
    v74 = result;
    swift_beginAccess(v13, v89, 0, 0);
    v83 = (void *)swift_unknownObjectWeakLoadStrong(v13, v82);
    if (v83)

    goto LABEL_47;
  }
  return result;
}

unint64_t sub_100122EAC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  _QWORD v23[3];

  v4 = HIBYTE(a2) & 0xF;
  v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v6 = v4;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v8 = sub_10014F428(a1, a2, 10, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10014F518);
    v10 = v22;
    goto LABEL_39;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    v8 = (unint64_t)sub_10014F518(v7, v5, 10);
    v10 = v9 & 1;
    goto LABEL_39;
  }
  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4)
      goto LABEL_52;
    if (v4 == 1 || (BYTE1(a1) - 48) > 9u)
      goto LABEL_36;
    v8 = (BYTE1(a1) - 48);
    v15 = v4 - 2;
    if (v15)
    {
      v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        v17 = *v16 - 48;
        if (v17 > 9)
          goto LABEL_36;
        if (!is_mul_ok(v8, 0xAuLL))
          goto LABEL_36;
        v14 = __CFADD__(10 * v8, v17);
        v8 = 10 * v8 + v17;
        if (v14)
          goto LABEL_36;
        v10 = 0;
        ++v16;
        if (!--v15)
          goto LABEL_39;
      }
    }
LABEL_38:
    v10 = 0;
    goto LABEL_39;
  }
  if (a1 != 45)
  {
    if (!v4 || (a1 - 48) > 9u)
      goto LABEL_36;
    v8 = (a1 - 48);
    v18 = v4 - 1;
    if (v18)
    {
      v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        v21 = *v20 - 48;
        if (v21 > 9)
          goto LABEL_36;
        if (!is_mul_ok(v8, 0xAuLL))
          goto LABEL_36;
        v14 = __CFADD__(10 * v8, v21);
        v8 = 10 * v8 + v21;
        if (v14)
          goto LABEL_36;
        v10 = 0;
        ++v20;
        if (!--v18)
          goto LABEL_39;
      }
    }
    goto LABEL_38;
  }
  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      v2 = 0;
      v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        v11 = v4 - 2;
        if (v11)
        {
          v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            v13 = *v12 - 48;
            if (v13 > 9)
              goto LABEL_36;
            if (!is_mul_ok(v8, 0xAuLL))
              goto LABEL_36;
            v14 = 10 * v8 >= v13;
            v8 = 10 * v8 - v13;
            if (!v14)
              goto LABEL_36;
            v10 = 0;
            ++v12;
            if (!--v11)
              goto LABEL_39;
          }
        }
        goto LABEL_38;
      }
      goto LABEL_53;
    }
LABEL_36:
    v8 = 0;
    v10 = 1;
    goto LABEL_39;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  v10 = 1;
  v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease(a2);
  if ((v10 & 1) != 0)
    return 0;
  else
    return v8;
}

uint64_t sub_100123110(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v7 = (uint64_t)sub_10014F794(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = sub_10014F428(result, a2, 10, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10014F794);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

uint64_t sub_100123364(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[3];

  v13 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = PropertyListDecoder.init()();
  v15 = a3(0);
  v16 = sub_1000A0940(a4, a3, a5);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v15, a1, a2, v15, v16);
  if (v6)
  {
    v17 = swift_release(v14);
    v18 = static os_log_type_t.error.getter(v17);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    v19 = qword_100218DF0;
    v20 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v21 = swift_allocObject(v20, 112, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1001858F0;
    v32[0] = v15;
    v22 = sub_1000A0980(a6);
    v23 = String.init<A>(describing:)(v32, v22);
    v25 = v24;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    v26 = sub_1000A0DF4();
    *(_QWORD *)(v21 + 64) = v26;
    *(_QWORD *)(v21 + 32) = v23;
    *(_QWORD *)(v21 + 40) = v25;
    v32[0] = v6;
    swift_errorRetain(v6);
    v27 = sub_1000A0980(&qword_100210710);
    v28 = String.init<A>(describing:)(v32, v27);
    *(_QWORD *)(v21 + 96) = &type metadata for String;
    *(_QWORD *)(v21 + 104) = v26;
    *(_QWORD *)(v21 + 72) = v28;
    *(_QWORD *)(v21 + 80) = v29;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Error decoding %@: %@", 21, 2, v21);
    v30 = swift_bridgeObjectRelease(v21);
    return swift_willThrow(v30);
  }
  else
  {
    swift_release(v14);
    return v32[2];
  }
}

uint64_t sub_100123540(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;

  v12 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = PropertyListDecoder.init()();
  v14 = a3(0);
  v15 = sub_1000A0940(a4, a3, a5);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v14, a1, a2, v14, v15);
  if (!v6)
    return swift_release(v13);
  v16 = swift_release(v13);
  v17 = static os_log_type_t.error.getter(v16);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  v18 = qword_100218DF0;
  v19 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v20 = swift_allocObject(v19, 112, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1001858F0;
  v32 = v14;
  v21 = sub_1000A0980(a6);
  v22 = String.init<A>(describing:)(&v32, v21);
  v24 = v23;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v25 = sub_1000A0DF4();
  *(_QWORD *)(v20 + 64) = v25;
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  v32 = v6;
  swift_errorRetain(v6);
  v26 = sub_1000A0980(&qword_100210710);
  v27 = String.init<A>(describing:)(&v32, v26);
  *(_QWORD *)(v20 + 96) = &type metadata for String;
  *(_QWORD *)(v20 + 104) = v25;
  *(_QWORD *)(v20 + 72) = v27;
  *(_QWORD *)(v20 + 80) = v28;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Error decoding %@: %@", 21, 2, v20);
  v29 = swift_bridgeObjectRelease(v20);
  return swift_willThrow(v29);
}

void sub_100123714(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  NSURL *v66;
  void *v67;
  void *v68;
  Class v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t inited;
  NSString *v81;
  NSString *v82;
  unint64_t v83;
  id v84;
  _OWORD *v85;
  Class v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  NSString v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  Class isa;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  char v108[48];
  id v109[3];
  ValueMetadata *v110;
  unint64_t v111;

  v5 = type metadata accessor for URLResourceValues(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v105 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v104 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  *(_QWORD *)&v107 = (char *)&v95 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v95 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v95 - v17;
  v19 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v19)
  {
    v101 = v6;
    v102 = v5;
    v106 = v8;
    v20 = objc_autoreleasePoolPush();
    v109[0] = a2;
    v21 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    v22 = PropertyListEncoder.init()();
    v23 = type metadata accessor for AADeviceRecord(0);
    v24 = sub_1000A0940(&qword_100211BD0, type metadata accessor for AADeviceRecord, (uint64_t)&protocol conformance descriptor for AADeviceRecord);
    v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v109, v23, v24);
    v103 = v2;
    if (v2)
    {
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
    }
    else
    {
      v31 = v25;
      v32 = v26;
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A103C(v31, v32);
      v33 = a1 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (qword_1002101B0 != -1)
        swift_once(&qword_1002101B0, sub_100106014);
      v34 = v106;
      v35 = sub_1000A0A00(v106, (uint64_t)qword_100218D68);
      v100 = *(char **)(v9 + 16);
      v36.n128_f64[0] = ((double (*)(char *, uint64_t, uint64_t))v100)(v15, v35, v34);
      v37 = URL.path.getter(v36);
      v39 = v38;
      v96 = v9;
      v40 = *(void (**)(char *, uint64_t))(v9 + 8);
      v40(v15, v34);
      URL.appendingPathComponent(_:)(v37);
      swift_bridgeObjectRelease(v39);
      v99 = v33;
      if (qword_100210128 != -1)
        swift_once(&qword_100210128, sub_1000A29E4);
      v41 = qword_100218BF8;
      swift_bridgeObjectRetain(qword_100218BF8);
      sub_1000A2A5C();
      swift_bridgeObjectRelease(v41);
      v42 = ((uint64_t (*)(char *, uint64_t))v40)(v18, v34);
      v43 = UUID.uuidString.getter(v42);
      v45 = v44;
      ((void (*)(char *, uint64_t, uint64_t))v100)(v18, v35, v34);
      v46 = objc_autoreleasePoolPush();
      v95 = v35;
      v47 = v46;
      v49 = URL.path.getter(v48);
      v51 = v50;
      URL.appendingPathComponent(_:)(v49);
      swift_bridgeObjectRelease(v51);
      URL.appendingPathComponent(_:)(v43);
      v40(v15, v106);
      v52 = v47;
      v53 = v106;
      objc_autoreleasePoolPop(v52);
      swift_bridgeObjectRelease(v45);
      v40(v18, v53);
      v110 = &type metadata for AudioAccessoryFeatures;
      v54 = sub_1000A42C4();
      v111 = v54;
      LOBYTE(v51) = isFeatureEnabled(_:)(v109);
      sub_1000A2140(v109);
      v97 = (void (*)(uint64_t, uint64_t))v40;
      if ((v51 & 1) != 0)
      {
        v55 = *(_QWORD *)&a2[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
        ((void (*)(char *, uint64_t, uint64_t))v100)(v15, v95, v53);
        v100 = a2;
        v56 = objc_autoreleasePoolPush();
        v58 = URL.path.getter(v57);
        v60 = v59;
        v61 = v104;
        URL.appendingPathComponent(_:)(v58);
        swift_bridgeObjectRelease(v60);
        URL.appendingPathComponent(_:)(v55);
        v40(v61, v106);
        v62 = v56;
        v53 = v106;
        objc_autoreleasePoolPop(v62);
        v40(v15, v53);
        v63 = v107;
        v40((char *)v107, v53);

        v64 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v96 + 32))(v63, v18, v53);
      }
      else
      {
        v110 = &type metadata for AudioAccessoryFeatures;
        v111 = v54;
        isFeatureEnabled(_:)(v109);
        v64 = sub_1000A2140(v109);
        v63 = v107;
      }
      v65 = v105;
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1);
      URL._bridgeToObjectiveC()(v66);
      v68 = v67;
      v69 = isa;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1);

      v71 = static os_log_type_t.default.getter(v70);
      if (qword_1002101E8 != -1)
        swift_once(&qword_1002101E8, sub_100168814);
      v72 = qword_100218DF0;
      v73 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v74 = swift_allocObject(v73, 72, 7);
      v107 = xmmword_100184870;
      *(_OWORD *)(v74 + 16) = xmmword_100184870;
      v75 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v53, v75);
      v78 = v77;
      *(_QWORD *)(v74 + 56) = &type metadata for String;
      *(_QWORD *)(v74 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v74 + 32) = v76;
      *(_QWORD *)(v74 + 40) = v78;
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "Writing record to file: %@", 26, 2, v74);
      swift_bridgeObjectRelease(v74);
      v79 = sub_1000A0980(&qword_100211068);
      inited = swift_initStackObject(v79, v108);
      *(_OWORD *)(inited + 16) = v107;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v81 = NSFileProtectionKey;
      v82 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v83 = sub_1000A5070(inited);
      v84 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v85 = sub_1001272DC(v83);
      swift_bridgeObjectRelease(v83);
      type metadata accessor for FileAttributeKey(0);
      sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
      v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v85);
      URL.path.getter(v87);
      v89 = v88;
      v90 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v89);
      v109[0] = 0;
      LODWORD(v89) = objc_msgSend(v84, "setAttributes:ofItemAtPath:error:", v86, v90, v109);

      v91 = v109[0];
      if ((_DWORD)v89)
      {
        v92 = v109[0];
        URL.setResourceValues(_:)(v65);
      }
      else
      {
        v93 = v109[0];
        _convertNSErrorToError(_:)(v91);

        swift_willThrow(v94);
      }

      (*(void (**)(char *, uint64_t))(v101 + 8))(v65, v102);
      v97(v63, v53);
    }
  }
  else
  {
    v27 = static os_log_type_t.default.getter(v19);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_100218DF0, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_1000D8604();
    v29 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v28, 0, 0);
    *v30 = 0x8000000000000010;
    swift_willThrow(v29);
  }
}

void sub_100123F7C(uint64_t a1, uint64_t a2)
{
  sub_100124834(a1, a2, type metadata accessor for CloudCoordinatorConfiguration, &qword_100211118, (uint64_t)&unk_100186C70, (uint64_t)&qword_100210170, (double (*)(char *, uint64_t, uint64_t))qword_100218D10, (uint64_t)sub_1000D8E08);
}

void sub_100123FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  NSURL *v66;
  void *v67;
  void *v68;
  Class v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t inited;
  NSString *v81;
  NSString *v82;
  unint64_t v83;
  id v84;
  _OWORD *v85;
  Class v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  NSString v90;
  id v91;
  uint64_t v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  Class isa;
  uint64_t v99;
  double (*v100)(char *, uint64_t, uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  char *v107;
  char *v108;
  uint64_t v109;
  id v110;
  char v111[48];

  v105 = a1;
  v4 = type metadata accessor for URLResourceValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DeviceRecord(0);
  __chkstk_darwin(v8);
  v107 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  *(_QWORD *)&v106 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v108 = (char *)&v96 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v96 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v96 - v18;
  v20 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v20)
  {
    v102 = v5;
    v103 = v10;
    v101 = v7;
    v21 = objc_autoreleasePoolPush();
    v22 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = PropertyListEncoder.init()();
    v24 = sub_1000A0940(&qword_1002104F0, type metadata accessor for DeviceRecord, (uint64_t)&unk_100185200);
    v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v8, v24);
    v104 = v2;
    if (v2)
    {
      swift_release(v23);
      objc_autoreleasePoolPop(v21);
    }
    else
    {
      v31 = v25;
      v32 = v26;
      swift_release(v23);
      objc_autoreleasePoolPop(v21);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A103C(v31, v32);
      v105 += OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (qword_100210120 != -1)
        swift_once(&qword_100210120, sub_10009C800);
      v99 = v4;
      v33 = v109;
      v34 = sub_1000A0A00(v109, (uint64_t)qword_100218BE0);
      v35 = v103;
      v100 = *(double (**)(char *, uint64_t, uint64_t))(v103 + 16);
      v36.n128_f64[0] = v100(v16, v34, v33);
      v37 = URL.path.getter(v36);
      v39 = v38;
      v40 = *(void (**)(char *, uint64_t))(v35 + 8);
      v40(v16, v33);
      URL.appendingPathComponent(_:)(v37);
      swift_bridgeObjectRelease(v39);
      if (qword_100210128 != -1)
        swift_once(&qword_100210128, sub_1000A29E4);
      v41 = qword_100218BF8;
      swift_bridgeObjectRetain(qword_100218BF8);
      sub_1000A2A5C();
      swift_bridgeObjectRelease(v41);
      v42 = ((uint64_t (*)(char *, uint64_t))v40)(v19, v33);
      v96 = UUID.uuidString.getter(v42);
      v43 = v40;
      v45 = v44;
      v100(v19, v34, v109);
      v46 = objc_autoreleasePoolPush();
      v48 = URL.path.getter(v47);
      v97 = v34;
      v50 = v49;
      URL.appendingPathComponent(_:)(v48);
      swift_bridgeObjectRelease(v50);
      URL.appendingPathComponent(_:)(v96);
      v43(v16, v109);
      objc_autoreleasePoolPop(v46);
      swift_bridgeObjectRelease(v45);
      v43(v19, v109);
      v51 = v107;
      sub_1000AE548(a2, (uint64_t)v107, type metadata accessor for DeviceRecord);
      v52 = (uint64_t *)&v51[*(int *)(v8 + 24)];
      v53 = v52[1];
      v96 = *v52;
      v100(v16, v97, v109);
      swift_bridgeObjectRetain(v53);
      v54 = objc_autoreleasePoolPush();
      v56 = URL.path.getter(v55);
      v58 = v57;
      v59 = (char *)v106;
      URL.appendingPathComponent(_:)(v56);
      v60 = v58;
      v61 = v108;
      swift_bridgeObjectRelease(v60);
      URL.appendingPathComponent(_:)(v96);
      v43(v59, v109);
      objc_autoreleasePoolPop(v54);
      swift_bridgeObjectRelease(v53);
      v43(v16, v109);
      v62 = (uint64_t)v51;
      v63 = v109;
      sub_1000AE58C(v62, type metadata accessor for DeviceRecord);
      v107 = (char *)v43;
      v43(v61, v63);
      v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v103 + 32))(v61, v19, v63);
      v65 = v101;
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1);
      URL._bridgeToObjectiveC()(v66);
      v68 = v67;
      v69 = isa;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1);

      v71 = static os_log_type_t.default.getter(v70);
      if (qword_1002101E8 != -1)
        swift_once(&qword_1002101E8, sub_100168814);
      v72 = qword_100218DF0;
      v73 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v74 = swift_allocObject(v73, 72, 7);
      v106 = xmmword_100184870;
      *(_OWORD *)(v74 + 16) = xmmword_100184870;
      v75 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v63, v75);
      v78 = v77;
      *(_QWORD *)(v74 + 56) = &type metadata for String;
      *(_QWORD *)(v74 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v74 + 32) = v76;
      *(_QWORD *)(v74 + 40) = v78;
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "Writing record to file: %@", 26, 2, v74);
      swift_bridgeObjectRelease(v74);
      v79 = sub_1000A0980(&qword_100211068);
      inited = swift_initStackObject(v79, v111);
      *(_OWORD *)(inited + 16) = v106;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v81 = NSFileProtectionKey;
      v82 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v83 = sub_1000A5070(inited);
      v84 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v85 = sub_1001272DC(v83);
      swift_bridgeObjectRelease(v83);
      type metadata accessor for FileAttributeKey(0);
      sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
      v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v85);
      URL.path.getter(v87);
      v89 = v88;
      v90 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v89);
      v110 = 0;
      LOBYTE(v89) = objc_msgSend(v84, "setAttributes:ofItemAtPath:error:", v86, v90, &v110);

      v91 = v110;
      v92 = v99;
      if ((v89 & 1) != 0)
      {
        v93 = v110;
        URL.setResourceValues(_:)(v65);
      }
      else
      {
        v94 = v110;
        _convertNSErrorToError(_:)(v91);

        swift_willThrow(v95);
      }

      (*(void (**)(char *, uint64_t))(v102 + 8))(v65, v92);
      ((void (*)(char *, uint64_t))v107)(v61, v63);
    }
  }
  else
  {
    v27 = static os_log_type_t.default.getter(v20);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_100218DF0, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_1000D8604();
    v29 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v28, 0, 0);
    *v30 = 0x8000000000000010;
    swift_willThrow(v29);
  }
}

void sub_100124834(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t a6, double (*a7)(char *, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  __n128 v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  NSURL *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t inited;
  NSString *v75;
  NSString *v76;
  unint64_t v77;
  id v78;
  _OWORD *v79;
  Class v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  NSString v84;
  id v85;
  id v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  double (*v97)(char *, uint64_t, uint64_t);
  char *v98;
  char *v99;
  uint64_t v100;
  Class isa;
  char v102[48];
  id v103[3];
  ValueMetadata *v104;
  unint64_t v105;

  v94 = a8;
  v95 = a1;
  v97 = a7;
  *(_QWORD *)&v96 = a6;
  v12 = type metadata accessor for URLResourceValues(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v99 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v98 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v90 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v90 - v21;
  v23 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v23)
  {
    v91 = v13;
    v92 = v12;
    v93 = objc_autoreleasePoolPush();
    v24 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v25 = PropertyListEncoder.init()();
    v26 = a3(0);
    v27 = sub_1000A0940(a4, a3, a5);
    v28 = isa;
    v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v26, v27);
    if (v28)
    {
      swift_release(v25);
      objc_autoreleasePoolPop(v93);
    }
    else
    {
      v35 = v29;
      v36 = v30;
      v90 = 0;
      swift_release(v25);
      objc_autoreleasePoolPop(v93);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A103C(v35, v36);
      v37 = v95 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (*(_QWORD *)v96 != -1)
        swift_once(v96, v94);
      v38 = v100;
      v39 = sub_1000A0A00(v100, (uint64_t)v97);
      v97 = *(double (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v40.n128_f64[0] = v97(v19, v39, v38);
      v41 = URL.path.getter(v40);
      v43 = v42;
      v44 = *(void (**)(char *, uint64_t))(v15 + 8);
      v44(v19, v38);
      URL.appendingPathComponent(_:)(v41);
      swift_bridgeObjectRelease(v43);
      *(_QWORD *)&v96 = v37;
      if (qword_100210128 != -1)
        swift_once(&qword_100210128, sub_1000A29E4);
      v45 = qword_100218BF8;
      swift_bridgeObjectRetain(qword_100218BF8);
      sub_1000A2A5C();
      swift_bridgeObjectRelease(v45);
      v46 = ((uint64_t (*)(char *, uint64_t))v44)(v22, v38);
      v47 = UUID.uuidString.getter(v46);
      v49 = v48;
      v97(v22, v39, v38);
      v50 = objc_autoreleasePoolPush();
      v52 = URL.path.getter(v51);
      v53 = v44;
      v55 = v54;
      URL.appendingPathComponent(_:)(v52);
      swift_bridgeObjectRelease(v55);
      v56 = v98;
      URL.appendingPathComponent(_:)(v47);
      v53(v19, v38);
      objc_autoreleasePoolPop(v50);
      swift_bridgeObjectRelease(v49);
      v97 = (double (*)(char *, uint64_t, uint64_t))v53;
      v53(v22, v38);
      v104 = &type metadata for AudioAccessoryFeatures;
      v57 = sub_1000A42C4();
      v105 = v57;
      isFeatureEnabled(_:)(v103);
      sub_1000A2140(v103);
      v104 = &type metadata for AudioAccessoryFeatures;
      v105 = v57;
      isFeatureEnabled(_:)(v103);
      v58 = sub_1000A2140(v103);
      v59 = v99;
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1);
      URL._bridgeToObjectiveC()(v60);
      v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1);

      v64 = static os_log_type_t.default.getter(v63);
      v65 = v38;
      if (qword_1002101E8 != -1)
        swift_once(&qword_1002101E8, sub_100168814);
      v66 = qword_100218DF0;
      v67 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v68 = swift_allocObject(v67, 72, 7);
      v96 = xmmword_100184870;
      *(_OWORD *)(v68 + 16) = xmmword_100184870;
      v69 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v65, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      *(_QWORD *)(v68 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v66, "Writing record to file: %@", 26, 2, v68);
      swift_bridgeObjectRelease(v68);
      v73 = sub_1000A0980(&qword_100211068);
      inited = swift_initStackObject(v73, v102);
      *(_OWORD *)(inited + 16) = v96;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v75 = NSFileProtectionKey;
      v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = sub_1000A5070(inited);
      v78 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v79 = sub_1001272DC(v77);
      swift_bridgeObjectRelease(v77);
      type metadata accessor for FileAttributeKey(0);
      sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
      v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v79);
      URL.path.getter(v81);
      v83 = v82;
      v84 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v83);
      v103[0] = 0;
      LOBYTE(v83) = objc_msgSend(v78, "setAttributes:ofItemAtPath:error:", v80, v84, v103);

      v85 = v103[0];
      if ((v83 & 1) != 0)
      {
        v86 = v103[0];
        URL.setResourceValues(_:)(v59);
        v87 = v91;

        (*(void (**)(char *, uint64_t))(v87 + 8))(v59, v92);
      }
      else
      {
        v88 = v103[0];
        _convertNSErrorToError(_:)(v85);

        swift_willThrow(v89);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v59, v92);
      }
      ((void (*)(char *, uint64_t))v97)(v56, v65);
    }
  }
  else
  {
    v31 = static os_log_type_t.default.getter(v23);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_100218DF0, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v32 = sub_1000D8604();
    v33 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v32, 0, 0);
    *v34 = 0x8000000000000010;
    swift_willThrow(v33);
  }
}

void sub_100124F8C(double (*a1)(char *), uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  NSURL *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t inited;
  NSString *v94;
  NSString *v95;
  unint64_t v96;
  id v97;
  _OWORD *v98;
  Class v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  NSString v103;
  id v104;
  uint64_t v105;
  id v106;
  id v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t);
  Class isa;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double (*v117)(char *);
  _QWORD *v118;
  char *v119;
  char *v120;
  char *v121;
  void **v122;
  char *v123;
  char *v124;
  __int128 v125;
  uint64_t v126;
  id v127;
  char v128[48];

  v116 = a8;
  v117 = a1;
  v118 = a6;
  v119 = (char *)a7;
  v13 = type metadata accessor for URLResourceValues(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v124 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = ((uint64_t (*)(_QWORD, __n128))a3)(0, v15);
  __chkstk_darwin(v17);
  v122 = (void **)((char *)&v109 - v18);
  v126 = type metadata accessor for URL(0);
  *(_QWORD *)&v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v121 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v123 = (char *)&v109 - v21;
  __chkstk_darwin(v22);
  v24 = (char *)&v109 - v23;
  __chkstk_darwin(v25);
  v120 = (char *)&v109 - v26;
  v27 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v27)
  {
    v114 = v14;
    v115 = v13;
    v28 = objc_autoreleasePoolPush();
    v29 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    v30 = PropertyListEncoder.init()();
    v31 = sub_1000A0940(a4, a3, a5);
    v32 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v17, v31);
    if (v8)
    {
      swift_release(v30);
      objc_autoreleasePoolPop(v28);
    }
    else
    {
      v38 = v32;
      v39 = v33;
      v111 = v17;
      v110 = a2;
      v112 = a3;
      swift_release(v30);
      objc_autoreleasePoolPop(v28);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A103C(v38, v39);
      v40 = (char *)v117 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (*v118 != -1)
        swift_once(v118, v116);
      v118 = 0;
      v41 = v126;
      v42 = sub_1000A0A00(v126, (uint64_t)v119);
      v43 = v125;
      v44 = v42;
      v117 = *(double (**)(char *))(v125 + 16);
      v45.n128_f64[0] = v117(v24);
      v46 = URL.path.getter(v45);
      v48 = v47;
      v49 = *(void ***)(v43 + 8);
      ((void (*)(char *, uint64_t))v49)(v24, v41);
      v50 = v120;
      URL.appendingPathComponent(_:)(v46);
      swift_bridgeObjectRelease(v48);
      v51 = v110;
      v119 = v40;
      if (qword_100210128 != -1)
        swift_once(&qword_100210128, sub_1000A29E4);
      v52 = qword_100218BF8;
      swift_bridgeObjectRetain(qword_100218BF8);
      sub_1000A2A5C();
      swift_bridgeObjectRelease(v52);
      v53 = ((uint64_t (*)(char *, uint64_t))v49)(v50, v41);
      v54 = UUID.uuidString.getter(v53);
      v56 = v55;
      v57 = v44;
      v116 = v44;
      v58 = (void (*)(char *, uint64_t, uint64_t))v117;
      ((void (*)(char *, uint64_t, uint64_t))v117)(v50, v57, v126);
      v109 = objc_autoreleasePoolPush();
      v60 = URL.path.getter(v59);
      v62 = v61;
      URL.appendingPathComponent(_:)(v60);
      swift_bridgeObjectRelease(v62);
      v63 = v51;
      v64 = v123;
      URL.appendingPathComponent(_:)(v54);
      ((void (*)(char *, uint64_t))v49)(v24, v126);
      objc_autoreleasePoolPop(v109);
      swift_bridgeObjectRelease(v56);
      ((void (*)(char *, uint64_t))v49)(v50, v126);
      v65 = v63;
      v66 = (char *)v122;
      sub_1000AE548(v65, (uint64_t)v122, v112);
      v67 = (uint64_t *)&v66[*(int *)(v111 + 24)];
      v68 = v67[1];
      v111 = *v67;
      v58(v24, v116, v126);
      swift_bridgeObjectRetain(v68);
      v117 = (double (*)(char *))objc_autoreleasePoolPush();
      v70 = URL.path.getter(v69);
      v72 = v71;
      v73 = v121;
      URL.appendingPathComponent(_:)(v70);
      v74 = v72;
      v75 = v126;
      swift_bridgeObjectRelease(v74);
      URL.appendingPathComponent(_:)(v111);
      ((void (*)(char *, uint64_t))v49)(v73, v75);
      objc_autoreleasePoolPop(v117);
      swift_bridgeObjectRelease(v68);
      ((void (*)(char *, uint64_t))v49)(v24, v75);
      sub_1000AE58C((uint64_t)v66, v112);
      v122 = v49;
      ((void (*)(char *, uint64_t))v49)(v64, v75);
      v76 = v50;
      v77 = v64;
      v78 = (*(uint64_t (**)(char *, char *, uint64_t))(v125 + 32))(v64, v76, v75);
      v79 = v124;
      URLResourceValues.init()(v78);
      URLResourceValues.isExcludedFromBackup.setter(1);
      URL._bridgeToObjectiveC()(v80);
      v82 = v81;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v81, 1);

      v84 = static os_log_type_t.default.getter(v83);
      if (qword_1002101E8 != -1)
        swift_once(&qword_1002101E8, sub_100168814);
      v85 = qword_100218DF0;
      v86 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v87 = swift_allocObject(v86, 72, 7);
      v125 = xmmword_100184870;
      *(_OWORD *)(v87 + 16) = xmmword_100184870;
      v88 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v89 = dispatch thunk of CustomStringConvertible.description.getter(v75, v88);
      v91 = v90;
      *(_QWORD *)(v87 + 56) = &type metadata for String;
      *(_QWORD *)(v87 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v87 + 32) = v89;
      *(_QWORD *)(v87 + 40) = v91;
      os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v85, "Writing record to file: %@", 26, 2, v87);
      swift_bridgeObjectRelease(v87);
      v92 = sub_1000A0980(&qword_100211068);
      inited = swift_initStackObject(v92, v128);
      *(_OWORD *)(inited + 16) = v125;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v94 = NSFileProtectionKey;
      v95 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v96 = sub_1000A5070(inited);
      v97 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v98 = sub_1001272DC(v96);
      swift_bridgeObjectRelease(v96);
      type metadata accessor for FileAttributeKey(0);
      sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
      v99 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v98);
      URL.path.getter(v100);
      v102 = v101;
      v103 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v102);
      v127 = 0;
      LOBYTE(v102) = objc_msgSend(v97, "setAttributes:ofItemAtPath:error:", v99, v103, &v127);

      v104 = v127;
      v105 = v114;
      if ((v102 & 1) != 0)
      {
        v106 = v127;
        URL.setResourceValues(_:)(v79);
      }
      else
      {
        v107 = v127;
        _convertNSErrorToError(_:)(v104);

        swift_willThrow(v108);
      }

      (*(void (**)(char *, uint64_t))(v105 + 8))(v79, v115);
      ((void (*)(char *, uint64_t))v122)(v77, v75);
    }
  }
  else
  {
    v34 = static os_log_type_t.default.getter(v27);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, qword_100218DF0, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v35 = sub_1000D8604();
    v36 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v35, 0, 0);
    *v37 = 0x8000000000000010;
    swift_willThrow(v36);
  }
}

void sub_1001257F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double (*v33)(char *, uint64_t, uint64_t);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  void *v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  unint64_t v52;
  uint64_t v53;
  NSURL *v54;
  void *v55;
  void *v56;
  Class v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t inited;
  NSString *v70;
  NSString *v71;
  unint64_t v72;
  id v73;
  _OWORD *v74;
  Class v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  NSString v79;
  id v80;
  id v81;
  char *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  _QWORD v86[2];
  Class isa;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  char v95[48];
  id v96[3];
  ValueMetadata *v97;
  unint64_t v98;

  *(_QWORD *)&v93 = a1;
  v4 = type metadata accessor for URLResourceValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v10 = (char *)v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v86 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)v86 - v15;
  v17 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v17)
  {
    v90 = v10;
    v91 = v7;
    v88 = v5;
    v89 = v4;
    v18 = objc_autoreleasePoolPush();
    v19 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    v20 = PropertyListEncoder.init()();
    v21 = type metadata accessor for SoundProfileRecord(0);
    v22 = sub_1000A0940(&qword_1002109A8, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_100185AE4);
    v23 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v21, v22);
    v92 = v2;
    if (v2)
    {
      swift_release(v20);
      objc_autoreleasePoolPop(v18);
    }
    else
    {
      v29 = v23;
      v30 = v24;
      v86[1] = a2;
      swift_release(v20);
      objc_autoreleasePoolPop(v18);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A103C(v29, v30);
      *(_QWORD *)&v93 = v93 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (qword_100210138 != -1)
        swift_once(&qword_100210138, sub_1000AB9D0);
      v31 = v94;
      v32 = sub_1000A0A00(v94, (uint64_t)qword_100218C38);
      v33 = *(double (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v34.n128_f64[0] = v33(v13, v32, v31);
      v35 = URL.path.getter(v34);
      v37 = v36;
      v38 = *(void (**)(char *, uint64_t))(v8 + 8);
      v38(v13, v31);
      URL.appendingPathComponent(_:)(v35);
      swift_bridgeObjectRelease(v37);
      if (qword_100210128 != -1)
        swift_once(&qword_100210128, sub_1000A29E4);
      v39 = qword_100218BF8;
      swift_bridgeObjectRetain(qword_100218BF8);
      sub_1000A2A5C();
      swift_bridgeObjectRelease(v39);
      v40 = ((uint64_t (*)(char *, uint64_t))v38)(v16, v31);
      v41 = UUID.uuidString.getter(v40);
      v43 = v42;
      v33(v16, v32, v31);
      v44 = v38;
      v45 = objc_autoreleasePoolPush();
      v47 = URL.path.getter(v46);
      v49 = v48;
      URL.appendingPathComponent(_:)(v47);
      swift_bridgeObjectRelease(v49);
      URL.appendingPathComponent(_:)(v41);
      v44(v13, v31);
      objc_autoreleasePoolPop(v45);
      swift_bridgeObjectRelease(v43);
      v50 = v16;
      v51 = v44;
      v44(v50, v31);
      v97 = &type metadata for AudioAccessoryFeatures;
      v52 = sub_1000A42C4();
      v98 = v52;
      isFeatureEnabled(_:)(v96);
      sub_1000A2140(v96);
      v97 = &type metadata for AudioAccessoryFeatures;
      v98 = v52;
      isFeatureEnabled(_:)(v96);
      v53 = sub_1000A2140(v96);
      URLResourceValues.init()(v53);
      URLResourceValues.isExcludedFromBackup.setter(1);
      URL._bridgeToObjectiveC()(v54);
      v56 = v55;
      v57 = isa;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v55, 1);

      v59 = static os_log_type_t.default.getter(v58);
      if (qword_1002101E8 != -1)
        swift_once(&qword_1002101E8, sub_100168814);
      v60 = qword_100218DF0;
      v61 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v62 = swift_allocObject(v61, 72, 7);
      v93 = xmmword_100184870;
      *(_OWORD *)(v62 + 16) = xmmword_100184870;
      v63 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v64 = dispatch thunk of CustomStringConvertible.description.getter(v31, v63);
      v66 = v65;
      *(_QWORD *)(v62 + 56) = &type metadata for String;
      *(_QWORD *)(v62 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v62 + 32) = v64;
      *(_QWORD *)(v62 + 40) = v66;
      v67 = v90;
      os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v60, "Writing record to file: %@", 26, 2, v62);
      swift_bridgeObjectRelease(v62);
      v68 = sub_1000A0980(&qword_100211068);
      inited = swift_initStackObject(v68, v95);
      *(_OWORD *)(inited + 16) = v93;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v70 = NSFileProtectionKey;
      v71 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v72 = sub_1000A5070(inited);
      v73 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v74 = sub_1001272DC(v72);
      swift_bridgeObjectRelease(v72);
      type metadata accessor for FileAttributeKey(0);
      sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
      v75 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v74);
      URL.path.getter(v76);
      v78 = v77;
      v79 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v78);
      v96[0] = 0;
      LOBYTE(v78) = objc_msgSend(v73, "setAttributes:ofItemAtPath:error:", v75, v79, v96);

      v80 = v96[0];
      if ((v78 & 1) != 0)
      {
        v81 = v96[0];
        v82 = v91;
        URL.setResourceValues(_:)(v91);
        v83 = v88;

        (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v89);
      }
      else
      {
        v84 = v96[0];
        _convertNSErrorToError(_:)(v80);

        swift_willThrow(v85);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v89);
      }
      v51(v67, v31);
    }
  }
  else
  {
    v25 = static os_log_type_t.default.getter(v17);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_100218DF0, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v26 = sub_1000D8604();
    v27 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v26, 0, 0);
    *v28 = 0x8000000000000010;
    swift_willThrow(v27);
  }
}

void sub_100125F28(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  char *v67;
  NSURL *v68;
  void *v69;
  void *v70;
  Class v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t inited;
  NSString *v84;
  NSString *v85;
  unint64_t v86;
  id v87;
  _OWORD *v88;
  Class v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  NSString v93;
  id v94;
  void (*v95)(char *, uint64_t);
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  Class isa;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  char *v112;
  char *v113;
  char v114[48];
  id v115[3];
  ValueMetadata *v116;
  unint64_t v117;

  v5 = type metadata accessor for URLResourceValues(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v113 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  *(_QWORD *)&v111 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v112 = (char *)&v99 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v99 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v99 - v17;
  v19 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v19)
  {
    v107 = v6;
    v108 = v5;
    v110 = v8;
    v20 = objc_autoreleasePoolPush();
    v115[0] = a2;
    v21 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    v22 = PropertyListEncoder.init()();
    v23 = type metadata accessor for AAProxCardsRecord(0);
    v24 = sub_1000A0940(&qword_1002107E8, type metadata accessor for AAProxCardsRecord, (uint64_t)&protocol conformance descriptor for AAProxCardsRecord);
    v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v115, v23, v24);
    v109 = v2;
    if (v2)
    {
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
    }
    else
    {
      v31 = v25;
      v32 = v26;
      swift_release(v22);
      objc_autoreleasePoolPop(v20);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A103C(v31, v32);
      v33 = a1 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      if (qword_100210130 != -1)
        swift_once(&qword_100210130, sub_1000A5BC0);
      v34 = v110;
      v35 = sub_1000A0A00(v110, (uint64_t)qword_100218C00);
      v36 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      v105 = v35;
      v104 = v36;
      v37.n128_f64[0] = ((double (*)(char *))v36)(v15);
      v38 = URL.path.getter(v37);
      v40 = v39;
      v101 = v9;
      v41 = *(void (**)(char *, uint64_t))(v9 + 8);
      v41(v15, v34);
      URL.appendingPathComponent(_:)(v38);
      swift_bridgeObjectRelease(v40);
      v103 = v33;
      if (qword_100210128 != -1)
        swift_once(&qword_100210128, sub_1000A29E4);
      v42 = qword_100218BF8;
      swift_bridgeObjectRetain(qword_100218BF8);
      sub_1000A2A5C();
      swift_bridgeObjectRelease(v42);
      v43 = ((uint64_t (*)(char *, uint64_t))v41)(v18, v34);
      v44 = UUID.uuidString.getter(v43);
      v46 = v45;
      v104(v18, v105, v34);
      v47 = objc_autoreleasePoolPush();
      v100 = a2;
      v48 = v47;
      v50 = URL.path.getter(v49);
      v52 = v51;
      URL.appendingPathComponent(_:)(v50);
      v53 = v110;
      swift_bridgeObjectRelease(v52);
      v54 = v112;
      URL.appendingPathComponent(_:)(v44);
      v41(v15, v53);
      objc_autoreleasePoolPop(v48);
      swift_bridgeObjectRelease(v46);
      v106 = v41;
      v41(v18, v53);
      v116 = &type metadata for AudioAccessoryFeatures;
      v55 = sub_1000A42C4();
      v117 = v55;
      isFeatureEnabled(_:)(v115);
      sub_1000A2140(v115);
      v116 = &type metadata for AudioAccessoryFeatures;
      v117 = v55;
      LOBYTE(v55) = isFeatureEnabled(_:)(v115);
      v56 = sub_1000A2140(v115);
      if ((v55 & 1) != 0)
      {
        v57 = v100;
        v99 = *(_QWORD *)&v100[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
        v104(v15, v105, v53);
        v58 = v57;
        v59 = objc_autoreleasePoolPush();
        v61 = URL.path.getter(v60);
        v63 = v62;
        v64 = (char *)v111;
        URL.appendingPathComponent(_:)(v61);
        swift_bridgeObjectRelease(v63);
        URL.appendingPathComponent(_:)(v99);
        v65 = v106;
        v106(v64, v110);
        v53 = v110;
        objc_autoreleasePoolPop(v59);
        v65(v15, v53);
        v65(v54, v53);

        v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v101 + 32))(v54, v18, v53);
      }
      v66 = v113;
      URLResourceValues.init()(v56);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v67 = v54;
      URL._bridgeToObjectiveC()(v68);
      v70 = v69;
      v71 = isa;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v69, 1);

      v73 = static os_log_type_t.default.getter(v72);
      if (qword_1002101E8 != -1)
        swift_once(&qword_1002101E8, sub_100168814);
      v74 = qword_100218DF0;
      v75 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v76 = swift_allocObject(v75, 72, 7);
      v111 = xmmword_100184870;
      *(_OWORD *)(v76 + 16) = xmmword_100184870;
      v77 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v53, v77);
      v79 = v53;
      v81 = v80;
      *(_QWORD *)(v76 + 56) = &type metadata for String;
      *(_QWORD *)(v76 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v76 + 32) = v78;
      *(_QWORD *)(v76 + 40) = v81;
      os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Writing record to file: %@", 26, 2, v76);
      swift_bridgeObjectRelease(v76);
      v82 = sub_1000A0980(&qword_100211068);
      inited = swift_initStackObject(v82, v114);
      *(_OWORD *)(inited + 16) = v111;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v84 = NSFileProtectionKey;
      v85 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v86 = sub_1000A5070(inited);
      v87 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v88 = sub_1001272DC(v86);
      swift_bridgeObjectRelease(v86);
      type metadata accessor for FileAttributeKey(0);
      sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
      v89 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v88);
      URL.path.getter(v90);
      v92 = v91;
      v93 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v92);
      v115[0] = 0;
      LODWORD(v92) = objc_msgSend(v87, "setAttributes:ofItemAtPath:error:", v89, v93, v115);

      v94 = v115[0];
      v95 = v106;
      if ((_DWORD)v92)
      {
        v96 = v115[0];
        URL.setResourceValues(_:)(v66);
      }
      else
      {
        v97 = v115[0];
        _convertNSErrorToError(_:)(v94);

        swift_willThrow(v98);
      }

      (*(void (**)(char *, uint64_t))(v107 + 8))(v66, v108);
      v95(v67, v79);
    }
  }
  else
  {
    v27 = static os_log_type_t.default.getter(v19);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_100218DF0, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_1000D8604();
    v29 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v28, 0, 0);
    *v30 = 0x8000000000000010;
    swift_willThrow(v29);
  }
}

void sub_100126798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unsigned int v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  void *v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  void *v89;
  char *v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  char *v103;
  NSURL *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t inited;
  NSString *v118;
  NSString *v119;
  unint64_t v120;
  id v121;
  _OWORD *v122;
  Class v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  NSString v127;
  id v128;
  id v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int (*v136)(char *, uint64_t, uint64_t);
  Class isa;
  double (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  __int128 v155;
  id v156;
  char v157[48];

  *(_QWORD *)&v155 = a2;
  v148 = a1;
  v3 = type metadata accessor for URLResourceValues(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v7);
  v152 = (uint64_t)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v9);
  v147 = (char *)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v149 = (char *)&v135 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v135 - v14;
  v154 = type metadata accessor for URL(0);
  v16 = *(_QWORD **)(v154 - 8);
  __chkstk_darwin(v154);
  v145 = (char *)&v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v144 = (char *)&v135 - v19;
  __chkstk_darwin(v20);
  v150 = (char *)&v135 - v21;
  __chkstk_darwin(v22);
  v151 = (char *)&v135 - v23;
  __chkstk_darwin(v24);
  v146 = (char *)&v135 - v25;
  __chkstk_darwin(v26);
  v153 = (char *)&v135 - v27;
  __chkstk_darwin(v28);
  v30 = (char *)&v135 - v29;
  __chkstk_darwin(v31);
  v33 = (char *)&v135 - v32;
  v34 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v34)
  {
    v142 = v6;
    v140 = v4;
    v141 = v3;
    v35 = objc_autoreleasePoolPush();
    v36 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    v37 = PropertyListEncoder.init()();
    v38 = sub_1000A0940((unint64_t *)&unk_100212260, type metadata accessor for BTDeferredRecord, (uint64_t)&unk_100185D54);
    v39 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v155, v7, v38);
    v143 = v2;
    if (v2)
    {
      swift_release(v37);
      objc_autoreleasePoolPop(v35);
      return;
    }
    v45 = v39;
    v46 = v40;
    v139 = v7;
    swift_release(v37);
    objc_autoreleasePoolPop(v35);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A103C(v45, v46);
    URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
    v47 = (unsigned int (*)(char *, uint64_t, uint64_t))v16[6];
    v48 = v154;
    if (v47(v15, 1, v154) == 1)
    {
      __break(1u);
    }
    else
    {
      v49 = v148 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
      v138 = (double (*)(char *, char *, uint64_t))v16[4];
      v50.n128_f64[0] = v138(v30, v15, v48);
      v51 = URL.path.getter(v50);
      v53 = v52;
      v54 = (void (*)(char *, uint64_t))v16[1];
      v54(v30, v48);
      URL.appendingPathComponent(_:)(v51);
      swift_bridgeObjectRelease(v53);
      if (qword_100210128 != -1)
        swift_once(&qword_100210128, sub_1000A29E4);
      v148 = v49;
      v55 = qword_100218BF8;
      swift_bridgeObjectRetain(qword_100218BF8);
      sub_1000A2A5C();
      swift_bridgeObjectRelease(v55);
      v56 = ((uint64_t (*)(char *, uint64_t))v54)(v33, v48);
      v57 = UUID.uuidString.getter(v56);
      v59 = v58;
      v60 = v149;
      URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
      v61 = v47(v60, 1, v48);
      v136 = v47;
      if (v61 != 1)
      {
        v62 = v146;
        v63 = (void (*)(char *, char *, uint64_t))v138;
        v138(v146, v60, v48);
        v64 = objc_autoreleasePoolPush();
        v66 = URL.path.getter(v65);
        v68 = v67;
        v69 = v151;
        URL.appendingPathComponent(_:)(v66);
        swift_bridgeObjectRelease(v68);
        URL.appendingPathComponent(_:)(v57);
        v54(v69, v154);
        v70 = v154;
        objc_autoreleasePoolPop(v64);
        swift_bridgeObjectRelease(v59);
        v54(v62, v70);
        v71 = v152;
        sub_1000AE548(v155, v152, type metadata accessor for BTDeferredRecord);
        v72 = v147;
        URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
        if (v136(v72, 1, v70) != 1)
        {
          v73 = v144;
          v63(v144, v72, v70);
          v75 = *(_QWORD *)(v71 + 8);
          v74 = *(_QWORD *)(v71 + 16);
          swift_bridgeObjectRetain(v74);
          URL.appendingPathComponent(_:)(v75);
          swift_bridgeObjectRelease(v74);
          v76.n128_f64[0] = ((double (*)(char *, uint64_t))v54)(v73, v70);
          v77 = URL.path.getter(v76);
          v79 = v78;
          URL.appendingPathComponent(_:)(v77);
          swift_bridgeObjectRelease(v79);
          v80 = qword_100218BF8;
          swift_bridgeObjectRetain(qword_100218BF8);
          sub_1000A2A5C();
          swift_bridgeObjectRelease(v80);
          v54(v69, v70);
          v81 = *(_QWORD *)(v71 + 8);
          v82 = *(_QWORD *)(v71 + 16);
          if (v81 == 0xD000000000000012 && v82 == 0x80000001001AA930
            || (v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v82, 0xD000000000000012, 0x80000001001AA930, 0), (v81 & 1) != 0))
          {
            v83 = v54;
            v84 = UUID.uuidString.getter(v81);
            v86 = v85;
          }
          else
          {
            v83 = v54;
            v87 = (uint64_t *)(v71 + *(int *)(v139 + 28));
            v84 = *v87;
            v86 = v87[1];
            swift_bridgeObjectRetain(v86);
          }
          v88 = v153;
          v89 = objc_autoreleasePoolPush();
          v90 = v150;
          v92 = URL.path.getter(v91);
          v94 = v93;
          v95 = v145;
          URL.appendingPathComponent(_:)(v92);
          swift_bridgeObjectRelease(v94);
          v96 = v151;
          URL.appendingPathComponent(_:)(v84);
          v97 = v95;
          v98 = v154;
          v83(v97, v154);
          objc_autoreleasePoolPop(v89);
          swift_bridgeObjectRelease(v86);
          v99 = v90;
          v100 = v83;
          v83(v99, v98);
          sub_1000AE58C(v152, type metadata accessor for BTDeferredRecord);
          v83(v88, v98);
          v101 = ((uint64_t (*)(char *, char *, uint64_t))v138)(v88, v96, v98);
          v102 = v142;
          URLResourceValues.init()(v101);
          URLResourceValues.isExcludedFromBackup.setter(1);
          v103 = v88;
          URL._bridgeToObjectiveC()(v104);
          v106 = v105;
          -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v105, 1);

          v108 = static os_log_type_t.default.getter(v107);
          if (qword_1002101E8 != -1)
            swift_once(&qword_1002101E8, sub_100168814);
          v109 = qword_100218DF0;
          v110 = sub_1000A0980((uint64_t *)&unk_1002103C0);
          v111 = swift_allocObject(v110, 72, 7);
          v155 = xmmword_100184870;
          *(_OWORD *)(v111 + 16) = xmmword_100184870;
          v112 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v113 = dispatch thunk of CustomStringConvertible.description.getter(v98, v112);
          v115 = v114;
          *(_QWORD *)(v111 + 56) = &type metadata for String;
          *(_QWORD *)(v111 + 64) = sub_1000A0DF4();
          *(_QWORD *)(v111 + 32) = v113;
          *(_QWORD *)(v111 + 40) = v115;
          os_log(_:dso:log:_:_:)(v108, &_mh_execute_header, v109, "Writing record to file: %@", 26, 2, v111);
          swift_bridgeObjectRelease(v111);
          v116 = sub_1000A0980(&qword_100211068);
          inited = swift_initStackObject(v116, v157);
          *(_OWORD *)(inited + 16) = v155;
          *(_QWORD *)(inited + 32) = NSFileProtectionKey;
          *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
          v118 = NSFileProtectionKey;
          v119 = NSFileProtectionCompleteUntilFirstUserAuthentication;
          v120 = sub_1000A5070(inited);
          v121 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
          v122 = sub_1001272DC(v120);
          swift_bridgeObjectRelease(v120);
          type metadata accessor for FileAttributeKey(0);
          sub_1000A0940(&qword_100210610, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100185338);
          v123 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v122);
          URL.path.getter(v124);
          v126 = v125;
          v127 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v126);
          v156 = 0;
          LODWORD(v126) = objc_msgSend(v121, "setAttributes:ofItemAtPath:error:", v123, v127, &v156);

          v128 = v156;
          if ((_DWORD)v126)
          {
            v129 = v156;
            URL.setResourceValues(_:)(v102);
            v130 = v140;

            (*(void (**)(char *, uint64_t))(v130 + 8))(v102, v141);
            v131 = v103;
            v132 = v154;
          }
          else
          {
            v133 = v156;
            _convertNSErrorToError(_:)(v128);

            swift_willThrow(v134);
            (*(void (**)(char *, uint64_t))(v140 + 8))(v102, v141);
            v131 = v103;
            v132 = v98;
          }
          v100(v131, v132);
          return;
        }
LABEL_25:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  v41 = static os_log_type_t.default.getter(v34);
  if (qword_1002101E8 != -1)
    swift_once(&qword_1002101E8, sub_100168814);
  os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, qword_100218DF0, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
  v42 = sub_1000D8604();
  v43 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v42, 0, 0);
  *v44 = 0x8000000000000010;
  swift_willThrow(v43);
}

_OWORD *sub_1001272DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _OWORD *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v38;
  _OWORD v39[4];
  _OWORD v40[2];
  _OWORD v41[3];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000A0980(&qword_100210878);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  }
  else
  {
    v2 = &_swiftEmptyDictionarySingleton;
  }
  v35 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v36 = (unint64_t)(v3 + 63) >> 6;
  v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain(a1);
  result = (_OWORD *)swift_retain(v2);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (v8 << 6);
      goto LABEL_26;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v12 >= v36)
      goto LABEL_35;
    v13 = *(_QWORD *)(v35 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v36)
        goto LABEL_35;
      v13 = *(_QWORD *)(v35 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v36)
          goto LABEL_35;
        v13 = *(_QWORD *)(v35 + 8 * v8);
        if (!v13)
          break;
      }
    }
LABEL_25:
    v5 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_26:
    v15 = 8 * v11;
    v17 = *(void **)(*(_QWORD *)(a1 + 56) + v15);
    *(_QWORD *)&v41[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v15);
    v16 = *(void **)&v41[0];
    *(_QWORD *)&v40[0] = v17;
    type metadata accessor for FileProtectionType(0);
    v19 = v18;
    v20 = v16;
    v21 = v17;
    swift_dynamicCast((char *)v41 + 8, v40, v19, (char *)&type metadata for Any + 8, 7);
    v22 = *(_QWORD *)&v41[0];
    sub_1000AB354((_OWORD *)((char *)v41 + 8), v39);
    sub_1000AB354(v39, v41);
    sub_1000AB354(v41, v40);
    v23 = v2[5];
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;
    Hasher.init(_seed:)(&v38, v23);
    String.hash(into:)(&v38, v24, v26);
    v27 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v26);
    v28 = -1 << *((_BYTE *)v2 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)&v6[8 * (v29 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)&v6[8 * (v29 >> 6)])) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)&v6[8 * v30];
      }
      while (v34 == -1);
      v9 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_QWORD *)(v2[6] + 8 * v9) = v22;
    result = sub_1000AB354(v40, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  v14 = v12 + 3;
  if (v14 >= v36)
  {
LABEL_35:
    swift_release(a1);
    swift_release(v2);
    return v2;
  }
  v13 = *(_QWORD *)(v35 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v36)
      goto LABEL_35;
    v13 = *(_QWORD *)(v35 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_25;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100127638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t *v25;
  uint64_t v26;
  _BYTE v27[16];
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v25 = a4;
  v26 = a5;
  v24[1] = a2;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v24 - v12;
  v14 = objc_autoreleasePoolPush();
  v16 = URL.path.getter(v15);
  v18 = v17;
  URL.appendingPathComponent(_:)(v16);
  swift_bridgeObjectRelease(v18);
  URL.appendingPathComponent(_:)(a1);
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, v7);
  objc_autoreleasePoolPop(v14);
  v20 = objc_autoreleasePoolPush();
  v28 = v13;
  v29 = v5;
  v21 = sub_1000A0980(v25);
  OS_dispatch_queue.sync<A>(execute:)(&v30, v26, v27, v21);
  v22 = v30;
  objc_autoreleasePoolPop(v20);
  v19(v13, v7);
  return v22;
}

uint64_t sub_100127798@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, unint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a6;
  v12 = a2(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - v14;
  v16 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((v16 & 1) != 0)
  {
    v17 = Data.init(contentsOf:options:)(a1, 0);
    if (v6)
    {
      swift_errorRelease(v6);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v27, 1, 1, v12);
    }
    else
    {
      v26 = v12;
      v21 = v18;
      v22 = v17;
      v25 = objc_autoreleasePoolPush();
      sub_100123540(v22, v21, a2, a3, a4, a5);
      objc_autoreleasePoolPop(v25);
      sub_1000A103C(v22, v21);
      v23 = v27;
      sub_1000C6CD0((uint64_t)v15, v27, a2);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v23, 0, 1, v26);
    }
  }
  else
  {
    v20 = static os_log_type_t.default.getter(v16);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_100218DF0, "record call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v27, 1, 1, v12);
  }
}

uint64_t sub_100127A98(uint64_t a1)
{
  return sub_100127B2C(a1, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
}

_QWORD *sub_100127AAC(uint64_t a1)
{
  return sub_100128330(a1, &qword_100210CF8, type metadata accessor for DeviceRecord, (uint64_t)sub_100154AD0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693D4);
}

_QWORD *sub_100127AD0(uint64_t a1)
{
  return sub_100128330(a1, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)sub_100154B40, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693E8);
}

_QWORD *sub_100127AF4(uint64_t a1)
{
  return sub_100128330(a1, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
}

uint64_t sub_100127B18(uint64_t a1)
{
  return sub_100127B2C(a1, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
}

uint64_t sub_100127B2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void *v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  char *v102;
  id v103;
  char *v104;
  _OWORD v105[2];
  _QWORD v106[4];
  uint64_t v107;

  v100 = a2;
  v101 = a3;
  v5 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v5);
  v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v97 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v86 - v12;
  __chkstk_darwin(v14);
  v104 = (char *)&v86 - v15;
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v86 - v18;
  v107 = (uint64_t)_swiftEmptyArrayStorage;
  v98 = a1;
  v99 = v3;
  v20 = v3 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
  v21 = URL.path.getter(v17);
  v23 = v22;
  v96 = v20;
  URL.appendingPathComponent(_:isDirectory:)(v21, v22, 1);
  swift_bridgeObjectRelease(v23);
  v24 = (void *)objc_opt_self(NSFileManager);
  v25 = objc_msgSend(v24, "defaultManager");
  v26 = objc_msgSend(v24, "defaultManager");
  v90 = v19;
  v27 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v19, 0, 1, 0, 0);

  v103 = v27;
  if (v27)
  {
    v102 = v7;
    v29 = static os_log_type_t.default.getter(v28);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    v30 = qword_100218DF0;
    v87 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v31 = swift_allocObject(v87, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100184870;
    v89 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v8, v89);
    v34 = v33;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    v88 = sub_1000A0DF4();
    *(_QWORD *)(v31 + 64) = v88;
    *(_QWORD *)(v31 + 32) = v32;
    *(_QWORD *)(v31 + 40) = v34;
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Enumerate: %@", 13, 2, v31);
    swift_bridgeObjectRelease(v31);
    v35 = 0;
    v94 = OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue;
    v95 = (char *)&type metadata for Any + 8;
    v86 = xmmword_1001858F0;
    v93 = v9;
    while (1)
    {
      v41 = objc_msgSend(v103, "nextObject", (_QWORD)v86, *((_QWORD *)&v86 + 1));
      if (v41)
      {
        v42 = v41;
        _bridgeAnyObjectToAny(_:)(v105);
        swift_unknownObjectRelease(v42);
      }
      else
      {
        memset(v105, 0, sizeof(v105));
      }
      v43 = (uint64_t)v102;
      sub_1000D5F2C((uint64_t)v105, (uint64_t)v106, &qword_100211980);
      if (!v106[3])
        break;
      v44 = swift_dynamicCast(v43, v106, v95, v8, 6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v43, v44 ^ 1u, 1, v8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v43, 1, v8) == 1)
        goto LABEL_20;
      v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 32))(v104, v43, v8);
      v46 = URL.deletingPathExtension()(v45);
      v47 = URL.lastPathComponent.getter(v46);
      v49 = v48;
      v50 = *(void (**)(char *, uint64_t))(v9 + 8);
      v50(v13, v8);
      v51 = objc_autoreleasePoolPush();
      v53 = URL.path.getter(v52);
      v55 = v54;
      v56 = v97;
      URL.appendingPathComponent(_:)(v53);
      swift_bridgeObjectRelease(v55);
      URL.appendingPathComponent(_:)(v47);
      v50(v56, v8);
      objc_autoreleasePoolPop(v51);
      v57 = objc_autoreleasePoolPush();
      __chkstk_darwin(v57);
      *((_QWORD *)&v86 - 2) = v13;
      *((_QWORD *)&v86 - 1) = v58;
      v59 = sub_1000A0980(v100);
      OS_dispatch_queue.sync<A>(execute:)(v106, v101, &v86 - 2, v59);
      v60 = v106[0];
      objc_autoreleasePoolPop(v57);
      v50(v13, v8);
      if (v60)
      {
        v61 = swift_bridgeObjectRelease(v49);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
        v63 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v62 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v63 >= v62 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
        v64 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v60);
        specialized Array._endMutation()(v64);
      }
      else
      {
        v91 = static os_log_type_t.error.getter();
        v92 = qword_100218DF0;
        v36 = swift_allocObject(v87, 112, 7);
        *(_OWORD *)(v36 + 16) = v86;
        v37 = v35;
        v38 = v88;
        *(_QWORD *)(v36 + 56) = &type metadata for String;
        *(_QWORD *)(v36 + 64) = v38;
        *(_QWORD *)(v36 + 32) = v47;
        *(_QWORD *)(v36 + 40) = v49;
        v39 = dispatch thunk of CustomStringConvertible.description.getter(v8, v89);
        *(_QWORD *)(v36 + 96) = &type metadata for String;
        *(_QWORD *)(v36 + 104) = v38;
        v35 = v37;
        *(_QWORD *)(v36 + 72) = v39;
        *(_QWORD *)(v36 + 80) = v40;
        os_log(_:dso:log:_:_:)(v91, &_mh_execute_header, v92, "Could not read item %@ for records at %@", 40, 2, v36);
        swift_bridgeObjectRelease(v36);
      }
      v9 = v93;
      v50(v104, v8);
    }
    sub_1000A1000((uint64_t)v106, &qword_100211980);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v43, 1, 1, v8);
LABEL_20:
    v75 = sub_1000A1000(v43, (uint64_t *)&unk_100210840);
    v76 = static os_log_type_t.debug.getter(v75);
    v77 = qword_100218DF0;
    v68 = swift_allocObject(v87, 112, 7);
    *(_OWORD *)(v68 + 16) = v86;
    v78 = v107;
    if ((unint64_t)v107 >> 62)
    {
      if (v107 < 0)
        v85 = v107;
      else
        v85 = v107 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v107);
      v79 = _CocoaArrayWrapper.endIndex.getter(v85);
      swift_bridgeObjectRelease(v78);
    }
    else
    {
      v79 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)(v68 + 56) = &type metadata for Int;
    *(_QWORD *)(v68 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v68 + 32) = v79;
    v74 = v90;
    v80 = dispatch thunk of CustomStringConvertible.description.getter(v8, v89);
    v81 = v88;
    *(_QWORD *)(v68 + 96) = &type metadata for String;
    *(_QWORD *)(v68 + 104) = v81;
    *(_QWORD *)(v68 + 72) = v80;
    *(_QWORD *)(v68 + 80) = v82;
    os_log(_:dso:log:_:_:)(v76, &_mh_execute_header, v77, "Found %i records at %@", 22, 2, v68);

  }
  else
  {
    v65 = static os_log_type_t.error.getter();
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    v66 = qword_100218DF0;
    v67 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v68 = swift_allocObject(v67, 72, 7);
    *(_OWORD *)(v68 + 16) = xmmword_100184870;
    v69 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v70 = v90;
    v71 = dispatch thunk of CustomStringConvertible.description.getter(v8, v69);
    v73 = v72;
    *(_QWORD *)(v68 + 56) = &type metadata for String;
    *(_QWORD *)(v68 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v68 + 32) = v71;
    *(_QWORD *)(v68 + 40) = v73;
    v74 = v70;
    os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Could not enumerate %@", 22, 2, v68);
  }
  swift_bridgeObjectRelease(v68);
  v83 = v107;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v74, v8);
  return v83;
}

_QWORD *sub_100128330(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t (*a5)(BOOL, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v5;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  void *v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t (*v77)(BOOL, uint64_t, uint64_t, _QWORD *);
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t (*v81)(_QWORD);
  unint64_t v82;
  unint64_t v83;
  uint64_t (*v84)(_QWORD);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t (*v102)(BOOL, uint64_t, uint64_t, _QWORD *);
  uint64_t *v103;
  __int128 v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(_QWORD);
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _OWORD v131[2];
  char v132[8];
  uint64_t v133;

  v102 = a5;
  v123 = a4;
  v103 = a2;
  v120 = sub_1000A0980(a2);
  v8 = __chkstk_darwin(v120);
  v10 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = a3;
  v119 = ((uint64_t (*)(_QWORD, __n128))a3)(0, v8);
  v128 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v114 = (uint64_t)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v113 = (uint64_t)&v102 - v13;
  v14 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v14);
  v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v118 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v117 = (char *)&v102 - v21;
  __chkstk_darwin(v22);
  v24 = (char *)&v102 - v23;
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v102 - v27;
  v121 = a1;
  v122 = v5;
  v29 = v5 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
  v30 = URL.path.getter(v26);
  v32 = v31;
  v116 = v29;
  URL.appendingPathComponent(_:isDirectory:)(v30, v31, 1);
  swift_bridgeObjectRelease(v32);
  v33 = (void *)objc_opt_self(NSFileManager);
  v34 = objc_msgSend(v33, "defaultManager");
  v35 = objc_msgSend(v33, "defaultManager");
  v108 = v28;
  v36 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v28, 0, 1, 0, 0);

  v126 = v36;
  if (v36)
  {
    v124 = v16;
    v125 = v10;
    v38 = static os_log_type_t.default.getter(v37);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    v39 = qword_100218DF0;
    v107 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v40 = swift_allocObject(v107, 72, 7);
    *(_OWORD *)(v40 + 16) = xmmword_100184870;
    v106 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v17, v106);
    v43 = v42;
    *(_QWORD *)(v40 + 56) = &type metadata for String;
    v105 = sub_1000A0DF4();
    *(_QWORD *)(v40 + 64) = v105;
    *(_QWORD *)(v40 + 32) = v41;
    *(_QWORD *)(v40 + 40) = v43;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Enumerate: %@", 13, 2, v40);
    swift_bridgeObjectRelease(v40);
    v44 = 0;
    v45 = _swiftEmptyArrayStorage;
    v110 = OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue;
    v112 = (char *)&type metadata for Any + 8;
    v104 = xmmword_1001858F0;
    v111 = v18;
    v109 = v24;
    while (1)
    {
      v53 = objc_msgSend(v126, "nextObject", v102);
      if (v53)
      {
        v54 = v53;
        _bridgeAnyObjectToAny(_:)(v131);
        swift_unknownObjectRelease(v54);
      }
      else
      {
        memset(v131, 0, sizeof(v131));
      }
      v55 = (uint64_t)v124;
      v56 = v125;
      sub_1000D5F2C((uint64_t)v131, (uint64_t)v132, &qword_100211980);
      if (!v133)
        break;
      v57 = swift_dynamicCast(v55, v132, v112, v17, 6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v55, v57 ^ 1u, 1, v17);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v55, 1, v17) == 1)
        goto LABEL_22;
      v129 = v45;
      v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 32))(v24, v55, v17);
      v59 = v17;
      v60 = v117;
      v61 = URL.deletingPathExtension()(v58);
      v62 = URL.lastPathComponent.getter(v61);
      v130 = v44;
      v63 = v56;
      v65 = v64;
      v66 = *(void (**)(char *, uint64_t))(v18 + 8);
      v66(v60, v59);
      v67 = objc_autoreleasePoolPush();
      v69 = URL.path.getter(v68);
      v71 = v70;
      v72 = v118;
      URL.appendingPathComponent(_:)(v69);
      swift_bridgeObjectRelease(v71);
      v127 = v62;
      v73 = v62;
      v74 = v65;
      v75 = (uint64_t)v63;
      URL.appendingPathComponent(_:)(v73);
      v66(v72, v59);
      objc_autoreleasePoolPop(v67);
      v76 = objc_autoreleasePoolPush();
      __chkstk_darwin(v76);
      *(&v102 - 2) = (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))v60;
      *(&v102 - 1) = v77;
      v78 = v63;
      v44 = v130;
      OS_dispatch_queue.sync<A>(execute:)(v78, v123, &v102 - 4, v120);
      objc_autoreleasePoolPop(v76);
      v79 = v60;
      v17 = v59;
      v66(v79, v59);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v75, 1, v119) == 1)
      {
        v46 = sub_1000A1000(v75, v103);
        v47 = static os_log_type_t.error.getter(v46);
        v48 = qword_100218DF0;
        v49 = swift_allocObject(v107, 112, 7);
        *(_OWORD *)(v49 + 16) = v104;
        v50 = v105;
        *(_QWORD *)(v49 + 56) = &type metadata for String;
        *(_QWORD *)(v49 + 64) = v50;
        *(_QWORD *)(v49 + 32) = v127;
        *(_QWORD *)(v49 + 40) = v74;
        v51 = dispatch thunk of CustomStringConvertible.description.getter(v17, v106);
        *(_QWORD *)(v49 + 96) = &type metadata for String;
        *(_QWORD *)(v49 + 104) = v50;
        *(_QWORD *)(v49 + 72) = v51;
        *(_QWORD *)(v49 + 80) = v52;
        os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Could not read item %@ for records at %@", 40, 2, v49);
        swift_bridgeObjectRelease(v49);
        v24 = v109;
        v45 = v129;
      }
      else
      {
        swift_bridgeObjectRelease(v74);
        v80 = v113;
        v81 = v115;
        sub_1000C6CD0(v75, v113, v115);
        sub_1000AE548(v80, v114, v81);
        v45 = v129;
        if ((swift_isUniquelyReferenced_nonNull_native(v129) & 1) == 0)
          v45 = (_QWORD *)v102(0, v45[2] + 1, 1, v45);
        v24 = v109;
        v83 = v45[2];
        v82 = v45[3];
        if (v83 >= v82 >> 1)
          v45 = (_QWORD *)v102(v82 > 1, v83 + 1, 1, v45);
        v45[2] = v83 + 1;
        v84 = v115;
        sub_1000C6CD0(v114, (uint64_t)v45+ ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80))+ *(_QWORD *)(v128 + 72) * v83, v115);
        sub_1000AE58C(v113, v84);
      }
      v66(v24, v17);
      v18 = v111;
    }
    sub_1000A1000((uint64_t)v132, &qword_100211980);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v55, 1, 1, v17);
LABEL_22:
    v94 = sub_1000A1000(v55, (uint64_t *)&unk_100210840);
    v95 = static os_log_type_t.debug.getter(v94);
    v96 = qword_100218DF0;
    v88 = swift_allocObject(v107, 112, 7);
    *(_OWORD *)(v88 + 16) = v104;
    v97 = v45[2];
    *(_QWORD *)(v88 + 56) = &type metadata for Int;
    *(_QWORD *)(v88 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v88 + 32) = v97;
    v90 = v108;
    v98 = dispatch thunk of CustomStringConvertible.description.getter(v17, v106);
    v99 = v105;
    *(_QWORD *)(v88 + 96) = &type metadata for String;
    *(_QWORD *)(v88 + 104) = v99;
    *(_QWORD *)(v88 + 72) = v98;
    *(_QWORD *)(v88 + 80) = v100;
    os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Found %i records at %@", 22, 2, v88);

  }
  else
  {
    v85 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    v86 = qword_100218DF0;
    v87 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v88 = swift_allocObject(v87, 72, 7);
    *(_OWORD *)(v88 + 16) = xmmword_100184870;
    v89 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v90 = v108;
    v91 = dispatch thunk of CustomStringConvertible.description.getter(v17, v89);
    v93 = v92;
    *(_QWORD *)(v88 + 56) = &type metadata for String;
    *(_QWORD *)(v88 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v88 + 32) = v91;
    *(_QWORD *)(v88 + 40) = v93;
    os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v86, "Could not enumerate %@", 22, 2, v88);
    v45 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v88);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v90, v17);
  return v45;
}

uint64_t sub_100128CCC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_100128D90(unint64_t a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v15[80];
  uint64_t v16;
  _QWORD v17[2];
  _BYTE v18[80];

  if (a1 >> 62)
  {
    if (a1 >> 62 != 1)
      __asm { BR              X10 }
    v2 = sub_1000A0980(&qword_100210D28);
    inited = swift_initStackObject(v2, v18);
    *(_OWORD *)(inited + 16) = xmmword_100184870;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
    *(_QWORD *)(inited + 40) = v4;
    swift_errorRetain(a1 & 0x3FFFFFFFFFFFFFFFLL);
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17[0] = 0x2074736973726550;
    v17[1] = 0xEF203A726F727245;
    v16 = a1 & 0x3FFFFFFFFFFFFFFFLL;
    v5 = a1 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v6 = sub_1000A0980(&qword_100210D28);
    inited = swift_initStackObject(v6, v15);
    *(_OWORD *)(inited + 16) = xmmword_100184870;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
    *(_QWORD *)(inited + 40) = v7;
    strcpy((char *)v17, "Cloud Error: ");
    HIWORD(v17[1]) = -4864;
    v16 = a1;
    sub_1001681A4(a1);
    v5 = a1;
  }
  swift_errorRetain(v5);
  v8 = sub_1000A0980(&qword_100210710);
  v9._countAndFlagsBits = String.init<A>(describing:)(&v16, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11 = v17[0];
  v12 = v17[1];
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = v12;
  v13 = sub_1000A5288(inited);
  sub_1001681C8(a1);
  return v13;
}

unint64_t sub_10012926C()
{
  unint64_t *v0;

  return sub_100128D90(*v0);
}

uint64_t sub_100129274(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100168364();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10012929C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100168364();
  return Error<>._code.getter(a1, v2);
}

void sub_1001292C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void (*v17)(_QWORD *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (void *)objc_opt_self(BTSystemConfiguration);
  v10 = objc_msgSend(v9, "isBuddyComplete");
  if ((v10 & 1) == 0)
  {
    v25 = static os_log_type_t.default.getter(v10);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_100218DE8, "cloud account info call failed because in device is in buddy state", 66, 2, _swiftEmptyArrayStorage);
    goto LABEL_12;
  }
  v11 = objc_msgSend(v9, "isFirstUnlocked");
  if ((v11 & 1) == 0)
  {
    v16 = (id)static os_log_type_t.default.getter(v11);
    if (qword_1002101E0 == -1)
    {
LABEL_11:
      os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_100218DE8, "cloud account info call failed because in device is in beforeFirstUnlock state", 78, 2, _swiftEmptyArrayStorage);
LABEL_12:
      v12 = 0;
      goto LABEL_17;
    }
LABEL_20:
    swift_once(&qword_1002101E0, sub_1001687B0);
    goto LABEL_11;
  }
  v30 = v2;
  v28 = a2;
  v12 = objc_msgSend(objc_allocWithZone((Class)BTCloudAccountInfo), "init");
  v13 = sub_10012A6A0();
  v14 = *(void **)(v13 + 72);
  *v8 = v14;
  v15 = enum case for DispatchPredicate.notOnQueue(_:);
  v29 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 104);
  v29(v8, enum case for DispatchPredicate.notOnQueue(_:), v5);
  v16 = v14;
  a2 = _dispatchPreconditionTest(_:)(v8);
  v17 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v17(v8, v5);
  if ((a2 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v18 = v30;
  OS_dispatch_queue.sync<A>(execute:)((uint64_t *)((char *)&v31 + 1), sub_10016545C, v13, &type metadata for Bool);
  v30 = v18;
  swift_unknownObjectRelease(v13);
  objc_msgSend(v12, "setIsSignedIn:", BYTE1(v31));
  v19 = sub_10012A6A0();
  v20 = *(void **)(v19 + 72);
  *v8 = v20;
  v29(v8, v15, v5);
  v16 = v20;
  a2 = _dispatchPreconditionTest(_:)(v8);
  v17(v8, v5);
  if ((a2 & 1) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  OS_dispatch_queue.sync<A>(execute:)(&v31, sub_100167874, v19, &type metadata for Bool);
  swift_unknownObjectRelease(v19);
  objc_msgSend(v12, "setManateeAvailable:", v31);
  v21 = objc_msgSend(*(id *)(a1 + 56), "aa_primaryAppleAccount");
  if (v21)
  {
    v22 = v21;
    v23 = objc_msgSend(v21, "aa_personID");
    objc_msgSend(v12, "setAccountIdentifier:", v23);

    v24 = objc_msgSend(v22, "appleID");
    objc_msgSend(v12, "setLoginID:", v24);

  }
  else
  {
    v26 = static os_log_type_t.error.getter(0);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_100218DE8, "Could Not Find Primary Account", 30, 2, _swiftEmptyArrayStorage);
  }
  a2 = v28;
LABEL_17:
  *(_QWORD *)a2 = v12;
}

uint64_t sub_100129690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___fileManager;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___fileManager);
  if (v8)
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___fileManager);
  }
  else
  {
    (*(void (**)(char *, uint64_t, __n128))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL, v4);
    v10 = type metadata accessor for RecordFileManager(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v9 = sub_1000D631C((uint64_t)v6);
    v11 = *(_QWORD *)(v1 + v7);
    *(_QWORD *)(v1 + v7) = v9;
    swift_retain(v9);
    swift_release(v11);
    v8 = 0;
  }
  swift_retain(v8);
  return v9;
}

uint64_t sub_100129768@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((v6 & 1) != 0)
  {
    v7 = sub_100129690();
    if (qword_100210148 != -1)
      swift_once(&qword_100210148, sub_1000B0C18);
    v8 = sub_1000A0A00(v2, (uint64_t)qword_100218C68);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    v9 = sub_100128330((uint64_t)v5, (uint64_t *)&unk_1002122E0, type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t)sub_1001650B0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169764);
    swift_release(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v10 = v9[2];
    v11 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (v10)
    {
      sub_1000AE548((uint64_t)v9 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), a1, type metadata accessor for LegacyAccountMagicKeysRecord);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1, 1, v11);
    }
    return swift_bridgeObjectRelease(v9);
  }
  else
  {
    v13 = static os_log_type_t.error.getter(v6);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_100218DE8, "AccountMagicKeysRecord call failed because in device is in beforeFirstUnlock state", 82, 2, _swiftEmptyArrayStorage);
    v14 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
}

uint64_t sub_100129988@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  id v22;
  id v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(unint64_t, char *, uint64_t);
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void (**v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  Swift::String v71;
  Swift::String v72;
  CKRecordZoneID v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  Swift::String v78;
  id v79;
  uint64_t v80;
  void *v81;
  void *v82;
  Swift::String v83;
  id v84;
  uint64_t v85;
  void *v86;
  void *v87;
  Swift::String v88;
  void *object;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t result;
  Swift::String v106;
  id v107;
  id v108;
  uint64_t v109;
  void *v110;
  void *v111;
  Swift::String v112;
  id v113;
  id v114;
  uint64_t v115;
  void *v116;
  void *v117;
  Swift::String v118;
  NSString *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  __int128 v131;
  void (*v132)(uint64_t, uint64_t);
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  Swift::String v138;
  __int128 v139;
  unint64_t v140;
  _QWORD v141[3];

  v2 = v1;
  v137 = a1;
  v125 = type metadata accessor for CloudCoordinatorConfiguration(0);
  v127 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v130 = (uint64_t)&v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000A0980(&qword_1002123B8);
  __chkstk_darwin(v4);
  v133 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v126 = (uint64_t)&v119 - v7;
  v8 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v8);
  v10 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v136 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v120 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v124 = (uint64_t)&v119 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v119 - v19;
  v21 = (_QWORD *)objc_opt_self(NSBundle);
  v22 = objc_msgSend(v21, "mainBundle");
  v23 = objc_msgSend(v22, "infoDictionary");

  if (!v23)
  {
    v138._countAndFlagsBits = 0;
    v138._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(v138._object);
    v138._countAndFlagsBits = 0xD00000000000001DLL;
    v138._object = (void *)0x80000001001B34B0;
    v113 = objc_msgSend(v21, "mainBundle");
    v114 = objc_msgSend(v113, "description");
    v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
    v117 = v116;

    v118._countAndFlagsBits = v115;
    v118._object = v117;
    String.append(_:)(v118);

    swift_bridgeObjectRelease(v117);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v138._countAndFlagsBits, v138._object, "audioaccessoryd/DeviceStore.swift", 33, 2, 160, 0);
    goto LABEL_68;
  }
  v24 = (uint64_t *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!v24[2])
    goto LABEL_64;
  v25 = sub_1000AA00C(0xD00000000000001ALL, 0x80000001001B34D0);
  if ((v26 & 1) == 0)
    goto LABEL_64;
  sub_100104A08(v24[7] + 32 * v25, (uint64_t)&v138);
  swift_bridgeObjectRelease(v24);
  if (!*((_QWORD *)&v139 + 1))
  {
LABEL_65:
    sub_1000A1000((uint64_t)&v138, &qword_100211980);
    goto LABEL_66;
  }
  if ((swift_dynamicCast(v141, &v138, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_66:
    v138._countAndFlagsBits = 0;
    v138._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v106._countAndFlagsBits = 0xD00000000000003DLL;
    v106._object = (void *)0x80000001001B34F0;
    String.append(_:)(v106);
    v107 = objc_msgSend(v21, "mainBundle");
    v108 = objc_msgSend(v107, "description");
    v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
    v111 = v110;

    v112._countAndFlagsBits = v109;
    v112._object = v111;
    String.append(_:)(v112);

    swift_bridgeObjectRelease(v111);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v138._countAndFlagsBits, v138._object, "audioaccessoryd/DeviceStore.swift", 33, 2, 163, 0);
LABEL_68:
    __break(1u);
    return result;
  }
  v132 = (void (*)(uint64_t, uint64_t))v141[0];
  *(_QWORD *)&v131 = v141[1];
  v27 = sub_1000A0980((uint64_t *)&unk_1002123C0);
  v21 = (_QWORD *)swift_allocObject(v27, 64, 7);
  *((_OWORD *)v21 + 1) = xmmword_1001858F0;
  v122 = (unint64_t)"Updating main device record: %@";
  v21[4] = 0xD00000000000001ELL;
  v21[5] = 0x80000001001AA990;
  v21[6] = 0xD000000000000010;
  v21[7] = 0x80000001001AB0E0;
  *((_QWORD *)&v139 + 1) = &type metadata for AudioAccessoryFeatures;
  v140 = sub_1000A42C4();
  v28 = isFeatureEnabled(_:)(&v138);
  sub_1000A2140(&v138);
  v135 = (unint64_t)v13;
  if ((v28 & 1) != 0)
  {
    v30 = v21[2];
    v29 = v21[3];
    if (v30 >= v29 >> 1)
      v21 = sub_100169644((_QWORD *)(v29 > 1), v30 + 1, 1, v21);
    v21[2] = v30 + 1;
    v31 = &v21[2 * v30];
    v31[4] = 0xD000000000000012;
    v31[5] = 0x80000001001AB270;
  }
  v123 = v2;
  v32 = *(_QWORD *)(v2 + 40);
  v24 = *(uint64_t **)(v2 + 48);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v128 = v14;
  v129 = v33;
  v34 = v134;
  v33((uint64_t)v20, v2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL, v134);
  swift_bridgeObjectRetain(v24);
  UUID.init(uuidString:)(0xD000000000000024, 0x80000001001AD250);
  v35 = v136;
  v36 = v11;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v10, 1, v11) == 1)
    goto LABEL_63;
  v37 = *(void (**)(unint64_t, char *, uint64_t))(v35 + 32);
  v38 = v135;
  v37(v135, v10, v36);
  v39 = v137;
  v37(v137, (char *)v38, v36);
  v40 = v125;
  v41 = (_QWORD *)(v39 + *(int *)(v125 + 20));
  *v41 = v32;
  v41[1] = v24;
  v42 = v40;
  v43 = (void (**)(uint64_t, uint64_t))(v39 + *(int *)(v40 + 24));
  v44 = (void (*)(uint64_t, uint64_t))v131;
  *v43 = v132;
  v43[1] = v44;
  v45 = v128;
  (*(void (**)(unint64_t, char *, uint64_t))(v128 + 32))(v39 + *(int *)(v42 + 28), v20, v34);
  v46 = *(int *)(v42 + 32);
  *(_QWORD *)(v39 + v46) = v21;
  v47 = sub_100129690();
  v48 = v45;
  if (qword_100210170 != -1)
LABEL_61:
    swift_once(&qword_100210170, sub_1000D8E08);
  v49 = sub_1000A0A00(v34, (uint64_t)qword_100218D10);
  v50 = v124;
  v129(v124, v49, v34);
  v51 = sub_100128330(v50, &qword_1002123B8, type metadata accessor for CloudCoordinatorConfiguration, (uint64_t)sub_100166140, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169630);
  swift_release(v47);
  v52 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v52(v50, v34);
  if (v51[2])
  {
    v53 = v127;
    v34 = v126;
    sub_1000AE548((uint64_t)v51 + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80)), v126, type metadata accessor for CloudCoordinatorConfiguration);
    v54 = 0;
  }
  else
  {
    v54 = 1;
    v53 = v127;
    v34 = v126;
  }
  v47 = (uint64_t)v133;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v34, v54, 1, v42);
  swift_bridgeObjectRelease(v51);
  v55 = *(_QWORD *)(v137 + v46);
  v137 = *(_QWORD *)(v55 + 16);
  if (v137)
  {
    v132 = v52;
    v136 = v55 + 32;
    v119 = CKCurrentUserDefaultName;
    swift_bridgeObjectRetain(v55);
    v56 = 0;
    v121 = 0;
    v48 = v122;
    v135 = v122 | 0x8000000000000000;
    v123 = v55;
    v131 = xmmword_100184870;
    while (1)
    {
      if (v56 >= *(_QWORD *)(v55 + 16))
      {
        __break(1u);
        goto LABEL_61;
      }
      v57 = (uint64_t *)(v136 + 16 * v56);
      v58 = *v57;
      v46 = v57[1];
      if ((*v57 != 0xD00000000000001ELL || v46 != v135)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(v58, v46, 0xD00000000000001ELL, v48 | 0x8000000000000000, 0) & 1) == 0)
      {
        break;
      }
LABEL_20:
      if (++v56 == v137)
      {
        swift_bridgeObjectRelease(v55);
        return sub_1000A1000(v34, &qword_1002123B8);
      }
    }
    sub_1000AB614(v34, v47, &qword_1002123B8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v47, 1, v42) == 1)
    {
      swift_bridgeObjectRetain(v46);
      v59 = sub_1000A1000(v47, &qword_1002123B8);
LABEL_36:
      v65 = static os_log_type_t.default.getter(v59);
      if (qword_1002101D0 != -1)
        swift_once(&qword_1002101D0, sub_1001686F0);
      v66 = qword_100218DD8;
      v129 = (void (*)(uint64_t, uint64_t, uint64_t))sub_1000A0980((uint64_t *)&unk_1002103C0);
      v67 = swift_allocObject(v129, 72, 7);
      *(_OWORD *)(v67 + 16) = v131;
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      v128 = sub_1000A0DF4();
      *(_QWORD *)(v67 + 64) = v128;
      *(_QWORD *)(v67 + 32) = v58;
      *(_QWORD *)(v67 + 40) = v46;
      swift_bridgeObjectRetain(v46);
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "New zone added: %@", 18, 2, v67);
      swift_bridgeObjectRelease(v67);
      sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
      v70 = v69;
      swift_bridgeObjectRetain(v46);
      v71._countAndFlagsBits = v58;
      v71._object = (void *)v46;
      v72._countAndFlagsBits = v68;
      v72._object = v70;
      v73.super.isa = CKRecordZoneID.init(zoneName:ownerName:)(v71, v72).super.isa;
      v74 = v124;
      sub_1000E1A74(v124);
      v75 = (uint64_t)v120;
      URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
      v76 = v134;
      v77 = v132;
      v132(v74, v134);
      v78._countAndFlagsBits = 0x65746176697250;
      v78._object = (void *)0xE700000000000000;
      URL.appendPathComponent(_:)(v78);
      v79 = -[objc_class ownerName](v73.super.isa, "ownerName");
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
      v82 = v81;

      v83._countAndFlagsBits = v80;
      v83._object = v82;
      URL.appendPathComponent(_:)(v83);
      swift_bridgeObjectRelease(v82);
      v84 = -[objc_class zoneName](v73.super.isa, "zoneName");
      v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
      v87 = v86;

      v138._countAndFlagsBits = v85;
      v138._object = v87;
      v88._countAndFlagsBits = 0x6E656B6F742ELL;
      v88._object = (void *)0xE600000000000000;
      String.append(_:)(v88);
      object = v138._object;
      URL.appendPathComponent(_:)(v138);
      swift_bridgeObjectRelease(object);
      v90 = (void *)sub_1000E204C(v75);

      if (v90)
      {
        v92 = static os_log_type_t.error.getter(v91);
        v93 = qword_100218DD8;
        v94 = swift_allocObject(v129, 72, 7);
        *(_OWORD *)(v94 + 16) = v131;
        v95 = v128;
        *(_QWORD *)(v94 + 56) = &type metadata for String;
        *(_QWORD *)(v94 + 64) = v95;
        *(_QWORD *)(v94 + 32) = v58;
        *(_QWORD *)(v94 + 40) = v46;
        os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "Remove change token for zone: %@", 32, 2, v94);
        swift_bridgeObjectRelease(v94);
        v96 = v121;
        sub_1000E22C0();
        v42 = v125;
        if (v96)
        {

          swift_errorRelease(v96);
          v132(v75, v134);
          v121 = 0;
        }
        else
        {
          v121 = 0;
          v132(v75, v134);

        }
      }
      else
      {
        v77(v75, v76);
        swift_bridgeObjectRelease(v46);

        v42 = v125;
      }
      v53 = v127;
      v34 = v126;
      v47 = (uint64_t)v133;
      v48 = v122;
      goto LABEL_19;
    }
    v60 = v130;
    sub_1000C6CD0(v47, v130, type metadata accessor for CloudCoordinatorConfiguration);
    v61 = *(_QWORD **)(v60 + *(int *)(v42 + 32));
    v21 = (_QWORD *)v61[2];
    if (v21)
    {
      v62 = v61[4];
      v63 = v61[5];
      v64 = v62 == v58 && v63 == v46;
      if (v64 || (_stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v58, v46, 0) & 1) != 0)
        goto LABEL_33;
      if (v21 != (_QWORD *)1)
      {
        v97 = v61[6];
        v98 = v61[7];
        v99 = v97 == v58 && v98 == v46;
        if (v99 || (_stringCompareWithSmolCheck(_:_:expecting:)(v97, v98, v58, v46, 0) & 1) != 0)
        {
LABEL_33:
          sub_1000AE58C(v130, type metadata accessor for CloudCoordinatorConfiguration);
          v47 = (uint64_t)v133;
LABEL_19:
          v55 = v123;
          goto LABEL_20;
        }
        if (v21 != (_QWORD *)2)
        {
          v24 = v61 + 9;
          v100 = 2;
          while (1)
          {
            v101 = (_QWORD *)(v100 + 1);
            if (__OFADD__(v100, 1))
              break;
            v102 = *(v24 - 1);
            v103 = *v24;
            v104 = v102 == v58 && v103 == v46;
            if (v104 || (_stringCompareWithSmolCheck(_:_:expecting:)(v102, v103, v58, v46, 0) & 1) != 0)
            {
              v53 = v127;
              v34 = v126;
              goto LABEL_33;
            }
            v24 += 2;
            ++v100;
            if (v101 == v21)
              goto LABEL_35;
          }
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          v138 = (Swift::String)0;
          v139 = 0u;
          swift_bridgeObjectRelease(v24);
          goto LABEL_65;
        }
      }
    }
LABEL_35:
    swift_bridgeObjectRetain(v46);
    v59 = sub_1000AE58C(v130, type metadata accessor for CloudCoordinatorConfiguration);
    goto LABEL_36;
  }
  return sub_1000A1000(v34, &qword_1002123B8);
}

uint64_t sub_10012A6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31[2];
  char *v32;
  _QWORD *v33;

  v1 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v1);
  v3 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, v5);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CloudCoordinatorConfiguration(0);
  __chkstk_darwin(v12);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)v31 - v16;
  v18 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___cloudCoordinator);
  v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___cloudCoordinator);
  if (v19)
  {
    v20 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___cloudCoordinator);
  }
  else
  {
    v32 = v3;
    sub_100129988((unint64_t)v31 - v16);
    sub_1000AE548((uint64_t)v17, (uint64_t)v14, type metadata accessor for CloudCoordinatorConfiguration);
    v31[1] = sub_1000AB31C(0, (unint64_t *)&qword_1002119F0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
    v21 = swift_unknownObjectRetain(v0);
    static DispatchQoS.unspecified.getter(v21);
    v33 = _swiftEmptyArrayStorage;
    v22 = sub_1000A0940((unint64_t *)&unk_1002123A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v23 = sub_1000A0980((uint64_t *)&unk_100211A00);
    v24 = sub_1000AAD14((unint64_t *)&qword_1002123B0, (uint64_t *)&unk_100211A00, (uint64_t)&protocol conformance descriptor for [A]);
    v31[0] = v0;
    v25 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v23, v24, v1, v22);
    v26 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000040, 0x80000001001B3460, v7, v25, v11, 0);
    v27 = type metadata accessor for CloudCoordinator(0);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v28 = v31[0];
    v20 = sub_100100F64((uint64_t)v14, v31[0], (uint64_t)&off_1001EB548, v26);
    swift_release(v28);
    sub_1000AE58C((uint64_t)v17, type metadata accessor for CloudCoordinatorConfiguration);
    v29 = *v18;
    *v18 = v20;
    v18[1] = (uint64_t)&off_1001E9380;
    swift_unknownObjectRetain(v20);
    swift_unknownObjectRelease(v29);
    v19 = 0;
  }
  swift_unknownObjectRetain(v19);
  return v20;
}

uint64_t sub_10012A994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v50)(char *, uint64_t);
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  _QWORD v94[5];
  _QWORD *v95;

  v1 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v1);
  v3 = (char *)&v79 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v87 = (char *)&v79 - v5;
  __chkstk_darwin(v6);
  v91 = (char *)&v79 - v7;
  __chkstk_darwin(v8);
  v92 = (char *)&v79 - v9;
  __chkstk_darwin(v10);
  v93 = (char *)&v79 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v79 - v13;
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD **)(v15 - 8);
  __chkstk_darwin(v15);
  v83 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v84 = (char *)&v79 - v19;
  __chkstk_darwin(v20);
  v85 = (char *)&v79 - v21;
  __chkstk_darwin(v22);
  v86 = (char *)&v79 - v23;
  __chkstk_darwin(v24);
  v88 = (char *)&v79 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v79 - v27;
  __chkstk_darwin(v29);
  v89 = (char *)&v79 - v30;
  __chkstk_darwin(v31);
  v90 = (char *)&v79 - v32;
  __chkstk_darwin(v33);
  v35 = (char *)&v79 - v34;
  __chkstk_darwin(v36);
  v38 = (char *)&v79 - v37;
  __chkstk_darwin(v39);
  v41 = (char *)&v79 - v40;
  __chkstk_darwin(v42);
  v44 = (char *)&v79 - v43;
  v45 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((v45 & 1) == 0)
  {
    v78 = static os_log_type_t.error.getter(v45);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v77 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, qword_100218DE8, "deferredRecords call failed because in device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
    return (uint64_t)v77;
  }
  v79 = v3;
  v80 = v28;
  v95 = _swiftEmptyArrayStorage;
  v46 = sub_100129690();
  v82 = v0;
  v47 = v46;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  v48 = (uint64_t (*)(char *, uint64_t, uint64_t))v16[6];
  result = v48(v14, 1, v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_16;
  }
  v81 = (void (*)(char *, char *, uint64_t))v16[4];
  v81(v41, v14, v15);
  URL.appendingPathComponent(_:)(0x6552656369766544);
  v50 = (void (*)(char *, uint64_t))v16[1];
  v50(v41, v15);
  v51 = sub_100128330((uint64_t)v44, &qword_100210CF0, type metadata accessor for BTDeferredRecord, (uint64_t)sub_100166108, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169778);
  swift_release(v47);
  v50(v44, v15);
  sub_10012B298((uint64_t)v51);
  v52 = sub_100129690();
  v53 = v93;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = v48(v53, 1, v15);
  if ((_DWORD)result == 1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v54 = v81;
  v81(v35, v53, v15);
  URL.appendingPathComponent(_:)(0x746553636967614DLL);
  v50(v35, v15);
  v55 = sub_100128330((uint64_t)v38, &qword_100210CF0, type metadata accessor for BTDeferredRecord, (uint64_t)sub_100166108, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169778);
  swift_release(v52);
  v50(v38, v15);
  sub_10012B298((uint64_t)v55);
  v56 = sub_100129690();
  v57 = v92;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = v48(v57, 1, v15);
  if ((_DWORD)result == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v58 = v89;
  v54(v89, v57, v15);
  v59 = (uint64_t)v90;
  URL.appendingPathComponent(_:)(0xD00000000000001ELL);
  v50(v58, v15);
  v60 = sub_100128330(v59, &qword_100210CF0, type metadata accessor for BTDeferredRecord, (uint64_t)sub_100166108, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169778);
  swift_release(v56);
  v50((char *)v59, v15);
  sub_10012B298((uint64_t)v60);
  v61 = sub_100129690();
  v62 = v91;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = v48(v62, 1, v15);
  if ((_DWORD)result == 1)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v63 = v88;
  v54(v88, v62, v15);
  v64 = (uint64_t)v80;
  URL.appendingPathComponent(_:)(0xD000000000000012);
  v50(v63, v15);
  v65 = sub_100128330(v64, &qword_100210CF0, type metadata accessor for BTDeferredRecord, (uint64_t)sub_100166108, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169778);
  swift_release(v61);
  v50((char *)v64, v15);
  sub_10012B298((uint64_t)v65);
  v94[3] = &type metadata for AudioAccessoryFeatures;
  v94[4] = sub_1000A42C4();
  v66 = isFeatureEnabled(_:)(v94);
  sub_1000A2140(v94);
  if ((v66 & 1) == 0)
    return (uint64_t)v95;
  v67 = sub_100129690();
  v68 = v87;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = v48(v68, 1, v15);
  if ((_DWORD)result == 1)
    goto LABEL_19;
  v69 = v85;
  v54(v85, v68, v15);
  v70 = (uint64_t)v86;
  URL.appendingPathComponent(_:)(0x6563697665444141);
  v50(v69, v15);
  v71 = sub_100128330(v70, &qword_100210CF0, type metadata accessor for BTDeferredRecord, (uint64_t)sub_100166108, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169778);
  swift_release(v67);
  v50((char *)v70, v15);
  sub_10012B298((uint64_t)v71);
  v72 = sub_100129690();
  v73 = v79;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = v48(v73, 1, v15);
  if ((_DWORD)result != 1)
  {
    v74 = v83;
    v54(v83, v73, v15);
    v75 = (uint64_t)v84;
    URL.appendingPathComponent(_:)(0xD000000000000011);
    v50(v74, v15);
    v76 = sub_100128330(v75, &qword_100210CF0, type metadata accessor for BTDeferredRecord, (uint64_t)sub_100166108, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169778);
    swift_release(v72);
    v50((char *)v75, v15);
    sub_10012B298((uint64_t)v76);
    return (uint64_t)v95;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_10012B298(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;
  char v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_100169778(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for BTDeferredRecord(0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10012B40C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((v6 & 1) != 0)
  {
    v7 = sub_100129690();
    if (qword_100210188 != -1)
      swift_once(&qword_100210188, sub_1000E3AB4);
    v8 = sub_1000A0A00(v2, (uint64_t)qword_100218D40);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    v9 = sub_100128330((uint64_t)v5, &qword_100210CD8, type metadata accessor for LegacyMagicPairingSettingsRecords, (uint64_t)sub_1001660D0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169750);
    swift_release(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v10 = v9[2];
    v11 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (v10)
    {
      sub_1000AE548((uint64_t)v9 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), a1, type metadata accessor for LegacyMagicPairingSettingsRecords);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1, 1, v11);
    }
    return swift_bridgeObjectRelease(v9);
  }
  else
  {
    v13 = static os_log_type_t.error.getter(v6);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_100218DE8, "Legacy magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 94, 2, _swiftEmptyArrayStorage);
    v14 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
}

uint64_t sub_10012B62C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((v6 & 1) != 0)
  {
    v7 = sub_100129690();
    if (qword_100210138 != -1)
      swift_once(&qword_100210138, sub_1000AB9D0);
    v8 = sub_1000A0A00(v2, (uint64_t)qword_100218C38);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    v9 = sub_100128330((uint64_t)v5, &qword_100212230, type metadata accessor for SoundProfileRecord, (uint64_t)sub_100166098, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_10016961C);
    swift_release(v7);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v18 = v9;
    swift_bridgeObjectRetain(v9);
    sub_10014FFA8(&v18);
    swift_bridgeObjectRelease(v9);
    v10 = v18;
    v11 = v18[2];
    v12 = type metadata accessor for SoundProfileRecord(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (v11)
    {
      sub_1000AE548((uint64_t)v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), a1, type metadata accessor for SoundProfileRecord);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v12);
    }
    return swift_release(v10);
  }
  else
  {
    v14 = static os_log_type_t.error.getter(v6);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_100218DE8, "Unable to read sound profile record because device is in beforeFirstUnlock state", 80, 2, _swiftEmptyArrayStorage);
    v15 = type metadata accessor for SoundProfileRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
}

_QWORD *sub_10012B880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v12[5];

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[3] = &type metadata for AudioAccessoryFeatures;
  v12[4] = sub_1000A42C4();
  v4 = isFeatureEnabled(_:)(v12);
  sub_1000A2140(v12);
  if ((v4 & 1) == 0)
    return _swiftEmptyArrayStorage;
  v5 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((v5 & 1) != 0)
  {
    v6 = sub_100129690();
    if (qword_1002101B0 != -1)
      swift_once(&qword_1002101B0, sub_100106014);
    v7 = sub_1000A0A00(v0, (uint64_t)qword_100218D68);
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v7, v0);
    v8 = (_QWORD *)sub_100127B2C((uint64_t)v3, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
    swift_release(v6);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else
  {
    v9 = static os_log_type_t.error.getter(v5);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v8 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_100218DE8, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
  }
  return v8;
}

_QWORD *sub_10012BA30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v12[5];

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[3] = &type metadata for AudioAccessoryFeatures;
  v12[4] = sub_1000A42C4();
  v4 = isFeatureEnabled(_:)(v12);
  sub_1000A2140(v12);
  if ((v4 & 1) == 0)
    return _swiftEmptyArrayStorage;
  v5 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((v5 & 1) != 0)
  {
    v6 = sub_100129690();
    if (qword_100210130 != -1)
      swift_once(&qword_100210130, sub_1000A5BC0);
    v7 = sub_1000A0A00(v0, (uint64_t)qword_100218C00);
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v7, v0);
    v8 = (_QWORD *)sub_100127B2C((uint64_t)v3, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
    swift_release(v6);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else
  {
    v9 = static os_log_type_t.error.getter(v5);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v8 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_100218DE8, "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
  }
  return v8;
}

uint64_t sub_10012BBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v7 - 8);
  v29 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Notification(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(id *)(a2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v13);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_1001ECF48, v17 + 8, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v18 + v16, v14, v10);
  *(_QWORD *)(v18 + v17) = a2;
  aBlock[4] = sub_100168134;
  v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001ECF60;
  v19 = _Block_copy(aBlock);
  v20 = v27;
  v21 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v21);
  v31 = _swiftEmptyArrayStorage;
  v22 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_1000A0980(&qword_100211D00);
  v24 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v4, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  return swift_release(v33);
}

void sub_10012BE68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unsigned int v16;
  int v17;
  _QWORD v18[2];
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;

  v3 = Notification.userInfo.getter();
  if (!v3)
  {
    v20 = 0u;
    v21 = 0u;
LABEL_15:
    sub_1000A1000((uint64_t)&v20, &qword_100211980);
    return;
  }
  v4 = v3;
  v18[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("IsNetworkAvailable"));
  v18[1] = v5;
  AnyHashable.init<A>(_:)(v19, v18, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v4 + 16) && (v6 = sub_1000AA1DC((uint64_t)v19), (v7 & 1) != 0))
  {
    sub_100104A08(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v20);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRelease(v4);
  sub_1000AB43C((uint64_t)v19);
  if (!*((_QWORD *)&v21 + 1))
    goto LABEL_15;
  v8 = sub_1000AB31C(0, &qword_1002123E0, NSNumber_ptr);
  v9 = swift_dynamicCast(v19, &v20, (char *)&type metadata for Any + 8, v8, 6);
  if ((v9 & 1) != 0)
  {
    v10 = (void *)v19[0];
    v11 = static os_log_type_t.debug.getter(v9);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v12 = qword_100218DE8;
    v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100184870;
    *(_QWORD *)(v14 + 56) = v8;
    *(_QWORD *)(v14 + 64) = sub_100164E60(&qword_1002123E8, &qword_1002123E0, NSNumber_ptr);
    *(_QWORD *)(v14 + 32) = v10;
    v15 = v10;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Network changed: %@", 19, 2, v14);
    swift_bridgeObjectRelease(v14);
    v16 = objc_msgSend(v15, "BOOLValue");
    v17 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_networkUp);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_networkUp) = v16;
    if (v17 != 1)
    {
      if (v16)
        sub_10012C36C();
    }

  }
}

uint64_t sub_10012C07C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10012C120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_100218DE8, "Deinit Device Store", 19, 2, _swiftEmptyArrayStorage);
  v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v3, "removeObserver:", v1);

  sub_1000C7298(v1 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));

  v4 = v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL;
  v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___fileManager));
  swift_unknownObjectRelease(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___cloudCoordinator));
  return v1;
}

uint64_t sub_10012C254(uint64_t a1)
{
  uint64_t v1;

  sub_10012C120(a1);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_10012C278()
{
  return type metadata accessor for DeviceStore(0);
}

uint64_t type metadata accessor for DeviceStore(uint64_t a1)
{
  uint64_t result;

  result = qword_100211E80;
  if (!qword_100211E80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceStore);
  return result;
}

uint64_t sub_10012C2BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_100187D20;
  v4[1] = &unk_100187D38;
  v4[2] = &unk_100187D50;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_100187D20;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = &unk_100187D68;
    v4[8] = &unk_100187D68;
    v4[9] = &unk_100187D50;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10012C36C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  NSDate v20;
  Class isa;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD aBlock[5];
  uint64_t v54;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.default.getter(v12);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v14 = qword_100218DE8;
  v15 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100184870;
  v17 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer);
  if (v17)
  {
    v18 = objc_msgSend(v17, "date");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v19 = (void *)objc_opt_self(NSDateFormatter);
    v47 = v9;
    v20.super.isa = Date._bridgeToObjectiveC()().super.isa;
    v46 = v11;
    isa = v20.super.isa;
    v22 = v8;
    v23 = v14;
    v24 = v7;
    v25 = v1;
    v26 = v4;
    v27 = v13;
    v28 = objc_msgSend(v19, "localizedStringFromDate:dateStyle:timeStyle:", v20.super.isa, 2, 2);

    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v13 = v27;
    v4 = v26;
    v1 = v25;
    v7 = v24;
    v14 = v23;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v22);
  }
  else
  {
    v29 = 0;
    v31 = 0;
  }
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_1000A0DF4();
  v32 = 0xD000000000000010;
  if (v31)
    v32 = v29;
  v33 = 0x80000001001B3240;
  if (v31)
    v33 = v31;
  *(_QWORD *)(v16 + 32) = v32;
  *(_QWORD *)(v16 + 40) = v33;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Device Store scheduleDeviceStoreDeferredActions to run at %@", 60, 2, v16);
  swift_bridgeObjectRelease(v16);
  v34 = *(void **)(v1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  v35 = swift_allocObject(&unk_1001EB580, 24, 7);
  swift_weakInit(v35 + 16, v1);
  aBlock[4] = sub_100166080;
  v54 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EC100;
  v36 = _Block_copy(aBlock);
  v37 = v34;
  v38 = swift_retain(v35);
  static DispatchQoS.unspecified.getter(v38);
  v52 = _swiftEmptyArrayStorage;
  v39 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v40 = sub_1000A0980(&qword_100211D00);
  v41 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  v42 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v40, v41, v51, v39);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v36);
  _Block_release(v36);

  (*(void (**)(char *, uint64_t))(v50 + 8))(v4, v42);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v49);
  v43 = v54;
  swift_release(v35);
  return swift_release(v43);
}

void sub_10012C768(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[5];
  uint64_t v14;
  char v15[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer;
    if (*(_QWORD *)(Strong + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer))
    {
      swift_release(Strong);
    }
    else
    {
      v5 = static os_log_type_t.default.getter(Strong);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_100218DE8, "Device Store checkin activity handler", 37, 2, _swiftEmptyArrayStorage);
      v6 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v6 + 16, v3);
      v7 = objc_allocWithZone((Class)BTXPCTimer);
      swift_retain(v6);
      v8 = String._bridgeToObjectiveC()();
      aBlock[4] = sub_100166088;
      v14 = v6;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000ED490;
      aBlock[3] = &unk_1001EC128;
      v9 = _Block_copy(aBlock);
      v10 = objc_msgSend(v7, "initWithName:timeInterval:gracePeriod:priority:options:block:", v8, 1, 705, v9, 300.0, 60.0);

      _Block_release(v9);
      v11 = v14;
      swift_release(v6);
      swift_release(v11);
      v12 = *(void **)(v3 + v4);
      *(_QWORD *)(v3 + v4) = v10;
      swift_release(v3);

    }
  }
}

uint64_t sub_10012C948(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;
  char v35[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v35, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v13 = result;
    v29 = v9;
    v30 = v8;
    v31 = v5;
    v14 = static os_log_type_t.default.getter(result);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v15 = qword_100218DE8;
    v16 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100184870;
    *(_QWORD *)(v17 + 56) = sub_1000AB31C(0, &qword_100212358, &off_1001E11F8);
    *(_QWORD *)(v17 + 64) = sub_100164E60((unint64_t *)&unk_100212360, &qword_100212358, &off_1001E11F8);
    *(_QWORD *)(v17 + 32) = a1;
    v18 = a1;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Device Store scheduled activity handler timer fired: %@", 55, 2, v17);
    swift_bridgeObjectRelease(v17);
    v19 = *(void **)(v13 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v20 = swift_allocObject(&unk_1001EB580, 24, 7);
    swift_weakInit(v20 + 16, v13);
    aBlock[4] = sub_100166090;
    v34 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = &unk_1001EC150;
    v21 = _Block_copy(aBlock);
    v22 = v19;
    v23 = swift_retain(v20);
    static DispatchQoS.unspecified.getter(v23);
    v32 = _swiftEmptyArrayStorage;
    v24 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_1000A0980(&qword_100211D00);
    v26 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v25, v26, v4, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v21);
    _Block_release(v21);
    swift_release(v13);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    v27 = v34;
    swift_release(v20);
    return swift_release(v27);
  }
  return result;
}

void sub_10012CC6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  _BYTE v9[24];
  _BYTE v10[24];
  _BYTE v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_10012CD50();
    swift_release(v3);
  }
  swift_beginAccess(v1, v10, 0, 0);
  v4 = swift_weakLoadStrong(v1);
  if (v4)
  {
    v5 = v4;
    v6 = *(id *)(v4 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer);
    swift_release(v5);
    objc_msgSend(v6, "invalidate");

  }
  swift_beginAccess(v1, v9, 0, 0);
  v7 = swift_weakLoadStrong(v1);
  if (v7)
  {
    v8 = *(void **)(v7 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer);
    *(_QWORD *)(v7 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer) = 0;
    swift_release(v7);

  }
}

uint64_t sub_10012CD50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  v8 = swift_allocObject(&unk_1001EB580, 24, 7);
  swift_weakInit(v8 + 16, v0);
  aBlock[4] = sub_100165D58;
  v22 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = &unk_1001EBEF8;
  v9 = _Block_copy(aBlock);
  v10 = v7;
  v11 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v11);
  v20 = _swiftEmptyArrayStorage;
  v12 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_1000A0980(&qword_100211D00);
  v14 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v3, v9);
  _Block_release(v9);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
  v15 = v22;
  swift_release(v8);
  return swift_release(v15);
}

uint64_t sub_10012CF6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t result;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;
  void *v72;
  Swift::String v73;
  Class isa;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  NSString v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  char v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t (*v252)(char *, char *);
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  char v256;
  char v257;
  id v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  char v272;
  uint64_t v273;
  uint64_t v274;
  void *v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  id v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  id v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  id v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  void *v334;
  uint64_t v335;
  unint64_t v336;
  objc_class *v337;
  Class v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  id v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  char v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  id v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  id v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  char *v371;
  char *v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  uint64_t v377;
  char *v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  char *v385;
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  char *v392;
  char *v393;
  void *v394;
  unint64_t v395;
  NSString *v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  __int128 v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  Class v420;
  ValueMetadata *v421;
  unint64_t v422;
  char v423[8];

  v2 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v2);
  v377 = (uint64_t)&v366 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SoundProfileRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v370 = (uint64_t)&v366 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v366 - v8);
  v413 = type metadata accessor for MagicPairingSettingsRecord(0);
  v382 = *(_QWORD *)(v413 - 8);
  __chkstk_darwin(v413);
  v412 = (char *)&v366 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v417 = type metadata accessor for DeviceSupportInformationRecord(0);
  v389 = *(_QWORD *)(v417 - 8);
  __chkstk_darwin(v417);
  v12 = (char *)&v366 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v13);
  v373 = (char *)&v366 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v376 = (char *)&v366 - v16;
  __chkstk_darwin(v17);
  v380 = (char *)&v366 - v18;
  __chkstk_darwin(v19);
  v386 = (char *)&v366 - v20;
  __chkstk_darwin(v21);
  v393 = (char *)&v366 - v22;
  v418 = type metadata accessor for DeviceRecord(0);
  v397 = *(_QWORD *)(v418 - 8);
  __chkstk_darwin(v418);
  v419 = (uint64_t)&v366 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v407 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v407 - 8);
  __chkstk_darwin(v407);
  v372 = (char *)&v366 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v371 = (char *)&v366 - v27;
  __chkstk_darwin(v28);
  v375 = (char *)&v366 - v29;
  __chkstk_darwin(v30);
  v374 = (char *)&v366 - v31;
  __chkstk_darwin(v32);
  v379 = (char *)&v366 - v33;
  __chkstk_darwin(v34);
  v378 = (char *)&v366 - v35;
  __chkstk_darwin(v36);
  v385 = (char *)&v366 - v37;
  __chkstk_darwin(v38);
  v384 = (char *)&v366 - v39;
  __chkstk_darwin(v40);
  v392 = (char *)&v366 - v41;
  __chkstk_darwin(v42);
  v391 = (char *)&v366 - v43;
  __chkstk_darwin(v44);
  v401 = (char *)&v366 - v45;
  v414 = type metadata accessor for BTDeferredRecord(0);
  v402 = *(_QWORD *)(v414 - 8);
  v46 = *(_QWORD *)(v402 + 64);
  __chkstk_darwin(v414);
  v381 = (uint64_t)&v366 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v387 = (uint64_t)&v366 - v48;
  __chkstk_darwin(v49);
  v383 = (uint64_t)&v366 - v50;
  __chkstk_darwin(v51);
  v390 = (uint64_t)&v366 - v52;
  __chkstk_darwin(v53);
  v403 = (uint64_t)&v366 - v54;
  __chkstk_darwin(v55);
  v406 = (uint64_t)&v366 - v56;
  __chkstk_darwin(v57);
  v59 = (char *)&v366 - v58;
  a1 += 16;
  swift_beginAccess(a1, v423, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (!result)
    return result;
  v61 = result;
  v416 = v12;
  v409 = v24;
  v367 = v5;
  v368 = v4;
  v369 = v9;
  v62 = static os_log_type_t.default.getter(result);
  if (qword_1002101E0 != -1)
    goto LABEL_213;
LABEL_3:
  v63 = qword_100218DE8;
  v405 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v64 = swift_allocObject(v405, 72, 7);
  v404 = xmmword_100184870;
  *(_OWORD *)(v64 + 16) = xmmword_100184870;
  v65 = sub_10012A994();
  *(_QWORD *)(v64 + 56) = sub_1000A0980(&qword_100212340);
  *(_QWORD *)(v64 + 64) = sub_1000AAD14(&qword_100212348, &qword_100212340, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v64 + 32) = v65;
  os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v63, "Run to delete for deferred records: %@", 38, 2, v64);
  swift_bridgeObjectRelease(v64);
  v415 = v61;
  v66 = sub_10012A994();
  v67 = *(_QWORD *)(v66 + 16);
  if (v67)
  {
    v68 = *(unsigned __int8 *)(v402 + 80);
    v366 = v66;
    v69 = v66 + ((v68 + 32) & ~v68);
    v410 = *(_QWORD *)(v402 + 72);
    v400 = v68 | 7;
    v408 = (v68 + 16) & ~v68;
    v399 = (v46 + v408 + 7) & 0xFFFFFFFFFFFFFFF8;
    v398 = v399 + 8;
    v396 = CKCurrentUserDefaultName;
    v46 = (uint64_t)type metadata accessor for BTDeferredRecord;
    v388 = "ty";
    v395 = 0x80000001001AA930;
    v394 = (void *)0x80000001001AB0E0;
    v70 = (uint64_t)v412;
    while (1)
    {
      sub_1000AE548(v69, (uint64_t)v59, type metadata accessor for BTDeferredRecord);
      if ((*v59 & 1) != 0)
        break;
      v77 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657461647075, 0xE600000000000000, 0x6574656C6564, 0xE600000000000000, 0);
      v76 = swift_bridgeObjectRelease(0xE600000000000000);
      if ((v77 & 1) != 0)
        goto LABEL_10;
LABEL_6:
      sub_1000AE58C((uint64_t)v59, type metadata accessor for BTDeferredRecord);
      v69 += v410;
      if (!--v67)
      {
        swift_bridgeObjectRelease(v366);
        goto LABEL_16;
      }
    }
    v76 = swift_bridgeObjectRelease(0xE600000000000000);
LABEL_10:
    v78 = static os_log_type_t.default.getter(v76);
    v79 = qword_100218DE8;
    v80 = swift_allocObject(v405, 72, 7);
    *(_OWORD *)(v80 + 16) = v404;
    v411 = v67;
    v81 = v406;
    sub_1000AE548((uint64_t)v59, v406, type metadata accessor for BTDeferredRecord);
    v82 = String.init<A>(describing:)(v81, v414);
    v84 = v83;
    *(_QWORD *)(v80 + 56) = &type metadata for String;
    *(_QWORD *)(v80 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v80 + 32) = v82;
    *(_QWORD *)(v80 + 40) = v84;
    os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, v79, "Delete deferred record: %@", 26, 2, v80, v366);
    swift_bridgeObjectRelease(v80);
    v85 = v415;
    v86 = sub_10012A6A0();
    UUID.uuidString.getter(v86);
    v88 = v87;
    v89 = objc_allocWithZone((Class)CKRecordID);
    v90 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v88);
    v91 = objc_msgSend(v89, "initWithRecordName:", v90);

    sub_1000AE548((uint64_t)v59, v81, type metadata accessor for BTDeferredRecord);
    v92 = swift_allocObject(&unk_1001EBF30, v398, v400);
    v93 = v81;
    v67 = v411;
    sub_1000C6CD0(v93, v92 + v408, type metadata accessor for BTDeferredRecord);
    *(_QWORD *)(v92 + v399) = v85;
    v94 = swift_allocObject(&unk_1001EBF58, 49, 7);
    *(_QWORD *)(v94 + 16) = v86;
    *(_QWORD *)(v94 + 24) = v91;
    *(_QWORD *)(v94 + 32) = sub_100165E44;
    *(_QWORD *)(v94 + 40) = v92;
    *(_BYTE *)(v94 + 48) = 0;
    swift_retain(v85);
    swift_unknownObjectRetain(v86);
    v95 = v91;
    swift_retain(v92);
    sub_1000F7A44((uint64_t)sub_100164E44, v94);
    swift_release(v92);
    swift_unknownObjectRelease(v86);

    v70 = (uint64_t)v412;
    swift_release(v94);
    v96 = *((_QWORD *)v59 + 1);
    v97 = (const char *)*((_QWORD *)v59 + 2);
    if (v96 == 0xD000000000000012 && v97 == (const char *)v395
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v96, v97, 0xD000000000000012, (unint64_t)v388 | 0x8000000000000000, 0) & 1) != 0)
    {
      sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
      v71._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v396);
      v71._object = v72;
      v73._countAndFlagsBits = 0xD000000000000010;
      v73._object = v394;
      isa = CKRecordZoneID.init(zoneName:ownerName:)(v73, v71).super.isa;
      v75 = sub_10012A6A0();
      sub_1000FBDF8((uint64_t)&off_1001E5818, (uint64_t)isa, 0, 0, 0, 0);
      swift_arrayDestroy(&unk_1001E5838, 1, &type metadata for String);

      swift_unknownObjectRelease(v75);
    }
    goto LABEL_6;
  }
  swift_bridgeObjectRelease(v66);
  v70 = (uint64_t)v412;
LABEL_16:
  v98 = sub_10012A994();
  v61 = v98;
  v59 = (char *)v407;
  v99 = v403;
  v400 = *(_QWORD *)(v98 + 16);
  if (v400)
  {
    v410 = objc_opt_self(BTSystemConfiguration);
    v411 = 0;
    v62 = 0;
    v399 = v61 + ((*(unsigned __int8 *)(v402 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v402 + 80));
    v395 = (unint64_t)"SoundProfileRecord";
    v396 = (NSString *)0x80000001001AA950;
    v388 = "ord with BT Address: %@";
    v394 = (void *)0x80000001001B1050;
    v398 = v61;
    while (1)
    {
      if (v62 >= *(_QWORD *)(v61 + 16))
      {
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        swift_once(&qword_1002101E0, sub_1001687B0);
        goto LABEL_3;
      }
      v102 = *(_QWORD *)(v402 + 72);
      v408 = v62;
      sub_1000AE548(v399 + v102 * v62, v99, type metadata accessor for BTDeferredRecord);
      v103 = objc_msgSend((id)v410, "isFirstUnlocked");
      if ((_DWORD)v103)
      {
        v104 = sub_100129690();
        if (qword_100210120 != -1)
          swift_once(&qword_100210120, sub_10009C800);
        v105 = sub_1000A0A00((uint64_t)v59, (uint64_t)qword_100218BE0);
        v106 = v409;
        v107 = (uint64_t)v401;
        (*(void (**)(char *, uint64_t, char *))(v409 + 16))(v401, v105, v59);
        v108 = sub_100128330(v107, &qword_100210CF8, type metadata accessor for DeviceRecord, (uint64_t)sub_100154AD0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693D4);
        swift_release(v104);
        (*(void (**)(uint64_t, char *))(v106 + 8))(v107, v59);
        v109 = v108[2];
        if (v109)
        {
LABEL_28:
          v110 = (_QWORD *)(v99 + *(int *)(v414 + 28));
          v111 = (uint64_t)v108
               + ((*(unsigned __int8 *)(v397 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v397 + 80));
          v112 = *(_QWORD *)(v397 + 72);
          swift_bridgeObjectRetain(v108);
          while (1)
          {
            v46 = v419;
            sub_1000AE548(v111, v419, type metadata accessor for DeviceRecord);
            v113 = (_QWORD *)(v46 + *(int *)(v418 + 24));
            v114 = v113[1];
            v115 = v110[1];
            v116 = *v113 == *v110 && v114 == v115;
            if (v116)
              break;
            v46 = _stringCompareWithSmolCheck(_:_:expecting:)(*v113, v114, *v110, v115, 0);
            sub_1000AE58C(v419, type metadata accessor for DeviceRecord);
            if ((v46 & 1) != 0)
              goto LABEL_44;
            v111 += v112;
            if (!--v109)
            {
              v117 = swift_bridgeObjectRelease_n(v108, 2);
              goto LABEL_38;
            }
          }
          sub_1000AE58C(v419, type metadata accessor for DeviceRecord);
LABEL_44:
          swift_bridgeObjectRelease_n(v108, 2);
          goto LABEL_46;
        }
      }
      else
      {
        v118 = static os_log_type_t.error.getter(v103);
        v108 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)(v118, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
        v109 = _swiftEmptyArrayStorage[2];
        if (v109)
          goto LABEL_28;
      }
      v117 = swift_bridgeObjectRelease(v108);
LABEL_38:
      v119 = *(_QWORD *)(v99 + 8);
      v46 = *(_QWORD *)(v99 + 16);
      if (v119 == 0x6552656369766544 && v46 == 0xEC00000064726F63
        || (v117 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v99 + 8), *(_QWORD *)(v99 + 16), 0x6552656369766544, 0xEC00000064726F63, 0), (v117 & 1) != 0))
      {
        v120 = static os_log_type_t.default.getter(v117);
        v121 = qword_100218DE8;
        v122 = swift_allocObject(v405, 72, 7);
        *(_OWORD *)(v122 + 16) = v404;
        v123 = v406;
        sub_1000AE548(v99, v406, type metadata accessor for BTDeferredRecord);
        v124 = v123;
        v125 = v414;
        v126 = String.init<A>(describing:)(v124, v414);
        v128 = v127;
        *(_QWORD *)(v122 + 56) = &type metadata for String;
        *(_QWORD *)(v122 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v122 + 32) = v126;
        *(_QWORD *)(v122 + 40) = v128;
        os_log(_:dso:log:_:_:)(v120, &_mh_execute_header, v121, "Remove deferred device record not found in cache anymore: %@", 60, 2, v122);
        swift_bridgeObjectRelease(v122);
        v129 = sub_100129690();
        v130 = (uint64_t *)(v99 + *(int *)(v125 + 28));
        v131 = *v130;
        v132 = v130[1];
        swift_bridgeObjectRetain(v132);
        v133 = v393;
        URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
        v134 = v409;
        result = (*(uint64_t (**)(char *, uint64_t, char *))(v409 + 48))(v133, 1, v59);
        if ((_DWORD)result == 1)
          goto LABEL_234;
        v135 = v392;
        (*(void (**)(char *, char *, char *))(v134 + 32))(v392, v133, v59);
        swift_bridgeObjectRetain(v46);
        v136 = v391;
        URL.appendingPathComponent(_:)(v119);
        swift_bridgeObjectRelease(v46);
        v46 = *(_QWORD *)(v134 + 8);
        v137 = ((uint64_t (*)(char *, char *))v46)(v135, v59);
        __chkstk_darwin(v137);
        *(&v366 - 4) = v129;
        *(&v366 - 3) = v131;
        *(&v366 - 2) = v132;
        *(&v366 - 1) = (uint64_t)v136;
        v138 = v411;
        OS_dispatch_queue.sync<A>(execute:)(&v420, sub_1001684A0, &v366 - 6, &type metadata for Bool);
        v411 = v138;
        v59 = (char *)v407;
        swift_release(v129);
        v139 = v132;
        goto LABEL_65;
      }
      v70 = (uint64_t)v412;
LABEL_46:
      v140 = objc_msgSend((id)v410, "isFirstUnlocked", v366);
      if ((_DWORD)v140)
      {
        v141 = sub_100129690();
        if (qword_100210180 != -1)
          swift_once(&qword_100210180, sub_1000DA4F0);
        v142 = sub_1000A0A00((uint64_t)v59, (uint64_t)qword_100218D28);
        v46 = v409;
        v143 = (uint64_t)v401;
        (*(void (**)(char *, uint64_t, char *))(v409 + 16))(v401, v142, v59);
        v144 = sub_100128330(v143, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)sub_100154B40, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693E8);
        swift_release(v141);
        (*(void (**)(uint64_t, char *))(v46 + 8))(v143, v59);
        v145 = v144[2];
        if (v145)
        {
LABEL_50:
          v146 = (_QWORD *)(v99 + *(int *)(v414 + 28));
          v147 = (uint64_t)v144
               + ((*(unsigned __int8 *)(v389 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v389 + 80));
          v148 = *(_QWORD *)(v389 + 72);
          swift_bridgeObjectRetain(v144);
          while (1)
          {
            v149 = (uint64_t)v416;
            sub_1000AE548(v147, (uint64_t)v416, type metadata accessor for DeviceSupportInformationRecord);
            v150 = (_QWORD *)(v149 + *(int *)(v417 + 24));
            v151 = v150[1];
            v152 = v146[1];
            if (*v150 == *v146 && v151 == v152)
              break;
            v46 = _stringCompareWithSmolCheck(_:_:expecting:)(*v150, v151, *v146, v152, 0);
            sub_1000AE58C(v149, type metadata accessor for DeviceSupportInformationRecord);
            if ((v46 & 1) != 0)
              goto LABEL_69;
            v147 += v148;
            if (!--v145)
            {
              v154 = swift_bridgeObjectRelease_n(v144, 2);
              v99 = v403;
              goto LABEL_60;
            }
          }
          sub_1000AE58C(v149, type metadata accessor for DeviceSupportInformationRecord);
LABEL_69:
          swift_bridgeObjectRelease_n(v144, 2);
          v99 = v403;
          goto LABEL_71;
        }
      }
      else
      {
        v155 = static os_log_type_t.error.getter(v140);
        v144 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)(v155, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage);
        v145 = _swiftEmptyArrayStorage[2];
        if (v145)
          goto LABEL_50;
      }
      v154 = swift_bridgeObjectRelease(v144);
LABEL_60:
      v156 = *(_QWORD *)(v99 + 8);
      v46 = *(_QWORD *)(v99 + 16);
      if (v156 == 0xD00000000000001ELL && (NSString *)v46 == v396
        || (v154 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v99 + 8), *(_QWORD *)(v99 + 16), 0xD00000000000001ELL, v395 | 0x8000000000000000, 0), (v154 & 1) != 0))
      {
        v157 = static os_log_type_t.default.getter(v154);
        v158 = qword_100218DE8;
        v159 = swift_allocObject(v405, 72, 7);
        *(_OWORD *)(v159 + 16) = v404;
        v160 = v406;
        sub_1000AE548(v99, v406, type metadata accessor for BTDeferredRecord);
        v161 = v160;
        v162 = v414;
        v163 = String.init<A>(describing:)(v161, v414);
        v165 = v164;
        *(_QWORD *)(v159 + 56) = &type metadata for String;
        *(_QWORD *)(v159 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v159 + 32) = v163;
        *(_QWORD *)(v159 + 40) = v165;
        os_log(_:dso:log:_:_:)(v157, &_mh_execute_header, v158, "Remove deferred info record not found in cache anymore: %@", 58, 2, v159);
        swift_bridgeObjectRelease(v159);
        v166 = sub_100129690();
        v167 = (uint64_t *)(v99 + *(int *)(v162 + 28));
        v169 = *v167;
        v168 = v167[1];
        swift_bridgeObjectRetain(v168);
        v170 = v386;
        URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
        v171 = v409;
        result = (*(uint64_t (**)(char *, uint64_t, char *))(v409 + 48))(v170, 1, v59);
        if ((_DWORD)result == 1)
          goto LABEL_235;
        v172 = v385;
        (*(void (**)(char *, char *, char *))(v171 + 32))(v385, v170, v59);
        swift_bridgeObjectRetain(v46);
        v136 = v384;
        URL.appendingPathComponent(_:)(v156);
        swift_bridgeObjectRelease(v46);
        v46 = *(_QWORD *)(v171 + 8);
        v173 = ((uint64_t (*)(char *, char *))v46)(v172, v59);
        __chkstk_darwin(v173);
        *(&v366 - 4) = v166;
        *(&v366 - 3) = v169;
        *(&v366 - 2) = v168;
        *(&v366 - 1) = (uint64_t)v136;
        v174 = v411;
        OS_dispatch_queue.sync<A>(execute:)(&v420, sub_1001684A0, &v366 - 6, &type metadata for Bool);
        v411 = v174;
        v59 = (char *)v407;
        swift_release(v166);
        v139 = v168;
LABEL_65:
        swift_bridgeObjectRelease(v139);
        v175 = v136;
LABEL_66:
        ((void (*)(char *, char *))v46)(v175, v59);
        v70 = (uint64_t)v412;
        v99 = v403;
LABEL_67:
        v61 = v398;
        v101 = v408;
        goto LABEL_22;
      }
      v70 = (uint64_t)v412;
LABEL_71:
      v176 = objc_msgSend((id)v410, "isFirstUnlocked");
      if ((_DWORD)v176)
      {
        v177 = sub_100129690();
        if (qword_100210160 != -1)
          swift_once(&qword_100210160, sub_1000C81B8);
        v178 = sub_1000A0A00((uint64_t)v59, (uint64_t)qword_100218C90);
        v46 = v409;
        v179 = (uint64_t)v401;
        (*(void (**)(char *, uint64_t, char *))(v409 + 16))(v401, v178, v59);
        v180 = sub_100128330(v179, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
        swift_release(v177);
        (*(void (**)(uint64_t, char *))(v46 + 8))(v179, v59);
        v181 = v180[2];
        if (v181)
        {
LABEL_75:
          v182 = (_QWORD *)(v99 + *(int *)(v414 + 28));
          v183 = (uint64_t)v180
               + ((*(unsigned __int8 *)(v382 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v382 + 80));
          v184 = *(_QWORD *)(v382 + 72);
          swift_bridgeObjectRetain(v180);
          while (1)
          {
            sub_1000AE548(v183, v70, type metadata accessor for MagicPairingSettingsRecord);
            v185 = (_QWORD *)(v70 + *(int *)(v413 + 24));
            v186 = v185[1];
            v187 = v182[1];
            if (*v185 == *v182 && v186 == v187)
              break;
            v46 = _stringCompareWithSmolCheck(_:_:expecting:)(*v185, v186, *v182, v187, 0);
            sub_1000AE58C(v70, type metadata accessor for MagicPairingSettingsRecord);
            if ((v46 & 1) != 0)
              goto LABEL_91;
            v183 += v184;
            if (!--v181)
            {
              v189 = swift_bridgeObjectRelease_n(v180, 2);
              goto LABEL_85;
            }
          }
          sub_1000AE58C(v70, type metadata accessor for MagicPairingSettingsRecord);
LABEL_91:
          swift_bridgeObjectRelease_n(v180, 2);
          goto LABEL_93;
        }
      }
      else
      {
        v190 = static os_log_type_t.error.getter(v176);
        v180 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)(v190, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
        v181 = _swiftEmptyArrayStorage[2];
        if (v181)
          goto LABEL_75;
      }
      v189 = swift_bridgeObjectRelease(v180);
LABEL_85:
      v191 = *(_QWORD *)(v99 + 8);
      v46 = *(_QWORD *)(v99 + 16);
      if (v191 == 0x746553636967614DLL && v46 == 0xED000073676E6974
        || (v189 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v99 + 8), *(_QWORD *)(v99 + 16), 0x746553636967614DLL, 0xED000073676E6974, 0), (v189 & 1) != 0))
      {
        v192 = static os_log_type_t.default.getter(v189);
        v193 = qword_100218DE8;
        v194 = swift_allocObject(v405, 72, 7);
        *(_OWORD *)(v194 + 16) = v404;
        v195 = v406;
        sub_1000AE548(v99, v406, type metadata accessor for BTDeferredRecord);
        v196 = v195;
        v197 = v414;
        v198 = String.init<A>(describing:)(v196, v414);
        v200 = v199;
        *(_QWORD *)(v194 + 56) = &type metadata for String;
        *(_QWORD *)(v194 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v194 + 32) = v198;
        *(_QWORD *)(v194 + 40) = v200;
        os_log(_:dso:log:_:_:)(v192, &_mh_execute_header, v193, "Remove deferred magic record not found in cache anymore: %@", 59, 2, v194);
        swift_bridgeObjectRelease(v194);
        v201 = sub_100129690();
        v202 = (uint64_t *)(v99 + *(int *)(v197 + 28));
        v203 = *v202;
        v204 = v202[1];
        swift_bridgeObjectRetain(v204);
        v205 = v380;
        URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
        v206 = v409;
        v207 = v407;
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v409 + 48))(v205, 1, v407);
        if ((_DWORD)result == 1)
          goto LABEL_236;
        v208 = v379;
        (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v379, v205, v207);
        swift_bridgeObjectRetain(v46);
        v209 = v378;
        URL.appendingPathComponent(_:)(v191);
        swift_bridgeObjectRelease(v46);
        v46 = *(_QWORD *)(v206 + 8);
        v210 = ((uint64_t (*)(char *, uint64_t))v46)(v208, v207);
        __chkstk_darwin(v210);
        *(&v366 - 4) = v201;
        *(&v366 - 3) = v203;
        *(&v366 - 2) = v204;
        *(&v366 - 1) = (uint64_t)v209;
        v211 = v411;
        OS_dispatch_queue.sync<A>(execute:)(&v420, sub_1001684A0, &v366 - 6, &type metadata for Bool);
        v411 = v211;
        v59 = (char *)v407;
        swift_release(v201);
        swift_bridgeObjectRelease(v204);
        v175 = v209;
        goto LABEL_66;
      }
      v70 = (uint64_t)v412;
      v59 = (char *)v407;
LABEL_93:
      v421 = &type metadata for AudioAccessoryFeatures;
      v212 = sub_1000A42C4();
      v422 = v212;
      v213 = isFeatureEnabled(_:)(&v420);
      sub_1000A2140(&v420);
      sub_1000AE548(v99, v390, type metadata accessor for BTDeferredRecord);
      if ((v213 & 1) == 0)
        goto LABEL_122;
      v421 = &type metadata for AudioAccessoryFeatures;
      v422 = v212;
      v214 = isFeatureEnabled(_:)(&v420);
      sub_1000A2140(&v420);
      v61 = (uint64_t)_swiftEmptyArrayStorage;
      if ((v214 & 1) != 0)
      {
        v215 = objc_msgSend((id)v410, "isFirstUnlocked");
        if ((_DWORD)v215)
        {
          v216 = sub_100129690();
          if (qword_1002101B0 != -1)
            swift_once(&qword_1002101B0, sub_100106014);
          v217 = sub_1000A0A00((uint64_t)v59, (uint64_t)qword_100218D68);
          v46 = v409;
          v218 = (uint64_t)v401;
          (*(void (**)(char *, uint64_t, char *))(v409 + 16))(v401, v217, v59);
          v61 = sub_100127B2C(v218, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
          swift_release(v216);
          (*(void (**)(uint64_t, char *))(v46 + 8))(v218, v59);
        }
        else
        {
          v219 = static os_log_type_t.error.getter(v215);
          os_log(_:dso:log:_:_:)(v219, &_mh_execute_header, qword_100218DE8, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
        }
      }
      if ((unint64_t)v61 >> 62)
      {
        if (v61 < 0)
          v296 = v61;
        else
          v296 = v61 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v61);
        v59 = (char *)_CocoaArrayWrapper.endIndex.getter(v296);
        if (v59)
        {
LABEL_102:
          v220 = (unint64_t *)(v390 + *(int *)(v414 + 28));
          v62 = *v220;
          v221 = v220[1];
          v222 = 4;
          while (1)
          {
            if ((v61 & 0xC000000000000001) != 0)
              v223 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v222 - 4, v61);
            else
              v223 = (char *)*(id *)(v61 + 8 * v222);
            v224 = v223;
            v46 = v222 - 3;
            if (__OFADD__(v222 - 4, 1))
              goto LABEL_211;
            v225 = *(_QWORD *)&v223[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
            v226 = *(_QWORD *)&v224[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
            if (v225 == v62 && v226 == v221)
            {
              swift_bridgeObjectRelease_n(v61, 2);

              goto LABEL_121;
            }
            v228 = _stringCompareWithSmolCheck(_:_:expecting:)(v225, v226, v62, v221, 0);

            if ((v228 & 1) != 0)
              break;
            ++v222;
            if ((char *)v46 == v59)
              goto LABEL_113;
          }
          swift_bridgeObjectRelease_n(v61, 2);
LABEL_121:
          v59 = (char *)v407;
          v70 = (uint64_t)v412;
          v99 = v403;
LABEL_122:
          sub_1000AE58C(v390, type metadata accessor for BTDeferredRecord);
          v255 = v383;
          sub_1000AE548(v99, v383, type metadata accessor for BTDeferredRecord);
          sub_1000AE58C(v255, type metadata accessor for BTDeferredRecord);
          goto LABEL_123;
        }
      }
      else
      {
        v59 = *(char **)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v61);
        if (v59)
          goto LABEL_102;
      }
LABEL_113:
      swift_bridgeObjectRelease_n(v61, 2);
      sub_1000AE58C(v390, type metadata accessor for BTDeferredRecord);
      v99 = v403;
      v229 = v383;
      sub_1000AE548(v403, v383, type metadata accessor for BTDeferredRecord);
      v230 = *(_QWORD *)(v229 + 8);
      v231 = *(_QWORD *)(v229 + 16);
      if (v230 == 0x6563697665444141 && v231 == 0xEE0064726F636552)
      {
        v232 = sub_1000AE58C(v383, type metadata accessor for BTDeferredRecord);
        v59 = (char *)v407;
LABEL_117:
        v234 = static os_log_type_t.default.getter(v232);
        v235 = qword_100218DE8;
        v236 = swift_allocObject(v405, 72, 7);
        *(_OWORD *)(v236 + 16) = v404;
        v237 = v406;
        sub_1000AE548(v99, v406, type metadata accessor for BTDeferredRecord);
        v238 = v237;
        v239 = v414;
        v240 = String.init<A>(describing:)(v238, v414);
        v242 = v241;
        *(_QWORD *)(v236 + 56) = &type metadata for String;
        *(_QWORD *)(v236 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v236 + 32) = v240;
        *(_QWORD *)(v236 + 40) = v242;
        os_log(_:dso:log:_:_:)(v234, &_mh_execute_header, v235, "Remove deferred AADeviceRecord not found in cache anymore: %@", 61, 2, v236);
        swift_bridgeObjectRelease(v236);
        v46 = sub_100129690();
        v243 = (uint64_t *)(v99 + *(int *)(v239 + 28));
        v244 = *v243;
        v245 = v243[1];
        swift_bridgeObjectRetain(v245);
        v246 = v376;
        URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
        v247 = v409;
        result = (*(uint64_t (**)(char *, uint64_t, char *))(v409 + 48))(v246, 1, v59);
        if ((_DWORD)result == 1)
          goto LABEL_237;
        v248 = v375;
        (*(void (**)(char *, char *, char *))(v247 + 32))(v375, v246, v59);
        v249 = *(_QWORD *)(v99 + 8);
        v250 = *(_QWORD *)(v99 + 16);
        swift_bridgeObjectRetain(v250);
        v251 = v374;
        URL.appendingPathComponent(_:)(v249);
        swift_bridgeObjectRelease(v250);
        v252 = *(uint64_t (**)(char *, char *))(v247 + 8);
        v253 = v252(v248, v59);
        __chkstk_darwin(v253);
        v254 = &v366 - 6;
        *(&v366 - 4) = v46;
        *(&v366 - 3) = v244;
        *(&v366 - 2) = v245;
        *(&v366 - 1) = (uint64_t)v251;
        goto LABEL_150;
      }
      v233 = _stringCompareWithSmolCheck(_:_:expecting:)(v230, v231, 0x6563697665444141, 0xEE0064726F636552, 0);
      v232 = sub_1000AE58C(v383, type metadata accessor for BTDeferredRecord);
      v59 = (char *)v407;
      if ((v233 & 1) != 0)
        goto LABEL_117;
      v70 = (uint64_t)v412;
LABEL_123:
      v421 = &type metadata for AudioAccessoryFeatures;
      v422 = v212;
      v256 = isFeatureEnabled(_:)(&v420);
      sub_1000A2140(&v420);
      sub_1000AE548(v99, v387, type metadata accessor for BTDeferredRecord);
      if ((v256 & 1) != 0)
      {
        v421 = &type metadata for AudioAccessoryFeatures;
        v422 = v212;
        v257 = isFeatureEnabled(_:)(&v420);
        sub_1000A2140(&v420);
        v61 = (uint64_t)_swiftEmptyArrayStorage;
        if ((v257 & 1) != 0)
        {
          v258 = objc_msgSend((id)v410, "isFirstUnlocked");
          if ((_DWORD)v258)
          {
            v259 = sub_100129690();
            if (qword_100210130 != -1)
              swift_once(&qword_100210130, sub_1000A5BC0);
            v260 = sub_1000A0A00((uint64_t)v59, (uint64_t)qword_100218C00);
            v261 = v409;
            v262 = (uint64_t)v401;
            (*(void (**)(char *, uint64_t, char *))(v409 + 16))(v401, v260, v59);
            v61 = sub_100127B2C(v262, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
            swift_release(v259);
            (*(void (**)(uint64_t, char *))(v261 + 8))(v262, v59);
          }
          else
          {
            v263 = static os_log_type_t.error.getter(v258);
            os_log(_:dso:log:_:_:)(v263, &_mh_execute_header, qword_100218DE8, "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
          }
        }
        if ((unint64_t)v61 >> 62)
        {
          if (v61 < 0)
            v297 = v61;
          else
            v297 = v61 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v61);
          v46 = _CocoaArrayWrapper.endIndex.getter(v297);
          if (v46)
          {
LABEL_132:
            v264 = (unint64_t *)(v387 + *(int *)(v414 + 28));
            v62 = *v264;
            v265 = v264[1];
            v266 = 4;
            while (1)
            {
              if ((v61 & 0xC000000000000001) != 0)
                v267 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v266 - 4, v61);
              else
                v267 = (char *)*(id *)(v61 + 8 * v266);
              v268 = v267;
              v59 = (char *)(v266 - 3);
              if (__OFADD__(v266 - 4, 1))
                goto LABEL_212;
              v269 = *(_QWORD *)&v267[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
              v270 = *(_QWORD *)&v268[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
              if (v269 == v62 && v270 == v265)
                break;
              v272 = _stringCompareWithSmolCheck(_:_:expecting:)(v269, v270, v62, v265, 0);

              if ((v272 & 1) != 0)
              {
                swift_bridgeObjectRelease_n(v61, 2);
                goto LABEL_20;
              }
              ++v266;
              v116 = v59 == (char *)v46;
              v59 = (char *)v407;
              if (v116)
                goto LABEL_144;
            }
            swift_bridgeObjectRelease_n(v61, 2);

LABEL_20:
            v59 = (char *)v407;
            v70 = (uint64_t)v412;
            v99 = v403;
            goto LABEL_21;
          }
        }
        else
        {
          v46 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v61);
          if (v46)
            goto LABEL_132;
        }
LABEL_144:
        swift_bridgeObjectRelease_n(v61, 2);
        sub_1000AE58C(v387, type metadata accessor for BTDeferredRecord);
        v99 = v403;
        v273 = v381;
        sub_1000AE548(v403, v381, type metadata accessor for BTDeferredRecord);
        v274 = *(_QWORD *)(v273 + 8);
        v275 = *(void **)(v273 + 16);
        if (v274 == 0xD000000000000011 && v275 == v394)
        {
          v276 = sub_1000AE58C(v381, type metadata accessor for BTDeferredRecord);
        }
        else
        {
          v277 = _stringCompareWithSmolCheck(_:_:expecting:)(v274, v275, 0xD000000000000011, (unint64_t)v388 | 0x8000000000000000, 0);
          v276 = sub_1000AE58C(v381, type metadata accessor for BTDeferredRecord);
          if ((v277 & 1) == 0)
          {
            v70 = (uint64_t)v412;
            v61 = v398;
            v101 = v408;
            goto LABEL_22;
          }
        }
        v278 = static os_log_type_t.default.getter(v276);
        v279 = qword_100218DE8;
        v280 = swift_allocObject(v405, 72, 7);
        *(_OWORD *)(v280 + 16) = v404;
        v281 = v406;
        sub_1000AE548(v99, v406, type metadata accessor for BTDeferredRecord);
        v282 = v281;
        v283 = v414;
        v284 = String.init<A>(describing:)(v282, v414);
        v286 = v285;
        *(_QWORD *)(v280 + 56) = &type metadata for String;
        *(_QWORD *)(v280 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v280 + 32) = v284;
        *(_QWORD *)(v280 + 40) = v286;
        os_log(_:dso:log:_:_:)(v278, &_mh_execute_header, v279, "Remove deferred AAProxCardsRecord not found in cache anymore: %@", 64, 2, v280);
        swift_bridgeObjectRelease(v280);
        v46 = sub_100129690();
        v287 = (uint64_t *)(v99 + *(int *)(v283 + 28));
        v288 = *v287;
        v245 = v287[1];
        swift_bridgeObjectRetain(v245);
        v289 = v373;
        URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
        v290 = v409;
        result = (*(uint64_t (**)(char *, uint64_t, char *))(v409 + 48))(v289, 1, v59);
        if ((_DWORD)result == 1)
          goto LABEL_238;
        v291 = v372;
        (*(void (**)(char *, char *, char *))(v290 + 32))(v372, v289, v59);
        v292 = *(_QWORD *)(v99 + 8);
        v293 = *(_QWORD *)(v99 + 16);
        swift_bridgeObjectRetain(v293);
        v251 = v371;
        URL.appendingPathComponent(_:)(v292);
        swift_bridgeObjectRelease(v293);
        v252 = *(uint64_t (**)(char *, char *))(v290 + 8);
        v294 = v252(v291, v59);
        __chkstk_darwin(v294);
        v254 = &v366 - 6;
        *(&v366 - 4) = v46;
        *(&v366 - 3) = v288;
        *(&v366 - 2) = v245;
        *(&v366 - 1) = (uint64_t)v251;
LABEL_150:
        v295 = v411;
        OS_dispatch_queue.sync<A>(execute:)(&v420, sub_1001684A0, v254, &type metadata for Bool);
        v411 = v295;
        v59 = (char *)v407;
        swift_release(v46);
        swift_bridgeObjectRelease(v245);
        v252(v251, v59);
        v70 = (uint64_t)v412;
        goto LABEL_67;
      }
LABEL_21:
      sub_1000AE58C(v387, type metadata accessor for BTDeferredRecord);
      v100 = v381;
      sub_1000AE548(v99, v381, type metadata accessor for BTDeferredRecord);
      sub_1000AE58C(v100, type metadata accessor for BTDeferredRecord);
      v101 = v408;
      v61 = v398;
LABEL_22:
      v62 = v101 + 1;
      sub_1000AE58C(v99, type metadata accessor for BTDeferredRecord);
      if (v62 == v400)
      {
        swift_bridgeObjectRelease(v61);
        goto LABEL_165;
      }
    }
  }
  swift_bridgeObjectRelease(v98);
  v411 = 0;
LABEL_165:
  v298 = (void *)objc_opt_self(BTSystemConfiguration);
  v299 = objc_msgSend(v298, "isFirstUnlocked");
  v300 = v415;
  if (!(_DWORD)v299)
  {
    v310 = static os_log_type_t.error.getter(v299);
    v305 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v310, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
    v306 = _swiftEmptyArrayStorage[2];
    if (v306)
      goto LABEL_169;
    goto LABEL_173;
  }
  v301 = sub_100129690();
  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v302 = sub_1000A0A00((uint64_t)v59, (uint64_t)qword_100218BE0);
  v303 = v409;
  v304 = (uint64_t)v401;
  (*(void (**)(char *, uint64_t, char *))(v409 + 16))(v401, v302, v59);
  v305 = sub_100128330(v304, &qword_100210CF8, type metadata accessor for DeviceRecord, (uint64_t)sub_100154AD0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693D4);
  swift_release(v301);
  (*(void (**)(uint64_t, char *))(v303 + 8))(v304, v59);
  v306 = v305[2];
  if (!v306)
  {
LABEL_173:
    swift_bridgeObjectRelease(v305);
    goto LABEL_174;
  }
LABEL_169:
  v307 = (uint64_t)v305 + ((*(unsigned __int8 *)(v397 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v397 + 80));
  v308 = *(_QWORD *)(v397 + 72);
  swift_bridgeObjectRetain(v305);
  v309 = v411;
  do
  {
    sub_10012FED8(v307, v300);
    v307 += v308;
    --v306;
  }
  while (v306);
  v411 = v309;
  swift_bridgeObjectRelease_n(v305, 2);
  v59 = (char *)v407;
LABEL_174:
  v311 = objc_msgSend(v298, "isFirstUnlocked", v366);
  if ((v311 & 1) == 0)
  {
    v321 = static os_log_type_t.error.getter(v311);
    v316 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v321, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage);
    v317 = _swiftEmptyArrayStorage[2];
    if (v317)
      goto LABEL_178;
    goto LABEL_182;
  }
  v312 = sub_100129690();
  if (qword_100210180 != -1)
    swift_once(&qword_100210180, sub_1000DA4F0);
  v313 = sub_1000A0A00((uint64_t)v59, (uint64_t)qword_100218D28);
  v314 = v409;
  v315 = (uint64_t)v401;
  (*(void (**)(char *, uint64_t, char *))(v409 + 16))(v401, v313, v59);
  v316 = sub_100128330(v315, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)sub_100154B40, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693E8);
  swift_release(v312);
  (*(void (**)(uint64_t, char *))(v314 + 8))(v315, v59);
  v317 = v316[2];
  if (!v317)
  {
LABEL_182:
    swift_bridgeObjectRelease(v316);
    goto LABEL_183;
  }
LABEL_178:
  v318 = (uint64_t)v316 + ((*(unsigned __int8 *)(v389 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v389 + 80));
  v319 = *(_QWORD *)(v389 + 72);
  swift_bridgeObjectRetain(v316);
  v320 = v411;
  do
  {
    sub_100135B24(v318, v300);
    v318 += v319;
    --v317;
  }
  while (v317);
  v411 = v320;
  swift_bridgeObjectRelease_n(v316, 2);
  v59 = (char *)v407;
LABEL_183:
  v322 = objc_msgSend(v298, "isFirstUnlocked");
  if ((v322 & 1) != 0)
  {
    v323 = sub_100129690();
    if (qword_100210160 != -1)
      swift_once(&qword_100210160, sub_1000C81B8);
    v324 = sub_1000A0A00((uint64_t)v59, (uint64_t)qword_100218C90);
    v325 = v409;
    v326 = (uint64_t)v401;
    (*(void (**)(char *, uint64_t, char *))(v409 + 16))(v401, v324, v59);
    v327 = sub_100128330(v326, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
    swift_release(v323);
    (*(void (**)(uint64_t, char *))(v325 + 8))(v326, v59);
  }
  else
  {
    v328 = static os_log_type_t.error.getter(v322);
    v327 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v328, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
  }
  v329 = v327[2];
  if (v329)
  {
    v330 = (uint64_t)v327
         + ((*(unsigned __int8 *)(v382 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v382 + 80));
    v331 = *(_QWORD *)(v382 + 72);
    swift_bridgeObjectRetain(v327);
    do
    {
      sub_10013602C(v330, v300);
      v330 += v331;
      --v329;
    }
    while (v329);
    swift_bridgeObjectRelease_n(v327, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v327);
  }
  v332 = v377;
  sub_10012B62C(v377);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v367 + 48))(v332, 1, v368) == 1)
  {
    sub_1000A1000(v332, &qword_100212230);
  }
  else
  {
    v333 = v369;
    sub_1000C6CD0(v332, (uint64_t)v369, type metadata accessor for SoundProfileRecord);
    v334 = objc_autoreleasePoolPush();
    v335 = *v333;
    v336 = v333[1];
    sub_1000A0E74(*v333, v336);
    sub_100109DEC(v335, v336);
    v338 = v337;
    sub_1000A103C(v335, v336);
    v339 = (uint64_t)v333;
    v340 = v370;
    sub_1000AE548(v339, v370, type metadata accessor for SoundProfileRecord);
    if (!v338)
      v338 = sub_1000A9A14().super.isa;
    sub_1000AE58C(v340, type metadata accessor for SoundProfileRecord);
    v420 = v338;
    v341 = (uint64_t)v369;
    sub_1000ADB20((id *)&v420);
    objc_autoreleasePoolPop(v334);
    v342 = -[objc_class recordChangeTag](v338, "recordChangeTag");
    if (v342)
    {

      sub_1000AE58C(v341, type metadata accessor for SoundProfileRecord);
    }
    else
    {
      v343 = static os_log_type_t.default.getter(0);
      v344 = qword_100218DE8;
      v345 = swift_allocObject(v405, 72, 7);
      *(_OWORD *)(v345 + 16) = v404;
      v346 = sub_1000ABB64();
      v348 = v347;
      *(_QWORD *)(v345 + 56) = &type metadata for String;
      *(_QWORD *)(v345 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v345 + 32) = v346;
      *(_QWORD *)(v345 + 40) = v348;
      os_log(_:dso:log:_:_:)(v343, &_mh_execute_header, v344, "Retry cloud upload for deferred sound profile record: %@", 56, 2, v345);
      swift_bridgeObjectRelease(v345);
      v349 = sub_10012A6A0();
      v350 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v350 + 16, v300);
      swift_retain(v350);
      sub_1000F8080(v338, 0, (uint64_t)sub_100165D60, v350);

      swift_unknownObjectRelease(v349);
      swift_release(v350);
      sub_1000AE58C(v341, type metadata accessor for SoundProfileRecord);
      swift_release(v350);
    }
  }
  v421 = &type metadata for AudioAccessoryFeatures;
  v422 = sub_1000A42C4();
  v351 = isFeatureEnabled(_:)(&v420);
  sub_1000A2140(&v420);
  if ((v351 & 1) == 0)
    return swift_release(v300);
  v352 = (uint64_t)sub_10012B880();
  v353 = v352;
  if ((unint64_t)v352 >> 62)
  {
    if (v352 < 0)
      v358 = v352;
    else
      v358 = v352 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v352);
    result = _CocoaArrayWrapper.endIndex.getter(v358);
    v354 = result;
    if (!result)
      goto LABEL_218;
LABEL_203:
    if (v354 >= 1)
    {
      v355 = 0;
      do
      {
        if ((v353 & 0xC000000000000001) != 0)
          v356 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v355, v353);
        else
          v356 = *(id *)(v353 + 8 * v355 + 32);
        v357 = v356;
        ++v355;
        v420 = (Class)v356;
        sub_1001377F8((void **)&v420, v300);

      }
      while (v354 != v355);
      goto LABEL_218;
    }
    __break(1u);
LABEL_233:
    __break(1u);
LABEL_234:
    __break(1u);
LABEL_235:
    __break(1u);
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
    return result;
  }
  v354 = *(_QWORD *)((v352 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v352);
  if (v354)
    goto LABEL_203;
LABEL_218:
  swift_bridgeObjectRelease_n(v353, 2);
  v359 = (uint64_t)sub_10012BA30();
  v360 = v359;
  if ((unint64_t)v359 >> 62)
  {
    if (v359 < 0)
      v365 = v359;
    else
      v365 = v359 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v359);
    result = _CocoaArrayWrapper.endIndex.getter(v365);
    v361 = result;
    if (!result)
      goto LABEL_230;
LABEL_220:
    if (v361 >= 1)
    {
      v362 = 0;
      do
      {
        if ((v360 & 0xC000000000000001) != 0)
          v363 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v362, v360);
        else
          v363 = *(id *)(v360 + 8 * v362 + 32);
        v364 = v363;
        ++v362;
        v420 = (Class)v363;
        sub_100137CE0((void **)&v420, v300);

      }
      while (v361 != v362);
      goto LABEL_230;
    }
    goto LABEL_233;
  }
  v361 = *(_QWORD *)((v359 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v359);
  if (v361)
    goto LABEL_220;
LABEL_230:
  swift_release(v300);
  return swift_bridgeObjectRelease_n(v360, 2);
}

uint64_t sub_10012FAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v4 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - v15;
  if (a1)
  {
    v17 = swift_errorRetain(a1);
    v18 = static os_log_type_t.error.getter(v17);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v19 = qword_100218DE8;
    v20 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v21 = swift_allocObject(v20, 112, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1001858F0;
    sub_1000AE548(a2, (uint64_t)v6, type metadata accessor for BTDeferredRecord);
    v22 = String.init<A>(describing:)(v6, v4);
    v24 = v23;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    v25 = sub_1000A0DF4();
    *(_QWORD *)(v21 + 64) = v25;
    *(_QWORD *)(v21 + 32) = v22;
    *(_QWORD *)(v21 + 40) = v24;
    v50[0] = a1;
    swift_errorRetain(a1);
    v26 = sub_1000A0980(&qword_100210710);
    v27 = String.init<A>(describing:)(v50, v26);
    *(_QWORD *)(v21 + 96) = &type metadata for String;
    *(_QWORD *)(v21 + 104) = v25;
    *(_QWORD *)(v21 + 72) = v27;
    *(_QWORD *)(v21 + 80) = v28;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Error removing deferred deleted record: %@ - error? - %@", 56, 2, v21);
    swift_bridgeObjectRelease(v21);
    return swift_errorRelease(a1);
  }
  else
  {
    v30 = sub_100129690();
    v48 = UUID.uuidString.getter(v30);
    v49 = v31;
    URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      URL.appendingPathComponent(_:)(*(_QWORD *)(a2 + 8));
      v32 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
      v33 = v32(v13, v10);
      __chkstk_darwin(v33);
      v34 = v48;
      *(&v48 - 4) = v30;
      *(&v48 - 3) = v34;
      v48 = a2;
      v35 = v49;
      *(&v48 - 2) = v49;
      *(&v48 - 1) = (uint64_t)v16;
      OS_dispatch_queue.sync<A>(execute:)(v50, sub_1001684A0, &v48 - 6, &type metadata for Bool);
      swift_release(v30);
      swift_bridgeObjectRelease(v35);
      v36 = v32(v16, v10);
      v37 = static os_log_type_t.default.getter(v36);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v38 = qword_100218DE8;
      v39 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v40 = swift_allocObject(v39, 112, 7);
      *(_OWORD *)(v40 + 16) = xmmword_1001858F0;
      sub_1000AE548(v48, (uint64_t)v6, type metadata accessor for BTDeferredRecord);
      v41 = String.init<A>(describing:)(v6, v4);
      v43 = v42;
      *(_QWORD *)(v40 + 56) = &type metadata for String;
      v44 = sub_1000A0DF4();
      *(_QWORD *)(v40 + 64) = v44;
      *(_QWORD *)(v40 + 32) = v41;
      *(_QWORD *)(v40 + 40) = v43;
      v50[0] = 0;
      v45 = sub_1000A0980(&qword_100212350);
      v46 = String.init<A>(describing:)(v50, v45);
      *(_QWORD *)(v40 + 96) = &type metadata for String;
      *(_QWORD *)(v40 + 104) = v44;
      *(_QWORD *)(v40 + 72) = v46;
      *(_QWORD *)(v40 + 80) = v47;
      os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Running remove deferred deleted record: %@ - error? - %@", 56, 2, v40);
      return swift_bridgeObjectRelease(v40);
    }
  }
  return result;
}

void sub_10012FED8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  id v55;

  v54 = a2;
  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v53 = (char *)&v50 - v7;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v52 = (char *)&v50 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v50 - v15;
  v17 = type metadata accessor for DeviceRecord(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = (id)sub_1000AB8A8();
  v20 = objc_msgSend(v55, "recordChangeTag");
  if (v20)
  {
    v21 = v20;
    v51 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    swift_bridgeObjectRelease(v23);
    sub_1000AE548(a1, (uint64_t)v19, type metadata accessor for DeviceRecord);
    if (v23)
    {
      v50 = a1;
      v24 = v16;
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v16, &v19[*(int *)(v17 + 48)], v8);
      v25 = objc_msgSend(v55, "modificationDate");
      if (v25)
      {
        v26 = v25;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

        v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v28 = (uint64_t)v53;
        v27(v53, v11, v8);
        v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v29(v28, 0, 1, v8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v28, 1, v8) != 1)
        {
          v30 = v52;
          v27(v52, (char *)v28, v8);
          goto LABEL_15;
        }
      }
      else
      {
        v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v28 = (uint64_t)v53;
        v29((uint64_t)v53, 1, 1, v8);
      }
      v33 = objc_msgSend(v55, "creationDate");
      if (v33)
      {
        v34 = v33;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

        v35 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v36 = (uint64_t)v51;
        v35(v51, v11, v8);
        v29(v36, 0, 1, v8);
        v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v36, 1, v8);
        if ((_DWORD)v37 != 1)
        {
          v30 = v52;
          v35(v52, (char *)v36, v8);
LABEL_14:
          sub_1000A1000(v28, (uint64_t *)&unk_1002103D0);
LABEL_15:
          v38 = static Date.> infix(_:_:)(v24, v30);
          v39 = *(void (**)(char *, uint64_t))(v9 + 8);
          v39(v30, v8);
          v39(v24, v8);
          v31 = sub_1000AE58C((uint64_t)v19, type metadata accessor for DeviceRecord);
          v32 = v55;
          if ((v38 & 1) == 0)
            goto LABEL_19;
          goto LABEL_16;
        }
      }
      else
      {
        v36 = (uint64_t)v51;
        v37 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v51, 1, 1, v8);
      }
      v30 = v52;
      static Date.now.getter(v37);
      sub_1000A1000(v36, (uint64_t *)&unk_1002103D0);
      goto LABEL_14;
    }
  }
  else
  {
    sub_1000AE548(a1, (uint64_t)v19, type metadata accessor for DeviceRecord);
  }
  v31 = sub_1000AE58C((uint64_t)v19, type metadata accessor for DeviceRecord);
  v32 = v55;
LABEL_16:
  v40 = static os_log_type_t.default.getter(v31);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v41 = qword_100218DE8;
  v42 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v43 = swift_allocObject(v42, 72, 7);
  *(_OWORD *)(v43 + 16) = xmmword_100184870;
  v44 = sub_10009C9A8();
  v46 = v45;
  *(_QWORD *)(v43 + 56) = &type metadata for String;
  *(_QWORD *)(v43 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v43 + 32) = v44;
  *(_QWORD *)(v43 + 40) = v46;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Retry cloud upload for deferred record: %@", 42, 2, v43);
  swift_bridgeObjectRelease(v43);
  v47 = v54;
  v48 = sub_10012A6A0();
  v49 = swift_allocObject(&unk_1001EB580, 24, 7);
  swift_weakInit(v49 + 16, v47);
  swift_retain(v49);
  sub_1000F8080(v32, 0, (uint64_t)sub_100165FEC, v49);
  swift_unknownObjectRelease(v48);
  swift_release_n(v49, 2);
LABEL_19:

}

uint64_t sub_1001303C0(id a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  __n128 v104;
  uint64_t v105;
  _QWORD *v106;
  void *v107;
  void *v108;
  id v109;
  uint64_t (*v110)(_QWORD *, uint64_t);
  uint64_t v111;
  const char *v112;
  id v113;
  NSString v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  void *v119;
  id v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  id v163;
  uint64_t v164;
  id v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  id v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  void *v215;
  id v216;
  id v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  void *v224;
  id v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  id v240;
  id v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  void (*v247)(char *, uint64_t, uint64_t);
  uint64_t v248;
  uint64_t v249;
  char v250;
  id v251;
  void *v252;
  void (*v253)(uint64_t, char *, uint64_t);
  char *v254;
  _QWORD *v255;
  uint64_t (*v256)(uint64_t, uint64_t, uint64_t);
  int v257;
  uint64_t v258;
  id v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  id v269;
  id v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  id v277;
  void *v278;
  uint64_t v279;
  id v280;
  void *v281;
  uint64_t v282;
  void (*v283)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t (*v284)(uint64_t, uint64_t, uint64_t);
  int v285;
  uint64_t v286;
  void (*v287)(char *, uint64_t, uint64_t);
  char *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t (*v291)(char *, uint64_t);
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t (*v313)(uint64_t);
  uint64_t v314;
  uint64_t v315;
  void (*v316)(char *, uint64_t, uint64_t);
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  void (*v323)(char *, uint64_t, uint64_t);
  unsigned int (*v324)(uint64_t, uint64_t, uint64_t);
  double v325;
  char v326;
  uint64_t v327;
  uint64_t v328;
  int *v329;
  char v330;
  void (*v331)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v332;
  uint64_t v333;
  id v334;
  uint64_t *v335;
  char *v336;
  uint64_t (*v337)(uint64_t);
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t *v343;
  uint64_t v344;
  id v345;
  id v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  void *v360;
  id v361;
  uint64_t v362;
  ValueMetadata *v363;
  unint64_t v364;
  void (*v365)(char *, uint64_t, uint64_t);
  uint64_t v366;
  double v367;
  void (*v368)(char *, uint64_t);
  id v369;
  NSString v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  uint64_t v375;
  id v376;
  unint64_t v377;
  uint64_t v378;
  Class v379;
  id v380;
  void *v381;
  char *v382;
  void (*v383)(char *, char *, uint64_t);
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  void *v387;
  id v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  id v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  id v405;
  uint64_t v406;
  char *v407;
  void *v408;
  uint64_t *v409;
  char v410;
  id v411;
  uint64_t v412;
  char v413;
  id v414;
  _QWORD *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t *v418;
  uint64_t *v419;
  uint64_t v420;
  id v421;
  id v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  unint64_t v432;
  unint64_t v433;
  char **v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  char *v438;
  char *v439;
  char v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char *v457;
  uint64_t v458;
  id v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  char *v464;
  uint64_t v465;
  uint64_t v466;
  id v467;
  uint64_t (*v468)(uint64_t);
  id v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  char v474;
  void (*v475)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v476;
  id v477;
  uint64_t v478;
  uint64_t v479;
  char v480;
  void (*v481)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v482;
  id v483;
  char v484;
  id v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t *v491;
  uint64_t v492;
  id v493;
  id v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  unint64_t v505;
  uint64_t v506;
  char *v507;
  id v508;
  char v509;
  id v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  id v516;
  id v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  id v524;
  void *v525;
  void (*v526)(uint64_t, uint64_t, uint64_t);
  void (*v527)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v528)(uint64_t, uint64_t, uint64_t);
  _QWORD *v529;
  char *v530;
  id v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v549;
  void (*v550)(uint64_t, uint64_t);
  uint64_t v551;
  uint64_t v552;
  char v553;
  void (*v554)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v555;
  id v556;
  char v557;
  uint64_t *v558;
  char *v559;
  char *v560;
  char *v561;
  id v562;
  NSString v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t *v568;
  uint64_t v569;
  char *v570;
  id v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int *v580;
  uint64_t v581;
  uint64_t v582;
  char *v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  char *v589;
  char *v590;
  char v591;
  uint64_t v592;
  id v593;
  void *v594;
  uint64_t v595;
  unint64_t v596;
  unint64_t v597;
  uint64_t v598;
  BOOL v599;
  id v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  char *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  char *v612;
  id v613;
  void *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  _QWORD *v618;
  uint64_t v619;
  char v620;
  id v621;
  uint64_t *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t *v628;
  uint64_t v629;
  id v630;
  id v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  id v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _QWORD *v644;
  _QWORD *v645;
  uint64_t v646;
  id v647;
  void *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  char *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  char *v665;
  char *v666;
  uint64_t v667;
  char *v668;
  uint64_t v669;
  uint64_t v670;
  id v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  void *v675;
  id v676;
  char *v677;
  uint64_t v678;
  uint64_t v679;
  char *v680;
  ValueMetadata *v681;
  unint64_t v682;
  uint64_t v683;
  double v684;
  char *v685;
  uint64_t v686;
  id v687;
  NSString v688;
  uint64_t v689;
  uint64_t v690;
  _QWORD *v691;
  uint64_t v692;
  uint64_t v693;
  id v694;
  unint64_t v695;
  Class isa;
  char v697;
  char v698;
  objc_class *v699;
  char *v700;
  id v701;
  id v702;
  _QWORD *v703;
  void *v704;
  char v705;
  char v706;
  uint64_t v707;
  uint64_t v708;
  char *v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t *v713;
  uint64_t *v714;
  uint64_t v715;
  uint64_t v716;
  char *v717;
  id v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  id v727;
  NSString v728;
  id v729;
  id v730;
  unint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t *v736;
  uint64_t *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  id v741;
  id v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  char *v746;
  id v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  char v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  _QWORD *v758;
  _QWORD *v759;
  uint64_t v760;
  uint64_t v761;
  id v762;
  void *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  char v767;
  id v768;
  id v769;
  void *v770;
  char v771;
  uint64_t v772;
  char v773;
  objc_class *v774;
  id v775;
  id v776;
  id v777;
  uint64_t v778;
  uint64_t *v779;
  uint64_t *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  char *v792;
  uint64_t v793;
  char *v794;
  uint64_t v795;
  uint64_t v796;
  char v797;
  id v798;
  id v799;
  void *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  id v806;
  char *v807;
  NSString v808;
  id v809;
  id v810;
  void *v811;
  uint64_t v812;
  uint64_t *v813;
  uint64_t *v814;
  uint64_t v815;
  uint64_t v816;
  id v817;
  id v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  char *v822;
  id v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  char v829;
  uint64_t v830;
  char v831;
  id v832;
  id v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  _QWORD *v837;
  _QWORD *v838;
  uint64_t v839;
  uint64_t v840;
  id v841;
  id v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  void *v848;
  char v849;
  uint64_t v850;
  char v851;
  id v852;
  id v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  _QWORD *v857;
  _QWORD *v858;
  uint64_t v859;
  uint64_t v860;
  id v861;
  id v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  __int128 v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t *v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  char *v876;
  uint64_t v877;
  uint64_t v878;
  char *v879;
  char *v880;
  uint64_t v881;
  char *v882;
  char *v883;
  uint64_t *v884;
  uint64_t v885;
  char *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  char *v893;
  uint64_t v894;
  uint64_t *v895;
  uint64_t v896;
  char *v897;
  char *v898;
  uint64_t v899;
  uint64_t v900;
  char *v901;
  char *v902;
  char *v903;
  char *v904;
  uint64_t *v905;
  char *v906;
  int *v907;
  uint64_t *v908;
  char *v909;
  uint64_t v910;
  char *v911;
  char *v912;
  char *v913;
  char *v914;
  uint64_t v915;
  char *v916;
  uint64_t v917;
  char *v918;
  char *v919;
  char *v920;
  char *v921;
  __int128 v922;
  int v923;
  char *v924;
  char *v925;
  char *v926;
  char *v927;
  uint64_t v928;
  uint64_t v929;
  char *v930;
  char *v931;
  uint64_t v932;
  void (*v933)(char *, uint64_t, uint64_t);
  uint64_t v934;
  uint64_t v935;
  id v936;
  uint64_t v937;
  uint64_t v938;
  id v939;
  uint64_t v940;
  char *v941;
  uint64_t v942;
  uint64_t v943;
  __int128 v944;
  ValueMetadata *v945;
  unint64_t v946;
  __int128 v947;
  __int128 v948;
  unint64_t v949;
  _OWORD v950[2];
  uint64_t v951;

  v923 = a3;
  v928 = a2;
  v5 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v5);
  v870 = (uint64_t)&v868 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v878 = (uint64_t)&v868 - v8;
  __chkstk_darwin(v9);
  v871 = (uint64_t)&v868 - v10;
  __chkstk_darwin(v11);
  v891 = (uint64_t)&v868 - v12;
  v899 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  v894 = *(_QWORD *)(v899 - 8);
  __chkstk_darwin(v899);
  v869 = (uint64_t)&v868 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v877 = (uint64_t)&v868 - v15;
  __chkstk_darwin(v16);
  v880 = (char *)&v868 - v17;
  __chkstk_darwin(v18);
  v890 = (uint64_t)&v868 - v19;
  v20 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
  __chkstk_darwin(v20);
  v915 = (uint64_t)&v868 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v917 = (uint64_t)&v868 - v23;
  v24 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v24);
  v876 = (char *)&v868 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v881 = type metadata accessor for MagicPairingSettingsRecord(0);
  v875 = *(_QWORD *)(v881 - 8);
  __chkstk_darwin(v881);
  v879 = (char *)&v868 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v883 = (char *)&v868 - v28;
  __chkstk_darwin(v29);
  v872 = (uint64_t *)((char *)&v868 - v30);
  __chkstk_darwin(v31);
  v873 = (uint64_t)&v868 - v32;
  v33 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v33);
  v882 = (char *)&v868 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v886 = (char *)&v868 - v36;
  v892 = type metadata accessor for DeviceSupportInformationRecord(0);
  v889 = *(_QWORD *)(v892 - 8);
  __chkstk_darwin(v892);
  v888 = (uint64_t)&v868 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v874 = (uint64_t)&v868 - v39;
  __chkstk_darwin(v40);
  v887 = (uint64_t)&v868 - v41;
  __chkstk_darwin(v42);
  v884 = (uint64_t *)((char *)&v868 - v43);
  __chkstk_darwin(v44);
  v885 = (uint64_t)&v868 - v45;
  v46 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v46);
  v901 = (char *)&v868 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v907 = (int *)type metadata accessor for DeviceRecord(0);
  v900 = *((_QWORD *)v907 - 1);
  __chkstk_darwin(v907);
  v905 = (uint64_t *)((char *)&v868 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v49);
  v908 = (uint64_t *)((char *)&v868 - v50);
  __chkstk_darwin(v51);
  v895 = (uint64_t *)((char *)&v868 - v52);
  __chkstk_darwin(v53);
  v896 = (uint64_t)&v868 - v54;
  v55 = type metadata accessor for Date(0);
  v933 = *(void (**)(char *, uint64_t, uint64_t))(v55 - 8);
  __chkstk_darwin(v55);
  v893 = (char *)&v868 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  v920 = (char *)&v868 - v58;
  __chkstk_darwin(v59);
  v904 = (char *)&v868 - v60;
  __chkstk_darwin(v61);
  v916 = (char *)&v868 - v62;
  __chkstk_darwin(v63);
  v898 = (char *)&v868 - v64;
  __chkstk_darwin(v65);
  v902 = (char *)&v868 - v66;
  __chkstk_darwin(v67);
  v912 = (char *)&v868 - v68;
  __chkstk_darwin(v69);
  v71 = (char *)&v868 - v70;
  v72 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v72);
  v906 = (char *)&v868 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v74);
  v76 = (char *)&v868 - v75;
  __chkstk_darwin(v77);
  v903 = (char *)&v868 - v78;
  __chkstk_darwin(v79);
  v924 = (char *)&v868 - v80;
  __chkstk_darwin(v81);
  v925 = (char *)&v868 - v82;
  __chkstk_darwin(v83);
  v921 = (char *)&v868 - v84;
  __chkstk_darwin(v85);
  v897 = (char *)&v868 - v86;
  __chkstk_darwin(v87);
  v913 = (char *)&v868 - v88;
  __chkstk_darwin(v89);
  v911 = (char *)&v868 - v90;
  __chkstk_darwin(v91);
  v909 = (char *)&v868 - v92;
  __chkstk_darwin(v93);
  v910 = (uint64_t)&v868 - v94;
  v95 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v95);
  v918 = (char *)&v868 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v97);
  v919 = (char *)&v868 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  v931 = (char *)type metadata accessor for UUID(0);
  v930 = (char *)*((_QWORD *)v931 - 1);
  __chkstk_darwin(v931);
  v926 = (char *)&v868 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v100);
  v914 = (char *)&v868 - v101;
  v102 = type metadata accessor for DispatchPredicate(0);
  v103 = *(_QWORD **)(v102 - 8);
  v104 = __chkstk_darwin(v102);
  v106 = (_QWORD *)((char *)&v868 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0));
  v940 = v3;
  v107 = *(void **)(v3 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  *v106 = v107;
  v108 = (void *)v103[13];
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v108)(v106, enum case for DispatchPredicate.onQueue(_:), v102, v104);
  v109 = v107;
  LOBYTE(v107) = _dispatchPreconditionTest(_:)(v106);
  v110 = (uint64_t (*)(_QWORD *, uint64_t))v103[1];
  v111 = v110(v106, v102);
  if ((v107 & 1) == 0)
  {
    __break(1u);
LABEL_268:
    __break(1u);
    goto LABEL_269;
  }
  v932 = v55;
  v939 = a1;
  v113 = objc_msgSend(a1, "encryptedValues");
  v114 = String._bridgeToObjectiveC()();
  a1 = objc_msgSend(v113, "objectForKeyedSubscript:", v114);
  swift_unknownObjectRelease(v113);

  v929 = (uint64_t)v76;
  if (a1
    && (*(_QWORD *)&v947 = a1,
        v115 = sub_1000A0980(&qword_100210400),
        swift_dynamicCast(v950, &v947, v115, &type metadata for String, 6)))
  {
    v938 = *((_QWORD *)&v950[0] + 1);
    v116 = *(_QWORD *)&v950[0];
  }
  else
  {
    a1 = objc_msgSend(v939, "recordID");
    v117 = objc_msgSend(a1, "recordName");

    v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
    v938 = v118;

  }
  v103 = (_QWORD *)sub_10012A6A0();
  v119 = (void *)v103[9];
  *v106 = v119;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v108)(v106, enum case for DispatchPredicate.notOnQueue(_:), v102);
  v120 = v119;
  v121 = _dispatchPreconditionTest(_:)(v106);
  v111 = v110(v106, v102);
  if ((v121 & 1) == 0)
    goto LABEL_268;
  OS_dispatch_queue.sync<A>(execute:)(v950, sub_10016545C, v103, &type metadata for Bool);
  v122 = swift_unknownObjectRelease(v103);
  if (LOBYTE(v950[0]) == 1)
  {
    *(_QWORD *)&v922 = 0;
    v123 = static os_log_type_t.default.getter(v122);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v927 = v71;
    v937 = v116;
    v124 = qword_100218DE8;
    v934 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v125 = swift_allocObject(v934, 152, 7);
    v868 = xmmword_100187620;
    *(_OWORD *)(v125 + 16) = xmmword_100187620;
    v126 = objc_msgSend(v939, "modifiedByDevice");
    if (v126)
    {
      v127 = v126;
      v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
      v130 = v129;

    }
    else
    {
      v130 = 0xE200000000000000;
      v128 = 15932;
    }
    *(_QWORD *)(v125 + 56) = &type metadata for String;
    v142 = sub_1000A0DF4();
    *(_QWORD *)(v125 + 32) = v128;
    *(_QWORD *)(v125 + 40) = v130;
    *(_QWORD *)(v125 + 96) = &type metadata for String;
    *(_QWORD *)(v125 + 104) = v142;
    v143 = v937;
    *(_QWORD *)(v125 + 64) = v142;
    *(_QWORD *)(v125 + 72) = v143;
    v144 = v938;
    *(_QWORD *)(v125 + 80) = v938;
    swift_bridgeObjectRetain(v144);
    v145 = v939;
    v146 = objc_msgSend(v145, "description");
    v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
    v149 = v148;

    *(_QWORD *)(v125 + 136) = &type metadata for String;
    *(_QWORD *)(v125 + 144) = v142;
    v935 = v142;
    *(_QWORD *)(v125 + 112) = v147;
    *(_QWORD *)(v125 + 120) = v149;
    os_log(_:dso:log:_:_:)(v123, &_mh_execute_header, v124, "CloudSync: Process updated cloud record modified by device: [%@] is [%@] %@", 75, 2, v125);
    v150 = swift_bridgeObjectRelease(v125);
    v151 = IsAppleInternalBuild(v150);
    if ((_DWORD)v151)
      v152 = static os_log_type_t.default.getter(v151);
    else
      v152 = static os_log_type_t.debug.getter(v151);
    LODWORD(v936) = v152;
    v153 = (char *)v922;
    v154 = qword_100218DE8;
    v155 = swift_allocObject(v934, 112, 7);
    v922 = xmmword_1001858F0;
    *(_OWORD *)(v155 + 16) = xmmword_1001858F0;
    v156 = objc_msgSend(v145, "recordID");
    v157 = objc_msgSend(v156, "recordName");

    v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
    v160 = v159;

    v161 = v935;
    *(_QWORD *)(v155 + 56) = &type metadata for String;
    *(_QWORD *)(v155 + 64) = v161;
    *(_QWORD *)(v155 + 32) = v158;
    *(_QWORD *)(v155 + 40) = v160;
    v162 = objc_msgSend(v145, "encryptedValues");
    v163 = objc_msgSend(v162, "allKeys");
    swift_unknownObjectRelease(v162);
    v164 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v163, &type metadata for String);

    v165 = v145;
    v166 = sub_100101418(v164, v165);
    swift_bridgeObjectRelease(v164);

    v167 = sub_1000A0980(&qword_100210400);
    v168 = Array.description.getter(v166, v167);
    v170 = v169;
    swift_bridgeObjectRelease(v166);
    *(_QWORD *)(v155 + 96) = &type metadata for String;
    *(_QWORD *)(v155 + 104) = v161;
    *(_QWORD *)(v155 + 72) = v168;
    *(_QWORD *)(v155 + 80) = v170;
    os_log(_:dso:log:_:_:)(v936, &_mh_execute_header, v154, "Process CKRecord %@ - values: %@", 32, 2, v155);
    v171 = swift_bridgeObjectRelease(v155);
    v951 = 0;
    memset(v950, 0, sizeof(v950));
    v936 = v165;
    v172 = CKRecord.recordType.getter(v171);
    v174 = v173;
    v175 = v937;
    v176 = v938;
    sub_10014AB34(v937, v938, v172, v173, &v944);
    swift_bridgeObjectRelease(v174);
    if (v945)
      goto LABEL_20;
    sub_1000A1000((uint64_t)&v944, &qword_100212308);
    v177 = (uint64_t)v919;
    UUID.init(uuidString:)(v175, v176);
    v178 = v930;
    v179 = v931;
    if ((*((unsigned int (**)(uint64_t, uint64_t, char *))v930 + 6))(v177, 1, v931) == 1)
    {
      v180 = sub_1000A1000(v177, &qword_1002103E0);
      v181 = (uint64_t)v918;
    }
    else
    {
      v182 = (uint64_t)v914;
      v183 = (*((uint64_t (**)(char *, uint64_t, char *))v178 + 4))(v914, v177, v179);
      v184 = CKRecord.recordType.getter(v183);
      v186 = v185;
      sub_1001499B0(v182, v184, v185, &v944);
      swift_bridgeObjectRelease(v186);
      (*((void (**)(uint64_t, char *))v930 + 1))(v182, v931);
      v181 = (uint64_t)v918;
      if (v945)
      {
LABEL_20:
        sub_1000A1000((uint64_t)v950, &qword_100212308);
        sub_100165A54(&v944, (uint64_t)&v947);
        sub_100165A54(&v947, (uint64_t)v950);
        goto LABEL_33;
      }
      v180 = sub_1000A1000((uint64_t)&v944, &qword_100212308);
    }
    v187 = CKRecord.recordType.getter(v180);
    v189 = v188;
    if (v187 == 0xD000000000000012 && v188 == 0x80000001001AA930)
    {
      swift_bridgeObjectRelease(0x80000001001AA930);
    }
    else
    {
      v190 = _stringCompareWithSmolCheck(_:_:expecting:)(v187, v188, 0xD000000000000012, 0x80000001001AA930, 0);
      swift_bridgeObjectRelease(v189);
      if ((v190 & 1) == 0)
        goto LABEL_33;
    }
    sub_10012B62C(v181);
    v191 = type metadata accessor for SoundProfileRecord(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 48))(v181, 1, v191) == 1)
    {
      sub_1000A1000((uint64_t)v950, &qword_100212308);
      sub_1000A1000(v181, &qword_100212230);
      v947 = 0u;
      v948 = 0u;
      v949 = 0;
    }
    else
    {
      *((_QWORD *)&v948 + 1) = v191;
      v949 = sub_1000A0940(&qword_100212238, type metadata accessor for SoundProfileRecord, (uint64_t)&unk_100185B4C);
      v192 = sub_100105C88(&v947);
      sub_1000C6CD0(v181, (uint64_t)v192, type metadata accessor for SoundProfileRecord);
      sub_1000A1000((uint64_t)v950, &qword_100212308);
    }
    sub_1000D5F2C((uint64_t)&v947, (uint64_t)v950, &qword_100212308);
LABEL_33:
    sub_1000AB614((uint64_t)v950, (uint64_t)&v944, &qword_100212308);
    if (v945)
    {
      v193 = sub_100165A54(&v944, (uint64_t)&v947);
      v194 = IsAppleInternalBuild(v193);
      if ((_DWORD)v194)
        v195 = static os_log_type_t.default.getter(v194);
      else
        v195 = static os_log_type_t.debug.getter(v194);
      LODWORD(v919) = v195;
      v211 = qword_100218DE8;
      v212 = swift_allocObject(v934, 112, 7);
      *(_OWORD *)(v212 + 16) = v922;
      v213 = *((_QWORD *)&v948 + 1);
      v214 = v949;
      sub_1000A20D8(&v947, *((uint64_t *)&v948 + 1));
      v215 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v214 + 56))(v213, v214);
      v216 = objc_msgSend(v215, "recordID");

      v217 = objc_msgSend(v216, "recordName");
      v218 = static String._unconditionallyBridgeFromObjectiveC(_:)(v217);
      v220 = v219;

      v221 = v935;
      *(_QWORD *)(v212 + 56) = &type metadata for String;
      *(_QWORD *)(v212 + 64) = v221;
      *(_QWORD *)(v212 + 32) = v218;
      *(_QWORD *)(v212 + 40) = v220;
      v222 = *((_QWORD *)&v948 + 1);
      v223 = v949;
      sub_1000A20D8(&v947, *((uint64_t *)&v948 + 1));
      v224 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v223 + 56))(v222, v223);
      v225 = objc_msgSend(v224, "encryptedValues");

      v226 = objc_msgSend(v225, "allKeys");
      swift_unknownObjectRelease(v225);
      v227 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v226, &type metadata for String);

      __chkstk_darwin(v228);
      *((_QWORD *)&v868 - 2) = &v947;
      v229 = sub_1000E6D80((void (*)(uint64_t *__return_ptr, _QWORD *))sub_100165A6C, (uint64_t)(&v868 - 2), v227);
      v918 = v153;
      swift_bridgeObjectRelease(v227);
      v230 = Array.description.getter(v229, v167);
      v232 = v231;
      swift_bridgeObjectRelease(v229);
      *(_QWORD *)(v212 + 96) = &type metadata for String;
      *(_QWORD *)(v212 + 104) = v221;
      *(_QWORD *)(v212 + 72) = v230;
      *(_QWORD *)(v212 + 80) = v232;
      os_log(_:dso:log:_:_:)(v919, &_mh_execute_header, v211, "Cached CKRecord %@ - values: %@", 31, 2, v212);
      swift_bridgeObjectRelease(v212);
      v233 = *((_QWORD *)&v948 + 1);
      v234 = v949;
      sub_1000A20D8(&v947, *((uint64_t *)&v948 + 1));
      v235 = v926;
      v236 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v234 + 8) + 32))(v233);
      v237 = UUID.uuidString.getter(v236);
      v239 = v238;
      (*((void (**)(char *, char *))v930 + 1))(v235, v931);
      v240 = objc_msgSend(v936, "recordID");
      v241 = objc_msgSend(v240, "recordName");

      v242 = static String._unconditionallyBridgeFromObjectiveC(_:)(v241);
      v244 = v243;

      if (v237 == v242 && v239 == v244)
      {
        swift_bridgeObjectRelease_n(v239, 2);
        v245 = v932;
        v246 = v927;
        v247 = v933;
        v248 = (uint64_t)v925;
        v249 = (uint64_t)v924;
        goto LABEL_44;
      }
      v250 = _stringCompareWithSmolCheck(_:_:expecting:)(v237, v239, v242, v244, 0);
      swift_bridgeObjectRelease(v239);
      swift_bridgeObjectRelease(v244);
      v245 = v932;
      v246 = v927;
      v247 = v933;
      v248 = (uint64_t)v925;
      v249 = (uint64_t)v924;
      if ((v250 & 1) != 0)
      {
LABEL_44:
        v251 = objc_msgSend(v936, "modificationDate");
        if (v251)
        {
          v252 = v251;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v251);

          v253 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v247 + 4);
          v254 = v246;
          v253(v248, v246, v245);
          v255 = (_QWORD *)*((_QWORD *)v247 + 7);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v255)(v248, 0, 1, v245);
          v256 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v247 + 6);
          v257 = v256(v248, 1, v245);
          v258 = (uint64_t)v921;
          if (v257 != 1)
          {
            v253((uint64_t)v921, (char *)v248, v245);
            v931 = (char *)v255;
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v255)(v258, 0, 1, v245);
            v284 = v256;
            v246 = v254;
            v285 = v284(v258, 1, v245);
            goto LABEL_59;
          }
          v246 = v254;
        }
        else
        {
          v255 = (_QWORD *)*((_QWORD *)v247 + 7);
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v255)(v248, 1, 1, v245);
          v258 = (uint64_t)v921;
        }
        v277 = objc_msgSend(v936, "creationDate");
        if (v277)
        {
          v278 = v277;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v277);

          v279 = 0;
        }
        else
        {
          v279 = 1;
        }
        v931 = (char *)v255;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v255)(v249, v279, 1, v245);
        sub_1000D5F2C(v249, v258, (uint64_t *)&unk_1002103D0);
        sub_1000A1000(v248, (uint64_t *)&unk_1002103D0);
        v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v247 + 6);
        v285 = v284(v258, 1, v245);
LABEL_59:
        if (v285 == 1)
        {
          v286 = sub_1000A1000(v258, (uint64_t *)&unk_1002103D0);
LABEL_66:
          v311 = v934;
          v312 = (_QWORD *)&unk_100218000;
LABEL_100:
          v392 = static os_log_type_t.default.getter(v286);
          v393 = v312[445];
          v394 = swift_allocObject(v311, 112, 7);
          *(_OWORD *)(v394 + 16) = v922;
          v395 = v935;
          *(_QWORD *)(v394 + 56) = &type metadata for String;
          *(_QWORD *)(v394 + 64) = v395;
          *(_QWORD *)(v394 + 32) = v937;
          v396 = v938;
          *(_QWORD *)(v394 + 40) = v938;
          swift_bridgeObjectRetain(v396);
          a1 = v936;
          v397 = objc_msgSend(a1, "description");
          v398 = static String._unconditionallyBridgeFromObjectiveC(_:)(v397);
          v400 = v399;

          *(_QWORD *)(v394 + 96) = &type metadata for String;
          *(_QWORD *)(v394 + 104) = v395;
          *(_QWORD *)(v394 + 72) = v398;
          *(_QWORD *)(v394 + 80) = v400;
          os_log(_:dso:log:_:_:)(v392, &_mh_execute_header, v393, "Updating cloud record[%@]: %@", 29, 2, v394);
          v401 = swift_bridgeObjectRelease(v394);
          v103 = (_QWORD *)CKRecord.recordType.getter(v401);
          v102 = v402;
          if (v103 == (_QWORD *)0x654B72657473614DLL && v402 == 0xE900000000000079)
          {
            swift_bridgeObjectRelease(0xE900000000000079);
            v403 = v937;
            v108 = &type metadata for String;
            v404 = (_QWORD *)&unk_100218000;
            goto LABEL_105;
          }
          v108 = &type metadata for String;
          v404 = &unk_100218000;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B72657473614DLL, 0xE900000000000079, v103, v402, 0) & 1) != 0)
          {
            swift_bridgeObjectRelease(v102);
            v403 = v937;
LABEL_105:
            v405 = a1;
            v406 = v917;
            v407 = v918;
            v408 = (void *)sub_1000B13BC(v405, v917);
            if (!v407)
            {
              sub_10014E9D8(v406, v923 & 1);
              sub_1000AE58C(v406, type metadata accessor for LegacyAccountMagicKeysRecord);
LABEL_185:
              v315 = v932;
              v263 = (uint64_t)v927;
              v316 = v933;
              v317 = v929;
LABEL_186:
              sub_1000A2140(&v947);
              goto LABEL_187;
            }
LABEL_184:
            v511 = static os_log_type_t.error.getter(v408);
            v512 = v404[445];
            v513 = swift_allocObject(v934, 152, 7);
            *(_OWORD *)(v513 + 16) = v868;
            v514 = v935;
            *(_QWORD *)(v513 + 56) = v108;
            *(_QWORD *)(v513 + 64) = v514;
            *(_QWORD *)(v513 + 32) = v403;
            v515 = v938;
            *(_QWORD *)(v513 + 40) = v938;
            swift_bridgeObjectRetain(v515);
            v516 = a1;
            v517 = objc_msgSend(v516, "description");
            v518 = static String._unconditionallyBridgeFromObjectiveC(_:)(v517);
            v520 = v519;

            *(_QWORD *)(v513 + 96) = &type metadata for String;
            *(_QWORD *)(v513 + 104) = v514;
            *(_QWORD *)(v513 + 72) = v518;
            v108 = &type metadata for String;
            *(_QWORD *)(v513 + 80) = v520;
            *(_QWORD *)&v944 = v407;
            swift_errorRetain(v407);
            v521 = sub_1000A0980(&qword_100210710);
            v522 = String.init<A>(describing:)(&v944, v521);
            *(_QWORD *)(v513 + 136) = &type metadata for String;
            *(_QWORD *)(v513 + 144) = v514;
            *(_QWORD *)(v513 + 112) = v522;
            *(_QWORD *)(v513 + 120) = v523;
            os_log(_:dso:log:_:_:)(v511, &_mh_execute_header, v512, "Error updating stale cloud record[%@] %@: %@", 44, 2, v513);
            swift_bridgeObjectRelease(v513);
            swift_errorRelease(v407);
            goto LABEL_185;
          }
          v403 = v937;
          if (v103 == (_QWORD *)0x6552656369766544 && v102 == 0xEC00000064726F63)
          {
            swift_bridgeObjectRelease(0xEC00000064726F63);
            v409 = v908;
            goto LABEL_112;
          }
          v410 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544, 0xEC00000064726F63, v103, v102, 0);
          v409 = v908;
          if ((v410 & 1) != 0)
          {
            swift_bridgeObjectRelease(v102);
LABEL_112:
            v411 = a1;
            v407 = v918;
            sub_10009DE04(v411, v409);
            if (v407)
              goto LABEL_184;
            v412 = v891;
            sub_10012B40C(v891);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v894 + 48))(v412, 1, v899) == 1)
            {
              sub_1000A1000(v412, &qword_100210CD8);
              v315 = v932;
              v263 = (uint64_t)v927;
              v317 = v929;
LABEL_253:
              sub_10014D640((uint64_t)v409, v923 & 1);
              sub_1000AE58C((uint64_t)v409, type metadata accessor for DeviceRecord);
LABEL_254:
              v316 = v933;
              goto LABEL_186;
            }
            v454 = v890;
            sub_1000C6CD0(v412, v890, type metadata accessor for LegacyMagicPairingSettingsRecords);
            sub_1000E2648();
            v456 = v455;
            v457 = sub_100111310(v455, (char *)v409, type metadata accessor for DeviceRecord);
            swift_bridgeObjectRelease(v456);
            v315 = v932;
            v458 = v935;
            v317 = v929;
            if (!v457)
            {
              sub_1000AE58C(v454, type metadata accessor for LegacyMagicPairingSettingsRecords);
LABEL_212:
              v263 = (uint64_t)v927;
              v409 = v908;
              goto LABEL_253;
            }
            v459 = objc_msgSend(v457, "name");
            if (v459)
            {
              v460 = v459;
              v461 = static String._unconditionallyBridgeFromObjectiveC(_:)(v459);
              v463 = v462;

              v464 = (char *)v908 + v907[7];
              v465 = *((_QWORD *)v464 + 1);
              if (v461 == *(_QWORD *)v464 && v463 == v465)
              {
                swift_bridgeObjectRelease(v463);
LABEL_211:
                sub_1000AE58C(v890, type metadata accessor for LegacyMagicPairingSettingsRecords);

                goto LABEL_212;
              }
              v557 = _stringCompareWithSmolCheck(_:_:expecting:)(v461, v463, *(_QWORD *)v464, v465, 0);
              swift_bridgeObjectRelease(v463);
              if ((v557 & 1) != 0)
                goto LABEL_211;
            }
            v558 = v908;
            v559 = (char *)v908 + v907[6];
            v560 = *(char **)v559;
            v561 = (char *)*((_QWORD *)v559 + 1);
            v562 = objc_allocWithZone((Class)BTCloudDevice);
            swift_bridgeObjectRetain(v561);
            v924 = v560;
            v563 = String._bridgeToObjectiveC()();
            v925 = v561;
            swift_bridgeObjectRelease(v561);
            v931 = (char *)objc_msgSend(v562, "initWithBluetoothAddress:", v563);

            LODWORD(v926) = static os_log_type_t.default.getter(v564);
            v930 = (char *)qword_100218DE8;
            v565 = swift_allocObject(v934, 152, 7);
            sub_1000B468C(v565, 3);
            v566 = v403;
            v568 = v567;
            v567[3] = (uint64_t)&type metadata for String;
            v567[4] = v458;
            *v567 = v566;
            v569 = v938;
            v567[1] = v938;
            v938 = v569;
            swift_bridgeObjectRetain(v569);
            v570 = v457;
            v571 = objc_msgSend(v570, "description");
            v572 = static String._unconditionallyBridgeFromObjectiveC(_:)(v571);
            v573 = v458;
            v575 = v574;

            v568[8] = (uint64_t)&type metadata for String;
            v568[9] = v573;
            v568[5] = v572;
            v568[6] = v575;
            v576 = sub_10009C9A8();
            v568[13] = (uint64_t)&type metadata for String;
            v568[14] = v573;
            v568[10] = v576;
            v568[11] = v577;
            BTUserTransaction.capture()();
            v579 = v578;
            v580 = v907;
            os_log(_:dso:log:_:_:)(v926, &_mh_execute_header, v930, "Consolidating device name record[%@]: %@ with %@", 48, 2, v578);
            swift_bridgeObjectRelease(v579);
            v581 = v890;
            v582 = v890 + *(int *)(v899 + 28);
            v583 = (char *)v558 + v580[12];
            v584 = sub_1000A0940((unint64_t *)&unk_1002122F8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            if ((dispatch thunk of static Comparable.< infix(_:_:)(v582, v583, v315, v584) & 1) == 0)
            {
              v640 = objc_msgSend(v570, "name");
              objc_msgSend(v931, "setNickname:", v640);

              LODWORD(v930) = static os_log_type_t.default.getter(v641);
              v642 = qword_100218DE8;
              v643 = swift_allocObject(v934, 152, 7);
              sub_1000B468C(v643, 3);
              v645 = v644;
              v644[3] = &type metadata for String;
              v644[4] = v573;
              v646 = v938;
              *v644 = v937;
              v644[1] = v646;
              swift_bridgeObjectRetain(v646);
              v647 = objc_msgSend(v570, "name");
              if (v647)
              {
                v648 = v647;
                v649 = static String._unconditionallyBridgeFromObjectiveC(_:)(v647);
                v651 = v650;

              }
              else
              {
                v649 = 0;
                v651 = 0;
              }
              v263 = (uint64_t)v927;
              v317 = v929;
              *(_QWORD *)&v944 = v649;
              *((_QWORD *)&v944 + 1) = v651;
              v654 = sub_1000A0980(&qword_100211AB0);
              v655 = String.init<A>(describing:)(&v944, v654);
              v656 = v935;
              v645[8] = &type metadata for String;
              v645[9] = v656;
              v645[5] = v655;
              v645[6] = v657;
              v658 = (char *)v908 + v907[7];
              v659 = *(_QWORD *)v658;
              v660 = *((_QWORD *)v658 + 1);
              v645[13] = &type metadata for String;
              v645[14] = v656;
              v645[10] = v659;
              v645[11] = v660;
              BTUserTransaction.capture()();
              v662 = v661;
              swift_bridgeObjectRetain(v660);
              os_log(_:dso:log:_:_:)(v930, &_mh_execute_header, v642, "Replacing with latest name record[%@]: %@ with %@", 49, 2, v662);
              swift_bridgeObjectRelease(v662);
              v581 = v890;
              v589 = v931;
              v590 = v570;
              goto LABEL_252;
            }
            v585 = (uint64_t *)((char *)v558 + v580[10]);
            v586 = *v585;
            v587 = v585[1];
            swift_bridgeObjectRetain(v587);
            v588 = sub_100123110(v586, v587);
            v263 = (uint64_t)v927;
            v317 = v929;
            v589 = v931;
            v590 = v570;
            if ((v591 & 1) != 0)
              goto LABEL_252;
            v592 = v588;
            v593 = objc_msgSend(v570, "name");
            if (!v593)
              goto LABEL_252;
            v594 = v593;
            v595 = static String._unconditionallyBridgeFromObjectiveC(_:)(v593);
            v930 = v570;
            v597 = v596;

            swift_bridgeObjectRelease(v597);
            v598 = HIBYTE(v597) & 0xF;
            v599 = (v597 & 0x2000000000000000) == 0;
            v590 = v930;
            if (v599)
              v598 = v595 & 0xFFFFFFFFFFFFLL;
            if (!v598)
              goto LABEL_252;
            v600 = objc_msgSend((id)objc_opt_self(CBAccessoryLogging), "getProductNameFromProductID:", v592);
            v601 = static String._unconditionallyBridgeFromObjectiveC(_:)(v600);
            v603 = v602;

            v604 = (char *)v908 + v907[7];
            v606 = *(_QWORD *)v604;
            v605 = *((_QWORD *)v604 + 1);
            if (v601 == *(_QWORD *)v604 && v603 == v605)
            {
              v607 = swift_bridgeObjectRelease(v603);
              v590 = v930;
            }
            else
            {
              v754 = _stringCompareWithSmolCheck(_:_:expecting:)(v601, v603, *(_QWORD *)v604, *((_QWORD *)v604 + 1), 0);
              v607 = swift_bridgeObjectRelease(v603);
              v581 = v890;
              v590 = v930;
              if ((v754 & 1) == 0)
              {
LABEL_252:
                v409 = v908;
                sub_10009ED2C(v589);

                sub_1000AE58C(v581, type metadata accessor for LegacyMagicPairingSettingsRecords);
                v315 = v932;
                v108 = &type metadata for String;
                goto LABEL_253;
              }
            }
            v755 = static os_log_type_t.default.getter(v607);
            v756 = qword_100218DE8;
            v757 = swift_allocObject(v934, 152, 7);
            sub_1000B468C(v757, 3);
            v759 = v758;
            v760 = v935;
            v758[3] = &type metadata for String;
            v758[4] = v760;
            v761 = v938;
            *v758 = v937;
            v758[1] = v761;
            swift_bridgeObjectRetain(v761);
            v762 = objc_msgSend(v590, "name");
            if (v762)
            {
              v763 = v762;
              v764 = static String._unconditionallyBridgeFromObjectiveC(_:)(v762);
              v766 = v765;

            }
            else
            {
              v764 = 0;
              v766 = 0;
            }
            *(_QWORD *)&v944 = v764;
            *((_QWORD *)&v944 + 1) = v766;
            v801 = sub_1000A0980(&qword_100211AB0);
            v802 = String.init<A>(describing:)(&v944, v801);
            v759[8] = &type metadata for String;
            v759[9] = v760;
            v759[5] = v802;
            v759[6] = v803;
            v759[13] = &type metadata for String;
            v759[14] = v760;
            v759[10] = v606;
            v759[11] = v605;
            BTUserTransaction.capture()();
            v805 = v804;
            swift_bridgeObjectRetain(v605);
            os_log(_:dso:log:_:_:)(v755, &_mh_execute_header, v756, "Replace default device name record[%@]: %@ with %@", 50, 2, v805);
            swift_bridgeObjectRelease(v805);
            v806 = objc_allocWithZone((Class)BTCloudDevice);
            v807 = v925;
            swift_bridgeObjectRetain(v925);
            v808 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v807);
            v809 = objc_msgSend(v806, "initWithBluetoothAddress:", v808);

            v590 = v930;
            v810 = objc_msgSend(v930, "name");
            objc_msgSend(v809, "setNickname:", v810);

            v263 = (uint64_t)v927;
            v317 = v929;
            v581 = v890;
            v589 = v931;
            goto LABEL_252;
          }
          if (v103 == (_QWORD *)0xD00000000000001ELL && v102 == 0x80000001001AA950)
          {
            v432 = 0x80000001001AA950;
            goto LABEL_150;
          }
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001AA950, v103, v102, 0) & 1) != 0)
          {
            v432 = v102;
LABEL_150:
            swift_bridgeObjectRelease(v432);
            v469 = a1;
            v470 = v887;
            v407 = v918;
            sub_1000DBD68(v469, v887);
            if (!v407)
            {
              sub_100165A84((uint64_t)&v947, (uint64_t)&v944);
              v471 = sub_1000A0980(&qword_100212310);
              v472 = (uint64_t)v882;
              v473 = v892;
              v474 = swift_dynamicCast(v882, &v944, v471, v892, 6);
              v475 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v889 + 56);
              if ((v474 & 1) != 0)
              {
                v475(v472, 0, 1, v473);
                v476 = v874;
                sub_1000C6CD0(v472, v874, type metadata accessor for DeviceSupportInformationRecord);
                v477 = sub_1000BB014();
                sub_1000DD42C(v477);

                sub_1000AE58C(v476, type metadata accessor for DeviceSupportInformationRecord);
              }
              else
              {
                v475(v472, 1, 1, v473);
                sub_1000A1000(v472, &qword_100210CE8);
              }
              v315 = v932;
              v263 = (uint64_t)v927;
              v316 = v933;
              v317 = v929;
              sub_10014DA48(v470, v923 & 1);
              sub_1000AE58C(v470, type metadata accessor for DeviceSupportInformationRecord);
              goto LABEL_186;
            }
            goto LABEL_184;
          }
          if (v103 == (_QWORD *)0x746553636967614DLL && v102 == 0xED000073676E6974)
          {
            swift_bridgeObjectRelease(0xED000073676E6974);
            v503 = (uint64_t)v880;
            v504 = v883;
            goto LABEL_183;
          }
          v509 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974, v103, v102, 0);
          v503 = (uint64_t)v880;
          v504 = v883;
          if ((v509 & 1) != 0)
          {
            swift_bridgeObjectRelease(v102);
LABEL_183:
            v510 = a1;
            v407 = v918;
            sub_1000CAD6C(v510, (uint64_t)v504);
            if (v407)
              goto LABEL_184;
            v652 = v871;
            sub_10012B40C(v871);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v894 + 48))(v652, 1, v899) == 1)
            {
              sub_1000A1000(v652, &qword_100210CD8);
              v315 = v932;
              v317 = v929;
LABEL_302:
              v753 = (uint64_t)v883;
              sub_10014DE4C((uint64_t)v883, v923 & 1);
              sub_1000AE58C(v753, type metadata accessor for MagicPairingSettingsRecord);
              v263 = (uint64_t)v927;
              goto LABEL_254;
            }
            sub_1000C6CD0(v652, v503, type metadata accessor for LegacyMagicPairingSettingsRecords);
            sub_1000E2648();
            v664 = v663;
            v665 = sub_100111310(v663, v504, type metadata accessor for MagicPairingSettingsRecord);
            swift_bridgeObjectRelease(v664);
            v666 = v504;
            v315 = v932;
            v317 = v929;
            if (v665)
            {
              v667 = v503 + *(int *)(v899 + 28);
              v668 = &v666[*(int *)(v881 + 120)];
              v669 = sub_1000A0940((unint64_t *)&unk_1002122F8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              v670 = dispatch thunk of static Comparable.< infix(_:_:)(v667, v668, v315, v669);
              if ((v670 & 1) != 0)
              {
                sub_1000AE58C(v503, type metadata accessor for LegacyMagicPairingSettingsRecords);

                goto LABEL_302;
              }
              LODWORD(v930) = static os_log_type_t.default.getter(v670);
              v931 = (char *)qword_100218DE8;
              v735 = swift_allocObject(v934, 152, 7);
              sub_1000B468C(v735, 3);
              v737 = v736;
              v738 = v317;
              v739 = v935;
              v736[3] = (uint64_t)&type metadata for String;
              v736[4] = v739;
              v740 = v938;
              *v736 = v403;
              v736[1] = v740;
              swift_bridgeObjectRetain(v740);
              v741 = v510;
              v742 = objc_msgSend(v741, "description");
              v743 = static String._unconditionallyBridgeFromObjectiveC(_:)(v742);
              v745 = v744;

              v737[8] = (uint64_t)&type metadata for String;
              v737[9] = v739;
              v737[5] = v743;
              v737[6] = v745;
              v746 = v665;
              v747 = objc_msgSend(v746, "description");
              v748 = static String._unconditionallyBridgeFromObjectiveC(_:)(v747);
              v750 = v749;

              v737[13] = (uint64_t)&type metadata for String;
              v737[14] = v739;
              v317 = v738;
              v737[10] = v748;
              v108 = &type metadata for String;
              v737[11] = v750;
              v315 = v932;
              BTUserTransaction.capture()();
              v752 = v751;
              os_log(_:dso:log:_:_:)(v930, &_mh_execute_header, v931, "CloudSync: Consolidating record[%@]: %@ with %@", 47, 2, v751);
              swift_bridgeObjectRelease(v752);
              sub_1000CD0D8(v746);

              v733 = (uint64_t)v880;
            }
            else
            {
              v733 = v503;
            }
            sub_1000AE58C(v733, type metadata accessor for LegacyMagicPairingSettingsRecords);
            goto LABEL_302;
          }
          v111 = 0xD000000000000012;
          v112 = "SoundProfileRecord";
          if (v103 == (_QWORD *)0xD000000000000012 && v102 == 0x80000001001AA930)
          {
            swift_bridgeObjectRelease(0x80000001001AA930);
            v315 = v932;
            v263 = (uint64_t)v927;
            v316 = v933;
            v317 = v929;
LABEL_271:
            sub_1001366B0(a1, v923 & 1);
            goto LABEL_186;
          }
LABEL_269:
          v697 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, (unint64_t)(v112 - 32) | 0x8000000000000000, v103, v102, 0);
          v315 = v932;
          v263 = (uint64_t)v927;
          v316 = v933;
          v317 = v929;
          if ((v697 & 1) != 0)
          {
            swift_bridgeObjectRelease(v102);
            goto LABEL_271;
          }
          if (v103 == (_QWORD *)0x6563697665444141 && v102 == 0xEE0064726F636552)
          {
            v731 = 0xEE0064726F636552;
          }
          else
          {
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141, 0xEE0064726F636552, v103, v102, 0) & 1) == 0)
            {
              if (v103 == (_QWORD *)0xD000000000000011 && v102 == 0x80000001001B1050)
              {
                swift_bridgeObjectRelease(0x80000001001B1050);
              }
              else
              {
                v829 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001B1050, v103, v102, 0);
                v830 = swift_bridgeObjectRelease(v102);
                if ((v829 & 1) == 0)
                  goto LABEL_342;
              }
LABEL_339:
              v945 = &type metadata for AudioAccessoryFeatures;
              v946 = sub_1000A42C4();
              v831 = isFeatureEnabled(_:)(&v944);
              v830 = sub_1000A2140(&v944);
              if ((v831 & 1) != 0)
              {
                v832 = objc_allocWithZone((Class)type metadata accessor for AAProxCardsRecord(0));
                v833 = a1;
                v407 = v918;
                v408 = sub_1000A682C(v833);
                if (!v407)
                {
                  v848 = v408;
                  sub_10014E61C(v408, v923 & 1);

                  goto LABEL_185;
                }
LABEL_341:
                v403 = v937;
                v404 = (_QWORD *)&unk_100218000;
                goto LABEL_184;
              }
LABEL_342:
              v834 = static os_log_type_t.error.getter(v830);
              v835 = qword_100218DE8;
              v836 = swift_allocObject(v934, 112, 7);
              sub_1000B468C(v836, 2);
              v838 = v837;
              v839 = v935;
              v837[3] = &type metadata for String;
              v837[4] = v839;
              v840 = v938;
              *v837 = v937;
              v837[1] = v840;
              swift_bridgeObjectRetain(v840);
              v841 = a1;
              v842 = objc_msgSend(v841, "description");
              v843 = static String._unconditionallyBridgeFromObjectiveC(_:)(v842);
              v845 = v844;

              v838[8] = &type metadata for String;
              v838[9] = v839;
              v838[5] = v843;
              v838[6] = v845;
              v108 = &type metadata for String;
              BTUserTransaction.capture()();
              v847 = v846;
              os_log(_:dso:log:_:_:)(v834, &_mh_execute_header, v835, "No valid record found[%@]: %@", 29, 2, v846);
              swift_bridgeObjectRelease(v847);
              goto LABEL_185;
            }
            v731 = v102;
          }
          swift_bridgeObjectRelease(v731);
          v945 = &type metadata for AudioAccessoryFeatures;
          v946 = sub_1000A42C4();
          v767 = isFeatureEnabled(_:)(&v944);
          sub_1000A2140(&v944);
          if ((v767 & 1) != 0)
          {
            v768 = objc_allocWithZone((Class)type metadata accessor for AADeviceRecord(0));
            v769 = a1;
            v407 = v918;
            v408 = sub_100106A4C(v769);
            if (!v407)
            {
              v770 = v408;
              sub_10014E258(v408, v923 & 1);

              goto LABEL_185;
            }
            goto LABEL_341;
          }
          goto LABEL_339;
        }
        v287 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v247 + 4);
        v288 = v916;
        v287(v916, v258, v245);
        v289 = *((_QWORD *)&v948 + 1);
        v290 = v949;
        sub_1000A20D8(&v947, *((uint64_t *)&v948 + 1));
        (*(void (**)(uint64_t, unint64_t))(v290 + 40))(v289, v290);
        LOBYTE(v289) = static Date.> infix(_:_:)(v246, v288);
        v291 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v247 + 1);
        v292 = v291(v246, v245);
        if ((v289 & 1) == 0)
        {
          v286 = v291(v288, v245);
          goto LABEL_66;
        }
        v933 = v287;
        v930 = (char *)v291;
        v293 = static os_log_type_t.error.getter(v292);
        v294 = qword_100218DE8;
        v295 = swift_allocObject(v934, 72, 7);
        sub_1000B468C(v295, 1);
        v297 = v296;
        sub_100165A84((uint64_t)&v947, (uint64_t)&v944);
        v298 = sub_1000A0980(&qword_100212310);
        v299 = String.init<A>(describing:)(&v944, v298);
        v300 = v935;
        v297[3] = (uint64_t)&type metadata for String;
        v297[4] = v300;
        *v297 = v299;
        v297[1] = v301;
        BTUserTransaction.capture()();
        v303 = v302;
        os_log(_:dso:log:_:_:)(v293, &_mh_execute_header, v294, "Merge conflict while saving cloud update, local record is already up to date: %@", 80, 2, v302);
        v304 = swift_bridgeObjectRelease(v303);
        v306 = CKRecord.recordType.getter(v304);
        v307 = v305;
        v308 = v937;
        if (v306 == 0x6552656369766544 && v305 == 0xEC00000064726F63)
        {
          swift_bridgeObjectRelease(0xEC00000064726F63);
          v309 = v940;
          v310 = v932;
LABEL_79:
          sub_100165A84((uint64_t)&v947, (uint64_t)&v944);
          v327 = (uint64_t)v901;
          v328 = v298;
          v329 = v907;
          v330 = swift_dynamicCast(v901, &v944, v328, v907, 6);
          v331 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v900 + 56);
          if ((v330 & 1) != 0)
          {
            v331(v327, 0, 1, v329);
            v332 = v327;
            v333 = v896;
            sub_1000C6CD0(v332, v896, type metadata accessor for DeviceRecord);
            v334 = v936;
            v335 = v895;
            v336 = v918;
            sub_10009DE04(v334, v895);
            if (v336)
            {
              v337 = type metadata accessor for DeviceRecord;
LABEL_82:
              v338 = v333;
LABEL_83:
              v339 = sub_1000AE58C(v338, v337);
LABEL_84:
              v340 = v938;
              LODWORD(v928) = static os_log_type_t.error.getter(v339);
              v929 = qword_100218DE8;
              v341 = swift_allocObject(v934, 152, 7);
              sub_1000B468C(v341, 3);
              v343 = v342;
              v344 = v935;
              v342[3] = (uint64_t)&type metadata for String;
              v342[4] = v344;
              *v342 = v308;
              v342[1] = v340;
              swift_bridgeObjectRetain(v340);
              v345 = v936;
              v346 = objc_msgSend(v345, "description");
              v347 = static String._unconditionallyBridgeFromObjectiveC(_:)(v346);
              v349 = v348;

              v343[8] = (uint64_t)&type metadata for String;
              v343[9] = v344;
              v343[5] = v347;
              v343[6] = v349;
              *(_QWORD *)&v944 = v336;
              swift_errorRetain(v336);
              v350 = sub_1000A0980(&qword_100210710);
              v351 = String.init<A>(describing:)(&v944, v350);
              v343[13] = (uint64_t)&type metadata for String;
              v343[14] = v344;
              v343[10] = v351;
              v343[11] = v352;
              BTUserTransaction.capture()();
              v354 = v353;
              os_log(_:dso:log:_:_:)(v928, &_mh_execute_header, v929, "Error updating stale cloud record[%@] %@: %@", 44, 2, v353);
              swift_bridgeObjectRelease(v354);
              v355 = swift_errorRelease(v336);
              v356 = v940;
LABEL_85:
              v310 = v932;
              v246 = v927;
LABEL_260:
              v672 = v356;
              sub_10012C36C(v355);
              v673 = *((_QWORD *)&v948 + 1);
              v674 = v949;
              sub_1000A20D8(&v947, *((uint64_t *)&v948 + 1));
              v675 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v674 + 56))(v673, v674);
              v676 = objc_msgSend(v675, "creationDate");

              v677 = v916;
              v678 = (uint64_t)v903;
              if (v676)
              {
                static Date._unconditionallyBridgeFromObjectiveC(_:)(v676);

                v933((char *)v678, (uint64_t)v246, v310);
                v679 = 0;
              }
              else
              {
                v679 = 1;
              }
              v680 = v904;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v931)(v678, v679, 1, v310);
              sub_100165A84((uint64_t)&v947, (uint64_t)&v944);
              if (v284(v678, 1, v310) == 1)
              {
                v681 = v945;
                v682 = v946;
                sub_1000A20D8(&v944, (uint64_t)v945);
                (*(void (**)(ValueMetadata *, unint64_t))(v682 + 40))(v681, v682);
                sub_1000A1000(v678, (uint64_t *)&unk_1002103D0);
              }
              else
              {
                v933(v680, v678, v310);
              }
              v683 = sub_1000A2140(&v944);
              v684 = Date.timeIntervalSince1970.getter(v683);
              v685 = v930;
              v686 = ((uint64_t (*)(char *, uint64_t))v930)(v680, v310);
              v687 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v684 - Date.timeIntervalSince1970.getter(v686));
              v688 = String._bridgeToObjectiveC()();
              v689 = sub_1000A0980((uint64_t *)&unk_100212320);
              v690 = swift_allocObject(v689, 56, 7);
              sub_1000B467C(v690, 1);
              *v691 = 0xD00000000000001ALL;
              v691[1] = 0x80000001001B28F0;
              v691[2] = v687;
              BTUserTransaction.capture()();
              v693 = v692;
              v694 = v687;
              v695 = sub_1000A5628(v693);
              sub_1000AB31C(0, &qword_1002119D0, NSObject_ptr);
              isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v695);
              CUMetricsLog(v688, isa);

              ((void (*)(char *, uint64_t))v685)(v677, v310);
              sub_1000A1000((uint64_t)v950, &qword_100212308);
              sub_1000A2140(&v947);
              v134 = v938;
              v140 = v937;
              v141 = v672;
              goto LABEL_198;
            }
            v466 = v333;
            v467 = sub_1000B7110();
            sub_10009ED2C(v467);

            v356 = v309;
            sub_10014D640((uint64_t)v335, 0);
            v468 = type metadata accessor for DeviceRecord;
            goto LABEL_259;
          }
          v331(v327, 1, 1, v329);
          v431 = &qword_100210CF8;
          goto LABEL_124;
        }
        v326 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544, 0xEC00000064726F63, v306, v305, 0);
        v309 = v940;
        v310 = v932;
        if ((v326 & 1) != 0)
        {
          swift_bridgeObjectRelease(v307);
          goto LABEL_79;
        }
        if (v306 == 0xD00000000000001ELL && v307 == 0x80000001001AA950)
        {
          v433 = 0x80000001001AA950;
LABEL_155:
          swift_bridgeObjectRelease(v433);
          sub_100165A84((uint64_t)&v947, (uint64_t)&v944);
          v327 = (uint64_t)v886;
          v478 = v298;
          v479 = v892;
          v480 = swift_dynamicCast(v886, &v944, v478, v892, 6);
          v481 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v889 + 56);
          if ((v480 & 1) != 0)
          {
            v481(v327, 0, 1, v479);
            v482 = v885;
            sub_1000C6CD0(v327, v885, type metadata accessor for DeviceSupportInformationRecord);
            v483 = v936;
            v335 = v884;
            v336 = v918;
            sub_1000DBD68(v483, (uint64_t)v884);
            if (v336)
            {
              v337 = type metadata accessor for DeviceSupportInformationRecord;
              v338 = v482;
              goto LABEL_83;
            }
            v466 = v482;
            v508 = sub_1000BB014();
            sub_1000DD42C(v508);

            v356 = v309;
            sub_10014DA48((uint64_t)v335, 0);
            v468 = type metadata accessor for DeviceSupportInformationRecord;
            goto LABEL_259;
          }
          v481(v327, 1, 1, v479);
          v431 = &qword_100210CE8;
LABEL_124:
          v355 = sub_1000A1000(v327, v431);
LABEL_125:
          v356 = v309;
          goto LABEL_260;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001AA950, v306, v307, 0) & 1) != 0)
        {
          v433 = v307;
          goto LABEL_155;
        }
        if (v306 == 0x746553636967614DLL && v307 == 0xED000073676E6974)
        {
          v505 = 0xED000073676E6974;
LABEL_207:
          swift_bridgeObjectRelease(v505);
          sub_100165A84((uint64_t)&v947, (uint64_t)&v944);
          v327 = (uint64_t)v876;
          v551 = v298;
          v552 = v881;
          v553 = swift_dynamicCast(v876, &v944, v551, v881, 6);
          v554 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v875 + 56);
          if ((v553 & 1) != 0)
          {
            v554(v327, 0, 1, v552);
            v555 = v327;
            v333 = v873;
            sub_1000C6CD0(v555, v873, type metadata accessor for MagicPairingSettingsRecord);
            v556 = v936;
            v335 = v872;
            v336 = v918;
            sub_1000CAD6C(v556, (uint64_t)v872);
            if (v336)
            {
              v337 = type metadata accessor for MagicPairingSettingsRecord;
              goto LABEL_82;
            }
            v466 = v333;
            v671 = sub_1000BEDB4();
            sub_1000CD0D8(v671);

            v356 = v309;
            sub_10014DE4C((uint64_t)v335, 0);
            v468 = type metadata accessor for MagicPairingSettingsRecord;
LABEL_259:
            sub_1000AE58C((uint64_t)v335, v468);
            v355 = sub_1000AE58C(v466, v468);
            goto LABEL_260;
          }
          v554(v327, 1, 1, v552);
          v431 = (uint64_t *)&unk_100212190;
          goto LABEL_124;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974, v306, v307, 0) & 1) != 0)
        {
          v505 = v307;
          goto LABEL_207;
        }
        if (v306 == 0x6563697665444141 && v307 == 0xEE0064726F636552)
        {
          v653 = 0xEE0064726F636552;
        }
        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141, 0xEE0064726F636552, v306, v307, 0) & 1) == 0)
          {
            if (v306 == 0xD000000000000011 && v307 == 0x80000001001B1050)
            {
              swift_bridgeObjectRelease(0x80000001001B1050);
            }
            else
            {
              v771 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001B1050, v306, v307, 0);
              v772 = swift_bridgeObjectRelease(v307);
              if ((v771 & 1) == 0)
                goto LABEL_316;
            }
LABEL_312:
            v945 = &type metadata for AudioAccessoryFeatures;
            v946 = sub_1000A42C4();
            v773 = isFeatureEnabled(_:)(&v944);
            v772 = sub_1000A2140(&v944);
            if ((v773 & 1) != 0)
            {
              sub_100165A84((uint64_t)&v947, (uint64_t)&v944);
              v774 = (objc_class *)type metadata accessor for AAProxCardsRecord(0);
              v355 = swift_dynamicCast(&v941, &v944, v298, v774, 6);
              if ((v355 & 1) == 0)
                goto LABEL_125;
              v700 = v941;
              v775 = objc_allocWithZone(v774);
              v776 = v936;
              v336 = v918;
              v777 = sub_1000A682C(v776);
              if (!v336)
              {
                v811 = v777;
                sub_1000A8FBC(v700);
                v356 = v940;
                sub_10014E61C(v811, 0);

                goto LABEL_85;
              }
              goto LABEL_315;
            }
LABEL_316:
            LODWORD(v928) = static os_log_type_t.error.getter(v772);
            v929 = qword_100218DE8;
            v778 = swift_allocObject(v934, 112, 7);
            sub_1000B468C(v778, 2);
            v780 = v779;
            v781 = v935;
            v779[3] = (uint64_t)&type metadata for String;
            v779[4] = v781;
            v782 = v938;
            *v779 = v308;
            v779[1] = v782;
            v783 = swift_bridgeObjectRetain(v782);
            v784 = CKRecord.recordType.getter(v783);
            v780[8] = (uint64_t)&type metadata for String;
            v780[9] = v781;
            v780[5] = v784;
            v780[6] = v785;
            BTUserTransaction.capture()();
            v787 = v786;
            os_log(_:dso:log:_:_:)(v928, &_mh_execute_header, v929, "Skip updating this record[%@]: %@", 33, 2, v786);
            v355 = swift_bridgeObjectRelease(v787);
            goto LABEL_125;
          }
          v653 = v307;
        }
        swift_bridgeObjectRelease(v653);
        v945 = &type metadata for AudioAccessoryFeatures;
        v946 = sub_1000A42C4();
        v698 = isFeatureEnabled(_:)(&v944);
        sub_1000A2140(&v944);
        if ((v698 & 1) != 0)
        {
          sub_100165A84((uint64_t)&v947, (uint64_t)&v944);
          v699 = (objc_class *)type metadata accessor for AADeviceRecord(0);
          v355 = swift_dynamicCast(&v941, &v944, v298, v699, 6);
          if ((v355 & 1) == 0)
            goto LABEL_125;
          v700 = v941;
          v701 = objc_allocWithZone(v699);
          v702 = v936;
          v336 = v918;
          v703 = sub_100106A4C(v702);
          if (!v336)
          {
            v704 = v703;
            sub_100108E10((unsigned __int8 *)v700);
            v356 = v309;
            sub_10014E258(v704, 0);

            goto LABEL_260;
          }
LABEL_315:

          goto LABEL_84;
        }
        goto LABEL_312;
      }
      v280 = objc_msgSend(v936, "creationDate");
      if (v280)
      {
        v281 = v280;
        v282 = (uint64_t)v909;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v280);

        v283 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))*((_QWORD *)v247 + 7);
        v283(v282, 0, 1, v245);
      }
      else
      {
        v283 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))*((_QWORD *)v247 + 7);
        v282 = (uint64_t)v909;
        v283((uint64_t)v909, 1, 1, v245);
      }
      v320 = v912;
      v321 = (uint64_t)v911;
      v322 = v910;
      sub_1000D5F2C(v282, v910, (uint64_t *)&unk_1002103D0);
      v323 = v247;
      v324 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v247 + 6);
      if (v324(v322, 1, v245))
      {
        sub_1000A1000(v322, (uint64_t *)&unk_1002103D0);
        v325 = 0.0;
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t))v323[2])(v246, v322, v245);
        v357 = sub_1000A1000(v322, (uint64_t *)&unk_1002103D0);
        v325 = Date.timeIntervalSince1970.getter(v357);
        ((void (*)(char *, uint64_t))v323[1])(v246, v245);
      }
      v358 = *((_QWORD *)&v948 + 1);
      v359 = v949;
      sub_1000A20D8(&v947, *((uint64_t *)&v948 + 1));
      v360 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v359 + 56))(v358, v359);
      v361 = objc_msgSend(v360, "creationDate");

      if (v361)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v361);

        (*((void (**)(uint64_t, char *, uint64_t))v933 + 4))(v321, v246, v245);
        v362 = 0;
      }
      else
      {
        v362 = 1;
      }
      v283(v321, v362, 1, v245);
      sub_100165A84((uint64_t)&v947, (uint64_t)&v944);
      if (v324(v321, 1, v245) == 1)
      {
        v363 = v945;
        v364 = v946;
        sub_1000A20D8(&v944, (uint64_t)v945);
        (*(void (**)(ValueMetadata *, unint64_t))(v364 + 40))(v363, v364);
        sub_1000A1000(v321, (uint64_t *)&unk_1002103D0);
        v365 = v933;
      }
      else
      {
        v365 = v933;
        (*((void (**)(char *, uint64_t, uint64_t))v933 + 4))(v320, v321, v245);
      }
      v366 = sub_1000A2140(&v944);
      v367 = Date.timeIntervalSince1970.getter(v366);
      v368 = (void (*)(char *, uint64_t))*((_QWORD *)v365 + 1);
      v368(v320, v245);
      v369 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v325 - v367);
      v370 = String._bridgeToObjectiveC()();
      v371 = sub_1000A0980((uint64_t *)&unk_100212320);
      v372 = swift_allocObject(v371, 56, 7);
      sub_1000B467C(v372, 1);
      *v373 = 0xD000000000000016;
      v373[1] = 0x80000001001B26B0;
      v373[2] = v369;
      BTUserTransaction.capture()();
      v375 = v374;
      v376 = v369;
      v377 = sub_1000A5628(v375);
      sub_1000AB31C(0, &qword_1002119D0, NSObject_ptr);
      v378 = v245;
      v379 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v377);
      CUMetricsLog(v370, v379);

      v380 = objc_msgSend(v936, "creationDate");
      if (v380)
      {
        v381 = v380;
        v382 = v927;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v380);

        v383 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v365 + 4);
        v384 = (uint64_t)v913;
        v383(v913, v382, v378);
        v283(v384, 0, 1, v378);
        if (v324(v384, 1, v378) != 1)
        {
          v383(v902, (char *)v384, v378);
          v385 = *((_QWORD *)&v948 + 1);
          v386 = v949;
          sub_1000A20D8(&v947, *((uint64_t *)&v948 + 1));
          v387 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v386 + 56))(v385, v386);
          v388 = objc_msgSend(v387, "creationDate");

          if (v388)
          {
            v389 = v927;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v388);

            v390 = (uint64_t)v897;
            v383(v897, v389, v378);
            v391 = 0;
          }
          else
          {
            v391 = 1;
            v390 = (uint64_t)v897;
          }
          v283(v390, v391, 1, v378);
          sub_100165A84((uint64_t)&v947, (uint64_t)&v941);
          if (v324(v390, 1, v378) == 1)
          {
            v436 = v942;
            v437 = v943;
            sub_1000A20D8(&v941, v942);
            v438 = v898;
            v378 = v932;
            (*(void (**)(uint64_t, uint64_t))(v437 + 40))(v436, v437);
            sub_1000A1000(v390, (uint64_t *)&unk_1002103D0);
          }
          else
          {
            v438 = v898;
            v383(v898, (char *)v390, v378);
          }
          v312 = &unk_100218000;
          v439 = v902;
          sub_1000A2140(&v941);
          v440 = static Date.> infix(_:_:)(v438, v439);
          v441 = ((uint64_t (*)(char *, uint64_t))v368)(v438, v378);
          if ((v440 & 1) != 0)
          {
            v442 = static os_log_type_t.error.getter(v441);
            v443 = qword_100218DE8;
            v444 = swift_allocObject(v934, 72, 7);
            sub_1000B468C(v444, 1);
            v446 = v445;
            sub_100165A84((uint64_t)&v947, (uint64_t)&v941);
            v447 = sub_1000A0980(&qword_100212310);
            v448 = String.init<A>(describing:)(&v941, v447);
            v449 = v935;
            v446[3] = (uint64_t)&type metadata for String;
            v446[4] = v449;
            *v446 = v448;
            v446[1] = v450;
            BTUserTransaction.capture()();
            v452 = v451;
            os_log(_:dso:log:_:_:)(v442, &_mh_execute_header, v443, "Merge conflict while saving cloud update, local record is latest: %@", 68, 2, v451);
            v453 = swift_bridgeObjectRelease(v452);
            v141 = v940;
            sub_10012C36C(v453);

            v368(v439, v378);
            sub_1000A1000((uint64_t)v950, &qword_100212308);
            sub_1000A2140(&v947);
            v134 = v938;
            v140 = v937;
            goto LABEL_198;
          }
          v368(v439, v378);

LABEL_99:
          v311 = v934;
          goto LABEL_100;
        }
      }
      else
      {
        v384 = (uint64_t)v913;
        v283((uint64_t)v913, 1, 1, v378);
      }

      v286 = sub_1000A1000(v384, (uint64_t *)&unk_1002103D0);
      v312 = &unk_100218000;
      goto LABEL_99;
    }
    v931 = v153;
    v196 = sub_1000A1000((uint64_t)&v944, &qword_100212308);
    v197 = static os_log_type_t.default.getter(v196);
    v198 = qword_100218DE8;
    v199 = swift_allocObject(v934, 112, 7);
    *(_OWORD *)(v199 + 16) = v922;
    v200 = v935;
    *(_QWORD *)(v199 + 56) = &type metadata for String;
    *(_QWORD *)(v199 + 64) = v200;
    *(_QWORD *)(v199 + 32) = v175;
    *(_QWORD *)(v199 + 40) = v176;
    swift_bridgeObjectRetain(v176);
    v201 = v936;
    v202 = objc_msgSend(v201, "description");
    v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v202);
    v205 = v204;

    *(_QWORD *)(v199 + 96) = &type metadata for String;
    *(_QWORD *)(v199 + 104) = v200;
    *(_QWORD *)(v199 + 72) = v203;
    *(_QWORD *)(v199 + 80) = v205;
    os_log(_:dso:log:_:_:)(v197, &_mh_execute_header, v198, "Saving cloud record[%@]: %@", 27, 2, v199);
    v206 = swift_bridgeObjectRelease(v199);
    v208 = CKRecord.recordType.getter(v206);
    v209 = v207;
    if (v208 == 0x654B72657473614DLL && v207 == 0xE900000000000079)
    {
      swift_bridgeObjectRelease(0xE900000000000079);
      v210 = v937;
      v108 = &type metadata for String;
LABEL_49:
      v259 = v201;
      v260 = v915;
      v261 = v931;
      v262 = sub_1000B13BC(v259, v915);
      v263 = (uint64_t)v927;
      if (v261)
      {
LABEL_50:
        v264 = static os_log_type_t.error.getter(v262);
        v265 = qword_100218DE8;
        v266 = swift_allocObject(v934, 152, 7);
        *(_OWORD *)(v266 + 16) = v868;
        v267 = v935;
        *(_QWORD *)(v266 + 56) = &type metadata for String;
        *(_QWORD *)(v266 + 64) = v267;
        *(_QWORD *)(v266 + 32) = v210;
        v268 = v938;
        *(_QWORD *)(v266 + 40) = v938;
        swift_bridgeObjectRetain(v268);
        v269 = v201;
        v270 = objc_msgSend(v269, "description");
        v271 = static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
        v273 = v272;

        *(_QWORD *)(v266 + 96) = &type metadata for String;
        *(_QWORD *)(v266 + 104) = v267;
        *(_QWORD *)(v266 + 72) = v271;
        v108 = &type metadata for String;
        *(_QWORD *)(v266 + 80) = v273;
        *(_QWORD *)&v947 = v261;
        swift_errorRetain(v261);
        v274 = sub_1000A0980(&qword_100210710);
        v275 = String.init<A>(describing:)(&v947, v274);
        *(_QWORD *)(v266 + 136) = &type metadata for String;
        *(_QWORD *)(v266 + 144) = v267;
        *(_QWORD *)(v266 + 112) = v275;
        *(_QWORD *)(v266 + 120) = v276;
        os_log(_:dso:log:_:_:)(v264, &_mh_execute_header, v265, "Error local update cloud delete conflict record[%@] %@: %@", 58, 2, v266);
        swift_bridgeObjectRelease(v266);
        swift_errorRelease(v261);
LABEL_69:
        v315 = v932;
LABEL_70:
        v316 = v933;
        v317 = v929;
        goto LABEL_187;
      }
      sub_10014E9D8(v260, v923 & 1);
      v313 = type metadata accessor for LegacyAccountMagicKeysRecord;
      v314 = v260;
LABEL_68:
      sub_1000AE58C(v314, v313);
      goto LABEL_69;
    }
    v108 = &type metadata for String;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B72657473614DLL, 0xE900000000000079, v208, v207, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v209);
      v210 = v937;
      goto LABEL_49;
    }
    v318 = v940;
    v210 = v937;
    if (v208 == 0x6552656369766544 && v209 == 0xEC00000064726F63)
    {
      swift_bridgeObjectRelease(0xEC00000064726F63);
      v263 = (uint64_t)v927;
      v319 = v905;
      goto LABEL_117;
    }
    v413 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544, 0xEC00000064726F63, v208, v209, 0);
    v263 = (uint64_t)v927;
    v319 = v905;
    if ((v413 & 1) != 0)
    {
      swift_bridgeObjectRelease(v209);
LABEL_117:
      v414 = v201;
      v261 = v931;
      sub_10009DE04(v414, v319);
      if (v261)
        goto LABEL_50;
      v415 = (uint64_t *)((char *)v319 + v907[6]);
      v416 = v415[1];
      if (*v415 == 0xD000000000000011 && v416 == 0x80000001001AB220
        || (v262 = _stringCompareWithSmolCheck(_:_:expecting:)(*v415, v416, 0xD000000000000011, 0x80000001001AB220, 0), (v262 & 1) != 0))
      {
        LODWORD(v933) = static os_log_type_t.error.getter(v262);
        v936 = (id)qword_100218DE8;
        v417 = swift_allocObject(v934, 152, 7);
        sub_1000B468C(v417, 3);
        v419 = v418;
        v420 = v935;
        v418[3] = (uint64_t)&type metadata for String;
        v418[4] = v420;
        v134 = v938;
        *v418 = v210;
        v418[1] = v134;
        swift_bridgeObjectRetain(v134);
        v421 = objc_msgSend(v414, "recordID");
        v422 = objc_msgSend(v421, "recordName");

        v423 = static String._unconditionallyBridgeFromObjectiveC(_:)(v422);
        v425 = v424;

        v419[8] = (uint64_t)&type metadata for String;
        v419[9] = v420;
        v419[5] = v423;
        v419[6] = v425;
        v141 = v318;
        v427 = CKRecord.recordType.getter(v426);
        v419[13] = (uint64_t)&type metadata for String;
        v419[14] = v420;
        v419[10] = v427;
        v419[11] = v428;
        BTUserTransaction.capture()();
        v430 = v429;
        os_log(_:dso:log:_:_:)(v933, &_mh_execute_header, v936, "Dropping saving device record with invalid record identifier: %@: Record ID: %@, Record Type: %@", 96, 2, v429);
        swift_bridgeObjectRelease(v430);
        sub_1000A1000((uint64_t)v950, &qword_100212308);
        sub_1000AE58C((uint64_t)v905, type metadata accessor for DeviceRecord);
        goto LABEL_122;
      }
      v506 = v878;
      sub_10012B40C(v878);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v894 + 48))(v506, 1, v899) == 1)
      {
        sub_1000A1000(v506, &qword_100210CD8);
        v315 = v932;
        v317 = v929;
LABEL_284:
        v707 = (uint64_t)v905;
        sub_10014D640((uint64_t)v905, v923 & 1);
        sub_1000AE58C(v707, type metadata accessor for DeviceRecord);
        v316 = v933;
        goto LABEL_187;
      }
      v608 = v506;
      v609 = v877;
      sub_1000C6CD0(v608, v877, type metadata accessor for LegacyMagicPairingSettingsRecords);
      sub_1000E2648();
      v611 = v610;
      v612 = sub_100111310(v610, (char *)v319, type metadata accessor for DeviceRecord);
      swift_bridgeObjectRelease(v611);
      v317 = v929;
      if (!v612)
      {
        sub_1000AE58C(v609, type metadata accessor for LegacyMagicPairingSettingsRecords);
LABEL_283:
        v315 = v932;
        goto LABEL_284;
      }
      v613 = objc_msgSend(v612, "name");
      if (v613)
      {
        v614 = v613;
        v615 = static String._unconditionallyBridgeFromObjectiveC(_:)(v613);
        v617 = v616;

        v618 = (uint64_t *)((char *)v905 + v907[7]);
        v619 = v618[1];
        if (v615 == *v618 && v617 == v619)
        {
          swift_bridgeObjectRelease(v617);
LABEL_282:
          sub_1000AE58C(v877, type metadata accessor for LegacyMagicPairingSettingsRecords);

          goto LABEL_283;
        }
        v706 = _stringCompareWithSmolCheck(_:_:expecting:)(v615, v617, *v618, v619, 0);
        swift_bridgeObjectRelease(v617);
        if ((v706 & 1) != 0)
          goto LABEL_282;
      }
      v708 = v877 + *(int *)(v899 + 28);
      v709 = (char *)v905 + v907[12];
      v710 = sub_1000A0940((unint64_t *)&unk_1002122F8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v315 = v932;
      v711 = dispatch thunk of static Comparable.< infix(_:_:)(v708, v709, v932, v710);
      if ((v711 & 1) != 0)
      {
        sub_1000AE58C(v877, type metadata accessor for LegacyMagicPairingSettingsRecords);

      }
      else
      {
        LODWORD(v930) = static os_log_type_t.default.getter(v711);
        v931 = (char *)qword_100218DE8;
        v712 = swift_allocObject(v934, 152, 7);
        sub_1000B468C(v712, 3);
        v714 = v713;
        v715 = v935;
        v713[3] = (uint64_t)&type metadata for String;
        v713[4] = v715;
        v716 = v938;
        *v713 = v210;
        v713[1] = v716;
        swift_bridgeObjectRetain(v716);
        v717 = v612;
        v718 = objc_msgSend(v717, "description");
        v719 = static String._unconditionallyBridgeFromObjectiveC(_:)(v718);
        v720 = v317;
        v722 = v721;

        v714[8] = (uint64_t)&type metadata for String;
        v714[9] = v715;
        v714[5] = v719;
        v714[6] = v722;
        v263 = (uint64_t)v927;
        v317 = v720;
        v723 = sub_10009C9A8();
        v714[13] = (uint64_t)&type metadata for String;
        v714[14] = v715;
        v714[10] = v723;
        v714[11] = v724;
        v108 = &type metadata for String;
        BTUserTransaction.capture()();
        v726 = v725;
        v315 = v932;
        os_log(_:dso:log:_:_:)(v930, &_mh_execute_header, v931, "Consolidating new device name record[%@]: %@ with %@", 52, 2, v725);
        swift_bridgeObjectRelease(v726);
        v727 = objc_allocWithZone((Class)BTCloudDevice);
        swift_bridgeObjectRetain(v416);
        v728 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v416);
        v729 = objc_msgSend(v727, "initWithBluetoothAddress:", v728);

        v730 = objc_msgSend(v717, "name");
        objc_msgSend(v729, "setNickname:", v730);

        sub_10009ED2C(v729);
        sub_1000AE58C(v877, type metadata accessor for LegacyMagicPairingSettingsRecords);
      }
      goto LABEL_284;
    }
    if (v208 == 0xD00000000000001ELL && v209 == 0x80000001001AA950)
    {
      swift_bridgeObjectRelease(0x80000001001AA950);
      v434 = &selRef_fetchInCallUIState_;
      v435 = v888;
LABEL_160:
      v485 = v201;
      v261 = v931;
      sub_1000DBD68(v485, v435);
      if (v261)
        goto LABEL_50;
      v486 = (uint64_t *)(v435 + *(int *)(v892 + 24));
      v487 = *v486;
      v488 = v486[1];
      if (*v486 != 0xD000000000000011 || v488 != 0x80000001001AB220)
      {
        v487 = _stringCompareWithSmolCheck(_:_:expecting:)(v487, v488, 0xD000000000000011, 0x80000001001AB220, 0);
        if ((v487 & 1) == 0)
        {
          sub_10014DA48(v435, v923 & 1);
          v313 = type metadata accessor for DeviceSupportInformationRecord;
          v314 = v435;
          goto LABEL_68;
        }
      }
      LODWORD(v933) = static os_log_type_t.error.getter(v487);
      v936 = (id)qword_100218DE8;
      v489 = swift_allocObject(v934, 152, 7);
      sub_1000B468C(v489, 3);
      v491 = v490;
      v492 = v935;
      v490[3] = (uint64_t)&type metadata for String;
      v490[4] = v492;
      v134 = v938;
      *v490 = v210;
      v490[1] = v134;
      swift_bridgeObjectRetain(v134);
      v493 = objc_msgSend(v485, v434[344]);
      v494 = objc_msgSend(v493, "recordName");

      v495 = static String._unconditionallyBridgeFromObjectiveC(_:)(v494);
      v497 = v496;

      v491[8] = (uint64_t)&type metadata for String;
      v491[9] = v492;
      v491[5] = v495;
      v491[6] = v497;
      v141 = v318;
      v499 = CKRecord.recordType.getter(v498);
      v491[13] = (uint64_t)&type metadata for String;
      v491[14] = v492;
      v491[10] = v499;
      v491[11] = v500;
      BTUserTransaction.capture()();
      v502 = v501;
      os_log(_:dso:log:_:_:)(v933, &_mh_execute_header, v936, "Dropping saving device record with invalid record identifier: %@: Record ID: %@, Record Type: %@", 96, 2, v501);
      swift_bridgeObjectRelease(v502);
      sub_1000AE58C(v888, type metadata accessor for DeviceSupportInformationRecord);
      sub_1000A1000((uint64_t)v950, &qword_100212308);
LABEL_122:
      v140 = v937;
      goto LABEL_198;
    }
    v484 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001AA950, v208, v209, 0);
    v434 = &selRef_fetchInCallUIState_;
    v435 = v888;
    if ((v484 & 1) != 0)
    {
      swift_bridgeObjectRelease(v209);
      goto LABEL_160;
    }
    if (v208 == 0x746553636967614DLL && v209 == 0xED000073676E6974)
    {
      swift_bridgeObjectRelease(0xED000073676E6974);
      v315 = v932;
      v317 = v929;
      v507 = v879;
      goto LABEL_229;
    }
    v620 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974, v208, v209, 0);
    v315 = v932;
    v317 = v929;
    v507 = v879;
    if ((v620 & 1) != 0)
    {
      swift_bridgeObjectRelease(v209);
LABEL_229:
      v621 = v201;
      v261 = v931;
      sub_1000CAD6C(v621, (uint64_t)v507);
      if (v261)
        goto LABEL_50;
      v622 = (uint64_t *)&v507[*(int *)(v881 + 24)];
      v623 = *v622;
      v624 = v622[1];
      if (*v622 == 0xD000000000000011 && v624 == 0x80000001001AB220
        || (v623 = _stringCompareWithSmolCheck(_:_:expecting:)(v623, v624, 0xD000000000000011, 0x80000001001AB220, 0), (v623 & 1) != 0))
      {
        v625 = static os_log_type_t.error.getter(v623);
        v936 = (id)qword_100218DE8;
        v626 = swift_allocObject(v934, 152, 7);
        sub_1000B468C(v626, 3);
        v628 = v627;
        v629 = v935;
        v627[3] = (uint64_t)&type metadata for String;
        v627[4] = v629;
        v134 = v938;
        *v627 = v210;
        v627[1] = v134;
        swift_bridgeObjectRetain(v134);
        v630 = objc_msgSend(v621, "recordID");
        v631 = objc_msgSend(v630, "recordName");

        v632 = static String._unconditionallyBridgeFromObjectiveC(_:)(v631);
        v634 = v633;

        v628[8] = (uint64_t)&type metadata for String;
        v628[9] = v629;
        v628[5] = v632;
        v628[6] = v634;
        v636 = CKRecord.recordType.getter(v635);
        v628[13] = (uint64_t)&type metadata for String;
        v628[14] = v629;
        v628[10] = v636;
        v628[11] = v637;
        BTUserTransaction.capture()();
        v639 = v638;
        os_log(_:dso:log:_:_:)(v625, &_mh_execute_header, v936, "Dropping saving device record with invalid record identifier: %@: Record ID: %@, Record Type: %@", 96, 2, v638);
        swift_bridgeObjectRelease(v639);
        sub_1000A1000((uint64_t)v950, &qword_100212308);
        sub_1000AE58C((uint64_t)v879, type metadata accessor for MagicPairingSettingsRecord);
        goto LABEL_197;
      }
      v732 = v870;
      sub_10012B40C(v870);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v894 + 48))(v732, 1, v899) == 1)
      {
        sub_1000A1000(v732, &qword_100210CD8);
      }
      else
      {
        v788 = v732;
        v789 = v869;
        sub_1000C6CD0(v788, v869, type metadata accessor for LegacyMagicPairingSettingsRecords);
        sub_1000E2648();
        v791 = v790;
        v792 = sub_100111310(v790, v507, type metadata accessor for MagicPairingSettingsRecord);
        swift_bridgeObjectRelease(v791);
        v931 = v792;
        if (v792)
        {
          v793 = v789 + *(int *)(v899 + 28);
          v794 = &v507[*(int *)(v881 + 120)];
          v795 = sub_1000A0940((unint64_t *)&unk_1002122F8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v796 = dispatch thunk of static Comparable.< infix(_:_:)(v793, v794, v315, v795);
          if ((v796 & 1) != 0)
          {
            sub_1000AE58C(v789, type metadata accessor for LegacyMagicPairingSettingsRecords);

            v315 = v932;
            v263 = (uint64_t)v927;
            v316 = v933;
            v507 = v879;
LABEL_337:
            sub_10014DE4C((uint64_t)v507, v923 & 1);
            sub_1000AE58C((uint64_t)v507, type metadata accessor for MagicPairingSettingsRecord);
LABEL_187:
            v524 = objc_msgSend(v936, "creationDate");
            if (v524)
            {
              v525 = v524;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v524);

              v526 = (void (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v316 + 4);
              v526(v317, v263, v315);
              v527 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))*((_QWORD *)v316 + 7);
              v527(v317, 0, 1, v315);
              v528 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v316 + 6);
              v529 = (_QWORD *)&unk_100218000;
              if (v528(v317, 1, v315) != 1)
              {
                v530 = v920;
                v526((uint64_t)v920, v317, v315);
                if ((v923 & 1) != 0)
                {
                  v531 = objc_msgSend(v936, "modificationDate");
                  if (v531)
                  {
                    v532 = v531;
                    static Date._unconditionallyBridgeFromObjectiveC(_:)(v531);

                    v533 = (uint64_t)v906;
                    v526((uint64_t)v906, v263, v315);
                    v527(v533, 0, 1, v315);
                    if (v528(v533, 1, v315) != 1)
                    {
                      v534 = (uint64_t)v893;
                      v526((uint64_t)v893, v533, v315);
                      v535 = sub_1000A0940(&qword_100212318, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                      v536 = (uint64_t)v920;
                      if ((dispatch thunk of static Equatable.== infix(_:_:)(v534, v920, v315, v535) & 1) == 0)
                      {
                        sub_100165750((uint64_t)v936, 0, v536, v534, 0);
                        v549 = v536;
                        v550 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v316 + 1);
                        v550(v534, v315);
                        goto LABEL_203;
                      }
                      v537 = (*((uint64_t (**)(uint64_t, _QWORD))v316 + 1))(v534, v315);
LABEL_202:
                      static Date.now.getter(v537);
                      sub_100165750((uint64_t)v936, 1, v536, v263, 0);
                      v549 = v536;
                      v550 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v316 + 1);
                      v550(v263, v315);
LABEL_203:
                      v538 = ((uint64_t (*)(uint64_t, uint64_t))v550)(v549, v315);
                      goto LABEL_196;
                    }
                  }
                  else
                  {
                    v533 = (uint64_t)v906;
                    v527((uint64_t)v906, 1, 1, v315);
                  }
                  v537 = sub_1000A1000(v533, (uint64_t *)&unk_1002103D0);
                  v536 = (uint64_t)v920;
                  goto LABEL_202;
                }
                v538 = (*((uint64_t (**)(_QWORD, _QWORD))v316 + 1))(v530, v315);
LABEL_196:
                v539 = static os_log_type_t.default.getter(v538);
                v540 = v529[445];
                v541 = swift_allocObject(v934, 72, 7);
                *(_OWORD *)(v541 + 16) = xmmword_100184870;
                v542 = v928;
                swift_bridgeObjectRetain(v928);
                v543 = sub_1000A0980(&qword_100212310);
                v544 = Array.description.getter(v542, v543);
                v546 = v545;
                swift_bridgeObjectRelease(v542);
                v547 = v935;
                *(_QWORD *)(v541 + 56) = v108;
                *(_QWORD *)(v541 + 64) = v547;
                *(_QWORD *)(v541 + 32) = v544;
                *(_QWORD *)(v541 + 40) = v546;
                os_log(_:dso:log:_:_:)(v539, &_mh_execute_header, v540, "Dropping outdated records: %@", 29, 2, v541);
                swift_bridgeObjectRelease(v541);
                sub_1000A1000((uint64_t)v950, &qword_100212308);
                v134 = v938;
LABEL_197:
                v140 = v937;
                v141 = v940;
                goto LABEL_198;
              }
            }
            else
            {
              (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD))v316 + 7))(v317, 1, 1, v315);
              v529 = &unk_100218000;
            }
            v538 = sub_1000A1000(v317, (uint64_t *)&unk_1002103D0);
            goto LABEL_196;
          }
          LODWORD(v926) = static os_log_type_t.default.getter(v796);
          v930 = (char *)qword_100218DE8;
          v812 = swift_allocObject(v934, 152, 7);
          sub_1000B468C(v812, 3);
          v814 = v813;
          v815 = v935;
          v813[3] = (uint64_t)&type metadata for String;
          v813[4] = v815;
          v816 = v938;
          *v813 = v210;
          v813[1] = v816;
          swift_bridgeObjectRetain(v816);
          v817 = v621;
          v818 = objc_msgSend(v817, "description");
          v819 = static String._unconditionallyBridgeFromObjectiveC(_:)(v818);
          v821 = v820;

          v814[8] = (uint64_t)&type metadata for String;
          v814[9] = v815;
          v814[5] = v819;
          v814[6] = v821;
          v822 = v931;
          v823 = objc_msgSend(v822, "description");
          v824 = static String._unconditionallyBridgeFromObjectiveC(_:)(v823);
          v826 = v825;

          v814[13] = (uint64_t)&type metadata for String;
          v814[14] = v815;
          v814[10] = v824;
          v108 = &type metadata for String;
          v814[11] = v826;
          BTUserTransaction.capture()();
          v828 = v827;
          os_log(_:dso:log:_:_:)(v926, &_mh_execute_header, v930, "Consolidating record[%@]: %@ with %@", 36, 2, v827);
          swift_bridgeObjectRelease(v828);
          v507 = v879;
          sub_1000CD0D8(v822);

          sub_1000AE58C(v789, type metadata accessor for LegacyMagicPairingSettingsRecords);
          v315 = v932;
          v263 = (uint64_t)v927;
        }
        else
        {
          sub_1000AE58C(v789, type metadata accessor for LegacyMagicPairingSettingsRecords);
        }
      }
      v316 = v933;
      goto LABEL_337;
    }
    if (v208 == 0xD000000000000012 && v209 == 0x80000001001AA930)
    {
      swift_bridgeObjectRelease(0x80000001001AA930);
      v316 = v933;
LABEL_280:
      sub_1001366B0(v201, v923 & 1);
      goto LABEL_187;
    }
    v705 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001AA930, v208, v209, 0);
    v316 = v933;
    if ((v705 & 1) != 0)
    {
      swift_bridgeObjectRelease(v209);
      goto LABEL_280;
    }
    if (v208 == 0x6563697665444141 && v209 == 0xEE0064726F636552)
    {
      v734 = 0xEE0064726F636552;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141, 0xEE0064726F636552, v208, v209, 0) & 1) == 0)
      {
        if (v208 == 0xD000000000000011 && v209 == 0x80000001001B1050)
        {
          swift_bridgeObjectRelease(0x80000001001B1050);
        }
        else
        {
          v849 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001B1050, v208, v209, 0);
          v850 = swift_bridgeObjectRelease(v209);
          if ((v849 & 1) == 0)
            goto LABEL_348;
        }
LABEL_345:
        *((_QWORD *)&v948 + 1) = &type metadata for AudioAccessoryFeatures;
        v949 = sub_1000A42C4();
        v851 = isFeatureEnabled(_:)(&v947);
        v850 = sub_1000A2140(&v947);
        if ((v851 & 1) != 0)
        {
          v852 = objc_allocWithZone((Class)type metadata accessor for AAProxCardsRecord(0));
          v853 = v201;
          v261 = v931;
          v262 = (uint64_t)sub_1000A682C(v853);
          if (!v261)
          {
            v800 = (void *)v262;
            sub_10014E61C((void *)v262, v923 & 1);
            goto LABEL_350;
          }
LABEL_347:
          v210 = v937;
          v263 = (uint64_t)v927;
          goto LABEL_50;
        }
LABEL_348:
        v854 = static os_log_type_t.error.getter(v850);
        v855 = qword_100218DE8;
        v856 = swift_allocObject(v934, 112, 7);
        sub_1000B468C(v856, 2);
        v858 = v857;
        v859 = v935;
        v857[3] = &type metadata for String;
        v857[4] = v859;
        v860 = v938;
        *v857 = v937;
        v857[1] = v860;
        swift_bridgeObjectRetain(v860);
        v861 = v201;
        v862 = objc_msgSend(v861, "description");
        v863 = static String._unconditionallyBridgeFromObjectiveC(_:)(v862);
        v865 = v864;

        v858[8] = &type metadata for String;
        v858[9] = v859;
        v858[5] = v863;
        v858[6] = v865;
        v108 = &type metadata for String;
        BTUserTransaction.capture()();
        v867 = v866;
        os_log(_:dso:log:_:_:)(v854, &_mh_execute_header, v855, "No valid record found[%@]: %@", 29, 2, v866);
        swift_bridgeObjectRelease(v867);
LABEL_351:
        v315 = v932;
        v263 = (uint64_t)v927;
        goto LABEL_70;
      }
      v734 = v209;
    }
    swift_bridgeObjectRelease(v734);
    *((_QWORD *)&v948 + 1) = &type metadata for AudioAccessoryFeatures;
    v949 = sub_1000A42C4();
    v797 = isFeatureEnabled(_:)(&v947);
    sub_1000A2140(&v947);
    if ((v797 & 1) != 0)
    {
      v798 = objc_allocWithZone((Class)type metadata accessor for AADeviceRecord(0));
      v799 = v201;
      v261 = v931;
      v262 = (uint64_t)sub_100106A4C(v799);
      if (!v261)
      {
        v800 = (void *)v262;
        sub_10014E258((void *)v262, v923 & 1);
LABEL_350:

        goto LABEL_351;
      }
      goto LABEL_347;
    }
    goto LABEL_345;
  }
  LODWORD(v936) = static os_log_type_t.error.getter(v122);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v935 = qword_100218DE8;
  v131 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v132 = swift_allocObject(v131, 112, 7);
  *(_OWORD *)(v132 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v132 + 56) = &type metadata for String;
  v133 = sub_1000A0DF4();
  *(_QWORD *)(v132 + 64) = v133;
  v134 = v938;
  *(_QWORD *)(v132 + 32) = v116;
  *(_QWORD *)(v132 + 40) = v134;
  swift_bridgeObjectRetain(v134);
  v135 = v939;
  v136 = objc_msgSend(v135, "description");
  v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
  v139 = v138;

  *(_QWORD *)(v132 + 96) = &type metadata for String;
  *(_QWORD *)(v132 + 104) = v133;
  *(_QWORD *)(v132 + 72) = v137;
  *(_QWORD *)(v132 + 80) = v139;
  os_log(_:dso:log:_:_:)(v936, &_mh_execute_header, v935, "Skip processing cloud record - %@, we are no longer signed-into an iCloud Account: %@", 85, 2, v132);
  swift_bridgeObjectRelease(v132);
  v140 = v116;
  v141 = v940;
LABEL_198:
  sub_10014D3A0(v141, v140, v134);
  return swift_bridgeObjectRelease(v134);
}

void sub_100135B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  Class v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  void (*v28)(char *, char *, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  id v32;
  void *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Class v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Class v56;

  v53 = a2;
  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v50 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v51 = (char *)&v50 - v14;
  __chkstk_darwin(v15);
  v52 = (char *)&v50 - v16;
  v17 = type metadata accessor for DeviceSupportInformationRecord(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_autoreleasePoolPush();
  v55 = a1;
  sub_1000DC7F8(a1, &v56);
  if (!v2)
  {
    v54 = 0;
    objc_autoreleasePoolPop(v20);
    v21 = v56;
    v22 = -[objc_class recordChangeTag](v56, "recordChangeTag");
    if (v22)
    {
      v23 = v22;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      swift_bridgeObjectRelease(v25);
      sub_1000AE548(v55, (uint64_t)v19, type metadata accessor for DeviceSupportInformationRecord);
      if (v25)
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v52, &v19[*(int *)(v17 + 64)], v9);
        v26 = -[objc_class modificationDate](v21, "modificationDate");
        if (v26)
        {
          v27 = v26;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

          v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v28(v8, v12, v9);
          v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
          v29(v8, 0, 1, v9);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
          {
            v30 = v51;
            v28(v51, v8, v9);
            goto LABEL_16;
          }
        }
        else
        {
          v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
          v29(v8, 1, 1, v9);
        }
        v32 = -[objc_class creationDate](v21, "creationDate");
        if (v32)
        {
          v33 = v32;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

          v34 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v35 = (uint64_t)v50;
          v34(v50, v12, v9);
          v29((char *)v35, 0, 1, v9);
          v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v35, 1, v9);
          if ((_DWORD)v36 != 1)
          {
            v30 = v51;
            v34(v51, (char *)v35, v9);
LABEL_15:
            sub_1000A1000((uint64_t)v8, (uint64_t *)&unk_1002103D0);
LABEL_16:
            v37 = v52;
            v38 = static Date.> infix(_:_:)(v52, v30);
            v39 = *(void (**)(char *, uint64_t))(v10 + 8);
            v39(v30, v9);
            v39(v37, v9);
            v31 = sub_1000AE58C((uint64_t)v19, type metadata accessor for DeviceSupportInformationRecord);
            if ((v38 & 1) == 0)
            {
LABEL_20:

              return;
            }
LABEL_17:
            v40 = static os_log_type_t.default.getter(v31);
            if (qword_1002101E0 != -1)
              swift_once(&qword_1002101E0, sub_1001687B0);
            v41 = qword_100218DE8;
            v42 = sub_1000A0980((uint64_t *)&unk_1002103C0);
            v43 = swift_allocObject(v42, 72, 7);
            *(_OWORD *)(v43 + 16) = xmmword_100184870;
            v44 = sub_1000DA63C();
            v46 = v45;
            *(_QWORD *)(v43 + 56) = &type metadata for String;
            *(_QWORD *)(v43 + 64) = sub_1000A0DF4();
            *(_QWORD *)(v43 + 32) = v44;
            *(_QWORD *)(v43 + 40) = v46;
            os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Retry cloud upload for deferred info record: %@", 47, 2, v43);
            swift_bridgeObjectRelease(v43);
            v47 = v53;
            v48 = sub_10012A6A0();
            v49 = swift_allocObject(&unk_1001EB580, 24, 7);
            swift_weakInit(v49 + 16, v47);
            swift_retain(v49);
            sub_1000F8080(v21, 0, (uint64_t)sub_100165F88, v49);
            swift_unknownObjectRelease(v48);
            swift_release_n(v49, 2);
            goto LABEL_20;
          }
        }
        else
        {
          v35 = (uint64_t)v50;
          v36 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v50, 1, 1, v9);
        }
        v30 = v51;
        static Date.now.getter(v36);
        sub_1000A1000(v35, (uint64_t *)&unk_1002103D0);
        goto LABEL_15;
      }
    }
    else
    {
      sub_1000AE548(v55, (uint64_t)v19, type metadata accessor for DeviceSupportInformationRecord);
    }
    v31 = sub_1000AE58C((uint64_t)v19, type metadata accessor for DeviceSupportInformationRecord);
    goto LABEL_17;
  }
  objc_autoreleasePoolPop(v20);
  __break(1u);
}

void sub_10013602C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  Class v35;
  id v36;
  void *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  Class v58;

  v57 = a2;
  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v55 = (char *)&v53 - v7;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v54 = (char *)&v53 - v13;
  __chkstk_darwin(v14);
  v56 = (char *)&v53 - v15;
  v16 = type metadata accessor for MagicPairingSettingsRecord(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v53 - v20;
  v58 = sub_1000AB790();
  v22 = -[objc_class recordChangeTag](v58, "recordChangeTag");
  if (v22)
  {
    v23 = v22;
    v53 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    swift_bridgeObjectRelease(v25);
    sub_1000AE548(a1, (uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
    if (v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v56, &v21[*(int *)(v16 + 120)], v8);
      v26 = -[objc_class modificationDate](v58, "modificationDate");
      if (v26)
      {
        v27 = v26;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

        v28 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
        v29 = (uint64_t)v55;
        v28((uint64_t)v55, v11, v8);
        v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v30(v29, 0, 1, v8);
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v29, 1, v8);
        v32 = (uint64_t)v53;
        if (v31 != 1)
        {
          v33 = v54;
          v28((uint64_t)v54, v55, v8);
          goto LABEL_15;
        }
      }
      else
      {
        v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v30((uint64_t)v55, 1, 1, v8);
        v32 = (uint64_t)v53;
      }
      v36 = -[objc_class creationDate](v58, "creationDate");
      if (v36)
      {
        v37 = v36;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

        v38 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
        v38(v32, v11, v8);
        v30(v32, 0, 1, v8);
        v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v32, 1, v8);
        if ((_DWORD)v39 != 1)
        {
          v33 = v54;
          v38((uint64_t)v54, (char *)v32, v8);
LABEL_14:
          sub_1000A1000((uint64_t)v55, (uint64_t *)&unk_1002103D0);
LABEL_15:
          v40 = v56;
          v41 = static Date.> infix(_:_:)(v56, v33);
          v42 = *(void (**)(char *, uint64_t))(v9 + 8);
          v42(v33, v8);
          v42(v40, v8);
          v34 = sub_1000AE58C((uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
          v35 = v58;
          if ((v41 & 1) == 0)
            goto LABEL_19;
          goto LABEL_16;
        }
      }
      else
      {
        v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v30)(v32, 1, 1, v8);
      }
      v33 = v54;
      static Date.now.getter(v39);
      sub_1000A1000(v32, (uint64_t *)&unk_1002103D0);
      goto LABEL_14;
    }
  }
  else
  {
    sub_1000AE548(a1, (uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
  }
  v34 = sub_1000AE58C((uint64_t)v21, type metadata accessor for MagicPairingSettingsRecord);
  v35 = v58;
LABEL_16:
  v43 = static os_log_type_t.default.getter(v34);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v44 = qword_100218DE8;
  v45 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v46 = swift_allocObject(v45, 72, 7);
  *(_OWORD *)(v46 + 16) = xmmword_100184870;
  sub_1000AE548(a1, (uint64_t)v18, type metadata accessor for MagicPairingSettingsRecord);
  v47 = sub_1000C8310();
  v49 = v48;
  sub_1000AE58C((uint64_t)v18, type metadata accessor for MagicPairingSettingsRecord);
  *(_QWORD *)(v46 + 56) = &type metadata for String;
  *(_QWORD *)(v46 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v46 + 32) = v47;
  *(_QWORD *)(v46 + 40) = v49;
  os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "Retry cloud upload for deferred magic settings: %@", 50, 2, v46);
  swift_bridgeObjectRelease(v46);
  v50 = v57;
  v51 = sub_10012A6A0();
  v52 = swift_allocObject(&unk_1001EB580, 24, 7);
  swift_weakInit(v52 + 16, v50);
  swift_retain(v52);
  sub_1000F8080(v35, 0, (uint64_t)sub_100165F24, v52);
  swift_unknownObjectRelease(v51);
  swift_release_n(v52, 2);
LABEL_19:

}

void sub_100136544(void *a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v18, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    if ((a2 & 1) != 0)
    {
      v8 = swift_errorRetain(a1);
      v9 = static os_log_type_t.error.getter(v8);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v10 = qword_100218DE8;
      v11 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v12 = swift_allocObject(v11, 72, 7);
      *(_OWORD *)(v12 + 16) = xmmword_100184870;
      v17 = a1;
      swift_errorRetain(a1);
      v13 = sub_1000A0980(&qword_100210710);
      v14 = String.init<A>(describing:)(&v17, v13);
      v16 = v15;
      *(_QWORD *)(v12 + 56) = &type metadata for String;
      *(_QWORD *)(v12 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 40) = v16;
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Unable to save record on cloud with error: %@", 45, 2, v12, v17);
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      sub_1001366B0(a1, 0);
    }
    swift_release(v7);
    sub_100104E50(a1, a2 & 1);
  }
}

uint64_t sub_1001366B0(void *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t result;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  id v59;
  NSString v60;
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  void (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int v88;
  uint64_t *v89;
  id v90;
  NSString v91;
  unsigned __int8 v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void *v114;
  void *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  char v133;
  uint64_t v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  void (*v144)(char *, char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(char *, char *, uint64_t);
  void (*v149)(char *, char *, uint64_t);
  void (*v150)(char *, char *, uint64_t);
  char *v151;
  char *v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  uint64_t (*v155)(char *, uint64_t);
  void (*v156)(char *, char *, uint64_t);
  uint64_t v157;
  void (*v158)(char *, char *, uint64_t);
  void (*v159)(char *, uint64_t);
  unsigned int (*v160)(char *, uint64_t, uint64_t);
  id v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  char *v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t *v171;
  _BYTE *v172;
  void (*v173)(char *, char *, uint64_t);
  char *v174;
  uint64_t v175;
  uint64_t v176;
  void (**v177)(char *, char *, uint64_t);
  void (*v178)(char *, char *, uint64_t);
  void (*v179)(char *, char *, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD aBlock[3];
  void *v184;
  uint64_t (*v185)();
  uint64_t v186;
  id v187;

  LODWORD(v169) = a2;
  v3 = type metadata accessor for BTDeferredRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  v175 = v3;
  v176 = v4;
  __chkstk_darwin(v3);
  v168 = (char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v177 = (void (**)(char *, char *, uint64_t))((char *)&v156 - v7);
  __chkstk_darwin(v8);
  v172 = (char *)&v156 - v9;
  __chkstk_darwin(v10);
  v181 = (uint64_t)&v156 - v11;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v166 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v165 = (char *)&v156 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for DispatchQoS(0);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v156 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SoundProfileRecord(0);
  __chkstk_darwin(v15);
  v171 = (uint64_t *)((char *)&v156 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v17);
  v167 = (char *)&v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v156 - v20;
  v182 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v174 = (char *)&v156 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v173 = (void (*)(char *, char *, uint64_t))((char *)&v156 - v25);
  __chkstk_darwin(v26);
  v170 = (char *)&v156 - v27;
  __chkstk_darwin(v28);
  v30 = (char *)&v156 - v29;
  __chkstk_darwin(v31);
  v33 = (char *)&v156 - v32;
  __chkstk_darwin(v34);
  v36 = (char *)&v156 - v35;
  __chkstk_darwin(v37);
  v179 = (void (*)(char *, char *, uint64_t))((char *)&v156 - v38);
  __chkstk_darwin(v39);
  v41 = (char *)&v156 - v40;
  __chkstk_darwin(v42);
  v178 = (void (*)(char *, char *, uint64_t))((char *)&v156 - v43);
  v45 = CKRecord.recordType.getter(v44);
  v47 = v46;
  if (v45 == 0xD000000000000012 && v46 == 0x80000001001AA930)
  {
    swift_bridgeObjectRelease(0x80000001001AA930);
  }
  else
  {
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, 0xD000000000000012, 0x80000001001AA930, 0);
    result = swift_bridgeObjectRelease(v47);
    if ((v48 & 1) == 0)
      return result;
  }
  v50 = objc_msgSend(a1, "valueStore");
  v51 = sub_1000AB31C(0, &qword_1002108F0, CKRecordValueStore_ptr);
  CKRecordKeyValueSetting.subscript.getter(aBlock, 0xD000000000000011, 0x80000001001AB310, v51);

  if (!v184)
  {
    v71 = (uint64_t *)&unk_1002122B0;
    v72 = (char *)aBlock;
    return sub_1000A1000((uint64_t)v72, v71);
  }
  v52 = sub_1000A0980(&qword_100210900);
  v53 = sub_1000AB31C(0, (unint64_t *)&unk_1002122C0, CKAsset_ptr);
  result = swift_dynamicCast(&v187, aBlock, v52, v53, 6);
  if ((result & 1) == 0)
    return result;
  v161 = v187;
  v54 = objc_msgSend(v187, "fileURL");
  if (!v54)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v21, 1, 1, v182);
    goto LABEL_16;
  }
  v55 = v54;
  v157 = v12;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v56 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v57 = v182;
  v56(v21, v41, v182);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v21, 0, 1, v57);
  v160 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v160(v21, 1, v57) == 1)
  {
LABEL_16:

    v71 = (uint64_t *)&unk_100210840;
    v72 = v21;
    return sub_1000A1000((uint64_t)v72, v71);
  }
  v158 = v56;
  v58 = ((uint64_t (*)(_QWORD, char *, uint64_t))v56)(v178, v21, v57);
  if (IsAppleInternalBuild(v58)
    && (v59 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v60 = String._bridgeToObjectiveC()(),
        LODWORD(v159) = objc_msgSend(v59, "BOOLForKey:", v60),
        v59,
        v57 = v182,
        v60,
        (_DWORD)v159))
  {
    v61 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    v61(v41, v180 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL, v57);
    if (qword_100210140 != -1)
      swift_once(&qword_100210140, sub_1000AB9F4);
    v62 = sub_1000A0A00(v57, (uint64_t)qword_100218C50);
    v156 = (void (*)(char *, char *, uint64_t))v61;
    v63.n128_f64[0] = ((double (*)(char *, uint64_t, uint64_t))v61)(v36, v62, v57);
    v64 = v57;
    v65 = URL.path.getter(v63);
    v67 = v66;
    v68 = *(double (**)(char *, uint64_t))(v22 + 8);
    v69 = v36;
    v70 = v64;
    v68(v69, v64);
    URL.appendingPathComponent(_:isDirectory:)(v65, v67, 1);
  }
  else
  {
    v73 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
    v73(v41, v180 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL, v57);
    if (qword_100210140 != -1)
      swift_once(&qword_100210140, sub_1000AB9F4);
    v74 = sub_1000A0A00(v57, (uint64_t)qword_100218C50);
    v156 = (void (*)(char *, char *, uint64_t))v73;
    v73(v30, v74, v57);
    v75 = objc_msgSend(a1, "recordID");
    v76 = objc_msgSend(v75, "recordName");

    v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v79 = v78;

    URL.appendingPathComponent(_:)(v77);
    swift_bridgeObjectRelease(v79);
    v68 = *(double (**)(char *, uint64_t))(v22 + 8);
    v80 = v30;
    v81 = v182;
    v68(v80, v182);
    URL.appendingPathExtension(_:)(7627108, 0xE300000000000000);
    v82 = v81;
    v83.n128_f64[0] = v68(v33, v81);
    v84 = URL.path.getter(v83);
    v67 = v85;
    v86 = v36;
    v70 = v82;
    v68(v86, v82);
    URL.appendingPathComponent(_:)(v84);
  }
  swift_bridgeObjectRelease(v67);
  v159 = (void (*)(char *, uint64_t))v68;
  v87 = ((uint64_t (*)(char *, uint64_t))v68)(v41, v70);
  v88 = IsAppleInternalBuild(v87);
  v89 = v171;
  if (!v88
    || (v90 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v91 = String._bridgeToObjectiveC()(),
        v92 = objc_msgSend(v90, "BOOLForKey:", v91),
        v90,
        v91,
        (v92 & 1) == 0))
  {
    v93 = sub_100129690();
    __chkstk_darwin(v93);
    v94 = v178;
    *(&v156 - 2) = v179;
    *(&v156 - 1) = v94;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100168580, &v156 - 4, &type metadata for () + 1);
    swift_release(v93);
  }
  v95 = (uint64_t)v170;
  v156(v170, (char *)v179, v182);
  sub_1000AD6A8(a1, v95, v89);
  v96 = sub_100129690();
  __chkstk_darwin(v96);
  *(&v156 - 2) = v97;
  *(&v156 - 1) = (void (*)(char *, char *, uint64_t))v89;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100168594, &v156 - 4, &type metadata for () + 1);
  v105 = swift_release(v96);
  v106 = static os_log_type_t.default.getter(v105);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v107 = qword_100218DE8;
  v108 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v109 = swift_allocObject(v108, 72, 7);
  *(_OWORD *)(v109 + 16) = xmmword_100184870;
  v110 = sub_1000ABB64();
  v112 = v111;
  *(_QWORD *)(v109 + 56) = &type metadata for String;
  *(_QWORD *)(v109 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v109 + 32) = v110;
  *(_QWORD *)(v109 + 40) = v112;
  os_log(_:dso:log:_:_:)(v106, &_mh_execute_header, v107, "Saving sound profile record: %@", 31, 2, v109);
  swift_bridgeObjectRelease(v109);
  v113 = (char *)_swiftEmptyArrayStorage;
  if ((v169 & 1) != 0)
  {
    sub_1000AB31C(0, (unint64_t *)&qword_1002119F0, OS_dispatch_queue_ptr);
    v114 = (void *)static OS_dispatch_queue.main.getter();
    v185 = sub_10014EDDC;
    v186 = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v184 = &unk_1001EB8B8;
    v115 = _Block_copy(aBlock);
    v116 = v162;
    static DispatchQoS.unspecified.getter(v115);
    aBlock[0] = _swiftEmptyArrayStorage;
    v117 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v118 = sub_1000A0980(&qword_100211D00);
    v119 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v120 = v165;
    v121 = v118;
    v122 = v157;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v121, v119, v157, v117);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v116, v120, v115);
    _Block_release(v115);

    v123 = v122;
    v113 = (char *)_swiftEmptyArrayStorage;
    (*(void (**)(char *, uint64_t))(v166 + 8))(v120, v123);
    (*(void (**)(char *, uint64_t))(v163 + 8))(v116, v164);
  }
  v124 = sub_10012A994();
  aBlock[0] = _swiftEmptyArrayStorage;
  v170 = *(char **)(v124 + 16);
  if (v170)
  {
    v125 = 0;
    v126 = _swiftEmptyArrayStorage;
    v166 = (unint64_t)"ty";
    v169 = 0x80000001001AA930;
    while (1)
    {
      if (v125 >= *(_QWORD *)(v124 + 16))
      {
        __break(1u);
        swift_once(&qword_1002101E0, sub_1001687B0);
        v98 = qword_100218DE8;
        v99 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v100 = swift_allocObject(v99, 72, 7);
        *(_OWORD *)(v100 + 16) = xmmword_100184870;
        aBlock[0] = 0;
        swift_errorRetain(0);
        v101 = sub_1000A0980(&qword_100210710);
        v102 = String.init<A>(describing:)(aBlock, v101);
        v104 = v103;
        *(_QWORD *)(v100 + 56) = &type metadata for String;
        *(_QWORD *)(v100 + 64) = sub_1000A0DF4();
        *(_QWORD *)(v100 + 32) = v102;
        *(_QWORD *)(v100 + 40) = v104;
        os_log(_:dso:log:_:_:)(type metadata accessor for BTDeferredRecord, &_mh_execute_header, v98, "Unable to save sound profile record: %@", 39, 2, v100);
        swift_bridgeObjectRelease(v100);
        return swift_errorRelease(0);
      }
      v127 = (*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80);
      v128 = *(_QWORD *)(v176 + 72);
      v129 = v181;
      sub_1000AE548(v124 + v127 + v128 * v125, v181, type metadata accessor for BTDeferredRecord);
      v130 = *(_QWORD *)(v129 + 8);
      v131 = *(_QWORD *)(v129 + 16);
      if (v130 == 0xD000000000000012 && v131 == v169)
      {
        v132 = v172;
        sub_1000AE548(v181, (uint64_t)v172, type metadata accessor for BTDeferredRecord);
      }
      else
      {
        v133 = _stringCompareWithSmolCheck(_:_:expecting:)(v130, v131, 0xD000000000000012, v166 | 0x8000000000000000, 0);
        v132 = v172;
        sub_1000AE548(v181, (uint64_t)v172, type metadata accessor for BTDeferredRecord);
        if ((v133 & 1) == 0)
        {
          sub_1000AE58C((uint64_t)v132, type metadata accessor for BTDeferredRecord);
          goto LABEL_32;
        }
      }
      if (*v132 == 1)
      {
        swift_bridgeObjectRelease(0xE600000000000000);
        sub_1000AE58C((uint64_t)v132, type metadata accessor for BTDeferredRecord);
LABEL_42:
        sub_1000C6CD0(v181, (uint64_t)v177, type metadata accessor for BTDeferredRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v126) & 1) == 0)
          sub_10014EEB4(0, v126[2] + 1, 1);
        v126 = (_QWORD *)aBlock[0];
        v137 = *(_QWORD *)(aBlock[0] + 16);
        v136 = *(_QWORD *)(aBlock[0] + 24);
        if (v137 >= v136 >> 1)
        {
          sub_10014EEB4(v136 > 1, v137 + 1, 1);
          v126 = (_QWORD *)aBlock[0];
        }
        v126[2] = v137 + 1;
        sub_1000C6CD0((uint64_t)v177, (uint64_t)v126 + v127 + v137 * v128, type metadata accessor for BTDeferredRecord);
        goto LABEL_33;
      }
      v134 = (uint64_t)v132;
      v135 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657461647075, 0xE600000000000000, 0x6574656C6564, 0xE600000000000000, 0);
      swift_bridgeObjectRelease(0xE600000000000000);
      sub_1000AE58C(v134, type metadata accessor for BTDeferredRecord);
      if ((v135 & 1) != 0)
        goto LABEL_42;
LABEL_32:
      sub_1000AE58C(v181, type metadata accessor for BTDeferredRecord);
LABEL_33:
      if (v170 == (char *)++v125)
      {
        v113 = (char *)aBlock[0];
        v89 = v171;
        break;
      }
    }
  }
  swift_bridgeObjectRelease(v124);
  v138 = *((_QWORD *)v113 + 2);
  v139 = (uint64_t)v168;
  v140 = v182;
  if (v138)
  {
    v141 = *(unsigned __int8 *)(v176 + 80);
    v170 = v113;
    v142 = (uint64_t)&v113[(v141 + 32) & ~v141];
    v176 = *(_QWORD *)(v176 + 72);
    v172 = (_BYTE *)0x80000001001AA930;
    v143 = v167;
    v144 = v173;
    while (1)
    {
      v181 = v138;
      sub_1000AE548(v142, v139, type metadata accessor for BTDeferredRecord);
      v145 = sub_100129690();
      v146 = UUID.uuidString.getter(v145);
      v147 = v182;
      v148 = (void (*)(char *, char *, uint64_t))v146;
      v150 = v149;
      URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))v160)(v143, 1, v147);
      if ((_DWORD)result == 1)
        break;
      v151 = v174;
      v158(v174, v143, v147);
      URL.appendingPathComponent(_:)(0xD000000000000012);
      v152 = v151;
      v153 = v159;
      v154 = ((uint64_t (*)(char *, uint64_t))v159)(v152, v182);
      v177 = &v156;
      __chkstk_darwin(v154);
      *(&v156 - 4) = (void (*)(char *, char *, uint64_t))v145;
      *(&v156 - 3) = v148;
      *(&v156 - 2) = v150;
      *(&v156 - 1) = v144;
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_1001684A0, &v156 - 6, &type metadata for Bool);
      v140 = v182;
      swift_release(v145);
      swift_bridgeObjectRelease(v150);
      v153((char *)v144, v140);
      sub_1000AE58C(v139, type metadata accessor for BTDeferredRecord);
      v142 += v176;
      v138 = v181 - 1;
      if (v181 == 1)
      {
        swift_release(v170);
        v89 = v171;
        goto LABEL_54;
      }
    }
    __break(1u);
  }
  else
  {
    swift_release(v113);
LABEL_54:

    sub_1000AE58C((uint64_t)v89, type metadata accessor for SoundProfileRecord);
    v155 = (uint64_t (*)(char *, uint64_t))v159;
    v159((char *)v179, v140);
    return v155((char *)v178, v140);
  }
  return result;
}

void sub_1001377F8(void **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  objc_class *v20;
  Class isa;
  char *v22;
  id v23;
  char *v24;
  char *v25;
  id v26;
  void *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v31;
  id v32;
  void *v33;
  void (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  id v56[3];

  v55 = a2;
  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v52 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v54 = (char *)&v51 - v6;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v53 = (char *)&v51 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - v14;
  v16 = (char *)*a1;
  v17 = objc_autoreleasePoolPush();
  v19 = *(_QWORD *)&v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v18 = *(_QWORD *)&v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
  sub_1000A0E74(v19, v18);
  sub_100109DEC(v19, v18);
  isa = v20;
  sub_1000A103C(v19, v18);
  if (!isa)
  {
    v22 = v16;
    isa = sub_1000A9DB8((uint64_t)v22).super.isa;

  }
  v56[0] = isa;
  sub_10010894C(v56);
  objc_autoreleasePoolPop(v17);
  v23 = -[objc_class recordChangeTag](isa, "recordChangeTag");
  if (v23)
  {
    v24 = v15;

    v25 = &v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate];
    swift_beginAccess(&v16[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_lastModifiedDate], v56, 0, 0);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v15, v25, v7);
    v26 = -[objc_class modificationDate](isa, "modificationDate");
    if (v26)
    {
      v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v29 = (uint64_t)v54;
      v28(v54, v10, v7);
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v30(v29, 0, 1, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v29, 1, v7) != 1)
      {
        v31 = v53;
        v28(v53, (char *)v29, v7);
        goto LABEL_14;
      }
    }
    else
    {
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v29 = (uint64_t)v54;
      v30((uint64_t)v54, 1, 1, v7);
    }
    v32 = -[objc_class creationDate](isa, "creationDate");
    if (v32)
    {
      v33 = v32;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

      v34 = *(void (**)(void))(v8 + 32);
      v35 = (uint64_t)v52;
      v34();
      v30(v35, 0, 1, v7);
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v35, 1, v7);
      if ((_DWORD)v36 != 1)
      {
        v31 = v53;
        ((void (*)(char *, uint64_t, uint64_t))v34)(v53, v35, v7);
LABEL_13:
        sub_1000A1000(v29, (uint64_t *)&unk_1002103D0);
LABEL_14:
        v37 = static Date.> infix(_:_:)(v24, v31);
        v38 = *(void (**)(char *, uint64_t))(v8 + 8);
        v38(v31, v7);
        v23 = (id)((uint64_t (*)(char *, uint64_t))v38)(v24, v7);
        if ((v37 & 1) == 0)
          goto LABEL_18;
        goto LABEL_15;
      }
    }
    else
    {
      v35 = (uint64_t)v52;
      v36 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v30)(v52, 1, 1, v7);
    }
    v31 = v53;
    static Date.now.getter(v36);
    sub_1000A1000(v35, (uint64_t *)&unk_1002103D0);
    goto LABEL_13;
  }
LABEL_15:
  v39 = static os_log_type_t.default.getter(v23);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v40 = qword_100218DE8;
  v41 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v42 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v42 + 16) = xmmword_100184870;
  v43 = v16;
  v44 = objc_msgSend(v43, "description");
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v47 = v46;

  *(_QWORD *)(v42 + 56) = &type metadata for String;
  *(_QWORD *)(v42 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v42 + 32) = v45;
  *(_QWORD *)(v42 + 40) = v47;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Retry cloud upload for deferred aaDeviceRecord: %@", 50, 2, v42);
  swift_bridgeObjectRelease(v42);
  v48 = v55;
  v49 = sub_10012A6A0();
  v50 = swift_allocObject(&unk_1001EB580, 24, 7);
  swift_weakInit(v50 + 16, v48);
  swift_retain(v50);
  sub_1000F8080(isa, 0, (uint64_t)sub_100165EC0, v50);
  swift_unknownObjectRelease(v49);
  swift_release_n(v50, 2);
LABEL_18:

}

void sub_100137CE0(void **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  objc_class *v20;
  Class isa;
  char *v22;
  id v23;
  char *v24;
  char *v25;
  id v26;
  void *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v31;
  id v32;
  void *v33;
  void (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD v56[3];

  v55 = a2;
  v3 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v3);
  v52 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v54 = (char *)&v51 - v6;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v53 = (char *)&v51 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - v14;
  v16 = (char *)*a1;
  v17 = objc_autoreleasePoolPush();
  v19 = *(_QWORD *)&v16[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v18 = *(_QWORD *)&v16[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
  sub_1000A0E74(v19, v18);
  sub_100109DEC(v19, v18);
  isa = v20;
  sub_1000A103C(v19, v18);
  if (!isa)
  {
    v22 = v16;
    isa = sub_1000A9D94((uint64_t)v22).super.isa;

  }
  v56[0] = isa;
  sub_1000A89A0((unint64_t)v56);
  objc_autoreleasePoolPop(v17);
  v23 = -[objc_class recordChangeTag](isa, "recordChangeTag");
  if (v23)
  {
    v24 = v15;

    v25 = &v16[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate];
    swift_beginAccess(&v16[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate], v56, 0, 0);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v15, v25, v7);
    v26 = -[objc_class modificationDate](isa, "modificationDate");
    if (v26)
    {
      v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v29 = (uint64_t)v54;
      v28(v54, v10, v7);
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v30(v29, 0, 1, v7);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v29, 1, v7) != 1)
      {
        v31 = v53;
        v28(v53, (char *)v29, v7);
        goto LABEL_14;
      }
    }
    else
    {
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v29 = (uint64_t)v54;
      v30((uint64_t)v54, 1, 1, v7);
    }
    v32 = -[objc_class creationDate](isa, "creationDate");
    if (v32)
    {
      v33 = v32;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

      v34 = *(void (**)(void))(v8 + 32);
      v35 = (uint64_t)v52;
      v34();
      v30(v35, 0, 1, v7);
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v35, 1, v7);
      if ((_DWORD)v36 != 1)
      {
        v31 = v53;
        ((void (*)(char *, uint64_t, uint64_t))v34)(v53, v35, v7);
LABEL_13:
        sub_1000A1000(v29, (uint64_t *)&unk_1002103D0);
LABEL_14:
        v37 = static Date.> infix(_:_:)(v24, v31);
        v38 = *(void (**)(char *, uint64_t))(v8 + 8);
        v38(v31, v7);
        v23 = (id)((uint64_t (*)(char *, uint64_t))v38)(v24, v7);
        if ((v37 & 1) == 0)
          goto LABEL_18;
        goto LABEL_15;
      }
    }
    else
    {
      v35 = (uint64_t)v52;
      v36 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v30)(v52, 1, 1, v7);
    }
    v31 = v53;
    static Date.now.getter(v36);
    sub_1000A1000(v35, (uint64_t *)&unk_1002103D0);
    goto LABEL_13;
  }
LABEL_15:
  v39 = static os_log_type_t.default.getter(v23);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v40 = qword_100218DE8;
  v41 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v42 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v42 + 16) = xmmword_100184870;
  v43 = v16;
  v44 = objc_msgSend(v43, "description");
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v47 = v46;

  *(_QWORD *)(v42 + 56) = &type metadata for String;
  *(_QWORD *)(v42 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v42 + 32) = v45;
  *(_QWORD *)(v42 + 40) = v47;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Retry cloud upload for deferred aaProxCardsRecord: %@", 53, 2, v42);
  swift_bridgeObjectRelease(v42);
  v48 = v55;
  v49 = sub_10012A6A0();
  v50 = swift_allocObject(&unk_1001EB580, 24, 7);
  swift_weakInit(v50 + 16, v48);
  swift_retain(v50);
  sub_1000F8080(isa, 0, (uint64_t)sub_100165E5C, v50);
  swift_unknownObjectRelease(v49);
  swift_release_n(v50, 2);
LABEL_18:

}

uint64_t sub_1001381C8(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  uint64_t v35;
  _BYTE v36[24];

  v31 = a6;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v36, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v19 = result;
    v30 = v12;
    v20 = *(void **)(result + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v21 = swift_allocObject(a4, 40, 7);
    *(_QWORD *)(v21 + 16) = a1;
    v22 = a2 & 1;
    *(_BYTE *)(v21 + 24) = v22;
    *(_QWORD *)(v21 + 32) = v19;
    aBlock[4] = a5;
    v35 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    aBlock[3] = v31;
    v23 = _Block_copy(aBlock);
    v24 = v20;
    sub_1000FEC54(a1, v22);
    v25 = swift_retain(v19);
    static DispatchQoS.unspecified.getter(v25);
    v33 = _swiftEmptyArrayStorage;
    v26 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_1000A0980(&qword_100211D00);
    v28 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v27, v28, v11, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v23);
    _Block_release(v23);
    swift_release(v19);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v11);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v32);
    return swift_release(v35);
  }
  return result;
}

void sub_100138414(void *a1, char a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  if ((a2 & 1) != 0)
  {
    v8 = swift_errorRetain(a1);
    v9 = static os_log_type_t.error.getter(v8);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v10 = qword_100218DE8;
    v11 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100184870;
    v17 = a1;
    swift_errorRetain(a1);
    v13 = sub_1000A0980(&qword_100210710);
    v14 = String.init<A>(describing:)(&v17, v13);
    v16 = v15;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    *(_QWORD *)(v12 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v12 + 32) = v14;
    *(_QWORD *)(v12 + 40) = v16;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, a4, a5, 2, v12);
    swift_bridgeObjectRelease(v12);
    sub_100104E50(a1, 1);
  }
  else
  {
    sub_1001303C0(a1, (uint64_t)_swiftEmptyArrayStorage, 0);
    sub_100104E50(a1, 0);
  }
}

uint64_t sub_100138580(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v23 - v10;
  sub_100129768((uint64_t)v23 - v10);
  LODWORD(v2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2);
  v12 = sub_1000A1000((uint64_t)v11, (uint64_t *)&unk_1002122E0);
  if ((_DWORD)v2 == 1)
  {
    sub_1000B13BC(a1, (uint64_t)v5);
    v13 = sub_100129690();
    __chkstk_darwin(v13);
    v23[-2] = v14;
    v23[-1] = v5;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001685E4, &v23[-4], &type metadata for () + 1);
    sub_1000AE58C((uint64_t)v5, type metadata accessor for LegacyAccountMagicKeysRecord);
    return swift_release(v13);
  }
  else
  {
    v16 = static os_log_type_t.default.getter(v12);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v17 = qword_100218DE8;
    v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100184870;
    sub_100129768((uint64_t)v8);
    v20 = String.init<A>(describing:)(v8, v6);
    v22 = v21;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v19 + 32) = v20;
    *(_QWORD *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Account keys already set: %@", 28, 2, v19);
    return swift_bridgeObjectRelease(v19);
  }
}

uint64_t sub_1001388B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[15];
  uint64_t v21;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v20[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_1000A0980((uint64_t *)&unk_1002122E0);
  __chkstk_darwin(v4);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100129768((uint64_t)v6);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_1000A1000((uint64_t)v6, (uint64_t *)&unk_1002122E0);
  v12 = sub_1000C6CD0((uint64_t)v6, (uint64_t)v10, type metadata accessor for LegacyAccountMagicKeysRecord);
  v13 = static os_log_type_t.default.getter(v12);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_100218DE8, "Deleting account magic keys", 27, 2, _swiftEmptyArrayStorage);
  v14 = sub_100129690();
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  if (qword_100210148 != -1)
    swift_once(&qword_100210148, sub_1000B0C18);
  v18 = sub_1000A0A00(v0, (uint64_t)qword_100218C68);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v1 + 16))(v3, v18, v0);
  __chkstk_darwin(v19);
  *(_QWORD *)&v20[-32] = v14;
  *(_QWORD *)&v20[-24] = v15;
  *(_QWORD *)&v20[-16] = v17;
  *(_QWORD *)&v20[-8] = v3;
  OS_dispatch_queue.sync<A>(execute:)(&v21, sub_1001684A0, &v20[-48], &type metadata for Bool);
  swift_release(v14);
  swift_bridgeObjectRelease(v17);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  return sub_1000AE58C((uint64_t)v10, type metadata accessor for LegacyAccountMagicKeysRecord);
}

void sub_100138B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  void *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(void);
  uint64_t v145;
  uint64_t v146;
  _QWORD v147[2];
  ValueMetadata *v148;
  unint64_t v149;

  v143 = a6;
  v144 = a5;
  v123 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v123);
  v126 = (_QWORD *)((char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v125 = type metadata accessor for MagicPairingSettingsRecord(0);
  v124 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v122 = (uint64_t)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v128);
  v131 = (_QWORD *)((char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130 = type metadata accessor for DeviceSupportInformationRecord(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v127 = (uint64_t)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for URL(0);
  v140 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v139 = (char *)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v121 - v16;
  __chkstk_darwin(v18);
  v141 = (char *)&v121 - v19;
  v135 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v135);
  v138 = (char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DeviceRecord(0);
  v136 = *(_QWORD *)(v21 - 8);
  v137 = v21;
  __chkstk_darwin(v21);
  v132 = (uint64_t)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = static os_log_type_t.default.getter(v23);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v25 = qword_100218DE8;
  v133 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v26 = swift_allocObject(v133, 112, 7);
  v121 = xmmword_1001858F0;
  *(_OWORD *)(v26 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  v27 = sub_1000A0DF4();
  *(_QWORD *)(v26 + 32) = a3;
  *(_QWORD *)(v26 + 40) = a4;
  *(_QWORD *)(v26 + 96) = &type metadata for String;
  *(_QWORD *)(v26 + 104) = v27;
  v134 = v27;
  *(_QWORD *)(v26 + 64) = v27;
  *(_QWORD *)(v26 + 72) = a1;
  v145 = a1;
  *(_QWORD *)(v26 + 80) = a2;
  swift_bridgeObjectRetain(a4);
  v146 = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "CloudSync: Remove device record type: %@ with address: %@", 57, 2, v26);
  swift_bridgeObjectRelease(v26);
  if (a3 == 0x6552656369766544 && a4 == 0xEC00000064726F63
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544, 0xEC00000064726F63, a3, a4, 0) & 1) != 0)
  {
    v28 = v17;
    v29 = sub_100129690();
    if (qword_100210120 != -1)
      swift_once(&qword_100210120, sub_10009C800);
    v30 = v142;
    v31 = sub_1000A0A00(v142, (uint64_t)qword_100218BE0);
    v32 = v140;
    v33 = v141;
    (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v141, v31, v30);
    v34 = objc_autoreleasePoolPush();
    v36 = URL.path.getter(v35);
    v38 = v37;
    v39 = v139;
    URL.appendingPathComponent(_:)(v36);
    swift_bridgeObjectRelease(v38);
    URL.appendingPathComponent(_:)(v145);
    v40 = *(void (**)(char *, uint64_t))(v32 + 8);
    v40(v39, v30);
    objc_autoreleasePoolPop(v34);
    v41 = objc_autoreleasePoolPush();
    __chkstk_darwin(v41);
    *((_QWORD *)&v121 - 2) = v28;
    *((_QWORD *)&v121 - 1) = v29;
    v42 = v138;
    OS_dispatch_queue.sync<A>(execute:)(v138, sub_1001685D0, &v121 - 2, v135);
    objc_autoreleasePoolPop(v41);
    v40(v28, v30);
    swift_release(v29);
    v40(v33, v30);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v136 + 48))(v42, 1, v137) == 1)
    {
      v43 = sub_1000A1000((uint64_t)v42, &qword_100210CF8);
      v44 = static os_log_type_t.error.getter(v43);
      v45 = qword_100218DE8;
      v46 = swift_allocObject(v133, 72, 7);
      *(_OWORD *)(v46 + 16) = xmmword_100184870;
      v47 = v134;
      *(_QWORD *)(v46 + 56) = &type metadata for String;
      *(_QWORD *)(v46 + 64) = v47;
      *(_QWORD *)(v46 + 32) = v145;
      v48 = v146;
      *(_QWORD *)(v46 + 40) = v146;
      swift_bridgeObjectRetain(v48);
      os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "Device Record not found to remove: %@", 37, 2, v46);
LABEL_26:
      v91 = v46;
LABEL_27:
      swift_bridgeObjectRelease(v91);
      ((void (*)(_QWORD))v144)(0);
      return;
    }
    v49 = type metadata accessor for DeviceRecord;
    v50 = v132;
    sub_1000C6CD0((uint64_t)v42, v132, type metadata accessor for DeviceRecord);
    sub_100139A3C(v50, (uint64_t (*)(_QWORD))v144, v143);
    goto LABEL_29;
  }
  if (a3 == 0xD00000000000001ELL && a4 == 0x80000001001AA950
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001AA950, a3, a4, 0) & 1) != 0)
  {
    v51 = v17;
    v52 = v140;
    v53 = sub_100129690();
    if (qword_100210180 != -1)
      swift_once(&qword_100210180, sub_1000DA4F0);
    v54 = v142;
    v55 = sub_1000A0A00(v142, (uint64_t)qword_100218D28);
    v56 = v52;
    v57 = v141;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v141, v55, v54);
    v58 = objc_autoreleasePoolPush();
    v60 = URL.path.getter(v59);
    v62 = v61;
    v63 = v139;
    URL.appendingPathComponent(_:)(v60);
    swift_bridgeObjectRelease(v62);
    URL.appendingPathComponent(_:)(v145);
    v64 = *(void (**)(char *, uint64_t))(v56 + 8);
    v64(v63, v54);
    objc_autoreleasePoolPop(v58);
    v65 = objc_autoreleasePoolPush();
    __chkstk_darwin(v65);
    *((_QWORD *)&v121 - 2) = v51;
    *((_QWORD *)&v121 - 1) = v53;
    v66 = v131;
    OS_dispatch_queue.sync<A>(execute:)(v131, sub_1001685BC, &v121 - 2, v128);
    objc_autoreleasePoolPop(v65);
    v64(v51, v54);
    swift_release(v53);
    v64(v57, v54);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v129 + 48))(v66, 1, v130) == 1)
    {
      v67 = sub_1000A1000((uint64_t)v66, &qword_100210CE8);
      v68 = static os_log_type_t.error.getter(v67);
      v69 = qword_100218DE8;
      v46 = swift_allocObject(v133, 72, 7);
      *(_OWORD *)(v46 + 16) = xmmword_100184870;
      v70 = v134;
      *(_QWORD *)(v46 + 56) = &type metadata for String;
      *(_QWORD *)(v46 + 64) = v70;
      *(_QWORD *)(v46 + 32) = v145;
      v71 = v146;
      *(_QWORD *)(v46 + 40) = v146;
      swift_bridgeObjectRetain(v71);
      os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Support Info Record not found to remove: %@", 43, 2, v46);
      goto LABEL_26;
    }
    v49 = type metadata accessor for DeviceSupportInformationRecord;
    v50 = v127;
    sub_1000C6CD0((uint64_t)v66, v127, type metadata accessor for DeviceSupportInformationRecord);
    sub_10013F7C4(v50, (void (*)(_QWORD))v144, v143);
    goto LABEL_29;
  }
  v72 = v146;
  if (a3 == 0x746553636967614DLL && a4 == 0xED000073676E6974
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974, a3, a4, 0) & 1) != 0)
  {
    v73 = sub_100129690();
    if (qword_100210160 != -1)
      swift_once(&qword_100210160, sub_1000C81B8);
    v74 = v142;
    v75 = sub_1000A0A00(v142, (uint64_t)qword_100218C90);
    v76 = v140;
    v77 = v141;
    (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v141, v75, v74);
    v138 = (char *)objc_autoreleasePoolPush();
    v79 = URL.path.getter(v78);
    v81 = v80;
    v82 = v139;
    URL.appendingPathComponent(_:)(v79);
    swift_bridgeObjectRelease(v81);
    URL.appendingPathComponent(_:)(v145);
    v83 = *(void (**)(char *, uint64_t))(v76 + 8);
    v83(v82, v74);
    objc_autoreleasePoolPop(v138);
    v84 = objc_autoreleasePoolPush();
    __chkstk_darwin(v84);
    *((_QWORD *)&v121 - 2) = v17;
    *((_QWORD *)&v121 - 1) = v73;
    v85 = v126;
    OS_dispatch_queue.sync<A>(execute:)(v126, sub_1001685A8, &v121 - 2, v123);
    objc_autoreleasePoolPop(v84);
    v83(v17, v74);
    swift_release(v73);
    v83(v77, v74);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v124 + 48))(v85, 1, v125) == 1)
    {
      v86 = sub_1000A1000((uint64_t)v85, (uint64_t *)&unk_100212190);
      v87 = static os_log_type_t.error.getter(v86);
      v88 = qword_100218DE8;
      v46 = swift_allocObject(v133, 72, 7);
      *(_OWORD *)(v46 + 16) = xmmword_100184870;
      v89 = v134;
      *(_QWORD *)(v46 + 56) = &type metadata for String;
      *(_QWORD *)(v46 + 64) = v89;
      *(_QWORD *)(v46 + 32) = v145;
      v90 = v146;
      *(_QWORD *)(v46 + 40) = v146;
      swift_bridgeObjectRetain(v90);
      os_log(_:dso:log:_:_:)(v87, &_mh_execute_header, v88, "Magic Record not found to remove: %@", 36, 2, v46);
      goto LABEL_26;
    }
    v49 = type metadata accessor for MagicPairingSettingsRecord;
    v50 = v122;
    sub_1000C6CD0((uint64_t)v85, v122, type metadata accessor for MagicPairingSettingsRecord);
    sub_100145FB0(v50, 0, (uint64_t (*)(_QWORD))v144, v143);
LABEL_29:
    sub_1000AE58C(v50, v49);
    return;
  }
  if ((a3 != 0x6563697665444141 || a4 != 0xEE0064726F636552)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141, 0xEE0064726F636552, a3, a4, 0) & 1) == 0)
  {
    if (a3 != 0xD000000000000011 || a4 != 0x80000001001B1050)
    {
      v101 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001B1050, a3, a4, 0);
      if ((v101 & 1) == 0)
        goto LABEL_46;
    }
    goto LABEL_41;
  }
  v148 = &type metadata for AudioAccessoryFeatures;
  v149 = sub_1000A42C4();
  v92 = isFeatureEnabled(_:)(v147);
  sub_1000A2140(v147);
  if ((v92 & 1) == 0)
  {
LABEL_41:
    v148 = &type metadata for AudioAccessoryFeatures;
    v149 = sub_1000A42C4();
    v102 = isFeatureEnabled(_:)(v147);
    v101 = sub_1000A2140(v147);
    if ((v102 & 1) != 0)
    {
      v103 = sub_100129690();
      if (qword_100210130 != -1)
        swift_once(&qword_100210130, sub_1000A5BC0);
      v104 = v142;
      v105 = sub_1000A0A00(v142, (uint64_t)qword_100218C00);
      v107 = v140;
      v106 = (uint64_t)v141;
      (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v141, v105, v104);
      v108 = v145;
      v109 = (void *)sub_100127638(v145, v72, v106, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
      swift_release(v103);
      v110 = (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 8))(v106, v104);
      if (!v109)
      {
        v118 = static os_log_type_t.error.getter(v110);
        v119 = qword_100218DE8;
        v46 = swift_allocObject(v133, 72, 7);
        *(_OWORD *)(v46 + 16) = xmmword_100184870;
        v120 = v134;
        *(_QWORD *)(v46 + 56) = &type metadata for String;
        *(_QWORD *)(v46 + 64) = v120;
        *(_QWORD *)(v46 + 32) = v108;
        *(_QWORD *)(v46 + 40) = v72;
        swift_bridgeObjectRetain(v72);
        os_log(_:dso:log:_:_:)(v118, &_mh_execute_header, v119, "AAProxCardsRecord not found to remove: %@", 41, 2, v46);
        goto LABEL_26;
      }
      sub_10014249C(v109, v144, v143);

      return;
    }
LABEL_46:
    v111 = static os_log_type_t.error.getter(v101);
    v112 = qword_100218DE8;
    v113 = swift_allocObject(v133, 112, 7);
    *(_OWORD *)(v113 + 16) = v121;
    v114 = v134;
    *(_QWORD *)(v113 + 56) = &type metadata for String;
    *(_QWORD *)(v113 + 64) = v114;
    *(_QWORD *)(v113 + 32) = a3;
    *(_QWORD *)(v113 + 40) = a4;
    *(_QWORD *)(v113 + 96) = &type metadata for String;
    *(_QWORD *)(v113 + 104) = v114;
    *(_QWORD *)(v113 + 72) = v145;
    *(_QWORD *)(v113 + 80) = v72;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v72);
    os_log(_:dso:log:_:_:)(v111, &_mh_execute_header, v112, "Unknown record type: %@ for address: %@", 39, 2, v113);
    v91 = v113;
    goto LABEL_27;
  }
  v93 = sub_100129690();
  if (qword_1002101B0 != -1)
    swift_once(&qword_1002101B0, sub_100106014);
  v94 = v142;
  v95 = sub_1000A0A00(v142, (uint64_t)qword_100218D68);
  v97 = v140;
  v96 = (uint64_t)v141;
  (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v141, v95, v94);
  v98 = v145;
  v99 = (void *)sub_100127638(v145, v72, v96, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
  swift_release(v93);
  v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 8))(v96, v94);
  if (!v99)
  {
    v115 = static os_log_type_t.error.getter(v100);
    v116 = qword_100218DE8;
    v46 = swift_allocObject(v133, 72, 7);
    *(_OWORD *)(v46 + 16) = xmmword_100184870;
    v117 = v134;
    *(_QWORD *)(v46 + 56) = &type metadata for String;
    *(_QWORD *)(v46 + 64) = v117;
    *(_QWORD *)(v46 + 32) = v98;
    *(_QWORD *)(v46 + 40) = v72;
    swift_bridgeObjectRetain(v72);
    os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v116, "AADeviceRecord not found to remove: %@", 38, 2, v46);
    goto LABEL_26;
  }
  sub_100140F24(v99, v144, v143);

}

uint64_t sub_100139A3C(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t *v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  objc_class *v65;
  Class isa;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  objc_class *v73;
  Class v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  double v90;
  int *v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  objc_class *v105;
  Class v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  char *v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(_QWORD);
  void *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  Class v157;

  v4 = v3;
  v145 = a3;
  v146 = a2;
  v138 = type metadata accessor for DispatchPredicate(0);
  v137 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v136 = (uint64_t *)((char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v135 = type metadata accessor for Date(0);
  v133 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v130 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for UUID(0);
  v132 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v129 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v131);
  v140 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v151 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v150 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v153 = (char *)&v123 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v123 - v15;
  v152 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v152);
  v154 = (uint64_t *)((char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for DeviceRecord(0);
  v155 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v125 = (uint64_t)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v123 = (uint64_t)&v123 - v21;
  __chkstk_darwin(v22);
  v128 = (uint64_t)&v123 - v23;
  __chkstk_darwin(v24);
  v126 = (uint64_t)&v123 - v25;
  v124 = v26;
  __chkstk_darwin(v27);
  v139 = (uint64_t *)((char *)&v123 - v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v31 = qword_100218DE8;
  v142 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v32 = swift_allocObject(v142, 72, 7);
  v141 = xmmword_100184870;
  *(_OWORD *)(v32 + 16) = xmmword_100184870;
  v33 = sub_10009C9A8();
  v35 = v34;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  v143 = sub_1000A0DF4();
  *(_QWORD *)(v32 + 64) = v143;
  *(_QWORD *)(v32 + 32) = v33;
  *(_QWORD *)(v32 + 40) = v35;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "CloudSync: Remove device record: %@", 35, 2, v32);
  swift_bridgeObjectRelease(v32);
  v144 = v4;
  v36 = sub_100129690();
  v37 = *(int *)(v18 + 24);
  v156 = a1;
  v38 = (uint64_t *)(a1 + v37);
  v148 = *v38;
  v149 = v18;
  v127 = v38;
  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v39 = v10;
  v40 = sub_1000A0A00(v10, (uint64_t)qword_100218BE0);
  v41 = v151;
  (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(v16, v40, v10);
  v147 = objc_autoreleasePoolPush();
  v43 = URL.path.getter(v42);
  v45 = v44;
  v46 = v150;
  URL.appendingPathComponent(_:)(v43);
  swift_bridgeObjectRelease(v45);
  v47 = (uint64_t)v153;
  URL.appendingPathComponent(_:)(v148);
  v48 = *(void (**)(char *, uint64_t))(v41 + 8);
  v48(v46, v39);
  objc_autoreleasePoolPop(v147);
  v49 = objc_autoreleasePoolPush();
  __chkstk_darwin(v49);
  *(&v123 - 2) = v47;
  *(&v123 - 1) = v36;
  v50 = v154;
  OS_dispatch_queue.sync<A>(execute:)(v154, sub_1001685D0, &v123 - 4, v152);
  objc_autoreleasePoolPop(v49);
  v48((char *)v47, v39);
  swift_release(v36);
  v48(v16, v39);
  v51 = v149;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v155 + 48))(v50, 1, v149) == 1)
  {
    v52 = sub_1000A1000((uint64_t)v50, &qword_100210CF8);
    v53 = static os_log_type_t.error.getter(v52);
    v54 = qword_100218DE8;
    v55 = swift_allocObject(v142, 72, 7);
    *(_OWORD *)(v55 + 16) = v141;
    v56 = sub_10009C9A8();
    v57 = v143;
    *(_QWORD *)(v55 + 56) = &type metadata for String;
    *(_QWORD *)(v55 + 64) = v57;
    *(_QWORD *)(v55 + 32) = v56;
    *(_QWORD *)(v55 + 40) = v58;
    os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v54, "Record not found to remove: %@", 30, 2, v55);
    swift_bridgeObjectRelease(v55);
    return v146(0);
  }
  else
  {
    v60 = (uint64_t)v50;
    v61 = v139;
    sub_1000C6CD0(v60, (uint64_t)v139, type metadata accessor for DeviceRecord);
    v62 = objc_autoreleasePoolPush();
    v63 = *v61;
    v64 = v61[1];
    sub_1000A0E74(*v61, v64);
    sub_100109DEC(v63, v64);
    isa = v65;
    sub_1000A103C(v63, v64);
    v67 = v126;
    sub_1000AE548((uint64_t)v61, v126, type metadata accessor for DeviceRecord);
    if (!isa)
      isa = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v67, type metadata accessor for DeviceRecord);
    v68 = (uint64_t)v140;
    v157 = isa;
    sub_10009E74C((id *)&v157);
    objc_autoreleasePoolPop(v62);
    v69 = -[objc_class recordID](isa, "recordID");

    v70 = objc_autoreleasePoolPush();
    v71 = *v61;
    v72 = v61[1];
    sub_1000A0E74(*v61, v72);
    sub_100109DEC(v71, v72);
    v74 = v73;
    sub_1000A103C(v71, v72);
    v75 = v128;
    sub_1000AE548((uint64_t)v61, v128, type metadata accessor for DeviceRecord);
    if (!v74)
      v74 = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v75, type metadata accessor for DeviceRecord);
    v157 = v74;
    sub_10009E74C((id *)&v157);
    objc_autoreleasePoolPop(v70);
    v77 = CKRecord.recordType.getter(v76);
    v79 = v78;

    v80 = v144;
    sub_10013A5F4(v69, v77, v79, 0);

    swift_bridgeObjectRelease(v79);
    v81 = v156 + *(int *)(v51 + 20);
    v82 = v132;
    v83 = v129;
    v84 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v129, v81, v134);
    v86 = *v127;
    v85 = v127[1];
    v87 = swift_bridgeObjectRetain(v85);
    v88 = v130;
    v89 = Date.init()(v87);
    v90 = Date.timeIntervalSince1970.getter(v89);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v88, v135);
    *(_BYTE *)v68 = 1;
    strcpy((char *)(v68 + 8), "DeviceRecord");
    *(_BYTE *)(v68 + 21) = 0;
    *(_WORD *)(v68 + 22) = -5120;
    v91 = (int *)v131;
    (*(void (**)(uint64_t, char *, uint64_t))(v82 + 32))(v68 + *(int *)(v131 + 24), v83, v84);
    v92 = (_QWORD *)(v68 + v91[7]);
    *v92 = v86;
    v92[1] = v85;
    *(double *)(v68 + v91[8]) = v90;
    *(_OWORD *)(v68 + v91[9]) = xmmword_100187E30;
    v93 = objc_autoreleasePoolPush();
    sub_100146F6C(v80, v68);
    objc_autoreleasePoolPop(v93);
    v94 = sub_10012A6A0();
    v95 = *(void **)(v94 + 72);
    v96 = v136;
    *v136 = v95;
    v97 = v137;
    v98 = v138;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v137 + 104))(v96, enum case for DispatchPredicate.notOnQueue(_:), v138);
    v99 = v95;
    LOBYTE(v86) = _dispatchPreconditionTest(_:)(v96);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v97 + 8))(v96, v98);
    if ((v86 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v157, sub_100165060, v94, &type metadata for Bool);
      v100 = swift_unknownObjectRelease(v94);
      if (v157 == 1)
      {
        v101 = sub_10012A6A0();
        v102 = objc_autoreleasePoolPush();
        v103 = *v61;
        v104 = v61[1];
        sub_1000A0E74(*v61, v104);
        sub_100109DEC(v103, v104);
        v106 = v105;
        sub_1000A103C(v103, v104);
        v107 = v123;
        sub_1000AE548((uint64_t)v61, v123, type metadata accessor for DeviceRecord);
        if (!v106)
          v106 = sub_1000A9BCC().super.isa;
        sub_1000AE58C(v107, type metadata accessor for DeviceRecord);
        v157 = v106;
        sub_10009E74C((id *)&v157);
        objc_autoreleasePoolPop(v102);
        v108 = -[objc_class recordID](v106, "recordID");

        v109 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v109 + 16, v144);
        v110 = v125;
        sub_1000AE548((uint64_t)v61, v125, type metadata accessor for DeviceRecord);
        v111 = *(unsigned __int8 *)(v155 + 80);
        v112 = (v111 + 16) & ~v111;
        v113 = (v124 + v112 + 7) & 0xFFFFFFFFFFFFFFF8;
        v114 = swift_allocObject(&unk_1001EBEB8, v113 + 8, v111 | 7);
        sub_1000C6CD0(v110, v114 + v112, type metadata accessor for DeviceRecord);
        *(_QWORD *)(v114 + v113) = v109;
        v115 = swift_allocObject(&unk_1001EBEE0, 49, 7);
        *(_QWORD *)(v115 + 16) = v101;
        *(_QWORD *)(v115 + 24) = v108;
        *(_QWORD *)(v115 + 32) = sub_100165D40;
        *(_QWORD *)(v115 + 40) = v114;
        *(_BYTE *)(v115 + 48) = 1;
        swift_retain(v109);
        swift_unknownObjectRetain(v101);
        v116 = v108;
        swift_retain(v114);
        sub_1000F7A44((uint64_t)sub_100164E44, v115);
        swift_release(v109);
        swift_release(v114);
        swift_unknownObjectRelease(v101);

        swift_release(v115);
      }
      else
      {
        v117 = static os_log_type_t.error.getter(v100);
        v118 = qword_100218DE8;
        v119 = swift_allocObject(v142, 72, 7);
        *(_OWORD *)(v119 + 16) = v141;
        v120 = sub_10009C9A8();
        v121 = v143;
        *(_QWORD *)(v119 + 56) = &type metadata for String;
        *(_QWORD *)(v119 + 64) = v121;
        *(_QWORD *)(v119 + 32) = v120;
        *(_QWORD *)(v119 + 40) = v122;
        os_log(_:dso:log:_:_:)(v117, &_mh_execute_header, v118, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v119);
        swift_bridgeObjectRelease(v119);
      }
      v146(0);
      sub_1000AE58C(v68, type metadata accessor for BTDeferredRecord);
      return sub_1000AE58C((uint64_t)v61, type metadata accessor for DeviceRecord);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_10013A5F4(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  void *v214;
  void *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  id v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char v234;
  id v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  id v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char v254;
  uint64_t v255;
  id v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  char v263;
  uint64_t v264;
  id v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  id v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  id v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  char *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  int v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD aBlock[3];
  ValueMetadata *v336;
  uint64_t (*v337)();
  uint64_t v338;

  v324 = a4;
  v330 = a2;
  v331 = a3;
  v299 = type metadata accessor for DispatchWorkItemFlags(0);
  v298 = *(_QWORD *)(v299 - 8);
  __chkstk_darwin(v299);
  v297 = (char *)&v292 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v296 = type metadata accessor for DispatchQoS(0);
  v295 = *(_QWORD *)(v296 - 8);
  __chkstk_darwin(v296);
  v294 = (char *)&v292 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v7);
  v305 = (uint64_t)&v292 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v304 = type metadata accessor for SoundProfileRecord(0);
  v303 = *(_QWORD *)(v304 - 8);
  __chkstk_darwin(v304);
  v302 = (uint64_t)&v292 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v10);
  v312 = (uint64_t)&v292 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v311 = type metadata accessor for MagicPairingSettingsRecord(0);
  v310 = *(_QWORD *)(v311 - 8);
  __chkstk_darwin(v311);
  v309 = (char *)&v292 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v308 = (uint64_t)&v292 - v14;
  v15 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v15);
  v318 = (uint64_t)&v292 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v317 = type metadata accessor for DeviceSupportInformationRecord(0);
  v316 = *(_QWORD *)(v317 - 8);
  __chkstk_darwin(v317);
  v315 = (char *)&v292 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v314 = (uint64_t)&v292 - v19;
  v323 = type metadata accessor for URL(0);
  v321 = *(_QWORD *)(v323 - 8);
  __chkstk_darwin(v323);
  v322 = (char *)&v292 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v21);
  v327 = (uint64_t)&v292 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DeviceRecord(0);
  v326 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v25 = (char *)&v292 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v320 = (uint64_t)&v292 - v27;
  v28 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v28);
  v300 = (char *)&v292 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v301 = (char *)&v292 - v31;
  __chkstk_darwin(v32);
  v307 = (char *)&v292 - v33;
  __chkstk_darwin(v34);
  v313 = (char *)&v292 - v35;
  __chkstk_darwin(v36);
  v319 = (char *)&v292 - v37;
  __chkstk_darwin(v38);
  v40 = (char *)&v292 - v39;
  v41 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v41 - 8);
  v333 = v41;
  v334 = v42;
  __chkstk_darwin(v41);
  v292 = (char *)&v292 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v293 = (char *)&v292 - v45;
  __chkstk_darwin(v46);
  v306 = (char *)&v292 - v47;
  __chkstk_darwin(v48);
  v325 = (char *)&v292 - v49;
  __chkstk_darwin(v50);
  v332 = (char *)&v292 - v51;
  __chkstk_darwin(v52);
  v54 = (char *)&v292 - v53;
  v56 = static os_log_type_t.default.getter(v55);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v57 = qword_100218DE8;
  v328 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v58 = swift_allocObject(v328, 112, 7);
  *(_OWORD *)(v58 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v58 + 56) = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
  *(_QWORD *)(v58 + 64) = sub_100164E60(&qword_100212270, &qword_1002111C0, CKRecordID_ptr);
  *(_QWORD *)(v58 + 32) = a1;
  *(_QWORD *)(v58 + 96) = &type metadata for String;
  v329 = sub_1000A0DF4();
  *(_QWORD *)(v58 + 104) = v329;
  v59 = a1;
  v60 = v330;
  v61 = v331;
  *(_QWORD *)(v58 + 72) = v330;
  *(_QWORD *)(v58 + 80) = v61;
  v62 = v59;
  swift_bridgeObjectRetain(v61);
  os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v57, "Process Cloud delete recordID: %@ recordType: %@", 48, 2, v58);
  swift_bridgeObjectRelease(v58);
  if ((v60 != 0x6552656369766544 || v61 != 0xEC00000064726F63)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544, 0xEC00000064726F63, v60, v61, 0) & 1) == 0)
  {
    v86 = v62;
    v87 = v333;
    if (v60 == 0xD00000000000001ELL && v61 == 0x80000001001AA950
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001AA950, v60, v61, 0) & 1) != 0)
    {
      v88 = objc_msgSend(v62, "recordName");
      v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
      v91 = v90;

      v92 = (uint64_t)v319;
      UUID.init(uuidString:)(v89, v91);
      swift_bridgeObjectRelease(v91);
      v93 = v334;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v334 + 48))(v92, 1, v87) == 1)
      {
        v94 = sub_1000A1000(v92, &qword_1002103E0);
        v95 = static os_log_type_t.error.getter(v94);
        v96 = qword_100218DE8;
        v73 = swift_allocObject(v328, 72, 7);
        *(_OWORD *)(v73 + 16) = xmmword_100184870;
        v97 = objc_msgSend(v86, "recordName");
        v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
        v100 = v99;

        v101 = v329;
        *(_QWORD *)(v73 + 56) = &type metadata for String;
        *(_QWORD *)(v73 + 64) = v101;
        *(_QWORD *)(v73 + 32) = v98;
        *(_QWORD *)(v73 + 40) = v100;
        v102 = "Invalid device support identifier: %@";
LABEL_17:
        v103 = v95;
        v104 = v96;
        v105 = 37;
LABEL_61:
        os_log(_:dso:log:_:_:)(v103, &_mh_execute_header, v104, v102, v105, 2, v73);
        goto LABEL_62;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v332, v92, v87);
      v123 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
      if ((_DWORD)v123)
      {
        v124 = sub_100129690();
        v125 = v316;
        v126 = (uint64_t)v315;
        if (qword_100210180 != -1)
          swift_once(&qword_100210180, sub_1000DA4F0);
        v127 = v323;
        v128 = sub_1000A0A00(v323, (uint64_t)qword_100218D28);
        v129 = v321;
        v130 = (uint64_t)v322;
        (*(void (**)(char *, uint64_t, uint64_t))(v321 + 16))(v322, v128, v127);
        v131 = sub_100128330(v130, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)sub_100154B40, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693E8);
        swift_release(v124);
        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v130, v127);
        v132 = v131[2];
        if (!v132)
          goto LABEL_46;
      }
      else
      {
        v139 = static os_log_type_t.error.getter(v123);
        v131 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)(v139, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage);
        v125 = v316;
        v126 = (uint64_t)v315;
        v132 = _swiftEmptyArrayStorage[2];
        if (!v132)
        {
LABEL_46:
          v142 = 1;
          v143 = v318;
LABEL_48:
          v144 = v317;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56))(v143, v142, 1, v317);
          swift_bridgeObjectRelease(v131);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v143, 1, v144) == 1)
          {
            v145 = sub_1000A1000(v143, &qword_100210CE8);
            v146 = static os_log_type_t.error.getter(v145);
            v147 = qword_100218DE8;
            v148 = swift_allocObject(v328, 72, 7);
            *(_OWORD *)(v148 + 16) = xmmword_100184870;
            v149 = objc_msgSend(v86, "recordName");
            v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
            v152 = v151;

            v153 = v329;
            *(_QWORD *)(v148 + 56) = &type metadata for String;
            *(_QWORD *)(v148 + 64) = v153;
            *(_QWORD *)(v148 + 32) = v150;
            *(_QWORD *)(v148 + 40) = v152;
            os_log(_:dso:log:_:_:)(v146, &_mh_execute_header, v147, "Unable to find cached info record to delete: %@", 47, 2, v148);
            swift_bridgeObjectRelease(v148);
          }
          else
          {
            v154 = v143;
            v155 = v314;
            sub_1000C6CD0(v154, v314, type metadata accessor for DeviceSupportInformationRecord);
            sub_10013CE38(v155, v324 & 1);
            sub_1000AE58C(v155, type metadata accessor for DeviceSupportInformationRecord);
          }
          (*(void (**)(char *, uint64_t))(v334 + 8))(v332, v87);
          return;
        }
      }
      v140 = (uint64_t)v131
           + ((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80));
      v141 = *(_QWORD *)(v125 + 72);
      swift_bridgeObjectRetain(v131);
      while (1)
      {
        sub_1000AE548(v140, v126, type metadata accessor for DeviceSupportInformationRecord);
        if ((static UUID.== infix(_:_:)(v126) & 1) != 0)
          break;
        sub_1000AE58C(v126, type metadata accessor for DeviceSupportInformationRecord);
        v140 += v141;
        if (!--v132)
        {
          swift_bridgeObjectRelease(v131);
          goto LABEL_46;
        }
      }
      swift_bridgeObjectRelease(v131);
      v143 = v318;
      sub_1000C6CD0(v126, v318, type metadata accessor for DeviceSupportInformationRecord);
      v142 = 0;
      goto LABEL_48;
    }
    if (v60 == 0x746553636967614DLL && v61 == 0xED000073676E6974
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974, v60, v61, 0) & 1) != 0)
    {
      v133 = objc_msgSend(v62, "recordName");
      v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
      v136 = v135;

      v137 = (uint64_t)v313;
      UUID.init(uuidString:)(v134, v136);
      swift_bridgeObjectRelease(v136);
      v138 = v334;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v334 + 48))(v137, 1, v87) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v138 + 32))(v325, v137, v87);
        v156 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
        if ((_DWORD)v156)
        {
          v157 = sub_100129690();
          v158 = v310;
          v159 = (uint64_t)v309;
          if (qword_100210160 != -1)
            swift_once(&qword_100210160, sub_1000C81B8);
          v160 = v323;
          v161 = sub_1000A0A00(v323, (uint64_t)qword_100218C90);
          v162 = v321;
          v163 = (uint64_t)v322;
          (*(void (**)(char *, uint64_t, uint64_t))(v321 + 16))(v322, v161, v160);
          v164 = sub_100128330(v163, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
          swift_release(v157);
          (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v163, v160);
        }
        else
        {
          v178 = static os_log_type_t.error.getter(v156);
          v164 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)(v178, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
          v158 = v310;
          v159 = (uint64_t)v309;
        }
        v179 = v164[2];
        if (v179)
        {
          v180 = (uint64_t)v164
               + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
          v181 = *(_QWORD *)(v158 + 72);
          swift_bridgeObjectRetain(v164);
          while (1)
          {
            sub_1000AE548(v180, v159, type metadata accessor for MagicPairingSettingsRecord);
            if ((static UUID.== infix(_:_:)(v159) & 1) != 0)
              break;
            sub_1000AE58C(v159, type metadata accessor for MagicPairingSettingsRecord);
            v180 += v181;
            if (!--v179)
            {
              swift_bridgeObjectRelease(v164);
              goto LABEL_69;
            }
          }
          swift_bridgeObjectRelease(v164);
          v183 = v312;
          sub_1000C6CD0(v159, v312, type metadata accessor for MagicPairingSettingsRecord);
          v182 = 0;
        }
        else
        {
LABEL_69:
          v182 = 1;
          v183 = v312;
        }
        v184 = v311;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 56))(v183, v182, 1, v311);
        swift_bridgeObjectRelease(v164);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v183, 1, v184) == 1)
        {
          v185 = sub_1000A1000(v183, (uint64_t *)&unk_100212190);
          v186 = static os_log_type_t.error.getter(v185);
          v187 = qword_100218DE8;
          v188 = swift_allocObject(v328, 72, 7);
          *(_OWORD *)(v188 + 16) = xmmword_100184870;
          v189 = objc_msgSend(v86, "recordName");
          v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
          v192 = v191;

          v193 = v329;
          *(_QWORD *)(v188 + 56) = &type metadata for String;
          *(_QWORD *)(v188 + 64) = v193;
          *(_QWORD *)(v188 + 32) = v190;
          *(_QWORD *)(v188 + 40) = v192;
          os_log(_:dso:log:_:_:)(v186, &_mh_execute_header, v187, "Unable to find cached magic record to delete: %@", 48, 2, v188);
          swift_bridgeObjectRelease(v188);
        }
        else
        {
          v194 = v308;
          sub_1000C6CD0(v183, v308, type metadata accessor for MagicPairingSettingsRecord);
          sub_10013D41C(v194, v324 & 1);
          sub_1000AE58C(v194, type metadata accessor for MagicPairingSettingsRecord);
        }
        (*(void (**)(char *, uint64_t))(v334 + 8))(v325, v87);
        return;
      }
      goto LABEL_60;
    }
    if (v60 == 0xD000000000000012 && v61 == 0x80000001001AA930
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001AA930, v60, v61, 0) & 1) != 0)
    {
      v165 = objc_msgSend(v62, "recordName");
      v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
      v168 = v167;

      v137 = (uint64_t)v307;
      UUID.init(uuidString:)(v166, v168);
      swift_bridgeObjectRelease(v168);
      v169 = v334;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v334 + 48))(v137, 1, v87) == 1)
      {
LABEL_60:
        v170 = sub_1000A1000(v137, &qword_1002103E0);
        v171 = static os_log_type_t.error.getter(v170);
        v172 = qword_100218DE8;
        v73 = swift_allocObject(v328, 72, 7);
        *(_OWORD *)(v73 + 16) = xmmword_100184870;
        v173 = objc_msgSend(v86, "recordName");
        v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(v173);
        v176 = v175;

        v177 = v329;
        *(_QWORD *)(v73 + 56) = &type metadata for String;
        *(_QWORD *)(v73 + 64) = v177;
        *(_QWORD *)(v73 + 32) = v174;
        *(_QWORD *)(v73 + 40) = v176;
        v102 = "Invalid magic device identifier: %@";
        v103 = v171;
        v104 = v172;
        v105 = 35;
        goto LABEL_61;
      }
      v195 = v306;
      (*(void (**)(char *, uint64_t, uint64_t))(v169 + 32))(v306, v137, v87);
      v196 = v305;
      sub_10012B62C(v305);
      v197 = v304;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v303 + 48))(v196, 1, v304) == 1)
      {
        v198 = sub_1000A1000(v196, &qword_100212230);
      }
      else
      {
        v213 = v302;
        sub_1000C6CD0(v196, v302, type metadata accessor for SoundProfileRecord);
        if ((static UUID.== infix(_:_:)(v213 + *(int *)(v197 + 20)) & 1) != 0)
        {
          sub_10013D9F0(v213, 0);
          if ((v324 & 1) != 0)
          {
            sub_1000AB31C(0, (unint64_t *)&qword_1002119F0, OS_dispatch_queue_ptr);
            v214 = (void *)static OS_dispatch_queue.main.getter();
            v337 = sub_10014EDDC;
            v338 = 0;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_1000E6A24;
            v336 = (ValueMetadata *)&unk_1001EB660;
            v215 = _Block_copy(aBlock);
            v216 = v294;
            static DispatchQoS.unspecified.getter(v215);
            aBlock[0] = _swiftEmptyArrayStorage;
            v217 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v218 = sub_1000A0980(&qword_100211D00);
            v219 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
            v220 = v297;
            v221 = v218;
            v222 = v299;
            dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v221, v219, v299, v217);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v216, v220, v215);
            _Block_release(v215);

            (*(void (**)(char *, uint64_t))(v298 + 8))(v220, v222);
            (*(void (**)(char *, uint64_t))(v295 + 8))(v216, v296);
            v223 = sub_100129690();
            OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100164CA0, v223, &type metadata for () + 1);
            swift_release(v223);
            v195 = v306;
          }
          sub_1000AE58C(v213, type metadata accessor for SoundProfileRecord);
          goto LABEL_107;
        }
        v198 = sub_1000AE58C(v213, type metadata accessor for SoundProfileRecord);
      }
      v224 = static os_log_type_t.error.getter(v198);
      v225 = qword_100218DE8;
      v226 = swift_allocObject(v328, 72, 7);
      *(_OWORD *)(v226 + 16) = xmmword_100184870;
      v227 = objc_msgSend(v86, "recordName");
      v228 = static String._unconditionallyBridgeFromObjectiveC(_:)(v227);
      v230 = v229;

      v231 = v329;
      *(_QWORD *)(v226 + 56) = &type metadata for String;
      *(_QWORD *)(v226 + 64) = v231;
      *(_QWORD *)(v226 + 32) = v228;
      *(_QWORD *)(v226 + 40) = v230;
      os_log(_:dso:log:_:_:)(v224, &_mh_execute_header, v225, "Unable to find cached sound profile record to delete: %@", 56, 2, v226);
      swift_bridgeObjectRelease(v226);
LABEL_107:
      (*(void (**)(char *, uint64_t))(v334 + 8))(v195, v87);
      return;
    }
    if (v60 == 0x6563697665444141 && v61 == 0xEE0064726F636552
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141, 0xEE0064726F636552, v60, v61, 0) & 1) != 0)
    {
      v336 = &type metadata for AudioAccessoryFeatures;
      v199 = sub_1000A42C4();
      v337 = (uint64_t (*)())v199;
      v200 = isFeatureEnabled(_:)(aBlock);
      sub_1000A2140(aBlock);
      if ((v200 & 1) != 0)
      {
        v201 = objc_msgSend(v86, "recordName");
        v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
        v204 = v203;

        v205 = (uint64_t)v301;
        UUID.init(uuidString:)(v202, v204);
        swift_bridgeObjectRelease(v204);
        v206 = v334;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v334 + 48))(v205, 1, v87) == 1)
        {
          v207 = sub_1000A1000(v205, &qword_1002103E0);
          v95 = static os_log_type_t.error.getter(v207);
          v96 = qword_100218DE8;
          v73 = swift_allocObject(v328, 72, 7);
          *(_OWORD *)(v73 + 16) = xmmword_100184870;
          v208 = objc_msgSend(v86, "recordName");
          v209 = static String._unconditionallyBridgeFromObjectiveC(_:)(v208);
          v211 = v210;

          v212 = v329;
          *(_QWORD *)(v73 + 56) = &type metadata for String;
          *(_QWORD *)(v73 + 64) = v212;
          *(_QWORD *)(v73 + 32) = v209;
          *(_QWORD *)(v73 + 40) = v211;
          v102 = "Invalid AADeviceRecord identifier: %@";
          goto LABEL_17;
        }
        v253 = v293;
        (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v293, v205, v87);
        v336 = &type metadata for AudioAccessoryFeatures;
        v337 = (uint64_t (*)())v199;
        v254 = isFeatureEnabled(_:)(aBlock);
        v255 = sub_1000A2140(aBlock);
        if ((v254 & 1) != 0)
        {
          v256 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
          if ((_DWORD)v256)
          {
            v257 = sub_100129690();
            if (qword_1002101B0 != -1)
              swift_once(&qword_1002101B0, sub_100106014);
            v258 = v323;
            v259 = sub_1000A0A00(v323, (uint64_t)qword_100218D68);
            v260 = v321;
            v261 = (uint64_t)v322;
            (*(void (**)(char *, uint64_t, uint64_t))(v321 + 16))(v322, v259, v258);
            v262 = (_QWORD *)sub_100127B2C(v261, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
            swift_release(v257);
            v255 = (*(uint64_t (**)(uint64_t, uint64_t))(v260 + 8))(v261, v258);
          }
          else
          {
            v272 = static os_log_type_t.error.getter(v256);
            v262 = _swiftEmptyArrayStorage;
            v255 = os_log(_:dso:log:_:_:)(v272, &_mh_execute_header, qword_100218DE8, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
          }
        }
        else
        {
          v262 = _swiftEmptyArrayStorage;
        }
        __chkstk_darwin(v255);
        *(&v292 - 2) = v253;
        v273 = sub_1001111F0((uint64_t (*)(id *))sub_100164EE0, (uint64_t)(&v292 - 4), (uint64_t)v262);
        v274 = swift_bridgeObjectRelease(v262);
        if (v273)
        {
          sub_10013DFC0(v273, v324 & 1);
LABEL_116:
          (*(void (**)(char *, uint64_t))(v334 + 8))(v253, v87);

          return;
        }
        v275 = static os_log_type_t.error.getter(v274);
        v276 = qword_100218DE8;
        v277 = swift_allocObject(v328, 72, 7);
        *(_OWORD *)(v277 + 16) = xmmword_100184870;
        v278 = objc_msgSend(v86, "recordName");
        v279 = static String._unconditionallyBridgeFromObjectiveC(_:)(v278);
        v281 = v280;

        v282 = v329;
        *(_QWORD *)(v277 + 56) = &type metadata for String;
        *(_QWORD *)(v277 + 64) = v282;
        *(_QWORD *)(v277 + 32) = v279;
        *(_QWORD *)(v277 + 40) = v281;
        os_log(_:dso:log:_:_:)(v275, &_mh_execute_header, v276, "Unable to find cached AADeviceRecord to delete: %@", 50, 2, v277);
        goto LABEL_118;
      }
    }
    else if (v60 != 0xD000000000000011 || v61 != 0x80000001001B1050)
    {
      v232 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001B1050, v60, v61, 0);
      if ((v232 & 1) == 0)
        goto LABEL_94;
    }
    v336 = &type metadata for AudioAccessoryFeatures;
    v233 = sub_1000A42C4();
    v337 = (uint64_t (*)())v233;
    v234 = isFeatureEnabled(_:)(aBlock);
    v232 = sub_1000A2140(aBlock);
    if ((v234 & 1) != 0)
    {
      v235 = objc_msgSend(v86, "recordName");
      v236 = static String._unconditionallyBridgeFromObjectiveC(_:)(v235);
      v238 = v237;

      v239 = v236;
      v240 = (uint64_t)v300;
      UUID.init(uuidString:)(v239, v238);
      swift_bridgeObjectRelease(v238);
      v241 = v334;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v334 + 48))(v240, 1, v87) == 1)
      {
        v242 = sub_1000A1000(v240, &qword_1002103E0);
        v243 = static os_log_type_t.error.getter(v242);
        v244 = qword_100218DE8;
        v73 = swift_allocObject(v328, 72, 7);
        *(_OWORD *)(v73 + 16) = xmmword_100184870;
        v245 = objc_msgSend(v86, "recordName");
        v246 = static String._unconditionallyBridgeFromObjectiveC(_:)(v245);
        v248 = v247;

        v249 = v329;
        *(_QWORD *)(v73 + 56) = &type metadata for String;
        *(_QWORD *)(v73 + 64) = v249;
        *(_QWORD *)(v73 + 32) = v246;
        *(_QWORD *)(v73 + 40) = v248;
        os_log(_:dso:log:_:_:)(v243, &_mh_execute_header, v244, "Invalid AAProxCardsRecord identifier: %@", 40, 2, v73);
        goto LABEL_62;
      }
      v253 = v292;
      (*(void (**)(char *, uint64_t, uint64_t))(v241 + 32))(v292, v240, v87);
      v336 = &type metadata for AudioAccessoryFeatures;
      v337 = (uint64_t (*)())v233;
      v263 = isFeatureEnabled(_:)(aBlock);
      v264 = sub_1000A2140(aBlock);
      if ((v263 & 1) != 0)
      {
        v265 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
        if ((_DWORD)v265)
        {
          v266 = sub_100129690();
          if (qword_100210130 != -1)
            swift_once(&qword_100210130, sub_1000A5BC0);
          v267 = v323;
          v268 = sub_1000A0A00(v323, (uint64_t)qword_100218C00);
          v269 = v321;
          v270 = (uint64_t)v322;
          (*(void (**)(char *, uint64_t, uint64_t))(v321 + 16))(v322, v268, v267);
          v271 = (_QWORD *)sub_100127B2C(v270, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
          swift_release(v266);
          v264 = (*(uint64_t (**)(uint64_t, uint64_t))(v269 + 8))(v270, v267);
        }
        else
        {
          v283 = static os_log_type_t.error.getter(v265);
          v271 = _swiftEmptyArrayStorage;
          v264 = os_log(_:dso:log:_:_:)(v283, &_mh_execute_header, qword_100218DE8, "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
        }
      }
      else
      {
        v271 = _swiftEmptyArrayStorage;
      }
      __chkstk_darwin(v264);
      *(&v292 - 2) = v253;
      v273 = sub_1001111F0((uint64_t (*)(id *))sub_100164EA0, (uint64_t)(&v292 - 4), (uint64_t)v271);
      v284 = swift_bridgeObjectRelease(v271);
      if (v273)
      {
        sub_10013E574(v273, v324 & 1);
        goto LABEL_116;
      }
      v285 = static os_log_type_t.error.getter(v284);
      v286 = qword_100218DE8;
      v277 = swift_allocObject(v328, 72, 7);
      *(_OWORD *)(v277 + 16) = xmmword_100184870;
      v287 = objc_msgSend(v86, "recordName");
      v288 = static String._unconditionallyBridgeFromObjectiveC(_:)(v287);
      v290 = v289;

      v291 = v329;
      *(_QWORD *)(v277 + 56) = &type metadata for String;
      *(_QWORD *)(v277 + 64) = v291;
      *(_QWORD *)(v277 + 32) = v288;
      *(_QWORD *)(v277 + 40) = v290;
      os_log(_:dso:log:_:_:)(v285, &_mh_execute_header, v286, "Unable to find cached AAProxCardsRecord to delete: %@", 53, 2, v277);
LABEL_118:
      swift_bridgeObjectRelease(v277);
      (*(void (**)(char *, uint64_t))(v334 + 8))(v253, v87);
      return;
    }
LABEL_94:
    v250 = static os_log_type_t.error.getter(v232);
    v251 = qword_100218DE8;
    v73 = swift_allocObject(v328, 72, 7);
    *(_OWORD *)(v73 + 16) = xmmword_100184870;
    v252 = v329;
    *(_QWORD *)(v73 + 56) = &type metadata for String;
    *(_QWORD *)(v73 + 64) = v252;
    *(_QWORD *)(v73 + 32) = v60;
    *(_QWORD *)(v73 + 40) = v61;
    swift_bridgeObjectRetain(v61);
    os_log(_:dso:log:_:_:)(v250, &_mh_execute_header, v251, "Ignoring record delete for unknown record type: %@", 50, 2, v73);
    goto LABEL_62;
  }
  v63 = v62;
  v64 = objc_msgSend(v62, "recordName");
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  v67 = v66;

  UUID.init(uuidString:)(v65, v67);
  swift_bridgeObjectRelease(v67);
  v69 = v333;
  v68 = v334;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v334 + 48))(v40, 1, v333) == 1)
  {
    v70 = sub_1000A1000((uint64_t)v40, &qword_1002103E0);
    v71 = static os_log_type_t.error.getter(v70);
    v72 = qword_100218DE8;
    v73 = swift_allocObject(v328, 72, 7);
    *(_OWORD *)(v73 + 16) = xmmword_100184870;
    v74 = objc_msgSend(v63, "recordName");
    v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
    v77 = v76;

    v78 = v329;
    *(_QWORD *)(v73 + 56) = &type metadata for String;
    *(_QWORD *)(v73 + 64) = v78;
    *(_QWORD *)(v73 + 32) = v75;
    *(_QWORD *)(v73 + 40) = v77;
    os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "Invalid device identifier: %@", 29, 2, v73);
LABEL_62:
    swift_bridgeObjectRelease(v73);
    return;
  }
  v332 = v63;
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v54, v40, v69);
  v79 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((_DWORD)v79)
  {
    v80 = sub_100129690();
    if (qword_100210120 != -1)
      swift_once(&qword_100210120, sub_10009C800);
    v81 = v323;
    v82 = sub_1000A0A00(v323, (uint64_t)qword_100218BE0);
    v83 = v321;
    v84 = (uint64_t)v322;
    (*(void (**)(char *, uint64_t, uint64_t))(v321 + 16))(v322, v82, v81);
    v85 = sub_100128330(v84, &qword_100210CF8, type metadata accessor for DeviceRecord, (uint64_t)sub_100154AD0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693D4);
    swift_release(v80);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v81);
  }
  else
  {
    v106 = static os_log_type_t.error.getter(v79);
    v85 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v106, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
  }
  v107 = v85[2];
  v108 = v326;
  if (v107)
  {
    v109 = (uint64_t)v85
         + ((*(unsigned __int8 *)(v326 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v326 + 80));
    v110 = *(_QWORD *)(v326 + 72);
    swift_bridgeObjectRetain(v85);
    while (1)
    {
      sub_1000AE548(v109, (uint64_t)v25, type metadata accessor for DeviceRecord);
      if ((static UUID.== infix(_:_:)(&v25[*(int *)(v23 + 20)]) & 1) != 0)
        break;
      sub_1000AE58C((uint64_t)v25, type metadata accessor for DeviceRecord);
      v109 += v110;
      if (!--v107)
      {
        swift_bridgeObjectRelease(v85);
        v111 = 1;
        v69 = v333;
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease(v85);
    v112 = v327;
    sub_1000C6CD0((uint64_t)v25, v327, type metadata accessor for DeviceRecord);
    v111 = 0;
    v69 = v333;
  }
  else
  {
    v111 = 1;
LABEL_25:
    v112 = v327;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v112, v111, 1, v23);
  swift_bridgeObjectRelease(v85);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v112, 1, v23) == 1)
  {
    v113 = sub_1000A1000(v112, &qword_100210CF8);
    v114 = static os_log_type_t.error.getter(v113);
    v115 = qword_100218DE8;
    v116 = swift_allocObject(v328, 72, 7);
    *(_OWORD *)(v116 + 16) = xmmword_100184870;
    v117 = objc_msgSend(v332, "recordName");
    v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
    v120 = v119;

    v121 = v329;
    *(_QWORD *)(v116 + 56) = &type metadata for String;
    *(_QWORD *)(v116 + 64) = v121;
    *(_QWORD *)(v116 + 32) = v118;
    *(_QWORD *)(v116 + 40) = v120;
    os_log(_:dso:log:_:_:)(v114, &_mh_execute_header, v115, "Unable to find cached record to delete: %@", 42, 2, v116);
    swift_bridgeObjectRelease(v116);
  }
  else
  {
    v122 = v320;
    sub_1000C6CD0(v112, v320, type metadata accessor for DeviceRecord);
    sub_10013C868(v122, v324 & 1);
    sub_1000AE58C(v122, type metadata accessor for DeviceRecord);
  }
  (*(void (**)(char *, uint64_t))(v334 + 8))(v54, v69);
}

uint64_t sub_10013C64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  if (a1)
  {
    v4 = swift_errorRetain(a1);
    v5 = static os_log_type_t.error.getter(v4);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v6 = qword_100218DE8;
    v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100184870;
    v24[0] = a1;
    swift_errorRetain(a1);
    v9 = sub_1000A0980(&qword_100210710);
    v10 = String.init<A>(describing:)(v24, v9);
    v12 = v11;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Handling Error deleting Record - %@", 35, 2, v8);
    swift_bridgeObjectRelease(v8);
    return swift_errorRelease(a1);
  }
  else
  {
    v15 = a3 + 16;
    v16 = static os_log_type_t.default.getter(0);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v17 = qword_100218DE8;
    v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100184870;
    v20 = sub_10009C9A8();
    v22 = v21;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v19 + 32) = v20;
    *(_QWORD *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Deleted Device Record from cloud - %@", 37, 2, v19);
    swift_bridgeObjectRelease(v19);
    swift_beginAccess(v15, v24, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (result)
    {
      v23 = result;
      sub_10013C868(a2, 0);
      return swift_release(v23);
    }
  }
  return result;
}

uint64_t sub_10013C868(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t result;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  id v65[2];

  v4 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v4);
  v61 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v57 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v58 = (char *)&v56 - v10;
  __chkstk_darwin(v11);
  v60 = (char *)&v56 - v12;
  v13 = type metadata accessor for DeviceRecord(0);
  v56 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v56 - v17;
  v20 = static os_log_type_t.default.getter(v19);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v21 = qword_100218DE8;
  v22 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v23 = swift_allocObject(v22, 112, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v23 + 56) = &type metadata for Bool;
  *(_QWORD *)(v23 + 64) = &protocol witness table for Bool;
  v59 = a2;
  *(_BYTE *)(v23 + 32) = a2 & 1;
  sub_1000AE548(a1, (uint64_t)v18, type metadata accessor for DeviceRecord);
  v24 = String.init<A>(describing:)(v18, v13);
  v63 = a1;
  v26 = v25;
  *(_QWORD *)(v23 + 96) = &type metadata for String;
  *(_QWORD *)(v23 + 104) = sub_1000A0DF4();
  *(_QWORD *)(v23 + 72) = v24;
  *(_QWORD *)(v23 + 80) = v26;
  v27 = v63;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Remove cached device file (delegate: %d): %@", 44, 2, v23);
  swift_bridgeObjectRelease(v23);
  v28 = (void *)sub_1000AB8A8();
  v29 = objc_msgSend(v28, "encryptedValues");

  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v29, "objectForKeyedSubscript:", v30);
  swift_unknownObjectRelease(v29);

  if (v31
    && (v65[0] = v31,
        v32 = sub_1000A0980(&qword_100210400),
        (swift_dynamicCast(v64, v65, v32, &type metadata for String, 6) & 1) != 0))
  {
    v33 = v64[0];
    v34 = v64[1];
    v35 = sub_1000AE548(v27, (uint64_t)v15, type metadata accessor for DeviceRecord);
    if (v34)
      goto LABEL_9;
  }
  else
  {
    v35 = sub_1000AE548(v27, (uint64_t)v15, type metadata accessor for DeviceRecord);
  }
  v33 = UUID.uuidString.getter(v35);
  v34 = v36;
LABEL_9:
  sub_1000AE58C((uint64_t)v15, type metadata accessor for DeviceRecord);
  v37 = v62;
  v38 = sub_100129690();
  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v39 = sub_1000A0A00(v6, (uint64_t)qword_100218BE0);
  v40 = v60;
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v60, v39, v6);
  __chkstk_darwin(v41);
  *(&v56 - 4) = v38;
  *(&v56 - 3) = v33;
  *(&v56 - 2) = v34;
  *(&v56 - 1) = (uint64_t)v40;
  OS_dispatch_queue.sync<A>(execute:)(v64, sub_100164F38, &v56 - 6, &type metadata for Bool);
  swift_release(v38);
  v42 = *(void (**)(char *, uint64_t))(v7 + 8);
  v42(v40, v6);
  v43 = sub_100129690();
  v44 = v61;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v44, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v46 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v47 = v57;
    v46(v57, v44, v6);
    v48 = v58;
    URL.appendingPathComponent(_:)(0x6552656369766544);
    v49 = ((uint64_t (*)(char *, uint64_t))v42)(v47, v6);
    __chkstk_darwin(v49);
    *(&v56 - 4) = v43;
    *(&v56 - 3) = v33;
    *(&v56 - 2) = v34;
    *(&v56 - 1) = (uint64_t)v48;
    OS_dispatch_queue.sync<A>(execute:)(v64, sub_1001684A0, &v56 - 6, &type metadata for Bool);
    swift_bridgeObjectRelease(v34);
    swift_release(v43);
    result = ((uint64_t (*)(char *, uint64_t))v42)(v48, v6);
    if ((v59 & 1) != 0)
    {
      result = swift_unknownObjectWeakLoadStrong(v37 + 24, v50);
      if (result)
      {
        v51 = result;
        v52 = sub_1000A0980(&qword_100212278);
        v53 = *(unsigned __int8 *)(v56 + 80);
        v54 = (v53 + 32) & ~v53;
        v55 = swift_allocObject(v52, v54 + *(_QWORD *)(v56 + 72), v53 | 7);
        *(_OWORD *)(v55 + 16) = xmmword_100184870;
        sub_1000AE548(v63, v55 + v54, type metadata accessor for DeviceRecord);
        sub_1001215A4(v55, (uint64_t)&unk_1001EB6C0, (uint64_t)sub_100164F8C, (uint64_t)&unk_1001EB6D8);
        swift_bridgeObjectRelease(v55);
        return swift_unknownObjectRelease(v51);
      }
    }
  }
  return result;
}

uint64_t sub_10013CE38(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  Class v28;
  id v29;
  NSString v30;
  id v31;
  uint64_t v32;
  Class v33;
  Class v34;
  uint64_t v35;
  objc_class *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t result;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  char *v59;
  char *v60;
  uint64_t v61;
  Class v62[2];
  id v63[2];

  v4 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v4);
  v60 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v56 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v57 = (char *)&v54 - v10;
  __chkstk_darwin(v11);
  v59 = (char *)&v54 - v12;
  v13 = type metadata accessor for DeviceSupportInformationRecord(0);
  v54 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v54 - v17;
  v20 = static os_log_type_t.default.getter(v19);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v21 = qword_100218DE8;
  v22 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v23 = swift_allocObject(v22, 112, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v23 + 56) = &type metadata for Bool;
  *(_QWORD *)(v23 + 64) = &protocol witness table for Bool;
  v58 = a2;
  *(_BYTE *)(v23 + 32) = a2 & 1;
  sub_1000AE548(a1, (uint64_t)v18, type metadata accessor for DeviceSupportInformationRecord);
  v24 = String.init<A>(describing:)(v18, v13);
  v26 = v25;
  *(_QWORD *)(v23 + 96) = &type metadata for String;
  *(_QWORD *)(v23 + 104) = sub_1000A0DF4();
  *(_QWORD *)(v23 + 72) = v24;
  *(_QWORD *)(v23 + 80) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Remove cached device file (delegate: %d): %@", 44, 2, v23);
  swift_bridgeObjectRelease(v23);
  v27 = objc_autoreleasePoolPush();
  sub_1000DC7F8(a1, v62);
  objc_autoreleasePoolPop(v27);
  v28 = v62[0];
  v29 = -[objc_class encryptedValues](v62[0], "encryptedValues");

  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v29, "objectForKeyedSubscript:", v30);
  swift_unknownObjectRelease(v29);

  if (v31
    && (v63[0] = v31,
        v32 = sub_1000A0980(&qword_100210400),
        (swift_dynamicCast(v62, v63, v32, &type metadata for String, 6) & 1) != 0))
  {
    v33 = v62[0];
    v34 = v62[1];
    v35 = sub_1000AE548(a1, (uint64_t)v15, type metadata accessor for DeviceSupportInformationRecord);
    if (v34)
      goto LABEL_9;
  }
  else
  {
    v35 = sub_1000AE548(a1, (uint64_t)v15, type metadata accessor for DeviceSupportInformationRecord);
  }
  v33 = (Class)UUID.uuidString.getter(v35);
  v34 = v36;
LABEL_9:
  v55 = a1;
  sub_1000AE58C((uint64_t)v15, type metadata accessor for DeviceSupportInformationRecord);
  v37 = sub_100129690();
  if (qword_100210180 != -1)
    swift_once(&qword_100210180, sub_1000DA4F0);
  v38 = sub_1000A0A00(v6, (uint64_t)qword_100218D28);
  v39 = v59;
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v59, v38, v6);
  __chkstk_darwin(v40);
  *(&v54 - 4) = v37;
  *(&v54 - 3) = (uint64_t)v33;
  *(&v54 - 2) = (uint64_t)v34;
  *(&v54 - 1) = (uint64_t)v39;
  OS_dispatch_queue.sync<A>(execute:)(v62, sub_1001684A0, &v54 - 6, &type metadata for Bool);
  swift_release(v37);
  v41 = *(void (**)(char *, uint64_t))(v7 + 8);
  v41(v39, v6);
  v42 = sub_100129690();
  v43 = v60;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v43, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v45 = v56;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v56, v43, v6);
    v46 = v57;
    URL.appendingPathComponent(_:)(0xD00000000000001ELL);
    v47 = ((uint64_t (*)(char *, uint64_t))v41)(v45, v6);
    __chkstk_darwin(v47);
    *(&v54 - 4) = v42;
    *(&v54 - 3) = (uint64_t)v33;
    *(&v54 - 2) = (uint64_t)v34;
    *(&v54 - 1) = (uint64_t)v46;
    OS_dispatch_queue.sync<A>(execute:)(v62, sub_1001684A0, &v54 - 6, &type metadata for Bool);
    swift_bridgeObjectRelease(v34);
    swift_release(v42);
    result = ((uint64_t (*)(char *, uint64_t))v41)(v46, v6);
    if ((v58 & 1) != 0)
    {
      result = swift_unknownObjectWeakLoadStrong(v61 + 24, v48);
      if (result)
      {
        v49 = result;
        v50 = sub_1000A0980(&qword_100212298);
        v51 = *(unsigned __int8 *)(v54 + 80);
        v52 = (v51 + 32) & ~v51;
        v53 = swift_allocObject(v50, v52 + *(_QWORD *)(v54 + 72), v51 | 7);
        *(_OWORD *)(v53 + 16) = xmmword_100184870;
        sub_1000AE548(v55, v53 + v52, type metadata accessor for DeviceSupportInformationRecord);
        sub_1001215A4(v53, (uint64_t)&unk_1001EB710, (uint64_t)sub_100164FA8, (uint64_t)&unk_1001EB728);
        swift_bridgeObjectRelease(v53);
        return swift_unknownObjectRelease(v49);
      }
    }
  }
  return result;
}

uint64_t sub_10013D41C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  id v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t result;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD v64[2];
  id v65[2];

  v4 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v4);
  v62 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v57 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v58 = (char *)&v56 - v10;
  __chkstk_darwin(v11);
  v61 = (char *)&v56 - v12;
  v13 = type metadata accessor for MagicPairingSettingsRecord(0);
  v56 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v56 - v17;
  v20 = static os_log_type_t.default.getter(v19);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v21 = qword_100218DE8;
  v22 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v23 = swift_allocObject(v22, 112, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v23 + 56) = &type metadata for Bool;
  *(_QWORD *)(v23 + 64) = &protocol witness table for Bool;
  v59 = a2;
  *(_BYTE *)(v23 + 32) = a2 & 1;
  sub_1000AE548(a1, (uint64_t)v18, type metadata accessor for MagicPairingSettingsRecord);
  v24 = String.init<A>(describing:)(v18, v13);
  v26 = v25;
  *(_QWORD *)(v23 + 96) = &type metadata for String;
  *(_QWORD *)(v23 + 104) = sub_1000A0DF4();
  *(_QWORD *)(v23 + 72) = v24;
  *(_QWORD *)(v23 + 80) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Remove cached device file (delegate: %d): %@", 44, 2, v23);
  swift_bridgeObjectRelease(v23);
  v27 = sub_1000AB790();
  v28 = -[objc_class encryptedValues](v27, "encryptedValues");

  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v28, "objectForKeyedSubscript:", v29);
  swift_unknownObjectRelease(v28);

  if (v30
    && (v65[0] = v30,
        v31 = sub_1000A0980(&qword_100210400),
        (swift_dynamicCast(v64, v65, v31, &type metadata for String, 6) & 1) != 0))
  {
    v32 = v64[0];
    v33 = v64[1];
    v34 = sub_1000AE548(a1, (uint64_t)v15, type metadata accessor for MagicPairingSettingsRecord);
    if (v33)
      goto LABEL_9;
  }
  else
  {
    v34 = sub_1000AE548(a1, (uint64_t)v15, type metadata accessor for MagicPairingSettingsRecord);
  }
  v32 = UUID.uuidString.getter(v34);
  v33 = v35;
LABEL_9:
  v60 = a1;
  sub_1000AE58C((uint64_t)v15, type metadata accessor for MagicPairingSettingsRecord);
  v36 = v63;
  v37 = sub_100129690();
  if (qword_100210160 != -1)
    swift_once(&qword_100210160, sub_1000C81B8);
  v38 = sub_1000A0A00(v6, (uint64_t)qword_100218C90);
  v39 = v61;
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v61, v38, v6);
  __chkstk_darwin(v40);
  *(&v56 - 4) = v37;
  *(&v56 - 3) = v32;
  *(&v56 - 2) = v33;
  *(&v56 - 1) = (uint64_t)v39;
  OS_dispatch_queue.sync<A>(execute:)(v64, sub_1001684A0, &v56 - 6, &type metadata for Bool);
  swift_release(v37);
  v41 = *(void (**)(char *, uint64_t))(v7 + 8);
  v41(v39, v6);
  v42 = sub_100129690();
  v43 = v62;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v43, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v45 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v46 = v57;
    v45(v57, v43, v6);
    v47 = v58;
    URL.appendingPathComponent(_:)(0x746553636967614DLL);
    v48 = ((uint64_t (*)(char *, uint64_t))v41)(v46, v6);
    __chkstk_darwin(v48);
    *(&v56 - 4) = v42;
    *(&v56 - 3) = v32;
    *(&v56 - 2) = v33;
    *(&v56 - 1) = (uint64_t)v47;
    OS_dispatch_queue.sync<A>(execute:)(v64, sub_1001684A0, &v56 - 6, &type metadata for Bool);
    swift_bridgeObjectRelease(v33);
    swift_release(v42);
    result = ((uint64_t (*)(char *, uint64_t))v41)(v47, v6);
    v50 = v60;
    if ((v59 & 1) != 0)
    {
      result = swift_unknownObjectWeakLoadStrong(v36 + 24, v49);
      if (result)
      {
        v51 = result;
        v52 = sub_1000A0980(&qword_100212290);
        v53 = *(unsigned __int8 *)(v56 + 80);
        v54 = (v53 + 32) & ~v53;
        v55 = swift_allocObject(v52, v54 + *(_QWORD *)(v56 + 72), v53 | 7);
        *(_OWORD *)(v55 + 16) = xmmword_100184870;
        sub_1000AE548(v50, v55 + v54, type metadata accessor for MagicPairingSettingsRecord);
        sub_1001215A4(v55, (uint64_t)&unk_1001EB760, (uint64_t)sub_100164FC4, (uint64_t)&unk_1001EB778);
        swift_bridgeObjectRelease(v55);
        return swift_unknownObjectRelease(v51);
      }
    }
  }
  return result;
}

uint64_t sub_10013D9F0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t result;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  id v65[2];

  v4 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v4);
  v61 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v57 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v58 = (char *)&v56 - v10;
  __chkstk_darwin(v11);
  v60 = (char *)&v56 - v12;
  v13 = type metadata accessor for SoundProfileRecord(0);
  v56 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v56 - v17;
  v20 = static os_log_type_t.default.getter(v19);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v21 = qword_100218DE8;
  v22 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v23 = swift_allocObject(v22, 112, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v23 + 56) = &type metadata for Bool;
  *(_QWORD *)(v23 + 64) = &protocol witness table for Bool;
  v59 = a2;
  *(_BYTE *)(v23 + 32) = a2 & 1;
  sub_1000AE548(a1, (uint64_t)v18, type metadata accessor for SoundProfileRecord);
  v24 = String.init<A>(describing:)(v18, v13);
  v63 = a1;
  v26 = v25;
  *(_QWORD *)(v23 + 96) = &type metadata for String;
  *(_QWORD *)(v23 + 104) = sub_1000A0DF4();
  *(_QWORD *)(v23 + 72) = v24;
  *(_QWORD *)(v23 + 80) = v26;
  v27 = v63;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Remove cached device file (delegate: %d): %@", 44, 2, v23);
  swift_bridgeObjectRelease(v23);
  v28 = (void *)sub_1000AB88C();
  v29 = objc_msgSend(v28, "encryptedValues");

  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v29, "objectForKeyedSubscript:", v30);
  swift_unknownObjectRelease(v29);

  if (v31
    && (v65[0] = v31,
        v32 = sub_1000A0980(&qword_100210400),
        (swift_dynamicCast(v64, v65, v32, &type metadata for String, 6) & 1) != 0))
  {
    v33 = v64[0];
    v34 = v64[1];
    v35 = sub_1000AE548(v27, (uint64_t)v15, type metadata accessor for SoundProfileRecord);
    if (v34)
      goto LABEL_9;
  }
  else
  {
    v35 = sub_1000AE548(v27, (uint64_t)v15, type metadata accessor for SoundProfileRecord);
  }
  v33 = UUID.uuidString.getter(v35);
  v34 = v36;
LABEL_9:
  sub_1000AE58C((uint64_t)v15, type metadata accessor for SoundProfileRecord);
  v37 = v62;
  v38 = sub_100129690();
  if (qword_100210138 != -1)
    swift_once(&qword_100210138, sub_1000AB9D0);
  v39 = sub_1000A0A00(v6, (uint64_t)qword_100218C38);
  v40 = v60;
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v60, v39, v6);
  __chkstk_darwin(v41);
  *(&v56 - 4) = v38;
  *(&v56 - 3) = v33;
  *(&v56 - 2) = v34;
  *(&v56 - 1) = (uint64_t)v40;
  OS_dispatch_queue.sync<A>(execute:)(v64, sub_1001684A0, &v56 - 6, &type metadata for Bool);
  swift_release(v38);
  v42 = *(void (**)(char *, uint64_t))(v7 + 8);
  v42(v40, v6);
  v43 = sub_100129690();
  v44 = v61;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v44, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v46 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v47 = v57;
    v46(v57, v44, v6);
    v48 = v58;
    URL.appendingPathComponent(_:)(0xD000000000000012);
    v49 = ((uint64_t (*)(char *, uint64_t))v42)(v47, v6);
    __chkstk_darwin(v49);
    *(&v56 - 4) = v43;
    *(&v56 - 3) = v33;
    *(&v56 - 2) = v34;
    *(&v56 - 1) = (uint64_t)v48;
    OS_dispatch_queue.sync<A>(execute:)(v64, sub_1001684A0, &v56 - 6, &type metadata for Bool);
    swift_bridgeObjectRelease(v34);
    swift_release(v43);
    result = ((uint64_t (*)(char *, uint64_t))v42)(v48, v6);
    if ((v59 & 1) != 0)
    {
      result = swift_unknownObjectWeakLoadStrong(v37 + 24, v50);
      if (result)
      {
        v51 = result;
        v52 = sub_1000A0980((uint64_t *)&unk_1002122A0);
        v53 = *(unsigned __int8 *)(v56 + 80);
        v54 = (v53 + 32) & ~v53;
        v55 = swift_allocObject(v52, v54 + *(_QWORD *)(v56 + 72), v53 | 7);
        *(_OWORD *)(v55 + 16) = xmmword_100184870;
        sub_1000AE548(v63, v55 + v54, type metadata accessor for SoundProfileRecord);
        sub_1001215A4(v55, (uint64_t)&unk_1001EB7B0, (uint64_t)sub_100164FE0, (uint64_t)&unk_1001EB7C8);
        swift_bridgeObjectRelease(v55);
        return swift_unknownObjectRelease(v51);
      }
    }
  }
  return result;
}

uint64_t sub_10013DFC0(void *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  objc_class *v27;
  Class isa;
  char *v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t result;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  char *v56;
  char *v57;
  int v58;
  char *v59;
  uint64_t v60;
  id v61[2];
  id v62[2];

  v4 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v4);
  v59 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v56 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v57 = (char *)&v55 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v55 - v12;
  v15 = static os_log_type_t.default.getter(v14);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v16 = qword_100218DE8;
  v17 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v18 + 56) = &type metadata for Bool;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = a2 & 1;
  v61[0] = a1;
  v19 = type metadata accessor for AADeviceRecord(0);
  v20 = a1;
  v21 = String.init<A>(describing:)(v61, v19);
  v23 = v22;
  *(_QWORD *)(v18 + 96) = &type metadata for String;
  *(_QWORD *)(v18 + 104) = sub_1000A0DF4();
  *(_QWORD *)(v18 + 72) = v21;
  *(_QWORD *)(v18 + 80) = v23;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Remove cached device file (delegate: %d): %@", 44, 2, v18);
  swift_bridgeObjectRelease(v18);
  v24 = objc_autoreleasePoolPush();
  v25 = *(_QWORD *)&v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v26 = *(_QWORD *)&v20[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
  sub_1000A0E74(v25, v26);
  sub_100109DEC(v25, v26);
  isa = v27;
  sub_1000A103C(v25, v26);
  if (!isa)
  {
    v29 = v20;
    isa = sub_1000A9DB8((uint64_t)v29).super.isa;

  }
  v61[0] = isa;
  sub_10010894C(v61);
  objc_autoreleasePoolPop(v24);
  v30 = -[objc_class encryptedValues](isa, "encryptedValues");

  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "objectForKeyedSubscript:", v31);
  swift_unknownObjectRelease(v30);

  v58 = a2;
  v55 = v20;
  if (v32
    && (v62[0] = v32,
        v33 = sub_1000A0980(&qword_100210400),
        swift_dynamicCast(v61, v62, v33, &type metadata for String, 6)))
  {
    v34 = v61[0];
    v35 = v61[1];
  }
  else
  {
    v36 = v20;
    v34 = (id)UUID.uuidString.getter(v36);
    v35 = v37;

  }
  v38 = sub_100129690();
  if (qword_1002101B0 != -1)
    swift_once(&qword_1002101B0, sub_100106014);
  v39 = sub_1000A0A00(v6, (uint64_t)qword_100218D68);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v39, v6);
  __chkstk_darwin(v40);
  *(&v55 - 4) = (id)v38;
  *(&v55 - 3) = v34;
  *(&v55 - 2) = v35;
  *(&v55 - 1) = v13;
  OS_dispatch_queue.sync<A>(execute:)(v61, sub_1001684A0, &v55 - 6, &type metadata for Bool);
  swift_release(v38);
  v41 = *(void (**)(char *, uint64_t))(v7 + 8);
  v41(v13, v6);
  v42 = sub_100129690();
  v43 = v59;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v43, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v45 = v56;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v56, v43, v6);
    v46 = v57;
    URL.appendingPathComponent(_:)(0x6563697665444141);
    v47 = ((uint64_t (*)(char *, uint64_t))v41)(v45, v6);
    __chkstk_darwin(v47);
    *(&v55 - 4) = (id)v42;
    *(&v55 - 3) = v34;
    *(&v55 - 2) = v35;
    *(&v55 - 1) = v46;
    OS_dispatch_queue.sync<A>(execute:)(v61, sub_1001684A0, &v55 - 6, &type metadata for Bool);
    swift_bridgeObjectRelease(v35);
    swift_release(v42);
    result = ((uint64_t (*)(char *, uint64_t))v41)(v46, v6);
    if ((v58 & 1) != 0)
    {
      result = swift_unknownObjectWeakLoadStrong(v60 + 24, v48);
      if (result)
      {
        v49 = result;
        v50 = sub_1000A0980(&qword_100211998);
        v51 = swift_allocObject(v50, 40, 7);
        *(_OWORD *)(v51 + 16) = xmmword_100187640;
        v52 = v55;
        *(_QWORD *)(v51 + 32) = v55;
        v61[0] = (id)v51;
        specialized Array._endMutation()(v51);
        v53 = v61[0];
        v54 = v52;
        sub_1001215A4((uint64_t)v53, (uint64_t)&unk_1001EB800, (uint64_t)sub_100164FFC, (uint64_t)&unk_1001EB818);
        swift_bridgeObjectRelease(v53);
        return swift_unknownObjectRelease(v49);
      }
    }
  }
  return result;
}

uint64_t sub_10013E574(void *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  objc_class *v27;
  Class isa;
  char *v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t result;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  id v55;
  char *v56;
  char *v57;
  int v58;
  char *v59;
  uint64_t v60;
  _QWORD v61[2];
  id v62[2];

  v4 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v4);
  v59 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v56 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v57 = (char *)&v55 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v55 - v12;
  v15 = static os_log_type_t.default.getter(v14);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v16 = qword_100218DE8;
  v17 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v18 + 56) = &type metadata for Bool;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = a2 & 1;
  v61[0] = a1;
  v19 = type metadata accessor for AAProxCardsRecord(0);
  v20 = a1;
  v21 = String.init<A>(describing:)(v61, v19);
  v23 = v22;
  *(_QWORD *)(v18 + 96) = &type metadata for String;
  *(_QWORD *)(v18 + 104) = sub_1000A0DF4();
  *(_QWORD *)(v18 + 72) = v21;
  *(_QWORD *)(v18 + 80) = v23;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Remove cached device file (delegate: %d): %@", 44, 2, v18);
  swift_bridgeObjectRelease(v18);
  v24 = objc_autoreleasePoolPush();
  v25 = *(_QWORD *)&v20[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v26 = *(_QWORD *)&v20[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
  sub_1000A0E74(v25, v26);
  sub_100109DEC(v25, v26);
  isa = v27;
  sub_1000A103C(v25, v26);
  if (!isa)
  {
    v29 = v20;
    isa = sub_1000A9D94((uint64_t)v29).super.isa;

  }
  v61[0] = isa;
  sub_1000A89A0((unint64_t)v61);
  objc_autoreleasePoolPop(v24);
  v30 = -[objc_class encryptedValues](isa, "encryptedValues");

  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "objectForKeyedSubscript:", v31);
  swift_unknownObjectRelease(v30);

  v58 = a2;
  v55 = v20;
  if (v32
    && (v62[0] = v32,
        v33 = sub_1000A0980(&qword_100210400),
        swift_dynamicCast(v61, v62, v33, &type metadata for String, 6)))
  {
    v34 = v61[0];
    v35 = (void *)v61[1];
  }
  else
  {
    v36 = v20;
    v34 = UUID.uuidString.getter(v36);
    v35 = v37;

  }
  v38 = sub_100129690();
  if (qword_100210130 != -1)
    swift_once(&qword_100210130, sub_1000A5BC0);
  v39 = sub_1000A0A00(v6, (uint64_t)qword_100218C00);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v39, v6);
  __chkstk_darwin(v40);
  *(&v55 - 4) = (id)v38;
  *(&v55 - 3) = (id)v34;
  *(&v55 - 2) = v35;
  *(&v55 - 1) = v13;
  OS_dispatch_queue.sync<A>(execute:)(v61, sub_1001684A0, &v55 - 6, &type metadata for Bool);
  swift_release(v38);
  v41 = *(void (**)(char *, uint64_t))(v7 + 8);
  v41(v13, v6);
  v42 = sub_100129690();
  v43 = v59;
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v43, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v45 = v56;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v56, v43, v6);
    v46 = v57;
    URL.appendingPathComponent(_:)(0xD000000000000011);
    v47 = ((uint64_t (*)(char *, uint64_t))v41)(v45, v6);
    __chkstk_darwin(v47);
    *(&v55 - 4) = (id)v42;
    *(&v55 - 3) = (id)v34;
    *(&v55 - 2) = v35;
    *(&v55 - 1) = v46;
    OS_dispatch_queue.sync<A>(execute:)(v61, sub_1001684A0, &v55 - 6, &type metadata for Bool);
    swift_bridgeObjectRelease(v35);
    swift_release(v42);
    result = ((uint64_t (*)(char *, uint64_t))v41)(v46, v6);
    if ((v58 & 1) != 0)
    {
      result = swift_unknownObjectWeakLoadStrong(v60 + 24, v48);
      if (result)
      {
        v49 = result;
        v50 = sub_1000A0980(&qword_100211998);
        v51 = swift_allocObject(v50, 40, 7);
        *(_OWORD *)(v51 + 16) = xmmword_100187640;
        v52 = v55;
        *(_QWORD *)(v51 + 32) = v55;
        v61[0] = v51;
        specialized Array._endMutation()(v51);
        v53 = v61[0];
        v54 = v52;
        sub_1001215A4(v53, (uint64_t)&unk_1001EB850, (uint64_t)sub_100165018, (uint64_t)&unk_1001EB868);
        swift_bridgeObjectRelease(v53);
        return swift_unknownObjectRelease(v49);
      }
    }
  }
  return result;
}

uint64_t sub_10013EB24(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  void *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t (**v55)(uint64_t);
  void *v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  Class v69;
  id v70;
  void *v71;
  Class v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  int *v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  Class v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Class v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  Class aBlock[5];
  uint64_t v159;

  v141 = type metadata accessor for DispatchPredicate(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (unint64_t *)((char *)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = type metadata accessor for Date(0);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v133 = (char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for UUID(0);
  v135 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v132 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v134);
  v143 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for DispatchWorkItemFlags(0);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v129 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for DispatchQoS(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v150 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v151 = (char *)&v124 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v124 - v16;
  v152 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v152);
  v153 = (unint64_t *)((char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for DeviceSupportInformationRecord(0);
  v155 = *(_QWORD *)(v19 - 8);
  v156 = v19;
  __chkstk_darwin(v19);
  v146 = (uint64_t)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = v20;
  __chkstk_darwin(v21);
  v142 = (uint64_t)&v124 - v22;
  v24 = static os_log_type_t.default.getter(v23);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v25 = qword_100218DE8;
  v125 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v26 = swift_allocObject(v125, 72, 7);
  v144 = xmmword_100184870;
  *(_OWORD *)(v26 + 16) = xmmword_100184870;
  v27 = sub_1000DA63C();
  v29 = v28;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  v124 = sub_1000A0DF4();
  *(_QWORD *)(v26 + 64) = v124;
  *(_QWORD *)(v26 + 32) = v27;
  *(_QWORD *)(v26 + 40) = v29;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Remove device record: %@", 24, 2, v26);
  swift_bridgeObjectRelease(v26);
  v154 = a2;
  v30 = sub_100129690();
  v31 = *(_QWORD *)(a1 + *(int *)(v156 + 24));
  v147 = a1;
  v148 = v31;
  if (qword_100210180 != -1)
    swift_once(&qword_100210180, sub_1000DA4F0);
  v32 = sub_1000A0A00(v10, (uint64_t)qword_100218D28);
  v33 = v10;
  v34 = v11;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v149 = v17;
  v35(v17, v32, v33);
  v36 = objc_autoreleasePoolPush();
  v37 = v30;
  v39 = URL.path.getter(v38);
  v41 = v40;
  v42 = v150;
  URL.appendingPathComponent(_:)(v39);
  swift_bridgeObjectRelease(v41);
  v43 = v151;
  URL.appendingPathComponent(_:)(v148);
  v44 = *(void (**)(char *, uint64_t))(v34 + 8);
  v44(v42, v33);
  objc_autoreleasePoolPop(v36);
  v45 = objc_autoreleasePoolPush();
  __chkstk_darwin(v45);
  *(&v124 - 2) = (unint64_t)v43;
  *(&v124 - 1) = v37;
  v46 = v153;
  OS_dispatch_queue.sync<A>(execute:)(v153, sub_1001685BC, &v124 - 4, v152);
  objc_autoreleasePoolPop(v45);
  v44(v43, v33);
  swift_release(v37);
  v44(v149, v33);
  v47 = v155;
  v48 = v156;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v155 + 48))(v46, 1, v156) == 1)
  {
    sub_1000A1000((uint64_t)v46, &qword_100210CE8);
    v49 = *(void **)&v154[OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue];
    v50 = v146;
    sub_1000AE548(v147, v146, type metadata accessor for DeviceSupportInformationRecord);
    v51 = *(unsigned __int8 *)(v47 + 80);
    v52 = (v51 + 16) & ~v51;
    v53 = (v145 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
    v54 = swift_allocObject(&unk_1001ECA48, v53 + 16, v51 | 7);
    sub_1000C6CD0(v50, v54 + v52, type metadata accessor for DeviceSupportInformationRecord);
    v55 = (uint64_t (**)(uint64_t))(v54 + v53);
    *v55 = sub_1000BC98C;
    v55[1] = 0;
    aBlock[4] = (Class)sub_100165D1C;
    v159 = v54;
    aBlock[0] = (Class)_NSConcreteStackBlock;
    aBlock[1] = (Class)1107296256;
    aBlock[2] = (Class)sub_1000E6A24;
    aBlock[3] = (Class)&unk_1001ECA60;
    v56 = _Block_copy(aBlock);
    v57 = v49;
    v58 = v126;
    static DispatchQoS.unspecified.getter(v57);
    v157 = _swiftEmptyArrayStorage;
    v59 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v60 = sub_1000A0980(&qword_100211D00);
    v61 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v62 = v129;
    v63 = v60;
    v64 = v131;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v157, v63, v61, v131, v59);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v58, v62, v56);
    _Block_release(v56);

    (*(void (**)(char *, uint64_t))(v130 + 8))(v62, v64);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v58, v128);
    return swift_release(v159);
  }
  v66 = (uint64_t)v46;
  v67 = v142;
  sub_1000C6CD0(v66, v142, type metadata accessor for DeviceSupportInformationRecord);
  v68 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v67, aBlock);
  objc_autoreleasePoolPop(v68);
  v69 = aBlock[0];
  v70 = -[objc_class recordID](aBlock[0], "recordID");

  v71 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v67, aBlock);
  objc_autoreleasePoolPop(v71);
  v72 = aBlock[0];
  v74 = CKRecord.recordType.getter(v73);
  v76 = v75;

  v77 = v154;
  sub_10013A5F4(v70, v74, v76, 0);

  v78 = v76;
  v79 = v77;
  swift_bridgeObjectRelease(v78);
  v80 = v135;
  v81 = v132;
  v82 = v137;
  (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v132, v67, v137);
  v83 = (uint64_t *)(v67 + *(int *)(v48 + 24));
  v85 = *v83;
  v84 = v83[1];
  v86 = swift_bridgeObjectRetain(v84);
  v87 = v133;
  v88 = Date.init()(v86);
  v89 = Date.timeIntervalSince1970.getter(v88);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v87, v138);
  v90 = (uint64_t)v143;
  *v143 = 1;
  *(_QWORD *)(v90 + 8) = 0xD00000000000001ELL;
  *(_QWORD *)(v90 + 16) = 0x80000001001AA950;
  v91 = (int *)v134;
  (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v90 + *(int *)(v134 + 24), v81, v82);
  v92 = (_QWORD *)(v90 + v91[7]);
  *v92 = v85;
  v92[1] = v84;
  *(double *)(v90 + v91[8]) = v89;
  *(_OWORD *)(v90 + v91[9]) = xmmword_100187E30;
  v93 = objc_autoreleasePoolPush();
  sub_100146F6C((uint64_t)v79, v90);
  objc_autoreleasePoolPop(v93);
  v94 = sub_10012A6A0();
  v95 = *(void **)(v94 + 72);
  v96 = v139;
  *v139 = v95;
  v97 = v140;
  v98 = v141;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v96, enum case for DispatchPredicate.notOnQueue(_:), v141);
  v99 = v95;
  LOBYTE(v85) = _dispatchPreconditionTest(_:)(v96);
  (*(void (**)(_QWORD *, unint64_t))(v97 + 8))(v96, v98);
  if ((v85 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v94, &type metadata for Bool);
    v100 = swift_unknownObjectRelease(v94);
    if (LOBYTE(aBlock[0]) == 1)
    {
      v101 = sub_10012A6A0();
      v102 = objc_autoreleasePoolPush();
      sub_1000DC7F8(v67, aBlock);
      objc_autoreleasePoolPop(v102);
      v103 = aBlock[0];
      v104 = -[objc_class recordID](aBlock[0], "recordID");

      v105 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v105 + 16, v79);
      v106 = v146;
      sub_1000AE548(v67, v146, type metadata accessor for DeviceSupportInformationRecord);
      v107 = *(unsigned __int8 *)(v155 + 80);
      v108 = (v107 + 16) & ~v107;
      v109 = (v145 + v108 + 7) & 0xFFFFFFFFFFFFFFF8;
      v110 = swift_allocObject(&unk_1001ECA98, v109 + 8, v107 | 7);
      sub_1000C6CD0(v106, v110 + v108, type metadata accessor for DeviceSupportInformationRecord);
      *(_QWORD *)(v110 + v109) = v105;
      v111 = swift_allocObject(&unk_1001ECAC0, 49, 7);
      *(_QWORD *)(v111 + 16) = v101;
      *(_QWORD *)(v111 + 24) = v104;
      *(_QWORD *)(v111 + 32) = sub_100165D24;
      *(_QWORD *)(v111 + 40) = v110;
      *(_BYTE *)(v111 + 48) = 1;
      swift_retain(v105);
      swift_unknownObjectRetain(v101);
      v112 = v104;
      swift_retain(v110);
      sub_1000F7A44((uint64_t)sub_100164E44, v111);
      swift_release(v105);
      swift_release(v110);
      swift_unknownObjectRelease(v101);

      v113 = swift_release(v111);
      v79 = &type metadata for String;
      v96 = (_QWORD *)v125;
      v98 = v124;
    }
    else
    {
      v114 = static os_log_type_t.error.getter(v100);
      v115 = qword_100218DE8;
      v96 = (_QWORD *)v125;
      v116 = swift_allocObject(v125, 72, 7);
      *(_OWORD *)(v116 + 16) = v144;
      v117 = sub_1000DA63C();
      v79 = &type metadata for String;
      v98 = v124;
      *(_QWORD *)(v116 + 56) = &type metadata for String;
      *(_QWORD *)(v116 + 64) = v98;
      *(_QWORD *)(v116 + 32) = v117;
      *(_QWORD *)(v116 + 40) = v118;
      os_log(_:dso:log:_:_:)(v114, &_mh_execute_header, v115, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v116);
      v113 = swift_bridgeObjectRelease(v116);
    }
    v94 = static os_log_type_t.debug.getter(v113);
    if (qword_1002101D8 == -1)
      goto LABEL_12;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1002101D8, sub_100168748);
LABEL_12:
  v119 = qword_100218DE0;
  v120 = swift_allocObject(v96, 72, 7);
  *(_OWORD *)(v120 + 16) = v144;
  aBlock[0] = 0;
  v121 = sub_1000A0980(&qword_100212350);
  v122 = String.init<A>(describing:)(aBlock, v121);
  *(_QWORD *)(v120 + 56) = v79;
  *(_QWORD *)(v120 + 64) = v98;
  *(_QWORD *)(v120 + 32) = v122;
  *(_QWORD *)(v120 + 40) = v123;
  os_log(_:dso:log:_:_:)(v94, &_mh_execute_header, v119, "[Fetch] Removed deleted DeviceSupportInfo from cloud? - %@", 58, 2, v120);
  swift_bridgeObjectRelease(v120);
  sub_1000AE58C(v90, type metadata accessor for BTDeferredRecord);
  return sub_1000AE58C(v67, type metadata accessor for DeviceSupportInformationRecord);
}

void sub_10013F7C4(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  void *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  Class v71;
  id v72;
  void *v73;
  Class v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  int *v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  Class v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Class v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(_QWORD);
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  Class aBlock[5];
  uint64_t v158;

  v4 = v3;
  v145 = a2;
  v146 = a3;
  v136 = type metadata accessor for DispatchWorkItemFlags(0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v134 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for DispatchQoS(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for DispatchPredicate(0);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v137 = (uint64_t *)((char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130 = type metadata accessor for Date(0);
  v128 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v125 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for UUID(0);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v124 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v126);
  v141 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v149 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v150 = (char *)&v120 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v120 - v18;
  v151 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v151);
  v152 = (uint64_t *)((char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for DeviceSupportInformationRecord(0);
  v154 = *(_QWORD *)(v21 - 8);
  v155 = v21;
  __chkstk_darwin(v21);
  v143 = (uint64_t)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = v22;
  __chkstk_darwin(v23);
  v140 = (uint64_t)&v120 - v24;
  v26 = static os_log_type_t.default.getter(v25);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v27 = qword_100218DE8;
  v123 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v28 = swift_allocObject(v123, 72, 7);
  v122 = xmmword_100184870;
  *(_OWORD *)(v28 + 16) = xmmword_100184870;
  v29 = sub_1000DA63C();
  v31 = v30;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v121 = sub_1000A0DF4();
  *(_QWORD *)(v28 + 64) = v121;
  *(_QWORD *)(v28 + 32) = v29;
  *(_QWORD *)(v28 + 40) = v31;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Remove device record: %@", 24, 2, v28);
  swift_bridgeObjectRelease(v28);
  v153 = v4;
  v32 = sub_100129690();
  v33 = *(int *)(v155 + 24);
  v144 = a1;
  v147 = *(_QWORD *)(a1 + v33);
  if (qword_100210180 != -1)
    swift_once(&qword_100210180, sub_1000DA4F0);
  v34 = sub_1000A0A00(v12, (uint64_t)qword_100218D28);
  v35 = v12;
  v36 = v13;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v148 = v19;
  v37(v19, v34, v35);
  v38 = objc_autoreleasePoolPush();
  v39 = v32;
  v41 = URL.path.getter(v40);
  v43 = v42;
  v44 = v149;
  URL.appendingPathComponent(_:)(v41);
  swift_bridgeObjectRelease(v43);
  v45 = v150;
  URL.appendingPathComponent(_:)(v147);
  v46 = *(void (**)(char *, uint64_t))(v36 + 8);
  v46(v44, v35);
  objc_autoreleasePoolPop(v38);
  v47 = objc_autoreleasePoolPush();
  __chkstk_darwin(v47);
  *(&v120 - 2) = (uint64_t)v45;
  *(&v120 - 1) = v39;
  v48 = v152;
  OS_dispatch_queue.sync<A>(execute:)(v152, sub_1001685BC, &v120 - 4, v151);
  objc_autoreleasePoolPop(v47);
  v46(v45, v35);
  swift_release(v39);
  v46(v148, v35);
  v49 = v154;
  v50 = v155;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v154 + 48))(v48, 1, v155) == 1)
  {
    sub_1000A1000((uint64_t)v48, &qword_100210CE8);
    v51 = *(void **)(v153 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v52 = v143;
    sub_1000AE548(v144, v143, type metadata accessor for DeviceSupportInformationRecord);
    v53 = *(unsigned __int8 *)(v49 + 80);
    v54 = (v53 + 16) & ~v53;
    v55 = (v142 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = swift_allocObject(&unk_1001EBE18, v55 + 16, v53 | 7);
    sub_1000C6CD0(v52, v56 + v54, type metadata accessor for DeviceSupportInformationRecord);
    v57 = (_QWORD *)(v56 + v55);
    v58 = v146;
    *v57 = v145;
    v57[1] = v58;
    aBlock[4] = (Class)sub_100165D1C;
    v158 = v56;
    aBlock[0] = (Class)_NSConcreteStackBlock;
    aBlock[1] = (Class)1107296256;
    aBlock[2] = (Class)sub_1000E6A24;
    aBlock[3] = (Class)&unk_1001EBE30;
    v59 = _Block_copy(aBlock);
    v60 = v51;
    v61 = swift_retain(v58);
    v62 = v131;
    static DispatchQoS.unspecified.getter(v61);
    v156 = _swiftEmptyArrayStorage;
    v63 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v64 = sub_1000A0980(&qword_100211D00);
    v65 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v66 = v134;
    v67 = v64;
    v68 = v136;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v156, v67, v65, v136, v63);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v62, v66, v59);
    _Block_release(v59);

    (*(void (**)(char *, uint64_t))(v135 + 8))(v66, v68);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v62, v133);
    swift_release(v158);
  }
  else
  {
    v69 = v140;
    sub_1000C6CD0((uint64_t)v48, v140, type metadata accessor for DeviceSupportInformationRecord);
    v70 = objc_autoreleasePoolPush();
    sub_1000DC7F8(v69, aBlock);
    objc_autoreleasePoolPop(v70);
    v71 = aBlock[0];
    v72 = -[objc_class recordID](aBlock[0], "recordID");

    v73 = objc_autoreleasePoolPush();
    sub_1000DC7F8(v69, aBlock);
    objc_autoreleasePoolPop(v73);
    v74 = aBlock[0];
    v76 = CKRecord.recordType.getter(v75);
    v78 = v77;

    v79 = v153;
    sub_10013A5F4(v72, v76, v78, 0);

    swift_bridgeObjectRelease(v78);
    v80 = v127;
    v81 = v124;
    v82 = v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v124, v69, v129);
    v83 = (uint64_t *)(v69 + *(int *)(v50 + 24));
    v85 = *v83;
    v84 = v83[1];
    v86 = swift_bridgeObjectRetain(v84);
    v87 = v125;
    v88 = Date.init()(v86);
    v89 = Date.timeIntervalSince1970.getter(v88);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v87, v130);
    v90 = (uint64_t)v141;
    *v141 = 1;
    *(_QWORD *)(v90 + 8) = 0xD00000000000001ELL;
    *(_QWORD *)(v90 + 16) = 0x80000001001AA950;
    v91 = (int *)v126;
    (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v90 + *(int *)(v126 + 24), v81, v82);
    v92 = (_QWORD *)(v90 + v91[7]);
    *v92 = v85;
    v92[1] = v84;
    *(double *)(v90 + v91[8]) = v89;
    *(_OWORD *)(v90 + v91[9]) = xmmword_100187E30;
    v93 = objc_autoreleasePoolPush();
    sub_100146F6C(v79, v90);
    objc_autoreleasePoolPop(v93);
    v94 = sub_10012A6A0();
    v95 = *(void **)(v94 + 72);
    v96 = v137;
    *v137 = v95;
    v97 = v138;
    v98 = v139;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v138 + 104))(v96, enum case for DispatchPredicate.notOnQueue(_:), v139);
    v99 = v95;
    LOBYTE(v85) = _dispatchPreconditionTest(_:)(v96);
    v100 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v97 + 8))(v96, v98);
    if ((v85 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v94, &type metadata for Bool);
      v101 = swift_unknownObjectRelease(v94);
      if (LOBYTE(aBlock[0]) == 1)
      {
        v102 = sub_10012A6A0();
        v103 = objc_autoreleasePoolPush();
        sub_1000DC7F8(v69, aBlock);
        objc_autoreleasePoolPop(v103);
        v104 = aBlock[0];
        v105 = -[objc_class recordID](aBlock[0], "recordID");

        v106 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v106 + 16, v79);
        v107 = v143;
        sub_1000AE548(v69, v143, type metadata accessor for DeviceSupportInformationRecord);
        v108 = *(unsigned __int8 *)(v154 + 80);
        v109 = (v108 + 16) & ~v108;
        v110 = (v142 + v109 + 7) & 0xFFFFFFFFFFFFFFF8;
        v111 = swift_allocObject(&unk_1001EBE68, v110 + 8, v108 | 7);
        sub_1000C6CD0(v107, v111 + v109, type metadata accessor for DeviceSupportInformationRecord);
        *(_QWORD *)(v111 + v110) = v106;
        v112 = swift_allocObject(&unk_1001EBE90, 49, 7);
        *(_QWORD *)(v112 + 16) = v102;
        *(_QWORD *)(v112 + 24) = v105;
        *(_QWORD *)(v112 + 32) = sub_100165D24;
        *(_QWORD *)(v112 + 40) = v111;
        *(_BYTE *)(v112 + 48) = 1;
        swift_retain(v106);
        swift_unknownObjectRetain(v102);
        v113 = v105;
        swift_retain(v111);
        sub_1000F7A44((uint64_t)sub_100164E44, v112);
        swift_release(v106);
        swift_release(v111);
        swift_unknownObjectRelease(v102);

        swift_release(v112);
      }
      else
      {
        v114 = static os_log_type_t.error.getter(v101);
        v115 = qword_100218DE8;
        v116 = swift_allocObject(v123, 72, 7);
        *(_OWORD *)(v116 + 16) = v122;
        v117 = sub_1000DA63C();
        v118 = v121;
        *(_QWORD *)(v116 + 56) = &type metadata for String;
        *(_QWORD *)(v116 + 64) = v118;
        *(_QWORD *)(v116 + 32) = v117;
        *(_QWORD *)(v116 + 40) = v119;
        os_log(_:dso:log:_:_:)(v114, &_mh_execute_header, v115, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v116);
        swift_bridgeObjectRelease(v116);
      }
      v145(0);
      sub_1000AE58C(v90, type metadata accessor for BTDeferredRecord);
      sub_1000AE58C(v69, type metadata accessor for DeviceSupportInformationRecord);
    }
    else
    {
      __break(1u);
      objc_autoreleasePoolPop(v100);
      __break(1u);
    }
  }
}

uint64_t sub_1001403D0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class v7;
  uint64_t v8;
  uint64_t v9;

  v3 = static os_log_type_t.error.getter(a1);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v4 = qword_100218DE8;
  v5 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100184870;
  v7 = sub_1000DA63C();
  v9 = v8;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v9;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Record not found to remove: %@", 30, 2, v6);
  swift_bridgeObjectRelease(v6);
  return a2(0);
}

uint64_t sub_1001404CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  if (a1)
  {
    v4 = swift_errorRetain(a1);
    v5 = static os_log_type_t.error.getter(v4);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v6 = qword_100218DE8;
    v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100184870;
    v24[0] = a1;
    swift_errorRetain(a1);
    v9 = sub_1000A0980(&qword_100210710);
    v10 = String.init<A>(describing:)(v24, v9);
    v12 = v11;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Handling Error deleting device info Record - %@", 47, 2, v8);
    swift_bridgeObjectRelease(v8);
    return swift_errorRelease(a1);
  }
  else
  {
    v15 = a3 + 16;
    v16 = static os_log_type_t.default.getter(0);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v17 = qword_100218DE8;
    v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100184870;
    v20 = sub_1000DA63C();
    v22 = v21;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v19 + 32) = v20;
    *(_QWORD *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "CloudSync: Deleted Info Record from cloud - %@", 46, 2, v19);
    swift_bridgeObjectRelease(v19);
    swift_beginAccess(v15, v24, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (result)
    {
      v23 = result;
      sub_10013CE38(a2, 0);
      return swift_release(v23);
    }
  }
  return result;
}

void sub_1001406E8(char *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BOOL8 v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  objc_class *v23;
  Class isa;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  objc_class *v77;
  Class v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  objc_class *v82;
  _BYTE v83[12];
  unsigned int v84;
  void (*v85)(void);
  uint64_t v86;
  id v87[5];

  v4 = v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v83[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v87[3] = &type metadata for AudioAccessoryFeatures;
  v87[4] = (id)sub_1000A42C4();
  v12 = isFeatureEnabled(_:)(v87);
  sub_1000A2140(v87);
  if ((v12 & 1) == 0)
  {
    v43 = sub_1000D8604();
    v44 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v43, 0, 0);
    *v45 = 0x8000000000000038;
    a2();
    swift_errorRelease(v44);
    return;
  }
  v13 = sub_100129690();
  v14 = *(_QWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  v15 = *(_QWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
  if (qword_1002101B0 != -1)
    swift_once(&qword_1002101B0, sub_100106014);
  v16 = sub_1000A0A00(v8, (uint64_t)qword_100218D68);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v16, v8);
  v17 = (char *)sub_100127638(v14, v15, (uint64_t)v11, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
  swift_release(v13);
  v18 = (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  v86 = a3;
  if (v17)
  {
    v19 = sub_100109038((_BOOL8)a1);
    v85 = a2;
    if (!v19)
    {
      v20 = objc_autoreleasePoolPush();
      v21 = *(_QWORD *)&v17[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
      v22 = *(_QWORD *)&v17[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
      sub_1000A0E74(v21, v22);
      sub_100109DEC(v21, v22);
      isa = v23;
      sub_1000A103C(v21, v22);
      if (!isa)
      {
        v25 = v17;
        isa = sub_1000A9DB8((uint64_t)v25).super.isa;

      }
      v87[0] = isa;
      sub_10010894C(v87);
      objc_autoreleasePoolPop(v20);
      v26 = -[objc_class recordChangeTag](isa, "recordChangeTag");

      if (v26)
      {

        v28 = static os_log_type_t.default.getter(v27);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v29 = qword_100218DE8;
        v30 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v31 = swift_allocObject(v30, 112, 7);
        *(_OWORD *)(v31 + 16) = xmmword_1001858F0;
        v32 = v17;
        v33 = objc_msgSend(v32, "description");
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v36 = v35;

        *(_QWORD *)(v31 + 56) = &type metadata for String;
        v37 = sub_1000A0DF4();
        *(_QWORD *)(v31 + 64) = v37;
        *(_QWORD *)(v31 + 32) = v34;
        *(_QWORD *)(v31 + 40) = v36;
        v38 = a1;
        v39 = objc_msgSend(v38, "description");
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

        *(_QWORD *)(v31 + 96) = &type metadata for String;
        *(_QWORD *)(v31 + 104) = v37;
        *(_QWORD *)(v31 + 72) = v40;
        *(_QWORD *)(v31 + 80) = v42;
        os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "No change from cached %@ [to] %@", 32, 2, v31);
        swift_bridgeObjectRelease(v31);
        ((void (*)(_QWORD))v85)(0);

        return;
      }
    }
    v84 = static os_log_type_t.default.getter(v19);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v46 = qword_100218DE8;
    v47 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v48 = swift_allocObject(v47, 112, 7);
    *(_OWORD *)(v48 + 16) = xmmword_1001858F0;
    v49 = v17;
    v50 = objc_msgSend(v49, "description");
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    *(_QWORD *)(v48 + 56) = &type metadata for String;
    v54 = sub_1000A0DF4();
    *(_QWORD *)(v48 + 64) = v54;
    *(_QWORD *)(v48 + 32) = v51;
    *(_QWORD *)(v48 + 40) = v53;
    v55 = a1;
    v56 = objc_msgSend(v55, "description");
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v59 = v58;

    *(_QWORD *)(v48 + 96) = &type metadata for String;
    *(_QWORD *)(v48 + 104) = v54;
    *(_QWORD *)(v48 + 72) = v57;
    *(_QWORD *)(v48 + 80) = v59;
    os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v46, "Updating cached AADeviceRecord: %@ with %@", 42, 2, v48);
    swift_bridgeObjectRelease(v48);
    v60 = v49;
    sub_100108E10((unsigned __int8 *)v55);

    a2 = v85;
  }
  else
  {
    v61 = static os_log_type_t.default.getter(v18);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v62 = qword_100218DE8;
    v63 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v64 = swift_allocObject(v63, 72, 7);
    *(_OWORD *)(v64 + 16) = xmmword_100184870;
    v65 = a1;
    v66 = objc_msgSend(v65, "description");
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v69 = v68;

    *(_QWORD *)(v64 + 56) = &type metadata for String;
    *(_QWORD *)(v64 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v64 + 32) = v67;
    *(_QWORD *)(v64 + 40) = v69;
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Add AADeviceRecord: %@", 22, 2, v64);
    swift_bridgeObjectRelease(v64);
    v60 = v65;
  }
  v70 = sub_100129690();
  v87[0] = v60;
  __chkstk_darwin(v70);
  *(_QWORD *)&v83[-16] = v71;
  *(_QWORD *)&v83[-8] = v87;
  v72 = v60;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001683C8, &v83[-32], &type metadata for () + 1);

  swift_release(v70);
  ((void (*)(_QWORD))a2)(0);
  v73 = v72;
  v74 = objc_autoreleasePoolPush();
  v75 = *(_QWORD *)&v73[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v76 = *(_QWORD *)&v73[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
  sub_1000A0E74(v75, v76);
  sub_100109DEC(v75, v76);
  v78 = v77;
  sub_1000A103C(v75, v76);
  if (!v78)
  {
    v79 = v73;
    v78 = sub_1000A9DB8((uint64_t)v79).super.isa;

  }
  v87[0] = v78;
  sub_10010894C(v87);
  objc_autoreleasePoolPop(v74);

  v80 = sub_10012A6A0();
  v81 = swift_allocObject(&unk_1001EBDA0, 32, 7);
  *(_QWORD *)(v81 + 16) = v4;
  *(_QWORD *)(v81 + 24) = v78;
  swift_retain(v4);
  v82 = v78;
  sub_1000F8080(v82, 1, (uint64_t)sub_100165C94, v81);
  swift_unknownObjectRelease(v80);
  swift_release(v81);

}

uint64_t sub_100140F24(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  objc_class *v39;
  Class isa;
  char *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  objc_class *v47;
  Class v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  int *v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  id v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  objc_class *v80;
  Class v81;
  char *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  id v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  id v94;
  void (*v95)(void);
  uint64_t v96;
  void *v97;
  id v98;
  id v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  id v124;
  void (*v125)(void);
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  id aBlock[3];
  ValueMetadata *v144;
  unint64_t v145;
  _QWORD *v146;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v131 = *(_QWORD *)(v6 - 8);
  v132 = v6;
  __chkstk_darwin(v6);
  v130 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for DispatchQoS(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v140 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v139 = (uint64_t *)((char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Date(0);
  v137 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v134 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for UUID(0);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v133 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v135);
  v15 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = &type metadata for AudioAccessoryFeatures;
  v145 = sub_1000A42C4();
  v20 = isFeatureEnabled(_:)(aBlock);
  v21 = sub_1000A2140(aBlock);
  if ((v20 & 1) != 0)
  {
    v121 = v11;
    v122 = v9;
    v123 = v15;
    v125 = a2;
    v126 = a3;
    v22 = static os_log_type_t.default.getter(v21);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v23 = qword_100218DE8;
    v120 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v24 = swift_allocObject(v120, 72, 7);
    v119 = xmmword_100184870;
    *(_OWORD *)(v24 + 16) = xmmword_100184870;
    v25 = a1;
    v26 = objc_msgSend(v25, "description");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    *(_QWORD *)(v24 + 56) = &type metadata for String;
    v118 = sub_1000A0DF4();
    *(_QWORD *)(v24 + 64) = v118;
    *(_QWORD *)(v24 + 32) = v27;
    *(_QWORD *)(v24 + 40) = v29;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Remove AADeviceRecord: %@", 25, 2, v24);
    swift_bridgeObjectRelease(v24);
    v30 = sub_100129690();
    v124 = v25;
    v31 = *(_QWORD *)&v25[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
    v32 = *(_QWORD *)&v25[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
    if (qword_1002101B0 != -1)
      swift_once(&qword_1002101B0, sub_100106014);
    v33 = sub_1000A0A00(v16, (uint64_t)qword_100218D68);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v33, v16);
    v34 = (char *)sub_100127638(v31, v32, (uint64_t)v19, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
    swift_release(v30);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    if (v34)
    {
      v35 = objc_autoreleasePoolPush();
      v36 = (uint64_t *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
      v37 = *(_QWORD *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
      v38 = *(_QWORD *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
      sub_1000A0E74(v37, v38);
      sub_100109DEC(v37, v38);
      isa = v39;
      sub_1000A103C(v37, v38);
      if (!isa)
      {
        v41 = v34;
        isa = sub_1000A9DB8((uint64_t)v41).super.isa;

      }
      v42 = v121;
      aBlock[0] = isa;
      sub_10010894C(aBlock);
      objc_autoreleasePoolPop(v35);
      v43 = -[objc_class recordID](isa, "recordID");

      v44 = objc_autoreleasePoolPush();
      v45 = *v36;
      v46 = v36[1];
      sub_1000A0E74(*v36, v46);
      sub_100109DEC(v45, v46);
      v48 = v47;
      sub_1000A103C(v45, v46);
      if (!v48)
      {
        v49 = v34;
        v48 = sub_1000A9DB8((uint64_t)v49).super.isa;

      }
      aBlock[0] = v48;
      sub_10010894C(aBlock);
      objc_autoreleasePoolPop(v44);
      v51 = CKRecord.recordType.getter(v50);
      v53 = v52;

      v54 = v141;
      sub_10013A5F4(v43, v51, v53, 0);

      swift_bridgeObjectRelease(v53);
      v55 = v136;
      v56 = v133;
      v57 = v138;
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v133, &v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier], v138);
      v59 = *(_QWORD *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
      v58 = *(_QWORD *)&v34[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
      v60 = swift_bridgeObjectRetain(v58);
      v61 = v134;
      v62 = Date.init()(v60);
      v63 = Date.timeIntervalSince1970.getter(v62);
      (*(void (**)(char *, uint64_t))(v137 + 8))(v61, v42);
      v64 = (uint64_t)v123;
      *v123 = 1;
      strcpy((char *)(v64 + 8), "AADeviceRecord");
      *(_BYTE *)(v64 + 23) = -18;
      v65 = (int *)v135;
      (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v64 + *(int *)(v135 + 24), v56, v57);
      v66 = (_QWORD *)(v64 + v65[7]);
      *v66 = v59;
      v66[1] = v58;
      *(double *)(v64 + v65[8]) = v63;
      *(_OWORD *)(v64 + v65[9]) = xmmword_100187E30;
      v67 = objc_autoreleasePoolPush();
      sub_100146F6C(v54, v64);
      objc_autoreleasePoolPop(v67);
      v68 = sub_10012A6A0();
      v69 = *(void **)(v68 + 72);
      v71 = v139;
      v70 = v140;
      *v139 = v69;
      v72 = v122;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v70 + 104))(v71, enum case for DispatchPredicate.notOnQueue(_:), v122);
      v73 = v69;
      LOBYTE(v56) = _dispatchPreconditionTest(_:)(v71);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(v70 + 8))(v71, v72);
      if ((v56 & 1) != 0)
      {
        OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v68, &type metadata for Bool);
        v75 = swift_unknownObjectRelease(v68);
        if (LOBYTE(aBlock[0]) == 1)
        {
          v76 = sub_10012A6A0();
          v77 = objc_autoreleasePoolPush();
          v78 = *v36;
          v79 = v36[1];
          sub_1000A0E74(*v36, v79);
          sub_100109DEC(v78, v79);
          v81 = v80;
          sub_1000A103C(v78, v79);
          if (!v81)
          {
            v82 = v34;
            v81 = sub_1000A9DB8((uint64_t)v82).super.isa;

          }
          aBlock[0] = v81;
          sub_10010894C(aBlock);
          objc_autoreleasePoolPop(v77);
          v83 = -[objc_class recordID](v81, "recordID");

          v84 = swift_allocObject(&unk_1001EB580, 24, 7);
          swift_weakInit(v84 + 16, v141);
          v85 = swift_allocObject(&unk_1001EBD50, 32, 7);
          *(_QWORD *)(v85 + 16) = v34;
          *(_QWORD *)(v85 + 24) = v84;
          v86 = swift_allocObject(&unk_1001EBD78, 49, 7);
          *(_QWORD *)(v86 + 16) = v76;
          *(_QWORD *)(v86 + 24) = v83;
          *(_QWORD *)(v86 + 32) = sub_100165C84;
          *(_QWORD *)(v86 + 40) = v85;
          *(_BYTE *)(v86 + 48) = 1;
          v87 = v34;
          swift_retain(v84);
          swift_unknownObjectRetain(v76);
          v88 = v83;
          swift_retain(v85);
          sub_1000F7A44((uint64_t)sub_100164E44, v86);
          swift_unknownObjectRelease(v76);

          swift_release(v84);
          swift_release(v85);
          swift_release(v86);
        }
        else
        {
          v108 = static os_log_type_t.error.getter(v75);
          v109 = qword_100218DE8;
          v110 = swift_allocObject(v120, 72, 7);
          *(_OWORD *)(v110 + 16) = v119;
          v111 = v124;
          v112 = objc_msgSend(v111, "description");
          v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
          v115 = v114;

          v116 = v118;
          *(_QWORD *)(v110 + 56) = &type metadata for String;
          *(_QWORD *)(v110 + 64) = v116;
          *(_QWORD *)(v110 + 32) = v113;
          *(_QWORD *)(v110 + 40) = v115;
          os_log(_:dso:log:_:_:)(v108, &_mh_execute_header, v109, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v110);
          swift_bridgeObjectRelease(v110);
        }
        ((void (*)(_QWORD))v125)(0);

        return sub_1000AE58C(v64, type metadata accessor for BTDeferredRecord);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v92 = *(void **)(v141 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
      v93 = (_QWORD *)swift_allocObject(&unk_1001EBD00, 40, 7);
      v94 = v124;
      v95 = v125;
      v93[2] = v124;
      v93[3] = v95;
      v96 = v126;
      v93[4] = v126;
      v145 = (unint64_t)sub_100165C64;
      v146 = v93;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_1000E6A24;
      v144 = (ValueMetadata *)&unk_1001EBD18;
      v97 = _Block_copy(aBlock);
      v98 = v94;
      v99 = v92;
      v100 = swift_retain(v96);
      v101 = v127;
      static DispatchQoS.unspecified.getter(v100);
      v142 = _swiftEmptyArrayStorage;
      v102 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v103 = sub_1000A0980(&qword_100211D00);
      v104 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
      v105 = v130;
      v106 = v103;
      v107 = v132;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v142, v106, v104, v132, v102);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v101, v105, v97);
      _Block_release(v97);

      (*(void (**)(char *, uint64_t))(v131 + 8))(v105, v107);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v101, v129);
      return swift_release(v146);
    }
  }
  else
  {
    v89 = sub_1000D8604();
    v90 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v89, 0, 0);
    *v91 = 0x8000000000000038;
    a2();
    return swift_errorRelease(v90);
  }
  return result;
}

uint64_t sub_100141A20(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];

  if (a1)
  {
    v4 = swift_errorRetain(a1);
    v5 = static os_log_type_t.error.getter(v4);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v6 = qword_100218DE8;
    v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100184870;
    v26[0] = a1;
    swift_errorRetain(a1);
    v9 = sub_1000A0980(&qword_100210710);
    v10 = String.init<A>(describing:)(v26, v9);
    v12 = v11;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Handling Error deleting AADeviceRecord - %@", 43, 2, v8);
    swift_bridgeObjectRelease(v8);
    return swift_errorRelease(a1);
  }
  else
  {
    v15 = a3 + 16;
    v16 = static os_log_type_t.default.getter(0);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v17 = qword_100218DE8;
    v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100184870;
    v20 = a2;
    v21 = objc_msgSend(v20, "description");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v19 + 32) = v22;
    *(_QWORD *)(v19 + 40) = v24;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "CloudSync: Deleted AADeviceRecord from cloud - %@", 49, 2, v19);
    swift_bridgeObjectRelease(v19);
    swift_beginAccess(v15, v26, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (result)
    {
      v25 = result;
      sub_10013DFC0(v20, 0);
      return swift_release(v25);
    }
  }
  return result;
}

void sub_100141C60(char *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  objc_class *v23;
  Class isa;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  objc_class *v77;
  Class v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  objc_class *v82;
  _BYTE v83[12];
  unsigned int v84;
  void (*v85)(void);
  uint64_t v86;
  _QWORD v87[5];

  v4 = v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v83[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v87[3] = &type metadata for AudioAccessoryFeatures;
  v87[4] = sub_1000A42C4();
  v12 = isFeatureEnabled(_:)(v87);
  sub_1000A2140(v87);
  if ((v12 & 1) == 0)
  {
    v43 = sub_1000D8604();
    v44 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v43, 0, 0);
    *v45 = 0x8000000000000038;
    a2();
    swift_errorRelease(v44);
    return;
  }
  v13 = sub_100129690();
  v14 = *(_QWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  v15 = *(_QWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  if (qword_100210130 != -1)
    swift_once(&qword_100210130, sub_1000A5BC0);
  v16 = sub_1000A0A00(v8, (uint64_t)qword_100218C00);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v16, v8);
  v17 = (char *)sub_100127638(v14, v15, (uint64_t)v11, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
  swift_release(v13);
  v18 = (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  v86 = a3;
  if (v17)
  {
    v19 = sub_1000A9598((uint64_t)a1);
    v85 = a2;
    if ((v19 & 1) == 0)
    {
      v20 = objc_autoreleasePoolPush();
      v21 = *(_QWORD *)&v17[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
      v22 = *(_QWORD *)&v17[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
      sub_1000A0E74(v21, v22);
      sub_100109DEC(v21, v22);
      isa = v23;
      sub_1000A103C(v21, v22);
      if (!isa)
      {
        v25 = v17;
        isa = sub_1000A9D94((uint64_t)v25).super.isa;

      }
      v87[0] = isa;
      sub_1000A89A0((unint64_t)v87);
      objc_autoreleasePoolPop(v20);
      v26 = -[objc_class recordChangeTag](isa, "recordChangeTag");

      if (v26)
      {

        v28 = static os_log_type_t.default.getter(v27);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v29 = qword_100218DE8;
        v30 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v31 = swift_allocObject(v30, 112, 7);
        *(_OWORD *)(v31 + 16) = xmmword_1001858F0;
        v32 = v17;
        v33 = objc_msgSend(v32, "description");
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v36 = v35;

        *(_QWORD *)(v31 + 56) = &type metadata for String;
        v37 = sub_1000A0DF4();
        *(_QWORD *)(v31 + 64) = v37;
        *(_QWORD *)(v31 + 32) = v34;
        *(_QWORD *)(v31 + 40) = v36;
        v38 = a1;
        v39 = objc_msgSend(v38, "description");
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

        *(_QWORD *)(v31 + 96) = &type metadata for String;
        *(_QWORD *)(v31 + 104) = v37;
        *(_QWORD *)(v31 + 72) = v40;
        *(_QWORD *)(v31 + 80) = v42;
        os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "No change from cached %@ [to] %@", 32, 2, v31);
        swift_bridgeObjectRelease(v31);
        ((void (*)(_QWORD))v85)(0);

        return;
      }
    }
    v84 = static os_log_type_t.default.getter(v19);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v46 = qword_100218DE8;
    v47 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v48 = swift_allocObject(v47, 112, 7);
    *(_OWORD *)(v48 + 16) = xmmword_1001858F0;
    v49 = v17;
    v50 = objc_msgSend(v49, "description");
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    *(_QWORD *)(v48 + 56) = &type metadata for String;
    v54 = sub_1000A0DF4();
    *(_QWORD *)(v48 + 64) = v54;
    *(_QWORD *)(v48 + 32) = v51;
    *(_QWORD *)(v48 + 40) = v53;
    v55 = a1;
    v56 = objc_msgSend(v55, "description");
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v59 = v58;

    *(_QWORD *)(v48 + 96) = &type metadata for String;
    *(_QWORD *)(v48 + 104) = v54;
    *(_QWORD *)(v48 + 72) = v57;
    *(_QWORD *)(v48 + 80) = v59;
    os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v46, "Updating cached AAProxCardsRecord: %@ with %@", 45, 2, v48);
    swift_bridgeObjectRelease(v48);
    v60 = v49;
    sub_1000A8FBC(v55);

    a2 = v85;
  }
  else
  {
    v61 = static os_log_type_t.default.getter(v18);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v62 = qword_100218DE8;
    v63 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v64 = swift_allocObject(v63, 72, 7);
    *(_OWORD *)(v64 + 16) = xmmword_100184870;
    v65 = a1;
    v66 = objc_msgSend(v65, "description");
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v69 = v68;

    *(_QWORD *)(v64 + 56) = &type metadata for String;
    *(_QWORD *)(v64 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v64 + 32) = v67;
    *(_QWORD *)(v64 + 40) = v69;
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Add AAProxCardsRecord: %@", 25, 2, v64);
    swift_bridgeObjectRelease(v64);
    v60 = v65;
  }
  v70 = sub_100129690();
  v87[0] = v60;
  __chkstk_darwin(v70);
  *(_QWORD *)&v83[-16] = v71;
  *(_QWORD *)&v83[-8] = v87;
  v72 = v60;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001653E8, &v83[-32], &type metadata for () + 1);

  swift_release(v70);
  ((void (*)(_QWORD))a2)(0);
  v73 = v72;
  v74 = objc_autoreleasePoolPush();
  v75 = *(_QWORD *)&v73[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v76 = *(_QWORD *)&v73[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
  sub_1000A0E74(v75, v76);
  sub_100109DEC(v75, v76);
  v78 = v77;
  sub_1000A103C(v75, v76);
  if (!v78)
  {
    v79 = v73;
    v78 = sub_1000A9D94((uint64_t)v79).super.isa;

  }
  v87[0] = v78;
  sub_1000A89A0((unint64_t)v87);
  objc_autoreleasePoolPop(v74);

  v80 = sub_10012A6A0();
  v81 = swift_allocObject(&unk_1001EBAF8, 32, 7);
  *(_QWORD *)(v81 + 16) = v4;
  *(_QWORD *)(v81 + 24) = v78;
  swift_retain(v4);
  v82 = v78;
  sub_1000F8080(v82, 1, (uint64_t)sub_100165408, v81);
  swift_unknownObjectRelease(v80);
  swift_release(v81);

}

uint64_t sub_10014249C(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  objc_class *v40;
  Class isa;
  char *v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  objc_class *v48;
  Class v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  int *v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  id v73;
  char v74;
  uint64_t result;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  objc_class *v81;
  Class v82;
  char *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  id v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  void *v93;
  _QWORD *v94;
  id v95;
  void (*v96)(void);
  uint64_t v97;
  void *v98;
  id v99;
  id v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  id v125;
  void (*v126)(void);
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD aBlock[3];
  ValueMetadata *v145;
  unint64_t v146;
  _QWORD *v147;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v132 = *(_QWORD *)(v6 - 8);
  v133 = v6;
  __chkstk_darwin(v6);
  v131 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for DispatchQoS(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v128 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v141 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v140 = (uint64_t *)((char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Date(0);
  v138 = *(_QWORD *)(v11 - 8);
  v139 = v11;
  __chkstk_darwin(v11);
  v134 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v137 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v135 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v136);
  v16 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = &type metadata for AudioAccessoryFeatures;
  v146 = sub_1000A42C4();
  v21 = isFeatureEnabled(_:)(aBlock);
  v22 = sub_1000A2140(aBlock);
  if ((v21 & 1) != 0)
  {
    v122 = v13;
    v123 = v9;
    v124 = v16;
    v126 = a2;
    v127 = a3;
    v23 = static os_log_type_t.default.getter(v22);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v24 = qword_100218DE8;
    v121 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v25 = swift_allocObject(v121, 72, 7);
    v120 = xmmword_100184870;
    *(_OWORD *)(v25 + 16) = xmmword_100184870;
    v26 = a1;
    v27 = objc_msgSend(v26, "description");
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    *(_QWORD *)(v25 + 56) = &type metadata for String;
    v119 = sub_1000A0DF4();
    *(_QWORD *)(v25 + 64) = v119;
    *(_QWORD *)(v25 + 32) = v28;
    *(_QWORD *)(v25 + 40) = v30;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Remove AAProxCardsRecord: %@", 28, 2, v25);
    swift_bridgeObjectRelease(v25);
    v31 = sub_100129690();
    v125 = v26;
    v32 = *(_QWORD *)&v26[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
    v33 = *(_QWORD *)&v26[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
    if (qword_100210130 != -1)
      swift_once(&qword_100210130, sub_1000A5BC0);
    v34 = sub_1000A0A00(v17, (uint64_t)qword_100218C00);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v34, v17);
    v35 = (char *)sub_100127638(v32, v33, (uint64_t)v20, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
    swift_release(v31);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    if (v35)
    {
      v36 = objc_autoreleasePoolPush();
      v37 = (uint64_t *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
      v38 = *(_QWORD *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
      v39 = *(_QWORD *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
      sub_1000A0E74(v38, v39);
      sub_100109DEC(v38, v39);
      isa = v40;
      sub_1000A103C(v38, v39);
      if (!isa)
      {
        v42 = v35;
        isa = sub_1000A9D94((uint64_t)v42).super.isa;

      }
      v43 = v122;
      aBlock[0] = isa;
      sub_1000A89A0((unint64_t)aBlock);
      objc_autoreleasePoolPop(v36);
      v44 = -[objc_class recordID](isa, "recordID");

      v45 = objc_autoreleasePoolPush();
      v46 = *v37;
      v47 = v37[1];
      sub_1000A0E74(*v37, v47);
      sub_100109DEC(v46, v47);
      v49 = v48;
      sub_1000A103C(v46, v47);
      if (!v49)
      {
        v50 = v35;
        v49 = sub_1000A9D94((uint64_t)v50).super.isa;

      }
      aBlock[0] = v49;
      sub_1000A89A0((unint64_t)aBlock);
      objc_autoreleasePoolPop(v45);
      v52 = CKRecord.recordType.getter(v51);
      v54 = v53;

      v55 = v142;
      sub_10013A5F4(v44, v52, v54, 0);

      swift_bridgeObjectRelease(v54);
      v56 = v137;
      v57 = v135;
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v135, &v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier], v43);
      v59 = *(_QWORD *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
      v58 = *(_QWORD *)&v35[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
      v60 = swift_bridgeObjectRetain(v58);
      v61 = v134;
      v62 = Date.init()(v60);
      v63 = Date.timeIntervalSince1970.getter(v62);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v61, v139);
      v64 = (uint64_t)v124;
      *v124 = 1;
      *(_QWORD *)(v64 + 8) = 0xD000000000000011;
      *(_QWORD *)(v64 + 16) = 0x80000001001B1050;
      v65 = (int *)v136;
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v64 + *(int *)(v136 + 24), v57, v43);
      v66 = (_QWORD *)(v64 + v65[7]);
      *v66 = v59;
      v66[1] = v58;
      *(double *)(v64 + v65[8]) = v63;
      *(_OWORD *)(v64 + v65[9]) = xmmword_100187E30;
      v67 = objc_autoreleasePoolPush();
      sub_100146F6C(v55, v64);
      objc_autoreleasePoolPop(v67);
      v68 = sub_10012A6A0();
      v69 = *(void **)(v68 + 72);
      v71 = v140;
      v70 = v141;
      *v140 = v69;
      v72 = v123;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v70 + 104))(v71, enum case for DispatchPredicate.notOnQueue(_:), v123);
      v73 = v69;
      v74 = _dispatchPreconditionTest(_:)(v71);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(v70 + 8))(v71, v72);
      if ((v74 & 1) != 0)
      {
        OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v68, &type metadata for Bool);
        v76 = swift_unknownObjectRelease(v68);
        if (LOBYTE(aBlock[0]) == 1)
        {
          v77 = sub_10012A6A0();
          v78 = objc_autoreleasePoolPush();
          v79 = *v37;
          v80 = v37[1];
          sub_1000A0E74(*v37, v80);
          sub_100109DEC(v79, v80);
          v82 = v81;
          sub_1000A103C(v79, v80);
          if (!v82)
          {
            v83 = v35;
            v82 = sub_1000A9D94((uint64_t)v83).super.isa;

          }
          aBlock[0] = v82;
          sub_1000A89A0((unint64_t)aBlock);
          objc_autoreleasePoolPop(v78);
          v84 = -[objc_class recordID](v82, "recordID");

          v85 = swift_allocObject(&unk_1001EB580, 24, 7);
          swift_weakInit(v85 + 16, v142);
          v86 = swift_allocObject(&unk_1001EBAA8, 32, 7);
          *(_QWORD *)(v86 + 16) = v35;
          *(_QWORD *)(v86 + 24) = v85;
          v87 = swift_allocObject(&unk_1001EBAD0, 49, 7);
          *(_QWORD *)(v87 + 16) = v77;
          *(_QWORD *)(v87 + 24) = v84;
          *(_QWORD *)(v87 + 32) = sub_1001653DC;
          *(_QWORD *)(v87 + 40) = v86;
          *(_BYTE *)(v87 + 48) = 1;
          v88 = v35;
          swift_retain(v85);
          swift_unknownObjectRetain(v77);
          v89 = v84;
          swift_retain(v86);
          sub_1000F7A44((uint64_t)sub_100164E44, v87);
          swift_unknownObjectRelease(v77);

          swift_release(v85);
          swift_release(v86);
          swift_release(v87);
        }
        else
        {
          v109 = static os_log_type_t.error.getter(v76);
          v110 = qword_100218DE8;
          v111 = swift_allocObject(v121, 72, 7);
          *(_OWORD *)(v111 + 16) = v120;
          v112 = v125;
          v113 = objc_msgSend(v112, "description");
          v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
          v116 = v115;

          v117 = v119;
          *(_QWORD *)(v111 + 56) = &type metadata for String;
          *(_QWORD *)(v111 + 64) = v117;
          *(_QWORD *)(v111 + 32) = v114;
          *(_QWORD *)(v111 + 40) = v116;
          os_log(_:dso:log:_:_:)(v109, &_mh_execute_header, v110, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v111);
          swift_bridgeObjectRelease(v111);
        }
        ((void (*)(_QWORD))v126)(0);

        return sub_1000AE58C(v64, type metadata accessor for BTDeferredRecord);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v93 = *(void **)(v142 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
      v94 = (_QWORD *)swift_allocObject(&unk_1001EBA58, 40, 7);
      v95 = v125;
      v96 = v126;
      v94[2] = v125;
      v94[3] = v96;
      v97 = v127;
      v94[4] = v127;
      v146 = (unint64_t)sub_100168634;
      v147 = v94;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000E6A24;
      v145 = (ValueMetadata *)&unk_1001EBA70;
      v98 = _Block_copy(aBlock);
      v99 = v95;
      v100 = v93;
      v101 = swift_retain(v97);
      v102 = v128;
      static DispatchQoS.unspecified.getter(v101);
      v143 = _swiftEmptyArrayStorage;
      v103 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v104 = sub_1000A0980(&qword_100211D00);
      v105 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
      v106 = v131;
      v107 = v104;
      v108 = v133;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v143, v107, v105, v133, v103);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v102, v106, v98);
      _Block_release(v98);

      (*(void (**)(char *, uint64_t))(v132 + 8))(v106, v108);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v102, v130);
      return swift_release(v147);
    }
  }
  else
  {
    v90 = sub_1000D8604();
    v91 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v90, 0, 0);
    *v92 = 0x8000000000000038;
    a2();
    return swift_errorRelease(v91);
  }
  return result;
}

uint64_t sub_100142F7C(void *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = static os_log_type_t.error.getter(a1);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v5 = qword_100218DE8;
  v6 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100184870;
  v8 = a1;
  v9 = objc_msgSend(v8, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v12;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Record not found to remove: %@", 30, 2, v7);
  swift_bridgeObjectRelease(v7);
  return a2(0);
}

uint64_t sub_1001430A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];

  if (a1)
  {
    v4 = swift_errorRetain(a1);
    v5 = static os_log_type_t.error.getter(v4);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v6 = qword_100218DE8;
    v7 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100184870;
    v26[0] = a1;
    swift_errorRetain(a1);
    v9 = sub_1000A0980(&qword_100210710);
    v10 = String.init<A>(describing:)(v26, v9);
    v12 = v11;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Handling Error deleting AAProxCardsRecord - %@", 46, 2, v8);
    swift_bridgeObjectRelease(v8);
    return swift_errorRelease(a1);
  }
  else
  {
    v15 = a3 + 16;
    v16 = static os_log_type_t.default.getter(0);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v17 = qword_100218DE8;
    v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100184870;
    v20 = a2;
    v21 = objc_msgSend(v20, "description");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v19 + 32) = v22;
    *(_QWORD *)(v19 + 40) = v24;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "CloudSync: Deleted AAProxCardsRecord from cloud - %@", 52, 2, v19);
    swift_bridgeObjectRelease(v19);
    swift_beginAccess(v15, v26, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (result)
    {
      v25 = result;
      sub_10013E574(v20, 0);
      return swift_release(v25);
    }
  }
  return result;
}

uint64_t sub_1001432E4(void *a1, int a2, void (*a3)(uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  unint64_t v37;
  __objc2_meth_list **p_opt_inst_meths;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v90;
  id v91;
  void *v92;
  BOOL v93;
  uint64_t v94;
  id v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  id v116;
  id v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t Strong;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  id v140;
  uint64_t v141;
  char *v142;
  __objc2_meth_list **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  const void *v149;
  char *v150;
  id v151;
  int64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  _QWORD *v167;
  uint64_t v168;
  id v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int (*v209)(unint64_t, uint64_t, uint64_t);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  char *v219;
  uint64_t v220;
  __int128 v221;
  unint64_t v222;
  uint64_t v223;
  __objc2_meth_list **v224;
  unsigned int v225;
  uint64_t v226;
  id v227;
  __int128 v228;
  unsigned int (*v229)(char *, uint64_t, uint64_t);
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  id v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void (*v254)(uint64_t);
  uint64_t v255;
  unint64_t v256;
  __objc2_meth_list **v257;
  int64_t v258;
  int64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  _QWORD *v263;
  _QWORD aBlock[5];
  uint64_t v265;
  uint64_t v266;

  v253 = a4;
  v254 = a3;
  LODWORD(v4) = a2;
  v241 = type metadata accessor for DispatchWorkItemFlags(0);
  v240 = *(_QWORD *)(v241 - 8);
  __chkstk_darwin(v241);
  v239 = (char *)&v218 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = type metadata accessor for DispatchQoS(0);
  v237 = *(_QWORD *)(v238 - 8);
  __chkstk_darwin(v238);
  v236 = (char *)&v218 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = type metadata accessor for URL(0);
  v243 = *(_QWORD *)(v244 - 8);
  __chkstk_darwin(v244);
  v242 = (char *)&v218 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v9);
  v249 = (uint64_t)&v218 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = type metadata accessor for MagicPairingSettingsRecord(0);
  v255 = *(_QWORD *)(v261 - 8);
  __chkstk_darwin(v261);
  v262 = (char *)&v218 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v260 = (uint64_t)&v218 - v13;
  v235 = v14;
  __chkstk_darwin(v15);
  v248 = (unint64_t)&v218 - v16;
  v17 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v17);
  v250 = (char *)&v218 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v218 - v20;
  v251 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  v246 = *(_QWORD *)(v251 - 8);
  __chkstk_darwin(v251);
  v234 = (uint64_t)&v218 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v218 - v24;
  __chkstk_darwin(v26);
  v252 = (uint64_t)&v218 - v27;
  *(_QWORD *)&v29 = __chkstk_darwin(v28).n128_u64[0];
  v31 = (char *)&v218 - v30;
  v32 = objc_msgSend(a1, "modifiedByDevice", v29);
  v33 = (uint64_t)v32;
  if (v32)
  {
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v256 = v35;
  }
  else
  {
    v34 = 0;
    v256 = 0;
  }
  v36 = a1;
  v37 = 0;
  sub_1000E4DAC(v36, (uint64_t)v31);
  p_opt_inst_meths = &OBJC_PROTOCOL___BTServicesXPCDaemonInterface.opt_inst_meths;
  v233 = v36;
  sub_10012B40C((uint64_t)v21);
  sub_1000AE548((uint64_t)v31, (uint64_t)v25, type metadata accessor for LegacyMagicPairingSettingsRecords);
  v229 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v246 + 48);
  v39 = v229(v21, 1, v251);
  v245 = v31;
  if (v39 == 1)
  {
    sub_1000C6CD0((uint64_t)v25, v252, type metadata accessor for LegacyMagicPairingSettingsRecords);
    sub_1000A1000((uint64_t)v21, &qword_100210CD8);
  }
  else
  {
    sub_1000AE58C((uint64_t)v25, type metadata accessor for LegacyMagicPairingSettingsRecords);
    sub_1000C6CD0((uint64_t)v21, v252, type metadata accessor for LegacyMagicPairingSettingsRecords);
  }
  sub_1000E2648();
  v41 = v40;
  if (v40 >> 62)
    goto LABEL_168;
  v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
  swift_bridgeObjectRelease(v41);
  sub_1000E2648();
  v44 = v43;
  if ((unint64_t)v43 >> 62)
  {
    if (v43 >= 0)
      v43 &= 0xFFFFFFFFFFFFFF8uLL;
    v45 = _CocoaArrayWrapper.endIndex.getter(v43);
  }
  else
  {
    v45 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v258 = v45;
  v259 = v42;
  v46 = swift_bridgeObjectRelease(v44);
  v47 = static os_log_type_t.default.getter(v46);
  if (p_opt_inst_meths[60] != (__objc2_meth_list *)-1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v48 = qword_100218DE8;
  v49 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v50 = swift_allocObject(v49, 192, 7);
  *(_OWORD *)(v50 + 16) = xmmword_100186EB0;
  *(_QWORD *)(v50 + 56) = &type metadata for Bool;
  *(_QWORD *)(v50 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v50 + 32) = v4 & 1;
  *(_QWORD *)(v50 + 96) = &type metadata for String;
  v51 = sub_1000A0DF4();
  v52 = v256;
  if (v256)
    v53 = v34;
  else
    v53 = 15932;
  LODWORD(v231) = v4;
  if (v256)
    v54 = v256;
  else
    v54 = 0xE200000000000000;
  *(_QWORD *)(v50 + 72) = v53;
  *(_QWORD *)(v50 + 80) = v54;
  *(_QWORD *)(v50 + 136) = &type metadata for Int;
  *(_QWORD *)(v50 + 144) = &protocol witness table for Int;
  v232 = v51;
  v55 = v259;
  *(_QWORD *)(v50 + 104) = v51;
  *(_QWORD *)(v50 + 112) = v55;
  *(_QWORD *)(v50 + 176) = &type metadata for Int;
  *(_QWORD *)(v50 + 184) = &protocol witness table for Int;
  *(_QWORD *)(v50 + 152) = v258;
  swift_bridgeObjectRetain(v52);
  os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "(User Initiated: %d) Legacy magic pairing blob updated from %@, Cached: %d, Cloud: %d", 85, 2, v50);
  swift_bridgeObjectRelease(v50);
  v56 = sub_100129690();
  __chkstk_darwin(v56);
  v57 = (uint64_t)v245;
  *((_QWORD *)&v218 - 2) = v58;
  *((_QWORD *)&v218 - 1) = v57;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001650E8, &v218 - 2, &type metadata for () + 1);
  if (v37)
  {

    swift_bridgeObjectRelease(v52);
    swift_release(v56);
    sub_1000AE58C(v252, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v59 = sub_1000AE58C(v57, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v41 = static os_log_type_t.error.getter(v59);
    v60 = (uint64_t)&unk_100218000;
    if (qword_1002101E0 != -1)
      goto LABEL_164;
    goto LABEL_21;
  }
  v222 = v54;
  v223 = v53;
  v72 = swift_release(v56);
  v73 = static os_log_type_t.default.getter(v72);
  v74 = qword_100218DE8;
  v247 = v49;
  v34 = swift_allocObject(v49, 112, 7);
  v221 = xmmword_1001858F0;
  *(_OWORD *)(v34 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v34 + 56) = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  *(_QWORD *)(v34 + 64) = sub_100164E60((unint64_t *)&qword_1002108A0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  v75 = v233;
  *(_QWORD *)(v34 + 32) = v233;
  v76 = v57;
  v77 = (uint64_t *)(v57 + *(int *)(v251 + 20));
  v78 = *v77;
  v79 = v77[1];
  v80 = v75;
  sub_1000A0E74(v78, v79);
  Data.hexString.getter(v78, v79);
  v82 = v81;
  v84 = v83;
  sub_1000A103C(v78, v79);
  v85 = v232;
  *(_QWORD *)(v34 + 96) = &type metadata for String;
  *(_QWORD *)(v34 + 104) = v85;
  *(_QWORD *)(v34 + 72) = v82;
  *(_QWORD *)(v34 + 80) = v84;
  os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Updated legacy magic pairing blob saved to disk: %@, %@", 55, 2, v34);
  swift_bridgeObjectRelease(v34);
  if ((v231 & 1) != 0)
  {
    swift_bridgeObjectRelease(v256);

    v254(0);
    sub_1000AE58C(v252, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v86 = v76;
    return sub_1000AE58C(v86, type metadata accessor for LegacyMagicPairingSettingsRecords);
  }
  if (v258 >= v259)
  {
    swift_bridgeObjectRelease(v256);

    p_opt_inst_meths = v257;
    v37 = (unint64_t)v250;
    goto LABEL_193;
  }
  v87 = objc_msgSend((id)objc_opt_self(CBIDSManager), "sharedInstance");
  v225 = objc_msgSend(v87, "isLegacyDevice:", v33);

  sub_1000E2648();
  v41 = v88;
  v266 = v88;
  sub_1000E2648();
  *(_QWORD *)&v228 = isUniquelyReferenced_nonNull_bridgeObject;
  if ((unint64_t)isUniquelyReferenced_nonNull_bridgeObject >> 62)
    goto LABEL_184;
  v90 = *(_QWORD *)((isUniquelyReferenced_nonNull_bridgeObject & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_27:
  p_opt_inst_meths = v257;
  v37 = (unint64_t)v250;
  v4 = (unint64_t)v262;
  v33 = v247;
  if (!v90)
  {
    swift_bridgeObjectRelease(v228);
    v129 = v41;
LABEL_121:
    v230 = v129;
    if ((unint64_t)v129 >> 62)
    {
      if (v129 < 0)
        v208 = v129;
      else
        v208 = v129 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v129);
      v41 = _CocoaArrayWrapper.endIndex.getter(v208);
      if (v41)
        goto LABEL_123;
    }
    else
    {
      v41 = *(_QWORD *)((v129 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v129);
      if (v41)
      {
LABEL_123:
        isUniquelyReferenced_nonNull_bridgeObject = objc_opt_self(BTSystemConfiguration);
        v233 = (id)isUniquelyReferenced_nonNull_bridgeObject;
        v130 = 0;
        v224 = p_opt_inst_meths + 3;
        v258 = v230 & 0xC000000000000001;
        v220 = v230 & 0xFFFFFFFFFFFFFF8;
        v219 = (char *)(v230 + 32);
        v218 = xmmword_100187640;
        v228 = xmmword_100184870;
        v231 = v41;
        while (1)
        {
          if (v258)
          {
            v151 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v130, v230);
          }
          else
          {
            if (v130 >= *(_QWORD *)(v220 + 16))
              goto LABEL_181;
            v151 = *(id *)&v219[8 * v130];
          }
          v41 = (uint64_t)v151;
          v93 = __OFADD__(v130, 1);
          v152 = v130 + 1;
          if (v93)
            goto LABEL_165;
          v153 = objc_msgSend(v233, "isFirstUnlocked");
          v259 = v152;
          if ((_DWORD)v153)
          {
            v154 = sub_100129690();
            if (qword_100210160 != -1)
              swift_once(&qword_100210160, sub_1000C81B8);
            v155 = v244;
            v156 = sub_1000A0A00(v244, (uint64_t)qword_100218C90);
            v157 = v243;
            v158 = (uint64_t)v242;
            (*(void (**)(char *, uint64_t, uint64_t))(v243 + 16))(v242, v156, v155);
            v159 = sub_100128330(v158, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
            swift_release(v154);
            (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v158, v155);
            v160 = v159[2];
            if (!v160)
            {
LABEL_148:
              v175 = v255;
              v37 = v249;
              v34 = v261;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v255 + 56))(v249, 1, 1, v261);
              goto LABEL_152;
            }
          }
          else
          {
            v161 = static os_log_type_t.error.getter(v153);
            v159 = _swiftEmptyArrayStorage;
            os_log(_:dso:log:_:_:)(v161, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
            v160 = _swiftEmptyArrayStorage[2];
            if (!v160)
              goto LABEL_148;
          }
          v162 = v255;
          v163 = (uint64_t)v159
               + ((*(unsigned __int8 *)(v255 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v255 + 80));
          swift_bridgeObjectRetain(v159);
          v164 = *(_QWORD *)(v162 + 72);
          v165 = v260;
          while (1)
          {
            sub_1000AE548(v163, v165, type metadata accessor for MagicPairingSettingsRecord);
            v166 = (uint64_t *)(v165 + *(int *)(v261 + 24));
            v168 = *v166;
            v167 = (_QWORD *)v166[1];
            v169 = objc_msgSend((id)v41, "bluetoothAddress");
            v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v169);
            v172 = v171;

            if (v168 == v170 && v167 == v172)
            {
              swift_bridgeObjectRelease(v159);
              goto LABEL_151;
            }
            v174 = _stringCompareWithSmolCheck(_:_:expecting:)(v168, v167, v170, v172, 0);
            swift_bridgeObjectRelease(v172);
            if ((v174 & 1) != 0)
              break;
            v165 = v260;
            sub_1000AE58C(v260, type metadata accessor for MagicPairingSettingsRecord);
            v163 += v164;
            if (!--v160)
            {
              swift_bridgeObjectRelease(v159);
              p_opt_inst_meths = v257;
              v4 = (unint64_t)v262;
              v33 = v247;
              goto LABEL_148;
            }
          }
          v167 = v159;
LABEL_151:
          v4 = (unint64_t)v262;
          swift_bridgeObjectRelease(v167);
          v37 = v249;
          sub_1000C6CD0(v260, v249, type metadata accessor for MagicPairingSettingsRecord);
          v175 = v255;
          v34 = v261;
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v255 + 56))(v37, 0, 1, v261);
          p_opt_inst_meths = v257;
          v33 = v247;
LABEL_152:
          swift_bridgeObjectRelease(v159);
          if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v175 + 48))(v37, 1, v34) == 1)
          {
            sub_1000A1000(v37, (uint64_t *)&unk_100212190);
            Strong = swift_unknownObjectWeakLoadStrong(v224, v131);
            if (Strong)
            {
              v34 = Strong;
              v133 = sub_1000A0980(&qword_100211998);
              v134 = swift_allocObject(v133, 40, 7);
              *(_OWORD *)(v134 + 16) = v218;
              *(_QWORD *)(v134 + 32) = v41;
              aBlock[0] = v134;
              specialized Array._endMutation()(v134);
              v135 = aBlock[0];
              v136 = *(void **)(v34 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
              v137 = swift_allocObject(&unk_1001EB698, 24, 7);
              swift_unknownObjectWeakInit(v137 + 16, v34);
              v138 = swift_allocObject(&unk_1001EB990, 32, 7);
              *(_QWORD *)(v138 + 16) = v137;
              *(_QWORD *)(v138 + 24) = v135;
              v226 = v135;
              aBlock[4] = sub_100165144;
              v265 = v138;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_1000E6A24;
              aBlock[3] = &unk_1001EB9A8;
              v139 = _Block_copy(aBlock);
              v227 = (id)v41;
              v140 = v136;
              swift_retain(v137);
              v141 = swift_bridgeObjectRetain(v135);
              v142 = v236;
              static DispatchQoS.unspecified.getter(v141);
              v263 = _swiftEmptyArrayStorage;
              v143 = p_opt_inst_meths;
              v144 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v145 = sub_1000A0980(&qword_100211D00);
              v146 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
              v147 = v239;
              v37 = v241;
              v148 = v144;
              p_opt_inst_meths = v143;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v263, v145, v146, v241, v148);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v142, v147, v139);
              v149 = v139;
              v4 = (unint64_t)v262;
              _Block_release(v149);

              (*(void (**)(char *, unint64_t))(v240 + 8))(v147, v37);
              v150 = v142;
              v33 = v247;
              (*(void (**)(char *, uint64_t))(v237 + 8))(v150, v238);
              v41 = v265;
              swift_bridgeObjectRelease(v226);
              swift_unknownObjectRelease(v34);

              swift_release(v137);
              isUniquelyReferenced_nonNull_bridgeObject = swift_release(v41);
            }
            else
            {

            }
            goto LABEL_126;
          }
          v176 = v248;
          v177 = sub_1000C6CD0(v37, v248, type metadata accessor for MagicPairingSettingsRecord);
          v178 = static os_log_type_t.default.getter(v177);
          v179 = qword_100218DE8;
          v180 = swift_allocObject(v33, 72, 7);
          *(_OWORD *)(v180 + 16) = v228;
          sub_1000AE548(v176, v4, type metadata accessor for MagicPairingSettingsRecord);
          v181 = sub_1000C8310();
          v183 = v182;
          sub_1000AE58C(v4, type metadata accessor for MagicPairingSettingsRecord);
          v37 = (unint64_t)type metadata accessor for MagicPairingSettingsRecord;
          v184 = v232;
          *(_QWORD *)(v180 + 56) = &type metadata for String;
          *(_QWORD *)(v180 + 64) = v184;
          *(_QWORD *)(v180 + 32) = v181;
          *(_QWORD *)(v180 + 40) = v183;
          os_log(_:dso:log:_:_:)(v178, &_mh_execute_header, v179, "Removing from legacy cloud containers magic pairing records update: %@", 70, 2, v180);
          v185 = swift_bridgeObjectRelease(v180);
          if (v225)
          {
            v186 = static os_log_type_t.default.getter(v185);
            v227 = (id)qword_100218DE8;
            v187 = swift_allocObject(v247, 112, 7);
            *(_OWORD *)(v187 + 16) = v221;
            v188 = v248;
            sub_1000AE548(v248, v4, type metadata accessor for MagicPairingSettingsRecord);
            v189 = sub_1000C8310();
            v191 = v190;
            sub_1000AE58C(v4, type metadata accessor for MagicPairingSettingsRecord);
            *(_QWORD *)(v187 + 56) = &type metadata for String;
            *(_QWORD *)(v187 + 64) = v184;
            *(_QWORD *)(v187 + 32) = v189;
            *(_QWORD *)(v187 + 40) = v191;
            *(_QWORD *)(v187 + 96) = &type metadata for String;
            *(_QWORD *)(v187 + 104) = v184;
            v192 = v222;
            *(_QWORD *)(v187 + 72) = v223;
            *(_QWORD *)(v187 + 80) = v192;
            swift_bridgeObjectRetain(v256);
            os_log(_:dso:log:_:_:)(v186, &_mh_execute_header, v227, "Removing magic pairing record, %@ from older OS: %@", 51, 2, v187);
            swift_bridgeObjectRelease(v187);
            sub_1000AE548(v188, v4, type metadata accessor for MagicPairingSettingsRecord);
            v193 = *(unsigned __int8 *)(v255 + 80);
            v194 = (v193 + 16) & ~v193;
            v34 = swift_allocObject(&unk_1001EB9E0, v194 + v235, v193 | 7);
            sub_1000C6CD0(v4, v34 + v194, type metadata accessor for MagicPairingSettingsRecord);
            p_opt_inst_meths = v257;
            sub_100145FB0(v188, 1, (uint64_t (*)(_QWORD))sub_10016537C, v34);

            swift_release(v34);
            isUniquelyReferenced_nonNull_bridgeObject = sub_1000AE58C(v188, type metadata accessor for MagicPairingSettingsRecord);
            v33 = v247;
            v130 = v259;
            if (v259 == v231)
            {
LABEL_159:
              swift_bridgeObjectRelease(v230);
              swift_bridgeObjectRelease(v256);
              v206 = v266;
              v37 = (unint64_t)v250;
              goto LABEL_192;
            }
          }
          else
          {
            v195 = &v245[*(int *)(v251 + 28)];
            v37 = v248;
            v34 = v248 + *(int *)(v261 + 120);
            v196 = type metadata accessor for Date(0);
            v197 = sub_1000A0940((unint64_t *)&unk_1002122F8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v198 = dispatch thunk of static Comparable.< infix(_:_:)(v195, v34, v196, v197);
            if ((v198 & 1) != 0)
            {
              sub_1000AE58C(v37, type metadata accessor for MagicPairingSettingsRecord);

              v33 = v247;
              p_opt_inst_meths = v257;
            }
            else
            {
              v199 = static os_log_type_t.default.getter(v198);
              v34 = qword_100218DE8;
              v33 = v247;
              v200 = swift_allocObject(v247, 72, 7);
              *(_OWORD *)(v200 + 16) = v228;
              v41 = (uint64_t)(id)v41;
              v201 = objc_msgSend((id)v41, "description");
              v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
              v204 = v203;

              v205 = v232;
              *(_QWORD *)(v200 + 56) = &type metadata for String;
              *(_QWORD *)(v200 + 64) = v205;
              *(_QWORD *)(v200 + 32) = v202;
              *(_QWORD *)(v200 + 40) = v204;
              os_log(_:dso:log:_:_:)(v199, &_mh_execute_header, v34, "Legacy magic pairing records deleted: %@", 40, 2, v200);
              swift_bridgeObjectRelease(v200);
              p_opt_inst_meths = v257;
              sub_10013D41C(v37, 1);

              isUniquelyReferenced_nonNull_bridgeObject = sub_1000AE58C(v37, type metadata accessor for MagicPairingSettingsRecord);
            }
LABEL_126:
            v130 = v259;
            if (v259 == v231)
              goto LABEL_159;
          }
        }
      }
    }
    v206 = v230;
    swift_bridgeObjectRelease(v230);
    swift_bridgeObjectRelease(v256);
LABEL_192:
    swift_bridgeObjectRelease(v206);
LABEL_193:
    v209 = (unsigned int (*)(unint64_t, uint64_t, uint64_t))v229;
    sub_10012B40C(v37);
    if (v209(v37, 1, v251) == 1)
    {
      sub_1000A1000(v37, &qword_100210CD8);
    }
    else
    {
      v210 = v234;
      sub_1000C6CD0(v37, v234, type metadata accessor for LegacyMagicPairingSettingsRecords);
      v212 = swift_unknownObjectWeakLoadStrong(p_opt_inst_meths + 3, v211);
      if (v212)
      {
        v213 = v212;
        v214 = sub_1000A0980(&qword_100210D08);
        v215 = *(unsigned __int8 *)(v246 + 80);
        v216 = (v215 + 32) & ~v215;
        v217 = swift_allocObject(v214, v216 + *(_QWORD *)(v246 + 72), v215 | 7);
        *(_OWORD *)(v217 + 16) = xmmword_100184870;
        sub_1000AE548(v210, v217 + v216, type metadata accessor for LegacyMagicPairingSettingsRecords);
        sub_1001114A8(v217);
        swift_unknownObjectRelease(v213);
        swift_bridgeObjectRelease(v217);
      }
      sub_1000AE58C(v210, type metadata accessor for LegacyMagicPairingSettingsRecords);
    }
    v254(0);
    sub_1000AE58C(v252, type metadata accessor for LegacyMagicPairingSettingsRecords);
    v86 = (uint64_t)v245;
    return sub_1000AE58C(v86, type metadata accessor for LegacyMagicPairingSettingsRecords);
  }
  v41 = 0;
  v231 = v228 & 0xC000000000000001;
  v227 = (id)(v228 & 0xFFFFFFFFFFFFFF8);
  v226 = v228 + 32;
  v230 = v90;
  while (1)
  {
    if (v231)
    {
      v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v228);
    }
    else
    {
      if ((unint64_t)v41 >= *((_QWORD *)v227 + 2))
        goto LABEL_183;
      v91 = *(id *)(v226 + 8 * v41);
    }
    v92 = v91;
    v93 = __OFADD__(v41++, 1);
    if (v93)
      goto LABEL_166;
    v233 = (id)v41;
    v60 = v266;
    if ((unint64_t)v266 >> 62)
      break;
    v94 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v266);
    if (v94)
      goto LABEL_36;
LABEL_99:
    swift_bridgeObjectRelease(v60);
LABEL_100:
    if ((unint64_t)v60 >> 62)
    {
      if (v60 < 0)
        v126 = v60;
      else
        v126 = v60 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v60);
      v41 = _CocoaArrayWrapper.endIndex.getter(v126);
      swift_bridgeObjectRelease(v60);
      if ((unint64_t)v60 >> 62)
        goto LABEL_111;
    }
    else
    {
      v41 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_102:
      if ((unint64_t)v60 >> 62)
      {
LABEL_111:
        if (v60 < 0)
          v127 = v60;
        else
          v127 = v60 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v60);
        v34 = _CocoaArrayWrapper.endIndex.getter(v127);
        swift_bridgeObjectRelease(v60);
        goto LABEL_104;
      }
    }
    v34 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_104:
    p_opt_inst_meths = v257;
    v37 = (unint64_t)v250;
    v33 = v247;
    if (v34 < v41)
      goto LABEL_167;
    sub_10015E984(v41, v34);

    v41 = (uint64_t)v233;
    if (v233 == (id)v230)
    {
      swift_bridgeObjectRelease(v228);
      v129 = v266;
      goto LABEL_121;
    }
  }
  if (v266 < 0)
    v125 = v266;
  else
    v125 = v266 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v266);
  v94 = _CocoaArrayWrapper.endIndex.getter(v125);
  if (!v94)
    goto LABEL_99;
LABEL_36:
  v41 = 0;
  v258 = v94;
  v259 = v60 & 0xC000000000000001;
  v33 = 5;
  while (1)
  {
    if (v259)
      v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v60);
    else
      v95 = *(id *)(v60 + 8 * v41 + 32);
    v96 = v95;
    v97 = objc_msgSend(v95, "bluetoothAddress", (_QWORD)v218, *((_QWORD *)&v218 + 1));
    v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
    v100 = v99;

    v101 = v92;
    v102 = objc_msgSend(v92, "bluetoothAddress");
    v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
    v105 = v104;

    if (v98 == v103 && v100 == v105)
    {
      swift_bridgeObjectRelease(v60);

      swift_bridgeObjectRelease(v100);
LABEL_50:
      v4 = (unint64_t)v262;
      v92 = v101;
      isUniquelyReferenced_nonNull_bridgeObject = swift_bridgeObjectRelease(v100);
      v34 = v41 + 1;
      if (__OFADD__(v41, 1))
        goto LABEL_182;
      v60 = v266;
      if ((unint64_t)v266 >> 62)
      {
        if (v266 < 0)
          v128 = v266;
        else
          v128 = v266 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v266);
        v37 = _CocoaArrayWrapper.endIndex.getter(v128);
        swift_bridgeObjectRelease(v60);
      }
      else
      {
        v37 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      while (1)
      {
        if (v34 == v37)
          goto LABEL_102;
        v4 = v33 - 4;
        if ((v60 & 0xC000000000000001) != 0)
        {
          v108 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v60);
        }
        else
        {
          if ((v4 & 0x8000000000000000) != 0)
            goto LABEL_161;
          if (v4 >= *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_162;
          v108 = *(id *)(v60 + 8 * v33);
        }
        v60 = (uint64_t)v108;
        v109 = objc_msgSend(v108, "bluetoothAddress");
        v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
        v34 = v111;

        p_opt_inst_meths = (__objc2_meth_list **)objc_msgSend(v92, "bluetoothAddress");
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(p_opt_inst_meths);
        v113 = v112;

        if (v110 == v37 && v34 == v113)
        {

          swift_bridgeObjectRelease_n(v34, 2);
        }
        else
        {
          v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v34, v37, v113, 0);

          swift_bridgeObjectRelease(v34);
          isUniquelyReferenced_nonNull_bridgeObject = swift_bridgeObjectRelease(v113);
          if ((v37 & 1) == 0)
          {
            if (v4 != v41)
            {
              v115 = v266;
              if ((v266 & 0xC000000000000001) != 0)
              {
                v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v266);
                v116 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v115);
              }
              else
              {
                if (v41 < 0)
                {
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  if (isUniquelyReferenced_nonNull_bridgeObject >= 0)
                    isUniquelyReferenced_nonNull_bridgeObject &= 0xFFFFFFFFFFFFFF8uLL;
                  isUniquelyReferenced_nonNull_bridgeObject = _CocoaArrayWrapper.endIndex.getter(isUniquelyReferenced_nonNull_bridgeObject);
                  v90 = isUniquelyReferenced_nonNull_bridgeObject;
                  goto LABEL_27;
                }
                v37 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFF8) + 0x10);
                if (v41 >= v37)
                  goto LABEL_176;
                isUniquelyReferenced_nonNull_bridgeObject = (uint64_t)*(id *)(v266 + 8 * v41 + 32);
                if ((v4 & 0x8000000000000000) != 0)
                  goto LABEL_177;
                if (v4 >= v37)
                  goto LABEL_178;
                v34 = isUniquelyReferenced_nonNull_bridgeObject;
                v116 = *(id *)(v115 + 8 * v33);
              }
              v117 = v116;
              if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v115)
                || v115 < 0
                || (v115 & 0x4000000000000000) != 0)
              {
                v115 = sub_100169B3C(v115);
                v266 = v115;
              }
              v118 = *(void **)((v115 & 0xFFFFFFFFFFFFFF8) + 8 * v41 + 0x20);
              *(_QWORD *)((v115 & 0xFFFFFFFFFFFFFF8) + 8 * v41 + 0x20) = v117;

              specialized Array._endMutation()(v119);
              v120 = v266;
              isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v266);
              if (!(_DWORD)isUniquelyReferenced_nonNull_bridgeObject || v120 < 0 || (v120 & 0x4000000000000000) != 0)
              {
                isUniquelyReferenced_nonNull_bridgeObject = sub_100169B3C(v120);
                v120 = isUniquelyReferenced_nonNull_bridgeObject;
                v266 = isUniquelyReferenced_nonNull_bridgeObject;
              }
              if ((v4 & 0x8000000000000000) != 0)
                goto LABEL_179;
              v121 = v120 & 0xFFFFFFFFFFFFFF8;
              if (v4 >= *(_QWORD *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_180;
              v122 = *(void **)(v121 + 8 * v33);
              *(_QWORD *)(v121 + 8 * v33) = v34;

              v60 = (uint64_t)&v266;
              specialized Array._endMutation()(v123);
            }
            v93 = __OFADD__(v41++, 1);
            if (v93)
            {
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              if (v41 < 0)
                v207 = v41;
              else
                v207 = v41 & 0xFFFFFFFFFFFFFF8;
              v42 = _CocoaArrayWrapper.endIndex.getter(v207);
              goto LABEL_9;
            }
          }
        }
        v34 = v33 - 3;
        if (__OFADD__(v4, 1))
          goto LABEL_163;
        v60 = v266;
        if ((unint64_t)v266 >> 62)
        {
          if (v266 < 0)
            v124 = v266;
          else
            v124 = v266 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v266);
          v37 = _CocoaArrayWrapper.endIndex.getter(v124);
          swift_bridgeObjectRelease(v60);
        }
        else
        {
          v37 = *(_QWORD *)((v266 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v4 = (unint64_t)v262;
        ++v33;
      }
    }
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v100, v103, v105, 0);

    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v105);
    if ((v37 & 1) != 0)
    {
      v100 = v60;
      goto LABEL_50;
    }
    v107 = v41 + 1;
    v4 = (unint64_t)v262;
    if (__OFADD__(v41, 1))
      break;
    v92 = v101;
    ++v41;
    ++v33;
    if (v107 == v258)
    {
      swift_bridgeObjectRelease(v60);
      v60 = v266;
      goto LABEL_100;
    }
  }
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  swift_once(&qword_1002101E0, sub_1001687B0);
LABEL_21:
  v61 = *(_QWORD *)(v60 + 3560);
  v62 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v63 = swift_allocObject(v62, 72, 7);
  *(_OWORD *)(v63 + 16) = xmmword_100184870;
  aBlock[0] = v37;
  swift_errorRetain(v37);
  v64 = sub_1000A0980(&qword_100210710);
  v65 = String.init<A>(describing:)(aBlock, v64);
  v67 = v66;
  *(_QWORD *)(v63 + 56) = &type metadata for String;
  *(_QWORD *)(v63 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v63 + 32) = v65;
  *(_QWORD *)(v63 + 40) = v67;
  os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v61, "Unable to enocde LegacyMagicPairingSettingsRecords with error: %@", 65, 2, v63);
  swift_bridgeObjectRelease(v63);
  v68 = sub_1000D8604();
  v69 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v68, 0, 0);
  *v70 = v37 | 0x4000000000000000;
  swift_errorRetain(v37);
  v254(v69);
  swift_errorRelease(v69);
  return swift_errorRelease(v37);
}

void sub_100144DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for MagicPairingSettingsRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v7 = swift_errorRetain(a1);
    v8 = static os_log_type_t.error.getter(v7);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v9 = qword_100218DE8;
    v10 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v11 = swift_allocObject(v10, 112, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1001858F0;
    sub_1000AE548(a2, (uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
    v12 = sub_1000C8310();
    v14 = v13;
    sub_1000AE58C((uint64_t)v6, type metadata accessor for MagicPairingSettingsRecord);
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    v15 = sub_1000A0DF4();
    *(_QWORD *)(v11 + 64) = v15;
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v14;
    v20 = a1;
    swift_errorRetain(a1);
    v16 = sub_1000A0980(&qword_100210710);
    v17 = String.init<A>(describing:)(&v20, v16);
    *(_QWORD *)(v11 + 96) = &type metadata for String;
    *(_QWORD *)(v11 + 104) = v15;
    *(_QWORD *)(v11 + 72) = v17;
    *(_QWORD *)(v11 + 80) = v18;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Error removing from legacy magic pairing records update: %@, %@", 63, 2, v11);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(a1);
  }
}

uint64_t sub_100144F70(int a1, void (*a2)(_QWORD), void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  char **v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void (**v55)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void (**v106)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  id v111;
  uint64_t v112;

  v111 = a3;
  v6 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v6);
  v8 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for MagicPairingSettingsRecord(0);
  v106 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v109 - 8);
  __chkstk_darwin(v109);
  v104 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v110 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000A0980(&qword_100210CD8);
  __chkstk_darwin(v13);
  v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LegacyMagicPairingSettingsRecords(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v107 = (uint64_t)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v97 - v20;
  sub_10012B40C((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1000A1000((uint64_t)v15, &qword_100210CD8);
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    if (Strong)
    {
      v24 = Strong;
      v25 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
      if ((_DWORD)v25)
      {
        v26 = sub_100129690();
        if (qword_100210160 != -1)
          swift_once(&qword_100210160, sub_1000C81B8);
        v27 = sub_1000A0A00(v10, (uint64_t)qword_100218C90);
        v28 = (uint64_t)v110;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v110, v27, v10);
        v29 = sub_100128330(v28, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
        swift_release(v26);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v28, v10);
      }
      else
      {
        v66 = static os_log_type_t.error.getter(v25);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v29 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
      }
      sub_1001215A4((uint64_t)v29, (uint64_t)&unk_1001EB940, (uint64_t)sub_1001650A8, (uint64_t)&unk_1001EB958);
      swift_bridgeObjectRelease(v29);
      swift_unknownObjectRelease(v24);
    }
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
  v102 = (void (*)(uint64_t, uint64_t))a2;
  v103 = v10;
  v101 = a1;
  v108 = v3;
  v30 = sub_1000C6CD0((uint64_t)v15, (uint64_t)v21, type metadata accessor for LegacyMagicPairingSettingsRecords);
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v32 = qword_100218DE8;
  v100 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v33 = swift_allocObject(v100, 72, 7);
  v99 = xmmword_100184870;
  *(_OWORD *)(v33 + 16) = xmmword_100184870;
  v34 = v107;
  sub_1000AE548((uint64_t)v21, v107, type metadata accessor for LegacyMagicPairingSettingsRecords);
  v35 = sub_1000E3C00();
  v37 = v36;
  sub_1000AE58C(v34, type metadata accessor for LegacyMagicPairingSettingsRecords);
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v98 = sub_1000A0DF4();
  *(_QWORD *)(v33 + 64) = v98;
  *(_QWORD *)(v33 + 32) = v35;
  *(_QWORD *)(v33 + 40) = v37;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Deleted legacy magic pairing records Record from disk - %@", 58, 2, v33);
  swift_bridgeObjectRelease(v33);
  v38 = sub_100129690();
  v105 = v21;
  v39 = UUID.uuidString.getter(v38);
  v41 = v40;
  if (qword_100210188 != -1)
    swift_once(&qword_100210188, sub_1000E3AB4);
  v42 = v103;
  v43 = sub_1000A0A00(v103, (uint64_t)qword_100218D40);
  v44 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v11 + 16);
  v45 = (uint64_t)v110;
  v46 = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v110, v43, v42);
  __chkstk_darwin(v46);
  *(&v97 - 4) = v38;
  *(&v97 - 3) = v39;
  *(&v97 - 2) = v41;
  *(&v97 - 1) = v45;
  OS_dispatch_queue.sync<A>(execute:)(&v112, sub_1001684A0, &v97 - 6, &type metadata for Bool);
  swift_release(v38);
  swift_bridgeObjectRelease(v41);
  v47 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v47(v45, v42);
  ((void (*)(_QWORD))v102)(0);
  v48 = &selRef_fetchInCallUIState_;
  v111 = (id)objc_opt_self(BTSystemConfiguration);
  v49 = objc_msgSend(v111, "isFirstUnlocked");
  if ((_DWORD)v49)
  {
    v50 = v108;
    v51 = sub_100129690();
    if (qword_100210160 != -1)
      swift_once(&qword_100210160, sub_1000C81B8);
    v52 = sub_1000A0A00(v42, (uint64_t)qword_100218C90);
    ((void (*)(uint64_t, uint64_t, uint64_t))v44)(v45, v52, v42);
    v53 = sub_100128330(v45, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
    swift_release(v51);
    v47(v45, v42);
    v48 = &selRef_fetchInCallUIState_;
  }
  else
  {
    v54 = static os_log_type_t.error.getter(v49);
    v53 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
    v50 = v108;
  }
  v55 = v106;
  if (v53[2])
  {
    sub_1000AE548((uint64_t)v53 + ((*((unsigned __int8 *)v106 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v106 + 80)), (uint64_t)v8, type metadata accessor for MagicPairingSettingsRecord);
    v56 = 0;
  }
  else
  {
    v56 = 1;
  }
  v57 = v109;
  v55[7](v8, v56, 1, v109);
  swift_bridgeObjectRelease(v53);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55[6])(v8, 1, v57) != 1)
  {
    v106 = v44;
    v59 = v104;
    sub_1000C6CD0((uint64_t)v8, v104, type metadata accessor for MagicPairingSettingsRecord);
    sub_1000E2648();
    v61 = v60;
    if ((unint64_t)v60 >> 62)
    {
      if (v60 >= 0)
        v60 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v60))
      {
LABEL_23:
        if ((v61 & 0xC000000000000001) != 0)
        {
          v62 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v61);
        }
        else
        {
          if (!*(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_62;
          }
          v62 = (char *)*(id *)(v61 + 32);
        }
        v8 = v62;
        swift_bridgeObjectRelease(v61);
        v63 = objc_msgSend(v111, "isFirstUnlocked");
        if (!(_DWORD)v63)
        {
          v68 = static os_log_type_t.error.getter(v63);
          v65 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
          goto LABEL_35;
        }
        v61 = sub_100129690();
        if (qword_100210160 == -1)
        {
LABEL_28:
          v64 = sub_1000A0A00(v42, (uint64_t)qword_100218C90);
          ((void (*)(uint64_t, uint64_t, uint64_t))v106)(v45, v64, v42);
          v65 = sub_100128330(v45, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
          swift_release(v61);
          v47(v45, v42);
LABEL_35:
          v69 = v65[2];
          swift_bridgeObjectRelease(v65);
          if (v69 != 1)
            goto LABEL_42;
          sub_1000E2648();
          v71 = v70;
          if ((unint64_t)v70 >> 62)
          {
            if (v70 >= 0)
              v70 &= 0xFFFFFFFFFFFFFF8uLL;
            v72 = _CocoaArrayWrapper.endIndex.getter(v70);
          }
          else
          {
            v72 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v71);
          if (v72 != 1)
          {
LABEL_42:
            sub_1000AE58C(v59, type metadata accessor for MagicPairingSettingsRecord);

            v44 = v106;
LABEL_47:
            v48 = &selRef_fetchInCallUIState_;
            goto LABEL_52;
          }
          v102 = v47;
          v73 = (uint64_t *)(v59 + *(int *)(v109 + 24));
          v75 = *v73;
          v74 = v73[1];
          swift_bridgeObjectRetain(v74);
          v76 = objc_msgSend(v8, "bluetoothAddress");
          v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
          v79 = v78;

          if (v75 == v77 && v74 == v79)
          {
            v80 = swift_bridgeObjectRelease_n(v74, 2);
          }
          else
          {
            v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v74, v77, v79, 0);
            swift_bridgeObjectRelease(v74);
            v80 = swift_bridgeObjectRelease(v79);
            if ((v81 & 1) == 0)
            {
              sub_1000AE58C(v59, type metadata accessor for MagicPairingSettingsRecord);

              v42 = v103;
              v50 = v108;
              goto LABEL_46;
            }
          }
          v82 = static os_log_type_t.default.getter(v80);
          v83 = qword_100218DE8;
          v84 = swift_allocObject(v100, 72, 7);
          *(_OWORD *)(v84 + 16) = v99;
          v85 = v107;
          sub_1000AE548((uint64_t)v105, v107, type metadata accessor for LegacyMagicPairingSettingsRecords);
          v86 = sub_1000E3C00();
          v88 = v87;
          sub_1000AE58C(v85, type metadata accessor for LegacyMagicPairingSettingsRecords);
          v89 = v98;
          *(_QWORD *)(v84 + 56) = &type metadata for String;
          *(_QWORD *)(v84 + 64) = v89;
          *(_QWORD *)(v84 + 32) = v86;
          *(_QWORD *)(v84 + 40) = v88;
          os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v83, "Deleting last magic pairing record - %@", 39, 2, v84);
          swift_bridgeObjectRelease(v84);
          v50 = v108;
          sub_10013D41C(v59, (v101 & 1) == 0);

          sub_1000AE58C(v59, type metadata accessor for MagicPairingSettingsRecord);
          v42 = v103;
LABEL_46:
          v44 = v106;
          v47 = v102;
          goto LABEL_47;
        }
LABEL_62:
        swift_once(&qword_100210160, sub_1000C81B8);
        goto LABEL_28;
      }
    }
    else if (*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease(v61);
    sub_1000AE58C(v59, type metadata accessor for MagicPairingSettingsRecord);
    v44 = v106;
    goto LABEL_52;
  }
  sub_1000A1000((uint64_t)v8, (uint64_t *)&unk_100212190);
LABEL_52:
  v90 = swift_unknownObjectWeakLoadStrong(v50 + 24, v58);
  if (v90)
  {
    v91 = v90;
    v92 = objc_msgSend(v111, v48[153]);
    if ((_DWORD)v92)
    {
      v93 = sub_100129690();
      if (qword_100210160 != -1)
        swift_once(&qword_100210160, sub_1000C81B8);
      v94 = sub_1000A0A00(v42, (uint64_t)qword_100218C90);
      ((void (*)(uint64_t, uint64_t, uint64_t))v44)(v45, v94, v42);
      v95 = sub_100128330(v45, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
      swift_release(v93);
      v47(v45, v42);
    }
    else
    {
      v96 = static os_log_type_t.error.getter(v92);
      v95 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v96, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
    }
    sub_1001215A4((uint64_t)v95, (uint64_t)&unk_1001EB940, (uint64_t)sub_1001650A8, (uint64_t)&unk_1001EB958);
    swift_unknownObjectRelease(v91);
    swift_bridgeObjectRelease(v95);
  }
  return sub_1000AE58C((uint64_t)v105, type metadata accessor for LegacyMagicPairingSettingsRecords);
}

uint64_t sub_100145B04(void *a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v28 = a7;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v16 - 8);
  v30 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  v20 = swift_allocObject(a5, 48, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_BYTE *)(v20 + 24) = a2 & 1;
  *(_QWORD *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  aBlock[4] = a6;
  v34 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E6A24;
  aBlock[3] = v28;
  v21 = _Block_copy(aBlock);
  v22 = v19;
  sub_1000FEC54(a1, a2 & 1);
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(a4);
  v32 = _swiftEmptyArrayStorage;
  v23 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_1000A0980(&qword_100211D00);
  v25 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v13, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v15, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v30);
  return swift_release(v34);
}

void sub_100145D28(void *a1, char a2, uint64_t a3, void *a4, const char *a5, uint64_t a6, const char *a7, uint64_t a8)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  if ((a2 & 1) != 0)
  {
    v24 = swift_errorRetain(a1);
    v25 = static os_log_type_t.error.getter(v24);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v26 = qword_100218DE8;
    v27 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v28 = swift_allocObject(v27, 72, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100184870;
    v33 = a1;
    swift_errorRetain(a1);
    v29 = sub_1000A0980(&qword_100210710);
    v30 = String.init<A>(describing:)(&v33, v29);
    v32 = v31;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    *(_QWORD *)(v28 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v28 + 32) = v30;
    *(_QWORD *)(v28 + 40) = v32;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, a7, a8, 2, v28);
    swift_bridgeObjectRelease(v28);
    sub_1001303C0(a4, (uint64_t)_swiftEmptyArrayStorage, 0);
    sub_100104E50(a1, 1);
  }
  else
  {
    v11 = a1;
    v12 = static os_log_type_t.default.getter(v11);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v13 = qword_100218DE8;
    v14 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100184870;
    v16 = v11;
    v17 = objc_msgSend(v16, "description");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    sub_100104E50(a1, 0);
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v15 + 32) = v18;
    *(_QWORD *)(v15 + 40) = v20;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, a5, a6, 2, v15);
    swift_bridgeObjectRelease(v15);
    sub_1001303C0(v16, (uint64_t)_swiftEmptyArrayStorage, 0);
    sub_100104E50(a1, 0);
  }
}

uint64_t sub_100145FB0(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t result;
  uint64_t v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  objc_class *v69;
  Class isa;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  objc_class *v77;
  Class v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  double v94;
  int *v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  objc_class *v109;
  Class v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  __int128 v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(_QWORD);
  uint64_t v157;
  uint64_t v158;
  char *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  Class v164;

  v5 = v4;
  v155 = a4;
  v156 = a3;
  v136 = a2;
  v146 = type metadata accessor for DispatchPredicate(0);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v144 = (uint64_t *)((char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v143 = type metadata accessor for Date(0);
  v141 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v138 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for UUID(0);
  v140 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v137 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v139);
  v11 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v157 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v159 = (char *)&v131 - v16;
  __chkstk_darwin(v17);
  v162 = (uint64_t *)((char *)&v131 - v18);
  v158 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v158);
  v160 = (uint64_t *)((char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v163 = type metadata accessor for MagicPairingSettingsRecord(0);
  v161 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v132 = (uint64_t)&v131 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v135 = (uint64_t)&v131 - v22;
  __chkstk_darwin(v23);
  v134 = (uint64_t)&v131 - v24;
  __chkstk_darwin(v25);
  v147 = (uint64_t)&v131 - v26;
  v133 = v27;
  __chkstk_darwin(v28);
  v30 = (char *)&v131 - v29;
  v32 = static os_log_type_t.default.getter(v31);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v148 = v11;
  v33 = qword_100218DE8;
  v150 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v34 = swift_allocObject(v150, 72, 7);
  v149 = xmmword_100184870;
  *(_OWORD *)(v34 + 16) = xmmword_100184870;
  sub_1000AE548(a1, (uint64_t)v30, type metadata accessor for MagicPairingSettingsRecord);
  v35 = sub_1000C8310();
  v36 = (uint64_t)v30;
  v38 = v37;
  v153 = v36;
  sub_1000AE58C(v36, type metadata accessor for MagicPairingSettingsRecord);
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  v151 = sub_1000A0DF4();
  *(_QWORD *)(v34 + 64) = v151;
  *(_QWORD *)(v34 + 32) = v35;
  *(_QWORD *)(v34 + 40) = v38;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Remove magic device record: %@", 30, 2, v34);
  swift_bridgeObjectRelease(v34);
  v154 = v5;
  v39 = sub_100129690();
  v40 = *(int *)(v163 + 24);
  v152 = a1;
  v41 = *(_QWORD *)(a1 + v40);
  if (qword_100210160 != -1)
    swift_once(&qword_100210160, sub_1000C81B8);
  sub_1000A0A00(v12, (uint64_t)qword_100218C90);
  v42 = v12;
  v43 = v157;
  (*(void (**)(void))(v157 + 16))();
  v44 = objc_autoreleasePoolPush();
  v46 = URL.path.getter(v45);
  v48 = v47;
  URL.appendingPathComponent(_:)(v46);
  swift_bridgeObjectRelease(v48);
  v49 = v159;
  URL.appendingPathComponent(_:)(v41);
  v50 = *(void (**)(char *, uint64_t))(v43 + 8);
  v50(v14, v42);
  objc_autoreleasePoolPop(v44);
  v51 = objc_autoreleasePoolPush();
  __chkstk_darwin(v51);
  *(&v131 - 2) = (uint64_t)v49;
  *(&v131 - 1) = v39;
  v52 = v160;
  OS_dispatch_queue.sync<A>(execute:)(v160, sub_1001685A8, &v131 - 4, v158);
  objc_autoreleasePoolPop(v51);
  v50(v49, v42);
  swift_release(v39);
  v50((char *)v162, v42);
  v53 = v163;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v161 + 48))(v52, 1, v163) == 1)
  {
    v54 = sub_1000A1000((uint64_t)v52, (uint64_t *)&unk_100212190);
    v55 = static os_log_type_t.error.getter(v54);
    v56 = qword_100218DE8;
    v57 = swift_allocObject(v150, 72, 7);
    *(_OWORD *)(v57 + 16) = v149;
    v58 = v153;
    sub_1000AE548(v152, v153, type metadata accessor for MagicPairingSettingsRecord);
    v59 = sub_1000C8310();
    v61 = v60;
    sub_1000AE58C(v58, type metadata accessor for MagicPairingSettingsRecord);
    v62 = v151;
    *(_QWORD *)(v57 + 56) = &type metadata for String;
    *(_QWORD *)(v57 + 64) = v62;
    *(_QWORD *)(v57 + 32) = v59;
    *(_QWORD *)(v57 + 40) = v61;
    os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "Magic Record not found to remove: %@", 36, 2, v57);
    swift_bridgeObjectRelease(v57);
    return v156(0);
  }
  else
  {
    v64 = v147;
    sub_1000C6CD0((uint64_t)v52, v147, type metadata accessor for MagicPairingSettingsRecord);
    v65 = objc_autoreleasePoolPush();
    v66 = (uint64_t *)(v64 + *(int *)(v53 + 20));
    v67 = *v66;
    v68 = v66[1];
    sub_1000A0E74(*v66, v68);
    sub_100109DEC(v67, v68);
    isa = v69;
    sub_1000A103C(v67, v68);
    v71 = v134;
    sub_1000AE548(v64, v134, type metadata accessor for MagicPairingSettingsRecord);
    if (!isa)
      isa = sub_1000A99D8(v71).super.isa;
    sub_1000AE58C(v71, type metadata accessor for MagicPairingSettingsRecord);
    v72 = (uint64_t)v148;
    v164 = isa;
    sub_1000CBDA8((id *)&v164);
    objc_autoreleasePoolPop(v65);
    v73 = -[objc_class recordID](isa, "recordID");

    v74 = objc_autoreleasePoolPush();
    v75 = *v66;
    v76 = v66[1];
    sub_1000A0E74(*v66, v76);
    sub_100109DEC(v75, v76);
    v78 = v77;
    sub_1000A103C(v75, v76);
    v79 = v135;
    sub_1000AE548(v64, v135, type metadata accessor for MagicPairingSettingsRecord);
    v162 = v66;
    if (!v78)
      v78 = sub_1000A99D8(v79).super.isa;
    sub_1000AE58C(v79, type metadata accessor for MagicPairingSettingsRecord);
    v164 = v78;
    sub_1000CBDA8((id *)&v164);
    objc_autoreleasePoolPop(v74);
    v81 = CKRecord.recordType.getter(v80);
    v83 = v82;

    v84 = v154;
    sub_10013A5F4(v73, v81, v83, v136 & 1);

    swift_bridgeObjectRelease(v83);
    v85 = v140;
    v86 = v137;
    v87 = v142;
    (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v137, v64, v142);
    v88 = (uint64_t *)(v64 + *(int *)(v163 + 24));
    v90 = *v88;
    v89 = v88[1];
    v91 = swift_bridgeObjectRetain(v89);
    v92 = v138;
    v93 = Date.init()(v91);
    v94 = Date.timeIntervalSince1970.getter(v93);
    (*(void (**)(char *, uint64_t))(v141 + 8))(v92, v143);
    *(_BYTE *)v72 = 1;
    strcpy((char *)(v72 + 8), "MagicSettings");
    *(_WORD *)(v72 + 22) = -4864;
    v95 = (int *)v139;
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v72 + *(int *)(v139 + 24), v86, v87);
    v96 = (_QWORD *)(v72 + v95[7]);
    *v96 = v90;
    v96[1] = v89;
    *(double *)(v72 + v95[8]) = v94;
    *(_OWORD *)(v72 + v95[9]) = xmmword_100187E30;
    v97 = objc_autoreleasePoolPush();
    sub_100146F6C(v84, v72);
    objc_autoreleasePoolPop(v97);
    v98 = sub_10012A6A0();
    v99 = *(void **)(v98 + 72);
    v100 = v144;
    *v144 = v99;
    v101 = v145;
    v102 = v146;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v145 + 104))(v100, enum case for DispatchPredicate.notOnQueue(_:), v146);
    v103 = v99;
    LOBYTE(v90) = _dispatchPreconditionTest(_:)(v100);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v101 + 8))(v100, v102);
    if ((v90 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v164, sub_100165060, v98, &type metadata for Bool);
      v104 = swift_unknownObjectRelease(v98);
      if (v164 == 1)
      {
        v105 = sub_10012A6A0();
        v106 = objc_autoreleasePoolPush();
        v107 = *v162;
        v108 = v162[1];
        sub_1000A0E74(*v162, v108);
        sub_100109DEC(v107, v108);
        v110 = v109;
        sub_1000A103C(v107, v108);
        v111 = v132;
        sub_1000AE548(v64, v132, type metadata accessor for MagicPairingSettingsRecord);
        if (!v110)
          v110 = sub_1000A99D8(v111).super.isa;
        sub_1000AE58C(v111, type metadata accessor for MagicPairingSettingsRecord);
        v112 = v153;
        v164 = v110;
        sub_1000CBDA8((id *)&v164);
        objc_autoreleasePoolPop(v106);
        v113 = -[objc_class recordID](v110, "recordID");

        v114 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v114 + 16, v154);
        sub_1000AE548(v64, v112, type metadata accessor for MagicPairingSettingsRecord);
        v115 = *(unsigned __int8 *)(v161 + 80);
        v116 = (v115 + 16) & ~v115;
        v117 = (v133 + v116 + 7) & 0xFFFFFFFFFFFFFFF8;
        v118 = swift_allocObject(&unk_1001EB8F0, v117 + 8, v115 | 7);
        v119 = v112;
        v120 = v118;
        sub_1000C6CD0(v119, v118 + v116, type metadata accessor for MagicPairingSettingsRecord);
        *(_QWORD *)(v120 + v117) = v114;
        v121 = swift_allocObject(&unk_1001EB918, 49, 7);
        *(_QWORD *)(v121 + 16) = v105;
        *(_QWORD *)(v121 + 24) = v113;
        *(_QWORD *)(v121 + 32) = sub_10016507C;
        *(_QWORD *)(v121 + 40) = v120;
        *(_BYTE *)(v121 + 48) = 1;
        swift_retain(v114);
        swift_unknownObjectRetain(v105);
        v122 = v113;
        swift_retain(v120);
        sub_1000F7A44((uint64_t)sub_100164E44, v121);
        swift_release(v114);
        swift_release(v120);
        swift_unknownObjectRelease(v105);

        swift_release(v121);
      }
      else
      {
        v123 = static os_log_type_t.error.getter(v104);
        v124 = qword_100218DE8;
        v125 = swift_allocObject(v150, 72, 7);
        *(_OWORD *)(v125 + 16) = v149;
        v126 = v153;
        sub_1000AE548(v152, v153, type metadata accessor for MagicPairingSettingsRecord);
        v127 = sub_1000C8310();
        v129 = v128;
        sub_1000AE58C(v126, type metadata accessor for MagicPairingSettingsRecord);
        v130 = v151;
        *(_QWORD *)(v125 + 56) = &type metadata for String;
        *(_QWORD *)(v125 + 64) = v130;
        *(_QWORD *)(v125 + 32) = v127;
        *(_QWORD *)(v125 + 40) = v129;
        os_log(_:dso:log:_:_:)(v123, &_mh_execute_header, v124, "CloudCoordinator not available. Defer deleting magic record - %@", 64, 2, v125);
        swift_bridgeObjectRelease(v125);
      }
      v156(0);
      sub_1000AE58C(v72, type metadata accessor for BTDeferredRecord);
      return sub_1000AE58C(v64, type metadata accessor for MagicPairingSettingsRecord);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100146BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  id v33;
  id v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  _QWORD v39[3];

  v6 = type metadata accessor for MagicPairingSettingsRecord(0);
  __chkstk_darwin(v6);
  v9 = &v38[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1)
  {
    v10 = swift_errorRetain(a1);
    v11 = static os_log_type_t.error.getter(v10);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v12 = qword_100218DE8;
    v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100184870;
    v39[0] = a1;
    swift_errorRetain(a1);
    v15 = sub_1000A0980(&qword_100210710);
    v16 = String.init<A>(describing:)(v39, v15);
    v18 = v17;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v18;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Handling Error deleting magic Record - %@", 41, 2, v14);
    swift_bridgeObjectRelease(v14);
    return swift_errorRelease(a1);
  }
  else
  {
    v20 = a3 + 16;
    v21 = static os_log_type_t.default.getter(v7);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v22 = qword_100218DE8;
    v23 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100184870;
    sub_1000AE548(a2, (uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
    v25 = sub_1000C8310();
    v27 = v26;
    sub_1000AE58C((uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "CloudSync: Deleted MagicSettings Record from cloud - %@", 55, 2, v24);
    swift_bridgeObjectRelease(v24);
    swift_beginAccess(v20, v39, 0, 0);
    Strong = swift_weakLoadStrong(v20);
    if (Strong)
    {
      v29 = Strong;
      sub_10013D41C(a2, 0);
      swift_release(v29);
    }
    swift_beginAccess(v20, v38, 0, 0);
    result = swift_weakLoadStrong(v20);
    if (result)
    {
      v30 = result;
      v31 = sub_10012A6A0();
      swift_release(v30);
      v32 = sub_1000AB790();
      v33 = -[objc_class recordID](v32, "recordID");

      v34 = objc_msgSend(v33, "zoneID");
      v35 = (uint64_t *)(a2 + *(int *)(v6 + 24));
      v36 = *v35;
      v37 = v35[1];
      swift_bridgeObjectRetain(v37);
      sub_1000FBDF8((uint64_t)&off_1001E5848, (uint64_t)v34, 0xD000000000000010, 0x80000001001AA8D0, v36, v37);

      swift_bridgeObjectRelease(v37);
      swift_unknownObjectRelease(v31);
      return swift_arrayDestroy(&unk_1001E5868, 3, &type metadata for String);
    }
  }
  return result;
}

uint64_t sub_100146F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100129690();
  v22 = v7;
  v23 = a2;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100164E48, v21, &type metadata for () + 1);
  if (!v2)
    return swift_release(v7);
  v8 = swift_release(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v10 = qword_100218DE8;
  v11 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1001858F0;
  sub_1000AE548(a2, (uint64_t)v6, type metadata accessor for BTDeferredRecord);
  v13 = String.init<A>(describing:)(v6, v4);
  v15 = v14;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v16 = sub_1000A0DF4();
  *(_QWORD *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v15;
  v24 = v2;
  swift_errorRetain(v2);
  v17 = sub_1000A0980(&qword_100210710);
  v18 = String.init<A>(describing:)(&v24, v17);
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v16;
  *(_QWORD *)(v12 + 72) = v18;
  *(_QWORD *)(v12 + 80) = v19;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "CloudSync: Error storing deferred record %@: %@", 47, 2, v12);
  swift_bridgeObjectRelease(v12);
  return swift_errorRelease(v2);
}

uint64_t sub_10014714C(char *a1, void (*a2)(_QWORD), uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  _BYTE *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  double (*v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  char *v79;
  uint64_t (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  objc_class *v136;
  Class isa;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  objc_class *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  void (*v161)(_QWORD);
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  __int128 v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(uint64_t, uint64_t, uint64_t);
  void (*v184)(char *, uint64_t);
  char *v185;

  v4 = v3;
  v160 = a3;
  v161 = a2;
  v158 = type metadata accessor for Date(0);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v156 = (char *)&v145 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = type metadata accessor for SoundProfileRecord(0);
  v149 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v145 = (uint64_t)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v155 = (uint64_t *)((char *)&v145 - v9);
  __chkstk_darwin(v10);
  v162 = (uint64_t *)((char *)&v145 - v11);
  v12 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v12);
  v154 = (uint64_t *)((char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v148 = (uint64_t)&v145 - v15;
  v16 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v16);
  v150 = (char *)&v145 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for UUID(0);
  v169 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v168 = (char *)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v170 = (char *)&v145 - v20;
  v21 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v21);
  v146 = (char *)&v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for URL(0);
  v163 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v151 = (char *)&v145 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v147 = (char *)&v145 - v26;
  __chkstk_darwin(v27);
  v152 = (char *)&v145 - v28;
  __chkstk_darwin(v29);
  v167 = (char *)&v145 - v30;
  __chkstk_darwin(v31);
  v172 = (char *)&v145 - v32;
  __chkstk_darwin(v33);
  v178 = (char *)&v145 - v34;
  __chkstk_darwin(v35);
  v177 = (char *)&v145 - v36;
  v179 = type metadata accessor for BTDeferredRecord(0);
  v184 = *(void (**)(char *, uint64_t))(v179 - 8);
  __chkstk_darwin(v179);
  v180 = (uint64_t *)((char *)&v145 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v38);
  v40 = (char *)&v145 - v39;
  __chkstk_darwin(v41);
  v43 = (char *)&v145 - v42;
  __chkstk_darwin(v44);
  v46 = (char *)&v145 - v45;
  v48 = static os_log_type_t.default.getter(v47);
  if (qword_1002101E0 != -1)
LABEL_41:
    swift_once(&qword_1002101E0, sub_1001687B0);
  v49 = qword_100218DE8;
  v166 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v50 = swift_allocObject(v166, 72, 7);
  v165 = xmmword_100184870;
  *(_OWORD *)(v50 + 16) = xmmword_100184870;
  v51 = sub_1000A0940((unint64_t *)&unk_100211A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v159 = a1;
  v182 = v23;
  v153 = v51;
  v52 = dispatch thunk of CustomStringConvertible.description.getter(v23, v51);
  v54 = v53;
  *(_QWORD *)(v50 + 56) = &type metadata for String;
  v164 = sub_1000A0DF4();
  *(_QWORD *)(v50 + 64) = v164;
  *(_QWORD *)(v50 + 32) = v52;
  *(_QWORD *)(v50 + 40) = v54;
  os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "Add sound profile record with URL: %@", 37, 2, v50);
  swift_bridgeObjectRelease(v50);
  v181 = v4;
  v55 = sub_10012A994();
  v23 = v55;
  a1 = (char *)_swiftEmptyArrayStorage;
  v185 = (char *)_swiftEmptyArrayStorage;
  v183 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
  if (v183)
  {
    v4 = 0;
    v174 = (unint64_t)"ty";
    v175 = v55;
    v176 = 0x80000001001AA930;
    while (1)
    {
      if (v4 >= *(_QWORD *)(v23 + 16))
      {
        __break(1u);
        goto LABEL_41;
      }
      v48 = (*((unsigned __int8 *)v184 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v184 + 80);
      v56 = *((_QWORD *)v184 + 9);
      sub_1000AE548(v23 + v48 + v56 * v4, (uint64_t)v46, type metadata accessor for BTDeferredRecord);
      v57 = *((_QWORD *)v46 + 1);
      v58 = *((_QWORD *)v46 + 2);
      if (v57 == 0xD000000000000012 && v58 == v176)
      {
        sub_1000AE548((uint64_t)v46, (uint64_t)v43, type metadata accessor for BTDeferredRecord);
      }
      else
      {
        v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, 0xD000000000000012, v174 | 0x8000000000000000, 0);
        sub_1000AE548((uint64_t)v46, (uint64_t)v43, type metadata accessor for BTDeferredRecord);
        if ((v59 & 1) == 0)
        {
          sub_1000AE58C((uint64_t)v43, type metadata accessor for BTDeferredRecord);
          goto LABEL_5;
        }
      }
      if (*v43 == 1)
      {
        swift_bridgeObjectRelease(0xE600000000000000);
        sub_1000AE58C((uint64_t)v43, type metadata accessor for BTDeferredRecord);
LABEL_15:
        v61 = v43;
        v62 = (uint64_t)v40;
        sub_1000C6CD0((uint64_t)v46, (uint64_t)v40, type metadata accessor for BTDeferredRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0)
          sub_10014EEB4(0, *((_QWORD *)a1 + 2) + 1, 1);
        a1 = v185;
        v64 = *((_QWORD *)v185 + 2);
        v63 = *((_QWORD *)v185 + 3);
        if (v64 >= v63 >> 1)
        {
          sub_10014EEB4(v63 > 1, v64 + 1, 1);
          a1 = v185;
        }
        *((_QWORD *)a1 + 2) = v64 + 1;
        v65 = (uint64_t)&a1[v48 + v64 * v56];
        v40 = (char *)v62;
        sub_1000C6CD0(v62, v65, type metadata accessor for BTDeferredRecord);
        v43 = v61;
        v23 = v175;
        goto LABEL_6;
      }
      v60 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657461647075, 0xE600000000000000, 0x6574656C6564, 0xE600000000000000, 0);
      swift_bridgeObjectRelease(0xE600000000000000);
      sub_1000AE58C((uint64_t)v43, type metadata accessor for BTDeferredRecord);
      if ((v60 & 1) != 0)
        goto LABEL_15;
LABEL_5:
      sub_1000AE58C((uint64_t)v46, type metadata accessor for BTDeferredRecord);
LABEL_6:
      if (v183 == (uint64_t (*)(uint64_t, uint64_t, uint64_t))++v4)
      {
        a1 = v185;
        break;
      }
    }
  }
  swift_bridgeObjectRelease(v23);
  v66 = (void (*)(char *, uint64_t))*((_QWORD *)a1 + 2);
  v67 = v182;
  v68 = (double (*)(_QWORD, _QWORD, _QWORD))v180;
  if (!v66)
  {
    swift_release(a1);
LABEL_27:
    v82 = v148;
    sub_10012B62C(v148);
    v83 = v171;
    v183 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
    v84 = v183(v82, 1, v171);
    v85 = v173;
    v86 = v169;
    v87 = v154;
    v88 = (uint64_t)v150;
    if (v84 == 1)
    {
      sub_1000A1000(v82, &qword_100212230);
      v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v88, 1, 1, v85);
      v90 = (uint64_t)v147;
      v91 = v163;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v169 + 16))(v150, v82 + *(int *)(v83 + 20), v173);
      sub_1000AE58C(v82, type metadata accessor for SoundProfileRecord);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v86 + 56))(v88, 0, 1, v85);
      v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v88, 1, v85);
      v90 = (uint64_t)v147;
      v91 = v163;
      if ((_DWORD)v89 != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v170, v88, v85);
        goto LABEL_32;
      }
    }
    UUID.init()(v89);
    sub_1000A1000(v88, &qword_1002103E0);
LABEL_32:
    type metadata accessor for DeviceStore(0);
    sub_100110DD4(v90);
    if (qword_100210140 != -1)
      swift_once(&qword_100210140, sub_1000AB9F4);
    v92 = v182;
    v93 = sub_1000A0A00(v182, (uint64_t)qword_100218C50);
    v94 = v151;
    v180 = *(uint64_t **)(v91 + 16);
    v95.n128_f64[0] = ((double (*)(char *, uint64_t, uint64_t))v180)(v151, v93, v92);
    v96 = v91;
    v97 = URL.path.getter(v95);
    v99 = v98;
    v100 = *(void (**)(char *, uint64_t))(v96 + 8);
    v100(v94, v92);
    v101 = v152;
    URL.appendingPathComponent(_:isDirectory:)(v97, v99, 1);
    swift_bridgeObjectRelease(v99);
    v102 = ((uint64_t (*)(uint64_t, uint64_t))v100)(v90, v92);
    v103 = v170;
    v104 = UUID.uuidString.getter(v102);
    v106 = v105;
    v107 = v167;
    URL.appendingPathComponent(_:)(v104);
    swift_bridgeObjectRelease(v106);
    v100(v101, v92);
    URL.appendingPathExtension(_:)(7627108, 0xE300000000000000);
    v184 = v100;
    v100(v107, v92);
    v108 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
    v108(v168, v103, v173);
    sub_10012B62C((uint64_t)v87);
    if (v183((uint64_t)v87, 1, v171) == 1)
    {
      sub_1000A1000((uint64_t)v87, &qword_100212230);
      v109 = 0;
      v110 = 0xC000000000000000;
    }
    else
    {
      v109 = *v87;
      v110 = v87[1];
      sub_1000A0E74(*v87, v110);
      sub_1000AE58C((uint64_t)v87, type metadata accessor for SoundProfileRecord);
    }
    v111 = v167;
    v112 = v182;
    v113 = (uint64_t (*)(uint64_t, char *, uint64_t))v180;
    ((void (*)(char *, char *, uint64_t))v180)(v167, v172, v182);
    v114 = (uint64_t)v155;
    *v155 = v109;
    *(_QWORD *)(v114 + 8) = v110;
    v115 = v171;
    v116 = v168;
    v117 = v173;
    v108((char *)(v114 + *(int *)(v171 + 20)), v168, v173);
    v118 = v113(v114 + *(int *)(v115 + 24), v111, v112);
    v119 = v156;
    static Date.now.getter(v118);
    v184(v111, v112);
    v183 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 8);
    ((void (*)(char *, uint64_t))v183)(v116, v117);
    (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))(v114 + *(int *)(v115 + 28), v119, v158);
    v120 = v162;
    v121 = sub_1000C6CD0(v114, (uint64_t)v162, type metadata accessor for SoundProfileRecord);
    v122 = static os_log_type_t.default.getter(v121);
    v123 = qword_100218DE8;
    v124 = swift_allocObject(v166, 72, 7);
    *(_OWORD *)(v124 + 16) = v165;
    v125 = (uint64_t)v172;
    v126 = dispatch thunk of CustomStringConvertible.description.getter(v112, v153);
    v127 = v164;
    *(_QWORD *)(v124 + 56) = &type metadata for String;
    *(_QWORD *)(v124 + 64) = v127;
    *(_QWORD *)(v124 + 32) = v126;
    *(_QWORD *)(v124 + 40) = v128;
    os_log(_:dso:log:_:_:)(v122, &_mh_execute_header, v123, "Attempt to store asset at: %@", 29, 2, v124);
    swift_bridgeObjectRelease(v124);
    v129 = sub_100129690();
    __chkstk_darwin(v129);
    v130 = (uint64_t)v159;
    *(&v145 - 2) = v125;
    *(&v145 - 1) = v130;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100165020, &v145 - 4, &type metadata for () + 1);
    swift_release(v129);
    v131 = sub_100129690();
    __chkstk_darwin(v131);
    *(&v145 - 2) = v132;
    *(&v145 - 1) = (uint64_t)v120;
    OS_dispatch_queue.sync<A>(execute:)(&v145, sub_100165038, &v145 - 4, &type metadata for () + 1);
    swift_release(v131);
    notify_post("BTCloudServicesSoundProfileChangedNotification");
    v161(0);
    v133 = objc_autoreleasePoolPush();
    v134 = *v120;
    v135 = v120[1];
    sub_1000A0E74(*v120, v135);
    sub_100109DEC(v134, v135);
    isa = v136;
    sub_1000A103C(v134, v135);
    v138 = v145;
    sub_1000AE548((uint64_t)v120, v145, type metadata accessor for SoundProfileRecord);
    if (!isa)
      isa = sub_1000A9A14().super.isa;
    sub_1000AE58C(v138, type metadata accessor for SoundProfileRecord);
    v139 = (void (*)(char *, uint64_t))v183;
    v185 = (char *)isa;
    sub_1000ADB20((id *)&v185);
    objc_autoreleasePoolPop(v133);
    v140 = v181;
    v141 = sub_10012A6A0();
    v142 = swift_allocObject(&unk_1001EB580, 24, 7);
    swift_weakInit(v142 + 16, v140);
    v143 = swift_allocObject(&unk_1001EB8A0, 32, 7);
    *(_QWORD *)(v143 + 16) = v142;
    *(_QWORD *)(v143 + 24) = isa;
    swift_retain(v142);
    v144 = isa;
    sub_1000F8080(v144, 1, (uint64_t)sub_100165054, v143);

    swift_unknownObjectRelease(v141);
    swift_release(v143);
    sub_1000AE58C((uint64_t)v120, type metadata accessor for SoundProfileRecord);
    v184(v172, v182);
    v139(v170, v173);
    return swift_release(v142);
  }
  v69 = *((unsigned __int8 *)v184 + 80);
  v174 = (unint64_t)a1;
  v70 = (uint64_t)&a1[(v69 + 32) & ~v69];
  v176 = *((_QWORD *)v184 + 9);
  v175 = 0x80000001001AA930;
  v71 = v163;
  v72 = v146;
  v73 = (uint64_t)v177;
  while (1)
  {
    v183 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v70;
    v184 = v66;
    sub_1000AE548(v70, (uint64_t)v68, type metadata accessor for BTDeferredRecord);
    v74 = sub_100129690();
    v75 = UUID.uuidString.getter(v74);
    v77 = v76;
    URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48))(v72, 1, v67);
    if ((_DWORD)result == 1)
      break;
    v79 = v178;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v178, v72, v67);
    URL.appendingPathComponent(_:)(0xD000000000000012);
    v80 = *(uint64_t (**)(char *, uint64_t))(v71 + 8);
    v81 = v80(v79, v67);
    __chkstk_darwin(v81);
    *(&v145 - 4) = v74;
    *(&v145 - 3) = v75;
    *(&v145 - 2) = v77;
    *(&v145 - 1) = v73;
    OS_dispatch_queue.sync<A>(execute:)(&v185, sub_1001684A0, &v145 - 6, &type metadata for Bool);
    swift_release(v74);
    swift_bridgeObjectRelease(v77);
    v67 = v182;
    v80((char *)v73, v182);
    v68 = (double (*)(_QWORD, _QWORD, _QWORD))v180;
    sub_1000AE58C((uint64_t)v180, type metadata accessor for BTDeferredRecord);
    v70 = (uint64_t)v183 + v176;
    v66 = (void (*)(char *, uint64_t))((char *)v184 - 1);
    if (v184 == (void (*)(char *, uint64_t))1)
    {
      swift_release(v174);
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

void sub_1001481F0(void *a1, char a2, uint64_t a3, id a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _BYTE v28[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v28, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v9 = Strong;
    if ((a2 & 1) != 0)
    {
      v10 = swift_errorRetain(a1);
      v11 = static os_log_type_t.error.getter(v10);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v12 = qword_100218DE8;
      v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v14 = swift_allocObject(v13, 72, 7);
      *(_OWORD *)(v14 + 16) = xmmword_100184870;
      v27 = a1;
      swift_errorRetain(a1);
      v15 = sub_1000A0980(&qword_100210710);
      v16 = String.init<A>(describing:)(&v27, v15);
      v18 = v17;
      *(_QWORD *)(v14 + 56) = &type metadata for String;
      *(_QWORD *)(v14 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v14 + 32) = v16;
      *(_QWORD *)(v14 + 40) = v18;
      os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Unable to save record on cloud with given URL error: %@", 55, 2, v14, v27);
    }
    else
    {
      v19 = a1;
      v20 = static os_log_type_t.default.getter(v19);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v21 = qword_100218DE8;
      v22 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v14 = swift_allocObject(v22, 72, 7);
      *(_OWORD *)(v14 + 16) = xmmword_100184870;
      a4 = v19;
      v23 = objc_msgSend(a4, "description");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      sub_100104E50(a1, 0);
      *(_QWORD *)(v14 + 56) = &type metadata for String;
      *(_QWORD *)(v14 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v14 + 32) = v24;
      *(_QWORD *)(v14 + 40) = v26;
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Synced sound profile record with given URL: %@", 46, 2, v14, v27);
    }
    swift_bridgeObjectRelease(v14);
    sub_1001366B0(a4, 0);
    swift_release(v9);
    sub_100104E50(a1, a2 & 1);
  }
}

uint64_t sub_100148440(void (*a1)(void), void (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  objc_class *v30;
  Class isa;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (**v43)(void);
  void (*v44)(void);
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t *v51;
  void (*v52)(void);
  uint64_t v53;
  void (*v54)(void);
  Class v55;

  v3 = v2;
  v6 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SoundProfileRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v53 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v49 - v13;
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v49 - v16);
  sub_10012B62C((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000A1000((uint64_t)v8, &qword_100212230);
    v18 = sub_1000D8604();
    v19 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v18, 0, 0);
    *v20 = 0x8000000000000020;
    a1();
    return swift_errorRelease(v19);
  }
  else
  {
    v52 = a1;
    v54 = a2;
    v22 = sub_1000C6CD0((uint64_t)v8, (uint64_t)v17, type metadata accessor for SoundProfileRecord);
    v23 = static os_log_type_t.default.getter(v22);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_100218DE8, "Deleting sound profile record", 29, 2, _swiftEmptyArrayStorage);
    v24 = sub_100129690();
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100164CA0, v24, &type metadata for () + 1);
    v25 = swift_release(v24);
    v26 = static os_log_type_t.default.getter(v25);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_100218DE8, "Deleted sound profile record asset", 34, 2, _swiftEmptyArrayStorage);
    notify_post("BTCloudServicesSoundProfileChangedNotification");
    ((void (*)(_QWORD))v52)(0);
    v27 = objc_autoreleasePoolPush();
    v28 = *v17;
    v29 = v17[1];
    sub_1000A0E74(*v17, v29);
    sub_100109DEC(v28, v29);
    isa = v30;
    sub_1000A103C(v28, v29);
    sub_1000AE548((uint64_t)v17, (uint64_t)v14, type metadata accessor for SoundProfileRecord);
    if (!isa)
      isa = sub_1000A9A14().super.isa;
    sub_1000AE58C((uint64_t)v14, type metadata accessor for SoundProfileRecord);
    v55 = isa;
    v51 = v17;
    sub_1000ADB20((id *)&v55);
    objc_autoreleasePoolPop(v27);
    v32 = -[objc_class recordID](isa, "recordID");

    v50 = objc_msgSend(v32, "zoneID");
    v33 = sub_10012A6A0();
    v34 = swift_allocObject(&unk_1001EB580, 24, 7);
    swift_weakInit(v34 + 16, v3);
    v35 = (uint64_t)v17;
    v36 = v53;
    sub_1000AE548(v35, v53, type metadata accessor for SoundProfileRecord);
    v37 = *(unsigned __int8 *)(v10 + 80);
    v38 = (v37 + 16) & ~v37;
    v39 = (v11 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    v49 = v3;
    v41 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8;
    v42 = swift_allocObject(&unk_1001EB620, v41 + 8, v37 | 7);
    sub_1000C6CD0(v36, v42 + v38, type metadata accessor for SoundProfileRecord);
    *(_QWORD *)(v42 + v39) = v34;
    v43 = (void (**)(void))(v42 + v40);
    v44 = v54;
    *v43 = v52;
    v43[1] = v44;
    *(_QWORD *)(v42 + v41) = v32;
    v45 = swift_allocObject(&unk_1001EB648, 49, 7);
    *(_QWORD *)(v45 + 16) = v33;
    *(_QWORD *)(v45 + 24) = v32;
    *(_QWORD *)(v45 + 32) = sub_100164DD4;
    *(_QWORD *)(v45 + 40) = v42;
    *(_BYTE *)(v45 + 48) = 1;
    v46 = v32;
    swift_retain(v34);
    swift_retain(v44);
    swift_unknownObjectRetain(v33);
    swift_retain(v42);
    sub_1000F7A44((uint64_t)sub_100164E44, v45);
    swift_release(v34);
    swift_release(v42);
    swift_unknownObjectRelease(v33);
    swift_release(v45);
    v47 = sub_10012A6A0();
    v48 = v50;
    sub_1000FBDF8((uint64_t)&off_1001E57E8, (uint64_t)v50, 0, 0, 0, 0);
    swift_arrayDestroy(&unk_1001E5808, 1, &type metadata for String);

    swift_unknownObjectRelease(v47);
    return sub_1000AE58C((uint64_t)v51, type metadata accessor for SoundProfileRecord);
  }
}

uint64_t sub_100148930(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  char *v33;
  uint64_t v34;
  uint64_t Strong;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];

  v52 = a5;
  v49 = a2;
  v10 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v17);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a3 + 16;
  if (a1)
  {
    v47 = v21;
    v48 = a4;
    v22 = swift_errorRetain(a1);
    v46 = static os_log_type_t.error.getter(v22);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v45 = qword_100218DE8;
    v23 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100184870;
    v53[0] = a1;
    swift_errorRetain(a1);
    v25 = sub_1000A0980(&qword_100210710);
    v26 = String.init<A>(describing:)(v53, v25);
    v28 = v27;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v24 + 32) = v26;
    *(_QWORD *)(v24 + 40) = v28;
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v45, "Unable to delete sound profile record from cloud with error: %@", 63, 2, v24);
    swift_bridgeObjectRelease(v24);
    v29 = type metadata accessor for SoundProfileRecord(0);
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v49 + *(int *)(v29 + 20), v13);
    v31 = Date.init()(v30);
    v32 = Date.timeIntervalSince1970.getter(v31);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v51);
    *v20 = 1;
    *((_QWORD *)v20 + 1) = 0xD000000000000012;
    *((_QWORD *)v20 + 2) = 0x80000001001AA930;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v20[v17[6]], v16, v13);
    v33 = &v20[v17[7]];
    *(_QWORD *)v33 = 0xD000000000000011;
    *((_QWORD *)v33 + 1) = 0x80000001001AB220;
    *(double *)&v20[v17[8]] = v32;
    *(_OWORD *)&v20[v17[9]] = xmmword_100187E30;
    v34 = v47;
    swift_beginAccess(v47, v53, 0, 0);
    Strong = swift_weakLoadStrong(v34);
    if (Strong)
    {
      v36 = Strong;
      v37 = objc_autoreleasePoolPush();
      sub_100146F6C(v36, (uint64_t)v20);
      objc_autoreleasePoolPop(v37);
      swift_release(v36);
    }
    v38 = sub_1000D8604();
    v39 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v38, 0, 0);
    *v40 = a1;
    swift_errorRetain(a1);
    v48(v39);
    swift_errorRelease(v39);
    swift_errorRelease(a1);
    return sub_1000AE58C((uint64_t)v20, type metadata accessor for BTDeferredRecord);
  }
  else
  {
    v42 = static os_log_type_t.default.getter(v18);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_100218DE8, "Deleted sound profile record from cloud", 39, 2, _swiftEmptyArrayStorage);
    swift_beginAccess(v21, v53, 0, 0);
    v43 = swift_weakLoadStrong(v21);
    if (v43)
    {
      v44 = v43;
      sub_10013A5F4(a6, 0xD000000000000012, 0x80000001001AA930, 0);
      swift_release(v44);
    }
    return ((uint64_t (*)(_QWORD))a4)(0);
  }
}

uint64_t sub_100148D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;

  v3 = v2;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_100218DE8, "Fetching sound profile record from cloud", 40, 2, _swiftEmptyArrayStorage);
  sub_1000AB31C(0, (unint64_t *)&unk_100210850, CKRecordZoneID_ptr);
  v7._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v7._object = v8;
  v9._object = (void *)0x80000001001AB0E0;
  v9._countAndFlagsBits = 0xD000000000000010;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v9, v7).super.isa;
  v11 = sub_10012A6A0();
  v12 = swift_allocObject(&unk_1001EB580, 24, 7);
  swift_weakInit(v12 + 16, v3);
  v13 = (_QWORD *)swift_allocObject(&unk_1001EB5A8, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v12;
  v14 = swift_allocObject(&unk_1001EB5D0, 24, 7);
  swift_weakInit(v14 + 16, v11);
  v15 = swift_allocObject(&unk_1001EB5F8, 88, 7);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = &off_1001E57B8;
  *(_QWORD *)(v15 + 32) = isa;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_QWORD *)(v15 + 72) = sub_100164C0C;
  *(_QWORD *)(v15 + 80) = v13;
  swift_retain(a2);
  swift_retain(v12);
  swift_retain(v14);
  v16 = isa;
  swift_retain(v13);
  sub_1000F7A44((uint64_t)sub_100164C68, v15);

  swift_unknownObjectRelease(v11);
  swift_release(v12);
  swift_release(v13);
  swift_release(v14);
  return swift_release(v15);
}

void sub_100148F4C(uint64_t a1, void (*a2)(id), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSURL *v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t Strong;
  uint64_t v41;
  id v42;
  NSString v43;
  unsigned __int8 v44;
  id v45;
  NSURL *v46;
  void *v47;
  void *v48;
  unsigned int v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  void (*v63)(id);
  uint64_t *v64;
  id v65[2];
  uint64_t v66[3];

  v8 = type metadata accessor for SoundProfileRecord(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 < 0 || (a1 & 0x4000000000000000) != 0)
  {
    v55 = swift_bridgeObjectRetain(a1);
    v11 = (uint64_t)sub_10014F314(v55);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  v66[0] = v11;
  sub_100150028(v66, (uint64_t (*)(_QWORD *))sub_100150AA0);
  v12 = v66[0];
  v64 = v10;
  if ((v66[0] & 0x8000000000000000) == 0 && (v66[0] & 0x4000000000000000) == 0)
  {
    if (*(_QWORD *)(v66[0] + 16))
      goto LABEL_7;
LABEL_23:
    v58 = swift_release(v12);
    v10 = (uint64_t *)static os_log_type_t.error.getter(v58);
    if (qword_1002101E0 == -1)
    {
LABEL_24:
      os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_100218DE8, "No cloud sound profile record found", 35, 2, _swiftEmptyArrayStorage);
      a2(0);
      return;
    }
LABEL_27:
    swift_once(&qword_1002101E0, sub_1001687B0);
    goto LABEL_24;
  }
  v56 = swift_bridgeObjectRetain(v66[0]);
  v57 = _CocoaArrayWrapper.endIndex.getter(v56);
  swift_release(v12);
  if (!v57)
    goto LABEL_23;
LABEL_7:
  v62 = a3;
  v63 = a2;
  v60 = a4;
  if ((v12 & 0xC000000000000001) != 0)
  {
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
    goto LABEL_10;
  }
  if (!*(_QWORD *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_27;
  }
  v13 = *(id *)(v12 + 32);
LABEL_10:
  v14 = v13;
  v15 = swift_release(v12);
  v16 = static os_log_type_t.default.getter(v15);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v17 = qword_100218DE8;
  v18 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v19 = swift_allocObject(v18, 72, 7);
  v61 = xmmword_100184870;
  *(_OWORD *)(v19 + 16) = xmmword_100184870;
  v20 = v14;
  v21 = objc_msgSend(v20, "description");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  *(_QWORD *)(v19 + 56) = &type metadata for String;
  v25 = sub_1000A0DF4();
  *(_QWORD *)(v19 + 64) = v25;
  *(_QWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v24;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Fetched sound profile cloud record from cloud - %@", 50, 2, v19);
  swift_bridgeObjectRelease(v19);
  v26 = v20;
  v27 = v64;
  sub_1000ACD84(v26, v64);
  v28 = v60 + 16;
  v30 = static os_log_type_t.default.getter(v29);
  v31 = qword_100218DE8;
  v32 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v32 + 16) = v61;
  v33 = sub_1000ABB64();
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  *(_QWORD *)(v32 + 64) = v25;
  *(_QWORD *)(v32 + 32) = v33;
  *(_QWORD *)(v32 + 40) = v34;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Fetched sound profile records from cloud - %@", 45, 2, v32);
  swift_bridgeObjectRelease(v32);
  v35 = objc_allocWithZone((Class)BTCloudSoundProfileRecord);
  URL._bridgeToObjectiveC()(v36);
  v38 = v37;
  v39 = objc_msgSend(v35, "initWithFileURL:", v37);

  v63(v39);
  swift_beginAccess(v28, v66, 0, 0);
  Strong = swift_weakLoadStrong(v28);
  if (!Strong)
  {

    sub_1000AE58C((uint64_t)v27, type metadata accessor for SoundProfileRecord);
    return;
  }
  v41 = Strong;
  if (!IsAppleInternalBuild(Strong))
  {
    swift_release(v41);
    goto LABEL_19;
  }
  v42 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v43 = String._bridgeToObjectiveC()();
  v44 = objc_msgSend(v42, "BOOLForKey:", v43);
  swift_release(v41);

  if ((v44 & 1) == 0)
  {
LABEL_19:
    sub_1000AE58C((uint64_t)v64, type metadata accessor for SoundProfileRecord);

    return;
  }
  v45 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v46);
  v48 = v47;
  v65[0] = 0;
  v49 = objc_msgSend(v45, "removeItemAtURL:error:", v47, v65);

  v50 = v65[0];
  if (v49)
  {
    v51 = v65[0];
    goto LABEL_19;
  }
  v52 = v65[0];
  v53 = _convertNSErrorToError(_:)(v50);

  swift_willThrow(v54);
  swift_errorRelease(v53);

  sub_1000AE58C((uint64_t)v64, type metadata accessor for SoundProfileRecord);
}

uint64_t sub_100149530(void **a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  id v36;
  void *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  char *v39;
  id v40;
  void *v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  char *v47;
  char *v48;
  void *v49;
  char *v50;

  v4 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v4);
  v50 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v48 = (char *)&v47 - v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - v12;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v47 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v47 - v18;
  *(_QWORD *)&v21 = __chkstk_darwin(v20).n128_u64[0];
  v23 = (char *)&v47 - v22;
  v24 = *a1;
  v49 = *a2;
  v25 = objc_msgSend(v24, "modificationDate", v21);
  if (v25)
  {
    v26 = v25;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

    v27 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v27(v13, v19, v14);
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v28(v13, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      v27(v23, v13, v14);
      v29 = (uint64_t)v48;
      v30 = (uint64_t)v50;
      v31 = v49;
      goto LABEL_11;
    }
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v28(v13, 1, 1, v14);
  }
  v32 = objc_msgSend(v24, "creationDate");
  if (!v32)
  {
    v35 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v10, 1, 1, v14);
    v29 = (uint64_t)v48;
    goto LABEL_9;
  }
  v33 = v32;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

  v34 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v34(v10, v19, v14);
  v28(v10, 0, 1, v14);
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14);
  v29 = (uint64_t)v48;
  if ((_DWORD)v35 == 1)
  {
LABEL_9:
    static Date.now.getter(v35);
    sub_1000A1000((uint64_t)v10, (uint64_t *)&unk_1002103D0);
    goto LABEL_10;
  }
  v34(v23, v10, v14);
LABEL_10:
  v31 = v49;
  sub_1000A1000((uint64_t)v13, (uint64_t *)&unk_1002103D0);
  v30 = (uint64_t)v50;
LABEL_11:
  v36 = objc_msgSend(v31, "modificationDate");
  if (!v36)
  {
    v28((char *)v29, 1, 1, v14);
LABEL_15:
    v40 = objc_msgSend(v31, "creationDate");
    if (v40)
    {
      v41 = v40;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

      v42 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
      v42(v30, v19, v14);
      v28((char *)v30, 0, 1, v14);
      v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v30, 1, v14);
      v39 = v47;
      if ((_DWORD)v43 != 1)
      {
        v42((uint64_t)v47, (char *)v30, v14);
LABEL_20:
        sub_1000A1000(v29, (uint64_t *)&unk_1002103D0);
        goto LABEL_21;
      }
    }
    else
    {
      v43 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v30, 1, 1, v14);
      v39 = v47;
    }
    static Date.now.getter(v43);
    sub_1000A1000(v30, (uint64_t *)&unk_1002103D0);
    goto LABEL_20;
  }
  v37 = v36;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

  v38 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v38(v29, v19, v14);
  v28((char *)v29, 0, 1, v14);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v29, 1, v14) == 1)
    goto LABEL_15;
  v39 = v47;
  v38((uint64_t)v47, (char *)v29, v14);
LABEL_21:
  v44 = static Date.> infix(_:_:)(v23, v39);
  v45 = *(void (**)(char *, uint64_t))(v15 + 8);
  v45(v39, v14);
  v45(v23, v14);
  return v44 & 1;
}

double sub_1001499B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t (*v54)(uint64_t);
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double result;
  char v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  _QWORD *v110;
  char v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  _QWORD *v123;
  _OWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[3];
  ValueMetadata *v151;
  unint64_t v152;

  v148 = a3;
  v149 = a1;
  v144 = a4;
  v6 = sub_1000A0980(&qword_100212230);
  __chkstk_darwin(v6);
  v129 = (uint64_t)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for SoundProfileRecord(0);
  v128 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v126 = (uint64_t)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v9);
  v131 = (uint64_t)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for DeviceSupportInformationRecord(0);
  v134 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v147 = (uint64_t)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v127 = (uint64_t)&v125 - v13;
  v14 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v14);
  v138 = (uint64_t)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for MagicPairingSettingsRecord(0);
  v142 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v17 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v132 = (uint64_t)&v125 - v19;
  v20 = type metadata accessor for DeviceRecord(0);
  v146 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v125 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v27);
  v145 = (uint64_t)&v125 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = (id)objc_opt_self(BTSystemConfiguration);
  v29 = objc_msgSend(v143, "isFirstUnlocked");
  v140 = v4;
  v136 = v24;
  v137 = v23;
  v135 = v26;
  if ((_DWORD)v29)
  {
    v30 = sub_100129690();
    if (qword_100210120 != -1)
      swift_once(&qword_100210120, sub_10009C800);
    v31 = sub_1000A0A00(v23, (uint64_t)qword_100218BE0);
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v31, v23);
    v32 = sub_100128330((uint64_t)v26, &qword_100210CF8, type metadata accessor for DeviceRecord, (uint64_t)sub_100154AD0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693D4);
    swift_release(v30);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    v33 = v32[2];
    if (!v33)
      goto LABEL_22;
  }
  else
  {
    v34 = static os_log_type_t.error.getter(v29);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v32 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
    v33 = _swiftEmptyArrayStorage[2];
    if (!v33)
      goto LABEL_22;
  }
  v35 = (uint64_t)v32 + ((*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80));
  v36 = a2 == 0x6552656369766544 && v148 == 0xEC00000064726F63;
  v37 = v36;
  v38 = *(_QWORD *)(v146 + 72);
  swift_bridgeObjectRetain(v32);
  do
  {
    sub_1000AE548(v35, (uint64_t)v22, type metadata accessor for DeviceRecord);
    if ((static UUID.== infix(_:_:)(&v22[*(int *)(v20 + 20)]) & 1) != 0
      && ((v37 & 1) != 0
       || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544, 0xEC00000064726F63, a2, v148, 0) & 1) != 0))
    {
      swift_bridgeObjectRelease(v32);
      v39 = v145;
      sub_1000C6CD0((uint64_t)v22, v145, type metadata accessor for DeviceRecord);
      v40 = 0;
      goto LABEL_23;
    }
    sub_1000AE58C((uint64_t)v22, type metadata accessor for DeviceRecord);
    v35 += v38;
    --v33;
  }
  while (v33);
  swift_bridgeObjectRelease(v32);
LABEL_22:
  v40 = 1;
  v39 = v145;
LABEL_23:
  v41 = v146;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56))(v39, v40, 1, v20);
  swift_bridgeObjectRelease(v32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v20) != 1)
  {
    v53 = v144;
    v144[3] = v20;
    v54 = type metadata accessor for DeviceRecord;
    v53[4] = sub_1000A0940(&qword_1002121C8, type metadata accessor for DeviceRecord, (uint64_t)&unk_1001853A4);
    v55 = sub_100105C88(v53);
    v56 = v39;
LABEL_77:
    sub_1000C6CD0(v56, (uint64_t)v55, v54);
    return result;
  }
  v42 = a2;
  sub_1000A1000(v39, &qword_100210CF8);
  v43 = objc_msgSend(v143, "isFirstUnlocked");
  if ((_DWORD)v43)
  {
    v44 = sub_100129690();
    v46 = v148;
    v45 = v149;
    if (qword_100210160 != -1)
      swift_once(&qword_100210160, sub_1000C81B8);
    v47 = v137;
    v48 = sub_1000A0A00(v137, (uint64_t)qword_100218C90);
    v50 = (uint64_t)v135;
    v49 = v136;
    (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v135, v48, v47);
    v51 = sub_100128330(v50, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
    swift_release(v44);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v47);
    v52 = v51[2];
    if (!v52)
      goto LABEL_46;
  }
  else
  {
    v57 = static os_log_type_t.error.getter(v43);
    v46 = v148;
    v45 = v149;
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v51 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
    v52 = _swiftEmptyArrayStorage[2];
    if (!v52)
      goto LABEL_46;
  }
  v58 = (uint64_t)v51 + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
  v60 = v42 == 0x746553636967614DLL && v46 == 0xED000073676E6974;
  v61 = *(_QWORD *)(v142 + 72);
  swift_bridgeObjectRetain(v51);
  do
  {
    sub_1000AE548(v58, (uint64_t)v17, type metadata accessor for MagicPairingSettingsRecord);
    if ((static UUID.== infix(_:_:)(v17) & 1) != 0
      && (v60
       || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974, v42, v46, 0) & 1) != 0))
    {
      swift_bridgeObjectRelease(v51);
      v62 = (uint64_t)v17;
      v63 = v138;
      sub_1000C6CD0(v62, v138, type metadata accessor for MagicPairingSettingsRecord);
      v64 = 0;
      goto LABEL_47;
    }
    sub_1000AE58C((uint64_t)v17, type metadata accessor for MagicPairingSettingsRecord);
    v58 += v61;
    --v52;
  }
  while (v52);
  swift_bridgeObjectRelease(v51);
LABEL_46:
  v64 = 1;
  v63 = v138;
LABEL_47:
  v65 = v142;
  v66 = v139;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v63, v64, 1, v139);
  swift_bridgeObjectRelease(v51);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v63, 1, v66) != 1)
  {
    v54 = type metadata accessor for MagicPairingSettingsRecord;
    v74 = v63;
    v75 = v132;
    sub_1000C6CD0(v74, v132, type metadata accessor for MagicPairingSettingsRecord);
    v76 = v144;
    v144[3] = v66;
    v77 = (unint64_t *)&unk_1002121C0;
    v78 = &unk_10018684C;
LABEL_76:
    v76[4] = sub_1000A0940(v77, v54, (uint64_t)v78);
    v55 = sub_100105C88(v76);
    v56 = v75;
    goto LABEL_77;
  }
  sub_1000A1000(v63, (uint64_t *)&unk_100212190);
  v67 = objc_msgSend(v143, "isFirstUnlocked");
  if ((_DWORD)v67)
  {
    v68 = sub_100129690();
    if (qword_100210180 != -1)
      swift_once(&qword_100210180, sub_1000DA4F0);
    v69 = v137;
    v70 = sub_1000A0A00(v137, (uint64_t)qword_100218D28);
    v72 = (uint64_t)v135;
    v71 = v136;
    (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v135, v70, v69);
    v73 = sub_100128330(v72, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)sub_100154B40, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693E8);
    swift_release(v68);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v72, v69);
  }
  else
  {
    v79 = static os_log_type_t.error.getter(v67);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v73 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v79, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage);
  }
  v80 = v73[2];
  v141 = v42;
  if (v80)
  {
    v81 = (uint64_t)v73 + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    v36 = v42 == 0xD00000000000001ELL;
    v82 = v46;
    v84 = v36 && v46 == 0x80000001001AA950;
    v85 = *(_QWORD *)(v134 + 72);
    swift_bridgeObjectRetain(v73);
    v86 = v147;
    do
    {
      sub_1000AE548(v81, v86, type metadata accessor for DeviceSupportInformationRecord);
      if ((static UUID.== infix(_:_:)(v86) & 1) != 0
        && ((v84 & 1) != 0
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001AA950, v141, v82, 0) & 1) != 0))
      {
        swift_bridgeObjectRelease(v73);
        v87 = v131;
        sub_1000C6CD0(v147, v131, type metadata accessor for DeviceSupportInformationRecord);
        v88 = 0;
        v45 = v149;
        goto LABEL_71;
      }
      v86 = v147;
      sub_1000AE58C(v147, type metadata accessor for DeviceSupportInformationRecord);
      v81 += v85;
      --v80;
    }
    while (v80);
    swift_bridgeObjectRelease(v73);
    v88 = 1;
    v45 = v149;
    v87 = v131;
LABEL_71:
    v46 = v82;
  }
  else
  {
    v88 = 1;
    v87 = v131;
  }
  v89 = v134;
  v90 = v133;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v134 + 56))(v87, v88, 1, v133);
  swift_bridgeObjectRelease(v73);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v87, 1, v90) != 1)
  {
    v54 = type metadata accessor for DeviceSupportInformationRecord;
    v75 = v127;
    sub_1000C6CD0(v87, v127, type metadata accessor for DeviceSupportInformationRecord);
    v76 = v144;
    v144[3] = v90;
    v77 = (unint64_t *)&unk_1002121B8;
    v78 = &unk_100187144;
    goto LABEL_76;
  }
  sub_1000A1000(v87, &qword_100210CE8);
  v91 = v129;
  sub_10012B62C(v129);
  v92 = v130;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v91, 1, v130) != 1)
  {
    v75 = v126;
    sub_1000C6CD0(v91, v126, type metadata accessor for SoundProfileRecord);
    v95 = static UUID.== infix(_:_:)(v75 + *(int *)(v92 + 20));
    v93 = v141;
    if ((v95 & 1) == 0
      || (v141 != 0xD000000000000012 || v46 != 0x80000001001AA930)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v141, v46, 0xD000000000000012, 0x80000001001AA930, 0) & 1) == 0)
    {
      sub_1000AE58C(v75, type metadata accessor for SoundProfileRecord);
      goto LABEL_84;
    }
    v96 = v92;
    v76 = v144;
    v144[3] = v96;
    v77 = (unint64_t *)&unk_100212238;
    v54 = type metadata accessor for SoundProfileRecord;
    v78 = &unk_100185B4C;
    goto LABEL_76;
  }
  sub_1000A1000(v91, &qword_100212230);
  v93 = v141;
LABEL_84:
  v151 = &type metadata for AudioAccessoryFeatures;
  v97 = sub_1000A42C4();
  v152 = v97;
  v98 = isFeatureEnabled(_:)(v150);
  v99 = sub_1000A2140(v150);
  if ((v98 & 1) != 0)
  {
    v100 = objc_msgSend(v143, "isFirstUnlocked");
    if ((_DWORD)v100)
    {
      v101 = sub_100129690();
      if (qword_1002101B0 != -1)
        swift_once(&qword_1002101B0, sub_100106014);
      v102 = v137;
      v103 = sub_1000A0A00(v137, (uint64_t)qword_100218D68);
      v105 = (uint64_t)v135;
      v104 = v136;
      (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v135, v103, v102);
      v106 = (_QWORD *)sub_100127B2C(v105, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
      swift_release(v101);
      v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 8))(v105, v102);
    }
    else
    {
      v107 = static os_log_type_t.error.getter(v100);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v106 = _swiftEmptyArrayStorage;
      v99 = os_log(_:dso:log:_:_:)(v107, &_mh_execute_header, qword_100218DE8, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
    }
  }
  else
  {
    v106 = _swiftEmptyArrayStorage;
  }
  __chkstk_darwin(v99);
  *(&v125 - 4) = v45;
  *(&v125 - 3) = v93;
  *(&v125 - 2) = v46;
  v108 = sub_1001111F0((uint64_t (*)(id *))sub_100164B7C, (uint64_t)(&v125 - 6), (uint64_t)v106);
  swift_bridgeObjectRelease(v106);
  if (v108)
  {
    v109 = type metadata accessor for AADeviceRecord(0);
    v110 = v144;
    v144[3] = v109;
    v110[4] = sub_1000A0940(&qword_1002121B0, type metadata accessor for AADeviceRecord, (uint64_t)&unk_10018794C);
    *v110 = v108;
  }
  else
  {
    v151 = &type metadata for AudioAccessoryFeatures;
    v152 = v97;
    v111 = isFeatureEnabled(_:)(v150);
    v112 = sub_1000A2140(v150);
    if ((v111 & 1) != 0)
    {
      v113 = objc_msgSend(v143, "isFirstUnlocked");
      if ((_DWORD)v113)
      {
        v114 = sub_100129690();
        if (qword_100210130 != -1)
          swift_once(&qword_100210130, sub_1000A5BC0);
        v115 = v137;
        v116 = sub_1000A0A00(v137, (uint64_t)qword_100218C00);
        v118 = (uint64_t)v135;
        v117 = v136;
        (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v135, v116, v115);
        v119 = (_QWORD *)sub_100127B2C(v118, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
        swift_release(v114);
        v112 = (*(uint64_t (**)(uint64_t, uint64_t))(v117 + 8))(v118, v115);
      }
      else
      {
        v120 = static os_log_type_t.error.getter(v113);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v119 = _swiftEmptyArrayStorage;
        v112 = os_log(_:dso:log:_:_:)(v120, &_mh_execute_header, qword_100218DE8, "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
      }
    }
    else
    {
      v119 = _swiftEmptyArrayStorage;
    }
    __chkstk_darwin(v112);
    *(&v125 - 4) = v45;
    *(&v125 - 3) = v93;
    *(&v125 - 2) = v46;
    v121 = sub_1001111F0((uint64_t (*)(id *))sub_100164B9C, (uint64_t)(&v125 - 6), (uint64_t)v119);
    swift_bridgeObjectRelease(v119);
    if (v121)
    {
      v122 = type metadata accessor for AAProxCardsRecord(0);
      v123 = v144;
      v144[3] = v122;
      v123[4] = sub_1000A0940(&qword_1002121A8, type metadata accessor for AAProxCardsRecord, (uint64_t)&unk_100185610);
      *v123 = v121;
    }
    else
    {
      v124 = v144;
      v144[4] = 0;
      result = 0.0;
      *v124 = 0u;
      v124[1] = 0u;
    }
  }
  return result;
}

uint64_t sub_10014A9CC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier) & 1) == 0)
    return 0;
  if (a3 == 0x6563697665444141 && a4 == 0xEE0064726F636552)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141, 0xEE0064726F636552, a3, a4, 0) & 1;
}

uint64_t sub_10014AA8C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier) & 1) == 0)
    return 0;
  if (a3 == 0xD000000000000011 && a4 == 0x80000001001B1050)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001B1050, a3, a4, 0) & 1;
}

double sub_10014AB34@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  BOOL v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  char **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  char **v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  double result;
  uint64_t v116;
  char *v117;
  char v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD v149[3];
  ValueMetadata *v150;
  unint64_t v151;

  v146 = a4;
  v147 = a3;
  v148 = a2;
  v8 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v8);
  v130 = (uint64_t)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for DeviceSupportInformationRecord(0);
  v131 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v143 = (uint64_t)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v128 = (uint64_t)&v128 - v12;
  v13 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v13);
  v137 = (uint64_t)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for MagicPairingSettingsRecord(0);
  v139 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v16 = (char *)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v129 = (uint64_t)&v128 - v18;
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v128 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v23);
  v141 = (uint64_t)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DeviceRecord(0);
  v142 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v27 = (char *)&v128 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v136 = (uint64_t)&v128 - v29;
  v140 = (id)objc_opt_self(BTSystemConfiguration);
  v30 = objc_msgSend(v140, "isFirstUnlocked");
  v134 = v19;
  v135 = v5;
  v133 = v20;
  v132 = v22;
  if ((_DWORD)v30)
  {
    v31 = sub_100129690();
    if (qword_100210120 != -1)
      swift_once(&qword_100210120, sub_10009C800);
    v32 = sub_1000A0A00(v19, (uint64_t)qword_100218BE0);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v32, v19);
    v33 = sub_100128330((uint64_t)v22, &qword_100210CF8, type metadata accessor for DeviceRecord, (uint64_t)sub_100154AD0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693D4);
    swift_release(v31);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    v34 = v33[2];
    if (v34)
      goto LABEL_5;
LABEL_24:
    v44 = 1;
    goto LABEL_26;
  }
  v45 = static os_log_type_t.error.getter(v30);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v33 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
  v34 = _swiftEmptyArrayStorage[2];
  if (!v34)
    goto LABEL_24;
LABEL_5:
  v138 = a5;
  v35 = (uint64_t)v33 + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
  v37 = v147 == 0x6552656369766544 && v146 == 0xEC00000064726F63;
  v38 = *(_QWORD *)(v142 + 72);
  swift_bridgeObjectRetain(v33);
  do
  {
    sub_1000AE548(v35, (uint64_t)v27, type metadata accessor for DeviceRecord);
    v39 = &v27[*(int *)(v25 + 24)];
    v40 = *((_QWORD *)v39 + 1);
    v41 = *(_QWORD *)v39 == a1 && v40 == v148;
    if ((v41 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v39, v40, a1, v148, 0) & 1) != 0)
      && (v37
       || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544, 0xEC00000064726F63, v147, v146, 0) & 1) != 0))
    {
      swift_bridgeObjectRelease(v33);
      v42 = (uint64_t)v27;
      v43 = v141;
      sub_1000C6CD0(v42, v141, type metadata accessor for DeviceRecord);
      v44 = 0;
      a5 = v138;
      goto LABEL_27;
    }
    sub_1000AE58C((uint64_t)v27, type metadata accessor for DeviceRecord);
    v35 += v38;
    --v34;
  }
  while (v34);
  swift_bridgeObjectRelease(v33);
  v44 = 1;
  a5 = v138;
LABEL_26:
  v43 = v141;
LABEL_27:
  v46 = v142;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v43, v44, 1, v25);
  swift_bridgeObjectRelease(v33);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v43, 1, v25);
  v48 = v146;
  if (v47 != 1)
  {
    v57 = v43;
    v58 = v136;
    sub_1000C6CD0(v57, v136, type metadata accessor for DeviceRecord);
    a5[3] = v25;
    a5[4] = sub_1000A0940(&qword_1002121C8, type metadata accessor for DeviceRecord, (uint64_t)&unk_1001853A4);
    v59 = sub_100105C88(a5);
    v60 = v58;
    v61 = type metadata accessor for DeviceRecord;
LABEL_91:
    sub_1000C6CD0(v60, (uint64_t)v59, v61);
    return result;
  }
  sub_1000A1000(v43, &qword_100210CF8);
  v49 = objc_msgSend(v140, "isFirstUnlocked");
  if ((_DWORD)v49)
  {
    v50 = sub_100129690();
    if (qword_100210160 != -1)
      swift_once(&qword_100210160, sub_1000C81B8);
    v51 = v134;
    v52 = sub_1000A0A00(v134, (uint64_t)qword_100218C90);
    v53 = v133;
    v54 = (uint64_t)v132;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v52, v51);
    v55 = sub_100128330(v54, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
    swift_release(v50);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v51);
    v56 = v55[2];
    if (!v56)
      goto LABEL_54;
  }
  else
  {
    v62 = static os_log_type_t.error.getter(v49);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v55 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, qword_100218DE8, "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
    v56 = _swiftEmptyArrayStorage[2];
    if (!v56)
      goto LABEL_54;
  }
  v63 = (uint64_t)v55 + ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80));
  v65 = v147 == 0x746553636967614DLL && v48 == 0xED000073676E6974;
  v66 = *(_QWORD *)(v139 + 72);
  swift_bridgeObjectRetain(v55);
  do
  {
    sub_1000AE548(v63, (uint64_t)v16, type metadata accessor for MagicPairingSettingsRecord);
    v67 = &v16[*(int *)(v145 + 24)];
    v68 = *((_QWORD *)v67 + 1);
    v69 = *(_QWORD *)v67 == a1 && v68 == v148;
    if ((v69 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v67, v68, a1, v148, 0) & 1) != 0)
      && (v65
       || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974, v147, v48, 0) & 1) != 0))
    {
      swift_bridgeObjectRelease(v55);
      v70 = v137;
      sub_1000C6CD0((uint64_t)v16, v137, type metadata accessor for MagicPairingSettingsRecord);
      v71 = v139;
      v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
      v73 = v70;
      v74 = 0;
      goto LABEL_55;
    }
    sub_1000AE58C((uint64_t)v16, type metadata accessor for MagicPairingSettingsRecord);
    v63 += v66;
    --v56;
  }
  while (v56);
  swift_bridgeObjectRelease(v55);
LABEL_54:
  v71 = v139;
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
  v70 = v137;
  v73 = v137;
  v74 = 1;
LABEL_55:
  v75 = v145;
  v72(v73, v74, 1, v145);
  swift_bridgeObjectRelease(v55);
  v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v70, 1, v75);
  v77 = v147;
  if (v76 != 1)
  {
    v85 = type metadata accessor for MagicPairingSettingsRecord;
    v86 = v70;
    v87 = v129;
    sub_1000C6CD0(v86, v129, type metadata accessor for MagicPairingSettingsRecord);
    a5[3] = v75;
    a5[4] = sub_1000A0940(&qword_1002121C0, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)&unk_10018684C);
    v88 = (char **)a5;
LABEL_90:
    v59 = sub_100105C88(v88);
    v60 = v87;
    v61 = v85;
    goto LABEL_91;
  }
  sub_1000A1000(v70, (uint64_t *)&unk_100212190);
  v78 = objc_msgSend(v140, "isFirstUnlocked");
  v138 = a5;
  if ((_DWORD)v78)
  {
    v79 = sub_100129690();
    if (qword_100210180 != -1)
      swift_once(&qword_100210180, sub_1000DA4F0);
    v80 = v134;
    v81 = sub_1000A0A00(v134, (uint64_t)qword_100218D28);
    v82 = v133;
    v83 = (uint64_t)v132;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v81, v80);
    v84 = sub_100128330(v83, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)sub_100154B40, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693E8);
    swift_release(v79);
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v83, v80);
  }
  else
  {
    v89 = static os_log_type_t.error.getter(v78);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v84 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, qword_100218DE8, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2, _swiftEmptyArrayStorage);
  }
  v90 = v84[2];
  v91 = v131;
  if (v90)
  {
    v92 = (uint64_t)v84 + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
    v94 = v77 == 0xD00000000000001ELL && v48 == 0x80000001001AA950;
    v95 = *(_QWORD *)(v131 + 72);
    swift_bridgeObjectRetain(v84);
    v96 = v143;
    do
    {
      sub_1000AE548(v92, v96, type metadata accessor for DeviceSupportInformationRecord);
      v97 = (_QWORD *)(v96 + *(int *)(v144 + 24));
      v98 = v97[1];
      v99 = *v97 == a1 && v98 == v148;
      if ((v99 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v97, v98, a1, v148, 0) & 1) != 0)
        && (v94
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001AA950, v77, v146, 0) & 1) != 0))
      {
        swift_bridgeObjectRelease(v84);
        v100 = v130;
        sub_1000C6CD0(v143, v130, type metadata accessor for DeviceSupportInformationRecord);
        v91 = v131;
        v101 = v144;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v131 + 56))(v100, 0, 1, v144);
        v48 = v146;
        goto LABEL_83;
      }
      v96 = v143;
      sub_1000AE58C(v143, type metadata accessor for DeviceSupportInformationRecord);
      v92 += v95;
      --v90;
    }
    while (v90);
    swift_bridgeObjectRelease(v84);
    v48 = v146;
    v91 = v131;
  }
  v100 = v130;
  v101 = v144;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v130, 1, 1, v144);
LABEL_83:
  swift_bridgeObjectRelease(v84);
  v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v100, 1, v101);
  v103 = (char **)v138;
  v104 = v148;
  if (v102 != 1)
  {
    v85 = type metadata accessor for DeviceSupportInformationRecord;
    v114 = v100;
    v87 = v128;
    sub_1000C6CD0(v114, v128, type metadata accessor for DeviceSupportInformationRecord);
    v103[3] = (char *)v101;
    v103[4] = (char *)sub_1000A0940(&qword_1002121B8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)&unk_100187144);
    v88 = v103;
    goto LABEL_90;
  }
  sub_1000A1000(v100, &qword_100210CE8);
  v150 = &type metadata for AudioAccessoryFeatures;
  v105 = sub_1000A42C4();
  v151 = v105;
  v106 = isFeatureEnabled(_:)(v149);
  sub_1000A2140(v149);
  if ((v106 & 1) != 0)
  {
    v107 = objc_msgSend(v140, "isFirstUnlocked");
    if ((_DWORD)v107)
    {
      v146 = a1;
      v108 = sub_100129690();
      if (qword_1002101B0 != -1)
        swift_once(&qword_1002101B0, sub_100106014);
      v109 = v134;
      v110 = sub_1000A0A00(v134, (uint64_t)qword_100218D68);
      v111 = v133;
      v112 = (uint64_t)v132;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v110, v109);
      v113 = (_QWORD *)sub_100127B2C(v112, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
      swift_release(v108);
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v112, v109);
      a1 = v146;
    }
    else
    {
      v116 = static os_log_type_t.error.getter(v107);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v113 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v116, &_mh_execute_header, qword_100218DE8, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
    }
  }
  else
  {
    v113 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRetain(v48);
  v117 = sub_10015476C((uint64_t)v113, a1, v104, v77, v48);
  swift_bridgeObjectRelease(v113);
  swift_bridgeObjectRelease(v104);
  swift_bridgeObjectRelease(v48);
  if (v117)
  {
    v103[3] = (char *)type metadata accessor for AADeviceRecord(0);
    v103[4] = (char *)sub_1000A0940(&qword_1002121B0, type metadata accessor for AADeviceRecord, (uint64_t)&unk_10018794C);
    *v103 = v117;
  }
  else
  {
    v150 = &type metadata for AudioAccessoryFeatures;
    v151 = v105;
    v118 = isFeatureEnabled(_:)(v149);
    sub_1000A2140(v149);
    if ((v118 & 1) != 0)
    {
      v119 = objc_msgSend(v140, "isFirstUnlocked");
      if ((_DWORD)v119)
      {
        v146 = a1;
        v120 = sub_100129690();
        if (qword_100210130 != -1)
          swift_once(&qword_100210130, sub_1000A5BC0);
        v121 = v134;
        v122 = sub_1000A0A00(v134, (uint64_t)qword_100218C00);
        v123 = v133;
        v124 = (uint64_t)v132;
        (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v122, v121);
        v125 = (_QWORD *)sub_100127B2C(v124, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
        swift_release(v120);
        (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v124, v121);
        a1 = v146;
      }
      else
      {
        v126 = static os_log_type_t.error.getter(v119);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v125 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)(v126, &_mh_execute_header, qword_100218DE8, "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
      }
    }
    else
    {
      v125 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRetain(v48);
    v127 = sub_100154928((uint64_t)v125, a1, v104, v77, v48);
    swift_bridgeObjectRelease(v125);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v48);
    if (v127)
    {
      v103[3] = (char *)type metadata accessor for AAProxCardsRecord(0);
      v103[4] = (char *)sub_1000A0940(&qword_1002121A8, type metadata accessor for AAProxCardsRecord, (uint64_t)&unk_100185610);
      *v103 = v127;
    }
    else
    {
      v103[4] = 0;
      result = 0.0;
      *(_OWORD *)v103 = 0u;
      *((_OWORD *)v103 + 1) = 0u;
    }
  }
  return result;
}

uint64_t sub_10014BAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1001661FC(a4, a5);
}

uint64_t sub_10014BAD8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char **v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  char v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156[24];
  ValueMetadata *v157;
  unint64_t v158;

  v155 = a2;
  v152 = 0;
  v3 = type metadata accessor for URL(0);
  v153 = *(_QWORD *)(v3 - 8);
  v154 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v7 = *(v6 - 1);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char **)((char *)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = objc_msgSend(a1, "zoneName", v8);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  if (v12 == 0xD00000000000001ELL)
  {
    v15 = 0x80000001001AA990;
    if (v14 == 0x80000001001AA990)
    {
LABEL_5:
      v16 = swift_bridgeObjectRelease(v15);
      v17 = static os_log_type_t.default.getter(v16);
      v18 = v155;
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_100218DE8, "Cloud data purged, attempting to clear local accessory data", 59, 2, _swiftEmptyArrayStorage);
      v19 = v18 + 24;
      Strong = swift_unknownObjectWeakLoadStrong(v18 + 24, v20);
      if (Strong)
      {
        v22 = Strong;
        v23 = (_QWORD *)sub_10012A6A0();
        v24 = (char *)v23[9];
        *v10 = v24;
        (*(void (**)(char **, _QWORD, _QWORD *))(v7 + 104))(v10, enum case for DispatchPredicate.notOnQueue(_:), v6);
        v25 = v24;
        v26 = _dispatchPreconditionTest(_:)(v10);
        (*(void (**)(char **, _QWORD *))(v7 + 8))(v10, v6);
        if ((v26 & 1) == 0)
        {
          __break(1u);
          goto LABEL_104;
        }
        v7 = v152;
        OS_dispatch_queue.sync<A>(execute:)(v156, sub_10016545C, v23, &type metadata for Bool);
        swift_unknownObjectRelease(v23);
        sub_1000C5A64(v156[0], 1);
        swift_unknownObjectRelease(v22);
      }
      else
      {
        v7 = v152;
      }
      v23 = (_QWORD *)objc_opt_self(BTSystemConfiguration);
      v10 = &selRef_fetchInCallUIState_;
      v27 = objc_msgSend(v23, "isFirstUnlocked");
      v6 = &unk_100218000;
      if (!(_DWORD)v27)
      {
        v31 = static os_log_type_t.error.getter(v27);
        v151 = _swiftEmptyArrayStorage;
        os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_100218DE8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2);
        goto LABEL_15;
      }
      v25 = (char *)sub_100129690();
      if (qword_100210120 == -1)
      {
LABEL_13:
        v28 = v154;
        v29 = sub_1000A0A00(v154, (uint64_t)qword_100218BE0);
        v30 = v153;
        (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v5, v29, v28);
        v151 = sub_100128330((uint64_t)v5, &qword_100210CF8, type metadata accessor for DeviceRecord, (uint64_t)sub_100154AD0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693D4);
        swift_release(v25);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v28);
LABEL_15:
        v32 = objc_msgSend(v23, v10[153]);
        if ((_DWORD)v32)
        {
          v33 = sub_100129690();
          if (qword_100210180 != -1)
            swift_once(&qword_100210180, sub_1000DA4F0);
          v34 = v154;
          v35 = sub_1000A0A00(v154, (uint64_t)qword_100218D28);
          v36 = v153;
          (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v5, v35, v34);
          v150 = sub_100128330((uint64_t)v5, &qword_100210CE8, type metadata accessor for DeviceSupportInformationRecord, (uint64_t)sub_100154B40, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693E8);
          swift_release(v33);
          (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v34);
        }
        else
        {
          v37 = static os_log_type_t.error.getter(v32);
          v38 = v6[445];
          v150 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "deviceSupportInformationRecords call failed because in device is in beforeFirstUnlock state", 91, 2);
        }
        v39 = objc_msgSend(v23, v10[153]);
        if ((_DWORD)v39)
        {
          v40 = sub_100129690();
          if (qword_100210160 != -1)
            swift_once(&qword_100210160, sub_1000C81B8);
          v41 = v154;
          v42 = sub_1000A0A00(v154, (uint64_t)qword_100218C90);
          v43 = v153;
          (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v5, v42, v41);
          v44 = sub_100128330((uint64_t)v5, (uint64_t *)&unk_100212190, type metadata accessor for MagicPairingSettingsRecord, (uint64_t)sub_100154B08, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_100169608);
          swift_release(v40);
          v45 = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v5, v41);
        }
        else
        {
          v46 = static os_log_type_t.error.getter(v39);
          v44 = _swiftEmptyArrayStorage;
          v45 = os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v6[445], "magicPairingSettingsRecords call failed because in device is in beforeFirstUnlock state", 87, 2, _swiftEmptyArrayStorage);
        }
        v47 = static os_log_type_t.default.getter(v45);
        os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v6[445], "Tell delegate to remove local cache for AudioAccessoryZone data", 63, 2, _swiftEmptyArrayStorage);
        v49 = swift_unknownObjectWeakLoadStrong(v19, v48);
        if (v49)
        {
          v51 = v49;
          v157 = &type metadata for AudioAccessoryFeatures;
          v158 = sub_1000A42C4();
          v52 = isFeatureEnabled(_:)(v156);
          sub_1000A2140(v156);
          if ((v52 & 1) != 0)
          {
            v53 = objc_msgSend(v23, v10[153]);
            if ((_DWORD)v53)
            {
              v152 = v7;
              v54 = sub_100129690();
              if (qword_1002101B0 != -1)
                swift_once(&qword_1002101B0, sub_100106014);
              v55 = v154;
              v56 = sub_1000A0A00(v154, (uint64_t)qword_100218D68);
              v57 = v153;
              (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v5, v56, v55);
              v58 = (_QWORD *)sub_100127B2C((uint64_t)v5, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
              swift_release(v54);
              (*(void (**)(char *, uint64_t))(v57 + 8))(v5, v55);
              v7 = v152;
            }
            else
            {
              v64 = static os_log_type_t.error.getter(v53);
              v65 = v6[445];
              v58 = _swiftEmptyArrayStorage;
              os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
            }
          }
          else
          {
            v58 = _swiftEmptyArrayStorage;
          }
          sub_1001215A4((uint64_t)v58, (uint64_t)&unk_1001EB800, (uint64_t)sub_100164FFC, (uint64_t)&unk_1001EB818);
          swift_bridgeObjectRelease(v58);
          swift_unknownObjectRelease(v51);
          v6 = &unk_100218000;
        }
        v66 = swift_unknownObjectWeakLoadStrong(v19, v50);
        if (v66)
        {
          v67 = v66;
          v157 = &type metadata for AudioAccessoryFeatures;
          v158 = sub_1000A42C4();
          v68 = isFeatureEnabled(_:)(v156);
          sub_1000A2140(v156);
          if ((v68 & 1) != 0)
          {
            v69 = objc_msgSend(v23, v10[153]);
            if ((_DWORD)v69)
            {
              v70 = v7;
              v71 = sub_100129690();
              if (qword_100210130 != -1)
                swift_once(&qword_100210130, sub_1000A5BC0);
              v72 = v154;
              v73 = sub_1000A0A00(v154, (uint64_t)qword_100218C00);
              v74 = v153;
              (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v5, v73, v72);
              v75 = (_QWORD *)sub_100127B2C((uint64_t)v5, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
              swift_release(v71);
              (*(void (**)(char *, uint64_t))(v74 + 8))(v5, v72);
              v7 = v70;
            }
            else
            {
              v76 = static os_log_type_t.error.getter(v69);
              v77 = v6[445];
              v75 = _swiftEmptyArrayStorage;
              os_log(_:dso:log:_:_:)(v76, &_mh_execute_header, v77, "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
            }
          }
          else
          {
            v75 = _swiftEmptyArrayStorage;
          }
          sub_1001215A4((uint64_t)v75, (uint64_t)&unk_1001EB850, (uint64_t)sub_100165018, (uint64_t)&unk_1001EB868);
          swift_bridgeObjectRelease(v75);
          swift_unknownObjectRelease(v67);
        }
        v62 = sub_100129690();
        OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100166190, v62, &type metadata for () + 1);
        if (!v7)
        {
          swift_release(v62);
          v99 = swift_unknownObjectWeakLoadStrong(v19, v98);
          if (v99)
          {
            v100 = v99;
            v101 = v151;
            sub_1001215A4((uint64_t)v151, (uint64_t)&unk_1001EB6C0, (uint64_t)sub_100164F8C, (uint64_t)&unk_1001EB6D8);
            swift_bridgeObjectRelease(v101);
            swift_unknownObjectRelease(v100);
          }
          else
          {
            swift_bridgeObjectRelease(v151);
          }
          v103 = swift_unknownObjectWeakLoadStrong(v19, v102);
          if (v103)
          {
            v104 = v103;
            v105 = v150;
            sub_1001215A4((uint64_t)v150, (uint64_t)&unk_1001EB710, (uint64_t)sub_100164FA8, (uint64_t)&unk_1001EB728);
            swift_bridgeObjectRelease(v105);
            swift_unknownObjectRelease(v104);
          }
          else
          {
            swift_bridgeObjectRelease(v150);
          }
          v107 = swift_unknownObjectWeakLoadStrong(v19, v106);
          if (!v107)
            return swift_bridgeObjectRelease(v44);
          v108 = v107;
          sub_1001215A4((uint64_t)v44, (uint64_t)&unk_1001EB760, (uint64_t)sub_100164FC4, (uint64_t)&unk_1001EB778);
          swift_bridgeObjectRelease(v44);
          return swift_unknownObjectRelease(v108);
        }
        swift_bridgeObjectRelease(v151);
        swift_bridgeObjectRelease(v150);
        swift_bridgeObjectRelease(v44);
        goto LABEL_54;
      }
LABEL_104:
      swift_once(&qword_100210120, sub_10009C800);
      goto LABEL_13;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001AA990, v12, v14, 0) & 1) != 0)
  {
    v15 = v14;
    goto LABEL_5;
  }
  if (v12 == 0xD000000000000010 && v14 == 0x80000001001AB0E0)
  {
    v59 = swift_bridgeObjectRelease(0x80000001001AB0E0);
    v7 = v152;
    goto LABEL_37;
  }
  v60 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001001AB0E0, v12, v14, 0);
  v7 = v152;
  if ((v60 & 1) != 0)
  {
    v59 = swift_bridgeObjectRelease(v14);
LABEL_37:
    v61 = static os_log_type_t.default.getter(v59);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, qword_100218DE8, "Cloud data purged, attempting to clear local sound profile data", 63, 2, _swiftEmptyArrayStorage);
    v62 = sub_100129690();
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100164CA0, v62, &type metadata for () + 1);
    if (!v7)
    {
      swift_release(v62);
      return notify_post("BTCloudServicesSoundProfileChangedNotification");
    }
LABEL_54:
    v78 = swift_release(v62);
    v79 = static os_log_type_t.error.getter(v78);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v80 = qword_100218DE8;
    v81 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v82 = swift_allocObject(v81, 112, 7);
    *(_OWORD *)(v82 + 16) = xmmword_1001858F0;
    v83 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
    if ((_DWORD)v83)
    {
      v84 = sub_100129690();
      if (qword_100210120 != -1)
        swift_once(&qword_100210120, sub_10009C800);
      v85 = v154;
      v86 = sub_1000A0A00(v154, (uint64_t)qword_100218BE0);
      v87 = v153;
      (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v5, v86, v85);
      v88 = sub_100128330((uint64_t)v5, &qword_100210CF8, type metadata accessor for DeviceRecord, (uint64_t)sub_100154AD0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693D4);
      swift_release(v84);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v5, v85);
    }
    else
    {
      v89 = static os_log_type_t.error.getter(v83);
      v88 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v80, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
    }
    v90 = type metadata accessor for DeviceRecord(0);
    v91 = Array.description.getter(v88, v90);
    v93 = v92;
    swift_bridgeObjectRelease(v88);
    *(_QWORD *)(v82 + 56) = &type metadata for String;
    v94 = sub_1000A0DF4();
    *(_QWORD *)(v82 + 64) = v94;
    *(_QWORD *)(v82 + 32) = v91;
    *(_QWORD *)(v82 + 40) = v93;
    *(_QWORD *)v156 = v7;
    swift_errorRetain(v7);
    v95 = sub_1000A0980(&qword_100210710);
    v96 = String.init<A>(describing:)(v156, v95);
    *(_QWORD *)(v82 + 96) = &type metadata for String;
    *(_QWORD *)(v82 + 104) = v94;
    *(_QWORD *)(v82 + 72) = v96;
    *(_QWORD *)(v82 + 80) = v97;
    os_log(_:dso:log:_:_:)(v79, &_mh_execute_header, v80, "Error purging all Device Records: %@ cloud data: %@", 51, 2, v82);
    swift_bridgeObjectRelease(v82);
    return swift_errorRelease(v7);
  }
  if (v12 == 0xD000000000000012 && v14 == 0x80000001001AB270)
  {
    swift_bridgeObjectRelease(0x80000001001AB270);
    v109 = v155;
LABEL_76:
    v157 = &type metadata for AudioAccessoryFeatures;
    v112 = sub_1000A42C4();
    v158 = v112;
    v113 = isFeatureEnabled(_:)(v156);
    result = sub_1000A2140(v156);
    if ((v113 & 1) == 0)
      return result;
    v114 = static os_log_type_t.default.getter(result);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v115 = qword_100218DE8;
    v116 = os_log(_:dso:log:_:_:)(v114, &_mh_execute_header, qword_100218DE8, "Cloud data purged, attempting to clear local accessory data", 59, 2, _swiftEmptyArrayStorage);
    v117 = static os_log_type_t.default.getter(v116);
    os_log(_:dso:log:_:_:)(v117, &_mh_execute_header, v115, "Tell delegate to remove local cache for AudioAccessoryZone data", 63, 2, _swiftEmptyArrayStorage);
    v118 = v109 + 24;
    v120 = swift_unknownObjectWeakLoadStrong(v109 + 24, v119);
    if (v120)
    {
      v122 = v120;
      v157 = &type metadata for AudioAccessoryFeatures;
      v158 = v112;
      v123 = isFeatureEnabled(_:)(v156);
      sub_1000A2140(v156);
      if ((v123 & 1) != 0)
      {
        v124 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
        if ((_DWORD)v124)
        {
          v125 = sub_100129690();
          if (qword_1002101B0 != -1)
            swift_once(&qword_1002101B0, sub_100106014);
          v126 = v154;
          v127 = sub_1000A0A00(v154, (uint64_t)qword_100218D68);
          v128 = v153;
          (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v5, v127, v126);
          v129 = (_QWORD *)sub_100127B2C((uint64_t)v5, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
          swift_release(v125);
          (*(void (**)(char *, uint64_t))(v128 + 8))(v5, v126);
        }
        else
        {
          v138 = static os_log_type_t.error.getter(v124);
          v129 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)(v138, &_mh_execute_header, qword_100218DE8, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
        }
      }
      else
      {
        v129 = _swiftEmptyArrayStorage;
      }
      sub_1001215A4((uint64_t)v129, (uint64_t)&unk_1001EB800, (uint64_t)sub_100164FFC, (uint64_t)&unk_1001EB818);
      swift_bridgeObjectRelease(v129);
      swift_unknownObjectRelease(v122);
    }
    v139 = swift_unknownObjectWeakLoadStrong(v118, v121);
    if (v139)
    {
      v140 = v139;
      v157 = &type metadata for AudioAccessoryFeatures;
      v158 = v112;
      v141 = isFeatureEnabled(_:)(v156);
      sub_1000A2140(v156);
      if ((v141 & 1) != 0)
      {
        v142 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
        if ((_DWORD)v142)
        {
          v143 = sub_100129690();
          if (qword_100210130 != -1)
            swift_once(&qword_100210130, sub_1000A5BC0);
          v144 = v154;
          v145 = sub_1000A0A00(v154, (uint64_t)qword_100218C00);
          v146 = v153;
          (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v5, v145, v144);
          v147 = (_QWORD *)sub_100127B2C((uint64_t)v5, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
          swift_release(v143);
          (*(void (**)(char *, uint64_t))(v146 + 8))(v5, v144);
        }
        else
        {
          v148 = static os_log_type_t.error.getter(v142);
          v147 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)(v148, &_mh_execute_header, qword_100218DE8, "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
        }
      }
      else
      {
        v147 = _swiftEmptyArrayStorage;
      }
      sub_1001215A4((uint64_t)v147, (uint64_t)&unk_1001EB850, (uint64_t)sub_100165018, (uint64_t)&unk_1001EB868);
      swift_bridgeObjectRelease(v147);
      swift_unknownObjectRelease(v140);
    }
    v62 = sub_100129690();
    v157 = &type metadata for AudioAccessoryFeatures;
    v158 = v112;
    v149 = isFeatureEnabled(_:)(v156);
    sub_1000A2140(v156);
    if ((v149 & 1) == 0)
      return swift_release(v62);
    v7 = v152;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100166178, v62, &type metadata for () + 1);
    if (!v7)
      return swift_release(v62);
    goto LABEL_54;
  }
  v110 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001001AB270, v12, v14, 0);
  v111 = swift_bridgeObjectRelease(v14);
  v109 = v155;
  if ((v110 & 1) != 0)
    goto LABEL_76;
  v130 = static os_log_type_t.default.getter(v111);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v131 = qword_100218DE8;
  v132 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v133 = swift_allocObject(v132, 72, 7);
  *(_OWORD *)(v133 + 16) = xmmword_100184870;
  v134 = objc_msgSend(a1, "zoneName");
  v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v134);
  v137 = v136;

  *(_QWORD *)(v133 + 56) = &type metadata for String;
  *(_QWORD *)(v133 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v133 + 32) = v135;
  *(_QWORD *)(v133 + 40) = v137;
  os_log(_:dso:log:_:_:)(v130, &_mh_execute_header, v131, "Cloud data purged, for unknown zone: %@", 39, 2, v133);
  return swift_bridgeObjectRelease(v133);
}

uint64_t sub_10014CC94(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  int v14;
  _BYTE v15[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    if (!*(_QWORD *)(result + 48))
    {
      v6 = static os_log_type_t.default.getter(result);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v7 = qword_100218DE8;
      v8 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v9 = swift_allocObject(v8, 72, 7);
      *(_OWORD *)(v9 + 16) = xmmword_100184870;
      *(_QWORD *)(v9 + 56) = &type metadata for Bool;
      *(_QWORD *)(v9 + 64) = &protocol witness table for Bool;
      *(_BYTE *)(v9 + 32) = a2 & 1;
      os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Account now available - manatee: %i", v14);
      swift_bridgeObjectRelease(v9);
      v10 = *(_BYTE *)(v5 + 16);
      Strong = swift_unknownObjectWeakLoadStrong(v5 + 24, v11);
      if (Strong)
      {
        v13 = Strong;
        sub_1000C5A64(1, (v10 ^ 1) & a2);
        Strong = swift_unknownObjectRelease(v13);
      }
      *(_BYTE *)(v5 + 16) = a2 & 1;
      sub_10012C36C(Strong);
    }
    return swift_release(v5);
  }
  return result;
}

void sub_10014CDE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[3];
  ValueMetadata *v49;
  unint64_t v50;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static os_log_type_t.default.getter(v6);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v8 = qword_100218DE8;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_100218DE8, "Account removed, obliterate user cached files. Reset timers.", 60, 2, _swiftEmptyArrayStorage);
  v9 = (void *)objc_opt_self(BTSystemConfiguration);
  v10 = objc_msgSend(v9, "isFirstUnlocked");
  if ((_DWORD)v10)
  {
    v11 = sub_100129690();
    if (qword_100210120 != -1)
      swift_once(&qword_100210120, sub_10009C800);
    v12 = sub_1000A0A00(v2, (uint64_t)qword_100218BE0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v12, v2);
    v13 = sub_100128330((uint64_t)v5, &qword_100210CF8, type metadata accessor for DeviceRecord, (uint64_t)sub_100154AD0, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1001693D4);
    swift_release(v11);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v14 = static os_log_type_t.error.getter(v10);
    v13 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v8, "deviceRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
  }
  v49 = &type metadata for AudioAccessoryFeatures;
  v15 = sub_1000A42C4();
  v50 = v15;
  v16 = isFeatureEnabled(_:)(v48);
  sub_1000A2140(v48);
  if ((v16 & 1) != 0)
  {
    v17 = objc_msgSend(v9, "isFirstUnlocked");
    if ((_DWORD)v17)
    {
      v18 = (_QWORD *)&unk_100218000;
      v19 = sub_100129690();
      if (qword_1002101B0 != -1)
        swift_once(&qword_1002101B0, sub_100106014);
      v20 = sub_1000A0A00(v2, (uint64_t)qword_100218D68);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v20, v2);
      v47 = (_QWORD *)sub_100127B2C((uint64_t)v5, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
      swift_release(v19);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      v21 = static os_log_type_t.error.getter(v17);
      v18 = &unk_100218000;
      v47 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_100218DE8, "aaDeviceRecords call failed because device is in beforeFirstUnlock state", 72, 2);
    }
  }
  else
  {
    v18 = (_QWORD *)&unk_100218000;
    v47 = _swiftEmptyArrayStorage;
  }
  v49 = &type metadata for AudioAccessoryFeatures;
  v50 = v15;
  v22 = isFeatureEnabled(_:)(v48);
  sub_1000A2140(v48);
  if ((v22 & 1) != 0)
  {
    v23 = objc_msgSend(v9, "isFirstUnlocked");
    if ((_DWORD)v23)
    {
      v24 = sub_100129690();
      if (qword_100210130 != -1)
        swift_once(&qword_100210130, sub_1000A5BC0);
      v25 = sub_1000A0A00(v2, (uint64_t)qword_100218C00);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v25, v2);
      v26 = (_QWORD *)sub_100127B2C((uint64_t)v5, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
      swift_release(v24);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      v27 = static os_log_type_t.error.getter(v23);
      v26 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v18[445], "aaProxCardsRecords call failed because device is in beforeFirstUnlock state", 75, 2, _swiftEmptyArrayStorage);
    }
  }
  else
  {
    v26 = _swiftEmptyArrayStorage;
  }
  v28 = sub_100129690();
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100166190, v28, &type metadata for () + 1);
  swift_release(v28);
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 24, v29);
  if (Strong)
  {
    v31 = Strong;
    sub_1001215A4((uint64_t)v13, (uint64_t)&unk_1001EC228, (uint64_t)sub_1001661F4, (uint64_t)&unk_1001EC240);
    swift_bridgeObjectRelease(v13);
    swift_unknownObjectRelease(v31);
  }
  else
  {
    swift_bridgeObjectRelease(v13);
  }
  v49 = &type metadata for AudioAccessoryFeatures;
  v50 = v15;
  v32 = isFeatureEnabled(_:)(v48);
  sub_1000A2140(v48);
  if ((v32 & 1) != 0)
  {
    v34 = swift_unknownObjectWeakLoadStrong(a1 + 24, v33);
    if (v34)
    {
      v35 = v34;
      v36 = v47;
      sub_1001215A4((uint64_t)v47, (uint64_t)&unk_1001EC1D8, (uint64_t)sub_1001661D8, (uint64_t)&unk_1001EC1F0);
      swift_bridgeObjectRelease(v36);
      swift_unknownObjectRelease(v35);
    }
    else
    {
      swift_bridgeObjectRelease(v47);
    }
    v39 = swift_unknownObjectWeakLoadStrong(a1 + 24, v37);
    if (v39)
    {
      v40 = v39;
      sub_1001215A4((uint64_t)v26, (uint64_t)&unk_1001EC188, (uint64_t)sub_1001661BC, (uint64_t)&unk_1001EC1A0);
      swift_bridgeObjectRelease(v26);
      swift_unknownObjectRelease(v40);
      goto LABEL_34;
    }
    v38 = v26;
  }
  else
  {
    swift_bridgeObjectRelease(v26);
    v38 = v47;
  }
  swift_bridgeObjectRelease(v38);
LABEL_34:
  v41 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer), "invalidate");
  v42 = *(void **)(a1 + v41);
  *(_QWORD *)(a1 + v41) = 0;

  if (!*(_QWORD *)(a1 + 48))
  {
    v44 = swift_unknownObjectWeakLoadStrong(a1 + 24, v43);
    if (v44)
    {
      v45 = v44;
      sub_1000C5A64(0, 1);
      swift_unknownObjectRelease(v45);
    }
  }
}

uint64_t sub_10014D3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_BYTE *, uint64_t);
  uint64_t v22;
  _BYTE v23[15];
  uint64_t v24;

  v5 = sub_1000A0980((uint64_t *)&unk_100210840);
  __chkstk_darwin(v5);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v23[-v13];
  v15 = sub_100129690();
  URL.init(string:)(0x6465727265666544, 0xEF7364726F636552);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v17 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
    v18 = CKRecord.recordType.getter(v17);
    v20 = v19;
    URL.appendingPathComponent(_:)(v18);
    swift_bridgeObjectRelease(v20);
    v21 = *(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8);
    v22 = v21(v11, v8);
    __chkstk_darwin(v22);
    *(_QWORD *)&v23[-32] = v15;
    *(_QWORD *)&v23[-24] = a2;
    *(_QWORD *)&v23[-16] = a3;
    *(_QWORD *)&v23[-8] = v14;
    OS_dispatch_queue.sync<A>(execute:)(&v24, sub_1001684A0, &v23[-48], &type metadata for Bool);
    swift_release(v15);
    return v21(v14, v8);
  }
  return result;
}

uint64_t sub_10014D57C@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000A20D8(a1, v3);
  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
  v6 = objc_msgSend(v5, "encryptedValues");

  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "objectForKeyedSubscript:", v7);

  result = swift_unknownObjectRelease(v6);
  *a2 = v8;
  return result;
}

uint64_t sub_10014D640(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];

  v3 = v2;
  v6 = type metadata accessor for DeviceRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100129690();
  v38 = v10;
  v39 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100165B2C, v37, &type metadata for () + 1);
  LODWORD(v36) = a2;
  v11 = swift_release(v10);
  v35 = static os_log_type_t.default.getter(v11);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v12 = qword_100218DE8;
  v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v15 = sub_1000A0DF4();
  *(_QWORD *)(v14 + 64) = v15;
  strcpy((char *)(v14 + 32), "DeviceRecord");
  *(_BYTE *)(v14 + 45) = 0;
  *(_WORD *)(v14 + 46) = -5120;
  sub_1000AE548(a1, (uint64_t)v9, type metadata accessor for DeviceRecord);
  v16 = String.init<A>(describing:)(v9, v6);
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v15;
  *(_QWORD *)(v14 + 72) = v16;
  *(_QWORD *)(v14 + 80) = v17;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v12, "Successfully Cached (%@) Record: %@", 35, 2, v14);
  result = swift_bridgeObjectRelease(v14);
  if ((v36 & 1) != 0)
  {
    v19 = static os_log_type_t.default.getter(result);
    v20 = qword_100218DE8;
    v21 = swift_allocObject(v13, 72, 7);
    v36 = xmmword_100184870;
    *(_OWORD *)(v21 + 16) = xmmword_100184870;
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    v24 = *(_QWORD *)(v3 + 32);
    v40[0] = Strong;
    v40[1] = v24;
    v25 = sub_1000A0980(&qword_100212330);
    v26 = String.init<A>(describing:)(v40, v25);
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = v15;
    *(_QWORD *)(v21 + 32) = v26;
    *(_QWORD *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Update delegate: %@", 19, 2, v21);
    swift_bridgeObjectRelease(v21);
    result = swift_unknownObjectWeakLoadStrong(v3 + 24, v28);
    if (result)
    {
      v29 = result;
      v30 = sub_1000A0980(&qword_100212278);
      v31 = *(unsigned __int8 *)(v7 + 80);
      v32 = (v31 + 32) & ~v31;
      v33 = swift_allocObject(v30, v32 + *(_QWORD *)(v7 + 72), v31 | 7);
      *(_OWORD *)(v33 + 16) = v36;
      sub_1000AE548(a1, v33 + v32, type metadata accessor for DeviceRecord);
      sub_1001215A4(v33, (uint64_t)&unk_1001EBBC0, (uint64_t)sub_100165B58, (uint64_t)&unk_1001EBBD8);
      swift_bridgeObjectRelease(v33);
      return swift_unknownObjectRelease(v29);
    }
  }
  return result;
}

uint64_t sub_10014DA48(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];

  v3 = v2;
  v6 = type metadata accessor for DeviceSupportInformationRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100129690();
  v38 = v10;
  v39 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100165B60, v37, &type metadata for () + 1);
  LODWORD(v36) = a2;
  v11 = swift_release(v10);
  v35 = static os_log_type_t.default.getter(v11);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v12 = qword_100218DE8;
  v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v15 = sub_1000A0DF4();
  *(_QWORD *)(v14 + 64) = v15;
  *(_QWORD *)(v14 + 32) = 0xD00000000000001ELL;
  *(_QWORD *)(v14 + 40) = 0x80000001001AA950;
  sub_1000AE548(a1, (uint64_t)v9, type metadata accessor for DeviceSupportInformationRecord);
  v16 = String.init<A>(describing:)(v9, v6);
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v15;
  *(_QWORD *)(v14 + 72) = v16;
  *(_QWORD *)(v14 + 80) = v17;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v12, "Successfully Cached (%@) Record: %@", 35, 2, v14);
  result = swift_bridgeObjectRelease(v14);
  if ((v36 & 1) != 0)
  {
    v19 = static os_log_type_t.default.getter(result);
    v20 = qword_100218DE8;
    v21 = swift_allocObject(v13, 72, 7);
    v36 = xmmword_100184870;
    *(_OWORD *)(v21 + 16) = xmmword_100184870;
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    v24 = *(_QWORD *)(v3 + 32);
    v40[0] = Strong;
    v40[1] = v24;
    v25 = sub_1000A0980(&qword_100212330);
    v26 = String.init<A>(describing:)(v40, v25);
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = v15;
    *(_QWORD *)(v21 + 32) = v26;
    *(_QWORD *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Update delegate: %@", 19, 2, v21);
    swift_bridgeObjectRelease(v21);
    result = swift_unknownObjectWeakLoadStrong(v3 + 24, v28);
    if (result)
    {
      v29 = result;
      v30 = sub_1000A0980(&qword_100212298);
      v31 = *(unsigned __int8 *)(v7 + 80);
      v32 = (v31 + 32) & ~v31;
      v33 = swift_allocObject(v30, v32 + *(_QWORD *)(v7 + 72), v31 | 7);
      *(_OWORD *)(v33 + 16) = v36;
      sub_1000AE548(a1, v33 + v32, type metadata accessor for DeviceSupportInformationRecord);
      sub_1001215A4(v33, (uint64_t)&unk_1001EBC10, (uint64_t)sub_100165BBC, (uint64_t)&unk_1001EBC28);
      swift_bridgeObjectRelease(v33);
      return swift_unknownObjectRelease(v29);
    }
  }
  return result;
}

uint64_t sub_10014DE4C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];

  v3 = v2;
  v6 = type metadata accessor for MagicPairingSettingsRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100129690();
  v38 = v10;
  v39 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100165BC4, v37, &type metadata for () + 1);
  LODWORD(v36) = a2;
  v11 = swift_release(v10);
  v35 = static os_log_type_t.default.getter(v11);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v12 = qword_100218DE8;
  v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v15 = sub_1000A0DF4();
  *(_QWORD *)(v14 + 64) = v15;
  strcpy((char *)(v14 + 32), "MagicSettings");
  *(_WORD *)(v14 + 46) = -4864;
  sub_1000AE548(a1, (uint64_t)v9, type metadata accessor for MagicPairingSettingsRecord);
  v16 = String.init<A>(describing:)(v9, v6);
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v15;
  *(_QWORD *)(v14 + 72) = v16;
  *(_QWORD *)(v14 + 80) = v17;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v12, "Successfully Cached (%@) Record: %@", 35, 2, v14);
  result = swift_bridgeObjectRelease(v14);
  if ((v36 & 1) != 0)
  {
    v19 = static os_log_type_t.default.getter(result);
    v20 = qword_100218DE8;
    v21 = swift_allocObject(v13, 72, 7);
    v36 = xmmword_100184870;
    *(_OWORD *)(v21 + 16) = xmmword_100184870;
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    v24 = *(_QWORD *)(v3 + 32);
    v40[0] = Strong;
    v40[1] = v24;
    v25 = sub_1000A0980(&qword_100212330);
    v26 = String.init<A>(describing:)(v40, v25);
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = v15;
    *(_QWORD *)(v21 + 32) = v26;
    *(_QWORD *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Update delegate: %@", 19, 2, v21);
    swift_bridgeObjectRelease(v21);
    result = swift_unknownObjectWeakLoadStrong(v3 + 24, v28);
    if (result)
    {
      v29 = result;
      v30 = sub_1000A0980(&qword_100212290);
      v31 = *(unsigned __int8 *)(v7 + 80);
      v32 = (v31 + 32) & ~v31;
      v33 = swift_allocObject(v30, v32 + *(_QWORD *)(v7 + 72), v31 | 7);
      *(_OWORD *)(v33 + 16) = v36;
      sub_1000AE548(a1, v33 + v32, type metadata accessor for MagicPairingSettingsRecord);
      sub_1001215A4(v33, (uint64_t)&unk_1001EB940, (uint64_t)sub_1001650A8, (uint64_t)&unk_1001EB958);
      swift_bridgeObjectRelease(v33);
      return swift_unknownObjectRelease(v29);
    }
  }
  return result;
}

uint64_t sub_10014E258(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  _BYTE v33[16];
  uint64_t v34;
  _QWORD *v35;
  _QWORD v36[3];

  v3 = v2;
  v6 = sub_100129690();
  v36[0] = a1;
  v34 = v6;
  v35 = v36;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100165C0C, v33, &type metadata for () + 1);
  v7 = swift_release(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v9 = qword_100218DE8;
  v10 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v12 = sub_1000A0DF4();
  *(_QWORD *)(v11 + 64) = v12;
  strcpy((char *)(v11 + 32), "AADeviceRecord");
  *(_BYTE *)(v11 + 47) = -18;
  v36[0] = a1;
  v13 = type metadata accessor for AADeviceRecord(0);
  v32 = a1;
  v14 = String.init<A>(describing:)(v36, v13);
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v12;
  *(_QWORD *)(v11 + 72) = v14;
  *(_QWORD *)(v11 + 80) = v15;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Successfully Cached (%@) Record: %@", 35, 2, v11);
  result = swift_bridgeObjectRelease(v11);
  if ((a2 & 1) != 0)
  {
    v17 = static os_log_type_t.default.getter(result);
    v18 = qword_100218DE8;
    v19 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100184870;
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v20);
    v22 = *(_QWORD *)(v3 + 32);
    v36[0] = Strong;
    v36[1] = v22;
    v23 = sub_1000A0980(&qword_100212330);
    v24 = String.init<A>(describing:)(v36, v23);
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = v12;
    *(_QWORD *)(v19 + 32) = v24;
    *(_QWORD *)(v19 + 40) = v25;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Update delegate: %@", 19, 2, v19);
    swift_bridgeObjectRelease(v19);
    result = swift_unknownObjectWeakLoadStrong(v3 + 24, v26);
    if (result)
    {
      v27 = result;
      v28 = sub_1000A0980(&qword_100211998);
      v29 = swift_allocObject(v28, 40, 7);
      *(_OWORD *)(v29 + 16) = xmmword_100187640;
      *(_QWORD *)(v29 + 32) = v32;
      v36[0] = v29;
      specialized Array._endMutation()(v29);
      v30 = v36[0];
      v31 = v32;
      sub_1001215A4(v30, (uint64_t)&unk_1001EBC60, (uint64_t)sub_100165C3C, (uint64_t)&unk_1001EBC78);
      swift_bridgeObjectRelease(v30);
      return swift_unknownObjectRelease(v27);
    }
  }
  return result;
}

uint64_t sub_10014E61C(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  _BYTE v33[16];
  uint64_t v34;
  _QWORD *v35;
  _QWORD v36[3];

  v3 = v2;
  v6 = sub_100129690();
  v36[0] = a1;
  v34 = v6;
  v35 = v36;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_1001683B4, v33, &type metadata for () + 1);
  v7 = swift_release(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v9 = qword_100218DE8;
  v10 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v12 = sub_1000A0DF4();
  *(_QWORD *)(v11 + 64) = v12;
  *(_QWORD *)(v11 + 32) = 0xD000000000000011;
  *(_QWORD *)(v11 + 40) = 0x80000001001B1050;
  v36[0] = a1;
  v13 = type metadata accessor for AAProxCardsRecord(0);
  v32 = a1;
  v14 = String.init<A>(describing:)(v36, v13);
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v12;
  *(_QWORD *)(v11 + 72) = v14;
  *(_QWORD *)(v11 + 80) = v15;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Successfully Cached (%@) Record: %@", 35, 2, v11);
  result = swift_bridgeObjectRelease(v11);
  if ((a2 & 1) != 0)
  {
    v17 = static os_log_type_t.default.getter(result);
    v18 = qword_100218DE8;
    v19 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100184870;
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v20);
    v22 = *(_QWORD *)(v3 + 32);
    v36[0] = Strong;
    v36[1] = v22;
    v23 = sub_1000A0980(&qword_100212330);
    v24 = String.init<A>(describing:)(v36, v23);
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = v12;
    *(_QWORD *)(v19 + 32) = v24;
    *(_QWORD *)(v19 + 40) = v25;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Update delegate: %@", 19, 2, v19);
    swift_bridgeObjectRelease(v19);
    result = swift_unknownObjectWeakLoadStrong(v3 + 24, v26);
    if (result)
    {
      v27 = result;
      v28 = sub_1000A0980(&qword_100211998);
      v29 = swift_allocObject(v28, 40, 7);
      *(_OWORD *)(v29 + 16) = xmmword_100187640;
      *(_QWORD *)(v29 + 32) = v32;
      v36[0] = v29;
      specialized Array._endMutation()(v29);
      v30 = v36[0];
      v31 = v32;
      sub_1001215A4(v30, (uint64_t)&unk_1001EBCB0, (uint64_t)sub_100165C58, (uint64_t)&unk_1001EBCC8);
      swift_bridgeObjectRelease(v30);
      return swift_unknownObjectRelease(v27);
    }
  }
  return result;
}

uint64_t sub_10014E9D8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];

  v3 = v2;
  v6 = type metadata accessor for LegacyAccountMagicKeysRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100129690();
  v38 = v10;
  v39 = a1;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), sub_100165AC8, v37, &type metadata for () + 1);
  LODWORD(v36) = a2;
  v11 = swift_release(v10);
  v35 = static os_log_type_t.default.getter(v11);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v12 = qword_100218DE8;
  v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v15 = sub_1000A0DF4();
  *(_QWORD *)(v14 + 64) = v15;
  *(_QWORD *)(v14 + 32) = 0x654B72657473614DLL;
  *(_QWORD *)(v14 + 40) = 0xE900000000000079;
  sub_1000AE548(a1, (uint64_t)v9, type metadata accessor for LegacyAccountMagicKeysRecord);
  v16 = String.init<A>(describing:)(v9, v6);
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v15;
  *(_QWORD *)(v14 + 72) = v16;
  *(_QWORD *)(v14 + 80) = v17;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v12, "Successfully Cached (%@) Record: %@", 35, 2, v14);
  result = swift_bridgeObjectRelease(v14);
  if ((v36 & 1) != 0)
  {
    v19 = static os_log_type_t.default.getter(result);
    v20 = qword_100218DE8;
    v21 = swift_allocObject(v13, 72, 7);
    v36 = xmmword_100184870;
    *(_OWORD *)(v21 + 16) = xmmword_100184870;
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 24, v22);
    v24 = *(_QWORD *)(v3 + 32);
    v40[0] = Strong;
    v40[1] = v24;
    v25 = sub_1000A0980(&qword_100212330);
    v26 = String.init<A>(describing:)(v40, v25);
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = v15;
    *(_QWORD *)(v21 + 32) = v26;
    *(_QWORD *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Update delegate: %@", 19, 2, v21);
    swift_bridgeObjectRelease(v21);
    result = swift_unknownObjectWeakLoadStrong(v3 + 24, v28);
    if (result)
    {
      v29 = result;
      v30 = sub_1000A0980(&qword_100212338);
      v31 = *(unsigned __int8 *)(v7 + 80);
      v32 = (v31 + 32) & ~v31;
      v33 = swift_allocObject(v30, v32 + *(_QWORD *)(v7 + 72), v31 | 7);
      *(_OWORD *)(v33 + 16) = v36;
      sub_1000AE548(a1, v33 + v32, type metadata accessor for LegacyAccountMagicKeysRecord);
      sub_1001215A4(v33, (uint64_t)&unk_1001EBB70, (uint64_t)sub_100165B24, (uint64_t)&unk_1001EBB88);
      swift_bridgeObjectRelease(v33);
      return swift_unknownObjectRelease(v29);
    }
  }
  return result;
}

uint64_t sub_10014EDDC()
{
  return notify_post("BTCloudServicesSoundProfileChangedNotification");
}

uint64_t sub_10014EDE8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10014F048(a1, a2, a3, (_QWORD *)*v3, &qword_100212290, type metadata accessor for MagicPairingSettingsRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10014EE14(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10014F048(a1, a2, a3, (_QWORD *)*v3, &qword_100212298, type metadata accessor for DeviceSupportInformationRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10014EE40(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10014F048(a1, a2, a3, (_QWORD *)*v3, &qword_100212278, type metadata accessor for DeviceRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10014EE6C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10014EEE0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10014EE88(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10014F048(a1, a2, a3, (_QWORD *)*v3, &qword_100210D08, type metadata accessor for LegacyMagicPairingSettingsRecords);
  *v3 = result;
  return result;
}

uint64_t sub_10014EEB4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10014F048(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1002122D0, type metadata accessor for BTDeferredRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10014EEE0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000A0980((uint64_t *)&unk_1002123C0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10014F048(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1000A0980(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_10014F22C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_1000A0980(&qword_100211998);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  v7 = sub_1001542C8(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10016786C(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_10014F314(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_1000A0980(&qword_100211998);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_100154064((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

unsigned __int8 *sub_10014F408(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_10014F518(a1, a2, a3);
}

uint64_t sub_10014F41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014F428(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10014F518);
}

uint64_t sub_10014F428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a1;
  v17 = a2;
  swift_bridgeObjectRetain(a2);
  v6 = String.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v8 = v6;
  v9 = v7;
  if ((v7 & 0x1000000000000000) == 0)
  {
    if ((v7 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v11 = HIBYTE(v9) & 0xF;
    v16 = v8;
    v17 = v9 & 0xFFFFFFFFFFFFFFLL;
    v10 = &v16;
    goto LABEL_7;
  }
  v8 = sub_10014FA10(v6, v7);
  v13 = v12;
  swift_bridgeObjectRelease(v9);
  v9 = v13;
  if ((v13 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v8 & 0x1000000000000000) != 0)
  {
    v10 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v10 = (uint64_t *)_StringObject.sharedUTF8.getter(v8, v9);
  }
LABEL_7:
  v14 = a4(v10, v11, a3);
  swift_bridgeObjectRelease(v9);
  return v14;
}

unsigned __int8 *sub_10014F518(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_10014F794(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10014FA10(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10014FA8C(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10014FA8C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10014FBD0(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_10014FCBC(v12, 0);
      v5 = sub_10014FD20((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10014FBD0(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_10014FF30(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_10014FF30(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10014FCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_1000A0980((uint64_t *)&unk_100211330);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

unint64_t sub_10014FD20(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_10014FF30(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_10014FF30(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10014FF30(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

void sub_10014FFA8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(type metadata accessor for SoundProfileRecord(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_100154280(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1001500A4(v5);
  *a1 = v3;
}

uint64_t sub_100150028(uint64_t *a1, uint64_t (*a2)(_QWORD *))
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1001542B4(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  v7 = a2(v9);
  return specialized ContiguousArray._endMutation()(v7);
}

void sub_1001500A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  char *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v134 = type metadata accessor for SoundProfileRecord(0);
  v127 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v124 = (uint64_t)&v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v135 = (uint64_t)&v120 - v5;
  __chkstk_darwin(v6);
  v132 = (uint64_t)&v120 - v7;
  __chkstk_darwin(v8);
  v131 = (uint64_t)&v120 - v9;
  v10 = a1[1];
  v11 = _minimumMergeRunLength(_:)(v10);
  if (v11 >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      sub_1001525D8(0, v10, 1, a1);
    return;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v133 = a1;
  v122 = v11;
  v128 = v1;
  if (v10 < 2)
  {
    v16 = (char *)_swiftEmptyArrayStorage;
    v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      v105 = v16;
      if (v18 >= 2)
      {
        v112 = *v133;
        do
        {
          v113 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v112)
            goto LABEL_146;
          v114 = *(_QWORD *)&v105[16 * v113 + 32];
          v115 = *(_QWORD *)&v105[16 * v18 + 24];
          v116 = v128;
          sub_100152C94(v112 + *(_QWORD *)(v127 + 72) * v114, v112 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v105[16 * v18 + 16], v112 + *(_QWORD *)(v127 + 72) * v115, v126);
          v128 = v116;
          if (v116)
            break;
          if (v115 < v114)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
            v105 = sub_100153F5C((uint64_t)v105);
          if (v113 >= *((_QWORD *)v105 + 2))
            goto LABEL_136;
          v117 = &v105[16 * v113 + 32];
          *(_QWORD *)v117 = v114;
          *((_QWORD *)v117 + 1) = v115;
          v118 = *((_QWORD *)v105 + 2);
          if (v18 > v118)
            goto LABEL_137;
          memmove(&v105[16 * v18 + 16], &v105[16 * v18 + 32], 16 * (v118 - v18));
          *((_QWORD *)v105 + 2) = v118 - 1;
          v18 = v118 - 1;
        }
        while (v118 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease(v105);
      v119 = v121;
      v121[2] = 0;
      swift_bridgeObjectRelease(v119);
      return;
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v127 + 80);
    v121 = (_QWORD *)v14;
    v126 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v133;
    v22 = *(_QWORD *)(v127 + 72);
    v23 = v131;
    sub_1000AE548(*v133 + v22 * v20, v131, type metadata accessor for SoundProfileRecord);
    v24 = v21 + v22 * v17;
    v25 = v132;
    sub_1000AE548(v24, v132, type metadata accessor for SoundProfileRecord);
    LODWORD(v130) = static Date.> infix(_:_:)(v23 + *(int *)(v134 + 28), v25 + *(int *)(v134 + 28));
    sub_1000AE58C(v25, type metadata accessor for SoundProfileRecord);
    sub_1000AE58C(v23, type metadata accessor for SoundProfileRecord);
    v17 = v19 + 2;
    v129 = v21;
    v136 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v125 = v19;
    v26 = v16;
    v27 = v22 * v20;
    v28 = v21;
    v29 = v19 + 2;
    v30 = v22 * v29;
    do
    {
      v31 = v10;
      v32 = v131;
      sub_1000AE548(v28 + v30, v131, type metadata accessor for SoundProfileRecord);
      v33 = v132;
      sub_1000AE548(v28 + v27, v132, type metadata accessor for SoundProfileRecord);
      v34 = static Date.> infix(_:_:)(v32 + *(int *)(v134 + 28), v33 + *(int *)(v134 + 28));
      sub_1000AE58C(v33, type metadata accessor for SoundProfileRecord);
      sub_1000AE58C(v32, type metadata accessor for SoundProfileRecord);
      if (((v130 ^ v34) & 1) != 0)
      {
        v16 = v26;
        v17 = v29;
        v19 = v125;
        v10 = v31;
        if ((v130 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v28 += v136;
      ++v29;
      v10 = v31;
    }
    while (v31 != v29);
    v16 = v26;
    v17 = v31;
    v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v51 = v136;
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v35 = v133;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_100153CB0(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_100153CB0((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_88;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_94:
          if (v92)
            v64 = v76;
          goto LABEL_96;
        }
LABEL_88:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_14;
LABEL_96:
        v103 = v17;
        v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v133)
          goto LABEL_144;
        v105 = v16;
        v106 = &v62[16 * v104];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v128;
        sub_100152C94(*v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, *v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, *v133 + *(_QWORD *)(v127 + 72) * v109, v126);
        v128 = v110;
        if (v110)
          goto LABEL_116;
        if (v109 < v107)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_120;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v104 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_121;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        v92 = v111 > 2;
        v17 = v103;
        if (!v92)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v133[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v130 = v10;
  v120 = v16;
  v52 = 0;
  v53 = v136 * (v17 - 1);
  v54 = v17 * v136;
  v55 = v19;
  v56 = v19 * v136;
  v35 = v133;
  v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      v57 = v129;
      if (!v129)
        goto LABEL_145;
      v58 = v129 + v56;
      v59 = v129 + v53;
      sub_1000C6CD0(v129 + v56, v124, type metadata accessor for SoundProfileRecord);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1, v134);
        v51 = v136;
      }
      else
      {
        v51 = v136;
        if (v56 != v53)
          swift_arrayInitWithTakeBackToFront(v58, v59);
      }
      sub_1000C6CD0(v124, v59, type metadata accessor for SoundProfileRecord);
      v35 = v133;
      v19 = v125;
    }
    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }
  while (v55 < v17 + v52);
  v16 = v120;
  v10 = v130;
  if (v17 >= v130)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v122)
    goto LABEL_57;
  if (__OFADD__(v19, v122))
    goto LABEL_141;
  if (v19 + v122 >= v10)
    v36 = v10;
  else
    v36 = v19 + v122;
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      v120 = v16;
      v37 = *(_QWORD *)(v127 + 72);
      v136 = v37 * (v17 - 1);
      v129 = v37;
      v38 = v17 * v37;
      v125 = v19;
      v123 = v36;
      do
      {
        v40 = 0;
        v41 = v19;
        v130 = v17;
        while (1)
        {
          v42 = *v35;
          v43 = v38;
          v44 = v38 + v40 + *v35;
          v45 = v131;
          v46 = v35;
          sub_1000AE548(v44, v131, type metadata accessor for SoundProfileRecord);
          v47 = v132;
          sub_1000AE548(v136 + v40 + v42, v132, type metadata accessor for SoundProfileRecord);
          LOBYTE(v42) = static Date.> infix(_:_:)(v45 + *(int *)(v134 + 28), v47 + *(int *)(v134 + 28));
          sub_1000AE58C(v47, type metadata accessor for SoundProfileRecord);
          sub_1000AE58C(v45, type metadata accessor for SoundProfileRecord);
          if ((v42 & 1) == 0)
            break;
          v48 = *v46;
          if (!*v46)
            goto LABEL_143;
          v38 = v43;
          v49 = v48 + v43 + v40;
          v50 = v48 + v136 + v40;
          sub_1000C6CD0(v49, v135, type metadata accessor for SoundProfileRecord);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v134);
          sub_1000C6CD0(v135, v50, type metadata accessor for SoundProfileRecord);
          v39 = v130;
          v40 -= v129;
          ++v41;
          v35 = v133;
          if (v130 == v41)
            goto LABEL_35;
        }
        v39 = v130;
        v38 = v43;
        v35 = v46;
LABEL_35:
        v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        v19 = v125;
      }
      while (v17 != v123);
      v17 = v123;
      v16 = v120;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_100150AA0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  Swift::Int v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  char *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  void **v36;
  Swift::Int v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t *v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t *v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  void *v54;
  Swift::Int v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  char *v61;
  _QWORD *v62;
  void (*v63)(uint64_t, char *, uint64_t);
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v65;
  void *v66;
  char *v67;
  _QWORD *v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  char *v74;
  _QWORD *v75;
  void (*v76)(uint64_t, char *, uint64_t);
  uint64_t v77;
  id v78;
  void *v79;
  char *v80;
  _QWORD *v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char v88;
  void (*v89)(char *, uint64_t);
  void *v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  Swift::Int v159;
  Swift::Int v160;
  Swift::Int v161;
  Swift::Int v162;
  uint64_t v163;
  void **v164;
  uint64_t v165;
  char *v166;
  char *v167;
  Swift::Int v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  _QWORD *v176;
  void *v177;
  void *v178[2];
  uint64_t v179;

  v2 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v154 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v167 = (char *)&v154 - v6;
  __chkstk_darwin(v7);
  v174 = (char *)&v154 - v8;
  __chkstk_darwin(v9);
  v170 = (uint64_t)&v154 - v10;
  v11 = type metadata accessor for Date(0);
  v176 = *(_QWORD **)(v11 - 8);
  __chkstk_darwin(v11);
  v173 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v175 = (char *)&v154 - v14;
  __chkstk_darwin(v15);
  v172 = (char *)&v154 - v16;
  v17 = a1[1];
  v18 = _minimumMergeRunLength(_:)(v17);
  if (v18 >= v17)
  {
    if (v17 < 0)
      goto LABEL_159;
    if (v17)
      sub_100152814(0, v17, 1, a1);
    return;
  }
  if (v17 >= 0)
    v19 = v17;
  else
    v19 = v17 + 1;
  if (v17 < -1)
    goto LABEL_168;
  v159 = v18;
  v166 = v4;
  v156 = a1;
  if (v17 < 2)
  {
    v25 = (char *)_swiftEmptyArrayStorage;
    v179 = (uint64_t)_swiftEmptyArrayStorage;
    v164 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    v24 = v170;
    if (v17 != 1)
    {
      v94 = _swiftEmptyArrayStorage[2];
      goto LABEL_123;
    }
  }
  else
  {
    v20 = a1;
    v21 = v19 >> 1;
    v22 = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
    v23 = static Array._allocateBufferUninitialized(minimumCapacity:)(v21, v22);
    *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) = v21;
    a1 = v20;
    v164 = (void **)((v23 & 0xFFFFFFFFFFFFFF8) + 32);
    v179 = v23;
    v24 = v170;
  }
  v26 = 0;
  v27 = *a1;
  v158 = *a1 + 16;
  v157 = v27 - 8;
  v25 = (char *)_swiftEmptyArrayStorage;
  v160 = v17;
  v169 = v27;
  do
  {
    v28 = v26;
    v29 = v26 + 1;
    v162 = v26;
    if (v26 + 1 < v17)
    {
      v30 = v25;
      v31 = *(void **)(v27 + 8 * v29);
      v177 = *(void **)(v27 + 8 * v26);
      v32 = v177;
      v178[0] = v31;
      v33 = v31;
      v34 = v32;
      v35 = v165;
      LODWORD(v171) = sub_100149530(v178, &v177);
      v165 = v35;
      if (v35)
      {
        swift_bridgeObjectRelease(v30);

        goto LABEL_136;
      }

      v29 = v28 + 2;
      if (v28 + 2 < v17)
      {
        v36 = (void **)(v158 + 8 * v28);
        while (1)
        {
          v37 = v29;
          v38 = *v36;
          v177 = *(v36 - 1);
          v39 = v177;
          v178[0] = v38;
          v40 = v38;
          v41 = v39;
          v42 = v165;
          v43 = sub_100149530(v178, &v177);
          v165 = v42;
          if (v42)
          {
            swift_bridgeObjectRelease(v30);

            goto LABEL_136;
          }
          v44 = v43;

          if (((v171 ^ v44) & 1) != 0)
            break;
          v29 = v37 + 1;
          ++v36;
          v17 = v160;
          if (v160 == v37 + 1)
          {
            v29 = v160;
            goto LABEL_22;
          }
        }
        v17 = v160;
        v29 = v37;
LABEL_22:
        v28 = v162;
      }
      v25 = v30;
      v27 = v169;
      if ((v171 & 1) != 0)
      {
        if (v29 < v28)
          goto LABEL_163;
        if (v28 < v29)
        {
          v45 = (uint64_t *)(v157 + 8 * v29);
          v46 = v29;
          v47 = v28;
          v48 = (uint64_t *)(v169 + 8 * v28);
          do
          {
            if (v47 != --v46)
            {
              if (!v27)
                goto LABEL_166;
              v49 = *v48;
              *v48 = *v45;
              *v45 = v49;
            }
            ++v47;
            --v45;
            ++v48;
          }
          while (v47 < v46);
        }
      }
    }
    if (v29 >= v17)
      goto LABEL_69;
    if (__OFSUB__(v29, v28))
      goto LABEL_160;
    if (v29 - v28 >= v159)
      goto LABEL_69;
    if (__OFADD__(v28, v159))
      goto LABEL_161;
    if (v28 + v159 >= v17)
      v50 = v17;
    else
      v50 = v28 + v159;
    if (v50 < v28)
    {
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return;
    }
    if (v29 == v50)
      goto LABEL_69;
    v155 = v25;
    v51 = v24;
    v52 = v157 + 8 * v29;
    v161 = v50;
    while (2)
    {
      v54 = *(void **)(v27 + 8 * v29);
      v55 = v28;
      v163 = v52;
      v168 = v29;
      while (1)
      {
        v56 = *(void **)v52;
        v57 = v54;
        v58 = v56;
        v59 = objc_msgSend(v57, "modificationDate");
        v171 = v57;
        if (v59)
        {
          v60 = v59;
          v61 = v175;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v59);

          v62 = v176;
          v63 = (void (*)(uint64_t, char *, uint64_t))v176[4];
          v63(v51, v61, v11);
          v64 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62[7];
          v64(v51, 0, 1, v11);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v62[6])(v51, 1, v11) != 1)
          {
            v63((uint64_t)v172, (char *)v51, v11);
            goto LABEL_54;
          }
        }
        else
        {
          v64 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v176[7];
          v64(v51, 1, 1, v11);
        }
        v65 = objc_msgSend(v57, "creationDate");
        if (!v65)
        {
          v70 = (uint64_t)v166;
          v71 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v64)(v166, 1, 1, v11);
LABEL_52:
          static Date.now.getter(v71);
          sub_1000A1000(v70, (uint64_t *)&unk_1002103D0);
          goto LABEL_53;
        }
        v66 = v65;
        v67 = v175;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v65);

        v68 = v176;
        v69 = (void (*)(char *, char *, uint64_t))v176[4];
        v70 = (uint64_t)v166;
        v69(v166, v67, v11);
        v64(v70, 0, 1, v11);
        v71 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v68[6])(v70, 1, v11);
        if ((_DWORD)v71 == 1)
          goto LABEL_52;
        v69(v172, (char *)v70, v11);
LABEL_53:
        sub_1000A1000(v170, (uint64_t *)&unk_1002103D0);
LABEL_54:
        v72 = objc_msgSend(v58, "modificationDate");
        if (v72)
        {
          v73 = v72;
          v74 = v175;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

          v75 = v176;
          v76 = (void (*)(uint64_t, char *, uint64_t))v176[4];
          v77 = (uint64_t)v174;
          v76((uint64_t)v174, v74, v11);
          v64(v77, 0, 1, v11);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v75[6])(v77, 1, v11) != 1)
          {
            v76((uint64_t)v173, v174, v11);
            v51 = v170;
            goto LABEL_64;
          }
        }
        else
        {
          v64((uint64_t)v174, 1, 1, v11);
        }
        v78 = objc_msgSend(v58, "creationDate");
        if (!v78)
        {
          v83 = (uint64_t)v167;
          v84 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v64)(v167, 1, 1, v11);
          v85 = v170;
LABEL_62:
          static Date.now.getter(v84);
          sub_1000A1000(v83, (uint64_t *)&unk_1002103D0);
          goto LABEL_63;
        }
        v79 = v78;
        v80 = v175;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        v81 = v176;
        v82 = (void (*)(char *, char *, uint64_t))v176[4];
        v83 = (uint64_t)v167;
        v82(v167, v80, v11);
        v64(v83, 0, 1, v11);
        v84 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v81[6])(v83, 1, v11);
        v85 = v170;
        if ((_DWORD)v84 == 1)
          goto LABEL_62;
        v82(v173, (char *)v83, v11);
LABEL_63:
        sub_1000A1000((uint64_t)v174, (uint64_t *)&unk_1002103D0);
        v51 = v85;
LABEL_64:
        v86 = v172;
        v87 = v173;
        v88 = static Date.> infix(_:_:)(v172, v173);
        v89 = (void (*)(char *, uint64_t))v176[1];
        v89(v87, v11);
        v89(v86, v11);

        if ((v88 & 1) == 0)
          break;
        v27 = v169;
        if (!v169)
          goto LABEL_164;
        v90 = *(void **)v52;
        v54 = *(void **)(v52 + 8);
        *(_QWORD *)v52 = v54;
        *(_QWORD *)(v52 + 8) = v90;
        v52 -= 8;
        ++v55;
        v53 = v168;
        if (v168 == v55)
          goto LABEL_42;
      }
      v53 = v168;
      v27 = v169;
LABEL_42:
      v29 = v53 + 1;
      v28 = v162;
      v52 = v163 + 8;
      if (v29 != v161)
        continue;
      break;
    }
    v24 = v51;
    v29 = v161;
    v25 = v155;
LABEL_69:
    if (v29 < v28)
      goto LABEL_158;
    v91 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) != 0)
      v25 = v91;
    else
      v25 = sub_100153CB0(0, *((_QWORD *)v91 + 2) + 1, 1, v91);
    v93 = *((_QWORD *)v25 + 2);
    v92 = *((_QWORD *)v25 + 3);
    v94 = v93 + 1;
    v27 = v169;
    if (v93 >= v92 >> 1)
    {
      v144 = sub_100153CB0((char *)(v92 > 1), v93 + 1, 1, v25);
      v27 = v169;
      v25 = v144;
    }
    *((_QWORD *)v25 + 2) = v94;
    v95 = v25 + 32;
    v96 = &v25[16 * v93 + 32];
    *(_QWORD *)v96 = v28;
    *((_QWORD *)v96 + 1) = v29;
    v168 = v29;
    if (v93)
    {
      while (2)
      {
        v97 = v94 - 1;
        if (v94 >= 4)
        {
          v102 = &v95[16 * v94];
          v103 = *((_QWORD *)v102 - 8);
          v104 = *((_QWORD *)v102 - 7);
          v108 = __OFSUB__(v104, v103);
          v105 = v104 - v103;
          if (v108)
            goto LABEL_143;
          v107 = *((_QWORD *)v102 - 6);
          v106 = *((_QWORD *)v102 - 5);
          v108 = __OFSUB__(v106, v107);
          v100 = v106 - v107;
          v101 = v108;
          if (v108)
            goto LABEL_144;
          v109 = v94 - 2;
          v110 = &v95[16 * v94 - 32];
          v112 = *(_QWORD *)v110;
          v111 = *((_QWORD *)v110 + 1);
          v108 = __OFSUB__(v111, v112);
          v113 = v111 - v112;
          if (v108)
            goto LABEL_146;
          v108 = __OFADD__(v100, v113);
          v114 = v100 + v113;
          if (v108)
            goto LABEL_149;
          if (v114 >= v105)
          {
            v132 = &v95[16 * v97];
            v134 = *(_QWORD *)v132;
            v133 = *((_QWORD *)v132 + 1);
            v108 = __OFSUB__(v133, v134);
            v135 = v133 - v134;
            if (v108)
              goto LABEL_153;
            v125 = v100 < v135;
          }
          else
          {
LABEL_88:
            if ((v101 & 1) != 0)
              goto LABEL_145;
            v109 = v94 - 2;
            v115 = &v95[16 * v94 - 32];
            v117 = *(_QWORD *)v115;
            v116 = *((_QWORD *)v115 + 1);
            v118 = __OFSUB__(v116, v117);
            v119 = v116 - v117;
            v120 = v118;
            if (v118)
              goto LABEL_148;
            v121 = &v95[16 * v97];
            v123 = *(_QWORD *)v121;
            v122 = *((_QWORD *)v121 + 1);
            v108 = __OFSUB__(v122, v123);
            v124 = v122 - v123;
            if (v108)
              goto LABEL_151;
            if (__OFADD__(v119, v124))
              goto LABEL_152;
            if (v119 + v124 < v100)
              goto LABEL_100;
            v125 = v100 < v124;
          }
          if (v125)
            v97 = v109;
        }
        else
        {
          if (v94 == 3)
          {
            v99 = *((_QWORD *)v25 + 4);
            v98 = *((_QWORD *)v25 + 5);
            v108 = __OFSUB__(v98, v99);
            v100 = v98 - v99;
            v101 = v108;
            goto LABEL_88;
          }
          v126 = *((_QWORD *)v25 + 4);
          v127 = *((_QWORD *)v25 + 5);
          v108 = __OFSUB__(v127, v126);
          v119 = v127 - v126;
          v120 = v108;
LABEL_100:
          if ((v120 & 1) != 0)
            goto LABEL_147;
          v128 = &v95[16 * v97];
          v130 = *(_QWORD *)v128;
          v129 = *((_QWORD *)v128 + 1);
          v108 = __OFSUB__(v129, v130);
          v131 = v129 - v130;
          if (v108)
            goto LABEL_150;
          if (v131 < v119)
            goto LABEL_117;
        }
        v136 = v97 - 1;
        if (v97 - 1 >= v94)
        {
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
          goto LABEL_162;
        }
        if (!v27)
          goto LABEL_165;
        v137 = v25;
        v138 = &v95[16 * v136];
        v139 = *(_QWORD *)v138;
        v140 = &v95[16 * v97];
        v141 = *((_QWORD *)v140 + 1);
        v142 = v165;
        sub_100153144((void **)(v27 + 8 * *(_QWORD *)v138), (void **)(v27 + 8 * *(_QWORD *)v140), v27 + 8 * v141, v164);
        v165 = v142;
        if (v142)
        {
          v145 = swift_bridgeObjectRelease(v137);
          goto LABEL_136;
        }
        if (v141 < v139)
          goto LABEL_140;
        if (v97 > *((_QWORD *)v137 + 2))
          goto LABEL_141;
        *(_QWORD *)v138 = v139;
        *(_QWORD *)&v95[16 * v136 + 8] = v141;
        v143 = *((_QWORD *)v137 + 2);
        if (v97 >= v143)
          goto LABEL_142;
        v94 = v143 - 1;
        memmove(&v95[16 * v97], v140 + 16, 16 * (v143 - 1 - v97));
        v25 = v137;
        *((_QWORD *)v137 + 2) = v143 - 1;
        v27 = v169;
        v24 = v170;
        if (v143 <= 2)
          goto LABEL_117;
        continue;
      }
    }
    v94 = 1;
LABEL_117:
    v17 = v160;
    v26 = v168;
  }
  while (v168 < v160);
LABEL_123:
  v146 = v165;
  if (v94 >= 2)
  {
    v147 = *v156;
    do
    {
      v148 = v94 - 2;
      if (v94 < 2)
        goto LABEL_154;
      if (!v147)
        goto LABEL_167;
      v149 = v25;
      v150 = *(_QWORD *)&v25[16 * v148 + 32];
      v151 = *(_QWORD *)&v25[16 * v94 + 24];
      sub_100153144((void **)(v147 + 8 * v150), (void **)(v147 + 8 * *(_QWORD *)&v25[16 * v94 + 16]), v147 + 8 * v151, v164);
      if (v146)
      {
        v145 = swift_bridgeObjectRelease(v149);
        goto LABEL_136;
      }
      if (v151 < v150)
        goto LABEL_155;
      if ((swift_isUniquelyReferenced_nonNull_native(v149) & 1) == 0)
        v149 = sub_100153F5C((uint64_t)v149);
      if (v148 >= *((_QWORD *)v149 + 2))
        goto LABEL_156;
      v152 = &v149[16 * v148 + 32];
      *(_QWORD *)v152 = v150;
      *((_QWORD *)v152 + 1) = v151;
      v153 = *((_QWORD *)v149 + 2);
      if (v94 > v153)
        goto LABEL_157;
      memmove(&v149[16 * v94 + 16], &v149[16 * v94 + 32], 16 * (v153 - v94));
      v25 = v149;
      *((_QWORD *)v149 + 2) = v153 - 1;
      v94 = v153 - 1;
    }
    while (v153 > 2);
  }
  v145 = swift_bridgeObjectRelease(v25);
LABEL_136:
  *(_QWORD *)((v179 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v145);
  swift_bridgeObjectRelease(v179);
}

void sub_1001516CC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  unint64_t v44;
  Swift::Int v45;
  Swift::Int v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  char *v53;
  _QWORD *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  char *v60;
  _QWORD *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  id *v67;
  Swift::Int v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  char *v74;
  _QWORD *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  id v78;
  void *v79;
  _QWORD *v80;
  void (*v81)(void);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  char *v87;
  int v88;
  void (*v89)(char *, uint64_t);
  uint64_t *v90;
  Swift::Int v91;
  Swift::Int v92;
  uint64_t *v93;
  uint64_t v94;
  Swift::Int v95;
  void (*v96)(char *, uint64_t);
  void *v97;
  void *v98;
  void (*v99)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v100;
  id v101;
  void *v102;
  char *v103;
  _QWORD *v104;
  void (*v105)(char *, char *, uint64_t);
  uint64_t v106;
  void (*v107)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v108;
  id v109;
  void *v110;
  char *v111;
  _QWORD *v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  char *v115;
  uint64_t v116;
  Swift::Int v117;
  char *v118;
  char v119;
  void (*v120)(char *, uint64_t);
  void *v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  Swift::Int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  char v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  unint64_t v188;
  char *v189;
  size_t v190;
  char *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  Swift::Int v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  Swift::Int v201;
  char *v202;
  char *v203;
  Swift::Int v204;
  Swift::Int v205;
  void (*v206)(char *, uint64_t);
  char *v207;
  char *v208;
  void **v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  Swift::Int v216;
  uint64_t v217;
  char *v218;
  void (*v219)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v220;
  _QWORD *v221;
  uint64_t v222;

  v2 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v2);
  v215 = (char *)&v193 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v193 - v5;
  __chkstk_darwin(v7);
  v202 = (char *)&v193 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v193 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v193 - v13;
  __chkstk_darwin(v15);
  v199 = (char *)&v193 - v16;
  v17 = type metadata accessor for Date(0);
  v221 = *(_QWORD **)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v193 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v220 = (char *)&v193 - v21;
  __chkstk_darwin(v22);
  v203 = (char *)&v193 - v23;
  __chkstk_darwin(v24);
  v208 = (char *)&v193 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v193 - v27;
  __chkstk_darwin(v29);
  v218 = (char *)&v193 - v30;
  __chkstk_darwin(v31);
  v200 = (char *)&v193 - v32;
  v33 = a1[1];
  v34 = _minimumMergeRunLength(_:)(v33);
  if (v34 >= v33)
  {
    if (v33 < 0)
      goto LABEL_170;
    if (v33)
      sub_100152900(0, v33, 1, a1);
    return;
  }
  if (v33 >= 0)
    v35 = v33;
  else
    v35 = v33 + 1;
  if (v33 < -1)
    goto LABEL_178;
  v197 = v28;
  v205 = v33;
  v196 = v34;
  v193 = a1;
  if (v33 < 2)
  {
    v40 = (char *)_swiftEmptyArrayStorage;
    v222 = (uint64_t)_swiftEmptyArrayStorage;
    v209 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v33 != 1)
    {
      v44 = _swiftEmptyArrayStorage[2];
LABEL_134:
      v179 = v210;
      if (v44 >= 2)
      {
        v180 = *v193;
        do
        {
          v181 = v44 - 2;
          if (v44 < 2)
            goto LABEL_165;
          if (!v180)
            goto LABEL_177;
          v182 = v44 - 1;
          v211 = v40;
          v183 = *(_QWORD *)&v40[16 * v181 + 32];
          v184 = *(_QWORD *)&v40[16 * v44 + 24];
          sub_100153478((void **)(v180 + 8 * v183), (void **)(v180 + 8 * *(_QWORD *)&v40[16 * v44 + 16]), (void **)(v180 + 8 * v184), v209);
          if (v179)
            goto LABEL_131;
          if (v184 < v183)
            goto LABEL_166;
          if ((swift_isUniquelyReferenced_nonNull_native(v211) & 1) != 0)
            v185 = v211;
          else
            v185 = sub_100153F5C((uint64_t)v211);
          if (v181 >= *((_QWORD *)v185 + 2))
            goto LABEL_167;
          v186 = v185 + 32;
          v187 = &v185[16 * v181 + 32];
          *(_QWORD *)v187 = v183;
          *((_QWORD *)v187 + 1) = v184;
          v188 = *((_QWORD *)v185 + 2);
          if (v44 > v188)
            goto LABEL_168;
          v189 = &v186[16 * v44];
          v190 = 16 * (v188 - v44);
          v191 = v185;
          memmove(&v186[16 * v182], v189, v190);
          v40 = v191;
          *((_QWORD *)v191 + 2) = v188 - 1;
          v44 = v188 - 1;
        }
        while (v188 > 2);
      }
      v178 = (uint64_t)v40;
LABEL_148:
      v192 = swift_bridgeObjectRelease(v178);
      *(_QWORD *)((v222 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v192);
      swift_bridgeObjectRelease(v222);
      return;
    }
  }
  else
  {
    v36 = a1;
    v37 = v35 >> 1;
    v38 = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
    v39 = static Array._allocateBufferUninitialized(minimumCapacity:)(v37, v38);
    *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) = v37;
    a1 = v36;
    v209 = (void **)((v39 & 0xFFFFFFFFFFFFFF8) + 32);
    v222 = v39;
  }
  v41 = 0;
  v42 = *a1;
  v195 = *a1 + 16;
  v194 = v42 - 8;
  v40 = (char *)_swiftEmptyArrayStorage;
  v214 = v6;
  v198 = v11;
  v207 = v14;
  v212 = v19;
  v213 = v17;
  v43 = v205;
  v217 = v42;
  while (2)
  {
    v45 = v41;
    v46 = v41 + 1;
    v204 = v41;
    if (v41 + 1 >= v43)
      goto LABEL_53;
    v211 = v40;
    v47 = *(void **)(v42 + 8 * v46);
    v48 = *(void **)(v42 + 8 * v41);
    v49 = v47;
    v50 = v48;
    v51 = objc_msgSend(v49, "creationDate");
    if (v51)
    {
      v52 = v51;
      v53 = v218;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

      v54 = v221;
      v55 = (void (*)(char *, char *, uint64_t))v221[4];
      v56 = (uint64_t)v199;
      v55(v199, v53, v17);
      v219 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v54[7];
      v219(v56, 0, 1, v17);
      v57 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v54[6])(v56, 1, v17);
      if ((_DWORD)v57 != 1)
      {
        v55(v200, (char *)v56, v17);
        goto LABEL_21;
      }
    }
    else
    {
      v56 = (uint64_t)v199;
      v219 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v221[7];
      v57 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v199, 1, 1, v17);
    }
    static Date.now.getter(v57);
    sub_1000A1000(v56, (uint64_t *)&unk_1002103D0);
LABEL_21:
    v58 = objc_msgSend(v50, "creationDate", v193);
    if (!v58)
    {
      v63 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v14, 1, 1, v17);
      goto LABEL_25;
    }
    v59 = v58;
    v60 = v218;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

    v61 = v221;
    v62 = (void (*)(char *, char *, uint64_t))v221[4];
    v62(v14, v60, v17);
    v219((uint64_t)v14, 0, 1, v17);
    v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61[6])(v14, 1, v17);
    if ((_DWORD)v63 == 1)
    {
LABEL_25:
      v64 = v197;
      static Date.now.getter(v63);
      sub_1000A1000((uint64_t)v14, (uint64_t *)&unk_1002103D0);
      goto LABEL_26;
    }
    v64 = v197;
    v62(v197, v14, v17);
LABEL_26:
    v65 = v200;
    LODWORD(v216) = static Date.> infix(_:_:)(v200, v64);
    v66 = (void (*)(char *, uint64_t))v221[1];
    v66(v64, v17);
    v206 = v66;
    v66(v65, v17);

    v45 = v204;
    v43 = v205;
    v46 = v204 + 2;
    if (v204 + 2 >= v205)
      goto LABEL_43;
    v67 = (id *)(v195 + 8 * v204);
    while (1)
    {
      v68 = v46;
      v69 = *(v67 - 1);
      v70 = *v67;
      v71 = v69;
      v72 = objc_msgSend(v70, "creationDate");
      if (v72)
      {
        v73 = v72;
        v74 = v218;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v72);

        v75 = v221;
        v76 = (void (*)(char *, char *, uint64_t))v221[4];
        v76(v11, v74, v17);
        v219((uint64_t)v11, 0, 1, v17);
        v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v75[6])(v11, 1, v17);
        if ((_DWORD)v77 != 1)
        {
          v76(v208, v11, v17);
          goto LABEL_33;
        }
      }
      else
      {
        v77 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v11, 1, 1, v17);
      }
      static Date.now.getter(v77);
      sub_1000A1000((uint64_t)v11, (uint64_t *)&unk_1002103D0);
LABEL_33:
      v78 = objc_msgSend(v71, "creationDate");
      if (v78)
      {
        v79 = v78;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        v80 = v221;
        v81 = (void (*)(void))v221[4];
        v82 = (uint64_t)v202;
        v81();
        v219(v82, 0, 1, v17);
        v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v80[6])(v82, 1, v17);
        if ((_DWORD)v83 != 1)
        {
          v84 = v203;
          ((void (*)(char *, uint64_t, uint64_t))v81)(v203, v82, v17);
          goto LABEL_38;
        }
      }
      else
      {
        v82 = (uint64_t)v202;
        v83 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v219)(v202, 1, 1, v17);
      }
      v84 = v203;
      static Date.now.getter(v83);
      sub_1000A1000(v82, (uint64_t *)&unk_1002103D0);
LABEL_38:
      v85 = v208;
      v86 = static Date.> infix(_:_:)(v208, v84);
      v87 = v84;
      v88 = v86;
      v89 = v206;
      v206(v87, v17);
      v89(v85, v17);

      if (((v216 ^ v88) & 1) != 0)
        break;
      v46 = v68 + 1;
      ++v67;
      if (v205 == v68 + 1)
      {
        v43 = v205;
        v46 = v205;
        v14 = v207;
        goto LABEL_42;
      }
    }
    v14 = v207;
    v43 = v205;
    v46 = v68;
LABEL_42:
    v45 = v204;
LABEL_43:
    v40 = v211;
    v42 = v217;
    if ((v216 & 1) != 0)
    {
      v19 = v212;
      if (v46 < v45)
        goto LABEL_171;
      if (v45 < v46)
      {
        v90 = (uint64_t *)(v194 + 8 * v46);
        v91 = v46;
        v92 = v45;
        v93 = (uint64_t *)(v217 + 8 * v45);
        do
        {
          if (v92 != --v91)
          {
            if (!v42)
              goto LABEL_176;
            v94 = *v93;
            *v93 = *v90;
            *v90 = v94;
          }
          ++v92;
          --v90;
          ++v93;
        }
        while (v92 < v91);
      }
    }
    else
    {
      v19 = v212;
    }
LABEL_53:
    if (v46 >= v43)
      goto LABEL_82;
    if (__OFSUB__(v46, v45))
      goto LABEL_169;
    if (v46 - v45 >= v196)
      goto LABEL_82;
    if (__OFADD__(v45, v196))
      goto LABEL_172;
    if (v45 + v196 >= v43)
      v95 = v43;
    else
      v95 = v45 + v196;
    if (v95 >= v45)
    {
      if (v46 == v95)
        goto LABEL_82;
      v211 = v40;
      v96 = (void (*)(char *, uint64_t))(v194 + 8 * v46);
      v201 = v95;
      while (2)
      {
        v97 = *(void **)(v42 + 8 * v46);
        v206 = v96;
        v216 = v46;
        while (2)
        {
          v98 = *(void **)v96;
          v99 = v97;
          v100 = v98;
          v219 = v99;
          v101 = objc_msgSend(v99, "creationDate");
          if (v101)
          {
            v102 = v101;
            v103 = v218;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v101);

            v104 = v221;
            v105 = (void (*)(char *, char *, uint64_t))v221[4];
            v106 = (uint64_t)v214;
            v105(v214, v103, v17);
            v107 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v104[7];
            v107(v106, 0, 1, v17);
            v108 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v104[6])(v106, 1, v17);
            if ((_DWORD)v108 == 1)
            {
              v19 = v212;
              goto LABEL_70;
            }
            v105(v220, (char *)v106, v17);
            v19 = v212;
          }
          else
          {
            v107 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v221[7];
            v106 = (uint64_t)v214;
            v108 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v107)(v214, 1, 1, v17);
LABEL_70:
            static Date.now.getter(v108);
            sub_1000A1000(v106, (uint64_t *)&unk_1002103D0);
          }
          v109 = objc_msgSend(v100, "creationDate", v193);
          if (v109)
          {
            v110 = v109;
            v111 = v218;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v109);

            v112 = v221;
            v113 = (void (*)(char *, char *, uint64_t))v221[4];
            v114 = (uint64_t)v215;
            v115 = v111;
            v17 = v213;
            v113(v215, v115, v213);
            v107(v114, 0, 1, v17);
            v116 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v112[6])(v114, 1, v17);
            if ((_DWORD)v116 != 1)
            {
              v113(v19, (char *)v114, v17);
              goto LABEL_77;
            }
          }
          else
          {
            v114 = (uint64_t)v215;
            v17 = v213;
            v116 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v107)(v215, 1, 1, v213);
          }
          static Date.now.getter(v116);
          sub_1000A1000(v114, (uint64_t *)&unk_1002103D0);
LABEL_77:
          v117 = v216;
          v118 = v220;
          v119 = static Date.> infix(_:_:)(v220, v19);
          v120 = (void (*)(char *, uint64_t))v221[1];
          v120(v19, v17);
          v120(v118, v17);

          if ((v119 & 1) != 0)
          {
            v42 = v217;
            if (!v217)
              goto LABEL_174;
            v121 = *(_QWORD *)v96;
            v97 = (void *)*((_QWORD *)v96 + 1);
            *(_QWORD *)v96 = v97;
            *((_QWORD *)v96 + 1) = v121;
            v96 = (void (*)(char *, uint64_t))((char *)v96 - 8);
            if (v117 == ++v45)
              goto LABEL_64;
            continue;
          }
          break;
        }
        v42 = v217;
LABEL_64:
        v46 = v117 + 1;
        v96 = (void (*)(char *, uint64_t))((char *)v206 + 8);
        v45 = v204;
        if (v46 != v201)
          continue;
        break;
      }
      v46 = v201;
      v40 = v211;
      v14 = v207;
LABEL_82:
      if (v46 < v45)
        goto LABEL_164;
      v216 = v46;
      v122 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) != 0)
        v40 = v122;
      else
        v40 = sub_100153CB0(0, *((_QWORD *)v122 + 2) + 1, 1, v122);
      v124 = *((_QWORD *)v40 + 2);
      v123 = *((_QWORD *)v40 + 3);
      v44 = v124 + 1;
      v42 = v217;
      if (v124 >= v123 >> 1)
      {
        v177 = sub_100153CB0((char *)(v123 > 1), v124 + 1, 1, v40);
        v42 = v217;
        v40 = v177;
      }
      *((_QWORD *)v40 + 2) = v44;
      v125 = v40 + 32;
      v126 = &v40[16 * v124 + 32];
      v127 = v216;
      *(_QWORD *)v126 = v45;
      *((_QWORD *)v126 + 1) = v127;
      if (!v124)
      {
        v44 = 1;
LABEL_14:
        v43 = v205;
        v41 = v216;
        v11 = v198;
        if (v216 >= v205)
          goto LABEL_134;
        continue;
      }
      v211 = v40;
LABEL_89:
      v128 = v44 - 1;
      if (v44 >= 4)
      {
        v133 = &v125[16 * v44];
        v134 = *((_QWORD *)v133 - 8);
        v135 = *((_QWORD *)v133 - 7);
        v139 = __OFSUB__(v135, v134);
        v136 = v135 - v134;
        if (v139)
          goto LABEL_153;
        v138 = *((_QWORD *)v133 - 6);
        v137 = *((_QWORD *)v133 - 5);
        v139 = __OFSUB__(v137, v138);
        v131 = v137 - v138;
        v132 = v139;
        if (v139)
          goto LABEL_154;
        v140 = v44 - 2;
        v141 = &v125[16 * v44 - 32];
        v143 = *(_QWORD *)v141;
        v142 = *((_QWORD *)v141 + 1);
        v139 = __OFSUB__(v142, v143);
        v144 = v142 - v143;
        if (v139)
          goto LABEL_156;
        v139 = __OFADD__(v131, v144);
        v145 = v131 + v144;
        if (v139)
          goto LABEL_159;
        if (v145 >= v136)
        {
          v163 = &v125[16 * v128];
          v165 = *(_QWORD *)v163;
          v164 = *((_QWORD *)v163 + 1);
          v139 = __OFSUB__(v164, v165);
          v166 = v164 - v165;
          if (v139)
            goto LABEL_163;
          v156 = v131 < v166;
        }
        else
        {
LABEL_102:
          if ((v132 & 1) != 0)
            goto LABEL_155;
          v140 = v44 - 2;
          v146 = &v125[16 * v44 - 32];
          v148 = *(_QWORD *)v146;
          v147 = *((_QWORD *)v146 + 1);
          v149 = __OFSUB__(v147, v148);
          v150 = v147 - v148;
          v151 = v149;
          if (v149)
            goto LABEL_158;
          v152 = &v125[16 * v128];
          v154 = *(_QWORD *)v152;
          v153 = *((_QWORD *)v152 + 1);
          v139 = __OFSUB__(v153, v154);
          v155 = v153 - v154;
          if (v139)
            goto LABEL_161;
          if (__OFADD__(v150, v155))
            goto LABEL_162;
          if (v150 + v155 < v131)
            goto LABEL_114;
          v156 = v131 < v155;
        }
        if (v156)
          v128 = v140;
      }
      else
      {
        if (v44 == 3)
        {
          v130 = *((_QWORD *)v40 + 4);
          v129 = *((_QWORD *)v40 + 5);
          v139 = __OFSUB__(v129, v130);
          v131 = v129 - v130;
          v132 = v139;
          goto LABEL_102;
        }
        v157 = *((_QWORD *)v40 + 4);
        v158 = *((_QWORD *)v40 + 5);
        v139 = __OFSUB__(v158, v157);
        v150 = v158 - v157;
        v151 = v139;
LABEL_114:
        if ((v151 & 1) != 0)
          goto LABEL_157;
        v159 = &v125[16 * v128];
        v161 = *(_QWORD *)v159;
        v160 = *((_QWORD *)v159 + 1);
        v139 = __OFSUB__(v160, v161);
        v162 = v160 - v161;
        if (v139)
          goto LABEL_160;
        if (v162 < v150)
          goto LABEL_14;
      }
      v167 = v128 - 1;
      if (v128 - 1 >= v44)
      {
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
        break;
      }
      if (!v42)
        goto LABEL_175;
      v168 = &v125[16 * v167];
      v169 = *(_QWORD *)v168;
      v170 = v125;
      v171 = v128;
      v172 = &v125[16 * v128];
      v173 = *((_QWORD *)v172 + 1);
      v174 = v210;
      sub_100153478((void **)(v42 + 8 * *(_QWORD *)v168), (void **)(v42 + 8 * *(_QWORD *)v172), (void **)(v42 + 8 * v173), v209);
      v210 = v174;
      if (v174)
      {
LABEL_131:
        v178 = (uint64_t)v211;
        goto LABEL_148;
      }
      if (v173 < v169)
        goto LABEL_150;
      v175 = (uint64_t)v211;
      if (v171 > *((_QWORD *)v211 + 2))
        goto LABEL_151;
      *(_QWORD *)v168 = v169;
      *(_QWORD *)&v170[16 * v167 + 8] = v173;
      v176 = *(_QWORD *)(v175 + 16);
      if (v171 >= v176)
        goto LABEL_152;
      v44 = v176 - 1;
      memmove(v172, v172 + 16, 16 * (v176 - 1 - v171));
      v125 = v170;
      v40 = v211;
      v19 = v212;
      *((_QWORD *)v211 + 2) = v176 - 1;
      v14 = v207;
      v42 = v217;
      if (v176 <= 2)
        goto LABEL_14;
      goto LABEL_89;
    }
    break;
  }
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_1001525D8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25 = a1;
  v29 = type metadata accessor for SoundProfileRecord(0);
  __chkstk_darwin(v29);
  v30 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v26 = (uint64_t)&v23 - v9;
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - v12;
  v28 = a3;
  v24 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v11 + 72);
    v32 = v14 * (v28 - 1);
    v27 = v14;
    v31 = v14 * v28;
LABEL_5:
    v15 = 0;
    v16 = v25;
    while (1)
    {
      v17 = *a4;
      sub_1000AE548(v31 + v15 + *a4, (uint64_t)v13, type metadata accessor for SoundProfileRecord);
      v18 = v26;
      sub_1000AE548(v32 + v15 + v17, v26, type metadata accessor for SoundProfileRecord);
      LOBYTE(v17) = static Date.> infix(_:_:)(&v13[*(int *)(v29 + 28)], v18 + *(int *)(v29 + 28));
      sub_1000AE58C(v18, type metadata accessor for SoundProfileRecord);
      sub_1000AE58C((uint64_t)v13, type metadata accessor for SoundProfileRecord);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v24)
          return;
        goto LABEL_5;
      }
      v19 = *a4;
      if (!*a4)
        break;
      v20 = a4;
      v21 = v19 + v31 + v15;
      v22 = v19 + v32 + v15;
      sub_1000C6CD0(v21, v30, type metadata accessor for SoundProfileRecord);
      swift_arrayInitWithTakeFrontToBack(v21, v22, 1, v29);
      sub_1000C6CD0(v30, v22, type metadata accessor for SoundProfileRecord);
      v15 -= v27;
      ++v16;
      a4 = v20;
      if (v28 == v16)
        goto LABEL_4;
    }
    __break(1u);
  }
}

void sub_100152814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  void *v15;
  void *v18;
  void *v19;

  if (a3 != a2)
  {
    v5 = a3;
    v6 = a1;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
LABEL_4:
    v9 = *(void **)(v7 + 8 * v5);
    v10 = v8;
    while (1)
    {
      v19 = v9;
      v18 = *(void **)v10;
      v11 = v18;
      v12 = v9;
      v13 = v11;
      v14 = sub_100149530(&v19, &v18);

      if (v4)
        break;
      if ((v14 & 1) != 0)
      {
        if (!v7)
        {
          __break(1u);
          return;
        }
        v15 = *(void **)v10;
        v9 = *(void **)(v10 + 8);
        *(_QWORD *)v10 = v9;
        *(_QWORD *)(v10 + 8) = v15;
        v10 -= 8;
        if (v5 != ++v6)
          continue;
      }
      ++v5;
      v8 += 8;
      v6 = a1;
      if (v5 != a2)
        goto LABEL_4;
      return;
    }
  }
}

void sub_100152900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  char *v27;
  _QWORD *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  char *v35;
  _QWORD *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  id v56;
  char *v57;
  _QWORD *v58;

  v48 = a1;
  v7 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v7);
  v52 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for Date(0);
  v58 = *(_QWORD **)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v55 = (char *)&v46 - v16;
  __chkstk_darwin(v17);
  v57 = (char *)&v46 - v18;
  v47 = a2;
  if (a3 != a2)
  {
    v53 = *a4;
    v19 = v53 + 8 * a3 - 8;
    v50 = v11;
    v51 = v14;
LABEL_5:
    v20 = *(void **)(v53 + 8 * a3);
    v21 = v48;
    v49 = v19;
    v54 = a3;
    while (1)
    {
      v22 = *(void **)v19;
      v23 = v20;
      v24 = v22;
      v56 = v23;
      v25 = objc_msgSend(v23, "creationDate");
      if (v25)
      {
        v26 = v25;
        v27 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

        v28 = v58;
        v29 = (void (*)(char *, char *, uint64_t))v58[4];
        v29(v11, v27, v12);
        v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28[7];
        v30(v11, 0, 1, v12);
        v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28[6])(v11, 1, v12);
        if ((_DWORD)v31 != 1)
        {
          v29(v57, v11, v12);
          goto LABEL_11;
        }
      }
      else
      {
        v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v58[7];
        v31 = v30(v11, 1, 1, v12);
      }
      static Date.now.getter(v31);
      sub_1000A1000((uint64_t)v11, (uint64_t *)&unk_1002103D0);
LABEL_11:
      v32 = v24;
      v33 = objc_msgSend(v24, "creationDate");
      if (v33)
      {
        v34 = v33;
        v35 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

        v36 = v58;
        v37 = (void (*)(char *, char *, uint64_t))v58[4];
        v38 = (uint64_t)v52;
        v37(v52, v35, v12);
        v30((char *)v38, 0, 1, v12);
        v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36[6])(v38, 1, v12);
        if ((_DWORD)v39 != 1)
        {
          v40 = v51;
          v37(v51, (char *)v38, v12);
          goto LABEL_16;
        }
      }
      else
      {
        v38 = (uint64_t)v52;
        v39 = v30(v52, 1, 1, v12);
      }
      v40 = v51;
      static Date.now.getter(v39);
      sub_1000A1000(v38, (uint64_t *)&unk_1002103D0);
LABEL_16:
      v41 = v57;
      v42 = static Date.> infix(_:_:)(v57, v40);
      v43 = (void (*)(char *, uint64_t))v58[1];
      v43(v40, v12);
      v43(v41, v12);

      v44 = v54;
      v11 = v50;
      if ((v42 & 1) == 0)
        goto LABEL_4;
      if (!v53)
      {
        __break(1u);
        return;
      }
      v45 = *(void **)v19;
      v20 = *(void **)(v19 + 8);
      *(_QWORD *)v19 = v20;
      *(_QWORD *)(v19 + 8) = v45;
      v19 -= 8;
      if (v44 == ++v21)
      {
LABEL_4:
        a3 = v44 + 1;
        v19 = v49 + 8;
        if (a3 == v47)
          return;
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_100152C94(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for SoundProfileRecord(0);
  __chkstk_darwin(v45);
  v44 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_1000AE548(v25 + v27, (uint64_t)v11, type metadata accessor for SoundProfileRecord);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v44;
          sub_1000AE548(a2 + v27, v44, type metadata accessor for SoundProfileRecord);
          v33 = static Date.> infix(_:_:)(v31 + *(int *)(v45 + 28), v32 + *(int *)(v45 + 28));
          v34 = v32;
          v11 = (char *)v31;
          sub_1000AE58C(v34, type metadata accessor for SoundProfileRecord);
          sub_1000AE58C(v31, type metadata accessor for SoundProfileRecord);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1, v45);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1, v45);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, v39);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v44;
      do
      {
        sub_1000AE548(a2, (uint64_t)v11, type metadata accessor for SoundProfileRecord);
        sub_1000AE548(a4, v20, type metadata accessor for SoundProfileRecord);
        v21 = static Date.> infix(_:_:)(&v11[*(int *)(v45 + 28)], v20 + *(int *)(v45 + 28));
        sub_1000AE58C(v20, type metadata accessor for SoundProfileRecord);
        sub_1000AE58C((uint64_t)v11, type metadata accessor for SoundProfileRecord);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v45);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v45);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_100153DA8(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100153144(void **__src, void **a2, unint64_t a3, void **__dst)
{
  void **v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  id v17;
  char v18;
  char v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  char v29;
  char v30;
  void **v31;
  void **v32;
  uint64_t result;
  void **v34;
  void **v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void **v39;
  void **v40;
  void **v41;

  v35 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v41 = __src;
  v40 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst)
      {
        memmove(__dst, a2, 8 * v12);
        __dst = v35;
      }
      v21 = &__dst[v12];
      v39 = v21;
      v41 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        v22 = (void **)(a3 - 8);
        v23 = v5;
        v34 = v6;
        while (1)
        {
          v24 = v21;
          v25 = *--v21;
          v38 = v25;
          v26 = *--v23;
          v37 = v26;
          v27 = v38;
          v28 = v26;
          v29 = sub_100149530(&v38, &v37);
          if (v36)
            break;
          v30 = v29;
          v36 = 0;
          v31 = v22 + 1;

          if ((v30 & 1) != 0)
          {
            v32 = v35;
            if (v31 != v5 || v22 >= v5)
              *v22 = *v23;
            v41 = v23;
            v21 = v24;
          }
          else
          {
            v39 = v21;
            v32 = v35;
            if (v31 < v24 || v22 >= v24 || v31 != v24)
              *v22 = *v21;
            v23 = v5;
          }
          if (v23 > v34)
          {
            --v22;
            v5 = v23;
            if (v21 > v32)
              continue;
          }
          goto LABEL_48;
        }

      }
      goto LABEL_48;
    }
  }
  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
    {
      memmove(__dst, __src, 8 * v9);
      __dst = v35;
    }
    v13 = &__dst[v9];
    v39 = v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      while (1)
      {
        v38 = *v5;
        v14 = __dst;
        v37 = *__dst;
        v15 = v37;
        v16 = v38;
        v17 = v15;
        v18 = sub_100149530(&v38, &v37);
        if (v36)
          break;
        v19 = v18;

        if ((v19 & 1) != 0)
        {
          v20 = v5 + 1;
          if (v6 < v5 || v6 >= v20 || v6 != v5)
            *v6 = *v5;
          __dst = v14;
        }
        else
        {
          if (v6 != v14)
            *v6 = *v14;
          __dst = v14 + 1;
          v40 = v14 + 1;
          v20 = v5;
        }
        v36 = 0;
        v41 = ++v6;
        if (__dst < v13)
        {
          v5 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        goto LABEL_48;
      }

    }
LABEL_48:
    sub_100153EB4((void **)&v41, (const void **)&v40, &v39);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100153478(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  char *v42;
  _QWORD *v43;
  void (*v44)(uint64_t, char *, uint64_t);
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  id v47;
  void *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char v57;
  void (*v58)(char *, uint64_t);
  unint64_t v59;
  void **v60;
  uint64_t v61;
  void **v62;
  void **v63;
  char **v64;
  void **v65;
  void *v66;
  void *v67;
  char *v68;
  const char *v69;
  id v70;
  void *v71;
  char *v72;
  _QWORD *v73;
  void (*v74)(void **, char *, uint64_t);
  uint64_t (*v75)(void **, uint64_t, uint64_t, uint64_t);
  uint64_t (*v76)(void **, uint64_t, uint64_t);
  uint64_t v77;
  id v78;
  void *v79;
  char *v80;
  _QWORD *v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void **v86;
  void **v87;
  char v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  void **v91;
  uint64_t result;
  uint64_t v93;
  char *v94;
  char *v95;
  void **v96;
  char *v97;
  char *v98;
  void **v99;
  char *v100;
  void **v101;
  char *v102;
  void **v103;
  _QWORD *v104;
  void **v105;
  void **v106;
  void **v107;
  void **v108;

  v8 = sub_1000A0980((uint64_t *)&unk_1002103D0);
  __chkstk_darwin(v8);
  v95 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (void **)((char *)&v93 - v11);
  __chkstk_darwin(v13);
  v15 = (char *)&v93 - v14;
  __chkstk_darwin(v16);
  v98 = (char *)&v93 - v17;
  v18 = type metadata accessor for Date(0);
  v104 = *(_QWORD **)(v18 - 8);
  __chkstk_darwin(v18);
  v94 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v99 = (void **)((char *)&v93 - v21);
  __chkstk_darwin(v22);
  v97 = (char *)&v93 - v23;
  __chkstk_darwin(v24);
  v100 = (char *)&v93 - v25;
  __chkstk_darwin(v26);
  v27 = a4;
  v101 = a3;
  v102 = (char *)&v93 - v28;
  v29 = (char *)a2 - (char *)a1;
  v30 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v30 = (char *)a2 - (char *)a1;
  v31 = v30 >> 3;
  v32 = (char *)a3 - (char *)a2;
  v33 = v32 / 8;
  v105 = a1;
  v108 = a1;
  v107 = v27;
  v103 = v27;
  if (v30 >> 3 >= v32 / 8)
  {
    if (v32 < -7)
      goto LABEL_66;
    v61 = (uint64_t)v95;
    if (v27 != a2 || &a2[v33] <= v27)
    {
      memmove(v27, a2, 8 * v33);
      v27 = v103;
    }
    v62 = &v27[v33];
    v106 = v62;
    v108 = a2;
    if (v32 < 8 || v105 >= a2)
    {
LABEL_65:
      sub_100153EB4((void **)&v108, (const void **)&v107, &v106);
      return 1;
    }
    v63 = v101 - 1;
    v64 = &selRef_setEarTipFitTestCapability_;
    v65 = a2;
    v101 = v12;
    while (1)
    {
      v98 = (char *)v62;
      v66 = *(v62 - 1);
      v96 = v62 - 1;
      v67 = *--v65;
      v68 = v66;
      v102 = v67;
      v69 = v64[248];
      v97 = v68;
      v70 = objc_msgSend(v68, v69);
      if (v70)
      {
        v71 = v70;
        v72 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v70);

        v73 = v104;
        v74 = (void (*)(void **, char *, uint64_t))v104[4];
        v74(v101, v72, v18);
        v75 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))v73[7];
        v75(v101, 0, 1, v18);
        v76 = (uint64_t (*)(void **, uint64_t, uint64_t))v73[6];
        v12 = v101;
        v77 = v76(v101, 1, v18);
        if ((_DWORD)v77 != 1)
        {
          v74(v99, (char *)v12, v18);
          goto LABEL_44;
        }
      }
      else
      {
        v75 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))v104[7];
        v77 = v75(v12, 1, 1, v18);
      }
      static Date.now.getter(v77);
      sub_1000A1000((uint64_t)v12, (uint64_t *)&unk_1002103D0);
LABEL_44:
      v78 = objc_msgSend(v102, v64[248]);
      if (v78)
      {
        v79 = v78;
        v80 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v78);

        v81 = v104;
        v82 = (void (*)(char *, char *, uint64_t))v104[4];
        v61 = (uint64_t)v95;
        v82(v95, v80, v18);
        v75((void **)v61, 0, 1, v18);
        v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v81[6])(v61, 1, v18);
        if ((_DWORD)v83 != 1)
        {
          v84 = v94;
          v85 = v61;
          v82(v94, (char *)v61, v18);
          goto LABEL_49;
        }
      }
      else
      {
        v83 = v75((void **)v61, 1, 1, v18);
      }
      v84 = v94;
      static Date.now.getter(v83);
      v85 = v61;
      sub_1000A1000(v61, (uint64_t *)&unk_1002103D0);
LABEL_49:
      v86 = v63 + 1;
      v87 = v99;
      v88 = static Date.> infix(_:_:)(v99, v84);
      v89 = v84;
      v90 = (void (*)(char *, uint64_t))v104[1];
      v90(v89, v18);
      v90((char *)v87, v18);

      if ((v88 & 1) != 0)
      {
        v91 = v103;
        v12 = v101;
        v62 = (void **)v98;
        if (v86 != a2 || v63 >= a2)
          *v63 = *v65;
        v108 = v65;
      }
      else
      {
        v62 = v96;
        v106 = v96;
        v91 = v103;
        v12 = v101;
        if (v86 >= (void **)v98 && v63 < (void **)v98)
        {
          v61 = v85;
          if (v86 != (void **)v98)
            *v63 = *v96;
          v65 = a2;
          goto LABEL_61;
        }
        *v63 = *v96;
        v65 = a2;
      }
      v61 = v85;
LABEL_61:
      v64 = &selRef_setEarTipFitTestCapability_;
      if (v62 > v91)
      {
        --v63;
        a2 = v65;
        if (v65 > v105)
          continue;
      }
      goto LABEL_65;
    }
  }
  if (v29 >= -7)
  {
    v34 = (uint64_t)v98;
    if (v27 != v105 || &v105[v31] <= v27)
    {
      memmove(v27, v105, 8 * v31);
      v27 = v103;
    }
    v99 = &v27[v31];
    v106 = v99;
    if (v29 >= 8 && a2 < v101)
    {
      while (1)
      {
        v35 = *a2;
        v103 = v27;
        v36 = *v27;
        v37 = v35;
        v38 = v36;
        v39 = v37;
        v40 = objc_msgSend(v37, "creationDate");
        if (v40)
        {
          v41 = v40;
          v42 = v100;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

          v43 = v104;
          v44 = (void (*)(uint64_t, char *, uint64_t))v104[4];
          v44(v34, v42, v18);
          v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v43[7];
          v45(v34, 0, 1, v18);
          v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43[6])(v34, 1, v18);
          if ((_DWORD)v46 != 1)
          {
            v44((uint64_t)v102, (char *)v34, v18);
            goto LABEL_15;
          }
        }
        else
        {
          v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v104[7];
          v46 = v45(v34, 1, 1, v18);
        }
        static Date.now.getter(v46);
        sub_1000A1000(v34, (uint64_t *)&unk_1002103D0);
LABEL_15:
        v47 = objc_msgSend(v38, "creationDate");
        if (!v47)
        {
          v54 = v45((uint64_t)v15, 1, 1, v18);
LABEL_19:
          v55 = v97;
          static Date.now.getter(v54);
          sub_1000A1000((uint64_t)v15, (uint64_t *)&unk_1002103D0);
          goto LABEL_20;
        }
        v48 = v47;
        v49 = v15;
        v50 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

        v51 = v104;
        v52 = (void (*)(char *, char *, uint64_t))v104[4];
        v53 = v50;
        v15 = v49;
        v52(v49, v53, v18);
        v45((uint64_t)v49, 0, 1, v18);
        v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v51[6])(v49, 1, v18);
        if ((_DWORD)v54 == 1)
          goto LABEL_19;
        v55 = v97;
        v52(v97, v15, v18);
LABEL_20:
        v56 = v102;
        v57 = static Date.> infix(_:_:)(v102, v55);
        v58 = (void (*)(char *, uint64_t))v104[1];
        v58(v55, v18);
        v58(v56, v18);

        v34 = (uint64_t)v98;
        if ((v57 & 1) != 0)
        {
          v59 = (unint64_t)(a2 + 1);
          if (v105 < a2 || (unint64_t)v105 >= v59 || v105 != a2)
            *v105 = *a2;
          v27 = v103;
        }
        else
        {
          v60 = v103;
          if (v105 != v103)
            *v105 = *v103;
          v27 = v60 + 1;
          v107 = v27;
          v59 = (unint64_t)a2;
        }
        v108 = ++v105;
        if (v27 < v99)
        {
          a2 = (void **)v59;
          if (v59 < (unint64_t)v101)
            continue;
        }
        goto LABEL_65;
      }
    }
    goto LABEL_65;
  }
LABEL_66:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100153CB0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000A0980((uint64_t *)&unk_100212250);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_100153DA8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for SoundProfileRecord(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

char *sub_100153EB4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_100153F5C(uint64_t a1)
{
  return sub_100153CB0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void (*sub_100153F70(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_100153FF0(v6, a2, a3);
  return sub_100153FC4;
}

void sub_100153FC4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_100153FF0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_10015405C;
  }
  __break(1u);
  return result;
}

void sub_10015405C(id *a1)
{

}

uint64_t sub_100154064(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000AAD14((unint64_t *)&unk_100212240, &qword_1002119B0, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_1000A0980(&qword_1002119B0);
          v13 = sub_100153F70(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100154280(_QWORD *a1)
{
  return sub_10014F048(0, a1[2], 0, a1, (uint64_t *)&unk_1002122A0, type metadata accessor for SoundProfileRecord);
}

uint64_t sub_1001542B4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1001542C8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001544C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  _QWORD aBlock[5];
  uint64_t v30;

  v5 = v4;
  *(_BYTE *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  swift_unknownObjectWeakInit(v5 + 24, 0);
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  v9 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  *(_QWORD *)(v5 + 56) = v9;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_networkUp) = 1;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___fileManager) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_retryTimer) = 0;
  v10 = (_QWORD *)(v5 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore____lazy_storage___cloudCoordinator);
  *v10 = 0;
  v10[1] = 0;
  v11 = static os_log_type_t.default.getter(v9);
  if (qword_1002101D0 != -1)
    swift_once(&qword_1002101D0, sub_1001686F0);
  v12 = qword_100218DD8;
  v13 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100184870;
  v15 = URL.absoluteString.getter();
  v17 = v16;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "DeviceStore init with directory: %@", 35, 2, v14);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(v5 + 32) = a2;
  swift_unknownObjectWeakAssign(v5 + 24, a1);
  v18 = v5 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_directoryURL;
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, a3, v19);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue) = a4;
  v21 = (void *)objc_opt_self(NSNotificationCenter);
  v22 = a4;
  v23 = objc_msgSend(v21, "defaultCenter");
  aBlock[4] = sub_1001680B8;
  v30 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012C07C;
  aBlock[3] = &unk_1001ECF10;
  v24 = _Block_copy(aBlock);
  v25 = v30;
  swift_retain(v5);
  swift_release(v25);
  v26 = objc_msgSend(v23, "addObserverForName:object:queue:usingBlock:", CFSTR("com.apple.bluetooth.services.BTNetworkMonitor.networkChanged"), 0, 0, v24);
  _Block_release(v24);
  swift_unknownObjectRelease(v26);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a3, v19);
  return v5;
}

char *sub_10015476C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
    goto LABEL_25;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v10 = a4 == 0x6563697665444141 && a5 == 0xEE0064726F636552;
    v11 = 4;
    while (1)
    {
      v12 = (a1 & 0xC000000000000001) != 0
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1)
          : (char *)*(id *)(a1 + 8 * v11);
      v13 = v12;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v15 = *(_QWORD *)&v12[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
      v16 = *(_QWORD *)&v13[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
      v17 = v15 == a2 && v16 == a3;
      if ((v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a2, a3, 0) & 1) != 0)
        && (v10
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141, 0xEE0064726F636552, a4, a5, 0) & 1) != 0))
      {
        swift_bridgeObjectRelease(a1);
        return v13;
      }

      ++v11;
      if (v14 == v8)
        goto LABEL_29;
    }
    __break(1u);
LABEL_25:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_29:
  swift_bridgeObjectRelease(a1);
  return 0;
}

char *sub_100154928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_25;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v10 = a4 == 0xD000000000000011 && a5 == 0x80000001001B1050;
    v20 = v10;
    v11 = 4;
    while (1)
    {
      v12 = (a1 & 0xC000000000000001) != 0
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1)
          : (char *)*(id *)(a1 + 8 * v11);
      v13 = v12;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v15 = *(_QWORD *)&v12[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
      v16 = *(_QWORD *)&v13[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
      v17 = v15 == a2 && v16 == a3;
      if ((v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a2, a3, 0) & 1) != 0)
        && (v20
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001B1050, a4, a5, 0) & 1) != 0))
      {
        swift_bridgeObjectRelease(a1);
        return v13;
      }

      ++v11;
      if (v14 == v8)
        goto LABEL_29;
    }
    __break(1u);
LABEL_25:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_29:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100154AD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100127798(*(_QWORD *)(v1 + 16), type metadata accessor for DeviceRecord, &qword_1002121D0, (uint64_t)&unk_10018537C, &qword_1002121D8, a1);
}

uint64_t sub_100154B08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100127798(*(_QWORD *)(v1 + 16), type metadata accessor for MagicPairingSettingsRecord, &qword_1002121E0, (uint64_t)&unk_100186824, &qword_1002121E8, a1);
}

uint64_t sub_100154B40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100127798(*(_QWORD *)(v1 + 16), type metadata accessor for DeviceSupportInformationRecord, &qword_1002121F0, (uint64_t)&unk_10018711C, &qword_1002121F8, a1);
}

uint64_t sub_100154B78@<X0>(uint64_t *a1@<X8>)
{
  return sub_100164B40(type metadata accessor for AADeviceRecord, &qword_100211BC8, (uint64_t)&protocol conformance descriptor for AADeviceRecord, &qword_100212210, a1);
}

void *sub_100154BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v7)
  {
    v23 = a5;
    v8 = 4;
    while (1)
    {
      v10 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1)
          : *(id *)(a1 + 8 * v8);
      a5 = v10;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v12 = objc_msgSend(v10, "encryptedValues");
      ObjectType = swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter(&v26, 0xD000000000000010, 0x80000001001AA8D0, ObjectType, &type metadata for String, &protocol witness table for String);
      swift_unknownObjectRelease(v12);
      v14 = v27;
      if (v27)
      {
        if (v26 == v28 && v27 == a3)
        {
          v15 = swift_bridgeObjectRelease(v27);
        }
        else
        {
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v28, a3, 0);
          v15 = swift_bridgeObjectRelease(v14);
          if ((v16 & 1) == 0)
            goto LABEL_5;
        }
        v17 = CKRecord.recordType.getter(v15);
        v19 = v18;
        v20 = (uint64_t)v23;
        if (v17 == a4 && v18 == v23)
        {
          swift_bridgeObjectRelease(a1);
LABEL_20:
          swift_bridgeObjectRelease(v20);
          return a5;
        }
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a4, v23, 0);
        swift_bridgeObjectRelease(v19);
        if ((v9 & 1) != 0)
        {
          v20 = a1;
          goto LABEL_20;
        }
      }
LABEL_5:

      ++v8;
      if (v11 == v7)
        goto LABEL_26;
    }
    __break(1u);
LABEL_22:
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  }
LABEL_26:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100154DD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100154E60(a1, a2, a3, a4, a5, (unint64_t)sub_1001685D0, (uint64_t)sub_100168620, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000B9078, (uint64_t)&unk_1001ECEA8, (uint64_t)sub_100168640);
}

uint64_t sub_100154E18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100154E60(a1, a2, a3, a4, a5, (unint64_t)sub_1001685D0, (uint64_t)sub_100168620, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000B9548, (uint64_t)&unk_1001ECE30, (uint64_t)sub_100167FD0);
}

uint64_t sub_100154E60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  void *v47;
  _QWORD *v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  char v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  objc_class *v73;
  Class isa;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  unint64_t v130;
  objc_class *v131;
  Class v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  objc_class *v136;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  void *v147;
  void (*v148)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v149;
  char *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  id v159[3];

  v148 = a8;
  v146 = a7;
  v155 = a6;
  v156 = a3;
  v157 = a4;
  v158 = a5;
  v12 = type metadata accessor for UUID(0);
  __chkstk_darwin(v12);
  v142 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v150 = (char *)&v138 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v138 - v21;
  v151 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v151);
  v152 = (uint64_t *)((char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = type metadata accessor for DeviceRecord(0);
  v153 = *(_QWORD *)(v24 - 8);
  v154 = v24;
  __chkstk_darwin(v24);
  v140 = (uint64_t)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v139 = (uint64_t)&v138 - v27;
  __chkstk_darwin(v28);
  v141 = (uint64_t *)((char *)&v138 - v29);
  __chkstk_darwin(v30);
  v143 = (uint64_t)&v138 - v31;
  __chkstk_darwin(v32);
  v144 = a2;
  v145 = (uint64_t *)((char *)&v138 - v33);
  v34 = sub_100129690();
  v147 = a1;
  v35 = objc_msgSend(a1, "bluetoothAddress");
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v39 = sub_1000A0A00(v14, (uint64_t)qword_100218BE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v22, v39, v14);
  v40 = objc_autoreleasePoolPush();
  v42 = URL.path.getter(v41);
  v149 = v22;
  v44 = v43;
  URL.appendingPathComponent(_:)(v42);
  swift_bridgeObjectRelease(v44);
  v45 = v150;
  URL.appendingPathComponent(_:)(v36);
  v46 = *(void (**)(char *, uint64_t))(v15 + 8);
  v46(v17, v14);
  objc_autoreleasePoolPop(v40);
  v47 = objc_autoreleasePoolPush();
  __chkstk_darwin(v47);
  *(&v138 - 2) = (uint64_t)v45;
  *(&v138 - 1) = v34;
  v48 = v152;
  OS_dispatch_queue.sync<A>(execute:)(v152, v155, &v138 - 4, v151);
  objc_autoreleasePoolPop(v47);
  v46(v45, v14);
  swift_release(v34);
  swift_bridgeObjectRelease(v38);
  v46(v149, v14);
  v49 = (*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v153 + 48))(v48, 1, v154) == 1;
  v155 = 0;
  if (v49)
  {
    v50 = sub_1000A1000((uint64_t)v48, &qword_100210CF8);
    v51 = static os_log_type_t.default.getter(v50);
    v52 = v147;
    v53 = v148;
    v54 = v144;
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v55 = qword_100218DE8;
    v56 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v57 = swift_allocObject(v56, 72, 7);
    *(_OWORD *)(v57 + 16) = xmmword_100184870;
    v58 = v52;
    v59 = objc_msgSend(v58, "description");
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v62 = v61;

    *(_QWORD *)(v57 + 56) = &type metadata for String;
    *(_QWORD *)(v57 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v57 + 32) = v60;
    *(_QWORD *)(v57 + 40) = v62;
    os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v55, "Add device record: %@", 21, 2, v57);
    swift_bridgeObjectRelease(v57);
    v63 = v58;
    v64 = (uint64_t)v142;
    UUID.init()(v63);
    v65 = v145;
    sub_10009D0DC(v64, 0, 0xC000000000000000, v63, v145);
  }
  else
  {
    v66 = v143;
    sub_1000C6CD0((uint64_t)v48, v143, type metadata accessor for DeviceRecord);
    v67 = v147;
    v68 = sub_10009F15C(v147);
    v69 = v141;
    sub_1000AE548(v66, (uint64_t)v141, type metadata accessor for DeviceRecord);
    if ((v68 & 1) == 0)
    {
      v70 = objc_autoreleasePoolPush();
      v71 = *v69;
      v72 = v69[1];
      sub_1000A0E74(*v69, v72);
      sub_100109DEC(v71, v72);
      isa = v73;
      sub_1000A103C(v71, v72);
      v75 = v139;
      sub_1000AE548((uint64_t)v69, v139, type metadata accessor for DeviceRecord);
      if (!isa)
        isa = sub_1000A9BCC().super.isa;
      sub_1000AE58C(v75, type metadata accessor for DeviceRecord);
      v159[0] = isa;
      sub_10009E74C(v159);
      objc_autoreleasePoolPop(v70);
      v76 = -[objc_class recordChangeTag](isa, "recordChangeTag");

      if (v76)
      {

        v77 = sub_1000AE58C((uint64_t)v69, type metadata accessor for DeviceRecord);
        v78 = static os_log_type_t.default.getter(v77);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v79 = qword_100218DE8;
        v80 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v81 = swift_allocObject(v80, 112, 7);
        *(_OWORD *)(v81 + 16) = xmmword_1001858F0;
        v82 = sub_10009C9A8();
        v84 = v83;
        *(_QWORD *)(v81 + 56) = &type metadata for String;
        v85 = sub_1000A0DF4();
        *(_QWORD *)(v81 + 64) = v85;
        *(_QWORD *)(v81 + 32) = v82;
        *(_QWORD *)(v81 + 40) = v84;
        v86 = v67;
        v87 = objc_msgSend(v86, "description");
        v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
        v90 = v89;

        *(_QWORD *)(v81 + 96) = &type metadata for String;
        *(_QWORD *)(v81 + 104) = v85;
        *(_QWORD *)(v81 + 72) = v88;
        *(_QWORD *)(v81 + 80) = v90;
        os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, v79, "No change from cached %@ [to] %@", 32, 2, v81);
        swift_bridgeObjectRelease(v81);
        v148(0, v156, v157, v158);
        v65 = (uint64_t *)v66;
        return sub_1000AE58C((uint64_t)v65, type metadata accessor for DeviceRecord);
      }
    }
    v91 = sub_1000AE58C((uint64_t)v69, type metadata accessor for DeviceRecord);
    v92 = static os_log_type_t.default.getter(v91);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v93 = qword_100218DE8;
    v94 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v95 = swift_allocObject(v94, 112, 7);
    *(_OWORD *)(v95 + 16) = xmmword_1001858F0;
    v96 = sub_10009C9A8();
    v98 = v97;
    *(_QWORD *)(v95 + 56) = &type metadata for String;
    v99 = sub_1000A0DF4();
    *(_QWORD *)(v95 + 64) = v99;
    *(_QWORD *)(v95 + 32) = v96;
    *(_QWORD *)(v95 + 40) = v98;
    v100 = v67;
    v101 = objc_msgSend(v100, "description");
    v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
    v104 = v103;

    *(_QWORD *)(v95 + 96) = &type metadata for String;
    *(_QWORD *)(v95 + 104) = v99;
    *(_QWORD *)(v95 + 72) = v102;
    *(_QWORD *)(v95 + 80) = v104;
    os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "Updating cached device record: %@ with %@", 41, 2, v95);
    swift_bridgeObjectRelease(v95);
    v65 = v145;
    sub_1000AE548(v66, (uint64_t)v145, type metadata accessor for DeviceRecord);
    sub_10009ED2C(v100);
    sub_1000AE58C(v66, type metadata accessor for DeviceRecord);
    v53 = v148;
    v54 = v144;
  }
  v105 = sub_100129690();
  __chkstk_darwin(v105);
  *(&v138 - 2) = v106;
  *(&v138 - 1) = (uint64_t)v65;
  v107 = v155;
  OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), v146, &v138 - 4, &type metadata for () + 1);
  if (v107)
  {
    v108 = swift_release(v105);
    v109 = static os_log_type_t.error.getter(v108);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v110 = qword_100218DE8;
    v111 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v112 = swift_allocObject(v111, 72, 7);
    *(_OWORD *)(v112 + 16) = xmmword_100184870;
    v159[0] = (id)v107;
    swift_errorRetain(v107);
    v113 = sub_1000A0980(&qword_100210710);
    v114 = String.init<A>(describing:)(v159, v113);
    v116 = v115;
    *(_QWORD *)(v112 + 56) = &type metadata for String;
    *(_QWORD *)(v112 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v112 + 32) = v114;
    *(_QWORD *)(v112 + 40) = v116;
    os_log(_:dso:log:_:_:)(v109, &_mh_execute_header, v110, "Unable to enocde device record with error: %@", 45, 2, v112);
    swift_bridgeObjectRelease(v112);
    v117 = sub_1000D8604();
    v118 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v117, 0, 0);
    *v119 = v107 | 0x4000000000000000;
    swift_errorRetain(v107);
    v53(v118, v156, v157, v158);
    swift_errorRelease(v118);
    swift_errorRelease(v107);
  }
  else
  {
    swift_release(v105);
    v120 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v53)(0, v156, v157, v158);
    v121 = static os_log_type_t.default.getter(v120);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v122 = qword_100218DE8;
    v123 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v124 = swift_allocObject(v123, 72, 7);
    *(_OWORD *)(v124 + 16) = xmmword_100184870;
    v125 = sub_10009C9A8();
    v127 = v126;
    *(_QWORD *)(v124 + 56) = &type metadata for String;
    *(_QWORD *)(v124 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v124 + 32) = v125;
    *(_QWORD *)(v124 + 40) = v127;
    os_log(_:dso:log:_:_:)(v121, &_mh_execute_header, v122, "Syncing DeviceRecord - %@", 25, 2, v124);
    swift_bridgeObjectRelease(v124);
    v128 = objc_autoreleasePoolPush();
    v129 = *v65;
    v130 = v65[1];
    sub_1000A0E74(*v65, v130);
    sub_100109DEC(v129, v130);
    v132 = v131;
    sub_1000A103C(v129, v130);
    v133 = v140;
    sub_1000AE548((uint64_t)v65, v140, type metadata accessor for DeviceRecord);
    if (!v132)
      v132 = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v133, type metadata accessor for DeviceRecord);
    v159[0] = v132;
    sub_10009E74C(v159);
    objc_autoreleasePoolPop(v128);
    v134 = sub_10012A6A0();
    v135 = swift_allocObject(a9, 32, 7);
    *(_QWORD *)(v135 + 16) = v54;
    *(_QWORD *)(v135 + 24) = v132;
    swift_retain(v54);
    v136 = v132;
    sub_1000F8080(v136, 1, a10, v135);

    swift_unknownObjectRelease(v134);
    swift_release(v135);
  }
  return sub_1000AE58C((uint64_t)v65, type metadata accessor for DeviceRecord);
}

void sub_1001559D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  void *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  objc_class *v67;
  Class isa;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  objc_class *v75;
  Class v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  double v92;
  int *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  objc_class *v107;
  Class v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  Class v160;

  v149 = a4;
  v150 = a5;
  v148 = a3;
  v141 = type metadata accessor for DispatchPredicate(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (uint64_t *)((char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = type metadata accessor for Date(0);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v133 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for UUID(0);
  v135 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v132 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v134);
  v144 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v153 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v154 = (char *)&v125 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v125 - v17;
  v155 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v155);
  v156 = (uint64_t *)((char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v159 = type metadata accessor for DeviceRecord(0);
  v157 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v128 = (uint64_t)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v126 = (uint64_t)&v125 - v22;
  __chkstk_darwin(v23);
  v131 = (uint64_t)&v125 - v24;
  __chkstk_darwin(v25);
  v129 = (uint64_t)&v125 - v26;
  v127 = v27;
  __chkstk_darwin(v28);
  v143 = (uint64_t *)((char *)&v125 - v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v32 = qword_100218DE8;
  v146 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v33 = swift_allocObject(v146, 72, 7);
  v145 = xmmword_100184870;
  *(_OWORD *)(v33 + 16) = xmmword_100184870;
  v34 = sub_10009C9A8();
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v147 = sub_1000A0DF4();
  *(_QWORD *)(v33 + 64) = v147;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "CloudSync: Remove device record: %@", 35, 2, v33);
  swift_bridgeObjectRelease(v33);
  v142 = a2;
  v37 = sub_100129690();
  v38 = *(int *)(v159 + 24);
  v158 = a1;
  v39 = (uint64_t *)(a1 + v38);
  v151 = *v39;
  v130 = v39;
  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v40 = sub_1000A0A00(v11, (uint64_t)qword_100218BE0);
  v41 = v11;
  v42 = v12;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v152 = v18;
  v43(v18, v40, v41);
  v44 = objc_autoreleasePoolPush();
  v46 = URL.path.getter(v45);
  v48 = v47;
  v49 = v37;
  v50 = v153;
  URL.appendingPathComponent(_:)(v46);
  swift_bridgeObjectRelease(v48);
  v51 = v154;
  URL.appendingPathComponent(_:)(v151);
  v52 = *(void (**)(char *, uint64_t))(v42 + 8);
  v52(v50, v41);
  objc_autoreleasePoolPop(v44);
  v53 = objc_autoreleasePoolPush();
  __chkstk_darwin(v53);
  *(&v125 - 2) = (uint64_t)v51;
  *(&v125 - 1) = v49;
  v54 = v156;
  OS_dispatch_queue.sync<A>(execute:)(v156, sub_1001685D0, &v125 - 4, v155);
  objc_autoreleasePoolPop(v53);
  v52(v51, v41);
  swift_release(v49);
  v52(v152, v41);
  v55 = v159;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v157 + 48))(v54, 1, v159) == 1)
  {
    v56 = sub_1000A1000((uint64_t)v54, &qword_100210CF8);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = qword_100218DE8;
    v59 = swift_allocObject(v146, 72, 7);
    *(_OWORD *)(v59 + 16) = v145;
    v60 = sub_10009C9A8();
    v61 = v147;
    *(_QWORD *)(v59 + 56) = &type metadata for String;
    *(_QWORD *)(v59 + 64) = v61;
    *(_QWORD *)(v59 + 32) = v60;
    *(_QWORD *)(v59 + 40) = v62;
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Record not found to remove: %@", 30, 2, v59);
    swift_bridgeObjectRelease(v59);
    sub_1000B9DDC(0, v148, v149, v150);
  }
  else
  {
    v63 = v143;
    sub_1000C6CD0((uint64_t)v54, (uint64_t)v143, type metadata accessor for DeviceRecord);
    v64 = objc_autoreleasePoolPush();
    v65 = *v63;
    v66 = v63[1];
    sub_1000A0E74(*v63, v66);
    sub_100109DEC(v65, v66);
    isa = v67;
    sub_1000A103C(v65, v66);
    v69 = v129;
    sub_1000AE548((uint64_t)v63, v129, type metadata accessor for DeviceRecord);
    if (!isa)
      isa = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v69, type metadata accessor for DeviceRecord);
    v70 = (uint64_t)v144;
    v160 = isa;
    sub_10009E74C((id *)&v160);
    objc_autoreleasePoolPop(v64);
    v71 = -[objc_class recordID](isa, "recordID");

    v72 = objc_autoreleasePoolPush();
    v73 = *v63;
    v74 = v63[1];
    sub_1000A0E74(*v63, v74);
    sub_100109DEC(v73, v74);
    v76 = v75;
    sub_1000A103C(v73, v74);
    v77 = v131;
    sub_1000AE548((uint64_t)v63, v131, type metadata accessor for DeviceRecord);
    if (!v76)
      v76 = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v77, type metadata accessor for DeviceRecord);
    v78 = v142;
    v160 = v76;
    sub_10009E74C((id *)&v160);
    objc_autoreleasePoolPop(v72);
    v80 = CKRecord.recordType.getter(v79);
    v82 = v81;

    sub_10013A5F4(v71, v80, v82, 0);
    swift_bridgeObjectRelease(v82);
    v83 = v158 + *(int *)(v55 + 20);
    v84 = v135;
    v85 = v132;
    v86 = v137;
    (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v132, v83, v137);
    v88 = *v130;
    v87 = v130[1];
    v89 = swift_bridgeObjectRetain(v87);
    v90 = v133;
    v91 = Date.init()(v89);
    v92 = Date.timeIntervalSince1970.getter(v91);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v90, v138);
    *(_BYTE *)v70 = 1;
    strcpy((char *)(v70 + 8), "DeviceRecord");
    *(_BYTE *)(v70 + 21) = 0;
    *(_WORD *)(v70 + 22) = -5120;
    v93 = (int *)v134;
    (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v70 + *(int *)(v134 + 24), v85, v86);
    v94 = (_QWORD *)(v70 + v93[7]);
    *v94 = v88;
    v94[1] = v87;
    *(double *)(v70 + v93[8]) = v92;
    *(_OWORD *)(v70 + v93[9]) = xmmword_100187E30;
    v95 = objc_autoreleasePoolPush();
    sub_100146F6C(v78, v70);
    objc_autoreleasePoolPop(v95);
    v96 = (_QWORD *)sub_10012A6A0();
    v97 = (void *)v96[9];
    v98 = v139;
    *v139 = v97;
    v99 = v140;
    v100 = v141;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v98, enum case for DispatchPredicate.notOnQueue(_:), v141);
    v101 = v97;
    LOBYTE(v88) = _dispatchPreconditionTest(_:)(v98);
    (*(void (**)(_QWORD *, uint64_t))(v99 + 8))(v98, v100);
    if ((v88 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v160, sub_100165060, v96, &type metadata for Bool);
      v102 = swift_unknownObjectRelease(v96);
      if ((v160 & 1) != 0)
      {
        v103 = sub_10012A6A0();
        v104 = objc_autoreleasePoolPush();
        v105 = *v63;
        v106 = v63[1];
        sub_1000A0E74(*v63, v106);
        sub_100109DEC(v105, v106);
        v108 = v107;
        sub_1000A103C(v105, v106);
        v109 = v126;
        sub_1000AE548((uint64_t)v63, v126, type metadata accessor for DeviceRecord);
        if (!v108)
          v108 = sub_1000A9BCC().super.isa;
        sub_1000AE58C(v109, type metadata accessor for DeviceRecord);
        v160 = v108;
        sub_10009E74C((id *)&v160);
        objc_autoreleasePoolPop(v104);
        v110 = -[objc_class recordID](v108, "recordID");

        v111 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v111 + 16, v78);
        v112 = v128;
        sub_1000AE548((uint64_t)v63, v128, type metadata accessor for DeviceRecord);
        v113 = *(unsigned __int8 *)(v157 + 80);
        v114 = (v113 + 16) & ~v113;
        v115 = (v127 + v114 + 7) & 0xFFFFFFFFFFFFFFF8;
        v116 = swift_allocObject(&unk_1001ECDE0, v115 + 8, v113 | 7);
        sub_1000C6CD0(v112, v116 + v114, type metadata accessor for DeviceRecord);
        *(_QWORD *)(v116 + v115) = v111;
        v117 = swift_allocObject(&unk_1001ECE08, 49, 7);
        *(_QWORD *)(v117 + 16) = v103;
        *(_QWORD *)(v117 + 24) = v110;
        *(_QWORD *)(v117 + 32) = sub_100165D40;
        *(_QWORD *)(v117 + 40) = v116;
        *(_BYTE *)(v117 + 48) = 1;
        swift_retain(v111);
        swift_unknownObjectRetain(v103);
        v118 = v110;
        swift_retain(v116);
        sub_1000F7A44((uint64_t)sub_100164E44, v117);
        swift_release(v111);
        swift_release(v116);
        swift_unknownObjectRelease(v103);

        swift_release(v117);
      }
      else
      {
        v119 = static os_log_type_t.error.getter(v102);
        v120 = qword_100218DE8;
        v121 = swift_allocObject(v146, 72, 7);
        *(_OWORD *)(v121 + 16) = v145;
        v122 = sub_10009C9A8();
        v123 = v147;
        *(_QWORD *)(v121 + 56) = &type metadata for String;
        *(_QWORD *)(v121 + 64) = v123;
        *(_QWORD *)(v121 + 32) = v122;
        *(_QWORD *)(v121 + 40) = v124;
        os_log(_:dso:log:_:_:)(v119, &_mh_execute_header, v120, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v121);
        swift_bridgeObjectRelease(v121);
      }
      sub_1000B9DDC(0, v148, v149, v150);
      sub_1000AE58C(v70, type metadata accessor for BTDeferredRecord);
      sub_1000AE58C((uint64_t)v63, type metadata accessor for DeviceRecord);
    }
    else
    {
      __break(1u);
      swift_release(v150);
      objc_autoreleasePoolPop(v96);
      __break(1u);
    }
  }
}

void sub_1001565B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  void *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  objc_class *v67;
  Class isa;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  objc_class *v75;
  Class v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  double v92;
  int *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  objc_class *v107;
  Class v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  Class v160;

  v149 = a3;
  v150 = a5;
  v148 = a4;
  v141 = type metadata accessor for DispatchPredicate(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (uint64_t *)((char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = type metadata accessor for Date(0);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v133 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for UUID(0);
  v135 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v132 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v134);
  v144 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v153 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v154 = (char *)&v125 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v125 - v17;
  v155 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v155);
  v156 = (uint64_t *)((char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v159 = type metadata accessor for DeviceRecord(0);
  v157 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v128 = (uint64_t)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v126 = (uint64_t)&v125 - v22;
  __chkstk_darwin(v23);
  v131 = (uint64_t)&v125 - v24;
  __chkstk_darwin(v25);
  v129 = (uint64_t)&v125 - v26;
  v127 = v27;
  __chkstk_darwin(v28);
  v143 = (uint64_t *)((char *)&v125 - v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v32 = qword_100218DE8;
  v146 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v33 = swift_allocObject(v146, 72, 7);
  v145 = xmmword_100184870;
  *(_OWORD *)(v33 + 16) = xmmword_100184870;
  v34 = sub_10009C9A8();
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v147 = sub_1000A0DF4();
  *(_QWORD *)(v33 + 64) = v147;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "CloudSync: Remove device record: %@", 35, 2, v33);
  swift_bridgeObjectRelease(v33);
  v142 = a2;
  v37 = sub_100129690();
  v38 = *(int *)(v159 + 24);
  v158 = a1;
  v39 = (uint64_t *)(a1 + v38);
  v151 = *v39;
  v130 = v39;
  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v40 = sub_1000A0A00(v11, (uint64_t)qword_100218BE0);
  v41 = v11;
  v42 = v12;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v152 = v18;
  v43(v18, v40, v41);
  v44 = objc_autoreleasePoolPush();
  v46 = URL.path.getter(v45);
  v48 = v47;
  v49 = v37;
  v50 = v153;
  URL.appendingPathComponent(_:)(v46);
  swift_bridgeObjectRelease(v48);
  v51 = v154;
  URL.appendingPathComponent(_:)(v151);
  v52 = *(void (**)(char *, uint64_t))(v42 + 8);
  v52(v50, v41);
  objc_autoreleasePoolPop(v44);
  v53 = objc_autoreleasePoolPush();
  __chkstk_darwin(v53);
  *(&v125 - 2) = (uint64_t)v51;
  *(&v125 - 1) = v49;
  v54 = v156;
  OS_dispatch_queue.sync<A>(execute:)(v156, sub_1001685D0, &v125 - 4, v155);
  objc_autoreleasePoolPop(v53);
  v52(v51, v41);
  swift_release(v49);
  v52(v152, v41);
  v55 = v159;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v157 + 48))(v54, 1, v159) == 1)
  {
    v56 = sub_1000A1000((uint64_t)v54, &qword_100210CF8);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = qword_100218DE8;
    v59 = swift_allocObject(v146, 72, 7);
    *(_OWORD *)(v59 + 16) = v145;
    v60 = sub_10009C9A8();
    v61 = v147;
    *(_QWORD *)(v59 + 56) = &type metadata for String;
    *(_QWORD *)(v59 + 64) = v61;
    *(_QWORD *)(v59 + 32) = v60;
    *(_QWORD *)(v59 + 40) = v62;
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Record not found to remove: %@", 30, 2, v59);
    swift_bridgeObjectRelease(v59);
    sub_1000BA068(0, v149, v148, v150);
  }
  else
  {
    v63 = v143;
    sub_1000C6CD0((uint64_t)v54, (uint64_t)v143, type metadata accessor for DeviceRecord);
    v64 = objc_autoreleasePoolPush();
    v65 = *v63;
    v66 = v63[1];
    sub_1000A0E74(*v63, v66);
    sub_100109DEC(v65, v66);
    isa = v67;
    sub_1000A103C(v65, v66);
    v69 = v129;
    sub_1000AE548((uint64_t)v63, v129, type metadata accessor for DeviceRecord);
    if (!isa)
      isa = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v69, type metadata accessor for DeviceRecord);
    v70 = (uint64_t)v144;
    v160 = isa;
    sub_10009E74C((id *)&v160);
    objc_autoreleasePoolPop(v64);
    v71 = -[objc_class recordID](isa, "recordID");

    v72 = objc_autoreleasePoolPush();
    v73 = *v63;
    v74 = v63[1];
    sub_1000A0E74(*v63, v74);
    sub_100109DEC(v73, v74);
    v76 = v75;
    sub_1000A103C(v73, v74);
    v77 = v131;
    sub_1000AE548((uint64_t)v63, v131, type metadata accessor for DeviceRecord);
    if (!v76)
      v76 = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v77, type metadata accessor for DeviceRecord);
    v78 = v142;
    v160 = v76;
    sub_10009E74C((id *)&v160);
    objc_autoreleasePoolPop(v72);
    v80 = CKRecord.recordType.getter(v79);
    v82 = v81;

    sub_10013A5F4(v71, v80, v82, 0);
    swift_bridgeObjectRelease(v82);
    v83 = v158 + *(int *)(v55 + 20);
    v84 = v135;
    v85 = v132;
    v86 = v137;
    (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v132, v83, v137);
    v88 = *v130;
    v87 = v130[1];
    v89 = swift_bridgeObjectRetain(v87);
    v90 = v133;
    v91 = Date.init()(v89);
    v92 = Date.timeIntervalSince1970.getter(v91);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v90, v138);
    *(_BYTE *)v70 = 1;
    strcpy((char *)(v70 + 8), "DeviceRecord");
    *(_BYTE *)(v70 + 21) = 0;
    *(_WORD *)(v70 + 22) = -5120;
    v93 = (int *)v134;
    (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v70 + *(int *)(v134 + 24), v85, v86);
    v94 = (_QWORD *)(v70 + v93[7]);
    *v94 = v88;
    v94[1] = v87;
    *(double *)(v70 + v93[8]) = v92;
    *(_OWORD *)(v70 + v93[9]) = xmmword_100187E30;
    v95 = objc_autoreleasePoolPush();
    sub_100146F6C(v78, v70);
    objc_autoreleasePoolPop(v95);
    v96 = (_QWORD *)sub_10012A6A0();
    v97 = (void *)v96[9];
    v98 = v139;
    *v139 = v97;
    v99 = v140;
    v100 = v141;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v98, enum case for DispatchPredicate.notOnQueue(_:), v141);
    v101 = v97;
    LOBYTE(v88) = _dispatchPreconditionTest(_:)(v98);
    (*(void (**)(_QWORD *, uint64_t))(v99 + 8))(v98, v100);
    if ((v88 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v160, sub_100165060, v96, &type metadata for Bool);
      v102 = swift_unknownObjectRelease(v96);
      if ((v160 & 1) != 0)
      {
        v103 = sub_10012A6A0();
        v104 = objc_autoreleasePoolPush();
        v105 = *v63;
        v106 = v63[1];
        sub_1000A0E74(*v63, v106);
        sub_100109DEC(v105, v106);
        v108 = v107;
        sub_1000A103C(v105, v106);
        v109 = v126;
        sub_1000AE548((uint64_t)v63, v126, type metadata accessor for DeviceRecord);
        if (!v108)
          v108 = sub_1000A9BCC().super.isa;
        sub_1000AE58C(v109, type metadata accessor for DeviceRecord);
        v160 = v108;
        sub_10009E74C((id *)&v160);
        objc_autoreleasePoolPop(v104);
        v110 = -[objc_class recordID](v108, "recordID");

        v111 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v111 + 16, v78);
        v112 = v128;
        sub_1000AE548((uint64_t)v63, v128, type metadata accessor for DeviceRecord);
        v113 = *(unsigned __int8 *)(v157 + 80);
        v114 = (v113 + 16) & ~v113;
        v115 = (v127 + v114 + 7) & 0xFFFFFFFFFFFFFFF8;
        v116 = swift_allocObject(&unk_1001ECAE8, v115 + 8, v113 | 7);
        sub_1000C6CD0(v112, v116 + v114, type metadata accessor for DeviceRecord);
        *(_QWORD *)(v116 + v115) = v111;
        v117 = swift_allocObject(&unk_1001ECB10, 49, 7);
        *(_QWORD *)(v117 + 16) = v103;
        *(_QWORD *)(v117 + 24) = v110;
        *(_QWORD *)(v117 + 32) = sub_100165D40;
        *(_QWORD *)(v117 + 40) = v116;
        *(_BYTE *)(v117 + 48) = 1;
        swift_retain(v111);
        swift_unknownObjectRetain(v103);
        v118 = v110;
        swift_retain(v116);
        sub_1000F7A44((uint64_t)sub_100164E44, v117);
        swift_release(v111);
        swift_release(v116);
        swift_unknownObjectRelease(v103);

        swift_release(v117);
      }
      else
      {
        v119 = static os_log_type_t.error.getter(v102);
        v120 = qword_100218DE8;
        v121 = swift_allocObject(v146, 72, 7);
        *(_OWORD *)(v121 + 16) = v145;
        v122 = sub_10009C9A8();
        v123 = v147;
        *(_QWORD *)(v121 + 56) = &type metadata for String;
        *(_QWORD *)(v121 + 64) = v123;
        *(_QWORD *)(v121 + 32) = v122;
        *(_QWORD *)(v121 + 40) = v124;
        os_log(_:dso:log:_:_:)(v119, &_mh_execute_header, v120, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v121);
        swift_bridgeObjectRelease(v121);
      }
      sub_1000BA068(0, v149, v148, v150);
      sub_1000AE58C(v70, type metadata accessor for BTDeferredRecord);
      sub_1000AE58C((uint64_t)v63, type metadata accessor for DeviceRecord);
    }
    else
    {
      __break(1u);
      swift_release(v150);
      swift_release(v149);
      objc_autoreleasePoolPop(v96);
      __break(1u);
    }
  }
}

void sub_1001571A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  void *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t (**v61)(uint64_t);
  uint64_t (*v62)(uint64_t);
  void *v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  Class v80;
  id v81;
  void *v82;
  uint64_t v83;
  Class v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  double v101;
  int *v102;
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  Class v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Class v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t);
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  Class aBlock[5];
  uint64_t v170;

  v152 = type metadata accessor for DispatchPredicate(0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (uint64_t *)((char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v148 = type metadata accessor for Date(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v143 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for UUID(0);
  v146 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v144 = (char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v145);
  v154 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for DispatchWorkItemFlags(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v140 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for DispatchQoS(0);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v137 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v161 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v160 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v163 = (char *)&v130 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v130 - v21;
  v162 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v162);
  v164 = (uint64_t *)((char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = type metadata accessor for DeviceSupportInformationRecord(0);
  v166 = *(_QWORD *)(v24 - 8);
  v167 = v24;
  __chkstk_darwin(v24);
  v156 = (uint64_t)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = v25;
  __chkstk_darwin(v26);
  v153 = (uint64_t)&v130 - v27;
  v28 = (uint64_t (*)(uint64_t))swift_allocObject(&unk_1001ECB38, 40, 7);
  *((_QWORD *)v28 + 2) = a3;
  *((_QWORD *)v28 + 3) = a4;
  v134 = a4;
  v158 = v28;
  *((_QWORD *)v28 + 4) = a5;
  v136 = a3;
  swift_retain(a3);
  v135 = a5;
  v29 = swift_retain(a5);
  v30 = static os_log_type_t.default.getter(v29);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v31 = qword_100218DE8;
  v133 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v32 = swift_allocObject(v133, 72, 7);
  v132 = xmmword_100184870;
  *(_OWORD *)(v32 + 16) = xmmword_100184870;
  v33 = sub_1000DA63C();
  v35 = v34;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  v131 = sub_1000A0DF4();
  *(_QWORD *)(v32 + 64) = v131;
  *(_QWORD *)(v32 + 32) = v33;
  *(_QWORD *)(v32 + 40) = v35;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Remove device record: %@", 24, 2, v32);
  swift_bridgeObjectRelease(v32);
  v165 = a2;
  v36 = sub_100129690();
  v37 = *(int *)(v167 + 24);
  v157 = a1;
  v38 = *(_QWORD *)(a1 + v37);
  if (qword_100210180 != -1)
    swift_once(&qword_100210180, sub_1000DA4F0);
  v39 = sub_1000A0A00(v16, (uint64_t)qword_100218D28);
  v40 = v16;
  v41 = v161;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v161 + 16);
  v159 = v22;
  v42(v22, v39, v40);
  v43 = objc_autoreleasePoolPush();
  v45 = URL.path.getter(v44);
  v47 = v46;
  v48 = v160;
  URL.appendingPathComponent(_:)(v45);
  swift_bridgeObjectRelease(v47);
  v49 = v163;
  URL.appendingPathComponent(_:)(v38);
  v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  v50(v48, v40);
  objc_autoreleasePoolPop(v43);
  v51 = objc_autoreleasePoolPush();
  __chkstk_darwin(v51);
  *(&v130 - 2) = (uint64_t)v49;
  *(&v130 - 1) = v36;
  v52 = v164;
  OS_dispatch_queue.sync<A>(execute:)(v164, sub_1001685BC, &v130 - 4, v162);
  objc_autoreleasePoolPop(v51);
  v50(v49, v40);
  swift_release(v36);
  v50(v159, v40);
  v53 = v166;
  v54 = v167;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v166 + 48))(v52, 1, v167) == 1)
  {
    sub_1000A1000((uint64_t)v52, &qword_100210CE8);
    v55 = *(void **)(v165 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v56 = v156;
    sub_1000AE548(v157, v156, type metadata accessor for DeviceSupportInformationRecord);
    v57 = *(unsigned __int8 *)(v53 + 80);
    v58 = (v57 + 16) & ~v57;
    v59 = (v155 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
    v60 = swift_allocObject(&unk_1001ECB60, v59 + 16, v57 | 7);
    sub_1000C6CD0(v56, v60 + v58, type metadata accessor for DeviceSupportInformationRecord);
    v61 = (uint64_t (**)(uint64_t))(v60 + v59);
    v62 = v158;
    *v61 = sub_1001679FC;
    v61[1] = v62;
    aBlock[4] = (Class)sub_100165D1C;
    v170 = v60;
    aBlock[0] = (Class)_NSConcreteStackBlock;
    aBlock[1] = (Class)1107296256;
    aBlock[2] = (Class)sub_1000E6A24;
    aBlock[3] = (Class)&unk_1001ECB78;
    v63 = _Block_copy(aBlock);
    v64 = v55;
    v65 = swift_retain(v62);
    v66 = v137;
    static DispatchQoS.unspecified.getter(v65);
    v168 = _swiftEmptyArrayStorage;
    v67 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v68 = sub_1000A0980(&qword_100211D00);
    v69 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v70 = v140;
    v71 = v68;
    v72 = v142;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v168, v71, v69, v142, v67);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v66, v70, v63);
    _Block_release(v63);

    (*(void (**)(char *, uint64_t))(v141 + 8))(v70, v72);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v66, v139);
    v73 = v170;
    swift_release(v62);
    v74 = (_QWORD *)v73;
LABEL_12:
    swift_release(v74);
    return;
  }
  v75 = (uint64_t)v52;
  v76 = v153;
  sub_1000C6CD0(v75, v153, type metadata accessor for DeviceSupportInformationRecord);
  v77 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v76, aBlock);
  v78 = v165;
  v79 = v54;
  objc_autoreleasePoolPop(v77);
  v80 = aBlock[0];
  v81 = -[objc_class recordID](aBlock[0], "recordID");

  v82 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v76, aBlock);
  v83 = (uint64_t)v154;
  objc_autoreleasePoolPop(v82);
  v84 = aBlock[0];
  v86 = CKRecord.recordType.getter(v85);
  v88 = v87;

  v89 = v78;
  sub_10013A5F4(v81, v86, v88, 0);

  swift_bridgeObjectRelease(v88);
  v90 = v146;
  v91 = v144;
  v92 = v149;
  (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v144, v76, v149);
  v93 = *(int *)(v79 + 24);
  v94 = v89;
  v95 = (uint64_t *)(v76 + v93);
  v97 = *v95;
  v96 = v95[1];
  v98 = swift_bridgeObjectRetain(v96);
  v99 = v143;
  v100 = Date.init()(v98);
  v101 = Date.timeIntervalSince1970.getter(v100);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v99, v148);
  *(_BYTE *)v83 = 1;
  *(_QWORD *)(v83 + 8) = 0xD00000000000001ELL;
  *(_QWORD *)(v83 + 16) = 0x80000001001AA950;
  v102 = (int *)v145;
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v83 + *(int *)(v145 + 24), v91, v92);
  v103 = (_QWORD *)(v83 + v102[7]);
  *v103 = v97;
  v103[1] = v96;
  *(double *)(v83 + v102[8]) = v101;
  *(_OWORD *)(v83 + v102[9]) = xmmword_100187E30;
  v104 = objc_autoreleasePoolPush();
  sub_100146F6C(v94, v83);
  objc_autoreleasePoolPop(v104);
  v105 = (_QWORD *)sub_10012A6A0();
  v106 = (void *)v105[9];
  v107 = v150;
  *v150 = v106;
  v108 = v151;
  v109 = v152;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v151 + 104))(v107, enum case for DispatchPredicate.notOnQueue(_:), v152);
  v110 = v106;
  LOBYTE(v97) = _dispatchPreconditionTest(_:)(v107);
  (*(void (**)(_QWORD *, uint64_t))(v108 + 8))(v107, v109);
  if ((v97 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v105, &type metadata for Bool);
    v111 = swift_unknownObjectRelease(v105);
    if (((uint64_t)aBlock[0] & 1) != 0)
    {
      v112 = sub_10012A6A0();
      v113 = objc_autoreleasePoolPush();
      sub_1000DC7F8(v76, aBlock);
      objc_autoreleasePoolPop(v113);
      v114 = aBlock[0];
      v115 = -[objc_class recordID](aBlock[0], "recordID");

      v116 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v116 + 16, v94);
      v117 = v156;
      sub_1000AE548(v76, v156, type metadata accessor for DeviceSupportInformationRecord);
      v118 = *(unsigned __int8 *)(v166 + 80);
      v119 = (v118 + 16) & ~v118;
      v120 = (v155 + v119 + 7) & 0xFFFFFFFFFFFFFFF8;
      v121 = swift_allocObject(&unk_1001ECBB0, v120 + 8, v118 | 7);
      sub_1000C6CD0(v117, v121 + v119, type metadata accessor for DeviceSupportInformationRecord);
      *(_QWORD *)(v121 + v120) = v116;
      v122 = swift_allocObject(&unk_1001ECBD8, 49, 7);
      *(_QWORD *)(v122 + 16) = v112;
      *(_QWORD *)(v122 + 24) = v115;
      *(_QWORD *)(v122 + 32) = sub_100165D24;
      *(_QWORD *)(v122 + 40) = v121;
      *(_BYTE *)(v122 + 48) = 1;
      swift_retain(v116);
      swift_unknownObjectRetain(v112);
      v123 = v115;
      swift_retain(v121);
      sub_1000F7A44((uint64_t)sub_100164E44, v122);
      swift_release(v116);
      swift_release(v121);
      swift_unknownObjectRelease(v112);

      swift_release(v122);
    }
    else
    {
      v124 = static os_log_type_t.error.getter(v111);
      v125 = qword_100218DE8;
      v126 = swift_allocObject(v133, 72, 7);
      *(_OWORD *)(v126 + 16) = v132;
      v127 = sub_1000DA63C();
      v128 = v131;
      *(_QWORD *)(v126 + 56) = &type metadata for String;
      *(_QWORD *)(v126 + 64) = v128;
      *(_QWORD *)(v126 + 32) = v127;
      *(_QWORD *)(v126 + 40) = v129;
      os_log(_:dso:log:_:_:)(v124, &_mh_execute_header, v125, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v126);
      swift_bridgeObjectRelease(v126);
    }
    sub_1000BA068(0, v136, v134, v135);
    sub_1000AE58C(v83, type metadata accessor for BTDeferredRecord);
    sub_1000AE58C(v76, type metadata accessor for DeviceSupportInformationRecord);
    v74 = v158;
    goto LABEL_12;
  }
  __break(1u);
  swift_release(v135);
  swift_release(v136);
  objc_autoreleasePoolPop(v105);
  __break(1u);
  swift_release(v135);
  swift_release(v136);
  objc_autoreleasePoolPop(v110);
  __break(1u);
}

void sub_100157E70(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  objc_class *v72;
  Class isa;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  objc_class *v80;
  Class v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  double v100;
  int *v101;
  _QWORD *v102;
  void *v103;
  _QWORD *v104;
  void *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  objc_class *v115;
  Class v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  Class v172;

  v160 = a4;
  v161 = a6;
  v159 = a5;
  v140 = a2;
  v150 = type metadata accessor for DispatchPredicate(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (uint64_t *)((char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v147 = type metadata accessor for Date(0);
  v145 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v142 = (char *)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for UUID(0);
  v144 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v141 = (char *)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v143);
  v152 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v165 = v12;
  v166 = v13;
  __chkstk_darwin(v12);
  v164 = (char *)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v168 = (char *)&v135 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v135 - v18;
  v167 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v167);
  v169 = (uint64_t *)((char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for MagicPairingSettingsRecord(0);
  v170 = *(_QWORD *)(v21 - 8);
  v171 = v21;
  __chkstk_darwin(v21);
  v136 = (uint64_t)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v139 = (uint64_t)&v135 - v24;
  __chkstk_darwin(v25);
  v138 = (uint64_t)&v135 - v26;
  __chkstk_darwin(v27);
  v151 = (uint64_t)&v135 - v28;
  v137 = v29;
  __chkstk_darwin(v30);
  v32 = (char *)&v135 - v31;
  v34 = static os_log_type_t.default.getter(v33);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v35 = qword_100218DE8;
  v154 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v36 = swift_allocObject(v154, 72, 7);
  v153 = xmmword_100184870;
  *(_OWORD *)(v36 + 16) = xmmword_100184870;
  sub_1000AE548(a1, (uint64_t)v32, type metadata accessor for MagicPairingSettingsRecord);
  v37 = sub_1000C8310();
  v39 = v38;
  v158 = v32;
  sub_1000AE58C((uint64_t)v32, type metadata accessor for MagicPairingSettingsRecord);
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  v155 = sub_1000A0DF4();
  *(_QWORD *)(v36 + 64) = v155;
  *(_QWORD *)(v36 + 32) = v37;
  *(_QWORD *)(v36 + 40) = v39;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Remove magic device record: %@", 30, 2, v36);
  swift_bridgeObjectRelease(v36);
  v157 = a3;
  v40 = sub_100129690();
  v41 = *(int *)(v171 + 24);
  v156 = a1;
  v42 = (uint64_t *)(a1 + v41);
  v43 = *v42;
  v162 = v42[1];
  v163 = v43;
  if (qword_100210160 != -1)
    swift_once(&qword_100210160, sub_1000C81B8);
  v44 = v165;
  v45 = sub_1000A0A00(v165, (uint64_t)qword_100218C90);
  v46 = v166;
  (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v19, v45, v44);
  v47 = objc_autoreleasePoolPush();
  v49 = URL.path.getter(v48);
  v51 = v50;
  v52 = v164;
  URL.appendingPathComponent(_:)(v49);
  swift_bridgeObjectRelease(v51);
  v53 = v168;
  URL.appendingPathComponent(_:)(v163);
  v54 = *(void (**)(char *, uint64_t))(v46 + 8);
  v54(v52, v44);
  objc_autoreleasePoolPop(v47);
  v55 = objc_autoreleasePoolPush();
  __chkstk_darwin(v55);
  *(&v135 - 2) = (uint64_t)v53;
  *(&v135 - 1) = v40;
  v56 = v169;
  OS_dispatch_queue.sync<A>(execute:)(v169, sub_1001685A8, &v135 - 4, v167);
  objc_autoreleasePoolPop(v55);
  v54(v53, v44);
  swift_release(v40);
  v54(v19, v44);
  v57 = v171;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v170 + 48))(v56, 1, v171) == 1)
  {
    v58 = sub_1000A1000((uint64_t)v56, (uint64_t *)&unk_100212190);
    v59 = static os_log_type_t.error.getter(v58);
    v60 = qword_100218DE8;
    v61 = swift_allocObject(v154, 72, 7);
    *(_OWORD *)(v61 + 16) = v153;
    v62 = (uint64_t)v158;
    sub_1000AE548(v156, (uint64_t)v158, type metadata accessor for MagicPairingSettingsRecord);
    v63 = sub_1000C8310();
    v65 = v64;
    sub_1000AE58C(v62, type metadata accessor for MagicPairingSettingsRecord);
    v66 = v155;
    *(_QWORD *)(v61 + 56) = &type metadata for String;
    *(_QWORD *)(v61 + 64) = v66;
    *(_QWORD *)(v61 + 32) = v63;
    *(_QWORD *)(v61 + 40) = v65;
    os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v60, "Magic Record not found to remove: %@", 36, 2, v61);
    swift_bridgeObjectRelease(v61);
    sub_1000BA068(0, v160, v159, v161);
  }
  else
  {
    v67 = v151;
    sub_1000C6CD0((uint64_t)v56, v151, type metadata accessor for MagicPairingSettingsRecord);
    v68 = objc_autoreleasePoolPush();
    v69 = (uint64_t *)(v67 + *(int *)(v57 + 20));
    v70 = *v69;
    v71 = v69[1];
    sub_1000A0E74(*v69, v71);
    sub_100109DEC(v70, v71);
    isa = v72;
    sub_1000A103C(v70, v71);
    v74 = v138;
    sub_1000AE548(v67, v138, type metadata accessor for MagicPairingSettingsRecord);
    if (!isa)
      isa = sub_1000A99D8(v74).super.isa;
    sub_1000AE58C(v74, type metadata accessor for MagicPairingSettingsRecord);
    v75 = (uint64_t)v152;
    v172 = isa;
    sub_1000CBDA8((id *)&v172);
    objc_autoreleasePoolPop(v68);
    v76 = -[objc_class recordID](isa, "recordID");

    v77 = objc_autoreleasePoolPush();
    v78 = *v69;
    v79 = v69[1];
    sub_1000A0E74(*v69, v79);
    sub_100109DEC(v78, v79);
    v81 = v80;
    sub_1000A103C(v78, v79);
    v82 = v139;
    sub_1000AE548(v67, v139, type metadata accessor for MagicPairingSettingsRecord);
    v169 = v69;
    if (!v81)
      v81 = sub_1000A99D8(v82).super.isa;
    sub_1000AE58C(v82, type metadata accessor for MagicPairingSettingsRecord);
    v172 = v81;
    sub_1000CBDA8((id *)&v172);
    objc_autoreleasePoolPop(v77);
    v84 = CKRecord.recordType.getter(v83);
    v86 = v85;

    v87 = v84;
    v88 = v157;
    sub_10013A5F4(v76, v87, v86, v140 & 1);

    v89 = v86;
    v90 = v88;
    swift_bridgeObjectRelease(v89);
    v91 = v144;
    v92 = v141;
    v93 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v144 + 16))(v141, v67, v146);
    v94 = (uint64_t *)(v67 + *(int *)(v171 + 24));
    v96 = *v94;
    v95 = v94[1];
    v97 = swift_bridgeObjectRetain(v95);
    v98 = v142;
    v99 = Date.init()(v97);
    v100 = Date.timeIntervalSince1970.getter(v99);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v98, v147);
    *(_BYTE *)v75 = 1;
    strcpy((char *)(v75 + 8), "MagicSettings");
    *(_WORD *)(v75 + 22) = -4864;
    v101 = (int *)v143;
    (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v75 + *(int *)(v143 + 24), v92, v93);
    v102 = (_QWORD *)(v75 + v101[7]);
    *v102 = v96;
    v102[1] = v95;
    *(double *)(v75 + v101[8]) = v100;
    *(_OWORD *)(v75 + v101[9]) = xmmword_100187E30;
    v103 = objc_autoreleasePoolPush();
    sub_100146F6C(v90, v75);
    objc_autoreleasePoolPop(v103);
    v104 = (_QWORD *)sub_10012A6A0();
    v105 = (void *)v104[9];
    v106 = v148;
    *v148 = v105;
    v107 = v149;
    v108 = v150;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v149 + 104))(v106, enum case for DispatchPredicate.notOnQueue(_:), v150);
    v109 = v105;
    LOBYTE(v96) = _dispatchPreconditionTest(_:)(v106);
    (*(void (**)(_QWORD *, uint64_t))(v107 + 8))(v106, v108);
    if ((v96 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v172, sub_100165060, v104, &type metadata for Bool);
      v110 = swift_unknownObjectRelease(v104);
      if ((v172 & 1) != 0)
      {
        v111 = sub_10012A6A0();
        v112 = objc_autoreleasePoolPush();
        v113 = *v169;
        v114 = v169[1];
        sub_1000A0E74(*v169, v114);
        sub_100109DEC(v113, v114);
        v116 = v115;
        sub_1000A103C(v113, v114);
        v117 = v136;
        sub_1000AE548(v67, v136, type metadata accessor for MagicPairingSettingsRecord);
        if (!v116)
          v116 = sub_1000A99D8(v117).super.isa;
        sub_1000AE58C(v117, type metadata accessor for MagicPairingSettingsRecord);
        v172 = v116;
        sub_1000CBDA8((id *)&v172);
        objc_autoreleasePoolPop(v112);
        v118 = -[objc_class recordID](v116, "recordID");

        v119 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v119 + 16, v157);
        v120 = (uint64_t)v158;
        sub_1000AE548(v67, (uint64_t)v158, type metadata accessor for MagicPairingSettingsRecord);
        v121 = *(unsigned __int8 *)(v170 + 80);
        v122 = (v121 + 16) & ~v121;
        v123 = (v137 + v122 + 7) & 0xFFFFFFFFFFFFFFF8;
        v124 = swift_allocObject(&unk_1001ECC00, v123 + 8, v121 | 7);
        sub_1000C6CD0(v120, v124 + v122, type metadata accessor for MagicPairingSettingsRecord);
        *(_QWORD *)(v124 + v123) = v119;
        v125 = swift_allocObject(&unk_1001ECC28, 49, 7);
        *(_QWORD *)(v125 + 16) = v111;
        *(_QWORD *)(v125 + 24) = v118;
        *(_QWORD *)(v125 + 32) = sub_10016507C;
        *(_QWORD *)(v125 + 40) = v124;
        *(_BYTE *)(v125 + 48) = 1;
        swift_retain(v119);
        swift_unknownObjectRetain(v111);
        v126 = v118;
        swift_retain(v124);
        sub_1000F7A44((uint64_t)sub_100164E44, v125);
        swift_release(v119);
        swift_release(v124);
        swift_unknownObjectRelease(v111);

        swift_release(v125);
      }
      else
      {
        v127 = static os_log_type_t.error.getter(v110);
        v128 = qword_100218DE8;
        v129 = swift_allocObject(v154, 72, 7);
        *(_OWORD *)(v129 + 16) = v153;
        v130 = (uint64_t)v158;
        sub_1000AE548(v156, (uint64_t)v158, type metadata accessor for MagicPairingSettingsRecord);
        v131 = sub_1000C8310();
        v133 = v132;
        sub_1000AE58C(v130, type metadata accessor for MagicPairingSettingsRecord);
        v134 = v155;
        *(_QWORD *)(v129 + 56) = &type metadata for String;
        *(_QWORD *)(v129 + 64) = v134;
        *(_QWORD *)(v129 + 32) = v131;
        *(_QWORD *)(v129 + 40) = v133;
        os_log(_:dso:log:_:_:)(v127, &_mh_execute_header, v128, "CloudCoordinator not available. Defer deleting magic record - %@", 64, 2, v129);
        swift_bridgeObjectRelease(v129);
      }
      sub_1000BA068(0, v160, v159, v161);
      sub_1000AE58C(v75, type metadata accessor for BTDeferredRecord);
      sub_1000AE58C(v67, type metadata accessor for MagicPairingSettingsRecord);
    }
    else
    {
      __break(1u);
      swift_release(v161);
      swift_release(v160);
      objc_autoreleasePoolPop(v104);
      __break(1u);
    }
  }
}

void sub_100158AEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  objc_class *v42;
  Class isa;
  char *v44;
  uint64_t *v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  objc_class *v50;
  Class v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  double v66;
  int *v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  objc_class *v82;
  Class v83;
  char *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  id v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  id v97;
  _QWORD *v98;
  void *v99;
  id v100;
  id v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  id v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  _QWORD *v147;
  id aBlock[3];
  ValueMetadata *v149;
  unint64_t v150;
  _QWORD *v151;

  v146 = a2;
  v9 = type metadata accessor for DispatchPredicate(0);
  v143 = *(_QWORD *)(v9 - 8);
  v144 = v9;
  __chkstk_darwin(v9);
  v142 = (uint64_t *)((char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v141 = type metadata accessor for Date(0);
  v139 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v12 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for UUID(0);
  v138 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v136 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v137);
  v145 = (uint64_t *)((char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v135 = type metadata accessor for DispatchWorkItemFlags(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for DispatchQoS(0);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)swift_allocObject(&unk_1001ECC50, 40, 7);
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v149 = &type metadata for AudioAccessoryFeatures;
  v150 = sub_1000A42C4();
  swift_retain(a3);
  swift_retain(a5);
  v22 = isFeatureEnabled(_:)(aBlock);
  v23 = sub_1000A2140(aBlock);
  if ((v22 & 1) == 0)
  {
    v91 = sub_1000D8604();
    v92 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v91, 0, 0);
    *v93 = 0x8000000000000038;
    sub_1000BA068(v92, a3, a4, a5);
    swift_errorRelease(v92);
    v94 = v21;
LABEL_20:
    swift_release(v94);
    return;
  }
  v126 = v12;
  v127 = a4;
  v124 = a3;
  v125 = a5;
  v129 = v21;
  v24 = static os_log_type_t.default.getter(v23);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v25 = qword_100218DE8;
  v123 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v26 = swift_allocObject(v123, 72, 7);
  v122 = xmmword_100184870;
  *(_OWORD *)(v26 + 16) = xmmword_100184870;
  v27 = a1;
  v28 = objc_msgSend(v27, "description");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  *(_QWORD *)(v26 + 56) = &type metadata for String;
  v121 = sub_1000A0DF4();
  *(_QWORD *)(v26 + 64) = v121;
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v31;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Remove AADeviceRecord: %@", 25, 2, v26);
  swift_bridgeObjectRelease(v26);
  v32 = v146;
  v33 = sub_100129690();
  v128 = v27;
  v34 = *(_QWORD *)&v27[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  v35 = *(_QWORD *)&v27[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
  if (qword_1002101B0 != -1)
    swift_once(&qword_1002101B0, sub_100106014);
  v36 = sub_1000A0A00(v17, (uint64_t)qword_100218D68);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v36, v17);
  v37 = (char *)sub_100127638(v34, v35, (uint64_t)v20, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
  swift_release(v33);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (!v37)
  {
    v95 = *(void **)(v32 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v96 = (_QWORD *)swift_allocObject(&unk_1001ECC78, 40, 7);
    v97 = v128;
    v96[2] = v128;
    v96[3] = sub_1001683B0;
    v98 = v129;
    v96[4] = v129;
    v150 = (unint64_t)sub_100168634;
    v151 = v96;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000E6A24;
    v149 = (ValueMetadata *)&unk_1001ECC90;
    v99 = _Block_copy(aBlock);
    v100 = v97;
    v101 = v95;
    v102 = swift_retain(v98);
    v103 = v130;
    static DispatchQoS.unspecified.getter(v102);
    v147 = _swiftEmptyArrayStorage;
    v104 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v105 = sub_1000A0980(&qword_100211D00);
    v106 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v107 = v133;
    v108 = v105;
    v109 = v135;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v147, v108, v106, v135, v104);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v103, v107, v99);
    _Block_release(v99);

    (*(void (**)(char *, uint64_t))(v134 + 8))(v107, v109);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v103, v132);
    v110 = v151;
    swift_release(v98);
    v94 = v110;
    goto LABEL_20;
  }
  v38 = objc_autoreleasePoolPush();
  v39 = (uint64_t *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v40 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v41 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
  sub_1000A0E74(v40, v41);
  sub_100109DEC(v40, v41);
  isa = v42;
  sub_1000A103C(v40, v41);
  if (!isa)
  {
    v44 = v37;
    isa = sub_1000A9DB8((uint64_t)v44).super.isa;

  }
  v45 = v145;
  aBlock[0] = isa;
  sub_10010894C(aBlock);
  objc_autoreleasePoolPop(v38);
  v46 = -[objc_class recordID](isa, "recordID");

  v47 = objc_autoreleasePoolPush();
  v48 = *v39;
  v49 = v39[1];
  v145 = v39;
  sub_1000A0E74(v48, v49);
  sub_100109DEC(v48, v49);
  v51 = v50;
  sub_1000A103C(v48, v49);
  if (!v51)
  {
    v52 = v37;
    v51 = sub_1000A9DB8((uint64_t)v52).super.isa;

  }
  aBlock[0] = v51;
  sub_10010894C(aBlock);
  objc_autoreleasePoolPop(v47);
  v54 = CKRecord.recordType.getter(v53);
  v56 = v55;

  v57 = v146;
  sub_10013A5F4(v46, v54, v56, 0);

  swift_bridgeObjectRelease(v56);
  v58 = v138;
  v59 = v136;
  v60 = v140;
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v136, &v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier], v140);
  v62 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  v61 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
  v63 = swift_bridgeObjectRetain(v61);
  v64 = v126;
  v65 = Date.init()(v63);
  v66 = Date.timeIntervalSince1970.getter(v65);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v64, v141);
  *(_BYTE *)v45 = 1;
  strcpy((char *)v45 + 8, "AADeviceRecord");
  *((_BYTE *)v45 + 23) = -18;
  v67 = (int *)v137;
  (*(void (**)(_BYTE *, char *, uint64_t))(v58 + 32))((_BYTE *)v45 + *(int *)(v137 + 24), v59, v60);
  v68 = (uint64_t *)((char *)v45 + v67[7]);
  *v68 = v62;
  v68[1] = v61;
  *(double *)((char *)v45 + v67[8]) = v66;
  *(_OWORD *)((char *)v45 + v67[9]) = xmmword_100187E30;
  v69 = objc_autoreleasePoolPush();
  sub_100146F6C(v57, (uint64_t)v45);
  objc_autoreleasePoolPop(v69);
  v70 = (_QWORD *)sub_10012A6A0();
  v71 = (void *)v70[9];
  v72 = v142;
  v73 = v143;
  *v142 = v71;
  v74 = v144;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for DispatchPredicate.notOnQueue(_:), v144);
  v75 = v71;
  LOBYTE(v60) = _dispatchPreconditionTest(_:)(v72);
  (*(void (**)(_QWORD *, uint64_t))(v73 + 8))(v72, v74);
  v76 = v127;
  if ((v60 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v70, &type metadata for Bool);
    v77 = swift_unknownObjectRelease(v70);
    if (((uint64_t)aBlock[0] & 1) != 0)
    {
      v78 = sub_10012A6A0();
      v79 = objc_autoreleasePoolPush();
      v80 = *v145;
      v81 = v145[1];
      sub_1000A0E74(*v145, v81);
      sub_100109DEC(v80, v81);
      v83 = v82;
      sub_1000A103C(v80, v81);
      if (!v83)
      {
        v84 = v37;
        v83 = sub_1000A9DB8((uint64_t)v84).super.isa;

      }
      aBlock[0] = v83;
      sub_10010894C(aBlock);
      objc_autoreleasePoolPop(v79);
      v85 = -[objc_class recordID](v83, "recordID");

      v86 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v86 + 16, v146);
      v87 = swift_allocObject(&unk_1001ECCC8, 32, 7);
      *(_QWORD *)(v87 + 16) = v37;
      *(_QWORD *)(v87 + 24) = v86;
      v88 = swift_allocObject(&unk_1001ECCF0, 49, 7);
      *(_QWORD *)(v88 + 16) = v78;
      *(_QWORD *)(v88 + 24) = v85;
      *(_QWORD *)(v88 + 32) = sub_100168644;
      *(_QWORD *)(v88 + 40) = v87;
      *(_BYTE *)(v88 + 48) = 1;
      v89 = v37;
      swift_retain(v86);
      swift_unknownObjectRetain(v78);
      v90 = v85;
      swift_retain(v87);
      sub_1000F7A44((uint64_t)sub_100164E44, v88);
      swift_unknownObjectRelease(v78);

      swift_release(v86);
      swift_release(v87);
      swift_release(v88);
    }
    else
    {
      v111 = static os_log_type_t.error.getter(v77);
      v112 = qword_100218DE8;
      v113 = swift_allocObject(v123, 72, 7);
      *(_OWORD *)(v113 + 16) = v122;
      v114 = v128;
      v115 = objc_msgSend(v114, "description");
      v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v118 = v117;

      v119 = v121;
      *(_QWORD *)(v113 + 56) = &type metadata for String;
      *(_QWORD *)(v113 + 64) = v119;
      *(_QWORD *)(v113 + 32) = v116;
      *(_QWORD *)(v113 + 40) = v118;
      os_log(_:dso:log:_:_:)(v111, &_mh_execute_header, v112, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v113);
      swift_bridgeObjectRelease(v113);
    }
    sub_1000BA068(0, v124, v76, v125);

    sub_1000AE58C((uint64_t)v45, type metadata accessor for BTDeferredRecord);
    v94 = v129;
    goto LABEL_20;
  }
  __break(1u);
  swift_release(v125);
  swift_release(v124);
  objc_autoreleasePoolPop(v70);
  __break(1u);
}

void sub_100159670(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  objc_class *v43;
  Class isa;
  char *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  objc_class *v51;
  Class v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  double v67;
  int *v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  objc_class *v83;
  Class v84;
  char *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  id v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  _QWORD *v97;
  id v98;
  _QWORD *v99;
  void *v100;
  id v101;
  id v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  id v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD aBlock[3];
  ValueMetadata *v150;
  unint64_t v151;
  _QWORD *v152;

  v147 = a2;
  v9 = type metadata accessor for DispatchPredicate(0);
  v144 = *(_QWORD *)(v9 - 8);
  v145 = v9;
  __chkstk_darwin(v9);
  v143 = (uint64_t *)((char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Date(0);
  v140 = *(_QWORD *)(v11 - 8);
  v141 = v11;
  __chkstk_darwin(v11);
  v137 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for UUID(0);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v14 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v138);
  v146 = (uint64_t *)((char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v136 = type metadata accessor for DispatchWorkItemFlags(0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v134 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for DispatchQoS(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (_QWORD *)swift_allocObject(&unk_1001ECD18, 40, 7);
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v150 = &type metadata for AudioAccessoryFeatures;
  v151 = sub_1000A42C4();
  swift_retain(a3);
  swift_retain(a5);
  v23 = isFeatureEnabled(_:)(aBlock);
  v24 = sub_1000A2140(aBlock);
  if ((v23 & 1) == 0)
  {
    v92 = sub_1000D8604();
    v93 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v92, 0, 0);
    *v94 = 0x8000000000000038;
    sub_1000BA068(v93, a3, a4, a5);
    swift_errorRelease(v93);
    v95 = v22;
LABEL_20:
    swift_release(v95);
    return;
  }
  v127 = v14;
  v128 = a4;
  v125 = a3;
  v126 = a5;
  v130 = v22;
  v25 = static os_log_type_t.default.getter(v24);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v26 = qword_100218DE8;
  v124 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v27 = swift_allocObject(v124, 72, 7);
  v123 = xmmword_100184870;
  *(_OWORD *)(v27 + 16) = xmmword_100184870;
  v28 = a1;
  v29 = objc_msgSend(v28, "description");
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  *(_QWORD *)(v27 + 56) = &type metadata for String;
  v122 = sub_1000A0DF4();
  *(_QWORD *)(v27 + 64) = v122;
  *(_QWORD *)(v27 + 32) = v30;
  *(_QWORD *)(v27 + 40) = v32;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Remove AAProxCardsRecord: %@", 28, 2, v27);
  swift_bridgeObjectRelease(v27);
  v33 = v147;
  v34 = sub_100129690();
  v129 = v28;
  v35 = *(_QWORD *)&v28[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  v36 = *(_QWORD *)&v28[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  if (qword_100210130 != -1)
    swift_once(&qword_100210130, sub_1000A5BC0);
  v37 = sub_1000A0A00(v18, (uint64_t)qword_100218C00);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v37, v18);
  v38 = (char *)sub_100127638(v35, v36, (uint64_t)v21, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
  swift_release(v34);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if (!v38)
  {
    v96 = *(void **)(v33 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v97 = (_QWORD *)swift_allocObject(&unk_1001ECD40, 40, 7);
    v98 = v129;
    v97[2] = v129;
    v97[3] = sub_1001683B0;
    v99 = v130;
    v97[4] = v130;
    v151 = (unint64_t)sub_100168634;
    v152 = v97;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v150 = (ValueMetadata *)&unk_1001ECD58;
    v100 = _Block_copy(aBlock);
    v101 = v98;
    v102 = v96;
    v103 = swift_retain(v99);
    v104 = v131;
    static DispatchQoS.unspecified.getter(v103);
    v148 = _swiftEmptyArrayStorage;
    v105 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v106 = sub_1000A0980(&qword_100211D00);
    v107 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v108 = v134;
    v109 = v106;
    v110 = v136;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v148, v109, v107, v136, v105);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v108, v100);
    _Block_release(v100);

    (*(void (**)(char *, uint64_t))(v135 + 8))(v108, v110);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v104, v133);
    v111 = v152;
    swift_release(v99);
    v95 = v111;
    goto LABEL_20;
  }
  v39 = objc_autoreleasePoolPush();
  v40 = (uint64_t *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v41 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v42 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
  sub_1000A0E74(v41, v42);
  sub_100109DEC(v41, v42);
  isa = v43;
  sub_1000A103C(v41, v42);
  if (!isa)
  {
    v45 = v38;
    isa = sub_1000A9D94((uint64_t)v45).super.isa;

  }
  v46 = (uint64_t)v146;
  aBlock[0] = isa;
  sub_1000A89A0((unint64_t)aBlock);
  objc_autoreleasePoolPop(v39);
  v47 = -[objc_class recordID](isa, "recordID");

  v48 = objc_autoreleasePoolPush();
  v49 = *v40;
  v50 = v40[1];
  v146 = v40;
  sub_1000A0E74(v49, v50);
  sub_100109DEC(v49, v50);
  v52 = v51;
  sub_1000A103C(v49, v50);
  if (!v52)
  {
    v53 = v38;
    v52 = sub_1000A9D94((uint64_t)v53).super.isa;

  }
  aBlock[0] = v52;
  sub_1000A89A0((unint64_t)aBlock);
  objc_autoreleasePoolPop(v48);
  v55 = CKRecord.recordType.getter(v54);
  v57 = v56;

  v58 = v147;
  sub_10013A5F4(v47, v55, v57, 0);

  swift_bridgeObjectRelease(v57);
  v59 = v139;
  v60 = v127;
  v61 = v142;
  (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v127, &v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier], v142);
  v63 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  v62 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  v64 = swift_bridgeObjectRetain(v62);
  v65 = v137;
  v66 = Date.init()(v64);
  v67 = Date.timeIntervalSince1970.getter(v66);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v65, v141);
  *(_BYTE *)v46 = 1;
  *(_QWORD *)(v46 + 8) = 0xD000000000000011;
  *(_QWORD *)(v46 + 16) = 0x80000001001B1050;
  v68 = (int *)v138;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v46 + *(int *)(v138 + 24), v60, v61);
  v69 = (_QWORD *)(v46 + v68[7]);
  *v69 = v63;
  v69[1] = v62;
  *(double *)(v46 + v68[8]) = v67;
  *(_OWORD *)(v46 + v68[9]) = xmmword_100187E30;
  v70 = objc_autoreleasePoolPush();
  sub_100146F6C(v58, v46);
  objc_autoreleasePoolPop(v70);
  v71 = (_QWORD *)sub_10012A6A0();
  v72 = (void *)v71[9];
  v73 = v143;
  v74 = v144;
  *v143 = v72;
  v75 = v145;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v74 + 104))(v73, enum case for DispatchPredicate.notOnQueue(_:), v145);
  v76 = v72;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)(v73);
  (*(void (**)(_QWORD *, uint64_t))(v74 + 8))(v73, v75);
  v77 = v128;
  if ((v61 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v71, &type metadata for Bool);
    v78 = swift_unknownObjectRelease(v71);
    if ((aBlock[0] & 1) != 0)
    {
      v79 = sub_10012A6A0();
      v80 = objc_autoreleasePoolPush();
      v81 = *v146;
      v82 = v146[1];
      sub_1000A0E74(*v146, v82);
      sub_100109DEC(v81, v82);
      v84 = v83;
      sub_1000A103C(v81, v82);
      if (!v84)
      {
        v85 = v38;
        v84 = sub_1000A9D94((uint64_t)v85).super.isa;

      }
      aBlock[0] = v84;
      sub_1000A89A0((unint64_t)aBlock);
      objc_autoreleasePoolPop(v80);
      v86 = -[objc_class recordID](v84, "recordID");

      v87 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v87 + 16, v147);
      v88 = swift_allocObject(&unk_1001ECD90, 32, 7);
      *(_QWORD *)(v88 + 16) = v38;
      *(_QWORD *)(v88 + 24) = v87;
      v89 = swift_allocObject(&unk_1001ECDB8, 49, 7);
      *(_QWORD *)(v89 + 16) = v79;
      *(_QWORD *)(v89 + 24) = v86;
      *(_QWORD *)(v89 + 32) = sub_100168648;
      *(_QWORD *)(v89 + 40) = v88;
      *(_BYTE *)(v89 + 48) = 1;
      v90 = v38;
      swift_retain(v87);
      swift_unknownObjectRetain(v79);
      v91 = v86;
      swift_retain(v88);
      sub_1000F7A44((uint64_t)sub_100164E44, v89);
      swift_unknownObjectRelease(v79);

      swift_release(v87);
      swift_release(v88);
      swift_release(v89);
    }
    else
    {
      v112 = static os_log_type_t.error.getter(v78);
      v113 = qword_100218DE8;
      v114 = swift_allocObject(v124, 72, 7);
      *(_OWORD *)(v114 + 16) = v123;
      v115 = v129;
      v116 = objc_msgSend(v115, "description");
      v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
      v119 = v118;

      v120 = v122;
      *(_QWORD *)(v114 + 56) = &type metadata for String;
      *(_QWORD *)(v114 + 64) = v120;
      *(_QWORD *)(v114 + 32) = v117;
      *(_QWORD *)(v114 + 40) = v119;
      os_log(_:dso:log:_:_:)(v112, &_mh_execute_header, v113, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v114);
      swift_bridgeObjectRelease(v114);
    }
    sub_1000BA068(0, v125, v77, v126);

    sub_1000AE58C(v46, type metadata accessor for BTDeferredRecord);
    v95 = v130;
    goto LABEL_20;
  }
  __break(1u);
  swift_release(v126);
  swift_release(v125);
  objc_autoreleasePoolPop(v71);
  __break(1u);
}

uint64_t sub_10015A1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100163868(a1, a2, a3, a4, a5, a6, a7, a8, sub_1001685D0, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001565B8, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000BA068, sub_1001685BC, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001571A8, (uint64_t)sub_1001685A8, (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_100157E70, sub_100158AEC, sub_100159670);
}

uint64_t sub_10015A25C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10015A2EC(a1, a2, a3, a4, a5, (uint64_t)sub_1001685BC, (uint64_t)sub_10016860C, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000BD790, (uint64_t)&unk_1001ECA20, (uint64_t)sub_10016863C);
}

uint64_t sub_10015A2A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10015A2EC(a1, a2, a3, a4, a5, (uint64_t)sub_1001685BC, (uint64_t)sub_10016860C, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000BD774, (uint64_t)&unk_1001EC9F8, (uint64_t)sub_10016863C);
}

uint64_t sub_10015A2EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_QWORD, uint64_t, uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned __int8 v61;
  uint64_t v62;
  void *v63;
  Class v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Class v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Class v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  Class v98;
  uint64_t v99;
  uint64_t v100;
  objc_class *v101;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  Class v122[3];

  v120 = a8;
  v121 = a5;
  v106 = a7;
  v116 = a6;
  v118 = a3;
  v119 = a4;
  v12 = type metadata accessor for UUID(0);
  __chkstk_darwin(v12);
  v104 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v103 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v103 - v22;
  v112 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v112);
  v115 = (uint64_t *)((char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = type metadata accessor for DeviceSupportInformationRecord(0);
  v113 = *(_QWORD *)(v25 - 8);
  v114 = v25;
  __chkstk_darwin(v25);
  v103 = (uint64_t)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v105 = (uint64_t)&v103 - v28;
  __chkstk_darwin(v29);
  v107 = a2;
  v108 = (uint64_t)&v103 - v30;
  v31 = sub_100129690();
  v117 = a1;
  v32 = objc_msgSend(a1, "bluetoothAddress");
  v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v34 = v33;

  if (qword_100210180 != -1)
    swift_once(&qword_100210180, sub_1000DA4F0);
  v35 = sub_1000A0A00(v14, (uint64_t)qword_100218D28);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v23, v35, v14);
  v36 = objc_autoreleasePoolPush();
  v111 = v23;
  v37 = v36;
  v39 = URL.path.getter(v38);
  v41 = v40;
  URL.appendingPathComponent(_:)(v39);
  swift_bridgeObjectRelease(v41);
  v109 = v34;
  URL.appendingPathComponent(_:)(v110);
  v42 = *(void (**)(char *, uint64_t))(v15 + 8);
  v42(v17, v14);
  objc_autoreleasePoolPop(v37);
  v43 = objc_autoreleasePoolPush();
  __chkstk_darwin(v43);
  *(&v103 - 2) = (uint64_t)v20;
  *(&v103 - 1) = v31;
  v44 = v115;
  OS_dispatch_queue.sync<A>(execute:)(v115, v116, &v103 - 4, v112);
  objc_autoreleasePoolPop(v43);
  v42(v20, v14);
  swift_release(v31);
  swift_bridgeObjectRelease(v109);
  v42(v111, v14);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v113 + 48))(v44, 1, v114) == 1)
  {
    v45 = sub_1000A1000((uint64_t)v44, &qword_100210CE8);
    v46 = static os_log_type_t.default.getter(v45);
    v47 = v117;
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v48 = qword_100218DE8;
    v49 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v50 = swift_allocObject(v49, 72, 7);
    *(_OWORD *)(v50 + 16) = xmmword_100184870;
    v51 = v47;
    v52 = objc_msgSend(v51, "description");
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    *(_QWORD *)(v50 + 56) = &type metadata for String;
    *(_QWORD *)(v50 + 64) = sub_1000A0DF4();
    *(_QWORD *)(v50 + 32) = v53;
    *(_QWORD *)(v50 + 40) = v55;
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v48, "Add DeviceSupportInformationRecord: %@", 38, 2, v50);
    swift_bridgeObjectRelease(v50);
    v56 = v51;
    v57 = (uint64_t)v104;
    UUID.init()(v56);
    v58 = v108;
    sub_1000DAE60(v57, v56, v108);
LABEL_15:
    v94 = v107;
    v95 = sub_100129690();
    __chkstk_darwin(v95);
    *(&v103 - 2) = v96;
    *(&v103 - 1) = v58;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), v106, &v103 - 4, &type metadata for () + 1);
    swift_release(v95);
    v120(0, v118, v119, v121);
    v97 = objc_autoreleasePoolPush();
    sub_1000DC7F8(v58, v122);
    objc_autoreleasePoolPop(v97);
    v98 = v122[0];
    v99 = sub_10012A6A0();
    v100 = swift_allocObject(a9, 32, 7);
    *(_QWORD *)(v100 + 16) = v94;
    *(_QWORD *)(v100 + 24) = v98;
    swift_retain(v94);
    v101 = v98;
    sub_1000F8080(v101, 1, a10, v100);

    swift_unknownObjectRelease(v99);
    swift_release(v100);
    return sub_1000AE58C(v58, type metadata accessor for DeviceSupportInformationRecord);
  }
  v59 = v105;
  sub_1000C6CD0((uint64_t)v44, v105, type metadata accessor for DeviceSupportInformationRecord);
  v60 = v117;
  v61 = sub_1000DDF50(v117);
  v62 = v103;
  sub_1000AE548(v59, v103, type metadata accessor for DeviceSupportInformationRecord);
  if ((v61 & 1) != 0
    || (v63 = objc_autoreleasePoolPush(),
        sub_1000DC7F8(v62, v122),
        objc_autoreleasePoolPop(v63),
        v64 = v122[0],
        v65 = -[objc_class recordChangeTag](v122[0], "recordChangeTag"),
        v64,
        !v65))
  {
    v80 = sub_1000AE58C(v62, type metadata accessor for DeviceSupportInformationRecord);
    LODWORD(v116) = static os_log_type_t.default.getter(v80);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v81 = qword_100218DE8;
    v82 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v83 = swift_allocObject(v82, 112, 7);
    *(_OWORD *)(v83 + 16) = xmmword_1001858F0;
    v84 = sub_1000DA63C();
    v86 = v85;
    v87 = v59;
    *(_QWORD *)(v83 + 56) = &type metadata for String;
    v88 = sub_1000A0DF4();
    *(_QWORD *)(v83 + 64) = v88;
    *(_QWORD *)(v83 + 32) = v84;
    *(_QWORD *)(v83 + 40) = v86;
    v89 = v60;
    v90 = objc_msgSend(v89, "description");
    v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
    v93 = v92;

    *(_QWORD *)(v83 + 96) = &type metadata for String;
    *(_QWORD *)(v83 + 104) = v88;
    *(_QWORD *)(v83 + 72) = v91;
    *(_QWORD *)(v83 + 80) = v93;
    os_log(_:dso:log:_:_:)(v116, &_mh_execute_header, v81, "Updating cached DeviceSupportInformationRecord: %@ with %@", 58, 2, v83);
    swift_bridgeObjectRelease(v83);
    v58 = v108;
    sub_1000AE548(v87, v108, type metadata accessor for DeviceSupportInformationRecord);
    sub_1000DD42C(v89);
    sub_1000AE58C(v87, type metadata accessor for DeviceSupportInformationRecord);
    goto LABEL_15;
  }

  v66 = sub_1000AE58C(v62, type metadata accessor for DeviceSupportInformationRecord);
  v67 = static os_log_type_t.default.getter(v66);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v68 = qword_100218DE8;
  v69 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v70 = swift_allocObject(v69, 112, 7);
  *(_OWORD *)(v70 + 16) = xmmword_1001858F0;
  v71 = sub_1000DA63C();
  v73 = v72;
  *(_QWORD *)(v70 + 56) = &type metadata for String;
  v74 = sub_1000A0DF4();
  *(_QWORD *)(v70 + 64) = v74;
  *(_QWORD *)(v70 + 32) = v71;
  *(_QWORD *)(v70 + 40) = v73;
  v75 = v60;
  v76 = objc_msgSend(v75, "description");
  v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
  v79 = v78;

  *(_QWORD *)(v70 + 96) = &type metadata for String;
  *(_QWORD *)(v70 + 104) = v74;
  *(_QWORD *)(v70 + 72) = v77;
  *(_QWORD *)(v70 + 80) = v79;
  os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v68, "No change from cached %@ [to] %@", 32, 2, v70);
  swift_bridgeObjectRelease(v70);
  v120(0, v118, v119, v121);
  v58 = v59;
  return sub_1000AE58C(v58, type metadata accessor for DeviceSupportInformationRecord);
}

uint64_t sub_10015AC98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10015A2EC(a1, a2, a3, a4, a5, (uint64_t)sub_1001685BC, (uint64_t)sub_10016860C, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000BDC60, (uint64_t)&unk_1001EC980, (uint64_t)sub_100167988);
}

void sub_10015ACE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  void *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  objc_class *v67;
  Class isa;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  objc_class *v75;
  Class v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  double v92;
  int *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  objc_class *v107;
  Class v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  Class v160;

  v149 = a3;
  v150 = a5;
  v148 = a4;
  v141 = type metadata accessor for DispatchPredicate(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (uint64_t *)((char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = type metadata accessor for Date(0);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v133 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for UUID(0);
  v135 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v132 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v134);
  v144 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v153 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v154 = (char *)&v125 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v125 - v17;
  v155 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v155);
  v156 = (uint64_t *)((char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v159 = type metadata accessor for DeviceRecord(0);
  v157 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v128 = (uint64_t)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v126 = (uint64_t)&v125 - v22;
  __chkstk_darwin(v23);
  v131 = (uint64_t)&v125 - v24;
  __chkstk_darwin(v25);
  v129 = (uint64_t)&v125 - v26;
  v127 = v27;
  __chkstk_darwin(v28);
  v143 = (uint64_t *)((char *)&v125 - v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v32 = qword_100218DE8;
  v146 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v33 = swift_allocObject(v146, 72, 7);
  v145 = xmmword_100184870;
  *(_OWORD *)(v33 + 16) = xmmword_100184870;
  v34 = sub_10009C9A8();
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v147 = sub_1000A0DF4();
  *(_QWORD *)(v33 + 64) = v147;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "CloudSync: Remove device record: %@", 35, 2, v33);
  swift_bridgeObjectRelease(v33);
  v142 = a2;
  v37 = sub_100129690();
  v38 = *(int *)(v159 + 24);
  v158 = a1;
  v39 = (uint64_t *)(a1 + v38);
  v151 = *v39;
  v130 = v39;
  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v40 = sub_1000A0A00(v11, (uint64_t)qword_100218BE0);
  v41 = v11;
  v42 = v12;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v152 = v18;
  v43(v18, v40, v41);
  v44 = objc_autoreleasePoolPush();
  v46 = URL.path.getter(v45);
  v48 = v47;
  v49 = v37;
  v50 = v153;
  URL.appendingPathComponent(_:)(v46);
  swift_bridgeObjectRelease(v48);
  v51 = v154;
  URL.appendingPathComponent(_:)(v151);
  v52 = *(void (**)(char *, uint64_t))(v42 + 8);
  v52(v50, v41);
  objc_autoreleasePoolPop(v44);
  v53 = objc_autoreleasePoolPush();
  __chkstk_darwin(v53);
  *(&v125 - 2) = (uint64_t)v51;
  *(&v125 - 1) = v49;
  v54 = v156;
  OS_dispatch_queue.sync<A>(execute:)(v156, sub_1001685D0, &v125 - 4, v155);
  objc_autoreleasePoolPop(v53);
  v52(v51, v41);
  swift_release(v49);
  v52(v152, v41);
  v55 = v159;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v157 + 48))(v54, 1, v159) == 1)
  {
    v56 = sub_1000A1000((uint64_t)v54, &qword_100210CF8);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = qword_100218DE8;
    v59 = swift_allocObject(v146, 72, 7);
    *(_OWORD *)(v59 + 16) = v145;
    v60 = sub_10009C9A8();
    v61 = v147;
    *(_QWORD *)(v59 + 56) = &type metadata for String;
    *(_QWORD *)(v59 + 64) = v61;
    *(_QWORD *)(v59 + 32) = v60;
    *(_QWORD *)(v59 + 40) = v62;
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Record not found to remove: %@", 30, 2, v59);
    swift_bridgeObjectRelease(v59);
    sub_1000BDE90(0, v149, v148, v150);
  }
  else
  {
    v63 = v143;
    sub_1000C6CD0((uint64_t)v54, (uint64_t)v143, type metadata accessor for DeviceRecord);
    v64 = objc_autoreleasePoolPush();
    v65 = *v63;
    v66 = v63[1];
    sub_1000A0E74(*v63, v66);
    sub_100109DEC(v65, v66);
    isa = v67;
    sub_1000A103C(v65, v66);
    v69 = v129;
    sub_1000AE548((uint64_t)v63, v129, type metadata accessor for DeviceRecord);
    if (!isa)
      isa = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v69, type metadata accessor for DeviceRecord);
    v70 = (uint64_t)v144;
    v160 = isa;
    sub_10009E74C((id *)&v160);
    objc_autoreleasePoolPop(v64);
    v71 = -[objc_class recordID](isa, "recordID");

    v72 = objc_autoreleasePoolPush();
    v73 = *v63;
    v74 = v63[1];
    sub_1000A0E74(*v63, v74);
    sub_100109DEC(v73, v74);
    v76 = v75;
    sub_1000A103C(v73, v74);
    v77 = v131;
    sub_1000AE548((uint64_t)v63, v131, type metadata accessor for DeviceRecord);
    if (!v76)
      v76 = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v77, type metadata accessor for DeviceRecord);
    v78 = v142;
    v160 = v76;
    sub_10009E74C((id *)&v160);
    objc_autoreleasePoolPop(v72);
    v80 = CKRecord.recordType.getter(v79);
    v82 = v81;

    sub_10013A5F4(v71, v80, v82, 0);
    swift_bridgeObjectRelease(v82);
    v83 = v158 + *(int *)(v55 + 20);
    v84 = v135;
    v85 = v132;
    v86 = v137;
    (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v132, v83, v137);
    v88 = *v130;
    v87 = v130[1];
    v89 = swift_bridgeObjectRetain(v87);
    v90 = v133;
    v91 = Date.init()(v89);
    v92 = Date.timeIntervalSince1970.getter(v91);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v90, v138);
    *(_BYTE *)v70 = 1;
    strcpy((char *)(v70 + 8), "DeviceRecord");
    *(_BYTE *)(v70 + 21) = 0;
    *(_WORD *)(v70 + 22) = -5120;
    v93 = (int *)v134;
    (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v70 + *(int *)(v134 + 24), v85, v86);
    v94 = (_QWORD *)(v70 + v93[7]);
    *v94 = v88;
    v94[1] = v87;
    *(double *)(v70 + v93[8]) = v92;
    *(_OWORD *)(v70 + v93[9]) = xmmword_100187E30;
    v95 = objc_autoreleasePoolPush();
    sub_100146F6C(v78, v70);
    objc_autoreleasePoolPop(v95);
    v96 = (_QWORD *)sub_10012A6A0();
    v97 = (void *)v96[9];
    v98 = v139;
    *v139 = v97;
    v99 = v140;
    v100 = v141;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v98, enum case for DispatchPredicate.notOnQueue(_:), v141);
    v101 = v97;
    LOBYTE(v88) = _dispatchPreconditionTest(_:)(v98);
    (*(void (**)(_QWORD *, uint64_t))(v99 + 8))(v98, v100);
    if ((v88 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v160, sub_100165060, v96, &type metadata for Bool);
      v102 = swift_unknownObjectRelease(v96);
      if ((v160 & 1) != 0)
      {
        v103 = sub_10012A6A0();
        v104 = objc_autoreleasePoolPush();
        v105 = *v63;
        v106 = v63[1];
        sub_1000A0E74(*v63, v106);
        sub_100109DEC(v105, v106);
        v108 = v107;
        sub_1000A103C(v105, v106);
        v109 = v126;
        sub_1000AE548((uint64_t)v63, v126, type metadata accessor for DeviceRecord);
        if (!v108)
          v108 = sub_1000A9BCC().super.isa;
        sub_1000AE58C(v109, type metadata accessor for DeviceRecord);
        v160 = v108;
        sub_10009E74C((id *)&v160);
        objc_autoreleasePoolPop(v104);
        v110 = -[objc_class recordID](v108, "recordID");

        v111 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v111 + 16, v78);
        v112 = v128;
        sub_1000AE548((uint64_t)v63, v128, type metadata accessor for DeviceRecord);
        v113 = *(unsigned __int8 *)(v157 + 80);
        v114 = (v113 + 16) & ~v113;
        v115 = (v127 + v114 + 7) & 0xFFFFFFFFFFFFFFF8;
        v116 = swift_allocObject(&unk_1001EC688, v115 + 8, v113 | 7);
        sub_1000C6CD0(v112, v116 + v114, type metadata accessor for DeviceRecord);
        *(_QWORD *)(v116 + v115) = v111;
        v117 = swift_allocObject(&unk_1001EC6B0, 49, 7);
        *(_QWORD *)(v117 + 16) = v103;
        *(_QWORD *)(v117 + 24) = v110;
        *(_QWORD *)(v117 + 32) = sub_100165D40;
        *(_QWORD *)(v117 + 40) = v116;
        *(_BYTE *)(v117 + 48) = 1;
        swift_retain(v111);
        swift_unknownObjectRetain(v103);
        v118 = v110;
        swift_retain(v116);
        sub_1000F7A44((uint64_t)sub_100164E44, v117);
        swift_release(v111);
        swift_release(v116);
        swift_unknownObjectRelease(v103);

        swift_release(v117);
      }
      else
      {
        v119 = static os_log_type_t.error.getter(v102);
        v120 = qword_100218DE8;
        v121 = swift_allocObject(v146, 72, 7);
        *(_OWORD *)(v121 + 16) = v145;
        v122 = sub_10009C9A8();
        v123 = v147;
        *(_QWORD *)(v121 + 56) = &type metadata for String;
        *(_QWORD *)(v121 + 64) = v123;
        *(_QWORD *)(v121 + 32) = v122;
        *(_QWORD *)(v121 + 40) = v124;
        os_log(_:dso:log:_:_:)(v119, &_mh_execute_header, v120, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v121);
        swift_bridgeObjectRelease(v121);
      }
      sub_1000BDE90(0, v149, v148, v150);
      sub_1000AE58C(v70, type metadata accessor for BTDeferredRecord);
      sub_1000AE58C((uint64_t)v63, type metadata accessor for DeviceRecord);
    }
    else
    {
      __break(1u);
      swift_release(v150);
      swift_release(v149);
      objc_autoreleasePoolPop(v96);
      __break(1u);
    }
  }
}

void sub_10015B8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  void *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t (**v61)(uint64_t);
  uint64_t (*v62)(uint64_t);
  void *v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  Class v80;
  id v81;
  void *v82;
  uint64_t v83;
  Class v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  double v101;
  int *v102;
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  Class v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Class v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t);
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  Class aBlock[5];
  uint64_t v170;

  v152 = type metadata accessor for DispatchPredicate(0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (uint64_t *)((char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v148 = type metadata accessor for Date(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v143 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for UUID(0);
  v146 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v144 = (char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v145);
  v154 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for DispatchWorkItemFlags(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v140 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for DispatchQoS(0);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v137 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v161 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v160 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v163 = (char *)&v130 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v130 - v21;
  v162 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v162);
  v164 = (uint64_t *)((char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = type metadata accessor for DeviceSupportInformationRecord(0);
  v166 = *(_QWORD *)(v24 - 8);
  v167 = v24;
  __chkstk_darwin(v24);
  v156 = (uint64_t)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = v25;
  __chkstk_darwin(v26);
  v153 = (uint64_t)&v130 - v27;
  v28 = (uint64_t (*)(uint64_t))swift_allocObject(&unk_1001EC6D8, 40, 7);
  *((_QWORD *)v28 + 2) = a3;
  *((_QWORD *)v28 + 3) = a4;
  v134 = a4;
  v158 = v28;
  *((_QWORD *)v28 + 4) = a5;
  v136 = a3;
  swift_retain(a3);
  v135 = a5;
  v29 = swift_retain(a5);
  v30 = static os_log_type_t.default.getter(v29);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v31 = qword_100218DE8;
  v133 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v32 = swift_allocObject(v133, 72, 7);
  v132 = xmmword_100184870;
  *(_OWORD *)(v32 + 16) = xmmword_100184870;
  v33 = sub_1000DA63C();
  v35 = v34;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  v131 = sub_1000A0DF4();
  *(_QWORD *)(v32 + 64) = v131;
  *(_QWORD *)(v32 + 32) = v33;
  *(_QWORD *)(v32 + 40) = v35;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Remove device record: %@", 24, 2, v32);
  swift_bridgeObjectRelease(v32);
  v165 = a2;
  v36 = sub_100129690();
  v37 = *(int *)(v167 + 24);
  v157 = a1;
  v38 = *(_QWORD *)(a1 + v37);
  if (qword_100210180 != -1)
    swift_once(&qword_100210180, sub_1000DA4F0);
  v39 = sub_1000A0A00(v16, (uint64_t)qword_100218D28);
  v40 = v16;
  v41 = v161;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v161 + 16);
  v159 = v22;
  v42(v22, v39, v40);
  v43 = objc_autoreleasePoolPush();
  v45 = URL.path.getter(v44);
  v47 = v46;
  v48 = v160;
  URL.appendingPathComponent(_:)(v45);
  swift_bridgeObjectRelease(v47);
  v49 = v163;
  URL.appendingPathComponent(_:)(v38);
  v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  v50(v48, v40);
  objc_autoreleasePoolPop(v43);
  v51 = objc_autoreleasePoolPush();
  __chkstk_darwin(v51);
  *(&v130 - 2) = (uint64_t)v49;
  *(&v130 - 1) = v36;
  v52 = v164;
  OS_dispatch_queue.sync<A>(execute:)(v164, sub_1001685BC, &v130 - 4, v162);
  objc_autoreleasePoolPop(v51);
  v50(v49, v40);
  swift_release(v36);
  v50(v159, v40);
  v53 = v166;
  v54 = v167;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v166 + 48))(v52, 1, v167) == 1)
  {
    sub_1000A1000((uint64_t)v52, &qword_100210CE8);
    v55 = *(void **)(v165 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v56 = v156;
    sub_1000AE548(v157, v156, type metadata accessor for DeviceSupportInformationRecord);
    v57 = *(unsigned __int8 *)(v53 + 80);
    v58 = (v57 + 16) & ~v57;
    v59 = (v155 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
    v60 = swift_allocObject(&unk_1001EC700, v59 + 16, v57 | 7);
    sub_1000C6CD0(v56, v60 + v58, type metadata accessor for DeviceSupportInformationRecord);
    v61 = (uint64_t (**)(uint64_t))(v60 + v59);
    v62 = v158;
    *v61 = sub_100167944;
    v61[1] = v62;
    aBlock[4] = (Class)sub_100165D1C;
    v170 = v60;
    aBlock[0] = (Class)_NSConcreteStackBlock;
    aBlock[1] = (Class)1107296256;
    aBlock[2] = (Class)sub_1000E6A24;
    aBlock[3] = (Class)&unk_1001EC718;
    v63 = _Block_copy(aBlock);
    v64 = v55;
    v65 = swift_retain(v62);
    v66 = v137;
    static DispatchQoS.unspecified.getter(v65);
    v168 = _swiftEmptyArrayStorage;
    v67 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v68 = sub_1000A0980(&qword_100211D00);
    v69 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v70 = v140;
    v71 = v68;
    v72 = v142;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v168, v71, v69, v142, v67);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v66, v70, v63);
    _Block_release(v63);

    (*(void (**)(char *, uint64_t))(v141 + 8))(v70, v72);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v66, v139);
    v73 = v170;
    swift_release(v62);
    v74 = (_QWORD *)v73;
LABEL_12:
    swift_release(v74);
    return;
  }
  v75 = (uint64_t)v52;
  v76 = v153;
  sub_1000C6CD0(v75, v153, type metadata accessor for DeviceSupportInformationRecord);
  v77 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v76, aBlock);
  v78 = v165;
  v79 = v54;
  objc_autoreleasePoolPop(v77);
  v80 = aBlock[0];
  v81 = -[objc_class recordID](aBlock[0], "recordID");

  v82 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v76, aBlock);
  v83 = (uint64_t)v154;
  objc_autoreleasePoolPop(v82);
  v84 = aBlock[0];
  v86 = CKRecord.recordType.getter(v85);
  v88 = v87;

  v89 = v78;
  sub_10013A5F4(v81, v86, v88, 0);

  swift_bridgeObjectRelease(v88);
  v90 = v146;
  v91 = v144;
  v92 = v149;
  (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v144, v76, v149);
  v93 = *(int *)(v79 + 24);
  v94 = v89;
  v95 = (uint64_t *)(v76 + v93);
  v97 = *v95;
  v96 = v95[1];
  v98 = swift_bridgeObjectRetain(v96);
  v99 = v143;
  v100 = Date.init()(v98);
  v101 = Date.timeIntervalSince1970.getter(v100);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v99, v148);
  *(_BYTE *)v83 = 1;
  *(_QWORD *)(v83 + 8) = 0xD00000000000001ELL;
  *(_QWORD *)(v83 + 16) = 0x80000001001AA950;
  v102 = (int *)v145;
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v83 + *(int *)(v145 + 24), v91, v92);
  v103 = (_QWORD *)(v83 + v102[7]);
  *v103 = v97;
  v103[1] = v96;
  *(double *)(v83 + v102[8]) = v101;
  *(_OWORD *)(v83 + v102[9]) = xmmword_100187E30;
  v104 = objc_autoreleasePoolPush();
  sub_100146F6C(v94, v83);
  objc_autoreleasePoolPop(v104);
  v105 = (_QWORD *)sub_10012A6A0();
  v106 = (void *)v105[9];
  v107 = v150;
  *v150 = v106;
  v108 = v151;
  v109 = v152;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v151 + 104))(v107, enum case for DispatchPredicate.notOnQueue(_:), v152);
  v110 = v106;
  LOBYTE(v97) = _dispatchPreconditionTest(_:)(v107);
  (*(void (**)(_QWORD *, uint64_t))(v108 + 8))(v107, v109);
  if ((v97 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v105, &type metadata for Bool);
    v111 = swift_unknownObjectRelease(v105);
    if (((uint64_t)aBlock[0] & 1) != 0)
    {
      v112 = sub_10012A6A0();
      v113 = objc_autoreleasePoolPush();
      sub_1000DC7F8(v76, aBlock);
      objc_autoreleasePoolPop(v113);
      v114 = aBlock[0];
      v115 = -[objc_class recordID](aBlock[0], "recordID");

      v116 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v116 + 16, v94);
      v117 = v156;
      sub_1000AE548(v76, v156, type metadata accessor for DeviceSupportInformationRecord);
      v118 = *(unsigned __int8 *)(v166 + 80);
      v119 = (v118 + 16) & ~v118;
      v120 = (v155 + v119 + 7) & 0xFFFFFFFFFFFFFFF8;
      v121 = swift_allocObject(&unk_1001EC750, v120 + 8, v118 | 7);
      sub_1000C6CD0(v117, v121 + v119, type metadata accessor for DeviceSupportInformationRecord);
      *(_QWORD *)(v121 + v120) = v116;
      v122 = swift_allocObject(&unk_1001EC778, 49, 7);
      *(_QWORD *)(v122 + 16) = v112;
      *(_QWORD *)(v122 + 24) = v115;
      *(_QWORD *)(v122 + 32) = sub_100165D24;
      *(_QWORD *)(v122 + 40) = v121;
      *(_BYTE *)(v122 + 48) = 1;
      swift_retain(v116);
      swift_unknownObjectRetain(v112);
      v123 = v115;
      swift_retain(v121);
      sub_1000F7A44((uint64_t)sub_100164E44, v122);
      swift_release(v116);
      swift_release(v121);
      swift_unknownObjectRelease(v112);

      swift_release(v122);
    }
    else
    {
      v124 = static os_log_type_t.error.getter(v111);
      v125 = qword_100218DE8;
      v126 = swift_allocObject(v133, 72, 7);
      *(_OWORD *)(v126 + 16) = v132;
      v127 = sub_1000DA63C();
      v128 = v131;
      *(_QWORD *)(v126 + 56) = &type metadata for String;
      *(_QWORD *)(v126 + 64) = v128;
      *(_QWORD *)(v126 + 32) = v127;
      *(_QWORD *)(v126 + 40) = v129;
      os_log(_:dso:log:_:_:)(v124, &_mh_execute_header, v125, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v126);
      swift_bridgeObjectRelease(v126);
    }
    sub_1000BDE90(0, v136, v134, v135);
    sub_1000AE58C(v83, type metadata accessor for BTDeferredRecord);
    sub_1000AE58C(v76, type metadata accessor for DeviceSupportInformationRecord);
    v74 = v158;
    goto LABEL_12;
  }
  __break(1u);
  swift_release(v135);
  swift_release(v136);
  objc_autoreleasePoolPop(v105);
  __break(1u);
  swift_release(v135);
  swift_release(v136);
  objc_autoreleasePoolPop(v110);
  __break(1u);
}

void sub_10015C598(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  objc_class *v72;
  Class isa;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  objc_class *v80;
  Class v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  double v100;
  int *v101;
  _QWORD *v102;
  void *v103;
  _QWORD *v104;
  void *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  objc_class *v115;
  Class v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  Class v172;

  v160 = a4;
  v161 = a6;
  v159 = a5;
  v140 = a2;
  v150 = type metadata accessor for DispatchPredicate(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (uint64_t *)((char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v147 = type metadata accessor for Date(0);
  v145 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v142 = (char *)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for UUID(0);
  v144 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v141 = (char *)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v143);
  v152 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v165 = v12;
  v166 = v13;
  __chkstk_darwin(v12);
  v164 = (char *)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v168 = (char *)&v135 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v135 - v18;
  v167 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v167);
  v169 = (uint64_t *)((char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for MagicPairingSettingsRecord(0);
  v170 = *(_QWORD *)(v21 - 8);
  v171 = v21;
  __chkstk_darwin(v21);
  v136 = (uint64_t)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v139 = (uint64_t)&v135 - v24;
  __chkstk_darwin(v25);
  v138 = (uint64_t)&v135 - v26;
  __chkstk_darwin(v27);
  v151 = (uint64_t)&v135 - v28;
  v137 = v29;
  __chkstk_darwin(v30);
  v32 = (char *)&v135 - v31;
  v34 = static os_log_type_t.default.getter(v33);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v35 = qword_100218DE8;
  v154 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v36 = swift_allocObject(v154, 72, 7);
  v153 = xmmword_100184870;
  *(_OWORD *)(v36 + 16) = xmmword_100184870;
  sub_1000AE548(a1, (uint64_t)v32, type metadata accessor for MagicPairingSettingsRecord);
  v37 = sub_1000C8310();
  v39 = v38;
  v158 = v32;
  sub_1000AE58C((uint64_t)v32, type metadata accessor for MagicPairingSettingsRecord);
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  v155 = sub_1000A0DF4();
  *(_QWORD *)(v36 + 64) = v155;
  *(_QWORD *)(v36 + 32) = v37;
  *(_QWORD *)(v36 + 40) = v39;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Remove magic device record: %@", 30, 2, v36);
  swift_bridgeObjectRelease(v36);
  v157 = a3;
  v40 = sub_100129690();
  v41 = *(int *)(v171 + 24);
  v156 = a1;
  v42 = (uint64_t *)(a1 + v41);
  v43 = *v42;
  v162 = v42[1];
  v163 = v43;
  if (qword_100210160 != -1)
    swift_once(&qword_100210160, sub_1000C81B8);
  v44 = v165;
  v45 = sub_1000A0A00(v165, (uint64_t)qword_100218C90);
  v46 = v166;
  (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v19, v45, v44);
  v47 = objc_autoreleasePoolPush();
  v49 = URL.path.getter(v48);
  v51 = v50;
  v52 = v164;
  URL.appendingPathComponent(_:)(v49);
  swift_bridgeObjectRelease(v51);
  v53 = v168;
  URL.appendingPathComponent(_:)(v163);
  v54 = *(void (**)(char *, uint64_t))(v46 + 8);
  v54(v52, v44);
  objc_autoreleasePoolPop(v47);
  v55 = objc_autoreleasePoolPush();
  __chkstk_darwin(v55);
  *(&v135 - 2) = (uint64_t)v53;
  *(&v135 - 1) = v40;
  v56 = v169;
  OS_dispatch_queue.sync<A>(execute:)(v169, sub_1001685A8, &v135 - 4, v167);
  objc_autoreleasePoolPop(v55);
  v54(v53, v44);
  swift_release(v40);
  v54(v19, v44);
  v57 = v171;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v170 + 48))(v56, 1, v171) == 1)
  {
    v58 = sub_1000A1000((uint64_t)v56, (uint64_t *)&unk_100212190);
    v59 = static os_log_type_t.error.getter(v58);
    v60 = qword_100218DE8;
    v61 = swift_allocObject(v154, 72, 7);
    *(_OWORD *)(v61 + 16) = v153;
    v62 = (uint64_t)v158;
    sub_1000AE548(v156, (uint64_t)v158, type metadata accessor for MagicPairingSettingsRecord);
    v63 = sub_1000C8310();
    v65 = v64;
    sub_1000AE58C(v62, type metadata accessor for MagicPairingSettingsRecord);
    v66 = v155;
    *(_QWORD *)(v61 + 56) = &type metadata for String;
    *(_QWORD *)(v61 + 64) = v66;
    *(_QWORD *)(v61 + 32) = v63;
    *(_QWORD *)(v61 + 40) = v65;
    os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v60, "Magic Record not found to remove: %@", 36, 2, v61);
    swift_bridgeObjectRelease(v61);
    sub_1000BDE90(0, v160, v159, v161);
  }
  else
  {
    v67 = v151;
    sub_1000C6CD0((uint64_t)v56, v151, type metadata accessor for MagicPairingSettingsRecord);
    v68 = objc_autoreleasePoolPush();
    v69 = (uint64_t *)(v67 + *(int *)(v57 + 20));
    v70 = *v69;
    v71 = v69[1];
    sub_1000A0E74(*v69, v71);
    sub_100109DEC(v70, v71);
    isa = v72;
    sub_1000A103C(v70, v71);
    v74 = v138;
    sub_1000AE548(v67, v138, type metadata accessor for MagicPairingSettingsRecord);
    if (!isa)
      isa = sub_1000A99D8(v74).super.isa;
    sub_1000AE58C(v74, type metadata accessor for MagicPairingSettingsRecord);
    v75 = (uint64_t)v152;
    v172 = isa;
    sub_1000CBDA8((id *)&v172);
    objc_autoreleasePoolPop(v68);
    v76 = -[objc_class recordID](isa, "recordID");

    v77 = objc_autoreleasePoolPush();
    v78 = *v69;
    v79 = v69[1];
    sub_1000A0E74(*v69, v79);
    sub_100109DEC(v78, v79);
    v81 = v80;
    sub_1000A103C(v78, v79);
    v82 = v139;
    sub_1000AE548(v67, v139, type metadata accessor for MagicPairingSettingsRecord);
    v169 = v69;
    if (!v81)
      v81 = sub_1000A99D8(v82).super.isa;
    sub_1000AE58C(v82, type metadata accessor for MagicPairingSettingsRecord);
    v172 = v81;
    sub_1000CBDA8((id *)&v172);
    objc_autoreleasePoolPop(v77);
    v84 = CKRecord.recordType.getter(v83);
    v86 = v85;

    v87 = v84;
    v88 = v157;
    sub_10013A5F4(v76, v87, v86, v140 & 1);

    v89 = v86;
    v90 = v88;
    swift_bridgeObjectRelease(v89);
    v91 = v144;
    v92 = v141;
    v93 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v144 + 16))(v141, v67, v146);
    v94 = (uint64_t *)(v67 + *(int *)(v171 + 24));
    v96 = *v94;
    v95 = v94[1];
    v97 = swift_bridgeObjectRetain(v95);
    v98 = v142;
    v99 = Date.init()(v97);
    v100 = Date.timeIntervalSince1970.getter(v99);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v98, v147);
    *(_BYTE *)v75 = 1;
    strcpy((char *)(v75 + 8), "MagicSettings");
    *(_WORD *)(v75 + 22) = -4864;
    v101 = (int *)v143;
    (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v75 + *(int *)(v143 + 24), v92, v93);
    v102 = (_QWORD *)(v75 + v101[7]);
    *v102 = v96;
    v102[1] = v95;
    *(double *)(v75 + v101[8]) = v100;
    *(_OWORD *)(v75 + v101[9]) = xmmword_100187E30;
    v103 = objc_autoreleasePoolPush();
    sub_100146F6C(v90, v75);
    objc_autoreleasePoolPop(v103);
    v104 = (_QWORD *)sub_10012A6A0();
    v105 = (void *)v104[9];
    v106 = v148;
    *v148 = v105;
    v107 = v149;
    v108 = v150;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v149 + 104))(v106, enum case for DispatchPredicate.notOnQueue(_:), v150);
    v109 = v105;
    LOBYTE(v96) = _dispatchPreconditionTest(_:)(v106);
    (*(void (**)(_QWORD *, uint64_t))(v107 + 8))(v106, v108);
    if ((v96 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v172, sub_100165060, v104, &type metadata for Bool);
      v110 = swift_unknownObjectRelease(v104);
      if ((v172 & 1) != 0)
      {
        v111 = sub_10012A6A0();
        v112 = objc_autoreleasePoolPush();
        v113 = *v169;
        v114 = v169[1];
        sub_1000A0E74(*v169, v114);
        sub_100109DEC(v113, v114);
        v116 = v115;
        sub_1000A103C(v113, v114);
        v117 = v136;
        sub_1000AE548(v67, v136, type metadata accessor for MagicPairingSettingsRecord);
        if (!v116)
          v116 = sub_1000A99D8(v117).super.isa;
        sub_1000AE58C(v117, type metadata accessor for MagicPairingSettingsRecord);
        v172 = v116;
        sub_1000CBDA8((id *)&v172);
        objc_autoreleasePoolPop(v112);
        v118 = -[objc_class recordID](v116, "recordID");

        v119 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v119 + 16, v157);
        v120 = (uint64_t)v158;
        sub_1000AE548(v67, (uint64_t)v158, type metadata accessor for MagicPairingSettingsRecord);
        v121 = *(unsigned __int8 *)(v170 + 80);
        v122 = (v121 + 16) & ~v121;
        v123 = (v137 + v122 + 7) & 0xFFFFFFFFFFFFFFF8;
        v124 = swift_allocObject(&unk_1001EC7A0, v123 + 8, v121 | 7);
        sub_1000C6CD0(v120, v124 + v122, type metadata accessor for MagicPairingSettingsRecord);
        *(_QWORD *)(v124 + v123) = v119;
        v125 = swift_allocObject(&unk_1001EC7C8, 49, 7);
        *(_QWORD *)(v125 + 16) = v111;
        *(_QWORD *)(v125 + 24) = v118;
        *(_QWORD *)(v125 + 32) = sub_10016507C;
        *(_QWORD *)(v125 + 40) = v124;
        *(_BYTE *)(v125 + 48) = 1;
        swift_retain(v119);
        swift_unknownObjectRetain(v111);
        v126 = v118;
        swift_retain(v124);
        sub_1000F7A44((uint64_t)sub_100164E44, v125);
        swift_release(v119);
        swift_release(v124);
        swift_unknownObjectRelease(v111);

        swift_release(v125);
      }
      else
      {
        v127 = static os_log_type_t.error.getter(v110);
        v128 = qword_100218DE8;
        v129 = swift_allocObject(v154, 72, 7);
        *(_OWORD *)(v129 + 16) = v153;
        v130 = (uint64_t)v158;
        sub_1000AE548(v156, (uint64_t)v158, type metadata accessor for MagicPairingSettingsRecord);
        v131 = sub_1000C8310();
        v133 = v132;
        sub_1000AE58C(v130, type metadata accessor for MagicPairingSettingsRecord);
        v134 = v155;
        *(_QWORD *)(v129 + 56) = &type metadata for String;
        *(_QWORD *)(v129 + 64) = v134;
        *(_QWORD *)(v129 + 32) = v131;
        *(_QWORD *)(v129 + 40) = v133;
        os_log(_:dso:log:_:_:)(v127, &_mh_execute_header, v128, "CloudCoordinator not available. Defer deleting magic record - %@", 64, 2, v129);
        swift_bridgeObjectRelease(v129);
      }
      sub_1000BDE90(0, v160, v159, v161);
      sub_1000AE58C(v75, type metadata accessor for BTDeferredRecord);
      sub_1000AE58C(v67, type metadata accessor for MagicPairingSettingsRecord);
    }
    else
    {
      __break(1u);
      swift_release(v161);
      swift_release(v160);
      objc_autoreleasePoolPop(v104);
      __break(1u);
    }
  }
}

void sub_10015D214(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  objc_class *v42;
  Class isa;
  char *v44;
  uint64_t *v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  objc_class *v50;
  Class v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  double v66;
  int *v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  objc_class *v82;
  Class v83;
  char *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  id v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  id v97;
  _QWORD *v98;
  void *v99;
  id v100;
  id v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  id v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  _QWORD *v147;
  id aBlock[3];
  ValueMetadata *v149;
  unint64_t v150;
  _QWORD *v151;

  v146 = a2;
  v9 = type metadata accessor for DispatchPredicate(0);
  v143 = *(_QWORD *)(v9 - 8);
  v144 = v9;
  __chkstk_darwin(v9);
  v142 = (uint64_t *)((char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v141 = type metadata accessor for Date(0);
  v139 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v12 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for UUID(0);
  v138 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v136 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v137);
  v145 = (uint64_t *)((char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v135 = type metadata accessor for DispatchWorkItemFlags(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for DispatchQoS(0);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)swift_allocObject(&unk_1001EC7F0, 40, 7);
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v149 = &type metadata for AudioAccessoryFeatures;
  v150 = sub_1000A42C4();
  swift_retain(a3);
  swift_retain(a5);
  v22 = isFeatureEnabled(_:)(aBlock);
  v23 = sub_1000A2140(aBlock);
  if ((v22 & 1) == 0)
  {
    v91 = sub_1000D8604();
    v92 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v91, 0, 0);
    *v93 = 0x8000000000000038;
    sub_1000BDE90(v92, a3, a4, a5);
    swift_errorRelease(v92);
    v94 = v21;
LABEL_20:
    swift_release(v94);
    return;
  }
  v126 = v12;
  v127 = a4;
  v124 = a3;
  v125 = a5;
  v129 = v21;
  v24 = static os_log_type_t.default.getter(v23);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v25 = qword_100218DE8;
  v123 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v26 = swift_allocObject(v123, 72, 7);
  v122 = xmmword_100184870;
  *(_OWORD *)(v26 + 16) = xmmword_100184870;
  v27 = a1;
  v28 = objc_msgSend(v27, "description");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  *(_QWORD *)(v26 + 56) = &type metadata for String;
  v121 = sub_1000A0DF4();
  *(_QWORD *)(v26 + 64) = v121;
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v31;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Remove AADeviceRecord: %@", 25, 2, v26);
  swift_bridgeObjectRelease(v26);
  v32 = v146;
  v33 = sub_100129690();
  v128 = v27;
  v34 = *(_QWORD *)&v27[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  v35 = *(_QWORD *)&v27[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
  if (qword_1002101B0 != -1)
    swift_once(&qword_1002101B0, sub_100106014);
  v36 = sub_1000A0A00(v17, (uint64_t)qword_100218D68);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v36, v17);
  v37 = (char *)sub_100127638(v34, v35, (uint64_t)v20, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
  swift_release(v33);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (!v37)
  {
    v95 = *(void **)(v32 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v96 = (_QWORD *)swift_allocObject(&unk_1001EC818, 40, 7);
    v97 = v128;
    v96[2] = v128;
    v96[3] = sub_1001683AC;
    v98 = v129;
    v96[4] = v129;
    v150 = (unint64_t)sub_100168634;
    v151 = v96;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000E6A24;
    v149 = (ValueMetadata *)&unk_1001EC830;
    v99 = _Block_copy(aBlock);
    v100 = v97;
    v101 = v95;
    v102 = swift_retain(v98);
    v103 = v130;
    static DispatchQoS.unspecified.getter(v102);
    v147 = _swiftEmptyArrayStorage;
    v104 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v105 = sub_1000A0980(&qword_100211D00);
    v106 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v107 = v133;
    v108 = v105;
    v109 = v135;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v147, v108, v106, v135, v104);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v103, v107, v99);
    _Block_release(v99);

    (*(void (**)(char *, uint64_t))(v134 + 8))(v107, v109);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v103, v132);
    v110 = v151;
    swift_release(v98);
    v94 = v110;
    goto LABEL_20;
  }
  v38 = objc_autoreleasePoolPush();
  v39 = (uint64_t *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v40 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v41 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
  sub_1000A0E74(v40, v41);
  sub_100109DEC(v40, v41);
  isa = v42;
  sub_1000A103C(v40, v41);
  if (!isa)
  {
    v44 = v37;
    isa = sub_1000A9DB8((uint64_t)v44).super.isa;

  }
  v45 = v145;
  aBlock[0] = isa;
  sub_10010894C(aBlock);
  objc_autoreleasePoolPop(v38);
  v46 = -[objc_class recordID](isa, "recordID");

  v47 = objc_autoreleasePoolPush();
  v48 = *v39;
  v49 = v39[1];
  v145 = v39;
  sub_1000A0E74(v48, v49);
  sub_100109DEC(v48, v49);
  v51 = v50;
  sub_1000A103C(v48, v49);
  if (!v51)
  {
    v52 = v37;
    v51 = sub_1000A9DB8((uint64_t)v52).super.isa;

  }
  aBlock[0] = v51;
  sub_10010894C(aBlock);
  objc_autoreleasePoolPop(v47);
  v54 = CKRecord.recordType.getter(v53);
  v56 = v55;

  v57 = v146;
  sub_10013A5F4(v46, v54, v56, 0);

  swift_bridgeObjectRelease(v56);
  v58 = v138;
  v59 = v136;
  v60 = v140;
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v136, &v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier], v140);
  v62 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  v61 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
  v63 = swift_bridgeObjectRetain(v61);
  v64 = v126;
  v65 = Date.init()(v63);
  v66 = Date.timeIntervalSince1970.getter(v65);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v64, v141);
  *(_BYTE *)v45 = 1;
  strcpy((char *)v45 + 8, "AADeviceRecord");
  *((_BYTE *)v45 + 23) = -18;
  v67 = (int *)v137;
  (*(void (**)(_BYTE *, char *, uint64_t))(v58 + 32))((_BYTE *)v45 + *(int *)(v137 + 24), v59, v60);
  v68 = (uint64_t *)((char *)v45 + v67[7]);
  *v68 = v62;
  v68[1] = v61;
  *(double *)((char *)v45 + v67[8]) = v66;
  *(_OWORD *)((char *)v45 + v67[9]) = xmmword_100187E30;
  v69 = objc_autoreleasePoolPush();
  sub_100146F6C(v57, (uint64_t)v45);
  objc_autoreleasePoolPop(v69);
  v70 = (_QWORD *)sub_10012A6A0();
  v71 = (void *)v70[9];
  v72 = v142;
  v73 = v143;
  *v142 = v71;
  v74 = v144;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for DispatchPredicate.notOnQueue(_:), v144);
  v75 = v71;
  LOBYTE(v60) = _dispatchPreconditionTest(_:)(v72);
  (*(void (**)(_QWORD *, uint64_t))(v73 + 8))(v72, v74);
  v76 = v127;
  if ((v60 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v70, &type metadata for Bool);
    v77 = swift_unknownObjectRelease(v70);
    if (((uint64_t)aBlock[0] & 1) != 0)
    {
      v78 = sub_10012A6A0();
      v79 = objc_autoreleasePoolPush();
      v80 = *v145;
      v81 = v145[1];
      sub_1000A0E74(*v145, v81);
      sub_100109DEC(v80, v81);
      v83 = v82;
      sub_1000A103C(v80, v81);
      if (!v83)
      {
        v84 = v37;
        v83 = sub_1000A9DB8((uint64_t)v84).super.isa;

      }
      aBlock[0] = v83;
      sub_10010894C(aBlock);
      objc_autoreleasePoolPop(v79);
      v85 = -[objc_class recordID](v83, "recordID");

      v86 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v86 + 16, v146);
      v87 = swift_allocObject(&unk_1001EC868, 32, 7);
      *(_QWORD *)(v87 + 16) = v37;
      *(_QWORD *)(v87 + 24) = v86;
      v88 = swift_allocObject(&unk_1001EC890, 49, 7);
      *(_QWORD *)(v88 + 16) = v78;
      *(_QWORD *)(v88 + 24) = v85;
      *(_QWORD *)(v88 + 32) = sub_100168644;
      *(_QWORD *)(v88 + 40) = v87;
      *(_BYTE *)(v88 + 48) = 1;
      v89 = v37;
      swift_retain(v86);
      swift_unknownObjectRetain(v78);
      v90 = v85;
      swift_retain(v87);
      sub_1000F7A44((uint64_t)sub_100164E44, v88);
      swift_unknownObjectRelease(v78);

      swift_release(v86);
      swift_release(v87);
      swift_release(v88);
    }
    else
    {
      v111 = static os_log_type_t.error.getter(v77);
      v112 = qword_100218DE8;
      v113 = swift_allocObject(v123, 72, 7);
      *(_OWORD *)(v113 + 16) = v122;
      v114 = v128;
      v115 = objc_msgSend(v114, "description");
      v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v118 = v117;

      v119 = v121;
      *(_QWORD *)(v113 + 56) = &type metadata for String;
      *(_QWORD *)(v113 + 64) = v119;
      *(_QWORD *)(v113 + 32) = v116;
      *(_QWORD *)(v113 + 40) = v118;
      os_log(_:dso:log:_:_:)(v111, &_mh_execute_header, v112, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v113);
      swift_bridgeObjectRelease(v113);
    }
    sub_1000BDE90(0, v124, v76, v125);

    sub_1000AE58C((uint64_t)v45, type metadata accessor for BTDeferredRecord);
    v94 = v129;
    goto LABEL_20;
  }
  __break(1u);
  swift_release(v125);
  swift_release(v124);
  objc_autoreleasePoolPop(v70);
  __break(1u);
}

void sub_10015DD98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  objc_class *v43;
  Class isa;
  char *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  objc_class *v51;
  Class v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  double v67;
  int *v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  objc_class *v83;
  Class v84;
  char *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  id v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  _QWORD *v97;
  id v98;
  _QWORD *v99;
  void *v100;
  id v101;
  id v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  id v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD aBlock[3];
  ValueMetadata *v150;
  unint64_t v151;
  _QWORD *v152;

  v147 = a2;
  v9 = type metadata accessor for DispatchPredicate(0);
  v144 = *(_QWORD *)(v9 - 8);
  v145 = v9;
  __chkstk_darwin(v9);
  v143 = (uint64_t *)((char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Date(0);
  v140 = *(_QWORD *)(v11 - 8);
  v141 = v11;
  __chkstk_darwin(v11);
  v137 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for UUID(0);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v14 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v138);
  v146 = (uint64_t *)((char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v136 = type metadata accessor for DispatchWorkItemFlags(0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v134 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for DispatchQoS(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (_QWORD *)swift_allocObject(&unk_1001EC8B8, 40, 7);
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v150 = &type metadata for AudioAccessoryFeatures;
  v151 = sub_1000A42C4();
  swift_retain(a3);
  swift_retain(a5);
  v23 = isFeatureEnabled(_:)(aBlock);
  v24 = sub_1000A2140(aBlock);
  if ((v23 & 1) == 0)
  {
    v92 = sub_1000D8604();
    v93 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v92, 0, 0);
    *v94 = 0x8000000000000038;
    sub_1000BDE90(v93, a3, a4, a5);
    swift_errorRelease(v93);
    v95 = v22;
LABEL_20:
    swift_release(v95);
    return;
  }
  v127 = v14;
  v128 = a4;
  v125 = a3;
  v126 = a5;
  v130 = v22;
  v25 = static os_log_type_t.default.getter(v24);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v26 = qword_100218DE8;
  v124 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v27 = swift_allocObject(v124, 72, 7);
  v123 = xmmword_100184870;
  *(_OWORD *)(v27 + 16) = xmmword_100184870;
  v28 = a1;
  v29 = objc_msgSend(v28, "description");
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  *(_QWORD *)(v27 + 56) = &type metadata for String;
  v122 = sub_1000A0DF4();
  *(_QWORD *)(v27 + 64) = v122;
  *(_QWORD *)(v27 + 32) = v30;
  *(_QWORD *)(v27 + 40) = v32;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Remove AAProxCardsRecord: %@", 28, 2, v27);
  swift_bridgeObjectRelease(v27);
  v33 = v147;
  v34 = sub_100129690();
  v129 = v28;
  v35 = *(_QWORD *)&v28[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  v36 = *(_QWORD *)&v28[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  if (qword_100210130 != -1)
    swift_once(&qword_100210130, sub_1000A5BC0);
  v37 = sub_1000A0A00(v18, (uint64_t)qword_100218C00);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v37, v18);
  v38 = (char *)sub_100127638(v35, v36, (uint64_t)v21, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
  swift_release(v34);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if (!v38)
  {
    v96 = *(void **)(v33 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v97 = (_QWORD *)swift_allocObject(&unk_1001EC8E0, 40, 7);
    v98 = v129;
    v97[2] = v129;
    v97[3] = sub_1001683AC;
    v99 = v130;
    v97[4] = v130;
    v151 = (unint64_t)sub_100168634;
    v152 = v97;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v150 = (ValueMetadata *)&unk_1001EC8F8;
    v100 = _Block_copy(aBlock);
    v101 = v98;
    v102 = v96;
    v103 = swift_retain(v99);
    v104 = v131;
    static DispatchQoS.unspecified.getter(v103);
    v148 = _swiftEmptyArrayStorage;
    v105 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v106 = sub_1000A0980(&qword_100211D00);
    v107 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v108 = v134;
    v109 = v106;
    v110 = v136;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v148, v109, v107, v136, v105);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v108, v100);
    _Block_release(v100);

    (*(void (**)(char *, uint64_t))(v135 + 8))(v108, v110);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v104, v133);
    v111 = v152;
    swift_release(v99);
    v95 = v111;
    goto LABEL_20;
  }
  v39 = objc_autoreleasePoolPush();
  v40 = (uint64_t *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v41 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v42 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
  sub_1000A0E74(v41, v42);
  sub_100109DEC(v41, v42);
  isa = v43;
  sub_1000A103C(v41, v42);
  if (!isa)
  {
    v45 = v38;
    isa = sub_1000A9D94((uint64_t)v45).super.isa;

  }
  v46 = (uint64_t)v146;
  aBlock[0] = isa;
  sub_1000A89A0((unint64_t)aBlock);
  objc_autoreleasePoolPop(v39);
  v47 = -[objc_class recordID](isa, "recordID");

  v48 = objc_autoreleasePoolPush();
  v49 = *v40;
  v50 = v40[1];
  v146 = v40;
  sub_1000A0E74(v49, v50);
  sub_100109DEC(v49, v50);
  v52 = v51;
  sub_1000A103C(v49, v50);
  if (!v52)
  {
    v53 = v38;
    v52 = sub_1000A9D94((uint64_t)v53).super.isa;

  }
  aBlock[0] = v52;
  sub_1000A89A0((unint64_t)aBlock);
  objc_autoreleasePoolPop(v48);
  v55 = CKRecord.recordType.getter(v54);
  v57 = v56;

  v58 = v147;
  sub_10013A5F4(v47, v55, v57, 0);

  swift_bridgeObjectRelease(v57);
  v59 = v139;
  v60 = v127;
  v61 = v142;
  (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v127, &v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier], v142);
  v63 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  v62 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  v64 = swift_bridgeObjectRetain(v62);
  v65 = v137;
  v66 = Date.init()(v64);
  v67 = Date.timeIntervalSince1970.getter(v66);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v65, v141);
  *(_BYTE *)v46 = 1;
  *(_QWORD *)(v46 + 8) = 0xD000000000000011;
  *(_QWORD *)(v46 + 16) = 0x80000001001B1050;
  v68 = (int *)v138;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v46 + *(int *)(v138 + 24), v60, v61);
  v69 = (_QWORD *)(v46 + v68[7]);
  *v69 = v63;
  v69[1] = v62;
  *(double *)(v46 + v68[8]) = v67;
  *(_OWORD *)(v46 + v68[9]) = xmmword_100187E30;
  v70 = objc_autoreleasePoolPush();
  sub_100146F6C(v58, v46);
  objc_autoreleasePoolPop(v70);
  v71 = (_QWORD *)sub_10012A6A0();
  v72 = (void *)v71[9];
  v73 = v143;
  v74 = v144;
  *v143 = v72;
  v75 = v145;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v74 + 104))(v73, enum case for DispatchPredicate.notOnQueue(_:), v145);
  v76 = v72;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)(v73);
  (*(void (**)(_QWORD *, uint64_t))(v74 + 8))(v73, v75);
  v77 = v128;
  if ((v61 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v71, &type metadata for Bool);
    v78 = swift_unknownObjectRelease(v71);
    if ((aBlock[0] & 1) != 0)
    {
      v79 = sub_10012A6A0();
      v80 = objc_autoreleasePoolPush();
      v81 = *v146;
      v82 = v146[1];
      sub_1000A0E74(*v146, v82);
      sub_100109DEC(v81, v82);
      v84 = v83;
      sub_1000A103C(v81, v82);
      if (!v84)
      {
        v85 = v38;
        v84 = sub_1000A9D94((uint64_t)v85).super.isa;

      }
      aBlock[0] = v84;
      sub_1000A89A0((unint64_t)aBlock);
      objc_autoreleasePoolPop(v80);
      v86 = -[objc_class recordID](v84, "recordID");

      v87 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v87 + 16, v147);
      v88 = swift_allocObject(&unk_1001EC930, 32, 7);
      *(_QWORD *)(v88 + 16) = v38;
      *(_QWORD *)(v88 + 24) = v87;
      v89 = swift_allocObject(&unk_1001EC958, 49, 7);
      *(_QWORD *)(v89 + 16) = v79;
      *(_QWORD *)(v89 + 24) = v86;
      *(_QWORD *)(v89 + 32) = sub_100168648;
      *(_QWORD *)(v89 + 40) = v88;
      *(_BYTE *)(v89 + 48) = 1;
      v90 = v38;
      swift_retain(v87);
      swift_unknownObjectRetain(v79);
      v91 = v86;
      swift_retain(v88);
      sub_1000F7A44((uint64_t)sub_100164E44, v89);
      swift_unknownObjectRelease(v79);

      swift_release(v87);
      swift_release(v88);
      swift_release(v89);
    }
    else
    {
      v112 = static os_log_type_t.error.getter(v78);
      v113 = qword_100218DE8;
      v114 = swift_allocObject(v124, 72, 7);
      *(_OWORD *)(v114 + 16) = v123;
      v115 = v129;
      v116 = objc_msgSend(v115, "description");
      v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
      v119 = v118;

      v120 = v122;
      *(_QWORD *)(v114 + 56) = &type metadata for String;
      *(_QWORD *)(v114 + 64) = v120;
      *(_QWORD *)(v114 + 32) = v117;
      *(_QWORD *)(v114 + 40) = v119;
      os_log(_:dso:log:_:_:)(v112, &_mh_execute_header, v113, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v114);
      swift_bridgeObjectRelease(v114);
    }
    sub_1000BDE90(0, v125, v77, v126);

    sub_1000AE58C(v46, type metadata accessor for BTDeferredRecord);
    v95 = v130;
    goto LABEL_20;
  }
  __break(1u);
  swift_release(v126);
  swift_release(v125);
  objc_autoreleasePoolPop(v71);
  __break(1u);
}

uint64_t sub_10015E90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100163868(a1, a2, a3, a4, a5, a6, a7, a8, sub_1001685D0, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10015ACE0, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000BDE90, sub_1001685BC, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10015B8D0, (uint64_t)sub_1001685A8, (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_10015C598, sub_10015D214, sub_10015DD98);
}

uint64_t sub_10015E984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v26 = v5;
  else
    v26 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v12 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v7);
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v7);
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  v14 = *v3;
  *v3 = v13;
  swift_bridgeObjectRelease(v14);
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v11 + 32;
  v16 = (char *)(v11 + 32 + 8 * v4);
  v17 = sub_1000AB31C(0, &qword_100210CC8, BTMagicPairingSettings_ptr);
  v18 = (void *)swift_arrayDestroy(v16, v5, v17);
  if (!v6)
    return specialized Array._endMutation()(v18);
  v19 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = v20 - v2;
    if (!__OFSUB__(v20, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v19 < 0)
    v29 = *v3;
  else
    v29 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v3);
  v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  v18 = (void *)swift_bridgeObjectRelease(v19);
  v21 = v30 - v2;
  if (__OFSUB__(v30, v2))
    goto LABEL_52;
LABEL_21:
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = (char *)(v15 + 8 * v2);
    if (v4 != v2 || v16 >= &v22[8 * v21])
      v18 = memmove(v16, v22, 8 * v21);
    v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v23 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v24 = v23 + v6;
      if (!__OFADD__(v23, v6))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v24;
        return specialized Array._endMutation()(v18);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v2 < 0)
      v31 = v2;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    v18 = (void *)swift_bridgeObjectRelease(v2);
    v24 = v32 + v6;
    if (!__OFADD__(v32, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v33 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v33, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10015EC8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10015ED1C(a1, a2, a3, a4, a5, (unint64_t)sub_1001685A8, (uint64_t)sub_1001685F8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C0470, (uint64_t)&unk_1001EC660, (uint64_t)sub_100168638);
}

uint64_t sub_10015ECD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10015ED1C(a1, a2, a3, a4, a5, (unint64_t)sub_1001685A8, (uint64_t)sub_1001685F8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C0454, (uint64_t)&unk_1001EC638, (uint64_t)sub_100168638);
}

uint64_t sub_10015ED1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  unsigned __int8 v94;
  uint64_t v95;
  void *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  objc_class *v100;
  Class isa;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  void *v171;
  uint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  objc_class *v175;
  Class v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  objc_class *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  id v203[3];

  v193 = a5;
  v194 = a8;
  v185 = a7;
  v200 = a6;
  v191 = a3;
  v192 = a4;
  v12 = type metadata accessor for UUID(0);
  __chkstk_darwin(v12);
  v182 = (char *)&v182 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v182 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v182 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v182 - v22;
  v197 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v197);
  v199 = (char **)((char *)&v182 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v202 = type metadata accessor for MagicPairingSettingsRecord(0);
  v198 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v183 = (uint64_t)&v182 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v188 = (uint64_t)&v182 - v27;
  __chkstk_darwin(v28);
  v184 = (uint64_t)&v182 - v29;
  __chkstk_darwin(v30);
  v187 = (uint64_t)&v182 - v31;
  __chkstk_darwin(v32);
  v190 = (uint64_t)&v182 - v33;
  __chkstk_darwin(v34);
  v186 = (uint64_t)&v182 - v35;
  v189 = a2;
  v36 = sub_100129690();
  v201 = a1;
  v37 = objc_msgSend(a1, "bluetoothAddress");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v196 = v39;

  if (qword_100210160 != -1)
    swift_once(&qword_100210160, sub_1000C81B8);
  v40 = sub_1000A0A00(v14, (uint64_t)qword_100218C90);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v23, v40, v14);
  v41 = objc_autoreleasePoolPush();
  v195 = v23;
  v42 = v41;
  v44 = URL.path.getter(v43);
  v46 = v45;
  URL.appendingPathComponent(_:)(v44);
  swift_bridgeObjectRelease(v46);
  v47 = v38;
  v48 = v196;
  URL.appendingPathComponent(_:)(v47);
  v49 = *(void (**)(char *, uint64_t))(v15 + 8);
  v49(v17, v14);
  objc_autoreleasePoolPop(v42);
  v50 = objc_autoreleasePoolPush();
  __chkstk_darwin(v50);
  *(&v182 - 2) = v20;
  *(&v182 - 1) = (char *)v36;
  v51 = v199;
  OS_dispatch_queue.sync<A>(execute:)(v199, v200, &v182 - 4, v197);
  objc_autoreleasePoolPop(v50);
  v49(v20, v14);
  swift_release(v36);
  swift_bridgeObjectRelease(v48);
  v49(v195, v14);
  v52 = v202;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v198 + 48))(v51, 1, v202) != 1)
  {
    v92 = v190;
    sub_1000C6CD0((uint64_t)v51, v190, type metadata accessor for MagicPairingSettingsRecord);
    v93 = v201;
    v94 = sub_1000CE774(v201);
    v95 = v187;
    sub_1000AE548(v92, v187, type metadata accessor for MagicPairingSettingsRecord);
    if ((v94 & 1) == 0)
    {
      v96 = objc_autoreleasePoolPush();
      v97 = (uint64_t *)(v95 + *(int *)(v52 + 20));
      v98 = *v97;
      v99 = v97[1];
      sub_1000A0E74(*v97, v99);
      sub_100109DEC(v98, v99);
      isa = v100;
      sub_1000A103C(v98, v99);
      v102 = v184;
      sub_1000AE548(v95, v184, type metadata accessor for MagicPairingSettingsRecord);
      if (!isa)
        isa = sub_1000A99D8(v102).super.isa;
      sub_1000AE58C(v102, type metadata accessor for MagicPairingSettingsRecord);
      v203[0] = isa;
      sub_1000CBDA8(v203);
      objc_autoreleasePoolPop(v96);
      v103 = -[objc_class recordChangeTag](isa, "recordChangeTag");

      if (v103)
      {

        v104 = sub_1000AE58C(v95, type metadata accessor for MagicPairingSettingsRecord);
        LODWORD(v202) = static os_log_type_t.default.getter(v104);
        if (qword_1002101E0 != -1)
          swift_once(&qword_1002101E0, sub_1001687B0);
        v105 = qword_100218DE8;
        v106 = sub_1000A0980((uint64_t *)&unk_1002103C0);
        v107 = swift_allocObject(v106, 112, 7);
        *(_OWORD *)(v107 + 16) = xmmword_1001858F0;
        v108 = v190;
        v109 = v188;
        sub_1000AE548(v190, v188, type metadata accessor for MagicPairingSettingsRecord);
        v110 = sub_1000C8310();
        v112 = v111;
        sub_1000AE58C(v109, type metadata accessor for MagicPairingSettingsRecord);
        *(_QWORD *)(v107 + 56) = &type metadata for String;
        v113 = sub_1000A0DF4();
        *(_QWORD *)(v107 + 64) = v113;
        *(_QWORD *)(v107 + 32) = v110;
        *(_QWORD *)(v107 + 40) = v112;
        v114 = v93;
        v115 = objc_msgSend(v114, "description");
        v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
        v118 = v117;

        *(_QWORD *)(v107 + 96) = &type metadata for String;
        *(_QWORD *)(v107 + 104) = v113;
        *(_QWORD *)(v107 + 72) = v116;
        *(_QWORD *)(v107 + 80) = v118;
        os_log(_:dso:log:_:_:)(v202, &_mh_execute_header, v105, "No change from cached %@ [to] %@", 32, 2, v107);
        swift_bridgeObjectRelease(v107);
        v194(0, v191, v192, v193);
        v119 = v108;
        return sub_1000AE58C(v119, type metadata accessor for MagicPairingSettingsRecord);
      }
    }
    v200 = 0;
    v133 = sub_1000AE58C(v95, type metadata accessor for MagicPairingSettingsRecord);
    v134 = static os_log_type_t.default.getter(v133);
    if (qword_1002101E0 != -1)
      swift_once(&qword_1002101E0, sub_1001687B0);
    v135 = qword_100218DE8;
    v136 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v137 = swift_allocObject(v136, 72, 7);
    *(_OWORD *)(v137 + 16) = xmmword_100184870;
    v138 = v190;
    v139 = v188;
    sub_1000AE548(v190, v188, type metadata accessor for MagicPairingSettingsRecord);
    v140 = sub_1000C8310();
    v142 = v141;
    sub_1000AE58C(v139, type metadata accessor for MagicPairingSettingsRecord);
    *(_QWORD *)(v137 + 56) = &type metadata for String;
    v143 = sub_1000A0DF4();
    *(_QWORD *)(v137 + 64) = v143;
    *(_QWORD *)(v137 + 32) = v140;
    *(_QWORD *)(v137 + 40) = v142;
    os_log(_:dso:log:_:_:)(v134, &_mh_execute_header, v135, "Updating cached MagicPairingSettingsRecord: %@ ", 47, 2, v137);
    v144 = swift_bridgeObjectRelease(v137);
    v145 = static os_log_type_t.default.getter(v144);
    v146 = qword_100218DE8;
    v147 = swift_allocObject(v136, 112, 7);
    *(_OWORD *)(v147 + 16) = xmmword_1001858F0;
    v148 = (uint64_t *)(v138 + *(int *)(v202 + 24));
    v150 = *v148;
    v149 = v148[1];
    *(_QWORD *)(v147 + 56) = &type metadata for String;
    *(_QWORD *)(v147 + 64) = v143;
    *(_QWORD *)(v147 + 32) = v150;
    *(_QWORD *)(v147 + 40) = v149;
    swift_bridgeObjectRetain(v149);
    v151 = v201;
    v152 = objc_msgSend(v151, "description");
    v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
    v155 = v154;

    *(_QWORD *)(v147 + 96) = &type metadata for String;
    *(_QWORD *)(v147 + 104) = v143;
    *(_QWORD *)(v147 + 72) = v153;
    *(_QWORD *)(v147 + 80) = v155;
    os_log(_:dso:log:_:_:)(v145, &_mh_execute_header, v146, "Updating cached MagicPairingSettingsRecord %@ with %@", 53, 2, v147);
    swift_bridgeObjectRelease(v147);
    v91 = v186;
    sub_1000AE548(v138, v186, type metadata accessor for MagicPairingSettingsRecord);
    sub_1000CD0D8(v151);
    sub_1000AE58C(v138, type metadata accessor for MagicPairingSettingsRecord);
LABEL_26:
    v156 = sub_100129690();
    __chkstk_darwin(v156);
    *(&v182 - 2) = v157;
    *(&v182 - 1) = (char *)v91;
    v158 = v200;
    OS_dispatch_queue.sync<A>(execute:)(&type metadata for (), v185, &v182 - 4, &type metadata for () + 1);
    if (v158)
    {
      v159 = swift_release(v156);
      v160 = static os_log_type_t.error.getter(v159);
      if (qword_1002101E0 != -1)
        swift_once(&qword_1002101E0, sub_1001687B0);
      v161 = qword_100218DE8;
      v162 = sub_1000A0980((uint64_t *)&unk_1002103C0);
      v163 = swift_allocObject(v162, 72, 7);
      *(_OWORD *)(v163 + 16) = xmmword_100184870;
      v203[0] = (id)v158;
      swift_errorRetain(v158);
      v164 = sub_1000A0980(&qword_100210710);
      v165 = String.init<A>(describing:)(v203, v164);
      v167 = v166;
      *(_QWORD *)(v163 + 56) = &type metadata for String;
      *(_QWORD *)(v163 + 64) = sub_1000A0DF4();
      *(_QWORD *)(v163 + 32) = v165;
      *(_QWORD *)(v163 + 40) = v167;
      os_log(_:dso:log:_:_:)(v160, &_mh_execute_header, v161, "Unable to enocde MagicPairingSettingsRecord with error: %@", 58, 2, v163);
      swift_bridgeObjectRelease(v163);
      v168 = sub_1000D8604();
      v169 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v168, 0, 0);
      *v170 = v158 | 0x4000000000000000;
      swift_errorRetain(v158);
      v194(v169, v191, v192, v193);
      swift_errorRelease(v169);
      swift_errorRelease(v158);
    }
    else
    {
      swift_release(v156);
      v194(0, v191, v192, v193);
      v171 = objc_autoreleasePoolPush();
      v172 = (uint64_t *)(v91 + *(int *)(v202 + 20));
      v173 = *v172;
      v174 = v172[1];
      sub_1000A0E74(*v172, v174);
      sub_100109DEC(v173, v174);
      v176 = v175;
      sub_1000A103C(v173, v174);
      v177 = v183;
      sub_1000AE548(v91, v183, type metadata accessor for MagicPairingSettingsRecord);
      if (!v176)
        v176 = sub_1000A99D8(v177).super.isa;
      sub_1000AE58C(v177, type metadata accessor for MagicPairingSettingsRecord);
      v203[0] = v176;
      sub_1000CBDA8(v203);
      objc_autoreleasePoolPop(v171);
      v178 = v189;
      v179 = sub_10012A6A0();
      v180 = swift_allocObject(a9, 32, 7);
      *(_QWORD *)(v180 + 16) = v178;
      *(_QWORD *)(v180 + 24) = v176;
      swift_retain(v178);
      v181 = v176;
      sub_1000F8080(v181, 1, a10, v180);

      swift_unknownObjectRelease(v179);
      swift_release(v180);
    }
    v119 = v91;
    return sub_1000AE58C(v119, type metadata accessor for MagicPairingSettingsRecord);
  }
  v200 = 0;
  sub_1000A1000((uint64_t)v51, (uint64_t *)&unk_100212190);
  v53 = v201;
  v54 = objc_msgSend(v201, "masterKey");
  if (v54)
  {
    v55 = v54;
    v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v58 = v57;

    sub_1000A103C(v56, v58);
    v54 = objc_msgSend(v53, "masterHint");
    if (v54)
    {
      v59 = v54;
      v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v62 = v61;

      sub_1000A103C(v60, v62);
      v54 = objc_msgSend(v53, "accessoryKey");
      if (v54)
      {
        v63 = v54;
        v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v66 = v65;

        sub_1000A103C(v64, v66);
        v54 = objc_msgSend(v53, "accessoryHint");
        if (v54)
        {
          v67 = v54;
          v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v70 = v69;

          sub_1000A103C(v68, v70);
          v54 = objc_msgSend(v53, "encryptionKey");
          if (v54)
          {
            v71 = v54;
            v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
            v74 = v73;

            sub_1000A103C(v72, v74);
            v54 = objc_msgSend(v53, "irk");
            if (v54)
            {
              v75 = v54;
              v76 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
              v78 = v77;

              v79 = sub_1000A103C(v76, v78);
              v80 = static os_log_type_t.default.getter(v79);
              if (qword_1002101E0 != -1)
                swift_once(&qword_1002101E0, sub_1001687B0);
              v81 = qword_100218DE8;
              v82 = sub_1000A0980((uint64_t *)&unk_1002103C0);
              v83 = swift_allocObject(v82, 72, 7);
              *(_OWORD *)(v83 + 16) = xmmword_100184870;
              v84 = v53;
              v85 = objc_msgSend(v84, "description");
              v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
              v88 = v87;

              *(_QWORD *)(v83 + 56) = &type metadata for String;
              *(_QWORD *)(v83 + 64) = sub_1000A0DF4();
              *(_QWORD *)(v83 + 32) = v86;
              *(_QWORD *)(v83 + 40) = v88;
              os_log(_:dso:log:_:_:)(v80, &_mh_execute_header, v81, "Add MagicPairingSettingsRecord: %@", 34, 2, v83);
              swift_bridgeObjectRelease(v83);
              v89 = v84;
              v90 = (uint64_t)v182;
              UUID.init()(v89);
              v91 = v186;
              sub_1000C900C(v90, v89, v186);
              goto LABEL_26;
            }
          }
        }
      }
    }
  }
  v120 = static os_log_type_t.error.getter(v54);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v121 = qword_100218DE8;
  v122 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v123 = swift_allocObject(v122, 72, 7);
  *(_OWORD *)(v123 + 16) = xmmword_100184870;
  v124 = v53;
  v125 = objc_msgSend(v124, "description");
  v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
  v128 = v127;

  *(_QWORD *)(v123 + 56) = &type metadata for String;
  *(_QWORD *)(v123 + 64) = sub_1000A0DF4();
  *(_QWORD *)(v123 + 32) = v126;
  *(_QWORD *)(v123 + 40) = v128;
  os_log(_:dso:log:_:_:)(v120, &_mh_execute_header, v121, "Invalid magic keys unable to add MagicPairingSettingsRecord: %@", 63, 2, v123);
  swift_bridgeObjectRelease(v123);
  v129 = sub_1000D8604();
  v130 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v129, 0, 0);
  *v131 = 0x8000000000000028;
  v194(v130, v191, v192, v193);
  return swift_errorRelease(v130);
}

uint64_t sub_10015FB7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10015ED1C(a1, a2, a3, a4, a5, (unint64_t)sub_1001685A8, (uint64_t)sub_1001685F8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C0D14, (uint64_t)&unk_1001EC5C0, (uint64_t)sub_1001678DC);
}

void sub_10015FBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  void *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  objc_class *v67;
  Class isa;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  objc_class *v75;
  Class v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  double v92;
  int *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  objc_class *v107;
  Class v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  Class v160;

  v149 = a3;
  v150 = a5;
  v148 = a4;
  v141 = type metadata accessor for DispatchPredicate(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (uint64_t *)((char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = type metadata accessor for Date(0);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v133 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for UUID(0);
  v135 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v132 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v134);
  v144 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v153 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v154 = (char *)&v125 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v125 - v17;
  v155 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v155);
  v156 = (uint64_t *)((char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v159 = type metadata accessor for DeviceRecord(0);
  v157 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v128 = (uint64_t)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v126 = (uint64_t)&v125 - v22;
  __chkstk_darwin(v23);
  v131 = (uint64_t)&v125 - v24;
  __chkstk_darwin(v25);
  v129 = (uint64_t)&v125 - v26;
  v127 = v27;
  __chkstk_darwin(v28);
  v143 = (uint64_t *)((char *)&v125 - v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v32 = qword_100218DE8;
  v146 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v33 = swift_allocObject(v146, 72, 7);
  v145 = xmmword_100184870;
  *(_OWORD *)(v33 + 16) = xmmword_100184870;
  v34 = sub_10009C9A8();
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v147 = sub_1000A0DF4();
  *(_QWORD *)(v33 + 64) = v147;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "CloudSync: Remove device record: %@", 35, 2, v33);
  swift_bridgeObjectRelease(v33);
  v142 = a2;
  v37 = sub_100129690();
  v38 = *(int *)(v159 + 24);
  v158 = a1;
  v39 = (uint64_t *)(a1 + v38);
  v151 = *v39;
  v130 = v39;
  if (qword_100210120 != -1)
    swift_once(&qword_100210120, sub_10009C800);
  v40 = sub_1000A0A00(v11, (uint64_t)qword_100218BE0);
  v41 = v11;
  v42 = v12;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v152 = v18;
  v43(v18, v40, v41);
  v44 = objc_autoreleasePoolPush();
  v46 = URL.path.getter(v45);
  v48 = v47;
  v49 = v37;
  v50 = v153;
  URL.appendingPathComponent(_:)(v46);
  swift_bridgeObjectRelease(v48);
  v51 = v154;
  URL.appendingPathComponent(_:)(v151);
  v52 = *(void (**)(char *, uint64_t))(v42 + 8);
  v52(v50, v41);
  objc_autoreleasePoolPop(v44);
  v53 = objc_autoreleasePoolPush();
  __chkstk_darwin(v53);
  *(&v125 - 2) = (uint64_t)v51;
  *(&v125 - 1) = v49;
  v54 = v156;
  OS_dispatch_queue.sync<A>(execute:)(v156, sub_1001685D0, &v125 - 4, v155);
  objc_autoreleasePoolPop(v53);
  v52(v51, v41);
  swift_release(v49);
  v52(v152, v41);
  v55 = v159;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v157 + 48))(v54, 1, v159) == 1)
  {
    v56 = sub_1000A1000((uint64_t)v54, &qword_100210CF8);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = qword_100218DE8;
    v59 = swift_allocObject(v146, 72, 7);
    *(_OWORD *)(v59 + 16) = v145;
    v60 = sub_10009C9A8();
    v61 = v147;
    *(_QWORD *)(v59 + 56) = &type metadata for String;
    *(_QWORD *)(v59 + 64) = v61;
    *(_QWORD *)(v59 + 32) = v60;
    *(_QWORD *)(v59 + 40) = v62;
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Record not found to remove: %@", 30, 2, v59);
    swift_bridgeObjectRelease(v59);
    sub_1000C1434(0, v149, v148, v150);
  }
  else
  {
    v63 = v143;
    sub_1000C6CD0((uint64_t)v54, (uint64_t)v143, type metadata accessor for DeviceRecord);
    v64 = objc_autoreleasePoolPush();
    v65 = *v63;
    v66 = v63[1];
    sub_1000A0E74(*v63, v66);
    sub_100109DEC(v65, v66);
    isa = v67;
    sub_1000A103C(v65, v66);
    v69 = v129;
    sub_1000AE548((uint64_t)v63, v129, type metadata accessor for DeviceRecord);
    if (!isa)
      isa = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v69, type metadata accessor for DeviceRecord);
    v70 = (uint64_t)v144;
    v160 = isa;
    sub_10009E74C((id *)&v160);
    objc_autoreleasePoolPop(v64);
    v71 = -[objc_class recordID](isa, "recordID");

    v72 = objc_autoreleasePoolPush();
    v73 = *v63;
    v74 = v63[1];
    sub_1000A0E74(*v63, v74);
    sub_100109DEC(v73, v74);
    v76 = v75;
    sub_1000A103C(v73, v74);
    v77 = v131;
    sub_1000AE548((uint64_t)v63, v131, type metadata accessor for DeviceRecord);
    if (!v76)
      v76 = sub_1000A9BCC().super.isa;
    sub_1000AE58C(v77, type metadata accessor for DeviceRecord);
    v78 = v142;
    v160 = v76;
    sub_10009E74C((id *)&v160);
    objc_autoreleasePoolPop(v72);
    v80 = CKRecord.recordType.getter(v79);
    v82 = v81;

    sub_10013A5F4(v71, v80, v82, 0);
    swift_bridgeObjectRelease(v82);
    v83 = v158 + *(int *)(v55 + 20);
    v84 = v135;
    v85 = v132;
    v86 = v137;
    (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v132, v83, v137);
    v88 = *v130;
    v87 = v130[1];
    v89 = swift_bridgeObjectRetain(v87);
    v90 = v133;
    v91 = Date.init()(v89);
    v92 = Date.timeIntervalSince1970.getter(v91);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v90, v138);
    *(_BYTE *)v70 = 1;
    strcpy((char *)(v70 + 8), "DeviceRecord");
    *(_BYTE *)(v70 + 21) = 0;
    *(_WORD *)(v70 + 22) = -5120;
    v93 = (int *)v134;
    (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v70 + *(int *)(v134 + 24), v85, v86);
    v94 = (_QWORD *)(v70 + v93[7]);
    *v94 = v88;
    v94[1] = v87;
    *(double *)(v70 + v93[8]) = v92;
    *(_OWORD *)(v70 + v93[9]) = xmmword_100187E30;
    v95 = objc_autoreleasePoolPush();
    sub_100146F6C(v78, v70);
    objc_autoreleasePoolPop(v95);
    v96 = (_QWORD *)sub_10012A6A0();
    v97 = (void *)v96[9];
    v98 = v139;
    *v139 = v97;
    v99 = v140;
    v100 = v141;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v140 + 104))(v98, enum case for DispatchPredicate.notOnQueue(_:), v141);
    v101 = v97;
    LOBYTE(v88) = _dispatchPreconditionTest(_:)(v98);
    (*(void (**)(_QWORD *, uint64_t))(v99 + 8))(v98, v100);
    if ((v88 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v160, sub_100165060, v96, &type metadata for Bool);
      v102 = swift_unknownObjectRelease(v96);
      if ((v160 & 1) != 0)
      {
        v103 = sub_10012A6A0();
        v104 = objc_autoreleasePoolPush();
        v105 = *v63;
        v106 = v63[1];
        sub_1000A0E74(*v63, v106);
        sub_100109DEC(v105, v106);
        v108 = v107;
        sub_1000A103C(v105, v106);
        v109 = v126;
        sub_1000AE548((uint64_t)v63, v126, type metadata accessor for DeviceRecord);
        if (!v108)
          v108 = sub_1000A9BCC().super.isa;
        sub_1000AE58C(v109, type metadata accessor for DeviceRecord);
        v160 = v108;
        sub_10009E74C((id *)&v160);
        objc_autoreleasePoolPop(v104);
        v110 = -[objc_class recordID](v108, "recordID");

        v111 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v111 + 16, v78);
        v112 = v128;
        sub_1000AE548((uint64_t)v63, v128, type metadata accessor for DeviceRecord);
        v113 = *(unsigned __int8 *)(v157 + 80);
        v114 = (v113 + 16) & ~v113;
        v115 = (v127 + v114 + 7) & 0xFFFFFFFFFFFFFFF8;
        v116 = swift_allocObject(&unk_1001EC2C8, v115 + 8, v113 | 7);
        sub_1000C6CD0(v112, v116 + v114, type metadata accessor for DeviceRecord);
        *(_QWORD *)(v116 + v115) = v111;
        v117 = swift_allocObject(&unk_1001EC2F0, 49, 7);
        *(_QWORD *)(v117 + 16) = v103;
        *(_QWORD *)(v117 + 24) = v110;
        *(_QWORD *)(v117 + 32) = sub_100165D40;
        *(_QWORD *)(v117 + 40) = v116;
        *(_BYTE *)(v117 + 48) = 1;
        swift_retain(v111);
        swift_unknownObjectRetain(v103);
        v118 = v110;
        swift_retain(v116);
        sub_1000F7A44((uint64_t)sub_100164E44, v117);
        swift_release(v111);
        swift_release(v116);
        swift_unknownObjectRelease(v103);

        swift_release(v117);
      }
      else
      {
        v119 = static os_log_type_t.error.getter(v102);
        v120 = qword_100218DE8;
        v121 = swift_allocObject(v146, 72, 7);
        *(_OWORD *)(v121 + 16) = v145;
        v122 = sub_10009C9A8();
        v123 = v147;
        *(_QWORD *)(v121 + 56) = &type metadata for String;
        *(_QWORD *)(v121 + 64) = v123;
        *(_QWORD *)(v121 + 32) = v122;
        *(_QWORD *)(v121 + 40) = v124;
        os_log(_:dso:log:_:_:)(v119, &_mh_execute_header, v120, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v121);
        swift_bridgeObjectRelease(v121);
      }
      sub_1000C1434(0, v149, v148, v150);
      sub_1000AE58C(v70, type metadata accessor for BTDeferredRecord);
      sub_1000AE58C((uint64_t)v63, type metadata accessor for DeviceRecord);
    }
    else
    {
      __break(1u);
      swift_release(v150);
      swift_release(v149);
      objc_autoreleasePoolPop(v96);
      __break(1u);
    }
  }
}

void sub_1001607B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  void *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t (**v61)(uint64_t);
  uint64_t (*v62)(uint64_t);
  void *v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  Class v80;
  id v81;
  void *v82;
  uint64_t v83;
  Class v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  double v101;
  int *v102;
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  Class v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Class v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t);
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  Class aBlock[5];
  uint64_t v170;

  v152 = type metadata accessor for DispatchPredicate(0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (uint64_t *)((char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v148 = type metadata accessor for Date(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v143 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for UUID(0);
  v146 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v144 = (char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v145);
  v154 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for DispatchWorkItemFlags(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v140 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for DispatchQoS(0);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v137 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v161 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v160 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v163 = (char *)&v130 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v130 - v21;
  v162 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v162);
  v164 = (uint64_t *)((char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = type metadata accessor for DeviceSupportInformationRecord(0);
  v166 = *(_QWORD *)(v24 - 8);
  v167 = v24;
  __chkstk_darwin(v24);
  v156 = (uint64_t)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = v25;
  __chkstk_darwin(v26);
  v153 = (uint64_t)&v130 - v27;
  v28 = (uint64_t (*)(uint64_t))swift_allocObject(&unk_1001EC318, 40, 7);
  *((_QWORD *)v28 + 2) = a3;
  *((_QWORD *)v28 + 3) = a4;
  v134 = a4;
  v158 = v28;
  *((_QWORD *)v28 + 4) = a5;
  v136 = a3;
  swift_retain(a3);
  v135 = a5;
  v29 = swift_retain(a5);
  v30 = static os_log_type_t.default.getter(v29);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v31 = qword_100218DE8;
  v133 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v32 = swift_allocObject(v133, 72, 7);
  v132 = xmmword_100184870;
  *(_OWORD *)(v32 + 16) = xmmword_100184870;
  v33 = sub_1000DA63C();
  v35 = v34;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  v131 = sub_1000A0DF4();
  *(_QWORD *)(v32 + 64) = v131;
  *(_QWORD *)(v32 + 32) = v33;
  *(_QWORD *)(v32 + 40) = v35;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Remove device record: %@", 24, 2, v32);
  swift_bridgeObjectRelease(v32);
  v165 = a2;
  v36 = sub_100129690();
  v37 = *(int *)(v167 + 24);
  v157 = a1;
  v38 = *(_QWORD *)(a1 + v37);
  if (qword_100210180 != -1)
    swift_once(&qword_100210180, sub_1000DA4F0);
  v39 = sub_1000A0A00(v16, (uint64_t)qword_100218D28);
  v40 = v16;
  v41 = v161;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v161 + 16);
  v159 = v22;
  v42(v22, v39, v40);
  v43 = objc_autoreleasePoolPush();
  v45 = URL.path.getter(v44);
  v47 = v46;
  v48 = v160;
  URL.appendingPathComponent(_:)(v45);
  swift_bridgeObjectRelease(v47);
  v49 = v163;
  URL.appendingPathComponent(_:)(v38);
  v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  v50(v48, v40);
  objc_autoreleasePoolPop(v43);
  v51 = objc_autoreleasePoolPush();
  __chkstk_darwin(v51);
  *(&v130 - 2) = (uint64_t)v49;
  *(&v130 - 1) = v36;
  v52 = v164;
  OS_dispatch_queue.sync<A>(execute:)(v164, sub_1001685BC, &v130 - 4, v162);
  objc_autoreleasePoolPop(v51);
  v50(v49, v40);
  swift_release(v36);
  v50(v159, v40);
  v53 = v166;
  v54 = v167;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v166 + 48))(v52, 1, v167) == 1)
  {
    sub_1000A1000((uint64_t)v52, &qword_100210CE8);
    v55 = *(void **)(v165 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v56 = v156;
    sub_1000AE548(v157, v156, type metadata accessor for DeviceSupportInformationRecord);
    v57 = *(unsigned __int8 *)(v53 + 80);
    v58 = (v57 + 16) & ~v57;
    v59 = (v155 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
    v60 = swift_allocObject(&unk_1001EC340, v59 + 16, v57 | 7);
    sub_1000C6CD0(v56, v60 + v58, type metadata accessor for DeviceSupportInformationRecord);
    v61 = (uint64_t (**)(uint64_t))(v60 + v59);
    v62 = v158;
    *v61 = sub_100167898;
    v61[1] = v62;
    aBlock[4] = (Class)sub_100165D1C;
    v170 = v60;
    aBlock[0] = (Class)_NSConcreteStackBlock;
    aBlock[1] = (Class)1107296256;
    aBlock[2] = (Class)sub_1000E6A24;
    aBlock[3] = (Class)&unk_1001EC358;
    v63 = _Block_copy(aBlock);
    v64 = v55;
    v65 = swift_retain(v62);
    v66 = v137;
    static DispatchQoS.unspecified.getter(v65);
    v168 = _swiftEmptyArrayStorage;
    v67 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v68 = sub_1000A0980(&qword_100211D00);
    v69 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v70 = v140;
    v71 = v68;
    v72 = v142;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v168, v71, v69, v142, v67);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v66, v70, v63);
    _Block_release(v63);

    (*(void (**)(char *, uint64_t))(v141 + 8))(v70, v72);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v66, v139);
    v73 = v170;
    swift_release(v62);
    v74 = (_QWORD *)v73;
LABEL_12:
    swift_release(v74);
    return;
  }
  v75 = (uint64_t)v52;
  v76 = v153;
  sub_1000C6CD0(v75, v153, type metadata accessor for DeviceSupportInformationRecord);
  v77 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v76, aBlock);
  v78 = v165;
  v79 = v54;
  objc_autoreleasePoolPop(v77);
  v80 = aBlock[0];
  v81 = -[objc_class recordID](aBlock[0], "recordID");

  v82 = objc_autoreleasePoolPush();
  sub_1000DC7F8(v76, aBlock);
  v83 = (uint64_t)v154;
  objc_autoreleasePoolPop(v82);
  v84 = aBlock[0];
  v86 = CKRecord.recordType.getter(v85);
  v88 = v87;

  v89 = v78;
  sub_10013A5F4(v81, v86, v88, 0);

  swift_bridgeObjectRelease(v88);
  v90 = v146;
  v91 = v144;
  v92 = v149;
  (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v144, v76, v149);
  v93 = *(int *)(v79 + 24);
  v94 = v89;
  v95 = (uint64_t *)(v76 + v93);
  v97 = *v95;
  v96 = v95[1];
  v98 = swift_bridgeObjectRetain(v96);
  v99 = v143;
  v100 = Date.init()(v98);
  v101 = Date.timeIntervalSince1970.getter(v100);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v99, v148);
  *(_BYTE *)v83 = 1;
  *(_QWORD *)(v83 + 8) = 0xD00000000000001ELL;
  *(_QWORD *)(v83 + 16) = 0x80000001001AA950;
  v102 = (int *)v145;
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v83 + *(int *)(v145 + 24), v91, v92);
  v103 = (_QWORD *)(v83 + v102[7]);
  *v103 = v97;
  v103[1] = v96;
  *(double *)(v83 + v102[8]) = v101;
  *(_OWORD *)(v83 + v102[9]) = xmmword_100187E30;
  v104 = objc_autoreleasePoolPush();
  sub_100146F6C(v94, v83);
  objc_autoreleasePoolPop(v104);
  v105 = (_QWORD *)sub_10012A6A0();
  v106 = (void *)v105[9];
  v107 = v150;
  *v150 = v106;
  v108 = v151;
  v109 = v152;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v151 + 104))(v107, enum case for DispatchPredicate.notOnQueue(_:), v152);
  v110 = v106;
  LOBYTE(v97) = _dispatchPreconditionTest(_:)(v107);
  (*(void (**)(_QWORD *, uint64_t))(v108 + 8))(v107, v109);
  if ((v97 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v105, &type metadata for Bool);
    v111 = swift_unknownObjectRelease(v105);
    if (((uint64_t)aBlock[0] & 1) != 0)
    {
      v112 = sub_10012A6A0();
      v113 = objc_autoreleasePoolPush();
      sub_1000DC7F8(v76, aBlock);
      objc_autoreleasePoolPop(v113);
      v114 = aBlock[0];
      v115 = -[objc_class recordID](aBlock[0], "recordID");

      v116 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v116 + 16, v94);
      v117 = v156;
      sub_1000AE548(v76, v156, type metadata accessor for DeviceSupportInformationRecord);
      v118 = *(unsigned __int8 *)(v166 + 80);
      v119 = (v118 + 16) & ~v118;
      v120 = (v155 + v119 + 7) & 0xFFFFFFFFFFFFFFF8;
      v121 = swift_allocObject(&unk_1001EC390, v120 + 8, v118 | 7);
      sub_1000C6CD0(v117, v121 + v119, type metadata accessor for DeviceSupportInformationRecord);
      *(_QWORD *)(v121 + v120) = v116;
      v122 = swift_allocObject(&unk_1001EC3B8, 49, 7);
      *(_QWORD *)(v122 + 16) = v112;
      *(_QWORD *)(v122 + 24) = v115;
      *(_QWORD *)(v122 + 32) = sub_100165D24;
      *(_QWORD *)(v122 + 40) = v121;
      *(_BYTE *)(v122 + 48) = 1;
      swift_retain(v116);
      swift_unknownObjectRetain(v112);
      v123 = v115;
      swift_retain(v121);
      sub_1000F7A44((uint64_t)sub_100164E44, v122);
      swift_release(v116);
      swift_release(v121);
      swift_unknownObjectRelease(v112);

      swift_release(v122);
    }
    else
    {
      v124 = static os_log_type_t.error.getter(v111);
      v125 = qword_100218DE8;
      v126 = swift_allocObject(v133, 72, 7);
      *(_OWORD *)(v126 + 16) = v132;
      v127 = sub_1000DA63C();
      v128 = v131;
      *(_QWORD *)(v126 + 56) = &type metadata for String;
      *(_QWORD *)(v126 + 64) = v128;
      *(_QWORD *)(v126 + 32) = v127;
      *(_QWORD *)(v126 + 40) = v129;
      os_log(_:dso:log:_:_:)(v124, &_mh_execute_header, v125, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v126);
      swift_bridgeObjectRelease(v126);
    }
    sub_1000C1434(0, v136, v134, v135);
    sub_1000AE58C(v83, type metadata accessor for BTDeferredRecord);
    sub_1000AE58C(v76, type metadata accessor for DeviceSupportInformationRecord);
    v74 = v158;
    goto LABEL_12;
  }
  __break(1u);
  swift_release(v135);
  swift_release(v136);
  objc_autoreleasePoolPop(v105);
  __break(1u);
  swift_release(v135);
  swift_release(v136);
  objc_autoreleasePoolPop(v110);
  __break(1u);
}

void sub_10016147C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  objc_class *v72;
  Class isa;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  objc_class *v80;
  Class v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  double v100;
  int *v101;
  _QWORD *v102;
  void *v103;
  _QWORD *v104;
  void *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  objc_class *v115;
  Class v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  Class v172;

  v160 = a4;
  v161 = a6;
  v159 = a5;
  v140 = a2;
  v150 = type metadata accessor for DispatchPredicate(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (uint64_t *)((char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v147 = type metadata accessor for Date(0);
  v145 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v142 = (char *)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for UUID(0);
  v144 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v141 = (char *)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v143);
  v152 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v165 = v12;
  v166 = v13;
  __chkstk_darwin(v12);
  v164 = (char *)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v168 = (char *)&v135 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v135 - v18;
  v167 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v167);
  v169 = (uint64_t *)((char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for MagicPairingSettingsRecord(0);
  v170 = *(_QWORD *)(v21 - 8);
  v171 = v21;
  __chkstk_darwin(v21);
  v136 = (uint64_t)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v139 = (uint64_t)&v135 - v24;
  __chkstk_darwin(v25);
  v138 = (uint64_t)&v135 - v26;
  __chkstk_darwin(v27);
  v151 = (uint64_t)&v135 - v28;
  v137 = v29;
  __chkstk_darwin(v30);
  v32 = (char *)&v135 - v31;
  v34 = static os_log_type_t.default.getter(v33);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v35 = qword_100218DE8;
  v154 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v36 = swift_allocObject(v154, 72, 7);
  v153 = xmmword_100184870;
  *(_OWORD *)(v36 + 16) = xmmword_100184870;
  sub_1000AE548(a1, (uint64_t)v32, type metadata accessor for MagicPairingSettingsRecord);
  v37 = sub_1000C8310();
  v39 = v38;
  v158 = v32;
  sub_1000AE58C((uint64_t)v32, type metadata accessor for MagicPairingSettingsRecord);
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  v155 = sub_1000A0DF4();
  *(_QWORD *)(v36 + 64) = v155;
  *(_QWORD *)(v36 + 32) = v37;
  *(_QWORD *)(v36 + 40) = v39;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Remove magic device record: %@", 30, 2, v36);
  swift_bridgeObjectRelease(v36);
  v157 = a3;
  v40 = sub_100129690();
  v41 = *(int *)(v171 + 24);
  v156 = a1;
  v42 = (uint64_t *)(a1 + v41);
  v43 = *v42;
  v162 = v42[1];
  v163 = v43;
  if (qword_100210160 != -1)
    swift_once(&qword_100210160, sub_1000C81B8);
  v44 = v165;
  v45 = sub_1000A0A00(v165, (uint64_t)qword_100218C90);
  v46 = v166;
  (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v19, v45, v44);
  v47 = objc_autoreleasePoolPush();
  v49 = URL.path.getter(v48);
  v51 = v50;
  v52 = v164;
  URL.appendingPathComponent(_:)(v49);
  swift_bridgeObjectRelease(v51);
  v53 = v168;
  URL.appendingPathComponent(_:)(v163);
  v54 = *(void (**)(char *, uint64_t))(v46 + 8);
  v54(v52, v44);
  objc_autoreleasePoolPop(v47);
  v55 = objc_autoreleasePoolPush();
  __chkstk_darwin(v55);
  *(&v135 - 2) = (uint64_t)v53;
  *(&v135 - 1) = v40;
  v56 = v169;
  OS_dispatch_queue.sync<A>(execute:)(v169, sub_1001685A8, &v135 - 4, v167);
  objc_autoreleasePoolPop(v55);
  v54(v53, v44);
  swift_release(v40);
  v54(v19, v44);
  v57 = v171;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v170 + 48))(v56, 1, v171) == 1)
  {
    v58 = sub_1000A1000((uint64_t)v56, (uint64_t *)&unk_100212190);
    v59 = static os_log_type_t.error.getter(v58);
    v60 = qword_100218DE8;
    v61 = swift_allocObject(v154, 72, 7);
    *(_OWORD *)(v61 + 16) = v153;
    v62 = (uint64_t)v158;
    sub_1000AE548(v156, (uint64_t)v158, type metadata accessor for MagicPairingSettingsRecord);
    v63 = sub_1000C8310();
    v65 = v64;
    sub_1000AE58C(v62, type metadata accessor for MagicPairingSettingsRecord);
    v66 = v155;
    *(_QWORD *)(v61 + 56) = &type metadata for String;
    *(_QWORD *)(v61 + 64) = v66;
    *(_QWORD *)(v61 + 32) = v63;
    *(_QWORD *)(v61 + 40) = v65;
    os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v60, "Magic Record not found to remove: %@", 36, 2, v61);
    swift_bridgeObjectRelease(v61);
    sub_1000C1434(0, v160, v159, v161);
  }
  else
  {
    v67 = v151;
    sub_1000C6CD0((uint64_t)v56, v151, type metadata accessor for MagicPairingSettingsRecord);
    v68 = objc_autoreleasePoolPush();
    v69 = (uint64_t *)(v67 + *(int *)(v57 + 20));
    v70 = *v69;
    v71 = v69[1];
    sub_1000A0E74(*v69, v71);
    sub_100109DEC(v70, v71);
    isa = v72;
    sub_1000A103C(v70, v71);
    v74 = v138;
    sub_1000AE548(v67, v138, type metadata accessor for MagicPairingSettingsRecord);
    if (!isa)
      isa = sub_1000A99D8(v74).super.isa;
    sub_1000AE58C(v74, type metadata accessor for MagicPairingSettingsRecord);
    v75 = (uint64_t)v152;
    v172 = isa;
    sub_1000CBDA8((id *)&v172);
    objc_autoreleasePoolPop(v68);
    v76 = -[objc_class recordID](isa, "recordID");

    v77 = objc_autoreleasePoolPush();
    v78 = *v69;
    v79 = v69[1];
    sub_1000A0E74(*v69, v79);
    sub_100109DEC(v78, v79);
    v81 = v80;
    sub_1000A103C(v78, v79);
    v82 = v139;
    sub_1000AE548(v67, v139, type metadata accessor for MagicPairingSettingsRecord);
    v169 = v69;
    if (!v81)
      v81 = sub_1000A99D8(v82).super.isa;
    sub_1000AE58C(v82, type metadata accessor for MagicPairingSettingsRecord);
    v172 = v81;
    sub_1000CBDA8((id *)&v172);
    objc_autoreleasePoolPop(v77);
    v84 = CKRecord.recordType.getter(v83);
    v86 = v85;

    v87 = v84;
    v88 = v157;
    sub_10013A5F4(v76, v87, v86, v140 & 1);

    v89 = v86;
    v90 = v88;
    swift_bridgeObjectRelease(v89);
    v91 = v144;
    v92 = v141;
    v93 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v144 + 16))(v141, v67, v146);
    v94 = (uint64_t *)(v67 + *(int *)(v171 + 24));
    v96 = *v94;
    v95 = v94[1];
    v97 = swift_bridgeObjectRetain(v95);
    v98 = v142;
    v99 = Date.init()(v97);
    v100 = Date.timeIntervalSince1970.getter(v99);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v98, v147);
    *(_BYTE *)v75 = 1;
    strcpy((char *)(v75 + 8), "MagicSettings");
    *(_WORD *)(v75 + 22) = -4864;
    v101 = (int *)v143;
    (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v75 + *(int *)(v143 + 24), v92, v93);
    v102 = (_QWORD *)(v75 + v101[7]);
    *v102 = v96;
    v102[1] = v95;
    *(double *)(v75 + v101[8]) = v100;
    *(_OWORD *)(v75 + v101[9]) = xmmword_100187E30;
    v103 = objc_autoreleasePoolPush();
    sub_100146F6C(v90, v75);
    objc_autoreleasePoolPop(v103);
    v104 = (_QWORD *)sub_10012A6A0();
    v105 = (void *)v104[9];
    v106 = v148;
    *v148 = v105;
    v107 = v149;
    v108 = v150;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v149 + 104))(v106, enum case for DispatchPredicate.notOnQueue(_:), v150);
    v109 = v105;
    LOBYTE(v96) = _dispatchPreconditionTest(_:)(v106);
    (*(void (**)(_QWORD *, uint64_t))(v107 + 8))(v106, v108);
    if ((v96 & 1) != 0)
    {
      OS_dispatch_queue.sync<A>(execute:)(&v172, sub_100165060, v104, &type metadata for Bool);
      v110 = swift_unknownObjectRelease(v104);
      if ((v172 & 1) != 0)
      {
        v111 = sub_10012A6A0();
        v112 = objc_autoreleasePoolPush();
        v113 = *v169;
        v114 = v169[1];
        sub_1000A0E74(*v169, v114);
        sub_100109DEC(v113, v114);
        v116 = v115;
        sub_1000A103C(v113, v114);
        v117 = v136;
        sub_1000AE548(v67, v136, type metadata accessor for MagicPairingSettingsRecord);
        if (!v116)
          v116 = sub_1000A99D8(v117).super.isa;
        sub_1000AE58C(v117, type metadata accessor for MagicPairingSettingsRecord);
        v172 = v116;
        sub_1000CBDA8((id *)&v172);
        objc_autoreleasePoolPop(v112);
        v118 = -[objc_class recordID](v116, "recordID");

        v119 = swift_allocObject(&unk_1001EB580, 24, 7);
        swift_weakInit(v119 + 16, v157);
        v120 = (uint64_t)v158;
        sub_1000AE548(v67, (uint64_t)v158, type metadata accessor for MagicPairingSettingsRecord);
        v121 = *(unsigned __int8 *)(v170 + 80);
        v122 = (v121 + 16) & ~v121;
        v123 = (v137 + v122 + 7) & 0xFFFFFFFFFFFFFFF8;
        v124 = swift_allocObject(&unk_1001EC3E0, v123 + 8, v121 | 7);
        sub_1000C6CD0(v120, v124 + v122, type metadata accessor for MagicPairingSettingsRecord);
        *(_QWORD *)(v124 + v123) = v119;
        v125 = swift_allocObject(&unk_1001EC408, 49, 7);
        *(_QWORD *)(v125 + 16) = v111;
        *(_QWORD *)(v125 + 24) = v118;
        *(_QWORD *)(v125 + 32) = sub_10016507C;
        *(_QWORD *)(v125 + 40) = v124;
        *(_BYTE *)(v125 + 48) = 1;
        swift_retain(v119);
        swift_unknownObjectRetain(v111);
        v126 = v118;
        swift_retain(v124);
        sub_1000F7A44((uint64_t)sub_100164E44, v125);
        swift_release(v119);
        swift_release(v124);
        swift_unknownObjectRelease(v111);

        swift_release(v125);
      }
      else
      {
        v127 = static os_log_type_t.error.getter(v110);
        v128 = qword_100218DE8;
        v129 = swift_allocObject(v154, 72, 7);
        *(_OWORD *)(v129 + 16) = v153;
        v130 = (uint64_t)v158;
        sub_1000AE548(v156, (uint64_t)v158, type metadata accessor for MagicPairingSettingsRecord);
        v131 = sub_1000C8310();
        v133 = v132;
        sub_1000AE58C(v130, type metadata accessor for MagicPairingSettingsRecord);
        v134 = v155;
        *(_QWORD *)(v129 + 56) = &type metadata for String;
        *(_QWORD *)(v129 + 64) = v134;
        *(_QWORD *)(v129 + 32) = v131;
        *(_QWORD *)(v129 + 40) = v133;
        os_log(_:dso:log:_:_:)(v127, &_mh_execute_header, v128, "CloudCoordinator not available. Defer deleting magic record - %@", 64, 2, v129);
        swift_bridgeObjectRelease(v129);
      }
      sub_1000C1434(0, v160, v159, v161);
      sub_1000AE58C(v75, type metadata accessor for BTDeferredRecord);
      sub_1000AE58C(v67, type metadata accessor for MagicPairingSettingsRecord);
    }
    else
    {
      __break(1u);
      swift_release(v161);
      swift_release(v160);
      objc_autoreleasePoolPop(v104);
      __break(1u);
    }
  }
}

void sub_1001620F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  objc_class *v42;
  Class isa;
  char *v44;
  uint64_t *v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  objc_class *v50;
  Class v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  double v66;
  int *v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  objc_class *v82;
  Class v83;
  char *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  id v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  id v97;
  _QWORD *v98;
  void *v99;
  id v100;
  id v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  id v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  _QWORD *v147;
  id aBlock[3];
  ValueMetadata *v149;
  unint64_t v150;
  _QWORD *v151;

  v146 = a2;
  v9 = type metadata accessor for DispatchPredicate(0);
  v143 = *(_QWORD *)(v9 - 8);
  v144 = v9;
  __chkstk_darwin(v9);
  v142 = (uint64_t *)((char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v141 = type metadata accessor for Date(0);
  v139 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v12 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for UUID(0);
  v138 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v136 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v137);
  v145 = (uint64_t *)((char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v135 = type metadata accessor for DispatchWorkItemFlags(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for DispatchQoS(0);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)swift_allocObject(&unk_1001EC430, 40, 7);
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v149 = &type metadata for AudioAccessoryFeatures;
  v150 = sub_1000A42C4();
  swift_retain(a3);
  swift_retain(a5);
  v22 = isFeatureEnabled(_:)(aBlock);
  v23 = sub_1000A2140(aBlock);
  if ((v22 & 1) == 0)
  {
    v91 = sub_1000D8604();
    v92 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v91, 0, 0);
    *v93 = 0x8000000000000038;
    sub_1000C1434(v92, a3, a4, a5);
    swift_errorRelease(v92);
    v94 = v21;
LABEL_20:
    swift_release(v94);
    return;
  }
  v126 = v12;
  v127 = a4;
  v124 = a3;
  v125 = a5;
  v129 = v21;
  v24 = static os_log_type_t.default.getter(v23);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v25 = qword_100218DE8;
  v123 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v26 = swift_allocObject(v123, 72, 7);
  v122 = xmmword_100184870;
  *(_OWORD *)(v26 + 16) = xmmword_100184870;
  v27 = a1;
  v28 = objc_msgSend(v27, "description");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  *(_QWORD *)(v26 + 56) = &type metadata for String;
  v121 = sub_1000A0DF4();
  *(_QWORD *)(v26 + 64) = v121;
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v31;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Remove AADeviceRecord: %@", 25, 2, v26);
  swift_bridgeObjectRelease(v26);
  v32 = v146;
  v33 = sub_100129690();
  v128 = v27;
  v34 = *(_QWORD *)&v27[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  v35 = *(_QWORD *)&v27[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
  if (qword_1002101B0 != -1)
    swift_once(&qword_1002101B0, sub_100106014);
  v36 = sub_1000A0A00(v17, (uint64_t)qword_100218D68);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v36, v17);
  v37 = (char *)sub_100127638(v34, v35, (uint64_t)v20, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
  swift_release(v33);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (!v37)
  {
    v95 = *(void **)(v32 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v96 = (_QWORD *)swift_allocObject(&unk_1001EC458, 40, 7);
    v97 = v128;
    v96[2] = v128;
    v96[3] = sub_1001683A8;
    v98 = v129;
    v96[4] = v129;
    v150 = (unint64_t)sub_100168634;
    v151 = v96;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000E6A24;
    v149 = (ValueMetadata *)&unk_1001EC470;
    v99 = _Block_copy(aBlock);
    v100 = v97;
    v101 = v95;
    v102 = swift_retain(v98);
    v103 = v130;
    static DispatchQoS.unspecified.getter(v102);
    v147 = _swiftEmptyArrayStorage;
    v104 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v105 = sub_1000A0980(&qword_100211D00);
    v106 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v107 = v133;
    v108 = v105;
    v109 = v135;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v147, v108, v106, v135, v104);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v103, v107, v99);
    _Block_release(v99);

    (*(void (**)(char *, uint64_t))(v134 + 8))(v107, v109);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v103, v132);
    v110 = v151;
    swift_release(v98);
    v94 = v110;
    goto LABEL_20;
  }
  v38 = objc_autoreleasePoolPush();
  v39 = (uint64_t *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v40 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata];
  v41 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_cloudMetadata + 8];
  sub_1000A0E74(v40, v41);
  sub_100109DEC(v40, v41);
  isa = v42;
  sub_1000A103C(v40, v41);
  if (!isa)
  {
    v44 = v37;
    isa = sub_1000A9DB8((uint64_t)v44).super.isa;

  }
  v45 = v145;
  aBlock[0] = isa;
  sub_10010894C(aBlock);
  objc_autoreleasePoolPop(v38);
  v46 = -[objc_class recordID](isa, "recordID");

  v47 = objc_autoreleasePoolPush();
  v48 = *v39;
  v49 = v39[1];
  v145 = v39;
  sub_1000A0E74(v48, v49);
  sub_100109DEC(v48, v49);
  v51 = v50;
  sub_1000A103C(v48, v49);
  if (!v51)
  {
    v52 = v37;
    v51 = sub_1000A9DB8((uint64_t)v52).super.isa;

  }
  aBlock[0] = v51;
  sub_10010894C(aBlock);
  objc_autoreleasePoolPop(v47);
  v54 = CKRecord.recordType.getter(v53);
  v56 = v55;

  v57 = v146;
  sub_10013A5F4(v46, v54, v56, 0);

  swift_bridgeObjectRelease(v56);
  v58 = v138;
  v59 = v136;
  v60 = v140;
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v136, &v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier], v140);
  v62 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress];
  v61 = *(_QWORD *)&v37[OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_bluetoothAddress + 8];
  v63 = swift_bridgeObjectRetain(v61);
  v64 = v126;
  v65 = Date.init()(v63);
  v66 = Date.timeIntervalSince1970.getter(v65);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v64, v141);
  *(_BYTE *)v45 = 1;
  strcpy((char *)v45 + 8, "AADeviceRecord");
  *((_BYTE *)v45 + 23) = -18;
  v67 = (int *)v137;
  (*(void (**)(_BYTE *, char *, uint64_t))(v58 + 32))((_BYTE *)v45 + *(int *)(v137 + 24), v59, v60);
  v68 = (uint64_t *)((char *)v45 + v67[7]);
  *v68 = v62;
  v68[1] = v61;
  *(double *)((char *)v45 + v67[8]) = v66;
  *(_OWORD *)((char *)v45 + v67[9]) = xmmword_100187E30;
  v69 = objc_autoreleasePoolPush();
  sub_100146F6C(v57, (uint64_t)v45);
  objc_autoreleasePoolPop(v69);
  v70 = (_QWORD *)sub_10012A6A0();
  v71 = (void *)v70[9];
  v72 = v142;
  v73 = v143;
  *v142 = v71;
  v74 = v144;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for DispatchPredicate.notOnQueue(_:), v144);
  v75 = v71;
  LOBYTE(v60) = _dispatchPreconditionTest(_:)(v72);
  (*(void (**)(_QWORD *, uint64_t))(v73 + 8))(v72, v74);
  v76 = v127;
  if ((v60 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v70, &type metadata for Bool);
    v77 = swift_unknownObjectRelease(v70);
    if (((uint64_t)aBlock[0] & 1) != 0)
    {
      v78 = sub_10012A6A0();
      v79 = objc_autoreleasePoolPush();
      v80 = *v145;
      v81 = v145[1];
      sub_1000A0E74(*v145, v81);
      sub_100109DEC(v80, v81);
      v83 = v82;
      sub_1000A103C(v80, v81);
      if (!v83)
      {
        v84 = v37;
        v83 = sub_1000A9DB8((uint64_t)v84).super.isa;

      }
      aBlock[0] = v83;
      sub_10010894C(aBlock);
      objc_autoreleasePoolPop(v79);
      v85 = -[objc_class recordID](v83, "recordID");

      v86 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v86 + 16, v146);
      v87 = swift_allocObject(&unk_1001EC4A8, 32, 7);
      *(_QWORD *)(v87 + 16) = v37;
      *(_QWORD *)(v87 + 24) = v86;
      v88 = swift_allocObject(&unk_1001EC4D0, 49, 7);
      *(_QWORD *)(v88 + 16) = v78;
      *(_QWORD *)(v88 + 24) = v85;
      *(_QWORD *)(v88 + 32) = sub_100168644;
      *(_QWORD *)(v88 + 40) = v87;
      *(_BYTE *)(v88 + 48) = 1;
      v89 = v37;
      swift_retain(v86);
      swift_unknownObjectRetain(v78);
      v90 = v85;
      swift_retain(v87);
      sub_1000F7A44((uint64_t)sub_100164E44, v88);
      swift_unknownObjectRelease(v78);

      swift_release(v86);
      swift_release(v87);
      swift_release(v88);
    }
    else
    {
      v111 = static os_log_type_t.error.getter(v77);
      v112 = qword_100218DE8;
      v113 = swift_allocObject(v123, 72, 7);
      *(_OWORD *)(v113 + 16) = v122;
      v114 = v128;
      v115 = objc_msgSend(v114, "description");
      v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
      v118 = v117;

      v119 = v121;
      *(_QWORD *)(v113 + 56) = &type metadata for String;
      *(_QWORD *)(v113 + 64) = v119;
      *(_QWORD *)(v113 + 32) = v116;
      *(_QWORD *)(v113 + 40) = v118;
      os_log(_:dso:log:_:_:)(v111, &_mh_execute_header, v112, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v113);
      swift_bridgeObjectRelease(v113);
    }
    sub_1000C1434(0, v124, v76, v125);

    sub_1000AE58C((uint64_t)v45, type metadata accessor for BTDeferredRecord);
    v94 = v129;
    goto LABEL_20;
  }
  __break(1u);
  swift_release(v125);
  swift_release(v124);
  objc_autoreleasePoolPop(v70);
  __break(1u);
}

void sub_100162C7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  objc_class *v43;
  Class isa;
  char *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  objc_class *v51;
  Class v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  double v67;
  int *v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  objc_class *v83;
  Class v84;
  char *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  id v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  _QWORD *v97;
  id v98;
  _QWORD *v99;
  void *v100;
  id v101;
  id v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  id v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD aBlock[3];
  ValueMetadata *v150;
  unint64_t v151;
  _QWORD *v152;

  v147 = a2;
  v9 = type metadata accessor for DispatchPredicate(0);
  v144 = *(_QWORD *)(v9 - 8);
  v145 = v9;
  __chkstk_darwin(v9);
  v143 = (uint64_t *)((char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Date(0);
  v140 = *(_QWORD *)(v11 - 8);
  v141 = v11;
  __chkstk_darwin(v11);
  v137 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for UUID(0);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v14 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for BTDeferredRecord(0);
  __chkstk_darwin(v138);
  v146 = (uint64_t *)((char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v136 = type metadata accessor for DispatchWorkItemFlags(0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v134 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for DispatchQoS(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (_QWORD *)swift_allocObject(&unk_1001EC4F8, 40, 7);
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v150 = &type metadata for AudioAccessoryFeatures;
  v151 = sub_1000A42C4();
  swift_retain(a3);
  swift_retain(a5);
  v23 = isFeatureEnabled(_:)(aBlock);
  v24 = sub_1000A2140(aBlock);
  if ((v23 & 1) == 0)
  {
    v92 = sub_1000D8604();
    v93 = swift_allocError(&type metadata for DeviceStore.DeviceStoreError, v92, 0, 0);
    *v94 = 0x8000000000000038;
    sub_1000C1434(v93, a3, a4, a5);
    swift_errorRelease(v93);
    v95 = v22;
LABEL_20:
    swift_release(v95);
    return;
  }
  v127 = v14;
  v128 = a4;
  v125 = a3;
  v126 = a5;
  v130 = v22;
  v25 = static os_log_type_t.default.getter(v24);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v26 = qword_100218DE8;
  v124 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v27 = swift_allocObject(v124, 72, 7);
  v123 = xmmword_100184870;
  *(_OWORD *)(v27 + 16) = xmmword_100184870;
  v28 = a1;
  v29 = objc_msgSend(v28, "description");
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  *(_QWORD *)(v27 + 56) = &type metadata for String;
  v122 = sub_1000A0DF4();
  *(_QWORD *)(v27 + 64) = v122;
  *(_QWORD *)(v27 + 32) = v30;
  *(_QWORD *)(v27 + 40) = v32;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Remove AAProxCardsRecord: %@", 28, 2, v27);
  swift_bridgeObjectRelease(v27);
  v33 = v147;
  v34 = sub_100129690();
  v129 = v28;
  v35 = *(_QWORD *)&v28[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  v36 = *(_QWORD *)&v28[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  if (qword_100210130 != -1)
    swift_once(&qword_100210130, sub_1000A5BC0);
  v37 = sub_1000A0A00(v18, (uint64_t)qword_100218C00);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v37, v18);
  v38 = (char *)sub_100127638(v35, v36, (uint64_t)v21, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
  swift_release(v34);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if (!v38)
  {
    v96 = *(void **)(v33 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
    v97 = (_QWORD *)swift_allocObject(&unk_1001EC520, 40, 7);
    v98 = v129;
    v97[2] = v129;
    v97[3] = sub_1001683A8;
    v99 = v130;
    v97[4] = v130;
    v151 = (unint64_t)sub_100168634;
    v152 = v97;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E6A24;
    v150 = (ValueMetadata *)&unk_1001EC538;
    v100 = _Block_copy(aBlock);
    v101 = v98;
    v102 = v96;
    v103 = swift_retain(v99);
    v104 = v131;
    static DispatchQoS.unspecified.getter(v103);
    v148 = _swiftEmptyArrayStorage;
    v105 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v106 = sub_1000A0980(&qword_100211D00);
    v107 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
    v108 = v134;
    v109 = v106;
    v110 = v136;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v148, v109, v107, v136, v105);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v108, v100);
    _Block_release(v100);

    (*(void (**)(char *, uint64_t))(v135 + 8))(v108, v110);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v104, v133);
    v111 = v152;
    swift_release(v99);
    v95 = v111;
    goto LABEL_20;
  }
  v39 = objc_autoreleasePoolPush();
  v40 = (uint64_t *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v41 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  v42 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
  sub_1000A0E74(v41, v42);
  sub_100109DEC(v41, v42);
  isa = v43;
  sub_1000A103C(v41, v42);
  if (!isa)
  {
    v45 = v38;
    isa = sub_1000A9D94((uint64_t)v45).super.isa;

  }
  v46 = (uint64_t)v146;
  aBlock[0] = isa;
  sub_1000A89A0((unint64_t)aBlock);
  objc_autoreleasePoolPop(v39);
  v47 = -[objc_class recordID](isa, "recordID");

  v48 = objc_autoreleasePoolPush();
  v49 = *v40;
  v50 = v40[1];
  v146 = v40;
  sub_1000A0E74(v49, v50);
  sub_100109DEC(v49, v50);
  v52 = v51;
  sub_1000A103C(v49, v50);
  if (!v52)
  {
    v53 = v38;
    v52 = sub_1000A9D94((uint64_t)v53).super.isa;

  }
  aBlock[0] = v52;
  sub_1000A89A0((unint64_t)aBlock);
  objc_autoreleasePoolPop(v48);
  v55 = CKRecord.recordType.getter(v54);
  v57 = v56;

  v58 = v147;
  sub_10013A5F4(v47, v55, v57, 0);

  swift_bridgeObjectRelease(v57);
  v59 = v139;
  v60 = v127;
  v61 = v142;
  (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v127, &v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier], v142);
  v63 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  v62 = *(_QWORD *)&v38[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  v64 = swift_bridgeObjectRetain(v62);
  v65 = v137;
  v66 = Date.init()(v64);
  v67 = Date.timeIntervalSince1970.getter(v66);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v65, v141);
  *(_BYTE *)v46 = 1;
  *(_QWORD *)(v46 + 8) = 0xD000000000000011;
  *(_QWORD *)(v46 + 16) = 0x80000001001B1050;
  v68 = (int *)v138;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v46 + *(int *)(v138 + 24), v60, v61);
  v69 = (_QWORD *)(v46 + v68[7]);
  *v69 = v63;
  v69[1] = v62;
  *(double *)(v46 + v68[8]) = v67;
  *(_OWORD *)(v46 + v68[9]) = xmmword_100187E30;
  v70 = objc_autoreleasePoolPush();
  sub_100146F6C(v58, v46);
  objc_autoreleasePoolPop(v70);
  v71 = (_QWORD *)sub_10012A6A0();
  v72 = (void *)v71[9];
  v73 = v143;
  v74 = v144;
  *v143 = v72;
  v75 = v145;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v74 + 104))(v73, enum case for DispatchPredicate.notOnQueue(_:), v145);
  v76 = v72;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)(v73);
  (*(void (**)(_QWORD *, uint64_t))(v74 + 8))(v73, v75);
  v77 = v128;
  if ((v61 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(aBlock, sub_100165060, v71, &type metadata for Bool);
    v78 = swift_unknownObjectRelease(v71);
    if ((aBlock[0] & 1) != 0)
    {
      v79 = sub_10012A6A0();
      v80 = objc_autoreleasePoolPush();
      v81 = *v146;
      v82 = v146[1];
      sub_1000A0E74(*v146, v82);
      sub_100109DEC(v81, v82);
      v84 = v83;
      sub_1000A103C(v81, v82);
      if (!v84)
      {
        v85 = v38;
        v84 = sub_1000A9D94((uint64_t)v85).super.isa;

      }
      aBlock[0] = v84;
      sub_1000A89A0((unint64_t)aBlock);
      objc_autoreleasePoolPop(v80);
      v86 = -[objc_class recordID](v84, "recordID");

      v87 = swift_allocObject(&unk_1001EB580, 24, 7);
      swift_weakInit(v87 + 16, v147);
      v88 = swift_allocObject(&unk_1001EC570, 32, 7);
      *(_QWORD *)(v88 + 16) = v38;
      *(_QWORD *)(v88 + 24) = v87;
      v89 = swift_allocObject(&unk_1001EC598, 49, 7);
      *(_QWORD *)(v89 + 16) = v79;
      *(_QWORD *)(v89 + 24) = v86;
      *(_QWORD *)(v89 + 32) = sub_100168648;
      *(_QWORD *)(v89 + 40) = v88;
      *(_BYTE *)(v89 + 48) = 1;
      v90 = v38;
      swift_retain(v87);
      swift_unknownObjectRetain(v79);
      v91 = v86;
      swift_retain(v88);
      sub_1000F7A44((uint64_t)sub_100164E44, v89);
      swift_unknownObjectRelease(v79);

      swift_release(v87);
      swift_release(v88);
      swift_release(v89);
    }
    else
    {
      v112 = static os_log_type_t.error.getter(v78);
      v113 = qword_100218DE8;
      v114 = swift_allocObject(v124, 72, 7);
      *(_OWORD *)(v114 + 16) = v123;
      v115 = v129;
      v116 = objc_msgSend(v115, "description");
      v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
      v119 = v118;

      v120 = v122;
      *(_QWORD *)(v114 + 56) = &type metadata for String;
      *(_QWORD *)(v114 + 64) = v120;
      *(_QWORD *)(v114 + 32) = v117;
      *(_QWORD *)(v114 + 40) = v119;
      os_log(_:dso:log:_:_:)(v112, &_mh_execute_header, v113, "CloudCoordinator not available. Defer deleting record - %@", 58, 2, v114);
      swift_bridgeObjectRelease(v114);
    }
    sub_1000C1434(0, v125, v77, v126);

    sub_1000AE58C(v46, type metadata accessor for BTDeferredRecord);
    v95 = v130;
    goto LABEL_20;
  }
  __break(1u);
  swift_release(v126);
  swift_release(v125);
  objc_autoreleasePoolPop(v71);
  __break(1u);
}

uint64_t sub_1001637F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100163868(a1, a2, a3, a4, a5, a6, a7, a8, sub_1001685D0, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10015FBC4, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1000C1434, sub_1001685BC, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001607B4, (uint64_t)sub_1001685A8, (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_10016147C, sub_1001620F8, sub_100162C7C);
}

uint64_t sub_100163868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, void (*a10)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), void (*a11)(_QWORD, uint64_t, uint64_t, uint64_t), _QWORD *a12, void (*a13)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a14, void (*a15)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t), void (*a16)(void *, uint64_t, uint64_t, uint64_t, uint64_t), void (*a17)(void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t (*v65)(uint64_t);
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void *v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  void *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void *v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  void *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t v160;
  void (*v161)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD v177[3];
  ValueMetadata *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;

  v171 = a7;
  v175 = a5;
  v149 = sub_1000A0980((uint64_t *)&unk_100212190);
  __chkstk_darwin(v149);
  v152 = (_QWORD *)((char *)&v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v151 = type metadata accessor for MagicPairingSettingsRecord(0);
  v150 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v25 = (_QWORD *)((char *)&v148 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v154 = sub_1000A0980(&qword_100210CE8);
  __chkstk_darwin(v154);
  v158 = (_QWORD *)((char *)&v148 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v156 = type metadata accessor for DeviceSupportInformationRecord(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v153 = (char *)&v148 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for URL(0);
  v168 = *(_QWORD *)(v28 - 8);
  v169 = v28;
  __chkstk_darwin(v28);
  v166 = (char *)&v148 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v167 = (char *)&v148 - v31;
  __chkstk_darwin(v32);
  v170 = (char *)&v148 - v33;
  v162 = sub_1000A0980(&qword_100210CF8);
  __chkstk_darwin(v162);
  v165 = (_QWORD *)((char *)&v148 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = type metadata accessor for DeviceRecord(0);
  v163 = *(_QWORD *)(v35 - 8);
  v164 = v35;
  __chkstk_darwin(v35);
  v157 = (char *)&v148 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = a6;
  swift_retain_n(a6, 5);
  v173 = a8;
  v37 = swift_retain_n(a8, 5);
  v38 = static os_log_type_t.default.getter(v37);
  if (qword_1002101E0 != -1)
    swift_once(&qword_1002101E0, sub_1001687B0);
  v161 = a11;
  v39 = qword_100218DE8;
  v159 = sub_1000A0980((uint64_t *)&unk_1002103C0);
  v40 = swift_allocObject(v159, 112, 7);
  v148 = xmmword_1001858F0;
  *(_OWORD *)(v40 + 16) = xmmword_1001858F0;
  *(_QWORD *)(v40 + 56) = &type metadata for String;
  v41 = sub_1000A0DF4();
  *(_QWORD *)(v40 + 32) = a3;
  *(_QWORD *)(v40 + 40) = a4;
  *(_QWORD *)(v40 + 96) = &type metadata for String;
  *(_QWORD *)(v40 + 104) = v41;
  v160 = v41;
  *(_QWORD *)(v40 + 64) = v41;
  *(_QWORD *)(v40 + 72) = a1;
  v176 = a1;
  *(_QWORD *)(v40 + 80) = a2;
  swift_bridgeObjectRetain(a4);
  v174 = a2;
  swift_bridgeObjectRetain(a2);
  os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "CloudSync: Remove device record type: %@ with address: %@", 57, 2, v40);
  swift_bridgeObjectRelease(v40);
  v42 = a3;
  if (a3 == 0x6552656369766544 && a4 == 0xEC00000064726F63
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6552656369766544, 0xEC00000064726F63, a3, a4, 0) & 1) != 0)
  {
    v43 = v170;
    v158 = a9;
    v44 = sub_100129690();
    if (qword_100210120 != -1)
      swift_once(&qword_100210120, sub_10009C800);
    v45 = v169;
    v46 = sub_1000A0A00(v169, (uint64_t)qword_100218BE0);
    v47 = v168;
    (*(void (**)(char *, uint64_t, uint64_t))(v168 + 16))(v43, v46, v45);
    v48 = objc_autoreleasePoolPush();
    v50 = URL.path.getter(v49);
    v52 = v51;
    v53 = v166;
    URL.appendingPathComponent(_:)(v50);
    swift_bridgeObjectRelease(v52);
    v54 = v167;
    URL.appendingPathComponent(_:)(v176);
    v55 = *(void (**)(char *, uint64_t))(v47 + 8);
    v55(v53, v45);
    objc_autoreleasePoolPop(v48);
    v56 = objc_autoreleasePoolPush();
    __chkstk_darwin(v56);
    *((_QWORD *)&v148 - 2) = v54;
    *((_QWORD *)&v148 - 1) = v44;
    v57 = v165;
    OS_dispatch_queue.sync<A>(execute:)(v165, v158, &v148 - 2, v162);
    objc_autoreleasePoolPop(v56);
    v55(v54, v45);
    swift_release(v44);
    v55(v43, v45);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v163 + 48))(v57, 1, v164) == 1)
    {
      v58 = sub_1000A1000((uint64_t)v57, &qword_100210CF8);
      v59 = static os_log_type_t.error.getter(v58);
      v60 = qword_100218DE8;
      v61 = swift_allocObject(v159, 72, 7);
      *(_OWORD *)(v61 + 16) = xmmword_100184870;
      v62 = v160;
      *(_QWORD *)(v61 + 56) = &type metadata for String;
      *(_QWORD *)(v61 + 64) = v62;
      *(_QWORD *)(v61 + 32) = v176;
      v63 = v174;
      *(_QWORD *)(v61 + 40) = v174;
      swift_bridgeObjectRetain(v63);
      os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v60, "Device Record not found to remove: %@", 37, 2, v61);
LABEL_28:
      v112 = v61;
LABEL_29:
      swift_bridgeObjectRelease(v112);
      v113 = v171;
      v89 = v172;
      v114 = v172;
      v90 = v173;
LABEL_30:
      v161(0, v114, v113, v90);
      goto LABEL_31;
    }
    v65 = type metadata accessor for DeviceRecord;
    v66 = (uint64_t)v57;
    v67 = &v181;
LABEL_19:
    v88 = (_QWORD *)*(v67 - 32);
    sub_1000C6CD0(v66, (uint64_t)v88, v65);
    v89 = v172;
    swift_retain(v172);
    v90 = v173;
    swift_retain(v173);
    a10(v88, v175, v89, v171, v90);
    goto LABEL_20;
  }
  v165 = v25;
  if (a3 == 0xD00000000000001ELL && a4 == 0x80000001001AA950
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001001AA950, a3, a4, 0) & 1) != 0)
  {
    v165 = a12;
    v68 = sub_100129690();
    if (qword_100210180 != -1)
      swift_once(&qword_100210180, sub_1000DA4F0);
    v69 = v169;
    v70 = sub_1000A0A00(v169, (uint64_t)qword_100218D28);
    v71 = v168;
    v72 = v170;
    (*(void (**)(char *, uint64_t, uint64_t))(v168 + 16))(v170, v70, v69);
    v73 = objc_autoreleasePoolPush();
    v75 = URL.path.getter(v74);
    v77 = v76;
    v78 = v166;
    URL.appendingPathComponent(_:)(v75);
    swift_bridgeObjectRelease(v77);
    v79 = v167;
    URL.appendingPathComponent(_:)(v176);
    v80 = *(void (**)(char *, uint64_t))(v71 + 8);
    v80(v78, v69);
    objc_autoreleasePoolPop(v73);
    v81 = objc_autoreleasePoolPush();
    __chkstk_darwin(v81);
    *((_QWORD *)&v148 - 2) = v79;
    *((_QWORD *)&v148 - 1) = v68;
    v82 = v158;
    OS_dispatch_queue.sync<A>(execute:)(v158, v165, &v148 - 2, v154);
    objc_autoreleasePoolPop(v81);
    v80(v79, v69);
    swift_release(v68);
    v80(v72, v69);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v155 + 48))(v82, 1, v156) == 1)
    {
      v83 = sub_1000A1000((uint64_t)v82, &qword_100210CE8);
      v84 = static os_log_type_t.error.getter(v83);
      v85 = qword_100218DE8;
      v61 = swift_allocObject(v159, 72, 7);
      *(_OWORD *)(v61 + 16) = xmmword_100184870;
      v86 = v160;
      *(_QWORD *)(v61 + 56) = &type metadata for String;
      *(_QWORD *)(v61 + 64) = v86;
      *(_QWORD *)(v61 + 32) = v176;
      v87 = v174;
      *(_QWORD *)(v61 + 40) = v174;
      swift_bridgeObjectRetain(v87);
      os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v85, "Support Info Record not found to remove: %@", 43, 2, v61);
      goto LABEL_28;
    }
    a10 = a13;
    v65 = type metadata accessor for DeviceSupportInformationRecord;
    v66 = (uint64_t)v82;
    v67 = &v180;
    goto LABEL_19;
  }
  v91 = v176;
  if ((a3 != 0x746553636967614DLL || a4 != 0xED000073676E6974)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x746553636967614DLL, 0xED000073676E6974, a3, a4, 0) & 1) == 0)
  {
    v118 = (uint64_t)v170;
    v119 = v174;
    if (a3 == 0x6563697665444141 && a4 == 0xEE0064726F636552
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6563697665444141, 0xEE0064726F636552, a3, a4, 0) & 1) != 0)
    {
      v178 = &type metadata for AudioAccessoryFeatures;
      v179 = sub_1000A42C4();
      v120 = isFeatureEnabled(_:)(v177);
      sub_1000A2140(v177);
      if ((v120 & 1) != 0)
      {
        v121 = sub_100129690();
        if (qword_1002101B0 != -1)
          swift_once(&qword_1002101B0, sub_100106014);
        v122 = v169;
        v123 = sub_1000A0A00(v169, (uint64_t)qword_100218D68);
        v124 = v168;
        v125 = v118;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 16))(v118, v123, v122);
        v126 = (void *)sub_100127638(v91, v119, v118, (uint64_t *)&unk_100212200, (uint64_t)sub_100154B78);
        swift_release(v121);
        v127 = (*(uint64_t (**)(uint64_t, uint64_t))(v124 + 8))(v125, v122);
        v89 = v172;
        v90 = v173;
        if (v126)
          goto LABEL_50;
        v141 = static os_log_type_t.error.getter(v127);
        v142 = qword_100218DE8;
        v143 = swift_allocObject(v159, 72, 7);
        *(_OWORD *)(v143 + 16) = xmmword_100184870;
        v144 = v160;
        *(_QWORD *)(v143 + 56) = &type metadata for String;
        *(_QWORD *)(v143 + 64) = v144;
        *(_QWORD *)(v143 + 32) = v91;
        *(_QWORD *)(v143 + 40) = v119;
        swift_bridgeObjectRetain(v119);
        os_log(_:dso:log:_:_:)(v141, &_mh_execute_header, v142, "AADeviceRecord not found to remove: %@", 38, 2, v143);
        goto LABEL_54;
      }
    }
    else if (a3 != 0xD000000000000011 || a4 != 0x80000001001B1050)
    {
      v129 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001001B1050, a3, a4, 0);
      if ((v129 & 1) == 0)
        goto LABEL_51;
    }
    v178 = &type metadata for AudioAccessoryFeatures;
    v179 = sub_1000A42C4();
    v130 = isFeatureEnabled(_:)(v177);
    v129 = sub_1000A2140(v177);
    if ((v130 & 1) != 0)
    {
      v131 = sub_100129690();
      if (qword_100210130 != -1)
        swift_once(&qword_100210130, sub_1000A5BC0);
      v132 = v169;
      v133 = sub_1000A0A00(v169, (uint64_t)qword_100218C00);
      v134 = v168;
      v135 = v118;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 16))(v118, v133, v132);
      v126 = (void *)sub_100127638(v91, v119, v118, (uint64_t *)&unk_100212218, (uint64_t)sub_1001648C0);
      swift_release(v131);
      v136 = (*(uint64_t (**)(uint64_t, uint64_t))(v134 + 8))(v135, v132);
      v89 = v172;
      v90 = v173;
      if (v126)
      {
        a16 = a17;
LABEL_50:
        swift_retain(v89);
        swift_retain(v90);
        a16(v126, v175, v89, v171, v90);

        swift_release_n(v89, 2);
        v115 = v89;
        v116 = v90;
        goto LABEL_32;
      }
      v145 = static os_log_type_t.error.getter(v136);
      v146 = qword_100218DE8;
      v143 = swift_allocObject(v159, 72, 7);
      *(_OWORD *)(v143 + 16) = xmmword_100184870;
      v147 = v160;
      *(_QWORD *)(v143 + 56) = &type metadata for String;
      *(_QWORD *)(v143 + 64) = v147;
      *(_QWORD *)(v143 + 32) = v91;
      *(_QWORD *)(v143 + 40) = v119;
      swift_bridgeObjectRetain(v119);
      os_log(_:dso:log:_:_:)(v145, &_mh_execute_header, v146, "AAProxCardsRecord not found to remove: %@", 41, 2, v143);
LABEL_54:
      swift_bridgeObjectRelease(v143);
      v114 = v89;
      v113 = v171;
      goto LABEL_30;
    }
LABEL_51:
    v137 = static os_log_type_t.error.getter(v129);
    v138 = qword_100218DE8;
    v139 = swift_allocObject(v159, 112, 7);
    *(_OWORD *)(v139 + 16) = v148;
    v140 = v160;
    *(_QWORD *)(v139 + 56) = &type metadata for String;
    *(_QWORD *)(v139 + 64) = v140;
    *(_QWORD *)(v139 + 32) = v42;
    *(_QWORD *)(v139 + 40) = a4;
    *(_QWORD *)(v139 + 96) = &type metadata for String;
    *(_QWORD *)(v139 + 104) = v140;
    *(_QWORD *)(v139 + 72) = v91;
    *(_QWORD *)(v139 + 80) = v119;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v119);
    os_log(_:dso:log:_:_:)(v137, &_mh_execute_header, v138, "Unknown record type: %@ for address: %@", 39, 2, v139);
    v112 = v139;
    goto LABEL_29;
  }
  v164 = a14;
  v92 = sub_100129690();
  if (qword_100210160 != -1)
    swift_once(&qword_100210160, sub_1000C81B8);
  v93 = v169;
  v94 = sub_1000A0A00(v169, (uint64_t)qword_100218C90);
  v95 = v168;
  v96 = v170;
  (*(void (**)(char *, uint64_t, uint64_t))(v168 + 16))(v170, v94, v93);
  v97 = objc_autoreleasePoolPush();
  v99 = URL.path.getter(v98);
  v101 = v100;
  v102 = v166;
  URL.appendingPathComponent(_:)(v99);
  swift_bridgeObjectRelease(v101);
  v103 = v167;
  URL.appendingPathComponent(_:)(v176);
  v104 = *(void (**)(char *, uint64_t))(v95 + 8);
  v104(v102, v93);
  objc_autoreleasePoolPop(v97);
  v105 = objc_autoreleasePoolPush();
  __chkstk_darwin(v105);
  *((_QWORD *)&v148 - 2) = v103;
  *((_QWORD *)&v148 - 1) = v92;
  v106 = v152;
  OS_dispatch_queue.sync<A>(execute:)(v152, v164, &v148 - 2, v149);
  objc_autoreleasePoolPop(v105);
  v104(v103, v93);
  swift_release(v92);
  v104(v96, v93);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v150 + 48))(v106, 1, v151) == 1)
  {
    v107 = sub_1000A1000((uint64_t)v106, (uint64_t *)&unk_100212190);
    v108 = static os_log_type_t.error.getter(v107);
    v109 = qword_100218DE8;
    v61 = swift_allocObject(v159, 72, 7);
    *(_OWORD *)(v61 + 16) = xmmword_100184870;
    v110 = v160;
    *(_QWORD *)(v61 + 56) = &type metadata for String;
    *(_QWORD *)(v61 + 64) = v110;
    *(_QWORD *)(v61 + 32) = v176;
    v111 = v174;
    *(_QWORD *)(v61 + 40) = v174;
    swift_bridgeObjectRetain(v111);
    os_log(_:dso:log:_:_:)(v108, &_mh_execute_header, v109, "Magic Record not found to remove: %@", 36, 2, v61);
    goto LABEL_28;
  }
  v65 = type metadata accessor for MagicPairingSettingsRecord;
  v88 = v165;
  sub_1000C6CD0((uint64_t)v106, (uint64_t)v165, type metadata accessor for MagicPairingSettingsRecord);
  v89 = v172;
  swift_retain(v172);
  v90 = v173;
  swift_retain(v173);
  a15(v88, 0, v175, v89, v171, v90);
LABEL_20:
  swift_release(v89);
  swift_release(v90);
  sub_1000AE58C((uint64_t)v88, v65);
LABEL_31:
  v115 = v90;
  v116 = v89;
LABEL_32:
  swift_release_n(v115, 2);
  swift_release_n(v116, 3);
  swift_release_n(v89, 2);
  return swift_release_n(v90, 3);
}

uint64_t sub_1001648C0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100164B40(type metadata accessor for AAProxCardsRecord, &qword_1002107E0, (uint64_t)&protocol conformance descriptor for AAProxCardsRecord, &qword_100212228, a1);
}

uint64_t sub_1001648F4(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;

  v11 = objc_msgSend((id)objc_opt_self(BTSystemConfiguration), "isFirstUnlocked");
  if ((v11 & 1) != 0)
  {
    v12 = Data.init(contentsOf:options:)(a1, 0);
    if (v5)
    {
      swift_errorRelease(v5);
      return 0;
    }
    else
    {
      v15 = v12;
      v16 = v13;
      v17 = objc_autoreleasePoolPush();
      v18 = sub_100123364(v15, v16, a2, a3, a4, a5);
      objc_autoreleasePoolPop(v17);
      sub_1000A103C(v15, v16);
    }
  }
  else
  {
    v14 = static os_log_type_t.default.getter(v11);
    if (qword_1002101E8 != -1)
      swift_once(&qword_1002101E8, sub_100168814);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_100218DF0, "record call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
    return 0;
  }
  return v18;
}

uint64_t sub_100164B40@<X0>(uint64_t (*a1)(uint64_t)@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  result = sub_1001648F4(*(_QWORD *)(v5 + 16), a1, a2, a3, a4);
  if (!v6)
    *a5 = result;
  return result;
}

uint64_t sub_100164B7C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10014A9CC(a1, v1[2], v1[3], v1[4]) & 1;
}

uint64_t sub_100164B9C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10014AA8C(a1, v1[2], v1[3], v1[4]) & 1;
}

uint64_t sub_100164BBC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100164BE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100164C0C(uint64_t a1)
{
  uint64_t v1;

  sub_100148F4C(a1, *(void (**)(id))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100164C18()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  v1 = *(_QWORD *)(v0 + 48);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  }
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100164C68(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1000FC9A0(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10]);
}

uint64_t sub_100164CA0()
{
  return sub_1000D769C();
}

uint64_t sub_100164CB8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for SoundProfileRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = v0 + v4;
  sub_1000A103C(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v10 = v9 + v1[5];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v9 + v1[6];
  v13 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = v9 + v1[7];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));

  return swift_deallocObject(v0, v8 + 8, v5);
}

uint64_t sub_100164DD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for SoundProfileRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100148930(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(void (**)(uint64_t))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

void sub_100164E48()
{
  uint64_t v0;

  sub_100126798(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100164E60(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1000AB31C(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100164EA0(_QWORD *a1)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier) & 1;
}

uint64_t sub_100164EE0(_QWORD *a1)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier) & 1;
}

uint64_t sub_100164F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100164F30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100164F38@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000D6FA4(*(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_100164F54()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100164F78()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_100164F8C()
{
  uint64_t v0;

  return sub_100120CD4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100164F94()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_100164FA8()
{
  uint64_t v0;

  return sub_100120400(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100164FB0()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_100164FC4()
{
  uint64_t v0;

  return sub_10011FB2C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100164FCC()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_100164FE0()
{
  uint64_t v0;

  return sub_10011F23C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100164FE8()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100164FFC()
{
  uint64_t v0;

  return sub_10011E900(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100165004()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_100165018()
{
  uint64_t v0;

  return sub_10011DFC4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100165020()
{
  uint64_t v0;

  return sub_1000D65DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100165038()
{
  uint64_t v0;

  sub_1001257F8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100165054(void *a1, char a2)
{
  uint64_t v2;

  sub_1001481F0(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(id *)(v2 + 24));
}

uint64_t sub_100165060@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000E8074(v1, a1);
}

uint64_t sub_10016507C(uint64_t a1)
{
  return sub_100167F58(a1, type metadata accessor for MagicPairingSettingsRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_100146BF4);
}

uint64_t sub_100165094()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_1001650A8()
{
  uint64_t v0;

  return sub_10011386C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001650B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100127798(*(_QWORD *)(v1 + 16), type metadata accessor for LegacyAccountMagicKeysRecord, &qword_100210BA8, (uint64_t)&unk_1001861E8, &qword_1002122F0, a1);
}

void sub_1001650E8()
{
  uint64_t v0;

  sub_100124834(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), type metadata accessor for LegacyMagicPairingSettingsRecords, &qword_1002113F0, (uint64_t)&unk_1001874D0, (uint64_t)&qword_100210188, (double (*)(char *, uint64_t, uint64_t))qword_100218D40, (uint64_t)sub_1000E3AB4);
}

uint64_t sub_100165130()
{
  return sub_100168074((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_100165144()
{
  uint64_t v0;

  sub_1000C5DE8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10016514C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  sub_1000A103C(*(_QWORD *)(v7 + v1[5]), *(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[11]), *(_QWORD *)(v7 + v1[11] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[12]), *(_QWORD *)(v7 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[24] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[25] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[26] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[29] + 8));
  v9 = v7 + v1[30];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10016537C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MagicPairingSettingsRecord(0) - 8) + 80);
  sub_100144DDC(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1001653B8()
{
  return sub_100168074((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1001653CC()
{
  uint64_t v0;

  sub_1001116EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001653DC(uint64_t a1)
{
  uint64_t v1;

  return sub_1001430A4(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1001653E8()
{
  uint64_t v0;

  sub_100125F28(*(_QWORD *)(v0 + 16), **(char ***)(v0 + 24));
}

uint64_t sub_100165408(void *a1, char a2)
{
  uint64_t v2;

  return sub_100145B04(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), (uint64_t)&unk_1001EBB20, (uint64_t)sub_100165440, (uint64_t)&unk_1001EBB38);
}

void sub_100165440()
{
  sub_100165CE8("Synced AAProxCardsRecord to cloud. Update File Cache - %@", 57, "Error syncing AAProxCardsRecord to cloud - %@", 45);
}

uint64_t sub_10016545C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000E7CE0(v1, a1);
}

uint64_t sub_100165474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = (void *)swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = (void *)swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_100165750(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v7;
  uint64_t v8;
  uint64_t inited;
  id v10;
  NSString v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  id v18;
  unint64_t v19;
  Class isa;
  _BYTE v22[208];

  v7 = String._bridgeToObjectiveC()();
  v8 = sub_1000A0980((uint64_t *)&unk_100212320);
  inited = swift_initStackObject(v8, v22);
  *(_OWORD *)(inited + 16) = xmmword_100187650;
  *(_QWORD *)(inited + 32) = 0x726F727245;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v10 = objc_allocWithZone((Class)NSString);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithString:", v11);

  *(_QWORD *)(inited + 48) = v12;
  *(_QWORD *)(inited + 56) = 0x6D69547473726946;
  *(_QWORD *)(inited + 64) = 0xE900000000000065;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", a2 & 1);
  *(_QWORD *)(inited + 72) = v13;
  *(_QWORD *)(inited + 80) = 0x795464726F636552;
  *(_QWORD *)(inited + 88) = 0xEA00000000006570;
  CKRecord.recordType.getter(v13);
  v15 = v14;
  v16 = objc_allocWithZone((Class)NSString);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v18 = objc_msgSend(v16, "initWithString:", v17);

  *(_QWORD *)(inited + 96) = v18;
  *(_QWORD *)(inited + 104) = 0x73736563637553;
  *(_QWORD *)(inited + 112) = 0xE700000000000000;
  *(_QWORD *)(inited + 120) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", a5 == 0);
  strcpy((char *)(inited + 128), "SyncDuration");
  *(_BYTE *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(_QWORD *)(inited + 144) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", Date.timeIntervalSince(_:)(a3));
  strcpy((char *)(inited + 152), "UploadDuration");
  *(_BYTE *)(inited + 167) = -18;
  *(_QWORD *)(inited + 168) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", 0.0);
  strcpy((char *)(inited + 176), "UserInitiated");
  *(_WORD *)(inited + 190) = -4864;
  *(_QWORD *)(inited + 192) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", 0);
  v19 = sub_1000A5628(inited);
  sub_1000AB31C(0, &qword_1002119D0, NSObject_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  CUMetricsLog(v7, isa);

}

uint64_t sub_100165A54(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100165A6C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10014D57C(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_100165A84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100165AC8()
{
  uint64_t v0;

  sub_100124834(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), type metadata accessor for LegacyAccountMagicKeysRecord, &qword_100210BB0, (uint64_t)&unk_1001861C0, (uint64_t)&qword_100210148, (double (*)(char *, uint64_t, uint64_t))qword_100218C68, (uint64_t)sub_1000B0C18);
}

uint64_t sub_100165B10()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100165B24()
{
  uint64_t v0;

  return sub_10011A6F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100165B2C()
{
  uint64_t v0;

  sub_100123FF4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100165B44()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_100165B58()
{
  uint64_t v0;

  return sub_100118B54(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100165B60()
{
  uint64_t v0;

  sub_100124F8C(*(double (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), type metadata accessor for DeviceSupportInformationRecord, &qword_1002112A0, (uint64_t)&unk_1001870F4, &qword_100210180, (uint64_t)qword_100218D28, (uint64_t)sub_1000DA4F0);
}

uint64_t sub_100165BA8()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_100165BBC()
{
  uint64_t v0;

  return sub_100116FB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100165BC4()
{
  uint64_t v0;

  sub_100124F8C(*(double (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), type metadata accessor for MagicPairingSettingsRecord, &qword_100210E70, (uint64_t)&unk_1001867FC, &qword_100210160, (uint64_t)qword_100218C90, (uint64_t)sub_1000C81B8);
}

void sub_100165C0C()
{
  uint64_t v0;

  sub_100123714(*(_QWORD *)(v0 + 16), **(char ***)(v0 + 24));
}

uint64_t sub_100165C28()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100165C3C()
{
  uint64_t v0;

  return sub_10011C54C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100165C44()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_100165C58()
{
  uint64_t v0;

  return sub_10011AAE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100165C64()
{
  uint64_t v0;

  return sub_100142F7C(*(void **)(v0 + 16), *(uint64_t (**)(_QWORD))(v0 + 24));
}

uint64_t sub_100165C84(uint64_t a1)
{
  uint64_t v1;

  return sub_100141A20(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100165C94(void *a1, char a2)
{
  uint64_t v2;

  return sub_100145B04(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), (uint64_t)&unk_1001EBDC8, (uint64_t)sub_100165CCC, (uint64_t)&unk_1001EBDE0);
}

void sub_100165CCC()
{
  sub_100165CE8("Synced AADeviceRecord to cloud. Update File Cache - %@", 54, "Error syncing AADeviceRecord to cloud - %@", 42);
}

void sub_100165CE8(const char *a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v4;

  sub_100145D28(*(void **)(v4 + 16), *(_BYTE *)(v4 + 24), *(_QWORD *)(v4 + 32), *(void **)(v4 + 40), a1, a2, a3, a4);
}

uint64_t sub_100165D24(uint64_t a1)
{
  return sub_100167F58(a1, type metadata accessor for DeviceSupportInformationRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_1001404CC);
}

uint64_t sub_100165D40(uint64_t a1)
{
  return sub_100167F58(a1, type metadata accessor for DeviceRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_10013C64C);
}

uint64_t sub_100165D58()
{
  uint64_t v0;

  return sub_10012CF6C(v0);
}

void sub_100165D60(void *a1, char a2)
{
  uint64_t v2;

  sub_100136544(a1, a2 & 1, v2);
}

uint64_t sub_100165D6C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BTDeferredRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  v6 = v0 + v4 + v1[6];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  v8 = (uint64_t *)(v0 + v4 + v1[9]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_1000A103C(*v8, v9);
  v10 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  swift_release(*(_QWORD *)(v0 + v10));
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_100165E44(uint64_t a1)
{
  return sub_100167F58(a1, type metadata accessor for BTDeferredRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD))sub_10012FAA0);
}

uint64_t sub_100165E5C(void *a1, char a2)
{
  uint64_t v2;

  return sub_1001381C8(a1, a2 & 1, v2, (uint64_t)&unk_1001EBF80, (uint64_t)sub_100165E94, (uint64_t)&unk_1001EBF98);
}

void sub_100165E94()
{
  uint64_t v0;

  sub_100138414(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), "Unable to save AAProxCardsRecord on cloud with error: %@", 56);
}

uint64_t sub_100165EC0(void *a1, char a2)
{
  uint64_t v2;

  return sub_1001381C8(a1, a2 & 1, v2, (uint64_t)&unk_1001EBFD0, (uint64_t)sub_100165EF8, (uint64_t)&unk_1001EBFE8);
}

void sub_100165EF8()
{
  uint64_t v0;

  sub_100138414(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), "Unable to save AADeviceRecord on cloud with error: %@", 53);
}

uint64_t sub_100165F24(void *a1, char a2)
{
  uint64_t v2;

  return sub_1001381C8(a1, a2 & 1, v2, (uint64_t)&unk_1001EC020, (uint64_t)sub_100165F5C, (uint64_t)&unk_1001EC038);
}

void sub_100165F5C()
{
  uint64_t v0;

  sub_100138414(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), "Unable to save magic settings on cloud with error: %@", 53);
}

uint64_t sub_100165F88(void *a1, char a2)
{
  uint64_t v2;

  return sub_1001381C8(a1, a2 & 1, v2, (uint64_t)&unk_1001EC070, (uint64_t)sub_100165FC0, (uint64_t)&unk_1001EC088);
}

void sub_100165FC0()
{
  uint64_t v0;

  sub_100138414(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), "Unable to save info record on cloud with error: %@", 50);
}

uint64_t sub_100165FEC(void *a1, char a2)
{
  uint64_t v2;

  return sub_1001381C8(a1, a2 & 1, v2, (uint64_t)&unk_1001EC0C0, (uint64_t)sub_100166054, (uint64_t)&unk_1001EC0D8);
}

uint64_t sub_100166024()
{
  uint64_t v0;

  sub_100104E50(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100166054()
{
  uint64_t v0;

  sub_100138414(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), "Unable to save record on cloud with error: %@", 45);
}

void sub_100166080()
{
  uint64_t v0;

  sub_10012C768(v0);
}

uint64_t sub_100166088(void *a1)
{
  uint64_t v1;

  return sub_10012C948(a1, v1);
}

void sub_100166090()
{
  uint64_t v0;

  sub_10012CC6C(v0);
}

uint64_t sub_100166098@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100127798(*(_QWORD *)(v1 + 16), type metadata accessor for SoundProfileRecord, &qword_1002109A0, (uint64_t)&unk_100185ABC, (uint64_t *)&unk_100212370, a1);
}

uint64_t sub_1001660D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100127798(*(_QWORD *)(v1 + 16), type metadata accessor for LegacyMagicPairingSettingsRecords, &qword_1002113E8, (uint64_t)&unk_100187468, (uint64_t *)&unk_100212380, a1);
}

uint64_t sub_100166108@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100127798(*(_QWORD *)(v1 + 16), type metadata accessor for BTDeferredRecord, &qword_100212390, (uint64_t)&unk_100185D2C, &qword_100212398, a1);
}

uint64_t sub_100166140@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100127798(*(_QWORD *)(v1 + 16), type metadata accessor for CloudCoordinatorConfiguration, &qword_100211110, (uint64_t)&unk_100186C98, (uint64_t *)&unk_1002123D0, a1);
}

uint64_t sub_100166178()
{
  return sub_1000D7E10();
}

uint64_t sub_100166190()
{
  return sub_1000D7854();
}

uint64_t sub_1001661A8()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_1001661BC()
{
  uint64_t v0;

  return sub_1001217D8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001661C4()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001661D8()
{
  uint64_t v0;

  return sub_100121F98(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001661E0()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

_QWORD *sub_1001661F4()
{
  uint64_t v0;

  return sub_100122764(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001661FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t *v63;
  double v64;
  ValueMetadata *v65;
  unint64_t v66;
  void *v67;
  id v68;
  NSString v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char v92;
  void *v93;
  id v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  void *v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  void *v133;
  id v134;
  id v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  id v144;
  void *v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char v153;
  uint64_t *v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t result;
  uint64_t v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  __int128 *v174;
  __int128 v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  const char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  id v198;
  __int128 v199;
  uint64_t v200;
  uint64_t aBlock[3];
  ValueMetadata *v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;

  v186 = type metadata accessor for DispatchWorkItemFlags(0);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v184 = (char *)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = type metadata accessor for DispatchQoS(0);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v181 = (char *)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000A0980(&qword_1002103E0);
  __chkstk_darwin(v6);
  v174 = (__int128 *)((char *)&v165 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v171 = 0;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (id)static os_log_type_t.default.getter(v12);
  if (qword_1002101E0 != -1)
    goto LABEL_140;
  while (1)
  {
    v14 = qword_100218DE8;
    v173 = sub_1000A0980((uint64_t *)&unk_1002103C0);
    v15 = swift_allocObject(v173, 72, 7);
    v175 = xmmword_100184870;
    *(_OWORD *)(v15 + 16) = xmmword_100184870;
    v16 = *(const char **)(a1 + 16);
    *(_QWORD *)(v15 + 56) = &type metadata for Int;
    *(_QWORD *)(v15 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v15 + 32) = v16;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "databaseUpdated recordsDeleted: %d.", v165);
    v17 = swift_bridgeObjectRelease(v15);
    v191 = v16;
    v168 = (unint64_t)a2 >> 62;
    if (!v16)
      break;
    if ((unint64_t)a2 >> 62)
    {
      if (a2 < 0)
        v164 = a2;
      else
        v164 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(a2);
      v197 = _CocoaArrayWrapper.endIndex.getter(v164);
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v197 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
    }
    v18 = v11;
    v19 = 0;
    v190 = a1 + 32;
    v195 = a2 & 0xC000000000000001;
    v187 = _swiftEmptyArrayStorage;
    v177 = (unint64_t)"gCustomKeyBlobZone";
    v176 = 0x80000001001AB270;
    v169 = 0x80000001001AA8D0;
    v172 = (unint64_t)"Updating main device record: %@";
    v170 = 0x80000001001AA990;
    v167 = (unint64_t)"debugDescription";
    v166 = 0x80000001001AB0E0;
    v179 = v8;
    v178 = v9;
    v180 = v11;
    v20 = v191;
    v189 = a1;
    while (1)
    {
      if ((const char *)v19 == v20)
        goto LABEL_139;
      v193 = v19;
      v28 = v190 + 24 * v19;
      v29 = *(void **)v28;
      v194 = *(_QWORD *)(v28 + 8);
      v30 = *(_QWORD *)(v28 + 16);
      v196 = v30;
      if (v197)
        break;
      v48 = v29;
      swift_bridgeObjectRetain(v30);
LABEL_29:
      v49 = v29;
      v50 = objc_msgSend(v29, "zoneID");
      v11 = (uint64_t)objc_msgSend(v50, "zoneName");

      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v53 = v52;

      if (v51 == 0xD000000000000012 && v53 == v176)
      {
        v54 = v177 | 0x8000000000000000;
LABEL_34:
        swift_bridgeObjectRelease(v54);
        v202 = &type metadata for AudioAccessoryFeatures;
        v203 = sub_1000A42C4();
        v55 = isFeatureEnabled(_:)(aBlock);
        sub_1000A2140(aBlock);
        if ((v55 & 1) != 0)
          goto LABEL_45;
        v21 = swift_bridgeObjectRelease(v196);
        v22 = static os_log_type_t.error.getter(v21);
        v13 = (id)qword_100218DE8;
        v23 = swift_allocObject(v173, 72, 7);
        *(_OWORD *)(v23 + 16) = v175;
        v24 = v9;
        v25 = v8;
        v26 = v18;
        v11 = (uint64_t)CKRecordID_ptr;
        *(_QWORD *)(v23 + 56) = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
        *(_QWORD *)(v23 + 64) = sub_100164E60(&qword_100212270, &qword_1002111C0, CKRecordID_ptr);
        *(_QWORD *)(v23 + 32) = v49;
        v27 = v49;
        os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v13, "Ignoring delete record from unknown zone: %@", 44, 2, v23);
        swift_bridgeObjectRelease(v23);

        v18 = v26;
        v8 = v25;
        v9 = v24;
        a1 = v189;
        goto LABEL_7;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, v177 | 0x8000000000000000, v51, v53, 0) & 1) != 0)
      {
        v54 = v53;
        goto LABEL_34;
      }
      if (v51 == 0xD00000000000001ELL && v53 == v170)
      {
        v56 = v172 | 0x8000000000000000;
LABEL_44:
        swift_bridgeObjectRelease(v56);
LABEL_45:
        v57 = objc_msgSend(v49, "recordName");
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
        v60 = v59;

        v61 = v174;
        UUID.init(uuidString:)(v58, v60);
        swift_bridgeObjectRelease(v60);
        if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v9 + 48))(v61, 1, v8) == 1)
        {
          v62 = v61;
          v63 = &qword_1002103E0;
          goto LABEL_58;
        }
        (*(void (**)(uint64_t, __int128 *, uint64_t))(v9 + 32))(v18, v61, v8);
        v64 = sub_1001499B0(v18, v194, v196, &v199);
        if (v200)
        {
          sub_100165A54(&v199, (uint64_t)aBlock);
          v65 = v202;
          v66 = v203;
          sub_1000A20D8(aBlock, (uint64_t)v202);
          v67 = (void *)(*(uint64_t (**)(ValueMetadata *, unint64_t))(v66 + 56))(v65, v66);
          v68 = objc_msgSend(v67, "encryptedValues");

          v69 = String._bridgeToObjectiveC()();
          v70 = objc_msgSend(v68, "objectForKeyedSubscript:", v69);
          swift_unknownObjectRelease(v68);

          if (v70)
          {
            v198 = v70;
            v71 = sub_1000A0980(&qword_100210400);
            if ((swift_dynamicCast(&v199, &v198, v71, &type metadata for String, 6) & 1) != 0)
            {
              v11 = *((_QWORD *)&v199 + 1);
              v72 = v199;
              v73 = (id)v196;
              swift_bridgeObjectRetain(v196);
              swift_bridgeObjectRetain(v11);
              v74 = v171;
              v75 = sub_100154BAC(a2, v72, v11, v194, v73);
              v171 = v74;
              swift_bridgeObjectRelease_n(v11, 2);
              swift_bridgeObjectRelease(v73);
              if (v75)
              {
                v76 = swift_bridgeObjectRelease(v73);
                v77 = static os_log_type_t.debug.getter(v76);
                v78 = qword_100218DE8;
                v79 = v173;
                v80 = swift_allocObject(v173, 72, 7);
                *(_OWORD *)(v80 + 16) = v175;
                sub_100165A84((uint64_t)aBlock, (uint64_t)&v199);
                v81 = sub_1000A0980(&qword_100212310);
                v82 = String.init<A>(describing:)(&v199, v81);
                v84 = v83;
                *(_QWORD *)(v80 + 56) = &type metadata for String;
                *(_QWORD *)(v80 + 64) = sub_1000A0DF4();
                *(_QWORD *)(v80 + 32) = v82;
                *(_QWORD *)(v80 + 40) = v84;
                v11 = (uint64_t)&_mh_execute_header;
                os_log(_:dso:log:_:_:)(v77, &_mh_execute_header, v78, "Stale record about to be overwritten: %@", 40, 2, v80);
                v85 = swift_bridgeObjectRelease(v80);
                v13 = (id)static os_log_type_t.default.getter(v85);
                v86 = qword_100218DE8;
                v87 = swift_allocObject(v79, 72, 7);
                *(_OWORD *)(v87 + 16) = v175;
                *(_QWORD *)(v87 + 56) = sub_1000AB31C(0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
                *(_QWORD *)(v87 + 64) = sub_100164E60((unint64_t *)&qword_1002108A0, (unint64_t *)&qword_1002103F0, CKRecord_ptr);
                *(_QWORD *)(v87 + 32) = v75;
                v196 = v75;
                os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v86, "Dont delete this record we have an update for it: %@", 52, 2, v87);
                swift_bridgeObjectRelease(v87);
                sub_100165A84((uint64_t)aBlock, (uint64_t)&v199);
                if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
                  v187 = sub_1001698B0(0, v187[2] + 1, 1, v187);
                v89 = v187[2];
                v88 = v187[3];
                a1 = v189;
                if (v89 >= v88 >> 1)
                  v187 = sub_1001698B0((_QWORD *)(v88 > 1), v89 + 1, 1, v187);
                v8 = v179;
                v9 = v178;
                v18 = v180;
                v90 = v187;
                v187[2] = v89 + 1;
                sub_100165A54(&v199, (uint64_t)&v90[5 * v89 + 4]);

                (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v18, v8);
                sub_1000A2140(aBlock);
                goto LABEL_7;
              }
            }
          }
          (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v18, v8);
          sub_1000A2140(aBlock);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, double))(v9 + 8))(v18, v8, v64);
          v62 = &v199;
          v63 = &qword_100212308;
LABEL_58:
          sub_1000A1000((uint64_t)v62, v63);
        }
        v91 = v196;
        v13 = v192;
        sub_10013A5F4(v49, v194, v196, 1);
        swift_bridgeObjectRelease(v91);

        goto LABEL_7;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, v172 | 0x8000000000000000, v51, v53, 0) & 1) != 0)
      {
        v56 = v53;
        goto LABEL_44;
      }
      if (v51 == 0xD000000000000010 && v53 == v166)
      {
        swift_bridgeObjectRelease(v167 | 0x8000000000000000);
      }
      else
      {
        v92 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, v167 | 0x8000000000000000, v51, v53, 0);
        swift_bridgeObjectRelease(v53);
        if ((v92 & 1) == 0)
        {
          v101 = swift_bridgeObjectRelease(v196);
          v102 = static os_log_type_t.error.getter(v101);
          v13 = (id)qword_100218DE8;
          v103 = swift_allocObject(v173, 72, 7);
          *(_OWORD *)(v103 + 16) = v175;
          v11 = (uint64_t)CKRecordID_ptr;
          *(_QWORD *)(v103 + 56) = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
          *(_QWORD *)(v103 + 64) = sub_100164E60(&qword_100212270, &qword_1002111C0, CKRecordID_ptr);
          *(_QWORD *)(v103 + 32) = v49;
          v104 = v49;
          os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v13, "Ignoring delete record from unknown zone: %@", 44, 2, v103);
          swift_bridgeObjectRelease(v103);

LABEL_38:
          v18 = v180;
          goto LABEL_7;
        }
      }
      if (v197)
      {
        if (v195)
        {
          swift_bridgeObjectRetain(a2);
          v94 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
        }
        else
        {
          v93 = *(void **)(a2 + 32);
          swift_bridgeObjectRetain(a2);
          v94 = v93;
        }
        v13 = v94;
        v95 = CKRecord.recordType.getter(v94);
        v97 = (uint64_t)v96;
        if (v95 == v194 && v96 == (void *)v196)
        {
          v98 = v196;

          swift_bridgeObjectRelease(a2);
          swift_bridgeObjectRelease(v98);
LABEL_76:
          swift_bridgeObjectRelease(v98);
          goto LABEL_7;
        }
        v105 = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v96, v194, v196, 0);

        swift_bridgeObjectRelease(v97);
        if ((v105 & 1) != 0)
        {

          swift_bridgeObjectRelease(a2);
LABEL_75:
          v98 = v196;
          goto LABEL_76;
        }
        if (v197 != 1)
        {
          v106 = a1;
          if (v195)
          {
            v107 = 1;
            while (1)
            {
              v108 = specialized _ArrayBuffer._getElementSlowPath(_:)(v107, a2);
              v109 = v107 + 1;
              if (__OFADD__(v107, 1))
                goto LABEL_152;
              v13 = (id)v108;
              v110 = CKRecord.recordType.getter(v108);
              v97 = (uint64_t)v111;
              if (v110 == v194 && v111 == (void *)v196)
                break;
              v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v111, v194, v196, 0);
              swift_unknownObjectRelease(v13);
              swift_bridgeObjectRelease(v97);
              if ((v11 & 1) != 0)
                goto LABEL_96;
              ++v107;
              if (v109 == v197)
                goto LABEL_95;
            }
            v98 = v196;

            swift_bridgeObjectRelease(a2);
            swift_unknownObjectRelease(v13);
          }
          else
          {
            v11 = 5;
            while (1)
            {
              v112 = v11 - 3;
              if (__OFADD__(v11 - 4, 1))
                goto LABEL_153;
              v13 = *(id *)(a2 + 8 * v11);
              v113 = CKRecord.recordType.getter(v13);
              if (v113 == v194 && v114 == v196)
                break;
              v97 = v114;
              v116 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v114, v194, v196, 0);

              swift_bridgeObjectRelease(v97);
              if ((v116 & 1) != 0)
              {
LABEL_96:

                swift_bridgeObjectRelease(a2);
                a1 = v106;
                v18 = v180;
                goto LABEL_75;
              }
              ++v11;
              if (v112 == v197)
              {
LABEL_95:
                v99 = v49;
                swift_bridgeObjectRelease(a2);
                a1 = v106;
                v18 = v180;
                goto LABEL_71;
              }
            }
            v98 = v196;

            swift_bridgeObjectRelease(a2);
          }
          swift_bridgeObjectRelease(v98);
          a1 = v106;
          v18 = v180;
          goto LABEL_76;
        }
        v99 = v49;
        swift_bridgeObjectRelease(a2);
      }
      else
      {
        v99 = v49;
      }
LABEL_71:
      v100 = v196;
      v13 = v192;
      sub_10013A5F4(v99, v194, v196, 1);
      swift_bridgeObjectRelease(v100);

LABEL_7:
      v19 = v193 + 1;
      v20 = v191;
      if ((const char *)(v193 + 1) == v191)
      {
        v17 = swift_bridgeObjectRelease(a1);
        goto LABEL_103;
      }
    }
    swift_bridgeObjectRetain(a2);
    v188 = (unint64_t)v29;
    v31 = v29;
    swift_bridgeObjectRetain(v30);
    a1 = 4;
    while (1)
    {
      v32 = v195 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1 - 4, a2) : *(id *)(a2 + 8 * a1);
      v13 = v32;
      v33 = a1 - 3;
      if (__OFADD__(a1 - 4, 1))
        break;
      v34 = a2;
      v35 = objc_msgSend(v32, "recordID");
      v36 = objc_msgSend(v35, "recordName");

      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v11 = v37;

      v38 = objc_msgSend(v31, "recordName");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v40 = v39;

      if (v8 == v9 && v11 == v40)
      {
        v42 = swift_bridgeObjectRelease_n(v11, 2);
        a2 = v34;
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v11, v9, v40, 0);
        swift_bridgeObjectRelease(v11);
        v42 = swift_bridgeObjectRelease(v40);
        a2 = v34;
        if ((v8 & 1) == 0)
        {

          goto LABEL_12;
        }
      }
      v43 = CKRecord.recordType.getter(v42);
      v45 = v44;
      if (v43 == v194 && v44 == (void *)v196)
      {
        swift_bridgeObjectRelease(a2);

        v46 = v196;
        v47 = v196;
LABEL_37:
        swift_bridgeObjectRelease(v46);
        swift_bridgeObjectRelease(v47);

        a1 = v189;
        v8 = v179;
        v9 = v178;
        goto LABEL_38;
      }
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v194, v196, 0);

      swift_bridgeObjectRelease(v45);
      if ((v11 & 1) != 0)
      {
        v47 = a2;
        v46 = v196;
        goto LABEL_37;
      }
LABEL_12:
      ++a1;
      if (v33 == v197)
      {
        swift_bridgeObjectRelease(a2);
        a1 = v189;
        v8 = v179;
        v9 = v178;
        v18 = v180;
        v29 = (void *)v188;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    swift_once(&qword_1002101E0, sub_1001687B0);
  }
  v187 = _swiftEmptyArrayStorage;
LABEL_103:
  v117 = static os_log_type_t.default.getter(v17);
  v118 = qword_100218DE8;
  v119 = swift_allocObject(v173, 72, 7);
  *(_OWORD *)(v119 + 16) = v175;
  v120 = v168;
  if (v168)
  {
    if (a2 < 0)
      v161 = a2;
    else
      v161 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v121 = _CocoaArrayWrapper.endIndex.getter(v161);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v121 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v119 + 56) = &type metadata for Int;
  *(_QWORD *)(v119 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v119 + 32) = v121;
  os_log(_:dso:log:_:_:)(v117, &_mh_execute_header, v118, "databaseUpdated recordsChanged: processed %d change records.", v165);
  swift_bridgeObjectRelease(v119);
  if (v120)
  {
    v123 = swift_bridgeObjectRetain(a2);
    v122 = (uint64_t)sub_10014F314(v123);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v122 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  aBlock[0] = v122;
  v124 = v171;
  sub_100150028(aBlock, (uint64_t (*)(_QWORD *))sub_1001516CC);
  v97 = aBlock[0];
  if (v124)
    goto LABEL_154;
  if (aBlock[0] < 0 || (aBlock[0] & 0x4000000000000000) != 0)
  {
    v162 = swift_bridgeObjectRetain(aBlock[0]);
    v125 = _CocoaArrayWrapper.endIndex.getter(v162);
    swift_release(v97);
    if (!v125)
      goto LABEL_146;
LABEL_112:
    if (v125 >= 1)
    {
      v126 = 0;
      v193 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue;
      v196 = (uint64_t)"gCustomKeyBlobZone";
      v197 = v97 & 0xC000000000000001;
      v195 = 0x80000001001AB270;
      v191 = "Updating main device record: %@";
      v190 = 0x80000001001AA990;
      v189 = (unint64_t)"debugDescription";
      v188 = 0x80000001001AB0E0;
      v194 = v97;
      while (1)
      {
        v144 = v197
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v126, v97)
             : *(id *)(v97 + 8 * v126 + 32);
        v145 = v144;
        v146 = objc_msgSend(v144, "recordID");
        v147 = objc_msgSend(v146, "zoneID");

        v148 = objc_msgSend(v147, "zoneName");
        v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
        v151 = v150;

        if (v149 == 0xD000000000000012 && v151 == v195)
          break;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, v196 | 0x8000000000000000, v149, v151, 0) & 1) != 0)
        {
          v152 = v151;
LABEL_126:
          swift_bridgeObjectRelease(v152);
          v202 = &type metadata for AudioAccessoryFeatures;
          v203 = sub_1000A42C4();
          v153 = isFeatureEnabled(_:)(aBlock);
          sub_1000A2140(aBlock);
          if ((v153 & 1) == 0)
            goto LABEL_127;
          goto LABEL_116;
        }
        if (v149 == 0xD00000000000001ELL && v151 == v190)
        {
          v154 = &v206;
          goto LABEL_131;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, (unint64_t)v191 | 0x8000000000000000, v149, v151, 0) & 1) != 0)
        {
          v127 = v151;
          goto LABEL_115;
        }
        if (v149 == 0xD000000000000010 && v151 == v188)
        {
          v154 = &v205;
LABEL_131:
          v127 = *(v154 - 32) | 0x8000000000000000;
LABEL_115:
          swift_bridgeObjectRelease(v127);
          goto LABEL_116;
        }
        v155 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, v189 | 0x8000000000000000, v149, v151, 0);
        v156 = swift_bridgeObjectRelease(v151);
        if ((v155 & 1) == 0)
        {
          v157 = static os_log_type_t.error.getter(v156);
          v158 = qword_100218DE8;
          v159 = swift_allocObject(v173, 72, 7);
          *(_OWORD *)(v159 + 16) = v175;
          v160 = objc_msgSend(v145, "recordID");
          *(_QWORD *)(v159 + 56) = sub_1000AB31C(0, &qword_1002111C0, CKRecordID_ptr);
          *(_QWORD *)(v159 + 64) = sub_100164E60(&qword_100212270, &qword_1002111C0, CKRecordID_ptr);
          *(_QWORD *)(v159 + 32) = v160;
          os_log(_:dso:log:_:_:)(v157, &_mh_execute_header, v158, "Ignoring changed record from unknown zone: %@", 45, 2, v159);
          swift_bridgeObjectRelease(v159);
LABEL_127:

          goto LABEL_117;
        }
LABEL_116:
        v128 = v192;
        v129 = *(void **)&v192[v193];
        v130 = (_QWORD *)swift_allocObject(&unk_1001EC278, 40, 7);
        v130[2] = v128;
        v130[3] = v145;
        v131 = v125;
        v132 = v187;
        v130[4] = v187;
        v203 = (unint64_t)sub_100167840;
        v204 = v130;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000E6A24;
        v202 = (ValueMetadata *)&unk_1001EC290;
        v133 = _Block_copy(aBlock);
        v134 = v129;
        swift_retain(v128);
        v135 = v145;
        v136 = swift_bridgeObjectRetain(v132);
        v137 = v181;
        static DispatchQoS.unspecified.getter(v136);
        *(_QWORD *)&v199 = _swiftEmptyArrayStorage;
        v138 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v139 = sub_1000A0980(&qword_100211D00);
        v140 = sub_1000AAD14((unint64_t *)&qword_100211930, &qword_100211D00, (uint64_t)&protocol conformance descriptor for [A]);
        v141 = v184;
        v142 = v186;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v199, v139, v140, v186, v138);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v137, v141, v133);
        _Block_release(v133);

        (*(void (**)(char *, uint64_t))(v185 + 8))(v141, v142);
        v143 = v137;
        v125 = v131;
        v97 = v194;
        (*(void (**)(char *, uint64_t))(v182 + 8))(v143, v183);
        swift_release(v204);
LABEL_117:
        if (v125 == ++v126)
          goto LABEL_146;
      }
      v152 = v196 | 0x8000000000000000;
      goto LABEL_126;
    }
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    result = swift_release(v97);
    __break(1u);
    return result;
  }
  v125 = *(_QWORD *)(aBlock[0] + 16);
  if (v125)
    goto LABEL_112;
LABEL_146:
  swift_bridgeObjectRelease(v187);
  return swift_release(v97);
}

uint64_t sub_10016780C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100167840()
{
  uint64_t v0;

  return sub_1001303C0(*(id *)(v0 + 24), *(_QWORD *)(v0 + 32), 1);
}

uint64_t sub_10016786C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100167874@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000E7CEC(v1, a1);
}

uint64_t sub_100167898(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000C1434(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001678DC(void *a1, char a2)
{
  uint64_t v2;

  return sub_100145B04(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), (uint64_t)&unk_1001EC5E8, (uint64_t)sub_100167914, (uint64_t)&unk_1001EC600);
}

void sub_100167914()
{
  sub_100165CE8("Synced MagicPairingSettingsRecord to cloud. Update File Cache - %@", 66, "Error syncing MagicPairingSettingsRecord to cloud - %@", 54);
}

uint64_t sub_100167944(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000BDE90(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100167988(void *a1, char a2)
{
  uint64_t v2;

  return sub_100145B04(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), (uint64_t)&unk_1001EC9A8, (uint64_t)sub_1001679C0, (uint64_t)&unk_1001EC9C0);
}

void sub_1001679C0()
{
  sub_100165CE8("Synced DeviceSupportInformationRecord to cloud. Update File Cache - %@", 70, "Error syncing DeviceSupportInformationRecord to cloud - %@", 58);
}

uint64_t sub_1001679FC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000BA068(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100167A0C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for DeviceSupportInformationRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1001403D0(v0 + v2, *(uint64_t (**)(_QWORD))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100167A54()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for DeviceSupportInformationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  sub_1000A103C(*(_QWORD *)(v7 + v1[5]), *(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[15] + 8));
  v9 = v7 + v1[16];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100167BC0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for MagicPairingSettingsRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  sub_1000A103C(*(_QWORD *)(v7 + v1[5]), *(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[11]), *(_QWORD *)(v7 + v1[11] + 8));
  sub_1000A103C(*(_QWORD *)(v7 + v1[12]), *(_QWORD *)(v7 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[18] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[22] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[23] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[24] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[25] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[26] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[27] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[28] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[29] + 8));
  v9 = v7 + v1[30];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100167E2C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for DeviceRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_1000A103C(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + v1[5];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[11] + 8));
  v10 = v7 + v1[12];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100167F58(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, unint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return a3(a1, v3 + v6, *(_QWORD *)(v3 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100167FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000FB53C(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48));
}

uint64_t sub_100167FD0(void *a1, char a2)
{
  uint64_t v2;

  return sub_100145B04(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), (uint64_t)&unk_1001ECE58, (uint64_t)sub_100168040, (uint64_t)&unk_1001ECE70);
}

uint64_t sub_100168008()
{
  uint64_t v0;

  sub_100104E50(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_100168040()
{
  sub_100165CE8("Synced DeviceRecord to cloud. Update File Cache - %@", 52, "Error syncing DeviceRecord to cloud - %@", 40);
}

uint64_t sub_100168060()
{
  return sub_100168074((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100168074(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));
  return swift_deallocObject(v2, 32, 7);
}

_QWORD *sub_1001680B0()
{
  uint64_t v0;

  return sub_10011540C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001680B8(uint64_t a1)
{
  uint64_t v1;

  return sub_10012BBE0(a1, v1);
}

uint64_t sub_1001680C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Notification(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100168134()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for Notification(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10012BE68(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t *initializeBufferWithCopyOfBuffer for DeviceStore.DeviceStoreError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1001681A4(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1001681A4(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return swift_errorRetain(result);
}

unint64_t destroy for DeviceStore.DeviceStoreError(unint64_t *a1)
{
  return sub_1001681C8(*a1);
}

unint64_t sub_1001681C8(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return swift_errorRelease(result);
}

unint64_t *assignWithCopy for DeviceStore.DeviceStoreError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1001681A4(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1001681C8(v4);
  return a1;
}

unint64_t *assignWithTake for DeviceStore.DeviceStoreError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1001681C8(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceStore.DeviceStoreError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DeviceStore.DeviceStoreError(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1001682F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_100168314(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_100168324(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for DeviceStore.DeviceStoreError()
{
  return &type metadata for DeviceStore.DeviceStoreError;
}

unint64_t sub_100168364()
{
  unint64_t result;

  result = qword_1002123F0;
  if (!qword_1002123F0)
  {
    result = swift_getWitnessTable(&unk_100187DA4, &type metadata for DeviceStore.DeviceStoreError);
    atomic_store(result, (unint64_t *)&qword_1002123F0);
  }
  return result;
}

void sub_1001683B4()
{
  sub_1001653E8();
}

void sub_1001683C8()
{
  sub_100165C0C();
}

uint64_t sub_1001684A0@<X0>(char *a1@<X8>)
{
  return sub_100164F38(a1);
}

uint64_t sub_100168580()
{
  return sub_100165020();
}

void sub_100168594()
{
  sub_100165038();
}

uint64_t sub_1001685A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100154B08(a1);
}

uint64_t sub_1001685BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100154B40(a1);
}

uint64_t sub_1001685D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100154AD0(a1);
}

void sub_1001685E4()
{
  sub_100165AC8();
}

void sub_1001685F8()
{
  sub_100165BC4();
}

void sub_10016860C()
{
  sub_100165B60();
}

void sub_100168620()
{
  sub_100165B2C();
}

uint64_t sub_10016864C()
{
  uint64_t result;

  sub_100168878();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 95, 0xE100000000000000);
  qword_100218DC8 = result;
  return result;
}

uint64_t sub_10016869C()
{
  uint64_t result;

  sub_100168878();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 7565409, 0xE300000000000000);
  qword_100218DD0 = result;
  return result;
}

uint64_t sub_1001686F0()
{
  uint64_t result;

  sub_100168878();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 0x64756F6C63, 0xE500000000000000);
  qword_100218DD8 = result;
  return result;
}

uint64_t sub_100168748()
{
  uint64_t result;

  sub_100168878();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 0x614D656369766564, 0xED0000726567616ELL);
  qword_100218DE0 = result;
  return result;
}

uint64_t sub_1001687B0()
{
  uint64_t result;

  sub_100168878();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 0x7453656369766564, 0xEB0000000065726FLL);
  qword_100218DE8 = result;
  return result;
}

uint64_t sub_100168814()
{
  uint64_t result;

  sub_100168878();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 0x616E614D656C6966, 0xEB00000000726567);
  qword_100218DF0 = result;
  return result;
}

unint64_t sub_100168878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002123F8;
  if (!qword_1002123F8)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002123F8);
  }
  return result;
}

uint64_t sub_1001688B4()
{
  uint64_t result;

  sub_100168878();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 0x74617453656C6966, 0xE900000000000065);
  qword_100218DF8 = result;
  return result;
}

uint64_t sub_100168914()
{
  uint64_t result;

  sub_100168878();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 0x6D75646574617473, 0xE900000000000070);
  qword_100218E00 = result;
  return result;
}

uint64_t sub_100168974()
{
  uint64_t result;

  sub_100168878();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 0x746361736E617274, 0xEB000000006E6F69);
  qword_100218E08 = result;
  return result;
}

void Data.hexString.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v3);
  sub_100169F1C(0xD000000000000010, 0x80000001001B3E70);
  __asm { BR              X9 }
}

uint64_t sub_100168A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  Swift::UInt8_optional v9;
  Swift::UInt8 value;
  uint64_t v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  Swift::UInt8_optional v19;
  uint64_t v20;

  if (BYTE6(v3) + 0x4000000000000000 < 0)
    goto LABEL_20;
  v7 = sub_1001692CC(0, (2 * BYTE6(v3)) & ~((2 * BYTE6(v3)) >> 63), 0, _swiftEmptyArrayStorage);
  if (v5)
  {
    if (v5 == 1)
      v8 = (int)v4;
    else
      v8 = *(_QWORD *)(v4 + 16);
    sub_1000A0E74(v4, v3);
  }
  else
  {
    v8 = 0;
  }
  ((void (*)(uint64_t, unint64_t, uint64_t))Data.Iterator.init(_:at:))(v4, v3, v8);
  v9 = Data.Iterator.next()();
  if ((*(_WORD *)&v9 & 0x100) == 0)
  {
    value = v9.value;
    v11 = v2 + 32;
    while (1)
    {
      v12 = value >> 4;
      if (v12 >= *(_QWORD *)(v2 + 16))
        break;
      v13 = *(_WORD *)(v11 + 2 * v12);
      v15 = v7[2];
      v14 = v7[3];
      v16 = v15 + 1;
      if (v15 >= v14 >> 1)
        v7 = sub_1001692CC((_QWORD *)(v14 > 1), v15 + 1, 1, v7);
      v7[2] = v16;
      *((_WORD *)v7 + v15 + 16) = v13;
      if ((unint64_t)(value & 0xF) >= *(_QWORD *)(v2 + 16))
        goto LABEL_19;
      v17 = *(_WORD *)(v11 + 2 * (value & 0xF));
      v18 = v7[3];
      if ((uint64_t)(v15 + 2) > (uint64_t)(v18 >> 1))
        v7 = sub_1001692CC((_QWORD *)(v18 > 1), v15 + 2, 1, v7);
      v7[2] = v15 + 2;
      *((_WORD *)v7 + v16 + 16) = v17;
      v19 = Data.Iterator.next()();
      value = v19.value;
      if ((*(_WORD *)&v19 & 0x100) != 0)
        goto LABEL_17;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    JUMPOUT(0x100168C50);
  }
LABEL_17:
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  swift_release(v2);
  v20 = ((uint64_t (*)(_QWORD *, _QWORD))String.init(utf16CodeUnits:count:))(v7 + 4, v7[2]);
  swift_bridgeObjectRelease(v7);
  return v20;
}

uint64_t Data.write(to:excludeFromBackup:options:)(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[12];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a2;
  v11 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  __chkstk_darwin();
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for URLResourceValues(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = &v24[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a4 & 1) != 0)
    v18 = 1073741825;
  else
    v18 = a3 | 1;
  v19 = v28;
  result = Data.write(to:options:)(a1, v18, a5, a6);
  if (!v19)
  {
    URLResourceValues.init()(result);
    URLResourceValues.isExcludedFromBackup.setter(v25 & 1);
    v21 = v26;
    v22 = a1;
    v23 = v27;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 16))(v13, v22, v27);
    URL.setResourceValues(_:)(v17);
    (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v13, v23);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
  }
  return result;
}

uint64_t Data.init(hexString:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;

  if ((String.count.getter(a1) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v4 = String.uppercased()();
  v5 = sub_10016A39C(v4._countAndFlagsBits, (unint64_t)v4._object);
  swift_bridgeObjectRelease(v4._object);
  v6 = String.count.getter(a1);
  if (v6 >= 0)
    v7 = v6;
  else
    v7 = v6 + 1;
  v8 = sub_100168FC8(0, v7 >> 1);
  v9 = String.count.getter(a1);
  result = swift_bridgeObjectRelease(a2);
  if (v9 < 1)
  {
LABEL_31:
    swift_release(v5);
    v22 = sub_10016AAF4((uint64_t)v8);
    swift_bridgeObjectRelease(v8);
    return v22;
  }
  v11 = 0;
  v12 = v5 + 4;
  while (1)
  {
    v13 = __OFADD__(v11, 2) ? 0x7FFFFFFFFFFFFFFFLL : v11 + 2;
    if ((v11 & 0x8000000000000000) != 0)
      break;
    v14 = v5[2];
    if (v11 >= v14)
      goto LABEL_36;
    if (v11 + 1 >= v14)
      goto LABEL_37;
    v15 = *((unsigned __int8 *)v12 + v11);
    v16 = *((unsigned __int8 *)v12 + v11 + 1);
    if (!isxdigit(v15) || (result = isxdigit(v16), !(_DWORD)result))
    {
      swift_bridgeObjectRelease(v8);
      swift_release(v5);
      return 0;
    }
    if (v15 >= 0x41)
      v17 = 55;
    else
      v17 = 48;
    v18 = v15 - v17;
    if ((v18 & 0xFFFFFF00) != 0)
      goto LABEL_38;
    if (v16 >= 0x41)
      v19 = 55;
    else
      v19 = 48;
    v20 = v16 - v19;
    if ((v20 & 0xFFFFFF00) != 0)
      goto LABEL_39;
    if (v18 > 0xFu)
      goto LABEL_40;
    v21 = 16 * (v18 & 0xF) + v20;
    if (((16 * (v18 & 0xF) + v20) & 0x100) != 0)
      goto LABEL_41;
    result = swift_isUniquelyReferenced_nonNull_native(v8);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100169BA8(v8);
      v8 = (_QWORD *)result;
    }
    if (v11 >> 1 >= v8[2])
      goto LABEL_42;
    *((_BYTE *)v8 + (v11 >> 1) + 32) = v21;
    v11 = v13;
    if (v13 >= v9)
      goto LABEL_31;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_100168FC8(int a1, size_t a2)
{
  uint64_t v4;
  _QWORD *result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (!a2)
      return _swiftEmptyArrayStorage;
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for UInt8);
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return (_QWORD *)v4;
  }
  return result;
}

void Data.intValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 v23;
  _QWORD v24[3];

  Data.hexString.getter(a1, a2);
  v4 = v3;
  v5 = HIBYTE(v3) & 0xF;
  v6 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = v2 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((v4 & 0x1000000000000000) != 0)
    {
      sub_100169BBC(v2, v4, 16);
LABEL_46:
      swift_bridgeObjectRelease(v4);
      return;
    }
    if ((v4 & 0x2000000000000000) == 0)
    {
      if ((v2 & 0x1000000000000000) != 0)
        v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v2, v4);
      sub_100169CA0(v8, v6, 16);
      goto LABEL_46;
    }
    v24[0] = v2;
    v24[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    if (v2 == 43)
    {
      if (v5)
      {
        v15 = v5 - 1;
        if (v15)
        {
          v16 = 0;
          v17 = (unsigned __int8 *)v24 + 1;
          do
          {
            v18 = *v17;
            v19 = v18 - 48;
            if ((v18 - 48) >= 0xA)
            {
              if ((v18 - 65) < 6)
              {
                v19 = v18 - 55;
              }
              else
              {
                if ((v18 - 97) > 5)
                  goto LABEL_46;
                v19 = v18 - 87;
              }
            }
            if ((unint64_t)(v16 - 0x800000000000000) >> 60 != 15)
              break;
            v14 = __OFADD__(16 * v16, v19);
            v16 = 16 * v16 + v19;
            if (v14)
              break;
            ++v17;
            --v15;
          }
          while (v15);
        }
        goto LABEL_46;
      }
    }
    else
    {
      if (v2 != 45)
      {
        if (v5)
        {
          v20 = 0;
          v21 = (unsigned __int8 *)v24;
          do
          {
            v22 = *v21;
            v23 = v22 - 48;
            if ((v22 - 48) >= 0xA)
            {
              if ((v22 - 65) < 6)
              {
                v23 = v22 - 55;
              }
              else
              {
                if ((v22 - 97) > 5)
                  goto LABEL_46;
                v23 = v22 - 87;
              }
            }
            if ((unint64_t)(v20 - 0x800000000000000) >> 60 != 15)
              break;
            v14 = __OFADD__(16 * v20, v23);
            v20 = 16 * v20 + v23;
            if (v14)
              break;
            ++v21;
            --v5;
          }
          while (v5);
        }
        goto LABEL_46;
      }
      if (v5)
      {
        v9 = v5 - 1;
        if (v9)
        {
          v10 = 0;
          v11 = (unsigned __int8 *)v24 + 1;
          do
          {
            v12 = *v11;
            v13 = v12 - 48;
            if ((v12 - 48) >= 0xA)
            {
              if ((v12 - 65) < 6)
              {
                v13 = v12 - 55;
              }
              else
              {
                if ((v12 - 97) > 5)
                  goto LABEL_46;
                v13 = v12 - 87;
              }
            }
            if ((unint64_t)(v10 - 0x800000000000000) >> 60 != 15)
              break;
            v14 = __OFSUB__(16 * v10, v13);
            v10 = 16 * v10 - v13;
            if (v14)
              break;
            ++v11;
            --v9;
          }
          while (v9);
        }
        goto LABEL_46;
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
  }
}

_QWORD *sub_1001692CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000A0980((uint64_t *)&unk_100212430);
      v11 = (_QWORD *)swift_allocObject(v10, 2 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 31;
      v11[2] = v8;
      v11[3] = v13 & 0xFFFFFFFFFFFFFFFELL;
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 2 * v8 + 32))
          memmove(v14, a4 + 4, 2 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10016A434(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001693D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001693FC(a1, a2, a3, a4, &qword_100212278, type metadata accessor for DeviceRecord);
}

uint64_t sub_1001693E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001693FC(a1, a2, a3, a4, &qword_100212298, type metadata accessor for DeviceSupportInformationRecord);
}

uint64_t sub_1001693FC(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1000A0980(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23, v25);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10016A60C(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_100169608(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001693FC(a1, a2, a3, a4, &qword_100212290, type metadata accessor for MagicPairingSettingsRecord);
}

uint64_t sub_10016961C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001693FC(a1, a2, a3, a4, (uint64_t *)&unk_1002122A0, type metadata accessor for SoundProfileRecord);
}

uint64_t sub_100169630(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001693FC(a1, a2, a3, a4, &qword_100212400, type metadata accessor for CloudCoordinatorConfiguration);
}

_QWORD *sub_100169644(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000A0980((uint64_t *)&unk_1002123C0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10016A51C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100169750(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001693FC(a1, a2, a3, a4, &qword_100210D08, type metadata accessor for LegacyMagicPairingSettingsRecords);
}

uint64_t sub_100169764(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001693FC(a1, a2, a3, a4, &qword_100212338, type metadata accessor for LegacyAccountMagicKeysRecord);
}

uint64_t sub_100169778(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001693FC(a1, a2, a3, a4, (uint64_t *)&unk_1002122D0, type metadata accessor for BTDeferredRecord);
}

_QWORD *sub_10016978C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000A0980(&qword_100212410);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10016A724(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001698B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000A0980(&qword_100212408);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10016A830(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001699D0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000A0980((uint64_t *)&unk_100211330);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10016AB8C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_BYTE *sub_100169AC8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_10016A93C(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_10016A9FC((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_10016AA74((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100169B40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

_QWORD *sub_100169BA8(_QWORD *a1)
{
  return sub_1001699D0(0, a1[2], 0, a1);
}

unsigned __int8 *sub_100169BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_10014FA10(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_100169CA0(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_100169CA0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

_QWORD *sub_100169F1C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  Swift::Int v5;
  _QWORD *v6;
  _BYTE v8[8];
  uint64_t v9;

  v2 = a2;
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_7;
  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1;
  v5 = String.UTF16View._nativeGetOffset(for:)((v4 << 16) | 7, a1, a2);
  if (!v5)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    v6 = sub_10016A32C(v5, 0);
    swift_bridgeObjectRetain(v2);
    v2 = sub_100169FEC((uint64_t)v8, (uint64_t)(v6 + 4), v5, a1, v2);
    swift_bridgeObjectRelease(v9);
    if (v2 == v5)
      break;
    __break(1u);
LABEL_7:
    v5 = String.UTF16View._foreignCount()();
    if (!v5)
      return _swiftEmptyArrayStorage;
  }
  return v6;
}

uint64_t sub_100169FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int *v24;
  __int16 v25;
  uint64_t v26;
  int *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  if ((a5 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a5) & 0xF;
  else
    v8 = a4 & 0xFFFFFFFFFFFFLL;
  if (!a2)
  {
    v11 = 0;
    v12 = 0;
    a3 = 0;
    v15 = 1;
    goto LABEL_31;
  }
  swift_bridgeObjectRetain(a5);
  if (!a3)
  {
    v11 = 0;
    v12 = 0;
    v15 = 1;
    goto LABEL_30;
  }
  if (a3 < 0)
  {
    __break(1u);
    JUMPOUT(0x10016A30CLL);
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a5 & 0xFFFFFFFFFFFFFFLL;
  v30 = a1;
  v15 = 1;
  v16 = &dword_10016A31C;
  v17 = &dword_10016A30C;
  while (1)
  {
    if ((v15 & 1) == 0)
    {
      v15 = 1;
      LOWORD(v18) = v12;
      v12 = 0;
      goto LABEL_9;
    }
    if (v11 >= v8)
      break;
    if ((a5 & 0x1000000000000000) != 0)
    {
      v21 = v14;
      v22 = v16;
      v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v11 << 16, a4, a5);
      v17 = &dword_10016A30C;
      v16 = v22;
      v14 = v21;
      v18 = v23;
    }
    else
    {
      if ((a5 & 0x2000000000000000) == 0)
      {
        v19 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000) == 0)
        {
          v26 = v14;
          v27 = v16;
          v19 = _StringObject.sharedUTF8.getter(a4, a5);
          v17 = &dword_10016A30C;
          v16 = v27;
          v14 = v26;
        }
        LODWORD(v18) = *(unsigned __int8 *)(v19 + v11);
        if (*(char *)(v19 + v11) < 0)
          __asm { BR              X9 }
        ++v11;
        v15 = 1;
        goto LABEL_9;
      }
      v31[0] = a4;
      v31[1] = v14;
      v18 = *((unsigned __int8 *)v31 + v11);
      if (*((char *)v31 + v11) < 0)
        __asm { BR              X9 }
      v20 = 1;
    }
    v11 += v20;
    if (WORD1(v18))
    {
      v29 = v14;
      v24 = v17;
      v12 = Unicode.Scalar.UTF16View.subscript.getter(1, v18);
      v25 = Unicode.Scalar.UTF16View.subscript.getter(0, v18);
      v17 = v24;
      v16 = &dword_10016A31C;
      v14 = v29;
      LOWORD(v18) = v25;
      v15 = 0;
    }
    else
    {
      v15 = 1;
    }
LABEL_9:
    *(_WORD *)(a2 + 2 * v13++) = v18;
    if (a3 == v13)
      goto LABEL_29;
  }
  v15 = 1;
  a3 = v13;
LABEL_29:
  a1 = v30;
LABEL_30:
  swift_bridgeObjectRelease(a5);
LABEL_31:
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 34) = v15;
  return a3;
}

_QWORD *sub_10016A32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  int64_t v7;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_1000A0980((uint64_t *)&unk_100212430);
  v5 = (_QWORD *)swift_allocObject(v4, 2 * v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 31;
  v5[2] = a1;
  v5[3] = v7 & 0xFFFFFFFFFFFFFFFELL;
  return v5;
}

_QWORD *sub_10016A39C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10014FCBC(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

char *sub_10016A434(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10016A51C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10016A60C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10016A724(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_1000A0980(&qword_100212418);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10016A830(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_1000A0980(&qword_100212310);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10016A93C(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_10016A9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_10016AA74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10016AAF4(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = sub_1000A0980(&qword_100212420);
  v10 = sub_10016AC70();
  v8[0] = a1;
  v2 = sub_1000A20D8(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_100169AC8(v3, v4, &v7);
  v5 = v7;
  sub_1000A2140(v8);
  return v5;
}

char *sub_10016AB8C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

unint64_t sub_10016AC70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100212428;
  if (!qword_100212428)
  {
    v1 = sub_1000A4E14(&qword_100212420);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100212428);
  }
  return result;
}

uint64_t LocalDispatchTimer.__allocating_init(deadline:repeating:leeway:queue:block:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = swift_allocObject(v6, 72, 7);
  LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t sub_10016AD38()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000A09C0(v0, qword_100218E10);
  sub_1000A0A00(v0, (uint64_t)qword_100218E10);
  return Logger.init(subsystem:category:)(0xD000000000000026, 0x80000001001B3E40, 0xD000000000000012, 0x80000001001B4000);
}

uint64_t LocalDispatchTimer.isCancelled.getter()
{
  uint64_t v0;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 40));
  return OS_dispatch_source.isCancelled.getter(ObjectType) & 1;
}

uint64_t LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD *, uint64_t, uint64_t);
  uint64_t v68;
  void (*v69)(_QWORD *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ObjectType;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  double aBlock;
  _QWORD v106[4];
  uint64_t v107;

  v7 = v6;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v98 = *(_QWORD *)(v14 - 8);
  v99 = v14;
  v15 = __chkstk_darwin(v14);
  v97 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for DispatchTimeInterval(0, v15);
  v94 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v93 = (uint64_t *)((char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v84 - v20);
  v103 = type metadata accessor for DispatchTime(0, v19);
  v96 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v95 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v23);
  v104 = (char *)&v84 - v25;
  v26 = type metadata accessor for OS_dispatch_source.TimerFlags(0, v24);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v84 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = (_QWORD *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0, v28);
  v88 = *(v89 - 1);
  __chkstk_darwin(v89);
  v90 = (char *)&v84 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v86);
  v87 = (char *)&v84 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v33);
  v101 = (char *)&v84 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + 16) = 0x408F400000000000;
  v37 = a4 * 1000.0;
  v38 = fmin(v37, 2147483650.0);
  if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v38 <= -2147483650.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v38 >= 2147483650.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  a5 = a5 * 1000.0;
  *(_DWORD *)(v6 + 24) = (int)v38;
  v39 = fmin(a5, 2147483650.0);
  if ((~*(_QWORD *)&v39 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v39 <= -2147483650.0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v39 >= 2147483650.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  a6 = a6 * 1000.0;
  *(_DWORD *)(v6 + 28) = (int)v39;
  v40 = fmin(a6, 2147483650.0);
  if ((~*(_QWORD *)&v40 & 0x7FF0000000000000) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v40 <= -2147483650.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v40 >= 2147483650.0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once(&qword_100210208, sub_10016AD38);
    goto LABEL_14;
  }
  v91 = v35;
  v92 = v34;
  *(_DWORD *)(v6 + 32) = (int)v40;
  v100 = a3;
  if (v37 <= 2147483650.0 && a5 <= 2147483650.0 && a6 <= 2147483650.0)
    goto LABEL_17;
  if (qword_100210208 != -1)
    goto LABEL_33;
LABEL_14:
  v41 = type metadata accessor for Logger(0);
  sub_1000A0A00(v41, (uint64_t)qword_100218E10);
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.error.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (_DWORD *)swift_slowAlloc(42, -1);
    v84 = a2;
    v45 = v44;
    *v44 = 134218752;
    aBlock = 2147483650.0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v106, v44 + 1, v44 + 3);
    v85 = (void *)v26;
    *((_WORD *)v45 + 6) = 2048;
    aBlock = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v106, (char *)v45 + 14, (char *)v45 + 22);
    *((_WORD *)v45 + 11) = 2048;
    aBlock = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v106, v45 + 6, v45 + 8);
    *((_WORD *)v45 + 16) = 2048;
    v26 = (uint64_t)v85;
    aBlock = a6;
    a3 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v106, (char *)v45 + 34, (char *)v45 + 42);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "LocalDispatchTimer: Exceeded maximum value of %f: deadline: %f, repeating: %f, leeway: %f", (uint8_t *)v45, 0x2Au);
    v46 = v45;
    a2 = v84;
    swift_slowDealloc(v46, -1, -1);
  }

LABEL_17:
  *(_QWORD *)(v7 + 48) = a2;
  *(_QWORD *)(v7 + 56) = a3;
  if (a1)
  {
    swift_retain(a3);
    v47 = a1;
  }
  else
  {
    v84 = sub_1000AB31C(0, (unint64_t *)&qword_1002119F0, OS_dispatch_queue_ptr);
    v48 = swift_retain(a3);
    v85 = 0;
    v49 = v27;
    v50 = v21;
    v51 = v7;
    v52 = v101;
    static DispatchQoS.unspecified.getter(v48);
    aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    v53 = sub_1000A0940((unint64_t *)&unk_1002123A0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v54 = sub_1000A0980((uint64_t *)&unk_100211A00);
    v55 = sub_1000C7224((unint64_t *)&qword_1002123B0, (uint64_t *)&unk_100211A00);
    v56 = v87;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v54, v55, v86, v53);
    v57 = v90;
    (*(void (**)(char *, _QWORD, _QWORD *))(v88 + 104))(v90, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v89);
    v58 = v52;
    v7 = v51;
    v21 = v50;
    v27 = v49;
    a1 = v85;
    v47 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000041, 0x80000001001B3F30, v58, v56, v57, 0);
  }
  *(_QWORD *)(v7 + 64) = v47;
  sub_1000AB31C(0, &qword_100212440, OS_dispatch_source_ptr);
  aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  v59 = sub_1000A0940(&qword_100212448, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v90 = a1;
  v89 = v47;
  v60 = sub_1000A0980(&qword_100212450);
  v61 = sub_1000C7224(&qword_100212458, &qword_100212450);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v60, v61, v26, v59);
  v62 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v30, v47);
  v63 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v30, v26);
  *(_QWORD *)(v7 + 40) = v62;
  v64 = v95;
  static DispatchTime.now()(v63);
  *v21 = *(int *)(v7 + 24);
  v65 = enum case for DispatchTimeInterval.milliseconds(_:);
  v66 = v94;
  v67 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v94 + 104);
  v68 = v102;
  v67(v21, enum case for DispatchTimeInterval.milliseconds(_:), v102);
  + infix(_:_:)(v64, v21);
  v69 = *(void (**)(_QWORD *, uint64_t))(v66 + 8);
  v69(v21, v68);
  v96 = *(_QWORD *)(v96 + 8);
  ((void (*)(char *, uint64_t))v96)(v64, v103);
  v70 = v7;
  v71 = *(unsigned int *)(v7 + 28);
  if ((int)v71 < 1)
  {
    v73 = enum case for DispatchTimeInterval.never(_:);
    v72 = v93;
  }
  else
  {
    v72 = v93;
    *v93 = v71;
    v73 = v65;
  }
  v74 = v102;
  v67(v72, v73, v102);
  ObjectType = swift_getObjectType(*(_QWORD *)(v70 + 40));
  *v21 = *(int *)(v70 + 32);
  v67(v21, v65, v74);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v104, v72, v21, ObjectType);
  v69(v21, v74);
  v76 = swift_getObjectType(*(_QWORD *)(v70 + 40));
  v77 = swift_allocObject(&unk_1001ED080, 24, 7);
  swift_weakInit(v77 + 16, v70);
  v106[3] = sub_10016B808;
  v107 = v77;
  aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  v106[0] = 1107296256;
  v106[1] = sub_1000E6A24;
  v106[2] = &unk_1001ED098;
  v78 = _Block_copy(&aBlock);
  v79 = swift_retain(v77);
  v80 = v101;
  static DispatchQoS.unspecified.getter(v79);
  v81 = v97;
  sub_10016B828();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v80, v81, v78, v76);
  _Block_release(v78);

  swift_release(v100);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v81, v99);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v80, v92);
  v69(v72, v74);
  ((void (*)(char *, uint64_t))v96)(v104, v103);
  v82 = v107;
  swift_release(v77);
  swift_release(v82);
  return v70;
}

uint64_t sub_10016B774()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10016B798(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v5 = *(void (**)(uint64_t))(result + 48);
    v4 = *(_QWORD *)(result + 56);
    swift_retain(v4);
    v6 = swift_release(v3);
    v5(v6);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_10016B808()
{
  uint64_t v0;

  return sub_10016B798(v0);
}

uint64_t sub_10016B810(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10016B820(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10016B828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_1000A0940((unint64_t *)&qword_100211920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_1000A0980(&qword_100211D00);
  v3 = sub_1000C7224((unint64_t *)&qword_100211930, &qword_100211D00);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

Swift::Void __swiftcall LocalDispatchTimer.resume()()
{
  uint64_t v0;

  swift_getObjectType(*(_QWORD *)(v0 + 40));
  OS_dispatch_source.resume()();
}

Swift::Void __swiftcall LocalDispatchTimer.cancel()()
{
  uint64_t v0;

  swift_getObjectType(*(_QWORD *)(v0 + 40));
  OS_dispatch_source.cancel()();
}

uint64_t LocalDispatchTimer.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));

  return v0;
}

uint64_t LocalDispatchTimer.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for LocalDispatchTimer()
{
  return objc_opt_self(_TtC15audioaccessoryd18LocalDispatchTimer);
}

uint64_t sub_10016B9A4()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "HRTFEnrollmentSession");
  return sub_10016B9C8(v0);
}

void sub_10016B9C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Error Fetching Local IDS Identifier or local name. try again in sometime.", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016B9F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Did not receive Public Address, defer...", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016BA20()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100066E1C();
  sub_100066DA0((void *)&_mh_execute_header, v0, v1, "MUC - Invalid devices from bluetoothd: %@", v2);
  sub_100066E28();
}

void sub_10016BA84()
{
  os_log_t v0;
  uint8_t v1[14];
  _UNKNOWN **v2;

  sub_100066E8C();
  v2 = &off_1001F45D8;
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "XPC Version Check Failure, recieved version: %@, current version: %@", v1, 0x16u);
  sub_100066E28();
}

void sub_10016BAFC(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_100066DA0((void *)&_mh_execute_header, a2, a3, "Error checking in with bluetoothd: %@", (uint8_t *)&v4);
  sub_100066E28();
}

void sub_10016BB68()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100066E1C();
  sub_100066DA0((void *)&_mh_execute_header, v0, v1, "Unable to fetch public address: %@", v2);
  sub_100066E28();
}

void sub_10016BBCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Public Address is not available, skipping updateCloudPairings", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016BBF8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *v3;
  uint8_t *v4;
  void *v5;
  id v6;
  id v7;
  const char *v8;
  id v9;

  v6 = objc_msgSend((id)sub_100066E4C(a1, a2), "loginID");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v6));
  v9 = sub_100066E6C(v7, v8);
  *(_DWORD *)v4 = 136380675;
  *v3 = v9;
  sub_100066DE0((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Bad Account details \"%{private}s\" can't send!", v4);

  sub_100066E60();
}

void sub_10016BC58(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *v3;
  uint8_t *v4;
  void *v5;
  id v6;
  id v7;
  const char *v8;
  id v9;

  v6 = objc_msgSend((id)sub_100066E4C(a1, a2), "loginID");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v6));
  v9 = sub_100066E6C(v7, v8);
  *(_DWORD *)v4 = 136380675;
  *v3 = v9;
  sub_100066DE0((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Account \"%{private}s\" can't send!", v4);

  sub_100066E60();
}

void sub_10016BCB8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *v3;
  uint8_t *v4;
  void *v5;
  id v6;
  id v7;
  const char *v8;
  id v9;

  v6 = objc_msgSend((id)sub_100066E4C(a1, a2), "loginID");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v6));
  v9 = sub_100066E6C(v7, v8);
  *(_DWORD *)v4 = 136380675;
  *v3 = v9;
  sub_100066DE0((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Account \"%{private}s\" is not active!", v4);

  sub_100066E60();
}

void sub_10016BD18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Received devices changed event but couldn't retrieve local cloud identifier", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016BD44()
{
  void *v0;
  id v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100066E38();
  objc_msgSend(objc_retainAutorelease(v1), "UTF8String");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "description")));
  sub_100066E14(v2, v3);
  sub_100066DF4();
  sub_100066D8C((void *)&_mh_execute_header, v4, v5, "Message %s failed with error %s", v6, v7, v8, v9, 2u);

  sub_100066DAC();
}

void sub_10016BDDC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("DeviceName")));
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v2, v3, "Ignoring %@ since it is not in our cloudPaired devices list.", v4, v5, v6, v7, v8);

  sub_100066DE8();
}

void sub_10016BE5C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("MessageType")));
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v2, v3, "Ignoring message with unknown type %@", v4, v5, v6, v7, v8);

  sub_100066DE8();
}

void sub_10016BEDC(void *a1)
{
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description")));
  sub_100066E14(v2, v3);
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v4, v5, "Ignoring cloud pairing message from IDS device %{private}s containing no supported versions", v6, v7, v8, v9, v10);

  sub_100066DE8();
}

void sub_10016BF58()
{
  void *v0;
  id v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_100066E38();
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "description")));
  sub_100066E30(v2, v3);
  objc_msgSend(objc_retainAutorelease((id)sub_100066E74()), "UTF8String");
  sub_100066DBC();
  sub_100066D8C((void *)&_mh_execute_header, v4, v5, "Ignoring cloud pairing message from IDS device %{private}s with unknown type \"%s\"", v6, v7, v8, v9, v10);

  sub_100066DAC();
}

void sub_10016BFE4(void *a1, void *a2)
{
  void *v2;
  id v4;
  const char *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description")));
  sub_100066E14(v4, v5);
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "cloudIdentifier")));
  sub_100066E6C(v6, v7);
  sub_100066DF4();
  sub_100066D8C((void *)&_mh_execute_header, v8, v9, "Received 'InitiatorPairingKeys' message from IDS device %{private}s, but we aren't responder (%s)", v10, v11, v12, v13, 3u);

  sub_100066DAC();
}

void sub_10016C090(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = 138412290;
  v5 = v3;
  sub_100066DA0((void *)&_mh_execute_header, a2, a3, "Error generating keys: %@", (uint8_t *)&v4);
  sub_100066E28();
}

void sub_10016C0FC()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_100066E8C();
  v3 = v0;
  sub_100066DD4((void *)&_mh_execute_header, v1, (uint64_t)v1, "Error completing pairing: %{private}@ with error: %@", v2);
  sub_100066E28();
}

void sub_10016C168(uint64_t a1)
{
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "description")));
  sub_100066E14(v2, v3);
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v4, v5, "Invalid cloud pairing ID %{private}s", v6, v7, v8, v9, v10);

  sub_100066DE8();
}

void sub_10016C1E8(void *a1)
{
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description")));
  sub_100066E14(v2, v3);
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v4, v5, "Unknown role with IDS device %{private}s as we have no local iCloud identifier", v6, v7, v8, v9, v10);

  sub_100066DE8();
}

void sub_10016C264(void *a1)
{
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description")));
  sub_100066E14(v2, v3);
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v4, v5, "Unknown role with IDS device %{private}s as they have no iCloud identifier", v6, v7, v8, v9, v10);

  sub_100066DE8();
}

void sub_10016C2E0()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  const char *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14;

  sub_100066E38();
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "description")));
  sub_100066E30(v3, v4);
  v5 = objc_msgSend((id)sub_100066E74(), "cloudIdentifier");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v5));
  sub_100066E14(v6, v7);
  sub_100066DBC();
  sub_100066D8C((void *)&_mh_execute_header, v8, v9, "Received 'ResponderPairingKeys' message from IDS device %{private}s, but we aren't responder (%s)", v10, v11, v12, v13, v14);

  sub_100066DAC();
}

void sub_10016C378()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  const char *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14;

  sub_100066E38();
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "description")));
  sub_100066E30(v3, v4);
  v5 = objc_msgSend((id)sub_100066E74(), "cloudIdentifier");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v5));
  sub_100066E14(v6, v7);
  sub_100066DBC();
  sub_100066D8C((void *)&_mh_execute_header, v8, v9, "Received 'security request' message from IDS device %{private}s, but we aren't initiator (%s)", v10, v11, v12, v13, v14);

  sub_100066DAC();
}

void sub_10016C410()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  const char *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14;

  sub_100066E38();
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "description")));
  sub_100066E30(v3, v4);
  v5 = objc_msgSend((id)sub_100066E74(), "cloudIdentifier");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v5));
  sub_100066E14(v6, v7);
  sub_100066DBC();
  sub_100066D8C((void *)&_mh_execute_header, v8, v9, "Received 'pairing request' message from IDS device %{private}s, but we aren't responder (%s)", v10, v11, v12, v13, v14);

  sub_100066DAC();
}

void sub_10016C4A8()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  const char *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14;

  sub_100066E38();
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "description")));
  sub_100066E30(v3, v4);
  v5 = objc_msgSend((id)sub_100066E74(), "cloudIdentifier");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v5));
  sub_100066E14(v6, v7);
  sub_100066DBC();
  sub_100066D8C((void *)&_mh_execute_header, v8, v9, "Received 'pairing response' message from IDS device %{private}s, but we aren't initiator (%s)", v10, v11, v12, v13, v14);

  sub_100066DAC();
}

void sub_10016C540()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  const char *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  sub_100066E38();
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "description")));
  sub_100066E30(v3, v4);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("FailureReason"))));
  sub_100066E14(v5, v6);
  sub_100066DBC();
  sub_100066D8C((void *)&_mh_execute_header, v7, v8, "Received 'pairing failure' message from IDS device %{private}s - \"%s\"", v9, v10, v11, v12, v13);

  sub_100066DAC();
}

void sub_10016C5E4(void *a1)
{
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description")));
  sub_100066E14(v2, v3);
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v4, v5, "Dropping pairing initiation message to IDS device %{private}s as our role is unknown", v6, v7, v8, v9, v10);

  sub_100066DE8();
}

void sub_10016C660(void *a1)
{
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description")));
  sub_100066E14(v2, v3);
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v4, v5, "Dropping pairing initiation message to IDS device %{private}s as our role is unknown", v6, v7, v8, v9, v10);

  sub_100066DE8();
}

void sub_10016C6E0(void *a1, void *a2, NSObject *a3)
{
  void *v3;
  void *v6;
  id v7;
  const char *v8;
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  int v13;
  id v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "idsDevice"));
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cpDescription")));
  v9 = sub_100066E6C(v7, v8);
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "description")));
  sub_100066E30(v10, v11);
  v13 = 136380931;
  v14 = v9;
  sub_100066DF4();
  sub_100066DD4((void *)&_mh_execute_header, a3, v12, "Failed to create destination identifier to IDS device %{private}s - cannot send message %s", (uint8_t *)&v13);

}

void sub_10016C7B4(void *a1)
{
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description")));
  sub_100066E14(v2, v3);
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v4, v5, "Failed to send message with error %s", v6, v7, v8, v9, v10);

  sub_100066DE8();
}

void sub_10016C830(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "cloudpaird: sendRePairRequest: Failed to find existing CloudDevice - Maybe a new device - do we still allow repairing?", buf, 2u);
}

void sub_10016C86C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "cloudpaird: sendRePairCloudPairingMessage: Device is not associated with an iCloud account - can't send message", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016C898()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "cloudpaird: No destination ID available", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016C8C4()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  const char *v4;
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14;

  sub_100066E38();
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cpDescription")));
  sub_100066E30(v3, v4);
  v5 = objc_msgSend((id)sub_100066E74(), "description");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v5));
  sub_100066E14(v6, v7);
  sub_100066DBC();
  sub_100066D8C((void *)&_mh_execute_header, v8, v9, "Failed to create destination identifier to IDS device %{private}s - cannot send message %s", v10, v11, v12, v13, v14);

  sub_100066DAC();
}

void sub_10016C95C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100066E1C();
  sub_100066DA0((void *)&_mh_execute_header, v0, v1, "Error unpairing Cloud Device: %@", v2);
  sub_100066E28();
}

void sub_10016C9C0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  sub_100066DD4((void *)&_mh_execute_header, a3, (uint64_t)a3, "Unable to unpair Cloud Device: %@ with error: %@", (uint8_t *)&v4);
  sub_100066E28();
}

void sub_10016CA3C(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "idsDevice"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "uniqueID"));
  sub_100066E1C();
  sub_100066D78((void *)&_mh_execute_header, v3, v4, "Error unpairing Cloud Device properly for - %@", v5, v6, v7, v8, v9);

  sub_100066DAC();
}

void sub_10016CACC()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100066E1C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "cloudpaird: publicAddressForIDSDevice: Device requested :%@", v1, 0xCu);
  sub_100066E28();
}

void sub_10016CB38(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100067F10((void *)&_mh_execute_header, a2, a3, "self not available anymore for - %@", a5, a6, a7, a8, 2u);
  sub_100066E28();
}

void sub_10016CBA0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100067F10((void *)&_mh_execute_header, a2, a3, "Criteria unavailable - %@", a5, a6, a7, a8, 2u);
  sub_100066E28();
}

void sub_10016CC08(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100066E28();
}

void sub_10016CC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __error();
  sub_100068100((void *)&_mh_execute_header, v0, v1, "### _CS_DARWIN_USER_TEMP_DIR failed: %d", v2, v3, v4, v5, 0);
  sub_100068114();
}

void sub_10016CCE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __error();
  sub_100068100((void *)&_mh_execute_header, v0, v1, "### _set_user_dir_suffix failed: %d", v2, v3, v4, v5, 0);
  sub_100068114();
}

void sub_10016CD58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Invalid reference to accountStatusDidChange", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016CD84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "MP fetchKeyBlob CKErrorServiceUnavailable/RateLimited, error: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016CDE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Manate: Invalid reference to checkAccountStatusWithCompletionHandler", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016CE10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "MP fetchAccessoryKeyBlob CKErrorServiceUnavailable/RateLimited, error: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016CE70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "MP fetchAccessoryKeyBlob failed to save in device manager: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016CED0()
{
  uint64_t v0;
  os_log_t v1;

  sub_100066E1C();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Error querying master key record - %@, retry count - %lu");
  sub_100066E28();
}

void sub_10016CF40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error no master key record/zone found, create zone/record and write data - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016CFA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Non-Manatee: Cannot updateCloudKitAccessoryZone with %@, Account not active", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D000()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error querying record - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D060()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Error Saving the modified record [%@] - %@");
  sub_100066E28();
}

void sub_10016D0C0()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "MP Error caching the modified record in services layer [%@] - %@");
  sub_100066E28();
}

void sub_10016D120()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error saving the modified record exceeded retry count - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error saving the modified record network error - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D1E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error no record/zone found, create zone/record and write data - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D240()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error saving the modified record - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D2A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error writing record exceeded retry count - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D300()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "writeAccessoryBlob failed with network error %@ ", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D360()
{
  uint64_t v0;
  os_log_t v1;

  sub_100066E1C();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Manatee: Error writing the record [%@] - %@");
  sub_100066E28();
}

void sub_10016D3CC()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "MP Error caching the new record in services layer [%@] - %@");
  sub_100066E28();
}

void sub_10016D42C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "MP: delete cloudkit zone, error: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D48C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Found Duplicate SubscriptionID: %@ ", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D4EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "ERROR Saving Subscription: %@ ", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D54C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Different subscription found - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D5AC()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Error fetching subscription with ID (%@): %@");
  sub_100066E28();
}

void sub_10016D60C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Invalid reference to verifyAndCacheSubscriptionID", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016D638()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, " >>> Failed to Read record from LegacyNonManateeContainer %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D698(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100067F10((void *)&_mh_execute_header, a1, a3, " >>> Created Zone to Mark LegacyManateeContainer %@", a5, a6, a7, a8, 2u);
  sub_100066E28();
}

void sub_10016D700()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, " >>> Failed to Mark Zone to LegacyManateeContainer %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D760()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, " >>> Failed to Mark LegacyNonManateeContainer %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D7C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, " >>> Already upgraded to legacy manatee container", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016D7EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, " >>> Legacy manatee container unavailable", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016D818()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, " >>> Network offline to upgrade legacy manatee container", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016D844()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Cannot upgrade bad accessory keys", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016D870()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Cannot upgrade bad account keys", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016D89C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, " >>> Created Zones on LegacyManateeContainer", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016D8C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, " >>> Failed to Upgrade Zone to LegacyManateeContainer %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D928()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, " >>> Failed to Upgrade to LegacyManateeContainer %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016D988(void *a1, uint64_t a2, NSObject *a3, void *a4)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100074CA8((void *)&_mh_execute_header, a3, (uint64_t)a3, "Started monitoring for removal of directory: %@", (uint8_t *)a2);

  sub_100074CDC();
}

void sub_10016D9D8(void *a1, uint64_t a2, NSObject *a3, void *a4)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100074CA8((void *)&_mh_execute_header, a3, (uint64_t)a3, "Started monitoring changes to directory: %@", (uint8_t *)a2);

  sub_100074CDC();
}

void sub_10016DA28(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to open %@", buf, 0xCu);

  sub_100074CDC();
}

void sub_10016DA78(void *a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Starting to watch for existence of %@/%@", buf, 0x16u);

  sub_100074CDC();
}

void sub_10016DAE0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  sub_100074CB4(a1, a2);
  v3 = objc_msgSend((id)sub_100074CC0(), "directoryURL");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "path"));
  sub_100066E1C();
  sub_100074C94((void *)&_mh_execute_header, v6, v7, "Monitored directory changed: %@", v8, v9, v10, v11, v12);

  sub_100066DAC();
}

void sub_10016DB70(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  sub_100074CB4(a1, a2);
  v3 = objc_msgSend((id)sub_100074CC0(), "directoryURL");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "path"));
  sub_100066E1C();
  sub_100074C94((void *)&_mh_execute_header, v6, v7, "Monitored directory went away: %@", v8, v9, v10, v11, v12);

  sub_100066DAC();
}

void sub_10016DC00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100074CCC((void *)&_mh_execute_header, a1, a3, "Calling directory changed on startup", a5, a6, a7, a8, 0);
}

void sub_10016DC34(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_100074CE4(a1);
  v2 = objc_msgSend((id)sub_100074CC0(), "targetFilename");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100066E1C();
  sub_100074C94((void *)&_mh_execute_header, v4, v5, "File was not found in the directory yet: %@", v6, v7, v8, v9, v10);

  sub_100066DE8();
}

void sub_10016DCB4(void *a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  void *v6;
  uint8_t v7[12];
  __int16 v8;
  uint64_t v9;

  v5 = sub_100074CE4(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "directoryURL"));
  sub_100066E1C();
  v8 = 2112;
  v9 = a3;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error while trying to read the contents of directory %@: %@", v7, 0x16u);

  sub_100066DAC();
}

void sub_10016DD5C(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_100074CE4(a1);
  v2 = objc_msgSend((id)sub_100074CC0(), "targetFilename");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_100066E1C();
  sub_100074C94((void *)&_mh_execute_header, v4, v5, "Found file being watched: %@", v6, v7, v8, v9, v10);

  sub_100066DE8();
}

void sub_10016DDDC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100074CCC((void *)&_mh_execute_header, a1, a3, "Deinitializing watcher", a5, a6, a7, a8, 0);
}

void sub_10016DE10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Failed to allocate security task - using framework-provided bundle identifier!", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016DE3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Failed to retrieve signing ID - using framework-provided bundle identifier!", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016DE68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Failed to copy signing ID - using framework-provided bundle identifier!", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016DE94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Failed to establish connection to bluetoothd", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016DEC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100073C70(__stack_chk_guard);
  sub_100081E80();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Invalid reference to send CK XPC object: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016DF20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100073C70(__stack_chk_guard);
  sub_100081E80();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Invalid reference to send CK XPC message: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016DF80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100073C70(__stack_chk_guard);
  sub_100081E80();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Invalid reference to reply: Sending CK XPC message: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016DFE0()
{
  uint64_t v0;
  os_log_t v1;

  sub_100081E30();
  sub_100081E54((void *)&_mh_execute_header, v0, v1, "Error establishing connection to bluetoothd with XPC message: (%@)%{private}@ with error: %@");
}

void sub_10016E048()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100081E68();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Error receiving reply for msg: %@ with error: %s");
  sub_100066E28();
}

void sub_10016E0A8()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Unexpected object reply for msg: %@ with error: %@");
  sub_100066E28();
}

void sub_10016E108()
{
  uint64_t v0;
  os_log_t v1;

  sub_100081E68();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Error receiving sync reply for msg: %@ with error: %s");
  sub_100066E28();
}

void sub_10016E16C()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Unexpected object sync reply for msg: %@ with error: %@");
  sub_100066E28();
}

void sub_10016E1D0()
{
  uint64_t v0;
  os_log_t v1;

  sub_100081E30();
  sub_100081E54((void *)&_mh_execute_header, v0, v1, "Error establishing connection to bluetoothd with XPC message for sync reply: (%@)%{private}@ with error: %@");
}

void sub_10016E238()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "XPC server error: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016E298()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Unexpected XPC server event: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016E2F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error archiving devicesRemovedWithRecords: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016E358()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error archiving devicesUpdatedWithDevices: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016E3B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error archiving allDevicesRemoved: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016E418()
{
  uint64_t v0;
  os_log_t v1;

  sub_100066E1C();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Error jsonifying legacy %@: %@");
  sub_100066E28();
}

void sub_10016E484()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100066E80();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Server Nil Message", v1, 2u);
  sub_100066E44();
}

void sub_10016E4BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error updating CachedLocalIDSIdentifiers: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016E51C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Error cloudpairingRetry", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016E548(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "accountAvailable");
  sub_100068100((void *)&_mh_execute_header, v1, v2, "Error nicknaming device, Account status - %d", v3, v4, v5, v6, 0);
  sub_100066E28();
}

void sub_10016E5BC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "accountAvailable");
  sub_100068100((void *)&_mh_execute_header, v1, v2, "Error removing nickname device, Account status - %d", v3, v4, v5, v6, 0);
  sub_100066E28();
}

void sub_10016E630()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100066E1C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Invalid Cloud Info: %@", v1, 0xCu);
  sub_100066E28();
}

void sub_10016E69C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Error resetting cloud container: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016E6FC(os_log_t log)
{
  _DWORD v1[2];

  v1[0] = 67109120;
  v1[1] = byte_100212610;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "isBuddyComplete: %i", (uint8_t *)v1, 8u);
}

void sub_10016E77C(os_log_t log)
{
  const __CFString *v1;
  int v2;
  const __CFString *v3;

  if (byte_100212611)
    v1 = CFSTR("YES");
  else
    v1 = CFSTR("NO");
  v2 = 138543362;
  v3 = v1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Unlocked since boot = %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10016E814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Manatee: Invalid reference to accountStatusDidChange", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016E840()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Manatee: fetchKeyBlob Account manateeZone NOT Available ", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016E86C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Manatee: fetchKeyBlob failed because manatee status is not available", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016E898()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Manatee: Invalid reference to checkAccountStatusWithCompletionHandler", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016E8C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Manatee: fetchAccessoryKeyBlob Account manateeZone NOT Available ", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016E8F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E80();
  sub_100066E04((void *)&_mh_execute_header, v0, v1, "Manatee: fetchAccessoryKeyBlob failed because manatee status is not available", v2, v3, v4, v5, v6);
  sub_100066E44();
}

void sub_10016E91C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: fetchAccessoryKeyBlob CKErrorServiceUnavailable/RateLimited, error: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016E97C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: fetchAccessoryKeyBlob delete record cache, error: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016E9DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: fetchAccessoryKeyBlob failed to save in device manager: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EA3C()
{
  uint64_t v0;
  os_log_t v1;

  sub_100066E1C();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Manatee: Error querying master key record - %@, retry count - %lu");
  sub_100066E28();
}

void sub_10016EAAC()
{
  uint64_t v0;
  os_log_t v1;

  sub_100066E1C();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Manatee: Updating master key failed with error %@, retry count = %lu");
  sub_100066E28();
}

void sub_10016EB18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Error no master key record/zone found, create zone/record and write data - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EB78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Cannot updateCloudKitAccessoryZone with %@, Account not active", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EBD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Error querying record - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EC38()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Manatee: Error Saving the modified record [%@] - %@");
  sub_100066E28();
}

void sub_10016EC98()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Manatee: Error caching the modified record in services layer [%@] - %@");
  sub_100066E28();
}

void sub_10016ECF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Error saving the modified record exceeded retry count - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016ED58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Error saving the modified record network error - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EDB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Error no record/zone found, create zone/record and write data - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EE18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Error saving the modified record - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EE78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Error writing record exceeded retry count - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EED8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: writeAccessoryBlob failed with network error %@ ", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EF38()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Manatee: Error caching the new record in services layer [%@] - %@");
  sub_100066E28();
}

void sub_10016EF98()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: delete cloudkit zone, error: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016EFF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Found Duplicate SubscriptionID: %@ ", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016F058()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: ERROR Saving Subscription: %@ ", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016F0B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Manatee: Different subscription found - %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016F118()
{
  uint64_t v0;
  os_log_t v1;

  sub_100073C70(__stack_chk_guard);
  sub_100073C58();
  sub_100073C44((void *)&_mh_execute_header, v0, v1, "Manatee: Error fetching subscription with ID (%@): %@");
  sub_100066E28();
}

void sub_10016F178()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100091470((void *)&_mh_execute_header, v0, v1, "XPC client connection: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016F1D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "XPC error: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016F238()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100067F10((void *)&_mh_execute_header, v0, v1, "Unexpected XPC event: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

void sub_10016F298()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100066E1C();
  sub_100091470((void *)&_mh_execute_header, v0, v1, "Sending XPC message: %@", v2, v3, v4, v5, v6);
  sub_100066E28();
}

id objc_msgSend_CPAddressMapping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CPAddressMapping");
}

id objc_msgSend_CloudDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CloudDevice");
}

id objc_msgSend_CloudDeviceAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CloudDeviceAddress");
}

id objc_msgSend_SRConnectedSetCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SRConnectedSetCount");
}

id objc_msgSend_TUCallMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "TUCallMap");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByDeletingLastPathComponent");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__TUMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_TUMonitorEnsureStarted");
}

id objc_msgSend__TUMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_TUMonitorEnsureStopped");
}

id objc_msgSend__aaControllerEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_aaControllerEnsureStarted");
}

id objc_msgSend__aaControllerEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_aaControllerEnsureStopped");
}

id objc_msgSend__aacpConnectedCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_aacpConnectedCheck:");
}

id objc_msgSend__accessoryDeviceFound_withChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessoryDeviceFound:withChange:");
}

id objc_msgSend__accessoryDevicePerformActionsOnChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessoryDevicePerformActionsOnChange:");
}

id objc_msgSend__accessoryDeviceUpdateCloudRecord_config_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessoryDeviceUpdateCloudRecord:config:");
}

id objc_msgSend__activate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activate:");
}

id objc_msgSend__activateCDSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateCDSession");
}

id objc_msgSend__activateDirect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateDirect:");
}

id objc_msgSend__activateXPC_reactivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateXPC:reactivate:");
}

id objc_msgSend__activityMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activityMonitorEnsureStarted");
}

id objc_msgSend__activityMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activityMonitorEnsureStopped");
}

id objc_msgSend__anyPairedDeviceSupportsSmartRouting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_anyPairedDeviceSupportsSmartRouting");
}

id objc_msgSend__arbitrationTimeout_withScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_arbitrationTimeout:withScore:");
}

id objc_msgSend__asyncAudioSessionDuckWithLevel_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_asyncAudioSessionDuckWithLevel:completion:");
}

id objc_msgSend__audioSessionEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_audioSessionEnsureStarted");
}

id objc_msgSend__audioSessionEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_audioSessionEnsureStopped");
}

id objc_msgSend__bluetoothProductDefaultAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bluetoothProductDefaultAsset:");
}

id objc_msgSend__bluetoothProductIDNoEarDetect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bluetoothProductIDNoEarDetect:");
}

id objc_msgSend__bluetoothProductIDNoUTP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bluetoothProductIDNoUTP:");
}

id objc_msgSend__bluetoothProductIDToAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bluetoothProductIDToAsset:");
}

id objc_msgSend__bluetoothProductIDToCaseAsset_andAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bluetoothProductIDToCaseAsset:andAddress:");
}

id objc_msgSend__bluetoothProductIDToColorAsset_withColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bluetoothProductIDToColorAsset:withColor:");
}

id objc_msgSend__budSwapDetectionStartTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_budSwapDetectionStartTimer:");
}

id objc_msgSend__cacheBudswapInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheBudswapInfo:");
}

id objc_msgSend__cacheInfo_andAddress_andName_andVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheInfo:andAddress:andName:andVersion:");
}

id objc_msgSend__calibrateDuckingLevelForVolumeLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calibrateDuckingLevelForVolumeLevel:");
}

id objc_msgSend__callMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callMonitorEnsureStarted");
}

id objc_msgSend__callMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callMonitorEnsureStopped");
}

id objc_msgSend__cancelInUseBannerForCallTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelInUseBannerForCallTimer");
}

id objc_msgSend__cancelRingtoneTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelRingtoneTimer");
}

id objc_msgSend__cancelTriangleRecoveryTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelTriangleRecoveryTimer");
}

id objc_msgSend__cbConnectedDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cbConnectedDiscoveryEnsureStarted");
}

id objc_msgSend__cbConnectedDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cbConnectedDiscoveryEnsureStopped");
}

id objc_msgSend__cbControllerEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cbControllerEnsureStarted");
}

id objc_msgSend__cbControllerEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cbControllerEnsureStopped");
}

id objc_msgSend__cbDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cbDiscoveryEnsureStarted");
}

id objc_msgSend__cbDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cbDiscoveryEnsureStopped");
}

id objc_msgSend__cdSessionEnsureActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cdSessionEnsureActivated:");
}

id objc_msgSend__cdSessionEnsureDeactivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cdSessionEnsureDeactivated:");
}

id objc_msgSend__checkIfPairedCompanionDeviceSupportsSmartRouting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkIfPairedCompanionDeviceSupportsSmartRouting");
}

id objc_msgSend__checkTickswithinWindow_withWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkTickswithinWindow:withWindow:");
}

id objc_msgSend__checkTriangleRecovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkTriangleRecovery");
}

id objc_msgSend__checkValidBatteryValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkValidBatteryValue:");
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanup");
}

id objc_msgSend__clearCallSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearCallSession");
}

id objc_msgSend__cloudSyncEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudSyncEnsureStarted");
}

id objc_msgSend__cloudSyncEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudSyncEnsureStopped");
}

id objc_msgSend__connectedDeviceLost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectedDeviceLost:");
}

id objc_msgSend__connectedDeviceMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectedDeviceMonitorEnsureStarted");
}

id objc_msgSend__connectedDeviceMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectedDeviceMonitorEnsureStopped");
}

id objc_msgSend__conversationDetectMessageReceived_fromDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_conversationDetectMessageReceived:fromDevice:");
}

id objc_msgSend__conversationDetectMessageReceived_fromDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_conversationDetectMessageReceived:fromDeviceIdentifier:");
}

id objc_msgSend__createBannerSessionMuteActionForIOS_auditToken_appName_appBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createBannerSessionMuteActionForIOS:auditToken:appName:appBundleID:");
}

id objc_msgSend__deregisterFromAVAudioSessionSpeechDetectionStyleChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deregisterFromAVAudioSessionSpeechDetectionStyleChanges");
}

id objc_msgSend__deregisterFromAVSystemControllerDeathNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deregisterFromAVSystemControllerDeathNotifications");
}

id objc_msgSend__deregisterFromAVSystemControllerStateNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deregisterFromAVSystemControllerStateNotifications");
}

id objc_msgSend__deregisterFromAudioSessionResetNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deregisterFromAudioSessionResetNotifications");
}

id objc_msgSend__deregisterFromWirelessSplitterStateChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deregisterFromWirelessSplitterStateChanges");
}

id objc_msgSend__descriptionWithLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionWithLevel:");
}

id objc_msgSend__deviceSupportsHijackV2_withDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceSupportsHijackV2:withDevice:");
}

id objc_msgSend__diagnosticControlShareAudioBanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_diagnosticControlShareAudioBanner");
}

id objc_msgSend__disconnectOtherTipiDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disconnectOtherTipiDevice:");
}

id objc_msgSend__duckingLevelForCoefficients_volume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_duckingLevelForCoefficients:volume:");
}

id objc_msgSend__ensureXPCStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureXPCStarted");
}

id objc_msgSend__entitledAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_entitledAndReturnError:");
}

id objc_msgSend__evaluatorEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_evaluatorEnsureStarted");
}

id objc_msgSend__evaluatorEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_evaluatorEnsureStopped");
}

id objc_msgSend__evaluatorRun(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_evaluatorRun");
}

id objc_msgSend__evaluatorRunInUseBanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_evaluatorRunInUseBanner:");
}

id objc_msgSend__evaluatorRunTipiElection_nearbyInfoDevicesMap_localScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_evaluatorRunTipiElection:nearbyInfoDevicesMap:localScore:");
}

id objc_msgSend__feedbackCampainIdentifierForCampain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_feedbackCampainIdentifierForCampain:");
}

id objc_msgSend__feedbackCampainLocalizedTitleForCampain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_feedbackCampainLocalizedTitleForCampain:");
}

id objc_msgSend__fetchAccessoryKeyBlob_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAccessoryKeyBlob:");
}

id objc_msgSend__fetchArrayOfCloudDevicesForPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchArrayOfCloudDevicesForPeripheral:");
}

id objc_msgSend__fetchCloudPairingIdentifierForPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCloudPairingIdentifierForPeripheral:");
}

id objc_msgSend__fetchKeyBlob_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchKeyBlob:");
}

id objc_msgSend__fileRadar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileRadar:");
}

id objc_msgSend__findActiveWxDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findActiveWxDevice");
}

id objc_msgSend__getActiveNearbyWxAdress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getActiveNearbyWxAdress");
}

id objc_msgSend__getBoolPreferencesForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getBoolPreferencesForKey:");
}

id objc_msgSend__getCDTunings_FromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCDTunings:FromData:");
}

id objc_msgSend__getCurrentAudioOwner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCurrentAudioOwner");
}

id objc_msgSend__getCurrentRoute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCurrentRoute");
}

id objc_msgSend__getIDSDeviceFromBtAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getIDSDeviceFromBtAddress:");
}

id objc_msgSend__getInEarSrWxDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getInEarSrWxDevice");
}

id objc_msgSend__getJsonStringFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getJsonStringFromDictionary:");
}

id objc_msgSend__getPauseMessage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getPauseMessage");
}

id objc_msgSend__getResetMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getResetMessage:");
}

id objc_msgSend__getRssiNearby_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getRssiNearby:");
}

id objc_msgSend__getSignalTypeFromData_signal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getSignalTypeFromData:signal:");
}

id objc_msgSend__getWxChipVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getWxChipVersion:");
}

id objc_msgSend__getWxColorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getWxColorCode:");
}

id objc_msgSend__getWxFWVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getWxFWVersion:");
}

id objc_msgSend__getWxProductID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getWxProductID:");
}

id objc_msgSend__handleHRMSessionChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleHRMSessionChanged:");
}

id objc_msgSend__handleHijackBlockingwithDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleHijackBlockingwithDevice:");
}

id objc_msgSend__handlePairedWatchStatusDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePairedWatchStatusDidChange");
}

id objc_msgSend__handlePhoneOwnershipTriangleTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePhoneOwnershipTriangleTimer");
}

id objc_msgSend__handleProactiveRoutingRouteCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleProactiveRoutingRouteCheck:");
}

id objc_msgSend__handleSessionEnded_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSessionEnded:error:");
}

id objc_msgSend__handleSmartRoutingDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSmartRoutingDisabled:");
}

id objc_msgSend__hijackBackoffReset_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hijackBackoffReset:withReason:");
}

id objc_msgSend__hijackBlockingModeChangedFromClient_mode_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hijackBlockingModeChangedFromClient:mode:completion:");
}

id objc_msgSend__iPhoneScreenOnPowerEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iPhoneScreenOnPowerEvent");
}

id objc_msgSend__idsScheduleUpdateIdentities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_idsScheduleUpdateIdentities");
}

id objc_msgSend__inCaseLidClosed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inCaseLidClosed:");
}

id objc_msgSend__inEarConnectedCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inEarConnectedCheck:");
}

id objc_msgSend__inEarNearbyCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inEarNearbyCheck:");
}

id objc_msgSend__interrupted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interrupted");
}

id objc_msgSend__invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidate");
}

id objc_msgSend__invalidateCDSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidateCDSession");
}

id objc_msgSend__invalidateDirect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidateDirect");
}

id objc_msgSend__invalidateMuteBanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidateMuteBanner");
}

id objc_msgSend__invalidated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidated");
}

id objc_msgSend__isAddDeviceToBackoffDueToDisconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAddDeviceToBackoffDueToDisconnect");
}

id objc_msgSend__isAnyConnectedWxInEarCheck(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAnyConnectedWxInEarCheck");
}

id objc_msgSend__isAnyHRMEnabledDeviceConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAnyHRMEnabledDeviceConnected");
}

id objc_msgSend__isConnectionTipiv2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isConnectionTipiv2");
}

id objc_msgSend__isDevicePairedCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDevicePairedCheck:");
}

id objc_msgSend__isEligibleForPreemptiveBanner_firstPreemptiveBanner_inEarState_srDeviceCount_audioState_inAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEligibleForPreemptiveBanner:firstPreemptiveBanner:inEarState:srDeviceCount:audioState:inAddress:");
}

id objc_msgSend__isEligibleForTipiV2_firstDeviceTipiScore_secondDeviceTipiScore_currentDeviceScore_sourceDeviceCount_isOnDemandConnect_address_lastConnectedHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEligibleForTipiV2:firstDeviceTipiScore:secondDeviceTipiScore:currentDeviceScore:sourceDeviceCount:isOnDemandConnect:address:lastConnectedHost:");
}

id objc_msgSend__isForceRejectPipe(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isForceRejectPipe");
}

id objc_msgSend__isForceTipiv2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isForceTipiv2");
}

id objc_msgSend__isInEarDetectionDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInEarDetectionDisabled:");
}

id objc_msgSend__isInEarToOutOfEar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInEarToOutOfEar:");
}

id objc_msgSend__isInHijackBlockingMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInHijackBlockingMode");
}

id objc_msgSend__isInTipi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInTipi");
}

id objc_msgSend__isMagnetConnectedDeviceforConnectionCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isMagnetConnectedDeviceforConnectionCheck:");
}

id objc_msgSend__isMagnetConnectedDeviceforTipiHealingCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isMagnetConnectedDeviceforTipiHealingCheck:");
}

id objc_msgSend__isManualConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isManualConnection:");
}

id objc_msgSend__isMyAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isMyAddress:");
}

id objc_msgSend__isOnDemandConnectInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isOnDemandConnectInProgress");
}

id objc_msgSend__isOtherTipiDeviceBeforeTrain_withIOS_withMacOS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isOtherTipiDeviceBeforeTrain:withIOS:withMacOS:");
}

id objc_msgSend__isPhoneCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPhoneCall:");
}

id objc_msgSend__isReceivedLegacyTipiConnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isReceivedLegacyTipiConnect:");
}

id objc_msgSend__isSmartRoutingCapableDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSmartRoutingCapableDevice:");
}

id objc_msgSend__languageChangeMonitoringEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_languageChangeMonitoringEnsureStarted");
}

id objc_msgSend__languageChangeMonitoringEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_languageChangeMonitoringEnsureStopped");
}

id objc_msgSend__lastConnectIsWatchCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastConnectIsWatchCheck:");
}

id objc_msgSend__loadDeviceRecordForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadDeviceRecordForDevice:");
}

id objc_msgSend__logEvalError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logEvalError:");
}

id objc_msgSend__logEvalWxError_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logEvalWxError:withError:");
}

id objc_msgSend__logPreemptiveBannerEvalError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logPreemptiveBannerEvalError:");
}

id objc_msgSend__lowBatteryClearSFDevice_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowBatteryClearSFDevice:reason:");
}

id objc_msgSend__lowBatteryDeviceFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowBatteryDeviceFound:");
}

id objc_msgSend__lowBatteryDeviceLost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowBatteryDeviceLost:");
}

id objc_msgSend__lowBatteryLoad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowBatteryLoad");
}

id objc_msgSend__lowBatteryReset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowBatteryReset");
}

id objc_msgSend__lowBatterySave_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowBatterySave:");
}

id objc_msgSend__lowBatteryShowAlertWithLowBatteryDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowBatteryShowAlertWithLowBatteryDevice:");
}

id objc_msgSend__lowBatteryTrackSFDevice_batteryLevel_batteryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowBatteryTrackSFDevice:batteryLevel:batteryType:");
}

id objc_msgSend__lowBatteryUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowBatteryUpdate");
}

id objc_msgSend__lowestBatteryInfoForCBDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowestBatteryInfoForCBDevice:");
}

id objc_msgSend__lowestBatteryInfoForSFDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lowestBatteryInfoForSFDevice:");
}

id objc_msgSend__mediaRouteDiscoveryStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mediaRouteDiscoveryStarted");
}

id objc_msgSend__mediaRouteDiscoveryStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mediaRouteDiscoveryStopped");
}

id objc_msgSend__mediaRouteHijackResponseHandlerFor_allowedToHijack_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mediaRouteHijackResponseHandlerFor:allowedToHijack:withReason:");
}

id objc_msgSend__mediaRouteHijackWithAudioScore_wxAddress_andAudioResponseID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mediaRouteHijackWithAudioScore:wxAddress:andAudioResponseID:");
}

id objc_msgSend__mediaRouteMonitorActiveAudioRouteChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mediaRouteMonitorActiveAudioRouteChanged:");
}

id objc_msgSend__mediaRouteMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mediaRouteMonitorEnsureStarted");
}

id objc_msgSend__mediaRouteMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mediaRouteMonitorEnsureStopped");
}

id objc_msgSend__mediaRouteMonitorSpeakRoute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mediaRouteMonitorSpeakRoute");
}

id objc_msgSend__multimodalContextMessageReceived_fromDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_multimodalContextMessageReceived:fromDevice:");
}

id objc_msgSend__muteStateChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_muteStateChanged");
}

id objc_msgSend__myBluetoothAddressString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_myBluetoothAddressString");
}

id objc_msgSend__nearbyDeviceInfoTriangleRecoveryTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyDeviceInfoTriangleRecoveryTimer");
}

id objc_msgSend__nearbyInfoActivityChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyInfoActivityChanged");
}

id objc_msgSend__nearbyInfoActivityCriticalStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyInfoActivityCriticalStart");
}

id objc_msgSend__nearbyInfoActivityDelayCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyInfoActivityDelayCheck:");
}

id objc_msgSend__nearbyInfoDeviceLost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyInfoDeviceLost:");
}

id objc_msgSend__nearbyInfoDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyInfoDiscoveryEnsureStarted");
}

id objc_msgSend__nearbyInfoDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyInfoDiscoveryEnsureStopped");
}

id objc_msgSend__nearbyInfoSetAudioRoutingScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyInfoSetAudioRoutingScore");
}

id objc_msgSend__nearbyMacAddressTranslate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyMacAddressTranslate:");
}

id objc_msgSend__nearbyWxChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearbyWxChanged:");
}

id objc_msgSend__notifyOtherTipiCallState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyOtherTipiCallState:");
}

id objc_msgSend__notifyOtherTipiDeviceTipiScoreChanged_andNewScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyOtherTipiDeviceTipiScoreChanged:andNewScore:");
}

id objc_msgSend__onlyMuteAudioFeedbackFlagChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onlyMuteAudioFeedbackFlagChanged:");
}

id objc_msgSend__otherTipiDeviceTipiScoreChanged_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_otherTipiDeviceTipiScoreChanged:withOptions:");
}

id objc_msgSend__pairedDeviceMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pairedDeviceMonitorEnsureStarted");
}

id objc_msgSend__pairedDeviceMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pairedDeviceMonitorEnsureStopped");
}

id objc_msgSend__pickableRoutesChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickableRoutesChanged");
}

id objc_msgSend__pipeCleanup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pipeCleanup");
}

id objc_msgSend__pipeConnectionComplete_andWxHeadset_isSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pipeConnectionComplete:andWxHeadset:isSender:");
}

id objc_msgSend__pipeDone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pipeDone");
}

id objc_msgSend__pipeEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pipeEnsureStarted");
}

id objc_msgSend__pipeEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pipeEnsureStopped");
}

id objc_msgSend__pipeRequestCompleted_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pipeRequestCompleted:error:");
}

id objc_msgSend__pipeRequestResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pipeRequestResponse:error:");
}

id objc_msgSend__pipeSendRouteRequestToSFDevice_andWxHeadset_newPipe_connectionResult_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pipeSendRouteRequestToSFDevice:andWxHeadset:newPipe:connectionResult:completion:");
}

id objc_msgSend__playChime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playChime:");
}

id objc_msgSend__pmeConfigDataReceived_fromDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pmeConfigDataReceived:fromDevice:");
}

id objc_msgSend__postNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postNotification:");
}

id objc_msgSend__powerLogSmartIncomingConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_powerLogSmartIncomingConnection");
}

id objc_msgSend__powerLogSmartRoutingScanStarted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_powerLogSmartRoutingScanStarted:");
}

id objc_msgSend__powerLogSmartRoutingScanStopped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_powerLogSmartRoutingScanStopped:");
}

id objc_msgSend__powerMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_powerMonitorEnsureStarted");
}

id objc_msgSend__powerMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_powerMonitorEnsureStopped");
}

id objc_msgSend__powerMonitorScreenLockChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_powerMonitorScreenLockChanged");
}

id objc_msgSend__prefsChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prefsChanged");
}

id objc_msgSend__proactivelyTakeOwnership(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_proactivelyTakeOwnership");
}

id objc_msgSend__processBannerRequestForMuteAction_auditToken_bundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processBannerRequestForMuteAction:auditToken:bundleIdentifier:completion:");
}

id objc_msgSend__processFirstPartyBannerRequestWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processFirstPartyBannerRequestWithCompletion:");
}

id objc_msgSend__productColorAssetExists_withColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_productColorAssetExists:withColor:");
}

id objc_msgSend__productColorAssetLookup_andAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_productColorAssetLookup:andAddress:");
}

id objc_msgSend__productHasColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_productHasColors:");
}

id objc_msgSend__receivedAudioCategory_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedAudioCategory:withOptions:");
}

id objc_msgSend__receivedRelinquishOwnership_wxAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivedRelinquishOwnership:wxAddress:");
}

id objc_msgSend__registerForAVAudioSessionSpeechDetectionStyleChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForAVAudioSessionSpeechDetectionStyleChanges");
}

id objc_msgSend__registerForAVSystemControllerDeathNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForAVSystemControllerDeathNotifications");
}

id objc_msgSend__registerForAVSystemControllerStateNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForAVSystemControllerStateNotifications");
}

id objc_msgSend__registerForAudioSessionResetNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForAudioSessionResetNotifications");
}

id objc_msgSend__relayConduitMessageEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relayConduitMessageEnsureStarted");
}

id objc_msgSend__relayConduitMessageEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relayConduitMessageEnsureStopped");
}

id objc_msgSend__relayConduitMessageReceived_andSourceDevice_messageType_messageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relayConduitMessageReceived:andSourceDevice:messageType:messageData:");
}

id objc_msgSend__relayConduitMessageSend_withOptions_andWxAddress_andOtherAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relayConduitMessageSend:withOptions:andWxAddress:andOtherAddress:");
}

id objc_msgSend__relayConduitMessageStartTimer_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relayConduitMessageStartTimer:withOptions:");
}

id objc_msgSend__removeTiPiState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeTiPiState:");
}

id objc_msgSend__reportError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportError:");
}

id objc_msgSend__reportProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportProgress:");
}

id objc_msgSend__reportProgress_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportProgress:info:");
}

id objc_msgSend__reportProgressTriggeredDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportProgressTriggeredDevice:");
}

id objc_msgSend__resetInUserBannerShown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetInUserBannerShown");
}

id objc_msgSend__respondRoutingRequest_withResponseHandler_wxAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_respondRoutingRequest:withResponseHandler:wxAddress:");
}

id objc_msgSend__reverseMuteActionForToken_shouldMute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reverseMuteActionForToken:shouldMute:");
}

id objc_msgSend__run(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_run");
}

id objc_msgSend__runAdvertiser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runAdvertiser");
}

id objc_msgSend__runConfirm(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runConfirm");
}

id objc_msgSend__runConnectGuestHeadphones(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runConnectGuestHeadphones");
}

id objc_msgSend__runGuestiOSConnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runGuestiOSConnect");
}

id objc_msgSend__runGuestiOSPairSetupPublic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runGuestiOSPairSetupPublic");
}

id objc_msgSend__runGuestiOSShareAudio(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runGuestiOSShareAudio");
}

id objc_msgSend__runGuestiOSShareAudioConnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runGuestiOSShareAudioConnect");
}

id objc_msgSend__runGuestiOSShareAudioConnectSendRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runGuestiOSShareAudioConnectSendRequest");
}

id objc_msgSend__runGuestiOSShareAudioSendRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runGuestiOSShareAudioSendRequest");
}

id objc_msgSend__runInit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runInit");
}

id objc_msgSend__runPipeStates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runPipeStates");
}

id objc_msgSend__runScannerNearbyInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runScannerNearbyInfo");
}

id objc_msgSend__runScannerProxPairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runScannerProxPairing");
}

id objc_msgSend__runShareAudioServiceConfigRequest_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runShareAudioServiceConfigRequest:responseHandler:");
}

id objc_msgSend__runShareAudioServiceConfigResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runShareAudioServiceConfigResponse:");
}

id objc_msgSend__runShareAudioServiceConnectRequest_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runShareAudioServiceConnectRequest:responseHandler:");
}

id objc_msgSend__runShareAudioServiceStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runShareAudioServiceStart");
}

id objc_msgSend__runShowHeadphonesPairingInstructions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runShowHeadphonesPairingInstructions");
}

id objc_msgSend__runWaitForConfigRequestOrProxTrigger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runWaitForConfigRequestOrProxTrigger");
}

id objc_msgSend__runWaitForConnectRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runWaitForConnectRequest");
}

id objc_msgSend__runWaitForGuestHeadphones(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runWaitForGuestHeadphones");
}

id objc_msgSend__runWaitForGuestHeadphonesPairingMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runWaitForGuestHeadphonesPairingMode");
}

id objc_msgSend__runWaitForProxTrigger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runWaitForProxTrigger");
}

id objc_msgSend__saveDeviceRecordForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveDeviceRecordForDevice:");
}

id objc_msgSend__scheduleUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleUpdate");
}

id objc_msgSend__sendAccessoryEventMessage_eventType_destinationIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAccessoryEventMessage:eventType:destinationIdentifier:completionHandler:");
}

id objc_msgSend__sendAudioCategory_withAudioCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAudioCategory:withAudioCategory:");
}

id objc_msgSend__sendAudioCategoryToAllTipiDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAudioCategoryToAllTipiDevices");
}

id objc_msgSend__sendCloudConfigsToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendCloudConfigsToDevice:");
}

id objc_msgSend__sendConfigOverAAController_device_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendConfigOverAAController:device:completion:");
}

id objc_msgSend__sendConfigOverCBController_device_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendConfigOverCBController:device:completion:");
}

id objc_msgSend__sendConversationDetectMessage_destinationIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendConversationDetectMessage:destinationIdentifier:completion:");
}

id objc_msgSend__sendDeviceConfig_identifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendDeviceConfig:identifier:completion:");
}

id objc_msgSend__sendRouteReversedTipiEventForTipsSupport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendRouteReversedTipiEventForTipsSupport");
}

id objc_msgSend__sendSiriMultitoneConfigToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendSiriMultitoneConfigToDevice:");
}

id objc_msgSend__sendTipiHealingRequest_andOtherTipiAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendTipiHealingRequest:andOtherTipiAddress:");
}

id objc_msgSend__sendTipiScoreUpdateToWx(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendTipiScoreUpdateToWx");
}

id objc_msgSend__setBtAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBtAddress:");
}

id objc_msgSend__setCDSignalAudioTunings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCDSignalAudioTunings:");
}

id objc_msgSend__setConnectedBannerTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setConnectedBannerTick:");
}

id objc_msgSend__setConnectionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setConnectionState:");
}

id objc_msgSend__setFirstBannerShown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFirstBannerShown:");
}

id objc_msgSend__setHRTFAssetDownloadOTA(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHRTFAssetDownloadOTA");
}

id objc_msgSend__setHighPriorityTag_withHighPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHighPriorityTag:withHighPriority:");
}

id objc_msgSend__setHijackBackoffTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHijackBackoffTick:");
}

id objc_msgSend__setInUseBannerBackoffReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInUseBannerBackoffReason:");
}

id objc_msgSend__setInUseBannerBackoffTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInUseBannerBackoffTick:");
}

id objc_msgSend__setInUseBannerShown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInUseBannerShown:");
}

id objc_msgSend__setIncomingCallRingtoneState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIncomingCallRingtoneState:");
}

id objc_msgSend__setIsFirstConnentionAfterSREnable_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIsFirstConnentionAfterSREnable:forDevice:");
}

id objc_msgSend__setIsNearby_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIsNearby:");
}

id objc_msgSend__setManualRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualRoute:");
}

id objc_msgSend__setManualRouteChangeInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualRouteChangeInProgress:");
}

id objc_msgSend__setManualRouteFlag_withManualRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualRouteFlag:withManualRoute:");
}

id objc_msgSend__setNearbyConnectedSourceCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyConnectedSourceCount:");
}

id objc_msgSend__setNearbyInEar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyInEar:");
}

id objc_msgSend__setNearbyLastRouteHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyLastRouteHost:");
}

id objc_msgSend__setNearbyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyName:");
}

id objc_msgSend__setNearbyOutOfCaseTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyOutOfCaseTime:");
}

id objc_msgSend__setNearbyPaired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyPaired:");
}

id objc_msgSend__setNearbyPrevInEar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyPrevInEar:");
}

id objc_msgSend__setNearbyProductID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyProductID:");
}

id objc_msgSend__setNearbyStreamState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyStreamState:");
}

id objc_msgSend__setNearbyWxDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyWxDevice:");
}

id objc_msgSend__setNearbyiCloudSignIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearbyiCloudSignIn:");
}

id objc_msgSend__setOtherTipiAudioCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOtherTipiAudioCategory:");
}

id objc_msgSend__setOtherTipiDeviceBTAddress_andName_sourceVersion_withResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOtherTipiDeviceBTAddress:andName:sourceVersion:withResult:");
}

id objc_msgSend__setOtherTipiDeviceBuildVersion_andMinorBuildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOtherTipiDeviceBuildVersion:andMinorBuildVersion:");
}

id objc_msgSend__setOtherTipiDeviceInfo_andName_andVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOtherTipiDeviceInfo:andName:andVersion:");
}

id objc_msgSend__setOtherTipiDeviceIsStreamingAudio_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOtherTipiDeviceIsStreamingAudio:");
}

id objc_msgSend__setOtherTipiDeviceIsWatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOtherTipiDeviceIsWatch:");
}

id objc_msgSend__setOtherTipiManuallyRouteTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOtherTipiManuallyRouteTick:");
}

id objc_msgSend__setOtherTipiPlayingApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOtherTipiPlayingApp:");
}

id objc_msgSend__setOwnership_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOwnership:");
}

id objc_msgSend__setOwnership_withHijackRequest_withOwnership_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOwnership:withHijackRequest:withOwnership:");
}

id objc_msgSend__setPedestrianFenceWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPedestrianFenceWithHandler:");
}

id objc_msgSend__setPhase1ConnectConfig_andType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPhase1ConnectConfig:andType:");
}

id objc_msgSend__setPipeMessageStats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPipeMessageStats:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setRouteToWxAfterUnhide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRouteToWxAfterUnhide:");
}

id objc_msgSend__setRoutedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRoutedState:");
}

id objc_msgSend__setRoutingAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRoutingAction:");
}

id objc_msgSend__setRoutingInitialized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRoutingInitialized:");
}

id objc_msgSend__setRoutingUI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRoutingUI:");
}

id objc_msgSend__setShouldStayOnVirtual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShouldStayOnVirtual:");
}

id objc_msgSend__setTipiAndRoutedStateFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTipiAndRoutedStateFlags:");
}

id objc_msgSend__setTipiAndRoutedStateFlags_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTipiAndRoutedStateFlags:forDevice:");
}

id objc_msgSend__setTipiElectionInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTipiElectionInProgress:");
}

id objc_msgSend__setTipiElectionReceivedLePipe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTipiElectionReceivedLePipe:");
}

id objc_msgSend__setTipiElectionType_withDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTipiElectionType:withDevice:");
}

id objc_msgSend__setUserConnectedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUserConnectedState:");
}

id objc_msgSend__shareAudioActionScannerDeviceLost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shareAudioActionScannerDeviceLost:");
}

id objc_msgSend__shareAudioActionScannerEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shareAudioActionScannerEnsureStarted");
}

id objc_msgSend__shareAudioActionScannerEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shareAudioActionScannerEnsureStopped");
}

id objc_msgSend__shareAudioSessionEnded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shareAudioSessionEnded:");
}

id objc_msgSend__shareAudioSessionStartWithDarwinDevice_wxDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shareAudioSessionStartWithDarwinDevice:wxDevice:");
}

id objc_msgSend__shareAudioShowConnectBanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shareAudioShowConnectBanner:");
}

id objc_msgSend__shouldRunHeadGesture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldRunHeadGesture");
}

id objc_msgSend__shouldSendXPCMessage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSendXPCMessage");
}

id objc_msgSend__showHIDIntervalBannerIfEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showHIDIntervalBannerIfEnabled:");
}

id objc_msgSend__showHIDLagBannerIfEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showHIDLagBannerIfEnabled:");
}

id objc_msgSend__smartRoutingAddWxMapDevice_routingAction_otherAddress_otherName_otherSourceVersion_isRoutingInitialized_newWx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartRoutingAddWxMapDevice:routingAction:otherAddress:otherName:otherSourceVersion:isRoutingInitialized:newWx:");
}

id objc_msgSend__smartRoutingAddWxMapDeviceFromConnectedDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartRoutingAddWxMapDeviceFromConnectedDevice:");
}

id objc_msgSend__smartRoutingAudioRoutingRequest_withResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartRoutingAudioRoutingRequest:withResponseHandler:");
}

id objc_msgSend__smartRoutingChangeRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartRoutingChangeRoute:");
}

id objc_msgSend__smartRoutingConnectToEligibleHeadset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartRoutingConnectToEligibleHeadset:");
}

id objc_msgSend__smartRoutingConnectionCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartRoutingConnectionCompleted:");
}

id objc_msgSend__smartRoutingLowerRateScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartRoutingLowerRateScan");
}

id objc_msgSend__smartRoutingModeCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartRoutingModeCheck:");
}

id objc_msgSend__smartRoutingShowBanner_withDevice_andDeviceAddress_andProductID_andCentralContentItemTxt_andTimeout_andDeviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_smartRoutingShowBanner:withDevice:andDeviceAddress:andProductID:andCentralContentItemTxt:andTimeout:andDeviceType:");
}

id objc_msgSend__startAudioStateSnapshotTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startAudioStateSnapshotTimer");
}

id objc_msgSend__startHighActivityLevelTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startHighActivityLevelTimer:");
}

id objc_msgSend__startHijackMetricSubmission_wxAddress_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startHijackMetricSubmission:wxAddress:version:");
}

id objc_msgSend__startInUseBannerTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startInUseBannerTimer");
}

id objc_msgSend__startManualRouteChangeDetectionTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startManualRouteChangeDetectionTimer:");
}

id objc_msgSend__startPedestrianFenceSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPedestrianFenceSession");
}

id objc_msgSend__startPhoneTriangleOwnershipTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPhoneTriangleOwnershipTimer:");
}

id objc_msgSend__startPlaybackTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPlaybackTimer");
}

id objc_msgSend__startQueuedRampForDuration_startLevel_endLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startQueuedRampForDuration:startLevel:endLevel:");
}

id objc_msgSend__startRingtoneTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startRingtoneTimer");
}

id objc_msgSend__startRouteChangeDetectionTimer_andAnswer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startRouteChangeDetectionTimer:andAnswer:");
}

id objc_msgSend__startRouteCheckTimer_andType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startRouteCheckTimer:andType:");
}

id objc_msgSend__startTipiHealing_withLastConnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTipiHealing:withLastConnect:");
}

id objc_msgSend__startTipiSetupTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTipiSetupTicks");
}

id objc_msgSend__statedumpAndRecordDailyMetric(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_statedumpAndRecordDailyMetric");
}

id objc_msgSend__statsEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_statsEnsureStarted");
}

id objc_msgSend__stopAudioStateSnapshotTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopAudioStateSnapshotTimer:");
}

id objc_msgSend__stopHeadGestureManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopHeadGestureManager");
}

id objc_msgSend__stopPedestrianFenceSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopPedestrianFenceSession");
}

id objc_msgSend__submitConnectionMetric_andError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitConnectionMetric:andError:");
}

id objc_msgSend__submitHijackBlockMetric_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitHijackBlockMetric:withReason:");
}

id objc_msgSend__submitManualConnectionMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitManualConnectionMetric:");
}

id objc_msgSend__submitManualRouteDetectionMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitManualRouteDetectionMetric:");
}

id objc_msgSend__submitMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitMetric:");
}

id objc_msgSend__submitMetricNearby_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitMetricNearby:");
}

id objc_msgSend__submitMetricTipiHealingforDevice_withDuration_andLegacy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitMetricTipiHealingforDevice:withDuration:andLegacy:");
}

id objc_msgSend__submitMetricsForMuteAction_auditTokenBundleID_appName_appBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitMetricsForMuteAction:auditTokenBundleID:appName:appBundleID:");
}

id objc_msgSend__submitNearbyDeviceMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitNearbyDeviceMetric:");
}

id objc_msgSend__submitRouteChangeDetectionMetric_andAnswer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitRouteChangeDetectionMetric:andAnswer:");
}

id objc_msgSend__supportsSR_andProductID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supportsSR:andProductID:");
}

id objc_msgSend__supportsTipi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supportsTipi:");
}

id objc_msgSend__systemUIMonitorEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemUIMonitorEnsureStarted");
}

id objc_msgSend__systemUIMonitorEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemUIMonitorEnsureStopped");
}

id objc_msgSend__tipiHealing_withDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tipiHealing:withDevice:");
}

id objc_msgSend__tipiHealingAttempt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tipiHealingAttempt");
}

id objc_msgSend__tipiHealingHijackTimerStart_withScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tipiHealingHijackTimerStart:withScore:");
}

id objc_msgSend__tipiHealingStartTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tipiHealingStartTimer:");
}

id objc_msgSend__tipihHealingV2Handling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tipihHealingV2Handling:");
}

id objc_msgSend__triggerTipiTableUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_triggerTipiTableUpdate:");
}

id objc_msgSend__update(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_update");
}

id objc_msgSend__updateAccessoriesWithMotionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccessoriesWithMotionState:");
}

id objc_msgSend__updateAccessoriesWithPauseState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccessoriesWithPauseState");
}

id objc_msgSend__updateAccessoryID_connectionDeviceAddresses_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccessoryID:connectionDeviceAddresses:completion:");
}

id objc_msgSend__updateAudioRoute_withUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAudioRoute:withUUID:");
}

id objc_msgSend__updateBannerChimeSuppressionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBannerChimeSuppressionState");
}

id objc_msgSend__updateConversationDetectSignal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateConversationDetectSignal:");
}

id objc_msgSend__updateDetectedHeadGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDetectedHeadGesture:");
}

id objc_msgSend__updateHijackBlockingClientWithBundleID_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHijackBlockingClientWithBundleID:mode:");
}

id objc_msgSend__updateLocalAudioCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLocalAudioCategory:");
}

id objc_msgSend__updateMasterZoneBlob_accessoryblob_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMasterZoneBlob:accessoryblob:");
}

id objc_msgSend__updateMuteAction_auditToken_bundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMuteAction:auditToken:bundleIdentifier:");
}

id objc_msgSend__updateNearbyDeviceState_withAddress_withEasyPairing_withState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNearbyDeviceState:withAddress:withEasyPairing:withState:");
}

id objc_msgSend__updateOtherTipiBuildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOtherTipiBuildVersion:");
}

id objc_msgSend__updateOtherTipiDevice_otherAddress_otherName_otherVersion_withResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOtherTipiDevice:otherAddress:otherName:otherVersion:withResult:");
}

id objc_msgSend__updateOtherTipiDevicewithAudioCategory_otherAddress_otherName_otherVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOtherTipiDevicewithAudioCategory:otherAddress:otherName:otherVersion:");
}

id objc_msgSend__updatePauseState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePauseState");
}

id objc_msgSend__updateRoutingActionForManuallyRoute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRoutingActionForManuallyRoute");
}

id objc_msgSend__updateSRDiscoveredDeviceForCBDeviceChanged_connectionStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSRDiscoveredDeviceForCBDeviceChanged:connectionStatus:");
}

id objc_msgSend__updateSRDiscoveredDeviceForNearbyWxChanged_isNearby_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSRDiscoveredDeviceForNearbyWxChanged:isNearby:");
}

id objc_msgSend__verifyWxConnectedBTAddress_withVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyWxConnectedBTAddress:withVersion:");
}

id objc_msgSend__verifyWxConnectedRouted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyWxConnectedRouted:");
}

id objc_msgSend__wxDeviceFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wxDeviceFound:");
}

id objc_msgSend__wxDeviceLost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wxDeviceLost:");
}

id objc_msgSend__wxDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wxDiscoveryEnsureStarted");
}

id objc_msgSend__wxDiscoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wxDiscoveryEnsureStopped");
}

id objc_msgSend__wxDiscoveryWatchRecoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wxDiscoveryWatchRecoveryEnsureStarted");
}

id objc_msgSend__wxDiscoveryWatchRecoveryEnsureStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wxDiscoveryWatchRecoveryEnsureStopped");
}

id objc_msgSend__wxDiscoveryWatchRecoveryLostDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wxDiscoveryWatchRecoveryLostDevice:");
}

id objc_msgSend__xpcConnectionInvalidated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcConnectionInvalidated:");
}

id objc_msgSend__xpcReceivedAccessoryEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcReceivedAccessoryEvent:");
}

id objc_msgSend__xpcReceivedAudioAccessoryDeviceInfoChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcReceivedAudioAccessoryDeviceInfoChange:");
}

id objc_msgSend__xpcReceivedMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xpcReceivedMessage:");
}

id objc_msgSend_aaServicesRequireReset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaServicesRequireReset");
}

id objc_msgSend_acceptReplyPlayPauseConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptReplyPlayPauseConfig");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account");
}

id objc_msgSend_accountAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountAvailable");
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatus");
}

id objc_msgSend_accountStatusAvailable_force_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusAvailable:force:");
}

id objc_msgSend_accountStatusDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusDidChange:");
}

id objc_msgSend_accountStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusWithCompletionHandler:");
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accounts");
}

id objc_msgSend_aclPriority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aclPriority");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "action");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activate");
}

id objc_msgSend_activateAssertionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateAssertionWithIdentifier:");
}

id objc_msgSend_activateAudioSessionControl_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateAudioSessionControl:completion:");
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activeCallCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeCallCount");
}

id objc_msgSend_activePlayingApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activePlayingApp");
}

id objc_msgSend_activeTransactions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeTransactions");
}

id objc_msgSend_activity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activity");
}

id objc_msgSend_activityHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityHandler");
}

id objc_msgSend_adaptiveVolumeConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adaptiveVolumeConfig");
}

id objc_msgSend_addAccountMagicKeysWithCloudRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccountMagicKeysWithCloudRecord:");
}

id objc_msgSend_addActionWithIdentifier_title_flags_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addActionWithIdentifier:title:flags:handler:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDeviceMagicSettingsWithRecord_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDeviceMagicSettingsWithRecord:completion:");
}

id objc_msgSend_addDeviceSupportInformationWithRecord_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDeviceSupportInformationWithRecord:completion:");
}

id objc_msgSend_addDeviceWithRecord_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDeviceWithRecord:completion:");
}

id objc_msgSend_addLegacyMagicPairingRecordsWithCloudRecord_userInitiated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLegacyMagicPairingRecordsWithCloudRecord:userInitiated:completion:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperationWithBlock:");
}

id objc_msgSend_addSoundProfileRecordWithURL_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSoundProfileRecordWithURL:completion:");
}

id objc_msgSend_addWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addWithDelegate:");
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "address");
}

id objc_msgSend_addressData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addressData");
}

id objc_msgSend_addressString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addressString");
}

id objc_msgSend_advertisementFields(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "advertisementFields");
}

id objc_msgSend_allDevicesStarSky(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDevicesStarSky");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowHijackWithAudioScore_hijackRoute_hijackDeniedReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowHijackWithAudioScore:hijackRoute:hijackDeniedReason:");
}

id objc_msgSend_allowNoiseManagementOff(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowNoiseManagementOff");
}

id objc_msgSend_allowsAutoRoute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsAutoRoute");
}

id objc_msgSend_appBundleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appBundleID");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appleIDAddProof_dispatchQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDAddProof:dispatchQueue:completion:");
}

id objc_msgSend_appleIDVerifyProof_dispatchQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDVerifyProof:dispatchQueue:completion:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assistantIsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assistantIsEnabled");
}

id objc_msgSend_associatedDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associatedDevices");
}

id objc_msgSend_attributeForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeForKey:");
}

id objc_msgSend_audioDestination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioDestination");
}

id objc_msgSend_audioFeedbackConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioFeedbackConfig");
}

id objc_msgSend_audioRoute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioRoute");
}

id objc_msgSend_audioRouteHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioRouteHidden");
}

id objc_msgSend_audioRoutingClientID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioRoutingClientID");
}

id objc_msgSend_audioRoutingRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioRoutingRequest");
}

id objc_msgSend_audioRoutingResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioRoutingResponse");
}

id objc_msgSend_audioRoutingScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioRoutingScore");
}

id objc_msgSend_audioScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioScore");
}

id objc_msgSend_audioSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioSession");
}

id objc_msgSend_audioSessionControlActivate_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioSessionControlActivate:completion:");
}

id objc_msgSend_audioSessionControlUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioSessionControlUpdate:");
}

id objc_msgSend_audioState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioState");
}

id objc_msgSend_audioStreamState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioStreamState");
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditToken");
}

id objc_msgSend_autoANCStrength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoANCStrength");
}

id objc_msgSend_availableDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableDevices");
}

id objc_msgSend_avgConfidence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avgConfidence");
}

id objc_msgSend_axHeadTrackingSettingChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axHeadTrackingSettingChanged");
}

id objc_msgSend_bannerAction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bannerAction");
}

id objc_msgSend_bannerTrigger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bannerTrigger");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_batteryInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryInfo");
}

id objc_msgSend_batteryLeft(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryLeft");
}

id objc_msgSend_batteryLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryLevel");
}

id objc_msgSend_batteryLevelInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryLevelInfo");
}

id objc_msgSend_batteryLevelLeft(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryLevelLeft");
}

id objc_msgSend_batteryLevelMain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryLevelMain");
}

id objc_msgSend_batteryLevelRight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryLevelRight");
}

id objc_msgSend_batteryMain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryMain");
}

id objc_msgSend_batteryRight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryRight");
}

id objc_msgSend_batteryState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryState");
}

id objc_msgSend_batteryType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryType");
}

id objc_msgSend_beginTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTransaction:");
}

id objc_msgSend_bleDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bleDevice");
}

id objc_msgSend_block(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "block");
}

id objc_msgSend_bluetoothAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bluetoothAddress");
}

id objc_msgSend_bluetoothIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bluetoothIdentifier");
}

id objc_msgSend_bluetoothState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bluetoothState");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_btAddressData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "btAddressData");
}

id objc_msgSend_btXID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "btXID");
}

id objc_msgSend_buddySetupDone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddySetupDone");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleRecordForAuditToken_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleRecordForAuditToken:error:");
}

id objc_msgSend_bundleRecordWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_cachedIsNetworkUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedIsNetworkUp");
}

id objc_msgSend_callCenterWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callCenterWithQueue:");
}

id objc_msgSend_callConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callConnected");
}

id objc_msgSend_callCountIncomingConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callCountIncomingConnected");
}

id objc_msgSend_callCountIncomingUnconnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callCountIncomingUnconnected");
}

id objc_msgSend_callCountOutgoingConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callCountOutgoingConnected");
}

id objc_msgSend_callCountOutgoingUnconnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callCountOutgoingUnconnected");
}

id objc_msgSend_callFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callFlags");
}

id objc_msgSend_callIncomingUnconnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callIncomingUnconnected");
}

id objc_msgSend_callStartTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callStartTicks");
}

id objc_msgSend_callUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callUUID");
}

id objc_msgSend_callbackQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callbackQueue");
}

id objc_msgSend_canSend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSend");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_capitalizedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capitalizedString");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_cdSignalAudioInterrupted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdSignalAudioInterrupted");
}

id objc_msgSend_centerContentItemsText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerContentItemsText");
}

id objc_msgSend_checkFirstUnlockForIDS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkFirstUnlockForIDS");
}

id objc_msgSend_clearFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearFence:");
}

id objc_msgSend_clickHoldModeLeft(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clickHoldModeLeft");
}

id objc_msgSend_clickHoldModeRight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clickHoldModeRight");
}

id objc_msgSend_clientID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientID");
}

id objc_msgSend_clients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clients");
}

id objc_msgSend_closeAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeAndReturnError:");
}

id objc_msgSend_cloudAccountInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudAccountInfo");
}

id objc_msgSend_cloudContainerIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudContainerIdentifier");
}

id objc_msgSend_cloudDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudDevices");
}

id objc_msgSend_cloudIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudIdentifier");
}

id objc_msgSend_cloudKitConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitConnection");
}

id objc_msgSend_cloudKitContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitContainer");
}

id objc_msgSend_cloudKitDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitDatabase");
}

id objc_msgSend_cloudPairingCompletedWithResponse_localKeys_from_forProtocolID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudPairingCompletedWithResponse:localKeys:from:forProtocolID:");
}

id objc_msgSend_cloudPairingQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudPairingQueue");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_collectFeedbackWithLaunchConfiguration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectFeedbackWithLaunchConfiguration:completion:");
}

id objc_msgSend_colorCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorCode");
}

id objc_msgSend_colorCodeBest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorCodeBest");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithString:");
}

id objc_msgSend_conduitDeviceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conduitDeviceID");
}

id objc_msgSend_conduitMessageTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conduitMessageTicks");
}

id objc_msgSend_conduitMessageTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conduitMessageTimer");
}

id objc_msgSend_conferencingCallSets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conferencingCallSets");
}

id objc_msgSend_configurationForDefaultMainDisplayMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationForDefaultMainDisplayMonitor");
}

id objc_msgSend_connected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connected");
}

id objc_msgSend_connectedCallCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedCallCount");
}

id objc_msgSend_connectedServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedServices");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection");
}

id objc_msgSend_connectionFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionFlags");
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionState");
}

id objc_msgSend_connectionUpdatedForBluetoothIdentifier_connected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionUpdatedForBluetoothIdentifier:connected:");
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerIdentifier");
}

id objc_msgSend_containerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithIdentifier:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_controlFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlFlags");
}

id objc_msgSend_controllerInfoAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerInfoAndReturnError:");
}

id objc_msgSend_conversationDetectCapability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conversationDetectCapability");
}

id objc_msgSend_conversationDetectConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conversationDetectConfig");
}

id objc_msgSend_conversationDetectSignal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conversationDetectSignal");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_coreBluetoothDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coreBluetoothDevice");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_counterpartIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "counterpartIdentifier");
}

id objc_msgSend_cpDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cpDescription");
}

id objc_msgSend_createDeviceRecord_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDeviceRecord:completion:");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createSoundProfileRecordStagingURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSoundProfileRecordStagingURL");
}

id objc_msgSend_createSubscritionForRecordType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSubscritionForRecordType:");
}

id objc_msgSend_criteria(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "criteria");
}

id objc_msgSend_crownRotationDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crownRotationDirection");
}

id objc_msgSend_cuFilteredArrayUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cuFilteredArrayUsingBlock:");
}

id objc_msgSend_cuValueForEntitlementNoCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cuValueForEntitlementNoCache:");
}

id objc_msgSend_currentCDDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCDDeviceIdentifier");
}

id objc_msgSend_currentCampaign(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCampaign");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_declineCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "declineCount");
}

id objc_msgSend_declineDismissSkipConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "declineDismissSkipConfig");
}

id objc_msgSend_defaultAudioTunings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultAudioTunings");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_deleteCloudKitAccessoryZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCloudKitAccessoryZone");
}

id objc_msgSend_deleteLegacyMagicPairingRecordsWithUserInitiated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteLegacyMagicPairingRecordsWithUserInitiated:completion:");
}

id objc_msgSend_deleteLegacyMasterKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteLegacyMasterKey");
}

id objc_msgSend_deleteRecordWithID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordWithID:completionHandler:");
}

id objc_msgSend_deleteRecordZoneWithID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordZoneWithID:completionHandler:");
}

id objc_msgSend_deleteSubscriptionWithID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSubscriptionWithID:completionHandler:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_deviceActionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceActionType");
}

id objc_msgSend_deviceAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceAddress");
}

id objc_msgSend_deviceFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceFlags");
}

id objc_msgSend_deviceForFromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceForFromID:");
}

id objc_msgSend_deviceForIDSDevice_createNew_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceForIDSDevice:createNew:");
}

id objc_msgSend_deviceHeadGestureDetected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceHeadGestureDetected:");
}

id objc_msgSend_deviceManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManager");
}

id objc_msgSend_deviceManagerFoundDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagerFoundDevice:");
}

id objc_msgSend_deviceManagerHeadGestureDetected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagerHeadGestureDetected:");
}

id objc_msgSend_deviceManagerLostDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagerLostDevice:");
}

id objc_msgSend_deviceManagerReportDeviceFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagerReportDeviceFound:");
}

id objc_msgSend_deviceManagerReportDeviceLost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagerReportDeviceLost:");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceName");
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceType");
}

id objc_msgSend_deviceTypeToString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceTypeToString");
}

id objc_msgSend_deviceVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceVersion");
}

id objc_msgSend_deviceWithIDSDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithIDSDevice:");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "devices");
}

id objc_msgSend_diagnosticControl_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticControl:completion:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_directoryChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directoryChanged");
}

id objc_msgSend_directoryURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directoryURL");
}

id objc_msgSend_disableCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableCount");
}

id objc_msgSend_discoverabilitySignal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverabilitySignal");
}

id objc_msgSend_discoverableState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverableState");
}

id objc_msgSend_discoveredDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveredDevices");
}

id objc_msgSend_discoveryFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveryFlags");
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchQueue");
}

id objc_msgSend_dispatchSourceAbort(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchSourceAbort");
}

id objc_msgSend_dispatchSourceChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchSourceChange");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_doubleTapActionLeft(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleTapActionLeft");
}

id objc_msgSend_doubleTapActionRight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleTapActionRight");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_downloadHRTFAsset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadHRTFAsset");
}

id objc_msgSend_downloadHRTFAsset_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadHRTFAsset:withCompletion:");
}

id objc_msgSend_duetActivitySchedulerData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duetActivitySchedulerData");
}

id objc_msgSend_elements(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elements");
}

id objc_msgSend_enableCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableCount");
}

id objc_msgSend_enableHeartRateMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableHeartRateMonitor");
}

id objc_msgSend_enableSiriMultitone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableSiriMultitone");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encryptedValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptedValues");
}

id objc_msgSend_endCallConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endCallConfig");
}

id objc_msgSend_endSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSession");
}

id objc_msgSend_endTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTransaction:");
}

id objc_msgSend_entitled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entitled");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSubstringsInRange:options:usingBlock:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environment");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errors");
}

id objc_msgSend_establishBluetoothdXPCWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "establishBluetoothdXPCWithCompletion:");
}

id objc_msgSend_evalPreemptiveBannerResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evalPreemptiveBannerResult");
}

id objc_msgSend_evalResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evalResult");
}

id objc_msgSend_evalTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evalTicks");
}

id objc_msgSend_evalWxMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evalWxMap");
}

id objc_msgSend_evaluator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluator");
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executablePath");
}

id objc_msgSend_falseRouteCheckForceDisconnectTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "falseRouteCheckForceDisconnectTimer");
}

id objc_msgSend_falseRouteCheckHijackAwayTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "falseRouteCheckHijackAwayTimer");
}

id objc_msgSend_falseRouteCheckHijackTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "falseRouteCheckHijackTimer");
}

id objc_msgSend_falseRouteCheckOnDemandTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "falseRouteCheckOnDemandTimer");
}

id objc_msgSend_falseRouteCheckOwnLostTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "falseRouteCheckOwnLostTimer");
}

id objc_msgSend_falseRouteCheckProactiveRoutingTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "falseRouteCheckProactiveRoutingTimer");
}

id objc_msgSend_falseRouteCheckReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "falseRouteCheckReason");
}

id objc_msgSend_fd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fd");
}

id objc_msgSend_fetchAADeviceRecordSyncWithAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAADeviceRecordSyncWithAddress:");
}

id objc_msgSend_fetchAAProxCardsInfoWithAddress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAAProxCardsInfoWithAddress:completion:");
}

id objc_msgSend_fetchAccessoryKeyBlob_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccessoryKeyBlob:");
}

id objc_msgSend_fetchAccountMagicKeysBlobWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccountMagicKeysBlobWithCompletion:");
}

id objc_msgSend_fetchAccountStatusWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccountStatusWithCompletion:");
}

id objc_msgSend_fetchAllSubscriptionsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllSubscriptionsWithCompletionHandler:");
}

id objc_msgSend_fetchCached(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCached");
}

id objc_msgSend_fetchCloudPairingIdentifierForPeripheral_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCloudPairingIdentifierForPeripheral:withCompletion:");
}

id objc_msgSend_fetchCountsForFormWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCountsForFormWithIdentifier:completion:");
}

id objc_msgSend_fetchDeviceList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceList");
}

id objc_msgSend_fetchDeviceRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceRecordsWithCompletion:");
}

id objc_msgSend_fetchDeviceSupportInformationRecordWithAddress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceSupportInformationRecordWithAddress:completion:");
}

id objc_msgSend_fetchDeviceSupportInformationRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceSupportInformationRecordsWithCompletion:");
}

id objc_msgSend_fetchDeviceSyncWithAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceSyncWithAddress:");
}

id objc_msgSend_fetchDeviceWithAddress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceWithAddress:completion:");
}

id objc_msgSend_fetchIDSDevicesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIDSDevicesWithCompletion:");
}

id objc_msgSend_fetchInCallUIState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchInCallUIState:");
}

id objc_msgSend_fetchKeyBlob_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKeyBlob:");
}

id objc_msgSend_fetchLegacyMagicPairingRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLegacyMagicPairingRecordsWithCompletion:");
}

id objc_msgSend_fetchMagicPairingSettingsRecordsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMagicPairingSettingsRecordsWithCompletion:");
}

id objc_msgSend_fetchMagicSettingsRecordWithAddress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMagicSettingsRecordWithAddress:completion:");
}

id objc_msgSend_fetchNicknameDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNicknameDevice");
}

id objc_msgSend_fetchPublicAddressWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPublicAddressWithCompletion:");
}

id objc_msgSend_fetchRecordWithID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithID:completionHandler:");
}

id objc_msgSend_fetchSoundProfileRecordWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSoundProfileRecordWithCompletion:");
}

id objc_msgSend_fetchSubscriptionWithID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSubscriptionWithID:completionHandler:");
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileDescriptor");
}

id objc_msgSend_fileDiscovered(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileDiscovered");
}

id objc_msgSend_fileHandleForWritingToURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForWritingToURL:error:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSystemRepresentation");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_filteredDevicesForIDSDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredDevicesForIDSDevices:");
}

id objc_msgSend_firmwareVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareVersion");
}

id objc_msgSend_firstBannerShown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstBannerShown");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_firstPipeMessageRTT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstPipeMessageRTT");
}

id objc_msgSend_firstPreemptiveBannerShown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstPreemptiveBannerShown");
}

id objc_msgSend_firstUnlocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstUnlocked");
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flags");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_forceAccountStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceAccountStatus");
}

id objc_msgSend_generateKeyDictForTypes_keyLength_forAddress_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateKeyDictForTypes:keyLength:forAddress:withCompletion:");
}

id objc_msgSend_getAccountStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAccountStatus");
}

id objc_msgSend_getActiveCategoryVolume_andName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getActiveCategoryVolume:andName:");
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getActivePairedDevice");
}

id objc_msgSend_getHijackAudioInfo_appCount_playingApp_route_remote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHijackAudioInfo:appCount:playingApp:route:remote:");
}

id objc_msgSend_getHijackedAwayAudioInfo_appCount_playingApp_route_remote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHijackedAwayAudioInfo:appCount:playingApp:route:remote:");
}

id objc_msgSend_getLocalAudioInfofromSnapshot_appCount_playingApp_route_remote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocalAudioInfofromSnapshot:appCount:playingApp:route:remote:");
}

id objc_msgSend_getSmartRoutingStateForDeviceAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSmartRoutingStateForDeviceAddress:");
}

id objc_msgSend_gracePeriod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gracePeriod");
}

id objc_msgSend_handleAccessoryKeyModifyError_forBlob_withRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAccessoryKeyModifyError:forBlob:withRetryCount:");
}

id objc_msgSend_handleAccessoryModifyError_forBlob_withRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAccessoryModifyError:forBlob:withRetryCount:");
}

id objc_msgSend_handleActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleActivity");
}

id objc_msgSend_handleCloudPairingMessage_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCloudPairingMessage:from:");
}

id objc_msgSend_handleConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnection:");
}

id objc_msgSend_handleConnection_XPCMessage_userID_processID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnection:XPCMessage:userID:processID:");
}

id objc_msgSend_handleDisconnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDisconnection");
}

id objc_msgSend_handleEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEvent:");
}

id objc_msgSend_handleInitiatorPairingKeys_from_forProtocolID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInitiatorPairingKeys:from:forProtocolID:");
}

id objc_msgSend_handleKeyDistribution_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleKeyDistribution:from:");
}

id objc_msgSend_handleModifyMasterKeyError_forBlob_withRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleModifyMasterKeyError:forBlob:withRetryCount:");
}

id objc_msgSend_handleMsg_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMsg:");
}

id objc_msgSend_handlePairingFailure_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePairingFailure:from:");
}

id objc_msgSend_handlePairingRequest_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePairingRequest:from:");
}

id objc_msgSend_handlePairingResponse_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePairingResponse:from:");
}

id objc_msgSend_handleRepairRequest_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRepairRequest:from:");
}

id objc_msgSend_handleResponderPairingKeys_from_forProtocolID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResponderPairingKeys:from:forProtocolID:");
}

id objc_msgSend_handleSecurityRequest_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSecurityRequest:from:");
}

id objc_msgSend_handleUnpairCommand_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnpairCommand:from:");
}

id objc_msgSend_hardwareAddressData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hardwareAddressData");
}

id objc_msgSend_hasOwnership(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOwnership");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hashTableWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashTableWithOptions:");
}

id objc_msgSend_headGesture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headGesture");
}

id objc_msgSend_headGestureMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headGestureMode");
}

id objc_msgSend_headGestureToggle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headGestureToggle");
}

id objc_msgSend_headGestureUpdateFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headGestureUpdateFlags");
}

id objc_msgSend_hijackActiveRemoteScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackActiveRemoteScore");
}

id objc_msgSend_hijackAmbientTick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackAmbientTick");
}

id objc_msgSend_hijackAnswer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackAnswer");
}

id objc_msgSend_hijackAwayLocalScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackAwayLocalScore");
}

id objc_msgSend_hijackAwayRemoteScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackAwayRemoteScore");
}

id objc_msgSend_hijackBackoffTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackBackoffTicks");
}

id objc_msgSend_hijackBlockingClientSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackBlockingClientSet");
}

id objc_msgSend_hijackCallTick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackCallTick");
}

id objc_msgSend_hijackContinuousTimeoutCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackContinuousTimeoutCount");
}

id objc_msgSend_hijackInputTick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackInputTick");
}

id objc_msgSend_hijackMediaTick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackMediaTick");
}

id objc_msgSend_hijackPlayingApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackPlayingApp");
}

id objc_msgSend_hijackPlayingCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackPlayingCategory");
}

id objc_msgSend_hijackRelaySent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackRelaySent");
}

id objc_msgSend_hijackRoundTripTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackRoundTripTime");
}

id objc_msgSend_hijackScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackScore");
}

id objc_msgSend_hijackVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hijackVersion");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_idsDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDevice");
}

id objc_msgSend_idsDeviceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDeviceID");
}

id objc_msgSend_idsIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsIdentifier");
}

id objc_msgSend_ignoreManualConnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreManualConnect");
}

id objc_msgSend_inEar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inEar");
}

id objc_msgSend_inEarDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inEarDisabled");
}

id objc_msgSend_inUseBannerBackoffReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inUseBannerBackoffReason");
}

id objc_msgSend_inUseBannerBackoffTick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inUseBannerBackoffTick");
}

id objc_msgSend_inUseBannerShown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inUseBannerShown");
}

id objc_msgSend_incomingCallRingtone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingCallRingtone");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initProxyForProcess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initProxyForProcess:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBluetoothAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBluetoothAddress:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithCameraSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCameraSession:");
}

id objc_msgSend_initWithConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDelegate_config_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:config:");
}

id objc_msgSend_initWithDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:error:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithFeedbackForm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeedbackForm:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithIDSDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIDSDevice:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_bundleID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:bundleID:context:");
}

id objc_msgSend_initWithListenerEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithListenerEndpoint:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithName_date_gracePeriod_priority_options_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:date:gracePeriod:priority:options:block:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordsToSave:recordIDsToDelete:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithURL_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:action:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUserNotification_sourceAppId_platform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserNotification:sourceAppId:platform:");
}

id objc_msgSend_initWithXPCObject_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithXPCObject:error:");
}

id objc_msgSend_initWithZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:");
}

id objc_msgSend_initWithZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:");
}

id objc_msgSend_initializeCloudKit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeCloudKit");
}

id objc_msgSend_initializeIDS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeIDS");
}

id objc_msgSend_initializedCKAfterFirstUnlockedSinceBoot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializedCKAfterFirstUnlockedSinceBoot");
}

id objc_msgSend_initiatePairing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initiatePairing:");
}

id objc_msgSend_initiatePairingAgainIfNoAckReceived_attempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initiatePairingAgainIfNoAckReceived:attempt:");
}

id objc_msgSend_inquiryState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inquiryState");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateAudioSessionControl_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateAudioSessionControl:completion:");
}

id objc_msgSend_isAccountActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountActive");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActive");
}

id objc_msgSend_isAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAvailable");
}

id objc_msgSend_isBuddyComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBuddyComplete");
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnected");
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDefaultPairedDevice");
}

id objc_msgSend_isDeviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeviceClass:");
}

id objc_msgSend_isEndpointOnCurrentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEndpointOnCurrentDevice");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToIgnoringCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToIgnoringCase:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFetchInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFetchInProgress");
}

id objc_msgSend_isFetchMasterKeyInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFetchMasterKeyInProgress");
}

id objc_msgSend_isFirstConnectionAfterSREnable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFirstConnectionAfterSREnable");
}

id objc_msgSend_isFirstUnlocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFirstUnlocked");
}

id objc_msgSend_isHSATrusted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHSATrusted");
}

id objc_msgSend_isInAnyTipi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInAnyTipi");
}

id objc_msgSend_isInEar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInEar");
}

id objc_msgSend_isIncoming(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIncoming");
}

id objc_msgSend_isMicIndicatorVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMicIndicatorVisible");
}

id objc_msgSend_isMonitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMonitoring");
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNearby");
}

id objc_msgSend_isNetworkUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNetworkUp");
}

id objc_msgSend_isOutgoing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOutgoing");
}

id objc_msgSend_isPTT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPTT");
}

id objc_msgSend_isReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReady");
}

id objc_msgSend_isRoutingActionInitialized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRoutingActionInitialized");
}

id objc_msgSend_isSystemProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSystemProvider");
}

id objc_msgSend_isTipiHealingV2Eligible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTipiHealingV2Eligible");
}

id objc_msgSend_isUTPConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUTPConnected");
}

id objc_msgSend_isWatchingBuddy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWatchingBuddy");
}

id objc_msgSend_isWriteMasterKeysInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWriteMasterKeysInProgress");
}

id objc_msgSend_keyLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyLength");
}

id objc_msgSend_keysOfEntriesPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysOfEntriesPassingTest:");
}

id objc_msgSend_languageCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageCode");
}

id objc_msgSend_lastBatteryLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastBatteryLevel");
}

id objc_msgSend_lastBatteryType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastBatteryType");
}

id objc_msgSend_lastConnectHost(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastConnectHost");
}

id objc_msgSend_lastConnectResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastConnectResult");
}

id objc_msgSend_lastConnectTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastConnectTicks");
}

id objc_msgSend_lastConnectionTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastConnectionTicks");
}

id objc_msgSend_lastEvalResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastEvalResult");
}

id objc_msgSend_lastEvalTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastEvalTicks");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_lastPlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPlay");
}

id objc_msgSend_lastSeenTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSeenTime");
}

id objc_msgSend_lastWxAdvTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastWxAdvTicks");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_lidClosed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lidClosed");
}

id objc_msgSend_listeningMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listeningMode");
}

id objc_msgSend_listeningModeConfigs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listeningModeConfigs");
}

id objc_msgSend_listeningModeOffAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listeningModeOffAllowed");
}

id objc_msgSend_localAudioScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localAudioScore");
}

id objc_msgSend_localDeviceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localDeviceName");
}

id objc_msgSend_localDeviceRandomAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localDeviceRandomAddress");
}

id objc_msgSend_localizations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizations");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedName");
}

id objc_msgSend_localizedStandardContainsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStandardContainsString:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringForKey_value_table_localization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:localization:");
}

id objc_msgSend_loginID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loginID");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_lowestBudBatteryInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowestBudBatteryInfo");
}

id objc_msgSend_magnetConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "magnetConnected");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainRunLoop");
}

id objc_msgSend_manateeAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manateeAvailable");
}

id objc_msgSend_manateeZoneAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manateeZoneAvailable");
}

id objc_msgSend_manateeZoneUpgraded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manateeZoneUpgraded");
}

id objc_msgSend_manualRouteChangeDetectionTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manualRouteChangeDetectionTimer");
}

id objc_msgSend_manualRouteChangeInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manualRouteChangeInProgress");
}

id objc_msgSend_manualRouteDestination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manualRouteDestination");
}

id objc_msgSend_manualRouteInputOutput(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manualRouteInputOutput");
}

id objc_msgSend_manualRouteUISource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manualRouteUISource");
}

id objc_msgSend_manuallyRouted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manuallyRouted");
}

id objc_msgSend_markLegacyNonManateeContainerMigrated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markLegacyNonManateeContainerMigrated");
}

id objc_msgSend_masterBlob(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "masterBlob");
}

id objc_msgSend_mediaPlaying(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaPlaying");
}

id objc_msgSend_messageIdentifiersWaitingForAck(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageIdentifiersWaitingForAck");
}

id objc_msgSend_microphoneMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "microphoneMode");
}

id objc_msgSend_minRSSIHeadset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minRSSIHeadset");
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mode");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "model");
}

id objc_msgSend_modelIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelIdentifier");
}

id objc_msgSend_modifiedByDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifiedByDevice");
}

id objc_msgSend_modifyAccessoryBlob_withRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyAccessoryBlob:withRetryCount:");
}

id objc_msgSend_modifyDevice_connectionPriorityDevices_timeoutSeconds_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyDevice:connectionPriorityDevices:timeoutSeconds:completionHandler:");
}

id objc_msgSend_modifyDevice_peerSourceDevice_peerSourceState_requestFlags_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyDevice:peerSourceDevice:peerSourceState:requestFlags:completionHandler:");
}

id objc_msgSend_modifyDevice_settings_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyDevice:settings:completion:");
}

id objc_msgSend_modifyKeyBlob_withRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyKeyBlob:withRetryCount:");
}

id objc_msgSend_modifyOperationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyOperationQueue");
}

id objc_msgSend_modifyOperationTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyOperationTimer");
}

id objc_msgSend_monitorBuddyStateWithAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorBuddyStateWithAction:");
}

id objc_msgSend_monitorFirstUnlockWithAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorFirstUnlockWithAction:");
}

id objc_msgSend_monitorWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorWithConfiguration:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_muteControlConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "muteControlConfig");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nearbyConnectedSourceCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyConnectedSourceCount");
}

id objc_msgSend_nearbyDeviceNoTipiScoreCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyDeviceNoTipiScoreCount");
}

id objc_msgSend_nearbyInEar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInEar");
}

id objc_msgSend_nearbyLastRouteHost(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyLastRouteHost");
}

id objc_msgSend_nearbyName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyName");
}

id objc_msgSend_nearbyOutOfCaseTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyOutOfCaseTime");
}

id objc_msgSend_nearbyPrevInEar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyPrevInEar");
}

id objc_msgSend_nearbyProductID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyProductID");
}

id objc_msgSend_nearbyStreamState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyStreamState");
}

id objc_msgSend_nearbyWxDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyWxDevice");
}

id objc_msgSend_nearbyiCloudSignIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyiCloudSignIn");
}

id objc_msgSend_needsSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsSetup");
}

id objc_msgSend_needsUpdateToAAController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsUpdateToAAController");
}

id objc_msgSend_needsUpdateToDeviceCloudRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsUpdateToDeviceCloudRecord");
}

id objc_msgSend_networkMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkMonitor");
}

id objc_msgSend_nickname(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nickname");
}

id objc_msgSend_nicknameDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nicknameDevice");
}

id objc_msgSend_noNearbyDeviceFoundCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noNearbyDeviceFoundCount");
}

id objc_msgSend_notificationFromRemoteNotificationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationFromRemoteNotificationDictionary:");
}

id objc_msgSend_notificationWithRequest_date_sourceIdentifier_intentIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationWithRequest:date:sourceIdentifier:intentIdentifiers:");
}

id objc_msgSend_nsuuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nsuuid");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_onDemandCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDemandCategory");
}

id objc_msgSend_oneSourceLastRouteHost(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "oneSourceLastRouteHost");
}

id objc_msgSend_opaqueSessionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "opaqueSessionID");
}

id objc_msgSend_openRadarforAudioQuality(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openRadarforAudioQuality");
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operatingSystemVersion");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "options");
}

id objc_msgSend_otherTipiAudioCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiAudioCategory");
}

id objc_msgSend_otherTipiDeviceAudioScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDeviceAudioScore");
}

id objc_msgSend_otherTipiDeviceBTAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDeviceBTAddress");
}

id objc_msgSend_otherTipiDeviceBTName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDeviceBTName");
}

id objc_msgSend_otherTipiDeviceIdleTick(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDeviceIdleTick");
}

id objc_msgSend_otherTipiDeviceIsWatch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDeviceIsWatch");
}

id objc_msgSend_otherTipiDeviceLastPlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDeviceLastPlay");
}

id objc_msgSend_otherTipiDeviceMajorBuildVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDeviceMajorBuildVersion");
}

id objc_msgSend_otherTipiDeviceMinorBuildVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDeviceMinorBuildVersion");
}

id objc_msgSend_otherTipiDevicePlayingApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDevicePlayingApp");
}

id objc_msgSend_otherTipiDeviceVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiDeviceVersion");
}

id objc_msgSend_otherTipiManuallyRouteTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherTipiManuallyRouteTicks");
}

id objc_msgSend_outOfCaseTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outOfCaseTime");
}

id objc_msgSend_outputVoice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputVoice");
}

id objc_msgSend_overrideScreenOff(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideScreenOff");
}

id objc_msgSend_pairSetupWithFlags_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairSetupWithFlags:completion:");
}

id objc_msgSend_paired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paired");
}

id objc_msgSend_pairingDeriveKeyForIdentifier_keyLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingDeriveKeyForIdentifier:keyLength:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pauseErrorReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseErrorReason");
}

id objc_msgSend_peer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peer");
}

id objc_msgSend_performRequestWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRequestWithCompletion:");
}

id objc_msgSend_pipePendingRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pipePendingRequest");
}

id objc_msgSend_pipeStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pipeStartTime");
}

id objc_msgSend_placementMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placementMode");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_predictiveRouteTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predictiveRouteTicks");
}

id objc_msgSend_preemptiveBannerShown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preemptiveBannerShown");
}

id objc_msgSend_preferredLocalizationsFromArray_forPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredLocalizationsFromArray:forPreferences:");
}

id objc_msgSend_primaryAppleIDIsHSA2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryAppleIDIsHSA2");
}

id objc_msgSend_primaryInCase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryInCase");
}

id objc_msgSend_primaryInEar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryInEar");
}

id objc_msgSend_primaryPlacement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryPlacement");
}

id objc_msgSend_printDebug(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printDebug");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priority");
}

id objc_msgSend_privateCloudDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateCloudDatabase");
}

id objc_msgSend_proactiveRoutingBackoff(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proactiveRoutingBackoff");
}

id objc_msgSend_proactiveRoutingTrigger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proactiveRoutingTrigger");
}

id objc_msgSend_proactiveRoutingWxRSSI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proactiveRoutingWxRSSI");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processingIDSPush(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingIDSPush");
}

id objc_msgSend_productBuildVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productBuildVersion");
}

id objc_msgSend_productID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productID");
}

id objc_msgSend_productIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productIdentifier");
}

id objc_msgSend_productName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productName");
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productVersion");
}

id objc_msgSend_progressStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressStarted");
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provider");
}

id objc_msgSend_publicAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publicAddress");
}

id objc_msgSend_publicAddressForIDSDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publicAddressForIDSDevice:");
}

id objc_msgSend_pushEnable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushEnable");
}

id objc_msgSend_pushQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushQueue");
}

id objc_msgSend_pushTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushTimer");
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_readUserPreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readUserPreference:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reason");
}

id objc_msgSend_reconnectionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconnectionState");
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordID");
}

id objc_msgSend_recordName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordName");
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordType");
}

id objc_msgSend_recordZoneAccessoryDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordZoneAccessoryDatabase");
}

id objc_msgSend_recordZoneBlob(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordZoneBlob");
}

id objc_msgSend_recordZoneID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordZoneID");
}

id objc_msgSend_registerRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRequestID:options:handler:");
}

id objc_msgSend_reinitAfterBuddy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reinitAfterBuddy");
}

id objc_msgSend_relinquishAudioRoute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relinquishAudioRoute");
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxy");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remotePID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remotePID");
}

id objc_msgSend_remoteUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteUID");
}

id objc_msgSend_removeAAProxCardsInfoWithBluetoothAddress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAAProxCardsInfoWithBluetoothAddress:completion:");
}

id objc_msgSend_removeAllActions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllActions");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeConnection:");
}

id objc_msgSend_removeDeviceMagicSettingsWithBluetoothAddress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeviceMagicSettingsWithBluetoothAddress:completion:");
}

id objc_msgSend_removeDeviceNickname(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeviceNickname");
}

id objc_msgSend_removeDeviceSupportInformationWithBluetoothAddress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeviceSupportInformationWithBluetoothAddress:completion:");
}

id objc_msgSend_removeDeviceWithBluetoothAddress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeviceWithBluetoothAddress:completion:");
}

id objc_msgSend_removeDeviceWithRecord_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeviceWithRecord:completion:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeSoundProfileRecordWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSoundProfileRecordWithCompletion:");
}

id objc_msgSend_removeWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeWithDelegate:");
}

id objc_msgSend_removeuserPreference_sync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeuserPreference:sync:");
}

id objc_msgSend_reportDeviceFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportDeviceFound:");
}

id objc_msgSend_reportDeviceLost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportDeviceLost:");
}

id objc_msgSend_reportHeadGestureDetected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportHeadGestureDetected:");
}

id objc_msgSend_reportTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportTime");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "request");
}

id objc_msgSend_requestWithIdentifier_content_trigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithIdentifier:content:trigger:");
}

id objc_msgSend_requestedKeyTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestedKeyTypes");
}

id objc_msgSend_resetAccessoryZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetAccessoryZone:");
}

id objc_msgSend_resetCachedData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCachedData");
}

id objc_msgSend_resetCachedDataWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCachedDataWithCompletion:");
}

id objc_msgSend_resetCloudContainerManateeIdentityLost(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCloudContainerManateeIdentityLost");
}

id objc_msgSend_resetCloudDataWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCloudDataWithCompletion:");
}

id objc_msgSend_resetOldZones(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetOldZones");
}

id objc_msgSend_responseHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseHandler");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_retryIDSSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryIDSSetup");
}

id objc_msgSend_reverseRouteReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseRouteReason");
}

id objc_msgSend_roleWithDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roleWithDevice:");
}

id objc_msgSend_routeCheckHijackTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routeCheckHijackTimer");
}

id objc_msgSend_routeCheckInUseBannerTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routeCheckInUseBannerTimer");
}

id objc_msgSend_routeCheckOnDemandTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routeCheckOnDemandTimer");
}

id objc_msgSend_routeCheckOwnLostTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routeCheckOwnLostTimer");
}

id objc_msgSend_routed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routed");
}

id objc_msgSend_routingAction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routingAction");
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rssi");
}

id objc_msgSend_rssiEstimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rssiEstimate");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "run");
}

id objc_msgSend_saveRecord_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRecord:completionHandler:");
}

id objc_msgSend_saveRecordZone_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRecordZone:completionHandler:");
}

id objc_msgSend_saveSubscription_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveSubscription:completionHandler:");
}

id objc_msgSend_scanRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanRate");
}

id objc_msgSend_scheduleSendBarrierBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleSendBarrierBlock:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:repeats:block:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_screenLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenLocked");
}

id objc_msgSend_screenOn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenOn");
}

id objc_msgSend_secondaryInCase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryInCase");
}

id objc_msgSend_secondaryInEar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryInEar");
}

id objc_msgSend_secondaryPlacement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryPlacement");
}

id objc_msgSend_selectiveSpeechListeningConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectiveSpeechListeningConfig");
}

id objc_msgSend_sendCloudKitMsg_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloudKitMsg:args:");
}

id objc_msgSend_sendCloudKitMsg_args_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloudKitMsg:args:withReply:");
}

id objc_msgSend_sendCloudKitMsg_argsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloudKitMsg:argsObject:");
}

id objc_msgSend_sendCloudKitPush(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloudKitPush");
}

id objc_msgSend_sendCloudPairingResponseMessage_toDevice_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloudPairingResponseMessage:toDevice:version:");
}

id objc_msgSend_sendConversationDetectMessage_destinationIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConversationDetectMessage:destinationIdentifier:completionHandler:");
}

id objc_msgSend_sendDeviceConfig_destinationIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendDeviceConfig:destinationIdentifier:completionHandler:");
}

id objc_msgSend_sendDeviceConfig_identifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendDeviceConfig:identifier:completion:");
}

id objc_msgSend_sendErrorMessageToDevice_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendErrorMessageToDevice:reason:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendGetTipiTableMessageToDestinationIdentifier_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGetTipiTableMessageToDestinationIdentifier:completionHandler:");
}

id objc_msgSend_sendInitialPairingIDSMessage_forDevice_withRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendInitialPairingIDSMessage:forDevice:withRole:");
}

id objc_msgSend_sendMessage_fromAccount_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:fromAccount:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendMsg_args_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMsg:args:");
}

id objc_msgSend_sendRePairCloudPairingMessage_toDevice_bundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRePairCloudPairingMessage:toDevice:bundleID:");
}

id objc_msgSend_sendRePairRequest_forBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRePairRequest:forBundleID:");
}

id objc_msgSend_sendRelayMessageType_messageData_conduitDevice_destinationDevice_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRelayMessageType:messageData:conduitDevice:destinationDevice:completionHandler:");
}

id objc_msgSend_sendRequestID_options_request_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestID:options:request:responseHandler:");
}

id objc_msgSend_sendRequestID_request_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestID:request:options:responseHandler:");
}

id objc_msgSend_sendSmartRoutingInformation_device_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSmartRoutingInformation:device:completionHandler:");
}

id objc_msgSend_senderIDS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "senderIDS");
}

id objc_msgSend_serverConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverConnection");
}

id objc_msgSend_serverPreferredPushEnvironmentWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverPreferredPushEnvironmentWithCompletionHandler:");
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "service");
}

id objc_msgSend_service_activeAccountsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "service:activeAccountsChanged:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setAaDeviceDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAaDeviceDelegate:");
}

id objc_msgSend_setAcceptReplyPlayPauseConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptReplyPlayPauseConfig:");
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccountAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountAvailable:");
}

id objc_msgSend_setAclPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAclPriority:");
}

id objc_msgSend_setAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAction:");
}

id objc_msgSend_setActionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionHandler:");
}

id objc_msgSend_setActive_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:error:");
}

id objc_msgSend_setActive_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:withOptions:error:");
}

id objc_msgSend_setActivePlayingApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivePlayingApp:");
}

id objc_msgSend_setActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivity:");
}

id objc_msgSend_setAdaptiveVolumeConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdaptiveVolumeConfig:");
}

id objc_msgSend_setAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAddress:");
}

id objc_msgSend_setAdvertiseRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdvertiseRate:");
}

id objc_msgSend_setAggregate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAggregate:");
}

id objc_msgSend_setAllowsAutoRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsAutoRoute:");
}

id objc_msgSend_setAssociatedDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedDevices:");
}

id objc_msgSend_setAttribute_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:error:");
}

id objc_msgSend_setAudioDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioDestination:");
}

id objc_msgSend_setAudioFeedbackConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioFeedbackConfig:");
}

id objc_msgSend_setAudioRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioRoute:");
}

id objc_msgSend_setAudioRouteHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioRouteHidden:");
}

id objc_msgSend_setAudioRoutingClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioRoutingClientID:");
}

id objc_msgSend_setAudioRoutingRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioRoutingRequest:");
}

id objc_msgSend_setAudioRoutingResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioRoutingResponse:");
}

id objc_msgSend_setAudioRoutingScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioRoutingScore:");
}

id objc_msgSend_setAudioRoutingScore_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioRoutingScore:completion:");
}

id objc_msgSend_setAudioSessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioSessionID:");
}

id objc_msgSend_setAudioState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioState:");
}

id objc_msgSend_setAuthenticationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationMethod:");
}

id objc_msgSend_setAutoANCStrength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoANCStrength:");
}

id objc_msgSend_setBannerAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBannerAction:");
}

id objc_msgSend_setBannerAppID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBannerAppID:");
}

id objc_msgSend_setBannerTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBannerTrigger:");
}

id objc_msgSend_setBannerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBannerType:");
}

id objc_msgSend_setBatteryLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatteryLeft:");
}

id objc_msgSend_setBatteryLevelInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatteryLevelInfo:");
}

id objc_msgSend_setBatteryMain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatteryMain:");
}

id objc_msgSend_setBatteryRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatteryRight:");
}

id objc_msgSend_setBleClientUseCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleClientUseCase:");
}

id objc_msgSend_setBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlock:");
}

id objc_msgSend_setBluetoothIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBluetoothIdentifier:");
}

id objc_msgSend_setBluetoothState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBluetoothState:");
}

id objc_msgSend_setBluetoothStateChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBluetoothStateChangedHandler:");
}

id objc_msgSend_setBodyArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBodyArguments:");
}

id objc_msgSend_setBodyKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBodyKey:");
}

id objc_msgSend_setBtXID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBtXID:");
}

id objc_msgSend_setBuddyStateWatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBuddyStateWatcher:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setCDTunings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCDTunings:");
}

id objc_msgSend_setCPAddressMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCPAddressMapping:");
}

id objc_msgSend_setCallChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallChangedHandler:");
}

id objc_msgSend_setCallConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallConnected:");
}

id objc_msgSend_setCallIncomingUnconnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallIncomingUnconnected:");
}

id objc_msgSend_setCallStartTicks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallStartTicks:");
}

id objc_msgSend_setCallbackQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallbackQueue:");
}

id objc_msgSend_setCategory_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:withOptions:error:");
}

id objc_msgSend_setCategoryID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryID:");
}

id objc_msgSend_setCategoryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryIdentifier:");
}

id objc_msgSend_setCdSignalAudioInterrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCdSignalAudioInterrupted:");
}

id objc_msgSend_setCenterContentItemsIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenterContentItemsIcon:");
}

id objc_msgSend_setCenterContentItemsText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenterContentItemsText:");
}

id objc_msgSend_setCenterContentText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenterContentText:");
}

id objc_msgSend_setChangeFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeFlags:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClickHoldModeLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClickHoldModeLeft:");
}

id objc_msgSend_setClickHoldModeRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClickHoldModeRight:");
}

id objc_msgSend_setClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientID:");
}

id objc_msgSend_setClientQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientQueue:");
}

id objc_msgSend_setCloudIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudIdentifier:");
}

id objc_msgSend_setCloudKitConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitConnection:");
}

id objc_msgSend_setCloudPairingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudPairingQueue:");
}

id objc_msgSend_setCloudSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudSubscription:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionHandler:");
}

id objc_msgSend_setConduitDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConduitDeviceID:");
}

id objc_msgSend_setConduitMessageTicks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConduitMessageTicks:");
}

id objc_msgSend_setConduitMessageTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConduitMessageTimer:");
}

id objc_msgSend_setConferencingCallSets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConferencingCallSets:");
}

id objc_msgSend_setConfigRequestHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigRequestHandler:");
}

id objc_msgSend_setConnectOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectOnly:");
}

id objc_msgSend_setConnectRequestHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectRequestHandler:");
}

id objc_msgSend_setConnectTimeoutSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectTimeoutSeconds:");
}

id objc_msgSend_setConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnected:");
}

id objc_msgSend_setConnectionFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionFlags:");
}

id objc_msgSend_setControlFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlFlags:");
}

id objc_msgSend_setConversationDetectConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConversationDetectConfig:");
}

id objc_msgSend_setConversationDetectMessageHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConversationDetectMessageHandler:");
}

id objc_msgSend_setConversationDetectSignal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConversationDetectSignal:");
}

id objc_msgSend_setCrownRotationDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCrownRotationDirection:");
}

id objc_msgSend_setCurrentCDDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCDDeviceIdentifier:");
}

id objc_msgSend_setDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaemon:");
}

id objc_msgSend_setDarwinDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDarwinDevice:");
}

id objc_msgSend_setDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDate:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDeclineDismissSkipConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeclineDismissSkipConfig:");
}

id objc_msgSend_setDefaultConfigurationsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultConfigurationsIfNeeded");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDestinationDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationDevice:");
}

id objc_msgSend_setDetectedHeadGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectedHeadGesture:");
}

id objc_msgSend_setDeviceActionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceActionType:");
}

id objc_msgSend_setDeviceAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceAddress:");
}

id objc_msgSend_setDeviceChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceChangedHandler:");
}

id objc_msgSend_setDeviceConnectedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceConnectedHandler:");
}

id objc_msgSend_setDeviceDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceDelegate:");
}

id objc_msgSend_setDeviceDisconnectedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceDisconnectedHandler:");
}

id objc_msgSend_setDeviceFlagsMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFlagsMask:");
}

id objc_msgSend_setDeviceFlagsValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFlagsValue:");
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFoundHandler:");
}

id objc_msgSend_setDeviceInfoChangeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceInfoChangeHandler:");
}

id objc_msgSend_setDeviceLostHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceLostHandler:");
}

id objc_msgSend_setDeviceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceManager:");
}

id objc_msgSend_setDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceName:");
}

id objc_msgSend_setDeviceVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceVersion:");
}

id objc_msgSend_setDirectoryURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectoryURL:");
}

id objc_msgSend_setDisableCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableCount:");
}

id objc_msgSend_setDiscoveryFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryFlags:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDispatchSourceAbort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDispatchSourceAbort:");
}

id objc_msgSend_setDispatchSourceChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDispatchSourceChange:");
}

id objc_msgSend_setDoubleTapActionLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDoubleTapActionLeft:");
}

id objc_msgSend_setDoubleTapActionRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDoubleTapActionRight:");
}

id objc_msgSend_setDuckToLevelScalar_unduckToLevelScalar_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckToLevelScalar:unduckToLevelScalar:error:");
}

id objc_msgSend_setDuckingFadeOutDuration_fadeInDuration_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckingFadeOutDuration:fadeInDuration:error:");
}

id objc_msgSend_setEnableAudioFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableAudioFeedback:");
}

id objc_msgSend_setEnableCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableCount:");
}

id objc_msgSend_setEnableHeartRateMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableHeartRateMonitor:");
}

id objc_msgSend_setEnableSiriMultitone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableSiriMultitone:");
}

id objc_msgSend_setEndCallConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndCallConfig:");
}

id objc_msgSend_setErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorHandler:");
}

id objc_msgSend_setEvalPreemptiveBannerResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvalPreemptiveBannerResult:");
}

id objc_msgSend_setEvalResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvalResult:");
}

id objc_msgSend_setEvalWxMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvalWxMap:");
}

id objc_msgSend_setEvaluator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvaluator:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFalseRouteCheckForceDisconnectTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFalseRouteCheckForceDisconnectTimer:");
}

id objc_msgSend_setFalseRouteCheckHijackAwayTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFalseRouteCheckHijackAwayTimer:");
}

id objc_msgSend_setFalseRouteCheckHijackTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFalseRouteCheckHijackTimer:");
}

id objc_msgSend_setFalseRouteCheckOnDemandTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFalseRouteCheckOnDemandTimer:");
}

id objc_msgSend_setFalseRouteCheckOwnLostTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFalseRouteCheckOwnLostTimer:");
}

id objc_msgSend_setFalseRouteCheckProactiveRoutingTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFalseRouteCheckProactiveRoutingTimer:");
}

id objc_msgSend_setFalseRouteCheckReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFalseRouteCheckReason:");
}

id objc_msgSend_setFd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFd:");
}

id objc_msgSend_setFence_withRadius_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFence:withRadius:withCompletion:");
}

id objc_msgSend_setFirstPipeMessageRTT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstPipeMessageRTT:");
}

id objc_msgSend_setFirstPreemptiveBannerShown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstPreemptiveBannerShown:");
}

id objc_msgSend_setFirstUnlockHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstUnlockHandler:");
}

id objc_msgSend_setFirstUnlockStateWatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstUnlockStateWatcher:");
}

id objc_msgSend_setFixedPIN_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFixedPIN:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setGracePeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGracePeriod:");
}

id objc_msgSend_setGuestAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGuestAddress:");
}

id objc_msgSend_setGuestKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGuestKey:");
}

id objc_msgSend_setGuestMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGuestMode:");
}

id objc_msgSend_setGuestPermanent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGuestPermanent:");
}

id objc_msgSend_setHeadGestureToggle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeadGestureToggle:");
}

id objc_msgSend_setHeadGestureUpdateFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeadGestureUpdateFlags:");
}

id objc_msgSend_setHijackActiveRemoteScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackActiveRemoteScore:");
}

id objc_msgSend_setHijackAmbientTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackAmbientTick:");
}

id objc_msgSend_setHijackAnswer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackAnswer:");
}

id objc_msgSend_setHijackAwayLocalScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackAwayLocalScore:");
}

id objc_msgSend_setHijackAwayRemoteScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackAwayRemoteScore:");
}

id objc_msgSend_setHijackCallTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackCallTick:");
}

id objc_msgSend_setHijackContinuousTimeoutCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackContinuousTimeoutCount:");
}

id objc_msgSend_setHijackInputTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackInputTick:");
}

id objc_msgSend_setHijackMediaTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackMediaTick:");
}

id objc_msgSend_setHijackPlayingApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackPlayingApp:");
}

id objc_msgSend_setHijackPlayingCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackPlayingCategory:");
}

id objc_msgSend_setHijackRelaySent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackRelaySent:");
}

id objc_msgSend_setHijackRoundTripTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackRoundTripTime:");
}

id objc_msgSend_setHijackScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackScore:");
}

id objc_msgSend_setHijackVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHijackVersion:");
}

id objc_msgSend_setIcloudSignedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIcloudSignedIn:");
}

id objc_msgSend_setIconAppIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconAppIdentifier:");
}

id objc_msgSend_setIconName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconName:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdleTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdleTime:");
}

id objc_msgSend_setIdsDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsDeviceID:");
}

id objc_msgSend_setIgnoreBTRestart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreBTRestart:");
}

id objc_msgSend_setIgnoreManualConnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreManualConnect:");
}

id objc_msgSend_setInEar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInEar:");
}

id objc_msgSend_setInEarDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInEarDisabled:");
}

id objc_msgSend_setInputMuted_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputMuted:error:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsAccountActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAccountActive:");
}

id objc_msgSend_setIsConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:");
}

id objc_msgSend_setIsFetchInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFetchInProgress:");
}

id objc_msgSend_setIsFetchMasterKeyInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFetchMasterKeyInProgress:");
}

id objc_msgSend_setIsFirstConnectionAfterSREnable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstConnectionAfterSREnable:");
}

id objc_msgSend_setIsInEar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInEar:");
}

id objc_msgSend_setIsReady_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsReady:");
}

id objc_msgSend_setIsTipiHealingV2Eligible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsTipiHealingV2Eligible:");
}

id objc_msgSend_setIsUTPConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUTPConnected:");
}

id objc_msgSend_setIsWatchingBuddy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsWatchingBuddy:");
}

id objc_msgSend_setIsWriteMasterKeysInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsWriteMasterKeysInProgress:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLastBatteryLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBatteryLevel:");
}

id objc_msgSend_setLastBatteryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBatteryType:");
}

id objc_msgSend_setLastConnectHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConnectHost:");
}

id objc_msgSend_setLastConnectResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConnectResult:");
}

id objc_msgSend_setLastConnectTicks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConnectTicks:");
}

id objc_msgSend_setLastConnectTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConnectTime:");
}

id objc_msgSend_setLastConnectionTicks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConnectionTicks:");
}

id objc_msgSend_setLastEvalResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastEvalResult:");
}

id objc_msgSend_setLastEvalTicks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastEvalTicks:");
}

id objc_msgSend_setLastPlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastPlay:");
}

id objc_msgSend_setLastSeenTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSeenTime:");
}

id objc_msgSend_setLastWxAdvTicks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastWxAdvTicks:");
}

id objc_msgSend_setLeadingAccessoryImageName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeadingAccessoryImageName:");
}

id objc_msgSend_setLeeway_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeeway:");
}

id objc_msgSend_setLidClosed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLidClosed:");
}

id objc_msgSend_setListeningMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListeningMode:");
}

id objc_msgSend_setListeningModeConfigs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListeningModeConfigs:");
}

id objc_msgSend_setListeningModeOffAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListeningModeOffAllowed:");
}

id objc_msgSend_setLocalAudioScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalAudioScore:");
}

id objc_msgSend_setLocalDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalDeviceName:");
}

id objc_msgSend_setLocalDeviceRandomAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalDeviceRandomAddress:");
}

id objc_msgSend_setLocalizedPromptTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedPromptTitle:");
}

id objc_msgSend_setLowBatteryLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLowBatteryLevel:");
}

id objc_msgSend_setLowestBudBatteryInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLowestBudBatteryInfo:");
}

id objc_msgSend_setMXSessionProperty_value_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMXSessionProperty:value:error:");
}

id objc_msgSend_setMagnetConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMagnetConnected:");
}

id objc_msgSend_setManualRouteChangeDetectionTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManualRouteChangeDetectionTimer:");
}

id objc_msgSend_setManualRouteDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManualRouteDestination:");
}

id objc_msgSend_setManualRouteInputOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManualRouteInputOutput:");
}

id objc_msgSend_setMasterBlob_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMasterBlob:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaxDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxDelay:");
}

id objc_msgSend_setMaximumFractionDigits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumFractionDigits:");
}

id objc_msgSend_setMediaPlaying_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMediaPlaying:");
}

id objc_msgSend_setMessageIdentifiersWaitingForAck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageIdentifiersWaitingForAck:");
}

id objc_msgSend_setMicrophoneMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMicrophoneMode:");
}

id objc_msgSend_setMinDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinDelay:");
}

id objc_msgSend_setMinRSSIHeadset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinRSSIHeadset:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModel:");
}

id objc_msgSend_setModifyOperationTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyOperationTimer:");
}

id objc_msgSend_setModifyRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordZonesCompletionBlock:");
}

id objc_msgSend_setModifyRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordsCompletionBlock:");
}

id objc_msgSend_setMuteAction_auditToken_bundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMuteAction:auditToken:bundleIdentifier:");
}

id objc_msgSend_setMuteAudioFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMuteAudioFeedback:");
}

id objc_msgSend_setMuteControlConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMuteControlConfig:");
}

id objc_msgSend_setNSUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNSUUID:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNearbyDeviceNoTipiScoreCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyDeviceNoTipiScoreCount:");
}

id objc_msgSend_setNeedsSetup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsSetup:");
}

id objc_msgSend_setNetworkMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkMonitor:");
}

id objc_msgSend_setNickname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNickname:");
}

id objc_msgSend_setNoNearbyDeviceFoundCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNoNearbyDeviceFoundCount:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOnDemandCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnDemandCategory:");
}

id objc_msgSend_setOneSourceLastRouteHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOneSourceLastRouteHost:");
}

id objc_msgSend_setOnlyDiscoversBluetoothDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnlyDiscoversBluetoothDevices:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOtherTipiDeviceAudioScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOtherTipiDeviceAudioScore:");
}

id objc_msgSend_setOtherTipiDeviceIdleTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOtherTipiDeviceIdleTick:");
}

id objc_msgSend_setOtherTipiDeviceLastPlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOtherTipiDeviceLastPlay:");
}

id objc_msgSend_setOutOfCaseTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutOfCaseTime:");
}

id objc_msgSend_setOverrideScreenOff_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideScreenOff:");
}

id objc_msgSend_setPairSetupDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairSetupDisabled:");
}

id objc_msgSend_setPaired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPaired:");
}

id objc_msgSend_setPauseErrorReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPauseErrorReason:");
}

id objc_msgSend_setPeerDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerDevice:");
}

id objc_msgSend_setPerRecordCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordCompletionBlock:");
}

id objc_msgSend_setPipePendingRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPipePendingRequest:");
}

id objc_msgSend_setPipeStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPipeStartTime:");
}

id objc_msgSend_setPlacementMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlacementMode:");
}

id objc_msgSend_setPreemptiveBannerShown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreemptiveBannerShown:");
}

id objc_msgSend_setPrimaryAppleIDChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryAppleIDChangedHandler:");
}

id objc_msgSend_setPrimaryInCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryInCase:");
}

id objc_msgSend_setPrimaryInEar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryInEar:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProactiveRoutingBackoff_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProactiveRoutingBackoff:");
}

id objc_msgSend_setProactiveRoutingTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProactiveRoutingTrigger:");
}

id objc_msgSend_setProactiveRoutingWxRSSI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProactiveRoutingWxRSSI:");
}

id objc_msgSend_setProcessingIDSPush_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingIDSPush:");
}

id objc_msgSend_setProductID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductID:");
}

id objc_msgSend_setProgressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressHandler:");
}

id objc_msgSend_setProgressStarted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressStarted:");
}

id objc_msgSend_setPromptStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromptStyle:");
}

id objc_msgSend_setPublicAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicAddress:");
}

id objc_msgSend_setPurpose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurpose:");
}

id objc_msgSend_setPushQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushQueue:");
}

id objc_msgSend_setPushTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushTimer:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setReconnectionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReconnectionState:");
}

id objc_msgSend_setRelayMessageHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelayMessageHandler:");
}

id objc_msgSend_setRelinquishAudioRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelinquishAudioRoute:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemotePID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemotePID:");
}

id objc_msgSend_setRemoteUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteUID:");
}

id objc_msgSend_setReportTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReportTime:");
}

id objc_msgSend_setRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequest:");
}

id objc_msgSend_setRequestPartGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestPartGestures:");
}

id objc_msgSend_setRequestedKeyTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestedKeyTypes:");
}

id objc_msgSend_setResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseHandler:");
}

id objc_msgSend_setReverseRouteReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReverseRouteReason:");
}

id objc_msgSend_setRouteCheckHijackTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRouteCheckHijackTimer:");
}

id objc_msgSend_setRouteCheckInUseBannerTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRouteCheckInUseBannerTimer:");
}

id objc_msgSend_setRouteCheckOnDemandTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRouteCheckOnDemandTimer:");
}

id objc_msgSend_setRouteCheckOwnLostTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRouteCheckOwnLostTimer:");
}

id objc_msgSend_setRssiThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRssiThreshold:");
}

id objc_msgSend_setSRConnectedSetCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSRConnectedSetCount:");
}

id objc_msgSend_setScanFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanFlags:");
}

id objc_msgSend_setScanRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanRate:");
}

id objc_msgSend_setScreenLockedChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenLockedChangedHandler:");
}

id objc_msgSend_setScreenOnChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenOnChangedHandler:");
}

id objc_msgSend_setSecondaryInCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryInCase:");
}

id objc_msgSend_setSecondaryInEar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryInEar:");
}

id objc_msgSend_setSelectiveSpeechListeningConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectiveSpeechListeningConfig:");
}

id objc_msgSend_setSenderIDS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSenderIDS:");
}

id objc_msgSend_setServerConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerConnection:");
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setService:");
}

id objc_msgSend_setServiceFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceFlags:");
}

id objc_msgSend_setServiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceIdentifier:");
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceType:");
}

id objc_msgSend_setSessionEndedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionEndedHandler:");
}

id objc_msgSend_setSessionFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionFlags:");
}

id objc_msgSend_setSessionStartedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionStartedHandler:");
}

id objc_msgSend_setSetupSupportsTipiv2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSetupSupportsTipiv2:");
}

id objc_msgSend_setShouldPauseFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPauseFetch:");
}

id objc_msgSend_setSigningIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSigningIdentity:");
}

id objc_msgSend_setSiriMultitoneEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSiriMultitoneEnabled:");
}

id objc_msgSend_setSleepWakeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSleepWakeHandler:");
}

id objc_msgSend_setSmartRoutingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmartRoutingMode:");
}

id objc_msgSend_setSmartRoutingStateFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmartRoutingStateFlags:");
}

id objc_msgSend_setSnapshotLocalDeviceAudioScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotLocalDeviceAudioScore:");
}

id objc_msgSend_setSnapshotLocalNumOfApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotLocalNumOfApps:");
}

id objc_msgSend_setSnapshotLocalPlayingApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotLocalPlayingApp:");
}

id objc_msgSend_setSnapshotLocalRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotLocalRoute:");
}

id objc_msgSend_setSnapshotRemoteDeviceAudioScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSnapshotRemoteDeviceAudioScore:");
}

id objc_msgSend_setSourceCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceCount:");
}

id objc_msgSend_setSpatialAudioAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpatialAudioAllowed:");
}

id objc_msgSend_setSpatialAudioMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpatialAudioMode:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStatusMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusMonitor:");
}

id objc_msgSend_setSubtitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitle:");
}

id objc_msgSend_setSubtitleArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitleArguments:");
}

id objc_msgSend_setSubtitleKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitleKey:");
}

id objc_msgSend_setSupportsVirtualAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsVirtualAddress:");
}

id objc_msgSend_setTUCallMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTUCallMap:");
}

id objc_msgSend_setTargetFilename_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetFilename:");
}

id objc_msgSend_setThV2Ticks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThV2Ticks:");
}

id objc_msgSend_setThV2WxCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThV2WxCount:");
}

id objc_msgSend_setTimeoutSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutSeconds:");
}

id objc_msgSend_setTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimer:");
}

id objc_msgSend_setTipiChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTipiChangedHandler:");
}

id objc_msgSend_setTipiHealingBackoff_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTipiHealingBackoff:");
}

id objc_msgSend_setTipitableUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTipitableUpdated:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTitleArguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleArguments:");
}

id objc_msgSend_setTitleKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleKey:");
}

id objc_msgSend_setTotalCloudDeviceCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalCloudDeviceCount:");
}

id objc_msgSend_setTrailingAccessoryText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrailingAccessoryText:");
}

id objc_msgSend_setTransitionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitionHandler:");
}

id objc_msgSend_setTriggered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggered:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUnpairedIDSCloudIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnpairedIDSCloudIdentifiers:");
}

id objc_msgSend_setUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUp");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserNotInContacts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserNotInContacts:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setWantsNotificationResponsesDelivered(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsNotificationResponsesDelivered");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWxAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWxAddress:");
}

id objc_msgSend_setWxDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWxDevice:");
}

id objc_msgSend_setWxInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWxInfo:");
}

id objc_msgSend_setWxStreamState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWxStreamState:");
}

id objc_msgSend_setWxTipiScore1_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWxTipiScore1:");
}

id objc_msgSend_setWxTipiScore2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWxTipiScore2:");
}

id objc_msgSend_setXpcCnx_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcCnx:");
}

id objc_msgSend_setZeroSourceLastRouteHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZeroSourceLastRouteHost:");
}

id objc_msgSend_setupSubscriptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSubscriptions");
}

id objc_msgSend_setupSupportsTipiv2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSupportsTipiv2");
}

id objc_msgSend_setuserPreference_value_sync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setuserPreference:value:sync:");
}

id objc_msgSend_sfSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sfSession");
}

id objc_msgSend_shareAudioProgressEvent_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareAudioProgressEvent:info:");
}

id objc_msgSend_shareAudioSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareAudioSession");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shared");
}

id objc_msgSend_sharedAADeviceManagerDaemon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedAADeviceManagerDaemon");
}

id objc_msgSend_sharedAAServicesDaemon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedAAServicesDaemon");
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedAVSystemController");
}

id objc_msgSend_sharedBTIdentityDaemon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedBTIdentityDaemon");
}

id objc_msgSend_sharedBTServicesDaemon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedBTServicesDaemon");
}

id objc_msgSend_sharedBTSmartRoutingDaemon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedBTSmartRoutingDaemon");
}

id objc_msgSend_sharedCDSessionManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedCDSessionManager");
}

id objc_msgSend_sharedDefaultEvaluator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedDefaultEvaluator");
}

id objc_msgSend_sharedHMServiceDaemon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedHMServiceDaemon");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedPreferences");
}

id objc_msgSend_shouldClientWithAudioScore_hijackRoute_hijackDeniedReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldClientWithAudioScore:hijackRoute:hijackDeniedReason:");
}

id objc_msgSend_shouldPauseFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPauseFetch");
}

id objc_msgSend_shouldUpgradeToManatee(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpgradeToManatee");
}

id objc_msgSend_showCrashBannerIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showCrashBannerIfNeeded:");
}

id objc_msgSend_signingIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signingIdentity");
}

id objc_msgSend_singleton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "singleton");
}

id objc_msgSend_siriMultitoneCapability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "siriMultitoneCapability");
}

id objc_msgSend_smartRoutingMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smartRoutingMode");
}

id objc_msgSend_smartRoutingStateFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smartRoutingStateFlags");
}

id objc_msgSend_smartRoutingStateUpdated_ForDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smartRoutingStateUpdated:ForDeviceIdentifier:");
}

id objc_msgSend_smoothedRSSI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smoothedRSSI");
}

id objc_msgSend_snapshotLocalDeviceAudioScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotLocalDeviceAudioScore");
}

id objc_msgSend_snapshotLocalNumOfApps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotLocalNumOfApps");
}

id objc_msgSend_snapshotLocalPlayingApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotLocalPlayingApp");
}

id objc_msgSend_snapshotLocalRoute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotLocalRoute");
}

id objc_msgSend_snapshotRemoteDeviceAudioScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotRemoteDeviceAudioScore");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "source");
}

id objc_msgSend_sourceCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceCount");
}

id objc_msgSend_spatialAudioAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spatialAudioAllowed");
}

id objc_msgSend_spatialAudioMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spatialAudioMode");
}

id objc_msgSend_speakText_flags_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakText:flags:completion:");
}

id objc_msgSend_speechDetectionStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechDetectionStyle");
}

id objc_msgSend_standardizedURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardizedURL");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startHeadGestureManagerWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startHeadGestureManagerWithFlags:");
}

id objc_msgSend_startMonitoringWithCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringWithCallback:");
}

id objc_msgSend_startSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSession");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_stateString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateString");
}

id objc_msgSend_statedumpAndRecordDailyMetric(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statedumpAndRecordDailyMetric");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_statusFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusFlags");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stop");
}

id objc_msgSend_stopHeadGestureManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopHeadGestureManager");
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoring");
}

id objc_msgSend_storePublicAddressMapping_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storePublicAddressMapping:message:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCapacity:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_submitHijackMetric_withV1_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitHijackMetric:withV1:");
}

id objc_msgSend_submitRouteActivityMetric_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitRouteActivityMetric:activity:");
}

id objc_msgSend_subscriptionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionID");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subtitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subtitle");
}

id objc_msgSend_supportsDeviceToDeviceEncryption(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDeviceToDeviceEncryption");
}

id objc_msgSend_supportsVirtualAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsVirtualAddress");
}

id objc_msgSend_supportsiCloudPairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsiCloudPairing");
}

id objc_msgSend_targetFilename(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetFilename");
}

id objc_msgSend_thV2Ticks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thV2Ticks");
}

id objc_msgSend_thV2WxCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thV2WxCount");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeStamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeStamp");
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timer");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestamp");
}

id objc_msgSend_tipiAndRoutedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipiAndRoutedState");
}

id objc_msgSend_tipiConnectionStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipiConnectionStatus");
}

id objc_msgSend_tipiDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipiDevices");
}

id objc_msgSend_tipiHealingBackoff(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipiHealingBackoff");
}

id objc_msgSend_tipiState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipiState");
}

id objc_msgSend_tipitableUpdated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipitableUpdated");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_toggleInputMute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleInputMute");
}

id objc_msgSend_toggleInputMute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleInputMute:");
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topic");
}

id objc_msgSend_totalCloudDeviceCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalCloudDeviceCount");
}

id objc_msgSend_trailingAccessoryText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trailingAccessoryText");
}

id objc_msgSend_transactionIdentifierForActionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionIdentifierForActionIdentifier:");
}

id objc_msgSend_transactionQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionQueue");
}

id objc_msgSend_trigger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trigger");
}

id objc_msgSend_triggered(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggered");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_uiDataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiDataSource");
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueID");
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIDOverride");
}

id objc_msgSend_unpairedIDSCloudIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpairedIDSCloudIdentifiers");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_updateAADeviceRecordWithRecord_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAADeviceRecordWithRecord:completion:");
}

id objc_msgSend_updateAAProxCardsInfoWithProxCardsInfo_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAAProxCardsInfoWithProxCardsInfo:completion:");
}

id objc_msgSend_updateActiveAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateActiveAccount:");
}

id objc_msgSend_updateCloudKitAccessoryZone_delete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCloudKitAccessoryZone:delete:");
}

id objc_msgSend_updateCloudKitBlobZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCloudKitBlobZone:");
}

id objc_msgSend_updateCloudPairings_newDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCloudPairings:newDevices:");
}

id objc_msgSend_updateDeviceMagicSettingsWithMagicPairingSettings_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDeviceMagicSettingsWithMagicPairingSettings:completion:");
}

id objc_msgSend_updateDeviceSupportInformationWithDevice_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDeviceSupportInformationWithDevice:completion:");
}

id objc_msgSend_updateIdentities_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIdentities:completion:");
}

id objc_msgSend_updateWithAADeviceInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithAADeviceInfo:");
}

id objc_msgSend_updateWithAADeviceRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithAADeviceRecord:");
}

id objc_msgSend_updateWithCBDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithCBDevice:");
}

id objc_msgSend_upgradeAccessoryBlob_withRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeAccessoryBlob:withRetryCount:");
}

id objc_msgSend_upgradeLegacyNonManateeContainerToManatee(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeLegacyNonManateeContainerToManatee");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_userConfirmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userConfirmed:");
}

id objc_msgSend_userConnectedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userConnectedState");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_validateCloudPairing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateCloudPairing:");
}

id objc_msgSend_validateKeys_requestedTypes_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateKeys:requestedTypes:from:");
}

id objc_msgSend_validateMessage_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateMessage:from:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_valuesByKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valuesByKey");
}

id objc_msgSend_vendorID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vendorID");
}

id objc_msgSend_verifyAndCacheSubscriptionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyAndCacheSubscriptionID:");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "version");
}

id objc_msgSend_writeAccessoryBlob_withRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeAccessoryBlob:withRetryCount:");
}

id objc_msgSend_writeKeyBlob_withRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeKeyBlob:withRetryCount:");
}

id objc_msgSend_wxAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wxAddress");
}

id objc_msgSend_wxInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wxInfo");
}

id objc_msgSend_wxStreamState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wxStreamState");
}

id objc_msgSend_xpcCnx(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcCnx");
}

id objc_msgSend_xpcConnectionInvalidated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcConnectionInvalidated");
}

id objc_msgSend_xpcObjectRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcObjectRepresentation");
}

id objc_msgSend_xpcQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcQueue");
}

id objc_msgSend_xpcUpdateCloudPairings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcUpdateCloudPairings:");
}

id objc_msgSend_zeroSourceLastRouteHost(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zeroSourceLastRouteHost");
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneID");
}

id objc_msgSend_zoneName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneName");
}
