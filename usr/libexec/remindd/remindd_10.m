void sub_1005FE178(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __objc2_class **v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t isa;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  _BOOL4 v30;
  objc_class *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  _QWORD *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  _QWORD *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  _QWORD *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  id v89;
  char *v90;
  NSObject *v91;
  NSObject *v92;
  unint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  double v110;
  uint64_t v111;
  id v112;
  void *v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  NSObject *v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char v125;
  char v126;
  NSObject *v127;
  os_log_type_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  NSObject *v135;
  char *v136;
  NSObject *v137;
  char *v138;
  NSObject *v139;
  int v140;
  BOOL v141;
  uint64_t v142;
  NSObject **v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  NSObject *v150;
  NSObject *v151;
  char *v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  NSObject **v156;
  NSObject *v157;
  char isUniquelyReferenced_nonNull_native;
  int v159;
  char *v160;
  NSObject *v161;
  NSObject *v162;
  uint64_t v163;
  NSObject *v164;
  int v165;
  uint64_t v166;
  char *v167;
  NSObject *v168;
  int64_t v169;
  uint64_t v170;
  unsigned int v171;
  int v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  NSObject *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  os_log_t v190;
  uint64_t v191;
  NSObject **v192;
  _QWORD *v193;
  id v194;
  uint64_t v195;
  NSObject *v196;
  os_log_type_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  NSString v205;
  NSString v206;
  NSString v207;
  uint64_t v208;
  id *v209;
  id v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  NSObject *v216;
  int v217;
  _QWORD *v218;
  char *v219;
  os_log_t v220;
  id v221;
  NSObject **v222;
  __n128 v223;
  char *v224;
  __n128 v225;
  __n128 v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  NSObject **v234;
  unint64_t v235;
  uint64_t *v236;
  unint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  __n128 v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  NSObject *v253;
  uint8_t *v254;
  __objc2_class **v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD v259[4];
  _QWORD *v260;
  char v261[8];
  char v262;
  NSObject *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;

  v256 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v249 = (char *)&v215 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v248 = (char *)&v215 - v9;
  v252 = type metadata accessor for UUID(0);
  v251 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252);
  v255 = (__objc2_class **)((char *)&v215 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v13 = (char *)&v215 - v12;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (__objc2_class **)((char *)&v215 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (char *)*((_QWORD *)a3 + 3);
  v253 = *((_QWORD *)a3 + 2);
  v247 = *((_QWORD *)a3 + 4);
  v257 = v3;
  v19 = *(_QWORD *)(v3 + 72);
  v250 = a2;
  v259[3] = v19;
  v260 = a2;
  v259[2] = &v260;
  swift_bridgeObjectRetain(v18);
  v20 = v256;
  swift_bridgeObjectRetain(v256);
  v21 = v20;
  v22 = v258;
  v23 = sub_1005CA184((uint64_t (*)(id *))sub_100673808, v259, v21);
  if (v22)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    return;
  }
  v246 = v18;
  v254 = 0;
  v239 = v15;
  v240 = (unint64_t)v17;
  v243 = a3;
  v258 = v23;
  v242 = v19;
  v244 = v13;
  v245 = v14;
  if (qword_1008371E8 != -1)
    goto LABEL_120;
  while (1)
  {
    v24 = sub_10001AAA8(v245, (uint64_t)qword_100845DC0);
    isa = (uint64_t)v258;
    swift_bridgeObjectRetain_n(v258, 2);
    v26 = v246;
    swift_bridgeObjectRetain(v246);
    v256 = v24;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter(v28);
    v30 = os_log_type_enabled(v28, (os_log_type_t)v29);
    v31 = (objc_class *)((unint64_t)isa >> 62);
    v32 = v257;
    if (v30)
    {
      v17 = (__objc2_class **)swift_slowAlloc(42, -1);
      v33 = (_QWORD *)swift_slowAlloc(96, -1);
      v260 = v33;
      *(_DWORD *)v17 = 136446978;
      v263 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v260);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264);
      *((_WORD *)v17 + 6) = 2048;
      LODWORD(v238) = v29;
      v237 = (unint64_t)v33;
      v34 = (uint64_t)&v266;
      if (v31)
        goto LABEL_132;
      v35 = (uint64_t)v254;
      v36 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
      swift_bridgeObjectRelease();
      v263 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264);
      swift_bridgeObjectRelease();
      *((_WORD *)v17 + 11) = 2082;
      v37 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
      v38 = objc_msgSend((id)swift_getObjCClassFromMetadata(v37), "description");
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      v263 = sub_10001A820(v39, v41, (uint64_t *)&v260);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264);
      isa = (uint64_t)v258;
      swift_bridgeObjectRelease();
      *((_WORD *)v17 + 16) = 2082;
      v42 = (unint64_t)v246;
      swift_bridgeObjectRetain(v246);
      v263 = sub_10001A820((uint64_t)v253, v42, (uint64_t *)&v260);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264);
      swift_bridgeObjectRelease_n(v42, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v238, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v17, 0x2Au);
      v43 = (_QWORD *)v237;
      swift_arrayDestroy(v237, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      v32 = v257;
    }
    else
    {
      v35 = (uint64_t)v254;

      swift_bridgeObjectRelease_n(v26, 2);
      swift_bridgeObjectRelease_n(isa, 2);
    }
    if (v31)
    {
      v211 = isa < 0 ? isa : isa & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(isa);
      v44 = _CocoaArrayWrapper.endIndex.getter(v211);
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v241.n128_u64[0] = (unint64_t)v31;
    if (!v44)
      break;
    v260 = _swiftEmptyArrayStorage;
    v28 = &v260;
    specialized ContiguousArray.reserveCapacity(_:)(v44);
    if (v44 < 0)
      goto LABEL_131;
    v45 = 0;
    v46 = isa & 0xC000000000000001;
    v17 = off_1007D6718;
    while (v44 != v45)
    {
      if (v46)
        v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, isa);
      else
        v47 = *(id *)(isa + 8 * v45 + 32);
      v48 = v47;
      v49 = sub_1005CCBAC(objc_msgSend(v48, "remObjectID"), (unint64_t *)&qword_100839928, off_1007D6718);
      if (v35)
      {

        v57 = v260;
        swift_bridgeObjectRelease();
        swift_release(v57);
        return;
      }
      v50 = v49;
      ++v45;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v51);
      v52 = v260[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v52);
      v53 = v52;
      isa = (uint64_t)v258;
      v54 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v50);
      specialized ContiguousArray._endMutation()(v54);
      if (v44 == v45)
      {
        v55 = (uint8_t *)v260;
        v32 = v257;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_120:
    swift_once(&qword_1008371E8, sub_100331650);
  }
  v55 = (uint8_t *)_swiftEmptyArrayStorage;
LABEL_22:
  v56 = *(_QWORD *)(v32 + 96);
  if (v56 <= 1)
  {
    if (v56)
    {
      if (v56 != 1)
        goto LABEL_139;
      swift_bridgeObjectRelease();
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v75, v76))
      {
        v77 = (uint8_t *)swift_slowAlloc(12, -1);
        v78 = (_QWORD *)swift_slowAlloc(32, -1);
        v260 = v78;
        *(_DWORD *)v77 = 136315138;
        v254 = v77 + 4;
        v79 = objc_msgSend((id)objc_opt_self(REMCDSharee), "cdEntityName");
        v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        v82 = v81;

        v263 = sub_10001A820(v80, v82, (uint64_t *)&v260);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264);
        isa = (uint64_t)v258;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "Skipping fetch during upsert {CDType: %s}", v77, 0xCu);
        swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v78, -1, -1);
        swift_slowDealloc(v77, -1, -1);
      }

      v17 = v255;
      v68 = v244;
      v69 = v243;
      v71 = sub_1002B11CC((uint64_t)_swiftEmptyArrayStorage);
      v72 = v35;
      v32 = v257;
      goto LABEL_37;
    }
  }
  else if ((unint64_t)(v56 - 2) >= 3 && v56 != 4499 && v56 != 4599)
  {
LABEL_139:
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v239 + 16))(v240, v256, v245);
    v213 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v214 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v213, v214);
    __break(1u);
    JUMPOUT(0x100600818);
  }
  v254 = v55;
  v58 = Logger.logObject.getter(v55);
  v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(12, -1);
    v61 = (_QWORD *)swift_slowAlloc(32, -1);
    v260 = v61;
    *(_DWORD *)v60 = 136315138;
    v253 = (v60 + 4);
    v62 = objc_msgSend((id)objc_opt_self(REMCDSharee), "cdEntityName");
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    v65 = v64;

    v263 = sub_10001A820(v63, v65, (uint64_t *)&v260);
    isa = (uint64_t)v258;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264);
    v66 = v257;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Performing fetch during upsert {CDType: %s}", v60, 0xCu);
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    v67 = v61;
    v32 = v66;
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v60, -1, -1);
  }

  v17 = v255;
  v68 = v244;
  v69 = v243;
  sub_1006480B0((uint64_t)v254, (uint64_t)v243);
  v71 = v70;
  v72 = v35;
  v73 = swift_bridgeObjectRelease();
  if (v35)
    goto LABEL_2;
LABEL_37:
  v240 = v71;
  if (v241.n128_u64[0])
  {
    if (isa < 0)
      v85 = isa;
    else
      v85 = isa & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(isa);
    v83 = _CocoaArrayWrapper.endIndex.getter(v85);
    v73 = swift_bridgeObjectRelease();
    v84 = v72;
    if (!v83)
      goto LABEL_109;
  }
  else
  {
    v83 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
    v84 = v72;
    if (!v83)
    {
LABEL_109:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  v86 = 0;
  v231 = v32 + 24;
  v230 = v69 + 48;
  v234 = (NSObject **)(v69 + 56);
  v87 = isa & 0xC000000000000001;
  v229 = isa & 0xFFFFFFFFFFFFFF8;
  v228 = isa + 32;
  v236 = &v264;
  v227 = (char *)&v263 + 4;
  v73.n128_u64[0] = 136446978;
  v225 = v73;
  v73.n128_u64[0] = 136446210;
  v241 = v73;
  v73.n128_u64[0] = 136447490;
  v226 = v73;
  v73.n128_u64[0] = 136447234;
  v223 = v73;
  v224 = (char *)&type metadata for Any + 8;
  v88 = v250;
  v232 = isa & 0xC000000000000001;
  v233 = v83;
  while (1)
  {
    if (v87)
    {
      v89 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v86, isa);
    }
    else
    {
      if (v86 >= *(_QWORD *)(v229 + 16))
        goto LABEL_137;
      v89 = *(id *)(v228 + 8 * v86);
    }
    v235 = v86 + 1;
    if (__OFADD__(v86, 1))
    {
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    v90 = (char *)v89;
    v91 = sub_1005CCBAC(objc_msgSend(v90, "remObjectID"), (unint64_t *)&qword_100839928, off_1007D6718);
    if (v84)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v92 = v91;
    v93 = v240;
    v254 = 0;
    v243 = v90;

    v94 = objc_msgSend((id)v88[2], "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

    v96 = UUID.uuidString.getter(v95);
    v97 = v68;
    v98 = v96;
    v100 = v99;
    v101 = *(void (**)(char *, uint64_t))(v251 + 8);
    v102 = v252;
    v101(v97, v252);
    v103 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v104 = objc_msgSend(v103, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v104);
    v106 = UUID.uuidString.getter(v105);
    v108 = v107;
    v246 = (char *)v101;
    v101((char *)v17, v102);
    if (v98 == v106 && v100 == v108)
    {
      swift_bridgeObjectRelease_n(v100, 2);
LABEL_55:
      __asm { BR              X10 }
    }
    v109 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v100, v106, v108, 0);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v110 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v109 & 1) != 0)
      goto LABEL_55;
    v111 = v242;
    v112 = objc_msgSend(v243, "remObjectID", v110);
    v113 = v112;
    if (*(_QWORD *)(v111 + 16))
    {
      v114 = sub_1002C66DC((uint64_t)v112);
      if ((v115 & 1) != 0)
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v111 + 56) + 8 * v114));
    }
    v116 = v257;

    swift_bridgeObjectRelease();
    v117 = sub_1005D00BC((uint64_t (*)(uint64_t, unint64_t))sub_1003CD6D8, (unint64_t *)&qword_100839928, off_1007D6718);
    v118 = *(_QWORD *)(v93 + 16);
    v253 = v92;
    if (!v118)
      goto LABEL_63;
    v119 = v92;
    v120 = sub_1002C672C(v119);
    if ((v121 & 1) == 0)
      break;
    v246 = (char *)*(id *)(*(_QWORD *)(v93 + 56) + 8 * v120);

    v123 = 11;
    v239 = 11;
    v124 = &byte_1007DF608;
    do
    {
      v126 = *v124++;
      v125 = v126;
      if (((*(unsigned int *)(v116 + 64) | ((unint64_t)*(unsigned __int16 *)(v116 + 68) << 32)) & 0xC00000000004) == 0x800000000000)
      {
        v127 = Logger.logObject.getter(v122);
        v128 = static os_log_type_t.error.getter(v127);
        if (os_log_type_enabled(v127, v128))
        {
          v129 = swift_slowAlloc(12, -1);
          v130 = (_QWORD *)swift_slowAlloc(32, -1);
          v260 = v130;
          *(_DWORD *)v129 = v241.n128_u32[0];
          LOBYTE(v263) = v125;
          v131 = String.init<A>(describing:)(&v263, &type metadata for REMShareeCDIngestor.ValueKey);
          *(_QWORD *)(v129 + 4) = sub_10001A820(v131, v132, (uint64_t *)&v260);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v127, v128, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v129, 0xCu);
          swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v130, -1, -1);
          v133 = v129;
          v116 = v257;
          swift_slowDealloc(v133, -1, -1);
        }

      }
      LODWORD(v69) = *(_DWORD *)(v116 + 64);
      if (*(unsigned __int16 *)(v116 + 68) >> 14 == 2 && (*(_DWORD *)(v116 + 64) & 4) == 0)
      {
        v83 = v245;
        if (qword_100837928 == -1)
        {
LABEL_111:
          v195 = sub_10001AAA8(v83, (uint64_t)qword_1008508E0);
          v196 = Logger.logObject.getter(v195);
          v197 = static os_log_type_t.error.getter(v196);
          if (os_log_type_enabled(v196, v197))
          {
            v198 = swift_slowAlloc(22, -1);
            v199 = (_QWORD *)swift_slowAlloc(64, -1);
            v260 = v199;
            *(_DWORD *)v198 = 136446466;
            v200 = sub_1005A26D8(4);
            v263 = sub_10001A820(v200, v201, (uint64_t *)&v260);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264);
            swift_bridgeObjectRelease();
            *(_WORD *)(v198 + 12) = 2082;
            v202 = sub_1005A26D8((__int16)v69);
            v263 = sub_10001A820(v202, v203, (uint64_t *)&v260);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, &v264);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v196, v197, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v198, 0x16u);
            swift_arrayDestroy(v199, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v199, -1, -1);
            swift_slowDealloc(v198, -1, -1);
          }

          v204 = (void *)objc_opt_self(REMError);
          v205 = String._bridgeToObjectiveC()();
          sub_1005A26D8(4);
          v206 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_1005A26D8((__int16)v69);
          v207 = String._bridgeToObjectiveC()();
          objc_msgSend(v204, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v205, v206, v207, swift_bridgeObjectRelease().n128_f64[0]);

          swift_willThrow(v208);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_114;
        }
LABEL_138:
        swift_once(&qword_100837928, sub_1005A2648);
        goto LABEL_111;
      }
      --v123;
    }
    while (v123);
    swift_retain_n(v116);
    v135 = v253;
    v136 = v246;
    v137 = v135;
    v138 = v136;
    v139 = Logger.logObject.getter(v138);
    v140 = static os_log_type_t.default.getter(v139);
    v141 = os_log_type_enabled(v139, (os_log_type_t)v140);
    v253 = v137;
    if (v141)
    {
      LODWORD(v237) = v140;
      v246 = (char *)v139;
      v142 = swift_slowAlloc(58, -1);
      v143 = (NSObject **)swift_slowAlloc(16, -1);
      v238 = (_QWORD *)swift_slowAlloc(96, -1);
      v260 = v238;
      *(_DWORD *)v142 = v226.n128_u32[0];
      v263 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v260);
      v144 = v236;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v236);
      *(_WORD *)(v142 + 12) = 2082;
      sub_1000184A8(v231, (uint64_t)v261);
      sub_100671124((uint64_t)v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v146 = v145;
      v147 = v116;
      v149 = v148;
      sub_100671124((uint64_t)v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v263 = sub_10001A820(v146, v149, (uint64_t *)&v260);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v144);
      swift_release_n(v147);
      swift_bridgeObjectRelease();
      *(_WORD *)(v142 + 22) = 2114;
      v263 = v137;
      v150 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v144);
      *v143 = v137;

      *(_WORD *)(v142 + 32) = 2112;
      v151 = objc_msgSend(v138, "objectID");
      v263 = v151;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v144);
      v222 = v143;
      v143[1] = v151;

      *(_WORD *)(v142 + 42) = 2082;
      v263 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, 11, 0);
      JUMPOUT(0x1005FFA18);
    }

    swift_release_n(v116);
    v17 = v255;
    v31 = (objc_class *)v240;
    v152 = v243;
    v153 = (uint64_t)v254;
    sub_1003CDE40((uint64_t)v243, (uint64_t)v138, (uint64_t)&off_1007DF5E8);
    if (v153)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_114:
      v209 = (id *)&v265;
      goto LABEL_115;
    }
    v254 = 0;
    v154 = objc_msgSend(v138, "changedValues");
    v155 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v154, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v156 = v234;
    swift_beginAccess(v234, &v260, 33, 0);
    v157 = v253;
    swift_bridgeObjectRetain(v155);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v156);
    v263 = *v156;
    *v156 = 0x8000000000000000;
    sub_10028C70C(v155, v157, isUniquelyReferenced_nonNull_native);
    *v156 = v263;

    swift_bridgeObjectRelease();
    swift_endAccess(&v260);
    v159 = *(unsigned __int8 *)(v116 + 104);
    if (v239 && (v159 & 1) != 0)
    {
      v160 = v138;
      objc_msgSend(v160, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      goto LABEL_104;
    }
    v161 = v157;
    swift_retain_n(v116);
    v162 = v161;
    v69 = v138;
    swift_bridgeObjectRetain(v155);
    v164 = Logger.logObject.getter(v163);
    v165 = static os_log_type_t.default.getter(v164);
    if (os_log_type_enabled(v164, (os_log_type_t)v165))
    {
      v217 = v165;
      v220 = v164;
      v221 = v69;
      v166 = swift_slowAlloc(44, -1);
      v222 = (NSObject **)swift_slowAlloc(8, -1);
      v218 = (_QWORD *)swift_slowAlloc(64, -1);
      v260 = v218;
      *(_DWORD *)v166 = v223.n128_u32[0];
      v263 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v260);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v236);
      *(_WORD *)(v166 + 12) = 1024;
      swift_release(v116);
      LODWORD(v263) = v159;
      v167 = v227;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v227);
      swift_release(v116);
      *(_WORD *)(v166 + 18) = 1024;
      LODWORD(v263) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v167);
      *(_WORD *)(v166 + 24) = 2114;
      v263 = v162;
      v168 = v162;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v236);
      *v222 = v162;

      v216 = v168;
      v219 = (char *)v166;
      *(_WORD *)(v166 + 34) = 2082;
      v169 = *(_QWORD *)(v155 + 16);
      isa = (uint64_t)v258;
      if (v169)
      {
        v263 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v155);
        sub_1001C1B0C(0, v169, 0);
        v28 = v263;
        v170 = sub_100658CFC(v155);
        v172 = v171;
        v173 = 0;
        v174 = v155 + 64;
        v34 = *(unsigned __int8 *)(v155 + 32);
        v237 = v171;
        v215 = v155 + 88;
        v238 = (_QWORD *)v169;
        v239 = v155 + 64;
        while (1)
        {
          if (v170 < 0 || (v34 = 1 << v34, v170 >= v34))
          {
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            v35 = *(_QWORD *)(v34 - 256);
            if (isa < 0)
              v212 = isa;
            else
              v212 = isa & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(isa);
            v36 = _CocoaArrayWrapper.endIndex.getter(v212);
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v177 = (unint64_t)v170 >> 6;
          v34 = *(_QWORD *)(v174 + 8 * ((unint64_t)v170 >> 6));
          if ((v34 & (1 << v170)) == 0)
            goto LABEL_126;
          v34 = *(unsigned int *)(v155 + 36);
          if ((_DWORD)v34 != v172)
            goto LABEL_127;
          v246 = v173;
          v178 = *(_QWORD *)(v155 + 48) + 16 * v170;
          v17 = *(__objc2_class ***)(v178 + 8);
          v253 = *(NSObject **)v178;
          v263 = v28;
          isa = (uint64_t)v28[2].isa;
          v179 = (unint64_t)v28[3].isa;
          v31 = (objc_class *)(isa + 1);
          swift_bridgeObjectRetain(v17);
          if (isa >= v179 >> 1)
          {
            sub_1001C1B0C(v179 > 1, isa + 1, 1);
            v28 = v263;
          }
          v28[2].isa = v31;
          v180 = &v28[2 * isa];
          v180[4].isa = (Class)v253;
          v180[5].isa = (Class)v17;
          v34 = *(unsigned __int8 *)(v155 + 32);
          v175 = 1 << v34;
          if (v170 >= 1 << v34)
            goto LABEL_128;
          v174 = v239;
          v181 = *(_QWORD *)(v239 + 8 * v177);
          if ((v181 & (1 << v170)) == 0)
            goto LABEL_129;
          if (*(_DWORD *)(v155 + 36) != v172)
            goto LABEL_130;
          v182 = v181 & (-2 << (v170 & 0x3F));
          if (v182)
          {
            v175 = __clz(__rbit64(v182)) | v170 & 0xFFFFFFFFFFFFFFC0;
            isa = (uint64_t)v258;
            v17 = v255;
            v176 = (char *)v238;
          }
          else
          {
            v183 = v177 + 1;
            v184 = (v175 + 63) >> 6;
            isa = (uint64_t)v258;
            v17 = v255;
            v176 = (char *)v238;
            if (v177 + 1 < v184)
            {
              v185 = *(_QWORD *)(v239 + 8 * v183);
              if (!v185)
              {
                v183 = v177 + 2;
                if (v177 + 2 >= v184)
                  goto LABEL_84;
                v185 = *(_QWORD *)(v239 + 8 * v183);
                if (!v185)
                {
                  while (v184 - 3 != v177)
                  {
                    v185 = *(_QWORD *)(v215 + 8 * v177++);
                    if (v185)
                    {
                      v183 = v177 + 2;
                      goto LABEL_97;
                    }
                  }
                  goto LABEL_84;
                }
              }
LABEL_97:
              v175 = __clz(__rbit64(v185)) + (v183 << 6);
            }
          }
LABEL_84:
          v173 = v246 + 1;
          v172 = v237;
          v170 = v175;
          if (v246 + 1 == v176)
          {
            swift_bridgeObjectRelease();
            goto LABEL_107;
          }
        }
      }
      v28 = _swiftEmptyArrayStorage;
LABEL_107:
      v186 = v155;
      v69 = v219;
      v187 = Array.description.getter(v28, &type metadata for String);
      v189 = v188;
      swift_bridgeObjectRelease();
      v263 = sub_10001A820(v187, v189, (uint64_t *)&v260);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v236);
      swift_bridgeObjectRelease_n(v186, 2);
      swift_bridgeObjectRelease();
      v190 = v220;
      _os_log_impl((void *)&_mh_execute_header, v220, (os_log_type_t)v217, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", (uint8_t *)v69, 0x2Cu);
      v191 = sub_10001A630((uint64_t *)&unk_100839E70);
      v192 = v222;
      swift_arrayDestroy(v222, 1, v191);
      swift_slowDealloc(v192, -1, -1);
      v193 = v218;
      swift_arrayDestroy(v218, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v193, -1, -1);
      swift_slowDealloc(v69, -1, -1);

      v194 = v221;
    }
    else
    {

      swift_bridgeObjectRelease_n(v155, 2);
      swift_release_n(v116);
LABEL_104:
      isa = (uint64_t)v258;
    }
    v83 = v233;
    v86 = v235;
    v84 = (uint64_t)v254;
    v88 = v250;
    v68 = v244;
    v87 = v232;
    if (v235 == v233)
      goto LABEL_109;
  }

LABEL_63:
  if (v117 != 11)
    JUMPOUT(0x1005FEF28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v210 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v92);
  swift_willThrow(v210);

  v209 = (id *)&v262;
LABEL_115:

}

void sub_1006008AC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  unsigned __int32 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  id v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  __n128 v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  char *v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  id v102;
  id v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  double v110;
  id v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  Swift::OpaquePointer v116;
  char v117;
  NSObject *v118;
  unint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char v126;
  char v127;
  NSObject *v128;
  os_log_type_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  NSObject *v136;
  char *v137;
  NSObject *v138;
  char *v139;
  NSObject *v140;
  int v141;
  BOOL v142;
  uint64_t v143;
  NSObject **v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  NSObject *v151;
  NSObject *v152;
  id v153;
  _QWORD *v154;
  id v155;
  NSObject **v156;
  NSObject *v157;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v159;
  int v160;
  char *v161;
  NSObject *v162;
  char *v163;
  uint64_t v164;
  NSObject *v165;
  int v166;
  uint64_t v167;
  NSObject **v168;
  char *v169;
  uint64_t v170;
  NSObject *v171;
  NSObject *v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t isa;
  NSObject *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  NSObject *v189;
  uint8_t *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  os_log_t v194;
  uint64_t v195;
  NSObject **v196;
  char *v197;
  id v198;
  uint64_t v199;
  NSObject *v200;
  os_log_type_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  void *v208;
  NSString v209;
  NSString v210;
  NSString v211;
  uint64_t v212;
  id *v213;
  void *v214;
  NSObject *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  NSObject *v221;
  NSObject **v222;
  int v223;
  char *v224;
  uint8_t *v225;
  os_log_t v226;
  id v227;
  __n128 v228;
  char *v229;
  __n128 v230;
  __n128 v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  NSObject **v239;
  unint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  __n128 v245;
  const char *v246;
  const char *v247;
  id v248;
  uint64_t v249;
  _QWORD *v250;
  char *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  char *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  NSObject *v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  _QWORD v266[4];
  char *v267;
  char v268[8];
  char v269;
  NSObject *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;

  v263 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v256 = (char *)&v220 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v255 = (char *)&v220 - v9;
  v259 = type metadata accessor for UUID(0);
  v258 = *(_QWORD *)(v259 - 8);
  __chkstk_darwin(v259);
  v257 = (char *)&v220 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v220 - v12;
  v14 = type metadata accessor for Logger(0);
  v15 = *(const char **)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v220 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (char *)a3[3];
  v260 = a3[2];
  v254 = a3[4];
  v264 = v3;
  v19 = *(_QWORD *)(v3 + 72);
  v261 = a2;
  v266[3] = v19;
  v267 = (char *)a2;
  v266[2] = &v267;
  swift_bridgeObjectRetain(v18);
  v20 = v263;
  swift_bridgeObjectRetain(v263);
  v21 = v20;
  v22 = v265;
  v23 = sub_1005CA184((uint64_t (*)(id *))sub_100673820, v266, v21);
  if (v22)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    return;
  }
  v253 = v18;
  v262 = 0;
  v246 = v15;
  v247 = v17;
  v250 = a3;
  v265 = v23;
  v249 = v19;
  v251 = v13;
  v252 = v14;
  if (qword_1008371E8 != -1)
    goto LABEL_119;
  while (1)
  {
    v24 = sub_10001AAA8(v252, (uint64_t)qword_100845DC0);
    v25 = (uint64_t)v265;
    swift_bridgeObjectRetain_n(v265, 2);
    v26 = v253;
    swift_bridgeObjectRetain(v253);
    v263 = v24;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter(v28);
    v30 = os_log_type_enabled(v28, (os_log_type_t)v29);
    v31 = (unint64_t)v25 >> 62;
    v32 = v264;
    if (v30)
    {
      v33 = (char *)swift_slowAlloc(42, -1);
      v34 = (char *)swift_slowAlloc(96, -1);
      v267 = v34;
      *(_DWORD *)v33 = 136446978;
      v270 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, &v271);
      *((_WORD *)v33 + 6) = 2048;
      v245.n128_u32[0] = v29;
      v244 = (uint64_t)v34;
      v35 = (uint64_t)&v273;
      if (v31)
        goto LABEL_131;
      v36 = v262;
      v37 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
      swift_bridgeObjectRelease();
      v270 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, &v271);
      swift_bridgeObjectRelease();
      *((_WORD *)v33 + 11) = 2082;
      v38 = sub_1000151B0(0, (unint64_t *)&qword_100851CB0, off_1007D66B0);
      v39 = objc_msgSend((id)swift_getObjCClassFromMetadata(v38), "description");
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

      v270 = sub_10001A820(v40, v42, (uint64_t *)&v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, &v271);
      v25 = (uint64_t)v265;
      swift_bridgeObjectRelease();
      *((_WORD *)v33 + 16) = 2082;
      v43 = (unint64_t)v253;
      swift_bridgeObjectRetain(v253);
      v270 = sub_10001A820((uint64_t)v260, v43, (uint64_t *)&v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, &v271);
      swift_bridgeObjectRelease_n(v43, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v245.n128_u8[0], "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v33, 0x2Au);
      v44 = v244;
      swift_arrayDestroy(v244, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      v32 = v264;
    }
    else
    {
      v36 = v262;

      swift_bridgeObjectRelease_n(v26, 2);
      v46 = swift_bridgeObjectRelease_n(v25, 2);
    }
    if (v31)
    {
      v216 = v25 < 0 ? v25 : v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v25);
      v47 = _CocoaArrayWrapper.endIndex.getter(v216);
      v46 = swift_bridgeObjectRelease();
    }
    else
    {
      v47 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v33 = (char *)_swiftEmptyArrayStorage;
    v248 = (id)v31;
    if (!v47)
      break;
    v267 = (char *)_swiftEmptyArrayStorage;
    v28 = &v267;
    specialized ContiguousArray.reserveCapacity(_:)(v47);
    if (v47 < 0)
      goto LABEL_130;
    v48 = 0;
    v49 = v25 & 0xC000000000000001;
    while (v47 != v48)
    {
      if (v49)
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v25);
      else
        v50 = *(id *)(v25 + 8 * v48 + 32);
      v51 = v50;
      v52 = sub_1005CCBAC(objc_msgSend(v51, "remObjectID"), (unint64_t *)&qword_100851CB0, off_1007D66B0);
      if (v36)
      {

        v59 = v267;
        swift_bridgeObjectRelease();
        swift_release(v59);
        return;
      }
      v53 = v52;
      ++v48;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v54);
      v55 = *((_QWORD *)v267 + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v55);
      v56 = v55;
      v25 = (uint64_t)v265;
      v57 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v53);
      v45 = specialized ContiguousArray._endMutation()(v57);
      if (v47 == v48)
      {
        v33 = v267;
        v32 = v264;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_119:
    swift_once(&qword_1008371E8, sub_100331650);
  }
LABEL_21:
  v58 = *(_QWORD *)(v32 + 96);
  if (v58 <= 1)
  {
    if (v58)
    {
      if (v58 != 1)
        goto LABEL_138;
      swift_bridgeObjectRelease();
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc(12, -1);
        v80 = (char *)swift_slowAlloc(32, -1);
        v267 = v80;
        *(_DWORD *)v79 = 136315138;
        v262 = v79 + 4;
        v81 = objc_msgSend((id)objc_opt_self(REMCDCalDAVNotification), "cdEntityName");
        v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
        v84 = v83;

        v270 = sub_10001A820(v82, v84, (uint64_t *)&v267);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, &v271);
        v25 = (uint64_t)v265;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Skipping fetch during upsert {CDType: %s}", v79, 0xCu);
        swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1, -1);
        swift_slowDealloc(v79, -1, -1);
      }

      v70 = v251;
      v71 = (uint64_t)v250;
      v73 = sub_1002B11D8((uint64_t)_swiftEmptyArrayStorage);
      v74 = v36;
      v32 = v264;
      goto LABEL_36;
    }
  }
  else if ((unint64_t)(v58 - 2) >= 3 && v58 != 4499 && v58 != 4599)
  {
LABEL_138:
    (*((void (**)(const char *, uint64_t, uint64_t, __n128))v246 + 2))(v247, v263, v252, v46);
    v218 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v219 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v218, v219);
    __break(1u);
    JUMPOUT(0x100602E5CLL);
  }
  v60 = Logger.logObject.getter(v45);
  v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v262 = (_QWORD *)swift_slowAlloc(32, -1);
    v267 = (char *)v262;
    *(_DWORD *)v62 = 136315138;
    v260 = (v62 + 4);
    v63 = objc_msgSend((id)objc_opt_self(REMCDCalDAVNotification), "cdEntityName");
    v64 = v33;
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v67 = v66;

    v68 = v65;
    v33 = v64;
    v270 = sub_10001A820(v68, v67, (uint64_t *)&v267);
    v25 = (uint64_t)v265;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, &v271);
    v32 = v264;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Performing fetch during upsert {CDType: %s}", v62, 0xCu);
    v69 = v262;
    swift_arrayDestroy(v262, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v62, -1, -1);
  }

  v70 = v251;
  v71 = (uint64_t)v250;
  sub_1006484D0((uint64_t)v33, (uint64_t)v250);
  v73 = v72;
  v74 = v36;
  v75 = swift_bridgeObjectRelease();
  if (v36)
    goto LABEL_2;
LABEL_36:
  if (v248)
  {
    if (v25 < 0)
      v87 = v25;
    else
      v87 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v85 = _CocoaArrayWrapper.endIndex.getter(v87);
    v75 = swift_bridgeObjectRelease();
    v86 = v74;
    if (!v85)
      goto LABEL_108;
  }
  else
  {
    v85 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    v86 = v74;
    if (!v85)
    {
LABEL_108:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  v88 = 0;
  v236 = v32 + 24;
  v235 = v71 + 48;
  v239 = (NSObject **)(v71 + 56);
  v89 = v25 & 0xC000000000000001;
  v234 = v25 & 0xFFFFFFFFFFFFFF8;
  v233 = v25 + 32;
  v241 = &v271;
  v232 = (char *)&v270 + 4;
  v75.n128_u64[0] = 136446978;
  v230 = v75;
  v247 = "shouldUpdateSectionsOrdering";
  v75.n128_u64[0] = 136446210;
  v245 = v75;
  v75.n128_u64[0] = 136447490;
  v231 = v75;
  v75.n128_u64[0] = 136447234;
  v228 = v75;
  v246 = "externalIdentifier";
  v229 = (char *)&type metadata for Any + 8;
  v90 = v261;
  v250 = (_QWORD *)v73;
  v237 = v25 & 0xC000000000000001;
  v238 = v85;
  while (1)
  {
    if (v89)
    {
      v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v88, v25);
    }
    else
    {
      if (v88 >= *(_QWORD *)(v234 + 16))
        goto LABEL_136;
      v91 = *(id *)(v233 + 8 * v88);
    }
    v240 = v88 + 1;
    if (__OFADD__(v88, 1))
    {
      __break(1u);
LABEL_136:
      __break(1u);
      goto LABEL_137;
    }
    v92 = v91;
    v260 = sub_1005CCBAC(objc_msgSend(v92, "remObjectID"), (unint64_t *)&qword_100851CB0, off_1007D66B0);
    if (v86)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v262 = 0;
    v248 = v92;

    v93 = objc_msgSend((id)v90[2], "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v93);

    v95 = UUID.uuidString.getter(v94);
    v96 = v70;
    v97 = v95;
    v99 = v98;
    v100 = *(void (**)(char *, uint64_t))(v258 + 8);
    v101 = v259;
    v100(v96, v259);
    v102 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v103 = objc_msgSend(v102, "uuid");

    v104 = v257;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v103);

    v106 = UUID.uuidString.getter(v105);
    v108 = v107;
    v100(v104, v101);
    if (v97 == v106 && v99 == v108)
    {
      swift_bridgeObjectRelease_n(v99, 2);
LABEL_54:
      __asm { BR              X10 }
    }
    v109 = _stringCompareWithSmolCheck(_:_:expecting:)(v97, v99, v106, v108, 0);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v110 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v109 & 1) != 0)
      goto LABEL_54;
    v111 = objc_msgSend(v248, "remObjectID", v110);
    v112 = v111;
    v113 = v249;
    if (*(_QWORD *)(v249 + 16))
    {
      v114 = sub_1002C66DC((uint64_t)v111);
      if ((v115 & 1) != 0)
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v113 + 56) + 8 * v114));
    }

    swift_bridgeObjectRelease();
    v116._rawValue = &off_1007DEB88;
    v117 = sub_1005D0DB0(v116, (unint64_t *)&qword_100851CB0, off_1007D66B0);
    if (!*(_QWORD *)(v73 + 16))
      goto LABEL_62;
    v118 = v260;
    v119 = sub_1002C672C(v118);
    if ((v120 & 1) == 0)
      break;
    v121 = (char *)*(id *)(*(_QWORD *)(v73 + 56) + 8 * v119);
    v122 = v264;
    v253 = v121;

    v124 = 7;
    v244 = 7;
    v125 = &byte_1007DF660;
    do
    {
      v127 = *v125++;
      v126 = v127;
      if (((*(unsigned int *)(v122 + 64) | ((unint64_t)*(unsigned __int16 *)(v122 + 68) << 32)) & 0xC00000000004) == 0x800000000000)
      {
        v128 = Logger.logObject.getter(v123);
        v129 = static os_log_type_t.error.getter(v128);
        if (os_log_type_enabled(v128, v129))
        {
          v130 = swift_slowAlloc(12, -1);
          v131 = (char *)swift_slowAlloc(32, -1);
          v267 = v131;
          *(_DWORD *)v130 = v245.n128_u32[0];
          LOBYTE(v270) = v126;
          v132 = String.init<A>(describing:)(&v270, &type metadata for REMCalDAVNotificationCDIngestor.ValueKey);
          *(_QWORD *)(v130 + 4) = sub_10001A820(v132, v133, (uint64_t *)&v267);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v128, v129, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v130, 0xCu);
          swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v131, -1, -1);
          v134 = v130;
          v122 = v264;
          swift_slowDealloc(v134, -1, -1);
        }

      }
      LODWORD(v71) = *(_DWORD *)(v122 + 64);
      if (*(unsigned __int16 *)(v122 + 68) >> 14 == 2 && (*(_DWORD *)(v122 + 64) & 4) == 0)
      {
        v85 = v252;
        if (qword_100837928 == -1)
        {
LABEL_110:
          v199 = sub_10001AAA8(v85, (uint64_t)qword_1008508E0);
          v200 = Logger.logObject.getter(v199);
          v201 = static os_log_type_t.error.getter(v200);
          if (os_log_type_enabled(v200, v201))
          {
            v202 = swift_slowAlloc(22, -1);
            v203 = (char *)swift_slowAlloc(64, -1);
            v267 = v203;
            *(_DWORD *)v202 = 136446466;
            v204 = sub_1005A26D8(4);
            v270 = sub_10001A820(v204, v205, (uint64_t *)&v267);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, &v271);
            swift_bridgeObjectRelease();
            *(_WORD *)(v202 + 12) = 2082;
            v206 = sub_1005A26D8(v71);
            v270 = sub_10001A820(v206, v207, (uint64_t *)&v267);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, &v271);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v200, v201, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v202, 0x16u);
            swift_arrayDestroy(v203, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v203, -1, -1);
            swift_slowDealloc(v202, -1, -1);
          }

          v208 = (void *)objc_opt_self(REMError);
          v209 = String._bridgeToObjectiveC()();
          sub_1005A26D8(4);
          v210 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_1005A26D8(v71);
          v211 = String._bridgeToObjectiveC()();
          objc_msgSend(v208, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v209, v210, v211, swift_bridgeObjectRelease().n128_f64[0]);

          swift_willThrow(v212);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_113;
        }
LABEL_137:
        swift_once(&qword_100837928, sub_1005A2648);
        goto LABEL_110;
      }
      --v124;
    }
    while (v124);
    swift_retain_n(v122);
    v136 = v260;
    v137 = v253;
    v138 = v136;
    v139 = v137;
    v140 = Logger.logObject.getter(v139);
    v141 = static os_log_type_t.default.getter(v140);
    v142 = os_log_type_enabled(v140, (os_log_type_t)v141);
    v260 = v138;
    if (v142)
    {
      LODWORD(v242) = v141;
      v253 = (char *)v140;
      v143 = swift_slowAlloc(58, -1);
      v144 = (NSObject **)swift_slowAlloc(16, -1);
      v243 = (char *)swift_slowAlloc(96, -1);
      v267 = v243;
      *(_DWORD *)v143 = v231.n128_u32[0];
      v270 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v267);
      v145 = v241;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v241);
      *(_WORD *)(v143 + 12) = 2082;
      sub_1000184A8(v236, (uint64_t)v268);
      sub_100671124((uint64_t)v268, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v147 = v146;
      v148 = v122;
      v150 = v149;
      sub_100671124((uint64_t)v268, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v270 = sub_10001A820(v147, v150, (uint64_t *)&v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v145);
      swift_release_n(v148);
      swift_bridgeObjectRelease();
      *(_WORD *)(v143 + 22) = 2114;
      v270 = v138;
      v151 = v138;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v145);
      *v144 = v138;

      *(_WORD *)(v143 + 32) = 2112;
      v152 = objc_msgSend(v139, "objectID");
      v270 = v152;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v145);
      v227 = v144;
      v144[1] = v152;

      *(_WORD *)(v143 + 42) = 2082;
      v270 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, 7, 0);
      JUMPOUT(0x100602150);
    }

    swift_release_n(v122);
    v153 = v248;
    v154 = v262;
    sub_10038BDB8((uint64_t)v248, (uint64_t)v139, (uint64_t)&off_1007DF640);
    v25 = (uint64_t)v265;
    if (v154)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_113:
      v213 = (id *)&v272;
      goto LABEL_114;
    }
    v262 = 0;
    v155 = objc_msgSend(v139, "changedValues");
    v71 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v155, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v156 = v239;
    swift_beginAccess(v239, &v267, 33, 0);
    v157 = v260;
    swift_bridgeObjectRetain(v71);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v156);
    v270 = *v156;
    *v156 = 0x8000000000000000;
    v159 = v71;
    sub_10028C70C(v71, v157, isUniquelyReferenced_nonNull_native);
    *v156 = v270;

    swift_bridgeObjectRelease();
    swift_endAccess(&v267);
    v160 = *(unsigned __int8 *)(v122 + 104);
    if (v244 && (v160 & 1) != 0)
    {
      v161 = v139;
      objc_msgSend(v161, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      goto LABEL_103;
    }
    v162 = v157;
    swift_retain_n(v122);
    v260 = v162;
    v163 = v139;
    swift_bridgeObjectRetain(v71);
    v165 = Logger.logObject.getter(v164);
    v166 = static os_log_type_t.default.getter(v165);
    if (os_log_type_enabled(v165, (os_log_type_t)v166))
    {
      v223 = v166;
      v226 = v165;
      v227 = v163;
      v71 = (uint64_t)v250;
      v167 = swift_slowAlloc(44, -1);
      v168 = (NSObject **)swift_slowAlloc(8, -1);
      v224 = (char *)swift_slowAlloc(64, -1);
      v267 = v224;
      *(_DWORD *)v167 = v228.n128_u32[0];
      v270 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v241);
      *(_WORD *)(v167 + 12) = 1024;
      swift_release(v122);
      LODWORD(v270) = v160;
      v169 = v232;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v232);
      swift_release(v122);
      *(_WORD *)(v167 + 18) = 1024;
      v170 = v159;
      LODWORD(v270) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v169);
      *(_WORD *)(v167 + 24) = 2114;
      v171 = v260;
      v270 = v260;
      v172 = v260;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v241);
      v222 = v168;
      *v168 = v171;

      v221 = v172;
      v225 = (uint8_t *)v167;
      *(_WORD *)(v167 + 34) = 2082;
      v33 = *(char **)(v170 + 16);
      v31 = 1;
      if (v33)
      {
        v270 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v170);
        sub_1001C1B0C(0, (int64_t)v33, 0);
        v28 = v270;
        v173 = sub_100658CFC(v170);
        v175 = v174;
        v176 = 0;
        v177 = v170 + 64;
        v35 = *(unsigned __int8 *)(v170 + 32);
        v242 = v174;
        v220 = v170 + 88;
        v243 = v33;
        v244 = v170 + 64;
        while (1)
        {
          if (v173 < 0 || (v35 = 1 << v35, v173 >= v35))
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            v36 = *(_QWORD **)(v35 - 256);
            if (v25 < 0)
              v217 = v25;
            else
              v217 = v25 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v25);
            v37 = _CocoaArrayWrapper.endIndex.getter(v217);
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v25 = (unint64_t)v173 >> 6;
          v35 = *(_QWORD *)(v177 + 8 * ((unint64_t)v173 >> 6));
          if ((v35 & (1 << v173)) == 0)
            goto LABEL_125;
          v35 = *(unsigned int *)(v170 + 36);
          if ((_DWORD)v35 != v175)
            goto LABEL_126;
          v253 = v176;
          v179 = *(_QWORD *)(v170 + 48) + 16 * v173;
          v33 = *(char **)(v179 + 8);
          v260 = *(NSObject **)v179;
          v270 = v28;
          v180 = v170;
          isa = (unint64_t)v28[2].isa;
          v181 = (unint64_t)v28[3].isa;
          swift_bridgeObjectRetain(v33);
          if (isa >= v181 >> 1)
          {
            sub_1001C1B0C(v181 > 1, isa + 1, 1);
            v28 = v270;
          }
          v28[2].isa = (Class)(isa + 1);
          v183 = &v28[2 * isa];
          v183[4].isa = (Class)v260;
          v183[5].isa = (Class)v33;
          v35 = *(unsigned __int8 *)(v180 + 32);
          v31 = 1;
          v178 = 1 << v35;
          if (v173 >= 1 << v35)
            goto LABEL_127;
          v177 = v244;
          v184 = *(_QWORD *)(v244 + 8 * v25);
          if ((v184 & (1 << v173)) == 0)
            goto LABEL_128;
          v170 = v180;
          if (*(_DWORD *)(v180 + 36) != v175)
            goto LABEL_129;
          v185 = v184 & (-2 << (v173 & 0x3F));
          if (v185)
          {
            v178 = __clz(__rbit64(v185)) | v173 & 0xFFFFFFFFFFFFFFC0;
            v71 = (uint64_t)v250;
            v33 = v243;
          }
          else
          {
            v186 = v25 + 1;
            v187 = (v178 + 63) >> 6;
            v71 = (uint64_t)v250;
            v33 = v243;
            if (v25 + 1 < v187)
            {
              v188 = *(_QWORD *)(v244 + 8 * v186);
              if (!v188)
              {
                v186 = v25 + 2;
                if (v25 + 2 >= v187)
                  goto LABEL_83;
                v188 = *(_QWORD *)(v244 + 8 * v186);
                if (!v188)
                {
                  while (v187 - 3 != v25)
                  {
                    v188 = *(_QWORD *)(v220 + 8 * v25++);
                    if (v188)
                    {
                      v186 = v25 + 2;
                      goto LABEL_96;
                    }
                  }
                  goto LABEL_83;
                }
              }
LABEL_96:
              v178 = __clz(__rbit64(v188)) + (v186 << 6);
            }
          }
LABEL_83:
          v176 = v253 + 1;
          v175 = v242;
          v173 = v178;
          v25 = (uint64_t)v265;
          if (v253 + 1 == v33)
          {
            swift_bridgeObjectRelease();
            goto LABEL_106;
          }
        }
      }
      v28 = _swiftEmptyArrayStorage;
LABEL_106:
      v190 = v225;
      v191 = Array.description.getter(v28, &type metadata for String);
      v193 = v192;
      swift_bridgeObjectRelease();
      v270 = sub_10001A820(v191, v193, (uint64_t *)&v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v241);
      swift_bridgeObjectRelease_n(v170, 2);
      swift_bridgeObjectRelease();
      v194 = v226;
      _os_log_impl((void *)&_mh_execute_header, v226, (os_log_type_t)v223, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v190, 0x2Cu);
      v195 = sub_10001A630((uint64_t *)&unk_100839E70);
      v196 = v222;
      swift_arrayDestroy(v222, 1, v195);
      swift_slowDealloc(v196, -1, -1);
      v197 = v224;
      swift_arrayDestroy(v224, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v197, -1, -1);
      swift_slowDealloc(v190, -1, -1);

      v198 = v227;
      v73 = v71;
    }
    else
    {

      swift_bridgeObjectRelease_n(v71, 2);
      v189 = v260;

      swift_release_n(v122);
LABEL_103:
      v73 = (unint64_t)v250;
    }
    v85 = v238;
    v88 = v240;
    v86 = v262;
    v90 = v261;
    v70 = v251;
    v89 = v237;
    if (v240 == v238)
      goto LABEL_108;
  }

LABEL_62:
  if (v117 != 7)
    JUMPOUT(0x100601724);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v214 = (void *)objc_opt_self(REMError);
  v215 = v260;
  swift_willThrow(objc_msgSend(v214, "noSuchObjectErrorWithObjectID:", v260));

  v213 = (id *)&v269;
LABEL_114:

}

void sub_100602EC0(uint8_t *a1, uint64_t a2, const char *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  unsigned __int32 v28;
  BOOL v29;
  const char *v30;
  uint8_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  _QWORD *v62;
  id v63;
  uint8_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _BYTE *v70;
  const char *v71;
  unint64_t v72;
  unint64_t v73;
  __n128 v74;
  _BYTE *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  _QWORD *v80;
  uint8_t *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char **v90;
  id v91;
  BOOL v92;
  unint64_t v93;
  id v94;
  id v95;
  uint8_t *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(_BYTE *, uint64_t);
  uint64_t v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint8_t *v113;
  _QWORD *v114;
  char v115;
  uint64_t v116;
  id v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  id v131;
  id v132;
  id v133;
  id v134;
  NSObject *v135;
  int v136;
  BOOL v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  id v144;
  _QWORD *v145;
  id v146;
  _QWORD *v147;
  int64_t v148;
  uint8_t *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  os_log_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  void *v158;
  id v159;
  uint64_t v160;
  void *v161;
  char *v162;
  id v163;
  char v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  NSString v175;
  NSString v176;
  NSString v177;
  uint64_t v178;
  void *v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  _BYTE v186[12];
  int v187;
  _QWORD *v188;
  os_log_t v189;
  _QWORD *v190;
  char *v191;
  __n128 v192;
  __n128 v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  unint64_t v199;
  const char *v200;
  uint64_t v201;
  id v202;
  unint64_t v203;
  uint64_t *v204;
  void *v205;
  __n128 v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  _BYTE *v210;
  const char *v211;
  const char *v212;
  char *v213;
  uint64_t v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t v223;
  uint8_t *v224;
  uint64_t v225;
  _QWORD v226[4];
  _QWORD *v227;
  char v228[8];
  _QWORD *v229;
  uint64_t v230;

  v222 = a2;
  v224 = a1;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v215 = &v186[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v217 = type metadata accessor for UUID(0);
  v216 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v8 = &v186[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v11 = &v186[-v10];
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v186[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = (char *)*((_QWORD *)a3 + 3);
  v218 = (id)*((_QWORD *)a3 + 2);
  v214 = *((_QWORD *)a3 + 4);
  v223 = v3;
  v17 = *(_QWORD *)(v3 + 72);
  v226[3] = v17;
  v227 = (_QWORD *)v222;
  v226[2] = &v227;
  swift_bridgeObjectRetain(v16);
  v18 = (unint64_t)v224;
  swift_bridgeObjectRetain(v224);
  v19 = v18;
  v20 = v225;
  v21 = sub_1005CA184((uint64_t (*)(id *))sub_100673838, v226, v19);
  v224 = (uint8_t *)v20;
  if (v20)
    goto LABEL_30;
  v220 = v12;
  v213 = v16;
  v207 = v13;
  v208 = v15;
  v211 = a3;
  v225 = (uint64_t)v21;
  v22 = v223;
  v209 = v17;
  v210 = v11;
  v221 = v8;
  if (qword_1008371E8 != -1)
    goto LABEL_93;
LABEL_3:
  v23 = sub_10001AAA8(v220, (uint64_t)qword_100845DC0);
  v24 = v225;
  swift_bridgeObjectRetain_n(v225, 2);
  v25 = v213;
  swift_bridgeObjectRetain(v213);
  v219 = v23;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter(v27);
  v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
  v30 = (const char *)(v24 >> 62);
  v31 = v224;
  v212 = (const char *)(v24 >> 62);
  if (v29)
  {
    v22 = swift_slowAlloc(42, -1);
    v32 = (_QWORD *)swift_slowAlloc(96, -1);
    v227 = v32;
    *(_DWORD *)v22 = 136446978;
    v229 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    *(_WORD *)(v22 + 12) = 2048;
    v206.n128_u32[0] = v28;
    v205 = v32;
    if (!v30)
    {
      v33 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_99;
  }

  swift_bridgeObjectRelease_n(v25, 2);
  swift_bridgeObjectRelease_n(v24, 2);
  v44 = v220;
  v40 = v24;
  while (1)
  {
    if (v30)
    {
      v181 = v40 < 0 ? v40 : v40 & 0xFFFFFFFFFFFFFF8;
      v182 = v44;
      swift_bridgeObjectRetain(v40);
      v45 = _CocoaArrayWrapper.endIndex.getter(v181);
      swift_bridgeObjectRelease();
      v44 = v182;
    }
    else
    {
      v45 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v46 = (uint8_t *)_swiftEmptyArrayStorage;
    if (!v45)
      break;
    v227 = _swiftEmptyArrayStorage;
    v27 = &v227;
    specialized ContiguousArray.reserveCapacity(_:)(v45);
    if ((v45 & 0x8000000000000000) == 0)
    {
      v47 = 0;
      v48 = v40 & 0xC000000000000001;
      v22 = 0x8000000100709CF0;
      while (v45 != v47)
      {
        if (v48)
          v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v40);
        else
          v49 = *(id *)(v40 + 8 * v47 + 32);
        v50 = v49;
        v51 = sub_1005CDB68(objc_msgSend(v50, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert, 0xD000000000000016, (void *)0x8000000100709CF0);
        if (v31)
        {

          v58 = v227;
          swift_bridgeObjectRelease();
          swift_release(v58);
          return;
        }
        v52 = v51;
        ++v47;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v53);
        v54 = v227[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v54);
        v55 = v54;
        v40 = v225;
        v56 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v52);
        v43 = specialized ContiguousArray._endMutation()(v56);
        v31 = 0;
        if (v45 == v47)
        {
          v46 = (uint8_t *)v227;
          v22 = v223;
          v44 = v220;
          v30 = v212;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_93:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_3;
    }
    __break(1u);
LABEL_99:
    if (v225 < 0)
      v183 = v225;
    else
      v183 = v225 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v225);
    v33 = _CocoaArrayWrapper.endIndex.getter(v183);
    swift_bridgeObjectRelease();
LABEL_6:
    v34 = (uint64_t)v218;
    swift_bridgeObjectRelease();
    v229 = (_QWORD *)v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2082;
    v35 = type metadata accessor for REMCDDueDateDeltaAlert();
    v36 = objc_msgSend((id)swift_getObjCClassFromMetadata(v35), "description");
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    v229 = (_QWORD *)sub_10001A820(v37, v39, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    v40 = v225;
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 2082;
    v41 = (unint64_t)v213;
    swift_bridgeObjectRetain(v213);
    v229 = (_QWORD *)sub_10001A820(v34, v41, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    swift_bridgeObjectRelease_n(v41, 3);
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v206.n128_u8[0], "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v22, 0x2Au);
    v42 = v205;
    swift_arrayDestroy(v205, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v31 = v224;
    v22 = v223;
    v44 = v220;
    v30 = v212;
  }
LABEL_20:
  v57 = *(_QWORD *)(v22 + 96);
  if (v57 > 1)
  {
    if ((unint64_t)(v57 - 2) >= 3 && v57 != 4499 && v57 != 4599)
    {
LABEL_106:
      (*(void (**)(void *, uint64_t, uint64_t))(v207 + 16))(v208, v219, v44);
      v184 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v185 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v184, v185);
      __break(1u);
      JUMPOUT(0x100604E78);
    }
    goto LABEL_27;
  }
  if (!v57)
  {
LABEL_27:
    v59 = Logger.logObject.getter(v43);
    v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v224 = v46;
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = (_QWORD *)swift_slowAlloc(32, -1);
      v227 = v62;
      *(_DWORD *)v61 = 136315138;
      v218 = v61 + 4;
      v63 = objc_msgSend((id)type metadata accessor for REMCDDueDateDeltaAlert(), "cdEntityName");
      v64 = v31;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v67 = v66;

      v68 = v65;
      v31 = v64;
      v46 = v224;
      v229 = (_QWORD *)sub_10001A820(v68, v67, (uint64_t *)&v227);
      v40 = v225;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
      v30 = v212;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Performing fetch during upsert {CDType: %s}", v61, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      v69 = v62;
      v22 = v223;
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }

    v70 = v221;
    v71 = v211;
    sub_1006488F0((uint64_t)v46, (uint64_t)v211);
    v73 = v72;
    v74 = swift_bridgeObjectRelease();
    if (v31)
      goto LABEL_30;
    v75 = v210;
    goto LABEL_36;
  }
  if (v57 != 1)
    goto LABEL_106;
  swift_bridgeObjectRelease();
  v77 = Logger.logObject.getter(v76);
  v78 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v77, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc(12, -1);
    v80 = (_QWORD *)swift_slowAlloc(32, -1);
    v227 = v80;
    *(_DWORD *)v79 = 136315138;
    v224 = v79 + 4;
    v81 = v31;
    v82 = objc_msgSend((id)type metadata accessor for REMCDDueDateDeltaAlert(), "cdEntityName");
    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
    v85 = v84;

    v31 = v81;
    v229 = (_QWORD *)sub_10001A820(v83, v85, (uint64_t *)&v227);
    v40 = v225;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
    v22 = v223;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "Skipping fetch during upsert {CDType: %s}", v79, 0xCu);
    swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1, -1);
    swift_slowDealloc(v79, -1, -1);
  }

  v70 = v221;
  v75 = v210;
  v71 = v211;
  v30 = v212;
  v73 = sub_1002B1858((uint64_t)_swiftEmptyArrayStorage);
LABEL_36:
  v207 = v73;
  if (v30)
  {
    if (v40 < 0)
      v87 = v40;
    else
      v87 = v40 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v40);
    v86 = _CocoaArrayWrapper.endIndex.getter(v87);
    v74 = swift_bridgeObjectRelease();
    v224 = v31;
    if (!v86)
      goto LABEL_83;
  }
  else
  {
    v86 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    v224 = v31;
    if (!v86)
    {
LABEL_83:
      swift_bridgeObjectRelease();
LABEL_30:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v88 = 0;
  v198 = v22 + 24;
  v197 = v71 + 48;
  v200 = v71 + 56;
  v89 = v40 & 0xC000000000000001;
  v196 = v40 & 0xFFFFFFFFFFFFFF8;
  v195 = v40 + 32;
  v204 = &v230;
  v194 = (char *)&v229 + 4;
  v90 = &selRef_isConcealed;
  v205 = (void *)0x8000000100709CF0;
  v74.n128_u64[0] = 136446978;
  v192 = v74;
  v213 = "ype";
  v212 = "reminderIdentifier";
  v74.n128_u64[0] = 136447490;
  v193 = v74;
  v74.n128_u64[0] = 136446210;
  v206 = v74;
  v211 = "acknowledgedDate";
  v191 = (char *)&type metadata for Any + 8;
  v201 = v86;
  v199 = v40 & 0xC000000000000001;
  while (1)
  {
    if (v89)
    {
      v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v88, v40);
      v92 = __OFADD__(v88, 1);
      v93 = v88 + 1;
      if (v92)
        goto LABEL_103;
    }
    else
    {
      if (v88 >= *(_QWORD *)(v196 + 16))
        goto LABEL_104;
      v91 = *(id *)(v195 + 8 * v88);
      v92 = __OFADD__(v88, 1);
      v93 = v88 + 1;
      if (v92)
      {
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        swift_once(&qword_100837928, sub_1005A2648);
LABEL_85:
        v165 = sub_10001AAA8(v220, (uint64_t)qword_1008508E0);
        v166 = Logger.logObject.getter(v165);
        v167 = static os_log_type_t.error.getter(v166);
        if (os_log_type_enabled(v166, v167))
        {
          v168 = swift_slowAlloc(22, -1);
          v169 = (_QWORD *)swift_slowAlloc(64, -1);
          v227 = v169;
          *(_DWORD *)v168 = 136446466;
          v170 = sub_1005A26D8(1);
          v229 = (_QWORD *)sub_10001A820(v170, v171, (uint64_t *)&v227);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
          swift_bridgeObjectRelease();
          *(_WORD *)(v168 + 12) = 2082;
          v172 = sub_1005A26D8(v89);
          v229 = (_QWORD *)sub_10001A820(v172, v173, (uint64_t *)&v227);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, &v230);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v166, v167, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v168, 0x16u);
          swift_arrayDestroy(v169, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v169, -1, -1);
          swift_slowDealloc(v168, -1, -1);
        }

        v174 = (void *)objc_opt_self(REMError);
        v175 = String._bridgeToObjectiveC()();
        sub_1005A26D8(1);
        v176 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        sub_1005A26D8(v89);
        v177 = String._bridgeToObjectiveC()();
        objc_msgSend(v174, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v175, v176, v177, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v178);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n(v40, 2);
        return;
      }
    }
    v94 = v91;
    v95 = objc_msgSend(v94, v90[432]);
    v96 = v224;
    v218 = sub_1005CDB68(v95, (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert, 0xD000000000000016, v205);
    if (v96)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v224 = 0;
    v97 = v22;
    v203 = v93;
    v208 = v94;

    v98 = objc_msgSend(*(id *)(v222 + 16), "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v98);

    v100 = UUID.uuidString.getter(v99);
    v102 = v101;
    v103 = *(void (**)(_BYTE *, uint64_t))(v216 + 8);
    v104 = v217;
    v103(v75, v217);
    v105 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v106 = objc_msgSend(v105, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v106);
    v108 = UUID.uuidString.getter(v107);
    v110 = v109;
    v103(v70, v104);
    if (v100 == v108 && v102 == v110)
    {
      swift_bridgeObjectRelease_n(v102, 2);
      v22 = v97;
LABEL_55:
      __asm { BR              X10 }
    }
    v111 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v102, v108, v110, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v97;
    v112 = v207;
    if ((v111 & 1) != 0)
      goto LABEL_55;
    v113 = v224;
    v114 = sub_10065EDE4(v208, v209);
    if (v113)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v40 = (uint64_t)v114;
    v115 = sub_1005D0BE0();
    v116 = *(_QWORD *)(v112 + 16);
    v224 = 0;
    if (!v116)
      goto LABEL_61;
    v117 = v218;
    v118 = sub_1002C672C(v117);
    if ((v119 & 1) == 0)
      break;
    v202 = *(id *)(*(_QWORD *)(v112 + 56) + 8 * v118);

    v120 = *(_QWORD *)(v40 + 16);
    if (v120)
    {
      swift_bridgeObjectRetain(v40);
      v122 = 0;
      while (1)
      {
        if (((*(unsigned int *)(v22 + 64) | ((unint64_t)*(unsigned __int16 *)(v22 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
        {
          v123 = *(_BYTE *)(v40 + v122 + 32);
          v124 = Logger.logObject.getter(v121);
          v125 = static os_log_type_t.error.getter(v124);
          if (os_log_type_enabled(v124, v125))
          {
            v126 = swift_slowAlloc(12, -1);
            v127 = (_QWORD *)swift_slowAlloc(32, -1);
            v227 = v127;
            *(_DWORD *)v126 = v206.n128_u32[0];
            LOBYTE(v229) = v123;
            v128 = String.init<A>(describing:)(&v229, &type metadata for REMDueDateDeltaAlertCDIngestor.ValueKey);
            *(_QWORD *)(v126 + 4) = sub_10001A820(v128, v129, (uint64_t *)&v227);
            v22 = v223;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v124, v125, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v126, 0xCu);
            swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v127, -1, -1);
            swift_slowDealloc(v126, -1, -1);
          }

        }
        LODWORD(v89) = *(_DWORD *)(v22 + 64);
        if (*(unsigned __int16 *)(v22 + 68) >> 14 == 2 && (*(_DWORD *)(v22 + 64) & 1) == 0)
          break;
        if (v120 == ++v122)
        {
          swift_bridgeObjectRelease();
          v70 = v221;
          goto LABEL_76;
        }
      }
      if (qword_100837928 == -1)
        goto LABEL_85;
      goto LABEL_105;
    }
LABEL_76:
    swift_retain_n(v22);
    v131 = v218;
    swift_bridgeObjectRetain_n(v40, 2);
    v132 = v202;
    v133 = v131;
    v134 = v132;
    v135 = Logger.logObject.getter(v134);
    v136 = static os_log_type_t.default.getter(v135);
    v137 = os_log_type_enabled(v135, (os_log_type_t)v136);
    v218 = v133;
    if (v137)
    {
      v187 = v136;
      v189 = v135;
      v138 = swift_slowAlloc(58, -1);
      v190 = (_QWORD *)swift_slowAlloc(16, -1);
      v188 = (_QWORD *)swift_slowAlloc(96, -1);
      v227 = v188;
      *(_DWORD *)v138 = v193.n128_u32[0];
      v229 = (_QWORD *)sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v227);
      v139 = v204;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v204);
      v202 = v134;
      *(_WORD *)(v138 + 12) = 2082;
      sub_1000184A8(v198, (uint64_t)v228);
      sub_100671124((uint64_t)v228, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v141 = v140;
      v143 = v142;
      sub_100671124((uint64_t)v228, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v229 = (_QWORD *)sub_10001A820(v141, v143, (uint64_t *)&v227);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v139);
      swift_release_n(v22);
      swift_bridgeObjectRelease();
      *(_WORD *)(v138 + 22) = 2114;
      v229 = v133;
      v144 = v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v139);
      v145 = v190;
      *v190 = v133;

      *(_WORD *)(v138 + 32) = 2112;
      v146 = v202;
      v147 = objc_msgSend(v202, "objectID");
      v229 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v204);
      v145[1] = v147;

      *(_WORD *)(v138 + 42) = 2082;
      v148 = *(_QWORD *)(v40 + 16);
      if (v148)
      {
        v229 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v148, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v150 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v152 = v151;
      swift_bridgeObjectRelease();
      v229 = (_QWORD *)sub_10001A820(v150, v152, (uint64_t *)&v227);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v204);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v138 + 52) = 1024;
      v153 = *(unsigned __int8 *)(v22 + 104);
      swift_release(v22);
      LODWORD(v229) = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v194);
      swift_release(v22);
      v154 = v189;
      _os_log_impl((void *)&_mh_execute_header, v189, (os_log_type_t)v187, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v138, 0x3Au);
      v155 = sub_10001A630((uint64_t *)&unk_100839E70);
      v156 = v190;
      swift_arrayDestroy(v190, 2, v155);
      swift_slowDealloc(v156, -1, -1);
      v157 = v188;
      swift_arrayDestroy(v188, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v157, -1, -1);
      swift_slowDealloc(v138, -1, -1);

      v149 = v224;
      v134 = v202;
    }
    else
    {

      swift_release_n(v22);
      swift_bridgeObjectRelease_n(v40, 2);
      v149 = v224;
    }
    v158 = v208;
    sub_100678334((uint64_t)v208, (uint64_t)v134, v40);
    v90 = &selRef_isConcealed;
    v224 = v149;
    if (v149)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_30;
    }
    v159 = objc_msgSend(v134, "changedValues");
    v160 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v159, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v161 = v134;
    v162 = (char *)v200;
    swift_beginAccess(v200, &v227, 33, 0);
    v163 = v218;
    swift_bridgeObjectRetain(v160);
    swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v162);
    v229 = *(_QWORD **)v162;
    *(_QWORD *)v162 = 0x8000000000000000;
    sub_10028C70C(v160, v163, v164);
    *(_QWORD *)v162 = v229;

    swift_bridgeObjectRelease();
    swift_endAccess(&v227);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v88 = v203;
    v40 = v225;
    v75 = v210;
    v89 = v199;
    if (v203 == v201)
      goto LABEL_83;
  }

LABEL_61:
  if (v115 != 6 && *(_QWORD *)(v40 + 16))
  {
    swift_bridgeObjectRetain(v40);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v179 = (void *)objc_opt_self(REMError);
  v180 = v218;
  swift_willThrow(objc_msgSend(v179, "noSuchObjectErrorWithObjectID:", v218));

}

double sub_100604ED0(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t (*a4)(id *), uint64_t (*a5)(_QWORD), uint64_t a6, void *a7, void (*a8)(char *, uint64_t), uint64_t (*a9)(_QWORD *, uint64_t, __n128), void *a10, uint64_t (*a11)(void), void (*a12)(_QWORD *, char *, _QWORD *, __n128), uint64_t a13, uint64_t (*a14)(id *))
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t (*v33)(id *);
  _QWORD *v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *p_p_isa;
  int v41;
  BOOL v42;
  uint64_t v43;
  void *v44;
  uint64_t (*v45)(_QWORD, __n128);
  uint64_t (*v46)(id *);
  NSObject *v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  os_log_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  const char *v61;
  uint64_t (*v62)(id *);
  uint64_t v63;
  unint64_t v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t (*v78)(id *);
  _QWORD *v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  _QWORD *v94;
  id v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  id v104;
  BOOL v105;
  unint64_t v106;
  id v107;
  void *v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  id v117;
  id v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  __n128 v125;
  id v126;
  uint64_t v127;
  Swift::OpaquePointer v128;
  char v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  char v139;
  NSObject *v140;
  os_log_type_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  NSObject *v151;
  int v152;
  BOOL v153;
  uint64_t v154;
  char *v155;
  uint64_t (*v156)(id *);
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  NSObject *v163;
  int64_t v164;
  uint64_t v165;
  __n128 v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int v170;
  os_log_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  NSObject **v177;
  char *v178;
  char isUniquelyReferenced_nonNull_native;
  int v180;
  char *v181;
  char *v182;
  uint64_t v183;
  NSObject *v184;
  uint64_t v185;
  NSObject *v186;
  int v187;
  uint64_t v188;
  char *v189;
  NSObject *v190;
  NSObject *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t isa;
  NSObject *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  os_log_t v212;
  uint64_t v213;
  NSObject **v214;
  _QWORD *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  NSObject *v219;
  os_log_type_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char *v227;
  void *v228;
  NSString v229;
  NSString v230;
  NSString v231;
  uint64_t v232;
  void *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  _BYTE *v239;
  NSObject *v240;
  int v241;
  _QWORD *v242;
  _QWORD *v243;
  os_log_t v244;
  NSObject **v245;
  char *v246;
  __n128 v247;
  char *v248;
  __n128 v249;
  __n128 v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  NSObject **v258;
  void (*v259)(_QWORD *, char *, _QWORD *, __n128);
  _BYTE *v260;
  uint64_t (*v261)(void);
  unint64_t v262;
  uint64_t (*v263)(id *);
  void *v264;
  uint64_t (*v265)(_QWORD *, uint64_t, __n128);
  uint64_t v266;
  os_log_t v267;
  char *v268;
  __n128 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  _QWORD *v274;
  char *v275;
  uint64_t v276;
  char *v277;
  void (*v278)(char *, uint64_t);
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  void *v287;
  uint64_t v288;
  uint64_t (*v289)(id *);
  uint64_t v290;
  uint64_t v291;
  uint64_t (*v292)(_QWORD);
  _QWORD v293[4];
  _QWORD *p_isa;
  _BYTE v295[16];
  NSObject *v296;
  uint64_t v297;

  v278 = a8;
  v287 = a7;
  v290 = a6;
  v292 = a5;
  v289 = a4;
  v286 = a2;
  v285 = a1;
  v16 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v16);
  v281 = (char *)&v239 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v280 = (char *)&v239 - v19;
  v282 = type metadata accessor for UUID(0);
  v284 = *(_QWORD *)(v282 - 8);
  __chkstk_darwin(v282);
  v21 = (char *)&v239 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v239 - v23;
  v25 = type metadata accessor for Logger(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v239 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (char *)a3[3];
  v283 = (const char *)a3[2];
  v279 = a3[4];
  v288 = v14;
  v30 = *(_QWORD *)(v14 + 72);
  v293[3] = v30;
  p_isa = v286;
  v293[2] = &p_isa;
  swift_bridgeObjectRetain(v29);
  v31 = v285;
  swift_bridgeObjectRetain(v285);
  v32 = v31;
  v33 = (uint64_t (*)(id *))v291;
  v34 = sub_1005CA184(v289, v293, v32);
  v289 = v33;
  if (v33)
  {
LABEL_2:
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    return result;
  }
  v277 = v29;
  v269.n128_u64[0] = v26;
  v270 = (uint64_t)v28;
  v274 = a3;
  v291 = (uint64_t)v34;
  v272 = v30;
  v275 = v24;
  v273 = v21;
  v276 = v25;
  if (qword_1008371E8 != -1)
    goto LABEL_126;
  while (1)
  {
    v36 = sub_10001AAA8(v276, (uint64_t)qword_100845DC0);
    v37 = v291;
    swift_bridgeObjectRetain_n(v291, 2);
    v38 = v277;
    swift_bridgeObjectRetain(v277);
    v285 = v36;
    p_p_isa = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.info.getter(p_p_isa);
    v42 = os_log_type_enabled(p_p_isa, (os_log_type_t)v41);
    v43 = (unint64_t)v37 >> 62;
    v44 = v287;
    v45 = (uint64_t (*)(_QWORD, __n128))v292;
    v46 = v289;
    if (v42)
    {
      LODWORD(v268) = v41;
      v46 = (uint64_t (*)(id *))swift_slowAlloc(42, -1);
      v47 = swift_slowAlloc(96, -1);
      p_isa = &v47->isa;
      *(_DWORD *)v46 = 136446978;
      v296 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
      *((_WORD *)v46 + 6) = 2048;
      v267 = v47;
      if (v43)
        goto LABEL_138;
      v48 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
      swift_bridgeObjectRelease();
      v296 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
      v49 = swift_bridgeObjectRelease();
      *((_WORD *)v46 + 11) = 2082;
      v50 = v45(0, v49);
      v51 = objc_msgSend((id)swift_getObjCClassFromMetadata(v50), "description");
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v55 = v52;
      v37 = v291;
      v45 = (uint64_t (*)(_QWORD, __n128))v292;
      v296 = sub_10001A820(v55, v54, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
      swift_bridgeObjectRelease();
      *((_WORD *)v46 + 16) = 2082;
      v56 = (unint64_t)v277;
      swift_bridgeObjectRetain(v277);
      v296 = sub_10001A820((uint64_t)v283, v56, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
      swift_bridgeObjectRelease_n(v56, 3);
      _os_log_impl((void *)&_mh_execute_header, p_p_isa, (os_log_type_t)v268, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v46, 0x2Au);
      v57 = v267;
      swift_arrayDestroy(v267, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      v46 = v289;
      v44 = v287;
    }
    else
    {

      swift_bridgeObjectRelease_n(v38, 2);
      v59 = swift_bridgeObjectRelease_n(v37, 2);
    }
    if (v43)
    {
      v235 = v37 < 0 ? v37 : v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v37);
      v60 = _CocoaArrayWrapper.endIndex.getter(v235);
      v59 = swift_bridgeObjectRelease();
    }
    else
    {
      v60 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v61 = (const char *)_swiftEmptyArrayStorage;
    v271 = v43;
    if (!v60)
      break;
    v43 = (uint64_t)v44;
    v62 = v46;
    p_isa = _swiftEmptyArrayStorage;
    p_p_isa = &p_isa;
    specialized ContiguousArray.reserveCapacity(_:)(v60);
    if (v60 < 0)
      goto LABEL_137;
    v63 = 0;
    v64 = v37 & 0xC000000000000001;
    while (v60 != v63)
    {
      if (v64)
        v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v63, v37);
      else
        v65 = *(id *)(v37 + 8 * v63 + 32);
      v66 = v65;
      v67 = objc_msgSend(v66, "remObjectID");
      v68 = sub_1005CDB68(v67, v292, v290, (void *)v43);
      if (v62)
      {

        v74 = p_isa;
        swift_bridgeObjectRelease();
        swift_release(v74);
        return result;
      }
      v69 = v68;
      v62 = 0;
      ++v63;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v70);
      v71 = p_isa[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v71);
      v72 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v69);
      v58 = specialized ContiguousArray._endMutation()(v72);
      v37 = v291;
      if (v60 == v63)
      {
        v61 = (const char *)p_isa;
        v45 = (uint64_t (*)(_QWORD, __n128))v292;
        v46 = 0;
        v44 = (void *)v43;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_126:
    swift_once(&qword_1008371E8, sub_100331650);
  }
LABEL_21:
  v73 = *(_QWORD *)(v288 + 96);
  if (v73 <= 1)
  {
    if (v73)
    {
      if (v73 != 1)
        goto LABEL_145;
      swift_bridgeObjectRelease();
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v91, v92))
      {
        v93 = swift_slowAlloc(12, -1);
        v94 = (_QWORD *)swift_slowAlloc(32, -1);
        p_isa = v94;
        *(_DWORD *)v93 = 136315138;
        v289 = (uint64_t (*)(id *))(v93 + 4);
        v95 = objc_msgSend((id)((uint64_t (*)(_QWORD))v45)(0), "cdEntityName");
        v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
        v98 = v97;

        v99 = v96;
        v44 = v287;
        v296 = sub_10001A820(v99, v98, (uint64_t *)&p_isa);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
        v45 = (uint64_t (*)(_QWORD, __n128))v292;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Skipping fetch during upsert {CDType: %s}", (uint8_t *)v93, 0xCu);
        swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v94, -1, -1);
        swift_slowDealloc(v93, -1, -1);
      }

      v89 = v290;
      v85 = v275;
      v86 = v274;
      v270 = ((uint64_t (*)(_QWORD *))v278)(_swiftEmptyArrayStorage);
      goto LABEL_36;
    }
  }
  else if ((unint64_t)(v73 - 2) >= 3 && v73 != 4499 && v73 != 4599)
  {
LABEL_145:
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v269.n128_u64[0] + 16))(v270, v285, v276, v59);
    v237 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v238 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v237, v238);
    __break(1u);
    JUMPOUT(0x1006075DCLL);
  }
  v289 = a14;
  v75 = Logger.logObject.getter(v58);
  v76 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v75, v76))
  {
    v283 = v61;
    v77 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = v46;
    v79 = (_QWORD *)swift_slowAlloc(32, -1);
    p_isa = v79;
    *(_DWORD *)v77 = 136315138;
    v278 = (void (*)(char *, uint64_t))(v77 + 4);
    v80 = objc_msgSend((id)v292(0), "cdEntityName");
    v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v83 = v82;

    v44 = v287;
    v296 = sub_10001A820(v81, v83, (uint64_t *)&p_isa);
    v45 = (uint64_t (*)(_QWORD, __n128))v292;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
    v61 = v283;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Performing fetch during upsert {CDType: %s}", v77, 0xCu);
    swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
    v84 = v79;
    v46 = v78;
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v77, -1, -1);
  }

  v85 = v275;
  v86 = v274;
  v87 = ((uint64_t (*)(const char *, _QWORD *))v289)(v61, v274);
  v88 = swift_bridgeObjectRelease();
  if (v46)
    goto LABEL_2;
  v270 = v87;
  v89 = v290;
LABEL_36:
  if (v271)
  {
    if (v291 < 0)
      v101 = v291;
    else
      v101 = v291 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v291);
    v100 = _CocoaArrayWrapper.endIndex.getter(v101);
    v88 = swift_bridgeObjectRelease();
    if (!v100)
      goto LABEL_116;
  }
  else
  {
    v100 = *(_QWORD *)((v291 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v100)
    {
LABEL_116:
      swift_bridgeObjectRelease();
      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
      return result;
    }
  }
  v102 = 0;
  v271 = a13;
  v255 = v288 + 24;
  v254 = (char *)(v86 + 6);
  v258 = (NSObject **)(v86 + 7);
  v103 = v291 & 0xC000000000000001;
  v259 = a12;
  v261 = a11;
  v253 = v291 & 0xFFFFFFFFFFFFFF8;
  v252 = v291 + 32;
  v263 = (uint64_t (*)(id *))&v297;
  v264 = a10;
  v265 = a9;
  v251 = (char *)&v296 + 4;
  v88.n128_u64[0] = 136446978;
  v249 = v88;
  v88.n128_u64[0] = 136446210;
  v269 = v88;
  v88.n128_u64[0] = 136447490;
  v250 = v88;
  v88.n128_u64[0] = 136447234;
  v247 = v88;
  v283 = "daIsNotificationsCollection";
  v248 = (char *)&type metadata for Any + 8;
  v257 = v100;
  v256 = v291 & 0xC000000000000001;
  while (1)
  {
    if (v103)
    {
      v104 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v102, v291);
      v105 = __OFADD__(v102, 1);
      v106 = v102 + 1;
      if (v105)
        goto LABEL_142;
    }
    else
    {
      if (v102 >= *(_QWORD *)(v253 + 16))
        goto LABEL_143;
      v104 = *(id *)(v252 + 8 * v102);
      v105 = __OFADD__(v102, 1);
      v106 = v102 + 1;
      if (v105)
      {
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        swift_once(&qword_100837928, sub_1005A2648);
        v217 = v276;
LABEL_118:
        v218 = sub_10001AAA8(v217, (uint64_t)qword_1008508E0);
        v219 = Logger.logObject.getter(v218);
        v220 = static os_log_type_t.error.getter(v219);
        if (os_log_type_enabled(v219, v220))
        {
          v221 = swift_slowAlloc(22, -1);
          v222 = (_QWORD *)swift_slowAlloc(64, -1);
          p_isa = v222;
          *(_DWORD *)v221 = 136446466;
          v223 = sub_1005A26D8(1);
          v296 = sub_10001A820(v223, v224, (uint64_t *)&p_isa);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
          swift_bridgeObjectRelease();
          *(_WORD *)(v221 + 12) = 2082;
          v225 = sub_1005A26D8(v100);
          v296 = sub_10001A820(v225, v226, (uint64_t *)&p_isa);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, &v297);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v219, v220, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v221, 0x16u);
          swift_arrayDestroy(v222, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v222, -1, -1);
          swift_slowDealloc(v221, -1, -1);
        }

        v227 = v268;
        v228 = (void *)objc_opt_self(REMError);
        v229 = String._bridgeToObjectiveC()();
        sub_1005A26D8(1);
        v230 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        sub_1005A26D8(v100);
        v231 = String._bridgeToObjectiveC()();
        objc_msgSend(v228, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v229, v230, v231, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v232);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        *(_QWORD *)&result = swift_bridgeObjectRelease_n(v86, 2).n128_u64[0];
        return result;
      }
    }
    v107 = v104;
    v277 = (char *)sub_1005CDB68(objc_msgSend(v107, "remObjectID"), (uint64_t (*)(_QWORD))v45, v89, v44);
    if (v46)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return result;
    }
    v108 = v44;
    v289 = 0;
    v262 = v106;

    v274 = v107;
    v109 = objc_msgSend(v107, "accountID");
    v110 = objc_msgSend(v109, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v110);
    v112 = UUID.uuidString.getter(v111);
    v114 = v113;
    v115 = *(void (**)(char *, uint64_t))(v284 + 8);
    v116 = v282;
    v115(v85, v282);
    v117 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v118 = objc_msgSend(v117, "uuid");

    v119 = v273;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v118);

    v121 = UUID.uuidString.getter(v120);
    v123 = v122;
    v278 = v115;
    v115(v119, v116);
    if (v112 == v121 && v114 == v123)
    {
      swift_bridgeObjectRelease_n(v114, 2);
LABEL_55:
      __asm { BR              X10 }
    }
    v124 = _stringCompareWithSmolCheck(_:_:expecting:)(v112, v114, v121, v123, 0);
    swift_bridgeObjectRelease();
    v125 = swift_bridgeObjectRelease();
    if ((v124 & 1) != 0)
      goto LABEL_55;
    v126 = v274;
    v46 = v289;
    v44 = v108;
    v127 = v265(v274, v272, v125);
    if (v46)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return result;
    }
    v86 = (_QWORD *)v127;
    v128._rawValue = v264;
    v129 = sub_1005D1508(v128, v292);
    v130 = *(_QWORD *)(v270 + 16);
    v289 = 0;
    if (!v130)
      goto LABEL_61;
    v131 = v277;
    v132 = v270;
    v133 = v261();
    if ((v134 & 1) == 0)
      break;
    v268 = (char *)*(id *)(*(_QWORD *)(v132 + 56) + 8 * v133);
    v135 = v288;

    v136 = (void (*)(char *, uint64_t))v86[2];
    v278 = v136;
    if (v136)
    {
      swift_bridgeObjectRetain(v86);
      v138 = 0;
      while (1)
      {
        if (((*(unsigned int *)(v135 + 64) | ((unint64_t)*(unsigned __int16 *)(v135 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
        {
          v139 = *((_BYTE *)v86 + v138 + 32);
          v140 = Logger.logObject.getter(v137);
          v141 = static os_log_type_t.error.getter(v140);
          if (os_log_type_enabled(v140, v141))
          {
            v142 = swift_slowAlloc(12, -1);
            v143 = (_QWORD *)swift_slowAlloc(32, -1);
            p_isa = v143;
            *(_DWORD *)v142 = v269.n128_u32[0];
            LOBYTE(v296) = v139;
            v144 = String.init<A>(describing:)(&v296, v271);
            *(_QWORD *)(v142 + 4) = sub_10001A820(v144, v145, (uint64_t *)&p_isa);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v140, v141, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v142, 0xCu);
            swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v143, -1, -1);
            swift_slowDealloc(v142, -1, -1);
          }

          v135 = v288;
          v136 = v278;
        }
        LODWORD(v100) = *(_DWORD *)(v135 + 64);
        if (*(unsigned __int16 *)(v135 + 68) >> 14 == 2 && (*(_DWORD *)(v135 + 64) & 1) == 0)
          break;
        if (v136 == (void (*)(char *, uint64_t))++v138)
        {
          swift_bridgeObjectRelease();
          v46 = v289;
          v44 = v287;
          goto LABEL_76;
        }
      }
      v217 = v276;
      if (qword_100837928 == -1)
        goto LABEL_118;
      goto LABEL_144;
    }
LABEL_76:
    swift_retain_n(v135);
    v147 = v277;
    swift_bridgeObjectRetain_n(v86, 2);
    v148 = v268;
    v149 = v147;
    v150 = v148;
    v151 = Logger.logObject.getter(v150);
    v152 = static os_log_type_t.default.getter(v151);
    v153 = os_log_type_enabled(v151, (os_log_type_t)v152);
    v277 = v150;
    v268 = v149;
    if (v153)
    {
      LODWORD(v260) = v152;
      v267 = v151;
      v154 = swift_slowAlloc(58, -1);
      v155 = (char *)swift_slowAlloc(16, -1);
      v266 = swift_slowAlloc(96, -1);
      p_isa = (_QWORD *)v266;
      *(_DWORD *)v154 = v250.n128_u32[0];
      v296 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&p_isa);
      v156 = v263;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v263);
      *(_WORD *)(v154 + 12) = 2082;
      sub_1000184A8(v255, (uint64_t)v295);
      sub_100671124((uint64_t)v295, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v158 = v157;
      v160 = v159;
      sub_100671124((uint64_t)v295, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v296 = sub_10001A820(v158, v160, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v156);
      swift_release_n(v288);
      swift_bridgeObjectRelease();
      *(_WORD *)(v154 + 22) = 2114;
      v296 = v149;
      v161 = v149;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v156);
      *(_QWORD *)v155 = v149;

      *(_WORD *)(v154 + 32) = 2112;
      v162 = v277;
      v163 = objc_msgSend(v277, "objectID");
      v296 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v156);
      v246 = v155;
      *((_QWORD *)v155 + 1) = v163;

      *(_WORD *)(v154 + 42) = 2082;
      v164 = v86[2];
      if (v164)
      {
        v296 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v164, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v167 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v169 = v168;
      swift_bridgeObjectRelease();
      v296 = sub_10001A820(v167, v169, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v263);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v154 + 52) = 1024;
      v165 = v288;
      v170 = *(unsigned __int8 *)(v288 + 104);
      swift_release(v288);
      LODWORD(v296) = v170;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v251);
      swift_release(v165);
      v171 = v267;
      _os_log_impl((void *)&_mh_execute_header, v267, (os_log_type_t)v260, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v154, 0x3Au);
      v172 = sub_10001A630((uint64_t *)&unk_100839E70);
      v173 = v246;
      swift_arrayDestroy(v246, 2, v172);
      swift_slowDealloc(v173, -1, -1);
      v174 = v266;
      swift_arrayDestroy(v266, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v174, -1, -1);
      swift_slowDealloc(v154, -1, -1);

      v46 = v289;
      v44 = v287;
      v150 = v277;
    }
    else
    {

      v165 = v288;
      swift_release_n(v288);
      v166 = swift_bridgeObjectRelease_n(v86, 2);
    }
    v259(v274, v150, v86, v166);
    if (v46)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
      return result;
    }
    v175 = objc_msgSend(v150, "changedValues");
    v176 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v175, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v177 = v258;
    swift_beginAccess(v258, &p_isa, 33, 0);
    v178 = v268;
    swift_bridgeObjectRetain(v176);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v177);
    v296 = *v177;
    *v177 = 0x8000000000000000;
    v260 = (_BYTE *)v176;
    sub_10028C70C(v176, v178, isUniquelyReferenced_nonNull_native);
    *v177 = v296;

    swift_bridgeObjectRelease();
    swift_endAccess(&p_isa);
    v180 = *(unsigned __int8 *)(v165 + 104);
    v181 = v277;
    swift_bridgeObjectRelease();
    if (v278 && (v180 & 1) != 0)
    {
      objc_msgSend(v181, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      v45 = (uint64_t (*)(_QWORD, __n128))v292;
    }
    else
    {
      v246 = v181;
      v182 = v178;
      v183 = v288;
      swift_retain_n(v288);
      v184 = v182;
      v86 = v260;
      swift_bridgeObjectRetain(v260);
      v186 = Logger.logObject.getter(v185);
      v187 = static os_log_type_t.default.getter(v186);
      if (os_log_type_enabled(v186, (os_log_type_t)v187))
      {
        v241 = v187;
        v244 = v186;
        v289 = 0;
        v188 = swift_slowAlloc(44, -1);
        v245 = (NSObject **)swift_slowAlloc(8, -1);
        v242 = (_QWORD *)swift_slowAlloc(64, -1);
        p_isa = v242;
        *(_DWORD *)v188 = v247.n128_u32[0];
        v296 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&p_isa);
        v46 = v263;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v263);
        *(_WORD *)(v188 + 12) = 1024;
        swift_release(v183);
        LODWORD(v296) = v180;
        v189 = v251;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v251);
        swift_release(v183);
        *(_WORD *)(v188 + 18) = 1024;
        LODWORD(v296) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v189);
        *(_WORD *)(v188 + 24) = 2114;
        v296 = v184;
        v190 = v184;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v46);
        *v245 = v184;

        v240 = v190;
        v243 = (_QWORD *)v188;
        *(_WORD *)(v188 + 34) = 2082;
        v191 = v86[2];
        v45 = (uint64_t (*)(_QWORD, __n128))v292;
        if (!v191)
        {
          p_p_isa = _swiftEmptyArrayStorage;
          v46 = v289;
          v43 = (uint64_t)v86;
LABEL_114:
          v86 = v243;
          v209 = Array.description.getter(p_p_isa, &type metadata for String);
          v211 = v210;
          swift_bridgeObjectRelease();
          v296 = sub_10001A820(v209, v211, (uint64_t *)&p_isa);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v263);
          swift_bridgeObjectRelease_n(v43, 2);
          swift_bridgeObjectRelease();
          v212 = v244;
          _os_log_impl((void *)&_mh_execute_header, v244, (os_log_type_t)v241, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", (uint8_t *)v86, 0x2Cu);
          v213 = sub_10001A630((uint64_t *)&unk_100839E70);
          v214 = v245;
          swift_arrayDestroy(v245, 1, v213);
          swift_slowDealloc(v214, -1, -1);
          v215 = v242;
          swift_arrayDestroy(v242, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v215, -1, -1);
          swift_slowDealloc(v86, -1, -1);

          v216 = v246;
          goto LABEL_115;
        }
        v296 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v260);
        sub_1001C1B0C(0, (int64_t)v191, 0);
        p_p_isa = v296;
        v192 = sub_100658CFC((uint64_t)v260);
        v43 = (uint64_t)v260;
        v37 = v193;
        v194 = 0;
        v195 = v260 + 64;
        v196 = v260[32];
        v266 = v193;
        v239 = v260 + 96;
        v267 = v191;
        v268 = v260 + 64;
        while (2)
        {
          if (v192 < 0 || v192 >= 1 << v196)
          {
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            if (v37 < 0)
              v236 = v37;
            else
              v236 = v37 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v37);
            v48 = _CocoaArrayWrapper.endIndex.getter(v236);
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v198 = (unint64_t)v192 >> 6;
          if ((*(_QWORD *)&v195[8 * ((unint64_t)v192 >> 6)] & (1 << v192)) == 0)
            goto LABEL_132;
          if (*(_DWORD *)(v43 + 36) != (_DWORD)v37)
            goto LABEL_133;
          v277 = v194;
          v199 = *(_QWORD *)(v43 + 48) + 16 * v192;
          v46 = *(uint64_t (**)(id *))(v199 + 8);
          v278 = *(void (**)(char *, uint64_t))v199;
          v296 = p_p_isa;
          isa = (unint64_t)p_p_isa[2].isa;
          v200 = (unint64_t)p_p_isa[3].isa;
          v45 = (uint64_t (*)(_QWORD, __n128))(isa + 1);
          swift_bridgeObjectRetain(v46);
          if (isa >= v200 >> 1)
          {
            sub_1001C1B0C(v200 > 1, isa + 1, 1);
            p_p_isa = v296;
          }
          p_p_isa[2].isa = (Class)v45;
          v202 = &p_p_isa[2 * isa];
          v202[4].isa = (Class)v278;
          v202[5].isa = (Class)v46;
          v196 = *(_BYTE *)(v43 + 32);
          v197 = 1 << v196;
          if (v192 >= 1 << v196)
            goto LABEL_134;
          v195 = v268;
          v203 = *(_QWORD *)&v268[8 * v198];
          if ((v203 & (1 << v192)) == 0)
            goto LABEL_135;
          if (*(_DWORD *)(v43 + 36) != (_DWORD)v37)
            goto LABEL_136;
          v204 = v203 & (-2 << (v192 & 0x3F));
          if (v204)
          {
            v197 = __clz(__rbit64(v204)) | v192 & 0xFFFFFFFFFFFFFFC0;
            v46 = v289;
            v44 = v287;
            v45 = (uint64_t (*)(_QWORD, __n128))v292;
            goto LABEL_89;
          }
          v205 = v198 + 1;
          v206 = (v197 + 63) >> 6;
          v46 = v289;
          v45 = (uint64_t (*)(_QWORD, __n128))v292;
          if (v198 + 1 >= v206)
          {
            v44 = v287;
            goto LABEL_89;
          }
          v207 = *(_QWORD *)&v268[8 * v205];
          v44 = v287;
          if (v207)
            goto LABEL_102;
          v205 = v198 + 2;
          if (v198 + 2 < v206)
          {
            v207 = *(_QWORD *)&v268[8 * v205];
            if (v207)
              goto LABEL_102;
            v205 = v198 + 3;
            if (v198 + 3 >= v206)
              goto LABEL_89;
            v207 = *(_QWORD *)&v268[8 * v205];
            if (v207)
            {
LABEL_102:
              v197 = __clz(__rbit64(v207)) + (v205 << 6);
              goto LABEL_89;
            }
            while (v206 - 4 != v198)
            {
              v207 = *(_QWORD *)&v239[8 * v198++];
              if (v207)
              {
                v205 = v198 + 3;
                goto LABEL_102;
              }
            }
          }
LABEL_89:
          v194 = v277 + 1;
          v37 = v266;
          v192 = v197;
          if (v277 + 1 == (char *)v267)
          {
            swift_bridgeObjectRelease();
            goto LABEL_114;
          }
          continue;
        }
      }

      swift_bridgeObjectRelease_n(v86, 2);
      v208 = v246;

      swift_release_n(v183);
      v45 = (uint64_t (*)(_QWORD, __n128))v292;
    }
LABEL_115:
    LOWORD(v100) = v257;
    v102 = v262;
    v89 = v290;
    v85 = v275;
    v103 = v256;
    if (v262 == v257)
      goto LABEL_116;
  }

  v126 = v274;
LABEL_61:
  if (v129 != 4 && v86[2])
  {
    swift_bridgeObjectRetain(v86);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v233 = (void *)objc_opt_self(REMError);
  v234 = v277;
  swift_willThrow(objc_msgSend(v233, "noSuchObjectErrorWithObjectID:", v277));

  return result;
}

void sub_10060761C(uint64_t a1, _QWORD *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t isa;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  _QWORD *v62;
  _QWORD *v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  uint8_t *v73;
  __n128 v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  _QWORD *v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  id v90;
  id v91;
  char *v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  char *v100;
  uint64_t v101;
  id v102;
  id v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  void *v110;
  char *v111;
  char v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  char *v129;
  id v130;
  char *v131;
  id v132;
  NSObject *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  char *v142;
  char *v143;
  NSObject *v144;
  int64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  os_log_t v150;
  uint64_t v151;
  char *v152;
  _QWORD *v153;
  uint8_t *v154;
  id v155;
  uint64_t v156;
  NSObject **v157;
  char *v158;
  char isUniquelyReferenced_nonNull_native;
  int v160;
  char *v161;
  NSObject *v162;
  uint64_t v163;
  NSObject *v164;
  BOOL v165;
  char *v166;
  NSObject *v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  char *v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  NSObject *v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  unint64_t v182;
  unint64_t v183;
  uint8_t *v184;
  uint64_t v185;
  char *v186;
  os_log_t v187;
  uint64_t v188;
  NSObject **v189;
  _QWORD *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  os_log_type_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  NSString v203;
  NSString v204;
  NSString v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  NSObject *v213;
  _QWORD *v214;
  uint8_t *v215;
  os_log_t v216;
  char *v217;
  NSObject **v218;
  _QWORD *v219;
  __n128 v220;
  char *v221;
  __n128 v222;
  __n128 v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  NSObject **v231;
  unint64_t v232;
  void *v233;
  uint64_t *v234;
  os_log_t v235;
  _QWORD *v236;
  id v237;
  __n128 v238;
  unint64_t v239;
  _QWORD *v240;
  void *v241;
  uint64_t v242;
  const char *v243;
  char *v244;
  unint64_t v245;
  char *v246;
  uint8_t *v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint8_t *v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD v258[4];
  _QWORD *v259;
  char v260[8];
  NSObject *v261;
  uint64_t v262;

  v255 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v250 = (char *)&v212 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v249 = (char *)&v212 - v9;
  v253 = type metadata accessor for UUID(0);
  v252 = *(_QWORD *)(v253 - 8);
  __chkstk_darwin(v253);
  v251 = (char *)&v212 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v212 - v12;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v212 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (char *)*((_QWORD *)a3 + 3);
  v254 = (uint8_t *)*((_QWORD *)a3 + 2);
  v248 = *((_QWORD *)a3 + 4);
  v256 = v3;
  v19 = *(_QWORD *)(v3 + 72);
  v258[3] = v19;
  v259 = a2;
  v258[2] = &v259;
  swift_bridgeObjectRetain(v18);
  v20 = v255;
  swift_bridgeObjectRetain(v255);
  v21 = v20;
  v22 = v257;
  v23 = sub_1005CA184((uint64_t (*)(id *))sub_100673748, v258, v21);
  if (v22)
    goto LABEL_2;
  v240 = a2;
  v246 = v18;
  v238.n128_u64[0] = v15;
  v239 = (unint64_t)v17;
  v247 = 0;
  v243 = a3;
  v257 = v23;
  v242 = v19;
  v244 = v13;
  v245 = v14;
  if (qword_1008371E8 != -1)
    goto LABEL_122;
  while (1)
  {
    v24 = sub_10001AAA8(v245, (uint64_t)qword_100845DC0);
    isa = (uint64_t)v257;
    swift_bridgeObjectRetain_n(v257, 2);
    v26 = v246;
    swift_bridgeObjectRetain(v246);
    v255 = v24;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter(v28);
    v30 = os_log_type_enabled(v28, (os_log_type_t)v29);
    v31 = (unint64_t)isa >> 62;
    v32 = v256;
    if (v30)
    {
      v14 = swift_slowAlloc(42, -1);
      v33 = (_QWORD *)swift_slowAlloc(96, -1);
      v259 = v33;
      *(_DWORD *)v14 = 136446978;
      v261 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v259);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262);
      *(_WORD *)(v14 + 12) = 2048;
      LODWORD(v237) = v29;
      v236 = v33;
      v34 = (uint64_t)&v261;
      if (v31)
        goto LABEL_134;
      v35 = v247;
      v36 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
      swift_bridgeObjectRelease();
      v261 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262);
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 22) = 2082;
      v37 = type metadata accessor for REMCDListSection();
      v38 = objc_msgSend((id)swift_getObjCClassFromMetadata(v37), "description");
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      v261 = sub_10001A820(v39, v41, (uint64_t *)&v259);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262);
      isa = (uint64_t)v257;
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 32) = 2082;
      v42 = (unint64_t)v246;
      swift_bridgeObjectRetain(v246);
      v261 = sub_10001A820((uint64_t)v254, v42, (uint64_t *)&v259);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262);
      swift_bridgeObjectRelease_n(v42, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v237, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v14, 0x2Au);
      v43 = v236;
      swift_arrayDestroy(v236, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      v32 = v256;
    }
    else
    {
      v35 = v247;

      swift_bridgeObjectRelease_n(v26, 2);
      v45 = swift_bridgeObjectRelease_n(isa, 2);
    }
    if (v31)
    {
      v208 = isa < 0 ? isa : isa & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(isa);
      v46 = _CocoaArrayWrapper.endIndex.getter(v208);
      v45 = swift_bridgeObjectRelease();
    }
    else
    {
      v46 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v47 = (uint8_t *)_swiftEmptyArrayStorage;
    v241 = (void *)v31;
    if (!v46)
      break;
    v259 = _swiftEmptyArrayStorage;
    v28 = &v259;
    specialized ContiguousArray.reserveCapacity(_:)(v46);
    if (v46 < 0)
      goto LABEL_133;
    v48 = 0;
    v14 = isa & 0xC000000000000001;
    while (v46 != v48)
    {
      if (v14)
        v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, isa);
      else
        v49 = *(id *)(isa + 8 * v48 + 32);
      v50 = v49;
      v51 = sub_1005CDB68(objc_msgSend(v50, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDListSection, 0xD000000000000010, (void *)0x8000000100709BD0);
      if (v35)
      {

        v58 = v259;
        swift_bridgeObjectRelease();
        swift_release(v58);
        return;
      }
      v52 = v51;
      ++v48;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v53);
      v54 = v259[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v54);
      v55 = v54;
      isa = (uint64_t)v257;
      v56 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v52);
      v44 = specialized ContiguousArray._endMutation()(v56);
      if (v46 == v48)
      {
        v47 = (uint8_t *)v259;
        v32 = v256;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_122:
    swift_once(&qword_1008371E8, sub_100331650);
  }
LABEL_21:
  v57 = *(_QWORD *)(v32 + 96);
  if (v57 <= 1)
  {
    if (v57)
    {
      if (v57 != 1)
        goto LABEL_141;
      swift_bridgeObjectRelease();
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc(12, -1);
        v79 = (_QWORD *)swift_slowAlloc(32, -1);
        v259 = v79;
        *(_DWORD *)v78 = 136315138;
        v254 = v78 + 4;
        v80 = objc_msgSend((id)type metadata accessor for REMCDListSection(), "cdEntityName");
        v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
        v83 = v82;

        v261 = sub_10001A820(v81, v83, (uint64_t *)&v259);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262);
        isa = (uint64_t)v257;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Skipping fetch during upsert {CDType: %s}", v78, 0xCu);
        swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v78, -1, -1);
      }

      v69 = v244;
      v70 = (char *)v243;
      v239 = sub_1002B187C((uint64_t)_swiftEmptyArrayStorage);
      v73 = v35;
      v32 = v256;
      goto LABEL_36;
    }
  }
  else if ((unint64_t)(v57 - 2) >= 3 && v57 != 4499 && v57 != 4599)
  {
LABEL_141:
    (*(void (**)(unint64_t, uint64_t, unint64_t, __n128))(v238.n128_u64[0] + 16))(v239, v255, v245, v45);
    v210 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v211 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v210, v211);
    __break(1u);
    JUMPOUT(0x100609BB4);
  }
  v59 = Logger.logObject.getter(v44);
  v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc(12, -1);
    v62 = (_QWORD *)swift_slowAlloc(32, -1);
    v254 = v47;
    v63 = v62;
    v259 = v62;
    *(_DWORD *)v61 = 136315138;
    v247 = v61 + 4;
    v64 = objc_msgSend((id)type metadata accessor for REMCDListSection(), "cdEntityName");
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v67 = v66;

    v261 = sub_10001A820(v65, v67, (uint64_t *)&v259);
    isa = (uint64_t)v257;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262);
    v32 = v256;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Performing fetch during upsert {CDType: %s}", v61, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    v68 = v63;
    v47 = v254;
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v61, -1, -1);
  }

  v69 = v244;
  v70 = (char *)v243;
  sub_100649550((uint64_t)v47, (uint64_t)v243);
  v72 = v71;
  v73 = v35;
  v74 = swift_bridgeObjectRelease();
  if (v35)
    goto LABEL_2;
  v239 = v72;
LABEL_36:
  v84 = v32;
  if (v241)
  {
    if (isa < 0)
      v86 = isa;
    else
      v86 = isa & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(isa);
    v85 = _CocoaArrayWrapper.endIndex.getter(v86);
    v74 = swift_bridgeObjectRelease();
    if (!v85)
      goto LABEL_113;
  }
  else
  {
    v85 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v85)
    {
LABEL_113:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v87 = 0;
  v228 = v84 + 24;
  v227 = v70 + 48;
  v231 = (NSObject **)(v70 + 56);
  v88 = isa & 0xC000000000000001;
  v226 = isa & 0xFFFFFFFFFFFFFF8;
  v225 = isa + 32;
  v234 = &v262;
  v224 = (char *)&v261 + 4;
  v233 = (void *)0x8000000100709BD0;
  v74.n128_u64[0] = 136446978;
  v222 = v74;
  v74.n128_u64[0] = 136446210;
  v238 = v74;
  v74.n128_u64[0] = 136447490;
  v223 = v74;
  v74.n128_u64[0] = 136447234;
  v220 = v74;
  v243 = "daIsNotificationsCollection";
  v221 = (char *)&type metadata for Any + 8;
  v229 = isa & 0xC000000000000001;
  v230 = v85;
  while (1)
  {
    if (v88)
    {
      v89 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v87, isa);
    }
    else
    {
      if (v87 >= *(_QWORD *)(v226 + 16))
        goto LABEL_139;
      v89 = *(id *)(v225 + 8 * v87);
    }
    v232 = v87 + 1;
    if (__OFADD__(v87, 1))
    {
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      swift_once(&qword_100837928, sub_1005A2648);
      v192 = v245;
LABEL_115:
      v193 = sub_10001AAA8(v192, (uint64_t)qword_1008508E0);
      v194 = Logger.logObject.getter(v193);
      v195 = static os_log_type_t.error.getter(v194);
      if (os_log_type_enabled(v194, v195))
      {
        v196 = swift_slowAlloc(22, -1);
        v197 = (_QWORD *)swift_slowAlloc(64, -1);
        v259 = v197;
        *(_DWORD *)v196 = 136446466;
        v198 = sub_1005A26D8(1);
        v261 = sub_10001A820(v198, v199, (uint64_t *)&v259);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262);
        swift_bridgeObjectRelease();
        *(_WORD *)(v196 + 12) = 2082;
        v200 = sub_1005A26D8((__int16)v70);
        v261 = sub_10001A820(v200, v201, (uint64_t *)&v259);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &v262);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v194, v195, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v196, 0x16u);
        swift_arrayDestroy(v197, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v197, -1, -1);
        swift_slowDealloc(v196, -1, -1);
      }

      v202 = (void *)objc_opt_self(REMError);
      v203 = String._bridgeToObjectiveC()();
      sub_1005A26D8(1);
      v204 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_1005A26D8((__int16)v70);
      v205 = String._bridgeToObjectiveC()();
      objc_msgSend(v202, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v203, v204, v205, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v206);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n(isa, 2);
      return;
    }
    v90 = v89;
    v91 = objc_msgSend(v90, "remObjectID");
    v92 = (char *)sub_1005CDB68(v91, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListSection, 0xD000000000000010, v233);
    if (v73)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v246 = v92;

    v241 = v90;
    v93 = objc_msgSend(v90, "accountID");
    v94 = objc_msgSend(v93, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v96 = UUID.uuidString.getter(v95);
    v98 = v97;
    v99 = *(void (**)(char *, uint64_t))(v252 + 8);
    v100 = v69;
    v101 = v253;
    v99(v100, v253);
    v102 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v103 = objc_msgSend(v102, "uuid");

    v104 = v251;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v103);

    v106 = UUID.uuidString.getter(v105);
    v108 = v107;
    v99(v104, v101);
    if (v96 == v106 && v98 == v108)
    {
      swift_bridgeObjectRelease_n(v98, 2);
LABEL_54:
      __asm { BR              X10 }
    }
    v109 = _stringCompareWithSmolCheck(_:_:expecting:)(v96, v98, v106, v108, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v109 & 1) != 0)
      goto LABEL_54;
    v110 = v241;
    v111 = v246;
    isa = (uint64_t)sub_1006621E8(v241, v242, (uint64_t)&type metadata for REMListSectionStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CB3C4, &qword_1008518C8);
    v247 = 0;
    v112 = sub_1005D0F88();
    if (!*(_QWORD *)(v239 + 16))
      goto LABEL_59;
    v113 = v111;
    v114 = v239;
    v115 = sub_1002C672C(v113);
    if ((v116 & 1) == 0)
      break;
    v237 = *(id *)(*(_QWORD *)(v114 + 56) + 8 * v115);
    v117 = v256;

    v118 = *(_QWORD *)(isa + 16);
    v254 = (uint8_t *)v118;
    if (v118)
    {
      swift_bridgeObjectRetain(isa);
      v120 = 0;
      while (1)
      {
        if (((*(unsigned int *)(v117 + 64) | ((unint64_t)*(unsigned __int16 *)(v117 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
        {
          v121 = *(_BYTE *)(isa + v120 + 32);
          v122 = Logger.logObject.getter(v119);
          v123 = static os_log_type_t.error.getter(v122);
          if (os_log_type_enabled(v122, v123))
          {
            v124 = swift_slowAlloc(12, -1);
            v125 = (_QWORD *)swift_slowAlloc(32, -1);
            v259 = v125;
            *(_DWORD *)v124 = v238.n128_u32[0];
            LOBYTE(v261) = v121;
            v126 = String.init<A>(describing:)(&v261, &type metadata for REMListSectionStorageCDIngestor.ValueKey);
            *(_QWORD *)(v124 + 4) = sub_10001A820(v126, v127, (uint64_t *)&v259);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v122, v123, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v124, 0xCu);
            swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v125, -1, -1);
            v117 = v256;
            swift_slowDealloc(v124, -1, -1);
          }

          v118 = (uint64_t)v254;
        }
        LODWORD(v70) = *(_DWORD *)(v117 + 64);
        if (*(unsigned __int16 *)(v117 + 68) >> 14 == 2 && (*(_DWORD *)(v117 + 64) & 1) == 0)
          break;
        if (v118 == ++v120)
        {
          swift_bridgeObjectRelease();
          goto LABEL_74;
        }
      }
      v192 = v245;
      if (qword_100837928 == -1)
        goto LABEL_115;
      goto LABEL_140;
    }
LABEL_74:
    swift_retain_n(v117);
    v129 = v246;
    swift_bridgeObjectRetain_n(isa, 2);
    v130 = v237;
    v131 = v129;
    v132 = v130;
    v133 = Logger.logObject.getter(v132);
    v134 = static os_log_type_t.default.getter(v133);
    if (os_log_type_enabled(v133, (os_log_type_t)v134))
    {
      LODWORD(v218) = v134;
      v235 = v133;
      v135 = swift_slowAlloc(58, -1);
      v246 = (char *)swift_slowAlloc(16, -1);
      v219 = (_QWORD *)swift_slowAlloc(96, -1);
      v259 = v219;
      *(_DWORD *)v135 = v223.n128_u32[0];
      v261 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v259);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v234);
      *(_WORD *)(v135 + 12) = 2082;
      sub_1000184A8(v228, (uint64_t)v260);
      sub_100671124((uint64_t)v260, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v137 = v136;
      v138 = v117;
      v140 = v139;
      sub_100671124((uint64_t)v260, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v261 = sub_10001A820(v137, v140, (uint64_t *)&v259);
      v141 = v234;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v234);
      swift_release_n(v138);
      swift_bridgeObjectRelease();
      *(_WORD *)(v135 + 22) = 2114;
      v261 = v131;
      v142 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v141);
      v236 = v131;
      v143 = v246;
      *(_QWORD *)v246 = v131;

      *(_WORD *)(v135 + 32) = 2112;
      v144 = objc_msgSend(v132, "objectID");
      v261 = v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v141);
      *((_QWORD *)v143 + 1) = v144;

      v237 = v132;
      *(_WORD *)(v135 + 42) = 2082;
      v145 = *(_QWORD *)(isa + 16);
      if (v145)
      {
        v261 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v145, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v146 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v148 = v147;
      swift_bridgeObjectRelease();
      v261 = sub_10001A820(v146, v148, (uint64_t *)&v259);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v234);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v135 + 52) = 1024;
      v117 = v256;
      v149 = *(unsigned __int8 *)(v256 + 104);
      swift_release(v256);
      LODWORD(v261) = v149;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v224);
      swift_release(v117);
      v150 = v235;
      _os_log_impl((void *)&_mh_execute_header, v235, (os_log_type_t)v218, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v135, 0x3Au);
      v151 = sub_10001A630((uint64_t *)&unk_100839E70);
      v152 = v246;
      swift_arrayDestroy(v246, 2, v151);
      swift_slowDealloc(v152, -1, -1);
      v153 = v219;
      swift_arrayDestroy(v219, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v153, -1, -1);
      swift_slowDealloc(v135, -1, -1);

      v132 = v237;
      v131 = (char *)v236;
    }
    else
    {

      swift_release_n(v117);
      swift_bridgeObjectRelease_n(isa, 2);
    }
    v154 = v247;
    sub_10030F530(v241, v132, isa);
    if (v154)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_2;
    }
    v247 = 0;
    v155 = objc_msgSend(v132, "changedValues");
    v156 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v155, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v157 = v231;
    swift_beginAccess(v231, &v259, 33, 0);
    v158 = v131;
    swift_bridgeObjectRetain(v156);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v157);
    v261 = *v157;
    *v157 = 0x8000000000000000;
    sub_10028C70C(v156, v158, isUniquelyReferenced_nonNull_native);
    *v157 = v261;

    swift_bridgeObjectRelease();
    swift_endAccess(&v259);
    v160 = *(unsigned __int8 *)(v117 + 104);
    v70 = (char *)v132;
    swift_bridgeObjectRelease();
    if (v254 && (v160 & 1) != 0)
    {
      objc_msgSend(v70, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      isa = (uint64_t)v257;
    }
    else
    {
      v161 = v158;
      swift_retain_n(v117);
      v162 = v161;
      swift_bridgeObjectRetain(v156);
      v164 = Logger.logObject.getter(v163);
      LODWORD(v219) = static os_log_type_t.default.getter(v164);
      v165 = os_log_type_enabled(v164, (os_log_type_t)v219);
      isa = (uint64_t)v257;
      if (v165)
      {
        v216 = v164;
        v217 = v70;
        isa = swift_slowAlloc(44, -1);
        v218 = (NSObject **)swift_slowAlloc(8, -1);
        v214 = (_QWORD *)swift_slowAlloc(64, -1);
        v259 = v214;
        *(_DWORD *)isa = v220.n128_u32[0];
        v261 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v259);
        v31 = (unint64_t)v234;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v234);
        *(_WORD *)(isa + 12) = 1024;
        swift_release(v117);
        LODWORD(v261) = v160;
        v166 = v224;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v224);
        swift_release(v117);
        *(_WORD *)(isa + 18) = 1024;
        LODWORD(v261) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v166);
        *(_WORD *)(isa + 24) = 2114;
        v261 = v162;
        v167 = v162;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v31);
        *v218 = v162;

        v213 = v167;
        v215 = (uint8_t *)isa;
        *(_WORD *)(isa + 34) = 2082;
        v14 = *(_QWORD *)(v156 + 16);
        if (!v14)
        {
          v28 = _swiftEmptyArrayStorage;
          isa = (uint64_t)v257;
          v173 = v156;
LABEL_111:
          v184 = v215;
          v185 = Array.description.getter(v28, &type metadata for String);
          v70 = v186;
          swift_bridgeObjectRelease();
          v261 = sub_10001A820(v185, (unint64_t)v70, (uint64_t *)&v259);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, v234);
          swift_bridgeObjectRelease_n(v173, 2);
          swift_bridgeObjectRelease();
          v187 = v216;
          _os_log_impl((void *)&_mh_execute_header, v216, (os_log_type_t)v219, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v184, 0x2Cu);
          v188 = sub_10001A630((uint64_t *)&unk_100839E70);
          v189 = v218;
          swift_arrayDestroy(v218, 1, v188);
          swift_slowDealloc(v189, -1, -1);
          v190 = v214;
          swift_arrayDestroy(v214, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v190, -1, -1);
          swift_slowDealloc(v184, -1, -1);

          v191 = v217;
          goto LABEL_112;
        }
        v261 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v156);
        sub_1001C1B0C(0, v14, 0);
        v28 = v261;
        v168 = sub_100658CFC(v156);
        v170 = v169;
        v171 = 0;
        v172 = (_QWORD *)(v156 + 64);
        v34 = *(unsigned __int8 *)(v156 + 32);
        v235 = (os_log_t)v169;
        v212 = v156 + 96;
        v173 = v156;
        v236 = (_QWORD *)v14;
        v237 = (id)(v156 + 64);
        while (2)
        {
          if (v168 < 0 || (v34 = 1 << v34, v168 >= v34))
          {
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            v35 = *(uint8_t **)(v34 - 256);
            if (isa < 0)
              v209 = isa;
            else
              v209 = isa & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(isa);
            v36 = _CocoaArrayWrapper.endIndex.getter(v209);
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v31 = (unint64_t)v168 >> 6;
          v34 = v172[(unint64_t)v168 >> 6];
          v14 = 1 << v168;
          if ((v34 & (1 << v168)) == 0)
            goto LABEL_128;
          v34 = *(unsigned int *)(v156 + 36);
          if ((_DWORD)v34 != v170)
            goto LABEL_129;
          v246 = v171;
          v175 = (uint64_t *)(*(_QWORD *)(v156 + 48) + 16 * v168);
          v176 = v175[1];
          v254 = (uint8_t *)*v175;
          v261 = v28;
          isa = (uint64_t)v28[2].isa;
          v177 = (unint64_t)v28[3].isa;
          swift_bridgeObjectRetain(v176);
          if (isa >= v177 >> 1)
          {
            sub_1001C1B0C(v177 > 1, isa + 1, 1);
            v28 = v261;
          }
          v28[2].isa = (Class)(isa + 1);
          v178 = &v28[2 * isa];
          v178[4].isa = (Class)v254;
          v178[5].isa = (Class)v176;
          v34 = *(unsigned __int8 *)(v156 + 32);
          v174 = 1 << v34;
          if (v168 >= 1 << v34)
            goto LABEL_130;
          v172 = v237;
          v179 = *((_QWORD *)v237 + v31);
          if ((v179 & v14) == 0)
            goto LABEL_131;
          if (*(_DWORD *)(v156 + 36) != v170)
            goto LABEL_132;
          v180 = v179 & (-2 << (v168 & 0x3F));
          if (v180)
          {
            v174 = __clz(__rbit64(v180)) | v168 & 0xFFFFFFFFFFFFFFC0;
            isa = (uint64_t)v257;
            v14 = (unint64_t)v236;
            goto LABEL_87;
          }
          v181 = (char *)(v31 + 1);
          v182 = (v174 + 63) >> 6;
          isa = (uint64_t)v257;
          v14 = (unint64_t)v236;
          if (v31 + 1 < v182)
          {
            v183 = *((_QWORD *)v237 + (_QWORD)v181);
            if (v183)
              goto LABEL_100;
            v181 = (char *)(v31 + 2);
            if (v31 + 2 < v182)
            {
              v183 = *((_QWORD *)v237 + (_QWORD)v181);
              if (v183)
                goto LABEL_100;
              v181 = (char *)(v31 + 3);
              if (v31 + 3 >= v182)
                goto LABEL_87;
              v183 = *((_QWORD *)v237 + (_QWORD)v181);
              if (v183)
              {
LABEL_100:
                v174 = __clz(__rbit64(v183)) + ((_QWORD)v181 << 6);
                goto LABEL_87;
              }
              while (v182 - 4 != v31)
              {
                v183 = *(_QWORD *)(v212 + 8 * v31++);
                if (v183)
                {
                  v181 = (char *)(v31 + 3);
                  goto LABEL_100;
                }
              }
            }
          }
LABEL_87:
          v171 = v246 + 1;
          v170 = v235;
          v168 = v174;
          if (v246 + 1 == (char *)v14)
          {
            swift_bridgeObjectRelease();
            goto LABEL_111;
          }
          continue;
        }
      }

      swift_bridgeObjectRelease_n(v156, 2);
      swift_release_n(v117);
    }
LABEL_112:
    v87 = v232;
    v73 = v247;
    v69 = v244;
    v88 = v229;
    if (v232 == v230)
      goto LABEL_113;
  }

  v110 = v241;
LABEL_59:
  if (v112 != 5 && *(_QWORD *)(isa + 16))
  {
    swift_bridgeObjectRetain(isa);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v207 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v111);
  swift_willThrow(v207);

}

void sub_100609C00(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t isa;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject **v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  NSObject **v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject **v70;
  char *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  NSObject **v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  NSObject **v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  id v93;
  char *v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  id v114;
  unint64_t v115;
  unint64_t v116;
  char v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  NSObject *v123;
  os_log_type_t v124;
  _QWORD *v125;
  uint64_t v126;
  NSObject **v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  id v132;
  char *v133;
  NSObject *v134;
  char *v135;
  NSObject *v136;
  int v137;
  uint64_t v138;
  uint64_t *v139;
  NSObject *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  NSObject *v145;
  char *v146;
  NSObject *v147;
  uint64_t *v148;
  int64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  os_log_t v154;
  uint64_t v155;
  char *v156;
  NSObject **v157;
  uint8_t *v158;
  id v159;
  char *v160;
  NSObject **v161;
  NSObject *v162;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v164;
  int v165;
  char *v166;
  NSObject *v167;
  NSObject *v168;
  uint64_t v169;
  NSObject *v170;
  BOOL v171;
  uint64_t v172;
  uint64_t *v173;
  char *v174;
  int64_t v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  char *v179;
  _QWORD *v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  objc_class *v184;
  unint64_t v185;
  NSObject *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint8_t *v192;
  uint64_t v193;
  uint64_t v194;
  os_log_t v195;
  uint64_t v196;
  NSObject **v197;
  NSObject **v198;
  char *v199;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint64_t v203;
  NSObject **v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  NSString v210;
  NSString v211;
  NSString v212;
  uint64_t v213;
  void *v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  id v221;
  int v222;
  NSObject **v223;
  uint8_t *v224;
  os_log_t v225;
  char *v226;
  NSObject **v227;
  __n128 v228;
  char *v229;
  __n128 v230;
  __n128 v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  NSObject **v239;
  unint64_t v240;
  uint64_t *v241;
  const char *v242;
  const char *v243;
  const char *v244;
  char *v245;
  char *v246;
  const char *v247;
  os_log_t v248;
  NSObject *v249;
  _QWORD *v250;
  __n128 v251;
  unint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  uint8_t *v258;
  uint64_t v259;
  char *v260;
  char *v261;
  _QWORD *v262;
  uint64_t v263;
  id v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD v270[4];
  NSObject **v271;
  char v272[8];
  uint64_t v273;
  NSObject *v274;
  uint64_t v275;

  v267 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v261 = (char *)&v220 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v260 = (char *)&v220 - v9;
  v265 = type metadata accessor for UUID(0);
  v263 = *(_QWORD *)(v265 - 8);
  __chkstk_darwin(v265);
  v266 = (char *)&v220 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v220 - v12;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v220 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (char *)*((_QWORD *)a3 + 3);
  v264 = (id)*((_QWORD *)a3 + 2);
  v259 = *((_QWORD *)a3 + 4);
  v268 = v3;
  v19 = *(_QWORD *)(v3 + 72);
  v262 = a2;
  v270[3] = v19;
  v271 = (NSObject **)a2;
  v270[2] = &v271;
  swift_bridgeObjectRetain(v18);
  v20 = v267;
  swift_bridgeObjectRetain(v267);
  v21 = v20;
  v22 = v269;
  v23 = sub_1005CA184((uint64_t (*)(id *))sub_100673760, v270, v21);
  if (v22)
    goto LABEL_113;
  v257 = v18;
  v251.n128_u64[0] = v15;
  v252 = (unint64_t)v17;
  v258 = 0;
  v254 = a3;
  v24 = v268;
  v269 = v23;
  v253 = v19;
  v255 = v13;
  if (qword_1008371E8 != -1)
    goto LABEL_122;
  while (1)
  {
    v25 = v14;
    v26 = sub_10001AAA8(v14, (uint64_t)qword_100845DC0);
    isa = (uint64_t)v269;
    swift_bridgeObjectRetain_n(v269, 2);
    v28 = v257;
    swift_bridgeObjectRetain(v257);
    v267 = v26;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter(v30);
    v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
    v33 = (unint64_t)isa >> 62;
    v256 = v25;
    if (v32)
    {
      LODWORD(v250) = v31;
      v34 = (_QWORD *)swift_slowAlloc(42, -1);
      v35 = swift_slowAlloc(96, -1);
      v271 = (NSObject **)v35;
      *(_DWORD *)v34 = 136446978;
      v274 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
      *((_WORD *)v34 + 6) = 2048;
      v249 = v35;
      v36 = (uint64_t)&v273;
      if (v33)
        goto LABEL_134;
      v14 = (uint64_t)v258;
      v37 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
      swift_bridgeObjectRelease();
      v274 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
      swift_bridgeObjectRelease();
      *((_WORD *)v34 + 11) = 2082;
      v38 = type metadata accessor for REMCDTemplate();
      v39 = objc_msgSend((id)swift_getObjCClassFromMetadata(v38), "description");
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

      v274 = sub_10001A820(v40, v42, (uint64_t *)&v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
      isa = (uint64_t)v269;
      swift_bridgeObjectRelease();
      *((_WORD *)v34 + 16) = 2082;
      v43 = (unint64_t)v257;
      swift_bridgeObjectRetain(v257);
      v274 = sub_10001A820((uint64_t)v264, v43, (uint64_t *)&v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
      swift_bridgeObjectRelease_n(v43, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v250, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v34, 0x2Au);
      v44 = v249;
      swift_arrayDestroy(v249, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      v24 = v268;
      v25 = v256;
    }
    else
    {
      v14 = (uint64_t)v258;

      swift_bridgeObjectRelease_n(v28, 2);
      v46 = swift_bridgeObjectRelease_n(isa, 2);
    }
    if (v33)
    {
      v216 = isa < 0 ? isa : isa & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(isa);
      v47 = _CocoaArrayWrapper.endIndex.getter(v216);
      v46 = swift_bridgeObjectRelease();
    }
    else
    {
      v47 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v34 = _swiftEmptyArrayStorage;
    v264 = (id)v33;
    if (!v47)
      break;
    v271 = (NSObject **)_swiftEmptyArrayStorage;
    v30 = &v271;
    specialized ContiguousArray.reserveCapacity(_:)(v47);
    if (v47 < 0)
      goto LABEL_133;
    v48 = 0;
    v49 = isa & 0xC000000000000001;
    while (v47 != v48)
    {
      if (v49)
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, isa);
      else
        v50 = *(id *)(isa + 8 * v48 + 32);
      v51 = v50;
      v52 = sub_1005CDB68(objc_msgSend(v51, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, 0x6D655444434D4552, (void *)0xED00006574616C70);
      if (v14)
      {

        v58 = v271;
        swift_bridgeObjectRelease();
        swift_release(v58);
        return;
      }
      v24 = (uint64_t)v52;
      ++v48;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v53);
      v54 = v271[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v54);
      v55 = v54;
      isa = (uint64_t)v269;
      v56 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v24);
      v45 = specialized ContiguousArray._endMutation()(v56);
      if (v47 == v48)
      {
        v34 = v271;
        v24 = v268;
        v25 = v256;
        v33 = (uint64_t)v264;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_122:
    swift_once(&qword_1008371E8, sub_100331650);
  }
LABEL_20:
  v57 = *(_QWORD *)(v24 + 96);
  if (v57 <= 1)
  {
    if (v57)
    {
      if (v57 != 1)
        goto LABEL_141;
      swift_bridgeObjectRelease();
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(12, -1);
        v83 = (NSObject **)swift_slowAlloc(32, -1);
        v271 = v83;
        *(_DWORD *)v82 = 136315138;
        v258 = v82 + 4;
        v84 = objc_msgSend((id)type metadata accessor for REMCDTemplate(), "cdEntityName");
        v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
        v87 = v86;

        v88 = v268;
        v274 = sub_10001A820(v85, v87, (uint64_t *)&v271);
        v24 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
        isa = (uint64_t)v269;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Skipping fetch during upsert {CDType: %s}", v82, 0xCu);
        swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
        v89 = v83;
        v33 = (uint64_t)v264;
        swift_slowDealloc(v89, -1, -1);
        swift_slowDealloc(v82, -1, -1);
      }

      v71 = v266;
      v72 = v255;
      v73 = v254;
      v252 = sub_1002B1888((uint64_t)_swiftEmptyArrayStorage);
      v77 = v14;
      if (!v33)
        goto LABEL_31;
      goto LABEL_37;
    }
  }
  else if ((unint64_t)(v57 - 2) >= 3 && v57 != 4499 && v57 != 4599)
  {
LABEL_141:
    (*(void (**)(unint64_t, uint64_t, uint64_t, __n128))(v251.n128_u64[0] + 16))(v252, v267, v25, v46);
    v218 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v219 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v218, v219);
    __break(1u);
    JUMPOUT(0x10060C430);
  }
  v59 = Logger.logObject.getter(v45);
  v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc(12, -1);
    v62 = (NSObject **)swift_slowAlloc(32, -1);
    v271 = v62;
    *(_DWORD *)v61 = 136315138;
    v257 = (char *)(v61 + 4);
    v63 = objc_msgSend((id)type metadata accessor for REMCDTemplate(), "cdEntityName");
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v258 = (uint8_t *)v34;
    v65 = v64;
    v67 = v66;

    v68 = v65;
    v69 = v268;
    v274 = sub_10001A820(v68, v67, (uint64_t *)&v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Performing fetch during upsert {CDType: %s}", v61, 0xCu);
    swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
    v70 = v62;
    v24 = v69;
    v34 = v258;
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v61, -1, -1);
  }

  v71 = v266;
  v72 = v255;
  v33 = (uint64_t)v264;
  v73 = v254;
  sub_100649970((uint64_t)v34, (uint64_t)v254);
  v75 = v74;
  v76 = swift_bridgeObjectRelease();
  v77 = v14;
  if (v14)
    goto LABEL_113;
  v252 = v75;
  isa = (uint64_t)v269;
  if (!v33)
  {
LABEL_31:
    v78 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v78)
    {
LABEL_112:
      swift_bridgeObjectRelease();
LABEL_113:
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_41;
  }
LABEL_37:
  if (isa < 0)
    v90 = isa;
  else
    v90 = isa & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(isa);
  v78 = _CocoaArrayWrapper.endIndex.getter(v90);
  v76 = swift_bridgeObjectRelease();
  if (!v78)
    goto LABEL_112;
LABEL_41:
  v91 = 0;
  v236 = v24 + 24;
  v235 = v73 + 48;
  v239 = (NSObject **)(v73 + 56);
  v92 = isa & 0xC000000000000001;
  v234 = isa & 0xFFFFFFFFFFFFFF8;
  v233 = isa + 32;
  v241 = &v275;
  v232 = (char *)&v274 + 4;
  v76.n128_u64[0] = 136446978;
  v230 = v76;
  v247 = "daIsNotificationsCollection";
  v246 = "DsToCategorizeAsGroceryItems";
  v245 = "lendar";
  v244 = "remindersICSDisplayOrderChanged";
  v243 = "calDAVNotifications";
  v76.n128_u64[0] = 136446210;
  v251 = v76;
  v76.n128_u64[0] = 136447490;
  v231 = v76;
  v76.n128_u64[0] = 136447234;
  v228 = v76;
  v242 = "unsavedSectionIDsOrdering";
  v229 = (char *)&type metadata for Any + 8;
  v237 = isa & 0xC000000000000001;
  v238 = v78;
  while (1)
  {
    if (v92)
    {
      v93 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v91, isa);
    }
    else
    {
      if (v91 >= *(_QWORD *)(v234 + 16))
        goto LABEL_139;
      v93 = *(id *)(v233 + 8 * v91);
    }
    v240 = v91 + 1;
    if (__OFADD__(v91, 1))
    {
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      swift_once(&qword_100837928, sub_1005A2648);
LABEL_115:
      v200 = sub_10001AAA8(v256, (uint64_t)qword_1008508E0);
      v201 = Logger.logObject.getter(v200);
      v202 = static os_log_type_t.error.getter(v201);
      if (os_log_type_enabled(v201, v202))
      {
        v203 = swift_slowAlloc(22, -1);
        v204 = (NSObject **)swift_slowAlloc(64, -1);
        v271 = v204;
        *(_DWORD *)v203 = 136446466;
        v205 = sub_1005A26D8(1);
        v274 = sub_10001A820(v205, v206, (uint64_t *)&v271);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
        swift_bridgeObjectRelease();
        *(_WORD *)(v203 + 12) = 2082;
        v207 = sub_1005A26D8(v33);
        v274 = sub_10001A820(v207, v208, (uint64_t *)&v271);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v201, v202, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v203, 0x16u);
        swift_arrayDestroy(v204, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v204, -1, -1);
        swift_slowDealloc(v203, -1, -1);
      }

      v209 = (void *)objc_opt_self(REMError);
      v210 = String._bridgeToObjectiveC()();
      sub_1005A26D8(1);
      v211 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_1005A26D8(v33);
      v212 = String._bridgeToObjectiveC()();
      objc_msgSend(v209, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v210, v211, v212, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v213);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n(isa, 2);
      return;
    }
    v94 = (char *)v93;
    v264 = sub_1005CDB68(objc_msgSend(v94, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, 0x6D655444434D4552, (void *)0xED00006574616C70);
    if (v77)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }

    v254 = v94;
    v95 = objc_msgSend(v94, "accountID");
    v96 = objc_msgSend(v95, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v96);
    v98 = UUID.uuidString.getter(v97);
    v99 = v72;
    v100 = v98;
    v102 = v101;
    v103 = *(void (**)(char *, uint64_t))(v263 + 8);
    v104 = v265;
    v103(v99, v265);
    v105 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v106 = objc_msgSend(v105, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v106);
    v108 = UUID.uuidString.getter(v107);
    v110 = v109;
    v103(v71, v104);
    if (v100 == v108 && v102 == v110)
    {
      swift_bridgeObjectRelease_n(v102, 2);
LABEL_52:
      __asm { BR              X10 }
    }
    v111 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v102, v108, v110, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v111 & 1) != 0)
      goto LABEL_52;
    isa = (uint64_t)sub_1006621E8(v254, v253, (uint64_t)&type metadata for REMTemplateStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CAB6C, &qword_100851908);
    v112 = sub_1005D0654();
    v113 = *(_QWORD *)(v252 + 16);
    v258 = 0;
    if (!v113)
      goto LABEL_57;
    v114 = v264;
    v115 = v252;
    v116 = sub_1002C672C(v114);
    if ((v117 & 1) == 0)
      break;
    v257 = (char *)*(id *)(*(_QWORD *)(v115 + 56) + 8 * v116);

    v118 = *(_QWORD **)(isa + 16);
    if (v118)
    {
      swift_bridgeObjectRetain(isa);
      v120 = 0;
      while (1)
      {
        if (((*(unsigned int *)(v24 + 64) | ((unint64_t)*(unsigned __int16 *)(v24 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
        {
          v121 = v24;
          v122 = *(_BYTE *)(isa + v120 + 32);
          v123 = Logger.logObject.getter(v119);
          v124 = static os_log_type_t.error.getter(v123);
          if (os_log_type_enabled(v123, v124))
          {
            v125 = v118;
            v126 = swift_slowAlloc(12, -1);
            v127 = (NSObject **)swift_slowAlloc(32, -1);
            v271 = v127;
            *(_DWORD *)v126 = v251.n128_u32[0];
            LOBYTE(v274) = v122;
            v128 = String.init<A>(describing:)(&v274, &type metadata for REMTemplateStorageCDIngestor.ValueKey);
            *(_QWORD *)(v126 + 4) = sub_10001A820(v128, v129, (uint64_t *)&v271);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v123, v124, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v126, 0xCu);
            swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v127, -1, -1);
            v130 = v126;
            v118 = v125;
            swift_slowDealloc(v130, -1, -1);
          }

          v24 = v121;
        }
        LODWORD(v33) = *(_DWORD *)(v24 + 64);
        if (*(unsigned __int16 *)(v24 + 68) >> 14 == 2 && (*(_DWORD *)(v24 + 64) & 1) == 0)
          break;
        if (v118 == (_QWORD *)++v120)
        {
          swift_bridgeObjectRelease();
          goto LABEL_72;
        }
      }
      if (qword_100837928 == -1)
        goto LABEL_115;
      goto LABEL_140;
    }
LABEL_72:
    swift_retain_n(v24);
    v132 = v264;
    swift_bridgeObjectRetain_n(isa, 2);
    v133 = v257;
    v134 = v132;
    v135 = v133;
    v136 = Logger.logObject.getter(v135);
    v137 = static os_log_type_t.default.getter(v136);
    if (os_log_type_enabled(v136, (os_log_type_t)v137))
    {
      LODWORD(v226) = v137;
      v248 = v136;
      v250 = v118;
      v138 = swift_slowAlloc(58, -1);
      v257 = (char *)swift_slowAlloc(16, -1);
      v227 = (NSObject **)swift_slowAlloc(96, -1);
      v271 = v227;
      *(_DWORD *)v138 = v231.n128_u32[0];
      v274 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v271);
      v264 = v135;
      v139 = v241;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v241);
      v140 = v134;
      *(_WORD *)(v138 + 12) = 2082;
      sub_1000184A8(v236, (uint64_t)v272);
      sub_100671124((uint64_t)v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v142 = v141;
      v144 = v143;
      sub_100671124((uint64_t)v272, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v274 = sub_10001A820(v142, v144, (uint64_t *)&v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v139);
      swift_release_n(v24);
      swift_bridgeObjectRelease();
      *(_WORD *)(v138 + 22) = 2114;
      v274 = v134;
      v145 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v139);
      v249 = v134;
      v146 = v257;
      *(_QWORD *)v257 = v140;

      *(_WORD *)(v138 + 32) = 2112;
      v147 = objc_msgSend(v264, "objectID");
      v274 = v147;
      v148 = v139;
      v135 = (char *)v264;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v148);
      *((_QWORD *)v146 + 1) = v147;

      *(_WORD *)(v138 + 42) = 2082;
      v149 = *(_QWORD *)(isa + 16);
      if (v149)
      {
        v274 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v149, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v150 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v152 = v151;
      swift_bridgeObjectRelease();
      v274 = sub_10001A820(v150, v152, (uint64_t *)&v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v241);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v138 + 52) = 1024;
      v153 = *(unsigned __int8 *)(v24 + 104);
      swift_release(v24);
      LODWORD(v274) = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v232);
      swift_release(v24);
      v154 = v248;
      _os_log_impl((void *)&_mh_execute_header, v248, (os_log_type_t)v226, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v138, 0x3Au);
      v155 = sub_10001A630((uint64_t *)&unk_100839E70);
      v156 = v257;
      swift_arrayDestroy(v257, 2, v155);
      swift_slowDealloc(v156, -1, -1);
      v157 = v227;
      swift_arrayDestroy(v227, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v157, -1, -1);
      swift_slowDealloc(v138, -1, -1);

      v118 = v250;
      v134 = v249;
    }
    else
    {

      swift_release_n(v24);
      swift_bridgeObjectRelease_n(isa, 2);
    }
    v158 = v258;
    sub_10014D7F8(v254, v135, isa, v24);
    if (v158)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_113;
    }
    v258 = 0;
    v159 = objc_msgSend(v135, "changedValues");
    v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v159, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v160 = v135;
    v161 = v239;
    swift_beginAccess(v239, &v271, 33, 0);
    v162 = v134;
    swift_bridgeObjectRetain(v33);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v161);
    v274 = *v161;
    *v161 = 0x8000000000000000;
    v34 = (_QWORD *)v33;
    sub_10028C70C(v33, v162, isUniquelyReferenced_nonNull_native);
    *v161 = v274;

    swift_bridgeObjectRelease();
    swift_endAccess(&v271);
    v164 = v118;
    v165 = *(unsigned __int8 *)(v24 + 104);
    v166 = v160;
    swift_bridgeObjectRelease();
    if (v164 && (v165 & 1) != 0)
    {
      objc_msgSend(v166, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      isa = (uint64_t)v269;
    }
    else
    {
      v167 = v162;
      swift_retain_n(v24);
      v168 = v167;
      swift_bridgeObjectRetain(v33);
      v170 = Logger.logObject.getter(v169);
      LODWORD(v33) = static os_log_type_t.default.getter(v170);
      v171 = os_log_type_enabled(v170, (os_log_type_t)v33);
      isa = (uint64_t)v269;
      if (v171)
      {
        v222 = v33;
        v225 = v170;
        v226 = v166;
        v172 = swift_slowAlloc(44, -1);
        v227 = (NSObject **)swift_slowAlloc(8, -1);
        v223 = (NSObject **)swift_slowAlloc(64, -1);
        v271 = v223;
        *(_DWORD *)v172 = v228.n128_u32[0];
        v274 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v271);
        v173 = v241;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v241);
        *(_WORD *)(v172 + 12) = 1024;
        swift_release(v24);
        LODWORD(v274) = v165;
        v174 = v232;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v232);
        swift_release(v24);
        *(_WORD *)(v172 + 18) = 1024;
        LODWORD(v274) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v174);
        *(_WORD *)(v172 + 24) = 2114;
        v274 = v168;
        v33 = v168;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v173);
        *v227 = v168;

        v221 = (id)v33;
        v224 = (uint8_t *)v172;
        *(_WORD *)(v172 + 34) = 2082;
        v175 = v34[2];
        v71 = v266;
        if (!v175)
        {
          v30 = _swiftEmptyArrayStorage;
LABEL_110:
          v192 = v224;
          v193 = Array.description.getter(v30, &type metadata for String);
          v33 = v194;
          swift_bridgeObjectRelease();
          v274 = sub_10001A820(v193, v33, (uint64_t *)&v271);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, v241);
          swift_bridgeObjectRelease_n(v34, 2);
          swift_bridgeObjectRelease();
          v195 = v225;
          _os_log_impl((void *)&_mh_execute_header, v225, (os_log_type_t)v222, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v192, 0x2Cu);
          v196 = sub_10001A630((uint64_t *)&unk_100839E70);
          v197 = v227;
          swift_arrayDestroy(v227, 1, v196);
          swift_slowDealloc(v197, -1, -1);
          v198 = v223;
          swift_arrayDestroy(v223, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v198, -1, -1);
          swift_slowDealloc(v192, -1, -1);

          v199 = v226;
          goto LABEL_111;
        }
        v274 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v34);
        sub_1001C1B0C(0, v175, 0);
        v30 = v274;
        v176 = sub_100658CFC((uint64_t)v34);
        v178 = v177;
        v179 = 0;
        v180 = v34 + 8;
        v36 = *((unsigned __int8 *)v34 + 32);
        v248 = (os_log_t)v177;
        v220 = v34 + 12;
        v249 = v175;
        v250 = v34 + 8;
        while (2)
        {
          if (v176 < 0 || (v36 = 1 << v36, v176 >= v36))
          {
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            v14 = *(_QWORD *)(v36 - 256);
            if (isa < 0)
              v217 = isa;
            else
              v217 = isa & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(isa);
            v37 = _CocoaArrayWrapper.endIndex.getter(v217);
            swift_bridgeObjectRelease();
            goto LABEL_6;
          }
          v33 = (unint64_t)v176 >> 6;
          v36 = v180[(unint64_t)v176 >> 6];
          if ((v36 & (1 << v176)) == 0)
            goto LABEL_128;
          v36 = *((unsigned int *)v34 + 9);
          if ((_DWORD)v36 != v178)
            goto LABEL_129;
          v257 = v179;
          v183 = v34[6] + 16 * v176;
          v184 = *(objc_class **)(v183 + 8);
          v264 = *(id *)v183;
          v274 = v30;
          isa = (uint64_t)v30[2].isa;
          v185 = (unint64_t)v30[3].isa;
          swift_bridgeObjectRetain(v184);
          if (isa >= v185 >> 1)
          {
            sub_1001C1B0C(v185 > 1, isa + 1, 1);
            v30 = v274;
          }
          v30[2].isa = (Class)(isa + 1);
          v186 = &v30[2 * isa];
          v186[4].isa = (Class)v264;
          v186[5].isa = v184;
          v36 = *((unsigned __int8 *)v34 + 32);
          v181 = 1 << v36;
          if (v176 >= 1 << v36)
            goto LABEL_130;
          v180 = v250;
          v187 = v250[v33];
          if ((v187 & (1 << v176)) == 0)
            goto LABEL_131;
          if (*((_DWORD *)v34 + 9) != v178)
            goto LABEL_132;
          v188 = v187 & (-2 << (v176 & 0x3F));
          if (v188)
          {
            v181 = __clz(__rbit64(v188)) | v176 & 0xFFFFFFFFFFFFFFC0;
            v24 = v268;
            isa = (uint64_t)v269;
            v71 = v266;
            v182 = (char *)v249;
            goto LABEL_85;
          }
          v189 = v33 + 1;
          v190 = (v181 + 63) >> 6;
          v24 = v268;
          isa = (uint64_t)v269;
          v71 = v266;
          v182 = (char *)v249;
          if (v33 + 1 < v190)
          {
            v191 = v250[v189];
            if (v191)
              goto LABEL_98;
            v189 = v33 + 2;
            if (v33 + 2 < v190)
            {
              v191 = v250[v189];
              if (v191)
                goto LABEL_98;
              v189 = v33 + 3;
              if (v33 + 3 >= v190)
                goto LABEL_85;
              v191 = v250[v189];
              if (v191)
              {
LABEL_98:
                v181 = __clz(__rbit64(v191)) + (v189 << 6);
                goto LABEL_85;
              }
              while (v190 - 4 != v33)
              {
                v191 = v220[v33++];
                if (v191)
                {
                  v189 = v33 + 3;
                  goto LABEL_98;
                }
              }
            }
          }
LABEL_85:
          v179 = v257 + 1;
          v178 = v248;
          v176 = v181;
          if (v257 + 1 == v182)
          {
            swift_bridgeObjectRelease();
            goto LABEL_110;
          }
          continue;
        }
      }

      swift_bridgeObjectRelease_n(v34, 2);
      swift_release_n(v24);
    }
    v71 = v266;
LABEL_111:
    v91 = v240;
    v77 = (uint64_t)v258;
    v72 = v255;
    v92 = v237;
    if (v240 == v238)
      goto LABEL_112;
  }

LABEL_57:
  if (v112 != 12 && *(_QWORD *)(isa + 16))
  {
    swift_bridgeObjectRetain(isa);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v214 = (void *)objc_opt_self(REMError);
  v215 = v264;
  swift_willThrow(objc_msgSend(v214, "noSuchObjectErrorWithObjectID:", v264));

}

void sub_10060C4D0(uint8_t *a1, NSObject *a2, char *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t, uint64_t, __n128);
  uint64_t v16;
  char *v17;
  NSObject **v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject **v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  uint64_t v54;
  Class isa;
  Class v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  NSObject *v63;
  NSObject *v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  NSObject *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint8_t *v75;
  __n128 v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  NSObject *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  id v91;
  char *v92;
  NSObject **v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  id v105;
  id v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint8_t *v113;
  char *v114;
  _QWORD *v115;
  char v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  NSObject *v127;
  os_log_type_t v128;
  uint64_t v129;
  NSObject *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  id v135;
  void (**v136)(char *, uint64_t, uint64_t, __n128);
  NSObject *v137;
  void (**v138)(char *, uint64_t, uint64_t, __n128);
  NSObject *v139;
  int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  NSObject *v148;
  NSObject **v149;
  NSObject *v150;
  int64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  os_log_t v156;
  uint64_t v157;
  NSObject **v158;
  NSObject *v159;
  char *v160;
  uint8_t *v161;
  id v162;
  NSObject **v163;
  NSObject *v164;
  char isUniquelyReferenced_nonNull_native;
  int v166;
  NSObject *v167;
  NSObject *v168;
  uint64_t v169;
  NSObject *v170;
  BOOL v171;
  char *v172;
  NSObject *v173;
  int64_t v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  NSObject **v178;
  void (**v179)(char *, uint64_t, uint64_t, __n128);
  unint64_t v180;
  NSObject *v181;
  uint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  NSObject *v185;
  void (*v186)(char *, uint64_t, uint64_t, __n128);
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint8_t *v191;
  uint64_t v192;
  char *v193;
  os_log_t v194;
  uint64_t v195;
  NSObject **v196;
  NSObject *v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint64_t v203;
  NSObject *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void (**v209)(char *, uint64_t, uint64_t, __n128);
  void *v210;
  NSString v211;
  NSString v212;
  NSString v213;
  uint64_t v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  NSObject *v221;
  NSObject *v222;
  uint8_t *v223;
  os_log_t v224;
  id v225;
  NSObject **v226;
  NSObject *v227;
  __n128 v228;
  char *v229;
  __n128 v230;
  __n128 v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  NSObject **v239;
  unint64_t v240;
  uint64_t *v241;
  const char *v242;
  const char *v243;
  const char *v244;
  char *v245;
  const char *v246;
  os_log_t v247;
  NSObject *v248;
  void (**v249)(char *, uint64_t, uint64_t, __n128);
  char *v250;
  __n128 v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  NSObject **v256;
  uint64_t v257;
  char *v258;
  char *v259;
  NSObject *v260;
  char *v261;
  uint8_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint8_t *v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD v269[4];
  NSObject *v270;
  char v271[8];
  NSObject *v272;
  uint64_t v273;
  uint64_t v274;

  v266 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v259 = (char *)&v220 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v258 = (char *)&v220 - v9;
  v264 = type metadata accessor for UUID(0);
  v265 = *(_QWORD *)(v264 - 8);
  __chkstk_darwin(v264);
  v261 = (char *)&v220 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v220 - v12;
  v14 = type metadata accessor for Logger(0);
  v15 = *(void (***)(char *, uint64_t, uint64_t, __n128))(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v220 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (NSObject **)*((_QWORD *)a3 + 3);
  v262 = (uint8_t *)*((_QWORD *)a3 + 2);
  v257 = *((_QWORD *)a3 + 4);
  v267 = v3;
  v19 = *(_QWORD *)(v3 + 72);
  v260 = a2;
  v269[3] = v19;
  v270 = a2;
  v269[2] = &v270;
  swift_bridgeObjectRetain(v18);
  v20 = (unint64_t)v266;
  swift_bridgeObjectRetain(v266);
  v21 = v20;
  v22 = v268;
  v23 = sub_1005CA184((uint64_t (*)(id *))sub_100673790, v269, v21);
  if (v22)
    goto LABEL_2;
  v256 = v18;
  v249 = v15;
  v250 = v17;
  v266 = 0;
  v253 = a3;
  v268 = v23;
  v252 = v19;
  v254 = v13;
  v255 = v14;
  if (qword_1008371E8 != -1)
    goto LABEL_126;
  while (1)
  {
    v24 = sub_10001AAA8(v255, (uint64_t)qword_100845DC0);
    v25 = (uint64_t)v268;
    swift_bridgeObjectRetain_n(v268, 2);
    v26 = v256;
    swift_bridgeObjectRetain(v256);
    v263 = v24;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter(v28);
    v30 = os_log_type_enabled(v28, (os_log_type_t)v29);
    v31 = (unint64_t)v25 >> 62;
    v32 = v267;
    if (v30)
    {
      v32 = swift_slowAlloc(42, -1);
      v33 = swift_slowAlloc(96, -1);
      v270 = v33;
      *(_DWORD *)v32 = 136446978;
      v272 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
      *(_WORD *)(v32 + 12) = 2048;
      LODWORD(v248) = v29;
      v247 = v33;
      v34 = (uint64_t)&v274;
      if (v31)
        goto LABEL_138;
      v35 = v266;
      v36 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
      swift_bridgeObjectRelease();
      v272 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 22) = 2082;
      v37 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
      v38 = objc_msgSend((id)swift_getObjCClassFromMetadata(v37), "description");
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      v272 = sub_10001A820(v39, v41, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
      v25 = (uint64_t)v268;
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 32) = 2082;
      v42 = (unint64_t)v256;
      swift_bridgeObjectRetain(v256);
      v272 = sub_10001A820((uint64_t)v262, v42, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
      swift_bridgeObjectRelease_n(v42, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v248, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v32, 0x2Au);
      v43 = v247;
      swift_arrayDestroy(v247, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v32 = v267;
    }
    else
    {
      v35 = v266;

      swift_bridgeObjectRelease_n(v26, 2);
      v45 = swift_bridgeObjectRelease_n(v25, 2);
    }
    if (v31)
    {
      v216 = v25 < 0 ? v25 : v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v25);
      v46 = _CocoaArrayWrapper.endIndex.getter(v216);
      v45 = swift_bridgeObjectRelease();
    }
    else
    {
      v46 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v47 = (uint8_t *)_swiftEmptyArrayStorage;
    v251.n128_u64[0] = v31;
    if (!v46)
      break;
    v270 = _swiftEmptyArrayStorage;
    v28 = &v270;
    specialized ContiguousArray.reserveCapacity(_:)(v46);
    if (v46 < 0)
      goto LABEL_137;
    v48 = 0;
    v49 = v25 & 0xC000000000000001;
    while (v46 != v48)
    {
      if (v49)
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v25);
      else
        v50 = *(id *)(v25 + 8 * v48 + 32);
      v51 = v50;
      v52 = sub_1005CCBAC(objc_msgSend(v51, "remObjectID"), (unint64_t *)&unk_100840000, off_1007D6720);
      if (v35)
      {

        v59 = v270;
        swift_bridgeObjectRelease();
        swift_release(v59);
        return;
      }
      v53 = v52;
      ++v48;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v54);
      isa = v270[2].isa;
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(isa);
      v56 = isa;
      v25 = (uint64_t)v268;
      v57 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v53);
      v44 = specialized ContiguousArray._endMutation()(v57);
      if (v46 == v48)
      {
        v47 = (uint8_t *)v270;
        v32 = v267;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_126:
    swift_once(&qword_1008371E8, sub_100331650);
  }
LABEL_21:
  v58 = *(_QWORD *)(v32 + 96);
  if (v58 <= 1)
  {
    if (v58)
    {
      if (v58 != 1)
        goto LABEL_145;
      swift_bridgeObjectRelease();
      v78 = Logger.logObject.getter(v77);
      v79 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v78, v79))
      {
        v80 = (uint8_t *)swift_slowAlloc(12, -1);
        v81 = swift_slowAlloc(32, -1);
        v270 = v81;
        *(_DWORD *)v80 = 136315138;
        v266 = v80 + 4;
        v82 = objc_msgSend((id)objc_opt_self(REMCDSmartList), "cdEntityName");
        v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
        v85 = v84;

        v272 = sub_10001A820(v83, v85, (uint64_t *)&v270);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
        v25 = (uint64_t)v268;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Skipping fetch during upsert {CDType: %s}", v80, 0xCu);
        swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v80, -1, -1);
      }

      v70 = v265;
      v71 = v254;
      v72 = v253;
      v74 = sub_1002B1894((uint64_t)_swiftEmptyArrayStorage);
      v75 = v35;
      v32 = v267;
      goto LABEL_36;
    }
  }
  else if ((unint64_t)(v58 - 2) >= 3 && v58 != 4499 && v58 != 4599)
  {
LABEL_145:
    v249[2](v250, v263, v255, v45);
    v218 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v219 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v218, v219);
    __break(1u);
    JUMPOUT(0x10060EDA4);
  }
  v60 = Logger.logObject.getter(v44);
  v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = swift_slowAlloc(32, -1);
    v266 = v47;
    v64 = v63;
    v270 = v63;
    *(_DWORD *)v62 = 136315138;
    v262 = v62 + 4;
    v65 = objc_msgSend((id)objc_opt_self(REMCDSmartList), "cdEntityName");
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;

    v272 = sub_10001A820(v66, v68, (uint64_t *)&v270);
    v25 = (uint64_t)v268;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
    v32 = v267;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Performing fetch during upsert {CDType: %s}", v62, 0xCu);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    v69 = v64;
    v47 = v266;
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v62, -1, -1);
  }

  v70 = v265;
  v71 = v254;
  v72 = v253;
  sub_100649D90((uint64_t)v47, (uint64_t)v253);
  v74 = v73;
  v75 = v35;
  v76 = swift_bridgeObjectRelease();
  if (v35)
    goto LABEL_2;
LABEL_36:
  v86 = v75;
  v250 = (char *)v74;
  if (v251.n128_u64[0])
  {
    if (v25 < 0)
      v88 = v25;
    else
      v88 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v87 = _CocoaArrayWrapper.endIndex.getter(v88);
    v76 = swift_bridgeObjectRelease();
    if (!v87)
      goto LABEL_114;
  }
  else
  {
    v87 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v87)
    {
LABEL_114:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  v89 = 0;
  v236 = v32 + 24;
  v235 = v72 + 48;
  v239 = (NSObject **)(v72 + 56);
  v90 = v25 & 0xC000000000000001;
  v234 = v25 & 0xFFFFFFFFFFFFFF8;
  v233 = v25 + 32;
  v241 = &v273;
  v232 = (char *)&v272 + 4;
  v76.n128_u64[0] = 136446978;
  v230 = v76;
  v246 = "daIsNotificationsCollection";
  v245 = "DsToCategorizeAsGroceryItems";
  v244 = "remindersICSDisplayOrderChanged";
  v243 = "calDAVNotifications";
  v76.n128_u64[0] = 136446210;
  v251 = v76;
  v76.n128_u64[0] = 136447490;
  v231 = v76;
  v76.n128_u64[0] = 136447234;
  v228 = v76;
  v242 = "unsavedSectionIDsOrdering";
  v229 = (char *)&type metadata for Any + 8;
  v237 = v25 & 0xC000000000000001;
  v238 = v87;
  while (1)
  {
    if (v90)
    {
      v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v89, v25);
    }
    else
    {
      if (v89 >= *(_QWORD *)(v234 + 16))
        goto LABEL_143;
      v91 = *(id *)(v233 + 8 * v89);
    }
    v240 = v89 + 1;
    if (__OFADD__(v89, 1))
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      swift_once(&qword_100837928, sub_1005A2648);
      v199 = v255;
LABEL_116:
      v200 = sub_10001AAA8(v199, (uint64_t)qword_1008508E0);
      v201 = Logger.logObject.getter(v200);
      v202 = static os_log_type_t.error.getter(v201);
      if (os_log_type_enabled(v201, v202))
      {
        v203 = swift_slowAlloc(22, -1);
        v204 = swift_slowAlloc(64, -1);
        v270 = v204;
        *(_DWORD *)v203 = 136446466;
        v205 = sub_1005A26D8(1);
        v272 = sub_10001A820(v205, v206, (uint64_t *)&v270);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
        swift_bridgeObjectRelease();
        *(_WORD *)(v203 + 12) = 2082;
        v207 = sub_1005A26D8((__int16)v72);
        v272 = sub_10001A820(v207, v208, (uint64_t *)&v270);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
        v32 = (uint64_t)v256;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v201, v202, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v203, 0x16u);
        swift_arrayDestroy(v204, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v204, -1, -1);
        swift_slowDealloc(v203, -1, -1);
      }

      v209 = v249;
      v210 = (void *)objc_opt_self(REMError);
      v211 = String._bridgeToObjectiveC()();
      sub_1005A26D8(1);
      v212 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_1005A26D8((__int16)v72);
      v213 = String._bridgeToObjectiveC()();
      objc_msgSend(v210, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v211, v212, v213, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v214);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n(v25, 2);
      return;
    }
    v92 = (char *)v91;
    v93 = (NSObject **)sub_1005CCBAC(objc_msgSend(v92, "remObjectID"), (unint64_t *)&unk_100840000, off_1007D6720);
    if (v86)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v256 = v93;
    v266 = 0;

    v253 = v92;
    v94 = objc_msgSend(v92, "accountID");
    v95 = objc_msgSend(v94, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v95);
    v97 = UUID.uuidString.getter(v96);
    v98 = v71;
    v99 = v97;
    v101 = v100;
    v102 = v70;
    v103 = *(uint8_t **)(v70 + 8);
    v104 = v264;
    ((void (*)(char *, uint64_t))v103)(v98, v264);
    v105 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v106 = objc_msgSend(v105, "uuid");

    v107 = v261;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v106);

    v109 = UUID.uuidString.getter(v108);
    v111 = v110;
    v262 = v103;
    ((void (*)(char *, uint64_t))v103)(v107, v104);
    if (v99 == v109 && v101 == v111)
    {
      swift_bridgeObjectRelease_n(v101, 2);
LABEL_54:
      __asm { BR              X10 }
    }
    v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v99, v101, v109, v111, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = (uint64_t)v256;
    if ((v112 & 1) != 0)
      goto LABEL_54;
    v114 = v253;
    v70 = v102;
    v113 = v266;
    v115 = sub_1006621E8(v253, v252, (uint64_t)&type metadata for REMSmartListStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CAD84, &qword_1008519B0);
    if (v113)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v25 = (uint64_t)v115;
    v116 = sub_1005D0A00();
    v117 = v250;
    v118 = *((_QWORD *)v250 + 2);
    v119 = v267;
    v266 = 0;
    if (!v118)
      goto LABEL_60;
    v120 = (id)v32;
    v121 = sub_1002C672C(v120);
    if ((v122 & 1) == 0)
      break;
    v249 = (void (**)(char *, uint64_t, uint64_t, __n128))*(id *)(*((_QWORD *)v117 + 7) + 8 * v121);

    v123 = *(_QWORD *)(v25 + 16);
    v262 = (uint8_t *)v123;
    if (v123)
    {
      swift_bridgeObjectRetain(v25);
      v125 = 0;
      while (1)
      {
        if (((*(unsigned int *)(v119 + 64) | ((unint64_t)*(unsigned __int16 *)(v119 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
        {
          v126 = *(_BYTE *)(v25 + v125 + 32);
          v127 = Logger.logObject.getter(v124);
          v128 = static os_log_type_t.error.getter(v127);
          if (os_log_type_enabled(v127, v128))
          {
            v129 = swift_slowAlloc(12, -1);
            v130 = swift_slowAlloc(32, -1);
            v270 = v130;
            *(_DWORD *)v129 = v251.n128_u32[0];
            LOBYTE(v272) = v126;
            v131 = String.init<A>(describing:)(&v272, &type metadata for REMSmartListStorageCDIngestor.ValueKey);
            *(_QWORD *)(v129 + 4) = sub_10001A820(v131, v132, (uint64_t *)&v270);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v127, v128, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v129, 0xCu);
            swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v130, -1, -1);
            v133 = v129;
            v119 = v267;
            swift_slowDealloc(v133, -1, -1);
          }

          v123 = (uint64_t)v262;
        }
        LODWORD(v72) = *(_DWORD *)(v119 + 64);
        if (*(unsigned __int16 *)(v119 + 68) >> 14 == 2 && (*(_DWORD *)(v119 + 64) & 1) == 0)
          break;
        if (v123 == ++v125)
        {
          swift_bridgeObjectRelease();
          v70 = v265;
          goto LABEL_75;
        }
      }
      v199 = v255;
      if (qword_100837928 == -1)
        goto LABEL_116;
      goto LABEL_144;
    }
LABEL_75:
    swift_retain_n(v119);
    v135 = (id)v32;
    swift_bridgeObjectRetain_n(v25, 2);
    v136 = v249;
    v137 = v135;
    v138 = v136;
    v139 = Logger.logObject.getter(v138);
    v140 = static os_log_type_t.default.getter(v139);
    if (os_log_type_enabled(v139, (os_log_type_t)v140))
    {
      LODWORD(v226) = v140;
      v247 = v139;
      v141 = swift_slowAlloc(58, -1);
      v256 = (NSObject **)swift_slowAlloc(16, -1);
      v227 = swift_slowAlloc(96, -1);
      v270 = v227;
      *(_DWORD *)v141 = v231.n128_u32[0];
      v272 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v270);
      v142 = v241;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v241);
      *(_WORD *)(v141 + 12) = 2082;
      sub_1000184A8(v236, (uint64_t)v271);
      sub_100671124((uint64_t)v271, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v144 = v143;
      v145 = v119;
      v147 = v146;
      sub_100671124((uint64_t)v271, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v272 = sub_10001A820(v144, v147, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v142);
      swift_release_n(v145);
      swift_bridgeObjectRelease();
      *(_WORD *)(v141 + 22) = 2114;
      v272 = v137;
      v148 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v142);
      v248 = v137;
      v149 = v256;
      *v256 = v137;

      *(_WORD *)(v141 + 32) = 2112;
      v150 = objc_msgSend(v138, "objectID");
      v272 = v150;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v142);
      v149[1] = v150;

      v249 = v138;
      *(_WORD *)(v141 + 42) = 2082;
      v151 = *(_QWORD *)(v25 + 16);
      if (v151)
      {
        v272 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v151, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v152 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v154 = v153;
      swift_bridgeObjectRelease();
      v272 = sub_10001A820(v152, v154, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v241);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v141 + 52) = 1024;
      v119 = v267;
      v155 = *(unsigned __int8 *)(v267 + 104);
      swift_release(v267);
      LODWORD(v272) = v155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v232);
      swift_release(v119);
      v156 = v247;
      _os_log_impl((void *)&_mh_execute_header, v247, (os_log_type_t)v226, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v141, 0x3Au);
      v157 = sub_10001A630((uint64_t *)&unk_100839E70);
      v158 = v256;
      swift_arrayDestroy(v256, 2, v157);
      swift_slowDealloc(v158, -1, -1);
      v159 = v227;
      swift_arrayDestroy(v227, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v159, -1, -1);
      swift_slowDealloc(v141, -1, -1);

      v70 = v265;
      v138 = v249;
      v137 = v248;
    }
    else
    {

      swift_release_n(v119);
      swift_bridgeObjectRelease_n(v25, 2);
    }
    v160 = v253;
    v161 = v266;
    sub_10019F1AC(v253, v138, v25, v119);
    if (v161)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_2:
      swift_bridgeObjectRelease();
      return;
    }
    v266 = 0;
    v162 = objc_msgSend(v138, "changedValues");
    v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v162, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v163 = v239;
    swift_beginAccess(v239, &v270, 33, 0);
    v164 = v137;
    swift_bridgeObjectRetain(v32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v163);
    v272 = *v163;
    *v163 = 0x8000000000000000;
    sub_10028C70C(v32, v164, isUniquelyReferenced_nonNull_native);
    *v163 = v272;

    swift_bridgeObjectRelease();
    swift_endAccess(&v270);
    v166 = *(unsigned __int8 *)(v119 + 104);
    v72 = v138;
    swift_bridgeObjectRelease();
    if (v262 && (v166 & 1) != 0)
    {
      objc_msgSend(v72, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      v25 = (uint64_t)v268;
    }
    else
    {
      v167 = v164;
      swift_retain_n(v119);
      v168 = v167;
      swift_bridgeObjectRetain(v32);
      v170 = Logger.logObject.getter(v169);
      LODWORD(v227) = static os_log_type_t.default.getter(v170);
      v171 = os_log_type_enabled(v170, (os_log_type_t)v227);
      v25 = (uint64_t)v268;
      if (v171)
      {
        v224 = v170;
        v225 = v72;
        v25 = swift_slowAlloc(44, -1);
        v226 = (NSObject **)swift_slowAlloc(8, -1);
        v222 = swift_slowAlloc(64, -1);
        v270 = v222;
        *(_DWORD *)v25 = v228.n128_u32[0];
        v272 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v270);
        v31 = (unint64_t)v241;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v241);
        *(_WORD *)(v25 + 12) = 1024;
        swift_release(v119);
        LODWORD(v272) = v166;
        v172 = v232;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v232);
        swift_release(v119);
        *(_WORD *)(v25 + 18) = 1024;
        LODWORD(v272) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v172);
        *(_WORD *)(v25 + 24) = 2114;
        v272 = v168;
        v173 = v168;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v31);
        *v226 = v168;

        v221 = v173;
        v223 = (uint8_t *)v25;
        *(_WORD *)(v25 + 34) = 2082;
        v174 = *(_QWORD *)(v32 + 16);
        if (!v174)
        {
          v28 = _swiftEmptyArrayStorage;
          v25 = (uint64_t)v268;
LABEL_112:
          v191 = v223;
          v192 = Array.description.getter(v28, &type metadata for String);
          v72 = v193;
          swift_bridgeObjectRelease();
          v272 = sub_10001A820(v192, (unint64_t)v72, (uint64_t *)&v270);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, v241);
          swift_bridgeObjectRelease_n(v32, 2);
          swift_bridgeObjectRelease();
          v194 = v224;
          _os_log_impl((void *)&_mh_execute_header, v224, (os_log_type_t)v227, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v191, 0x2Cu);
          v195 = sub_10001A630((uint64_t *)&unk_100839E70);
          v196 = v226;
          swift_arrayDestroy(v226, 1, v195);
          swift_slowDealloc(v196, -1, -1);
          v197 = v222;
          swift_arrayDestroy(v222, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v197, -1, -1);
          swift_slowDealloc(v191, -1, -1);

          v198 = v225;
          goto LABEL_113;
        }
        v272 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v32);
        sub_1001C1B0C(0, v174, 0);
        v28 = v272;
        v175 = sub_100658CFC(v32);
        v177 = v176;
        v178 = 0;
        v179 = (void (**)(char *, uint64_t, uint64_t, __n128))(v32 + 64);
        v34 = *(unsigned __int8 *)(v32 + 32);
        v247 = (os_log_t)v176;
        v220 = v32 + 96;
        v248 = v174;
        v249 = (void (**)(char *, uint64_t, uint64_t, __n128))(v32 + 64);
        while (2)
        {
          if (v175 < 0 || (v34 = 1 << v34, v175 >= v34))
          {
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            v35 = *(uint8_t **)(v34 - 256);
            if (v25 < 0)
              v217 = v25;
            else
              v217 = v25 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v25);
            v36 = _CocoaArrayWrapper.endIndex.getter(v217);
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v31 = (unint64_t)v175 >> 6;
          v34 = (uint64_t)v179[(unint64_t)v175 >> 6];
          if ((v34 & (1 << v175)) == 0)
            goto LABEL_132;
          v34 = *(unsigned int *)(v32 + 36);
          if ((_DWORD)v34 != v177)
            goto LABEL_133;
          v256 = v178;
          v182 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v175);
          v183 = v182[1];
          v262 = (uint8_t *)*v182;
          v272 = v28;
          v25 = (uint64_t)v28[2].isa;
          v184 = (unint64_t)v28[3].isa;
          swift_bridgeObjectRetain(v183);
          if (v25 >= v184 >> 1)
          {
            sub_1001C1B0C(v184 > 1, v25 + 1, 1);
            v28 = v272;
          }
          v28[2].isa = (Class)(v25 + 1);
          v185 = &v28[2 * v25];
          v185[4].isa = (Class)v262;
          v185[5].isa = (Class)v183;
          v34 = *(unsigned __int8 *)(v32 + 32);
          v180 = 1 << v34;
          if (v175 >= 1 << v34)
            goto LABEL_134;
          v179 = v249;
          v186 = v249[v31];
          if (((unint64_t)v186 & (1 << v175)) == 0)
            goto LABEL_135;
          if (*(_DWORD *)(v32 + 36) != v177)
            goto LABEL_136;
          v187 = (unint64_t)v186 & (-2 << (v175 & 0x3F));
          if (v187)
          {
            v180 = __clz(__rbit64(v187)) | v175 & 0xFFFFFFFFFFFFFFC0;
            v25 = (uint64_t)v268;
            v70 = v265;
            v181 = v248;
            goto LABEL_88;
          }
          v188 = v31 + 1;
          v189 = (v180 + 63) >> 6;
          v25 = (uint64_t)v268;
          v70 = v265;
          v181 = v248;
          if (v31 + 1 < v189)
          {
            v190 = (unint64_t)v249[v188];
            if (v190)
              goto LABEL_101;
            v188 = v31 + 2;
            if (v31 + 2 < v189)
            {
              v190 = (unint64_t)v249[v188];
              if (v190)
                goto LABEL_101;
              v188 = v31 + 3;
              if (v31 + 3 >= v189)
                goto LABEL_88;
              v190 = (unint64_t)v249[v188];
              if (v190)
              {
LABEL_101:
                v180 = __clz(__rbit64(v190)) + (v188 << 6);
                goto LABEL_88;
              }
              while (v189 - 4 != v31)
              {
                v190 = *(_QWORD *)(v220 + 8 * v31++);
                if (v190)
                {
                  v188 = v31 + 3;
                  goto LABEL_101;
                }
              }
            }
          }
LABEL_88:
          v178 = (NSObject **)((char *)v256 + 1);
          v177 = v247;
          v175 = v180;
          if (((char *)v256 + 1) == v181)
          {
            swift_bridgeObjectRelease();
            goto LABEL_112;
          }
          continue;
        }
      }

      swift_bridgeObjectRelease_n(v32, 2);
      swift_release_n(v119);
    }
LABEL_113:
    v89 = v240;
    v86 = v266;
    v71 = v254;
    v90 = v237;
    if (v240 == v238)
      goto LABEL_114;
  }

LABEL_60:
  if (v116 == 14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(v25 + 16))
    {
      swift_bridgeObjectRetain(v25);
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = (uint64_t)v256;
  }
  v215 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v32);
  swift_willThrow(v215);

}

void sub_10060EE5C(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t isa;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  BOOL v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  _QWORD *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  __n128 v72;
  char *v73;
  char *v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  _QWORD *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  id v91;
  char *v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  unint64_t v115;
  char v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  id v130;
  char *v131;
  NSObject *v132;
  char *v133;
  NSObject *v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  NSObject *v143;
  char *v144;
  id v145;
  NSObject *v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  os_log_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  id v158;
  NSObject *v159;
  uint64_t v160;
  NSObject **v161;
  NSObject *v162;
  char isUniquelyReferenced_nonNull_native;
  int v164;
  NSObject *v165;
  NSObject *v166;
  uint64_t v167;
  NSObject *v168;
  BOOL v169;
  uint64_t *v170;
  char *v171;
  NSObject *v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  char *v177;
  NSObject *v178;
  char v179;
  unint64_t v180;
  uint64_t v181;
  objc_class *v182;
  unint64_t v183;
  uint64_t v184;
  NSObject *v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  uint8_t *v191;
  uint64_t v192;
  char *v193;
  os_log_t v194;
  uint64_t v195;
  NSObject **v196;
  _QWORD *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  NSString v210;
  NSString v211;
  NSString v212;
  uint64_t v213;
  void *v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  NSObject *v221;
  _QWORD *v222;
  uint8_t *v223;
  os_log_t v224;
  char *v225;
  NSObject **v226;
  int v227;
  __n128 v228;
  char *v229;
  __n128 v230;
  __n128 v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  NSObject **v239;
  uint64_t v240;
  const char *v241;
  const char *v242;
  const char *v243;
  const char *v244;
  const char *v245;
  const char *v246;
  const char *v247;
  const char *v248;
  const char *v249;
  unint64_t v250;
  uint64_t *v251;
  void *v252;
  uint64_t v253;
  os_log_t v254;
  NSObject *v255;
  unint64_t v256;
  __n128 v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  _DWORD *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  id v268;
  uint64_t v269;
  char *v270;
  _QWORD *v271;
  uint64_t v272;
  uint8_t *v273;
  _QWORD *v274;
  _QWORD v275[4];
  _QWORD *v276;
  char v277[8];
  NSObject *v278;
  uint64_t v279;

  v271 = a2;
  v273 = (uint8_t *)a1;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v266 = (char *)&v220 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v265 = (char *)&v220 - v8;
  v267 = type metadata accessor for UUID(0);
  v270 = *(char **)(v267 - 8);
  __chkstk_darwin(v267);
  v10 = (char *)&v220 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v220 - v12;
  v14 = type metadata accessor for Logger(0);
  v15 = *(NSObject **)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v220 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (char *)*((_QWORD *)a3 + 3);
  v268 = (id)*((_QWORD *)a3 + 2);
  v264 = *((_QWORD *)a3 + 4);
  v272 = v3;
  v19 = *(_QWORD *)(v3 + 72);
  v275[3] = v19;
  v276 = v271;
  v275[2] = &v276;
  swift_bridgeObjectRetain(v18);
  v20 = (uint64_t)v273;
  swift_bridgeObjectRetain(v273);
  v21 = v20;
  v22 = (uint64_t)v274;
  v23 = sub_1005CA184((uint64_t (*)(id *))sub_1006737A8, v275, v21);
  v273 = (uint8_t *)v22;
  if (v22)
    goto LABEL_2;
  v262 = v18;
  v255 = v15;
  v256 = (unint64_t)v17;
  v259 = (char *)a3;
  v274 = v23;
  v258 = v19;
  v260 = v13;
  v263 = v10;
  v261 = v14;
  if (qword_1008371E8 != -1)
    goto LABEL_124;
  while (1)
  {
    v24 = sub_10001AAA8(v261, (uint64_t)qword_100845DC0);
    isa = (uint64_t)v274;
    swift_bridgeObjectRetain_n(v274, 2);
    v26 = v262;
    swift_bridgeObjectRetain(v262);
    v269 = v24;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter(v28);
    v30 = os_log_type_enabled(v28, (os_log_type_t)v29);
    v31 = (unint64_t)isa >> 62;
    v32 = v272;
    v33 = (uint64_t)v273;
    if (v30)
    {
      a3 = (_DWORD *)swift_slowAlloc(42, -1);
      v34 = (_QWORD *)swift_slowAlloc(96, -1);
      v276 = v34;
      *a3 = 136446978;
      v278 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v276);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, &v279);
      *((_WORD *)a3 + 6) = 2048;
      LODWORD(v254) = v29;
      v253 = (uint64_t)v34;
      if (v31)
        goto LABEL_136;
      v35 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
      swift_bridgeObjectRelease();
      v278 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, &v279);
      swift_bridgeObjectRelease();
      *((_WORD *)a3 + 11) = 2082;
      v36 = type metadata accessor for REMCDSavedReminder();
      v37 = objc_msgSend((id)swift_getObjCClassFromMetadata(v36), "description");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

      v278 = sub_10001A820(v38, v40, (uint64_t *)&v276);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, &v279);
      isa = (uint64_t)v274;
      swift_bridgeObjectRelease();
      *((_WORD *)a3 + 16) = 2082;
      v41 = (unint64_t)v262;
      swift_bridgeObjectRetain(v262);
      v278 = sub_10001A820((uint64_t)v268, v41, (uint64_t *)&v276);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, &v279);
      swift_bridgeObjectRelease_n(v41, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v254, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)a3, 0x2Au);
      v42 = v253;
      swift_arrayDestroy(v253, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(a3, -1, -1);

      v33 = (uint64_t)v273;
      v32 = v272;
    }
    else
    {

      swift_bridgeObjectRelease_n(v26, 2);
      swift_bridgeObjectRelease_n(isa, 2);
    }
    if (v31)
    {
      v216 = isa < 0 ? isa : isa & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(isa);
      v43 = _CocoaArrayWrapper.endIndex.getter(v216);
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v257.n128_u64[0] = v31;
    if (!v43)
      break;
    v276 = _swiftEmptyArrayStorage;
    v28 = &v276;
    specialized ContiguousArray.reserveCapacity(_:)(v43);
    if (v43 < 0)
      goto LABEL_135;
    v44 = 0;
    v45 = isa & 0xC000000000000001;
    while (v43 != v44)
    {
      if (v45)
        v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, isa);
      else
        v46 = *(id *)(isa + 8 * v44 + 32);
      v47 = v46;
      v48 = sub_1005CDB68(objc_msgSend(v47, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder, 0xD000000000000012, (void *)0x80000001006FA060);
      a3 = (_DWORD *)v33;
      if (v33)
      {

        v56 = v276;
        swift_bridgeObjectRelease();
        swift_release(v56);
        return;
      }
      v49 = v48;
      ++v44;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v50);
      v51 = v276[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
      v52 = v51;
      isa = (uint64_t)v274;
      v53 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v49);
      specialized ContiguousArray._endMutation()(v53);
      v33 = 0;
      if (v43 == v44)
      {
        v54 = (uint8_t *)v276;
        v32 = v272;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_124:
    swift_once(&qword_1008371E8, sub_100331650);
  }
  v54 = (uint8_t *)_swiftEmptyArrayStorage;
LABEL_22:
  v55 = *(_QWORD *)(v32 + 96);
  if (v55 <= 1)
  {
    if (v55)
    {
      if (v55 != 1)
        goto LABEL_143;
      swift_bridgeObjectRelease();
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc(12, -1);
        v79 = (_QWORD *)swift_slowAlloc(32, -1);
        v276 = v79;
        *(_DWORD *)v78 = 136315138;
        v273 = v78 + 4;
        v80 = objc_msgSend((id)type metadata accessor for REMCDSavedReminder(), "cdEntityName");
        v81 = v33;
        v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
        v84 = v83;

        v85 = v82;
        v33 = v81;
        v278 = sub_10001A820(v85, v84, (uint64_t *)&v276);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, &v279);
        isa = (uint64_t)v274;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Skipping fetch during upsert {CDType: %s}", v78, 0xCu);
        swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v78, -1, -1);
      }

      v74 = v270;
      a3 = v263;
      v68 = v260;
      v73 = v259;
      v256 = sub_1002B18A0((uint64_t)_swiftEmptyArrayStorage);
      v32 = v272;
      goto LABEL_37;
    }
  }
  else if ((unint64_t)(v55 - 2) >= 3 && v55 != 4499 && v55 != 4599)
  {
LABEL_143:
    ((void (*)(unint64_t, uint64_t, uint64_t))v255[2].isa)(v256, v269, v261);
    v218 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v219 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v218, v219);
    __break(1u);
    JUMPOUT(0x1006119B4);
  }
  v273 = v54;
  v57 = Logger.logObject.getter(v54);
  v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = (_QWORD *)swift_slowAlloc(32, -1);
    v276 = v60;
    *(_DWORD *)v59 = 136315138;
    v268 = v59 + 4;
    v61 = v33;
    v62 = objc_msgSend((id)type metadata accessor for REMCDSavedReminder(), "cdEntityName");
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    v65 = v64;

    v33 = v61;
    v278 = sub_10001A820(v63, v65, (uint64_t *)&v276);
    isa = (uint64_t)v274;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, &v279);
    v66 = v272;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Performing fetch during upsert {CDType: %s}", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    v67 = v60;
    v32 = v66;
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v59, -1, -1);
  }

  a3 = v263;
  v68 = v260;
  v69 = v259;
  sub_10064A1B0((uint64_t)v273, (uint64_t)v259);
  v71 = v70;
  v72 = swift_bridgeObjectRelease();
  if (v33)
    goto LABEL_2;
  v73 = v69;
  v256 = v71;
  v74 = v270;
LABEL_37:
  if (v257.n128_u64[0])
  {
    if (isa < 0)
      v87 = isa;
    else
      v87 = isa & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(isa);
    v86 = _CocoaArrayWrapper.endIndex.getter(v87);
    v72 = swift_bridgeObjectRelease();
    if (!v86)
      goto LABEL_115;
  }
  else
  {
    v86 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v86)
    {
LABEL_115:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  v88 = 0;
  v236 = v32 + 24;
  v235 = v73 + 48;
  v239 = (NSObject **)(v73 + 56);
  v89 = isa & 0xC000000000000001;
  v234 = isa & 0xFFFFFFFFFFFFFF8;
  v233 = isa + 32;
  v251 = &v279;
  v232 = (char *)&v278 + 4;
  v252 = (void *)0x80000001006FA060;
  v72.n128_u64[0] = 136446978;
  v230 = v72;
  v249 = "debugSyncDisabled";
  v248 = "daIsNotificationsCollection";
  v247 = "daCalendarItemUniqueIdentifier";
  v246 = "lastModifiedDate";
  v245 = "startDateComponents";
  v244 = "dueDateComponents";
  v243 = "attachments";
  v242 = "dueDateDeltaAlertsData";
  v72.n128_u64[0] = 136446210;
  v257 = v72;
  v72.n128_u64[0] = 136447490;
  v231 = v72;
  v72.n128_u64[0] = 136447234;
  v228 = v72;
  v241 = "dueDateDeltaAlertsToUpsert";
  v229 = (char *)&type metadata for Any + 8;
  v237 = isa & 0xC000000000000001;
  v90 = v74;
  v238 = v86;
  while (1)
  {
    if (v89)
    {
      v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v88, isa);
    }
    else
    {
      if (v88 >= *(_QWORD *)(v234 + 16))
        goto LABEL_141;
      v91 = *(id *)(v233 + 8 * v88);
    }
    v250 = v88 + 1;
    if (__OFADD__(v88, 1))
    {
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      swift_once(&qword_100837928, sub_1005A2648);
      v199 = v261;
LABEL_117:
      v200 = sub_10001AAA8(v199, (uint64_t)qword_1008508E0);
      v201 = Logger.logObject.getter(v200);
      v202 = static os_log_type_t.error.getter(v201);
      if (os_log_type_enabled(v201, v202))
      {
        v203 = swift_slowAlloc(22, -1);
        v204 = (_QWORD *)swift_slowAlloc(64, -1);
        v276 = v204;
        *(_DWORD *)v203 = 136446466;
        v205 = sub_1005A26D8(1);
        v278 = sub_10001A820(v205, v206, (uint64_t *)&v276);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, &v279);
        swift_bridgeObjectRelease();
        *(_WORD *)(v203 + 12) = 2082;
        v207 = sub_1005A26D8((__int16)v74);
        v278 = sub_10001A820(v207, v208, (uint64_t *)&v276);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, &v279);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v201, v202, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v203, 0x16u);
        swift_arrayDestroy(v204, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v204, -1, -1);
        swift_slowDealloc(v203, -1, -1);
      }

      v209 = (void *)objc_opt_self(REMError);
      v210 = String._bridgeToObjectiveC()();
      sub_1005A26D8(1);
      v211 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_1005A26D8((__int16)v74);
      v212 = String._bridgeToObjectiveC()();
      objc_msgSend(v209, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v210, v211, v212, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v213);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n(isa, 2);
      return;
    }
    v92 = (char *)v91;
    v93 = objc_msgSend(v92, "remObjectID");
    v268 = sub_1005CDB68(v93, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder, 0xD000000000000012, v252);
    if (v33)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }

    v259 = v92;
    v94 = objc_msgSend(v92, "accountID");
    v95 = objc_msgSend(v94, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v95);
    v97 = UUID.uuidString.getter(v96);
    v98 = v68;
    v99 = v97;
    v101 = v100;
    v102 = (void (*)(char *, uint64_t))*((_QWORD *)v90 + 1);
    v103 = v267;
    v102(v98, v267);
    v104 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v105 = objc_msgSend(v104, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v105);
    v107 = UUID.uuidString.getter(v106);
    v109 = v108;
    v102((char *)a3, v103);
    if (v99 == v107 && v101 == v109)
    {
      swift_bridgeObjectRelease_n(v101, 2);
LABEL_55:
      __asm { BR              X10 }
    }
    v110 = _stringCompareWithSmolCheck(_:_:expecting:)(v99, v101, v107, v109, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v111 = v256;
    if ((v110 & 1) != 0)
      goto LABEL_55;
    isa = (uint64_t)sub_1006621E8(v259, v258, (uint64_t)&type metadata for REMSavedReminderStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CB5DC, &qword_1008519F8);
    v273 = 0;
    v112 = sub_1005D1338();
    v113 = v272;
    if (!*(_QWORD *)(v111 + 16))
      goto LABEL_60;
    v114 = v268;
    v115 = sub_1002C672C(v114);
    if ((v116 & 1) == 0)
      break;
    v117 = (char *)*(id *)(*(_QWORD *)(v111 + 56) + 8 * v115);

    v118 = *(_QWORD *)(isa + 16);
    if (v118)
    {
      v262 = v117;
      swift_bridgeObjectRetain(isa);
      v120 = 0;
      while (1)
      {
        if (((*(unsigned int *)(v113 + 64) | ((unint64_t)*(unsigned __int16 *)(v113 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
        {
          v121 = *(_BYTE *)(isa + v120 + 32);
          v122 = Logger.logObject.getter(v119);
          v123 = static os_log_type_t.error.getter(v122);
          if (os_log_type_enabled(v122, v123))
          {
            v124 = swift_slowAlloc(12, -1);
            v125 = (_QWORD *)swift_slowAlloc(32, -1);
            v276 = v125;
            *(_DWORD *)v124 = v257.n128_u32[0];
            LOBYTE(v278) = v121;
            v126 = String.init<A>(describing:)(&v278, &type metadata for REMSavedReminderStorageCDIngestor.ValueKey);
            *(_QWORD *)(v124 + 4) = sub_10001A820(v126, v127, (uint64_t *)&v276);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v122, v123, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v124, 0xCu);
            swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v125, -1, -1);
            v128 = v124;
            v113 = v272;
            swift_slowDealloc(v128, -1, -1);
          }

        }
        LODWORD(v74) = *(_DWORD *)(v113 + 64);
        if (*(unsigned __int16 *)(v113 + 68) >> 14 == 2 && (*(_DWORD *)(v113 + 64) & 1) == 0)
          break;
        if (v118 == ++v120)
        {
          swift_bridgeObjectRelease();
          v117 = v262;
          goto LABEL_75;
        }
      }
      v199 = v261;
      if (qword_100837928 == -1)
        goto LABEL_117;
      goto LABEL_142;
    }
LABEL_75:
    swift_retain_n(v113);
    v130 = v268;
    swift_bridgeObjectRetain_n(isa, 2);
    v131 = v117;
    v132 = v130;
    v133 = v131;
    v134 = Logger.logObject.getter(v133);
    v135 = static os_log_type_t.default.getter(v134);
    if (os_log_type_enabled(v134, (os_log_type_t)v135))
    {
      v227 = v135;
      v254 = v134;
      v136 = swift_slowAlloc(58, -1);
      v262 = (char *)swift_slowAlloc(16, -1);
      v240 = swift_slowAlloc(96, -1);
      v276 = (_QWORD *)v240;
      *(_DWORD *)v136 = v231.n128_u32[0];
      v278 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v276);
      v268 = v133;
      v137 = v251;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v251);
      *(_WORD *)(v136 + 12) = 2082;
      sub_1000184A8(v236, (uint64_t)v277);
      sub_100671124((uint64_t)v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v139 = v138;
      v140 = v113;
      v142 = v141;
      sub_100671124((uint64_t)v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v278 = sub_10001A820(v139, v142, (uint64_t *)&v276);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v137);
      swift_release_n(v140);
      swift_bridgeObjectRelease();
      *(_WORD *)(v136 + 22) = 2114;
      v278 = v132;
      v143 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v137);
      v255 = v132;
      v144 = v262;
      *(_QWORD *)v262 = v132;

      *(_WORD *)(v136 + 32) = 2112;
      v145 = v268;
      v146 = objc_msgSend(v268, "objectID");
      v278 = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v137);
      *((_QWORD *)v144 + 1) = v146;

      v253 = v136;
      *(_WORD *)(v136 + 42) = 2082;
      v147 = *(_QWORD *)(isa + 16);
      if (v147)
      {
        v278 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v147, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v149 = v253;
      v150 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v152 = v151;
      swift_bridgeObjectRelease();
      v278 = sub_10001A820(v150, v152, (uint64_t *)&v276);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v251);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v149 + 52) = 1024;
      v113 = v272;
      v153 = *(unsigned __int8 *)(v272 + 104);
      swift_release(v272);
      LODWORD(v278) = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v232);
      swift_release(v113);
      v154 = v254;
      _os_log_impl((void *)&_mh_execute_header, v254, (os_log_type_t)v227, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v149, 0x3Au);
      v155 = sub_10001A630((uint64_t *)&unk_100839E70);
      v156 = v262;
      swift_arrayDestroy(v262, 2, v155);
      swift_slowDealloc(v156, -1, -1);
      v157 = v240;
      swift_arrayDestroy(v240, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v157, -1, -1);
      swift_slowDealloc(v149, -1, -1);

      v148 = (uint64_t)v273;
      v133 = (char *)v268;
      v132 = v255;
    }
    else
    {

      swift_release_n(v113);
      swift_bridgeObjectRelease_n(isa, 2);
      v148 = (uint64_t)v273;
    }
    sub_100473DA8(v259, v133, isa, 0, v113);
    v33 = v148;
    if (v148)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_2:
      swift_bridgeObjectRelease();
      return;
    }
    v158 = objc_msgSend(v133, "changedValues");
    v159 = v132;
    v160 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v158, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v161 = v239;
    swift_beginAccess(v239, &v276, 33, 0);
    v162 = v159;
    swift_bridgeObjectRetain(v160);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v161);
    v278 = *v161;
    *v161 = 0x8000000000000000;
    v240 = v160;
    sub_10028C70C(v160, v162, isUniquelyReferenced_nonNull_native);
    *v161 = v278;

    swift_bridgeObjectRelease();
    swift_endAccess(&v276);
    v164 = *(unsigned __int8 *)(v113 + 104);
    v74 = v133;
    swift_bridgeObjectRelease();
    if (v118 && (v164 & 1) != 0)
    {
      objc_msgSend(v74, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      isa = (uint64_t)v274;
    }
    else
    {
      v165 = v162;
      swift_retain_n(v113);
      v166 = v165;
      a3 = (_DWORD *)v240;
      swift_bridgeObjectRetain(v240);
      v168 = Logger.logObject.getter(v167);
      v227 = static os_log_type_t.default.getter(v168);
      v169 = os_log_type_enabled(v168, (os_log_type_t)v227);
      isa = (uint64_t)v274;
      if (v169)
      {
        v224 = v168;
        v225 = v74;
        isa = swift_slowAlloc(44, -1);
        v226 = (NSObject **)swift_slowAlloc(8, -1);
        v222 = (_QWORD *)swift_slowAlloc(64, -1);
        v276 = v222;
        *(_DWORD *)isa = v228.n128_u32[0];
        v278 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v276);
        v170 = v251;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v251);
        *(_WORD *)(isa + 12) = 1024;
        swift_release(v113);
        LODWORD(v278) = v164;
        v171 = v232;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v232);
        swift_release(v113);
        *(_WORD *)(isa + 18) = 1024;
        LODWORD(v278) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v171);
        *(_WORD *)(isa + 24) = 2114;
        v278 = v166;
        v172 = v166;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v170);
        *v226 = v166;

        v221 = v172;
        v223 = (uint8_t *)isa;
        *(_WORD *)(isa + 34) = 2082;
        v31 = *((_QWORD *)a3 + 2);
        if (!v31)
        {
          v28 = _swiftEmptyArrayStorage;
          v90 = v270;
          a3 = v263;
          isa = (uint64_t)v274;
LABEL_113:
          v191 = v223;
          v192 = Array.description.getter(v28, &type metadata for String);
          v74 = v193;
          swift_bridgeObjectRelease();
          v278 = sub_10001A820(v192, (unint64_t)v74, (uint64_t *)&v276);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v251);
          swift_bridgeObjectRelease_n(v240, 2);
          swift_bridgeObjectRelease();
          v194 = v224;
          _os_log_impl((void *)&_mh_execute_header, v224, (os_log_type_t)v227, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v191, 0x2Cu);
          v195 = sub_10001A630((uint64_t *)&unk_100839E70);
          v196 = v226;
          swift_arrayDestroy(v226, 1, v195);
          swift_slowDealloc(v196, -1, -1);
          v197 = v222;
          swift_arrayDestroy(v222, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v197, -1, -1);
          swift_slowDealloc(v191, -1, -1);

          v198 = v225;
          goto LABEL_114;
        }
        v278 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v240);
        sub_1001C1B0C(0, v31, 0);
        v28 = v278;
        v173 = sub_100658CFC(v240);
        v174 = v240;
        v176 = v175;
        v177 = 0;
        v178 = (v240 + 64);
        v179 = *(_BYTE *)(v240 + 32);
        v253 = v175;
        v220 = v240 + 96;
        v273 = 0;
        v254 = (os_log_t)v31;
        v255 = (v240 + 64);
        while (2)
        {
          if (v173 < 0 || v173 >= 1 << v179)
          {
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            if (isa < 0)
              v217 = isa;
            else
              v217 = isa & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(isa);
            v35 = _CocoaArrayWrapper.endIndex.getter(v217);
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v31 = (unint64_t)v173 >> 6;
          if (((uint64_t)v178[(unint64_t)v173 >> 6].isa & (1 << v173)) == 0)
            goto LABEL_130;
          if (*(_DWORD *)(v174 + 36) != v176)
            goto LABEL_131;
          v262 = v177;
          v181 = *(_QWORD *)(v174 + 48) + 16 * v173;
          v182 = *(objc_class **)(v181 + 8);
          v268 = *(id *)v181;
          v278 = v28;
          isa = (uint64_t)v28[2].isa;
          v183 = (unint64_t)v28[3].isa;
          a3 = (_DWORD *)(isa + 1);
          v184 = v174;
          swift_bridgeObjectRetain(v182);
          if (isa >= v183 >> 1)
          {
            sub_1001C1B0C(v183 > 1, isa + 1, 1);
            v28 = v278;
          }
          v28[2].isa = (Class)a3;
          v185 = &v28[2 * isa];
          v185[4].isa = (Class)v268;
          v185[5].isa = v182;
          v179 = *(_BYTE *)(v184 + 32);
          v180 = 1 << v179;
          if (v173 >= 1 << v179)
            goto LABEL_132;
          v178 = v255;
          v186 = (unint64_t)v255[v31].isa;
          if ((v186 & (1 << v173)) == 0)
            goto LABEL_133;
          v174 = v184;
          if (*(_DWORD *)(v184 + 36) != v176)
            goto LABEL_134;
          v187 = v186 & (-2 << (v173 & 0x3F));
          if (v187)
          {
            v180 = __clz(__rbit64(v187)) | v173 & 0xFFFFFFFFFFFFFFC0;
            v33 = (uint64_t)v273;
            isa = (uint64_t)v274;
            v90 = v270;
            a3 = v263;
            goto LABEL_88;
          }
          v188 = (char *)(v31 + 1);
          v189 = (v180 + 63) >> 6;
          v33 = (uint64_t)v273;
          isa = (uint64_t)v274;
          v90 = v270;
          a3 = v263;
          if (v31 + 1 < v189)
          {
            v190 = (unint64_t)v255[(_QWORD)v188].isa;
            if (v190)
              goto LABEL_101;
            v188 = (char *)(v31 + 2);
            if (v31 + 2 < v189)
            {
              v190 = (unint64_t)v255[(_QWORD)v188].isa;
              if (v190)
                goto LABEL_101;
              v188 = (char *)(v31 + 3);
              if (v31 + 3 >= v189)
                goto LABEL_88;
              v190 = (unint64_t)v255[(_QWORD)v188].isa;
              if (v190)
              {
LABEL_101:
                v180 = __clz(__rbit64(v190)) + ((_QWORD)v188 << 6);
                goto LABEL_88;
              }
              while (v189 - 4 != v31)
              {
                v190 = *(_QWORD *)(v220 + 8 * v31++);
                if (v190)
                {
                  v188 = (char *)(v31 + 3);
                  goto LABEL_101;
                }
              }
            }
          }
LABEL_88:
          v177 = v262 + 1;
          v176 = v253;
          v173 = v180;
          v31 = (int64_t)v254;
          if (v262 + 1 == (char *)v254)
          {
            swift_bridgeObjectRelease();
            goto LABEL_113;
          }
          continue;
        }
      }

      swift_bridgeObjectRelease_n(a3, 2);
      swift_release_n(v113);
    }
    v90 = v270;
    a3 = v263;
LABEL_114:
    v88 = v250;
    v68 = v260;
    v89 = v237;
    if (v250 == v238)
      goto LABEL_115;
  }

LABEL_60:
  if (v112 != 22 && *(_QWORD *)(isa + 16))
  {
    swift_bridgeObjectRetain(isa);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v214 = (void *)objc_opt_self(REMError);
  v215 = v268;
  swift_willThrow(objc_msgSend(v214, "noSuchObjectErrorWithObjectID:", v268));

}

double sub_100611ACC(uint64_t a1, char **a2, NSObject *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char **v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char **isa;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char **v22;
  _QWORD *v23;
  double result;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  BOOL v32;
  char *v33;
  char **v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  char **v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  char **v61;
  char **v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint8_t *v67;
  char **v68;
  char *v69;
  char *v70;
  NSObject *v71;
  unint64_t v72;
  unint64_t v73;
  __n128 v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  char **v79;
  id v80;
  char **v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  id v90;
  NSObject *v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unsigned __int8 v109;
  uint8_t *v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v122;
  void *v123;
  uint64_t v124;
  void *ObjCClassFromMetadata;
  id v126;
  id v127;
  objc_class *v128;
  id v129;
  id v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  Class v137;
  uint8_t *v138;
  id v139;
  uint8_t *v140;
  id v141;
  NSObject *v142;
  os_log_type_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint8_t *v152;
  objc_class *v153;
  unint64_t v154;
  NSObject *v155;
  unint64_t v156;
  os_log_t v157;
  uint64_t v158;
  char *v159;
  uint8_t *v160;
  char *v161;
  uint64_t v162;
  char *i;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char v167;
  NSObject *v168;
  os_log_type_t v169;
  uint64_t v170;
  char **v171;
  uint64_t v172;
  unint64_t v173;
  uint8_t *v175;
  char **v176;
  uint8_t *v177;
  NSObject *v178;
  NSObject *v179;
  int v180;
  BOOL v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint8_t *v188;
  os_log_t v189;
  id v190;
  NSObject *v191;
  int64_t v192;
  uint64_t v193;
  NSObject *v194;
  uint64_t v195;
  objc_class *v196;
  objc_class *v197;
  unint64_t v198;
  unint64_t v199;
  NSObject *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  int v204;
  os_log_t v205;
  uint64_t v206;
  os_log_t v207;
  uint8_t **v208;
  NSObject *v209;
  id v210;
  uint8_t *v211;
  NSObject *v212;
  NSObject **v213;
  uint8_t *v214;
  char isUniquelyReferenced_nonNull_native;
  int v216;
  uint8_t *v217;
  uint8_t *v218;
  uint8_t *v219;
  uint64_t v220;
  NSObject *v221;
  int v222;
  BOOL v223;
  uint64_t v224;
  char *v225;
  uint8_t *v226;
  int64_t v227;
  uint64_t v228;
  unsigned int v229;
  int v230;
  char *v231;
  os_log_t v232;
  uint8_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  NSObject *v238;
  Class v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  Class v243;
  uint8_t *v244;
  uint64_t v245;
  NSObject *v246;
  os_log_t v247;
  uint64_t v248;
  uint8_t **v249;
  char **v250;
  NSObject *v251;
  uint64_t v252;
  NSObject *v253;
  os_log_type_t v254;
  uint64_t v255;
  char **v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char **v261;
  void *v262;
  NSString v263;
  NSString v264;
  NSString v265;
  uint64_t v266;
  void *v267;
  uint8_t *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint8_t *v273;
  uint8_t *v274;
  int v275;
  char **v276;
  uint8_t *v277;
  os_log_t v278;
  NSObject *v279;
  uint8_t **v280;
  __n128 v281;
  char *v282;
  __n128 v283;
  __n128 v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  NSObject *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  NSObject *v292;
  unint64_t v293;
  uint64_t *v294;
  unint64_t v295;
  char *v296;
  os_log_t v297;
  __n128 v298;
  unint64_t v299;
  uint64_t v300;
  NSObject *v301;
  char *v302;
  char *v303;
  uint8_t *v304;
  char *v305;
  Class v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint8_t *v311;
  char **v312;
  uint64_t v313;
  unint64_t v314;
  char **v315;
  _QWORD v316[4];
  char **v317;
  char v318[8];
  _BYTE v319[16];
  NSObject *v320;
  uint64_t v321;

  v312 = a2;
  v313 = a1;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v308 = (uint64_t)&v273 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v307 = (char *)&v273 - v8;
  v310 = type metadata accessor for UUID(0);
  v309 = *(_QWORD *)(v310 - 8);
  __chkstk_darwin(v310);
  v10 = (char *)&v273 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v273 - v12;
  v14 = (char **)type metadata accessor for Logger(0);
  v15 = (unint64_t)*(v14 - 1);
  __chkstk_darwin(v14);
  v17 = (char *)&v273 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = (char **)a3[3].isa;
  v311 = (uint8_t *)a3[2].isa;
  v306 = a3[4].isa;
  v314 = v3;
  v19 = *(_QWORD *)(v3 + 72);
  v316[3] = v19;
  v317 = v312;
  v316[2] = &v317;
  swift_bridgeObjectRetain(isa);
  v20 = v313;
  swift_bridgeObjectRetain(v313);
  v21 = v20;
  v22 = v315;
  v23 = sub_1005CA184((uint64_t (*)(id *))sub_1006737C0, v316, v21);
  v315 = v22;
  if (v22)
  {
LABEL_2:
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    return result;
  }
  v298.n128_u64[0] = v15;
  v299 = (unint64_t)v17;
  v301 = a3;
  v25 = (unint64_t)v23;
  v300 = v19;
  v303 = v13;
  v305 = v10;
  if (qword_1008371E8 != -1)
    goto LABEL_145;
  while (1)
  {
    v26 = (uint8_t *)v14;
    v27 = sub_10001AAA8((uint64_t)v14, (uint64_t)qword_100845DC0);
    v28 = v25;
    swift_bridgeObjectRetain_n(v25, 2);
    v14 = isa;
    swift_bridgeObjectRetain(isa);
    v313 = v27;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter(v30);
    v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
    v33 = (char *)(v25 >> 62);
    v304 = v26;
    v302 = (char *)(v25 >> 62);
    if (v32)
    {
      v26 = (uint8_t *)swift_slowAlloc(42, -1);
      v34 = (char **)swift_slowAlloc(96, -1);
      v317 = v34;
      *(_DWORD *)v26 = 136446978;
      v320 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v317);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, &v321);
      *((_WORD *)v26 + 6) = 2048;
      LODWORD(v297) = v31;
      v296 = (char *)v34;
      if (v33)
        goto LABEL_157;
      v35 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
      swift_bridgeObjectRelease();
      v320 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, &v321);
      swift_bridgeObjectRelease();
      *((_WORD *)v26 + 11) = 2082;
      v36 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v37 = objc_msgSend((id)swift_getObjCClassFromMetadata(v36), "description");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

      v320 = sub_10001A820(v38, v40, (uint64_t *)&v317);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, &v321);
      v28 = v25;
      swift_bridgeObjectRelease();
      *((_WORD *)v26 + 16) = 2082;
      swift_bridgeObjectRetain(v14);
      v320 = sub_10001A820((uint64_t)v311, (unint64_t)v14, (uint64_t *)&v317);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, &v321);
      swift_bridgeObjectRelease_n(v14, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v297, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", v26, 0x2Au);
      v41 = v296;
      swift_arrayDestroy(v296, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v26 = v304;
      v33 = v302;
    }
    else
    {

      swift_bridgeObjectRelease_n(isa, 2);
      swift_bridgeObjectRelease_n(v25, 2);
    }
    v14 = v315;
    if (v33)
    {
      v269 = v28 < 0 ? v28 : v28 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v28);
      v43 = _CocoaArrayWrapper.endIndex.getter(v269);
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v43)
      break;
    v317 = (char **)_swiftEmptyArrayStorage;
    v30 = &v317;
    specialized ContiguousArray.reserveCapacity(_:)(v43);
    if (v43 < 0)
      goto LABEL_156;
    v44 = 0;
    v45 = v28 & 0xC000000000000001;
    isa = &selRef_isConcealed;
    while (v43 != v44)
    {
      if (v45)
        v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v28);
      else
        v46 = *(id *)(v28 + 8 * v44 + 32);
      v47 = v46;
      v48 = sub_1005CBC20(objc_msgSend(v47, "remObjectID"));
      if (v14)
      {

        v57 = v317;
        swift_bridgeObjectRelease();
        swift_release(v57);
        return result;
      }
      v49 = v48;
      ++v44;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v50);
      v51 = v317[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
      v52 = v51;
      v28 = v25;
      v53 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v49);
      v42 = specialized ContiguousArray._endMutation()(v53);
      if (v43 == v44)
      {
        v54 = v317;
        v55 = (uint64_t)v304;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_145:
    swift_once(&qword_1008371E8, sub_100331650);
  }
  v55 = (uint64_t)v26;
  v54 = (char **)_swiftEmptyArrayStorage;
LABEL_22:
  v56 = *(_QWORD *)(v314 + 96);
  v312 = (char **)v28;
  if (v56 <= 1)
  {
    if (v56)
    {
      if (v56 != 1)
        goto LABEL_164;
      swift_bridgeObjectRelease();
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc(12, -1);
        v79 = (char **)swift_slowAlloc(32, -1);
        v317 = v79;
        *(_DWORD *)v78 = 136315138;
        v315 = (char **)(v78 + 4);
        v80 = objc_msgSend((id)objc_opt_self(REMCDReminder), "cdEntityName");
        v81 = v14;
        v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
        v84 = v83;

        v85 = v82;
        v14 = v81;
        v320 = sub_10001A820(v85, v84, (uint64_t *)&v317);
        v28 = (uint64_t)v312;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, &v321);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Skipping fetch during upsert {CDType: %s}", v78, 0xCu);
        swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v78, -1, -1);
      }

      v69 = v305;
      v70 = v303;
      v71 = v301;
      v299 = sub_1002B18AC((uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_37;
    }
  }
  else if ((unint64_t)(v56 - 2) >= 3 && v56 != 4499 && v56 != 4599)
  {
LABEL_164:
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v298.n128_u64[0] + 16))(v299, v313, v55);
    v271 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v272 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v271, v272);
    __break(1u);
    JUMPOUT(0x100613ED8);
  }
  v58 = Logger.logObject.getter(v42);
  v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(12, -1);
    v315 = (char **)swift_slowAlloc(32, -1);
    v317 = v315;
    v311 = v60;
    *(_DWORD *)v60 = 136315138;
    v25 = (unint64_t)v312;
    v299 = (unint64_t)(v60 + 4);
    v61 = v54;
    v62 = v14;
    v63 = objc_msgSend((id)objc_opt_self(REMCDReminder), "cdEntityName");
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v66 = v65;

    v14 = v62;
    v54 = v61;
    v320 = sub_10001A820(v64, v66, (uint64_t *)&v317);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, &v321);
    swift_bridgeObjectRelease();
    v67 = v311;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Performing fetch during upsert {CDType: %s}", v311, 0xCu);
    v68 = v315;
    swift_arrayDestroy(v315, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v67, -1, -1);
  }

  v69 = v305;
  v70 = v303;
  v71 = v301;
  sub_10064A5D0((uint64_t)v54, (uint64_t)v301);
  v73 = v72;
  v74 = swift_bridgeObjectRelease();
  if (v14)
    goto LABEL_2;
  v299 = v73;
  v28 = v25;
LABEL_37:
  if (v302)
  {
    if (v28 < 0)
      v87 = v28;
    else
      v87 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v86 = _CocoaArrayWrapper.endIndex.getter(v87);
    v74 = swift_bridgeObjectRelease();
    v25 = v314;
    if (!v86)
      goto LABEL_135;
  }
  else
  {
    v86 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    v25 = v314;
    if (!v86)
    {
LABEL_135:
      swift_bridgeObjectRelease();
      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
      return result;
    }
  }
  v88 = 0;
  v289 = v25 + 24;
  v288 = v71 + 6;
  v292 = v71 + 7;
  v89 = v28 & 0xC000000000000001;
  v287 = v28 & 0xFFFFFFFFFFFFFF8;
  v286 = v28 + 32;
  v294 = &v321;
  v285 = (char *)&v320 + 4;
  v74.n128_u64[0] = 136446978;
  v283 = v74;
  v74.n128_u64[0] = 136446210;
  v298 = v74;
  v74.n128_u64[0] = 136447490;
  v284 = v74;
  v74.n128_u64[0] = 136447234;
  v281 = v74;
  v282 = (char *)&type metadata for Any + 8;
  v290 = v28 & 0xC000000000000001;
  v291 = v86;
  while (1)
  {
    if (v89)
    {
      v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v88, v28);
    }
    else
    {
      if (v88 >= *(_QWORD *)(v287 + 16))
        goto LABEL_162;
      v90 = *(id *)(v286 + 8 * v88);
    }
    v293 = v88 + 1;
    if (__OFADD__(v88, 1))
      break;
    v91 = v90;
    v311 = (uint8_t *)sub_1005CBC20(-[NSObject remObjectID](v91, "remObjectID"));
    if (v14)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return result;
    }

    v301 = v91;
    v92 = -[NSObject accountID](v91, "accountID");
    v93 = objc_msgSend(v92, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v93);
    v95 = UUID.uuidString.getter(v94);
    v96 = v70;
    v97 = v95;
    v99 = v98;
    v100 = *(void (**)(char *, uint64_t))(v309 + 8);
    v101 = v310;
    v100(v96, v310);
    v102 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v103 = objc_msgSend(v102, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v103);
    v105 = UUID.uuidString.getter(v104);
    v107 = v106;
    v100(v69, v101);
    if (v97 == v105 && v99 == v107)
    {
      swift_bridgeObjectRelease_n(v99, 2);
LABEL_55:
      __asm { BR              X10 }
    }
    v108 = _stringCompareWithSmolCheck(_:_:expecting:)(v97, v99, v105, v107, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v108 & 1) != 0)
      goto LABEL_55;
    v28 = (uint64_t)sub_100661758(v301, v300);
    v109 = sub_1005D02A0((uint64_t (*)(uint64_t, unint64_t))sub_100222494, (unint64_t *)&qword_10083AE90, off_1007D6708);
    if (*(_QWORD *)(v299 + 16))
    {
      v110 = v311;
      v111 = v299;
      v112 = sub_1002C672C(v110);
      if ((v113 & 1) != 0)
      {
        v315 = (char **)*(id *)(*(_QWORD *)(v111 + 56) + 8 * v112);
        goto LABEL_78;
      }

    }
    if (v109 == 38 || (v114 = *(_QWORD *)(v28 + 16)) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_140:
      v267 = (void *)objc_opt_self(REMError);
      v268 = v311;
      swift_willThrow(objc_msgSend(v267, "noSuchObjectErrorWithObjectID:", v311));

      return result;
    }
    v315 = 0;
    swift_bridgeObjectRetain(v28);
    v115 = 0;
    while (1)
    {
      v116 = sub_10021E440(*(_BYTE *)(v28 + v115 + 32));
      v118 = v117;
      v119 = sub_10021E440(v109);
      if (v116 == v119 && v118 == v120)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v118, 2);
        goto LABEL_72;
      }
      v122 = _stringCompareWithSmolCheck(_:_:expecting:)(v116, v118, v119, v120, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v122 & 1) != 0)
        break;
      if (v114 == ++v115)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v28, 2);
        goto LABEL_140;
      }
    }
    swift_bridgeObjectRelease();
LABEL_72:
    v123 = *(void **)(v25 + 88);
    v124 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v124);
    v126 = objc_msgSend(ObjCClassFromMetadata, "entity");
    v127 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v126, v123);
    v128 = v306;
    v129 = v127;
    objc_msgSend(v123, "assignObject:toPersistentStore:", v129, v128);

    v130 = v129;
    v131 = -[uint8_t uuid](v311, "uuid");
    v132 = (uint64_t)v307;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v131);

    v133 = v309;
    v134 = v310;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v309 + 56))(v132, 0, 1, v310);
    v135 = v308;
    sub_10011D420(v132, v308);
    v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v135, 1, v134);
    v137 = 0;
    if (v136 != 1)
    {
      v137 = UUID._bridgeToObjectiveC()().super.isa;
      v100((char *)v135, v134);
    }
    objc_msgSend(v130, "setIdentifier:", v137, v273);

    sub_10011E85C(v132);
    v138 = v311;
    swift_retain_n(v25);
    v139 = v130;
    v140 = v138;
    v141 = v139;
    v142 = Logger.logObject.getter(v141);
    v143 = static os_log_type_t.default.getter(v142);
    v144 = v143;
    if (os_log_type_enabled(v142, v143))
    {
      v145 = swift_slowAlloc(42, -1);
      v297 = v142;
      v146 = v145;
      v295 = swift_slowAlloc(16, -1);
      v302 = (char *)swift_slowAlloc(64, -1);
      v317 = (char **)v302;
      *(_DWORD *)v146 = v283.n128_u32[0];
      LODWORD(v296) = v144;
      v320 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v317);
      v147 = v294;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v294);
      *(_WORD *)(v146 + 12) = 2082;
      sub_1000184A8(v289, (uint64_t)v319);
      sub_100671124((uint64_t)v319, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v149 = v148;
      v151 = v150;
      sub_100671124((uint64_t)v319, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v320 = sub_10001A820(v149, v151, (uint64_t *)&v317);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v147);
      swift_release_n(v25);
      swift_bridgeObjectRelease();
      *(_WORD *)(v146 + 22) = 2114;
      v320 = v140;
      v152 = v140;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v147);
      v153 = (objc_class *)v140;
      v154 = v295;
      *(_QWORD *)v295 = v153;

      *(_WORD *)(v146 + 32) = 2112;
      v155 = objc_msgSend(v141, "objectID");
      v320 = v155;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v294);
      v156 = v154;
      v140 = (uint8_t *)v153;
      *(_QWORD *)(v156 + 8) = v155;

      v157 = v297;
      _os_log_impl((void *)&_mh_execute_header, v297, (os_log_type_t)v296, "[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}", (uint8_t *)v146, 0x2Au);
      v158 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v156, 2, v158);
      swift_slowDealloc(v156, -1, -1);
      v159 = v302;
      swift_arrayDestroy(v302, 2, v282);
      swift_slowDealloc(v159, -1, -1);
      swift_slowDealloc(v146, -1, -1);

    }
    else
    {

      swift_release_n(v25);
    }
    v14 = v315;
    swift_beginAccess(v288, &v317, 33, 0);
    v160 = v140;
    v315 = (char **)v141;
    sub_1001912EC((uint64_t)v141, (uint64_t)v160);
    swift_endAccess(&v317);
LABEL_78:

    v161 = *(char **)(v28 + 16);
    if (!v161)
      goto LABEL_90;
    swift_bridgeObjectRetain(v28);
    for (i = 0; i != v161; ++i)
    {
      if (((*(unsigned int *)(v25 + 64) | ((unint64_t)*(unsigned __int16 *)(v25 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
      {
        v164 = v28;
        v165 = v161;
        v166 = v164;
        v167 = i[v164 + 32];
        v168 = Logger.logObject.getter(v162);
        v169 = static os_log_type_t.error.getter(v168);
        if (os_log_type_enabled(v168, v169))
        {
          v170 = swift_slowAlloc(12, -1);
          v171 = (char **)swift_slowAlloc(32, -1);
          v317 = v171;
          *(_DWORD *)v170 = v298.n128_u32[0];
          LOBYTE(v320) = v167;
          v172 = String.init<A>(describing:)(&v320, &type metadata for REMReminderStorageCDIngestor.ValueKey);
          *(_QWORD *)(v170 + 4) = sub_10001A820(v172, v173, (uint64_t *)&v317);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v168, v169, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v170, 0xCu);
          swift_arrayDestroy(v171, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v171, -1, -1);
          swift_slowDealloc(v170, -1, -1);
        }

        v161 = v165;
        v28 = v166;
        v25 = v314;
      }
      LODWORD(v71) = *(_DWORD *)(v25 + 64);
      if (*(unsigned __int16 *)(v25 + 68) >> 14 == 2 && (*(_DWORD *)(v25 + 64) & 1) == 0)
      {
        if (qword_100837928 == -1)
          goto LABEL_137;
        goto LABEL_163;
      }
    }
    swift_bridgeObjectRelease();
LABEL_90:
    swift_retain_n(v25);
    v175 = v311;
    swift_bridgeObjectRetain_n(v28, 2);
    v176 = v315;
    v177 = v175;
    v178 = v176;
    v179 = Logger.logObject.getter(v178);
    v180 = static os_log_type_t.default.getter(v179);
    v181 = os_log_type_enabled(v179, (os_log_type_t)v180);
    v311 = v177;
    if (v181)
    {
      LODWORD(v279) = v180;
      v295 = (unint64_t)v179;
      v296 = v161;
      v182 = swift_slowAlloc(58, -1);
      v297 = (os_log_t)swift_slowAlloc(16, -1);
      v280 = (uint8_t **)swift_slowAlloc(96, -1);
      v317 = (char **)v280;
      *(_DWORD *)v182 = v284.n128_u32[0];
      v320 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v317);
      v183 = v294;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v294);
      *(_WORD *)(v182 + 12) = 2082;
      sub_1000184A8(v289, (uint64_t)v318);
      sub_100671124((uint64_t)v318, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v185 = v184;
      v302 = (char *)v178;
      v187 = v186;
      sub_100671124((uint64_t)v318, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v320 = sub_10001A820(v185, v187, (uint64_t *)&v317);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v183);
      swift_release_n(v25);
      swift_bridgeObjectRelease();
      *(_WORD *)(v182 + 22) = 2114;
      v320 = v177;
      v188 = v177;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v183);
      v189 = v297;
      v297->isa = (Class)v177;

      *(_WORD *)(v182 + 32) = 2112;
      v190 = v302;
      v191 = objc_msgSend(v302, "objectID");
      v320 = v191;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v294);
      v189[1].isa = (Class)v191;

      *(_WORD *)(v182 + 42) = 2082;
      v192 = *(_QWORD *)(v28 + 16);
      if (v192)
      {
        v315 = v14;
        v320 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v192, 0);
        v193 = 0;
        v194 = v320;
        do
        {
          v195 = sub_10021E440(*(_BYTE *)(v28 + v193 + 32));
          v197 = v196;
          v320 = v194;
          v199 = (unint64_t)v194[2].isa;
          v198 = (unint64_t)v194[3].isa;
          if (v199 >= v198 >> 1)
          {
            sub_1001C1B0C(v198 > 1, v199 + 1, 1);
            v194 = v320;
          }
          ++v193;
          v194[2].isa = (Class)(v199 + 1);
          v200 = &v194[2 * v199];
          v200[4].isa = (Class)v195;
          v200[5].isa = v197;
        }
        while (v192 != v193);
        swift_bridgeObjectRelease();
        v25 = v314;
        v14 = v315;
      }
      else
      {
        swift_bridgeObjectRelease();
        v194 = _swiftEmptyArrayStorage;
      }
      v201 = Array.description.getter(v194, &type metadata for String);
      v203 = v202;
      swift_bridgeObjectRelease();
      v320 = sub_10001A820(v201, v203, (uint64_t *)&v317);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v294);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v182 + 52) = 1024;
      v204 = *(unsigned __int8 *)(v25 + 104);
      swift_release(v25);
      LODWORD(v320) = v204;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v285);
      swift_release(v25);
      v205 = (os_log_t)v295;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v295, (os_log_type_t)v279, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v182, 0x3Au);
      v206 = sub_10001A630((uint64_t *)&unk_100839E70);
      v207 = v297;
      swift_arrayDestroy(v297, 2, v206);
      swift_slowDealloc(v207, -1, -1);
      v208 = v280;
      swift_arrayDestroy(v280, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v208, -1, -1);
      swift_slowDealloc(v182, -1, -1);

      v161 = v296;
      v178 = v302;
    }
    else
    {

      swift_release_n(v25);
      swift_bridgeObjectRelease_n(v28, 2);
    }
    v209 = v301;
    sub_100229CC0(v301, v178, v28, v25);
    if (v14)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
      return result;
    }
    v210 = -[NSObject changedValues](v178, "changedValues");
    v211 = (uint8_t *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v210, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v212 = v178;
    v213 = (NSObject **)v292;
    swift_beginAccess(v292, &v317, 33, 0);
    v214 = v311;
    swift_bridgeObjectRetain(v211);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v213);
    v320 = *v213;
    *v213 = 0x8000000000000000;
    v311 = v211;
    sub_10028C70C((uint64_t)v211, v214, isUniquelyReferenced_nonNull_native);
    *v213 = v320;

    swift_bridgeObjectRelease();
    swift_endAccess(&v317);
    v216 = *(unsigned __int8 *)(v25 + 104);
    v71 = v212;
    swift_bridgeObjectRelease();
    if (v161 && (v216 & 1) != 0)
    {
      -[NSObject updateChangeCount](v71, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      v28 = (uint64_t)v312;
      goto LABEL_130;
    }
    v217 = v214;
    swift_retain_n(v25);
    v218 = v217;
    v219 = v311;
    swift_bridgeObjectRetain(v311);
    v221 = Logger.logObject.getter(v220);
    v222 = static os_log_type_t.default.getter(v221);
    v223 = os_log_type_enabled(v221, (os_log_type_t)v222);
    v28 = (uint64_t)v312;
    if (v223)
    {
      v275 = v222;
      v278 = v221;
      v279 = v71;
      v224 = swift_slowAlloc(44, -1);
      v280 = (uint8_t **)swift_slowAlloc(8, -1);
      v276 = (char **)swift_slowAlloc(64, -1);
      v317 = v276;
      *(_DWORD *)v224 = v281.n128_u32[0];
      v320 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v317);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v294);
      *(_WORD *)(v224 + 12) = 1024;
      swift_release(v25);
      LODWORD(v320) = v216;
      v225 = v285;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v285);
      swift_release(v25);
      *(_WORD *)(v224 + 18) = 1024;
      v26 = v311;
      LODWORD(v320) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v225);
      *(_WORD *)(v224 + 24) = 2114;
      v320 = v218;
      v226 = v218;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v294);
      *v280 = v218;

      v274 = v226;
      v277 = (uint8_t *)v224;
      *(_WORD *)(v224 + 34) = 2082;
      v227 = *((_QWORD *)v26 + 2);
      v69 = v305;
      if (v227)
      {
        v320 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v26);
        sub_1001C1B0C(0, v227, 0);
        v30 = v320;
        v228 = sub_100658CFC((uint64_t)v26);
        v230 = v229;
        v231 = 0;
        v232 = (os_log_t)(v26 + 64);
        v233 = v26[32];
        v295 = v229;
        v273 = v26 + 96;
        v315 = 0;
        v296 = (char *)v227;
        v297 = (os_log_t)(v26 + 64);
        while (1)
        {
          if (v228 < 0 || v228 >= 1 << v233)
          {
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            if (v28 < 0)
              v270 = v28;
            else
              v270 = v28 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v28);
            v35 = _CocoaArrayWrapper.endIndex.getter(v270);
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v235 = (unint64_t)v228 >> 6;
          if (((uint64_t)v232[(unint64_t)v228 >> 6].isa & (1 << v228)) == 0)
            goto LABEL_151;
          if (*((_DWORD *)v26 + 9) != v230)
            goto LABEL_152;
          v302 = v231;
          v236 = *((_QWORD *)v26 + 6) + 16 * v228;
          v311 = *(uint8_t **)v236;
          v25 = (unint64_t)v26;
          v26 = *(uint8_t **)(v236 + 8);
          v320 = v30;
          v28 = (uint64_t)v30[2].isa;
          v237 = (unint64_t)v30[3].isa;
          v14 = (char **)(v28 + 1);
          swift_bridgeObjectRetain(v26);
          if (v28 >= v237 >> 1)
          {
            sub_1001C1B0C(v237 > 1, v28 + 1, 1);
            v30 = v320;
          }
          v30[2].isa = (Class)v14;
          v238 = &v30[2 * v28];
          v238[4].isa = (Class)v311;
          v238[5].isa = (Class)v26;
          v233 = *(_BYTE *)(v25 + 32);
          v234 = 1 << v233;
          if (v228 >= 1 << v233)
            goto LABEL_153;
          v232 = v297;
          v239 = v297[v235].isa;
          if (((unint64_t)v239 & (1 << v228)) == 0)
            goto LABEL_154;
          v26 = (uint8_t *)v25;
          if (*(_DWORD *)(v25 + 36) != v230)
            goto LABEL_155;
          v240 = (unint64_t)v239 & (-2 << (v228 & 0x3F));
          if (v240)
          {
            v234 = __clz(__rbit64(v240)) | v228 & 0xFFFFFFFFFFFFFFC0;
            v28 = (uint64_t)v312;
            v25 = v314;
            v14 = v315;
            v69 = v305;
          }
          else
          {
            v241 = v235 + 1;
            v242 = (v234 + 63) >> 6;
            v28 = (uint64_t)v312;
            v25 = v314;
            v14 = v315;
            v69 = v305;
            if (v235 + 1 < v242)
            {
              v243 = v297[v241].isa;
              if (!v243)
              {
                v241 = v235 + 2;
                if (v235 + 2 >= v242)
                  goto LABEL_108;
                v243 = v297[v241].isa;
                if (!v243)
                {
                  v241 = v235 + 3;
                  if (v235 + 3 >= v242)
                    goto LABEL_108;
                  v243 = v297[v241].isa;
                  if (!v243)
                  {
                    while (v242 - 4 != v235)
                    {
                      v243 = *(Class *)&v273[8 * v235++];
                      if (v243)
                      {
                        v241 = v235 + 3;
                        goto LABEL_121;
                      }
                    }
                    goto LABEL_108;
                  }
                }
              }
LABEL_121:
              v234 = __clz(__rbit64((unint64_t)v243)) + (v241 << 6);
            }
          }
LABEL_108:
          v231 = v302 + 1;
          v230 = v295;
          v228 = v234;
          if (v302 + 1 == v296)
          {
            swift_bridgeObjectRelease();
            goto LABEL_133;
          }
        }
      }
      v30 = _swiftEmptyArrayStorage;
LABEL_133:
      v244 = v277;
      v311 = v277 + 36;
      v245 = Array.description.getter(v30, &type metadata for String);
      v71 = v246;
      swift_bridgeObjectRelease();
      v320 = sub_10001A820(v245, (unint64_t)v71, (uint64_t *)&v317);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, v294);
      swift_bridgeObjectRelease_n(v26, 2);
      swift_bridgeObjectRelease();
      v247 = v278;
      _os_log_impl((void *)&_mh_execute_header, v278, (os_log_type_t)v275, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v244, 0x2Cu);
      v248 = sub_10001A630((uint64_t *)&unk_100839E70);
      v249 = v280;
      swift_arrayDestroy(v280, 1, v248);
      swift_slowDealloc(v249, -1, -1);
      v250 = v276;
      swift_arrayDestroy(v276, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v250, -1, -1);
      swift_slowDealloc(v244, -1, -1);

      v251 = v279;
    }
    else
    {

      swift_bridgeObjectRelease_n(v219, 2);
      swift_release_n(v25);
LABEL_130:
      v69 = v305;
    }
    v88 = v293;
    v70 = v303;
    v89 = v290;
    if (v293 == v291)
      goto LABEL_135;
  }
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  swift_once(&qword_100837928, sub_1005A2648);
LABEL_137:
  v252 = sub_10001AAA8((uint64_t)v304, (uint64_t)qword_1008508E0);
  v253 = Logger.logObject.getter(v252);
  v254 = static os_log_type_t.error.getter(v253);
  if (os_log_type_enabled(v253, v254))
  {
    v255 = swift_slowAlloc(22, -1);
    v256 = (char **)swift_slowAlloc(64, -1);
    v317 = v256;
    *(_DWORD *)v255 = 136446466;
    v257 = sub_1005A26D8(1);
    v320 = sub_10001A820(v257, v258, (uint64_t *)&v317);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, &v321);
    swift_bridgeObjectRelease();
    *(_WORD *)(v255 + 12) = 2082;
    v259 = sub_1005A26D8((__int16)v71);
    v320 = sub_10001A820(v259, v260, (uint64_t *)&v317);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v320, &v321);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v253, v254, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v255, 0x16u);
    swift_arrayDestroy(v256, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v256, -1, -1);
    swift_slowDealloc(v255, -1, -1);
  }

  v261 = v315;
  v262 = (void *)objc_opt_self(REMError);
  v263 = String._bridgeToObjectiveC()();
  sub_1005A26D8(1);
  v264 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1005A26D8((__int16)v71);
  v265 = String._bridgeToObjectiveC()();
  objc_msgSend(v262, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v263, v264, v265, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v266);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_QWORD *)&result = swift_bridgeObjectRelease_n(v28, 2).n128_u64[0];
  return result;
}

void sub_100613EE8(NSObject *a1, NSObject *a2, NSObject *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  NSObject *isa;
  uint64_t v18;
  NSObject *v19;
  unint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  os_log_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_t v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  BOOL v31;
  os_log_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  os_log_t v47;
  id v48;
  id v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint8_t *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  char *v64;
  NSObject *v65;
  uint8_t *v66;
  NSObject *v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  id v73;
  BOOL v74;
  _WORD *v75;
  unint64_t v76;
  NSObject *v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  unsigned __int8 v95;
  uint64_t v96;
  NSObject *v97;
  uint8_t *v98;
  unint64_t v99;
  char v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v112;
  void *v113;
  uint64_t v114;
  void *ObjCClassFromMetadata;
  id v116;
  id v117;
  objc_class *v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  Class v126;
  NSObject *v127;
  uint64_t v128;
  id v129;
  NSObject *v130;
  NSObject *v131;
  os_log_type_t v132;
  int v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  NSObject *v140;
  NSObject *v141;
  NSObject *v142;
  os_log_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t i;
  char v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  uint64_t v156;
  unint64_t v157;
  NSObject *v158;
  uint64_t v159;
  NSObject *v161;
  NSObject *v162;
  NSObject *v163;
  int v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  NSObject *v172;
  NSObject *v173;
  NSObject *v174;
  int64_t v175;
  uint64_t v176;
  NSObject *v177;
  uint64_t v178;
  objc_class *v179;
  objc_class *v180;
  unint64_t v181;
  unint64_t v182;
  NSObject *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  int v187;
  os_log_t v188;
  uint64_t v189;
  NSObject *v190;
  NSObject *v191;
  NSObject *v192;
  id v193;
  NSObject *v194;
  NSObject *v195;
  NSObject **v196;
  NSObject *v197;
  char isUniquelyReferenced_nonNull_native;
  int v199;
  NSObject *v200;
  NSObject *v201;
  uint64_t v202;
  NSObject *v203;
  uint64_t v204;
  NSObject *v205;
  int v206;
  BOOL v207;
  uint64_t v208;
  uint64_t *v209;
  char *v210;
  NSObject *v211;
  int64_t v212;
  NSObject *v213;
  uint64_t v214;
  os_log_t v215;
  NSObject *v216;
  os_log_t v217;
  char v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  unint64_t v223;
  NSObject *v224;
  Class v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  NSObject *v230;
  uint8_t *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  os_log_t v235;
  uint64_t v236;
  NSObject *v237;
  NSObject *v238;
  NSObject *v239;
  uint64_t v240;
  NSObject *v241;
  os_log_type_t v242;
  uint64_t v243;
  NSObject *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  NSObject *v249;
  void *v250;
  NSString v251;
  NSString v252;
  NSString v253;
  uint64_t v254;
  void *v255;
  NSObject *v256;
  uint64_t v257;
  uint64_t v258;
  os_log_t v259;
  NSObject *v260;
  NSObject *v261;
  int v262;
  NSObject *v263;
  uint8_t *v264;
  os_log_t v265;
  NSObject *v266;
  __n128 v267;
  char *v268;
  __n128 v269;
  __n128 v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  NSObject *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  NSObject *v278;
  uint64_t *v279;
  unint64_t v280;
  NSObject *v281;
  NSObject *v282;
  __n128 v283;
  unint64_t v284;
  os_log_t v285;
  uint8_t *v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  NSObject *v292;
  os_log_t v293;
  char *v294;
  _QWORD *v295;
  Class v296;
  char *v297;
  uint64_t v298;
  NSObject *v299;
  NSObject *v300;
  uint64_t v301;
  NSObject *v302;
  uint64_t v303;
  _QWORD v304[4];
  NSObject *v305;
  char v306[8];
  char v307[8];
  NSObject *v308;
  uint64_t v309;

  v302 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v298 = (uint64_t)&v259 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v297 = (char *)&v259 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v259 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v259 - v15;
  isa = a3[3].isa;
  v300 = a3[2].isa;
  v296 = a3[4].isa;
  v301 = v3;
  v18 = *(_QWORD *)(v3 + 72);
  v299 = a2;
  v304[3] = v18;
  v305 = a2;
  v304[2] = &v305;
  swift_bridgeObjectRetain(isa);
  v19 = v302;
  swift_bridgeObjectRetain(v302);
  v20 = (unint64_t)v19;
  v21 = v303;
  v22 = sub_1005CA184((uint64_t (*)(id *))sub_1006737D8, v304, v20);
  v23 = v21;
  if (v21)
    goto LABEL_25;
  v302 = isa;
  v292 = a3;
  v295 = v22;
  v288 = v18;
  v294 = v16;
  v289 = v13;
  v290 = v11;
  v291 = v10;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001AAA8(v24, (uint64_t)qword_100845DC0);
  v26 = (uint64_t)v295;
  swift_bridgeObjectRetain_n(v295, 2);
  v27 = v302;
  swift_bridgeObjectRetain(v302);
  v303 = v25;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.info.getter(v29);
  v31 = os_log_type_enabled(v29, (os_log_type_t)v30);
  v32 = (os_log_t)((unint64_t)v26 >> 62);
  v287 = v24;
  v293 = (os_log_t)((unint64_t)v26 >> 62);
  if (!v31)
  {

    swift_bridgeObjectRelease_n(v27, 2);
    swift_bridgeObjectRelease_n(v26, 2);
    goto LABEL_9;
  }
  isa = swift_slowAlloc(42, -1);
  v33 = swift_slowAlloc(96, -1);
  v305 = v33;
  LODWORD(isa->isa) = 136446978;
  v308 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v305);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309);
  WORD2(isa[1].isa) = 2048;
  LODWORD(v286) = v30;
  v285 = v33;
  if (v32)
    goto LABEL_146;
  v34 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v308 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309);
    swift_bridgeObjectRelease();
    HIWORD(isa[2].isa) = 2082;
    v284 = (unint64_t)&isa[3];
    v35 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v36 = objc_msgSend((id)swift_getObjCClassFromMetadata(v35), "description");
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    v308 = sub_10001A820(v37, v39, (uint64_t *)&v305);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309);
    swift_bridgeObjectRelease();
    LOWORD(isa[4].isa) = 2082;
    v40 = (unint64_t)v302;
    swift_bridgeObjectRetain(v302);
    v308 = sub_10001A820((uint64_t)v300, v40, (uint64_t *)&v305);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309);
    swift_bridgeObjectRelease_n(v40, 3);
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v286, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)isa, 0x2Au);
    v27 = v285;
    swift_arrayDestroy(v285, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(isa, -1, -1);

    v32 = v293;
LABEL_9:
    if (v32)
    {
      v257 = v26 < 0 ? v26 : v26 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v26);
      v42 = _CocoaArrayWrapper.endIndex.getter(v257);
      swift_bridgeObjectRelease();
    }
    else
    {
      v42 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v43 = _swiftEmptyArrayStorage;
    if (!v42)
      break;
    v305 = _swiftEmptyArrayStorage;
    v29 = &v305;
    specialized ContiguousArray.reserveCapacity(_:)(v42);
    if ((v42 & 0x8000000000000000) == 0)
    {
      v44 = 0;
      v45 = v26;
      v46 = v26 & 0xC000000000000001;
      v47 = (os_log_t)off_1007D66E0;
      while (v42 != v44)
      {
        if (v46)
          v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v45);
        else
          v48 = *(id *)(v45 + 8 * v44 + 32);
        v49 = v48;
        v50 = sub_1005CCBAC(objc_msgSend(v49, "remObjectID"), (unint64_t *)&qword_100839900, off_1007D66E0);
        if (v23)
        {

          v67 = v305;
          swift_bridgeObjectRelease();
          swift_release(v67);
          return;
        }
        isa = v50;
        ++v44;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v51);
        v27 = (os_log_t)v305[2].isa;
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
        v52 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, isa);
        v41 = specialized ContiguousArray._endMutation()(v52);
        if (v42 == v44)
        {
          v43 = v305;
          v26 = v45;
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_134:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_25:
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    if (v26 < 0)
      v258 = v26;
    else
      v258 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v34 = _CocoaArrayWrapper.endIndex.getter(v258);
    swift_bridgeObjectRelease();
  }
LABEL_21:
  v53 = Logger.logObject.getter(v41);
  v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = swift_slowAlloc(12, -1);
    v302 = v43;
    v56 = (uint8_t *)v55;
    v300 = swift_slowAlloc(32, -1);
    v305 = v300;
    *(_DWORD *)v56 = 136315138;
    v286 = v56 + 4;
    v57 = objc_msgSend((id)objc_opt_self(REMCDList), "cdEntityName");
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    v308 = sub_10001A820(v58, v60, (uint64_t *)&v305);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Performing fetch during upsert {CDType: %s}", v56, 0xCu);
    v61 = (uint64_t)v300;
    swift_arrayDestroy(v300, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    v62 = v56;
    v43 = v302;
    swift_slowDealloc(v62, -1, -1);
  }

  v63 = v301;
  v64 = v294;
  v65 = v292;
  sub_10064A9F0((uint64_t)v43, (uint64_t)v292);
  if (v23)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  v286 = v66;
  v68 = swift_bridgeObjectRelease();
  if (v293)
  {
    if (v26 < 0)
      v70 = v26;
    else
      v70 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v69 = _CocoaArrayWrapper.endIndex.getter(v70);
    v68 = swift_bridgeObjectRelease();
    if (!v69)
      goto LABEL_24;
  }
  else
  {
    v69 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v69)
      goto LABEL_24;
  }
  v284 = 0;
  v275 = v63 + 24;
  v274 = v65 + 6;
  v278 = v65 + 7;
  v71 = v26 & 0xC000000000000001;
  v273 = v26 & 0xFFFFFFFFFFFFFF8;
  v272 = v26 + 32;
  v279 = &v309;
  v271 = (char *)&v308 + 4;
  v68.n128_u64[0] = 136446978;
  v269 = v68;
  v68.n128_u64[0] = 136446210;
  v283 = v68;
  v68.n128_u64[0] = 136447490;
  v270 = v68;
  v68.n128_u64[0] = 136447234;
  v267 = v68;
  v268 = (char *)&type metadata for Any + 8;
  v276 = v26 & 0xC000000000000001;
  v277 = v69;
  while (1)
  {
    if (v71)
    {
      v72 = v284;
      v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v284, v26);
      v74 = __OFADD__(v72, 1);
      v75 = (_WORD *)(v72 + 1);
      if (v74)
        break;
      goto LABEL_41;
    }
    v76 = v284;
    if (v284 >= *(_QWORD *)(v273 + 16))
      goto LABEL_151;
    v73 = *(id *)(v272 + 8 * v284);
    v74 = __OFADD__(v76, 1);
    v75 = (_WORD *)(v76 + 1);
    if (v74)
      break;
LABEL_41:
    v77 = v73;
    v302 = sub_1005CCBAC(-[NSObject remObjectID](v77, "remObjectID"), (unint64_t *)&qword_100839900, off_1007D66E0);
    if (v23)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v284 = (unint64_t)v75;

    v292 = v77;
    v78 = -[NSObject accountID](v77, "accountID");
    v79 = objc_msgSend(v78, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v79);
    v81 = UUID.uuidString.getter(v80);
    v82 = v64;
    v84 = v83;
    v85 = *(void (**)(char *, uint64_t))(v290 + 8);
    v86 = v291;
    v85(v82, v291);
    v87 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v88 = objc_msgSend(v87, "uuid");

    v89 = v289;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v88);

    v91 = UUID.uuidString.getter(v90);
    v93 = v92;
    v85(v89, v86);
    if (v81 == v91 && v84 == v93)
    {
      swift_bridgeObjectRelease_n(v84, 2);
LABEL_46:
      __asm { BR              X10 }
    }
    v94 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v84, v91, v93, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v94 & 1) != 0)
      goto LABEL_46;
    v26 = (uint64_t)sub_100661C8C(v292, v288);
    v95 = sub_1005D02A0((uint64_t (*)(uint64_t, unint64_t))sub_1005367C8, (unint64_t *)&qword_100839900, off_1007D66E0);
    v96 = *((_QWORD *)v286 + 2);
    v282 = 0;
    if (v96)
    {
      v97 = v302;
      v98 = v286;
      v99 = sub_1002C672C(v97);
      if ((v100 & 1) != 0)
      {
        v101 = *(id *)(*((_QWORD *)v98 + 7) + 8 * v99);
        v102 = v301;
        goto LABEL_69;
      }

    }
    if (v95 == 38 || (v103 = *(_QWORD *)(v26 + 16)) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_130:
      v255 = (void *)objc_opt_self(REMError);
      v256 = v302;
      swift_willThrow(objc_msgSend(v255, "noSuchObjectErrorWithObjectID:", v302));

      return;
    }
    swift_bridgeObjectRetain(v26);
    v104 = 0;
    v105 = v291;
    while (1)
    {
      v106 = sub_10052E580(*(_BYTE *)(v26 + v104 + 32));
      v108 = v107;
      v109 = sub_10052E580(v95);
      if (v106 == v109 && v108 == v110)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v108, 2);
        goto LABEL_63;
      }
      v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v106, v108, v109, v110, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v112 & 1) != 0)
        break;
      if (v103 == ++v104)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v26, 2);
        goto LABEL_130;
      }
    }
    swift_bridgeObjectRelease();
LABEL_63:
    v113 = *(void **)(v301 + 88);
    v114 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v114);
    v116 = objc_msgSend(ObjCClassFromMetadata, "entity");
    v117 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v116, v113);
    v118 = v296;
    v119 = v117;
    objc_msgSend(v113, "assignObject:toPersistentStore:", v119, v118);

    v120 = v119;
    v121 = -[NSObject uuid](v302, "uuid");
    v122 = (uint64_t)v297;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v121);

    v123 = v290;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v290 + 56))(v122, 0, 1, v105);
    v124 = v298;
    sub_10011D420(v122, v298);
    v125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v124, 1, v105);
    v126 = 0;
    if (v125 != 1)
    {
      v126 = UUID._bridgeToObjectiveC()().super.isa;
      v85((char *)v124, v105);
    }
    objc_msgSend(v120, "setIdentifier:", v126, v259);

    sub_10011E85C(v122);
    v127 = v302;
    v128 = v301;
    swift_retain_n(v301);
    v129 = v120;
    v130 = v127;
    v101 = v129;
    v131 = Logger.logObject.getter(v101);
    v132 = static os_log_type_t.default.getter(v131);
    v133 = v132;
    if (os_log_type_enabled(v131, v132))
    {
      v134 = swift_slowAlloc(42, -1);
      v281 = swift_slowAlloc(16, -1);
      v300 = swift_slowAlloc(64, -1);
      v305 = v300;
      *(_DWORD *)v134 = v269.n128_u32[0];
      v293 = v131;
      v308 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v305);
      v135 = v279;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v279);
      *(_WORD *)(v134 + 12) = 2082;
      sub_1000184A8(v275, (uint64_t)v307);
      sub_100671124((uint64_t)v307, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      LODWORD(v285) = v133;
      sub_1000181B8();
      v137 = v136;
      v139 = v138;
      sub_100671124((uint64_t)v307, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v308 = sub_10001A820(v137, v139, (uint64_t *)&v305);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v135);
      swift_release_n(v128);
      swift_bridgeObjectRelease();
      *(_WORD *)(v134 + 22) = 2114;
      v308 = v130;
      v140 = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v135);
      v141 = v281;
      v281->isa = (Class)v130;

      *(_WORD *)(v134 + 32) = 2112;
      v142 = -[NSObject objectID](v101, "objectID");
      v308 = v142;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v135);
      v141[1].isa = (Class)v142;

      v143 = v293;
      _os_log_impl((void *)&_mh_execute_header, v293, (os_log_type_t)v285, "[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}", (uint8_t *)v134, 0x2Au);
      v144 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v141, 2, v144);
      swift_slowDealloc(v141, -1, -1);
      v145 = (uint64_t)v300;
      swift_arrayDestroy(v300, 2, v268);
      swift_slowDealloc(v145, -1, -1);
      swift_slowDealloc(v134, -1, -1);

      v102 = v301;
    }
    else
    {

      swift_release_n(v128);
      v102 = v128;
    }
    swift_beginAccess(v274, &v305, 33, 0);
    sub_1001912EC((uint64_t)v101, (uint64_t)v130);
    swift_endAccess(&v305);
LABEL_69:

    v146 = *(_QWORD *)(v26 + 16);
    if (!v146)
      goto LABEL_81;
    v300 = v101;
    swift_bridgeObjectRetain(v26);
    for (i = 0; i != v146; ++i)
    {
      if (((*(unsigned int *)(v102 + 64) | ((unint64_t)*(unsigned __int16 *)(v102 + 68) << 32)) & 0xFFFFC00000000001) == 0x800000000000)
      {
        v149 = *(_BYTE *)(v26 + i + 32);
        v150 = Logger.logObject.getter(v147);
        v151 = static os_log_type_t.error.getter(v150);
        if (os_log_type_enabled(v150, v151))
        {
          v152 = swift_slowAlloc(12, -1);
          v153 = v26;
          v154 = v146;
          v155 = swift_slowAlloc(32, -1);
          v305 = v155;
          *(_DWORD *)v152 = v283.n128_u32[0];
          LOBYTE(v308) = v149;
          v156 = String.init<A>(describing:)(&v308, &type metadata for REMListStorageCDIngestor.ValueKey);
          *(_QWORD *)(v152 + 4) = sub_10001A820(v156, v157, (uint64_t *)&v305);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v150, v151, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v152, 0xCu);
          swift_arrayDestroy(v155, 1, (char *)&type metadata for Any + 8);
          v158 = v155;
          v146 = v154;
          v26 = v153;
          swift_slowDealloc(v158, -1, -1);
          v159 = v152;
          v102 = v301;
          swift_slowDealloc(v159, -1, -1);
        }

      }
      LODWORD(v23) = *(_DWORD *)(v102 + 64);
      if (*(unsigned __int16 *)(v102 + 68) >> 14 == 2 && (*(_DWORD *)(v102 + 64) & 1) == 0)
      {
        if (qword_100837928 != -1)
          goto LABEL_152;
        goto LABEL_127;
      }
    }
    swift_bridgeObjectRelease();
    v101 = v300;
LABEL_81:
    swift_retain_n(v102);
    v161 = v302;
    swift_bridgeObjectRetain_n(v26, 2);
    v162 = v101;
    v47 = v161;
    isa = v162;
    v163 = Logger.logObject.getter(isa);
    v164 = static os_log_type_t.default.getter(v163);
    if (os_log_type_enabled(v163, (os_log_type_t)v164))
    {
      LODWORD(v280) = v164;
      v285 = v163;
      v300 = v146;
      v165 = swift_slowAlloc(58, -1);
      v302 = swift_slowAlloc(16, -1);
      v281 = swift_slowAlloc(96, -1);
      v305 = v281;
      *(_DWORD *)v165 = v270.n128_u32[0];
      v308 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v305);
      v166 = v279;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v279);
      *(_WORD *)(v165 + 12) = 2082;
      sub_1000184A8(v275, (uint64_t)v306);
      sub_100671124((uint64_t)v306, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v168 = v167;
      v169 = v102;
      v171 = v170;
      sub_100671124((uint64_t)v306, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v308 = sub_10001A820(v168, v171, (uint64_t *)&v305);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v166);
      swift_release_n(v169);
      swift_bridgeObjectRelease();
      *(_WORD *)(v165 + 22) = 2114;
      v308 = v47;
      v172 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v166);
      v293 = v47;
      v173 = v302;
      v302->isa = (Class)v47;

      *(_WORD *)(v165 + 32) = 2112;
      v174 = -[NSObject objectID](isa, "objectID");
      v308 = v174;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v166);
      v173[1].isa = (Class)v174;

      *(_WORD *)(v165 + 42) = 2082;
      v175 = *(_QWORD *)(v26 + 16);
      if (v175)
      {
        v266 = isa;
        v308 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v175, 0);
        v176 = 0;
        v177 = v308;
        do
        {
          v178 = sub_10052E580(*(_BYTE *)(v26 + v176 + 32));
          v180 = v179;
          v308 = v177;
          v182 = (unint64_t)v177[2].isa;
          v181 = (unint64_t)v177[3].isa;
          if (v182 >= v181 >> 1)
          {
            sub_1001C1B0C(v181 > 1, v182 + 1, 1);
            v177 = v308;
          }
          ++v176;
          v177[2].isa = (Class)(v182 + 1);
          v183 = &v177[2 * v182];
          v183[4].isa = (Class)v178;
          v183[5].isa = v180;
        }
        while (v175 != v176);
        swift_bridgeObjectRelease();
        isa = v266;
      }
      else
      {
        swift_bridgeObjectRelease();
        v177 = _swiftEmptyArrayStorage;
      }
      v184 = Array.description.getter(v177, &type metadata for String);
      v186 = v185;
      swift_bridgeObjectRelease();
      v308 = sub_10001A820(v184, v186, (uint64_t *)&v305);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v279);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v165 + 52) = 1024;
      v102 = v301;
      v187 = *(unsigned __int8 *)(v301 + 104);
      swift_release(v301);
      LODWORD(v308) = v187;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v271);
      swift_release(v102);
      v188 = v285;
      _os_log_impl((void *)&_mh_execute_header, v285, (os_log_type_t)v280, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v165, 0x3Au);
      v189 = sub_10001A630((uint64_t *)&unk_100839E70);
      v190 = v302;
      swift_arrayDestroy(v302, 2, v189);
      swift_slowDealloc(v190, -1, -1);
      v191 = v281;
      swift_arrayDestroy(v281, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v191, -1, -1);
      swift_slowDealloc(v165, -1, -1);

      v146 = (uint64_t)v300;
      v47 = v293;
    }
    else
    {

      swift_release_n(v102);
      swift_bridgeObjectRelease_n(v26, 2);
    }
    v27 = v292;
    v192 = v282;
    sub_10052F648(v292, isa, v26, v102);
    if (v192)
      goto LABEL_134;
    v282 = 0;
    v193 = -[NSObject changedValues](isa, "changedValues");
    v194 = isa;
    v195 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v193, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v196 = (NSObject **)v278;
    swift_beginAccess(v278, &v305, 33, 0);
    v197 = v47;
    swift_bridgeObjectRetain(v195);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v196);
    v308 = *v196;
    *v196 = 0x8000000000000000;
    v285 = v195;
    sub_10028C70C((uint64_t)v195, v197, isUniquelyReferenced_nonNull_native);
    *v196 = v308;

    swift_bridgeObjectRelease();
    swift_endAccess(&v305);
    v199 = *(unsigned __int8 *)(v102 + 104);
    v200 = v194;
    swift_bridgeObjectRelease();
    if (v146 && (v199 & 1) != 0)
    {
      -[NSObject updateChangeCount](v200, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

      v26 = (uint64_t)v295;
      goto LABEL_124;
    }
    v266 = v200;
    v201 = v197;
    swift_retain_n(v102);
    v202 = v102;
    v203 = v201;
    v23 = v285;
    swift_bridgeObjectRetain(v285);
    v205 = Logger.logObject.getter(v204);
    v206 = static os_log_type_t.default.getter(v205);
    v207 = os_log_type_enabled(v205, (os_log_type_t)v206);
    v26 = (uint64_t)v295;
    if (v207)
    {
      v262 = v206;
      v265 = v205;
      v208 = swift_slowAlloc(44, -1);
      isa = swift_slowAlloc(8, -1);
      v263 = swift_slowAlloc(64, -1);
      v305 = v263;
      *(_DWORD *)v208 = v267.n128_u32[0];
      v308 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v305);
      v209 = v279;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v279);
      *(_WORD *)(v208 + 12) = 1024;
      swift_release(v202);
      LODWORD(v308) = v199;
      v210 = v271;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v271);
      swift_release(v202);
      *(_WORD *)(v208 + 18) = 1024;
      LODWORD(v308) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v210);
      *(_WORD *)(v208 + 24) = 2114;
      v308 = v203;
      v211 = v203;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v209);
      v261 = isa;
      isa->isa = (Class)v203;

      v260 = v211;
      v264 = (uint8_t *)v208;
      *(_WORD *)(v208 + 34) = 2082;
      v212 = (int64_t)v23[2].isa;
      if (v212)
      {
        v308 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v285);
        sub_1001C1B0C(0, v212, 0);
        v29 = v308;
        v214 = sub_100658CFC((uint64_t)v285);
        v215 = v285;
        v216 = 0;
        v217 = v285 + 8;
        v218 = (char)v285[4].isa;
        v280 = v213;
        v259 = v285 + 12;
        v26 = (uint64_t)v295;
        v281 = v212;
        while (1)
        {
          if (v214 < 0 || v214 >= 1 << v218)
            goto LABEL_140;
          v220 = (unint64_t)v214 >> 6;
          if (((uint64_t)v217[(unint64_t)v214 >> 6].isa & (1 << v214)) == 0)
            goto LABEL_141;
          v293 = v216;
          if (HIDWORD(v215[4].isa) != (_DWORD)v213)
            goto LABEL_142;
          v23 = (os_log_t)v26;
          isa = v213;
          v221 = (uint64_t *)((char *)v215[6].isa + 16 * v214);
          v222 = v221[1];
          v300 = *v221;
          v308 = v29;
          v26 = (uint64_t)v29[2].isa;
          v223 = (unint64_t)v29[3].isa;
          v302 = (v26 + 1);
          swift_bridgeObjectRetain(v222);
          if (v26 >= v223 >> 1)
          {
            sub_1001C1B0C(v223 > 1, (int64_t)v302, 1);
            v29 = v308;
          }
          v29[2].isa = (Class)v302;
          v224 = &v29[2 * v26];
          v224[4].isa = (Class)v300;
          v224[5].isa = (Class)v222;
          v215 = v285;
          v218 = (char)v285[4].isa;
          v219 = 1 << v218;
          if (v214 >= 1 << v218)
            goto LABEL_143;
          v225 = v217[v220].isa;
          if (((unint64_t)v225 & (1 << v214)) == 0)
            goto LABEL_144;
          if (HIDWORD(v285[4].isa) != (_DWORD)isa)
            goto LABEL_145;
          v26 = (uint64_t)v23;
          v226 = (unint64_t)v225 & (-2 << (v214 & 0x3F));
          if (v226)
          {
            v219 = __clz(__rbit64(v226)) | v214 & 0xFFFFFFFFFFFFFFC0;
          }
          else
          {
            v227 = v220 + 1;
            v228 = (v219 + 63) >> 6;
            if (v220 + 1 < v228)
            {
              v229 = (unint64_t)v217[v227].isa;
              if (!v229)
              {
                v227 = v220 + 2;
                if (v220 + 2 >= v228)
                  goto LABEL_99;
                v229 = (unint64_t)v217[v227].isa;
                if (!v229)
                {
                  v227 = v220 + 3;
                  if (v220 + 3 >= v228)
                    goto LABEL_99;
                  v229 = (unint64_t)v217[v227].isa;
                  if (!v229)
                  {
                    while (v228 - 4 != v220)
                    {
                      v229 = (unint64_t)v259[v220++].isa;
                      if (v229)
                      {
                        v227 = v220 + 3;
                        goto LABEL_112;
                      }
                    }
                    goto LABEL_99;
                  }
                }
              }
LABEL_112:
              v219 = __clz(__rbit64(v229)) + (v227 << 6);
            }
          }
LABEL_99:
          v216 = ((char *)&v293->isa + 1);
          v213 = v280;
          v214 = v219;
          if (((char *)&v293->isa + 1) == v281)
          {
            v23 = v285;
            swift_bridgeObjectRelease();
            goto LABEL_123;
          }
        }
      }
      v29 = _swiftEmptyArrayStorage;
      v26 = (uint64_t)v295;
LABEL_123:
      v231 = v264;
      v232 = Array.description.getter(v29, &type metadata for String);
      v234 = v233;
      swift_bridgeObjectRelease();
      v308 = sub_10001A820(v232, v234, (uint64_t *)&v305);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v279);
      swift_bridgeObjectRelease_n(v23, 2);
      swift_bridgeObjectRelease();
      v235 = v265;
      _os_log_impl((void *)&_mh_execute_header, v265, (os_log_type_t)v262, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", v231, 0x2Cu);
      v236 = sub_10001A630((uint64_t *)&unk_100839E70);
      v237 = v261;
      swift_arrayDestroy(v261, 1, v236);
      swift_slowDealloc(v237, -1, -1);
      v238 = v263;
      swift_arrayDestroy(v263, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v238, -1, -1);
      swift_slowDealloc(v231, -1, -1);

      v239 = v266;
    }
    else
    {

      swift_bridgeObjectRelease_n(v23, 2);
      v230 = v266;

      swift_release_n(v202);
    }
LABEL_124:
    v23 = v282;
    v64 = v294;
    v71 = v276;
    if (v284 == v277)
      goto LABEL_24;
  }
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  swift_once(&qword_100837928, sub_1005A2648);
LABEL_127:
  v240 = sub_10001AAA8(v287, (uint64_t)qword_1008508E0);
  v241 = Logger.logObject.getter(v240);
  v242 = static os_log_type_t.error.getter(v241);
  if (os_log_type_enabled(v241, v242))
  {
    v243 = swift_slowAlloc(22, -1);
    v244 = swift_slowAlloc(64, -1);
    v305 = v244;
    *(_DWORD *)v243 = 136446466;
    v245 = sub_1005A26D8(1);
    v308 = sub_10001A820(v245, v246, (uint64_t *)&v305);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309);
    swift_bridgeObjectRelease();
    *(_WORD *)(v243 + 12) = 2082;
    v247 = sub_1005A26D8((__int16)v23);
    v308 = sub_10001A820(v247, v248, (uint64_t *)&v305);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v241, v242, "Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}", (uint8_t *)v243, 0x16u);
    swift_arrayDestroy(v244, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v244, -1, -1);
    swift_slowDealloc(v243, -1, -1);
  }

  v249 = v300;
  v250 = (void *)objc_opt_self(REMError);
  v251 = String._bridgeToObjectiveC()();
  sub_1005A26D8(1);
  v252 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1005A26D8((__int16)v23);
  v253 = String._bridgeToObjectiveC()();
  objc_msgSend(v250, "unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:", v251, v252, v253, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v254);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n(v26, 2);
}

void sub_10061603C(unint64_t a1, _QWORD *a2, NSObject *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  BOOL v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  unint64_t v44;
  id v45;
  id v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint8_t *v55;
  _QWORD *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  char *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  id v74;
  NSObject *v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  id v84;
  id v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  _QWORD *v92;
  unsigned __int8 v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *ObjCClassFromMetadata;
  id v112;
  id v113;
  objc_class *v114;
  id v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  Class v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  id v127;
  NSObject *v128;
  NSObject *v129;
  NSObject *v130;
  os_log_type_t v131;
  int v132;
  BOOL v133;
  uint64_t v134;
  NSObject **v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  NSObject *v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v149;
  os_log_type_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  id v157;
  NSObject *v158;
  NSObject *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  id v169;
  NSObject *v170;
  NSObject *v171;
  uint64_t v172;
  int64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  NSObject *v179;
  uint64_t v180;
  os_log_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  NSObject **v186;
  id v187;
  char isUniquelyReferenced_nonNull_native;
  int v189;
  char *v190;
  id v191;
  NSObject *v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  int v196;
  uint64_t v197;
  NSObject **v198;
  uint64_t *v199;
  char *v200;
  int64_t v201;
  unsigned int v202;
  uint64_t v203;
  NSObject *v204;
  char v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  unsigned int v209;
  uint64_t v210;
  objc_class *v211;
  unint64_t v212;
  unint64_t v213;
  NSObject *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  os_log_t v226;
  uint64_t v227;
  NSObject **v228;
  char *v229;
  void *v230;
  id v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  id v237;
  NSObject **v238;
  char *v239;
  os_log_t v240;
  char *v241;
  __n128 v242;
  char *v243;
  __n128 v244;
  __n128 v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  NSObject *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  NSObject *v253;
  unint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __n128 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  NSObject *v263;
  uint64_t v264;
  NSObject *v265;
  NSObject *v266;
  uint64_t v267;
  char *v268;
  id v269;
  Class v270;
  char *v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD v277[4];
  _QWORD *v278;
  char v279[8];
  _BYTE v280[16];
  NSObject *v281;
  uint64_t v282;

  v274 = a2;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v272 = (uint64_t)&v234 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v271 = (char *)&v234 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = ((char *)&v234 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v16 = (char *)&v234 - v15;
  isa = a3[3].isa;
  v273 = a3[2].isa;
  v270 = a3[4].isa;
  v275 = v3;
  v18 = *(_QWORD *)(v3 + 72);
  v277[3] = v18;
  v278 = v274;
  v277[2] = &v278;
  swift_bridgeObjectRetain(isa);
  swift_bridgeObjectRetain(a1);
  v19 = v276;
  v20 = sub_1005CA184((uint64_t (*)(id *))sub_1006737F0, v277, a1);
  if (v19)
    goto LABEL_26;
  v21 = (uint64_t)v20;
  v264 = v10;
  v269 = isa;
  v265 = a3;
  v262 = v18;
  v268 = v16;
  v263 = v13;
  v267 = v11;
  v22 = 0;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v261 = type metadata accessor for Logger(0);
  v23 = sub_10001AAA8(v261, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v21, 2);
  v24 = v269;
  swift_bridgeObjectRetain(v269);
  v274 = (_QWORD *)v23;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter(v26);
  v28 = os_log_type_enabled(v26, (os_log_type_t)v27);
  v29 = ((unint64_t)v21 >> 62);
  v276 = v21;
  v30 = v275;
  v266 = ((unint64_t)v21 >> 62);
  if (!v28)
  {

    swift_bridgeObjectRelease_n(v24, 2);
    swift_bridgeObjectRelease_n(v21, 2);
    goto LABEL_9;
  }
  v31 = v21;
  v11 = swift_slowAlloc(42, -1);
  v32 = (_QWORD *)swift_slowAlloc(96, -1);
  v278 = v32;
  *(_DWORD *)v11 = 136446978;
  v281 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v278);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282);
  *(_WORD *)(v11 + 12) = 2048;
  LODWORD(v260) = v27;
  v259.n128_u64[0] = (unint64_t)v32;
  if (v29)
    goto LABEL_136;
  v33 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v281 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2082;
    v258 = v11 + 24;
    v34 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v34), "description");
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v37 = v36;

    v38 = v276;
    v281 = sub_10001A820(v35, v37, (uint64_t *)&v278);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 32) = 2082;
    v39 = (unint64_t)v269;
    swift_bridgeObjectRetain(v269);
    v281 = sub_10001A820((uint64_t)v273, v39, (uint64_t *)&v278);
    v21 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282);
    swift_bridgeObjectRelease_n(v39, 3);
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v260, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v11, 0x2Au);
    v40 = v259.n128_u64[0];
    swift_arrayDestroy(v259.n128_u64[0], 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v30 = v275;
    v29 = v266;
LABEL_9:
    if (v29)
    {
      v232 = v21 < 0 ? v21 : v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v31 = _CocoaArrayWrapper.endIndex.getter(v232);
      swift_bridgeObjectRelease();
    }
    else
    {
      v31 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v42 = _swiftEmptyArrayStorage;
    if (!v31)
      break;
    v278 = _swiftEmptyArrayStorage;
    v26 = &v278;
    specialized ContiguousArray.reserveCapacity(_:)(v31);
    if ((v31 & 0x8000000000000000) == 0)
    {
      v43 = 0;
      v44 = v21 & 0xC000000000000001;
      while ((id)v31 != v43)
      {
        if (v44)
          v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v21);
        else
          v45 = *(id *)(v21 + 8 * (_QWORD)v43 + 32);
        v46 = v45;
        v47 = sub_1005CCBAC(objc_msgSend(v46, "remObjectID"), &qword_10083AA30, off_1007D6658);
        if (v22)
        {

          v68 = v278;
          swift_bridgeObjectRelease();
          swift_release(v68);
          return;
        }
        v13 = v47;
        v22 = 0;
        v43 = (char *)v43 + 1;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v48);
        v49 = v278[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v49);
        v50 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v13);
        v41 = specialized ContiguousArray._endMutation()(v50);
        v21 = v276;
        if ((id)v31 == v43)
        {
          v51 = v276;
          v42 = v278;
          v30 = v275;
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_124:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_26:
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    if (v31 < 0)
      v233 = v31;
    else
      v233 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v33 = _CocoaArrayWrapper.endIndex.getter(v233);
    swift_bridgeObjectRelease();
  }
  v51 = v21;
LABEL_22:
  v52 = Logger.logObject.getter(v41);
  v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = swift_slowAlloc(12, -1);
    v273 = v42;
    v55 = (uint8_t *)v54;
    v56 = (_QWORD *)swift_slowAlloc(32, -1);
    v278 = v56;
    *(_DWORD *)v55 = 136315138;
    v269 = v55 + 4;
    v57 = objc_msgSend((id)objc_opt_self(REMCDAccount), "cdEntityName");
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    v51 = v276;
    v281 = sub_10001A820(v58, v60, (uint64_t *)&v278);
    v61 = v275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, &v282);
    v30 = v61;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Performing fetch during upsert {CDType: %s}", v55, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    v62 = v55;
    v42 = v273;
    swift_slowDealloc(v62, -1, -1);
  }

  v63 = v267;
  v64 = v268;
  v65 = v265;
  sub_100647C90((uint64_t)v42, (uint64_t)v265);
  v67 = v22;
  if (v22)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  v260 = v66;
  v69 = swift_bridgeObjectRelease();
  if (v266)
  {
    if (v51 < 0)
      v71 = v51;
    else
      v71 = v51 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v51);
    v70 = _CocoaArrayWrapper.endIndex.getter(v71);
    v69 = swift_bridgeObjectRelease();
    if (!v70)
      goto LABEL_25;
  }
  else
  {
    v70 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v70)
      goto LABEL_25;
  }
  v72 = 0;
  v250 = v30 + 24;
  v249 = v65 + 6;
  v253 = v65 + 7;
  v73 = v51 & 0xC000000000000001;
  v248 = v51 & 0xFFFFFFFFFFFFFF8;
  v247 = v51 + 32;
  v255 = &v282;
  v246 = (char *)&v281 + 4;
  v69.n128_u64[0] = 136446978;
  v244 = v69;
  v69.n128_u64[0] = 136446210;
  v259 = v69;
  v69.n128_u64[0] = 136447490;
  v245 = v69;
  v69.n128_u64[0] = 136447234;
  v242 = v69;
  v243 = (char *)&type metadata for Any + 8;
  v251 = v51 & 0xC000000000000001;
  v252 = v70;
  while (1)
  {
    if (v73)
    {
      v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v72, v51);
    }
    else
    {
      if (v72 >= *(_QWORD *)(v248 + 16))
        goto LABEL_141;
      v74 = *(id *)(v247 + 8 * v72);
    }
    v254 = v72 + 1;
    if (__OFADD__(v72, 1))
    {
      __break(1u);
LABEL_141:
      __break(1u);
      JUMPOUT(0x1006183F8);
    }
    v75 = v74;
    v269 = sub_1005CCBAC(-[NSObject remObjectID](v75, "remObjectID"), &qword_10083AA30, off_1007D6658);
    if (v67)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }

    v265 = v75;
    v76 = -[NSObject objectID](v75, "objectID");
    v77 = objc_msgSend(v76, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v79 = UUID.uuidString.getter(v78);
    v81 = v80;
    v82 = *(void (**)(char *, uint64_t))(v63 + 8);
    v83 = v264;
    v82(v64, v264);
    v84 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
    v85 = objc_msgSend(v84, "uuid");

    v86 = v263;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

    v88 = UUID.uuidString.getter(v87);
    v90 = v89;
    v82((char *)v86, v83);
    if (v79 == v88 && v81 == v90)
    {
      swift_bridgeObjectRelease_n(v81, 2);
LABEL_46:
      __asm { BR              X10 }
    }
    v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v81, v88, v90, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v91 & 1) != 0)
      goto LABEL_46;
    v92 = sub_1006621E8(v265, v262, (uint64_t)&type metadata for REMAccountStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CA540, &qword_100851C48);
    v93 = sub_1005CFD04();
    v94 = *(_QWORD *)(v260 + 16);
    v258 = 0;
    if (v94)
    {
      v95 = v269;
      v96 = v260;
      v97 = sub_1002C672C(v95);
      if ((v98 & 1) != 0)
      {
        v266 = *(id *)(*(_QWORD *)(v96 + 56) + 8 * v97);
        goto LABEL_69;
      }

    }
    if (v93 == 26)
      break;
    v99 = v92[2];
    if (!v99)
      break;
    swift_bridgeObjectRetain(v92);
    v100 = 0;
    while (1)
    {
      v101 = sub_100256DEC(*((_BYTE *)v92 + v100 + 32));
      v103 = v102;
      v104 = sub_100256DEC(v93);
      if (v101 == v104 && v103 == v105)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v103, 2);
        goto LABEL_63;
      }
      v107 = _stringCompareWithSmolCheck(_:_:expecting:)(v101, v103, v104, v105, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v107 & 1) != 0)
        break;
      if (v99 == ++v100)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v92, 2);
        goto LABEL_120;
      }
    }
    swift_bridgeObjectRelease();
LABEL_63:
    v108 = v275;
    v109 = *(void **)(v275 + 88);
    v110 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v110);
    v112 = objc_msgSend(ObjCClassFromMetadata, "entity");
    v113 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v112, v109);
    v114 = v270;
    v115 = v113;
    objc_msgSend(v109, "assignObject:toPersistentStore:", v115, v114);

    v116 = v115;
    v117 = objc_msgSend(v269, "uuid");
    v118 = (uint64_t)v271;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v117);

    v119 = v267;
    v120 = v264;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v267 + 56))(v118, 0, 1, v264);
    v121 = v272;
    sub_10011D420(v118, v272);
    v122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v121, 1, v120);
    v123 = 0;
    if (v122 != 1)
    {
      v124 = v272;
      v123 = UUID._bridgeToObjectiveC()().super.isa;
      v82((char *)v124, v264);
    }
    objc_msgSend(v116, "setIdentifier:", v123, v234);

    sub_10011E85C(v118);
    v125 = v269;
    v126 = v108;
    swift_retain_n(v108);
    v127 = v116;
    v128 = v125;
    v129 = v127;
    v130 = Logger.logObject.getter(v129);
    v131 = static os_log_type_t.default.getter(v130);
    v132 = v131;
    v133 = os_log_type_enabled(v130, v131);
    v266 = v129;
    if (v133)
    {
      v134 = swift_slowAlloc(42, -1);
      v135 = (NSObject **)swift_slowAlloc(16, -1);
      v273 = (_QWORD *)swift_slowAlloc(64, -1);
      v278 = v273;
      *(_DWORD *)v134 = v244.n128_u32[0];
      LODWORD(v257) = v132;
      v281 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v278);
      v136 = v255;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v255);
      *(_WORD *)(v134 + 12) = 2082;
      sub_1000184A8(v250, (uint64_t)v280);
      sub_100671124((uint64_t)v280, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v138 = v137;
      v140 = v139;
      sub_100671124((uint64_t)v280, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v281 = sub_10001A820(v138, v140, (uint64_t *)&v278);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v136);
      swift_release_n(v275);
      swift_bridgeObjectRelease();
      *(_WORD *)(v134 + 22) = 2114;
      v281 = v128;
      v141 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v136);
      *v135 = v128;

      v129 = v266;
      *(_WORD *)(v134 + 32) = 2112;
      v142 = -[NSObject objectID](v129, "objectID");
      v281 = v142;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v136);
      v135[1] = v142;

      _os_log_impl((void *)&_mh_execute_header, v130, (os_log_type_t)v257, "[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}", (uint8_t *)v134, 0x2Au);
      v143 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v135, 2, v143);
      v144 = v275;
      swift_slowDealloc(v135, -1, -1);
      v145 = (uint64_t)v273;
      swift_arrayDestroy(v273, 2, v243);
      swift_slowDealloc(v145, -1, -1);
      swift_slowDealloc(v134, -1, -1);

      v30 = v144;
    }
    else
    {

      swift_release_n(v126);
      v30 = v126;
    }
    swift_beginAccess(v249, &v278, 33, 0);
    sub_1001912EC((uint64_t)v129, (uint64_t)v128);
    swift_endAccess(&v278);
LABEL_69:

    v273 = (_QWORD *)v92[2];
    if (v273)
    {
      swift_bridgeObjectRetain(v92);
      v147 = *((char *)v92 + 32);
      if (*(unsigned __int16 *)(v30 + 68) >> 14 == 2 && (dword_1006C4934[v147] & *(_DWORD *)(v30 + 64)) == 0)
      {
        v149 = Logger.logObject.getter(v146);
        v150 = static os_log_type_t.error.getter(v149);
        if (os_log_type_enabled(v149, v150))
        {
          v151 = swift_slowAlloc(12, -1);
          v152 = (_QWORD *)swift_slowAlloc(32, -1);
          v278 = v152;
          *(_DWORD *)v151 = v259.n128_u32[0];
          LOBYTE(v281) = v147;
          v153 = String.init<A>(describing:)(&v281, &type metadata for REMAccountStorageCDIngestor.ValueKey);
          *(_QWORD *)(v151 + 4) = sub_10001A820(v153, v154, (uint64_t *)&v278);
          v155 = v275;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v149, v150, "Client doesn't have permission to write key {changedValueKey: %{public}s}", (uint8_t *)v151, 0xCu);
          swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
          v156 = v152;
          v30 = v155;
          swift_slowDealloc(v156, -1, -1);
          swift_slowDealloc(v151, -1, -1);
        }

      }
      __asm { BR              X10 }
    }
    swift_retain_n(v30);
    v157 = v269;
    swift_bridgeObjectRetain_n(v92, 2);
    v158 = v266;
    v43 = v157;
    v13 = v158;
    v159 = Logger.logObject.getter(v13);
    v160 = static os_log_type_t.default.getter(v159);
    if (os_log_type_enabled(v159, (os_log_type_t)v160))
    {
      LODWORD(v241) = v160;
      v266 = v159;
      v161 = swift_slowAlloc(58, -1);
      v239 = (char *)v13;
      v162 = v161;
      v163 = swift_slowAlloc(16, -1);
      v256 = swift_slowAlloc(96, -1);
      v278 = (_QWORD *)v256;
      *(_DWORD *)v162 = v245.n128_u32[0];
      v281 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v278);
      v164 = v255;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v255);
      *(_WORD *)(v162 + 12) = 2082;
      sub_1000184A8(v250, (uint64_t)v279);
      sub_100671124((uint64_t)v279, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v166 = v165;
      v168 = v167;
      sub_100671124((uint64_t)v279, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v281 = sub_10001A820(v166, v168, (uint64_t *)&v278);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v164);
      swift_release_n(v30);
      swift_bridgeObjectRelease();
      *(_WORD *)(v162 + 22) = 2114;
      v281 = v43;
      v169 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v164);
      v269 = v43;
      v163->isa = (Class)v43;

      *(_WORD *)(v162 + 32) = 2112;
      v170 = v239;
      v171 = objc_msgSend(v239, "objectID");
      v281 = v171;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v164);
      v240 = v163;
      v163[1].isa = (Class)v171;

      v257 = v162;
      *(_WORD *)(v162 + 42) = 2082;
      v172 = v30;
      v173 = v92[2];
      if (v173)
      {
        v281 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v173, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v13 = v170;
      v174 = v257;
      v175 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v177 = v176;
      swift_bridgeObjectRelease();
      v281 = sub_10001A820(v175, v177, (uint64_t *)&v278);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v255);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v174 + 52) = 1024;
      v178 = *(unsigned __int8 *)(v172 + 104);
      swift_release(v172);
      LODWORD(v281) = v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v246);
      swift_release(v172);
      v179 = v266;
      _os_log_impl((void *)&_mh_execute_header, v266, (os_log_type_t)v241, "[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{BOOL}d}", (uint8_t *)v174, 0x3Au);
      v180 = sub_10001A630((uint64_t *)&unk_100839E70);
      v181 = v240;
      swift_arrayDestroy(v240, 2, v180);
      swift_slowDealloc(v181, -1, -1);
      v182 = v256;
      swift_arrayDestroy(v256, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v182, -1, -1);
      swift_slowDealloc(v174, -1, -1);

      v63 = v267;
      v30 = v172;
      v43 = v269;
    }
    else
    {

      swift_release_n(v30);
      swift_bridgeObjectRelease_n(v92, 2);
      v63 = v267;
    }
    v21 = (uint64_t)v265;
    v183 = v258;
    sub_10025A640(v265, v13, (uint64_t)v92, (uint64_t *)v30);
    if (v183)
      goto LABEL_124;
    v258 = 0;
    v184 = -[NSObject changedValues](v13, "changedValues");
    v185 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v184, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v186 = (NSObject **)v253;
    swift_beginAccess(v253, &v278, 33, 0);
    v187 = v43;
    swift_bridgeObjectRetain(v185);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v186);
    v281 = *v186;
    *v186 = 0x8000000000000000;
    sub_10028C70C(v185, v187, isUniquelyReferenced_nonNull_native);
    *v186 = v281;

    swift_bridgeObjectRelease();
    swift_endAccess(&v278);
    v189 = *(unsigned __int8 *)(v30 + 104);
    v190 = v13;
    swift_bridgeObjectRelease();
    if (!v273 || (v189 & 1) == 0)
    {
      v241 = v190;
      v191 = v187;
      swift_retain_n(v30);
      v192 = v191;
      v193 = v185;
      swift_bridgeObjectRetain(v185);
      v195 = Logger.logObject.getter(v194);
      v196 = static os_log_type_t.default.getter(v195);
      if (!os_log_type_enabled(v195, (os_log_type_t)v196))
      {

        swift_bridgeObjectRelease_n(v185, 2);
        v220 = v241;

        swift_release_n(v30);
        goto LABEL_114;
      }
      LODWORD(v239) = v196;
      v240 = v195;
      v197 = swift_slowAlloc(44, -1);
      v198 = (NSObject **)swift_slowAlloc(8, -1);
      v236 = (_QWORD *)swift_slowAlloc(64, -1);
      v278 = v236;
      *(_DWORD *)v197 = v242.n128_u32[0];
      v281 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v278);
      v199 = v255;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v255);
      *(_WORD *)(v197 + 12) = 1024;
      swift_release(v30);
      LODWORD(v281) = v189;
      v200 = v246;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v246);
      swift_release(v30);
      *(_WORD *)(v197 + 18) = 1024;
      LODWORD(v281) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v200);
      *(_WORD *)(v197 + 24) = 2114;
      v281 = v192;
      v22 = v192;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v199);
      v238 = v198;
      *v198 = v192;

      v237 = (id)v22;
      *(_WORD *)(v197 + 34) = 2082;
      v201 = *(_QWORD *)(v193 + 16);
      if (!v201)
      {
        v221 = v30;
        v26 = _swiftEmptyArrayStorage;
        v64 = v268;
LABEL_117:
        v222 = v236;
        v223 = Array.description.getter(v26, &type metadata for String);
        v225 = v224;
        swift_bridgeObjectRelease();
        v281 = sub_10001A820(v223, v225, (uint64_t *)&v278);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v281, v255);
        swift_bridgeObjectRelease_n(v193, 2);
        swift_bridgeObjectRelease();
        v226 = v240;
        _os_log_impl((void *)&_mh_execute_header, v240, (os_log_type_t)v239, "[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{BOOL}d, immutableType: %{BOOL}d, objectID: %{public}@, changedValues.keys: %{public}s}", (uint8_t *)v197, 0x2Cu);
        v227 = sub_10001A630((uint64_t *)&unk_100839E70);
        v228 = v238;
        swift_arrayDestroy(v238, 1, v227);
        swift_slowDealloc(v228, -1, -1);
        swift_arrayDestroy(v222, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v222, -1, -1);
        swift_slowDealloc(v197, -1, -1);

        v229 = v241;
        v63 = v267;
        v30 = v221;
        goto LABEL_118;
      }
      v235 = v197;
      v281 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v193);
      sub_1001C1B0C(0, v201, 0);
      v26 = v281;
      v31 = sub_100658CFC(v193);
      v203 = v193;
      v204 = 0;
      v11 = v193 + 64;
      v205 = *(_BYTE *)(v193 + 32);
      v256 = v202;
      v234 = v193 + 96;
      v257 = v193;
      while (2)
      {
        if (v31 < 0 || v31 >= 1 << v205)
          goto LABEL_130;
        v207 = (unint64_t)v31 >> 6;
        v22 = 1 << v31;
        if ((*(_QWORD *)(v11 + 8 * ((unint64_t)v31 >> 6)) & (1 << v31)) == 0)
          goto LABEL_131;
        v266 = v204;
        if (*(_DWORD *)(v203 + 36) != v202)
          goto LABEL_132;
        v208 = (char *)v201;
        v209 = v202;
        v210 = *(_QWORD *)(v203 + 48) + 16 * v31;
        v211 = *(objc_class **)(v210 + 8);
        v269 = *(id *)v210;
        v281 = v26;
        v213 = (unint64_t)v26[2].isa;
        v212 = (unint64_t)v26[3].isa;
        v273 = (_QWORD *)(v213 + 1);
        swift_bridgeObjectRetain(v211);
        if (v213 >= v212 >> 1)
        {
          sub_1001C1B0C(v212 > 1, (int64_t)v273, 1);
          v26 = v281;
        }
        v26[2].isa = (Class)v273;
        v214 = &v26[2 * v213];
        v214[4].isa = (Class)v269;
        v214[5].isa = v211;
        v203 = v257;
        v205 = *(_BYTE *)(v257 + 32);
        v206 = 1 << v205;
        if (v31 >= 1 << v205)
          goto LABEL_133;
        v215 = *(_QWORD *)(v11 + 8 * v207);
        v64 = v268;
        if ((v215 & v22) == 0)
          goto LABEL_134;
        if (*(_DWORD *)(v257 + 36) != v209)
          goto LABEL_135;
        v201 = (int64_t)v208;
        v216 = v215 & (-2 << (v31 & 0x3F));
        if (v216)
        {
          v206 = __clz(__rbit64(v216)) | v31 & 0xFFFFFFFFFFFFFFC0;
          goto LABEL_92;
        }
        v217 = v207 + 1;
        v218 = (v206 + 63) >> 6;
        if (v207 + 1 < v218)
        {
          v219 = *(_QWORD *)(v11 + 8 * v217);
          if (v219)
            goto LABEL_105;
          v217 = v207 + 2;
          if (v207 + 2 < v218)
          {
            v219 = *(_QWORD *)(v11 + 8 * v217);
            if (v219)
              goto LABEL_105;
            v217 = v207 + 3;
            if (v207 + 3 >= v218)
              goto LABEL_92;
            v219 = *(_QWORD *)(v11 + 8 * v217);
            if (v219)
            {
LABEL_105:
              v206 = __clz(__rbit64(v219)) + (v217 << 6);
              goto LABEL_92;
            }
            while (v218 - 4 != v207)
            {
              v219 = *(_QWORD *)(v234 + 8 * v207++);
              if (v219)
              {
                v217 = v207 + 3;
                goto LABEL_105;
              }
            }
          }
        }
LABEL_92:
        v204 = ((char *)&v266->isa + 1);
        v202 = v256;
        v31 = v206;
        if ((char *)&v266->isa + 1 == v208)
        {
          v193 = v257;
          swift_bridgeObjectRelease();
          v221 = v275;
          v197 = v235;
          goto LABEL_117;
        }
        continue;
      }
    }
    objc_msgSend(v190, "updateChangeCount", swift_bridgeObjectRelease().n128_f64[0]);

LABEL_114:
    v64 = v268;
LABEL_118:
    v72 = v254;
    v67 = v258;
    v51 = v276;
    v73 = v251;
    if (v254 == v252)
      goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_120:
  v230 = (void *)objc_opt_self(REMError);
  v231 = v269;
  swift_willThrow(objc_msgSend(v230, "noSuchObjectErrorWithObjectID:", v269));

}

void sub_100618498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t i;
  id *v24;
  uint64_t (*v25)();
  _QWORD *v26;
  char *v27;
  os_log_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD, _QWORD);
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  id *v84;
  int64_t *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  unint64_t v94;
  char v95;
  id v96;
  unint64_t v97;
  char v98;
  int64_t *v99;
  id v100;
  id v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  id v110;
  int64_t v111;
  int64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  id v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int64_t *v135;
  unint64_t v136;
  int64_t *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  id v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  Swift::Int v146;
  uint64_t v147;
  BOOL v148;
  id v149;
  void *v150;
  uint64_t v151;
  id v152;
  void *v153;
  id v154;
  unint64_t v155;
  char v156;
  id v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  id v161;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v163;
  unint64_t v164;
  uint64_t v165;
  _BOOL8 v166;
  uint64_t v167;
  char v168;
  unint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  id v179;
  NSObject *v180;
  os_log_type_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  double v187;
  id v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  double v192;
  id v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  id v197;
  id v198;
  NSObject *v199;
  os_log_type_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t (*v204)();
  unint64_t v205;
  unint64_t v206;
  double v207;
  id v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int64_t *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _QWORD *v219;
  char v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  id v225;
  uint64_t v226;
  uint64_t *v227;
  unint64_t v228;
  os_log_type_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  uint64_t (*v236)();
  uint64_t v237;
  _QWORD *v238;
  int64_t *v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  void *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  id v247;
  id v248;
  os_log_type_t type;
  uint64_t typea;
  uint64_t typeb;
  char v252;
  uint64_t *v253;
  unint64_t v254;
  id v255[4];
  unint64_t v256;
  uint64_t v257;
  unsigned __int8 v258;
  _QWORD *v259;
  uint64_t v260;
  _BYTE v261[48];
  _BYTE v262[48];
  _BYTE v263[56];
  uint64_t v264;

  v6 = v3;
  v264 = a2;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  v253 = &v264;
  v254 = v6;
  swift_bridgeObjectRetain(v10);
  v11 = sub_100351480((void (*)(__n128 *__return_ptr, id *))sub_1006723B0, (uint64_t)&v252, a1);
  if (v4)
    goto LABEL_2;
  v237 = a1;
  v240 = v11;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v240);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  log = (os_log_t)a3;
  v236 = (uint64_t (*)())v6;
  if (os_log_type_enabled(v14, v15))
  {
    type = v15;
    v16 = swift_slowAlloc(42, -1);
    v243 = (void *)swift_slowAlloc(96, -1);
    v255[0] = v243;
    *(_DWORD *)v16 = 136446978;
    v256 = sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, &v257);
    *(_WORD *)(v16 + 12) = 2048;
    v256 = v240[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, &v257);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v5 = v16 + 24;
    v17 = type metadata accessor for REMCDSavedAttachment();
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v256 = sub_10001A820(v19, v21, (uint64_t *)v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, &v257);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 2082;
    swift_bridgeObjectRetain(v10);
    v256 = sub_10001A820(v9, v10, (uint64_t *)v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, &v257);
    swift_bridgeObjectRelease_n(v10, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, type, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v16, 0x2Au);
    v6 = (unint64_t)v243;
    swift_arrayDestroy(v243, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v243, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease();
  }
  v242 = v240[2];
  if (!v242)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    return;
  }
  v260 = (uint64_t)&_swiftEmptySetSingleton;
  v241 = v240 + 4;
  swift_bridgeObjectRetain(v240);
  for (i = 0; i != v242; ++i)
  {
    if (i >= v22[2])
    {
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_160:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    }
    v24 = (id *)&v241[2 * i];
    v25 = (uint64_t (*)())v24[1];
    v26 = (_QWORD *)*((_QWORD *)v25 + 2);
    if (v26)
    {
      v244 = i;
      v27 = (char *)v25 + 32;
      v28 = (os_log_t)*v24;
      swift_bridgeObjectRetain(v25);
      v29 = 0;
      while (1)
      {
        if (v29 >= *((_QWORD *)v25 + 2))
          goto LABEL_53;
        v30 = v27[v29];
        v31 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v32 = swift_allocObject(v31, 40, 7);
        *(_OWORD *)(v32 + 16) = xmmword_1006A7330;
        if ((v30 & 1) != 0)
          v33 = -[NSObject reminderID](v28, "reminderID");
        else
          v33 = -[NSObject accountID](v28, "accountID");
        v34 = v33;
        *(_QWORD *)(v32 + 32) = v34;
        v255[0] = (id)v32;
        v14 = v255;
        v35 = specialized Array._endMutation()(v34);
        v6 = (unint64_t)v255[0];
        if ((unint64_t)v255[0] >> 62)
        {
          if ((uint64_t)v255[0] < 0)
            v39 = v255[0];
          else
            v39 = (id)((unint64_t)v255[0] & 0xFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain(v255[0]);
          v36 = _CocoaArrayWrapper.endIndex.getter(v39);
          swift_bridgeObjectRelease();
          if (v36)
          {
LABEL_22:
            if (v36 < 1)
            {
              __break(1u);
LABEL_70:
              v81 = v35;
              swift_bridgeObjectRelease();
              sub_1006442D0(v5, (uint64_t)v28);
              if (v27)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_2;
              }
              v226 = v82;
              swift_bridgeObjectRelease();
              v216 = (uint64_t)v25 + 24;
              v227 = (uint64_t *)&v28[6];
              swift_beginAccess(&v28[6], v255, 0, 0);
              v83 = 0;
              v215 = (unint64_t)"mutateRelationshipOrdering";
              v246 = v81;
              while (2)
              {
                if (v83 >= v26[2])
                  goto LABEL_176;
                v228 = v83;
                v84 = (id *)&v241[2 * v83];
                v85 = (int64_t *)v84[1];
                v45 = *v84;
                v239 = v85;
                v86 = objc_msgSend(v45, "remObjectID", swift_bridgeObjectRetain(v85).n128_f64[0]);
                v44 = sub_1005CDB68(v86, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, 0xD000000000000014, (void *)0x8000000100709CD0);

                v87 = *v227;
                if ((*v227 & 0xC000000000000001) != 0)
                {
                  if (v87 < 0)
                    v88 = *v227;
                  else
                    v88 = v87 & 0xFFFFFFFFFFFFFF8;
                  v89 = v44;
                  swift_bridgeObjectRetain(v87);
                  v90 = __CocoaDictionary.lookup(_:)(v89, v88);
                  if (v90)
                  {
                    v91 = v90;
                    v259 = (_QWORD *)v90;
                    v92 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
                    swift_unknownObjectRetain(v91);
                    swift_dynamicCast(&v256, &v259, (char *)&type metadata for Swift.AnyObject + 8, v92, 7);
                    v93 = (id)v256;
                    swift_unknownObjectRelease(v91);
                    goto LABEL_83;
                  }
LABEL_99:

                  swift_bridgeObjectRelease();
                  goto LABEL_100;
                }
                if (!*(_QWORD *)(v87 + 16))
                  goto LABEL_100;
                v89 = v44;
                swift_bridgeObjectRetain(v87);
                v94 = sub_1002C66DC((uint64_t)v89);
                if ((v95 & 1) == 0)
                  goto LABEL_99;
                v93 = *(id *)(*(_QWORD *)(v87 + 56) + 8 * v94);
LABEL_83:

                swift_bridgeObjectRelease();
                if (v93)
                {
                  v223 = v45;
                  if (!*(_QWORD *)(v226 + 16))
                    goto LABEL_162;
                  v96 = v44;
                  v97 = sub_1002C672C(v96);
                  if ((v98 & 1) == 0)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    goto LABEL_164;
                  }
                  v225 = *(id *)(*(_QWORD *)(v226 + 56) + 8 * v97);

                  v99 = v239;
                  swift_bridgeObjectRetain_n(v239, 2);
                  v100 = v96;
                  swift_retain_n(v25);
                  v101 = v100;
                  v102 = Logger.logObject.getter(v101);
                  v103 = static os_log_type_t.default.getter(v102);
                  v222 = v101;
                  if (os_log_type_enabled(v102, v103))
                  {
                    v229 = v103;
                    loga = v102;
                    v104 = swift_slowAlloc(42, -1);
                    v105 = (_QWORD *)swift_slowAlloc(8, -1);
                    v231 = swift_slowAlloc(96, -1);
                    v256 = v231;
                    *(_DWORD *)v104 = 136446978;
                    v259 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v256);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);
                    *(_WORD *)(v104 + 12) = 2082;
                    sub_1000184A8(v216, (uint64_t)v263);
                    sub_100671124((uint64_t)v263, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                    sub_1000181B8();
                    v107 = v106;
                    v109 = v108;
                    sub_100671124((uint64_t)v263, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                    v259 = (_QWORD *)sub_10001A820(v107, v109, (uint64_t *)&v256);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);
                    swift_release_n(v236);
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v104 + 22) = 2114;
                    v259 = v101;
                    v110 = v101;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);
                    v219 = v105;
                    *v105 = v101;

                    *(_WORD *)(v104 + 32) = 2082;
                    v111 = v239[2];
                    if (v111)
                    {
                      v259 = _swiftEmptyArrayStorage;
                      sub_1001C1B0C(0, v111, 0);
                      v112 = v239;
                      v113 = 0;
                      v114 = v259;
                      v115 = v259[2];
                      v116 = 2 * v115;
                      do
                      {
                        v117 = v115 + v113;
                        if (*((_BYTE *)v112 + v113 + 32))
                          v118 = 0x7265646E696D6572;
                        else
                          v118 = 0x49746E756F636361;
                        if (*((_BYTE *)v112 + v113 + 32))
                          v119 = 0xEA00000000004449;
                        else
                          v119 = 0xE900000000000044;
                        v259 = v114;
                        v120 = v114[3];
                        v121 = v117 + 1;
                        if (v117 >= v120 >> 1)
                        {
                          sub_1001C1B0C(v120 > 1, v117 + 1, 1);
                          v112 = v239;
                          v114 = v259;
                        }
                        ++v113;
                        v114[2] = v121;
                        v122 = &v114[v116];
                        v122[4] = v118;
                        v122[5] = v119;
                        v116 += 2;
                      }
                      while (v111 != v113);
                      v99 = v112;
                      swift_bridgeObjectRelease();
                      v45 = v223;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      v114 = _swiftEmptyArrayStorage;
                    }
                    v130 = Array.description.getter(v114, &type metadata for String);
                    v132 = v131;
                    swift_bridgeObjectRelease();
                    v259 = (_QWORD *)sub_10001A820(v130, v132, (uint64_t *)&v256);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, loga, v229, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v104, 0x2Au);
                    v133 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v219, 1, v133);
                    swift_slowDealloc(v219, -1, -1);
                    swift_arrayDestroy(v231, 3, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v231, -1, -1);
                    swift_slowDealloc(v104, -1, -1);

                    v25 = v236;
                  }
                  else
                  {

                    swift_release_n(v25);
                    swift_bridgeObjectRelease_n(v239, 2);
                  }
                  v134 = v246;
                  v135 = v99;
                  v217 = v99[2];
                  if (v217)
                  {
                    v136 = 0;
                    v137 = (uint64_t)(v99 + 4);
                    v214 = (uint64_t)(v99 + 4);
                    while (v136 < v135[2])
                    {
                      v138 = *(_BYTE *)(v137 + v136);
                      v139 = sub_10001A630((uint64_t *)&unk_10083AD90);
                      v140 = swift_allocObject(v139, 40, 7);
                      *(_OWORD *)(v140 + 16) = xmmword_1006A7330;
                      v220 = v138;
                      if ((v138 & 1) != 0)
                        v141 = objc_msgSend(v45, "reminderID");
                      else
                        v141 = objc_msgSend(v45, "accountID");
                      v142 = v141;
                      *(_QWORD *)(v140 + 32) = v142;
                      v256 = v140;
                      specialized Array._endMutation()(v142);
                      v143 = v256;
                      if (v256 >> 62)
                      {
                        if ((v256 & 0x8000000000000000) != 0)
                          v176 = v256;
                        else
                          v176 = v256 & 0xFFFFFFFFFFFFFF8;
                        swift_bridgeObjectRetain(v256);
                        v144 = _CocoaArrayWrapper.endIndex.getter(v176);
                        swift_bridgeObjectRelease();
                        v218 = v136;
                        if (v144)
                        {
LABEL_116:
                          logb = (os_log_t)(v143 & 0xC000000000000001);
                          v145 = 4;
                          v146 = (Swift::Int)_swiftEmptyDictionarySingleton;
                          v230 = v143;
                          v232 = v144;
                          while (1)
                          {
                            if (logb)
                              v149 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v145 - 4, v143);
                            else
                              v149 = *(id *)(v143 + 8 * v145);
                            v150 = v149;
                            v151 = v145 - 3;
                            if (__OFADD__(v145 - 4, 1))
                              goto LABEL_173;
                            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                            v152 = v150;
                            v153 = v152;
                            if (!*(_QWORD *)(v134 + 16))
                              break;
                            v154 = v152;
                            v155 = sub_1002C672C(v154);
                            if ((v156 & 1) == 0)
                            {
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();

                              goto LABEL_156;
                            }
                            v157 = *(id *)(*(_QWORD *)(v134 + 56) + 8 * v155);

                            if ((v146 & 0xC000000000000001) != 0)
                            {
                              if (v146 < 0)
                                v158 = v146;
                              else
                                v158 = v146 & 0xFFFFFFFFFFFFFF8;
                              v159 = v157;
                              v160 = __CocoaDictionary.count.getter(v158);
                              if (__OFADD__(v160, 1))
                                goto LABEL_175;
                              v146 = sub_100192078(v158, v160 + 1);
                            }
                            else
                            {
                              v161 = v157;
                            }
                            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v146);
                            v256 = v146;
                            v164 = sub_1002C66DC((uint64_t)v154);
                            v165 = *(_QWORD *)(v146 + 16);
                            v166 = (v163 & 1) == 0;
                            v167 = v165 + v166;
                            if (__OFADD__(v165, v166))
                              goto LABEL_174;
                            v168 = v163;
                            if (*(_QWORD *)(v146 + 24) >= v167)
                            {
                              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                                sub_1002D73A0();
                            }
                            else
                            {
                              sub_1002CF2DC(v167, isUniquelyReferenced_nonNull_native);
                              v169 = sub_1002C66DC((uint64_t)v154);
                              if ((v168 & 1) != (v170 & 1))
                                goto LABEL_180;
                              v164 = v169;
                            }
                            v146 = v256;
                            if ((v168 & 1) != 0)
                            {
                              v147 = *(_QWORD *)(v256 + 56);

                              *(_QWORD *)(v147 + 8 * v164) = v157;
                            }
                            else
                            {
                              *(_QWORD *)(v256 + 8 * (v164 >> 6) + 64) |= 1 << v164;
                              v171 = 8 * v164;
                              *(_QWORD *)(*(_QWORD *)(v146 + 48) + v171) = v154;
                              *(_QWORD *)(*(_QWORD *)(v146 + 56) + v171) = v157;
                              v172 = *(_QWORD *)(v146 + 16);
                              v173 = __OFADD__(v172, 1);
                              v174 = v172 + 1;
                              if (v173)
                                goto LABEL_177;
                              *(_QWORD *)(v146 + 16) = v174;
                              v175 = v154;
                            }
                            v134 = v246;
                            v143 = v230;

                            swift_bridgeObjectRelease();
                            ++v145;
                            v148 = v151 == v232;
                            v25 = v236;
                            if (v148)
                              goto LABEL_146;
                          }
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
LABEL_156:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_retain_n(v236);
                          v179 = v153;
                          v180 = Logger.logObject.getter(v179);
                          v181 = static os_log_type_t.error.getter(v180);
                          if (os_log_type_enabled(v180, v181))
                          {
                            v182 = swift_slowAlloc(42, -1);
                            typea = swift_slowAlloc(128, -1);
                            v256 = typea;
                            *(_DWORD *)v182 = 136446978;
                            v259 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v256);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);
                            *(_WORD *)(v182 + 12) = 2082;
                            sub_1000184A8(v216, (uint64_t)v262);
                            sub_100671124((uint64_t)v262, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                            sub_1000181B8();
                            v184 = v183;
                            v186 = v185;
                            sub_100671124((uint64_t)v262, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                            v259 = (_QWORD *)sub_10001A820(v184, v186, (uint64_t *)&v256);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);
                            swift_release_n(v236);
                            *(_QWORD *)&v187 = swift_bridgeObjectRelease().n128_u64[0];
                            *(_WORD *)(v182 + 22) = 2080;
                            v188 = objc_msgSend(v179, "description", v187);
                            v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
                            v191 = v190;

                            v259 = (_QWORD *)sub_10001A820(v189, v191, (uint64_t *)&v256);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);

                            *(_QWORD *)&v192 = swift_bridgeObjectRelease().n128_u64[0];
                            *(_WORD *)(v182 + 32) = 2080;
                            v193 = objc_msgSend(v179, "description", v192);
                            v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
                            v196 = v195;

                            v259 = (_QWORD *)sub_10001A820(v194, v196, (uint64_t *)&v256);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);

                            swift_bridgeObjectRelease();
                            _os_log_impl((void *)&_mh_execute_header, v180, v181, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v182, 0x2Au);
                            swift_arrayDestroy(typea, 4, (char *)&type metadata for Any + 8);
                            swift_slowDealloc(typea, -1, -1);
                            swift_slowDealloc(v182, -1, -1);

                          }
                          else
                          {

                            swift_release_n(v236);
                          }
                          v247 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v179);
                          swift_willThrow(v247);

                          return;
                        }
                      }
                      else
                      {
                        v144 = *(_QWORD *)((v256 & 0xFFFFFFFFFFFFF8) + 0x10);
                        v218 = v136;
                        if (v144)
                          goto LABEL_116;
                      }
                      v146 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_146:
                      swift_bridgeObjectRelease();
                      v177 = sub_1003B101C(v146);
                      swift_bridgeObjectRelease();
                      v45 = v223;
                      sub_10019DA18(v223, v225, v220, v177);
                      v136 = v218 + 1;
                      swift_bridgeObjectRelease();
                      v135 = v239;
                      v26 = v240;
                      v137 = v214;
                      if (v218 + 1 == v217)
                      {
                        swift_bridgeObjectRelease();
                        goto LABEL_149;
                      }
                    }
                    goto LABEL_178;
                  }
                  swift_bridgeObjectRelease();
                  v26 = v240;
LABEL_149:
                  if ((*((_BYTE *)v25 + 104) & 1) != 0)
                  {
                    v178 = v225;
                    objc_msgSend(v178, "updateChangeCount");

                  }
                  else
                  {

                  }
                }
                else
                {
LABEL_100:
                  swift_bridgeObjectRelease();
                  v123 = v44;
                  v124 = Logger.logObject.getter(v123);
                  v125 = static os_log_type_t.info.getter(v124);
                  if (os_log_type_enabled(v124, v125))
                  {
                    v126 = swift_slowAlloc(22, -1);
                    v127 = (_QWORD *)swift_slowAlloc(8, -1);
                    v128 = swift_slowAlloc(32, -1);
                    v256 = v128;
                    *(_DWORD *)v126 = 136446466;
                    *(_QWORD *)(v126 + 4) = sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v256);
                    *(_WORD *)(v126 + 12) = 2114;
                    *(_QWORD *)(v126 + 14) = v123;
                    *v127 = v123;

                    _os_log_impl((void *)&_mh_execute_header, v124, v125, "[%{public}s] Skipping establishRelationships() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v126, 0x16u);
                    v129 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v127, 1, v129);
                    swift_slowDealloc(v127, -1, -1);
                    swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v128, -1, -1);
                    swift_slowDealloc(v126, -1, -1);

                  }
                  else
                  {

                  }
                }
                v83 = v228 + 1;
                if (v228 + 1 == v242)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_160;
                }
                continue;
              }
            }
            if ((v6 & 0xC000000000000001) != 0)
            {
              v5 = 0;
              do
              {
                v37 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5++, v6);
                v14 = &v260;
                sub_1002DB2CC((Swift::Int *)v255, v37);

              }
              while (v36 != v5);
            }
            else
            {
              v5 = 0;
              do
              {
                v38 = *(void **)(v6 + 8 * v5++ + 32);
                v14 = &v260;
                sub_1002DB2CC((Swift::Int *)v255, v38);

              }
              while (v36 != v5);
            }
          }
        }
        else
        {
          v36 = *(_QWORD *)(((unint64_t)v255[0] & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v36)
            goto LABEL_22;
        }
        swift_bridgeObjectRelease();
        if ((_QWORD *)++v29 == v26)
        {

          swift_bridgeObjectRelease();
          v22 = v240;
          i = v244;
          break;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  if ((unint64_t)v237 >> 62)
  {
    if (v237 < 0)
      v212 = v237;
    else
      v212 = v237 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v237);
    v40 = _CocoaArrayWrapper.endIndex.getter(v212);
    swift_bridgeObjectRelease();
  }
  else
  {
    v40 = *(_QWORD *)((v237 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v41 = _swiftEmptyArrayStorage;
  if (!v40)
  {
LABEL_46:
    v238 = v41;
    v52 = v260;
    if ((v260 & 0xC000000000000001) != 0)
    {
      if (v260 < 0)
        v53 = v260;
      else
        v53 = v260 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v260);
      v54 = __CocoaSet.count.getter(v53);
      if (v54)
      {
        v55 = v54;
        v259 = _swiftEmptyArrayStorage;
        v14 = &v259;
        specialized ContiguousArray.reserveCapacity(_:)(v54);
        v256 = __CocoaSet.startIndex.getter(v53);
        v257 = v56;
        v258 = 1;
        if (v55 < 0)
        {
          __break(1u);
LABEL_53:
          __break(1u);

          v57 = v255[0];
          swift_bridgeObjectRelease();
          swift_release(v57);
          goto LABEL_2;
        }
        goto LABEL_56;
      }
    }
    else
    {
      v55 = *(_QWORD *)(v260 + 16);
      swift_bridgeObjectRetain(v260);
      if (v55)
      {
        v259 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v55);
        v256 = sub_100364E8C(v52);
        v257 = v58;
        v258 = v59 & 1;
LABEL_56:
        v60 = v52 & 0xFFFFFFFFFFFFFF8;
        if (v52 < 0)
          v60 = v52;
        v245 = v60;
        do
        {
          while (1)
          {
            v67 = v256;
            v66 = v257;
            v68 = v258;
            sub_100364660(v256, v257, v258, v52);
            v70 = v69;
            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
            v71 = v70;

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v72);
            v73 = v259[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v73);
            v74 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
            specialized ContiguousArray._endMutation()(v74);
            if ((v52 & 0xC000000000000001) != 0)
              break;
            v61 = sub_10036456C(v67, v66, v68, v52);
            v63 = v62;
            v65 = v64;
            sub_1000E515C(v67, v66, v68);
            v256 = v61;
            v257 = v63;
            v258 = v65 & 1;
            if (!--v55)
              goto LABEL_66;
          }
          if ((v68 & 1) == 0)
            goto LABEL_179;
          v75 = __CocoaSet.Index.handleBitPattern.getter(v67, v66);
          if (v75)
            v76 = swift_isUniquelyReferenced_nonNull_native(v75);
          else
            v76 = 1;
          v77 = sub_10001A630(&qword_1008466D8);
          v78 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v255, v77);
          __CocoaSet.formIndex(after:isUnique:)(v79, v76, v245);
          v78(v255, 0);
          --v55;
        }
        while (v55);
LABEL_66:
        sub_1000E515C(v256, v257, v258);
        v80 = v259;
        swift_bridgeObjectRelease();
        goto LABEL_68;
      }
    }
    swift_bridgeObjectRelease();
    v80 = _swiftEmptyArrayStorage;
LABEL_68:
    v28 = log;
    v25 = v236;
    sub_1006446F0((uint64_t)v80, (uint64_t)log);
    v27 = 0;
    v5 = (uint64_t)v238;
    v26 = v240;
    goto LABEL_70;
  }
  v255[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v40);
  if (v40 < 0)
  {
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    v213 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v213);
    __break(1u);
  }
  else
  {
    v42 = 0;
    v43 = v237;
    v44 = (void *)0xD000000000000014;
    v45 = (id)0x8000000100709CD0;
    v25 = type metadata accessor for REMCDSavedAttachment;
    while (v40 != v42)
    {
      if ((v237 & 0xC000000000000001) != 0)
        v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v43);
      else
        v46 = *(id *)(v43 + 8 * v42 + 32);
      v47 = v46;
      v48 = sub_1005CDB68(objc_msgSend(v47, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, 0xD000000000000014, (void *)0x8000000100709CD0);
      ++v42;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v49);
      v50 = *((_QWORD *)v255[0] + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v50);
      v51 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v48);
      specialized ContiguousArray._endMutation()(v51);
      v43 = v237;
      if (v40 == v42)
      {
        v41 = v255[0];
        goto LABEL_46;
      }
    }
    __break(1u);
    __break(1u);
LABEL_162:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_164:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v197 = v44;
    swift_retain_n(v25);
    v198 = v197;
    v199 = Logger.logObject.getter(v198);
    v200 = static os_log_type_t.error.getter(v199);
    if (os_log_type_enabled(v199, v200))
    {
      v201 = swift_slowAlloc(32, -1);
      typeb = swift_slowAlloc(96, -1);
      v256 = typeb;
      *(_DWORD *)v201 = 136446722;
      v259 = (_QWORD *)sub_10001A820(0xD000000000000016, v215 | 0x8000000000000000, (uint64_t *)&v256);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);
      *(_WORD *)(v201 + 12) = 2082;
      sub_1000184A8(v216, (uint64_t)v261);
      sub_100671124((uint64_t)v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v203 = v202;
      v204 = v25;
      v206 = v205;
      sub_100671124((uint64_t)v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v259 = (_QWORD *)sub_10001A820(v203, v206, (uint64_t *)&v256);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);
      swift_release_n(v204);
      *(_QWORD *)&v207 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v201 + 22) = 2080;
      v208 = objc_msgSend(v198, "description", v207);
      v209 = static String._unconditionallyBridgeFromObjectiveC(_:)(v208);
      v211 = v210;

      v45 = v223;
      v259 = (_QWORD *)sub_10001A820(v209, v211, (uint64_t *)&v256);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v199, v200, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v201, 0x20u);
      swift_arrayDestroy(typeb, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typeb, -1, -1);
      swift_slowDealloc(v201, -1, -1);

    }
    else
    {

      swift_release_n(v25);
    }
    v248 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v198);
    swift_willThrow(v248);

  }
}

void sub_100619FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  char **v24;
  unint64_t i;
  id *v26;
  char **v27;
  char *v28;
  uint64_t v29;
  char **v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  __objc2_class **v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(id *, _QWORD);
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  id *v84;
  _QWORD *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  char v95;
  uint64_t *v96;
  unint64_t v97;
  char v98;
  _QWORD *v99;
  uint64_t *v100;
  NSObject *v101;
  uint64_t *v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t **v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  int64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  NSObject *v125;
  os_log_type_t v126;
  uint64_t v127;
  uint64_t **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  Swift::Int v146;
  uint64_t v147;
  id v148;
  void *v149;
  uint64_t v150;
  id v151;
  void *v152;
  id v153;
  unint64_t v154;
  char v155;
  id v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  id v160;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v162;
  unint64_t v163;
  uint64_t v164;
  _BOOL8 v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  id v178;
  NSObject *v179;
  os_log_type_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  double v186;
  id v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  double v191;
  id v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  NSObject *v198;
  os_log_type_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  double v205;
  id v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t **v217;
  char v218;
  void *v219;
  uint64_t *v220;
  __objc2_class **v221;
  void *v222;
  id v223;
  uint64_t v224;
  uint64_t *v225;
  unint64_t v226;
  os_log_type_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  NSObject *v232;
  uint64_t log;
  NSObject *loga;
  os_log_t logb;
  char **v236;
  _QWORD *v237;
  char *v238;
  _QWORD *v239;
  _QWORD *v240;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  id v243;
  id v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  char v248[16];
  uint64_t *v249;
  uint64_t v250;
  id v251[4];
  char *v252;
  uint64_t v253;
  unsigned __int8 v254;
  _QWORD *v255;
  uint64_t v256;
  _BYTE v257[48];
  _BYTE v258[48];
  _BYTE v259[56];
  uint64_t v260;

  v7 = v3;
  v260 = a2;
  v11 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  v249 = &v260;
  v250 = v7;
  swift_bridgeObjectRetain(v10);
  v12 = (char **)sub_10035149C((void (*)(__n128 *__return_ptr, id *))sub_100672B04, (uint64_t)v248, a1);
  if (v4)
  {
    v13 = v10;
    goto LABEL_3;
  }
  log = a1;
  v236 = v12;
  v229 = a3;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v236);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  v18 = v17;
  v232 = v7;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(42, -1);
    v245 = (void *)swift_slowAlloc(96, -1);
    v251[0] = v245;
    *(_DWORD *)v19 = 136446978;
    v252 = (char *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v251);
    v5 = (uint64_t)&v253;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253);
    *(_WORD *)(v19 + 12) = 2048;
    v252 = v236[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253);
    swift_bridgeObjectRelease(v236);
    *(_WORD *)(v19 + 22) = 2082;
    v239 = (_QWORD *)(v19 + 24);
    v20 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    *(_DWORD *)type = v18;
    v21 = objc_msgSend((id)swift_getObjCClassFromMetadata(v20), "description");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v6 = v23;

    v252 = (char *)sub_10001A820(v22, v6, (uint64_t *)v251);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253);
    swift_bridgeObjectRelease(v6);
    *(_WORD *)(v19 + 32) = 2082;
    swift_bridgeObjectRetain(v10);
    v252 = (char *)sub_10001A820(v11, v10, (uint64_t *)v251);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253);
    swift_bridgeObjectRelease_n(v10, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, type[0], "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v19, 0x2Au);
    v7 = (uint64_t)v245;
    swift_arrayDestroy(v245, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v245, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease(v236);
  }
  v13 = (unint64_t)v236;
  v238 = v236[2];
  if (!v238)
  {
LABEL_3:
    swift_bridgeObjectRelease(v13);
    return;
  }
  v256 = (uint64_t)&_swiftEmptySetSingleton;
  v237 = v236 + 4;
  swift_bridgeObjectRetain(v236);
  for (i = 0; (char *)i != v238; ++i)
  {
    if (i >= (unint64_t)v24[2])
    {
      __break(1u);
      swift_bridgeObjectRelease(v236);
      swift_bridgeObjectRelease(v239);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v6);

LABEL_161:
      swift_bridgeObjectRelease(v224);
      swift_bridgeObjectRelease(v5);
LABEL_70:
      v13 = v256;
      goto LABEL_3;
    }
    v26 = (id *)&v237[2 * i];
    v27 = (char **)v26[1];
    v28 = v27[2];
    if (v28)
    {
      *(_QWORD *)type = i;
      v29 = v260;
      v30 = v27 + 4;
      v239 = *v26;
      swift_bridgeObjectRetain(v27);
      v10 = 0;
      while (1)
      {
        if (v10 >= (unint64_t)v27[2])
          goto LABEL_54;
        v31 = *((_BYTE *)v30 + v10);
        v32 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v33 = swift_allocObject(v32, 40, 7);
        *(_OWORD *)(v33 + 16) = xmmword_1006A7330;
        if ((v31 & 1) != 0)
          v34 = *(void **)(v29 + 24);
        else
          v34 = *(void **)(v29 + 16);
        *(_QWORD *)(v33 + 32) = v34;
        v251[0] = (id)v33;
        v16 = v251;
        specialized Array._endMutation()(v33);
        v7 = (uint64_t)v251[0];
        v35 = v34;
        if ((unint64_t)v7 >> 62)
        {
          if (v7 < 0)
            v38 = v7;
          else
            v38 = v7 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v7);
          v5 = _CocoaArrayWrapper.endIndex.getter(v38);
          swift_bridgeObjectRelease(v7);
          if (v5)
          {
LABEL_23:
            if (v5 < 1)
            {
              __break(1u);
LABEL_72:
              v80 = v35;
              swift_bridgeObjectRelease(v7);
              sub_100644B10(v6, v29);
              if (v30)
              {
                v82 = v256;
                swift_bridgeObjectRelease(v6);
                swift_bridgeObjectRelease(v80);
                swift_bridgeObjectRelease(v27);
                v13 = v82;
                goto LABEL_3;
              }
              v224 = v81;
              swift_bridgeObjectRelease(v6);
              v214 = (uint64_t)&v16[3];
              v225 = (uint64_t *)(v29 + 48);
              swift_beginAccess(v29 + 48, v251, 0, 0);
              v83 = 0;
              v213 = (unint64_t)"mutateRelationshipOrdering";
              *(_QWORD *)type = v80;
              while (2)
              {
                if (v83 >= (unint64_t)v27[2])
                  goto LABEL_177;
                v84 = (id *)&v237[2 * v83];
                v85 = v84[1];
                v45 = (__objc2_class **)*v84;
                v239 = v85;
                v86 = objc_msgSend(v45, "remObjectID", swift_bridgeObjectRetain(v85).n128_f64[0]);
                v44 = (uint64_t *)sub_1005CCBAC(v86, (unint64_t *)&qword_10083DA60, off_1007D66C8);
                v226 = v83;

                v87 = *v225;
                if ((*v225 & 0xC000000000000001) != 0)
                {
                  if (v87 < 0)
                    v88 = *v225;
                  else
                    v88 = v87 & 0xFFFFFFFFFFFFFF8;
                  v89 = v44;
                  swift_bridgeObjectRetain(v87);
                  v90 = __CocoaDictionary.lookup(_:)(v89, v88);
                  if (v90)
                  {
                    v91 = v90;
                    v255 = (_QWORD *)v90;
                    v92 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
                    swift_unknownObjectRetain(v91);
                    swift_dynamicCast(&v252, &v255, (char *)&type metadata for Swift.AnyObject + 8, v92, 7);
                    v93 = v252;
                    swift_unknownObjectRelease(v91);
                    goto LABEL_85;
                  }
LABEL_101:

                  swift_bridgeObjectRelease(v87);
                  goto LABEL_102;
                }
                if (!*(_QWORD *)(v87 + 16))
                  goto LABEL_102;
                v89 = v44;
                swift_bridgeObjectRetain(v87);
                v94 = sub_1002C66DC((uint64_t)v89);
                if ((v95 & 1) == 0)
                  goto LABEL_101;
                v93 = (char *)*(id *)(*(_QWORD *)(v87 + 56) + 8 * v94);
LABEL_85:

                swift_bridgeObjectRelease(v87);
                if (v93)
                {
                  v41 = v224;
                  v221 = v45;
                  if (!*(_QWORD *)(v224 + 16))
                    goto LABEL_163;
                  v96 = v44;
                  v97 = sub_1002C672C(v96);
                  if ((v98 & 1) == 0)
                  {
                    swift_bridgeObjectRelease(v224);
                    swift_bridgeObjectRelease(*(_QWORD *)type);

                    goto LABEL_165;
                  }
                  v223 = *(id *)(*(_QWORD *)(v224 + 56) + 8 * v97);

                  v99 = v239;
                  swift_bridgeObjectRetain_n(v239, 2);
                  v100 = v96;
                  v101 = v232;
                  swift_retain_n(v232, 2);
                  v102 = v100;
                  v103 = Logger.logObject.getter(v102);
                  v104 = static os_log_type_t.default.getter(v103);
                  v220 = v102;
                  if (os_log_type_enabled(v103, v104))
                  {
                    v227 = v104;
                    loga = v103;
                    v105 = swift_slowAlloc(42, -1);
                    v106 = (uint64_t **)swift_slowAlloc(8, -1);
                    v230 = swift_slowAlloc(96, -1);
                    v252 = (char *)v230;
                    *(_DWORD *)v105 = 136446978;
                    v255 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v252);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);
                    *(_WORD *)(v105 + 12) = 2082;
                    sub_1000184A8(v214, (uint64_t)v259);
                    sub_100671124((uint64_t)v259, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                    sub_1000181B8();
                    v108 = v107;
                    v110 = v109;
                    sub_100671124((uint64_t)v259, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                    v255 = (_QWORD *)sub_10001A820(v108, v110, (uint64_t *)&v252);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);
                    swift_release_n(v232, 2);
                    swift_bridgeObjectRelease(v110);
                    *(_WORD *)(v105 + 22) = 2114;
                    v255 = v102;
                    v111 = v102;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);
                    v217 = v106;
                    *v106 = v102;

                    *(_WORD *)(v105 + 32) = 2082;
                    v112 = v239[2];
                    if (v112)
                    {
                      v255 = _swiftEmptyArrayStorage;
                      sub_1001C1B0C(0, v112, 0);
                      v113 = v239;
                      v114 = 0;
                      v115 = v255;
                      v116 = v255[2];
                      v117 = 2 * v116;
                      do
                      {
                        v118 = v116 + v114;
                        if (*((_BYTE *)v113 + v114 + 32))
                          v119 = 0x7265646E696D6572;
                        else
                          v119 = 0x49746E756F636361;
                        if (*((_BYTE *)v113 + v114 + 32))
                          v120 = 0xEA00000000004449;
                        else
                          v120 = 0xE900000000000044;
                        v255 = v115;
                        v121 = v115[3];
                        v122 = v118 + 1;
                        if (v118 >= v121 >> 1)
                        {
                          sub_1001C1B0C(v121 > 1, v118 + 1, 1);
                          v113 = v239;
                          v115 = v255;
                        }
                        ++v114;
                        v115[2] = v122;
                        v123 = &v115[v117];
                        v123[4] = v119;
                        v123[5] = v120;
                        v117 += 2;
                      }
                      while (v112 != v114);
                      v99 = v113;
                      swift_bridgeObjectRelease(v113);
                      v45 = v221;
                    }
                    else
                    {
                      swift_bridgeObjectRelease(v239);
                      v115 = _swiftEmptyArrayStorage;
                    }
                    v131 = Array.description.getter(v115, &type metadata for String);
                    v133 = v132;
                    swift_bridgeObjectRelease(v115);
                    v255 = (_QWORD *)sub_10001A820(v131, v133, (uint64_t *)&v252);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);
                    swift_bridgeObjectRelease(v99);
                    swift_bridgeObjectRelease(v133);
                    _os_log_impl((void *)&_mh_execute_header, loga, v227, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v105, 0x2Au);
                    v134 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v217, 1, v134);
                    swift_slowDealloc(v217, -1, -1);
                    swift_arrayDestroy(v230, 3, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v230, -1, -1);
                    swift_slowDealloc(v105, -1, -1);

                    v101 = v232;
                    v5 = *(_QWORD *)type;
                    v27 = v236;
                  }
                  else
                  {

                    swift_release_n(v232, 2);
                    swift_bridgeObjectRelease_n(v239, 2);
                    v5 = *(_QWORD *)type;
                  }
                  v215 = v99[2];
                  if (v215)
                  {
                    v135 = 0;
                    v136 = v99 + 4;
                    v212 = v99 + 4;
                    while (v135 < v99[2])
                    {
                      v216 = v135;
                      v137 = *((_BYTE *)v136 + v135);
                      v138 = v260;
                      v139 = sub_10001A630((uint64_t *)&unk_10083AD90);
                      v140 = swift_allocObject(v139, 40, 7);
                      *(_OWORD *)(v140 + 16) = xmmword_1006A7330;
                      v218 = v137;
                      if ((v137 & 1) != 0)
                        v141 = *(void **)(v138 + 24);
                      else
                        v141 = *(void **)(v138 + 16);
                      *(_QWORD *)(v140 + 32) = v141;
                      v252 = (char *)v140;
                      specialized Array._endMutation()(v140);
                      v142 = (uint64_t)v252;
                      v143 = v141;
                      if ((unint64_t)v142 >> 62)
                      {
                        if (v142 < 0)
                          v175 = v142;
                        else
                          v175 = v142 & 0xFFFFFFFFFFFFFF8;
                        swift_bridgeObjectRetain(v142);
                        v144 = _CocoaArrayWrapper.endIndex.getter(v175);
                        swift_bridgeObjectRelease(v142);
                        if (v144)
                        {
LABEL_119:
                          logb = (os_log_t)(v142 & 0xC000000000000001);
                          v145 = 4;
                          v146 = (Swift::Int)&_swiftEmptyDictionarySingleton;
                          v228 = v142;
                          v231 = v144;
                          while (1)
                          {
                            if (logb)
                              v148 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v145 - 4, v142);
                            else
                              v148 = *(id *)(v142 + 8 * v145);
                            v149 = v148;
                            v150 = v145 - 3;
                            if (__OFADD__(v145 - 4, 1))
                              goto LABEL_174;
                            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                            v151 = v149;
                            v152 = v151;
                            if (!*(_QWORD *)(v5 + 16))
                              break;
                            v153 = v151;
                            v154 = sub_1002C672C(v153);
                            if ((v155 & 1) == 0)
                            {
                              swift_bridgeObjectRelease(v224);
                              swift_bridgeObjectRelease(v5);

                              goto LABEL_157;
                            }
                            v156 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v154);

                            if ((v146 & 0xC000000000000001) != 0)
                            {
                              if (v146 < 0)
                                v157 = v146;
                              else
                                v157 = v146 & 0xFFFFFFFFFFFFFF8;
                              v158 = v156;
                              v159 = __CocoaDictionary.count.getter(v157);
                              if (__OFADD__(v159, 1))
                                goto LABEL_176;
                              v146 = sub_100192078(v157, v159 + 1);
                            }
                            else
                            {
                              v160 = v156;
                            }
                            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v146);
                            v252 = (char *)v146;
                            v163 = sub_1002C66DC((uint64_t)v153);
                            v164 = *(_QWORD *)(v146 + 16);
                            v165 = (v162 & 1) == 0;
                            v166 = v164 + v165;
                            if (__OFADD__(v164, v165))
                              goto LABEL_175;
                            v167 = v162;
                            if (*(_QWORD *)(v146 + 24) >= v166)
                            {
                              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                                sub_1002D73A0();
                            }
                            else
                            {
                              sub_1002CF2DC(v166, isUniquelyReferenced_nonNull_native);
                              v168 = sub_1002C66DC((uint64_t)v153);
                              if ((v167 & 1) != (v169 & 1))
                                goto LABEL_181;
                              v163 = v168;
                            }
                            v146 = (Swift::Int)v252;
                            if ((v167 & 1) != 0)
                            {
                              v147 = *((_QWORD *)v252 + 7);

                              *(_QWORD *)(v147 + 8 * v163) = v156;
                            }
                            else
                            {
                              *(_QWORD *)&v252[8 * (v163 >> 6) + 64] |= 1 << v163;
                              v170 = 8 * v163;
                              *(_QWORD *)(*(_QWORD *)(v146 + 48) + v170) = v153;
                              *(_QWORD *)(*(_QWORD *)(v146 + 56) + v170) = v156;
                              v171 = *(_QWORD *)(v146 + 16);
                              v172 = __OFADD__(v171, 1);
                              v173 = v171 + 1;
                              if (v172)
                                goto LABEL_178;
                              *(_QWORD *)(v146 + 16) = v173;
                              v174 = v153;
                            }
                            v5 = *(_QWORD *)type;
                            v142 = v228;

                            swift_bridgeObjectRelease(0x8000000000000000);
                            ++v145;
                            if (v150 == v231)
                              goto LABEL_149;
                          }
                          swift_bridgeObjectRelease(v224);
                          swift_bridgeObjectRelease(v5);
LABEL_157:
                          swift_bridgeObjectRelease(v236);
                          swift_bridgeObjectRelease(v239);
                          swift_bridgeObjectRelease(v146);
                          swift_bridgeObjectRelease(v142);
                          swift_bridgeObjectRelease(v256);
                          swift_retain_n(v232, 2);
                          v178 = v152;
                          v179 = Logger.logObject.getter(v178);
                          v180 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v179, v180))
                          {
                            v181 = swift_slowAlloc(42, -1);
                            v246 = swift_slowAlloc(128, -1);
                            v252 = (char *)v246;
                            *(_DWORD *)v181 = 136446978;
                            v255 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v252);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);
                            *(_WORD *)(v181 + 12) = 2082;
                            sub_1000184A8(v214, (uint64_t)v258);
                            sub_100671124((uint64_t)v258, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                            sub_1000181B8();
                            v183 = v182;
                            v185 = v184;
                            sub_100671124((uint64_t)v258, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                            v255 = (_QWORD *)sub_10001A820(v183, v185, (uint64_t *)&v252);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);
                            swift_release_n(v232, 2);
                            *(_QWORD *)&v186 = swift_bridgeObjectRelease(v185).n128_u64[0];
                            *(_WORD *)(v181 + 22) = 2080;
                            v187 = objc_msgSend(v178, "description", v186);
                            v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v187);
                            v190 = v189;

                            v255 = (_QWORD *)sub_10001A820(v188, v190, (uint64_t *)&v252);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);

                            *(_QWORD *)&v191 = swift_bridgeObjectRelease(v190).n128_u64[0];
                            *(_WORD *)(v181 + 32) = 2080;
                            v192 = objc_msgSend(v178, "description", v191);
                            v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
                            v195 = v194;

                            v255 = (_QWORD *)sub_10001A820(v193, v195, (uint64_t *)&v252);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);

                            swift_bridgeObjectRelease(v195);
                            _os_log_impl((void *)&_mh_execute_header, v179, v180, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v181, 0x2Au);
                            swift_arrayDestroy(v246, 4, (char *)&type metadata for Any + 8);
                            swift_slowDealloc(v246, -1, -1);
                            swift_slowDealloc(v181, -1, -1);

                          }
                          else
                          {

                            swift_release_n(v232, 2);
                          }
                          v243 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v178);
                          swift_willThrow(v243);

                          return;
                        }
                      }
                      else
                      {
                        v144 = *(_QWORD *)((v142 & 0xFFFFFFFFFFFFF8) + 0x10);
                        if (v144)
                          goto LABEL_119;
                      }
                      v146 = (Swift::Int)&_swiftEmptyDictionarySingleton;
LABEL_149:
                      swift_bridgeObjectRelease(v142);
                      v176 = sub_1003B101C(v146);
                      swift_bridgeObjectRelease(v146);
                      sub_100305308(v223, v218, v176);
                      v135 = v216 + 1;
                      swift_bridgeObjectRelease(v176);
                      v101 = v232;
                      v27 = v236;
                      v45 = v221;
                      v99 = v239;
                      v136 = v212;
                      if (v216 + 1 == v215)
                        goto LABEL_150;
                    }
                    goto LABEL_179;
                  }
LABEL_150:
                  swift_bridgeObjectRelease(v99);
                  if (((uint64_t)v101[13].isa & 1) != 0)
                  {
                    v177 = v223;
                    objc_msgSend(v177, "updateChangeCount");

                  }
                  else
                  {

                  }
                }
                else
                {
LABEL_102:
                  swift_bridgeObjectRelease(v239);
                  v124 = v44;
                  v125 = Logger.logObject.getter(v124);
                  v126 = static os_log_type_t.info.getter(v125);
                  if (os_log_type_enabled(v125, v126))
                  {
                    v127 = swift_slowAlloc(22, -1);
                    v128 = (uint64_t **)swift_slowAlloc(8, -1);
                    v129 = swift_slowAlloc(32, -1);
                    v252 = (char *)v129;
                    *(_DWORD *)v127 = 136446466;
                    *(_QWORD *)(v127 + 4) = sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v252);
                    *(_WORD *)(v127 + 12) = 2114;
                    *(_QWORD *)(v127 + 14) = v124;
                    *v128 = v124;

                    _os_log_impl((void *)&_mh_execute_header, v125, v126, "[%{public}s] Skipping establishRelationships() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v127, 0x16u);
                    v130 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v128, 1, v130);
                    swift_slowDealloc(v128, -1, -1);
                    swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v129, -1, -1);
                    swift_slowDealloc(v127, -1, -1);

                  }
                  else
                  {

                  }
                  v5 = *(_QWORD *)type;
                }
                v83 = v226 + 1;
                if ((char *)(v226 + 1) == v238)
                {
                  swift_bridgeObjectRelease(v27);
                  goto LABEL_161;
                }
                continue;
              }
            }
            if ((v7 & 0xC000000000000001) != 0)
            {
              v6 = 0;
              do
              {
                v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6++, v7);
                v16 = &v256;
                sub_1002DB2CC((Swift::Int *)v251, v36);

              }
              while (v5 != v6);
            }
            else
            {
              v6 = 0;
              do
              {
                v37 = *(void **)(v7 + 8 * v6++ + 32);
                v16 = &v256;
                sub_1002DB2CC((Swift::Int *)v251, v37);

              }
              while (v5 != v6);
            }
          }
        }
        else
        {
          v5 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v5)
            goto LABEL_23;
        }
        swift_bridgeObjectRelease(v7);
        if ((char *)++v10 == v28)
        {

          swift_bridgeObjectRelease(v27);
          v24 = v236;
          i = *(_QWORD *)type;
          break;
        }
      }
    }
  }
  swift_bridgeObjectRelease(v24);
  if ((unint64_t)log >> 62)
  {
    if (log < 0)
      v210 = log;
    else
      v210 = log & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(log);
    v39 = _CocoaArrayWrapper.endIndex.getter(v210);
    swift_bridgeObjectRelease(log);
  }
  else
  {
    v39 = *(_QWORD *)((log & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v40 = _swiftEmptyArrayStorage;
  if (!v39)
  {
LABEL_47:
    v240 = v40;
    v52 = v256;
    if ((v256 & 0xC000000000000001) != 0)
    {
      if (v256 < 0)
        v53 = v256;
      else
        v53 = v256 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v256);
      v54 = __CocoaSet.count.getter(v53);
      if (v54)
      {
        v55 = v54;
        v255 = _swiftEmptyArrayStorage;
        v16 = &v255;
        specialized ContiguousArray.reserveCapacity(_:)(v54);
        v252 = (char *)__CocoaSet.startIndex.getter(v53);
        v253 = v56;
        v254 = 1;
        if (v55 < 0)
        {
          __break(1u);
LABEL_54:
          __break(1u);

          v57 = v251[0];
          swift_bridgeObjectRelease(v236);
          swift_release(v57);
          goto LABEL_70;
        }
        goto LABEL_57;
      }
    }
    else
    {
      v55 = *(_QWORD *)(v256 + 16);
      swift_bridgeObjectRetain(v256);
      if (v55)
      {
        v255 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v55);
        v252 = (char *)sub_100364E8C(v52);
        v253 = v58;
        v254 = v59 & 1;
LABEL_57:
        v60 = v52 & 0xFFFFFFFFFFFFFF8;
        if (v52 < 0)
          v60 = v52;
        *(_QWORD *)typea = v60;
        do
        {
          while (1)
          {
            v67 = (uint64_t)v252;
            v66 = v253;
            v68 = v254;
            sub_100364660((uint64_t)v252, v253, v254, v52);
            v70 = v69;
            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
            v71 = v70;

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v72);
            v73 = v255[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v73);
            v74 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
            specialized ContiguousArray._endMutation()(v74);
            if ((v52 & 0xC000000000000001) != 0)
              break;
            v61 = sub_10036456C(v67, v66, v68, v52);
            v63 = v62;
            v65 = v64;
            sub_1000E515C(v67, v66, v68);
            v252 = (char *)v61;
            v253 = v63;
            v254 = v65 & 1;
            if (!--v55)
              goto LABEL_67;
          }
          if ((v68 & 1) == 0)
            goto LABEL_180;
          v75 = __CocoaSet.Index.handleBitPattern.getter(v67, v66);
          if (v75)
            v76 = swift_isUniquelyReferenced_nonNull_native(v75);
          else
            v76 = 1;
          v77 = sub_10001A630(&qword_1008466D8);
          v78 = (void (*)(id *, _QWORD))Set.Index._asCocoa.modify(v251, v77);
          __CocoaSet.formIndex(after:isUnique:)(v79, v76, *(_QWORD *)typea);
          v78(v251, 0);
          --v55;
        }
        while (v55);
LABEL_67:
        sub_1000E515C((uint64_t)v252, v253, v254);
        v7 = (uint64_t)v255;
        swift_bridgeObjectRelease(v52);
        goto LABEL_69;
      }
    }
    swift_bridgeObjectRelease(v52);
    v7 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_69:
    v29 = v229;
    v16 = v232;
    sub_1006446F0(v7, v229);
    v30 = 0;
    v27 = v236;
    v6 = (unint64_t)v240;
    goto LABEL_72;
  }
  v251[0] = _swiftEmptyArrayStorage;
  v41 = specialized ContiguousArray.reserveCapacity(_:)(v39);
  if (v39 < 0)
  {
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    v211 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v211);
    __break(1u);
  }
  else
  {
    v42 = 0;
    v43 = log;
    v27 = &selRef_isConcealed;
    v44 = &qword_10083DA60;
    v45 = off_1007D66C8;
    while (v39 != v42)
    {
      if ((log & 0xC000000000000001) != 0)
        v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v43);
      else
        v46 = *(id *)(v43 + 8 * v42 + 32);
      v47 = v46;
      v48 = sub_1005CCBAC(objc_msgSend(v47, "remObjectID"), (unint64_t *)&qword_10083DA60, off_1007D66C8);
      ++v42;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v49);
      v50 = *((_QWORD *)v251[0] + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v50);
      v51 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v48);
      v41 = specialized ContiguousArray._endMutation()(v51);
      v43 = log;
      if (v39 == v42)
      {
        v40 = v251[0];
        goto LABEL_47;
      }
    }
    __break(1u);
    __break(1u);
LABEL_163:
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(*(_QWORD *)type);
LABEL_165:
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v239);
    swift_bridgeObjectRelease(v256);
    v196 = v44;
    swift_retain_n(v232, 2);
    v197 = v196;
    v198 = Logger.logObject.getter(v197);
    v199 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v198, v199))
    {
      v200 = swift_slowAlloc(32, -1);
      v247 = swift_slowAlloc(96, -1);
      v252 = (char *)v247;
      *(_DWORD *)v200 = 136446722;
      v255 = (_QWORD *)sub_10001A820(0xD000000000000016, v213 | 0x8000000000000000, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);
      *(_WORD *)(v200 + 12) = 2082;
      sub_1000184A8(v214, (uint64_t)v257);
      sub_100671124((uint64_t)v257, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v202 = v201;
      v204 = v203;
      sub_100671124((uint64_t)v257, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v255 = (_QWORD *)sub_10001A820(v202, v204, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);
      swift_release_n(v232, 2);
      *(_QWORD *)&v205 = swift_bridgeObjectRelease(v204).n128_u64[0];
      *(_WORD *)(v200 + 22) = 2080;
      v206 = objc_msgSend(v197, "description", v205);
      v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v206);
      v209 = v208;

      v45 = v221;
      v255 = (_QWORD *)sub_10001A820(v207, v209, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, &v256);

      swift_bridgeObjectRelease(v209);
      _os_log_impl((void *)&_mh_execute_header, v198, v199, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v200, 0x20u);
      swift_arrayDestroy(v247, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v247, -1, -1);
      swift_slowDealloc(v200, -1, -1);

    }
    else
    {

      swift_release_n(v232, 2);
    }
    v244 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v197);
    swift_willThrow(v244);

  }
}

void sub_10061BABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  id *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t inited;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char **v79;
  id *v80;
  int64_t *v81;
  id v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  unint64_t v93;
  char v94;
  id v95;
  unint64_t v96;
  int64_t *v97;
  char v98;
  id v99;
  id v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  int64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  NSObject *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  unint64_t v131;
  id v132;
  id v133;
  void *v134;
  id v135;
  void *v136;
  id v137;
  unint64_t v138;
  char v139;
  id v140;
  id v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  uint64_t v147;
  _BOOL8 v148;
  uint64_t v149;
  char v150;
  unint64_t v151;
  char v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  void *v160;
  void *v161;
  unint64_t v162;
  id v163;
  id v164;
  NSObject *v165;
  os_log_type_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  double v172;
  id v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  double v177;
  id v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  id v182;
  id v183;
  id v184;
  NSObject *v185;
  os_log_type_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  double v193;
  id v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  _QWORD *v202;
  os_log_type_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  void *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  id v216;
  uint64_t v217;
  unint64_t v218;
  int64_t *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  os_log_type_t typea;
  os_log_type_t type[8];
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230[16];
  uint64_t *v231;
  uint64_t v232;
  char v233[40];
  uint64_t v234[4];
  uint64_t v235;
  uint64_t v236;
  unsigned __int8 v237;
  _QWORD *v238;
  _BYTE v239[40];
  uint64_t v240;
  _BYTE v241[48];
  _BYTE v242[48];
  _BYTE v243[56];
  uint64_t v244;

  v5 = v3;
  v244 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v231 = &v244;
  v232 = v5;
  swift_bridgeObjectRetain(v9);
  v10 = sub_1003514B8((void (*)(__n128 *__return_ptr, id *))sub_100672050, (uint64_t)&v230, a1);
  v11 = v4;
  if (v4)
    goto LABEL_2;
  v12 = v10;
  v217 = a1;
  v213 = a3;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter(v15);
  v215 = v5;
  v222 = v12;
  if (os_log_type_enabled(v15, v16))
  {
    v223 = v8;
    v17 = swift_slowAlloc(42, -1);
    v227 = swift_slowAlloc(96, -1);
    v234[0] = v227;
    *(_DWORD *)v17 = 136446978;
    typea = v16;
    v235 = sub_10001A820(0xD000000000000016, 0x8000000100709B30, v234);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236);
    *(_WORD *)(v17 + 12) = 2048;
    v235 = v12[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 22) = 2082;
    v18 = type metadata accessor for REMCDManualSortHint();
    v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23 = v20;
    v12 = v222;
    v235 = sub_10001A820(v23, v22, v234);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 32) = 2082;
    v11 = 0;
    swift_bridgeObjectRetain(v9);
    v235 = sub_10001A820(v223, v9, v234);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, typea, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v17, 0x2Au);
    swift_arrayDestroy(v227, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v227, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)type = v12[2];
  if (!*(_QWORD *)type)
    goto LABEL_2;
  v220 = v11;
  v240 = (uint64_t)&_swiftEmptySetSingleton;
  v224 = v12 + 4;
  swift_bridgeObjectRetain(v12);
  v24 = 0;
  v25 = &unk_10083AD90;
  do
  {
    if (v24 >= v12[2])
      goto LABEL_109;
    v26 = (id *)&v224[2 * v24];
    v27 = v26[1];
    v28 = v27[2];
    if (v28)
    {
      v29 = v244;
      v30 = *v26;
      swift_bridgeObjectRetain(v27);
      do
      {
        v31 = sub_10001A630((uint64_t *)&unk_10083AD90);
        inited = swift_initStackObject(v31, v239);
        *(_OWORD *)(inited + 16) = xmmword_1006A7330;
        v33 = *(void **)(v29 + 16);
        *(_QWORD *)(inited + 32) = v33;
        v234[0] = inited;
        specialized Array._endMutation()(inited);
        sub_1002DB2CC(v234, v33);
        v34 = (void *)v234[0];
        swift_bridgeObjectRelease();

        --v28;
      }
      while (v28);

      swift_bridgeObjectRelease();
      v12 = v222;
    }
    ++v24;
  }
  while (v24 != *(_QWORD *)type);
  swift_bridgeObjectRelease();
  v35 = v217;
  if ((unint64_t)v217 >> 62)
  {
    if (v217 < 0)
      v199 = v217;
    else
      v199 = v217 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v217);
    v36 = _CocoaArrayWrapper.endIndex.getter(v199);
    swift_bridgeObjectRelease();
  }
  else
  {
    v36 = *(_QWORD *)((v217 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v37 = _swiftEmptyArrayStorage;
  if (v36)
  {
    v234[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v36);
    if (v36 < 0)
    {
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      v200 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v200);
      __break(1u);
      return;
    }
    v38 = 0;
    while (v36 != v38)
    {
      if ((v217 & 0xC000000000000001) != 0)
        v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v35);
      else
        v39 = *(id *)(v35 + 8 * v38 + 32);
      v40 = v39;
      v41 = sub_1005CDB68(objc_msgSend(v40, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, 0xD000000000000013, (void *)0x8000000100709CB0);
      v220 = 0;
      ++v38;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v42);
      v43 = *(_QWORD *)(v234[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v43);
      v44 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v41);
      specialized ContiguousArray._endMutation()(v44);
      v35 = v217;
      if (v36 == v38)
      {
        v37 = (_QWORD *)v234[0];
        goto LABEL_27;
      }
    }
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_2:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_27:
  v211 = (uint64_t)v37;
  v45 = v240;
  v218 = v240 & 0xC000000000000001;
  if ((v240 & 0xC000000000000001) != 0)
  {
    if (v240 < 0)
      v46 = v240;
    else
      v46 = v240 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v240);
    v47 = __CocoaSet.count.getter(v46);
    if (v47)
    {
      v48 = v47;
      v238 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v47);
      v235 = __CocoaSet.startIndex.getter(v46);
      v236 = v49;
      v237 = 1;
      if (v48 < 0)
      {
        __break(1u);
        goto LABEL_2;
      }
      goto LABEL_37;
    }
  }
  else
  {
    v48 = *(_QWORD *)(v240 + 16);
    swift_bridgeObjectRetain(v240);
    if (v48)
    {
      v238 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v48);
      v235 = sub_100364E8C(v45);
      v236 = v50;
      v237 = v51 & 1;
LABEL_37:
      v52 = v45 & 0xFFFFFFFFFFFFFF8;
      if (v45 < 0)
        v52 = v45;
      v216 = (id)v52;
      do
      {
        while (1)
        {
          v59 = v235;
          v60 = v236;
          v61 = v237;
          sub_100364660(v235, v236, v237, v45);
          v63 = v62;
          sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
          v64 = v63;

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v65);
          v66 = v238[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v66);
          v67 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v66, v64);
          specialized ContiguousArray._endMutation()(v67);
          if (v218)
            break;
          v53 = sub_10036456C(v59, v60, v61, v45);
          v55 = v54;
          v57 = v56;
          sub_1000E515C(v59, v60, v61);
          v235 = v53;
          v236 = v55;
          v237 = v57 & 1;
          v58 = 0;
          if (!--v48)
            goto LABEL_47;
        }
        if ((v61 & 1) == 0)
          goto LABEL_134;
        v68 = __CocoaSet.Index.handleBitPattern.getter(v59, v60);
        v58 = 0;
        if (v68)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v68);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v70 = sub_10001A630(&qword_1008466D8);
        v71 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v234, v70);
        __CocoaSet.formIndex(after:isUnique:)(v72, isUniquelyReferenced_nonNull_native, v216);
        v71(v234, 0);
        --v48;
      }
      while (v48);
LABEL_47:
      sub_1000E515C(v235, v236, v237);
      v25 = v238;
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
  }
  swift_bridgeObjectRelease();
  v25 = _swiftEmptyArrayStorage;
  v58 = v220;
LABEL_49:
  v73 = v215;
  sub_1006446F0((uint64_t)v25, v213);
  v75 = v74;
  swift_bridgeObjectRelease();
  sub_100644F30(v211, v213);
  v210 = v76;
  swift_bridgeObjectRelease();
  v207 = (uint64_t *)(v213 + 48);
  swift_beginAccess(v213 + 48, v234, 0, 0);
  if (!v222[2])
  {
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v77 = 0;
  v205 = v215 + 24;
  v78 = (_QWORD *)((unint64_t)_swiftEmptyDictionarySingleton & 0xFFFFFFFFFFFFFF8);
  if ((uint64_t)_swiftEmptyDictionarySingleton < 0)
    v78 = _swiftEmptyDictionarySingleton;
  v212 = (uint64_t)v78;
  v79 = &selRef_isConcealed;
  v214 = v75;
  while (1)
  {
    v206 = v77;
    v80 = (id *)&v224[2 * v77];
    v81 = (int64_t *)v80[1];
    v82 = *v80;
    v219 = v81;
    v83 = objc_msgSend(v82, v79[432], swift_bridgeObjectRetain(v81).n128_f64[0]);
    v84 = sub_1005CDB68(v83, (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, 0xD000000000000013, (void *)0x8000000100709CB0);

    v85 = *v207;
    v209 = v82;
    if ((*v207 & 0xC000000000000001) != 0)
    {
      v86 = v85 < 0 ? *v207 : v85 & 0xFFFFFFFFFFFFFF8;
      v87 = v84;
      swift_bridgeObjectRetain(v85);
      v88 = __CocoaDictionary.lookup(_:)(v87, v86);
      if (v88)
      {
        v89 = v88;
        v238 = (_QWORD *)v88;
        v90 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v89);
        swift_dynamicCast(&v235, &v238, (char *)&type metadata for Swift.AnyObject + 8, v90, 7);
        v91 = (id)v235;
        swift_unknownObjectRelease(v89);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v91 = 0;
      }
      v58 = 0;
      v75 = v214;
    }
    else
    {
      if (*(_QWORD *)(v85 + 16))
      {
        v92 = v84;
        swift_bridgeObjectRetain(v85);
        v93 = sub_1002C66DC((uint64_t)v92);
        if ((v94 & 1) != 0)
        {
          v91 = *(id *)(*(_QWORD *)(v85 + 56) + 8 * v93);

          swift_bridgeObjectRelease();
          goto LABEL_66;
        }

        swift_bridgeObjectRelease();
      }
      v91 = 0;
    }
LABEL_66:

    if (!*(_QWORD *)(v210 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_119;
    }
    v95 = v84;
    v96 = sub_1002C672C(v95);
    v97 = v219;
    if ((v98 & 1) == 0)
      break;
    v221 = v58;
    v216 = *(id *)(*(_QWORD *)(v210 + 56) + 8 * v96);

    swift_bridgeObjectRetain_n(v219, 2);
    v99 = v95;
    swift_retain_n(v73);
    v100 = v99;
    v101 = v73;
    v102 = Logger.logObject.getter(v100);
    v103 = static os_log_type_t.default.getter(v102);
    v208 = v100;
    if (os_log_type_enabled(v102, v103))
    {
      v201 = v102;
      v203 = v103;
      v104 = swift_slowAlloc(42, -1);
      v105 = (_QWORD *)swift_slowAlloc(8, -1);
      v204 = swift_slowAlloc(96, -1);
      v235 = v204;
      *(_DWORD *)v104 = 136446978;
      v238 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, &v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);
      *(_WORD *)(v104 + 12) = 2082;
      sub_1000184A8(v205, (uint64_t)v243);
      sub_100671124((uint64_t)v243, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v107 = v106;
      v108 = v100;
      v110 = v109;
      sub_100671124((uint64_t)v243, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v238 = (_QWORD *)sub_10001A820(v107, v110, &v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);
      swift_release_n(v101);
      swift_bridgeObjectRelease();
      *(_WORD *)(v104 + 22) = 2114;
      v238 = v108;
      v111 = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);
      v202 = v105;
      *v105 = v108;
      v97 = v219;

      *(_WORD *)(v104 + 32) = 2082;
      v112 = v219[2];
      if (v112)
      {
        v238 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v112, 0);
        v113 = v238;
        v114 = v238[2];
        v115 = 2 * v114;
        v116 = v201;
        do
        {
          v238 = v113;
          v117 = v113[3];
          v118 = v114 + 1;
          if (v114 >= v117 >> 1)
          {
            sub_1001C1B0C(v117 > 1, v114 + 1, 1);
            v113 = v238;
          }
          v113[2] = v118;
          v119 = &v113[v115];
          v119[4] = 0x49746E756F636361;
          v119[5] = 0xE900000000000044;
          v115 += 2;
          v114 = v118;
          --v112;
        }
        while (v112);
        v97 = v219;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v113 = _swiftEmptyArrayStorage;
        v116 = v201;
      }
      v120 = Array.description.getter(v113, &type metadata for String);
      v122 = v121;
      swift_bridgeObjectRelease();
      v238 = (_QWORD *)sub_10001A820(v120, v122, &v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v116, v203, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v104, 0x2Au);
      v123 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v202, 1, v123);
      swift_slowDealloc(v202, -1, -1);
      swift_arrayDestroy(v204, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v204, -1, -1);
      swift_slowDealloc(v104, -1, -1);

      v73 = v215;
    }
    else
    {

      swift_release_n(v73);
      swift_bridgeObjectRelease_n(v219, 2);
    }
    v124 = v97[2];
    if (v124)
    {
      v125 = 0;
      while (1)
      {
        if (v125 >= v97[2])
          goto LABEL_129;
        v126 = v244;
        v127 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v128 = swift_initStackObject(v127, &v233);
        *(_OWORD *)(v128 + 16) = xmmword_1006A7330;
        v129 = *(void **)(v126 + 16);
        *(_QWORD *)(v128 + 32) = v129;
        v235 = v128;
        specialized Array._endMutation()(v128);
        v130 = v235;
        v131 = v235 & 0xC000000000000001;
        v132 = v129;
        if (v131)
        {
          v133 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v130);
        }
        else
        {
          if (!*(_QWORD *)((v130 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_133;
          v133 = *(id *)(v130 + 32);
        }
        v134 = v133;
        sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
        v135 = v134;
        v136 = v135;
        if (!*(_QWORD *)(v75 + 16))
          break;
        v137 = v135;
        v138 = sub_1002C672C(v137);
        if ((v139 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_112;
        }
        v140 = *(id *)(*(_QWORD *)(v75 + 56) + 8 * v138);

        v141 = v140;
        v142 = _swiftEmptyDictionarySingleton;
        if (((unint64_t)_swiftEmptyDictionarySingleton & 0xC000000000000001) != 0)
        {
          v143 = __CocoaDictionary.count.getter(v212);
          if (__OFADD__(v143, 1))
            goto LABEL_131;
          v142 = (_QWORD *)sub_100192078(v212, v143 + 1);
        }
        v144 = swift_isUniquelyReferenced_nonNull_native(v142);
        v235 = (uint64_t)v142;
        v146 = sub_1002C66DC((uint64_t)v137);
        v147 = v142[2];
        v148 = (v145 & 1) == 0;
        v149 = v147 + v148;
        if (__OFADD__(v147, v148))
          goto LABEL_130;
        v150 = v145;
        if (v142[3] >= v149)
        {
          if ((v144 & 1) == 0)
            sub_1002D73A0();
        }
        else
        {
          sub_1002CF2DC(v149, v144);
          v151 = sub_1002C66DC((uint64_t)v137);
          if ((v150 & 1) != (v152 & 1))
            goto LABEL_135;
          v146 = v151;
        }
        v153 = (_QWORD *)v235;
        if ((v150 & 1) != 0)
        {
          v154 = *(_QWORD *)(v235 + 56);

          *(_QWORD *)(v154 + 8 * v146) = v141;
        }
        else
        {
          *(_QWORD *)(v235 + 8 * (v146 >> 6) + 64) |= 1 << v146;
          *(_QWORD *)(v153[6] + 8 * v146) = v137;
          *(_QWORD *)(v153[7] + 8 * v146) = v141;
          v155 = v153[2];
          v156 = __OFADD__(v155, 1);
          v157 = v155 + 1;
          if (v156)
            goto LABEL_132;
          v153[2] = v157;
          v158 = v137;
        }
        v75 = v214;
        v97 = v219;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v159 = sub_1003B101C((uint64_t)v153);
        swift_bridgeObjectRelease();
        sub_1003F8160(*(void **)(v244 + 16), v159);
        v161 = v160;
        ++v125;
        objc_msgSend(v216, "setAccount:", v160);
        swift_bridgeObjectRelease();

        if (v124 == v125)
        {
          swift_bridgeObjectRelease();
          v73 = v215;
          goto LABEL_103;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_112:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain_n(v215);
      v164 = v136;
      v165 = Logger.logObject.getter(v164);
      v166 = static os_log_type_t.error.getter(v165);
      if (os_log_type_enabled(v165, v166))
      {
        v167 = swift_slowAlloc(42, -1);
        v228 = swift_slowAlloc(128, -1);
        v235 = v228;
        *(_DWORD *)v167 = 136446978;
        v238 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, &v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);
        *(_WORD *)(v167 + 12) = 2082;
        sub_1000184A8(v205, (uint64_t)v242);
        sub_100671124((uint64_t)v242, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v169 = v168;
        v171 = v170;
        sub_100671124((uint64_t)v242, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v238 = (_QWORD *)sub_10001A820(v169, v171, &v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);
        swift_release_n(v215);
        *(_QWORD *)&v172 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v167 + 22) = 2080;
        v173 = objc_msgSend(v164, "description", v172);
        v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(v173);
        v176 = v175;

        v238 = (_QWORD *)sub_10001A820(v174, v176, &v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);

        *(_QWORD *)&v177 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v167 + 32) = 2080;
        v178 = objc_msgSend(v164, "description", v177);
        v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
        v181 = v180;

        v238 = (_QWORD *)sub_10001A820(v179, v181, &v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v165, v166, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v167, 0x2Au);
        swift_arrayDestroy(v228, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v228, -1, -1);
        swift_slowDealloc(v167, -1, -1);

      }
      else
      {

        swift_release_n(v215);
      }
      v182 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v164);
      swift_willThrow(v182);

      return;
    }
    swift_bridgeObjectRelease();
LABEL_103:
    v162 = v206 + 1;
    v58 = v221;
    if ((*(_BYTE *)(v73 + 104) & 1) != 0)
    {
      v163 = v216;
      objc_msgSend(v163, "updateChangeCount");

    }
    else
    {

    }
    v77 = v206 + 1;
    if (v162 == *(_QWORD *)type)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    }
    v25 = (_QWORD *)0xD000000000000013;
    v79 = &selRef_isConcealed;
    if (v162 >= v222[2])
      goto LABEL_108;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_119:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v183 = v84;
  swift_retain_n(v73);
  v184 = v183;
  v185 = Logger.logObject.getter(v184);
  v186 = static os_log_type_t.error.getter(v185);
  if (os_log_type_enabled(v185, v186))
  {
    v187 = swift_slowAlloc(32, -1);
    v229 = swift_slowAlloc(96, -1);
    v235 = v229;
    *(_DWORD *)v187 = 136446722;
    v238 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, &v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);
    *(_WORD *)(v187 + 12) = 2082;
    sub_1000184A8(v205, (uint64_t)v241);
    sub_100671124((uint64_t)v241, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v189 = v188;
    v190 = v73;
    v192 = v191;
    sub_100671124((uint64_t)v241, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v238 = (_QWORD *)sub_10001A820(v189, v192, &v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);
    swift_release_n(v190);
    *(_QWORD *)&v193 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v187 + 22) = 2080;
    v194 = objc_msgSend(v184, "description", v193);
    v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v194);
    v197 = v196;

    v82 = v209;
    v238 = (_QWORD *)sub_10001A820(v195, v197, &v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v238, v239);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v185, v186, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v187, 0x20u);
    swift_arrayDestroy(v229, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v229, -1, -1);
    swift_slowDealloc(v187, -1, -1);

  }
  else
  {

    swift_release_n(v73);
  }
  v198 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v184);
  swift_willThrow(v198);

}

void sub_10061D388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, char *, uint64_t, __n128), unint64_t *a6, _QWORD *a7, uint64_t (*a8)(id, uint64_t, __n128), uint64_t (*a9)(void), void (*a10)(id, _QWORD, uint64_t, unint64_t *, _QWORD *, __n128))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v16;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(id, uint64_t, __n128);
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(id *, _QWORD);
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  unint64_t v111;
  char v112;
  id v113;
  uint64_t v114;
  char v115;
  id v116;
  id v117;
  NSObject *v118;
  os_log_type_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  id v126;
  int64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  id v139;
  NSObject *v140;
  os_log_type_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  Swift::Int v158;
  uint64_t v159;
  id v160;
  void *v161;
  uint64_t v162;
  id v163;
  void *v164;
  id v165;
  unint64_t v166;
  char v167;
  id v168;
  uint64_t v169;
  id v170;
  uint64_t v171;
  id v172;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v174;
  unint64_t v175;
  uint64_t v176;
  _BOOL8 v177;
  uint64_t v178;
  char v179;
  unint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  id v186;
  uint64_t v187;
  uint64_t v188;
  __n128 v189;
  id v190;
  id v191;
  NSObject *v192;
  os_log_type_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  double v199;
  id v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  double v204;
  id v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  id v209;
  id v210;
  NSObject *v211;
  os_log_type_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  double v218;
  id v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  unsigned int v231;
  void *v232;
  void *v233;
  uint64_t v234;
  void *v235;
  id v236;
  void *v237;
  uint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  os_log_type_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD *v249;
  unint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  id type;
  NSObject *typea;
  unint64_t typeb;
  void *v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  id v262;
  id v263;
  uint64_t v264;
  os_log_type_t v265;
  uint64_t v266;
  char v267[16];
  uint64_t *v268;
  uint64_t v269;
  id v270[4];
  _QWORD *v271;
  uint64_t v272;
  unsigned __int8 v273;
  _QWORD *v274;
  uint64_t v275;
  _BYTE v276[48];
  _BYTE v277[48];
  _BYTE v278[56];
  uint64_t v279;

  v16 = v10;
  v279 = a2;
  v20 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(a3 + 24);
  v268 = &v279;
  v269 = v16;
  v21 = swift_bridgeObjectRetain(v19);
  v22 = a5(a4, v267, a1, v21);
  if (v11)
    goto LABEL_2;
  v23 = v22;
  v264 = v20;
  v248 = a1;
  v250 = a6;
  v240 = a3;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v24 = type metadata accessor for Logger(0);
  sub_10001AAA8(v24, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter(v26);
  v243 = v16;
  v251 = v23;
  v247 = a7;
  if (os_log_type_enabled(v26, v27))
  {
    v20 = swift_slowAlloc(42, -1);
    v257 = (void *)swift_slowAlloc(96, -1);
    v270[0] = v257;
    *(_DWORD *)v20 = 136446978;
    v271 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v270);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272);
    *(_WORD *)(v20 + 12) = 2048;
    v271 = *(_QWORD **)(v23 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2082;
    v16 = v20 + 24;
    v28 = sub_1000151B0(0, a6, a7);
    v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v271 = (_QWORD *)sub_10001A820(v30, v32, (uint64_t *)v270);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 32) = 2082;
    swift_bridgeObjectRetain(v19);
    v271 = (_QWORD *)sub_10001A820(v264, v19, (uint64_t *)v270);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272);
    swift_bridgeObjectRelease_n(v19, 3);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v20, 0x2Au);
    swift_arrayDestroy(v257, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v257, -1, -1);
    v23 = v251;
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease();
  }
  v253 = *(_QWORD *)(v23 + 16);
  if (!v253)
    goto LABEL_2;
  v275 = (uint64_t)&_swiftEmptySetSingleton;
  v252 = v23 + 32;
  swift_bridgeObjectRetain(v23);
  for (i = 0; i != v253; ++i)
  {
    if (i >= *(_QWORD *)(v23 + 16))
    {
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_161:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    }
    v34 = v252 + 16 * i;
    v35 = *(_QWORD *)(v34 + 8);
    v36 = *(uint64_t (**)(id, uint64_t, __n128))(v35 + 16);
    if (v36)
    {
      v258 = i;
      v20 = v279;
      v37 = v35 + 32;
      type = *(id *)v34;
      swift_bridgeObjectRetain(v35);
      v38 = 0;
      while (1)
      {
        if (v38 >= *(_QWORD *)(v35 + 16))
        {
          __break(1u);

          v64 = v270[0];
          swift_bridgeObjectRelease();
          swift_release(v64);
          goto LABEL_2;
        }
        v39 = *(_BYTE *)(v37 + v38);
        v40 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v41 = swift_allocObject(v40, 40, 7);
        *(_OWORD *)(v41 + 16) = xmmword_1006A7330;
        if ((v39 & 1) != 0)
          v42 = *(void **)(v20 + 24);
        else
          v42 = *(void **)(v20 + 16);
        *(_QWORD *)(v41 + 32) = v42;
        v270[0] = (id)v41;
        v26 = v270;
        specialized Array._endMutation()(v41);
        v43 = (uint64_t)v270[0];
        v44 = v42;
        if ((unint64_t)v43 >> 62)
        {
          if (v43 < 0)
            v48 = v43;
          else
            v48 = v43 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v43);
          v45 = _CocoaArrayWrapper.endIndex.getter(v48);
          swift_bridgeObjectRelease();
          if (v45)
          {
LABEL_22:
            if (v45 < 1)
            {
              __break(1u);
LABEL_71:
              v88 = v44;
              v89 = swift_bridgeObjectRelease();
              v90 = v36(type, v45, v89);
              if (v37)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_2;
              }
              v91 = v90;
              swift_bridgeObjectRelease();
              v227 = v20 + 24;
              v238 = (uint64_t *)(v45 + 48);
              swift_beginAccess(v45 + 48, v270, 0, 0);
              v92 = 0;
              v226 = (unint64_t)"mutateRelationshipOrdering";
              v234 = v91;
              v93 = v250;
              v249 = v88;
              while (2)
              {
                if (v92 >= *(_QWORD *)(v251 + 16))
                  goto LABEL_177;
                v239 = v92;
                v100 = v252 + 16 * v92;
                v101 = *(_QWORD *)(v100 + 8);
                v16 = (uint64_t)*(id *)v100;
                v260 = v101;
                v102 = objc_msgSend((id)v16, "remObjectID", swift_bridgeObjectRetain(v101).n128_f64[0]);
                v50 = (uint64_t)sub_1005CCBAC(v102, v93, v247);

                v103 = *v238;
                if ((*v238 & 0xC000000000000001) != 0)
                {
                  if (v103 < 0)
                    v104 = *v238;
                  else
                    v104 = v103 & 0xFFFFFFFFFFFFFF8;
                  v105 = (id)v50;
                  swift_bridgeObjectRetain(v103);
                  v106 = __CocoaDictionary.lookup(_:)(v105, v104);
                  if (v106)
                  {
                    v107 = v106;
                    v274 = (_QWORD *)v106;
                    v108 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
                    swift_unknownObjectRetain(v107);
                    swift_dynamicCast(&v271, &v274, (char *)&type metadata for Swift.AnyObject + 8, v108, 7);
                    v109 = v271;
                    swift_unknownObjectRelease(v107);

                    swift_bridgeObjectRelease();
                    v20 = v243;
                    v93 = v250;
                    goto LABEL_86;
                  }

                  swift_bridgeObjectRelease();
                  v20 = v243;
                  v93 = v250;
                  goto LABEL_105;
                }
                if (!*(_QWORD *)(v103 + 16))
                  goto LABEL_105;
                v110 = (id)v50;
                swift_bridgeObjectRetain(v103);
                v111 = sub_1002C66DC((uint64_t)v110);
                if ((v112 & 1) == 0)
                {

                  swift_bridgeObjectRelease();
                  goto LABEL_105;
                }
                v109 = *(id *)(*(_QWORD *)(v103 + 56) + 8 * v111);

                swift_bridgeObjectRelease();
LABEL_86:

                if (v109)
                {
                  v237 = (void *)v16;
                  if (!*(_QWORD *)(v91 + 16))
                    goto LABEL_163;
                  v113 = (id)v50;
                  v114 = a9();
                  if ((v115 & 1) == 0)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    goto LABEL_165;
                  }
                  v236 = *(id *)(*(_QWORD *)(v91 + 56) + 8 * v114);

                  swift_bridgeObjectRetain_n(v260, 2);
                  v116 = v113;
                  swift_retain_n(v20);
                  v117 = v116;
                  v118 = Logger.logObject.getter(v117);
                  v119 = static os_log_type_t.default.getter(v118);
                  v233 = v117;
                  if (os_log_type_enabled(v118, v119))
                  {
                    v241 = v119;
                    typea = v118;
                    v120 = swift_slowAlloc(42, -1);
                    v121 = (_QWORD *)swift_slowAlloc(8, -1);
                    v245 = swift_slowAlloc(96, -1);
                    v271 = (_QWORD *)v245;
                    *(_DWORD *)v120 = 136446978;
                    v274 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v271);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
                    *(_WORD *)(v120 + 12) = 2082;
                    sub_1000184A8(v227, (uint64_t)v278);
                    sub_100671124((uint64_t)v278, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                    sub_1000181B8();
                    v123 = v122;
                    v125 = v124;
                    sub_100671124((uint64_t)v278, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                    v274 = (_QWORD *)sub_10001A820(v123, v125, (uint64_t *)&v271);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
                    swift_release_n(v20);
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v120 + 22) = 2114;
                    v274 = v117;
                    v126 = v117;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
                    v230 = v121;
                    *v121 = v117;

                    *(_WORD *)(v120 + 32) = 2082;
                    v127 = *(_QWORD *)(v260 + 16);
                    if (v127)
                    {
                      v274 = _swiftEmptyArrayStorage;
                      sub_1001C1B0C(0, v127, 0);
                      v128 = v260;
                      v129 = 0;
                      v130 = v274;
                      v131 = v274[2];
                      v132 = 2 * v131;
                      do
                      {
                        v133 = v131 + v129;
                        if (*(_BYTE *)(v128 + v129 + 32))
                          v134 = 0x44496D72616C61;
                        else
                          v134 = 0x49746E756F636361;
                        if (*(_BYTE *)(v128 + v129 + 32))
                          v135 = 0xE700000000000000;
                        else
                          v135 = 0xE900000000000044;
                        v274 = v130;
                        v136 = v130[3];
                        v137 = v133 + 1;
                        if (v133 >= v136 >> 1)
                        {
                          sub_1001C1B0C(v136 > 1, v133 + 1, 1);
                          v128 = v260;
                          v130 = v274;
                        }
                        ++v129;
                        v130[2] = v137;
                        v138 = &v130[v132];
                        v138[4] = v134;
                        v138[5] = v135;
                        v132 += 2;
                      }
                      while (v127 != v129);
                      v142 = v128;
                      swift_bridgeObjectRelease();
                      v20 = v243;
                      v88 = v249;
                    }
                    else
                    {
                      v142 = v260;
                      swift_bridgeObjectRelease();
                      v130 = _swiftEmptyArrayStorage;
                    }
                    v143 = Array.description.getter(v130, &type metadata for String);
                    v145 = v144;
                    swift_bridgeObjectRelease();
                    v274 = (_QWORD *)sub_10001A820(v143, v145, (uint64_t *)&v271);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, typea, v241, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v120, 0x2Au);
                    v146 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v230, 1, v146);
                    swift_slowDealloc(v230, -1, -1);
                    swift_arrayDestroy(v245, 3, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v245, -1, -1);
                    swift_slowDealloc(v120, -1, -1);

                    v93 = v250;
                    v16 = (uint64_t)v237;
                    v91 = v234;
                  }
                  else
                  {

                    swift_release_n(v20);
                    v142 = v260;
                    swift_bridgeObjectRelease_n(v260, 2);
                  }
                  v228 = *(_QWORD *)(v142 + 16);
                  if (v228)
                  {
                    v147 = 0;
                    v148 = v142 + 32;
                    v225 = v142 + 32;
                    while (v147 < *(_QWORD *)(v142 + 16))
                    {
                      v229 = v147;
                      v149 = *(unsigned __int8 *)(v148 + v147);
                      v150 = v279;
                      v151 = sub_10001A630((uint64_t *)&unk_10083AD90);
                      v152 = swift_allocObject(v151, 40, 7);
                      *(_OWORD *)(v152 + 16) = xmmword_1006A7330;
                      v231 = v149;
                      if ((v149 & 1) != 0)
                        v153 = *(void **)(v150 + 24);
                      else
                        v153 = *(void **)(v150 + 16);
                      *(_QWORD *)(v152 + 32) = v153;
                      v271 = (_QWORD *)v152;
                      specialized Array._endMutation()(v152);
                      v154 = (uint64_t)v271;
                      v155 = v153;
                      if ((unint64_t)v154 >> 62)
                      {
                        if (v154 < 0)
                          v187 = v154;
                        else
                          v187 = v154 & 0xFFFFFFFFFFFFFF8;
                        swift_bridgeObjectRetain(v154);
                        v156 = _CocoaArrayWrapper.endIndex.getter(v187);
                        swift_bridgeObjectRelease();
                        if (v156)
                        {
LABEL_117:
                          typeb = v154 & 0xC000000000000001;
                          v157 = 4;
                          v158 = (Swift::Int)_swiftEmptyDictionarySingleton;
                          v242 = v154;
                          v246 = v156;
                          while (1)
                          {
                            if (typeb)
                              v160 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v157 - 4, v154);
                            else
                              v160 = *(id *)(v154 + 8 * v157);
                            v161 = v160;
                            v162 = v157 - 3;
                            if (__OFADD__(v157 - 4, 1))
                              goto LABEL_174;
                            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                            v163 = v161;
                            v164 = v163;
                            if (!v88[2])
                              break;
                            v165 = v163;
                            v166 = sub_1002C672C(v165);
                            if ((v167 & 1) == 0)
                            {
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();

                              goto LABEL_156;
                            }
                            v168 = *(id *)(v88[7] + 8 * v166);

                            if ((v158 & 0xC000000000000001) != 0)
                            {
                              if (v158 < 0)
                                v169 = v158;
                              else
                                v169 = v158 & 0xFFFFFFFFFFFFFF8;
                              v170 = v168;
                              v171 = __CocoaDictionary.count.getter(v169);
                              if (__OFADD__(v171, 1))
                                goto LABEL_176;
                              v158 = sub_100192078(v169, v171 + 1);
                            }
                            else
                            {
                              v172 = v168;
                            }
                            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v158);
                            v271 = (_QWORD *)v158;
                            v175 = sub_1002C66DC((uint64_t)v165);
                            v176 = *(_QWORD *)(v158 + 16);
                            v177 = (v174 & 1) == 0;
                            v178 = v176 + v177;
                            if (__OFADD__(v176, v177))
                              goto LABEL_175;
                            v179 = v174;
                            if (*(_QWORD *)(v158 + 24) >= v178)
                            {
                              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                                sub_1002D73A0();
                            }
                            else
                            {
                              sub_1002CF2DC(v178, isUniquelyReferenced_nonNull_native);
                              v180 = sub_1002C66DC((uint64_t)v165);
                              if ((v179 & 1) != (v181 & 1))
                                goto LABEL_181;
                              v175 = v180;
                            }
                            v158 = (Swift::Int)v271;
                            if ((v179 & 1) != 0)
                            {
                              v159 = v271[7];

                              *(_QWORD *)(v159 + 8 * v175) = v168;
                            }
                            else
                            {
                              v271[(v175 >> 6) + 8] |= 1 << v175;
                              v182 = 8 * v175;
                              *(_QWORD *)(*(_QWORD *)(v158 + 48) + v182) = v165;
                              *(_QWORD *)(*(_QWORD *)(v158 + 56) + v182) = v168;
                              v183 = *(_QWORD *)(v158 + 16);
                              v184 = __OFADD__(v183, 1);
                              v185 = v183 + 1;
                              if (v184)
                                goto LABEL_178;
                              *(_QWORD *)(v158 + 16) = v185;
                              v186 = v165;
                            }
                            v88 = v249;
                            v154 = v242;

                            swift_bridgeObjectRelease();
                            ++v157;
                            v20 = v243;
                            if (v162 == v246)
                              goto LABEL_147;
                          }
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
LABEL_156:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_retain_n(v243);
                          v191 = v164;
                          v192 = Logger.logObject.getter(v191);
                          v193 = static os_log_type_t.error.getter(v192);
                          if (os_log_type_enabled(v192, v193))
                          {
                            v265 = v193;
                            v194 = swift_slowAlloc(42, -1);
                            v261 = swift_slowAlloc(128, -1);
                            v271 = (_QWORD *)v261;
                            *(_DWORD *)v194 = 136446978;
                            v274 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v271);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
                            *(_WORD *)(v194 + 12) = 2082;
                            sub_1000184A8(v227, (uint64_t)v277);
                            sub_100671124((uint64_t)v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                            sub_1000181B8();
                            v196 = v195;
                            v198 = v197;
                            sub_100671124((uint64_t)v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                            v274 = (_QWORD *)sub_10001A820(v196, v198, (uint64_t *)&v271);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
                            swift_release_n(v243);
                            *(_QWORD *)&v199 = swift_bridgeObjectRelease().n128_u64[0];
                            *(_WORD *)(v194 + 22) = 2080;
                            v200 = objc_msgSend(v191, "description", v199);
                            v201 = static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
                            v203 = v202;

                            v274 = (_QWORD *)sub_10001A820(v201, v203, (uint64_t *)&v271);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);

                            *(_QWORD *)&v204 = swift_bridgeObjectRelease().n128_u64[0];
                            *(_WORD *)(v194 + 32) = 2080;
                            v205 = objc_msgSend(v191, "description", v204);
                            v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(v205);
                            v208 = v207;

                            v274 = (_QWORD *)sub_10001A820(v206, v208, (uint64_t *)&v271);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);

                            swift_bridgeObjectRelease();
                            _os_log_impl((void *)&_mh_execute_header, v192, v265, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v194, 0x2Au);
                            swift_arrayDestroy(v261, 4, (char *)&type metadata for Any + 8);
                            swift_slowDealloc(v261, -1, -1);
                            swift_slowDealloc(v194, -1, -1);

                          }
                          else
                          {

                            swift_release_n(v243);
                          }
                          v262 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v191);
                          swift_willThrow(v262);

                          return;
                        }
                      }
                      else
                      {
                        v156 = *(_QWORD *)((v154 & 0xFFFFFFFFFFFFF8) + 0x10);
                        if (v156)
                          goto LABEL_117;
                      }
                      v158 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_147:
                      swift_bridgeObjectRelease();
                      v188 = sub_1003B101C(v158);
                      v189 = swift_bridgeObjectRelease();
                      v93 = v250;
                      a10(v236, v231, v188, v250, v247, v189);
                      v147 = v229 + 1;
                      swift_bridgeObjectRelease();
                      v16 = (uint64_t)v237;
                      v91 = v234;
                      v142 = v260;
                      v148 = v225;
                      if (v229 + 1 == v228)
                        goto LABEL_148;
                    }
                    goto LABEL_179;
                  }
LABEL_148:
                  swift_bridgeObjectRelease();
                  if ((*(_BYTE *)(v20 + 104) & 1) != 0)
                  {
                    v190 = v236;
                    objc_msgSend(v190, "updateChangeCount");

                  }
                  else
                  {

                  }
LABEL_152:

                }
                else
                {
LABEL_105:
                  swift_bridgeObjectRelease();
                  v139 = (id)v50;
                  v140 = Logger.logObject.getter(v139);
                  v141 = static os_log_type_t.info.getter(v140);
                  if (!os_log_type_enabled(v140, v141))
                  {

                    goto LABEL_152;
                  }
                  v94 = swift_slowAlloc(22, -1);
                  v95 = (_QWORD *)swift_slowAlloc(8, -1);
                  v96 = swift_slowAlloc(32, -1);
                  v271 = (_QWORD *)v96;
                  *(_DWORD *)v94 = 136446466;
                  *(_QWORD *)(v94 + 4) = sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v271);
                  *(_WORD *)(v94 + 12) = 2114;
                  *(_QWORD *)(v94 + 14) = v139;
                  *v95 = v139;

                  _os_log_impl((void *)&_mh_execute_header, v140, v141, "[%{public}s] Skipping establishRelationships() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v94, 0x16u);
                  v97 = sub_10001A630((uint64_t *)&unk_100839E70);
                  swift_arrayDestroy(v95, 1, v97);
                  v98 = v95;
                  v93 = v250;
                  swift_slowDealloc(v98, -1, -1);
                  swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
                  v99 = v96;
                  v20 = v243;
                  swift_slowDealloc(v99, -1, -1);
                  swift_slowDealloc(v94, -1, -1);

                }
                v92 = v239 + 1;
                if (v239 + 1 == v253)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_161;
                }
                continue;
              }
            }
            if ((v43 & 0xC000000000000001) != 0)
            {
              v16 = 0;
              do
              {
                v46 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v16++, v43);
                v26 = &v275;
                sub_1002DB2CC((Swift::Int *)v270, v46);

              }
              while (v45 != v16);
            }
            else
            {
              v16 = 0;
              do
              {
                v47 = *(void **)(v43 + 8 * v16++ + 32);
                v26 = &v275;
                sub_1002DB2CC((Swift::Int *)v270, v47);

              }
              while (v45 != v16);
            }
          }
        }
        else
        {
          v45 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v45)
            goto LABEL_22;
        }
        swift_bridgeObjectRelease();
        if ((uint64_t (*)(id, uint64_t, __n128))++v38 == v36)
        {

          swift_bridgeObjectRelease();
          v23 = v251;
          i = v258;
          break;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  v49 = v248;
  if ((unint64_t)v248 >> 62)
  {
    if (v248 < 0)
      v223 = v248;
    else
      v223 = v248 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v248);
    v50 = _CocoaArrayWrapper.endIndex.getter(v223);
    swift_bridgeObjectRelease();
  }
  else
  {
    v50 = *(_QWORD *)((v248 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v51 = _swiftEmptyArrayStorage;
  if (!v50)
  {
LABEL_46:
    type = v51;
    v58 = v275;
    v59 = v275 & 0xC000000000000001;
    if ((v275 & 0xC000000000000001) != 0)
    {
      if (v275 < 0)
        v60 = v275;
      else
        v60 = v275 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v275);
      v61 = __CocoaSet.count.getter(v60);
      if (v61)
      {
        v62 = v61;
        v274 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v61);
        v271 = (_QWORD *)__CocoaSet.startIndex.getter(v60);
        v272 = v63;
        v273 = 1;
        if (v62 < 0)
        {
          __break(1u);
LABEL_2:
          swift_bridgeObjectRelease();
          return;
        }
        goto LABEL_57;
      }
    }
    else
    {
      v62 = *(_QWORD *)(v275 + 16);
      swift_bridgeObjectRetain(v275);
      if (v62)
      {
        v274 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v62);
        v271 = (_QWORD *)sub_100364E8C(v58);
        v272 = v65;
        v273 = v66 & 1;
LABEL_57:
        v67 = v58 & 0xFFFFFFFFFFFFFF8;
        if (v58 < 0)
          v67 = v58;
        v259 = v67;
        do
        {
          while (1)
          {
            v74 = (uint64_t)v271;
            v73 = v272;
            v75 = v273;
            sub_100364660((uint64_t)v271, v272, v273, v58);
            v77 = v76;
            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
            v78 = v77;

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v79);
            v80 = v274[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v80);
            v81 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v78);
            specialized ContiguousArray._endMutation()(v81);
            if (v59)
              break;
            v68 = sub_10036456C(v74, v73, v75, v58);
            v70 = v69;
            v72 = v71;
            sub_1000E515C(v74, v73, v75);
            v271 = (_QWORD *)v68;
            v272 = v70;
            v273 = v72 & 1;
            if (!--v62)
              goto LABEL_67;
          }
          if ((v75 & 1) == 0)
            goto LABEL_180;
          v82 = __CocoaSet.Index.handleBitPattern.getter(v74, v73);
          if (v82)
            v83 = swift_isUniquelyReferenced_nonNull_native(v82);
          else
            v83 = 1;
          v84 = sub_10001A630(&qword_1008466D8);
          v85 = (void (*)(id *, _QWORD))Set.Index._asCocoa.modify(v270, v84);
          __CocoaSet.formIndex(after:isUnique:)(v86, v83, v259);
          v85(v270, 0);
          --v62;
        }
        while (v62);
LABEL_67:
        sub_1000E515C((uint64_t)v271, v272, v273);
        v87 = v274;
        swift_bridgeObjectRelease();
        goto LABEL_69;
      }
    }
    swift_bridgeObjectRelease();
    v87 = _swiftEmptyArrayStorage;
LABEL_69:
    v45 = v240;
    v20 = v243;
    sub_1006446F0((uint64_t)v87, v240);
    v37 = 0;
    v36 = a8;
    goto LABEL_71;
  }
  v270[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v50);
  if (v50 < 0)
  {
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    v224 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v224);
    __break(1u);
  }
  else
  {
    v20 = 0;
    while (v50 != v20)
    {
      if ((v248 & 0xC000000000000001) != 0)
        v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v49);
      else
        v52 = *(id *)(v49 + 8 * v20 + 32);
      v53 = v52;
      v54 = sub_1005CCBAC(objc_msgSend(v53, "remObjectID"), v250, v247);
      ++v20;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v55);
      v56 = *((_QWORD *)v270[0] + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v56);
      v57 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v54);
      specialized ContiguousArray._endMutation()(v57);
      v49 = v248;
      if (v50 == v20)
      {
        v51 = v270[0];
        goto LABEL_46;
      }
    }
    __break(1u);
    __break(1u);
LABEL_163:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_165:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v209 = (id)v50;
    swift_retain_n(v20);
    v210 = v209;
    v211 = Logger.logObject.getter(v210);
    v212 = static os_log_type_t.error.getter(v211);
    if (os_log_type_enabled(v211, v212))
    {
      v213 = swift_slowAlloc(32, -1);
      v266 = swift_slowAlloc(96, -1);
      v271 = (_QWORD *)v266;
      *(_DWORD *)v213 = 136446722;
      v274 = (_QWORD *)sub_10001A820(0xD000000000000016, v226 | 0x8000000000000000, (uint64_t *)&v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
      *(_WORD *)(v213 + 12) = 2082;
      sub_1000184A8(v227, (uint64_t)v276);
      sub_100671124((uint64_t)v276, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v215 = v214;
      v217 = v216;
      sub_100671124((uint64_t)v276, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v274 = (_QWORD *)sub_10001A820(v215, v217, (uint64_t *)&v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);
      swift_release_n(v20);
      *(_QWORD *)&v218 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v213 + 22) = 2080;
      v219 = objc_msgSend(v210, "description", v218);
      v220 = static String._unconditionallyBridgeFromObjectiveC(_:)(v219);
      v222 = v221;

      v16 = (uint64_t)v237;
      v274 = (_QWORD *)sub_10001A820(v220, v222, (uint64_t *)&v271);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v274, &v275);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v211, v212, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v213, 0x20u);
      swift_arrayDestroy(v266, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v266, -1, -1);
      swift_slowDealloc(v213, -1, -1);

    }
    else
    {

      swift_release_n(v20);
    }
    v263 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v210);
    swift_willThrow(v263);

  }
}

void sub_10061EEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t i;
  id *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  __objc2_class **v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD, _QWORD);
  uint64_t v77;
  _QWORD *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  id *v82;
  int64_t *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  unint64_t v92;
  char v93;
  id v94;
  unint64_t v95;
  char v96;
  int64_t *v97;
  id v98;
  NSObject *v99;
  id v100;
  NSObject *v101;
  os_log_type_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  id v109;
  int64_t v110;
  int64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  id v122;
  NSObject *v123;
  os_log_type_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  Swift::Int v145;
  uint64_t v146;
  id v147;
  void *v148;
  uint64_t v149;
  id v150;
  void *v151;
  id v152;
  unint64_t v153;
  char v154;
  id v155;
  uint64_t v156;
  id v157;
  uint64_t v158;
  id v159;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v161;
  unint64_t v162;
  uint64_t v163;
  _BOOL8 v164;
  uint64_t v165;
  char v166;
  unint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  id v177;
  NSObject *v178;
  os_log_type_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  double v185;
  id v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  double v190;
  id v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  id v195;
  id v196;
  NSObject *v197;
  os_log_type_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  double v204;
  id v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  char v217;
  void *v218;
  void *v219;
  __objc2_class **v220;
  void *v221;
  id v222;
  uint64_t v223;
  uint64_t *v224;
  unint64_t v225;
  os_log_type_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  NSObject *v231;
  uint64_t log;
  NSObject *loga;
  os_log_t logb;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  id v238;
  _QWORD *v239;
  int64_t *v240;
  os_log_type_t typec;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb[8];
  id v245;
  id v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  char v250[16];
  uint64_t *v251;
  uint64_t v252;
  id v253[4];
  _QWORD *v254;
  uint64_t v255;
  unsigned __int8 v256;
  _QWORD *v257;
  uint64_t v258;
  _BYTE v259[48];
  _BYTE v260[48];
  _BYTE v261[56];
  uint64_t v262;

  v6 = v3;
  v262 = a2;
  v10 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v251 = &v262;
  v252 = v6;
  swift_bridgeObjectRetain(v9);
  v11 = sub_100351750((void (*)(__n128 *__return_ptr, id *))sub_1006725A0, (uint64_t)&v250, a1);
  if (v4)
    goto LABEL_2;
  log = a1;
  v235 = v11;
  v228 = a3;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v235);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v231 = v6;
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(42, -1);
    v247 = (void *)swift_slowAlloc(96, -1);
    v253[0] = v247;
    *(_DWORD *)v16 = 136446978;
    v254 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, &v255);
    *(_WORD *)(v16 + 12) = 2048;
    v254 = (_QWORD *)v235[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, &v255);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v17 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
    typec = v15;
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v5 = v20;

    v254 = (_QWORD *)sub_10001A820(v19, v5, (uint64_t *)v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, &v255);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 2082;
    swift_bridgeObjectRetain(v9);
    v254 = (_QWORD *)sub_10001A820(v10, v9, (uint64_t *)v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v254, &v255);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, typec, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v16, 0x2Au);
    v6 = (uint64_t)v247;
    swift_arrayDestroy(v247, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v247, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease();
  }
  v237 = v235[2];
  if (!v237)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    return;
  }
  v258 = (uint64_t)&_swiftEmptySetSingleton;
  v236 = v235 + 4;
  swift_bridgeObjectRetain(v235);
  for (i = 0; i != v237; ++i)
  {
    if (i >= v21[2])
    {
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_158:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    }
    v23 = (id *)&v236[2 * i];
    v24 = v23[1];
    v25 = v24[2];
    if (v25)
    {
      *(_QWORD *)type = i;
      v26 = v262;
      v27 = v24 + 4;
      v238 = *v23;
      swift_bridgeObjectRetain(v24);
      v28 = 0;
      while (1)
      {
        if (v28 >= v24[2])
          goto LABEL_53;
        v29 = *((_BYTE *)v27 + v28);
        v30 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v31 = swift_allocObject(v30, 40, 7);
        *(_OWORD *)(v31 + 16) = xmmword_1006A7330;
        if ((v29 & 1) != 0)
          v32 = *(void **)(v26 + 24);
        else
          v32 = *(void **)(v26 + 16);
        *(_QWORD *)(v31 + 32) = v32;
        v253[0] = (id)v31;
        v14 = v253;
        specialized Array._endMutation()(v31);
        v6 = (uint64_t)v253[0];
        v33 = v32;
        if ((unint64_t)v6 >> 62)
        {
          if (v6 < 0)
            v37 = v6;
          else
            v37 = v6 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v6);
          v34 = _CocoaArrayWrapper.endIndex.getter(v37);
          swift_bridgeObjectRelease();
          if (v34)
          {
LABEL_22:
            if (v34 < 1)
            {
              __break(1u);
LABEL_70:
              v79 = v33;
              swift_bridgeObjectRelease();
              sub_1006463D0(v5, v26);
              if (v27)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_2;
              }
              v223 = v80;
              swift_bridgeObjectRelease();
              v213 = (uint64_t)&v14[3];
              v224 = (uint64_t *)(v26 + 48);
              swift_beginAccess(v26 + 48, v253, 0, 0);
              v81 = 0;
              v212 = (unint64_t)"mutateRelationshipOrdering";
              *(_QWORD *)typeb = v79;
              while (2)
              {
                if (v81 >= v24[2])
                  goto LABEL_174;
                v82 = (id *)&v236[2 * v81];
                v83 = (int64_t *)v82[1];
                v43 = (__objc2_class **)*v82;
                v240 = v83;
                v84 = objc_msgSend(v43, "remObjectID", swift_bridgeObjectRetain(v83).n128_f64[0]);
                v42 = sub_1005CCBAC(v84, (unint64_t *)&unk_1008398F0, off_1007D6660);
                v225 = v81;

                v85 = *v224;
                if ((*v224 & 0xC000000000000001) != 0)
                {
                  if (v85 < 0)
                    v86 = *v224;
                  else
                    v86 = v85 & 0xFFFFFFFFFFFFFF8;
                  v87 = v42;
                  swift_bridgeObjectRetain(v85);
                  v88 = __CocoaDictionary.lookup(_:)(v87, v86);
                  if (v88)
                  {
                    v89 = v88;
                    v257 = (_QWORD *)v88;
                    v90 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
                    swift_unknownObjectRetain(v89);
                    swift_dynamicCast(&v254, &v257, (char *)&type metadata for Swift.AnyObject + 8, v90, 7);
                    v91 = v254;
                    swift_unknownObjectRelease(v89);
                    goto LABEL_83;
                  }
LABEL_99:

                  swift_bridgeObjectRelease();
                  goto LABEL_100;
                }
                if (!*(_QWORD *)(v85 + 16))
                  goto LABEL_100;
                v87 = v42;
                swift_bridgeObjectRetain(v85);
                v92 = sub_1002C66DC((uint64_t)v87);
                if ((v93 & 1) == 0)
                  goto LABEL_99;
                v91 = *(id *)(*(_QWORD *)(v85 + 56) + 8 * v92);
LABEL_83:

                swift_bridgeObjectRelease();
                if (v91)
                {
                  v220 = v43;
                  if (!*(_QWORD *)(v223 + 16))
                    goto LABEL_160;
                  v94 = v42;
                  v95 = sub_1002C672C(v94);
                  if ((v96 & 1) == 0)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    goto LABEL_162;
                  }
                  v222 = *(id *)(*(_QWORD *)(v223 + 56) + 8 * v95);

                  v97 = v240;
                  swift_bridgeObjectRetain_n(v240, 2);
                  v98 = v94;
                  v99 = v231;
                  swift_retain_n(v231);
                  v100 = v98;
                  v101 = Logger.logObject.getter(v100);
                  v102 = static os_log_type_t.default.getter(v101);
                  v219 = v100;
                  if (os_log_type_enabled(v101, v102))
                  {
                    v226 = v102;
                    loga = v101;
                    v103 = swift_slowAlloc(42, -1);
                    v104 = (_QWORD *)swift_slowAlloc(8, -1);
                    v229 = swift_slowAlloc(96, -1);
                    v254 = (_QWORD *)v229;
                    *(_DWORD *)v103 = 136446978;
                    v257 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v254);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
                    *(_WORD *)(v103 + 12) = 2082;
                    sub_1000184A8(v213, (uint64_t)v261);
                    sub_100671124((uint64_t)v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                    sub_1000181B8();
                    v106 = v105;
                    v108 = v107;
                    sub_100671124((uint64_t)v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                    v257 = (_QWORD *)sub_10001A820(v106, v108, (uint64_t *)&v254);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
                    swift_release_n(v231);
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v103 + 22) = 2114;
                    v257 = v100;
                    v109 = v100;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
                    v216 = v104;
                    *v104 = v100;

                    *(_WORD *)(v103 + 32) = 2082;
                    v110 = v240[2];
                    if (v110)
                    {
                      v257 = _swiftEmptyArrayStorage;
                      sub_1001C1B0C(0, v110, 0);
                      v111 = v240;
                      v112 = 0;
                      v113 = v257;
                      v114 = v257[2];
                      v115 = 2 * v114;
                      do
                      {
                        v116 = v114 + v112;
                        if (*((_BYTE *)v111 + v112 + 32))
                          v117 = 0x7265646E696D6572;
                        else
                          v117 = 0x49746E756F636361;
                        if (*((_BYTE *)v111 + v112 + 32))
                          v118 = 0xEA00000000004449;
                        else
                          v118 = 0xE900000000000044;
                        v257 = v113;
                        v119 = v113[3];
                        v120 = v116 + 1;
                        if (v116 >= v119 >> 1)
                        {
                          sub_1001C1B0C(v119 > 1, v116 + 1, 1);
                          v111 = v240;
                          v113 = v257;
                        }
                        ++v112;
                        v113[2] = v120;
                        v121 = &v113[v115];
                        v121[4] = v117;
                        v121[5] = v118;
                        v115 += 2;
                      }
                      while (v110 != v112);
                      v97 = v111;
                      swift_bridgeObjectRelease();
                      v43 = v220;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      v113 = _swiftEmptyArrayStorage;
                    }
                    v130 = Array.description.getter(v113, &type metadata for String);
                    v132 = v131;
                    swift_bridgeObjectRelease();
                    v257 = (_QWORD *)sub_10001A820(v130, v132, (uint64_t *)&v254);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, loga, v226, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v103, 0x2Au);
                    v133 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v216, 1, v133);
                    swift_slowDealloc(v216, -1, -1);
                    swift_arrayDestroy(v229, 3, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v229, -1, -1);
                    swift_slowDealloc(v103, -1, -1);

                    v99 = v231;
                    v129 = *(_QWORD *)typeb;
                    v24 = v235;
                  }
                  else
                  {

                    swift_release_n(v231);
                    swift_bridgeObjectRelease_n(v240, 2);
                    v129 = *(_QWORD *)typeb;
                  }
                  v214 = v97[2];
                  if (v214)
                  {
                    v134 = 0;
                    v135 = v97 + 4;
                    v211 = v97 + 4;
                    while (v134 < v97[2])
                    {
                      v215 = v134;
                      v136 = *((_BYTE *)v135 + v134);
                      v137 = v262;
                      v138 = sub_10001A630((uint64_t *)&unk_10083AD90);
                      v139 = swift_allocObject(v138, 40, 7);
                      *(_OWORD *)(v139 + 16) = xmmword_1006A7330;
                      v217 = v136;
                      if ((v136 & 1) != 0)
                        v140 = *(void **)(v137 + 24);
                      else
                        v140 = *(void **)(v137 + 16);
                      *(_QWORD *)(v139 + 32) = v140;
                      v254 = (_QWORD *)v139;
                      specialized Array._endMutation()(v139);
                      v141 = (uint64_t)v254;
                      v142 = v140;
                      if ((unint64_t)v141 >> 62)
                      {
                        if (v141 < 0)
                          v174 = v141;
                        else
                          v174 = v141 & 0xFFFFFFFFFFFFFF8;
                        swift_bridgeObjectRetain(v141);
                        v143 = _CocoaArrayWrapper.endIndex.getter(v174);
                        swift_bridgeObjectRelease();
                        if (v143)
                        {
LABEL_116:
                          logb = (os_log_t)(v141 & 0xC000000000000001);
                          v144 = 4;
                          v145 = (Swift::Int)_swiftEmptyDictionarySingleton;
                          v227 = v141;
                          v230 = v143;
                          while (1)
                          {
                            if (logb)
                              v147 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v144 - 4, v141);
                            else
                              v147 = *(id *)(v141 + 8 * v144);
                            v148 = v147;
                            v149 = v144 - 3;
                            if (__OFADD__(v144 - 4, 1))
                              goto LABEL_171;
                            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                            v150 = v148;
                            v151 = v150;
                            if (!*(_QWORD *)(v129 + 16))
                              break;
                            v152 = v150;
                            v153 = sub_1002C672C(v152);
                            if ((v154 & 1) == 0)
                            {
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();

                              goto LABEL_154;
                            }
                            v155 = *(id *)(*(_QWORD *)(v129 + 56) + 8 * v153);

                            if ((v145 & 0xC000000000000001) != 0)
                            {
                              if (v145 < 0)
                                v156 = v145;
                              else
                                v156 = v145 & 0xFFFFFFFFFFFFFF8;
                              v157 = v155;
                              v158 = __CocoaDictionary.count.getter(v156);
                              if (__OFADD__(v158, 1))
                                goto LABEL_173;
                              v145 = sub_100192078(v156, v158 + 1);
                            }
                            else
                            {
                              v159 = v155;
                            }
                            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v145);
                            v254 = (_QWORD *)v145;
                            v162 = sub_1002C66DC((uint64_t)v152);
                            v163 = *(_QWORD *)(v145 + 16);
                            v164 = (v161 & 1) == 0;
                            v165 = v163 + v164;
                            if (__OFADD__(v163, v164))
                              goto LABEL_172;
                            v166 = v161;
                            if (*(_QWORD *)(v145 + 24) >= v165)
                            {
                              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                                sub_1002D73A0();
                            }
                            else
                            {
                              sub_1002CF2DC(v165, isUniquelyReferenced_nonNull_native);
                              v167 = sub_1002C66DC((uint64_t)v152);
                              if ((v166 & 1) != (v168 & 1))
                                goto LABEL_178;
                              v162 = v167;
                            }
                            v145 = (Swift::Int)v254;
                            if ((v166 & 1) != 0)
                            {
                              v146 = v254[7];

                              *(_QWORD *)(v146 + 8 * v162) = v155;
                            }
                            else
                            {
                              v254[(v162 >> 6) + 8] |= 1 << v162;
                              v169 = 8 * v162;
                              *(_QWORD *)(*(_QWORD *)(v145 + 48) + v169) = v152;
                              *(_QWORD *)(*(_QWORD *)(v145 + 56) + v169) = v155;
                              v170 = *(_QWORD *)(v145 + 16);
                              v171 = __OFADD__(v170, 1);
                              v172 = v170 + 1;
                              if (v171)
                                goto LABEL_175;
                              *(_QWORD *)(v145 + 16) = v172;
                              v173 = v152;
                            }
                            v129 = *(_QWORD *)typeb;
                            v141 = v227;

                            swift_bridgeObjectRelease();
                            ++v144;
                            if (v149 == v230)
                              goto LABEL_146;
                          }
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
LABEL_154:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_retain_n(v231);
                          v177 = v151;
                          v178 = Logger.logObject.getter(v177);
                          v179 = static os_log_type_t.error.getter(v178);
                          if (os_log_type_enabled(v178, v179))
                          {
                            v180 = swift_slowAlloc(42, -1);
                            v248 = swift_slowAlloc(128, -1);
                            v254 = (_QWORD *)v248;
                            *(_DWORD *)v180 = 136446978;
                            v257 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v254);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
                            *(_WORD *)(v180 + 12) = 2082;
                            sub_1000184A8(v213, (uint64_t)v260);
                            sub_100671124((uint64_t)v260, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                            sub_1000181B8();
                            v182 = v181;
                            v184 = v183;
                            sub_100671124((uint64_t)v260, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                            v257 = (_QWORD *)sub_10001A820(v182, v184, (uint64_t *)&v254);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
                            swift_release_n(v231);
                            *(_QWORD *)&v185 = swift_bridgeObjectRelease().n128_u64[0];
                            *(_WORD *)(v180 + 22) = 2080;
                            v186 = objc_msgSend(v177, "description", v185);
                            v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
                            v189 = v188;

                            v257 = (_QWORD *)sub_10001A820(v187, v189, (uint64_t *)&v254);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);

                            *(_QWORD *)&v190 = swift_bridgeObjectRelease().n128_u64[0];
                            *(_WORD *)(v180 + 32) = 2080;
                            v191 = objc_msgSend(v177, "description", v190);
                            v192 = static String._unconditionallyBridgeFromObjectiveC(_:)(v191);
                            v194 = v193;

                            v257 = (_QWORD *)sub_10001A820(v192, v194, (uint64_t *)&v254);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);

                            swift_bridgeObjectRelease();
                            _os_log_impl((void *)&_mh_execute_header, v178, v179, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v180, 0x2Au);
                            swift_arrayDestroy(v248, 4, (char *)&type metadata for Any + 8);
                            swift_slowDealloc(v248, -1, -1);
                            swift_slowDealloc(v180, -1, -1);

                          }
                          else
                          {

                            swift_release_n(v231);
                          }
                          v245 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v177);
                          swift_willThrow(v245);

                          return;
                        }
                      }
                      else
                      {
                        v143 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFF8) + 0x10);
                        if (v143)
                          goto LABEL_116;
                      }
                      v145 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_146:
                      swift_bridgeObjectRelease();
                      v175 = sub_1003B101C(v145);
                      swift_bridgeObjectRelease();
                      sub_10018A8D4(v222, v217, v175);
                      v134 = v215 + 1;
                      swift_bridgeObjectRelease();
                      v99 = v231;
                      v24 = v235;
                      v43 = v220;
                      v97 = v240;
                      v135 = v211;
                      if (v215 + 1 == v214)
                        goto LABEL_147;
                    }
                    goto LABEL_176;
                  }
LABEL_147:
                  swift_bridgeObjectRelease();
                  if (((uint64_t)v99[13].isa & 1) != 0)
                  {
                    v176 = v222;
                    objc_msgSend(v176, "updateChangeCount");

                  }
                  else
                  {

                  }
                }
                else
                {
LABEL_100:
                  swift_bridgeObjectRelease();
                  v122 = v42;
                  v123 = Logger.logObject.getter(v122);
                  v124 = static os_log_type_t.info.getter(v123);
                  if (os_log_type_enabled(v123, v124))
                  {
                    v125 = swift_slowAlloc(22, -1);
                    v126 = (_QWORD *)swift_slowAlloc(8, -1);
                    v127 = swift_slowAlloc(32, -1);
                    v254 = (_QWORD *)v127;
                    *(_DWORD *)v125 = 136446466;
                    *(_QWORD *)(v125 + 4) = sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v254);
                    *(_WORD *)(v125 + 12) = 2114;
                    *(_QWORD *)(v125 + 14) = v122;
                    *v126 = v122;

                    _os_log_impl((void *)&_mh_execute_header, v123, v124, "[%{public}s] Skipping establishRelationships() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v125, 0x16u);
                    v128 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v126, 1, v128);
                    swift_slowDealloc(v126, -1, -1);
                    swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v127, -1, -1);
                    swift_slowDealloc(v125, -1, -1);

                  }
                  else
                  {

                  }
                }
                v81 = v225 + 1;
                if (v225 + 1 == v237)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_158;
                }
                continue;
              }
            }
            if ((v6 & 0xC000000000000001) != 0)
            {
              v5 = 0;
              do
              {
                v35 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5++, v6);
                v14 = &v258;
                sub_1002DB2CC((Swift::Int *)v253, v35);

              }
              while (v34 != v5);
            }
            else
            {
              v5 = 0;
              do
              {
                v36 = *(void **)(v6 + 8 * v5++ + 32);
                v14 = &v258;
                sub_1002DB2CC((Swift::Int *)v253, v36);

              }
              while (v34 != v5);
            }
          }
        }
        else
        {
          v34 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v34)
            goto LABEL_22;
        }
        swift_bridgeObjectRelease();
        if (++v28 == v25)
        {

          swift_bridgeObjectRelease();
          v21 = v235;
          i = *(_QWORD *)type;
          break;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  if ((unint64_t)log >> 62)
  {
    if (log < 0)
      v209 = log;
    else
      v209 = log & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(log);
    v38 = _CocoaArrayWrapper.endIndex.getter(v209);
    swift_bridgeObjectRelease();
  }
  else
  {
    v38 = *(_QWORD *)((log & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v39 = _swiftEmptyArrayStorage;
  if (!v38)
  {
LABEL_46:
    v239 = v39;
    v50 = v258;
    if ((v258 & 0xC000000000000001) != 0)
    {
      if (v258 < 0)
        v51 = v258;
      else
        v51 = v258 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v258);
      v52 = __CocoaSet.count.getter(v51);
      if (v52)
      {
        v53 = v52;
        v257 = _swiftEmptyArrayStorage;
        v14 = &v257;
        specialized ContiguousArray.reserveCapacity(_:)(v52);
        v254 = (_QWORD *)__CocoaSet.startIndex.getter(v51);
        v255 = v54;
        v256 = 1;
        if (v53 < 0)
        {
          __break(1u);
LABEL_53:
          __break(1u);

          v55 = v253[0];
          swift_bridgeObjectRelease();
          swift_release(v55);
          goto LABEL_2;
        }
        goto LABEL_56;
      }
    }
    else
    {
      v53 = *(_QWORD *)(v258 + 16);
      swift_bridgeObjectRetain(v258);
      if (v53)
      {
        v257 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v53);
        v254 = (_QWORD *)sub_100364E8C(v50);
        v255 = v56;
        v256 = v57 & 1;
LABEL_56:
        v58 = v50 & 0xFFFFFFFFFFFFFF8;
        if (v50 < 0)
          v58 = v50;
        *(_QWORD *)typea = v58;
        do
        {
          while (1)
          {
            v65 = (uint64_t)v254;
            v64 = v255;
            v66 = v256;
            sub_100364660((uint64_t)v254, v255, v256, v50);
            v68 = v67;
            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
            v69 = v68;

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v70);
            v71 = v257[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v71);
            v72 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v69);
            specialized ContiguousArray._endMutation()(v72);
            if ((v50 & 0xC000000000000001) != 0)
              break;
            v59 = sub_10036456C(v65, v64, v66, v50);
            v61 = v60;
            v63 = v62;
            sub_1000E515C(v65, v64, v66);
            v254 = (_QWORD *)v59;
            v255 = v61;
            v256 = v63 & 1;
            if (!--v53)
              goto LABEL_66;
          }
          if ((v66 & 1) == 0)
            goto LABEL_177;
          v73 = __CocoaSet.Index.handleBitPattern.getter(v65, v64);
          if (v73)
            v74 = swift_isUniquelyReferenced_nonNull_native(v73);
          else
            v74 = 1;
          v75 = sub_10001A630(&qword_1008466D8);
          v76 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v253, v75);
          __CocoaSet.formIndex(after:isUnique:)(v77, v74, *(_QWORD *)typea);
          v76(v253, 0);
          --v53;
        }
        while (v53);
LABEL_66:
        sub_1000E515C((uint64_t)v254, v255, v256);
        v78 = v257;
        swift_bridgeObjectRelease();
        goto LABEL_68;
      }
    }
    swift_bridgeObjectRelease();
    v78 = _swiftEmptyArrayStorage;
LABEL_68:
    v26 = v228;
    v14 = v231;
    sub_1006446F0((uint64_t)v78, v228);
    v27 = 0;
    v24 = v235;
    v5 = (unint64_t)v239;
    goto LABEL_70;
  }
  v253[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v38);
  if (v38 < 0)
  {
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    v210 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v210);
    __break(1u);
  }
  else
  {
    v40 = 0;
    v41 = log;
    v42 = &unk_1008398F0;
    v43 = off_1007D6660;
    while (v38 != v40)
    {
      if ((log & 0xC000000000000001) != 0)
        v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v41);
      else
        v44 = *(id *)(v41 + 8 * v40 + 32);
      v45 = v44;
      v46 = sub_1005CCBAC(objc_msgSend(v45, "remObjectID"), (unint64_t *)&unk_1008398F0, off_1007D6660);
      ++v40;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v47);
      v48 = *((_QWORD *)v253[0] + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v48);
      v49 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
      specialized ContiguousArray._endMutation()(v49);
      v41 = log;
      if (v38 == v40)
      {
        v39 = v253[0];
        goto LABEL_46;
      }
    }
    __break(1u);
    __break(1u);
LABEL_160:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_162:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v195 = v42;
    swift_retain_n(v231);
    v196 = v195;
    v197 = Logger.logObject.getter(v196);
    v198 = static os_log_type_t.error.getter(v197);
    if (os_log_type_enabled(v197, v198))
    {
      v199 = swift_slowAlloc(32, -1);
      v249 = swift_slowAlloc(96, -1);
      v254 = (_QWORD *)v249;
      *(_DWORD *)v199 = 136446722;
      v257 = (_QWORD *)sub_10001A820(0xD000000000000016, v212 | 0x8000000000000000, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
      *(_WORD *)(v199 + 12) = 2082;
      sub_1000184A8(v213, (uint64_t)v259);
      sub_100671124((uint64_t)v259, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v201 = v200;
      v203 = v202;
      sub_100671124((uint64_t)v259, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v257 = (_QWORD *)sub_10001A820(v201, v203, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
      swift_release_n(v231);
      *(_QWORD *)&v204 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v199 + 22) = 2080;
      v205 = objc_msgSend(v196, "description", v204);
      v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(v205);
      v208 = v207;

      v43 = v220;
      v257 = (_QWORD *)sub_10001A820(v206, v208, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v197, v198, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v199, 0x20u);
      swift_arrayDestroy(v249, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v249, -1, -1);
      swift_slowDealloc(v199, -1, -1);

    }
    else
    {

      swift_release_n(v231);
    }
    v246 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v196);
    swift_willThrow(v246);

  }
}

void sub_1006209CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t i;
  id *v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  void (*v63)(_QWORD, _QWORD);
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  id *v70;
  _QWORD *v71;
  id v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  unint64_t v82;
  char v83;
  id v84;
  unint64_t v85;
  char v86;
  id v87;
  _BYTE *v88;
  _QWORD *v89;
  id v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  id v98;
  int64_t v99;
  _QWORD *v100;
  id v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  Swift::Int v120;
  uint64_t v121;
  BOOL v122;
  id v123;
  void *v124;
  id v125;
  void *v126;
  uint64_t v127;
  id v128;
  unint64_t v129;
  char v130;
  id v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  char v137;
  unint64_t v138;
  uint64_t v139;
  _BOOL8 v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  id v151;
  id v152;
  NSObject *v153;
  os_log_type_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  double v160;
  id v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  double v165;
  id v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  id v170;
  id v171;
  NSObject *v172;
  os_log_type_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  double v179;
  id v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  void *v192;
  void *v193;
  void *v194;
  id v195;
  void *v196;
  uint64_t v197;
  uint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  os_log_type_t v201;
  uint64_t v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  id v212;
  os_log_type_t typec;
  uint64_t type;
  NSObject *typea;
  unint64_t typeb;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223[16];
  uint64_t *v224;
  void *v225;
  uint64_t v226[4];
  _QWORD *v227;
  uint64_t v228;
  unsigned __int8 v229;
  _QWORD *v230;
  uint64_t v231;
  _BYTE v232[48];
  _BYTE v233[48];
  _BYTE v234[56];
  uint64_t v235;

  v5 = v3;
  v235 = a2;
  v9 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v224 = &v235;
  v225 = v5;
  swift_bridgeObjectRetain(v8);
  v10 = sub_10035176C((void (*)(__n128 *__return_ptr, id *))sub_1006726B4, (uint64_t)&v223, a1);
  if (v4)
    goto LABEL_2;
  v11 = v10;
  v204 = a1;
  v200 = a3;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v203 = v5;
  v207 = v11;
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(42, -1);
    v217 = swift_slowAlloc(96, -1);
    v226[0] = v217;
    *(_DWORD *)v16 = 136446978;
    v227 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, &v228);
    *(_WORD *)(v16 + 12) = 2048;
    v227 = (_QWORD *)v11[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, &v228);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v17 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    typec = v15;
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v22 = v19;
    v11 = v207;
    v227 = (_QWORD *)sub_10001A820(v22, v21, v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, &v228);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 2082;
    swift_bridgeObjectRetain(v8);
    v227 = (_QWORD *)sub_10001A820(v9, v8, v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, &v228);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, typec, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v16, 0x2Au);
    v5 = (void *)v217;
    swift_arrayDestroy(v217, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v217, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease();
  }
  v209 = v11[2];
  if (!v209)
    goto LABEL_2;
  v231 = (uint64_t)&_swiftEmptySetSingleton;
  v208 = v11 + 4;
  swift_bridgeObjectRetain(v11);
  for (i = 0; i != v209; ++i)
  {
    if (i >= v11[2])
    {
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_122;
    }
    v24 = (id *)&v208[2 * i];
    v25 = v24[1];
    if (v25[2])
    {
      v26 = *v24;
      swift_bridgeObjectRetain(v25);
      if (v25[2])
        __asm { BR              X9 }
      __break(1u);

      v42 = v226[0];
      swift_bridgeObjectRelease();
      swift_release(v42);
      goto LABEL_2;
    }
  }
  swift_bridgeObjectRelease();
  if ((unint64_t)v204 >> 62)
  {
    if (v204 < 0)
      v184 = v204;
    else
      v184 = v204 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v204);
    v27 = _CocoaArrayWrapper.endIndex.getter(v184);
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = *(_QWORD *)((v204 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v28 = _swiftEmptyArrayStorage;
  if (v27)
  {
    v226[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v27);
    if (v27 < 0)
    {
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      v185 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v185);
      __break(1u);
      JUMPOUT(0x1006225ACLL);
    }
    v29 = 0;
    v30 = v204;
    do
    {
      if ((void *)v27 == v29)
      {
        __break(1u);
        __break(1u);
LABEL_124:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_126:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v170 = v29;
        swift_retain_n(v203);
        v171 = v170;
        v172 = Logger.logObject.getter(v171);
        v173 = static os_log_type_t.error.getter(v172);
        if (os_log_type_enabled(v172, v173))
        {
          v174 = swift_slowAlloc(32, -1);
          v222 = swift_slowAlloc(96, -1);
          v227 = (_QWORD *)v222;
          *(_DWORD *)v174 = 136446722;
          v230 = (_QWORD *)sub_10001A820(0xD000000000000016, v187 | 0x8000000000000000, (uint64_t *)&v227);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
          *(_WORD *)(v174 + 12) = 2082;
          sub_1000184A8(v188, (uint64_t)v232);
          sub_100671124((uint64_t)v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v176 = v175;
          v178 = v177;
          sub_100671124((uint64_t)v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          v230 = (_QWORD *)sub_10001A820(v176, v178, (uint64_t *)&v227);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
          swift_release_n(v203);
          *(_QWORD *)&v179 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v174 + 22) = 2080;
          v180 = objc_msgSend(v171, "description", v179);
          v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v180);
          v183 = v182;

          v230 = (_QWORD *)sub_10001A820(v181, v183, (uint64_t *)&v227);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v172, v173, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v174, 0x20u);
          swift_arrayDestroy(v222, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v222, -1, -1);
          swift_slowDealloc(v174, -1, -1);

        }
        else
        {

          swift_release_n(v203);
        }
        v212 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v171);
        swift_willThrow(v212);

        return;
      }
      if ((v204 & 0xC000000000000001) != 0)
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v30);
      else
        v31 = *(id *)(v30 + 8 * (_QWORD)v29 + 32);
      v32 = v31;
      v33 = sub_1005CCBAC(objc_msgSend(v32, "remObjectID"), &qword_100840020, off_1007D6690);
      v29 = (char *)v29 + 1;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v34);
      v35 = *(_QWORD *)(v226[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v35);
      v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v33);
      specialized ContiguousArray._endMutation()(v36);
      v30 = v204;
    }
    while ((void *)v27 != v29);
    v28 = (_QWORD *)v226[0];
    v11 = v207;
  }
  type = (uint64_t)v28;
  v37 = v231;
  if ((v231 & 0xC000000000000001) == 0)
  {
    v40 = *(_QWORD *)(v231 + 16);
    swift_bridgeObjectRetain(v231);
    if (v40)
    {
      v230 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v40);
      v227 = (_QWORD *)sub_100364E8C(v37);
      v228 = v43;
      v229 = v44 & 1;
      goto LABEL_37;
    }
    goto LABEL_48;
  }
  if (v231 < 0)
    v38 = v231;
  else
    v38 = v231 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v231);
  v39 = __CocoaSet.count.getter(v38);
  if (!v39)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    v65 = _swiftEmptyArrayStorage;
    goto LABEL_49;
  }
  v40 = v39;
  v230 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v39);
  v227 = (_QWORD *)__CocoaSet.startIndex.getter(v38);
  v228 = v41;
  v229 = 1;
  if (v40 < 0)
  {
    __break(1u);
    goto LABEL_2;
  }
LABEL_37:
  v45 = v37 & 0xFFFFFFFFFFFFFF8;
  if (v37 < 0)
    v45 = v37;
  v218 = v45;
  do
  {
    while (1)
    {
      v52 = (uint64_t)v227;
      v51 = v228;
      v53 = v229;
      sub_100364660((uint64_t)v227, v228, v229, v37);
      v55 = v54;
      sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
      v56 = v55;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v57);
      v58 = v230[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v58);
      v59 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
      specialized ContiguousArray._endMutation()(v59);
      if ((v37 & 0xC000000000000001) != 0)
        break;
      v46 = sub_10036456C(v52, v51, v53, v37);
      v48 = v47;
      v50 = v49;
      sub_1000E515C(v52, v51, v53);
      v227 = (_QWORD *)v46;
      v228 = v48;
      v229 = v50 & 1;
      v11 = v207;
      if (!--v40)
        goto LABEL_47;
    }
    if ((v53 & 1) == 0)
      goto LABEL_141;
    v60 = __CocoaSet.Index.handleBitPattern.getter(v52, v51);
    if (v60)
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
    else
      isUniquelyReferenced_nonNull_native = 1;
    v11 = v207;
    v62 = sub_10001A630(&qword_1008466D8);
    v63 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v226, v62);
    __CocoaSet.formIndex(after:isUnique:)(v64, isUniquelyReferenced_nonNull_native, v218);
    v63(v226, 0);
    --v40;
  }
  while (v40);
LABEL_47:
  sub_1000E515C((uint64_t)v227, v228, v229);
  v65 = v230;
  swift_bridgeObjectRelease();
LABEL_49:
  sub_1006446F0((uint64_t)v65, v200);
  v67 = v66;
  swift_bridgeObjectRelease();
  sub_1006467F0(type, v200);
  v197 = v68;
  swift_bridgeObjectRelease();
  v188 = (uint64_t)(v203 + 24);
  v198 = (uint64_t *)(v200 + 48);
  swift_beginAccess(v200 + 48, v226, 0, 0);
  v69 = 0;
  v187 = (unint64_t)"mutateRelationshipOrdering";
  v210 = v67;
  while (2)
  {
    if (v69 >= v11[2])
      goto LABEL_138;
    v70 = (id *)&v208[2 * v69];
    v71 = v70[1];
    v72 = *v70;
    v73 = objc_msgSend(v72, "remObjectID", swift_bridgeObjectRetain(v71).n128_f64[0]);
    v29 = sub_1005CCBAC(v73, &qword_100840020, off_1007D6690);
    v199 = v69;

    v74 = *v198;
    if ((*v198 & 0xC000000000000001) != 0)
    {
      v75 = v72;
      if (v74 < 0)
        v76 = *v198;
      else
        v76 = v74 & 0xFFFFFFFFFFFFFF8;
      v77 = v29;
      swift_bridgeObjectRetain(v74);
      v78 = __CocoaDictionary.lookup(_:)(v77, v76);
      if (v78)
      {
        v79 = v78;
        v230 = (_QWORD *)v78;
        v80 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v79);
        swift_dynamicCast(&v227, &v230, (char *)&type metadata for Swift.AnyObject + 8, v80, 7);
        v81 = v227;
        swift_unknownObjectRelease(v79);

        swift_bridgeObjectRelease();
        v72 = v75;
        goto LABEL_60;
      }
LABEL_68:

      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
    if (!*(_QWORD *)(v74 + 16))
      goto LABEL_69;
    v77 = v29;
    swift_bridgeObjectRetain(v74);
    v82 = sub_1002C66DC((uint64_t)v77);
    if ((v83 & 1) == 0)
      goto LABEL_68;
    v81 = *(id *)(*(_QWORD *)(v74 + 56) + 8 * v82);

    swift_bridgeObjectRelease();
LABEL_60:

    if (!v81)
    {
LABEL_69:
      swift_bridgeObjectRelease();
      v101 = v29;
      v102 = Logger.logObject.getter(v101);
      v103 = static os_log_type_t.info.getter(v102);
      if (os_log_type_enabled(v102, v103))
      {
        v104 = swift_slowAlloc(22, -1);
        v105 = (_QWORD *)swift_slowAlloc(8, -1);
        v106 = v72;
        v107 = swift_slowAlloc(32, -1);
        v227 = (_QWORD *)v107;
        *(_DWORD *)v104 = 136446466;
        *(_QWORD *)(v104 + 4) = sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v227);
        *(_WORD *)(v104 + 12) = 2114;
        *(_QWORD *)(v104 + 14) = v101;
        *v105 = v101;

        _os_log_impl((void *)&_mh_execute_header, v102, v103, "[%{public}s] Skipping establishRelationships() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v104, 0x16u);
        v108 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v105, 1, v108);
        swift_slowDealloc(v105, -1, -1);
        swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v107, -1, -1);
        swift_slowDealloc(v104, -1, -1);

      }
      else
      {

      }
LABEL_72:
      v69 = v199 + 1;
      if (v199 + 1 != v209)
        continue;
      swift_bridgeObjectRelease();
LABEL_122:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      return;
    }
    break;
  }
  v196 = v72;
  if (!*(_QWORD *)(v197 + 16))
    goto LABEL_124;
  v84 = v29;
  v85 = sub_1002C672C(v84);
  if ((v86 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_126;
  }
  v195 = *(id *)(*(_QWORD *)(v197 + 56) + 8 * v85);

  swift_bridgeObjectRetain_n(v71, 2);
  v87 = v84;
  v88 = v203;
  swift_retain_n(v203);
  v89 = v71;
  v90 = v87;
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.default.getter(v91);
  v193 = v90;
  if (os_log_type_enabled(v91, v92))
  {
    v201 = v92;
    typea = v91;
    v93 = swift_slowAlloc(42, -1);
    v219 = (_QWORD *)swift_slowAlloc(8, -1);
    v205 = swift_slowAlloc(96, -1);
    v227 = (_QWORD *)v205;
    *(_DWORD *)v93 = 136446978;
    v230 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
    *(_WORD *)(v93 + 12) = 2082;
    sub_1000184A8(v188, (uint64_t)v234);
    sub_100671124((uint64_t)v234, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v95 = v94;
    v97 = v96;
    sub_100671124((uint64_t)v234, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v230 = (_QWORD *)sub_10001A820(v95, v97, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
    swift_release_n(v203);
    swift_bridgeObjectRelease();
    *(_WORD *)(v93 + 22) = 2114;
    v230 = v90;
    v98 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
    *v219 = v90;

    *(_WORD *)(v93 + 32) = 2082;
    v99 = v89[2];
    v100 = v89;
    if (v99)
    {
      v230 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v99, 0);
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    v109 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
    v111 = v110;
    swift_bridgeObjectRelease();
    v230 = (_QWORD *)sub_10001A820(v109, v111, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, typea, v201, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v93, 0x2Au);
    v112 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v219, 1, v112);
    swift_slowDealloc(v219, -1, -1);
    swift_arrayDestroy(v205, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v205, -1, -1);
    swift_slowDealloc(v93, -1, -1);

    v88 = v203;
  }
  else
  {

    swift_release_n(v203);
    swift_bridgeObjectRelease_n(v89, 2);
    v100 = v89;
  }
  v113 = v210;
  v189 = v100[2];
  if (!v189)
  {
LABEL_111:
    swift_bridgeObjectRelease();
    if ((v88[104] & 1) != 0)
    {
      v151 = v195;
      objc_msgSend(v151, "updateChangeCount");

    }
    else
    {

    }
    goto LABEL_72;
  }
  v114 = 0;
  v115 = v100 + 4;
  v206 = v100;
  v186 = v100 + 4;
  while (1)
  {
    if (v114 >= v100[2])
      goto LABEL_140;
    v190 = v114;
    v191 = *((_BYTE *)v115 + v114);
    sub_10026FA78((uint64_t)v72, v191);
    v117 = v116;
    if (!((unint64_t)v116 >> 62))
    {
      v118 = *(_QWORD *)((v116 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v118)
        break;
      goto LABEL_109;
    }
    v150 = v116 < 0 ? v116 : v116 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v116);
    v118 = _CocoaArrayWrapper.endIndex.getter(v150);
    swift_bridgeObjectRelease();
    if (v118)
      break;
LABEL_109:
    v120 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_110:
    swift_bridgeObjectRelease();
    sub_1003B101C(v120);
    swift_bridgeObjectRelease();
    v72 = v196;
    sub_10026FBF8((uint64_t)v196, (uint64_t)v195, v191);
    v114 = v190 + 1;
    swift_bridgeObjectRelease();
    v88 = v203;
    v115 = v186;
    if (v190 + 1 == v189)
      goto LABEL_111;
  }
  typeb = v117 & 0xC000000000000001;
  v119 = 4;
  v120 = (Swift::Int)_swiftEmptyDictionarySingleton;
  v202 = v117;
  while (1)
  {
    if (typeb)
      v123 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v119 - 4, v117);
    else
      v123 = *(id *)(v117 + 8 * v119);
    v124 = v123;
    if (__OFADD__(v119 - 4, 1))
      goto LABEL_135;
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v125 = v124;
    v126 = v125;
    if (!*(_QWORD *)(v113 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_118;
    }
    v220 = v119 - 3;
    v127 = v118;
    v128 = v125;
    v129 = sub_1002C672C(v128);
    if ((v130 & 1) == 0)
      break;
    v131 = *(id *)(*(_QWORD *)(v113 + 56) + 8 * v129);

    if ((v120 & 0xC000000000000001) != 0)
    {
      if (v120 < 0)
        v132 = v120;
      else
        v132 = v120 & 0xFFFFFFFFFFFFFF8;
      v133 = v131;
      v134 = __CocoaDictionary.count.getter(v132);
      if (__OFADD__(v134, 1))
        goto LABEL_137;
      v120 = sub_100192078(v132, v134 + 1);
    }
    else
    {
      v135 = v131;
    }
    v136 = swift_isUniquelyReferenced_nonNull_native(v120);
    v227 = (_QWORD *)v120;
    v138 = sub_1002C66DC((uint64_t)v128);
    v139 = *(_QWORD *)(v120 + 16);
    v140 = (v137 & 1) == 0;
    v141 = v139 + v140;
    if (__OFADD__(v139, v140))
      goto LABEL_136;
    v142 = v137;
    if (*(_QWORD *)(v120 + 24) >= v141)
    {
      if ((v136 & 1) == 0)
        sub_1002D73A0();
    }
    else
    {
      sub_1002CF2DC(v141, v136);
      v143 = sub_1002C66DC((uint64_t)v128);
      if ((v142 & 1) != (v144 & 1))
        goto LABEL_142;
      v138 = v143;
    }
    v11 = v207;
    v120 = (Swift::Int)v227;
    if ((v142 & 1) != 0)
    {
      v121 = v227[7];

      *(_QWORD *)(v121 + 8 * v138) = v131;
    }
    else
    {
      v227[(v138 >> 6) + 8] |= 1 << v138;
      v145 = 8 * v138;
      *(_QWORD *)(*(_QWORD *)(v120 + 48) + v145) = v128;
      *(_QWORD *)(*(_QWORD *)(v120 + 56) + v145) = v131;
      v146 = *(_QWORD *)(v120 + 16);
      v147 = __OFADD__(v146, 1);
      v148 = v146 + 1;
      if (v147)
        goto LABEL_139;
      *(_QWORD *)(v120 + 16) = v148;
      v149 = v128;
    }
    v113 = v210;
    v117 = v202;

    swift_bridgeObjectRelease();
    ++v119;
    v118 = v127;
    v122 = v220 == v127;
    v100 = v206;
    if (v122)
      goto LABEL_110;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_118:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain_n(v203);
  v152 = v126;
  v153 = Logger.logObject.getter(v152);
  v154 = static os_log_type_t.error.getter(v153);
  if (os_log_type_enabled(v153, v154))
  {
    v155 = swift_slowAlloc(42, -1);
    v221 = swift_slowAlloc(128, -1);
    v227 = (_QWORD *)v221;
    *(_DWORD *)v155 = 136446978;
    v230 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
    *(_WORD *)(v155 + 12) = 2082;
    sub_1000184A8(v188, (uint64_t)v233);
    sub_100671124((uint64_t)v233, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v157 = v156;
    v159 = v158;
    sub_100671124((uint64_t)v233, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v230 = (_QWORD *)sub_10001A820(v157, v159, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
    swift_release_n(v203);
    *(_QWORD *)&v160 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v155 + 22) = 2080;
    v161 = objc_msgSend(v152, "description", v160);
    v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
    v164 = v163;

    v230 = (_QWORD *)sub_10001A820(v162, v164, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);

    *(_QWORD *)&v165 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v155 + 32) = 2080;
    v166 = objc_msgSend(v152, "description", v165);
    v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
    v169 = v168;

    v230 = (_QWORD *)sub_10001A820(v167, v169, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v153, v154, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v155, 0x2Au);
    swift_arrayDestroy(v221, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v221, -1, -1);
    swift_slowDealloc(v155, -1, -1);

  }
  else
  {

    swift_release_n(v203);
  }
  v211 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v152);
  swift_willThrow(v211);

}

void sub_1006225CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, char *, uint64_t, __n128), uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t (*a9)(void), void (*a10)(void *, id, _QWORD, uint64_t, __n128))
{
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v16;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(id *, _QWORD);
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  id v112;
  unint64_t v113;
  char v114;
  id v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  id v119;
  id v120;
  NSObject *v121;
  os_log_type_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  id v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  id v141;
  NSObject *v142;
  os_log_type_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  id v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  Swift::Int v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  void *v164;
  uint64_t v165;
  id v166;
  void *v167;
  id v168;
  unint64_t v169;
  char v170;
  id v171;
  id v172;
  uint64_t v173;
  id v174;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v176;
  unint64_t v177;
  uint64_t v178;
  _BOOL8 v179;
  uint64_t v180;
  char v181;
  unint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  __n128 v191;
  id v192;
  id v193;
  NSObject *v194;
  os_log_type_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  double v201;
  id v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  double v206;
  id v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  id v211;
  id v212;
  NSObject *v213;
  os_log_type_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  double v220;
  id v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  NSObject *v232;
  unsigned int v233;
  void *v234;
  void *v235;
  uint64_t v236;
  void *v237;
  id v238;
  void *v239;
  uint64_t *v240;
  unint64_t v241;
  os_log_type_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  unint64_t v252;
  unint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  os_log_type_t type[8];
  void *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  id v261;
  id v262;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268[16];
  uint64_t *v269;
  _BYTE *v270;
  id v271[4];
  unint64_t v272;
  uint64_t v273;
  unsigned __int8 v274;
  _QWORD *v275;
  uint64_t v276;
  _BYTE v277[48];
  _BYTE v278[48];
  _BYTE v279[56];
  uint64_t v280;

  v16 = v10;
  v280 = a2;
  v20 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(a3 + 24);
  v269 = &v280;
  v270 = v16;
  v21 = swift_bridgeObjectRetain(v19);
  v22 = a5(a4, v268, a1, v21);
  if (v11)
    goto LABEL_2;
  v23 = v22;
  v265 = v20;
  v249 = a1;
  v253 = (unint64_t *)a6;
  v244 = a3;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v24 = type metadata accessor for Logger(0);
  sub_10001AAA8(v24, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter(v26);
  v247 = v16;
  v248 = a7;
  v254 = v23;
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(42, -1);
    v257 = (void *)swift_slowAlloc(96, -1);
    v271[0] = v257;
    *(_DWORD *)v28 = 136446978;
    v272 = sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
    *(_WORD *)(v28 + 12) = 2048;
    v272 = *(_QWORD *)(v23 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 22) = 2082;
    v29 = sub_1000151B0(0, (unint64_t *)a6, a7);
    v30 = objc_msgSend((id)swift_getObjCClassFromMetadata(v29), "description");
    a6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v32 = v31;

    v272 = sub_10001A820(a6, v32, (uint64_t *)v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 32) = 2082;
    swift_bridgeObjectRetain(v19);
    v272 = sub_10001A820(v265, v19, (uint64_t *)v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
    swift_bridgeObjectRelease_n(v19, 3);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v28, 0x2Au);
    swift_arrayDestroy(v257, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v257, -1, -1);
    v23 = v254;
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)type = *(_QWORD *)(v23 + 16);
  if (!*(_QWORD *)type)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    return;
  }
  v276 = (uint64_t)&_swiftEmptySetSingleton;
  v255 = v23 + 32;
  swift_bridgeObjectRetain(v23);
  v33 = 0;
  do
  {
    if (v33 >= *(_QWORD *)(v23 + 16))
    {
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
LABEL_161:
      swift_bridgeObjectRelease();
      goto LABEL_2;
    }
    v35 = v255 + 16 * v33;
    v34 = *(_QWORD *)(v35 + 8);
    v36 = *(_QWORD **)(v34 + 16);
    if (v36)
    {
      v258 = v33;
      v37 = v34 + 32;
      v38 = *(id *)v35;
      swift_bridgeObjectRetain(v34);
      v39 = 0;
      while (1)
      {
        if (v39 >= *(_QWORD *)(v34 + 16))
          goto LABEL_55;
        v40 = *(_BYTE *)(v37 + v39);
        v41 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v42 = swift_allocObject(v41, 40, 7);
        *(_OWORD *)(v42 + 16) = xmmword_1006A7330;
        if ((v40 & 1) != 0)
          v43 = objc_msgSend(v38, "reminderID");
        else
          v43 = objc_msgSend(v38, "accountID");
        v44 = v43;
        *(_QWORD *)(v42 + 32) = v44;
        v271[0] = (id)v42;
        v26 = v271;
        v45 = specialized Array._endMutation()(v44);
        a6 = (uint64_t)v271[0];
        if ((unint64_t)v271[0] >> 62)
        {
          if ((uint64_t)v271[0] < 0)
            v51 = v271[0];
          else
            v51 = (id)((unint64_t)v271[0] & 0xFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain(v271[0]);
          v46 = _CocoaArrayWrapper.endIndex.getter(v51);
          swift_bridgeObjectRelease();
          if (v46)
          {
LABEL_22:
            if (v46 < 1)
            {
              __break(1u);
LABEL_72:
              v91 = v45;
              v92 = swift_bridgeObjectRelease();
              v93 = ((uint64_t (*)(_QWORD *, uint64_t, __n128))v34)(v36, a6, v92);
              if (v37)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_2;
              }
              v94 = v93;
              swift_bridgeObjectRelease();
              v229 = (uint64_t)(v38 + 24);
              v240 = (uint64_t *)(a6 + 48);
              swift_beginAccess(a6 + 48, v271, 0, 0);
              v95 = 0;
              v228 = (unint64_t)"mutateRelationshipOrdering";
              v236 = v94;
              v96 = v253;
              v264 = v91;
              while (2)
              {
                if (v95 >= *(_QWORD *)(v254 + 16))
                  goto LABEL_177;
                v241 = v95;
                v102 = v255 + 16 * v95;
                v103 = *(_QWORD *)(v102 + 8);
                v54 = *(id *)v102;
                v260 = v103;
                v104 = objc_msgSend(v54, "remObjectID", swift_bridgeObjectRetain(v103).n128_f64[0]);
                v53 = (uint64_t)sub_1005CCBAC(v104, v96, v248);

                v105 = *v240;
                if ((*v240 & 0xC000000000000001) != 0)
                {
                  if (v105 < 0)
                    v106 = *v240;
                  else
                    v106 = v105 & 0xFFFFFFFFFFFFFF8;
                  v107 = (id)v53;
                  swift_bridgeObjectRetain(v105);
                  v108 = __CocoaDictionary.lookup(_:)(v107, v106);
                  if (v108)
                  {
                    v109 = v108;
                    v275 = (_QWORD *)v108;
                    v110 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
                    swift_unknownObjectRetain(v109);
                    swift_dynamicCast(&v272, &v275, (char *)&type metadata for Swift.AnyObject + 8, v110, 7);
                    v111 = (id)v272;
                    swift_unknownObjectRelease(v109);

                    swift_bridgeObjectRelease();
                    v38 = v247;
                    goto LABEL_87;
                  }

                  swift_bridgeObjectRelease();
                  v38 = v247;
                  goto LABEL_106;
                }
                if (!*(_QWORD *)(v105 + 16))
                  goto LABEL_106;
                v112 = (id)v53;
                swift_bridgeObjectRetain(v105);
                v113 = sub_1002C66DC((uint64_t)v112);
                if ((v114 & 1) == 0)
                {

                  swift_bridgeObjectRelease();
                  goto LABEL_106;
                }
                v111 = *(id *)(*(_QWORD *)(v105 + 56) + 8 * v113);

                swift_bridgeObjectRelease();
LABEL_87:

                if (v111)
                {
                  v239 = v54;
                  if (!*(_QWORD *)(v94 + 16))
                    goto LABEL_163;
                  v115 = (id)v53;
                  v116 = a9();
                  if ((v117 & 1) == 0)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    goto LABEL_165;
                  }
                  v238 = *(id *)(*(_QWORD *)(v94 + 56) + 8 * v116);

                  v118 = v260;
                  swift_bridgeObjectRetain_n(v260, 2);
                  v119 = v115;
                  swift_retain_n(v38);
                  v120 = v119;
                  v121 = Logger.logObject.getter(v120);
                  v122 = static os_log_type_t.default.getter(v121);
                  v235 = v120;
                  if (os_log_type_enabled(v121, v122))
                  {
                    v242 = v122;
                    v123 = swift_slowAlloc(42, -1);
                    v251 = (_QWORD *)swift_slowAlloc(8, -1);
                    v245 = swift_slowAlloc(96, -1);
                    v272 = v245;
                    *(_DWORD *)v123 = 136446978;
                    v275 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v272);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);
                    *(_WORD *)(v123 + 12) = 2082;
                    sub_1000184A8(v229, (uint64_t)v279);
                    sub_100671124((uint64_t)v279, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                    sub_1000181B8();
                    v125 = v124;
                    v127 = v126;
                    sub_100671124((uint64_t)v279, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                    v275 = (_QWORD *)sub_10001A820(v125, v127, (uint64_t *)&v272);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);
                    swift_release_n(v38);
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v123 + 22) = 2114;
                    v275 = v120;
                    v128 = v120;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);
                    *v251 = v120;

                    *(_WORD *)(v123 + 32) = 2082;
                    v129 = *(_QWORD *)(v260 + 16);
                    if (v129)
                    {
                      v232 = v121;
                      v275 = _swiftEmptyArrayStorage;
                      sub_1001C1B0C(0, v129, 0);
                      v130 = v260;
                      v131 = 0;
                      v132 = v275;
                      v133 = v275[2];
                      v134 = 2 * v133;
                      do
                      {
                        v135 = v133 + v131;
                        if (*(_BYTE *)(v130 + v131 + 32))
                          v136 = 0x7265646E696D6572;
                        else
                          v136 = 0x49746E756F636361;
                        if (*(_BYTE *)(v130 + v131 + 32))
                          v137 = 0xEA00000000004449;
                        else
                          v137 = 0xE900000000000044;
                        v275 = v132;
                        v138 = v132[3];
                        v139 = v135 + 1;
                        if (v135 >= v138 >> 1)
                        {
                          sub_1001C1B0C(v138 > 1, v135 + 1, 1);
                          v130 = v260;
                          v132 = v275;
                        }
                        ++v131;
                        v132[2] = v139;
                        v140 = &v132[v134];
                        v140[4] = v136;
                        v140[5] = v137;
                        v134 += 2;
                      }
                      while (v129 != v131);
                      v118 = v130;
                      swift_bridgeObjectRelease();
                      v121 = v232;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      v132 = _swiftEmptyArrayStorage;
                    }
                    v144 = Array.description.getter(v132, &type metadata for String);
                    v146 = v145;
                    swift_bridgeObjectRelease();
                    v275 = (_QWORD *)sub_10001A820(v144, v146, (uint64_t *)&v272);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    _os_log_impl((void *)&_mh_execute_header, v121, v242, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v123, 0x2Au);
                    v147 = sub_10001A630((uint64_t *)&unk_100839E70);
                    swift_arrayDestroy(v251, 1, v147);
                    swift_slowDealloc(v251, -1, -1);
                    swift_arrayDestroy(v245, 3, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v245, -1, -1);
                    swift_slowDealloc(v123, -1, -1);

                    v38 = v247;
                    v54 = v239;
                    v94 = v236;
                  }
                  else
                  {

                    swift_release_n(v38);
                    swift_bridgeObjectRelease_n(v260, 2);
                  }
                  v148 = v118;
                  v230 = *(_QWORD *)(v118 + 16);
                  if (v230)
                  {
                    v149 = 0;
                    v150 = v148 + 32;
                    v227 = v148 + 32;
                    while (v149 < *(_QWORD *)(v148 + 16))
                    {
                      v231 = v149;
                      v151 = *(unsigned __int8 *)(v150 + v149);
                      v152 = sub_10001A630((uint64_t *)&unk_10083AD90);
                      v153 = swift_allocObject(v152, 40, 7);
                      *(_OWORD *)(v153 + 16) = xmmword_1006A7330;
                      v233 = v151;
                      if ((v151 & 1) != 0)
                        v154 = objc_msgSend(v54, "reminderID");
                      else
                        v154 = objc_msgSend(v54, "accountID");
                      v155 = v154;
                      *(_QWORD *)(v153 + 32) = v155;
                      v272 = v153;
                      specialized Array._endMutation()(v155);
                      v156 = v272;
                      v157 = v264;
                      if (v272 >> 62)
                      {
                        if ((v272 & 0x8000000000000000) != 0)
                          v189 = v272;
                        else
                          v189 = v272 & 0xFFFFFFFFFFFFFF8;
                        swift_bridgeObjectRetain(v272);
                        v158 = _CocoaArrayWrapper.endIndex.getter(v189);
                        swift_bridgeObjectRelease();
                        if (v158)
                        {
LABEL_118:
                          v252 = v156 & 0xC000000000000001;
                          v159 = 4;
                          v160 = (Swift::Int)_swiftEmptyDictionarySingleton;
                          v246 = v156;
                          v243 = v158;
                          while (1)
                          {
                            if (v252)
                              v163 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v159 - 4, v156);
                            else
                              v163 = *(id *)(v156 + 8 * v159);
                            v164 = v163;
                            v165 = v159 - 3;
                            if (__OFADD__(v159 - 4, 1))
                              goto LABEL_174;
                            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                            v166 = v164;
                            v167 = v166;
                            if (!*(_QWORD *)(v157 + 16))
                              break;
                            v168 = v166;
                            v169 = sub_1002C672C(v168);
                            if ((v170 & 1) == 0)
                            {
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();

                              v38 = v247;
                              goto LABEL_156;
                            }
                            v171 = *(id *)(*(_QWORD *)(v157 + 56) + 8 * v169);

                            if ((v160 & 0xC000000000000001) != 0)
                            {
                              if (v160 >= 0)
                                v160 &= 0xFFFFFFFFFFFFFF8uLL;
                              v172 = v171;
                              v173 = __CocoaDictionary.count.getter(v160);
                              if (__OFADD__(v173, 1))
                                goto LABEL_176;
                              v160 = sub_100192078(v160, v173 + 1);
                            }
                            else
                            {
                              v174 = v171;
                            }
                            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v160);
                            v272 = v160;
                            v177 = sub_1002C66DC((uint64_t)v168);
                            v178 = *(_QWORD *)(v160 + 16);
                            v179 = (v176 & 1) == 0;
                            v180 = v178 + v179;
                            if (__OFADD__(v178, v179))
                              goto LABEL_175;
                            v181 = v176;
                            if (*(_QWORD *)(v160 + 24) >= v180)
                            {
                              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                                sub_1002D73A0();
                            }
                            else
                            {
                              sub_1002CF2DC(v180, isUniquelyReferenced_nonNull_native);
                              v182 = sub_1002C66DC((uint64_t)v168);
                              if ((v181 & 1) != (v183 & 1))
                                goto LABEL_181;
                              v177 = v182;
                            }
                            v157 = v264;
                            v156 = v246;
                            v160 = v272;
                            if ((v181 & 1) != 0)
                            {
                              v161 = *(_QWORD *)(v272 + 56);
                              v162 = 8 * v177;

                              *(_QWORD *)(v161 + v162) = v171;
                            }
                            else
                            {
                              *(_QWORD *)(v272 + 8 * (v177 >> 6) + 64) |= 1 << v177;
                              v184 = 8 * v177;
                              *(_QWORD *)(*(_QWORD *)(v160 + 48) + v184) = v168;
                              *(_QWORD *)(*(_QWORD *)(v160 + 56) + v184) = v171;
                              v185 = *(_QWORD *)(v160 + 16);
                              v186 = __OFADD__(v185, 1);
                              v187 = v185 + 1;
                              if (v186)
                                goto LABEL_178;
                              *(_QWORD *)(v160 + 16) = v187;
                              v188 = v168;
                            }

                            swift_bridgeObjectRelease();
                            ++v159;
                            v38 = v247;
                            if (v165 == v243)
                              goto LABEL_147;
                          }
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
LABEL_156:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_retain_n(v38);
                          v193 = v167;
                          v194 = Logger.logObject.getter(v193);
                          v195 = static os_log_type_t.error.getter(v194);
                          if (os_log_type_enabled(v194, v195))
                          {
                            v196 = swift_slowAlloc(42, -1);
                            v266 = swift_slowAlloc(128, -1);
                            v272 = v266;
                            *(_DWORD *)v196 = 136446978;
                            v275 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v272);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);
                            *(_WORD *)(v196 + 12) = 2082;
                            sub_1000184A8(v229, (uint64_t)v278);
                            sub_100671124((uint64_t)v278, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                            sub_1000181B8();
                            v198 = v197;
                            v200 = v199;
                            sub_100671124((uint64_t)v278, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                            v275 = (_QWORD *)sub_10001A820(v198, v200, (uint64_t *)&v272);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);
                            swift_release_n(v38);
                            *(_QWORD *)&v201 = swift_bridgeObjectRelease().n128_u64[0];
                            *(_WORD *)(v196 + 22) = 2080;
                            v202 = objc_msgSend(v193, "description", v201);
                            v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v202);
                            v205 = v204;

                            v275 = (_QWORD *)sub_10001A820(v203, v205, (uint64_t *)&v272);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);

                            *(_QWORD *)&v206 = swift_bridgeObjectRelease().n128_u64[0];
                            *(_WORD *)(v196 + 32) = 2080;
                            v207 = objc_msgSend(v193, "description", v206);
                            v208 = static String._unconditionallyBridgeFromObjectiveC(_:)(v207);
                            v210 = v209;

                            v275 = (_QWORD *)sub_10001A820(v208, v210, (uint64_t *)&v272);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);

                            swift_bridgeObjectRelease();
                            _os_log_impl((void *)&_mh_execute_header, v194, v195, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v196, 0x2Au);
                            swift_arrayDestroy(v266, 4, (char *)&type metadata for Any + 8);
                            swift_slowDealloc(v266, -1, -1);
                            swift_slowDealloc(v196, -1, -1);

                          }
                          else
                          {

                            swift_release_n(v38);
                          }
                          v261 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v193);
                          swift_willThrow(v261);

                          return;
                        }
                      }
                      else
                      {
                        v158 = *(_QWORD *)((v272 & 0xFFFFFFFFFFFFF8) + 0x10);
                        if (v158)
                          goto LABEL_118;
                      }
                      v160 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_147:
                      swift_bridgeObjectRelease();
                      v190 = sub_1003B101C(v160);
                      v191 = swift_bridgeObjectRelease();
                      v54 = v239;
                      a10(v239, v238, v233, v190, v191);
                      v149 = v231 + 1;
                      swift_bridgeObjectRelease();
                      v94 = v236;
                      v148 = v260;
                      v150 = v227;
                      if (v231 + 1 == v230)
                        goto LABEL_148;
                    }
                    goto LABEL_179;
                  }
LABEL_148:
                  swift_bridgeObjectRelease();
                  if ((v38[104] & 1) != 0)
                  {
                    v192 = v238;
                    objc_msgSend(v192, "updateChangeCount");

                  }
                  else
                  {

                  }
LABEL_152:

                }
                else
                {
LABEL_106:
                  swift_bridgeObjectRelease();
                  v141 = (id)v53;
                  v142 = Logger.logObject.getter(v141);
                  v143 = static os_log_type_t.info.getter(v142);
                  if (!os_log_type_enabled(v142, v143))
                  {

                    goto LABEL_152;
                  }
                  v97 = swift_slowAlloc(22, -1);
                  v98 = (_QWORD *)swift_slowAlloc(8, -1);
                  v99 = swift_slowAlloc(32, -1);
                  v272 = v99;
                  *(_DWORD *)v97 = 136446466;
                  *(_QWORD *)(v97 + 4) = sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v272);
                  *(_WORD *)(v97 + 12) = 2114;
                  *(_QWORD *)(v97 + 14) = v141;
                  *v98 = v141;

                  _os_log_impl((void *)&_mh_execute_header, v142, v143, "[%{public}s] Skipping establishRelationships() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v97, 0x16u);
                  v100 = sub_10001A630((uint64_t *)&unk_100839E70);
                  swift_arrayDestroy(v98, 1, v100);
                  swift_slowDealloc(v98, -1, -1);
                  swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
                  v101 = v99;
                  v38 = v247;
                  swift_slowDealloc(v101, -1, -1);
                  swift_slowDealloc(v97, -1, -1);

                }
                v96 = v253;
                v95 = v241 + 1;
                if (v241 + 1 == *(_QWORD *)type)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_161;
                }
                continue;
              }
            }
            if ((a6 & 0xC000000000000001) != 0)
            {
              v47 = 0;
              do
              {
                v48 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v47++, a6);
                v26 = &v276;
                sub_1002DB2CC((Swift::Int *)v271, v48);

              }
              while (v46 != v47);
            }
            else
            {
              v49 = 0;
              do
              {
                v50 = *(void **)(a6 + 8 * v49++ + 32);
                v26 = &v276;
                sub_1002DB2CC((Swift::Int *)v271, v50);

              }
              while (v46 != v49);
            }
          }
        }
        else
        {
          v46 = *(_QWORD *)(((unint64_t)v271[0] & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v46)
            goto LABEL_22;
        }
        swift_bridgeObjectRelease();
        if ((_QWORD *)++v39 == v36)
        {

          swift_bridgeObjectRelease();
          v23 = v254;
          v33 = v258;
          break;
        }
      }
    }
    ++v33;
    v34 = a8;
  }
  while (v33 != *(_QWORD *)type);
  swift_bridgeObjectRelease();
  v52 = v249;
  if ((unint64_t)v249 >> 62)
  {
    if (v249 < 0)
      v225 = v249;
    else
      v225 = v249 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v249);
    v53 = _CocoaArrayWrapper.endIndex.getter(v225);
    swift_bridgeObjectRelease();
  }
  else
  {
    v53 = *(_QWORD *)((v249 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v53)
  {
    v36 = _swiftEmptyArrayStorage;
LABEL_48:
    v62 = v276;
    v259 = v276 & 0xC000000000000001;
    if ((v276 & 0xC000000000000001) != 0)
    {
      if (v276 < 0)
        v63 = v276;
      else
        v63 = v276 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v276);
      v64 = __CocoaSet.count.getter(v63);
      if (v64)
      {
        v65 = v64;
        v275 = _swiftEmptyArrayStorage;
        v26 = &v275;
        specialized ContiguousArray.reserveCapacity(_:)(v64);
        v272 = __CocoaSet.startIndex.getter(v63);
        v273 = v66;
        v274 = 1;
        if (v65 < 0)
        {
          __break(1u);
LABEL_55:
          __break(1u);

          v67 = v271[0];
          swift_bridgeObjectRelease();
          swift_release(v67);
          goto LABEL_2;
        }
        goto LABEL_58;
      }
    }
    else
    {
      v65 = *(_QWORD *)(v276 + 16);
      swift_bridgeObjectRetain(v276);
      if (v65)
      {
        v275 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v65);
        v272 = sub_100364E8C(v62);
        v273 = v68;
        v274 = v69 & 1;
LABEL_58:
        v70 = v62 & 0xFFFFFFFFFFFFFF8;
        if (v62 < 0)
          v70 = v62;
        v250 = v70;
        do
        {
          while (1)
          {
            v77 = v272;
            v76 = v273;
            v78 = v274;
            sub_100364660(v272, v273, v274, v62);
            v80 = v79;
            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
            v81 = v80;

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v82);
            v83 = v275[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v83);
            v84 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v81);
            specialized ContiguousArray._endMutation()(v84);
            if (v259)
              break;
            v71 = sub_10036456C(v77, v76, v78, v62);
            v73 = v72;
            v75 = v74;
            sub_1000E515C(v77, v76, v78);
            v272 = v71;
            v273 = v73;
            v274 = v75 & 1;
            v34 = a8;
            if (!--v65)
              goto LABEL_68;
          }
          if ((v78 & 1) == 0)
            goto LABEL_180;
          v85 = __CocoaSet.Index.handleBitPattern.getter(v77, v76);
          if (v85)
            v86 = swift_isUniquelyReferenced_nonNull_native(v85);
          else
            v86 = 1;
          v34 = a8;
          v87 = sub_10001A630(&qword_1008466D8);
          v88 = (void (*)(id *, _QWORD))Set.Index._asCocoa.modify(v271, v87);
          __CocoaSet.formIndex(after:isUnique:)(v89, v86, v250);
          v88(v271, 0);
          --v65;
        }
        while (v65);
LABEL_68:
        sub_1000E515C(v272, v273, v274);
        v90 = v275;
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
    }
    swift_bridgeObjectRelease();
    v90 = _swiftEmptyArrayStorage;
LABEL_70:
    a6 = v244;
    v38 = v247;
    sub_1006446F0((uint64_t)v90, v244);
    v37 = 0;
    goto LABEL_72;
  }
  v54 = _swiftEmptyArrayStorage;
  v271[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v53);
  if (v53 < 0)
  {
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    v226 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v226);
    __break(1u);
  }
  else
  {
    v38 = 0;
    while ((_BYTE *)v53 != v38)
    {
      if ((v249 & 0xC000000000000001) != 0)
        v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v52);
      else
        v55 = *(id *)(v52 + 8 * (_QWORD)v38 + 32);
      v56 = v55;
      v57 = sub_1005CCBAC(objc_msgSend(v56, "remObjectID"), v253, v248);
      ++v38;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v58);
      v59 = *((_QWORD *)v271[0] + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v59);
      v60 = v59;
      v52 = v249;
      v61 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v57);
      specialized ContiguousArray._endMutation()(v61);
      if ((_BYTE *)v53 == v38)
      {
        v36 = v271[0];
        goto LABEL_48;
      }
    }
    __break(1u);
    __break(1u);
LABEL_163:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_165:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v211 = (id)v53;
    swift_retain_n(v38);
    v212 = v211;
    v213 = Logger.logObject.getter(v212);
    v214 = static os_log_type_t.error.getter(v213);
    if (os_log_type_enabled(v213, v214))
    {
      v215 = swift_slowAlloc(32, -1);
      v267 = swift_slowAlloc(96, -1);
      v272 = v267;
      *(_DWORD *)v215 = 136446722;
      v275 = (_QWORD *)sub_10001A820(0xD000000000000016, v228 | 0x8000000000000000, (uint64_t *)&v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);
      *(_WORD *)(v215 + 12) = 2082;
      sub_1000184A8(v229, (uint64_t)v277);
      sub_100671124((uint64_t)v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v217 = v216;
      v219 = v218;
      sub_100671124((uint64_t)v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v275 = (_QWORD *)sub_10001A820(v217, v219, (uint64_t *)&v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);
      swift_release_n(v38);
      *(_QWORD *)&v220 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v215 + 22) = 2080;
      v221 = objc_msgSend(v212, "description", v220);
      v222 = static String._unconditionallyBridgeFromObjectiveC(_:)(v221);
      v224 = v223;

      v54 = v239;
      v275 = (_QWORD *)sub_10001A820(v222, v224, (uint64_t *)&v272);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v213, v214, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v215, 0x20u);
      swift_arrayDestroy(v267, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v267, -1, -1);
      swift_slowDealloc(v215, -1, -1);

    }
    else
    {

      swift_release_n(v38);
    }
    v262 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v212);
    swift_willThrow(v262);

  }
}

void sub_10062414C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  os_log_t v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v74;
  void (*v75)(_QWORD, _QWORD);
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  char **v84;
  id *v85;
  int64_t *v86;
  id v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  unint64_t v97;
  char v98;
  id v99;
  unint64_t v100;
  char v101;
  int64_t *v102;
  id v103;
  id v104;
  os_log_type_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  id v112;
  int64_t v113;
  int64_t *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int64_t *v129;
  unint64_t v130;
  int64_t *v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  Swift::Int v141;
  uint64_t v142;
  BOOL v143;
  id v144;
  void *v145;
  id v146;
  void *v147;
  NSObject *v148;
  id v149;
  unint64_t v150;
  char v151;
  id v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  char v158;
  unint64_t v159;
  uint64_t v160;
  _BOOL8 v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  id v170;
  uint64_t v171;
  id v172;
  NSObject *v173;
  os_log_type_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  double v181;
  id v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  double v186;
  id v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  id v191;
  id v192;
  NSObject *v193;
  os_log_type_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  double v201;
  id v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int64_t *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  unint64_t v213;
  _QWORD *v214;
  char v215;
  void *v216;
  uint64_t v217;
  void *v218;
  id v219;
  int64_t *v220;
  uint64_t v221;
  os_log_type_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  NSObject *v229;
  NSObject *v230;
  uint64_t v231;
  unint64_t v232;
  os_log_t logd;
  os_log_t log;
  os_log_t loga;
  NSObject *logb;
  os_log_t logc;
  id v238;
  id v239;
  os_log_type_t type;
  uint64_t typea;
  uint64_t typeb;
  char v243;
  uint64_t *v244;
  uint64_t v245;
  id v246[4];
  _QWORD *v247;
  uint64_t v248;
  unsigned __int8 v249;
  _QWORD *v250;
  uint64_t v251;
  _BYTE v252[48];
  _BYTE v253[48];
  _BYTE v254[56];
  uint64_t v255;

  v5 = v3;
  v255 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v244 = &v255;
  v245 = v5;
  swift_bridgeObjectRetain(v9);
  v10 = sub_100351A4C((void (*)(__n128 *__return_ptr, id *))sub_100672FC0, (uint64_t)&v243, a1);
  if (v4)
    goto LABEL_2;
  v11 = v10;
  v225 = a1;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v221 = a3;
  v224 = v5;
  v227 = v11;
  if (os_log_type_enabled(v14, v15))
  {
    type = v15;
    v16 = swift_slowAlloc(42, -1);
    logd = (os_log_t)swift_slowAlloc(96, -1);
    v246[0] = logd;
    *(_DWORD *)v16 = 136446978;
    v247 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
    *(_WORD *)(v16 + 12) = 2048;
    v247 = (_QWORD *)v11[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v17 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v247 = (_QWORD *)sub_10001A820(v19, v21, (uint64_t *)v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 2082;
    swift_bridgeObjectRetain(v9);
    v247 = (_QWORD *)sub_10001A820(v8, v9, (uint64_t *)v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, type, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v16, 0x2Au);
    v5 = (uint64_t)logd;
    swift_arrayDestroy(logd, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(logd, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease();
  }
  v229 = v11[2];
  if (!v229)
    goto LABEL_2;
  v251 = (uint64_t)&_swiftEmptySetSingleton;
  v228 = v11 + 4;
  swift_bridgeObjectRetain(v11);
  v22 = 0;
LABEL_12:
  if ((unint64_t)v22 >= v11[2])
  {
    __break(1u);
LABEL_160:
    __break(1u);
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_2:
    swift_bridgeObjectRelease();
    return;
  }
  v23 = (id *)&v228[2 * (_QWORD)v22];
  v24 = (uint64_t)v23[1];
  v25 = *(_QWORD *)(v24 + 16);
  if (!v25)
    goto LABEL_11;
  log = v22;
  v26 = v255;
  v27 = v24 + 32;
  v230 = *v23;
  swift_bridgeObjectRetain(v24);
  v28 = 0;
  while (1)
  {
    if (v28 >= *(_QWORD *)(v24 + 16))
    {
      __break(1u);

      v54 = v246[0];
      swift_bridgeObjectRelease();
      swift_release(v54);
      goto LABEL_2;
    }
    v29 = *(_BYTE *)(v27 + v28);
    v30 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v31 = swift_allocObject(v30, 40, 7);
    *(_OWORD *)(v31 + 16) = xmmword_1006A7330;
    v32 = (v29 & 1) != 0 ? *(void **)(v26 + 24) : *(void **)(v26 + 16);
    *(_QWORD *)(v31 + 32) = v32;
    v246[0] = (id)v31;
    v14 = v246;
    specialized Array._endMutation()(v31);
    v5 = (uint64_t)v246[0];
    v33 = v32;
    if (!((unint64_t)v5 >> 62))
      break;
    if (v5 < 0)
      v39 = v5;
    else
      v39 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v34 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease();
    if (v34)
      goto LABEL_22;
LABEL_15:
    swift_bridgeObjectRelease();
    if (++v28 == v25)
    {

      swift_bridgeObjectRelease();
      v11 = v227;
      v22 = log;
LABEL_11:
      v22 = (os_log_t)((char *)v22 + 1);
      if (v22 == v229)
      {
        swift_bridgeObjectRelease();
        if ((unint64_t)v225 >> 62)
        {
          if (v225 < 0)
            v206 = v225;
          else
            v206 = v225 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v225);
          v5 = _CocoaArrayWrapper.endIndex.getter(v206);
          swift_bridgeObjectRelease();
        }
        else
        {
          v5 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v40 = _swiftEmptyArrayStorage;
        if (v5)
        {
          v246[0] = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v5);
          if (v5 < 0)
          {
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
            goto LABEL_177;
          }
          v41 = 0;
          do
          {
            if (v5 == v41)
              goto LABEL_160;
            if ((v225 & 0xC000000000000001) != 0)
              v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v225);
            else
              v42 = *(id *)(v225 + 8 * v41 + 32);
            v43 = v42;
            v44 = sub_1005CCBAC(objc_msgSend(v43, "remObjectID"), (unint64_t *)&qword_100839928, off_1007D6718);
            ++v41;

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v45);
            v46 = *((_QWORD *)v246[0] + 2);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
            v47 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v44);
            specialized ContiguousArray._endMutation()(v47);
          }
          while (v5 != v41);
          v40 = v246[0];
        }
        v230 = v40;
        v48 = v251;
        v49 = v251 & 0xC000000000000001;
        if ((v251 & 0xC000000000000001) != 0)
        {
          if (v251 < 0)
            v50 = v251;
          else
            v50 = v251 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v251);
          v51 = __CocoaSet.count.getter(v50);
          if (v51)
          {
            v52 = v51;
            v250 = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)(v51);
            v247 = (_QWORD *)__CocoaSet.startIndex.getter(v50);
            v248 = v53;
            v249 = 1;
            if (v52 < 0)
            {
              __break(1u);
              goto LABEL_2;
            }
            goto LABEL_57;
          }
        }
        else
        {
          v52 = *(_QWORD *)(v251 + 16);
          swift_bridgeObjectRetain(v251);
          if (v52)
          {
            v250 = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)(v52);
            v247 = (_QWORD *)sub_100364E8C(v48);
            v248 = v55;
            v249 = v56 & 1;
LABEL_57:
            v57 = v48 & 0xFFFFFFFFFFFFFF8;
            if (v48 < 0)
              v57 = v48;
            loga = (os_log_t)v57;
            do
            {
              while (1)
              {
                v64 = (uint64_t)v247;
                v63 = v248;
                v65 = v249;
                sub_100364660((uint64_t)v247, v248, v249, v48);
                v67 = v66;
                sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                v68 = v67;

                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v69);
                v70 = v250[2];
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v70);
                v71 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v70, v68);
                specialized ContiguousArray._endMutation()(v71);
                if (v49)
                  break;
                v58 = sub_10036456C(v64, v63, v65, v48);
                v60 = v59;
                v62 = v61;
                sub_1000E515C(v64, v63, v65);
                v247 = (_QWORD *)v58;
                v248 = v60;
                v249 = v62 & 1;
                if (!--v52)
                  goto LABEL_67;
              }
              if ((v65 & 1) == 0)
                goto LABEL_178;
              v72 = __CocoaSet.Index.handleBitPattern.getter(v64, v63);
              if (v72)
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v72);
              else
                isUniquelyReferenced_nonNull_native = 1;
              v74 = sub_10001A630(&qword_1008466D8);
              v75 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v246, v74);
              __CocoaSet.formIndex(after:isUnique:)(v76, isUniquelyReferenced_nonNull_native, loga);
              v75(v246, 0);
              --v52;
            }
            while (v52);
LABEL_67:
            sub_1000E515C((uint64_t)v247, v248, v249);
            v77 = v250;
            swift_bridgeObjectRelease();
            goto LABEL_69;
          }
        }
        swift_bridgeObjectRelease();
        v77 = _swiftEmptyArrayStorage;
LABEL_69:
        v34 = v221;
        v24 = v224;
        sub_1006446F0((uint64_t)v77, v221);
        v27 = 0;
        goto LABEL_71;
      }
      goto LABEL_12;
    }
  }
  v34 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v34)
    goto LABEL_15;
LABEL_22:
  if (v34 >= 1)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v35 = 0;
      do
      {
        v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v35++, v5);
        v14 = &v251;
        sub_1002DB2CC((Swift::Int *)v246, v36);

      }
      while (v34 != v35);
    }
    else
    {
      v37 = 0;
      do
      {
        v38 = *(void **)(v5 + 8 * v37++ + 32);
        v14 = &v251;
        sub_1002DB2CC((Swift::Int *)v246, v38);

      }
      while (v34 != v37);
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_71:
  v78 = v33;
  swift_bridgeObjectRelease();
  v79 = v230;
  sub_1006480B0((uint64_t)v230, v34);
  if (v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_2;
  }
  v81 = v80;
  swift_bridgeObjectRelease();
  v212 = (uint64_t *)(v34 + 48);
  swift_beginAccess(v34 + 48, v246, 0, 0);
  v82 = v227;
  if (!v227[2])
  {
LABEL_151:
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_152:
    swift_bridgeObjectRelease();
    goto LABEL_2;
  }
  v83 = 0;
  v209 = v24 + 24;
  v84 = &selRef_isConcealed;
  v226 = v78;
  v217 = v81;
  while (2)
  {
    v210 = v83;
    v85 = (id *)&v228[2 * v83];
    v86 = (int64_t *)v85[1];
    v87 = *v85;
    v220 = v86;
    v88 = objc_msgSend(v87, v84[432], swift_bridgeObjectRetain(v86).n128_f64[0]);
    v89 = sub_1005CCBAC(v88, (unint64_t *)&qword_100839928, off_1007D6718);

    v90 = *v212;
    v216 = v87;
    if ((*v212 & 0xC000000000000001) != 0)
    {
      if (v90 < 0)
        v91 = *v212;
      else
        v91 = v90 & 0xFFFFFFFFFFFFFF8;
      v92 = v89;
      swift_bridgeObjectRetain(v90);
      v93 = __CocoaDictionary.lookup(_:)(v92, v91);
      if (v93)
      {
        v94 = v93;
        v250 = (_QWORD *)v93;
        v95 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v94);
        swift_dynamicCast(&v247, &v250, (char *)&type metadata for Swift.AnyObject + 8, v95, 7);
        v96 = v247;
        swift_unknownObjectRelease(v94);
        goto LABEL_84;
      }
LABEL_85:

      swift_bridgeObjectRelease();
LABEL_86:
      v96 = 0;
    }
    else
    {
      if (!*(_QWORD *)(v90 + 16))
        goto LABEL_86;
      v92 = v89;
      swift_bridgeObjectRetain(v90);
      v97 = sub_1002C66DC((uint64_t)v92);
      if ((v98 & 1) == 0)
        goto LABEL_85;
      v96 = *(id *)(*(_QWORD *)(v90 + 56) + 8 * v97);
LABEL_84:

      swift_bridgeObjectRelease();
    }

    if (!*(_QWORD *)(v81 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_163:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v191 = v89;
      swift_retain_n(v24);
      v192 = v191;
      v193 = Logger.logObject.getter(v192);
      v194 = static os_log_type_t.error.getter(v193);
      if (os_log_type_enabled(v193, v194))
      {
        v195 = swift_slowAlloc(32, -1);
        typeb = swift_slowAlloc(96, -1);
        v247 = (_QWORD *)typeb;
        *(_DWORD *)v195 = 136446722;
        v250 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v247);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);
        *(_WORD *)(v195 + 12) = 2082;
        sub_1000184A8(v209, (uint64_t)v252);
        sub_100671124((uint64_t)v252, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v197 = v196;
        v198 = v24;
        v200 = v199;
        sub_100671124((uint64_t)v252, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v250 = (_QWORD *)sub_10001A820(v197, v200, (uint64_t *)&v247);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);
        swift_release_n(v198);
        *(_QWORD *)&v201 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v195 + 22) = 2080;
        v202 = objc_msgSend(v192, "description", v201);
        v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v202);
        v205 = v204;

        v250 = (_QWORD *)sub_10001A820(v203, v205, (uint64_t *)&v247);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v193, v194, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v195, 0x20u);
        swift_arrayDestroy(typeb, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(typeb, -1, -1);
        swift_slowDealloc(v195, -1, -1);

      }
      else
      {

        swift_release_n(v24);
      }
      v239 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v192);
      swift_willThrow(v239);

      return;
    }
    v99 = v89;
    v100 = sub_1002C672C(v99);
    if ((v101 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_163;
    }
    v219 = *(id *)(*(_QWORD *)(v81 + 56) + 8 * v100);

    v102 = v220;
    swift_bridgeObjectRetain_n(v220, 2);
    v103 = v99;
    swift_retain_n(v24);
    v104 = v103;
    v79 = Logger.logObject.getter(v104);
    v105 = static os_log_type_t.default.getter(v79);
    v218 = v104;
    if (os_log_type_enabled(v79, v105))
    {
      v222 = v105;
      logb = v79;
      v106 = swift_slowAlloc(42, -1);
      v107 = (_QWORD *)swift_slowAlloc(8, -1);
      v231 = swift_slowAlloc(96, -1);
      v247 = (_QWORD *)v231;
      *(_DWORD *)v106 = 136446978;
      v250 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v247);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);
      *(_WORD *)(v106 + 12) = 2082;
      sub_1000184A8(v209, (uint64_t)v254);
      sub_100671124((uint64_t)v254, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v109 = v108;
      v111 = v110;
      sub_100671124((uint64_t)v254, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v250 = (_QWORD *)sub_10001A820(v109, v111, (uint64_t *)&v247);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);
      swift_release_n(v224);
      swift_bridgeObjectRelease();
      *(_WORD *)(v106 + 22) = 2114;
      v250 = v104;
      v112 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);
      v214 = v107;
      *v107 = v104;

      *(_WORD *)(v106 + 32) = 2082;
      v113 = v220[2];
      if (v113)
      {
        v250 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v113, 0);
        v114 = v220;
        v115 = 0;
        v116 = v250;
        v117 = v250[2];
        v118 = 2 * v117;
        do
        {
          v119 = v117 + v115;
          if (*((_BYTE *)v114 + v115 + 32))
            v120 = 0x44497473696CLL;
          else
            v120 = 0x49746E756F636361;
          if (*((_BYTE *)v114 + v115 + 32))
            v121 = 0xE600000000000000;
          else
            v121 = 0xE900000000000044;
          v250 = v116;
          v122 = v116[3];
          v123 = v119 + 1;
          if (v119 >= v122 >> 1)
          {
            sub_1001C1B0C(v122 > 1, v119 + 1, 1);
            v114 = v220;
            v116 = v250;
          }
          ++v115;
          v116[2] = v123;
          v124 = &v116[v118];
          v124[4] = v120;
          v124[5] = v121;
          v118 += 2;
        }
        while (v113 != v115);
        v102 = v114;
        swift_bridgeObjectRelease();
        v78 = v226;
        v104 = v218;
      }
      else
      {
        swift_bridgeObjectRelease();
        v116 = _swiftEmptyArrayStorage;
      }
      v125 = Array.description.getter(v116, &type metadata for String);
      v127 = v126;
      swift_bridgeObjectRelease();
      v250 = (_QWORD *)sub_10001A820(v125, v127, (uint64_t *)&v247);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v79 = logb;
      _os_log_impl((void *)&_mh_execute_header, logb, v222, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v106, 0x2Au);
      v128 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v214, 1, v128);
      swift_slowDealloc(v214, -1, -1);
      swift_arrayDestroy(v231, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v231, -1, -1);
      swift_slowDealloc(v106, -1, -1);

      v24 = v224;
      v82 = v227;
    }
    else
    {

      swift_release_n(v24);
      swift_bridgeObjectRelease_n(v220, 2);
    }
    v129 = v102;
    v211 = v102[2];
    if (!v211)
    {
      swift_bridgeObjectRelease();
      v81 = v217;
LABEL_146:
      if ((*(_BYTE *)(v24 + 104) & 1) != 0)
      {
        v79 = v219;
        -[NSObject updateChangeCount](v79, "updateChangeCount");

      }
      else
      {

      }
      v83 = v210 + 1;
      if ((v210 + 1) == v229)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_152;
      }
      v84 = &selRef_isConcealed;
      if (v83 >= v82[2])
        goto LABEL_151;
      continue;
    }
    break;
  }
  v130 = 0;
  v131 = (uint64_t)(v102 + 4);
  v208 = (uint64_t)(v102 + 4);
  while (v130 < v129[2])
  {
    v213 = v130;
    v132 = *(_BYTE *)(v131 + v130);
    v133 = v255;
    v134 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v135 = swift_allocObject(v134, 40, 7);
    *(_OWORD *)(v135 + 16) = xmmword_1006A7330;
    v215 = v132;
    if ((v132 & 1) != 0)
      v136 = *(void **)(v133 + 24);
    else
      v136 = *(void **)(v133 + 16);
    *(_QWORD *)(v135 + 32) = v136;
    v247 = (_QWORD *)v135;
    specialized Array._endMutation()(v135);
    v137 = (uint64_t)v247;
    v138 = v136;
    if ((unint64_t)v137 >> 62)
    {
      if (v137 < 0)
        v171 = v137;
      else
        v171 = v137 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v137);
      v139 = _CocoaArrayWrapper.endIndex.getter(v171);
      swift_bridgeObjectRelease();
      if (v139)
      {
LABEL_113:
        v232 = v137 & 0xC000000000000001;
        v140 = 4;
        v141 = (Swift::Int)_swiftEmptyDictionarySingleton;
        v223 = v137;
        while (1)
        {
          if (v232)
            v144 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v140 - 4, v137);
          else
            v144 = *(id *)(v137 + 8 * v140);
          v145 = v144;
          if (__OFADD__(v140 - 4, 1))
            goto LABEL_173;
          sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
          v146 = v145;
          v147 = v146;
          if (!v78[2])
            break;
          logc = (os_log_t)(v140 - 3);
          v148 = v139;
          v149 = v146;
          v150 = sub_1002C672C(v149);
          if ((v151 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_155;
          }
          v152 = *(id *)(v78[7] + 8 * v150);

          if ((v141 & 0xC000000000000001) != 0)
          {
            if (v141 < 0)
              v153 = v141;
            else
              v153 = v141 & 0xFFFFFFFFFFFFFF8;
            v154 = v152;
            v155 = __CocoaDictionary.count.getter(v153);
            if (__OFADD__(v155, 1))
              goto LABEL_175;
            v141 = sub_100192078(v153, v155 + 1);
          }
          else
          {
            v156 = v152;
          }
          v157 = swift_isUniquelyReferenced_nonNull_native(v141);
          v247 = (_QWORD *)v141;
          v159 = sub_1002C66DC((uint64_t)v149);
          v160 = *(_QWORD *)(v141 + 16);
          v161 = (v158 & 1) == 0;
          v162 = v160 + v161;
          if (__OFADD__(v160, v161))
            goto LABEL_174;
          v163 = v158;
          if (*(_QWORD *)(v141 + 24) >= v162)
          {
            if ((v157 & 1) == 0)
              sub_1002D73A0();
          }
          else
          {
            sub_1002CF2DC(v162, v157);
            v164 = sub_1002C66DC((uint64_t)v149);
            if ((v163 & 1) != (v165 & 1))
              goto LABEL_179;
            v159 = v164;
          }
          v24 = v224;
          v141 = (Swift::Int)v247;
          if ((v163 & 1) != 0)
          {
            v142 = v247[7];

            *(_QWORD *)(v142 + 8 * v159) = v152;
          }
          else
          {
            v247[(v159 >> 6) + 8] |= 1 << v159;
            v166 = 8 * v159;
            *(_QWORD *)(*(_QWORD *)(v141 + 48) + v166) = v149;
            *(_QWORD *)(*(_QWORD *)(v141 + 56) + v166) = v152;
            v167 = *(_QWORD *)(v141 + 16);
            v168 = __OFADD__(v167, 1);
            v169 = v167 + 1;
            if (v168)
              goto LABEL_176;
            *(_QWORD *)(v141 + 16) = v169;
            v170 = v149;
          }
          v78 = v226;
          v137 = v223;

          swift_bridgeObjectRelease();
          ++v140;
          v139 = (uint64_t)v148;
          v143 = logc == v148;
          v82 = v227;
          if (v143)
            goto LABEL_143;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_155:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_retain_n(v24);
        v172 = v147;
        v173 = Logger.logObject.getter(v172);
        v174 = static os_log_type_t.error.getter(v173);
        if (os_log_type_enabled(v173, v174))
        {
          v175 = swift_slowAlloc(42, -1);
          typea = swift_slowAlloc(128, -1);
          v247 = (_QWORD *)typea;
          *(_DWORD *)v175 = 136446978;
          v250 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v247);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);
          *(_WORD *)(v175 + 12) = 2082;
          sub_1000184A8(v209, (uint64_t)v253);
          sub_100671124((uint64_t)v253, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v177 = v176;
          v178 = v24;
          v180 = v179;
          sub_100671124((uint64_t)v253, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          v250 = (_QWORD *)sub_10001A820(v177, v180, (uint64_t *)&v247);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);
          swift_release_n(v178);
          *(_QWORD *)&v181 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v175 + 22) = 2080;
          v182 = objc_msgSend(v172, "description", v181);
          v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
          v185 = v184;

          v250 = (_QWORD *)sub_10001A820(v183, v185, (uint64_t *)&v247);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);

          *(_QWORD *)&v186 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v175 + 32) = 2080;
          v187 = objc_msgSend(v172, "description", v186);
          v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v187);
          v190 = v189;

          v250 = (_QWORD *)sub_10001A820(v188, v190, (uint64_t *)&v247);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v173, v174, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v175, 0x2Au);
          swift_arrayDestroy(typea, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(typea, -1, -1);
          swift_slowDealloc(v175, -1, -1);

        }
        else
        {

          swift_release_n(v24);
        }
        v238 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v172);
        swift_willThrow(v238);

        return;
      }
    }
    else
    {
      v139 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v139)
        goto LABEL_113;
    }
    v141 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_143:
    swift_bridgeObjectRelease();
    v79 = sub_1003B101C(v141);
    swift_bridgeObjectRelease();
    sub_1003CE184(v219, v215, (uint64_t)v79);
    v130 = v213 + 1;
    swift_bridgeObjectRelease();
    v81 = v217;
    v104 = v218;
    v129 = v220;
    v131 = v208;
    if (v213 + 1 == v211)
    {
      swift_bridgeObjectRelease();
      goto LABEL_146;
    }
  }
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  v207 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v207);
  __break(1u);
}

void sub_100625B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  id *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v74;
  void (*v75)(_QWORD, _QWORD);
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char **v82;
  id *v83;
  int64_t *v84;
  id v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  unint64_t v95;
  char v96;
  id v97;
  unint64_t v98;
  char v99;
  int64_t *v100;
  id v101;
  id v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  id v111;
  int64_t v112;
  int64_t *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  Swift::Int v139;
  uint64_t v140;
  id v141;
  void *v142;
  id v143;
  void *v144;
  uint64_t v145;
  id v146;
  unint64_t v147;
  char v148;
  id v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  char v155;
  unint64_t v156;
  uint64_t v157;
  _BOOL8 v158;
  uint64_t v159;
  char v160;
  unint64_t v161;
  char v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  void *v171;
  id v172;
  id v173;
  NSObject *v174;
  os_log_type_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  double v181;
  id v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  double v186;
  id v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  id v191;
  id v192;
  NSObject *v193;
  os_log_type_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  double v200;
  id v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  char v212;
  _QWORD *v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  void *v217;
  id v218;
  int64_t *v219;
  uint64_t v220;
  os_log_type_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  id v229;
  uint64_t v230;
  unint64_t v231;
  os_log_type_t typed;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  NSObject *typeb;
  os_log_type_t typec[8];
  id v237;
  id v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  char v242[16];
  uint64_t *v243;
  uint64_t v244;
  id v245[4];
  _QWORD *v246;
  uint64_t v247;
  unsigned __int8 v248;
  _QWORD *v249;
  uint64_t v250;
  _BYTE v251[48];
  _BYTE v252[48];
  _BYTE v253[56];
  uint64_t v254;

  v5 = v3;
  v254 = a2;
  v9 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v243 = &v254;
  v244 = v5;
  swift_bridgeObjectRetain(v8);
  v10 = sub_100351A68((void (*)(__n128 *__return_ptr, id *))sub_1006730E4, (uint64_t)&v242, a1);
  if (v4)
    goto LABEL_2;
  v224 = a1;
  v226 = v10;
  v220 = a3;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v226);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  v223 = v5;
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(42, -1);
    v239 = (void *)swift_slowAlloc(96, -1);
    v245[0] = v239;
    *(_DWORD *)v15 = 136446978;
    v246 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, &v247);
    *(_WORD *)(v15 + 12) = 2048;
    v246 = (_QWORD *)v226[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, &v247);
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    v16 = sub_1000151B0(0, (unint64_t *)&qword_100851CB0, off_1007D66B0);
    typed = v14;
    v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "description");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v246 = (_QWORD *)sub_10001A820(v18, v20, (uint64_t *)v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, &v247);
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 32) = 2082;
    swift_bridgeObjectRetain(v8);
    v246 = (_QWORD *)sub_10001A820(v9, v8, (uint64_t *)v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, &v247);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, typed, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v15, 0x2Au);
    v5 = (uint64_t)v239;
    swift_arrayDestroy(v239, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v239, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease();
  }
  v228 = v226[2];
  if (!v228)
    goto LABEL_2;
  v250 = (uint64_t)&_swiftEmptySetSingleton;
  v227 = v226 + 4;
  swift_bridgeObjectRetain(v226);
  v21 = v226;
  v22 = 0;
LABEL_12:
  if (v22 >= v21[2])
  {
    __break(1u);
LABEL_163:
    __break(1u);
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_2:
    swift_bridgeObjectRelease();
    return;
  }
  v23 = (id *)&v227[2 * v22];
  v24 = v23[1];
  v25 = v24[2];
  if (!v25)
    goto LABEL_11;
  *(_QWORD *)type = v22;
  v26 = v254;
  v27 = v24 + 4;
  v229 = *v23;
  swift_bridgeObjectRetain(v24);
  v28 = 0;
  while (1)
  {
    if (v28 >= v24[2])
    {
      __break(1u);

      v54 = v245[0];
      swift_bridgeObjectRelease();
      swift_release(v54);
      goto LABEL_2;
    }
    v29 = *((_BYTE *)v27 + v28);
    v30 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v31 = swift_allocObject(v30, 40, 7);
    *(_OWORD *)(v31 + 16) = xmmword_1006A7330;
    v32 = (v29 & 1) != 0 ? *(void **)(v26 + 24) : *(void **)(v26 + 16);
    *(_QWORD *)(v31 + 32) = v32;
    v245[0] = (id)v31;
    v13 = v245;
    specialized Array._endMutation()(v31);
    v5 = (uint64_t)v245[0];
    v33 = v32;
    if (!((unint64_t)v5 >> 62))
      break;
    if (v5 < 0)
      v39 = v5;
    else
      v39 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v34 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease();
    if (v34)
      goto LABEL_22;
LABEL_15:
    swift_bridgeObjectRelease();
    if (++v28 == v25)
    {

      swift_bridgeObjectRelease();
      v21 = v226;
      v22 = *(_QWORD *)type;
LABEL_11:
      if (++v22 == v228)
      {
        swift_bridgeObjectRelease();
        if ((unint64_t)v224 >> 62)
        {
          if (v224 < 0)
            v205 = v224;
          else
            v205 = v224 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v224);
          v5 = _CocoaArrayWrapper.endIndex.getter(v205);
          swift_bridgeObjectRelease();
        }
        else
        {
          v5 = *(_QWORD *)((v224 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v40 = _swiftEmptyArrayStorage;
        if (!v5)
          goto LABEL_46;
        v245[0] = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v5);
        if ((v5 & 0x8000000000000000) == 0)
        {
          v41 = 0;
          do
          {
            if (v5 == v41)
              goto LABEL_163;
            if ((v224 & 0xC000000000000001) != 0)
              v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v224);
            else
              v42 = *(id *)(v224 + 8 * v41 + 32);
            v43 = v42;
            v44 = sub_1005CCBAC(objc_msgSend(v43, "remObjectID"), (unint64_t *)&qword_100851CB0, off_1007D66B0);
            ++v41;

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v45);
            v46 = *((_QWORD *)v245[0] + 2);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
            v47 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v44);
            specialized ContiguousArray._endMutation()(v47);
          }
          while (v5 != v41);
          v40 = v245[0];
LABEL_46:
          v229 = v40;
          v48 = v250;
          v49 = v250 & 0xC000000000000001;
          if ((v250 & 0xC000000000000001) != 0)
          {
            if (v250 < 0)
              v50 = v250;
            else
              v50 = v250 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v250);
            v51 = __CocoaSet.count.getter(v50);
            if (v51)
            {
              v52 = v51;
              v249 = _swiftEmptyArrayStorage;
              specialized ContiguousArray.reserveCapacity(_:)(v51);
              v246 = (_QWORD *)__CocoaSet.startIndex.getter(v50);
              v247 = v53;
              v248 = 1;
              if (v52 < 0)
              {
                __break(1u);
                goto LABEL_2;
              }
              goto LABEL_57;
            }
          }
          else
          {
            v52 = *(_QWORD *)(v250 + 16);
            swift_bridgeObjectRetain(v250);
            if (v52)
            {
              v249 = _swiftEmptyArrayStorage;
              specialized ContiguousArray.reserveCapacity(_:)(v52);
              v246 = (_QWORD *)sub_100364E8C(v48);
              v247 = v55;
              v248 = v56 & 1;
LABEL_57:
              v57 = v48 & 0xFFFFFFFFFFFFFF8;
              if (v48 < 0)
                v57 = v48;
              *(_QWORD *)typea = v57;
              do
              {
                while (1)
                {
                  v64 = (uint64_t)v246;
                  v63 = v247;
                  v65 = v248;
                  sub_100364660((uint64_t)v246, v247, v248, v48);
                  v67 = v66;
                  sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                  v68 = v67;

                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v69);
                  v70 = v249[2];
                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v70);
                  v71 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v70, v68);
                  specialized ContiguousArray._endMutation()(v71);
                  if (v49)
                    break;
                  v58 = sub_10036456C(v64, v63, v65, v48);
                  v60 = v59;
                  v62 = v61;
                  sub_1000E515C(v64, v63, v65);
                  v246 = (_QWORD *)v58;
                  v247 = v60;
                  v248 = v62 & 1;
                  if (!--v52)
                    goto LABEL_67;
                }
                if ((v65 & 1) == 0)
                  goto LABEL_182;
                v72 = __CocoaSet.Index.handleBitPattern.getter(v64, v63);
                if (v72)
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v72);
                else
                  isUniquelyReferenced_nonNull_native = 1;
                v74 = sub_10001A630(&qword_1008466D8);
                v75 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v245, v74);
                __CocoaSet.formIndex(after:isUnique:)(v76, isUniquelyReferenced_nonNull_native, *(_QWORD *)typea);
                v75(v245, 0);
                --v52;
              }
              while (v52);
LABEL_67:
              sub_1000E515C((uint64_t)v246, v247, v248);
              v77 = v249;
              swift_bridgeObjectRelease();
              goto LABEL_69;
            }
          }
          swift_bridgeObjectRelease();
          v77 = _swiftEmptyArrayStorage;
LABEL_69:
          v34 = v220;
          v25 = v223;
          sub_1006446F0((uint64_t)v77, v220);
          v27 = 0;
          goto LABEL_71;
        }
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        v206 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v206);
        __break(1u);
        return;
      }
      goto LABEL_12;
    }
  }
  v34 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v34)
    goto LABEL_15;
LABEL_22:
  if (v34 >= 1)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v35 = 0;
      do
      {
        v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v35++, v5);
        v13 = &v250;
        sub_1002DB2CC((Swift::Int *)v245, v36);

      }
      while (v34 != v35);
    }
    else
    {
      v37 = 0;
      do
      {
        v38 = *(void **)(v5 + 8 * v37++ + 32);
        v13 = &v250;
        sub_1002DB2CC((Swift::Int *)v245, v38);

      }
      while (v34 != v37);
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_71:
  v78 = v33;
  swift_bridgeObjectRelease();
  sub_1006484D0((uint64_t)v229, v34);
  if (v27)
  {
LABEL_72:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_2;
  }
  v80 = v79;
  swift_bridgeObjectRelease();
  v211 = (uint64_t *)(v34 + 48);
  swift_beginAccess(v34 + 48, v245, 0, 0);
  if (!v226[2])
    goto LABEL_180;
  v81 = 0;
  v208 = v25 + 24;
  v82 = &selRef_isConcealed;
  v225 = v78;
  v216 = v80;
  while (2)
  {
    v209 = v81;
    v83 = (id *)&v227[2 * v81];
    v84 = (int64_t *)v83[1];
    v85 = *v83;
    v219 = v84;
    v86 = objc_msgSend(v85, v82[432], swift_bridgeObjectRetain(v84).n128_f64[0]);
    v87 = sub_1005CCBAC(v86, (unint64_t *)&qword_100851CB0, off_1007D66B0);

    v88 = *v211;
    v215 = v85;
    if ((*v211 & 0xC000000000000001) != 0)
    {
      if (v88 < 0)
        v89 = *v211;
      else
        v89 = v88 & 0xFFFFFFFFFFFFFF8;
      v90 = v87;
      swift_bridgeObjectRetain(v88);
      v91 = __CocoaDictionary.lookup(_:)(v90, v89);
      if (v91)
      {
        v92 = v91;
        v249 = (_QWORD *)v91;
        v93 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v92);
        swift_dynamicCast(&v246, &v249, (char *)&type metadata for Swift.AnyObject + 8, v93, 7);
        v94 = v246;
        swift_unknownObjectRelease(v92);
        goto LABEL_84;
      }
LABEL_85:

      swift_bridgeObjectRelease();
LABEL_86:
      v94 = 0;
    }
    else
    {
      if (!*(_QWORD *)(v88 + 16))
        goto LABEL_86;
      v90 = v87;
      swift_bridgeObjectRetain(v88);
      v95 = sub_1002C66DC((uint64_t)v90);
      if ((v96 & 1) == 0)
        goto LABEL_85;
      v94 = *(id *)(*(_QWORD *)(v88 + 56) + 8 * v95);
LABEL_84:

      swift_bridgeObjectRelease();
    }

    if (!*(_QWORD *)(v80 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_166;
    }
    v97 = v87;
    v98 = sub_1002C672C(v97);
    if ((v99 & 1) != 0)
    {
      v218 = *(id *)(*(_QWORD *)(v80 + 56) + 8 * v98);

      v100 = v219;
      swift_bridgeObjectRetain_n(v219, 2);
      v101 = v97;
      swift_retain_n(v25);
      v102 = v101;
      v103 = Logger.logObject.getter(v102);
      v104 = static os_log_type_t.default.getter(v103);
      v217 = v102;
      if (os_log_type_enabled(v103, v104))
      {
        v221 = v104;
        typeb = v103;
        v105 = swift_slowAlloc(42, -1);
        v106 = (_QWORD *)swift_slowAlloc(8, -1);
        v230 = swift_slowAlloc(96, -1);
        v246 = (_QWORD *)v230;
        *(_DWORD *)v105 = 136446978;
        v249 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v246);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
        *(_WORD *)(v105 + 12) = 2082;
        sub_1000184A8(v208, (uint64_t)v253);
        sub_100671124((uint64_t)v253, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v108 = v107;
        v110 = v109;
        sub_100671124((uint64_t)v253, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v249 = (_QWORD *)sub_10001A820(v108, v110, (uint64_t *)&v246);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
        swift_release_n(v223);
        swift_bridgeObjectRelease();
        *(_WORD *)(v105 + 22) = 2114;
        v249 = v102;
        v111 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
        v213 = v106;
        *v106 = v102;

        *(_WORD *)(v105 + 32) = 2082;
        v112 = v219[2];
        if (v112)
        {
          v249 = _swiftEmptyArrayStorage;
          sub_1001C1B0C(0, v112, 0);
          v113 = v219;
          v114 = 0;
          v115 = v249;
          v116 = v249[2];
          v117 = 2 * v116;
          do
          {
            v118 = v116 + v114;
            if (*((_BYTE *)v113 + v114 + 32))
              v119 = 0x44497473696CLL;
            else
              v119 = 0x49746E756F636361;
            if (*((_BYTE *)v113 + v114 + 32))
              v120 = 0xE600000000000000;
            else
              v120 = 0xE900000000000044;
            v249 = v115;
            v121 = v115[3];
            v122 = v118 + 1;
            if (v118 >= v121 >> 1)
            {
              sub_1001C1B0C(v121 > 1, v118 + 1, 1);
              v113 = v219;
              v115 = v249;
            }
            ++v114;
            v115[2] = v122;
            v123 = &v115[v117];
            v123[4] = v119;
            v123[5] = v120;
            v117 += 2;
          }
          while (v112 != v114);
          v100 = v113;
          swift_bridgeObjectRelease();
          v78 = v225;
          v102 = v217;
        }
        else
        {
          swift_bridgeObjectRelease();
          v115 = _swiftEmptyArrayStorage;
        }
        v124 = Array.description.getter(v115, &type metadata for String);
        v126 = v125;
        swift_bridgeObjectRelease();
        v249 = (_QWORD *)sub_10001A820(v124, v126, (uint64_t *)&v246);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, typeb, v221, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v105, 0x2Au);
        v127 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v213, 1, v127);
        swift_slowDealloc(v213, -1, -1);
        swift_arrayDestroy(v230, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v230, -1, -1);
        swift_slowDealloc(v105, -1, -1);

        v25 = v223;
      }
      else
      {

        swift_release_n(v25);
        swift_bridgeObjectRelease_n(v219, 2);
      }
      v210 = v100[2];
      if (v210)
      {
        v128 = 0;
        v129 = v100 + 4;
        v207 = v100 + 4;
        while (1)
        {
          v130 = *((_BYTE *)v129 + v128);
          v131 = v254;
          v132 = sub_10001A630((uint64_t *)&unk_10083AD90);
          v133 = swift_allocObject(v132, 40, 7);
          *(_OWORD *)(v133 + 16) = xmmword_1006A7330;
          v212 = v130;
          v134 = (v130 & 1) != 0 ? *(void **)(v131 + 24) : *(void **)(v131 + 16);
          *(_QWORD *)(v133 + 32) = v134;
          v246 = (_QWORD *)v133;
          specialized Array._endMutation()(v133);
          v135 = (uint64_t)v246;
          v136 = v134;
          if ((unint64_t)v135 >> 62)
          {
            if (v135 < 0)
              v167 = v135;
            else
              v167 = v135 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v135);
            v137 = _CocoaArrayWrapper.endIndex.getter(v167);
            swift_bridgeObjectRelease();
            v214 = v128;
            if (v137)
            {
LABEL_112:
              v231 = v135 & 0xC000000000000001;
              v138 = 4;
              v139 = (Swift::Int)_swiftEmptyDictionarySingleton;
              v222 = v135;
              while (1)
              {
                if (v231)
                  v141 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v138 - 4, v135);
                else
                  v141 = *(id *)(v135 + 8 * v138);
                v142 = v141;
                if (__OFADD__(v138 - 4, 1))
                  goto LABEL_176;
                sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                v143 = v142;
                v144 = v143;
                if (!v78[2])
                  break;
                *(_QWORD *)typec = v138 - 3;
                v145 = v137;
                v146 = v143;
                v147 = sub_1002C672C(v146);
                if ((v148 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  goto LABEL_158;
                }
                v149 = *(id *)(v78[7] + 8 * v147);

                if ((v139 & 0xC000000000000001) != 0)
                {
                  if (v139 < 0)
                    v150 = v139;
                  else
                    v150 = v139 & 0xFFFFFFFFFFFFFF8;
                  v151 = v149;
                  v152 = __CocoaDictionary.count.getter(v150);
                  if (__OFADD__(v152, 1))
                    goto LABEL_178;
                  v139 = sub_100192078(v150, v152 + 1);
                }
                else
                {
                  v153 = v149;
                }
                v154 = swift_isUniquelyReferenced_nonNull_native(v139);
                v246 = (_QWORD *)v139;
                v156 = sub_1002C66DC((uint64_t)v146);
                v157 = *(_QWORD *)(v139 + 16);
                v158 = (v155 & 1) == 0;
                v159 = v157 + v158;
                if (__OFADD__(v157, v158))
                  goto LABEL_177;
                v160 = v155;
                if (*(_QWORD *)(v139 + 24) >= v159)
                {
                  if ((v154 & 1) == 0)
                    sub_1002D73A0();
                }
                else
                {
                  sub_1002CF2DC(v159, v154);
                  v161 = sub_1002C66DC((uint64_t)v146);
                  if ((v160 & 1) != (v162 & 1))
                    goto LABEL_183;
                  v156 = v161;
                }
                v25 = v223;
                v139 = (Swift::Int)v246;
                if ((v160 & 1) != 0)
                {
                  v140 = v246[7];

                  *(_QWORD *)(v140 + 8 * v156) = v149;
                }
                else
                {
                  v246[(v156 >> 6) + 8] |= 1 << v156;
                  *(_QWORD *)(*(_QWORD *)(v139 + 48) + 8 * v156) = v146;
                  *(_QWORD *)(*(_QWORD *)(v139 + 56) + 8 * v156) = v149;
                  v163 = *(_QWORD *)(v139 + 16);
                  v164 = __OFADD__(v163, 1);
                  v165 = v163 + 1;
                  if (v164)
                    goto LABEL_179;
                  *(_QWORD *)(v139 + 16) = v165;
                  v166 = v146;
                }
                v78 = v225;
                v135 = v222;

                swift_bridgeObjectRelease();
                ++v138;
                v137 = v145;
                if (*(_QWORD *)typec == v145)
                  goto LABEL_142;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_158:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_retain_n(v25);
              v173 = v144;
              v174 = Logger.logObject.getter(v173);
              v175 = static os_log_type_t.error.getter(v174);
              if (os_log_type_enabled(v174, v175))
              {
                v176 = swift_slowAlloc(42, -1);
                v240 = swift_slowAlloc(128, -1);
                v246 = (_QWORD *)v240;
                *(_DWORD *)v176 = 136446978;
                v249 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v246);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
                *(_WORD *)(v176 + 12) = 2082;
                sub_1000184A8(v208, (uint64_t)v252);
                sub_100671124((uint64_t)v252, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
                sub_1000181B8();
                v178 = v177;
                v180 = v179;
                sub_100671124((uint64_t)v252, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
                v249 = (_QWORD *)sub_10001A820(v178, v180, (uint64_t *)&v246);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
                swift_release_n(v25);
                *(_QWORD *)&v181 = swift_bridgeObjectRelease().n128_u64[0];
                *(_WORD *)(v176 + 22) = 2080;
                v182 = objc_msgSend(v173, "description", v181);
                v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
                v185 = v184;

                v249 = (_QWORD *)sub_10001A820(v183, v185, (uint64_t *)&v246);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);

                *(_QWORD *)&v186 = swift_bridgeObjectRelease().n128_u64[0];
                *(_WORD *)(v176 + 32) = 2080;
                v187 = objc_msgSend(v173, "description", v186);
                v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v187);
                v190 = v189;

                v249 = (_QWORD *)sub_10001A820(v188, v190, (uint64_t *)&v246);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v174, v175, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v176, 0x2Au);
                swift_arrayDestroy(v240, 4, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v240, -1, -1);
                swift_slowDealloc(v176, -1, -1);

              }
              else
              {

                swift_release_n(v25);
              }
              v237 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v173);
              swift_willThrow(v237);

              return;
            }
          }
          else
          {
            v137 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFF8) + 0x10);
            v214 = v128;
            if (v137)
              goto LABEL_112;
          }
          v139 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_142:
          v128 = v214 + 1;
          swift_bridgeObjectRelease();
          v168 = sub_1003B101C(v139);
          swift_bridgeObjectRelease();
          if ((v212 & 1) != 0)
          {
            sub_1003FFE94(1, *(void **)(v254 + 24), v168);
            v80 = v216;
            v102 = v217;
            v170 = v169;
            objc_msgSend(v218, "setOwner:", v169);
          }
          else
          {
            sub_1003FFE68(0, *(void **)(v254 + 16), v168);
            v80 = v216;
            v102 = v217;
            v170 = v171;
            objc_msgSend(v218, "setAccount:", v171);
          }
          swift_bridgeObjectRelease();

          if (v128 == v210)
            break;
          v129 = v207;
          if (v128 >= v219[2])
            goto LABEL_181;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v80 = v216;
      }
      if ((*(_BYTE *)(v25 + 104) & 1) != 0)
      {
        v172 = v218;
        objc_msgSend(v172, "updateChangeCount");

      }
      else
      {

      }
      v81 = v209 + 1;
      if (v209 + 1 == v228)
        goto LABEL_72;
      v82 = &selRef_isConcealed;
      if (v81 >= v226[2])
        goto LABEL_180;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_166:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v191 = v87;
  swift_retain_n(v25);
  v192 = v191;
  v193 = Logger.logObject.getter(v192);
  v194 = static os_log_type_t.error.getter(v193);
  if (os_log_type_enabled(v193, v194))
  {
    v195 = swift_slowAlloc(32, -1);
    v241 = swift_slowAlloc(96, -1);
    v246 = (_QWORD *)v241;
    *(_DWORD *)v195 = 136446722;
    v249 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
    *(_WORD *)(v195 + 12) = 2082;
    sub_1000184A8(v208, (uint64_t)v251);
    sub_100671124((uint64_t)v251, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v197 = v196;
    v199 = v198;
    sub_100671124((uint64_t)v251, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v249 = (_QWORD *)sub_10001A820(v197, v199, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
    swift_release_n(v25);
    *(_QWORD *)&v200 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v195 + 22) = 2080;
    v201 = objc_msgSend(v192, "description", v200);
    v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
    v204 = v203;

    v249 = (_QWORD *)sub_10001A820(v202, v204, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v193, v194, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v195, 0x20u);
    swift_arrayDestroy(v241, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v241, -1, -1);
    swift_slowDealloc(v195, -1, -1);

  }
  else
  {

    swift_release_n(v25);
  }
  v238 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v192);
  swift_willThrow(v238);

}

void sub_100627540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t inited;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  char **v81;
  id *v82;
  int64_t *v83;
  id v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  unint64_t v95;
  int64_t *v96;
  char v97;
  id v98;
  unint64_t v99;
  char v100;
  id v101;
  id v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  id v111;
  int64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  NSObject *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  unint64_t v130;
  id v131;
  id v132;
  void *v133;
  id v134;
  void *v135;
  id v136;
  unint64_t v137;
  char v138;
  id v139;
  id v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  unint64_t v147;
  uint64_t v148;
  _BOOL8 v149;
  uint64_t v150;
  char v151;
  unint64_t v152;
  char v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  void *v162;
  void *v163;
  id v164;
  NSObject *v165;
  os_log_type_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  double v172;
  id v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  double v177;
  id v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  id v182;
  id v183;
  NSObject *v184;
  uint64_t v185;
  os_log_type_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  double v192;
  id v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  NSObject *v199;
  _QWORD *v200;
  os_log_type_t v201;
  uint64_t *v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  id v216;
  id v217;
  uint64_t v218;
  unint64_t v219;
  int64_t *v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  id v226;
  id v227;
  os_log_type_t type;
  uint64_t typea;
  uint64_t typeb;
  char v231[16];
  uint64_t *v232;
  uint64_t v233;
  char v234[40];
  uint64_t v235[4];
  uint64_t v236;
  uint64_t v237;
  unsigned __int8 v238;
  _QWORD *v239;
  _BYTE v240[40];
  uint64_t v241;
  _BYTE v242[48];
  _BYTE v243[48];
  _BYTE v244[56];
  uint64_t v245;

  v5 = v3;
  v245 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v232 = &v245;
  v233 = v5;
  swift_bridgeObjectRetain(v9);
  v10 = sub_100351FAC((void (*)(__n128 *__return_ptr, id *))sub_100673688, (uint64_t)&v231, a1);
  if (v4)
    goto LABEL_2;
  v11 = v10;
  v211 = a3;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v214 = v5;
  v218 = a1;
  if (os_log_type_enabled(v14, v15))
  {
    type = v15;
    v16 = swift_slowAlloc(42, -1);
    v224 = swift_slowAlloc(96, -1);
    v235[0] = v224;
    *(_DWORD *)v16 = 136446978;
    v222 = v8;
    v236 = sub_10001A820(0xD000000000000016, 0x8000000100709B30, v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237);
    *(_WORD *)(v16 + 12) = 2048;
    v236 = v11[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v17 = type metadata accessor for REMCDDueDateDeltaAlert();
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v236 = sub_10001A820(v19, v21, v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 2082;
    swift_bridgeObjectRetain(v9);
    v236 = sub_10001A820(v222, v9, v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, type, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy(v224, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v224, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease();
  }
  v225 = v11[2];
  if (!v225)
    goto LABEL_2;
  v241 = (uint64_t)&_swiftEmptySetSingleton;
  v223 = v11 + 4;
  swift_bridgeObjectRetain(v11);
  v22 = 0;
  v221 = v11;
  do
  {
    if (v22 >= v11[2])
    {
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_108:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    }
    v23 = (id *)&v223[2 * v22];
    v24 = v23[1];
    v25 = v24[2];
    if (v25)
    {
      v26 = v245;
      v27 = *v23;
      swift_bridgeObjectRetain(v24);
      do
      {
        v28 = sub_10001A630((uint64_t *)&unk_10083AD90);
        inited = swift_initStackObject(v28, v240);
        *(_OWORD *)(inited + 16) = xmmword_1006A7330;
        v30 = *(void **)(v26 + 16);
        *(_QWORD *)(inited + 32) = v30;
        v235[0] = inited;
        specialized Array._endMutation()(inited);
        sub_1002DB2CC(v235, v30);
        v31 = (void *)v235[0];
        swift_bridgeObjectRelease();

        --v25;
      }
      while (v25);

      swift_bridgeObjectRelease();
      v11 = v221;
    }
    ++v22;
  }
  while (v22 != v225);
  swift_bridgeObjectRelease();
  if ((unint64_t)v218 >> 62)
  {
    if (v218 < 0)
      v197 = v218;
    else
      v197 = v218 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v218);
    v32 = _CocoaArrayWrapper.endIndex.getter(v197);
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = *(_QWORD *)((v218 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v32)
  {
    v41 = _swiftEmptyArrayStorage;
LABEL_29:
    v42 = v241;
    v219 = v241 & 0xC000000000000001;
    if ((v241 & 0xC000000000000001) != 0)
    {
      if (v241 < 0)
        v43 = v241;
      else
        v43 = v241 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v241);
      v44 = __CocoaSet.count.getter(v43);
      if (v44)
      {
        v45 = v44;
        v239 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v44);
        v236 = __CocoaSet.startIndex.getter(v43);
        v237 = v46;
        v238 = 1;
        if (v45 < 0)
        {
          __break(1u);

          swift_release(v235[0]);
          swift_bridgeObjectRelease();
          goto LABEL_2;
        }
        goto LABEL_38;
      }
    }
    else
    {
      v45 = *(_QWORD *)(v241 + 16);
      swift_bridgeObjectRetain(v241);
      if (v45)
      {
        v239 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v45);
        v236 = sub_100364E8C(v42);
        v237 = v47;
        v238 = v48 & 1;
LABEL_38:
        v49 = v42 & 0xFFFFFFFFFFFFFF8;
        if (v42 < 0)
          v49 = v42;
        v216 = (id)v49;
        do
        {
          while (1)
          {
            v55 = v236;
            v56 = v237;
            v57 = v238;
            sub_100364660(v236, v237, v238, v42);
            v59 = v58;
            sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
            v60 = v59;

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v61);
            v62 = v239[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v62);
            v63 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v60);
            specialized ContiguousArray._endMutation()(v63);
            if (v219)
              break;
            v50 = sub_10036456C(v55, v56, v57, v42);
            v52 = v51;
            v54 = v53;
            sub_1000E515C(v55, v56, v57);
            v236 = v50;
            v237 = v52;
            v238 = v54 & 1;
            if (!--v45)
              goto LABEL_48;
          }
          if ((v57 & 1) == 0)
            goto LABEL_132;
          v64 = __CocoaSet.Index.handleBitPattern.getter(v55, v56);
          if (v64)
          {
            swift_isUniquelyReferenced_nonNull_native(v64);
            v66 = v65;
          }
          else
          {
            v66 = 1;
          }
          v67 = sub_10001A630(&qword_1008466D8);
          v68 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v235, v67);
          __CocoaSet.formIndex(after:isUnique:)(v69, v66, v216);
          v68(v235, 0);
          --v45;
        }
        while (v45);
LABEL_48:
        v70 = (uint64_t)v41;
        sub_1000E515C(v236, v237, v238);
        v71 = v239;
        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
    }
    v70 = (uint64_t)v41;
    swift_bridgeObjectRelease();
    v71 = _swiftEmptyArrayStorage;
LABEL_50:
    sub_1006446F0((uint64_t)v71, v211);
    v72 = v221;
    v74 = v73;
    swift_bridgeObjectRelease();
    sub_1006488F0(v70, v211);
    v76 = v75;
    v77 = v214;
    swift_bridgeObjectRelease();
    v78 = (uint64_t *)(v211 + 48);
    v203 = v214 + 24;
    swift_beginAccess(v211 + 48, v235, 0, 0);
    v79 = 0;
    v80 = (_QWORD *)((unint64_t)_swiftEmptyDictionarySingleton & 0xFFFFFFFFFFFFFF8);
    if ((uint64_t)_swiftEmptyDictionarySingleton < 0)
      v80 = _swiftEmptyDictionarySingleton;
    v208 = (uint64_t)v80;
    v81 = &selRef_isConcealed;
    v207 = v76;
    v202 = (uint64_t *)(v211 + 48);
    while (1)
    {
      if (v79 >= v72[2])
        goto LABEL_131;
      v204 = v79;
      v82 = (id *)&v223[2 * v79];
      v83 = (int64_t *)v82[1];
      v84 = *v82;
      v220 = v83;
      v85 = objc_msgSend(v84, v81[432], swift_bridgeObjectRetain(v83).n128_f64[0]);
      v86 = sub_1005CDB68(v85, (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert, 0xD000000000000016, (void *)0x8000000100709CF0);

      v87 = *v78;
      v210 = v84;
      if ((v87 & 0xC000000000000001) != 0)
        break;
      if (!*(_QWORD *)(v87 + 16))
      {
        v93 = 0;
LABEL_66:
        v96 = v220;
        goto LABEL_67;
      }
      v94 = v86;
      swift_bridgeObjectRetain(v87);
      v95 = sub_1002C66DC((uint64_t)v94);
      v96 = v83;
      if ((v97 & 1) != 0)
      {
        v93 = *(id *)(*(_QWORD *)(v87 + 56) + 8 * v95);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v93 = 0;
      }
      v77 = v214;
LABEL_67:

      if (!*(_QWORD *)(v76 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_118:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v182 = v86;
        swift_retain_n(v77);
        v183 = v182;
        v184 = Logger.logObject.getter(v183);
        v185 = v77;
        v186 = static os_log_type_t.error.getter(v184);
        if (os_log_type_enabled(v184, v186))
        {
          v187 = swift_slowAlloc(32, -1);
          typeb = swift_slowAlloc(96, -1);
          v236 = typeb;
          *(_DWORD *)v187 = 136446722;
          v239 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, &v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);
          *(_WORD *)(v187 + 12) = 2082;
          sub_1000184A8(v203, (uint64_t)v242);
          sub_100671124((uint64_t)v242, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v189 = v188;
          v191 = v190;
          sub_100671124((uint64_t)v242, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          v239 = (_QWORD *)sub_10001A820(v189, v191, &v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);
          swift_release_n(v185);
          *(_QWORD *)&v192 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v187 + 22) = 2080;
          v193 = objc_msgSend(v183, "description", v192);
          v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
          v196 = v195;

          v239 = (_QWORD *)sub_10001A820(v194, v196, &v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v184, v186, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v187, 0x20u);
          swift_arrayDestroy(typeb, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(typeb, -1, -1);
          swift_slowDealloc(v187, -1, -1);

        }
        else
        {

          swift_release_n(v185);
        }
        v227 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v183);
        swift_willThrow(v227);

        return;
      }
      v98 = v86;
      v99 = sub_1002C672C(v98);
      if ((v100 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v77 = v214;
        goto LABEL_118;
      }
      v217 = *(id *)(*(_QWORD *)(v76 + 56) + 8 * v99);

      swift_bridgeObjectRetain_n(v96, 2);
      v101 = v98;
      v77 = v214;
      swift_retain_n(v214);
      v102 = v101;
      v103 = Logger.logObject.getter(v102);
      v104 = static os_log_type_t.default.getter(v103);
      v206 = v102;
      if (os_log_type_enabled(v103, v104))
      {
        v199 = v103;
        v201 = v104;
        v105 = swift_slowAlloc(42, -1);
        v106 = (_QWORD *)swift_slowAlloc(8, -1);
        v212 = swift_slowAlloc(96, -1);
        v236 = v212;
        *(_DWORD *)v105 = 136446978;
        v239 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, &v236);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);
        *(_WORD *)(v105 + 12) = 2082;
        sub_1000184A8(v203, (uint64_t)v244);
        sub_100671124((uint64_t)v244, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v108 = v107;
        v110 = v109;
        sub_100671124((uint64_t)v244, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v239 = (_QWORD *)sub_10001A820(v108, v110, &v236);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);
        swift_release_n(v214);
        swift_bridgeObjectRelease();
        *(_WORD *)(v105 + 22) = 2114;
        v239 = v102;
        v111 = v102;
        v96 = v220;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);
        v200 = v106;
        *v106 = v102;

        *(_WORD *)(v105 + 32) = 2082;
        v112 = v220[2];
        if (v112)
        {
          v239 = _swiftEmptyArrayStorage;
          sub_1001C1B0C(0, v112, 0);
          v113 = v239;
          v114 = v239[2];
          v115 = 2 * v114;
          v116 = v199;
          do
          {
            v239 = v113;
            v117 = v113[3];
            v118 = v114 + 1;
            if (v114 >= v117 >> 1)
            {
              sub_1001C1B0C(v117 > 1, v114 + 1, 1);
              v113 = v239;
            }
            v113[2] = v118;
            v119 = &v113[v115];
            v119[4] = 0x49746E756F636361;
            v119[5] = 0xE900000000000044;
            v115 += 2;
            v114 = v118;
            --v112;
          }
          while (v112);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v113 = _swiftEmptyArrayStorage;
          v116 = v199;
        }
        v120 = Array.description.getter(v113, &type metadata for String);
        v122 = v121;
        swift_bridgeObjectRelease();
        v239 = (_QWORD *)sub_10001A820(v120, v122, &v236);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v116, v201, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v105, 0x2Au);
        v123 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v200, 1, v123);
        swift_slowDealloc(v200, -1, -1);
        swift_arrayDestroy(v212, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v212, -1, -1);
        swift_slowDealloc(v105, -1, -1);

        v77 = v214;
        v84 = v210;
        v76 = v207;
      }
      else
      {

        swift_release_n(v214);
        swift_bridgeObjectRelease_n(v96, 2);
      }
      v72 = v221;
      v213 = v96[2];
      if (v213)
      {
        v124 = 0;
        while (1)
        {
          if (v124 >= v96[2])
            goto LABEL_127;
          v125 = v245;
          v126 = sub_10001A630((uint64_t *)&unk_10083AD90);
          v127 = swift_initStackObject(v126, &v234);
          *(_OWORD *)(v127 + 16) = xmmword_1006A7330;
          v128 = *(void **)(v125 + 16);
          *(_QWORD *)(v127 + 32) = v128;
          v236 = v127;
          specialized Array._endMutation()(v127);
          v129 = v236;
          v130 = v236 & 0xC000000000000001;
          v131 = v128;
          v132 = v130
               ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v129)
               : *(id *)(v129 + 32);
          v133 = v132;
          sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
          v134 = v133;
          v135 = v134;
          if (!*(_QWORD *)(v74 + 16))
            break;
          v136 = v134;
          v137 = sub_1002C672C(v136);
          if ((v138 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_111;
          }
          v139 = *(id *)(*(_QWORD *)(v74 + 56) + 8 * v137);

          v140 = v139;
          v141 = _swiftEmptyDictionarySingleton;
          if (((unint64_t)_swiftEmptyDictionarySingleton & 0xC000000000000001) != 0)
          {
            v142 = __CocoaDictionary.count.getter(v208);
            if (__OFADD__(v142, 1))
              goto LABEL_129;
            v141 = (_QWORD *)sub_100192078(v208, v142 + 1);
          }
          v143 = v74;
          swift_isUniquelyReferenced_nonNull_native(v141);
          v145 = v144;
          v236 = (uint64_t)v141;
          v147 = sub_1002C66DC((uint64_t)v136);
          v148 = v141[2];
          v149 = (v146 & 1) == 0;
          v150 = v148 + v149;
          if (__OFADD__(v148, v149))
            goto LABEL_128;
          v151 = v146;
          if (v141[3] >= v150)
          {
            if ((v145 & 1) == 0)
              sub_1002D73A0();
          }
          else
          {
            sub_1002CF2DC(v150, v145);
            v152 = sub_1002C66DC((uint64_t)v136);
            if ((v151 & 1) != (v153 & 1))
              goto LABEL_133;
            v147 = v152;
          }
          v74 = v143;
          v154 = (_QWORD *)v236;
          if ((v151 & 1) != 0)
          {
            v155 = *(_QWORD *)(v236 + 56);

            *(_QWORD *)(v155 + 8 * v147) = v140;
          }
          else
          {
            *(_QWORD *)(v236 + 8 * (v147 >> 6) + 64) |= 1 << v147;
            v156 = 8 * v147;
            *(_QWORD *)(v154[6] + v156) = v136;
            *(_QWORD *)(v154[7] + v156) = v140;
            v157 = v154[2];
            v158 = __OFADD__(v157, 1);
            v159 = v157 + 1;
            if (v158)
              goto LABEL_130;
            v154[2] = v159;
            v160 = v136;
          }
          v96 = v220;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v161 = sub_1003B101C((uint64_t)v154);
          swift_bridgeObjectRelease();
          sub_1003FF6B0(*(void **)(v245 + 16), v161);
          v163 = v162;
          ++v124;
          objc_msgSend(v217, "setAccount:", v162);
          swift_bridgeObjectRelease();

          v72 = v221;
          if (v213 == v124)
          {

            swift_bridgeObjectRelease();
            v77 = v214;
            v76 = v207;
            goto LABEL_105;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_111:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_retain_n(v214);
        v164 = v135;
        v165 = Logger.logObject.getter(v164);
        v166 = static os_log_type_t.error.getter(v165);
        if (os_log_type_enabled(v165, v166))
        {
          v167 = swift_slowAlloc(42, -1);
          typea = swift_slowAlloc(128, -1);
          v236 = typea;
          *(_DWORD *)v167 = 136446978;
          v239 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, &v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);
          *(_WORD *)(v167 + 12) = 2082;
          sub_1000184A8(v203, (uint64_t)v243);
          sub_100671124((uint64_t)v243, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v169 = v168;
          v171 = v170;
          sub_100671124((uint64_t)v243, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          v239 = (_QWORD *)sub_10001A820(v169, v171, &v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);
          swift_release_n(v214);
          *(_QWORD *)&v172 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v167 + 22) = 2080;
          v173 = objc_msgSend(v164, "description", v172);
          v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(v173);
          v176 = v175;

          v239 = (_QWORD *)sub_10001A820(v174, v176, &v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);

          *(_QWORD *)&v177 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v167 + 32) = 2080;
          v178 = objc_msgSend(v164, "description", v177);
          v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
          v181 = v180;

          v239 = (_QWORD *)sub_10001A820(v179, v181, &v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v240);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v165, v166, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v167, 0x2Au);
          swift_arrayDestroy(typea, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(typea, -1, -1);
          swift_slowDealloc(v167, -1, -1);

        }
        else
        {

          swift_release_n(v214);
        }
        v226 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v164);
        swift_willThrow(v226);

        return;
      }

      swift_bridgeObjectRelease();
LABEL_105:
      v79 = v204 + 1;

      v78 = v202;
      v81 = &selRef_isConcealed;
      if (v204 + 1 == v225)
      {
        swift_bridgeObjectRelease();
        goto LABEL_108;
      }
    }
    if (v87 < 0)
      v88 = v87;
    else
      v88 = v87 & 0xFFFFFFFFFFFFFF8;
    v89 = v86;
    swift_bridgeObjectRetain(v87);
    v90 = __CocoaDictionary.lookup(_:)(v89, v88);
    if (v90)
    {
      v91 = v90;
      v239 = (_QWORD *)v90;
      v92 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
      swift_unknownObjectRetain(v91);
      swift_dynamicCast(&v236, &v239, (char *)&type metadata for Swift.AnyObject + 8, v92, 7);
      v93 = (id)v236;
      swift_unknownObjectRelease(v91);

      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
      v93 = 0;
    }
    v77 = v214;
    v76 = v207;
    goto LABEL_66;
  }
  v235[0] = (uint64_t)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v32);
  if (v32 < 0)
  {
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    v198 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v198);
    __break(1u);
  }
  else
  {
    v33 = 0;
    v34 = (void *)(v218 & 0xC000000000000001);
    while (v32 != v33)
    {
      if (v34)
        v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v218);
      else
        v35 = *(id *)(v218 + 8 * v33 + 32);
      v36 = v35;
      v37 = sub_1005CDB68(objc_msgSend(v36, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert, 0xD000000000000016, (void *)0x8000000100709CF0);
      ++v33;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
      v39 = *(_QWORD *)(v235[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v39);
      v40 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v37);
      specialized ContiguousArray._endMutation()(v40);
      if (v32 == v33)
      {
        v41 = (_QWORD *)v235[0];
        goto LABEL_29;
      }
    }
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_2:
    swift_bridgeObjectRelease();
  }
}

void sub_100628D98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, __n128), uint64_t (*a6)(_QWORD, __n128), uint64_t a7, void *a8, uint64_t (*a9)(_QWORD, _QWORD, __n128), uint64_t (*a10)(void), uint64_t (*a11)(_QWORD, __n128), void (*a12)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))
{
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v18;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id *v41;
  uint64_t (*v42)(_QWORD);
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v98;
  void (*v99)(_QWORD, _QWORD);
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char **v107;
  id *v108;
  int64_t *v109;
  id v110;
  id v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  id v120;
  unint64_t v121;
  char v122;
  id v123;
  uint64_t v124;
  char v125;
  int64_t *v126;
  id v127;
  id v128;
  NSObject *v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  id v136;
  int64_t v137;
  int64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  __n128 v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int64_t *v154;
  unint64_t v155;
  int64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  Swift::Int v161;
  uint64_t v162;
  id v163;
  void *v164;
  uint64_t v165;
  id v166;
  void *v167;
  id v168;
  unint64_t v169;
  char v170;
  id v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  char v177;
  unint64_t v178;
  uint64_t v179;
  _BOOL8 v180;
  uint64_t v181;
  char v182;
  unint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  BOOL v187;
  uint64_t v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  __n128 v192;
  id v193;
  id v194;
  NSObject *v195;
  os_log_type_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  double v202;
  id v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  double v207;
  id v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  id v212;
  id v213;
  NSObject *v214;
  os_log_type_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  double v221;
  id v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int64_t *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  unint64_t v233;
  os_log_type_t v234;
  unsigned int v235;
  void *v236;
  uint64_t v237;
  id v238;
  void *v239;
  int64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _BYTE *v244;
  uint64_t v245;
  uint64_t log;
  NSObject *loga;
  os_log_t logb;
  uint64_t (*v249)(_QWORD);
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  void *v254;
  _QWORD *v255;
  uint64_t v256;
  id v257;
  id v258;
  os_log_type_t typec;
  uint64_t type;
  _QWORD *typea;
  unint64_t typeb;
  uint64_t typed;
  uint64_t typee;
  char v265[16];
  uint64_t *v266;
  _BYTE *v267;
  id v268[4];
  void *v269;
  uint64_t v270;
  unsigned __int8 v271;
  _QWORD *v272;
  uint64_t v273;
  _BYTE v274[48];
  _BYTE v275[48];
  _BYTE v276[56];
  uint64_t v277;

  v18 = v12;
  v277 = a2;
  v22 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(a3 + 24);
  v266 = &v277;
  v267 = v18;
  v23 = swift_bridgeObjectRetain(v21);
  v24 = a5(a4, &v265, a1, v23);
  if (v13)
    goto LABEL_2;
  v25 = (_QWORD *)v24;
  v26 = v22;
  log = (uint64_t)a1;
  v249 = (uint64_t (*)(_QWORD))a6;
  v241 = a3;
  v245 = a7;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v27 = type metadata accessor for Logger(0);
  sub_10001AAA8(v27, (uint64_t)qword_100845DC0);
  v28 = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v25);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.info.getter(v30);
  v244 = v18;
  v251 = v25;
  if (os_log_type_enabled(v30, v31))
  {
    typec = v31;
    v32 = swift_slowAlloc(42, -1);
    v254 = (void *)swift_slowAlloc(96, -1);
    v268[0] = v254;
    *(_DWORD *)v32 = 136446978;
    v269 = (void *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v268);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, &v270);
    *(_WORD *)(v32 + 12) = 2048;
    v269 = (void *)v25[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, &v270);
    v33 = swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2082;
    v34 = a6(0, v33);
    v35 = objc_msgSend((id)swift_getObjCClassFromMetadata(v34), "description");
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v37 = v28;
    v39 = v38;

    v269 = (void *)sub_10001A820(v36, v39, (uint64_t *)v268);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, &v270);
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 32) = 2082;
    swift_bridgeObjectRetain(v37);
    v269 = (void *)sub_10001A820(v26, v37, (uint64_t *)v268);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, &v270);
    swift_bridgeObjectRelease_n(v37, 3);
    _os_log_impl((void *)&_mh_execute_header, v30, typec, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v32, 0x2Au);
    swift_arrayDestroy(v254, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v254, -1, -1);
    v25 = v251;
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease();
  }
  v253 = (_QWORD *)v25[2];
  if (!v253)
    goto LABEL_2;
  v273 = (uint64_t)&_swiftEmptySetSingleton;
  v252 = v25 + 4;
  swift_bridgeObjectRetain(v25);
  v40 = 0;
  while (1)
  {
    if (v40 >= v25[2])
    {
      __break(1u);
LABEL_163:
      __break(1u);
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_2;
    }
    v41 = (id *)&v252[2 * v40];
    v42 = (uint64_t (*)(_QWORD))v41[1];
    v43 = *((_QWORD *)v42 + 2);
    if (v43)
      break;
LABEL_11:
    if ((_QWORD *)++v40 == v253)
    {
      swift_bridgeObjectRelease();
      v25 = (_QWORD *)log;
      if ((unint64_t)log >> 62)
      {
        if (log < 0)
          v226 = log;
        else
          v226 = log & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(log);
        v64 = _CocoaArrayWrapper.endIndex.getter(v226);
        swift_bridgeObjectRelease();
      }
      else
      {
        v64 = *(_QWORD *)((log & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v65 = _swiftEmptyArrayStorage;
      if (!v64)
        goto LABEL_49;
      v268[0] = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v64);
      if ((v64 & 0x8000000000000000) == 0)
      {
        v66 = 0;
        do
        {
          if (v64 == v66)
            goto LABEL_163;
          if ((log & 0xC000000000000001) != 0)
            v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v66, v25);
          else
            v67 = (id)v25[v66 + 4];
          v68 = v67;
          v69 = sub_1005CDB68(objc_msgSend(v68, "remObjectID"), v249, v245, a8);
          ++v66;

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v70);
          v71 = *((_QWORD *)v268[0] + 2);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v71);
          v72 = v71;
          v25 = (_QWORD *)log;
          v73 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v69);
          specialized ContiguousArray._endMutation()(v73);
        }
        while (v64 != v66);
        v65 = v268[0];
LABEL_49:
        v255 = v65;
        v74 = v273;
        if ((v273 & 0xC000000000000001) != 0)
        {
          if (v273 < 0)
            v75 = v273;
          else
            v75 = v273 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v273);
          v76 = __CocoaSet.count.getter(v75);
          if (v76)
          {
            v77 = v76;
            v272 = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)(v76);
            v269 = (void *)__CocoaSet.startIndex.getter(v75);
            v270 = v78;
            v271 = 1;
            if (v77 < 0)
            {
              __break(1u);
              goto LABEL_2;
            }
            goto LABEL_60;
          }
        }
        else
        {
          v77 = *(_QWORD *)(v273 + 16);
          swift_bridgeObjectRetain(v273);
          if (v77)
          {
            v272 = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)(v77);
            v269 = (void *)sub_100364E8C(v74);
            v270 = v79;
            v271 = v80 & 1;
LABEL_60:
            v81 = v74 & 0xFFFFFFFFFFFFFF8;
            if (v74 < 0)
              v81 = v74;
            type = v81;
            do
            {
              while (1)
              {
                v88 = (uint64_t)v269;
                v87 = v270;
                v89 = v271;
                sub_100364660((uint64_t)v269, v270, v271, v74);
                v91 = v90;
                sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                v92 = v91;

                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v93);
                v94 = v272[2];
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v94);
                v95 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v94, v92);
                specialized ContiguousArray._endMutation()(v95);
                if ((v74 & 0xC000000000000001) != 0)
                  break;
                v82 = sub_10036456C(v88, v87, v89, v74);
                v84 = v83;
                v86 = v85;
                sub_1000E515C(v88, v87, v89);
                v269 = (void *)v82;
                v270 = v84;
                v271 = v86 & 1;
                if (!--v77)
                  goto LABEL_70;
              }
              if ((v89 & 1) == 0)
                goto LABEL_182;
              v96 = __CocoaSet.Index.handleBitPattern.getter(v88, v87);
              if (v96)
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v96);
              else
                isUniquelyReferenced_nonNull_native = 1;
              v98 = sub_10001A630(&qword_1008466D8);
              v99 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v268, v98);
              __CocoaSet.formIndex(after:isUnique:)(v100, isUniquelyReferenced_nonNull_native, type);
              v99(v268, 0);
              --v77;
            }
            while (v77);
LABEL_70:
            sub_1000E515C((uint64_t)v269, v270, v271);
            v101 = v272;
            swift_bridgeObjectRelease();
            goto LABEL_72;
          }
        }
        swift_bridgeObjectRelease();
        v101 = _swiftEmptyArrayStorage;
LABEL_72:
        v46 = v241;
        v44 = v244;
        sub_1006446F0((uint64_t)v101, v241);
        v43 = 0;
        v42 = v249;
        goto LABEL_74;
      }
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      v227 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v227);
      __break(1u);
      return;
    }
  }
  v255 = (_QWORD *)v40;
  v44 = *v41;
  v45 = swift_bridgeObjectRetain(v42).n128_u64[0];
  v46 = 0;
  while (1)
  {
    if (v46 >= *((_QWORD *)v42 + 2))
    {
      __break(1u);

      swift_release(v268[0]);
      goto LABEL_76;
    }
    if ((*((_BYTE *)v42 + v46 + 32) & 1) != 0)
      break;
    v57 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v58 = swift_allocObject(v57, 40, 7);
    *(_OWORD *)(v58 + 16) = xmmword_1006A7330;
    v59 = objc_msgSend(v44, "accountID");
    *(_QWORD *)(v58 + 32) = v59;
    v268[0] = (id)v58;
    v30 = v268;
    v54 = specialized Array._endMutation()(v59);
    v49 = (uint64_t)v268[0];
    if ((unint64_t)v268[0] >> 62)
      goto LABEL_23;
LABEL_29:
    v56 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v56)
      goto LABEL_30;
LABEL_15:
    v45 = swift_bridgeObjectRelease().n128_u64[0];
    if (++v46 == v43)
    {

      swift_bridgeObjectRelease();
      v25 = v251;
      v40 = (unint64_t)v255;
      goto LABEL_11;
    }
  }
  v47 = objc_msgSend(v44, "parentID", *(double *)&v45);
  v48 = v47;
  v49 = (uint64_t)_swiftEmptyArrayStorage;
  v268[0] = _swiftEmptyArrayStorage;
  if (v47)
  {
    v50 = v47;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
    v52 = *(_QWORD *)(((unint64_t)v268[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v51 = *(_QWORD *)(((unint64_t)v268[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v52 >= v51 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1);
    v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v50);
    v30 = v268;
    specialized Array._endMutation()(v53);
    v49 = (uint64_t)v268[0];
  }

  if (!((unint64_t)v49 >> 62))
    goto LABEL_29;
LABEL_23:
  if (v49 < 0)
    v55 = v49;
  else
    v55 = v49 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v49);
  v56 = _CocoaArrayWrapper.endIndex.getter(v55);
  swift_bridgeObjectRelease();
  if (!v56)
    goto LABEL_15;
LABEL_30:
  if (v56 >= 1)
  {
    if ((v49 & 0xC000000000000001) != 0)
    {
      v60 = 0;
      do
      {
        v61 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v60++, v49);
        v30 = &v273;
        sub_1002DB2CC((Swift::Int *)v268, v61);

      }
      while (v56 != v60);
    }
    else
    {
      v62 = 0;
      do
      {
        v63 = *(void **)(v49 + 8 * v62++ + 32);
        v30 = &v273;
        sub_1002DB2CC((Swift::Int *)v268, v63);

      }
      while (v56 != v62);
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_74:
  v102 = v54;
  v103 = swift_bridgeObjectRelease();
  v104 = a9(v255, v46, v103);
  if (!v43)
  {
    v237 = v104;
    swift_bridgeObjectRelease();
    v232 = (uint64_t *)(v46 + 48);
    swift_beginAccess(v46 + 48, v268, 0, 0);
    v105 = v245;
    if (!v251[2])
      goto LABEL_181;
    v106 = 0;
    v229 = (uint64_t)(v44 + 24);
    v107 = &selRef_isConcealed;
    v256 = v102;
    while (1)
    {
      v230 = v106;
      v108 = (id *)&v252[2 * v106];
      v109 = (int64_t *)v108[1];
      v110 = *v108;
      v240 = v109;
      v111 = objc_msgSend(v110, v107[432], swift_bridgeObjectRetain(v109).n128_f64[0]);
      v112 = sub_1005CDB68(v111, v42, v105, a8);

      v113 = *v232;
      v239 = v110;
      if ((*v232 & 0xC000000000000001) != 0)
      {
        v114 = v113 < 0 ? *v232 : v113 & 0xFFFFFFFFFFFFFF8;
        v115 = v112;
        swift_bridgeObjectRetain(v113);
        v116 = __CocoaDictionary.lookup(_:)(v115, v114);
        if (v116)
        {
          v117 = v116;
          v272 = (_QWORD *)v116;
          v118 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
          swift_unknownObjectRetain(v117);
          swift_dynamicCast(&v269, &v272, (char *)&type metadata for Swift.AnyObject + 8, v118, 7);
          v119 = v269;
          swift_unknownObjectRelease(v117);

          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
          v119 = 0;
        }
        v110 = v239;
      }
      else if (*(_QWORD *)(v113 + 16))
      {
        v120 = v112;
        swift_bridgeObjectRetain(v113);
        v121 = sub_1002C66DC((uint64_t)v120);
        if ((v122 & 1) != 0)
        {
          v119 = *(id *)(*(_QWORD *)(v113 + 56) + 8 * v121);

          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
          v119 = 0;
        }
      }
      else
      {
        v119 = 0;
      }

      if (!*(_QWORD *)(v237 + 16))
        break;
      v123 = v112;
      v124 = a10();
      if ((v125 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_166;
      }
      v238 = *(id *)(*(_QWORD *)(v237 + 56) + 8 * v124);

      v126 = v240;
      swift_bridgeObjectRetain_n(v240, 2);
      v127 = v123;
      swift_retain_n(v44);
      v128 = v127;
      v129 = Logger.logObject.getter(v128);
      v130 = static os_log_type_t.default.getter(v129);
      v236 = v128;
      if (os_log_type_enabled(v129, v130))
      {
        v234 = v130;
        loga = v129;
        v131 = swift_slowAlloc(42, -1);
        typea = (_QWORD *)swift_slowAlloc(8, -1);
        v242 = swift_slowAlloc(96, -1);
        v269 = (void *)v242;
        *(_DWORD *)v131 = 136446978;
        v272 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v269);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
        *(_WORD *)(v131 + 12) = 2082;
        sub_1000184A8(v229, (uint64_t)v276);
        sub_100671124((uint64_t)v276, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v133 = v132;
        v135 = v134;
        sub_100671124((uint64_t)v276, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v272 = (_QWORD *)sub_10001A820(v133, v135, (uint64_t *)&v269);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
        swift_release_n(v44);
        swift_bridgeObjectRelease();
        *(_WORD *)(v131 + 22) = 2114;
        v272 = v128;
        v136 = v128;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
        *typea = v128;

        *(_WORD *)(v131 + 32) = 2082;
        v137 = v240[2];
        if (v137)
        {
          v272 = _swiftEmptyArrayStorage;
          sub_1001C1B0C(0, v137, 0);
          v138 = v240;
          v139 = 0;
          v140 = v272;
          v141 = v272[2];
          v142 = 2 * v141;
          do
          {
            v143 = v141 + v139;
            if (*((_BYTE *)v138 + v139 + 32))
              v144 = 0x4449746E65726170;
            else
              v144 = 0x49746E756F636361;
            if (*((_BYTE *)v138 + v139 + 32))
              v145 = 0xE800000000000000;
            else
              v145 = 0xE900000000000044;
            v272 = v140;
            v146 = v140[3];
            v147 = v143 + 1;
            if (v143 >= v146 >> 1)
            {
              sub_1001C1B0C(v146 > 1, v143 + 1, 1);
              v138 = v240;
              v140 = v272;
            }
            ++v139;
            v140[2] = v147;
            v148 = &v140[v142];
            v148[4] = v144;
            v148[5] = v145;
            v142 += 2;
          }
          while (v137 != v139);
          v126 = v138;
          swift_bridgeObjectRelease();
          v44 = v244;
          v102 = v256;
        }
        else
        {
          swift_bridgeObjectRelease();
          v140 = _swiftEmptyArrayStorage;
        }
        v150 = Array.description.getter(v140, &type metadata for String);
        v152 = v151;
        swift_bridgeObjectRelease();
        v272 = (_QWORD *)sub_10001A820(v150, v152, (uint64_t *)&v269);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, loga, v234, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v131, 0x2Au);
        v153 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(typea, 1, v153);
        swift_slowDealloc(typea, -1, -1);
        swift_arrayDestroy(v242, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v242, -1, -1);
        swift_slowDealloc(v131, -1, -1);

        v110 = v239;
      }
      else
      {

        swift_release_n(v44);
        v149 = swift_bridgeObjectRelease_n(v240, 2);
      }
      v154 = v126;
      v231 = v126[2];
      if (v231)
      {
        v155 = 0;
        v156 = v126 + 4;
        v228 = v126 + 4;
        while (1)
        {
          if (v155 >= v154[2])
            goto LABEL_180;
          v235 = *((unsigned __int8 *)v156 + v155);
          v157 = a11(v110, v149);
          v158 = v157;
          if (!((unint64_t)v157 >> 62))
          {
            v159 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFF8) + 0x10);
            v233 = v155;
            if (v159)
              break;
            goto LABEL_144;
          }
          v190 = v157 < 0 ? v157 : v157 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v157);
          v159 = _CocoaArrayWrapper.endIndex.getter(v190);
          swift_bridgeObjectRelease();
          v233 = v155;
          if (v159)
            break;
LABEL_144:
          v161 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_145:
          swift_bridgeObjectRelease();
          v191 = sub_1003B101C(v161);
          v192 = swift_bridgeObjectRelease();
          v110 = v239;
          a12(v239, v238, v235, v191, v192);
          v155 = v233 + 1;
          v149 = swift_bridgeObjectRelease();
          v42 = v249;
          v154 = v240;
          v156 = v228;
          if (v233 + 1 == v231)
          {
            swift_bridgeObjectRelease();
            goto LABEL_148;
          }
        }
        typeb = v158 & 0xC000000000000001;
        v160 = 4;
        v161 = (Swift::Int)_swiftEmptyDictionarySingleton;
        logb = (os_log_t)v158;
        v243 = v159;
        while (2)
        {
          if (typeb)
            v163 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v160 - 4, v158);
          else
            v163 = *(id *)(v158 + 8 * v160);
          v164 = v163;
          v165 = v160 - 3;
          if (__OFADD__(v160 - 4, 1))
            goto LABEL_176;
          sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
          v166 = v164;
          v167 = v166;
          if (!*(_QWORD *)(v102 + 16))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_158:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_retain_n(v44);
            v194 = v167;
            v195 = Logger.logObject.getter(v194);
            v196 = static os_log_type_t.error.getter(v195);
            if (os_log_type_enabled(v195, v196))
            {
              v197 = swift_slowAlloc(42, -1);
              typed = swift_slowAlloc(128, -1);
              v269 = (void *)typed;
              *(_DWORD *)v197 = 136446978;
              v272 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v269);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
              *(_WORD *)(v197 + 12) = 2082;
              sub_1000184A8(v229, (uint64_t)v275);
              sub_100671124((uint64_t)v275, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
              sub_1000181B8();
              v199 = v198;
              v201 = v200;
              sub_100671124((uint64_t)v275, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
              v272 = (_QWORD *)sub_10001A820(v199, v201, (uint64_t *)&v269);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
              swift_release_n(v44);
              *(_QWORD *)&v202 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v197 + 22) = 2080;
              v203 = objc_msgSend(v194, "description", v202);
              v204 = static String._unconditionallyBridgeFromObjectiveC(_:)(v203);
              v206 = v205;

              v272 = (_QWORD *)sub_10001A820(v204, v206, (uint64_t *)&v269);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);

              *(_QWORD *)&v207 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v197 + 32) = 2080;
              v208 = objc_msgSend(v194, "description", v207);
              v209 = static String._unconditionallyBridgeFromObjectiveC(_:)(v208);
              v211 = v210;

              v272 = (_QWORD *)sub_10001A820(v209, v211, (uint64_t *)&v269);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v195, v196, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v197, 0x2Au);
              swift_arrayDestroy(typed, 4, (char *)&type metadata for Any + 8);
              swift_slowDealloc(typed, -1, -1);
              swift_slowDealloc(v197, -1, -1);

            }
            else
            {

              swift_release_n(v44);
            }
            v257 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v194);
            swift_willThrow(v257);

            return;
          }
          v168 = v166;
          v169 = sub_1002C672C(v168);
          if ((v170 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v44 = v244;
            goto LABEL_158;
          }
          v171 = *(id *)(*(_QWORD *)(v102 + 56) + 8 * v169);

          if ((v161 & 0xC000000000000001) != 0)
          {
            if (v161 < 0)
              v172 = v161;
            else
              v172 = v161 & 0xFFFFFFFFFFFFFF8;
            v173 = v171;
            v174 = __CocoaDictionary.count.getter(v172);
            if (__OFADD__(v174, 1))
              goto LABEL_178;
            v161 = sub_100192078(v172, v174 + 1);
          }
          else
          {
            v175 = v171;
          }
          v176 = swift_isUniquelyReferenced_nonNull_native(v161);
          v269 = (void *)v161;
          v178 = sub_1002C66DC((uint64_t)v168);
          v179 = *(_QWORD *)(v161 + 16);
          v180 = (v177 & 1) == 0;
          v181 = v179 + v180;
          if (__OFADD__(v179, v180))
            goto LABEL_177;
          v182 = v177;
          if (*(_QWORD *)(v161 + 24) >= v181)
          {
            if ((v176 & 1) != 0)
            {
              v161 = (Swift::Int)v269;
              if ((v177 & 1) == 0)
                goto LABEL_136;
            }
            else
            {
              sub_1002D73A0();
              v161 = (Swift::Int)v269;
              if ((v182 & 1) == 0)
                goto LABEL_136;
            }
          }
          else
          {
            sub_1002CF2DC(v181, v176);
            v183 = sub_1002C66DC((uint64_t)v168);
            if ((v182 & 1) != (v184 & 1))
              goto LABEL_183;
            v178 = v183;
            v161 = (Swift::Int)v269;
            if ((v182 & 1) == 0)
            {
LABEL_136:
              *(_QWORD *)(v161 + 8 * (v178 >> 6) + 64) |= 1 << v178;
              v185 = 8 * v178;
              *(_QWORD *)(*(_QWORD *)(v161 + 48) + v185) = v168;
              *(_QWORD *)(*(_QWORD *)(v161 + 56) + v185) = v171;
              v186 = *(_QWORD *)(v161 + 16);
              v187 = __OFADD__(v186, 1);
              v188 = v186 + 1;
              if (v187)
                goto LABEL_179;
              *(_QWORD *)(v161 + 16) = v188;
              v189 = v168;
              goto LABEL_115;
            }
          }
          v162 = *(_QWORD *)(v161 + 56);

          *(_QWORD *)(v162 + 8 * v178) = v171;
LABEL_115:
          v102 = v256;
          v158 = (uint64_t)logb;

          swift_bridgeObjectRelease();
          ++v160;
          v44 = v244;
          if (v165 == v243)
            goto LABEL_145;
          continue;
        }
      }
      swift_bridgeObjectRelease();
      v42 = v249;
LABEL_148:
      if (v44[104] == 1)
      {
        v193 = v238;
        objc_msgSend(v193, "updateChangeCount");

      }
      else
      {

      }
      v105 = v245;
      v106 = v230 + 1;
      if ((_QWORD *)(v230 + 1) == v253)
        goto LABEL_75;
      v107 = &selRef_isConcealed;
      if (v106 >= v251[2])
        goto LABEL_181;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_166:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v212 = v112;
    swift_retain_n(v44);
    v213 = v212;
    v214 = Logger.logObject.getter(v213);
    v215 = static os_log_type_t.error.getter(v214);
    if (os_log_type_enabled(v214, v215))
    {
      v216 = swift_slowAlloc(32, -1);
      typee = swift_slowAlloc(96, -1);
      v269 = (void *)typee;
      *(_DWORD *)v216 = 136446722;
      v272 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v269);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
      *(_WORD *)(v216 + 12) = 2082;
      sub_1000184A8(v229, (uint64_t)v274);
      sub_100671124((uint64_t)v274, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v218 = v217;
      v220 = v219;
      sub_100671124((uint64_t)v274, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v272 = (_QWORD *)sub_10001A820(v218, v220, (uint64_t *)&v269);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);
      swift_release_n(v44);
      *(_QWORD *)&v221 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v216 + 22) = 2080;
      v222 = objc_msgSend(v213, "description", v221);
      v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(v222);
      v225 = v224;

      v272 = (_QWORD *)sub_10001A820(v223, v225, (uint64_t *)&v269);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, &v273);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v214, v215, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v216, 0x20u);
      swift_arrayDestroy(typee, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typee, -1, -1);
      swift_slowDealloc(v216, -1, -1);

    }
    else
    {

      swift_release_n(v44);
    }
    v258 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v213);
    swift_willThrow(v258);

    return;
  }
LABEL_75:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_76:
  swift_bridgeObjectRelease();
LABEL_2:
  swift_bridgeObjectRelease();
}

void sub_10062A838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  id v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v86;
  void (*v87)(_QWORD, _QWORD);
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char **v91;
  id *v92;
  int64_t *v93;
  id v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  unint64_t v105;
  char v106;
  id v107;
  unint64_t v108;
  char v109;
  int64_t *v110;
  id v111;
  id v112;
  NSObject *v113;
  os_log_type_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  id v120;
  int64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  Swift::Int v141;
  uint64_t v142;
  id v143;
  void *v144;
  id v145;
  void *v146;
  id v147;
  unint64_t v148;
  char v149;
  id v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  _BOOL8 v159;
  uint64_t v160;
  char v161;
  unint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  id v172;
  id v173;
  NSObject *v174;
  os_log_type_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  double v181;
  id v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  double v186;
  id v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  id v191;
  id v192;
  NSObject *v193;
  os_log_type_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  double v200;
  id v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  unint64_t v212;
  char v213;
  void *v214;
  uint64_t v215;
  id v216;
  int64_t *v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  os_log_type_t typed;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  NSObject *typeb;
  unint64_t typec;
  uint64_t *v234;
  id v235;
  id v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243[16];
  uint64_t *v244;
  uint64_t *v245;
  _QWORD *v246;
  uint64_t v247;
  unsigned __int8 v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  _BYTE v252[48];
  _BYTE v253[48];
  _BYTE v254[56];
  uint64_t v255;

  v5 = v3;
  v255 = a2;
  v9 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v244 = &v255;
  v245 = v5;
  swift_bridgeObjectRetain(v8);
  v10 = sub_100352610((void (*)(__n128 *__return_ptr, id *))sub_100671F14, (uint64_t)&v243, a1);
  v234 = v4;
  if (v4)
    goto LABEL_2;
  v11 = v10;
  v224 = a1;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v220 = a3;
  v223 = v5;
  v226 = v11;
  if (os_log_type_enabled((os_log_t)v14, v15))
  {
    v16 = swift_slowAlloc(42, -1);
    v237 = swift_slowAlloc(96, -1);
    v250 = v237;
    *(_DWORD *)v16 = 136446978;
    v246 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, &v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, &v247);
    *(_WORD *)(v16 + 12) = 2048;
    v246 = (_QWORD *)v11[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, &v247);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v17 = type metadata accessor for REMCDTemplate();
    typed = v15;
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v246 = (_QWORD *)sub_10001A820(v19, v21, &v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, &v247);
    v11 = v226;
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 2082;
    v5 = (uint64_t *)(v16 + 34);
    swift_bridgeObjectRetain(v8);
    v246 = (_QWORD *)sub_10001A820(v9, v8, &v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v246, &v247);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v14, typed, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy(v237, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v237, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease();
  }
  v228 = v11[2];
  if (!v228)
    goto LABEL_2;
  v251 = (uint64_t)&_swiftEmptySetSingleton;
  v227 = v11 + 4;
  swift_bridgeObjectRetain(v11);
  v22 = 0;
  while (1)
  {
    if (v22 >= v11[2])
    {
      __break(1u);
LABEL_180:
      __break(1u);
      __break(1u);
LABEL_181:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_2:
      swift_bridgeObjectRelease();
      return;
    }
    v23 = (id *)&v227[2 * v22];
    v24 = v23[1];
    v25 = v24[2];
    if (v25)
      break;
LABEL_11:
    if (++v22 == v228)
    {
      swift_bridgeObjectRelease();
      v52 = v224;
      if ((unint64_t)v224 >> 62)
      {
        if (v224 < 0)
          v205 = v224;
        else
          v205 = v224 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v224);
        v53 = _CocoaArrayWrapper.endIndex.getter(v205);
        swift_bridgeObjectRelease();
      }
      else
      {
        v53 = *(_QWORD *)((v224 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v54 = _swiftEmptyArrayStorage;
      if (v53)
      {
        v250 = (uint64_t)_swiftEmptyArrayStorage;
        v14 = (uint64_t)&v250;
        specialized ContiguousArray.reserveCapacity(_:)(v53);
        if (v53 < 0)
        {
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
          goto LABEL_198;
        }
        v55 = 0;
        do
        {
          if (v53 == v55)
            goto LABEL_180;
          if ((v224 & 0xC000000000000001) != 0)
            v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v52);
          else
            v56 = *(id *)(v52 + 8 * v55 + 32);
          v57 = v56;
          v58 = sub_1005CDB68(objc_msgSend(v57, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, 0x6D655444434D4552, (void *)0xED00006574616C70);
          ++v55;

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v59);
          v60 = *(_QWORD *)(v250 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v60);
          v61 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
          v14 = (uint64_t)&v250;
          specialized ContiguousArray._endMutation()(v61);
          v52 = v224;
        }
        while (v53 != v55);
        v54 = (_QWORD *)v250;
      }
      *(_QWORD *)typea = v54;
      v62 = v251;
      if ((v251 & 0xC000000000000001) != 0)
      {
        if (v251 < 0)
          v63 = v251;
        else
          v63 = v251 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v251);
        v64 = __CocoaSet.count.getter(v63);
        if (v64)
        {
          v65 = v64;
          v249 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v64);
          v246 = (_QWORD *)__CocoaSet.startIndex.getter(v63);
          v247 = v66;
          v248 = 1;
          if (v65 < 0)
          {
            __break(1u);
            goto LABEL_2;
          }
          goto LABEL_76;
        }
      }
      else
      {
        v65 = *(_QWORD *)(v251 + 16);
        swift_bridgeObjectRetain(v251);
        if (v65)
        {
          v249 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v65);
          v246 = (_QWORD *)sub_100364E8C(v62);
          v247 = v67;
          v248 = v68 & 1;
LABEL_76:
          v69 = v62 & 0xFFFFFFFFFFFFFF8;
          if (v62 < 0)
            v69 = v62;
          v238 = v69;
          do
          {
            while (1)
            {
              v76 = (uint64_t)v246;
              v75 = v247;
              v77 = v248;
              sub_100364660((uint64_t)v246, v247, v248, v62);
              v79 = v78;
              sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
              v80 = v79;

              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v81);
              v82 = v249[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v82);
              v83 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v80);
              specialized ContiguousArray._endMutation()(v83);
              if ((v62 & 0xC000000000000001) != 0)
                break;
              v70 = sub_10036456C(v76, v75, v77, v62);
              v72 = v71;
              v74 = v73;
              sub_1000E515C(v76, v75, v77);
              v246 = (_QWORD *)v70;
              v247 = v72;
              v248 = v74 & 1;
              if (!--v65)
                goto LABEL_86;
            }
            if ((v77 & 1) == 0)
              goto LABEL_200;
            v84 = __CocoaSet.Index.handleBitPattern.getter(v76, v75);
            if (v84)
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v84);
            else
              isUniquelyReferenced_nonNull_native = 1;
            v86 = sub_10001A630(&qword_1008466D8);
            v87 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(&v250, v86);
            __CocoaSet.formIndex(after:isUnique:)(v88, isUniquelyReferenced_nonNull_native, v238);
            v87(&v250, 0);
            --v65;
          }
          while (v65);
LABEL_86:
          sub_1000E515C((uint64_t)v246, v247, v248);
          v89 = v249;
          swift_bridgeObjectRelease();
          goto LABEL_88;
        }
      }
      swift_bridgeObjectRelease();
      v89 = _swiftEmptyArrayStorage;
LABEL_88:
      v32 = v220;
      v27 = v223;
      sub_1006446F0((uint64_t)v89, v220);
      v5 = 0;
      v26 = *(_QWORD *)typea;
LABEL_90:
      v25 = v36;
      swift_bridgeObjectRelease();
      sub_100649970(v26, v32);
      v234 = v5;
      if (!v5)
        goto LABEL_93;
LABEL_91:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_172;
    }
  }
  *(_QWORD *)type = v22;
  v26 = (uint64_t)(v24 + 4);
  v27 = (uint64_t *)*v23;
  v28 = swift_bridgeObjectRetain(v24).n128_u64[0];
  v29 = 0;
  while (1)
  {
    if (v29 >= v24[2])
    {
      __break(1u);

      swift_release(v250);
LABEL_172:
      swift_bridgeObjectRelease();
      goto LABEL_2;
    }
    if (!*(_BYTE *)(v26 + v29))
    {
      v37 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v38 = swift_allocObject(v37, 40, 7);
      *(_OWORD *)(v38 + 16) = xmmword_1006A7330;
      v39 = objc_msgSend(v27, "accountID");
      *(_QWORD *)(v38 + 32) = v39;
      v250 = v38;
      v14 = (uint64_t)&v250;
      v36 = specialized Array._endMutation()(v39);
      v32 = v250;
      goto LABEL_39;
    }
    if (*(_BYTE *)(v26 + v29) != 1)
      break;
    v30 = objc_msgSend(v27, "parentAccountID", *(double *)&v28);
    v31 = v30;
    v32 = (uint64_t)_swiftEmptyArrayStorage;
    v250 = (uint64_t)_swiftEmptyArrayStorage;
    if (v30)
    {
      v33 = v30;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      v5 = *(uint64_t **)((v250 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v34 = *(_QWORD *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if ((unint64_t)v5 >= v34 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1);
      v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v33);
      v14 = (uint64_t)&v250;
      specialized Array._endMutation()(v35);
      v32 = v250;
    }

LABEL_39:
    if ((unint64_t)v32 >> 62)
    {
      if (v32 < 0)
        v51 = v32;
      else
        v51 = v32 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v32);
      v48 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease();
      if (v48)
      {
LABEL_41:
        if (v48 < 1)
        {
          __break(1u);
          goto LABEL_90;
        }
        if ((v32 & 0xC000000000000001) != 0)
        {
          v5 = 0;
          do
          {
            v49 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v32);
            v5 = (uint64_t *)((char *)v5 + 1);
            v14 = (uint64_t)&v251;
            sub_1002DB2CC(&v250, v49);

          }
          while ((uint64_t *)v48 != v5);
        }
        else
        {
          v5 = 0;
          do
          {
            v50 = *(void **)(v32 + 8 * (_QWORD)v5 + 32);
            v5 = (uint64_t *)((char *)v5 + 1);
            v14 = (uint64_t)&v251;
            sub_1002DB2CC(&v250, v50);

          }
          while ((uint64_t *)v48 != v5);
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v48)
        goto LABEL_41;
    }
    v28 = swift_bridgeObjectRelease().n128_u64[0];
    if (++v29 == v25)
    {

      swift_bridgeObjectRelease();
      v11 = v226;
      v22 = *(_QWORD *)type;
      goto LABEL_11;
    }
  }
  v5 = (uint64_t *)objc_msgSend(v27, "sectionIDsToUndelete", *(double *)&v28);
  v40 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v41 = sub_10011A5DC();
  v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v5, v40, v41);

  if ((v14 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v42 = v14;
    else
      v42 = v14 & 0xFFFFFFFFFFFFFF8;
    v43 = __CocoaSet.count.getter(v42);
    if (!v43)
    {
LABEL_35:
      swift_bridgeObjectRelease();
      v32 = (uint64_t)_swiftEmptyArrayStorage;
      goto LABEL_39;
    }
  }
  else
  {
    v43 = *(_QWORD *)(v14 + 16);
    if (!v43)
      goto LABEL_35;
  }
  if (v43 < 1)
  {
    v32 = (uint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    v44 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v32 = swift_allocObject(v44, 8 * v43 + 32, 7);
    v45 = j__malloc_size((const void *)v32);
    v46 = v45 - 32;
    if (v45 < 32)
      v46 = v45 - 25;
    *(_QWORD *)(v32 + 16) = v43;
    *(_QWORD *)(v32 + 24) = (2 * (v46 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v14);
  v5 = sub_1001EAC90(&v250, (uint64_t **)(v32 + 32), v43, v14);
  v47 = sub_1000C6560(v250);
  if (v5 == (uint64_t *)v43)
  {
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  __break(1u);
LABEL_93:
  v215 = v47;
  swift_bridgeObjectRelease();
  v211 = (uint64_t *)(v32 + 48);
  swift_beginAccess(v32 + 48, &v250, 0, 0);
  if (!v226[2])
    goto LABEL_199;
  v90 = 0;
  v208 = (uint64_t)(v27 + 3);
  v91 = &selRef_isConcealed;
  v225 = v25;
  while (2)
  {
    v209 = v90;
    v92 = (id *)&v227[2 * v90];
    v93 = (int64_t *)v92[1];
    v14 = (uint64_t)*v92;
    v217 = v93;
    v94 = objc_msgSend((id)v14, v91[432], swift_bridgeObjectRetain(v93).n128_f64[0]);
    v95 = sub_1005CDB68(v94, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, 0x6D655444434D4552, (void *)0xED00006574616C70);
    if (v234)
      goto LABEL_181;
    v96 = v95;
    v218 = (id)v14;

    v97 = *v211;
    if ((*v211 & 0xC000000000000001) != 0)
    {
      if (v97 < 0)
        v98 = *v211;
      else
        v98 = v97 & 0xFFFFFFFFFFFFFF8;
      v99 = v96;
      swift_bridgeObjectRetain(v97);
      v100 = __CocoaDictionary.lookup(_:)(v99, v98);
      if (v100)
      {
        v101 = v100;
        v249 = (_QWORD *)v100;
        v102 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v101);
        swift_dynamicCast(&v246, &v249, (char *)&type metadata for Swift.AnyObject + 8, v102, 7);
        v103 = v246;
        swift_unknownObjectRelease(v101);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v103 = 0;
      }
      v27 = v223;
    }
    else if (*(_QWORD *)(v97 + 16))
    {
      v104 = v96;
      swift_bridgeObjectRetain(v97);
      v105 = sub_1002C66DC((uint64_t)v104);
      if ((v106 & 1) != 0)
      {
        v103 = *(id *)(*(_QWORD *)(v97 + 56) + 8 * v105);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v103 = 0;
      }
    }
    else
    {
      v103 = 0;
    }

    if (!*(_QWORD *)(v215 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_184:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v191 = v96;
      swift_retain_n(v27);
      v192 = v191;
      v193 = Logger.logObject.getter(v192);
      v194 = static os_log_type_t.error.getter(v193);
      if (os_log_type_enabled(v193, v194))
      {
        v195 = swift_slowAlloc(32, -1);
        v242 = swift_slowAlloc(96, -1);
        v246 = (_QWORD *)v242;
        *(_DWORD *)v195 = 136446722;
        v249 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v246);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
        *(_WORD *)(v195 + 12) = 2082;
        sub_1000184A8(v208, (uint64_t)v252);
        sub_100671124((uint64_t)v252, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v197 = v196;
        v199 = v198;
        sub_100671124((uint64_t)v252, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v249 = (_QWORD *)sub_10001A820(v197, v199, (uint64_t *)&v246);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
        swift_release_n(v27);
        *(_QWORD *)&v200 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v195 + 22) = 2080;
        v201 = objc_msgSend(v192, "description", v200);
        v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
        v204 = v203;

        v249 = (_QWORD *)sub_10001A820(v202, v204, (uint64_t *)&v246);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v193, v194, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v195, 0x20u);
        swift_arrayDestroy(v242, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v242, -1, -1);
        swift_slowDealloc(v195, -1, -1);

      }
      else
      {

        swift_release_n(v27);
      }
      v236 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v192);
      swift_willThrow(v236);

      return;
    }
    v107 = v96;
    v108 = sub_1002C672C(v107);
    if ((v109 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_184;
    }
    v216 = *(id *)(*(_QWORD *)(v215 + 56) + 8 * v108);

    v110 = v217;
    swift_bridgeObjectRetain_n(v217, 2);
    v111 = v107;
    swift_retain_n(v27);
    v112 = v111;
    v113 = Logger.logObject.getter(v112);
    v114 = static os_log_type_t.default.getter(v113);
    v214 = v112;
    if (os_log_type_enabled(v113, v114))
    {
      typeb = v113;
      v115 = swift_slowAlloc(42, -1);
      v239 = (_QWORD *)swift_slowAlloc(8, -1);
      v221 = swift_slowAlloc(96, -1);
      v246 = (_QWORD *)v221;
      *(_DWORD *)v115 = 136446978;
      v249 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
      *(_WORD *)(v115 + 12) = 2082;
      sub_1000184A8(v208, (uint64_t)v254);
      sub_100671124((uint64_t)v254, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v117 = v116;
      v119 = v118;
      sub_100671124((uint64_t)v254, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v249 = (_QWORD *)sub_10001A820(v117, v119, (uint64_t *)&v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
      swift_release_n(v27);
      swift_bridgeObjectRelease();
      *(_WORD *)(v115 + 22) = 2114;
      v249 = v112;
      v120 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
      *v239 = v112;

      *(_WORD *)(v115 + 32) = 2082;
      v121 = v217[2];
      if (v121)
      {
        v249 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v121, 0);
        v110 = v217;
        v122 = 0;
        v123 = v249;
        do
        {
          v124 = 0xD000000000000014;
          if (*((_BYTE *)v110 + v122 + 32) == 1)
          {
            v124 = 0x6341746E65726170;
            v125 = 0xEF4449746E756F63;
          }
          else
          {
            v125 = 0x80000001006F3EE0;
          }
          if (*((_BYTE *)v110 + v122 + 32))
            v126 = v124;
          else
            v126 = 0x49746E756F636361;
          if (*((_BYTE *)v110 + v122 + 32))
            v127 = v125;
          else
            v127 = 0xE900000000000044;
          v249 = v123;
          v129 = v123[2];
          v128 = v123[3];
          if (v129 >= v128 >> 1)
          {
            sub_1001C1B0C(v128 > 1, v129 + 1, 1);
            v110 = v217;
            v123 = v249;
          }
          ++v122;
          v123[2] = v129 + 1;
          v130 = &v123[2 * v129];
          v130[4] = v126;
          v130[5] = v127;
        }
        while (v121 != v122);
        swift_bridgeObjectRelease();
        v27 = v223;
        v25 = v225;
      }
      else
      {
        swift_bridgeObjectRelease();
        v123 = _swiftEmptyArrayStorage;
      }
      v131 = Array.description.getter(v123, &type metadata for String);
      v133 = v132;
      swift_bridgeObjectRelease();
      v249 = (_QWORD *)sub_10001A820(v131, v133, (uint64_t *)&v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, typeb, v114, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v115, 0x2Au);
      v134 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v239, 1, v134);
      swift_slowDealloc(v239, -1, -1);
      swift_arrayDestroy(v221, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v221, -1, -1);
      swift_slowDealloc(v115, -1, -1);

    }
    else
    {

      swift_release_n(v27);
      swift_bridgeObjectRelease_n(v217, 2);
    }
    v210 = v110[2];
    if (!v210)
    {
LABEL_164:
      swift_bridgeObjectRelease();
      v171 = v209 + 1;
      if (*((_BYTE *)v27 + 104) == 1)
      {
        v172 = v216;
        objc_msgSend(v172, "updateChangeCount");

      }
      else
      {

      }
      v90 = v209 + 1;
      v91 = &selRef_isConcealed;
      if (v171 == v228)
        goto LABEL_91;
      if (v171 >= v226[2])
        goto LABEL_199;
      continue;
    }
    break;
  }
  v135 = 0;
  v136 = v110 + 4;
  v207 = v110 + 4;
  while (v135 < v110[2])
  {
    v213 = v136[v135];
    v137 = (uint64_t)sub_1001588FC(v218, v213);
    v138 = v137;
    if ((unint64_t)v137 >> 62)
    {
      if (v137 < 0)
        v169 = v137;
      else
        v169 = v137 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v137);
      v139 = _CocoaArrayWrapper.endIndex.getter(v169);
      swift_bridgeObjectRelease();
      v212 = v135;
      if (v139)
      {
LABEL_133:
        typec = v138 & 0xC000000000000001;
        v140 = 4;
        v141 = (Swift::Int)_swiftEmptyDictionarySingleton;
        v222 = v138;
        v219 = v139;
        while (1)
        {
          if (typec)
            v143 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v140 - 4, v138);
          else
            v143 = *(id *)(v138 + 8 * v140);
          v144 = v143;
          if (__OFADD__(v140 - 4, 1))
            goto LABEL_194;
          sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
          v145 = v144;
          v146 = v145;
          if (!*(_QWORD *)(v25 + 16))
            break;
          v147 = v145;
          v148 = sub_1002C672C(v147);
          if ((v149 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_175;
          }
          v150 = *(id *)(*(_QWORD *)(v25 + 56) + 8 * v148);

          v240 = v140 - 3;
          if ((v141 & 0xC000000000000001) != 0)
          {
            if (v141 < 0)
              v151 = v141;
            else
              v151 = v141 & 0xFFFFFFFFFFFFFF8;
            v152 = v150;
            v153 = __CocoaDictionary.count.getter(v151);
            if (__OFADD__(v153, 1))
              goto LABEL_196;
            v141 = sub_100192078(v151, v153 + 1);
          }
          else
          {
            v154 = v150;
          }
          v155 = swift_isUniquelyReferenced_nonNull_native(v141);
          v246 = (_QWORD *)v141;
          v157 = sub_1002C66DC((uint64_t)v147);
          v158 = *(_QWORD *)(v141 + 16);
          v159 = (v156 & 1) == 0;
          v160 = v158 + v159;
          if (__OFADD__(v158, v159))
            goto LABEL_195;
          v161 = v156;
          if (*(_QWORD *)(v141 + 24) >= v160)
          {
            if ((v155 & 1) == 0)
              sub_1002D73A0();
          }
          else
          {
            sub_1002CF2DC(v160, v155);
            v162 = sub_1002C66DC((uint64_t)v147);
            if ((v161 & 1) != (v163 & 1))
              goto LABEL_201;
            v157 = v162;
          }
          v141 = (Swift::Int)v246;
          if ((v161 & 1) != 0)
          {
            v142 = v246[7];

            *(_QWORD *)(v142 + 8 * v157) = v150;
          }
          else
          {
            v246[(v157 >> 6) + 8] |= 1 << v157;
            v164 = 8 * v157;
            *(_QWORD *)(*(_QWORD *)(v141 + 48) + v164) = v147;
            *(_QWORD *)(*(_QWORD *)(v141 + 56) + v164) = v150;
            v165 = *(_QWORD *)(v141 + 16);
            v166 = __OFADD__(v165, 1);
            v167 = v165 + 1;
            if (v166)
              goto LABEL_197;
            *(_QWORD *)(v141 + 16) = v167;
            v168 = v147;
          }
          v25 = v225;
          v138 = v222;

          swift_bridgeObjectRelease();
          ++v140;
          if (v240 == v219)
            goto LABEL_163;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_175:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_retain_n(v223);
        v173 = v146;
        v174 = Logger.logObject.getter(v173);
        v175 = static os_log_type_t.error.getter(v174);
        if (os_log_type_enabled(v174, v175))
        {
          v176 = swift_slowAlloc(42, -1);
          v241 = swift_slowAlloc(128, -1);
          v246 = (_QWORD *)v241;
          *(_DWORD *)v176 = 136446978;
          v249 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v246);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
          *(_WORD *)(v176 + 12) = 2082;
          sub_1000184A8(v208, (uint64_t)v253);
          sub_100671124((uint64_t)v253, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v178 = v177;
          v180 = v179;
          sub_100671124((uint64_t)v253, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          v249 = (_QWORD *)sub_10001A820(v178, v180, (uint64_t *)&v246);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);
          swift_release_n(v223);
          *(_QWORD *)&v181 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v176 + 22) = 2080;
          v182 = objc_msgSend(v173, "description", v181);
          v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
          v185 = v184;

          v249 = (_QWORD *)sub_10001A820(v183, v185, (uint64_t *)&v246);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);

          *(_QWORD *)&v186 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v176 + 32) = 2080;
          v187 = objc_msgSend(v173, "description", v186);
          v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v187);
          v190 = v189;

          v249 = (_QWORD *)sub_10001A820(v188, v190, (uint64_t *)&v246);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, &v250);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v174, v175, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v176, 0x2Au);
          swift_arrayDestroy(v241, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v241, -1, -1);
          swift_slowDealloc(v176, -1, -1);

        }
        else
        {

          swift_release_n(v223);
        }
        v235 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v173);
        swift_willThrow(v235);

        return;
      }
    }
    else
    {
      v139 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFF8) + 0x10);
      v212 = v135;
      if (v139)
        goto LABEL_133;
    }
    v141 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_163:
    swift_bridgeObjectRelease();
    v170 = sub_1003B101C(v141);
    swift_bridgeObjectRelease();
    sub_1001590EC(v218, v216, v213, v170);
    v135 = v212 + 1;
    swift_bridgeObjectRelease();
    v27 = v223;
    v110 = v217;
    v136 = v207;
    if (v212 + 1 == v210)
      goto LABEL_164;
  }
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  v206 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v206);
  __break(1u);
}

void sub_10062C428(uint64_t a1, uint64_t a2, uint8_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  id *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  Class isa;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  void (*v61)(_QWORD, _QWORD);
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  id *v70;
  _QWORD *v71;
  id v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  unint64_t v83;
  char v84;
  id v85;
  unint64_t v86;
  _QWORD *v87;
  char v88;
  _QWORD *v89;
  id v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  id v99;
  int64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  Swift::Int v111;
  uint64_t v112;
  id v113;
  void *v114;
  uint64_t v115;
  id v116;
  void *v117;
  id v118;
  unint64_t v119;
  char v120;
  id v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  char v127;
  unint64_t v128;
  uint64_t v129;
  _BOOL8 v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  NSObject *v143;
  id v144;
  NSObject *v145;
  os_log_type_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  double v152;
  id v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  double v157;
  id v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  id v162;
  id v163;
  NSObject *v164;
  os_log_type_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  double v171;
  id v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  char v183;
  void *v184;
  uint64_t v185;
  NSObject *v186;
  void *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  os_log_type_t typeb;
  NSObject *type;
  os_log_type_t typea[8];
  id v200;
  id v201;
  NSObject *v202;
  uint64_t v203;
  uint64_t v204;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  os_log_t logc;
  os_log_t logd;
  os_log_t loge;
  char v211[16];
  uint64_t *v212;
  uint64_t v213;
  _QWORD *p_isa;
  uint64_t v215;
  unsigned __int8 v216;
  _QWORD *v217;
  NSObject *v218;
  uint64_t v219;
  _BYTE v220[48];
  _BYTE v221[48];
  _BYTE v222[56];
  uint64_t v223;

  v5 = v3;
  v6 = a3;
  v223 = a2;
  v9 = *((_QWORD *)a3 + 2);
  v8 = *((_QWORD *)a3 + 3);
  v212 = &v223;
  v213 = v5;
  swift_bridgeObjectRetain(v8);
  v10 = sub_10035262C((void (*)(__n128 *__return_ptr, id *))sub_100672190, (uint64_t)&v211, a1);
  if (v4)
    goto LABEL_2;
  v191 = a1;
  v194 = v10;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v194);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  log = v13;
  v188 = (uint64_t)v6;
  v190 = v5;
  if (os_log_type_enabled(v13, v14))
  {
    v6 = (uint8_t *)swift_slowAlloc(42, -1);
    v202 = swift_slowAlloc(96, -1);
    v218 = v202;
    *(_DWORD *)v6 = 136446978;
    p_isa = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v215);
    *((_WORD *)v6 + 6) = 2048;
    p_isa = (_QWORD *)v194[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v215);
    swift_bridgeObjectRelease();
    *((_WORD *)v6 + 11) = 2082;
    v15 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "description");
    typeb = v14;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v18 = v9;
    v20 = v19;

    p_isa = (_QWORD *)sub_10001A820(v17, v20, (uint64_t *)&v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v215);
    swift_bridgeObjectRelease();
    *((_WORD *)v6 + 16) = 2082;
    swift_bridgeObjectRetain(v8);
    p_isa = (_QWORD *)sub_10001A820(v18, v8, (uint64_t *)&v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v215);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, log, typeb, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", v6, 0x2Au);
    v13 = v202;
    swift_arrayDestroy(v202, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v202, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease();
  }
  v196 = v194[2];
  if (!v196)
    goto LABEL_2;
  v219 = (uint64_t)&_swiftEmptySetSingleton;
  v195 = v194 + 4;
  swift_bridgeObjectRetain(v194);
  for (i = 0; i != v196; ++i)
  {
    if (i >= *(_QWORD *)(v21 + 16))
    {
      __break(1u);
LABEL_120:
      __break(1u);
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_2;
    }
    v23 = (id *)&v195[2 * i];
    v24 = v23[1];
    if (v24[2])
    {
      v25 = *v23;
      swift_bridgeObjectRetain(v24);
      if (v24[2])
        __asm { BR              X9 }
LABEL_33:
      __break(1u);

      swift_release(v218);
LABEL_112:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      return;
    }
  }
  swift_bridgeObjectRelease();
  if ((unint64_t)v191 >> 62)
  {
    if (v191 < 0)
      v176 = v191;
    else
      v176 = v191 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v191);
    v26 = _CocoaArrayWrapper.endIndex.getter(v176);
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = *(_QWORD *)((v191 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v27 = _swiftEmptyArrayStorage;
  if (v26)
  {
    v218 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v26);
    if (v26 < 0)
    {
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    v28 = 0;
    v29 = v191;
    v6 = (uint8_t *)&unk_100840000;
    do
    {
      if (v26 == v28)
        goto LABEL_120;
      if ((v191 & 0xC000000000000001) != 0)
        v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v29);
      else
        v30 = *(id *)(v29 + 8 * v28 + 32);
      v31 = v30;
      v32 = sub_1005CCBAC(objc_msgSend(v31, "remObjectID"), (unint64_t *)&unk_100840000, off_1007D6720);
      ++v28;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      isa = v218[2].isa;
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(isa);
      v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(isa, v32);
      specialized ContiguousArray._endMutation()(v35);
      v29 = v191;
    }
    while (v26 != v28);
    v27 = v218;
  }
  v203 = (uint64_t)v27;
  v36 = v219;
  if ((v219 & 0xC000000000000001) != 0)
  {
    if (v219 < 0)
      v37 = v219;
    else
      v37 = v219 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v219);
    v38 = __CocoaSet.count.getter(v37);
    if (v38)
    {
      v39 = v38;
      v217 = _swiftEmptyArrayStorage;
      v13 = &v217;
      specialized ContiguousArray.reserveCapacity(_:)(v38);
      p_isa = (_QWORD *)__CocoaSet.startIndex.getter(v37);
      v215 = v40;
      v216 = 1;
      if (v39 < 0)
      {
        __break(1u);
        goto LABEL_33;
      }
      goto LABEL_36;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    v63 = _swiftEmptyArrayStorage;
    goto LABEL_48;
  }
  v39 = *(_QWORD *)(v219 + 16);
  swift_bridgeObjectRetain(v219);
  if (!v39)
    goto LABEL_47;
  v217 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v39);
  p_isa = (_QWORD *)sub_100364E8C(v36);
  v215 = v41;
  v216 = v42 & 1;
LABEL_36:
  v43 = v36 & 0xFFFFFFFFFFFFFF8;
  if (v36 < 0)
    v43 = v36;
  loga = (os_log_t)v43;
  do
  {
    while (1)
    {
      v50 = (uint64_t)p_isa;
      v49 = v215;
      v51 = v216;
      sub_100364660((uint64_t)p_isa, v215, v216, v36);
      v53 = v52;
      sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
      v54 = v53;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v55);
      v56 = v217[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v56);
      v57 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v54);
      specialized ContiguousArray._endMutation()(v57);
      if ((v36 & 0xC000000000000001) != 0)
        break;
      v44 = sub_10036456C(v50, v49, v51, v36);
      v46 = v45;
      v48 = v47;
      sub_1000E515C(v50, v49, v51);
      p_isa = (_QWORD *)v44;
      v215 = v46;
      v216 = v48 & 1;
      if (!--v39)
        goto LABEL_46;
    }
    if ((v51 & 1) == 0)
      goto LABEL_139;
    v58 = __CocoaSet.Index.handleBitPattern.getter(v50, v49);
    if (v58)
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
    else
      isUniquelyReferenced_nonNull_native = 1;
    v60 = sub_10001A630(&qword_1008466D8);
    v61 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(&v218, v60);
    __CocoaSet.formIndex(after:isUnique:)(v62, isUniquelyReferenced_nonNull_native, loga);
    v61(&v218, 0);
    --v39;
  }
  while (v39);
LABEL_46:
  sub_1000E515C((uint64_t)p_isa, v215, v216);
  v63 = v217;
  swift_bridgeObjectRelease();
LABEL_48:
  v64 = v190;
  sub_1006446F0((uint64_t)v63, v188);
  v66 = v65;
  swift_bridgeObjectRelease();
  sub_100649D90(v203, v188);
  v185 = v67;
  swift_bridgeObjectRelease();
  v181 = (uint64_t *)(v188 + 48);
  swift_beginAccess(v188 + 48, &v218, 0, 0);
  if (!v194[2])
  {
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    v177 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v177);
    __break(1u);
    JUMPOUT(0x10062E17CLL);
  }
  v68 = 0;
  v178 = v190 + 24;
  v69 = &selRef_isConcealed;
  v204 = v66;
  while (1)
  {
    v179 = v68;
    v70 = (id *)&v195[2 * v68];
    v71 = v70[1];
    v72 = *v70;
    v189 = v71;
    v73 = objc_msgSend(v72, v69[432], swift_bridgeObjectRetain(v71).n128_f64[0]);
    v74 = sub_1005CCBAC(v73, (unint64_t *)&unk_100840000, off_1007D6720);

    v75 = *v181;
    v187 = v72;
    if ((*v181 & 0xC000000000000001) != 0)
    {
      if (v75 < 0)
        v76 = *v181;
      else
        v76 = v75 & 0xFFFFFFFFFFFFFF8;
      v77 = v74;
      swift_bridgeObjectRetain(v75);
      v78 = __CocoaDictionary.lookup(_:)(v77, v76);
      if (v78)
      {
        v79 = v78;
        v217 = (_QWORD *)v78;
        v80 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v79);
        swift_dynamicCast(&p_isa, &v217, (char *)&type metadata for Swift.AnyObject + 8, v80, 7);
        v81 = p_isa;
        swift_unknownObjectRelease(v79);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v81 = 0;
      }
      v72 = v187;
    }
    else if (*(_QWORD *)(v75 + 16))
    {
      v82 = v74;
      swift_bridgeObjectRetain(v75);
      v83 = sub_1002C66DC((uint64_t)v82);
      if ((v84 & 1) != 0)
      {
        v81 = *(id *)(*(_QWORD *)(v75 + 56) + 8 * v83);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v81 = 0;
      }
    }
    else
    {
      v81 = 0;
    }

    if (!*(_QWORD *)(v185 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_123:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v162 = v74;
      swift_retain_n(v64);
      v163 = v162;
      v164 = Logger.logObject.getter(v163);
      v165 = static os_log_type_t.error.getter(v164);
      if (os_log_type_enabled(v164, v165))
      {
        v166 = swift_slowAlloc(32, -1);
        loge = (os_log_t)swift_slowAlloc(96, -1);
        p_isa = &loge->isa;
        *(_DWORD *)v166 = 136446722;
        v217 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&p_isa);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
        *(_WORD *)(v166 + 12) = 2082;
        sub_1000184A8(v178, (uint64_t)v220);
        sub_100671124((uint64_t)v220, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v168 = v167;
        v170 = v169;
        sub_100671124((uint64_t)v220, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v217 = (_QWORD *)sub_10001A820(v168, v170, (uint64_t *)&p_isa);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
        swift_release_n(v64);
        *(_QWORD *)&v171 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v166 + 22) = 2080;
        v172 = objc_msgSend(v163, "description", v171);
        v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v172);
        v175 = v174;

        v217 = (_QWORD *)sub_10001A820(v173, v175, (uint64_t *)&p_isa);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v164, v165, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v166, 0x20u);
        swift_arrayDestroy(loge, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(loge, -1, -1);
        swift_slowDealloc(v166, -1, -1);

      }
      else
      {

        swift_release_n(v64);
      }
      v201 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v163);
      swift_willThrow(v201);

      return;
    }
    v85 = v74;
    v86 = sub_1002C672C(v85);
    v87 = v194;
    if ((v88 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_123;
    }
    v186 = *(id *)(*(_QWORD *)(v185 + 56) + 8 * v86);

    v89 = v71;
    swift_bridgeObjectRetain_n(v71, 2);
    v90 = v85;
    swift_retain_n(v64);
    v91 = v90;
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.default.getter(v92);
    v184 = v91;
    if (os_log_type_enabled(v92, v93))
    {
      type = v92;
      v94 = swift_slowAlloc(42, -1);
      logb = (os_log_t)swift_slowAlloc(8, -1);
      v192 = swift_slowAlloc(96, -1);
      p_isa = (_QWORD *)v192;
      *(_DWORD *)v94 = 136446978;
      v217 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
      *(_WORD *)(v94 + 12) = 2082;
      sub_1000184A8(v178, (uint64_t)v222);
      sub_100671124((uint64_t)v222, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v96 = v95;
      v98 = v97;
      sub_100671124((uint64_t)v222, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v217 = (_QWORD *)sub_10001A820(v96, v98, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
      swift_release_n(v64);
      swift_bridgeObjectRelease();
      *(_WORD *)(v94 + 22) = 2114;
      v217 = v91;
      v99 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
      logb->isa = (Class)v91;

      *(_WORD *)(v94 + 32) = 2082;
      v100 = v189[2];
      if (v100)
      {
        v217 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v100, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v101 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v103 = v102;
      swift_bridgeObjectRelease();
      v217 = (_QWORD *)sub_10001A820(v101, v103, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, type, v93, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v94, 0x2Au);
      v104 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(logb, 1, v104);
      swift_slowDealloc(logb, -1, -1);
      swift_arrayDestroy(v192, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v192, -1, -1);
      swift_slowDealloc(v94, -1, -1);

      v87 = v194;
      v72 = v187;
    }
    else
    {

      swift_release_n(v64);
      swift_bridgeObjectRelease_n(v189, 2);
    }
    v180 = v189[2];
    if (v180)
      break;
LABEL_104:
    swift_bridgeObjectRelease();
    v142 = v179 + 1;
    if (*(_BYTE *)(v64 + 104) == 1)
    {
      v143 = v186;
      -[NSObject updateChangeCount](v143, "updateChangeCount");

    }
    else
    {

    }
    v68 = v179 + 1;
    if (v142 == v196)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_112;
    }
    v69 = &selRef_isConcealed;
    if (v142 >= v87[2])
      goto LABEL_138;
  }
  v105 = 0;
  v106 = v189 + 4;
  while (1)
  {
    if (v105 >= v89[2])
      goto LABEL_137;
    v182 = v105;
    v183 = *((_BYTE *)v106 + v105);
    sub_1001A2004((uint64_t)v72, v183);
    v108 = v107;
    if (!((unint64_t)v107 >> 62))
    {
      v109 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v109)
        break;
      goto LABEL_102;
    }
    v140 = v107 < 0 ? v107 : v107 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v107);
    v109 = _CocoaArrayWrapper.endIndex.getter(v140);
    swift_bridgeObjectRelease();
    if (v109)
      break;
LABEL_102:
    v111 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_103:
    swift_bridgeObjectRelease();
    v141 = sub_1003B101C(v111);
    swift_bridgeObjectRelease();
    v72 = v187;
    sub_1001A22C8(v187, v186, v183, v141);
    swift_bridgeObjectRelease();
    v105 = v182 + 1;
    v89 = v189;
    v64 = v190;
    v106 = v189 + 4;
    if (v182 + 1 == v180)
      goto LABEL_104;
  }
  logc = (os_log_t)(v108 & 0xC000000000000001);
  v110 = 4;
  v111 = (Swift::Int)_swiftEmptyDictionarySingleton;
  *(_QWORD *)typea = v108;
  v193 = v109;
  while (1)
  {
    if (logc)
      v113 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v110 - 4, v108);
    else
      v113 = *(id *)(v108 + 8 * v110);
    v114 = v113;
    v115 = v110 - 3;
    if (__OFADD__(v110 - 4, 1))
      goto LABEL_133;
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v116 = v114;
    v117 = v116;
    if (!*(_QWORD *)(v66 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_115;
    }
    v118 = v116;
    v119 = sub_1002C672C(v118);
    if ((v120 & 1) == 0)
      break;
    v121 = *(id *)(*(_QWORD *)(v66 + 56) + 8 * v119);

    if ((v111 & 0xC000000000000001) != 0)
    {
      if (v111 < 0)
        v122 = v111;
      else
        v122 = v111 & 0xFFFFFFFFFFFFFF8;
      v123 = v121;
      v124 = __CocoaDictionary.count.getter(v122);
      if (__OFADD__(v124, 1))
        goto LABEL_135;
      v111 = sub_100192078(v122, v124 + 1);
    }
    else
    {
      v125 = v121;
    }
    v126 = swift_isUniquelyReferenced_nonNull_native(v111);
    p_isa = (_QWORD *)v111;
    v128 = sub_1002C66DC((uint64_t)v118);
    v129 = *(_QWORD *)(v111 + 16);
    v130 = (v127 & 1) == 0;
    v131 = v129 + v130;
    if (__OFADD__(v129, v130))
      goto LABEL_134;
    v132 = v127;
    if (*(_QWORD *)(v111 + 24) >= v131)
    {
      if ((v126 & 1) == 0)
        sub_1002D73A0();
    }
    else
    {
      sub_1002CF2DC(v131, v126);
      v133 = sub_1002C66DC((uint64_t)v118);
      if ((v132 & 1) != (v134 & 1))
        goto LABEL_140;
      v128 = v133;
    }
    v108 = *(_QWORD *)typea;
    v111 = (Swift::Int)p_isa;
    if ((v132 & 1) != 0)
    {
      v112 = p_isa[7];

      *(_QWORD *)(v112 + 8 * v128) = v121;
    }
    else
    {
      p_isa[(v128 >> 6) + 8] |= 1 << v128;
      v135 = 8 * v128;
      *(_QWORD *)(*(_QWORD *)(v111 + 48) + v135) = v118;
      *(_QWORD *)(*(_QWORD *)(v111 + 56) + v135) = v121;
      v136 = *(_QWORD *)(v111 + 16);
      v137 = __OFADD__(v136, 1);
      v138 = v136 + 1;
      if (v137)
        goto LABEL_136;
      *(_QWORD *)(v111 + 16) = v138;
      v139 = v118;
    }
    v66 = v204;

    swift_bridgeObjectRelease();
    ++v110;
    v87 = v194;
    if (v115 == v193)
      goto LABEL_103;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_115:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain_n(v190);
  v144 = v117;
  v145 = Logger.logObject.getter(v144);
  v146 = static os_log_type_t.error.getter(v145);
  if (os_log_type_enabled(v145, v146))
  {
    v147 = swift_slowAlloc(42, -1);
    logd = (os_log_t)swift_slowAlloc(128, -1);
    p_isa = &logd->isa;
    *(_DWORD *)v147 = 136446978;
    v217 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
    *(_WORD *)(v147 + 12) = 2082;
    sub_1000184A8(v178, (uint64_t)v221);
    sub_100671124((uint64_t)v221, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v149 = v148;
    v151 = v150;
    sub_100671124((uint64_t)v221, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v217 = (_QWORD *)sub_10001A820(v149, v151, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
    swift_release_n(v190);
    *(_QWORD *)&v152 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v147 + 22) = 2080;
    v153 = objc_msgSend(v144, "description", v152);
    v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
    v156 = v155;

    v217 = (_QWORD *)sub_10001A820(v154, v156, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);

    *(_QWORD *)&v157 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v147 + 32) = 2080;
    v158 = objc_msgSend(v144, "description", v157);
    v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v158);
    v161 = v160;

    v217 = (_QWORD *)sub_10001A820(v159, v161, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v145, v146, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v147, 0x2Au);
    swift_arrayDestroy(logd, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(logd, -1, -1);
    swift_slowDealloc(v147, -1, -1);

  }
  else
  {

    swift_release_n(v190);
  }
  v200 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v144);
  swift_willThrow(v200);

}

void sub_10062E19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id *v24;
  char *v25;
  char *v26;
  id v27;
  unint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD);
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  unint64_t v85;
  char **v86;
  id *v87;
  _QWORD *v88;
  id v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  unint64_t v100;
  char v101;
  id v102;
  unint64_t v103;
  char v104;
  _QWORD *v105;
  id v106;
  id v107;
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  id v115;
  int64_t v116;
  _BYTE *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  Swift::Int v138;
  uint64_t v139;
  id v140;
  void *v141;
  id v142;
  void *v143;
  uint64_t v144;
  id v145;
  unint64_t v146;
  char v147;
  id v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  uint64_t v156;
  _BOOL8 v157;
  uint64_t v158;
  char v159;
  unint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  id v170;
  NSObject *v171;
  os_log_type_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  double v178;
  id v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  double v183;
  id v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  id v188;
  id v189;
  NSObject *v190;
  NSObject *v191;
  os_log_type_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  double v198;
  id v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  unint64_t v210;
  os_log_type_t v211;
  char v212;
  uint64_t v213;
  void *v214;
  id v215;
  void *v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  NSObject *v221;
  uint64_t log;
  NSObject *loga;
  os_log_t logb;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  os_log_type_t typec;
  os_log_type_t type[8];
  _QWORD *typea;
  os_log_type_t typeb[8];
  id v232;
  id v233;
  void *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240[16];
  uint64_t *v241;
  NSObject *v242;
  id v243[4];
  _QWORD *v244;
  uint64_t v245;
  unsigned __int8 v246;
  _QWORD *v247;
  uint64_t v248;
  _BYTE v249[48];
  _BYTE v250[48];
  _BYTE v251[56];
  uint64_t v252;

  v5 = v3;
  v252 = a2;
  v9 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v241 = &v252;
  v242 = v5;
  swift_bridgeObjectRetain(v8);
  v10 = sub_100352648((void (*)(__n128 *__return_ptr, id *))sub_1006722C0, (uint64_t)&v240, a1);
  if (v4)
    goto LABEL_2;
  v11 = v10;
  log = a1;
  v218 = a3;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v16 = (char *)v15;
  v221 = v5;
  v225 = v11;
  if (os_log_type_enabled(v14, v15))
  {
    v17 = swift_slowAlloc(42, -1);
    v234 = (void *)swift_slowAlloc(96, -1);
    v243[0] = v234;
    *(_DWORD *)v17 = 136446978;
    v244 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v243);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, &v245);
    *(_WORD *)(v17 + 12) = 2048;
    v244 = (_QWORD *)v11[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, &v245);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 22) = 2082;
    v18 = type metadata accessor for REMCDSavedReminder();
    typec = v16;
    v16 = (char *)objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v21 = v20;

    v22 = v19;
    v11 = v225;
    v244 = (_QWORD *)sub_10001A820(v22, v21, (uint64_t *)v243);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, &v245);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 32) = 2082;
    swift_bridgeObjectRetain(v8);
    v244 = (_QWORD *)sub_10001A820(v9, v8, (uint64_t *)v243);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, &v245);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, typec, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v17, 0x2Au);
    swift_arrayDestroy(v234, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v234, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease();
  }
  v227 = v11[2];
  if (!v227)
    goto LABEL_2;
  v248 = (uint64_t)&_swiftEmptySetSingleton;
  v226 = v11 + 4;
  swift_bridgeObjectRetain(v11);
  v23 = 0;
  while (1)
  {
    if (v23 >= v11[2])
    {
      __break(1u);
LABEL_161:
      __break(1u);
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_2;
    }
    v24 = (id *)&v226[2 * v23];
    v25 = (char *)v24[1];
    v26 = (char *)*((_QWORD *)v25 + 2);
    if (v26)
      break;
LABEL_11:
    if (++v23 == v227)
    {
      swift_bridgeObjectRelease();
      if ((unint64_t)log >> 62)
      {
        if (log < 0)
          v203 = log;
        else
          v203 = log & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(log);
        v46 = _CocoaArrayWrapper.endIndex.getter(v203);
        swift_bridgeObjectRelease();
      }
      else
      {
        v46 = *(_QWORD *)((log & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v46)
      {
        v243[0] = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v46);
        if (v46 < 0)
        {
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
          goto LABEL_178;
        }
        v47 = 0;
        v48 = log;
        do
        {
          if (v46 == v47)
            goto LABEL_161;
          if ((log & 0xC000000000000001) != 0)
            v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v48);
          else
            v49 = *(id *)(v48 + 8 * v47 + 32);
          v50 = v49;
          v51 = sub_1005CDB68(objc_msgSend(v50, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder, 0xD000000000000012, (void *)0x80000001006FA060);
          ++v47;

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v52);
          v16 = (char *)*((_QWORD *)v243[0] + 2);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
          v53 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v51);
          specialized ContiguousArray._endMutation()(v53);
          v48 = log;
        }
        while (v46 != v47);
        typea = v243[0];
        v11 = v225;
      }
      else
      {
        typea = _swiftEmptyArrayStorage;
      }
      v54 = v248;
      if ((v248 & 0xC000000000000001) != 0)
      {
        if (v248 < 0)
          v55 = v248;
        else
          v55 = v248 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v248);
        v56 = __CocoaSet.count.getter(v55);
        if (v56)
        {
          v57 = v56;
          v247 = _swiftEmptyArrayStorage;
          v14 = &v247;
          specialized ContiguousArray.reserveCapacity(_:)(v56);
          v244 = (_QWORD *)__CocoaSet.startIndex.getter(v55);
          v245 = v58;
          v246 = 1;
          if (v57 < 0)
          {
            __break(1u);
LABEL_58:
            __break(1u);

            swift_release(v243[0]);
LABEL_77:
            swift_bridgeObjectRelease();
LABEL_2:
            swift_bridgeObjectRelease();
            return;
          }
          goto LABEL_61;
        }
      }
      else
      {
        v57 = *(_QWORD *)(v248 + 16);
        swift_bridgeObjectRetain(v248);
        if (v57)
        {
          v247 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v57);
          v244 = (_QWORD *)sub_100364E8C(v54);
          v245 = v59;
          v246 = v60 & 1;
LABEL_61:
          v61 = v54 & 0xFFFFFFFFFFFFFF8;
          if (v54 < 0)
            v61 = v54;
          v235 = v61;
          do
          {
            while (1)
            {
              v68 = (uint64_t)v244;
              v67 = v245;
              v69 = v246;
              sub_100364660((uint64_t)v244, v245, v246, v54);
              v71 = v70;
              sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
              v72 = v71;

              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v73);
              v74 = v247[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v74);
              v75 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v74, v72);
              specialized ContiguousArray._endMutation()(v75);
              if ((v54 & 0xC000000000000001) != 0)
                break;
              v62 = sub_10036456C(v68, v67, v69, v54);
              v64 = v63;
              v66 = v65;
              sub_1000E515C(v68, v67, v69);
              v244 = (_QWORD *)v62;
              v245 = v64;
              v246 = v66 & 1;
              v11 = v225;
              if (!--v57)
                goto LABEL_71;
            }
            if ((v69 & 1) == 0)
              goto LABEL_180;
            v76 = __CocoaSet.Index.handleBitPattern.getter(v68, v67);
            if (v76)
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v76);
            else
              isUniquelyReferenced_nonNull_native = 1;
            v11 = v225;
            v78 = sub_10001A630(&qword_1008466D8);
            v79 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v243, v78);
            __CocoaSet.formIndex(after:isUnique:)(v80, isUniquelyReferenced_nonNull_native, v235);
            v79(v243, 0);
            --v57;
          }
          while (v57);
LABEL_71:
          sub_1000E515C((uint64_t)v244, v245, v246);
          v81 = v247;
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }
      }
      swift_bridgeObjectRelease();
      v81 = _swiftEmptyArrayStorage;
LABEL_73:
      v38 = v218;
      v14 = v221;
      sub_1006446F0((uint64_t)v81, v218);
      v16 = 0;
      v27 = typea;
      goto LABEL_75;
    }
  }
  *(_QWORD *)type = v23;
  v11 = v25 + 32;
  v27 = *v24;
  v28 = swift_bridgeObjectRetain(v25).n128_u64[0];
  v16 = 0;
  while (1)
  {
    if ((unint64_t)v16 >= *((_QWORD *)v25 + 2))
      goto LABEL_58;
    if ((v16[(_QWORD)v11] & 1) != 0)
      break;
    v39 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v40 = swift_allocObject(v39, 40, 7);
    *(_OWORD *)(v40 + 16) = xmmword_1006A7330;
    v41 = objc_msgSend(v27, "accountID");
    *(_QWORD *)(v40 + 32) = v41;
    v243[0] = (id)v40;
    v14 = v243;
    v36 = specialized Array._endMutation()(v41);
    v31 = (uint64_t)v243[0];
    if ((unint64_t)v243[0] >> 62)
      goto LABEL_23;
LABEL_29:
    v38 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v38)
      goto LABEL_30;
LABEL_15:
    v28 = swift_bridgeObjectRelease().n128_u64[0];
    if (++v16 == v26)
    {

      swift_bridgeObjectRelease();
      v11 = v225;
      v23 = *(_QWORD *)type;
      goto LABEL_11;
    }
  }
  v29 = objc_msgSend(v27, "listID", *(double *)&v28);
  v30 = v29;
  v31 = (uint64_t)_swiftEmptyArrayStorage;
  v243[0] = _swiftEmptyArrayStorage;
  if (v29)
  {
    v32 = v29;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
    v34 = *(_QWORD *)(((unint64_t)v243[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v33 = *(_QWORD *)(((unint64_t)v243[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v34 >= v33 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1);
    v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v32);
    v14 = v243;
    specialized Array._endMutation()(v35);
    v31 = (uint64_t)v243[0];
  }

  if (!((unint64_t)v31 >> 62))
    goto LABEL_29;
LABEL_23:
  if (v31 < 0)
    v37 = v31;
  else
    v37 = v31 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v31);
  v38 = _CocoaArrayWrapper.endIndex.getter(v37);
  swift_bridgeObjectRelease();
  if (!v38)
    goto LABEL_15;
LABEL_30:
  if (v38 >= 1)
  {
    if ((v31 & 0xC000000000000001) != 0)
    {
      v42 = 0;
      do
      {
        v43 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v42++, v31);
        v14 = &v248;
        sub_1002DB2CC((Swift::Int *)v243, v43);

      }
      while (v38 != v42);
    }
    else
    {
      v44 = 0;
      do
      {
        v45 = *(void **)(v31 + 8 * v44++ + 32);
        v14 = &v248;
        sub_1002DB2CC((Swift::Int *)v243, v45);

      }
      while (v38 != v44);
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_75:
  v82 = v36;
  swift_bridgeObjectRelease();
  sub_10064A1B0((uint64_t)v27, v38);
  if (v16)
  {
LABEL_76:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
  v84 = v14;
  v213 = v83;
  swift_bridgeObjectRelease();
  v209 = (uint64_t *)(v38 + 48);
  swift_beginAccess(v38 + 48, v243, 0, 0);
  if (!v11[2])
    goto LABEL_179;
  v85 = 0;
  v206 = (uint64_t)&v14[3];
  v86 = &selRef_isConcealed;
  *(_QWORD *)typeb = v82;
  while (2)
  {
    v207 = v85;
    v87 = (id *)&v226[2 * v85];
    v88 = v87[1];
    v89 = *v87;
    v217 = v88;
    v90 = objc_msgSend(v89, v86[432], swift_bridgeObjectRetain(v88).n128_f64[0]);
    v91 = sub_1005CDB68(v90, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder, 0xD000000000000012, (void *)0x80000001006FA060);

    v92 = *v209;
    v216 = v89;
    if ((*v209 & 0xC000000000000001) != 0)
    {
      if (v92 < 0)
        v93 = *v209;
      else
        v93 = v92 & 0xFFFFFFFFFFFFFF8;
      v94 = v91;
      swift_bridgeObjectRetain(v92);
      v95 = __CocoaDictionary.lookup(_:)(v94, v93);
      if (v95)
      {
        v96 = v95;
        v247 = (_QWORD *)v95;
        v97 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v96);
        swift_dynamicCast(&v244, &v247, (char *)&type metadata for Swift.AnyObject + 8, v97, 7);
        v98 = v244;
        swift_unknownObjectRelease(v96);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v98 = 0;
      }
      v84 = v221;
      v89 = v216;
      v82 = *(_QWORD *)typeb;
    }
    else if (*(_QWORD *)(v92 + 16))
    {
      v99 = v91;
      swift_bridgeObjectRetain(v92);
      v100 = sub_1002C66DC((uint64_t)v99);
      if ((v101 & 1) != 0)
      {
        v98 = *(id *)(*(_QWORD *)(v92 + 56) + 8 * v100);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v98 = 0;
      }
      v84 = v221;
    }
    else
    {
      v98 = 0;
    }

    if (!*(_QWORD *)(v213 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_164:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v188 = v91;
      swift_retain_n(v84);
      v189 = v188;
      v190 = Logger.logObject.getter(v189);
      v191 = v84;
      v192 = static os_log_type_t.error.getter(v190);
      if (os_log_type_enabled(v190, v192))
      {
        v193 = swift_slowAlloc(32, -1);
        v239 = swift_slowAlloc(96, -1);
        v244 = (_QWORD *)v239;
        *(_DWORD *)v193 = 136446722;
        v247 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v244);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
        *(_WORD *)(v193 + 12) = 2082;
        sub_1000184A8(v206, (uint64_t)v249);
        sub_100671124((uint64_t)v249, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v195 = v194;
        v197 = v196;
        sub_100671124((uint64_t)v249, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v247 = (_QWORD *)sub_10001A820(v195, v197, (uint64_t *)&v244);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
        swift_release_n(v191);
        *(_QWORD *)&v198 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v193 + 22) = 2080;
        v199 = objc_msgSend(v189, "description", v198);
        v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v199);
        v202 = v201;

        v247 = (_QWORD *)sub_10001A820(v200, v202, (uint64_t *)&v244);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v190, v192, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v193, 0x20u);
        swift_arrayDestroy(v239, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v239, -1, -1);
        swift_slowDealloc(v193, -1, -1);

      }
      else
      {

        swift_release_n(v191);
      }
      v233 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v189);
      swift_willThrow(v233);

      return;
    }
    v102 = v91;
    v103 = sub_1002C672C(v102);
    if ((v104 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v84 = v221;
      goto LABEL_164;
    }
    v215 = *(id *)(*(_QWORD *)(v213 + 56) + 8 * v103);

    v105 = v88;
    swift_bridgeObjectRetain_n(v88, 2);
    v106 = v102;
    v84 = v221;
    swift_retain_n(v221);
    v107 = v106;
    v108 = Logger.logObject.getter(v107);
    v109 = static os_log_type_t.default.getter(v108);
    v214 = v107;
    if (os_log_type_enabled(v108, v109))
    {
      v211 = v109;
      loga = v108;
      v110 = swift_slowAlloc(42, -1);
      v236 = (_QWORD *)swift_slowAlloc(8, -1);
      v219 = swift_slowAlloc(96, -1);
      v244 = (_QWORD *)v219;
      *(_DWORD *)v110 = 136446978;
      v247 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v244);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
      *(_WORD *)(v110 + 12) = 2082;
      sub_1000184A8(v206, (uint64_t)v251);
      sub_100671124((uint64_t)v251, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v112 = v111;
      v114 = v113;
      sub_100671124((uint64_t)v251, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v247 = (_QWORD *)sub_10001A820(v112, v114, (uint64_t *)&v244);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
      swift_release_n(v221);
      swift_bridgeObjectRelease();
      *(_WORD *)(v110 + 22) = 2114;
      v247 = v107;
      v115 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
      *v236 = v107;

      *(_WORD *)(v110 + 32) = 2082;
      v116 = v217[2];
      if (v116)
      {
        v247 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v116, 0);
        v117 = v217;
        v118 = 0;
        v119 = v247;
        v120 = v247[2];
        v121 = 2 * v120;
        do
        {
          v122 = v120 + v118;
          if (v117[v118 + 32])
            v123 = 0x44497473696CLL;
          else
            v123 = 0x49746E756F636361;
          if (v117[v118 + 32])
            v124 = 0xE600000000000000;
          else
            v124 = 0xE900000000000044;
          v247 = v119;
          v125 = v119[3];
          v126 = v122 + 1;
          if (v122 >= v125 >> 1)
          {
            sub_1001C1B0C(v125 > 1, v122 + 1, 1);
            v117 = v217;
            v119 = v247;
          }
          ++v118;
          v119[2] = v126;
          v127 = &v119[v121];
          v127[4] = v123;
          v127[5] = v124;
          v121 += 2;
        }
        while (v116 != v118);
        v105 = v117;
        swift_bridgeObjectRelease();
        v11 = v225;
        v82 = *(_QWORD *)typeb;
        v107 = v214;
      }
      else
      {
        swift_bridgeObjectRelease();
        v119 = _swiftEmptyArrayStorage;
      }
      v128 = Array.description.getter(v119, &type metadata for String);
      v130 = v129;
      swift_bridgeObjectRelease();
      v247 = (_QWORD *)sub_10001A820(v128, v130, (uint64_t *)&v244);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v211, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v110, 0x2Au);
      v131 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v236, 1, v131);
      swift_slowDealloc(v236, -1, -1);
      swift_arrayDestroy(v219, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v219, -1, -1);
      swift_slowDealloc(v110, -1, -1);

      v84 = v221;
      v89 = v216;
    }
    else
    {

      swift_release_n(v221);
      swift_bridgeObjectRelease_n(v88, 2);
    }
    v208 = v105[2];
    if (!v208)
    {
LABEL_146:
      swift_bridgeObjectRelease();
      if (LOBYTE(v84[13].isa) == 1)
      {
        v169 = v215;
        objc_msgSend(v169, "updateChangeCount");

        v84 = v221;
      }
      else
      {

      }
      v85 = v207 + 1;
      if (v207 + 1 == v227)
        goto LABEL_76;
      v86 = &selRef_isConcealed;
      if (v85 >= v11[2])
        goto LABEL_179;
      continue;
    }
    break;
  }
  v132 = 0;
  v133 = v105 + 4;
  v205 = v105 + 4;
  while (v132 < v105[2])
  {
    v212 = *((_BYTE *)v133 + v132);
    v134 = (uint64_t)sub_1004779B0(v89, v212);
    v135 = v134;
    if ((unint64_t)v134 >> 62)
    {
      if (v134 < 0)
        v167 = v134;
      else
        v167 = v134 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v134);
      v136 = _CocoaArrayWrapper.endIndex.getter(v167);
      swift_bridgeObjectRelease();
      v210 = v132;
      if (v136)
      {
LABEL_115:
        logb = (os_log_t)(v135 & 0xC000000000000001);
        v137 = 4;
        v138 = (Swift::Int)_swiftEmptyDictionarySingleton;
        v220 = v135;
        while (1)
        {
          if (logb)
            v140 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v137 - 4, v135);
          else
            v140 = *(id *)(v135 + 8 * v137);
          v141 = v140;
          if (__OFADD__(v137 - 4, 1))
            goto LABEL_174;
          sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
          v142 = v141;
          v143 = v142;
          if (!*(_QWORD *)(v82 + 16))
            break;
          v237 = v137 - 3;
          v144 = v136;
          v145 = v142;
          v146 = sub_1002C672C(v145);
          if ((v147 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_156;
          }
          v148 = *(id *)(*(_QWORD *)(v82 + 56) + 8 * v146);

          if ((v138 & 0xC000000000000001) != 0)
          {
            if (v138 < 0)
              v149 = v138;
            else
              v149 = v138 & 0xFFFFFFFFFFFFFF8;
            v150 = v148;
            v151 = __CocoaDictionary.count.getter(v149);
            if (__OFADD__(v151, 1))
              goto LABEL_176;
            v138 = sub_100192078(v149, v151 + 1);
          }
          else
          {
            v152 = v148;
          }
          v153 = swift_isUniquelyReferenced_nonNull_native(v138);
          v244 = (_QWORD *)v138;
          v155 = sub_1002C66DC((uint64_t)v145);
          v156 = *(_QWORD *)(v138 + 16);
          v157 = (v154 & 1) == 0;
          v158 = v156 + v157;
          if (__OFADD__(v156, v157))
            goto LABEL_175;
          v159 = v154;
          if (*(_QWORD *)(v138 + 24) >= v158)
          {
            if ((v153 & 1) == 0)
              sub_1002D73A0();
          }
          else
          {
            sub_1002CF2DC(v158, v153);
            v160 = sub_1002C66DC((uint64_t)v145);
            if ((v159 & 1) != (v161 & 1))
              goto LABEL_181;
            v155 = v160;
          }
          v82 = *(_QWORD *)typeb;
          v138 = (Swift::Int)v244;
          if ((v159 & 1) != 0)
          {
            v139 = v244[7];

            *(_QWORD *)(v139 + 8 * v155) = v148;
          }
          else
          {
            v244[(v155 >> 6) + 8] |= 1 << v155;
            v162 = 8 * v155;
            *(_QWORD *)(*(_QWORD *)(v138 + 48) + v162) = v145;
            *(_QWORD *)(*(_QWORD *)(v138 + 56) + v162) = v148;
            v163 = *(_QWORD *)(v138 + 16);
            v164 = __OFADD__(v163, 1);
            v165 = v163 + 1;
            if (v164)
              goto LABEL_177;
            *(_QWORD *)(v138 + 16) = v165;
            v166 = v145;
          }
          v11 = v225;
          v135 = v220;

          swift_bridgeObjectRelease();
          ++v137;
          v136 = v144;
          if (v237 == v144)
            goto LABEL_145;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_156:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_retain_n(v221);
        v170 = v143;
        v171 = Logger.logObject.getter(v170);
        v172 = static os_log_type_t.error.getter(v171);
        if (os_log_type_enabled(v171, v172))
        {
          v173 = swift_slowAlloc(42, -1);
          v238 = swift_slowAlloc(128, -1);
          v244 = (_QWORD *)v238;
          *(_DWORD *)v173 = 136446978;
          v247 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v244);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
          *(_WORD *)(v173 + 12) = 2082;
          sub_1000184A8(v206, (uint64_t)v250);
          sub_100671124((uint64_t)v250, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v175 = v174;
          v177 = v176;
          sub_100671124((uint64_t)v250, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          v247 = (_QWORD *)sub_10001A820(v175, v177, (uint64_t *)&v244);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);
          swift_release_n(v221);
          *(_QWORD *)&v178 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v173 + 22) = 2080;
          v179 = objc_msgSend(v170, "description", v178);
          v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
          v182 = v181;

          v247 = (_QWORD *)sub_10001A820(v180, v182, (uint64_t *)&v244);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);

          *(_QWORD *)&v183 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v173 + 32) = 2080;
          v184 = objc_msgSend(v170, "description", v183);
          v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
          v187 = v186;

          v247 = (_QWORD *)sub_10001A820(v185, v187, (uint64_t *)&v244);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, &v248);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v171, v172, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v173, 0x2Au);
          swift_arrayDestroy(v238, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v238, -1, -1);
          swift_slowDealloc(v173, -1, -1);

        }
        else
        {

          swift_release_n(v221);
        }
        v232 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v170);
        swift_willThrow(v232);

        return;
      }
    }
    else
    {
      v136 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
      v210 = v132;
      if (v136)
        goto LABEL_115;
    }
    v138 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_145:
    swift_bridgeObjectRelease();
    v168 = sub_1003B101C(v138);
    swift_bridgeObjectRelease();
    v89 = v216;
    sub_100477AC8(v216, v215, v212, v168);
    v132 = v210 + 1;
    swift_bridgeObjectRelease();
    v84 = v221;
    v107 = v214;
    v105 = v217;
    v133 = v205;
    if (v210 + 1 == v208)
      goto LABEL_146;
  }
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  v204 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v204);
  __break(1u);
}

void sub_10062FC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  id *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  void (*v62)(_QWORD, _QWORD);
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char **v70;
  id *v71;
  int64_t *v72;
  id v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  unint64_t v83;
  char v84;
  id v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  int64_t *v89;
  id v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  id v100;
  int64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  Swift::Int v112;
  uint64_t v113;
  id v114;
  void *v115;
  id v116;
  void *v117;
  id v118;
  unint64_t v119;
  char v120;
  id v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  char v127;
  unint64_t v128;
  uint64_t v129;
  _BOOL8 v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  id v142;
  id v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  double v151;
  id v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  double v156;
  id v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  id v161;
  id v162;
  NSObject *v163;
  uint64_t v164;
  os_log_type_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  double v171;
  id v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  void *v184;
  uint64_t v185;
  id v186;
  int64_t *v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  os_log_type_t typec;
  uint64_t type;
  uint64_t typea;
  unint64_t typeb;
  id v202;
  id v203;
  _QWORD *logc;
  uint64_t log;
  NSObject *loga;
  uint64_t logb;
  uint64_t logd;
  uint64_t loge;
  char v210[16];
  uint64_t *v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  unsigned __int8 v216;
  _QWORD *v217;
  uint64_t v218;
  _BYTE v219[48];
  _BYTE v220[48];
  _BYTE v221[56];
  uint64_t v222;

  v5 = v3;
  v222 = a2;
  v9 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v211 = &v222;
  v212 = v5;
  swift_bridgeObjectRetain(v8);
  v10 = sub_100352664((void (*)(__n128 *__return_ptr, id *))sub_1006724A0, (uint64_t)&v210, a1);
  if (v4)
    goto LABEL_2;
  v11 = v10;
  v193 = a1;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v190 = a3;
  v192 = v5;
  v195 = v11;
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(42, -1);
    logc = (_QWORD *)swift_slowAlloc(96, -1);
    v213 = logc;
    *(_DWORD *)v16 = 136446978;
    v214 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215);
    *(_WORD *)(v16 + 12) = 2048;
    v214 = (_QWORD *)v195[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v17 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    typec = v15;
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v214 = (_QWORD *)sub_10001A820(v19, v21, (uint64_t *)&v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 2082;
    swift_bridgeObjectRetain(v8);
    v214 = (_QWORD *)sub_10001A820(v9, v8, (uint64_t *)&v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, typec, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy(logc, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(logc, -1, -1);
    v22 = v16;
    v11 = v195;
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease();
  }
  v197 = v11[2];
  if (!v197)
    goto LABEL_2;
  v218 = (uint64_t)&_swiftEmptySetSingleton;
  v196 = v11 + 4;
  swift_bridgeObjectRetain(v11);
  v23 = 0;
  v24 = _swiftEmptyArrayStorage;
  do
  {
    if (v23 >= v11[2])
    {
      __break(1u);
LABEL_120:
      __break(1u);
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_2;
    }
    v25 = (id *)&v196[2 * v23];
    v26 = v25[1];
    if (v26[2])
    {
      v27 = *v25;
      swift_bridgeObjectRetain(v26);
      if (v26[2])
        __asm { BR              X9 }
      __break(1u);

      swift_release(v213);
LABEL_112:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      return;
    }
    ++v23;
  }
  while (v23 != v197);
  swift_bridgeObjectRelease();
  v24 = (_QWORD *)v193;
  if ((unint64_t)v193 >> 62)
  {
    if (v193 < 0)
      v176 = v193;
    else
      v176 = v193 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v193);
    v28 = _CocoaArrayWrapper.endIndex.getter(v176);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = *(_QWORD *)((v193 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v29 = _swiftEmptyArrayStorage;
  if (v28)
  {
    v213 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v28);
    if (v28 < 0)
    {
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      v177 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v177);
      __break(1u);
      JUMPOUT(0x100631944);
    }
    v30 = 0;
    do
    {
      if (v28 == v30)
        goto LABEL_120;
      if ((v193 & 0xC000000000000001) != 0)
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v24);
      else
        v31 = (id)v24[v30 + 4];
      v32 = v31;
      v33 = sub_1005CBC20(objc_msgSend(v32, "remObjectID"));
      ++v30;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v34);
      v35 = v213[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v35);
      v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v33);
      specialized ContiguousArray._endMutation()(v36);
      v24 = (_QWORD *)v193;
    }
    while (v28 != v30);
    v29 = v213;
  }
  type = (uint64_t)v29;
  v37 = v218;
  if ((v218 & 0xC000000000000001) != 0)
  {
    if (v218 < 0)
      v38 = v218;
    else
      v38 = v218 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v218);
    v39 = __CocoaSet.count.getter(v38);
    if (v39)
    {
      v40 = v39;
      v217 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v39);
      v214 = (_QWORD *)__CocoaSet.startIndex.getter(v38);
      v215 = v41;
      v216 = 1;
      if (v40 < 0)
      {
        __break(1u);
        goto LABEL_2;
      }
      goto LABEL_37;
    }
  }
  else
  {
    v40 = *(_QWORD *)(v218 + 16);
    swift_bridgeObjectRetain(v218);
    if (v40)
    {
      v217 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v40);
      v214 = (_QWORD *)sub_100364E8C(v37);
      v215 = v42;
      v216 = v43 & 1;
LABEL_37:
      v44 = v37 & 0xFFFFFFFFFFFFFF8;
      if (v37 < 0)
        v44 = v37;
      log = v44;
      do
      {
        while (1)
        {
          v51 = (uint64_t)v214;
          v50 = v215;
          v52 = v216;
          sub_100364660((uint64_t)v214, v215, v216, v37);
          v54 = v53;
          sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
          v55 = v54;

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v56);
          v57 = v217[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v57);
          v58 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v55);
          specialized ContiguousArray._endMutation()(v58);
          if ((v37 & 0xC000000000000001) != 0)
            break;
          v45 = sub_10036456C(v51, v50, v52, v37);
          v47 = v46;
          v49 = v48;
          sub_1000E515C(v51, v50, v52);
          v214 = (_QWORD *)v45;
          v215 = v47;
          v216 = v49 & 1;
          if (!--v40)
            goto LABEL_47;
        }
        if ((v52 & 1) == 0)
          goto LABEL_138;
        v59 = __CocoaSet.Index.handleBitPattern.getter(v51, v50);
        if (v59)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v61 = sub_10001A630(&qword_1008466D8);
        v62 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(&v213, v61);
        __CocoaSet.formIndex(after:isUnique:)(v63, isUniquelyReferenced_nonNull_native, log);
        v62(&v213, 0);
        --v40;
      }
      while (v40);
LABEL_47:
      sub_1000E515C((uint64_t)v214, v215, v216);
      v64 = v217;
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
  }
  swift_bridgeObjectRelease();
  v64 = _swiftEmptyArrayStorage;
LABEL_49:
  sub_1006446F0((uint64_t)v64, v190);
  v66 = v65;
  swift_bridgeObjectRelease();
  sub_10064A5D0(type, v190);
  v185 = v67;
  swift_bridgeObjectRelease();
  v68 = (uint64_t *)(v190 + 48);
  swift_beginAccess(v190 + 48, &v213, 0, 0);
  if (!v195[2])
  {
LABEL_111:
    __break(1u);
    JUMPOUT(0x1006311E8);
  }
  v69 = 0;
  v179 = v192 + 24;
  v70 = &selRef_isConcealed;
  v178 = (uint64_t *)(v190 + 48);
  v194 = v66;
  while (1)
  {
    v180 = v69;
    v71 = (id *)&v196[2 * v69];
    v72 = (int64_t *)v71[1];
    v73 = *v71;
    v187 = v72;
    v74 = objc_msgSend(v73, v70[432], swift_bridgeObjectRetain(v72).n128_f64[0]);
    v75 = sub_1005CBC20(v74);

    v76 = *v68;
    v188 = v73;
    if ((*v68 & 0xC000000000000001) != 0)
    {
      if (v76 < 0)
        v77 = *v68;
      else
        v77 = v76 & 0xFFFFFFFFFFFFFF8;
      v78 = v75;
      swift_bridgeObjectRetain(v76);
      v79 = __CocoaDictionary.lookup(_:)(v78, v77);
      if (v79)
      {
        v80 = v79;
        v217 = (_QWORD *)v79;
        v81 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v80);
        swift_dynamicCast(&v214, &v217, (char *)&type metadata for Swift.AnyObject + 8, v81, 7);
        v82 = v214;
        swift_unknownObjectRelease(v80);
LABEL_60:

        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
LABEL_61:

      swift_bridgeObjectRelease();
      goto LABEL_62;
    }
    if (*(_QWORD *)(v76 + 16))
    {
      v78 = v75;
      swift_bridgeObjectRetain(v76);
      v83 = sub_1002C66DC((uint64_t)v78);
      if ((v84 & 1) != 0)
      {
        v82 = *(id *)(*(_QWORD *)(v76 + 56) + 8 * v83);
        goto LABEL_60;
      }
      goto LABEL_61;
    }
LABEL_62:
    v82 = 0;
LABEL_63:

    if (!*(_QWORD *)(v185 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v87 = v192;
LABEL_123:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v161 = v75;
      swift_retain_n(v87);
      v162 = v161;
      v163 = Logger.logObject.getter(v162);
      v164 = v87;
      v165 = static os_log_type_t.error.getter(v163);
      if (os_log_type_enabled(v163, v165))
      {
        v166 = swift_slowAlloc(32, -1);
        loge = swift_slowAlloc(96, -1);
        v214 = (_QWORD *)loge;
        *(_DWORD *)v166 = 136446722;
        v217 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
        *(_WORD *)(v166 + 12) = 2082;
        sub_1000184A8(v179, (uint64_t)v219);
        sub_100671124((uint64_t)v219, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v168 = v167;
        v170 = v169;
        sub_100671124((uint64_t)v219, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v217 = (_QWORD *)sub_10001A820(v168, v170, (uint64_t *)&v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
        swift_release_n(v164);
        *(_QWORD *)&v171 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v166 + 22) = 2080;
        v172 = objc_msgSend(v162, "description", v171);
        v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v172);
        v175 = v174;

        v217 = (_QWORD *)sub_10001A820(v173, v175, (uint64_t *)&v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v163, v165, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v166, 0x20u);
        swift_arrayDestroy(loge, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(loge, -1, -1);
        swift_slowDealloc(v166, -1, -1);

      }
      else
      {

        swift_release_n(v164);
      }
      v203 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v162);
      swift_willThrow(v203);

      return;
    }
    v85 = v75;
    v86 = sub_1002C672C(v85);
    v87 = v192;
    if ((v88 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_123;
    }
    v186 = *(id *)(*(_QWORD *)(v185 + 56) + 8 * v86);

    v89 = v187;
    swift_bridgeObjectRetain_n(v187, 2);
    v90 = v85;
    swift_retain_n(v192);
    v91 = v90;
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.default.getter(v92);
    v184 = v91;
    if (os_log_type_enabled(v92, v93))
    {
      loga = v92;
      v94 = swift_slowAlloc(42, -1);
      v95 = (_QWORD *)swift_slowAlloc(8, -1);
      typea = swift_slowAlloc(96, -1);
      v214 = (_QWORD *)typea;
      *(_DWORD *)v94 = 136446978;
      v217 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
      *(_WORD *)(v94 + 12) = 2082;
      sub_1000184A8(v179, (uint64_t)v221);
      sub_100671124((uint64_t)v221, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v97 = v96;
      v99 = v98;
      sub_100671124((uint64_t)v221, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v217 = (_QWORD *)sub_10001A820(v97, v99, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
      swift_release_n(v192);
      swift_bridgeObjectRelease();
      *(_WORD *)(v94 + 22) = 2114;
      v217 = v91;
      v100 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
      *v95 = v91;

      *(_WORD *)(v94 + 32) = 2082;
      v101 = v187[2];
      if (v101)
      {
        v217 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v101, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v102 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v104 = v103;
      swift_bridgeObjectRelease();
      v217 = (_QWORD *)sub_10001A820(v102, v104, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, v93, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v94, 0x2Au);
      v105 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v95, 1, v105);
      swift_slowDealloc(v95, -1, -1);
      swift_arrayDestroy(typea, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typea, -1, -1);
      swift_slowDealloc(v94, -1, -1);

      v87 = v192;
    }
    else
    {

      swift_release_n(v192);
      swift_bridgeObjectRelease_n(v187, 2);
    }
    v181 = v187[2];
    if (v181)
      break;
LABEL_106:
    swift_bridgeObjectRelease();
    v141 = v180 + 1;
    if (*(_BYTE *)(v87 + 104) == 1)
    {
      v142 = v186;
      objc_msgSend(v142, "updateChangeCount");

    }
    else
    {

    }
    v68 = v178;
    v69 = v180 + 1;
    if (v141 == v197)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_112;
    }
    v70 = &selRef_isConcealed;
    if (v141 >= v195[2])
      goto LABEL_111;
  }
  v106 = 0;
  v107 = v187 + 4;
  while (1)
  {
    if (v106 >= v89[2])
      goto LABEL_137;
    v183 = *((_BYTE *)v107 + v106);
    sub_10022C004((uint64_t)v188, v183);
    v109 = v108;
    if (!((unint64_t)v108 >> 62))
    {
      v110 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10);
      v182 = v106;
      if (v110)
        break;
      goto LABEL_104;
    }
    v139 = v108 < 0 ? v108 : v108 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v108);
    v110 = _CocoaArrayWrapper.endIndex.getter(v139);
    swift_bridgeObjectRelease();
    v182 = v106;
    if (v110)
      break;
LABEL_104:
    v112 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_105:
    swift_bridgeObjectRelease();
    v140 = sub_1003B101C(v112);
    swift_bridgeObjectRelease();
    sub_10022C218(v188, v186, v183, v140);
    v106 = v182 + 1;
    swift_bridgeObjectRelease();
    v89 = v187;
    v107 = v187 + 4;
    if (v182 + 1 == v181)
      goto LABEL_106;
  }
  typeb = v109 & 0xC000000000000001;
  v111 = 4;
  v112 = (Swift::Int)_swiftEmptyDictionarySingleton;
  v191 = v109;
  v189 = v110;
  while (1)
  {
    if (typeb)
      v114 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v111 - 4, v109);
    else
      v114 = *(id *)(v109 + 8 * v111);
    v115 = v114;
    if (__OFADD__(v111 - 4, 1))
      goto LABEL_133;
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v116 = v115;
    v117 = v116;
    if (!*(_QWORD *)(v66 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_115;
    }
    v118 = v116;
    v119 = sub_1002C672C(v118);
    if ((v120 & 1) == 0)
      break;
    v121 = *(id *)(*(_QWORD *)(v66 + 56) + 8 * v119);

    logb = v111 - 3;
    if ((v112 & 0xC000000000000001) != 0)
    {
      if (v112 < 0)
        v122 = v112;
      else
        v122 = v112 & 0xFFFFFFFFFFFFFF8;
      v123 = v121;
      v124 = __CocoaDictionary.count.getter(v122);
      if (__OFADD__(v124, 1))
        goto LABEL_135;
      v112 = sub_100192078(v122, v124 + 1);
    }
    else
    {
      v125 = v121;
    }
    v126 = swift_isUniquelyReferenced_nonNull_native(v112);
    v214 = (_QWORD *)v112;
    v128 = sub_1002C66DC((uint64_t)v118);
    v129 = *(_QWORD *)(v112 + 16);
    v130 = (v127 & 1) == 0;
    v131 = v129 + v130;
    if (__OFADD__(v129, v130))
      goto LABEL_134;
    v132 = v127;
    if (*(_QWORD *)(v112 + 24) >= v131)
    {
      if ((v126 & 1) == 0)
        sub_1002D73A0();
    }
    else
    {
      sub_1002CF2DC(v131, v126);
      v133 = sub_1002C66DC((uint64_t)v118);
      if ((v132 & 1) != (v134 & 1))
        goto LABEL_139;
      v128 = v133;
    }
    v112 = (Swift::Int)v214;
    if ((v132 & 1) != 0)
    {
      v113 = v214[7];

      *(_QWORD *)(v113 + 8 * v128) = v121;
    }
    else
    {
      v214[(v128 >> 6) + 8] |= 1 << v128;
      *(_QWORD *)(*(_QWORD *)(v112 + 48) + 8 * v128) = v118;
      *(_QWORD *)(*(_QWORD *)(v112 + 56) + 8 * v128) = v121;
      v135 = *(_QWORD *)(v112 + 16);
      v136 = __OFADD__(v135, 1);
      v137 = v135 + 1;
      if (v136)
        goto LABEL_136;
      *(_QWORD *)(v112 + 16) = v137;
      v138 = v118;
    }
    v66 = v194;
    v109 = v191;

    swift_bridgeObjectRelease();
    ++v111;
    v87 = v192;
    if (logb == v189)
      goto LABEL_105;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_115:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain_n(v192);
  v143 = v117;
  v144 = Logger.logObject.getter(v143);
  v145 = static os_log_type_t.error.getter(v144);
  if (os_log_type_enabled(v144, v145))
  {
    v146 = swift_slowAlloc(42, -1);
    logd = swift_slowAlloc(128, -1);
    v214 = (_QWORD *)logd;
    *(_DWORD *)v146 = 136446978;
    v217 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
    *(_WORD *)(v146 + 12) = 2082;
    sub_1000184A8(v179, (uint64_t)v220);
    sub_100671124((uint64_t)v220, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v148 = v147;
    v150 = v149;
    sub_100671124((uint64_t)v220, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v217 = (_QWORD *)sub_10001A820(v148, v150, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
    swift_release_n(v192);
    *(_QWORD *)&v151 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v146 + 22) = 2080;
    v152 = objc_msgSend(v143, "description", v151);
    v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
    v155 = v154;

    v217 = (_QWORD *)sub_10001A820(v153, v155, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);

    *(_QWORD *)&v156 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v146 + 32) = 2080;
    v157 = objc_msgSend(v143, "description", v156);
    v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
    v160 = v159;

    v217 = (_QWORD *)sub_10001A820(v158, v160, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v144, v145, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v146, 0x2Au);
    swift_arrayDestroy(logd, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(logd, -1, -1);
    swift_slowDealloc(v146, -1, -1);

  }
  else
  {

    swift_release_n(v192);
  }
  v202 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v143);
  swift_willThrow(v202);

}

void sub_100631974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char **v74;
  id *v75;
  int64_t *v76;
  id v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  unint64_t v87;
  char v88;
  id v89;
  unint64_t v90;
  char v91;
  int64_t *v92;
  id v93;
  id v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  id v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  Swift::Int v115;
  uint64_t v116;
  id v117;
  void *v118;
  id v119;
  void *v120;
  id v121;
  unint64_t v122;
  char v123;
  id v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  char v130;
  unint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  char v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  void *v144;
  id v145;
  NSObject *v146;
  os_log_type_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  double v153;
  id v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  double v158;
  id v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  id v163;
  id v164;
  NSObject *v165;
  os_log_type_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  double v173;
  id v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  char v186;
  void *v187;
  id v188;
  uint64_t v189;
  int64_t *v190;
  void *v191;
  os_log_type_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void *v202;
  uint64_t v203;
  os_log_type_t typed;
  os_log_type_t type[8];
  unint64_t typea;
  NSObject *typeb;
  os_log_type_t typec[8];
  uint64_t v209;
  id v210;
  uint64_t v211;
  id v212;
  char v213[16];
  uint64_t *v214;
  uint64_t v215;
  id v216[4];
  _QWORD *v217;
  uint64_t v218;
  unsigned __int8 v219;
  _QWORD *v220;
  uint64_t v221;
  _BYTE v222[48];
  _BYTE v223[48];
  _BYTE v224[56];
  uint64_t v225;

  v5 = v3;
  v225 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v214 = &v225;
  v215 = v5;
  swift_bridgeObjectRetain(v9);
  v10 = sub_100352680((void (*)(__n128 *__return_ptr, id *))sub_100672D5C, (uint64_t)&v213, a1);
  if (v4)
    goto LABEL_2;
  v11 = v10;
  v197 = a1;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v194 = a3;
  v196 = v5;
  if (os_log_type_enabled(v14, v15))
  {
    typed = v15;
    v16 = swift_slowAlloc(42, -1);
    v202 = (void *)swift_slowAlloc(96, -1);
    v216[0] = v202;
    *(_DWORD *)v16 = 136446978;
    v217 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
    *(_WORD *)(v16 + 12) = 2048;
    v217 = (_QWORD *)v11[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2082;
    v17 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v217 = (_QWORD *)sub_10001A820(v19, v21, (uint64_t *)v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 2082;
    swift_bridgeObjectRetain(v9);
    v217 = (_QWORD *)sub_10001A820(v8, v9, (uint64_t *)v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, typed, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v16, 0x2Au);
    v5 = (uint64_t)v202;
    swift_arrayDestroy(v202, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v202, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease();
  }
  v203 = v11[2];
  if (!v203)
    goto LABEL_2;
  v221 = (uint64_t)&_swiftEmptySetSingleton;
  v201 = v11 + 4;
  swift_bridgeObjectRetain(v11);
  v22 = 0;
  v200 = v11;
  while (1)
  {
    if (v22 >= v11[2])
    {
      __break(1u);
LABEL_141:
      __break(1u);
      __break(1u);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_2:
      swift_bridgeObjectRelease();
      return;
    }
    v23 = (id *)&v201[2 * v22];
    v5 = (uint64_t)v23[1];
    v24 = *(_QWORD *)(v5 + 16);
    if (v24)
      break;
LABEL_11:
    if (++v22 == v203)
    {
      swift_bridgeObjectRelease();
      if ((unint64_t)v197 >> 62)
      {
        if (v197 < 0)
          v178 = v197;
        else
          v178 = v197 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v197);
        v5 = _CocoaArrayWrapper.endIndex.getter(v178);
        swift_bridgeObjectRelease();
      }
      else
      {
        v5 = *(_QWORD *)((v197 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v5)
      {
        v216[0] = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v5);
        if (v5 < 0)
        {
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          v179 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v179);
          __break(1u);
          JUMPOUT(0x100633394);
        }
        v34 = 0;
        v35 = v197;
        do
        {
          if (v5 == v34)
            goto LABEL_141;
          if ((v197 & 0xC000000000000001) != 0)
            v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v35);
          else
            v36 = *(id *)(v35 + 8 * v34 + 32);
          v37 = v36;
          v38 = sub_1005CCBAC(objc_msgSend(v37, "remObjectID"), (unint64_t *)&qword_100839900, off_1007D66E0);
          ++v34;

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v39);
          v40 = *((_QWORD *)v216[0] + 2);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v40);
          v41 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v38);
          specialized ContiguousArray._endMutation()(v41);
          v35 = v197;
        }
        while (v5 != v34);
        v42 = v216[0];
        v11 = v200;
      }
      else
      {
        v42 = _swiftEmptyArrayStorage;
      }
      v43 = v221;
      typea = v221 & 0xC000000000000001;
      if ((v221 & 0xC000000000000001) != 0)
      {
        if (v221 < 0)
          v44 = v221;
        else
          v44 = v221 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v221);
        v45 = __CocoaSet.count.getter(v44);
        if (v45)
        {
          v46 = v45;
          v220 = _swiftEmptyArrayStorage;
          v14 = &v220;
          specialized ContiguousArray.reserveCapacity(_:)(v45);
          v217 = (_QWORD *)__CocoaSet.startIndex.getter(v44);
          v218 = v47;
          v219 = 1;
          if (v46 < 0)
          {
            __break(1u);
LABEL_51:
            __break(1u);

            swift_release(v216[0]);
            goto LABEL_70;
          }
          goto LABEL_54;
        }
      }
      else
      {
        v46 = *(_QWORD *)(v221 + 16);
        swift_bridgeObjectRetain(v221);
        if (v46)
        {
          v220 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v46);
          v217 = (_QWORD *)sub_100364E8C(v43);
          v218 = v48;
          v219 = v49 & 1;
LABEL_54:
          v50 = v43 & 0xFFFFFFFFFFFFFF8;
          if (v43 < 0)
            v50 = v43;
          v198 = v50;
          do
          {
            while (1)
            {
              v57 = (uint64_t)v217;
              v56 = v218;
              v58 = v219;
              sub_100364660((uint64_t)v217, v218, v219, v43);
              v60 = v59;
              sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
              v61 = v60;

              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v62);
              v63 = v220[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v63);
              v64 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v63, v61);
              specialized ContiguousArray._endMutation()(v64);
              if (typea)
                break;
              v51 = sub_10036456C(v57, v56, v58, v43);
              v53 = v52;
              v55 = v54;
              sub_1000E515C(v57, v56, v58);
              v217 = (_QWORD *)v51;
              v218 = v53;
              v219 = v55 & 1;
              v11 = v200;
              if (!--v46)
                goto LABEL_64;
            }
            if ((v58 & 1) == 0)
              goto LABEL_159;
            v65 = __CocoaSet.Index.handleBitPattern.getter(v57, v56);
            if (v65)
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v65);
            else
              isUniquelyReferenced_nonNull_native = 1;
            v11 = v200;
            v67 = sub_10001A630(&qword_1008466D8);
            v68 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(v216, v67);
            __CocoaSet.formIndex(after:isUnique:)(v69, isUniquelyReferenced_nonNull_native, v198);
            v68(v216, 0);
            --v46;
          }
          while (v46);
LABEL_64:
          v29 = (uint64_t)v42;
          sub_1000E515C((uint64_t)v217, v218, v219);
          v5 = (uint64_t)v220;
          swift_bridgeObjectRelease();
          goto LABEL_66;
        }
      }
      v29 = (uint64_t)v42;
      swift_bridgeObjectRelease();
      v5 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_66:
      v25 = (uint64_t *)v194;
      v26 = v196;
      sub_1006446F0(v5, v194);
      v24 = 0;
      goto LABEL_68;
    }
  }
  *(_QWORD *)type = v22;
  v11 = (_QWORD *)(v5 + 32);
  v25 = (uint64_t *)*v23;
  swift_bridgeObjectRetain(v5);
  v26 = 0;
  while (1)
  {
    if (v26 >= *(_QWORD *)(v5 + 16))
      goto LABEL_51;
    sub_1005389AC((uint64_t)v25, *((_BYTE *)v11 + v26));
    v28 = v27;
    if ((unint64_t)v27 >> 62)
      break;
    v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v29)
      goto LABEL_19;
LABEL_15:
    swift_bridgeObjectRelease();
    if (++v26 == v24)
    {

      swift_bridgeObjectRelease();
      v11 = v200;
      v22 = *(_QWORD *)type;
      goto LABEL_11;
    }
  }
  if (v27 >= 0)
    v27 &= 0xFFFFFFFFFFFFFF8uLL;
  v27 = _CocoaArrayWrapper.endIndex.getter(v27);
  v29 = v27;
  if (!v27)
    goto LABEL_15;
LABEL_19:
  if (v29 >= 1)
  {
    if ((v28 & 0xC000000000000001) != 0)
    {
      v30 = 0;
      do
      {
        v31 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v30++, v28);
        v14 = &v221;
        sub_1002DB2CC((Swift::Int *)v216, v31);

      }
      while (v29 != v30);
    }
    else
    {
      v32 = 0;
      do
      {
        v33 = *(void **)(v28 + 8 * v32++ + 32);
        v14 = &v221;
        sub_1002DB2CC((Swift::Int *)v216, v33);

      }
      while (v29 != v32);
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_68:
  v70 = v27;
  swift_bridgeObjectRelease();
  sub_10064A9F0(v29, (uint64_t)v25);
  if (v24)
  {
LABEL_69:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }
  v72 = v71;
  v199 = v70;
  swift_bridgeObjectRelease();
  v183 = v25 + 6;
  swift_beginAccess(v25 + 6, v216, 0, 0);
  if (!v11[2])
  {
LABEL_133:
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_70:
    swift_bridgeObjectRelease();
    goto LABEL_2;
  }
  v73 = 0;
  v180 = v26 + 24;
  v74 = &selRef_isConcealed;
  v189 = v72;
  while (2)
  {
    v181 = v73;
    v75 = (id *)&v201[2 * v73];
    v76 = (int64_t *)v75[1];
    v77 = *v75;
    v190 = v76;
    v78 = objc_msgSend(v77, v74[432], swift_bridgeObjectRetain(v76).n128_f64[0]);
    v79 = sub_1005CCBAC(v78, (unint64_t *)&qword_100839900, off_1007D66E0);

    v80 = *v183;
    v191 = v77;
    if ((*v183 & 0xC000000000000001) != 0)
    {
      if (v80 < 0)
        v81 = *v183;
      else
        v81 = v80 & 0xFFFFFFFFFFFFFF8;
      v82 = v79;
      swift_bridgeObjectRetain(v80);
      v83 = __CocoaDictionary.lookup(_:)(v82, v81);
      if (v83)
      {
        v84 = v83;
        v220 = (_QWORD *)v83;
        v85 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v84);
        swift_dynamicCast(&v217, &v220, (char *)&type metadata for Swift.AnyObject + 8, v85, 7);
        v86 = v217;
        swift_unknownObjectRelease(v84);
        goto LABEL_82;
      }
LABEL_83:

      swift_bridgeObjectRelease();
LABEL_84:
      v86 = 0;
    }
    else
    {
      if (!*(_QWORD *)(v80 + 16))
        goto LABEL_84;
      v82 = v79;
      swift_bridgeObjectRetain(v80);
      v87 = sub_1002C66DC((uint64_t)v82);
      if ((v88 & 1) == 0)
        goto LABEL_83;
      v86 = *(id *)(*(_QWORD *)(v80 + 56) + 8 * v87);
LABEL_82:

      swift_bridgeObjectRelease();
    }

    if (!*(_QWORD *)(v189 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_144:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v163 = v79;
      swift_retain_n(v26);
      v164 = v163;
      v165 = Logger.logObject.getter(v164);
      v166 = static os_log_type_t.error.getter(v165);
      if (os_log_type_enabled(v165, v166))
      {
        v167 = swift_slowAlloc(32, -1);
        v211 = swift_slowAlloc(96, -1);
        v217 = (_QWORD *)v211;
        *(_DWORD *)v167 = 136446722;
        v220 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v217);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);
        *(_WORD *)(v167 + 12) = 2082;
        sub_1000184A8(v180, (uint64_t)v222);
        sub_100671124((uint64_t)v222, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v169 = v168;
        v170 = v26;
        v172 = v171;
        sub_100671124((uint64_t)v222, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v220 = (_QWORD *)sub_10001A820(v169, v172, (uint64_t *)&v217);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);
        swift_release_n(v170);
        *(_QWORD *)&v173 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v167 + 22) = 2080;
        v174 = objc_msgSend(v164, "description", v173);
        v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v174);
        v177 = v176;

        v220 = (_QWORD *)sub_10001A820(v175, v177, (uint64_t *)&v217);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v165, v166, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v167, 0x20u);
        swift_arrayDestroy(v211, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v211, -1, -1);
        swift_slowDealloc(v167, -1, -1);

      }
      else
      {

        swift_release_n(v26);
      }
      v212 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v164);
      swift_willThrow(v212);

      return;
    }
    v89 = v79;
    v90 = sub_1002C672C(v89);
    if ((v91 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_144;
    }
    v188 = *(id *)(*(_QWORD *)(v189 + 56) + 8 * v90);

    v92 = v190;
    swift_bridgeObjectRetain_n(v190, 2);
    v93 = v89;
    swift_retain_n(v26);
    v94 = v93;
    v95 = Logger.logObject.getter(v94);
    v96 = static os_log_type_t.default.getter(v95);
    v187 = v94;
    if (os_log_type_enabled(v95, v96))
    {
      v192 = v96;
      typeb = v95;
      v97 = swift_slowAlloc(42, -1);
      v185 = (_QWORD *)swift_slowAlloc(8, -1);
      v195 = swift_slowAlloc(96, -1);
      v217 = (_QWORD *)v195;
      *(_DWORD *)v97 = 136446978;
      v220 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);
      *(_WORD *)(v97 + 12) = 2082;
      sub_1000184A8(v180, (uint64_t)v224);
      sub_100671124((uint64_t)v224, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v99 = v98;
      v101 = v100;
      sub_100671124((uint64_t)v224, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v220 = (_QWORD *)sub_10001A820(v99, v101, (uint64_t *)&v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);
      swift_release_n(v26);
      swift_bridgeObjectRelease();
      *(_WORD *)(v97 + 22) = 2114;
      v220 = v94;
      v102 = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);
      *v185 = v94;

      *(_WORD *)(v97 + 32) = 2082;
      v103 = v190[2];
      if (v103)
      {
        v220 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v103, 0);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v104 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v106 = v105;
      swift_bridgeObjectRelease();
      v220 = (_QWORD *)sub_10001A820(v104, v106, (uint64_t *)&v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, typeb, v192, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v97, 0x2Au);
      v107 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v185, 1, v107);
      swift_slowDealloc(v185, -1, -1);
      swift_arrayDestroy(v195, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v195, -1, -1);
      swift_slowDealloc(v97, -1, -1);

      v26 = v196;
    }
    else
    {

      swift_release_n(v26);
      swift_bridgeObjectRelease_n(v190, 2);
    }
    v5 = (uint64_t)v191;
    v108 = v199;
    v182 = v190[2];
    if (!v182)
    {
LABEL_128:
      swift_bridgeObjectRelease();
      if (*(_BYTE *)(v26 + 104) == 1)
      {
        v144 = (void *)v5;
        v5 = (uint64_t)v188;
        objc_msgSend((id)v5, "updateChangeCount");

      }
      else
      {

      }
      v73 = v181 + 1;
      if (v181 + 1 == v203)
        goto LABEL_69;
      v74 = &selRef_isConcealed;
      if (v73 >= v11[2])
        goto LABEL_133;
      continue;
    }
    break;
  }
  v109 = 0;
  v110 = v190 + 4;
  while (2)
  {
    if (v109 >= v92[2])
      goto LABEL_158;
    v186 = *((_BYTE *)v110 + v109);
    sub_1005389AC(v5, v186);
    v112 = v111;
    if (!((unint64_t)v111 >> 62))
    {
      v113 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10);
      v184 = v109;
      if (v113)
        goto LABEL_97;
LABEL_126:
      v115 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_127:
      swift_bridgeObjectRelease();
      sub_1003B101C(v115);
      swift_bridgeObjectRelease();
      sub_100538C04((uint64_t)v191, (uint64_t)v188, v186);
      v109 = v184 + 1;
      swift_bridgeObjectRelease();
      v26 = v196;
      v92 = v190;
      v5 = (uint64_t)v191;
      v110 = v190 + 4;
      if (v184 + 1 == v182)
        goto LABEL_128;
      continue;
    }
    break;
  }
  if (v111 < 0)
    v143 = v111;
  else
    v143 = v111 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v111);
  v113 = _CocoaArrayWrapper.endIndex.getter(v143);
  swift_bridgeObjectRelease();
  v184 = v109;
  if (!v113)
    goto LABEL_126;
LABEL_97:
  v114 = 4;
  v115 = (Swift::Int)_swiftEmptyDictionarySingleton;
  v193 = v113;
  while (1)
  {
    if ((v112 & 0xC000000000000001) != 0)
      v117 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v114 - 4, v112);
    else
      v117 = *(id *)(v112 + 8 * v114);
    v118 = v117;
    if (__OFADD__(v114 - 4, 1))
      goto LABEL_154;
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v119 = v118;
    v120 = v119;
    if (!*(_QWORD *)(v108 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_136;
    }
    v121 = v119;
    v122 = sub_1002C672C(v121);
    if ((v123 & 1) == 0)
      break;
    v124 = *(id *)(*(_QWORD *)(v108 + 56) + 8 * v122);

    *(_QWORD *)typec = v114 - 3;
    if ((v115 & 0xC000000000000001) != 0)
    {
      if (v115 < 0)
        v125 = v115;
      else
        v125 = v115 & 0xFFFFFFFFFFFFFF8;
      v126 = v124;
      v127 = __CocoaDictionary.count.getter(v125);
      if (__OFADD__(v127, 1))
        goto LABEL_156;
      v115 = sub_100192078(v125, v127 + 1);
    }
    else
    {
      v128 = v124;
    }
    v129 = swift_isUniquelyReferenced_nonNull_native(v115);
    v217 = (_QWORD *)v115;
    v131 = sub_1002C66DC((uint64_t)v121);
    v132 = *(_QWORD *)(v115 + 16);
    v133 = (v130 & 1) == 0;
    v134 = v132 + v133;
    if (__OFADD__(v132, v133))
      goto LABEL_155;
    v135 = v130;
    if (*(_QWORD *)(v115 + 24) >= v134)
    {
      if ((v129 & 1) == 0)
        sub_1002D73A0();
    }
    else
    {
      sub_1002CF2DC(v134, v129);
      v136 = sub_1002C66DC((uint64_t)v121);
      if ((v135 & 1) != (v137 & 1))
        goto LABEL_160;
      v131 = v136;
    }
    v108 = v199;
    v115 = (Swift::Int)v217;
    if ((v135 & 1) != 0)
    {
      v116 = v217[7];

      *(_QWORD *)(v116 + 8 * v131) = v124;
    }
    else
    {
      v217[(v131 >> 6) + 8] |= 1 << v131;
      v138 = 8 * v131;
      *(_QWORD *)(*(_QWORD *)(v115 + 48) + v138) = v121;
      *(_QWORD *)(*(_QWORD *)(v115 + 56) + v138) = v124;
      v139 = *(_QWORD *)(v115 + 16);
      v140 = __OFADD__(v139, 1);
      v141 = v139 + 1;
      if (v140)
        goto LABEL_157;
      *(_QWORD *)(v115 + 16) = v141;
      v142 = v121;
    }

    swift_bridgeObjectRelease();
    ++v114;
    v11 = v200;
    if (*(_QWORD *)typec == v193)
      goto LABEL_127;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_136:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain_n(v196);
  v145 = v120;
  v146 = Logger.logObject.getter(v145);
  v147 = static os_log_type_t.error.getter(v146);
  if (os_log_type_enabled(v146, v147))
  {
    v148 = swift_slowAlloc(42, -1);
    v209 = swift_slowAlloc(128, -1);
    v217 = (_QWORD *)v209;
    *(_DWORD *)v148 = 136446978;
    v220 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);
    *(_WORD *)(v148 + 12) = 2082;
    sub_1000184A8(v180, (uint64_t)v223);
    sub_100671124((uint64_t)v223, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v150 = v149;
    v152 = v151;
    sub_100671124((uint64_t)v223, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v220 = (_QWORD *)sub_10001A820(v150, v152, (uint64_t *)&v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);
    swift_release_n(v196);
    *(_QWORD *)&v153 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v148 + 22) = 2080;
    v154 = objc_msgSend(v145, "description", v153);
    v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
    v157 = v156;

    v220 = (_QWORD *)sub_10001A820(v155, v157, (uint64_t *)&v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);

    *(_QWORD *)&v158 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v148 + 32) = 2080;
    v159 = objc_msgSend(v145, "description", v158);
    v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
    v162 = v161;

    v220 = (_QWORD *)sub_10001A820(v160, v162, (uint64_t *)&v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, &v221);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v146, v147, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v148, 0x2Au);
    swift_arrayDestroy(v209, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v209, -1, -1);
    swift_slowDealloc(v148, -1, -1);

  }
  else
  {

    swift_release_n(v196);
  }
  v210 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v145);
  swift_willThrow(v210);

}

void sub_1006333B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t *v4;
  id v5;
  _BYTE *v6;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id *v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v85;
  void (*v86)(_QWORD, _QWORD);
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  char **v92;
  id *v93;
  int64_t *v94;
  id v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  unint64_t v106;
  char v107;
  id v108;
  unint64_t v109;
  char v110;
  int64_t *v111;
  id v112;
  id v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  id v121;
  int64_t v122;
  int64_t *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  int64_t *v139;
  unint64_t v140;
  int64_t *v141;
  char **v142;
  id v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  Swift::Int v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t *v157;
  unint64_t v158;
  char v159;
  id v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  char v166;
  unint64_t v167;
  uint64_t v168;
  _BOOL8 v169;
  uint64_t v170;
  char v171;
  unint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  id v183;
  uint64_t *v184;
  NSObject *v185;
  os_log_type_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  double v192;
  id v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  double v197;
  id v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  id v202;
  id v203;
  NSObject *v204;
  os_log_type_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  double v211;
  id v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  int64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  os_log_type_t v224;
  char v225;
  uint64_t v226;
  void *v227;
  void *v228;
  id v229;
  int64_t *v230;
  uint64_t v231;
  uint64_t v232;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  _BYTE *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  os_log_type_t typea;
  os_log_type_t type[8];
  _QWORD *v244;
  unint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  id v251;
  uint64_t v252;
  id v253;
  char v254;
  uint64_t *v255;
  _BYTE *v256;
  void *v257;
  uint64_t v258;
  unsigned __int8 v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  _BYTE v263[48];
  _BYTE v264[48];
  _BYTE v265[56];
  uint64_t v266;

  v6 = v3;
  v266 = a2;
  v10 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v255 = &v266;
  v256 = v6;
  swift_bridgeObjectRetain(v9);
  v11 = sub_10035269C((void (*)(__n128 *__return_ptr, id *))sub_100672E9C, (uint64_t)&v254, a1);
  v249 = v4;
  if (v4)
    goto LABEL_2;
  v12 = v11;
  v237 = a1;
  if (qword_1008371E8 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter(v15);
  log = (os_log_t)a3;
  v236 = v6;
  v240 = v12;
  if (os_log_type_enabled((os_log_t)v15, v16))
  {
    v17 = swift_slowAlloc(42, -1);
    v244 = (_QWORD *)swift_slowAlloc(96, -1);
    v261 = v244;
    *(_DWORD *)v17 = 136446978;
    v257 = (void *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v261);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
    *(_WORD *)(v17 + 12) = 2048;
    v257 = (void *)v12[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 22) = 2082;
    v18 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    typea = v16;
    v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "description");
    v5 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v21 = v20;

    v257 = (void *)sub_10001A820((uint64_t)v5, v21, (uint64_t *)&v261);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
    v12 = v240;
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 32) = 2082;
    swift_bridgeObjectRetain(v9);
    v257 = (void *)sub_10001A820(v10, v9, (uint64_t *)&v261);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, &v258);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v15, typea, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v17, 0x2Au);
    swift_arrayDestroy(v244, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v244, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)type = v12[2];
  if (!*(_QWORD *)type)
    goto LABEL_2;
  v262 = (uint64_t)&_swiftEmptySetSingleton;
  v241 = v12 + 4;
  swift_bridgeObjectRetain(v12);
  v22 = 0;
  while (1)
  {
    if (v22 >= v12[2])
    {
      __break(1u);
LABEL_190:
      __break(1u);
      __break(1u);
LABEL_191:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_2;
    }
    v23 = (id *)&v241[2 * v22];
    v24 = v23[1];
    v25 = v24[2];
    if (v25)
      break;
LABEL_11:
    if (++v22 == *(_QWORD *)type)
    {
      swift_bridgeObjectRelease();
      if ((unint64_t)v237 >> 62)
      {
        if (v237 < 0)
          v216 = v237;
        else
          v216 = v237 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v237);
        v52 = _CocoaArrayWrapper.endIndex.getter(v216);
        swift_bridgeObjectRelease();
      }
      else
      {
        v52 = *(_QWORD *)((v237 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v53 = _swiftEmptyArrayStorage;
      if (!v52)
        goto LABEL_73;
      v261 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v52);
      if ((v52 & 0x8000000000000000) == 0)
      {
        v54 = 0;
        v5 = (id)(v237 & 0xC000000000000001);
        do
        {
          if (v52 == v54)
            goto LABEL_190;
          if (v5)
            v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v237);
          else
            v55 = *(id *)(v237 + 8 * v54 + 32);
          v56 = v55;
          v57 = sub_1005CCBAC(objc_msgSend(v56, "remObjectID"), &qword_10083AA30, off_1007D6658);
          ++v54;

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v58);
          v59 = v261[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v59);
          v60 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v57);
          specialized ContiguousArray._endMutation()(v60);
        }
        while (v52 != v54);
        v53 = v261;
LABEL_73:
        v238 = v53;
        v61 = v262;
        if ((v262 & 0xC000000000000001) != 0)
        {
          if (v262 < 0)
            v62 = v262;
          else
            v62 = v262 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v262);
          v63 = __CocoaSet.count.getter(v62);
          if (v63)
          {
            v64 = v63;
            v260 = _swiftEmptyArrayStorage;
            v15 = (uint64_t)&v260;
            specialized ContiguousArray.reserveCapacity(_:)(v63);
            v257 = (void *)__CocoaSet.startIndex.getter(v62);
            v258 = v65;
            v259 = 1;
            if (v64 < 0)
            {
              __break(1u);
LABEL_80:
              __break(1u);

              swift_release(v261);
LABEL_182:
              swift_bridgeObjectRelease();
LABEL_2:
              swift_bridgeObjectRelease();
              return;
            }
LABEL_83:
            v68 = v61 & 0xFFFFFFFFFFFFFF8;
            if (v61 < 0)
              v68 = v61;
            v246 = v68;
            do
            {
              while (1)
              {
                v75 = (uint64_t)v257;
                v74 = v258;
                v76 = v259;
                sub_100364660((uint64_t)v257, v258, v259, v61);
                v78 = v77;
                sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
                v79 = v78;

                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v80);
                v81 = v260[2];
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v81);
                v82 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v79);
                specialized ContiguousArray._endMutation()(v82);
                if ((v61 & 0xC000000000000001) != 0)
                  break;
                v69 = sub_10036456C(v75, v74, v76, v61);
                v71 = v70;
                v73 = v72;
                sub_1000E515C(v75, v74, v76);
                v257 = (void *)v69;
                v258 = v71;
                v259 = v73 & 1;
                if (!--v64)
                  goto LABEL_93;
              }
              if ((v76 & 1) == 0)
                goto LABEL_210;
              v83 = __CocoaSet.Index.handleBitPattern.getter(v75, v74);
              if (v83)
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v83);
              else
                isUniquelyReferenced_nonNull_native = 1;
              v85 = sub_10001A630(&qword_1008466D8);
              v86 = (void (*)(_QWORD, _QWORD))Set.Index._asCocoa.modify(&v261, v85);
              __CocoaSet.formIndex(after:isUnique:)(v87, isUniquelyReferenced_nonNull_native, v246);
              v86(&v261, 0);
              --v64;
            }
            while (v64);
LABEL_93:
            sub_1000E515C((uint64_t)v257, v258, v259);
            v88 = v260;
            swift_bridgeObjectRelease();
LABEL_95:
            v38 = (uint64_t)log;
            v26 = v236;
            sub_1006446F0((uint64_t)v88, (uint64_t)log);
            v29 = 0;
            v25 = (uint64_t)v238;
LABEL_97:
            v33 = v44;
            swift_bridgeObjectRelease();
            sub_100647C90(v25, v38);
            v249 = v29;
            if (!v29)
              goto LABEL_100;
LABEL_98:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_182;
          }
        }
        else
        {
          v64 = *(_QWORD *)(v262 + 16);
          swift_bridgeObjectRetain(v262);
          if (v64)
          {
            v260 = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)(v64);
            v257 = (void *)sub_100364E8C(v61);
            v258 = v66;
            v259 = v67 & 1;
            goto LABEL_83;
          }
        }
        swift_bridgeObjectRelease();
        v88 = _swiftEmptyArrayStorage;
        goto LABEL_95;
      }
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v217);
      __break(1u);
      return;
    }
  }
  v245 = v22;
  v5 = v24 + 4;
  v26 = *v23;
  v27 = swift_bridgeObjectRetain(v24).n128_u64[0];
  v28 = 0;
  while (1)
  {
    if (v28 >= v24[2])
      goto LABEL_80;
    if ((*((_BYTE *)v5 + v28) & 1) != 0)
      break;
    v29 = (uint64_t *)objc_msgSend(v26, "listIDsToUndelete", *(double *)&v27);
    v34 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v35 = sub_10011A5DC();
    v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v29, v34, v35);

    if ((v15 & 0xC000000000000001) != 0)
    {
      if (v15 < 0)
        v36 = v15;
      else
        v36 = v15 & 0xFFFFFFFFFFFFFF8;
      v33 = __CocoaSet.count.getter(v36);
      if (!v33)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        v38 = (uint64_t)_swiftEmptyArrayStorage;
        if ((unint64_t)_swiftEmptyArrayStorage >> 62)
          goto LABEL_41;
        goto LABEL_51;
      }
    }
    else
    {
      v33 = *(_QWORD *)(v15 + 16);
      if (!v33)
        goto LABEL_40;
    }
    if (v33 < 1)
    {
      v38 = (uint64_t)_swiftEmptyArrayStorage;
    }
    else
    {
      v41 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v38 = swift_allocObject(v41, 8 * v33 + 32, 7);
      v42 = j__malloc_size((const void *)v38);
      v43 = v42 - 32;
      if (v42 < 32)
        v43 = v42 - 25;
      *(_QWORD *)(v38 + 16) = v33;
      *(_QWORD *)(v38 + 24) = (2 * (v43 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v15);
    v29 = sub_1001EAC90((uint64_t *)&v261, (uint64_t **)(v38 + 32), v33, v15);
    v47 = sub_1000C6560((uint64_t)v261);
    if (v29 != (uint64_t *)v33)
      goto LABEL_99;
LABEL_50:
    swift_bridgeObjectRelease();
    if ((unint64_t)v38 >> 62)
    {
LABEL_41:
      if (v38 < 0)
        v45 = v38;
      else
        v45 = v38 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v38);
      v46 = _CocoaArrayWrapper.endIndex.getter(v45);
      swift_bridgeObjectRelease();
      goto LABEL_52;
    }
LABEL_51:
    v46 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_52:
    if (v46)
    {
      if (v46 < 1)
      {
        __break(1u);
        goto LABEL_97;
      }
      if ((v38 & 0xC000000000000001) != 0)
      {
        v48 = 0;
        do
        {
          v49 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v48++, v38);
          v15 = (uint64_t)&v262;
          sub_1002DB2CC((Swift::Int *)&v261, v49);

        }
        while (v46 != v48);
      }
      else
      {
        v50 = 0;
        do
        {
          v51 = *(void **)(v38 + 8 * v50++ + 32);
          v15 = (uint64_t)&v262;
          sub_1002DB2CC((Swift::Int *)&v261, v51);

        }
        while (v46 != v50);
      }
    }
    v27 = swift_bridgeObjectRelease().n128_u64[0];
    if (++v28 == v25)
    {

      swift_bridgeObjectRelease();
      v12 = v240;
      v22 = v245;
      goto LABEL_11;
    }
  }
  v29 = (uint64_t *)objc_msgSend(v26, "smartListIDsToUndelete", *(double *)&v27);
  v30 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v31 = sub_10011A5DC();
  v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v29, v30, v31);

  if ((v15 & 0xC000000000000001) != 0)
  {
    if (v15 < 0)
      v32 = v15;
    else
      v32 = v15 & 0xFFFFFFFFFFFFFF8;
    v33 = __CocoaSet.count.getter(v32);
    if (!v33)
      goto LABEL_40;
  }
  else
  {
    v33 = *(_QWORD *)(v15 + 16);
    if (!v33)
      goto LABEL_40;
  }
  if (v33 < 1)
  {
    v38 = (uint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    v37 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v38 = swift_allocObject(v37, 8 * v33 + 32, 7);
    v39 = j__malloc_size((const void *)v38);
    v40 = v39 - 32;
    if (v39 < 32)
      v40 = v39 - 25;
    *(_QWORD *)(v38 + 16) = v33;
    *(_QWORD *)(v38 + 24) = (2 * (v40 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v15);
  v29 = sub_1001EAC90((uint64_t *)&v261, (uint64_t **)(v38 + 32), v33, v15);
  v47 = sub_1000C6560((uint64_t)v261);
  if (v29 == (uint64_t *)v33)
    goto LABEL_50;
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  v89 = v47;
  swift_bridgeObjectRelease();
  v90 = (uint64_t *)(v38 + 48);
  swift_beginAccess(v38 + 48, &v261, 0, 0);
  if (!v240[2])
    goto LABEL_209;
  v91 = 0;
  v220 = (uint64_t)(v26 + 24);
  v92 = &selRef_isConcealed;
  v218 = (uint64_t *)(v38 + 48);
  v239 = v33;
  v226 = v89;
  while (2)
  {
    v221 = v91;
    v93 = (id *)&v241[2 * v91];
    v94 = (int64_t *)v93[1];
    v5 = *v93;
    v230 = v94;
    v95 = objc_msgSend(v5, v92[432], swift_bridgeObjectRetain(v94).n128_f64[0]);
    v96 = sub_1005CCBAC(v95, &qword_10083AA30, off_1007D6658);
    if (v249)
      goto LABEL_191;
    v97 = v96;

    v98 = *v90;
    if ((v98 & 0xC000000000000001) != 0)
    {
      if (v98 < 0)
        v99 = v98;
      else
        v99 = v98 & 0xFFFFFFFFFFFFFF8;
      v100 = v97;
      swift_bridgeObjectRetain(v98);
      v101 = __CocoaDictionary.lookup(_:)(v100, v99);
      if (v101)
      {
        v102 = v101;
        v260 = (_QWORD *)v101;
        v103 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v102);
        swift_dynamicCast(&v257, &v260, (char *)&type metadata for Swift.AnyObject + 8, v103, 7);
        v104 = v257;
        swift_unknownObjectRelease(v102);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v104 = 0;
      }
      v26 = v236;
    }
    else if (*(_QWORD *)(v98 + 16))
    {
      v105 = v97;
      swift_bridgeObjectRetain(v98);
      v106 = sub_1002C66DC((uint64_t)v105);
      if ((v107 & 1) != 0)
      {
        v104 = *(id *)(*(_QWORD *)(v98 + 56) + 8 * v106);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v104 = 0;
      }
    }
    else
    {
      v104 = 0;
    }

    v228 = v5;
    if (*(_QWORD *)(v89 + 16))
    {
      v108 = v97;
      v109 = sub_1002C672C(v108);
      if ((v110 & 1) != 0)
      {
        v229 = *(id *)(*(_QWORD *)(v89 + 56) + 8 * v109);

        v111 = v230;
        swift_bridgeObjectRetain_n(v230, 2);
        v112 = v108;
        swift_retain_n(v26);
        v113 = v112;
        v114 = Logger.logObject.getter(v113);
        v115 = static os_log_type_t.default.getter(v114);
        v227 = v113;
        if (os_log_type_enabled(v114, v115))
        {
          v224 = v115;
          loga = v114;
          v116 = swift_slowAlloc(42, -1);
          v247 = (_QWORD *)swift_slowAlloc(8, -1);
          v231 = swift_slowAlloc(96, -1);
          v257 = (void *)v231;
          *(_DWORD *)v116 = 136446978;
          v260 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v257);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);
          *(_WORD *)(v116 + 12) = 2082;
          sub_1000184A8(v220, (uint64_t)v265);
          sub_100671124((uint64_t)v265, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v118 = v117;
          v120 = v119;
          sub_100671124((uint64_t)v265, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          v260 = (_QWORD *)sub_10001A820(v118, v120, (uint64_t *)&v257);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);
          swift_release_n(v26);
          swift_bridgeObjectRelease();
          *(_WORD *)(v116 + 22) = 2114;
          v260 = v113;
          v121 = v113;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);
          *v247 = v113;

          *(_WORD *)(v116 + 32) = 2082;
          v122 = v230[2];
          if (v122)
          {
            v260 = _swiftEmptyArrayStorage;
            sub_1001C1B0C(0, v122, 0);
            v123 = v230;
            v124 = 0;
            v125 = v260;
            v126 = v260[2];
            v127 = 2 * v126;
            do
            {
              v128 = v126 + v124;
              if (*((_BYTE *)v123 + v124 + 32))
                v129 = 0xD000000000000016;
              else
                v129 = 0xD000000000000011;
              if (*((_BYTE *)v123 + v124 + 32))
                v130 = 0x80000001006F4270;
              else
                v130 = 0x80000001006F4250;
              v260 = v125;
              v131 = v125[3];
              v132 = v128 + 1;
              if (v128 >= v131 >> 1)
              {
                sub_1001C1B0C(v131 > 1, v128 + 1, 1);
                v123 = v230;
                v125 = v260;
              }
              ++v124;
              v125[2] = v132;
              v133 = &v125[v127];
              v133[4] = v129;
              v133[5] = v130;
              v127 += 2;
            }
            while (v122 != v124);
            v111 = v123;
            swift_bridgeObjectRelease();
            v26 = v236;
            v113 = v227;
            v5 = v228;
          }
          else
          {
            swift_bridgeObjectRelease();
            v125 = _swiftEmptyArrayStorage;
          }
          v135 = Array.description.getter(v125, &type metadata for String);
          v137 = v136;
          swift_bridgeObjectRelease();
          v260 = (_QWORD *)sub_10001A820(v135, v137, (uint64_t *)&v257);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, loga, v224, "[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}", (uint8_t *)v116, 0x2Au);
          v138 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v247, 1, v138);
          swift_slowDealloc(v247, -1, -1);
          swift_arrayDestroy(v231, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v231, -1, -1);
          swift_slowDealloc(v116, -1, -1);

          v33 = v239;
        }
        else
        {

          swift_release_n(v26);
          v134 = swift_bridgeObjectRelease_n(v230, 2).n128_u64[0];
        }
        v139 = v111;
        v222 = v111[2];
        if (!v222)
        {
          swift_bridgeObjectRelease();
          v89 = v226;
LABEL_174:
          v181 = v221 + 1;
          if (v26[104] == 1)
          {
            v182 = v113;
            v183 = v229;
            objc_msgSend(v183, "updateChangeCount");

          }
          else
          {

          }
          v90 = v218;
          v91 = v221 + 1;
          if (v181 == *(_QWORD *)type)
            goto LABEL_98;
          v92 = &selRef_isConcealed;
          if (v181 >= v240[2])
            goto LABEL_209;
          continue;
        }
        v140 = 0;
        v141 = (uint64_t)(v111 + 4);
        v219 = (uint64_t)(v111 + 4);
        while (2)
        {
          if (v140 >= v139[2])
            goto LABEL_208;
          v225 = *(_BYTE *)(v141 + v140);
          v142 = &selRef_smartListIDsToUndelete;
          if (!v225)
            v142 = &selRef_listIDsToUndelete;
          v143 = objc_msgSend(v5, *v142, *(double *)&v134);
          v144 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
          v145 = sub_10011A5DC();
          v146 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v143, v144, v145);

          v147 = (uint64_t)sub_1001E9108(v146);
          swift_bridgeObjectRelease();
          if (!((unint64_t)v147 >> 62))
          {
            v148 = *(_QWORD *)((v147 & 0xFFFFFFFFFFFFF8) + 0x10);
            v223 = v140;
            if (v148)
              goto LABEL_139;
LABEL_170:
            v150 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_171:
            swift_bridgeObjectRelease();
            v180 = sub_1003B101C(v150);
            swift_bridgeObjectRelease();
            v5 = v228;
            sub_10025BAF4(v228, (uint64_t)v229, v225, v180);
            v140 = v223 + 1;
            v134 = swift_bridgeObjectRelease().n128_u64[0];
            v89 = v226;
            v113 = v227;
            v139 = v230;
            v141 = v219;
            if (v223 + 1 == v222)
            {
              swift_bridgeObjectRelease();
              goto LABEL_174;
            }
            continue;
          }
          break;
        }
        if (v147 < 0)
          v179 = v147;
        else
          v179 = v147 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v147);
        v148 = _CocoaArrayWrapper.endIndex.getter(v179);
        swift_bridgeObjectRelease();
        v223 = v140;
        if (!v148)
          goto LABEL_170;
LABEL_139:
        v217 = v144;
        v248 = v147 & 0xC000000000000001;
        v149 = 4;
        v150 = (Swift::Int)_swiftEmptyDictionarySingleton;
        logb = (os_log_t)v147;
        v232 = v148;
        while (2)
        {
          if (v248)
            v152 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v149 - 4, v147);
          else
            v152 = (uint64_t *)*(id *)(v147 + 8 * v149);
          v153 = v152;
          v154 = v149 - 3;
          if (__OFADD__(v149 - 4, 1))
            goto LABEL_204;
          sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
          v155 = v153;
          v156 = v155;
          if (!*(_QWORD *)(v33 + 16))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_185:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_retain_n(v26);
            v184 = v156;
            v185 = Logger.logObject.getter(v184);
            v186 = static os_log_type_t.error.getter(v185);
            if (os_log_type_enabled(v185, v186))
            {
              v187 = swift_slowAlloc(42, -1);
              v250 = swift_slowAlloc(128, -1);
              v257 = (void *)v250;
              *(_DWORD *)v187 = 136446978;
              v260 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v257);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);
              *(_WORD *)(v187 + 12) = 2082;
              sub_1000184A8(v220, (uint64_t)v264);
              sub_100671124((uint64_t)v264, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
              sub_1000181B8();
              v189 = v188;
              v191 = v190;
              sub_100671124((uint64_t)v264, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
              v260 = (_QWORD *)sub_10001A820(v189, v191, (uint64_t *)&v257);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);
              swift_release_n(v26);
              *(_QWORD *)&v192 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v187 + 22) = 2080;
              v193 = objc_msgSend(v184, "description", v192);
              v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
              v196 = v195;

              v260 = (_QWORD *)sub_10001A820(v194, v196, (uint64_t *)&v257);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);

              *(_QWORD *)&v197 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v187 + 32) = 2080;
              v198 = objc_msgSend(v184, "description", v197);
              v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
              v201 = v200;

              v260 = (_QWORD *)sub_10001A820(v199, v201, (uint64_t *)&v257);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v185, v186, "[%{public}s] Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}", (uint8_t *)v187, 0x2Au);
              swift_arrayDestroy(v250, 4, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v250, -1, -1);
              swift_slowDealloc(v187, -1, -1);

            }
            else
            {

              swift_release_n(v26);
            }
            v251 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v184);
            swift_willThrow(v251);

            return;
          }
          v157 = v155;
          v158 = sub_1002C672C(v157);
          if ((v159 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_185;
          }
          v160 = *(id *)(*(_QWORD *)(v33 + 56) + 8 * v158);

          if ((v150 & 0xC000000000000001) != 0)
          {
            if (v150 < 0)
              v161 = v150;
            else
              v161 = v150 & 0xFFFFFFFFFFFFFF8;
            v162 = v160;
            v163 = __CocoaDictionary.count.getter(v161);
            if (__OFADD__(v163, 1))
              goto LABEL_206;
            v150 = sub_100192078(v161, v163 + 1);
          }
          else
          {
            v164 = v160;
          }
          v165 = swift_isUniquelyReferenced_nonNull_native(v150);
          v257 = (void *)v150;
          v167 = sub_1002C66DC((uint64_t)v157);
          v168 = *(_QWORD *)(v150 + 16);
          v169 = (v166 & 1) == 0;
          v170 = v168 + v169;
          if (__OFADD__(v168, v169))
            goto LABEL_205;
          v171 = v166;
          if (*(_QWORD *)(v150 + 24) >= v170)
          {
            if ((v165 & 1) != 0)
            {
              v150 = (Swift::Int)v257;
              if ((v166 & 1) == 0)
                goto LABEL_162;
            }
            else
            {
              sub_1002D73A0();
              v150 = (Swift::Int)v257;
              if ((v171 & 1) == 0)
                goto LABEL_162;
            }
          }
          else
          {
            sub_1002CF2DC(v170, v165);
            v172 = sub_1002C66DC((uint64_t)v157);
            if ((v171 & 1) != (v173 & 1))
              goto LABEL_211;
            v167 = v172;
            v150 = (Swift::Int)v257;
            if ((v171 & 1) == 0)
            {
LABEL_162:
              *(_QWORD *)(v150 + 8 * (v167 >> 6) + 64) |= 1 << v167;
              v174 = 8 * v167;
              *(_QWORD *)(*(_QWORD *)(v150 + 48) + v174) = v157;
              *(_QWORD *)(*(_QWORD *)(v150 + 56) + v174) = v160;
              v175 = *(_QWORD *)(v150 + 16);
              v176 = __OFADD__(v175, 1);
              v177 = v175 + 1;
              if (v176)
                goto LABEL_207;
              *(_QWORD *)(v150 + 16) = v177;
              v178 = v157;
              goto LABEL_141;
            }
          }
          v151 = *(_QWORD *)(v150 + 56);

          *(_QWORD *)(v151 + 8 * v167) = v160;
LABEL_141:
          v26 = v236;
          v33 = v239;
          v147 = (uint64_t)logb;

          swift_bridgeObjectRelease();
          ++v149;
          if (v154 == v232)
            goto LABEL_171;
          continue;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v202 = v97;
  swift_retain_n(v26);
  v203 = v202;
  v204 = Logger.logObject.getter(v203);
  v205 = static os_log_type_t.error.getter(v204);
  if (os_log_type_enabled(v204, v205))
  {
    v206 = swift_slowAlloc(32, -1);
    v252 = swift_slowAlloc(96, -1);
    v257 = (void *)v252;
    *(_DWORD *)v206 = 136446722;
    v260 = (_QWORD *)sub_10001A820(0xD000000000000016, 0x8000000100709B30, (uint64_t *)&v257);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);
    *(_WORD *)(v206 + 12) = 2082;
    sub_1000184A8(v220, (uint64_t)v263);
    sub_100671124((uint64_t)v263, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v208 = v207;
    v210 = v209;
    sub_100671124((uint64_t)v263, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v260 = (_QWORD *)sub_10001A820(v208, v210, (uint64_t *)&v257);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);
    swift_release_n(v26);
    *(_QWORD *)&v211 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v206 + 22) = 2080;
    v212 = objc_msgSend(v203, "description", v211);
    v213 = static String._unconditionallyBridgeFromObjectiveC(_:)(v212);
    v215 = v214;

    v5 = v228;
    v260 = (_QWORD *)sub_10001A820(v213, v215, (uint64_t *)&v257);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v204, v205, "[%{public}s] Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}", (uint8_t *)v206, 0x20u);
    swift_arrayDestroy(v252, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v252, -1, -1);
    swift_slowDealloc(v206, -1, -1);

  }
  else
  {

    swift_release_n(v26);
  }
  v253 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v203);
  swift_willThrow(v253);

}

void sub_100634FCC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  unint64_t v36;
  char v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  _DWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _DWORD *v48;
  id v49;
  unint64_t v50;
  char v51;
  id v52;
  id v53;
  _DWORD *v54;
  NSObject *v55;
  os_log_type_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  unint64_t v70;
  unint64_t v71;
  double v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  os_log_type_t type[8];
  os_log_type_t typea;
  _QWORD v95[3];
  uint64_t v96;
  void *v97;
  uint64_t v98[3];
  _BYTE v99[56];
  uint64_t v100;

  v6 = a3;
  v100 = a2;
  v9 = *(_DWORD **)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v95[2] = &v100;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(a1);
  v10 = sub_1005CA184((uint64_t (*)(id *))static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge(), v95, a1);
  if (v4)
    goto LABEL_21;
  v11 = (uint64_t)v10;
  v85 = v3;
  if (qword_1008371E8 != -1)
    goto LABEL_65;
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain(v8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  log = v14;
  v16 = (unint64_t)v11 >> 62;
  *(_QWORD *)type = v11;
  v86 = (unint64_t)v11 >> 62;
  v88 = v6;
  if (os_log_type_enabled(v14, v15))
  {
    v5 = swift_slowAlloc(42, -1);
    v82 = swift_slowAlloc(96, -1);
    v98[0] = v82;
    *(_DWORD *)v5 = 136446978;
    v97 = (void *)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
    *(_WORD *)(v5 + 12) = 2048;
    v84 = (uint64_t)v9;
    LOBYTE(v83) = v15;
    if (!v16)
    {
      v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_71;
  }

  swift_bridgeObjectRelease_n(v8, 2);
  swift_bridgeObjectRelease_n(v11, 2);
  while (1)
  {
    if (v16)
    {
      v78 = v11 < 0 ? v11 : v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v22 = _CocoaArrayWrapper.endIndex.getter(v78);
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v8 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v22)
      break;
    v98[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v22);
    if ((v22 & 0x8000000000000000) == 0)
    {
      v8 = 0;
      v9 = (_DWORD *)(v11 & 0xC000000000000001);
      v5 = 0x8000000100709CD0;
      while (v22 != v8)
      {
        if (v9)
          v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v11);
        else
          v23 = *(id *)(v11 + 8 * v8 + 32);
        v24 = v23;
        v6 = (uint64_t)sub_1005CDB68(objc_msgSend(v24, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, 0xD000000000000014, (void *)0x8000000100709CD0);

        ++v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
        v26 = *(_QWORD *)(v98[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
        v27 = v26;
        v11 = *(_QWORD *)type;
        v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v6);
        specialized ContiguousArray._endMutation()(v28);
        if (v22 == v8)
        {
          v8 = v98[0];
          v6 = v88;
          v16 = v86;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_3;
    }
    __break(1u);
LABEL_71:
    if (v11 < 0)
      v79 = v11;
    else
      v79 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v17 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    v97 = (void *)v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2082;
    v18 = type metadata accessor for REMCDSavedAttachment();
    v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v21 = v20;

    v97 = (void *)sub_10001A820(v19, v21, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 32) = 2082;
    v11 = *(_QWORD *)type;
    swift_bridgeObjectRetain(v8);
    v97 = (void *)sub_10001A820(v84, v8, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v83, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v5, 0x2Au);
    swift_arrayDestroy(v82, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    v6 = v88;
    v16 = v86;
  }
LABEL_19:
  sub_1006442D0(v8, v6);
  v30 = v29;
  swift_bridgeObjectRelease();
  if (v16)
  {
    if (v11 < 0)
      v31 = v11;
    else
      v31 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v8 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease();
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v8 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v8)
    {
LABEL_20:
      swift_bridgeObjectRelease();
LABEL_21:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v87 = v11 & 0xC000000000000001;
  v81 = (uint64_t *)(v6 + 48);
  swift_beginAccess(v6 + 48, v98, 0, 0);
  v6 = 4;
  v83 = 0x8000000100709CD0;
  v84 = 0xD000000000000014;
  v80 = v8;
  v82 = v30;
  while (1)
  {
    v32 = v6 - 4;
    if (v87)
    {
      v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v11);
      v5 = v6 - 3;
      if (__OFADD__(v32, 1))
        goto LABEL_64;
    }
    else
    {
      v33 = *(id *)(v11 + 8 * v6);
      v5 = v6 - 3;
      if (__OFADD__(v32, 1))
        goto LABEL_64;
    }
    v34 = v33;
    v35 = sub_1005CDB68(objc_msgSend(v34, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, 0xD000000000000014, (void *)0x8000000100709CD0);

    if (!*(_QWORD *)(v30 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_59;
    }
    v9 = v35;
    v36 = sub_1002C672C(v9);
    if ((v37 & 1) == 0)
      break;
    loga = (os_log_t)v5;
    v38 = *(id *)(*(_QWORD *)(v30 + 56) + 8 * v36);

    v39 = *v81;
    v89 = v38;
    if ((*v81 & 0xC000000000000001) != 0)
    {
      v40 = v34;
      if (v39 < 0)
        v41 = *v81;
      else
        v41 = v39 & 0xFFFFFFFFFFFFFF8;
      v42 = v9;
      v43 = v38;
      swift_bridgeObjectRetain(v39);
      v44 = __CocoaDictionary.lookup(_:)(v42, v41);
      if (v44)
      {
        v45 = v44;
        v96 = v44;
        v46 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v45);
        swift_dynamicCast(&v97, &v96, (char *)&type metadata for Swift.AnyObject + 8, v46, 7);
        v47 = v97;
        swift_unknownObjectRelease(v45);

        swift_bridgeObjectRelease();
        v11 = *(_QWORD *)type;
        v34 = v40;
        v8 = v80;

        if (v47)
          goto LABEL_49;
      }
      else
      {

        swift_bridgeObjectRelease();
        v11 = *(_QWORD *)type;
        v8 = v80;
      }
    }
    else if (*(_QWORD *)(v39 + 16))
    {
      v48 = v9;
      v49 = v38;
      swift_bridgeObjectRetain(v39);
      v50 = sub_1002C66DC((uint64_t)v48);
      if ((v51 & 1) != 0)
      {
        v52 = *(id *)(*(_QWORD *)(v39 + 56) + 8 * v50);

        swift_bridgeObjectRelease();
        if (v52)
        {
LABEL_49:

LABEL_55:
          goto LABEL_31;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v53 = v38;
    }
    v54 = v9;
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.info.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v9 = (_DWORD *)swift_slowAlloc(22, -1);
      v57 = (_QWORD *)swift_slowAlloc(8, -1);
      v58 = v34;
      v59 = swift_slowAlloc(32, -1);
      v97 = (void *)v59;
      *v9 = 136446466;
      *(_QWORD *)(v9 + 1) = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v97);
      *((_WORD *)v9 + 6) = 2114;
      *(_QWORD *)((char *)v9 + 14) = v54;
      *v57 = v54;

      _os_log_impl((void *)&_mh_execute_header, v55, v56, "[%{public}s] Skipping mutateRelationshipOrdering() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v9, 0x16u);
      v60 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v57, 1, v60);
      v61 = v57;
      v11 = *(_QWORD *)type;
      swift_slowDealloc(v61, -1, -1);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      v8 = v80;
      goto LABEL_55;
    }

LABEL_31:
    ++v6;
    v30 = v82;
    if (loga == (os_log_t)v8)
      goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_59:
  v62 = v35;
  swift_retain_n(v85);
  v63 = v62;
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.error.getter(v64);
  if (os_log_type_enabled(v64, v65))
  {
    typea = v65;
    v66 = swift_slowAlloc(32, -1);
    logb = (os_log_t)swift_slowAlloc(96, -1);
    v97 = logb;
    *(_DWORD *)v66 = 136446722;
    v96 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    *(_WORD *)(v66 + 12) = 2082;
    sub_1000184A8(v85 + 24, (uint64_t)v99);
    sub_100671124((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v68 = v67;
    v69 = v34;
    v71 = v70;
    sub_100671124((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v96 = sub_10001A820(v68, v71, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    swift_release_n(v85);
    *(_QWORD *)&v72 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v66 + 22) = 2080;
    v73 = objc_msgSend(v63, "description", v72);
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v76 = v75;

    v34 = v69;
    v96 = sub_10001A820(v74, v76, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v64, typea, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v66, 0x20u);
    swift_arrayDestroy(logb, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(logb, -1, -1);
    swift_slowDealloc(v66, -1, -1);

  }
  else
  {

    swift_release_n(v85);
  }
  v77 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v63);
  swift_willThrow(v77);

}

void sub_100635B94(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  unint64_t v40;
  char v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  unint64_t v54;
  char v55;
  id v56;
  uint64_t v57;
  id v58;
  void *v59;
  unint64_t v60;
  char v61;
  id v62;
  unint64_t v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  os_log_type_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[4];
  uint64_t v94;
  void *v95;
  uint64_t v96[3];
  _BYTE v97[56];
  uint64_t v98;

  v5 = v3;
  v6 = (uint64_t (*)())a3;
  v98 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v93[2] = &v98;
  v93[3] = v5;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a1);
  v10 = sub_1005CA184((uint64_t (*)(id *))sub_100673718, v93, a1);
  if (v4)
    goto LABEL_21;
  v11 = (uint64_t)v10;
  v84 = v8;
  if (qword_1008371E8 != -1)
    goto LABEL_64;
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain(v9);
  v14 = Logger.logObject.getter(v13);
  v83 = static os_log_type_t.info.getter(v14);
  v15 = v14;
  v16 = (unint64_t)v11 >> 62;
  v90 = v5;
  v91 = v11;
  v85 = (unint64_t)v11 >> 62;
  *(_QWORD *)type = v6;
  if (os_log_type_enabled(v14, v83))
  {
    v6 = (uint64_t (*)())swift_slowAlloc(42, -1);
    v82 = swift_slowAlloc(96, -1);
    v96[0] = v82;
    *(_DWORD *)v6 = 136446978;
    v95 = (void *)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96);
    *((_WORD *)v6 + 6) = 2048;
    if (!v16)
    {
      v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_70;
  }

  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease_n(v11, 2);
  while (1)
  {
    if (v16)
    {
      v79 = v11 < 0 ? v11 : v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v23 = _CocoaArrayWrapper.endIndex.getter(v79);
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v9 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v23)
      break;
    v96[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    if ((v23 & 0x8000000000000000) == 0)
    {
      v9 = 0;
      v5 = v11 & 0xC000000000000001;
      v6 = type metadata accessor for REMCDManualSortHint;
      while (v23 != v9)
      {
        if (v5)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v11);
        else
          v24 = *(id *)(v11 + 8 * v9 + 32);
        v25 = v24;
        v26 = sub_1005CDB68(objc_msgSend(v25, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, 0xD000000000000013, (void *)0x8000000100709CB0);

        ++v9;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v28 = *(_QWORD *)(v96[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
        v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
        specialized ContiguousArray._endMutation()(v29);
        v11 = v91;
        if (v23 == v9)
        {
          v9 = v96[0];
          v6 = *(uint64_t (**)())type;
          v5 = v90;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_3;
    }
    __break(1u);
LABEL_70:
    if (v11 < 0)
      v80 = v11;
    else
      v80 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v17 = _CocoaArrayWrapper.endIndex.getter(v80);
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    v95 = (void *)v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96);
    swift_bridgeObjectRelease();
    *((_WORD *)v6 + 11) = 2082;
    v18 = type metadata accessor for REMCDManualSortHint();
    v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v95 = (void *)sub_10001A820(v20, v22, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96);
    v11 = v91;
    swift_bridgeObjectRelease();
    *((_WORD *)v6 + 16) = 2082;
    swift_bridgeObjectRetain(v9);
    v95 = (void *)sub_10001A820(v84, v9, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v83, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v6, 0x2Au);
    swift_arrayDestroy(v82, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v6 = *(uint64_t (**)())type;
    v5 = v90;
    v16 = v85;
  }
LABEL_19:
  sub_100644F30(v9, (uint64_t)v6);
  v84 = v30;
  swift_bridgeObjectRelease();
  if (v85)
  {
    if (v11 < 0)
      v32 = v11;
    else
      v32 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v9 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease();
    v31 = v84;
    if (!v9)
      goto LABEL_20;
  }
  else
  {
    v9 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    v31 = v84;
    if (!v9)
    {
LABEL_20:
      swift_bridgeObjectRelease();
LABEL_21:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v86 = v11 & 0xC000000000000001;
  v81 = (uint64_t *)((char *)v6 + 48);
  swift_beginAccess((char *)v6 + 48, v96, 0, 0);
  v33 = 4;
  v6 = (uint64_t (*)())&selRef_isConcealed;
  v82 = v9;
  while (1)
  {
    v34 = v33 - 4;
    if (v86)
    {
      v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v11);
      v36 = v33 - 3;
      if (__OFADD__(v34, 1))
        goto LABEL_63;
    }
    else
    {
      v35 = *(id *)(v11 + 8 * v33);
      v36 = v33 - 3;
      if (__OFADD__(v34, 1))
        goto LABEL_63;
    }
    *(_QWORD *)typea = v36;
    v37 = v35;
    v38 = sub_1005CDB68(objc_msgSend(v37, *((SEL *)v6 + 432)), (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, 0xD000000000000013, (void *)0x8000000100709CB0);

    if (!*(_QWORD *)(v31 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
    v39 = v38;
    v40 = sub_1002C672C(v39);
    if ((v41 & 1) == 0)
      break;
    v42 = *(id *)(*(_QWORD *)(v31 + 56) + 8 * v40);

    v43 = *v81;
    if ((*v81 & 0xC000000000000001) != 0)
    {
      v44 = v37;
      if (v43 < 0)
        v45 = *v81;
      else
        v45 = v43 & 0xFFFFFFFFFFFFFF8;
      v46 = v39;
      v47 = v42;
      swift_bridgeObjectRetain(v43);
      v48 = __CocoaDictionary.lookup(_:)(v46, v45);
      if (v48)
      {
        v49 = v48;
        v94 = v48;
        v50 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v49);
        swift_dynamicCast(&v95, &v94, (char *)&type metadata for Swift.AnyObject + 8, v50, 7);
        v51 = v95;
        swift_unknownObjectRelease(v49);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v51 = 0;
      }
      v37 = v44;
      v5 = v90;
    }
    else
    {
      if (!*(_QWORD *)(v43 + 16))
      {
        v56 = v42;
LABEL_51:
        v51 = 0;
        goto LABEL_52;
      }
      v52 = v39;
      v53 = v42;
      swift_bridgeObjectRetain(v43);
      v54 = sub_1002C66DC((uint64_t)v52);
      if ((v55 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      v51 = *(id *)(*(_QWORD *)(v43 + 56) + 8 * v54);

      swift_bridgeObjectRelease();
    }
LABEL_52:

    v57 = *(_QWORD *)(v5 + 72);
    v6 = (uint64_t (*)())&selRef_isConcealed;
    v58 = objc_msgSend(v37, "remObjectID");
    v59 = v58;
    if (*(_QWORD *)(v57 + 16))
    {
      v60 = sub_1002C66DC((uint64_t)v58);
      if ((v61 & 1) != 0)
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * v60));
    }

    swift_bridgeObjectRelease();
    ++v33;
    v9 = v82;
    v11 = v91;
    v31 = v84;
    if (*(_QWORD *)typea == v82)
      goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_58:
  v62 = v38;
  swift_retain_n(v5);
  v63 = v5;
  v64 = v62;
  v65 = Logger.logObject.getter(v64);
  v66 = static os_log_type_t.error.getter(v65);
  if (os_log_type_enabled(v65, v66))
  {
    typeb = v66;
    v67 = swift_slowAlloc(32, -1);
    v92 = swift_slowAlloc(96, -1);
    v95 = (void *)v92;
    *(_DWORD *)v67 = 136446722;
    v94 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
    *(_WORD *)(v67 + 12) = 2082;
    sub_1000184A8(v63 + 24, (uint64_t)v97);
    sub_100671124((uint64_t)v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v69 = v68;
    v70 = v37;
    v72 = v71;
    sub_100671124((uint64_t)v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v94 = sub_10001A820(v69, v72, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
    swift_release_n(v63);
    *(_QWORD *)&v73 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v67 + 22) = 2080;
    v74 = objc_msgSend(v64, "description", v73);
    v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
    v77 = v76;

    v37 = v70;
    v94 = sub_10001A820(v75, v77, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v65, typeb, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v67, 0x20u);
    swift_arrayDestroy(v92, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v92, -1, -1);
    swift_slowDealloc(v67, -1, -1);

  }
  else
  {

    swift_release_n(v63);
  }
  v78 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v64);
  swift_willThrow(v78);

}

void sub_10063662C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(id *), unint64_t *a5, uint64_t a6, uint64_t (*a7)(uint64_t, unint64_t), unint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t);
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  unint64_t v65;
  char v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *log;
  os_log_type_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v106;
  unint64_t *v107;
  uint64_t v108;
  _QWORD v109[4];
  uint64_t v110;
  void *v111;
  uint64_t v112[3];
  _BYTE v113[56];
  uint64_t v114;

  v13 = v8;
  v114 = a2;
  v17 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(a3 + 24);
  v109[2] = &v114;
  v109[3] = v13;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(a1);
  v18 = sub_1005CA184(a4, v109, a1);
  if (v9)
  {
    v44 = v16;
LABEL_22:
    swift_bridgeObjectRelease(v44);
    return;
  }
  v97 = v17;
  v98 = a3;
  v102 = v16;
  v103 = (uint64_t)v18;
  v19 = (uint64_t)a8;
  v101 = v13;
  if (qword_1008371E8 != -1)
    goto LABEL_65;
LABEL_3:
  v20 = type metadata accessor for Logger(0);
  sub_10001AAA8(v20, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v103, 2);
  swift_bridgeObjectRetain(v102);
  v22 = Logger.logObject.getter(v21);
  v95 = static os_log_type_t.info.getter(v22);
  v23 = (unint64_t)v103 >> 62;
  v106 = (_QWORD *)a6;
  v107 = a5;
  v99 = (unint64_t)v103 >> 62;
  if (os_log_type_enabled(v22, v95))
  {
    log = v22;
    a6 = swift_slowAlloc(42, -1);
    v24 = swift_slowAlloc(96, -1);
    v112[0] = v24;
    *(_DWORD *)a6 = 136446978;
    v111 = (void *)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112);
    *(_WORD *)(a6 + 12) = 2048;
    v93 = v24;
    if (!v23)
    {
      v25 = v103;
      v26 = *(_QWORD *)((v103 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_71;
  }
  v33 = (unint64_t *)v19;

  swift_bridgeObjectRelease_n(v102, 2);
  swift_bridgeObjectRelease_n(v103, 2);
  v25 = v103;
  while (1)
  {
    if (v23)
    {
      v91 = v25 < 0 ? v25 : v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v25);
      v34 = _CocoaArrayWrapper.endIndex.getter(v91);
      swift_bridgeObjectRelease(v25);
    }
    else
    {
      v34 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v19 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v34)
      break;
    v112[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v34);
    if ((v34 & 0x8000000000000000) == 0)
    {
      v19 = 0;
      while (v34 != v19)
      {
        if ((v25 & 0xC000000000000001) != 0)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v25);
        else
          v35 = *(id *)(v25 + 8 * v19 + 32);
        v36 = v35;
        v37 = sub_1005CCBAC(objc_msgSend(v36, "remObjectID"), v107, (_QWORD *)a6);

        ++v19;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
        a5 = *(unint64_t **)(v112[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a5);
        v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(a5, v37);
        specialized ContiguousArray._endMutation()(v39);
        a6 = (uint64_t)v106;
        if (v34 == v19)
        {
          v19 = v112[0];
          v40 = a7;
          a5 = a8;
          v41 = v107;
          v23 = v99;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_3;
    }
    __break(1u);
LABEL_71:
    v25 = v103;
    if (v103 < 0)
      v92 = v103;
    else
      v92 = v103 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v103);
    v26 = _CocoaArrayWrapper.endIndex.getter(v92);
    swift_bridgeObjectRelease(v103);
LABEL_6:
    swift_bridgeObjectRelease(v25);
    v111 = (void *)v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(a6 + 22) = 2082;
    v103 = a6 + 24;
    v27 = sub_1000151B0(0, a5, v106);
    v28 = objc_msgSend((id)swift_getObjCClassFromMetadata(v27), "description");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v111 = (void *)sub_10001A820(v29, v31, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(a6 + 32) = 2082;
    swift_bridgeObjectRetain(v102);
    v111 = (void *)sub_10001A820(v97, v102, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112);
    swift_bridgeObjectRelease_n(v102, 3);
    _os_log_impl((void *)&_mh_execute_header, log, v95, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)a6, 0x2Au);
    swift_arrayDestroy(v93, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    v32 = a6;
    a6 = (uint64_t)v106;
    a5 = v107;
    swift_slowDealloc(v32, -1, -1);

    v33 = a8;
    v23 = v99;
  }
  v42 = a5;
  a5 = v33;
  v41 = v42;
  v40 = a7;
LABEL_20:
  v43 = v98;
  v100 = v40(v19, v98);
  swift_bridgeObjectRelease(v19);
  if (v23)
  {
    if (v25 < 0)
      v46 = v25;
    else
      v46 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v45 = _CocoaArrayWrapper.endIndex.getter(v46);
    swift_bridgeObjectRelease(v25);
    if (!v45)
      goto LABEL_56;
  }
  else
  {
    v45 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v45)
    {
LABEL_56:
      swift_bridgeObjectRelease(v100);
      v44 = v25;
      goto LABEL_22;
    }
  }
  v98 = v25 & 0xC000000000000001;
  v96 = (uint64_t *)(v43 + 48);
  swift_beginAccess(v43 + 48, v112, 0, 0);
  v47 = 4;
  v93 = 136446466;
  log = ((char *)&type metadata for Swift.AnyObject + 8);
  v97 = v45;
  while (1)
  {
    v48 = v47 - 4;
    if (v98)
    {
      v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47 - 4, v25);
      v50 = v47 - 3;
      if (__OFADD__(v48, 1))
        goto LABEL_64;
    }
    else
    {
      v49 = *(id *)(v25 + 8 * v47);
      v50 = v47 - 3;
      if (__OFADD__(v48, 1))
        goto LABEL_64;
    }
    v103 = v50;
    v51 = v49;
    v52 = sub_1005CCBAC(objc_msgSend(v51, "remObjectID"), v41, (_QWORD *)a6);
    v102 = v47;
    a7 = (uint64_t (*)(uint64_t, unint64_t))v51;

    if (!*(_QWORD *)(v100 + 16))
    {
      swift_bridgeObjectRelease(v100);
      swift_bridgeObjectRelease(v25);
      goto LABEL_59;
    }
    v53 = v52;
    v54 = ((uint64_t (*)(void))a5)();
    if ((v55 & 1) == 0)
      break;
    v19 = (uint64_t)*(id *)(*(_QWORD *)(v100 + 56) + 8 * v54);

    v56 = *v96;
    if ((*v96 & 0xC000000000000001) != 0)
    {
      if (v56 < 0)
        v57 = *v96;
      else
        v57 = v56 & 0xFFFFFFFFFFFFFF8;
      v58 = v53;
      v59 = (id)v19;
      swift_bridgeObjectRetain(v56);
      v60 = __CocoaDictionary.lookup(_:)(v58, v57);
      if (!v60)
      {
LABEL_51:

        swift_bridgeObjectRelease(v56);
        a6 = (uint64_t)v106;
        goto LABEL_53;
      }
      v61 = v60;
      v110 = v60;
      v62 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
      swift_unknownObjectRetain(v61);
      swift_dynamicCast(&v111, &v110, log, v62, 7);
      v63 = v111;
      swift_unknownObjectRelease(v61);
    }
    else
    {
      if (!*(_QWORD *)(v56 + 16))
      {
        v67 = (id)v19;
        goto LABEL_53;
      }
      v58 = v53;
      v64 = (id)v19;
      swift_bridgeObjectRetain(v56);
      v65 = sub_1002C66DC((uint64_t)v58);
      if ((v66 & 1) == 0)
        goto LABEL_51;
      v63 = *(id *)(*(_QWORD *)(v56 + 56) + 8 * v65);
    }

    swift_bridgeObjectRelease(v56);
    a6 = (uint64_t)v106;
    if (v63)
    {

LABEL_55:
      goto LABEL_32;
    }
LABEL_53:
    v68 = v53;
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.info.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      v71 = swift_slowAlloc(22, -1);
      v72 = (_QWORD *)swift_slowAlloc(8, -1);
      v73 = swift_slowAlloc(32, -1);
      v111 = (void *)v73;
      *(_DWORD *)v71 = 136446466;
      *(_QWORD *)(v71 + 4) = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v111);
      *(_WORD *)(v71 + 12) = 2114;
      *(_QWORD *)(v71 + 14) = v68;
      *v72 = v68;

      _os_log_impl((void *)&_mh_execute_header, v69, v70, "[%{public}s] Skipping mutateRelationshipOrdering() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v71, 0x16u);
      v74 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v72, 1, v74);
      swift_slowDealloc(v72, -1, -1);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      v75 = v71;
      a6 = (uint64_t)v106;
      swift_slowDealloc(v75, -1, -1);

      goto LABEL_55;
    }

LABEL_32:
    v47 = v102 + 1;
    a5 = a8;
    v41 = v107;
    if (v103 == v97)
      goto LABEL_56;
  }
  swift_bridgeObjectRelease(v100);
  swift_bridgeObjectRelease(v25);

LABEL_59:
  v76 = v52;
  swift_retain_n(v101, 2);
  v77 = v76;
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = swift_slowAlloc(32, -1);
    v108 = swift_slowAlloc(96, -1);
    v111 = (void *)v108;
    *(_DWORD *)v80 = 136446722;
    v110 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);
    *(_WORD *)(v80 + 12) = 2082;
    sub_1000184A8(v101 + 24, (uint64_t)v113);
    sub_100671124((uint64_t)v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v82 = v81;
    v84 = v83;
    sub_100671124((uint64_t)v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v110 = sub_10001A820(v82, v84, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);
    swift_release_n(v101, 2);
    *(_QWORD *)&v85 = swift_bridgeObjectRelease(v84).n128_u64[0];
    *(_WORD *)(v80 + 22) = 2080;
    v86 = objc_msgSend(v77, "description", v85);
    v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
    v89 = v88;

    v110 = sub_10001A820(v87, v89, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);

    swift_bridgeObjectRelease(v89);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v80, 0x20u);
    swift_arrayDestroy(v108, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v108, -1, -1);
    swift_slowDealloc(v80, -1, -1);

  }
  else
  {

    swift_release_n(v101, 2);
  }
  v90 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v77);
  swift_willThrow(v90);

}

void sub_1006371D8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *), unint64_t *a5, _QWORD *a6, uint64_t (*a7)(_QWORD *, uint64_t), uint64_t (*a8)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  char v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  unint64_t v58;
  char v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  unint64_t v64;
  char v65;
  id v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  double v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  os_log_type_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v92;
  _QWORD *v93;
  unint64_t *v94;
  uint64_t v95;
  _QWORD v96[4];
  uint64_t v97;
  void *v98;
  uint64_t v99[3];
  _BYTE v100[56];
  uint64_t v101;

  v13 = v8;
  v101 = a2;
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(char **)(a3 + 24);
  v96[2] = &v101;
  v96[3] = v13;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a1);
  v18 = sub_1005CA184(a4, v96, a1);
  if (v9)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v94 = a5;
  v87 = v16;
  v88 = a3;
  v92 = (uint64_t)v18;
  if (qword_1008371E8 != -1)
    goto LABEL_65;
LABEL_4:
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v92, 2);
  swift_bridgeObjectRetain(v17);
  v21 = Logger.logObject.getter(v20);
  v85 = static os_log_type_t.info.getter(v21);
  v22 = (unint64_t)v92 >> 62;
  v89 = v13;
  v93 = a6;
  if (os_log_type_enabled(v21, v85))
  {
    v84 = v17;
    v23 = swift_slowAlloc(42, -1);
    v24 = swift_slowAlloc(96, -1);
    v99[0] = v24;
    *(_DWORD *)v23 = 136446978;
    v98 = (void *)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99);
    *(_WORD *)(v23 + 12) = 2048;
    v83 = v24;
    if (!v22)
    {
      v25 = v21;
      v13 = v92;
      v26 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_7;
    }
    goto LABEL_71;
  }

  swift_bridgeObjectRelease_n(v17, 2);
  swift_bridgeObjectRelease_n(v92, 2);
  v13 = v92;
  while (1)
  {
    v17 = (char *)v22;
    if (v22)
    {
      v81 = v13 < 0 ? v13 : v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v23 = _CocoaArrayWrapper.endIndex.getter(v81);
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v31 = _swiftEmptyArrayStorage;
    if (!v23)
      break;
    v99[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    if ((v23 & 0x8000000000000000) == 0)
    {
      v32 = 0;
      while (v23 != v32)
      {
        if ((v13 & 0xC000000000000001) != 0)
          v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v13);
        else
          v33 = *(id *)(v13 + 8 * v32 + 32);
        v34 = v33;
        v35 = sub_1005CCBAC(objc_msgSend(v34, "remObjectID"), v94, a6);

        ++v32;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v36);
        v17 = *(char **)(v99[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
        v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v35);
        specialized ContiguousArray._endMutation()(v37);
        a6 = v93;
        if (v23 == v32)
        {
          v31 = (_QWORD *)v99[0];
          v38 = a7;
          v17 = (char *)((unint64_t)v92 >> 62);
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_4;
    }
    __break(1u);
LABEL_71:
    v25 = v21;
    v13 = v92;
    if (v92 < 0)
      v82 = v92;
    else
      v82 = v92 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v92);
    v26 = _CocoaArrayWrapper.endIndex.getter(v82);
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRelease();
    v98 = (void *)v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99);
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2082;
    v27 = sub_1000151B0(0, v94, v93);
    v28 = objc_msgSend((id)swift_getObjCClassFromMetadata(v27), "description");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v21 = v30;

    v98 = (void *)sub_10001A820(v29, (unint64_t)v21, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99);
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 32) = 2082;
    swift_bridgeObjectRetain(v84);
    v98 = (void *)sub_10001A820(v87, (unint64_t)v84, v99);
    a6 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99);
    swift_bridgeObjectRelease_n(v84, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, v85, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v22 = (unint64_t)v92 >> 62;
  }
  v38 = a7;
LABEL_22:
  v39 = v38(v31, v88);
  swift_bridgeObjectRelease();
  if (v17)
  {
    if (v92 < 0)
      v41 = v92;
    else
      v41 = v92 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v92);
    v40 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (!v40)
      goto LABEL_21;
  }
  else
  {
    v40 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v40)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  v86 = (uint64_t *)(v88 + 48);
  swift_beginAccess(v88 + 48, v99, 0, 0);
  v42 = 4;
  v84 = (char *)&type metadata for Swift.AnyObject + 8;
  v87 = v40;
  v88 = v39;
  while (1)
  {
    v43 = v42 - 4;
    if ((v92 & 0xC000000000000001) != 0)
    {
      v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42 - 4, v92);
      v13 = v42 - 3;
      if (__OFADD__(v43, 1))
        goto LABEL_64;
    }
    else
    {
      v44 = *(id *)(v92 + 8 * v42);
      v13 = v42 - 3;
      if (__OFADD__(v43, 1))
        goto LABEL_64;
    }
    v45 = v44;
    v46 = sub_1005CCBAC(objc_msgSend(v45, "remObjectID"), v94, a6);
    a7 = (uint64_t (*)(_QWORD *, uint64_t))v45;

    if (!*(_QWORD *)(v39 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_59;
    }
    v47 = v46;
    v48 = a8();
    if ((v49 & 1) == 0)
      break;
    v50 = *(id *)(*(_QWORD *)(v39 + 56) + 8 * v48);

    v51 = *v86;
    if ((*v86 & 0xC000000000000001) != 0)
    {
      if (v51 < 0)
        v17 = (char *)*v86;
      else
        v17 = (char *)(v51 & 0xFFFFFFFFFFFFFF8);
      v52 = v47;
      v53 = v50;
      swift_bridgeObjectRetain(v51);
      v54 = __CocoaDictionary.lookup(_:)(v52, v17);
      if (!v54)
      {
LABEL_49:

        swift_bridgeObjectRelease();
LABEL_51:
        v56 = 0;
        goto LABEL_52;
      }
      v17 = (char *)v54;
      v97 = v54;
      v55 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v98, &v97, v84, v55, 7);
      v56 = v98;
      swift_unknownObjectRelease(v17);
    }
    else
    {
      if (!*(_QWORD *)(v51 + 16))
      {
        v60 = v50;
        goto LABEL_51;
      }
      v52 = v47;
      v57 = v50;
      swift_bridgeObjectRetain(v51);
      v58 = sub_1002C66DC((uint64_t)v52);
      if ((v59 & 1) == 0)
        goto LABEL_49;
      v56 = *(id *)(*(_QWORD *)(v51 + 56) + 8 * v58);
    }

    swift_bridgeObjectRelease();
LABEL_52:

    v61 = *(_QWORD *)(v89 + 72);
    v62 = objc_msgSend(a7, "remObjectID");
    v63 = v62;
    if (*(_QWORD *)(v61 + 16))
    {
      v64 = sub_1002C66DC((uint64_t)v62);
      v39 = v88;
      if ((v65 & 1) != 0)
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v61 + 56) + 8 * v64));
    }
    else
    {
      v39 = v88;
    }

    swift_bridgeObjectRelease();
    ++v42;
    a6 = v93;
    if (v13 == v87)
      goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_59:
  v66 = v46;
  swift_retain_n(v89);
  v67 = v66;
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.error.getter(v68);
  if (os_log_type_enabled(v68, v69))
  {
    v70 = swift_slowAlloc(32, -1);
    v95 = swift_slowAlloc(96, -1);
    v98 = (void *)v95;
    *(_DWORD *)v70 = 136446722;
    v97 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
    *(_WORD *)(v70 + 12) = 2082;
    sub_1000184A8(v89 + 24, (uint64_t)v100);
    sub_100671124((uint64_t)v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v72 = v71;
    v74 = v73;
    sub_100671124((uint64_t)v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v97 = sub_10001A820(v72, v74, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
    swift_release_n(v89);
    *(_QWORD *)&v75 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v70 + 22) = 2080;
    v76 = objc_msgSend(v67, "description", v75);
    v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    v79 = v78;

    v97 = sub_10001A820(v77, v79, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v70, 0x20u);
    swift_arrayDestroy(v95, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1, -1);
    swift_slowDealloc(v70, -1, -1);

  }
  else
  {

    swift_release_n(v89);
  }
  v80 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v67);
  swift_willThrow(v80);

}

void sub_100637C74(unint64_t a1, uint64_t a2, char *a3)
{
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t *v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char **v38;
  unint64_t v39;
  id v40;
  void *v41;
  id v42;
  unint64_t v43;
  char v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  unint64_t v56;
  char v57;
  id v58;
  uint64_t v59;
  id v60;
  void *v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  double v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  id v74;
  id v75;
  id v76;
  uint64_t (*v77)();
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t (*v81)();
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t (*v86)();
  id v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  id v92;
  id v93;
  NSObject *v94;
  uint64_t (*v95)();
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  double v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  void *v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  Swift::String v114;
  Swift::String v115;
  id v116;
  uint64_t v117;
  void *v118;
  void *v119;
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  NSString v124;
  uint64_t v125;
  id v126;
  id v127;
  NSObject *v128;
  uint64_t (*v129)();
  os_log_type_t v130;
  char **v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  double v138;
  id v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;
  Swift::String v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  Swift::String v149;
  Swift::String v150;
  id v151;
  uint64_t v152;
  void *v153;
  void *v154;
  Swift::String v155;
  Swift::String v156;
  Swift::String v157;
  Swift::String v158;
  NSString v159;
  uint64_t v160;
  id v161;
  id v162;
  NSObject *v163;
  uint64_t (*v164)();
  os_log_type_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  double v171;
  id v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  os_log_type_t type;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  os_log_type_t v193;
  id v194;
  void *v195;
  unint64_t v196;
  uint64_t *v197;
  id v198;
  NSObject *log;
  os_log_t loga;
  os_log_type_t v201;
  os_log_type_t v202;
  uint64_t (*v203)();
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD v208[5];
  void *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212[3];
  _BYTE v213[48];
  _BYTE v214[48];
  _BYTE v215[48];
  _BYTE v216[48];
  _BYTE v217[48];
  _BYTE v218[56];
  uint64_t v219;

  v5 = v3;
  v6 = (uint64_t *)a3;
  v219 = a2;
  v9 = *((_QWORD *)a3 + 2);
  v8 = *((_QWORD *)a3 + 3);
  v208[2] = &v219;
  v208[3] = v5;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(a1);
  v10 = sub_1005CA184((uint64_t (*)(id *))sub_100671EF0, v208, a1);
  if (v4)
    goto LABEL_20;
  v11 = (uint64_t)v10;
  if (qword_1008371E8 != -1)
    goto LABEL_82;
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain(v8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  log = v14;
  v16 = (unint64_t)v11 >> 62;
  v203 = v5;
  v204 = v11;
  v196 = (unint64_t)v11 >> 62;
  v197 = v6;
  if (os_log_type_enabled(v14, v15))
  {
    v193 = v15;
    v6 = (uint64_t *)swift_slowAlloc(42, -1);
    v191 = swift_slowAlloc(96, -1);
    v212[0] = v191;
    *(_DWORD *)v6 = 136446978;
    v209 = (void *)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
    *((_WORD *)v6 + 6) = 2048;
    if (!v16)
    {
      v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_88;
  }

  swift_bridgeObjectRelease_n(v8, 2);
  swift_bridgeObjectRelease_n(v11, 2);
  while (1)
  {
    if (v16)
    {
      v177 = v11 < 0 ? v11 : v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v23 = _CocoaArrayWrapper.endIndex.getter(v177);
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v8 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v23)
      break;
    v212[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    if ((v23 & 0x8000000000000000) == 0)
    {
      v8 = 0;
      v9 = v11 & 0xC000000000000001;
      v5 = type metadata accessor for REMCDTemplate;
      while (v23 != v8)
      {
        if (v9)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v11);
        else
          v24 = *(id *)(v11 + 8 * v8 + 32);
        v25 = v24;
        v6 = (uint64_t *)sub_1005CDB68(objc_msgSend(v25, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, 0x6D655444434D4552, (void *)0xED00006574616C70);
        ++v8;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
        v27 = *(_QWORD *)(v212[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
        v28 = v27;
        v11 = v204;
        v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v6);
        specialized ContiguousArray._endMutation()(v29);
        if (v23 == v8)
        {
          v8 = v212[0];
          v5 = v203;
          v16 = v196;
          v6 = v197;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_82:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_3;
    }
    __break(1u);
LABEL_88:
    if (v11 < 0)
      v178 = v11;
    else
      v178 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v17 = _CocoaArrayWrapper.endIndex.getter(v178);
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    v209 = (void *)v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
    swift_bridgeObjectRelease();
    *((_WORD *)v6 + 11) = 2082;
    v18 = type metadata accessor for REMCDTemplate();
    v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v209 = (void *)sub_10001A820(v20, v22, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
    v11 = v204;
    swift_bridgeObjectRelease();
    *((_WORD *)v6 + 16) = 2082;
    swift_bridgeObjectRetain(v8);
    v209 = (void *)sub_10001A820(v9, v8, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, log, v193, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v6, 0x2Au);
    swift_arrayDestroy(v191, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v191, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v5 = v203;
    v16 = v196;
    v6 = v197;
  }
LABEL_19:
  sub_100649970(v8, (uint64_t)v6);
  v185 = v30;
  swift_bridgeObjectRelease();
  if (v16)
  {
    if (v11 < 0)
      v32 = v11;
    else
      v32 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v31 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v33 = v11;
  v34 = v185;
  if (!v31)
  {
LABEL_66:
    swift_bridgeObjectRelease();
LABEL_20:
    swift_bridgeObjectRelease();
    return;
  }
  v35 = (uint64_t)v5 + 24;
  v36 = v33 & 0xC000000000000001;
  v184 = v6 + 6;
  swift_beginAccess(v6 + 6, v212, 0, 0);
  v37 = 0;
  v179 = v33 + 32;
  v180 = v33 & 0xFFFFFFFFFFFFFF8;
  v38 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
  v186 = (uint64_t)v5 + 24;
  v181 = v33 & 0xC000000000000001;
  v182 = v31;
  while (1)
  {
    if (v36)
    {
      v39 = v37;
      v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v204);
    }
    else
    {
      if (v37 >= *(_QWORD *)(v180 + 16))
        goto LABEL_93;
      v39 = v37;
      v40 = *(id *)(v179 + 8 * v37);
    }
    v183 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
LABEL_93:
      __break(1u);
      return;
    }
    loga = (os_log_t)v40;
    v41 = sub_1005CDB68(-[NSObject remObjectID](loga, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, 0x6D655444434D4552, (void *)0xED00006574616C70);

    if (!*(_QWORD *)(v34 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_77:
      v161 = v41;
      swift_retain_n(v5);
      v162 = v161;
      v163 = Logger.logObject.getter(v162);
      v164 = v5;
      v165 = static os_log_type_t.error.getter(v163);
      if (os_log_type_enabled(v163, v165))
      {
        v166 = swift_slowAlloc(32, -1);
        v207 = swift_slowAlloc(96, -1);
        v209 = (void *)v207;
        *(_DWORD *)v166 = 136446722;
        v211 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        *(_WORD *)(v166 + 12) = 2082;
        sub_1000184A8(v35, (uint64_t)v213);
        sub_100671124((uint64_t)v213, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v168 = v167;
        v170 = v169;
        sub_100671124((uint64_t)v213, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v211 = sub_10001A820(v168, v170, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        swift_release_n(v164);
        *(_QWORD *)&v171 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v166 + 22) = 2080;
        v172 = objc_msgSend(v162, "description", v171);
        v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v172);
        v175 = v174;

        v211 = sub_10001A820(v173, v175, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v163, v165, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v166, 0x20u);
        swift_arrayDestroy(v207, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v207, -1, -1);
        swift_slowDealloc(v166, -1, -1);

      }
      else
      {

        swift_release_n(v164);
      }
      v176 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v162);
      swift_willThrow(v176);

      return;
    }
    v42 = v41;
    v43 = sub_1002C672C(v42);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_77;
    }
    v45 = *(id *)(*(_QWORD *)(v34 + 56) + 8 * v43);

    v46 = *v184;
    v192 = v45;
    if ((*v184 & 0xC000000000000001) != 0)
    {
      if (v46 < 0)
        v47 = *v184;
      else
        v47 = v46 & 0xFFFFFFFFFFFFFF8;
      v48 = v42;
      v49 = v45;
      swift_bridgeObjectRetain(v46);
      v50 = __CocoaDictionary.lookup(_:)(v48, v47);
      if (v50)
      {
        v51 = v50;
        v211 = v50;
        v52 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v51);
        swift_dynamicCast(&v209, &v211, (char *)&type metadata for Swift.AnyObject + 8, v52, 7);
        v53 = v209;
        swift_unknownObjectRelease(v51);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v53 = 0;
      }
      v45 = v192;
      goto LABEL_50;
    }
    if (!*(_QWORD *)(v46 + 16))
    {
      v58 = v45;
LABEL_49:
      v53 = 0;
      goto LABEL_50;
    }
    v54 = v42;
    v55 = v45;
    swift_bridgeObjectRetain(v46);
    v56 = sub_1002C66DC((uint64_t)v54);
    if ((v57 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    v53 = *(id *)(*(_QWORD *)(v46 + 56) + 8 * v56);

    swift_bridgeObjectRelease();
LABEL_50:

    v59 = *((_QWORD *)v5 + 9);
    v60 = -[NSObject remObjectID](loga, "remObjectID");
    v61 = v60;
    if (*(_QWORD *)(v59 + 16) && (v62 = sub_1002C66DC((uint64_t)v60), (v63 & 1) != 0))
    {
      v64 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v62);
      swift_bridgeObjectRetain(v64);
    }
    else
    {
      v64 = 0;
    }

    v65 = sub_1005CF5F0(v64, (uint64_t)&off_1007DC2E0, (uint64_t)sub_1002C9060, (uint64_t (*)(void))sub_1005CAF9C, (uint64_t *)&unk_100851918);
    *(_QWORD *)&v66 = swift_bridgeObjectRelease().n128_u64[0];
    v67 = v65[2];
    if (v67)
      break;
LABEL_65:

    swift_bridgeObjectRelease();
    v36 = v181;
    v37 = v183;
    v34 = v185;
    v35 = v186;
    if (v183 == v182)
      goto LABEL_66;
  }
  v198 = v42;
  while (1)
  {
    v68 = objc_msgSend(v45, v38[214], v66);
    v69 = objc_msgSend(v68, "relationshipsByName");

    v70 = sub_1000151B0(0, &qword_100851910, NSRelationshipDescription_ptr);
    v71 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v69, &type metadata for String, v70, &protocol witness table for String);

    if (!*(_QWORD *)(v71 + 16))
      break;
    v72 = sub_10001A6DC(0x736E6F6974636573, 0xE800000000000000);
    if ((v73 & 1) == 0)
      break;
    v74 = *(id *)(*(_QWORD *)(v71 + 56) + 8 * v72);
    if (!objc_msgSend(v74, "isOrdered", swift_bridgeObjectRelease().n128_f64[0]))
    {
      v195 = v74;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v126 = v42;
      swift_retain_n(v5);
      v127 = v126;
      v128 = Logger.logObject.getter(v127);
      v129 = v5;
      v130 = static os_log_type_t.fault.getter();
      v131 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      if (os_log_type_enabled(v128, v130))
      {
        v132 = swift_slowAlloc(42, -1);
        v206 = swift_slowAlloc(128, -1);
        v209 = (void *)v206;
        *(_DWORD *)v132 = 136446978;
        v202 = v130;
        v211 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        *(_WORD *)(v132 + 12) = 2082;
        v133 = v186;
        sub_1000184A8(v186, (uint64_t)v218);
        sub_100671124((uint64_t)v218, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v135 = v134;
        v137 = v136;
        sub_100671124((uint64_t)v218, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v211 = sub_10001A820(v135, v137, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        swift_release_n(v129);
        *(_QWORD *)&v138 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v132 + 22) = 2080;
        v139 = objc_msgSend(v127, "description", v138);
        v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
        v142 = v141;

        v211 = sub_10001A820(v140, v142, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);

        swift_bridgeObjectRelease();
        *(_WORD *)(v132 + 32) = 2080;
        v211 = sub_10001A820(0x736E6F6974636573, 0xE800000000000000, (uint64_t *)&v209);
        v131 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        _os_log_impl((void *)&_mh_execute_header, v128, v202, "[%{public}s] Tried to mutate a relationship that is not ordered -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}", (uint8_t *)v132, 0x2Au);
        swift_arrayDestroy(v206, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v206, -1, -1);
        swift_slowDealloc(v132, -1, -1);

      }
      else
      {

        swift_release_n(v5);
        v133 = v186;
      }
      v143 = (void *)objc_opt_self(REMError);
      v209 = 0;
      v210 = 0xE000000000000000;
      _StringGuts.grow(_:)(115);
      v144._countAndFlagsBits = 0xD000000000000044;
      v144._object = (void *)0x8000000100709C60;
      String.append(_:)(v144);
      sub_1000184A8(v133, (uint64_t)v217);
      sub_100671124((uint64_t)v217, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v146 = v145;
      v148 = v147;
      sub_100671124((uint64_t)v217, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v149._countAndFlagsBits = v146;
      v149._object = v148;
      String.append(_:)(v149);
      swift_bridgeObjectRelease();
      v150._countAndFlagsBits = 0x656A624F6463202CLL;
      v150._object = (void *)0xEE00203A44497463;
      String.append(_:)(v150);
      v151 = objc_msgSend(v127, v131[152]);
      v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
      v154 = v153;

      v155._countAndFlagsBits = v152;
      v155._object = v154;
      String.append(_:)(v155);
      swift_bridgeObjectRelease();
      v156._object = (void *)0x8000000100709C40;
      v156._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v156);
      v157._countAndFlagsBits = 0x736E6F6974636573;
      v157._object = (void *)0xE800000000000000;
      String.append(_:)(v157);
      v158._countAndFlagsBits = 125;
      v158._object = (void *)0xE100000000000000;
      String.append(_:)(v158);
      v159 = String._bridgeToObjectiveC()();
      objc_msgSend(v143, "internalErrorWithDebugDescription:", v159, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v160);
      return;
    }
    v75 = v42;
    swift_retain_n(v5);
    v76 = v75;
    v77 = v5;
    v78 = Logger.logObject.getter(v76);
    v79 = static os_log_type_t.default.getter(v78);
    if (os_log_type_enabled(v78, v79))
    {
      v194 = v74;
      v80 = swift_slowAlloc(52, -1);
      v187 = (_QWORD *)swift_slowAlloc(8, -1);
      v189 = swift_slowAlloc(128, -1);
      v190 = v67;
      v209 = (void *)v189;
      *(_DWORD *)v80 = 136447234;
      v81 = v77;
      v211 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      *(_WORD *)(v80 + 12) = 2082;
      sub_1000184A8(v186, (uint64_t)v216);
      sub_100671124((uint64_t)v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v83 = v82;
      type = v79;
      v85 = v84;
      sub_100671124((uint64_t)v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v211 = sub_10001A820(v83, v85, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      v86 = v81;
      v67 = v190;
      swift_release_n(v86);
      swift_bridgeObjectRelease();
      *(_WORD *)(v80 + 22) = 2114;
      v211 = (uint64_t)v76;
      v87 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      *v187 = v198;

      v45 = v192;
      *(_WORD *)(v80 + 32) = 2082;
      v211 = sub_10001A820(0xD00000000000001CLL, 0x80000001006F3F50, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      *(_WORD *)(v80 + 42) = 2082;
      v211 = sub_10001A820(0x736E6F6974636573, 0xE800000000000000, (uint64_t *)&v209);
      v38 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      _os_log_impl((void *)&_mh_execute_header, v78, type, "[%{public}s] Updating relationship ordering {author: %{public}s, objectID: %{public}@, changedValueKey: %{public}s, orderableRelationshipKey: %{public}s}", (uint8_t *)v80, 0x34u);
      v88 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v187, 1, v88);
      swift_slowDealloc(v187, -1, -1);
      swift_arrayDestroy(v189, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v189, -1, -1);
      v89 = v80;
      v74 = v194;
      swift_slowDealloc(v89, -1, -1);

      v5 = v203;
    }
    else
    {

      swift_release_n(v77);
      v5 = v77;
    }
    v90 = objc_autoreleasePoolPush();
    sub_10063F444(v45, v219, (uint64_t)loga, (uint64_t)v5, 0xD00000000000001ALL, 0x8000000100709B10, (void (*)(void *, uint64_t))sub_100159EE4);
    objc_autoreleasePoolPop(v90);
    if (*((_BYTE *)v5 + 104) == 1)
    {
      v91 = v45;
      objc_msgSend(v91, "updateChangeCount");

    }
    --v67;
    v42 = v198;
    if (!v67)
      goto LABEL_65;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v92 = v42;
  swift_retain_n(v5);
  v93 = v92;
  v94 = Logger.logObject.getter(v93);
  v95 = v5;
  v96 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v94, v96))
  {
    v97 = swift_slowAlloc(42, -1);
    v205 = swift_slowAlloc(128, -1);
    v209 = (void *)v205;
    *(_DWORD *)v97 = 136446978;
    v201 = v96;
    v211 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
    *(_WORD *)(v97 + 12) = 2082;
    v98 = v186;
    sub_1000184A8(v186, (uint64_t)v215);
    sub_100671124((uint64_t)v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v100 = v99;
    v102 = v101;
    sub_100671124((uint64_t)v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v211 = sub_10001A820(v100, v102, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
    swift_release_n(v95);
    *(_QWORD *)&v103 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v97 + 22) = 2080;
    v104 = objc_msgSend(v93, "description", v103);
    v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
    v107 = v106;

    v211 = sub_10001A820(v105, v107, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);

    swift_bridgeObjectRelease();
    *(_WORD *)(v97 + 32) = 2080;
    v211 = sub_10001A820(0x736E6F6974636573, 0xE800000000000000, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
    _os_log_impl((void *)&_mh_execute_header, v94, v201, "[%{public}s] Tried to mutate ordering of a non-existing relationship -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}", (uint8_t *)v97, 0x2Au);
    swift_arrayDestroy(v205, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v205, -1, -1);
    swift_slowDealloc(v97, -1, -1);

  }
  else
  {

    swift_release_n(v5);
    v98 = v186;
  }
  v108 = (void *)objc_opt_self(REMError);
  v209 = 0;
  v210 = 0xE000000000000000;
  _StringGuts.grow(_:)(120);
  v109._countAndFlagsBits = 0xD000000000000049;
  v109._object = (void *)0x8000000100709BF0;
  String.append(_:)(v109);
  sub_1000184A8(v98, (uint64_t)v214);
  sub_100671124((uint64_t)v214, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
  sub_1000181B8();
  v111 = v110;
  v113 = v112;
  sub_100671124((uint64_t)v214, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
  v114._countAndFlagsBits = v111;
  v114._object = v113;
  String.append(_:)(v114);
  swift_bridgeObjectRelease();
  v115._countAndFlagsBits = 0x656A624F6463202CLL;
  v115._object = (void *)0xEE00203A44497463;
  String.append(_:)(v115);
  v116 = objc_msgSend(v93, "description");
  v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
  v119 = v118;

  v120._countAndFlagsBits = v117;
  v120._object = v119;
  String.append(_:)(v120);
  swift_bridgeObjectRelease();
  v121._object = (void *)0x8000000100709C40;
  v121._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v121);
  v122._countAndFlagsBits = 0x736E6F6974636573;
  v122._object = (void *)0xE800000000000000;
  String.append(_:)(v122);
  v123._countAndFlagsBits = 125;
  v123._object = (void *)0xE100000000000000;
  String.append(_:)(v123);
  v124 = String._bridgeToObjectiveC()();
  objc_msgSend(v108, "internalErrorWithDebugDescription:", v124, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v125);
}

void sub_1006394E0(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  __objc2_class **v3;
  uint64_t v4;
  __objc2_class **v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  id v40;
  unint64_t v41;
  char v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  unint64_t v54;
  char v55;
  id v56;
  __objc2_class *v57;
  id v58;
  void *v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  double v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  id v72;
  id v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  id v87;
  id v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  double v97;
  id v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  void *v102;
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  Swift::String v108;
  Swift::String v109;
  id v110;
  uint64_t v111;
  void *v112;
  void *v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  NSString v118;
  uint64_t v119;
  id v120;
  id v121;
  NSObject *v122;
  os_log_type_t v123;
  char **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  double v131;
  id v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  void *v136;
  Swift::String v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void *v141;
  Swift::String v142;
  Swift::String v143;
  id v144;
  uint64_t v145;
  void *v146;
  void *v147;
  Swift::String v148;
  Swift::String v149;
  Swift::String v150;
  Swift::String v151;
  NSString v152;
  uint64_t v153;
  id v154;
  id v155;
  NSObject *v156;
  os_log_type_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  double v163;
  id v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  os_log_type_t type;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  id v185;
  void *v186;
  os_log_type_t v187;
  unint64_t v188;
  id v189;
  uint64_t *v190;
  id v191;
  os_log_type_t v192;
  os_log_type_t v193;
  __objc2_class **v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[5];
  void *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203[3];
  _BYTE v204[48];
  _BYTE v205[48];
  _BYTE v206[48];
  _BYTE v207[48];
  _BYTE v208[48];
  _BYTE v209[56];
  uint64_t v210;

  v5 = v3;
  v6 = a3;
  v210 = a2;
  v8 = a3[2];
  v9 = a3[3];
  v199[2] = &v210;
  v199[3] = v5;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a1);
  v10 = sub_1005CA184((uint64_t (*)(id *))sub_10067216C, v199, a1);
  if (v4)
    goto LABEL_20;
  v11 = (uint64_t)v10;
  if (qword_1008371E8 != -1)
    goto LABEL_82;
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain(v9);
  v14 = Logger.logObject.getter(v13);
  v187 = static os_log_type_t.info.getter(v14);
  v15 = v14;
  v16 = (unint64_t)v11 >> 62;
  v194 = v5;
  v195 = v11;
  v188 = (unint64_t)v11 >> 62;
  v190 = v6;
  if (os_log_type_enabled(v14, v187))
  {
    v184 = v8;
    v5 = (__objc2_class **)swift_slowAlloc(42, -1);
    v182 = swift_slowAlloc(96, -1);
    v203[0] = v182;
    *(_DWORD *)v5 = 136446978;
    v200 = (void *)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v203);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201);
    *((_WORD *)v5 + 6) = 2048;
    if (!v16)
    {
      v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_88;
  }

  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease_n(v11, 2);
  while (1)
  {
    if (v16)
    {
      v169 = v11 < 0 ? v11 : v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v8 = _CocoaArrayWrapper.endIndex.getter(v169);
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v9 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v8)
      break;
    v203[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    if ((v8 & 0x8000000000000000) == 0)
    {
      v9 = 0;
      v23 = v11 & 0xC000000000000001;
      v6 = (uint64_t *)&unk_100840000;
      v5 = off_1007D6720;
      while (v8 != v9)
      {
        if (v23)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v11);
        else
          v24 = *(id *)(v11 + 8 * v9 + 32);
        v25 = v24;
        v26 = sub_1005CCBAC(objc_msgSend(v25, "remObjectID"), (unint64_t *)&unk_100840000, off_1007D6720);
        ++v9;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v28 = *(_QWORD *)(v203[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
        v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
        specialized ContiguousArray._endMutation()(v29);
        v11 = v195;
        if (v8 == v9)
        {
          v9 = v203[0];
          v5 = v194;
          v16 = v188;
          v6 = v190;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_82:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_3;
    }
    __break(1u);
LABEL_88:
    if (v11 < 0)
      v170 = v11;
    else
      v170 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v17 = _CocoaArrayWrapper.endIndex.getter(v170);
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    v200 = (void *)v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201);
    swift_bridgeObjectRelease();
    *((_WORD *)v5 + 11) = 2082;
    v18 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
    v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v200 = (void *)sub_10001A820(v20, v22, v203);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201);
    v11 = v195;
    swift_bridgeObjectRelease();
    *((_WORD *)v5 + 16) = 2082;
    swift_bridgeObjectRetain(v9);
    v200 = (void *)sub_10001A820(v184, v9, v203);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v187, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v5, 0x2Au);
    swift_arrayDestroy(v182, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v182, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    v5 = v194;
    v16 = v188;
    v6 = v190;
  }
LABEL_19:
  sub_100649D90(v9, (uint64_t)v6);
  v177 = v30;
  swift_bridgeObjectRelease();
  if (v16)
  {
    if (v11 < 0)
      v32 = v11;
    else
      v32 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v31 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v33 = v11;
  v34 = v177;
  if (!v31)
  {
LABEL_66:
    swift_bridgeObjectRelease();
LABEL_20:
    swift_bridgeObjectRelease();
    return;
  }
  v35 = (uint64_t)(v5 + 3);
  v36 = v33 & 0xC000000000000001;
  v176 = v6 + 6;
  swift_beginAccess(v6 + 6, v203, 0, 0);
  v37 = 0;
  v171 = v33 + 32;
  v172 = v33 & 0xFFFFFFFFFFFFFF8;
  v178 = (uint64_t)(v5 + 3);
  v173 = v33 & 0xC000000000000001;
  v174 = v31;
  while (1)
  {
    if (v36)
    {
      v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v195);
    }
    else
    {
      if (v37 >= *(_QWORD *)(v172 + 16))
        goto LABEL_93;
      v38 = *(id *)(v171 + 8 * v37);
    }
    v175 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
      __break(1u);
LABEL_93:
      __break(1u);
      return;
    }
    v191 = v38;
    v39 = sub_1005CCBAC(objc_msgSend(v191, "remObjectID"), (unint64_t *)&unk_100840000, off_1007D6720);

    if (!*(_QWORD *)(v34 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_77:
      v154 = v39;
      swift_retain_n(v5);
      v155 = v154;
      v156 = Logger.logObject.getter(v155);
      v157 = static os_log_type_t.error.getter(v156);
      if (os_log_type_enabled(v156, v157))
      {
        v158 = swift_slowAlloc(32, -1);
        v198 = swift_slowAlloc(96, -1);
        v200 = (void *)v198;
        *(_DWORD *)v158 = 136446722;
        v202 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
        *(_WORD *)(v158 + 12) = 2082;
        sub_1000184A8(v35, (uint64_t)v204);
        sub_100671124((uint64_t)v204, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v160 = v159;
        v162 = v161;
        sub_100671124((uint64_t)v204, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v202 = sub_10001A820(v160, v162, (uint64_t *)&v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
        swift_release_n(v5);
        *(_QWORD *)&v163 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v158 + 22) = 2080;
        v164 = objc_msgSend(v155, "description", v163);
        v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
        v167 = v166;

        v202 = sub_10001A820(v165, v167, (uint64_t *)&v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v156, v157, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v158, 0x20u);
        swift_arrayDestroy(v198, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v198, -1, -1);
        swift_slowDealloc(v158, -1, -1);

      }
      else
      {

        swift_release_n(v5);
      }
      v168 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v155);
      swift_willThrow(v168);

      return;
    }
    v40 = v39;
    v41 = sub_1002C672C(v40);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_77;
    }
    v43 = *(id *)(*(_QWORD *)(v34 + 56) + 8 * v41);

    v44 = *v176;
    v183 = v43;
    if ((*v176 & 0xC000000000000001) != 0)
    {
      if (v44 < 0)
        v45 = *v176;
      else
        v45 = v44 & 0xFFFFFFFFFFFFFF8;
      v46 = v40;
      v47 = v43;
      swift_bridgeObjectRetain(v44);
      v48 = __CocoaDictionary.lookup(_:)(v46, v45);
      if (v48)
      {
        v49 = v48;
        v202 = v48;
        v50 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v49);
        swift_dynamicCast(&v200, &v202, (char *)&type metadata for Swift.AnyObject + 8, v50, 7);
        v51 = v200;
        swift_unknownObjectRelease(v49);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v51 = 0;
      }
      v43 = v183;
      goto LABEL_50;
    }
    if (!*(_QWORD *)(v44 + 16))
    {
      v56 = v43;
LABEL_49:
      v51 = 0;
      goto LABEL_50;
    }
    v52 = v40;
    v53 = v43;
    swift_bridgeObjectRetain(v44);
    v54 = sub_1002C66DC((uint64_t)v52);
    if ((v55 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    v51 = *(id *)(*(_QWORD *)(v44 + 56) + 8 * v54);

    swift_bridgeObjectRelease();
LABEL_50:

    v57 = v5[9];
    v58 = objc_msgSend(v191, "remObjectID");
    v59 = v58;
    if (v57->cache && (v60 = sub_1002C66DC((uint64_t)v58), (v61 & 1) != 0))
    {
      v62 = *((_QWORD *)v57[1].cache + v60);
      swift_bridgeObjectRetain(v62);
    }
    else
    {
      v62 = 0;
    }

    v63 = sub_1005CF5F0(v62, (uint64_t)&off_1007DC4D8, (uint64_t)sub_1002C9084, (uint64_t (*)(void))sub_1005CAF9C, &qword_1008519B8);
    *(_QWORD *)&v64 = swift_bridgeObjectRelease().n128_u64[0];
    v65 = v63[2];
    if (v65)
      break;
LABEL_65:

    swift_bridgeObjectRelease();
    v36 = v173;
    v37 = v175;
    v34 = v177;
    v35 = v178;
    if (v175 == v174)
      goto LABEL_66;
  }
  v189 = v40;
  while (1)
  {
    v66 = objc_msgSend(v43, "entity", v64);
    v67 = objc_msgSend(v66, "relationshipsByName");

    v68 = sub_1000151B0(0, &qword_100851910, NSRelationshipDescription_ptr);
    v69 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v67, &type metadata for String, v68, &protocol witness table for String);

    if (!*(_QWORD *)(v69 + 16))
      break;
    v70 = sub_10001A6DC(0x736E6F6974636573, 0xE800000000000000);
    if ((v71 & 1) == 0)
      break;
    v72 = *(id *)(*(_QWORD *)(v69 + 56) + 8 * v70);
    if (!objc_msgSend(v72, "isOrdered", swift_bridgeObjectRelease().n128_f64[0]))
    {
      v186 = v72;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v120 = v40;
      swift_retain_n(v5);
      v121 = v120;
      v122 = Logger.logObject.getter(v121);
      v123 = static os_log_type_t.fault.getter();
      v124 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      if (os_log_type_enabled(v122, v123))
      {
        v125 = swift_slowAlloc(42, -1);
        v197 = swift_slowAlloc(128, -1);
        v200 = (void *)v197;
        *(_DWORD *)v125 = 136446978;
        v193 = v123;
        v202 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
        *(_WORD *)(v125 + 12) = 2082;
        v126 = v178;
        sub_1000184A8(v178, (uint64_t)v209);
        sub_100671124((uint64_t)v209, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v128 = v127;
        v130 = v129;
        sub_100671124((uint64_t)v209, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v202 = sub_10001A820(v128, v130, (uint64_t *)&v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
        swift_release_n(v5);
        *(_QWORD *)&v131 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v125 + 22) = 2080;
        v132 = objc_msgSend(v121, "description", v131);
        v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
        v135 = v134;

        v202 = sub_10001A820(v133, v135, (uint64_t *)&v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);

        v124 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        swift_bridgeObjectRelease();
        *(_WORD *)(v125 + 32) = 2080;
        v202 = sub_10001A820(0x736E6F6974636573, 0xE800000000000000, (uint64_t *)&v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
        _os_log_impl((void *)&_mh_execute_header, v122, v193, "[%{public}s] Tried to mutate a relationship that is not ordered -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}", (uint8_t *)v125, 0x2Au);
        swift_arrayDestroy(v197, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v197, -1, -1);
        swift_slowDealloc(v125, -1, -1);

      }
      else
      {

        swift_release_n(v5);
        v126 = v178;
      }
      v136 = (void *)objc_opt_self(REMError);
      v200 = 0;
      v201 = 0xE000000000000000;
      _StringGuts.grow(_:)(115);
      v137._countAndFlagsBits = 0xD000000000000044;
      v137._object = (void *)0x8000000100709C60;
      String.append(_:)(v137);
      sub_1000184A8(v126, (uint64_t)v208);
      sub_100671124((uint64_t)v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v139 = v138;
      v141 = v140;
      sub_100671124((uint64_t)v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v142._countAndFlagsBits = v139;
      v142._object = v141;
      String.append(_:)(v142);
      swift_bridgeObjectRelease();
      v143._countAndFlagsBits = 0x656A624F6463202CLL;
      v143._object = (void *)0xEE00203A44497463;
      String.append(_:)(v143);
      v144 = objc_msgSend(v121, v124[152]);
      v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
      v147 = v146;

      v148._countAndFlagsBits = v145;
      v148._object = v147;
      String.append(_:)(v148);
      swift_bridgeObjectRelease();
      v149._object = (void *)0x8000000100709C40;
      v149._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v149);
      v150._countAndFlagsBits = 0x736E6F6974636573;
      v150._object = (void *)0xE800000000000000;
      String.append(_:)(v150);
      v151._countAndFlagsBits = 125;
      v151._object = (void *)0xE100000000000000;
      String.append(_:)(v151);
      v152 = String._bridgeToObjectiveC()();
      objc_msgSend(v136, "internalErrorWithDebugDescription:", v152, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v153);
      return;
    }
    v73 = v40;
    swift_retain_n(v5);
    v74 = v73;
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v185 = v72;
      v77 = swift_slowAlloc(52, -1);
      v179 = (_QWORD *)swift_slowAlloc(8, -1);
      v181 = swift_slowAlloc(128, -1);
      v200 = (void *)v181;
      *(_DWORD *)v77 = 136447234;
      type = v76;
      v202 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
      *(_WORD *)(v77 + 12) = 2082;
      sub_1000184A8(v178, (uint64_t)v207);
      sub_100671124((uint64_t)v207, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v79 = v78;
      v81 = v80;
      sub_100671124((uint64_t)v207, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v202 = sub_10001A820(v79, v81, (uint64_t *)&v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
      swift_release_n(v5);
      swift_bridgeObjectRelease();
      *(_WORD *)(v77 + 22) = 2114;
      v202 = (uint64_t)v74;
      v82 = v74;
      v43 = v183;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
      *v179 = v189;

      *(_WORD *)(v77 + 32) = 2082;
      v202 = sub_10001A820(0xD00000000000001CLL, 0x80000001006F3F50, (uint64_t *)&v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
      *(_WORD *)(v77 + 42) = 2082;
      v202 = sub_10001A820(0x736E6F6974636573, 0xE800000000000000, (uint64_t *)&v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
      _os_log_impl((void *)&_mh_execute_header, v75, type, "[%{public}s] Updating relationship ordering {author: %{public}s, objectID: %{public}@, changedValueKey: %{public}s, orderableRelationshipKey: %{public}s}", (uint8_t *)v77, 0x34u);
      v83 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v179, 1, v83);
      swift_slowDealloc(v179, -1, -1);
      swift_arrayDestroy(v181, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v181, -1, -1);
      v84 = v77;
      v72 = v185;
      swift_slowDealloc(v84, -1, -1);

      v5 = v194;
    }
    else
    {

      swift_release_n(v5);
    }
    v85 = objc_autoreleasePoolPush();
    sub_10063F444(v43, v210, (uint64_t)v191, (uint64_t)v5, 0xD00000000000001ALL, 0x8000000100709B10, (void (*)(void *, uint64_t))sub_1001A3320);
    objc_autoreleasePoolPop(v85);
    if (*((_BYTE *)v5 + 104) == 1)
    {
      v86 = v43;
      objc_msgSend(v86, "updateChangeCount");

    }
    --v65;
    v40 = v189;
    if (!v65)
      goto LABEL_65;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v87 = v40;
  swift_retain_n(v5);
  v88 = v87;
  v89 = Logger.logObject.getter(v88);
  v90 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v89, v90))
  {
    v91 = swift_slowAlloc(42, -1);
    v196 = swift_slowAlloc(128, -1);
    v200 = (void *)v196;
    *(_DWORD *)v91 = 136446978;
    v192 = v90;
    v202 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
    *(_WORD *)(v91 + 12) = 2082;
    v92 = v178;
    sub_1000184A8(v178, (uint64_t)v206);
    sub_100671124((uint64_t)v206, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v94 = v93;
    v96 = v95;
    sub_100671124((uint64_t)v206, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v202 = sub_10001A820(v94, v96, (uint64_t *)&v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
    swift_release_n(v5);
    *(_QWORD *)&v97 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v91 + 22) = 2080;
    v98 = objc_msgSend(v88, "description", v97);
    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
    v101 = v100;

    v202 = sub_10001A820(v99, v101, (uint64_t *)&v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);

    swift_bridgeObjectRelease();
    *(_WORD *)(v91 + 32) = 2080;
    v202 = sub_10001A820(0x736E6F6974636573, 0xE800000000000000, (uint64_t *)&v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203);
    _os_log_impl((void *)&_mh_execute_header, v89, v192, "[%{public}s] Tried to mutate ordering of a non-existing relationship -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}", (uint8_t *)v91, 0x2Au);
    swift_arrayDestroy(v196, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v196, -1, -1);
    swift_slowDealloc(v91, -1, -1);

  }
  else
  {

    swift_release_n(v5);
    v92 = v178;
  }
  v102 = (void *)objc_opt_self(REMError);
  v200 = 0;
  v201 = 0xE000000000000000;
  _StringGuts.grow(_:)(120);
  v103._countAndFlagsBits = 0xD000000000000049;
  v103._object = (void *)0x8000000100709BF0;
  String.append(_:)(v103);
  sub_1000184A8(v92, (uint64_t)v205);
  sub_100671124((uint64_t)v205, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
  sub_1000181B8();
  v105 = v104;
  v107 = v106;
  sub_100671124((uint64_t)v205, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
  v108._countAndFlagsBits = v105;
  v108._object = v107;
  String.append(_:)(v108);
  swift_bridgeObjectRelease();
  v109._countAndFlagsBits = 0x656A624F6463202CLL;
  v109._object = (void *)0xEE00203A44497463;
  String.append(_:)(v109);
  v110 = objc_msgSend(v88, "description");
  v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
  v113 = v112;

  v114._countAndFlagsBits = v111;
  v114._object = v113;
  String.append(_:)(v114);
  swift_bridgeObjectRelease();
  v115._object = (void *)0x8000000100709C40;
  v115._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v115);
  v116._countAndFlagsBits = 0x736E6F6974636573;
  v116._object = (void *)0xE800000000000000;
  String.append(_:)(v116);
  v117._countAndFlagsBits = 125;
  v117._object = (void *)0xE100000000000000;
  String.append(_:)(v117);
  v118 = String._bridgeToObjectiveC()();
  objc_msgSend(v102, "internalErrorWithDebugDescription:", v118, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v119);
}

void sub_10063AD24(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(id *), uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD *, unint64_t), uint64_t a7, void *a8, uint64_t (*a9)(void))
{
  char **v9;
  uint64_t v10;
  char **v14;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD *, unint64_t);
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  BOOL v52;
  unint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  char v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  unint64_t v70;
  char v71;
  id v72;
  char *v73;
  char **v74;
  unint64_t v75;
  char v76;
  id v77;
  id v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  double v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  NSObject *log;
  os_log_type_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t (*v99)(_QWORD *, unint64_t);
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char **v105;
  uint64_t (*v106)(_QWORD);
  uint64_t v109;
  _QWORD v110[4];
  uint64_t v111;
  void *v112;
  uint64_t v113[3];
  _BYTE v114[56];
  uint64_t v115;

  v14 = v9;
  v115 = a2;
  v18 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(a3 + 24);
  v110[2] = &v115;
  v110[3] = v14;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a1);
  v19 = sub_1005CA184(a4, v110, a1);
  if (v10)
    goto LABEL_2;
  v106 = a5;
  v103 = v17;
  v104 = (uint64_t)v19;
  v98 = v18;
  v99 = a6;
  v20 = a8;
  v100 = a3;
  if (qword_1008371E8 != -1)
    goto LABEL_65;
LABEL_4:
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v104, 2);
  swift_bridgeObjectRetain(v103);
  v23 = Logger.logObject.getter(v22);
  v96 = static os_log_type_t.info.getter(v23);
  v24 = (unint64_t)v104 >> 62;
  v25 = (void *)a7;
  v101 = (unint64_t)v104 >> 62;
  v105 = v14;
  if (os_log_type_enabled(v23, v96))
  {
    log = v23;
    v26 = swift_slowAlloc(42, -1);
    v27 = swift_slowAlloc(96, -1);
    v113[0] = v27;
    *(_DWORD *)v26 = 136446978;
    v112 = (void *)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113);
    *(_WORD *)(v26 + 12) = 2048;
    v94 = (void *)v27;
    if (!v24)
    {
      v28 = v104;
      v29 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_7;
    }
    goto LABEL_71;
  }

  swift_bridgeObjectRelease_n(v103, 2);
  swift_bridgeObjectRelease_n(v104, 2);
  v28 = v104;
  v36 = v20;
  while (1)
  {
    if (v24)
    {
      v92 = v28 < 0 ? v28 : v28 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v28);
      v26 = _CocoaArrayWrapper.endIndex.getter(v92);
      swift_bridgeObjectRelease();
    }
    else
    {
      v26 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v37 = _swiftEmptyArrayStorage;
    if (!v26)
      break;
    v113[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v26);
    if ((v26 & 0x8000000000000000) == 0)
    {
      v38 = 0;
      v14 = &selRef_isConcealed;
      while (v26 != v38)
      {
        if ((v28 & 0xC000000000000001) != 0)
          v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v28);
        else
          v39 = *(id *)(v28 + 8 * v38 + 32);
        v40 = v39;
        v20 = sub_1005CDB68(objc_msgSend(v40, "remObjectID"), v106, a7, a8);

        ++v38;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v41);
        v42 = *(_QWORD *)(v113[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v42);
        v43 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v20);
        specialized ContiguousArray._endMutation()(v43);
        if (v26 == v38)
        {
          v37 = (_QWORD *)v113[0];
          v14 = v105;
          v36 = a8;
          v20 = (void *)a7;
          v44 = v99;
          v24 = v101;
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_4;
    }
    __break(1u);
LABEL_71:
    v28 = v104;
    if (v104 < 0)
      v93 = v104;
    else
      v93 = v104 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v104);
    v29 = _CocoaArrayWrapper.endIndex.getter(v93);
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRelease();
    v112 = (void *)v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113);
    v30 = swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2082;
    v104 = v26 + 24;
    v31 = ((uint64_t (*)(_QWORD, __n128))v106)(0, v30);
    v32 = objc_msgSend((id)swift_getObjCClassFromMetadata(v31), "description");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v112 = (void *)sub_10001A820(v33, v35, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2082;
    swift_bridgeObjectRetain(v103);
    v112 = (void *)sub_10001A820(v98, v103, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113);
    swift_bridgeObjectRelease_n(v103, 3);
    _os_log_impl((void *)&_mh_execute_header, log, v96, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v26, 0x2Au);
    v20 = v94;
    swift_arrayDestroy(v94, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v14 = v105;
    v36 = a8;
    v25 = (void *)a7;
    v24 = v101;
  }
  v20 = v25;
  v44 = v99;
LABEL_21:
  v45 = v100;
  v102 = v44(v37, v100);
  swift_bridgeObjectRelease();
  if (v24)
  {
    if (v28 < 0)
      v46 = v28;
    else
      v46 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v47 = _CocoaArrayWrapper.endIndex.getter(v46);
    swift_bridgeObjectRelease();
    v99 = (uint64_t (*)(_QWORD *, unint64_t))v47;
    if (!v47)
      goto LABEL_22;
  }
  else
  {
    v99 = *(uint64_t (**)(_QWORD *, unint64_t))((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v99)
    {
LABEL_22:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v100 = v28 & 0xC000000000000001;
  v97 = (uint64_t *)(v45 + 48);
  v98 = (uint64_t)a9;
  swift_beginAccess(v45 + 48, v113, 0, 0);
  v48 = 4;
  log = ((char *)&type metadata for Swift.AnyObject + 8);
  v49 = (uint64_t)v20;
  while (1)
  {
    v50 = v48 - 4;
    if (v100)
    {
      v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48 - 4, v28);
      v52 = __OFADD__(v50, 1);
      v53 = v48 - 3;
      if (v52)
        goto LABEL_64;
    }
    else
    {
      v51 = *(id *)(v28 + 8 * v48);
      v52 = __OFADD__(v50, 1);
      v53 = v48 - 3;
      if (v52)
        goto LABEL_64;
    }
    v54 = v51;
    v55 = sub_1005CDB68(objc_msgSend(v54, "remObjectID"), v106, v49, v36);

    v104 = (uint64_t)v54;
    if (!*(_QWORD *)(v102 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_59;
    }
    v103 = v53;
    v56 = v55;
    v57 = a9();
    if ((v58 & 1) == 0)
      break;
    v59 = *(id *)(*(_QWORD *)(v102 + 56) + 8 * v57);

    v60 = *v97;
    if ((*v97 & 0xC000000000000001) != 0)
    {
      if (v60 < 0)
        v61 = *v97;
      else
        v61 = v60 & 0xFFFFFFFFFFFFFF8;
      v62 = v56;
      v63 = v59;
      swift_bridgeObjectRetain(v60);
      v64 = __CocoaDictionary.lookup(_:)(v62, v61);
      if (v64)
      {
        v65 = v64;
        v111 = v64;
        v66 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v65);
        swift_dynamicCast(&v112, &v111, log, v66, 7);
        v67 = v112;
        swift_unknownObjectRelease(v65);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v67 = 0;
      }
      v36 = a8;
    }
    else
    {
      if (!*(_QWORD *)(v60 + 16))
      {
        v72 = v59;
LABEL_52:
        v67 = 0;
        goto LABEL_53;
      }
      v68 = v56;
      v69 = v59;
      swift_bridgeObjectRetain(v60);
      v70 = sub_1002C66DC((uint64_t)v68);
      if ((v71 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
      v67 = *(id *)(*(_QWORD *)(v60 + 56) + 8 * v70);

      swift_bridgeObjectRelease();
    }
LABEL_53:

    v20 = (void *)v104;
    v73 = v105[9];
    v74 = (char **)objc_msgSend((id)v104, "remObjectID");
    v14 = v74;
    if (*((_QWORD *)v73 + 2))
    {
      v75 = sub_1002C66DC((uint64_t)v74);
      if ((v76 & 1) != 0)
        swift_bridgeObjectRetain(*(_QWORD *)(*((_QWORD *)v73 + 7) + 8 * v75));
    }

    swift_bridgeObjectRelease();
    ++v48;
    v49 = a7;
    if ((uint64_t (*)(_QWORD *, unint64_t))v103 == v99)
      goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_59:
  v77 = v55;
  swift_retain_n(v105);
  v78 = v77;
  v79 = Logger.logObject.getter(v78);
  v80 = static os_log_type_t.error.getter(v79);
  if (os_log_type_enabled(v79, v80))
  {
    v81 = swift_slowAlloc(32, -1);
    v109 = swift_slowAlloc(96, -1);
    v112 = (void *)v109;
    *(_DWORD *)v81 = 136446722;
    v111 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
    *(_WORD *)(v81 + 12) = 2082;
    sub_1000184A8((uint64_t)(v105 + 3), (uint64_t)v114);
    sub_100671124((uint64_t)v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v83 = v82;
    v85 = v84;
    sub_100671124((uint64_t)v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v111 = sub_10001A820(v83, v85, (uint64_t *)&v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
    swift_release_n(v105);
    *(_QWORD *)&v86 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v81 + 22) = 2080;
    v87 = objc_msgSend(v78, "description", v86);
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v90 = v89;

    v111 = sub_10001A820(v88, v90, (uint64_t *)&v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v81, 0x20u);
    swift_arrayDestroy(v109, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v109, -1, -1);
    swift_slowDealloc(v81, -1, -1);

  }
  else
  {

    swift_release_n(v105);
  }
  v91 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v78);
  swift_willThrow(v91);

}

void sub_10063B7E0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  void *v32;
  unint64_t v33;
  char v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  unint64_t v46;
  char v47;
  id v48;
  uint64_t v49;
  id v50;
  void *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  NSObject *v75;
  unint64_t v76;
  uint64_t v77;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  uint64_t v84;
  _QWORD v85[3];
  uint64_t v86;
  void *v87;
  uint64_t v88[3];
  _BYTE v89[56];
  uint64_t v90;

  v5 = v3;
  v6 = a3;
  v90 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(id *)(a3 + 24);
  v85[2] = &v90;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a1);
  v10 = sub_1005CA184((uint64_t (*)(id *))sub_100673718, v85, a1);
  if (v4)
    goto LABEL_61;
  v11 = (uint64_t)v10;
  if (qword_1008371E8 != -1)
    goto LABEL_64;
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain(v9);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  log = v14;
  v16 = (unint64_t)v11 >> 62;
  *(_QWORD *)type = v6;
  v84 = v5;
  if (os_log_type_enabled(v14, v15))
  {
    v76 = v8;
    v8 = swift_slowAlloc(42, -1);
    v74 = (uint64_t *)swift_slowAlloc(96, -1);
    v88[0] = (uint64_t)v74;
    *(_DWORD *)v8 = 136446978;
    v87 = (void *)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
    *(_WORD *)(v8 + 12) = 2048;
    LOBYTE(v75) = v15;
    if (!v16)
    {
      v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_70;
  }

  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease_n(v11, 2);
  while (1)
  {
    if (v16)
    {
      v72 = v11 < 0 ? v11 : v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v23 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v8 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v23)
      break;
    v88[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    if ((v23 & 0x8000000000000000) == 0)
    {
      v8 = 0;
      v5 = (uint64_t)&selRef_isConcealed;
      while (v23 != v8)
      {
        if ((v11 & 0xC000000000000001) != 0)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v11);
        else
          v24 = *(id *)(v11 + 8 * v8 + 32);
        v25 = v24;
        v9 = sub_1005CBC20(objc_msgSend(v25, "remObjectID"));

        ++v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
        v6 = *(_QWORD *)(v88[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        v27 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v9);
        specialized ContiguousArray._endMutation()(v27);
        if (v23 == v8)
        {
          v8 = v88[0];
          v16 = (unint64_t)v11 >> 62;
          v6 = *(_QWORD *)type;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_3;
    }
    __break(1u);
LABEL_70:
    if (v11 < 0)
      v73 = v11;
    else
      v73 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v17 = _CocoaArrayWrapper.endIndex.getter(v73);
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    v87 = (void *)v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 22) = 2082;
    v18 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v87 = (void *)sub_10001A820(v20, v22, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 32) = 2082;
    swift_bridgeObjectRetain(v9);
    v87 = (void *)sub_10001A820(v76, (unint64_t)v9, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v75, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v8, 0x2Au);
    swift_arrayDestroy(v74, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v16 = (unint64_t)v11 >> 62;
    v6 = *(_QWORD *)type;
  }
LABEL_19:
  sub_10064A5D0(v8, v6);
  v77 = v28;
  swift_bridgeObjectRelease();
  if (v16)
  {
    if (v11 < 0)
      v54 = v11;
    else
      v54 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v55 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease();
    v75 = v55;
    if (v55)
      goto LABEL_21;
    goto LABEL_60;
  }
  v75 = *(NSObject **)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v75)
  {
LABEL_60:
    swift_bridgeObjectRelease();
LABEL_61:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_21:
  v76 = v11 & 0xC000000000000001;
  v74 = (uint64_t *)(v6 + 48);
  swift_beginAccess(v6 + 48, v88, 0, 0);
  v5 = 4;
  v6 = v77;
  while (1)
  {
    v29 = v5 - 4;
    if (v76)
    {
      v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v11);
      v31 = (v5 - 3);
      if (__OFADD__(v29, 1))
        goto LABEL_63;
    }
    else
    {
      v30 = *(id *)(v11 + 8 * v5);
      v31 = (v5 - 3);
      if (__OFADD__(v29, 1))
        goto LABEL_63;
    }
    v9 = v30;
    v32 = sub_1005CBC20(objc_msgSend(v9, "remObjectID"));

    if (!*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    v8 = v32;
    v33 = sub_1002C672C((void *)v8);
    if ((v34 & 1) == 0)
      break;
    loga = v31;
    v35 = *(id *)(*(_QWORD *)(v6 + 56) + 8 * v33);

    v36 = *v74;
    if ((*v74 & 0xC000000000000001) != 0)
    {
      *(_QWORD *)typea = v9;
      if (v36 < 0)
        v37 = *v74;
      else
        v37 = v36 & 0xFFFFFFFFFFFFFF8;
      v38 = (id)v8;
      v39 = v35;
      swift_bridgeObjectRetain(v36);
      v40 = __CocoaDictionary.lookup(_:)(v38, v37);
      if (v40)
      {
        v41 = v40;
        v86 = v40;
        v42 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v41);
        swift_dynamicCast(&v87, &v86, (char *)&type metadata for Swift.AnyObject + 8, v42, 7);
        v43 = v87;
        swift_unknownObjectRelease(v41);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v43 = 0;
      }
      v9 = *(id *)typea;
      goto LABEL_45;
    }
    if (!*(_QWORD *)(v36 + 16))
    {
      v48 = v35;
LABEL_44:
      v43 = 0;
      goto LABEL_45;
    }
    v44 = (id)v8;
    v45 = v35;
    swift_bridgeObjectRetain(v36);
    v46 = sub_1002C66DC((uint64_t)v44);
    if ((v47 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    v43 = *(id *)(*(_QWORD *)(v36 + 56) + 8 * v46);

    swift_bridgeObjectRelease();
LABEL_45:

    v49 = *(_QWORD *)(v84 + 72);
    v50 = objc_msgSend(v9, "remObjectID");
    v51 = v50;
    if (*(_QWORD *)(v49 + 16))
    {
      v52 = sub_1002C66DC((uint64_t)v50);
      v6 = v77;
      if ((v53 & 1) != 0)
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v52));
    }
    else
    {
      v6 = v77;
    }

    swift_bridgeObjectRelease();
    ++v5;
    if (loga == v75)
      goto LABEL_60;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_56:
  v56 = v32;
  swift_retain_n(v84);
  v57 = v56;
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.error.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    typeb = v59;
    v60 = swift_slowAlloc(32, -1);
    logb = (os_log_t)swift_slowAlloc(96, -1);
    v87 = logb;
    *(_DWORD *)v60 = 136446722;
    v86 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);
    *(_WORD *)(v60 + 12) = 2082;
    sub_1000184A8(v84 + 24, (uint64_t)v89);
    sub_100671124((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v62 = v61;
    v63 = v9;
    v65 = v64;
    sub_100671124((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v86 = sub_10001A820(v62, v65, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);
    swift_release_n(v84);
    *(_QWORD *)&v66 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v60 + 22) = 2080;
    v67 = objc_msgSend(v57, "description", v66);
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    v70 = v69;

    v9 = v63;
    v86 = sub_10001A820(v68, v70, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v58, typeb, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v60, 0x20u);
    swift_arrayDestroy(logb, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(logb, -1, -1);
    swift_slowDealloc(v60, -1, -1);

  }
  else
  {

    swift_release_n(v84);
  }
  v71 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v57);
  swift_willThrow(v71);

}

void sub_10063C250(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  __objc2_class **v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  BOOL v37;
  unint64_t v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  unint64_t v43;
  char v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  unint64_t v56;
  char v57;
  id v58;
  uint64_t v59;
  id v60;
  void *v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  double v66;
  void *v67;
  uint64_t v68;
  void *v69;
  unsigned int v70;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  id v80;
  id v81;
  id v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  id v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  id v98;
  id v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  double v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  Swift::String v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  Swift::String v122;
  Swift::String v123;
  id v124;
  uint64_t v125;
  void *v126;
  void *v127;
  Swift::String v128;
  Swift::String v129;
  void *v130;
  Swift::String v131;
  Swift::String v132;
  NSString v133;
  uint64_t v134;
  id v135;
  id v136;
  NSObject *v137;
  os_log_type_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  double v144;
  id v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  void *v153;
  Swift::String v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  Swift::String v159;
  Swift::String v160;
  id v161;
  uint64_t v162;
  void *v163;
  void *v164;
  Swift::String v165;
  Swift::String v166;
  void *v167;
  Swift::String v168;
  Swift::String v169;
  NSString v170;
  uint64_t v171;
  id v172;
  id v173;
  NSObject *v174;
  uint64_t *v175;
  os_log_type_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  double v182;
  id v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  void *v198;
  _QWORD *v199;
  uint64_t v200;
  NSObject *log;
  _QWORD *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  os_log_type_t v210;
  void *v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  os_log_type_t type[8];
  unsigned int typea;
  os_log_type_t typeb;
  uint64_t typec;
  uint64_t *v219;
  id v220;
  id v221;
  os_log_type_t v222;
  id v223;
  _QWORD v224[5];
  id v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228[3];
  _BYTE v229[48];
  _BYTE v230[48];
  _BYTE v231[48];
  _BYTE v232[48];
  _BYTE v233[48];
  _BYTE v234[56];
  uint64_t v235;

  v5 = v3;
  v6 = (__objc2_class **)a3;
  v235 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v224[2] = &v235;
  v224[3] = v5;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a1);
  v10 = sub_1005CA184((uint64_t (*)(id *))sub_100672D38, v224, a1);
  if (v4)
    goto LABEL_20;
  v11 = (uint64_t)v10;
  if (qword_1008371E8 != -1)
    goto LABEL_100;
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain(v9);
  v14 = Logger.logObject.getter(v13);
  v210 = static os_log_type_t.info.getter(v14);
  v15 = v14;
  v16 = (unint64_t)v11 >> 62;
  v219 = v5;
  v220 = (id)v11;
  v212 = (unint64_t)v11 >> 62;
  *(_QWORD *)type = v6;
  if (os_log_type_enabled(v14, v210))
  {
    v209 = v8;
    v6 = (__objc2_class **)swift_slowAlloc(42, -1);
    v207 = swift_slowAlloc(96, -1);
    v228[0] = v207;
    *(_DWORD *)v6 = 136446978;
    v225 = (id)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v228);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
    *((_WORD *)v6 + 6) = 2048;
    if (!v16)
    {
      v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_106;
  }

  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease_n(v11, 2);
  while (1)
  {
    if (v16)
    {
      v188 = v11 < 0 ? v11 : v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v8 = _CocoaArrayWrapper.endIndex.getter(v188);
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v9 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v8)
      break;
    v228[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    if ((v8 & 0x8000000000000000) == 0)
    {
      v9 = 0;
      v23 = v11 & 0xC000000000000001;
      v5 = &qword_100839900;
      v6 = off_1007D66E0;
      while (v8 != v9)
      {
        if (v23)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v11);
        else
          v24 = *(id *)(v11 + 8 * v9 + 32);
        v25 = v24;
        v26 = sub_1005CCBAC(objc_msgSend(v25, "remObjectID"), (unint64_t *)&qword_100839900, off_1007D66E0);
        ++v9;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v28 = *(_QWORD *)(v228[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
        v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
        specialized ContiguousArray._endMutation()(v29);
        v11 = (uint64_t)v220;
        if (v8 == v9)
        {
          v9 = v228[0];
          v6 = *(__objc2_class ***)type;
          v5 = v219;
          v16 = v212;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_100:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_3;
    }
    __break(1u);
LABEL_106:
    if (v11 < 0)
      v189 = v11;
    else
      v189 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v17 = _CocoaArrayWrapper.endIndex.getter(v189);
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    v225 = (id)v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
    swift_bridgeObjectRelease();
    *((_WORD *)v6 + 11) = 2082;
    v18 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v225 = (id)sub_10001A820(v20, v22, v228);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
    v11 = (uint64_t)v220;
    swift_bridgeObjectRelease();
    *((_WORD *)v6 + 16) = 2082;
    swift_bridgeObjectRetain(v9);
    v225 = (id)sub_10001A820(v209, v9, v228);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v210, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v6, 0x2Au);
    swift_arrayDestroy(v207, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v207, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v6 = *(__objc2_class ***)type;
    v5 = v219;
    v16 = v212;
  }
LABEL_19:
  sub_10064A9F0(v9, (uint64_t)v6);
  v31 = v30;
  swift_bridgeObjectRelease();
  if (v16)
  {
    if (v11 < 0)
      v33 = v11;
    else
      v33 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v32 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease();
    if (!v32)
      goto LABEL_84;
  }
  else
  {
    v32 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v32)
    {
LABEL_84:
      swift_bridgeObjectRelease();
LABEL_20:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v197 = (uint64_t)(v5 + 3);
  v34 = v11 & 0xC000000000000001;
  v196 = (uint64_t *)(v6 + 6);
  swift_beginAccess(v6 + 6, v228, 0, 0);
  v35 = 0;
  v190 = v11 + 32;
  v191 = v11 & 0xFFFFFFFFFFFFFF8;
  v195 = v31;
  v192 = v11 & 0xC000000000000001;
  v193 = v32;
  while (1)
  {
    if (v34)
    {
      v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v220);
      v37 = __OFADD__(v35, 1);
      v38 = v35 + 1;
      if (v37)
        goto LABEL_110;
    }
    else
    {
      if (v35 >= *(_QWORD *)(v191 + 16))
        goto LABEL_111;
      v36 = *(id *)(v190 + 8 * v35);
      v37 = __OFADD__(v35, 1);
      v38 = v35 + 1;
      if (v37)
      {
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        return;
      }
    }
    v39 = v36;
    v40 = sub_1005CCBAC(objc_msgSend(v39, "remObjectID"), (unint64_t *)&qword_100839900, off_1007D66E0);

    v41 = v39;
    v198 = v39;
    if (!*(_QWORD *)(v31 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_95:
      v172 = v40;
      swift_retain_n(v5);
      v173 = v172;
      v174 = Logger.logObject.getter(v173);
      v175 = v5;
      v176 = static os_log_type_t.error.getter(v174);
      if (os_log_type_enabled(v174, v176))
      {
        v177 = swift_slowAlloc(32, -1);
        v223 = (id)swift_slowAlloc(96, -1);
        v225 = v223;
        *(_DWORD *)v177 = 136446722;
        v227 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
        *(_WORD *)(v177 + 12) = 2082;
        sub_1000184A8(v197, (uint64_t)v229);
        sub_100671124((uint64_t)v229, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v179 = v178;
        v181 = v180;
        sub_100671124((uint64_t)v229, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v227 = sub_10001A820(v179, v181, (uint64_t *)&v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
        swift_release_n(v175);
        *(_QWORD *)&v182 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v177 + 22) = 2080;
        v183 = objc_msgSend(v173, "description", v182);
        v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
        v186 = v185;

        v41 = v198;
        v227 = sub_10001A820(v184, v186, (uint64_t *)&v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v174, v176, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v177, 0x20u);
        swift_arrayDestroy(v223, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v223, -1, -1);
        swift_slowDealloc(v177, -1, -1);

      }
      else
      {

        swift_release_n(v175);
      }
      v187 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v173);
      swift_willThrow(v187);

      return;
    }
    v42 = v40;
    v43 = sub_1002C672C(v42);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_95;
    }
    v194 = v38;
    v45 = *(id *)(*(_QWORD *)(v31 + 56) + 8 * v43);

    v46 = *v196;
    v211 = v42;
    if ((*v196 & 0xC000000000000001) != 0)
    {
      if (v46 < 0)
        v47 = *v196;
      else
        v47 = v46 & 0xFFFFFFFFFFFFFF8;
      v48 = v42;
      v49 = v45;
      v50 = v45;
      swift_bridgeObjectRetain(v46);
      v51 = __CocoaDictionary.lookup(_:)(v48, v47);
      if (v51)
      {
        v52 = v51;
        v227 = v51;
        v53 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v52);
        swift_dynamicCast(&v225, &v227, (char *)&type metadata for Swift.AnyObject + 8, v53, 7);
        v54 = v225;
        swift_unknownObjectRelease(v52);
        goto LABEL_46;
      }
LABEL_47:

      swift_bridgeObjectRelease();
LABEL_49:
      v54 = 0;
      goto LABEL_50;
    }
    v49 = v45;
    if (!*(_QWORD *)(v46 + 16))
    {
      v58 = v45;
      goto LABEL_49;
    }
    v48 = v42;
    v55 = v45;
    swift_bridgeObjectRetain(v46);
    v56 = sub_1002C66DC((uint64_t)v48);
    if ((v57 & 1) == 0)
      goto LABEL_47;
    v54 = *(id *)(*(_QWORD *)(v46 + 56) + 8 * v56);
LABEL_46:

    swift_bridgeObjectRelease();
LABEL_50:

    v59 = v5[9];
    v60 = objc_msgSend(v41, "remObjectID");
    v61 = v60;
    if (*(_QWORD *)(v59 + 16) && (v62 = sub_1002C66DC((uint64_t)v60), (v63 & 1) != 0))
    {
      v64 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v62);
      swift_bridgeObjectRetain(v64);
    }
    else
    {
      v64 = 0;
    }

    v65 = sub_1005CF5F0(v64, (uint64_t)&off_1007DB6D0, (uint64_t)sub_1002C9000, (uint64_t (*)(void))sub_1005CA94C, &qword_100851C20);
    *(_QWORD *)&v66 = swift_bridgeObjectRelease().n128_u64[0];
    v208 = v65[2];
    v67 = v49;
    if (v208)
      break;

    swift_bridgeObjectRelease();
    v69 = v41;
LABEL_83:

    v35 = v194;
    v31 = v195;
    v34 = v192;
    v5 = v219;
    if (v194 == v193)
      goto LABEL_84;
  }
  v68 = 0;
  v202 = v65;
  v203 = v49;
  v69 = v41;
  while (1)
  {
    v70 = *((unsigned __int8 *)v65 + v68 + 32);
    v71 = v67;
    v72 = objc_msgSend(v67, "entity", v66);
    v73 = objc_msgSend(v72, "relationshipsByName");

    v74 = sub_1000151B0(0, &qword_100851910, NSRelationshipDescription_ptr);
    v75 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v73, &type metadata for String, v74, &protocol witness table for String);

    typea = v70;
    v76 = v70 <= 1 ? 0x7265646E696D6572 : 0x736E6F6974636573;
    v77 = v70 <= 1 ? 0xE900000000000073 : 0xE800000000000000;
    if (!*(_QWORD *)(v75 + 16))
      break;
    v78 = sub_10001A6DC(v76, v77);
    if ((v79 & 1) == 0)
      break;
    v80 = *(id *)(*(_QWORD *)(v75 + 56) + 8 * v78);
    swift_bridgeObjectRelease();
    v213 = v80;
    if (!objc_msgSend(v80, "isOrdered", swift_bridgeObjectRelease().n128_f64[0]))
    {
      v206 = v76;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v135 = v211;
      swift_retain_n(v219);
      v136 = v135;
      v137 = Logger.logObject.getter(v136);
      v138 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v137, v138))
      {
        v222 = v138;
        v139 = swift_slowAlloc(42, -1);
        typec = swift_slowAlloc(128, -1);
        v225 = (id)typec;
        *(_DWORD *)v139 = 136446978;
        v227 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
        *(_WORD *)(v139 + 12) = 2082;
        sub_1000184A8(v197, (uint64_t)v234);
        sub_100671124((uint64_t)v234, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v141 = v140;
        v143 = v142;
        sub_100671124((uint64_t)v234, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v227 = sub_10001A820(v141, v143, (uint64_t *)&v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
        swift_release_n(v219);
        *(_QWORD *)&v144 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v139 + 22) = 2080;
        v145 = objc_msgSend(v136, "description", v144);
        v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
        v148 = v147;

        v149 = v146;
        v150 = v197;
        v227 = sub_10001A820(v149, v148, (uint64_t *)&v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);

        v151 = v136;
        swift_bridgeObjectRelease();
        *(_WORD *)(v139 + 32) = 2080;
        v227 = sub_10001A820(v206, v77, (uint64_t *)&v225);
        v152 = v203;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v137, v222, "[%{public}s] Tried to mutate a relationship that is not ordered -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}", (uint8_t *)v139, 0x2Au);
        swift_arrayDestroy(typec, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(typec, -1, -1);
        swift_slowDealloc(v139, -1, -1);

        v153 = (void *)v77;
      }
      else
      {

        v151 = v136;
        swift_release_n(v219);
        v150 = v197;
        v153 = (void *)v77;
        v152 = v71;
      }
      v225 = 0;
      v226 = 0xE000000000000000;
      _StringGuts.grow(_:)(115);
      v154._countAndFlagsBits = 0xD000000000000044;
      v154._object = (void *)0x8000000100709C60;
      String.append(_:)(v154);
      sub_1000184A8(v150, (uint64_t)v233);
      sub_100671124((uint64_t)v233, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v156 = v155;
      v158 = v157;
      sub_100671124((uint64_t)v233, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v159._countAndFlagsBits = v156;
      v159._object = v158;
      String.append(_:)(v159);
      swift_bridgeObjectRelease();
      v160._countAndFlagsBits = 0x656A624F6463202CLL;
      v160._object = (void *)0xEE00203A44497463;
      String.append(_:)(v160);
      v161 = objc_msgSend(v151, "description");
      v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
      v164 = v163;

      v165._countAndFlagsBits = v162;
      v165._object = v164;
      String.append(_:)(v165);
      swift_bridgeObjectRelease();
      v166._object = (void *)0x8000000100709C40;
      v166._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v166);
      v167 = (void *)objc_opt_self(REMError);
      v168._countAndFlagsBits = v206;
      v168._object = v153;
      String.append(_:)(v168);
      swift_bridgeObjectRelease();
      v169._countAndFlagsBits = 125;
      v169._object = (void *)0xE100000000000000;
      String.append(_:)(v169);
      v170 = String._bridgeToObjectiveC()();
      objc_msgSend(v167, "internalErrorWithDebugDescription:", v170, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v171);
      return;
    }
    v81 = v211;
    swift_retain_n(v219);
    v82 = v81;
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.default.getter(v83);
    if (os_log_type_enabled(v83, v84))
    {
      log = v83;
      v204 = v76;
      v85 = swift_slowAlloc(52, -1);
      v199 = (_QWORD *)swift_slowAlloc(8, -1);
      v200 = swift_slowAlloc(128, -1);
      v225 = (id)v200;
      *(_DWORD *)v85 = 136447234;
      v227 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
      *(_WORD *)(v85 + 12) = 2082;
      sub_1000184A8(v197, (uint64_t)v232);
      sub_100671124((uint64_t)v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v87 = v86;
      v89 = v88;
      sub_100671124((uint64_t)v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v227 = sub_10001A820(v87, v89, (uint64_t *)&v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
      swift_release_n(v219);
      swift_bridgeObjectRelease();
      *(_WORD *)(v85 + 22) = 2114;
      v227 = (uint64_t)v82;
      v90 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
      *v199 = v211;

      *(_WORD *)(v85 + 32) = 2082;
      v91 = 0xD00000000000001FLL;
      if (typea != 1)
        v91 = 0xD00000000000001CLL;
      v92 = 0x80000001006F3F30;
      if (typea != 1)
        v92 = 0x80000001006F3F50;
      if (typea)
        v93 = v91;
      else
        v93 = 0xD00000000000001CLL;
      if (typea)
        v94 = v92;
      else
        v94 = 0x80000001006F3F10;
      v227 = sub_10001A820(v93, v94, (uint64_t *)&v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
      swift_bridgeObjectRelease();
      *(_WORD *)(v85 + 42) = 2082;
      v227 = sub_10001A820(v204, v77, (uint64_t *)&v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v84, "[%{public}s] Updating relationship ordering {author: %{public}s, objectID: %{public}@, changedValueKey: %{public}s, orderableRelationshipKey: %{public}s}", (uint8_t *)v85, 0x34u);
      v95 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v199, 1, v95);
      swift_slowDealloc(v199, -1, -1);
      swift_arrayDestroy(v200, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v200, -1, -1);
      swift_slowDealloc(v85, -1, -1);

      v69 = v198;
      v96 = (uint64_t)v219;
      v65 = v202;
    }
    else
    {

      swift_release_n(v219);
      v96 = (uint64_t)v219;
      v65 = v202;
    }
    v97 = objc_autoreleasePoolPush();
    v67 = v203;
    sub_10063F6A8(v203, typea > 1, v235, v69, v96, 0xD00000000000001ALL, 0x8000000100709B10);
    objc_autoreleasePoolPop(v97);
    if (*(_BYTE *)(v96 + 104) == 1)
    {
      v98 = v203;
      objc_msgSend(v98, "updateChangeCount");

    }
    ++v68;

    if (v208 == v68)
    {

      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
  }
  v205 = v76;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v99 = v211;
  swift_retain_n(v219);
  v221 = v99;
  v100 = Logger.logObject.getter(v221);
  v101 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v100, v101))
  {
    typeb = v101;
    v102 = swift_slowAlloc(42, -1);
    v214 = swift_slowAlloc(128, -1);
    v225 = (id)v214;
    *(_DWORD *)v102 = 136446978;
    v227 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
    *(_WORD *)(v102 + 12) = 2082;
    sub_1000184A8(v197, (uint64_t)v231);
    sub_100671124((uint64_t)v231, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v104 = v103;
    v106 = v105;
    sub_100671124((uint64_t)v231, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v227 = sub_10001A820(v104, v106, (uint64_t *)&v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
    swift_release_n(v219);
    *(_QWORD *)&v107 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v102 + 22) = 2080;
    v108 = objc_msgSend(v221, "description", v107);
    v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
    v111 = v110;

    v112 = v198;
    v113 = v109;
    v114 = v197;
    v227 = sub_10001A820(v113, v111, (uint64_t *)&v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);

    swift_bridgeObjectRelease();
    *(_WORD *)(v102 + 32) = 2080;
    v115 = v205;
    v227 = sub_10001A820(v205, v77, (uint64_t *)&v225);
    v116 = (void *)v77;
    v71 = v203;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v227, v228);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v100, typeb, "[%{public}s] Tried to mutate ordering of a non-existing relationship -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}", (uint8_t *)v102, 0x2Au);
    swift_arrayDestroy(v214, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v214, -1, -1);
    swift_slowDealloc(v102, -1, -1);

  }
  else
  {
    v112 = v69;

    swift_release_n(v219);
    v114 = v197;
    v116 = (void *)v77;
    v115 = v205;
  }
  v225 = 0;
  v226 = 0xE000000000000000;
  _StringGuts.grow(_:)(120);
  v117._countAndFlagsBits = 0xD000000000000049;
  v117._object = (void *)0x8000000100709BF0;
  String.append(_:)(v117);
  sub_1000184A8(v114, (uint64_t)v230);
  sub_100671124((uint64_t)v230, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
  sub_1000181B8();
  v119 = v118;
  v121 = v120;
  sub_100671124((uint64_t)v230, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
  v122._countAndFlagsBits = v119;
  v122._object = v121;
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  v123._countAndFlagsBits = 0x656A624F6463202CLL;
  v123._object = (void *)0xEE00203A44497463;
  String.append(_:)(v123);
  v124 = objc_msgSend(v221, "description");
  v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
  v127 = v126;

  v128._countAndFlagsBits = v125;
  v128._object = v127;
  String.append(_:)(v128);
  swift_bridgeObjectRelease();
  v129._object = (void *)0x8000000100709C40;
  v129._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v129);
  v130 = (void *)objc_opt_self(REMError);
  v131._countAndFlagsBits = v115;
  v131._object = v116;
  String.append(_:)(v131);
  swift_bridgeObjectRelease();
  v132._countAndFlagsBits = 125;
  v132._object = (void *)0xE100000000000000;
  String.append(_:)(v132);
  v133 = String._bridgeToObjectiveC()();
  objc_msgSend(v130, "internalErrorWithDebugDescription:", v133, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v134);
}

void sub_10063DBC0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  BOOL v37;
  unint64_t v38;
  void *v39;
  id v40;
  unint64_t v41;
  char v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  unint64_t v54;
  char v55;
  id v56;
  uint64_t v57;
  id v58;
  void *v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  double v64;
  uint64_t v65;
  int v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  id v73;
  id v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  id v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  double v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  Swift::String v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  Swift::String v111;
  Swift::String v112;
  id v113;
  uint64_t v114;
  void *v115;
  void *v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  NSString v121;
  uint64_t v122;
  id v123;
  id v124;
  NSObject *v125;
  os_log_type_t v126;
  char **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  double v134;
  id v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  void *v139;
  Swift::String v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  Swift::String v145;
  Swift::String v146;
  id v147;
  uint64_t v148;
  void *v149;
  void *v150;
  Swift::String v151;
  Swift::String v152;
  Swift::String v153;
  Swift::String v154;
  NSString v155;
  uint64_t v156;
  unint64_t v157;
  id v158;
  id v159;
  NSObject *v160;
  os_log_type_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  double v167;
  id v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  _QWORD *v186;
  os_log_type_t type;
  uint64_t v188;
  uint64_t v189;
  id v190;
  void *v191;
  os_log_type_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  void *v199;
  os_log_t log;
  os_log_t loga;
  os_log_type_t v202;
  os_log_type_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD v208[5];
  void *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212[3];
  _BYTE v213[48];
  _BYTE v214[48];
  _BYTE v215[48];
  _BYTE v216[48];
  _BYTE v217[48];
  _BYTE v218[56];
  uint64_t v219;

  v5 = v3;
  v6 = a3;
  v219 = a2;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v208[2] = &v219;
  v208[3] = v5;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a1);
  v10 = sub_1005CA184((uint64_t (*)(id *))sub_100672E78, v208, a1);
  if (v4)
    goto LABEL_21;
  v11 = (uint64_t)v10;
  if (qword_1008371E8 != -1)
    goto LABEL_93;
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain(v9);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  log = v14;
  v16 = os_log_type_enabled(v14, (os_log_type_t)v15);
  v17 = (unint64_t)v11 >> 62;
  v204 = v5;
  v196 = (unint64_t)v11 >> 62;
  v198 = v6;
  if (v16)
  {
    v192 = v15;
    v194 = v8;
    v15 = swift_slowAlloc(42, -1);
    v189 = swift_slowAlloc(96, -1);
    v212[0] = v189;
    *(_DWORD *)v15 = 136446978;
    v209 = (void *)sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
    *(_WORD *)(v15 + 12) = 2048;
    if (!v17)
    {
      v18 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_6;
    }
    goto LABEL_99;
  }

  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease_n(v11, 2);
  while (1)
  {
    if (v17)
    {
      v173 = v11 < 0 ? v11 : v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v8 = _CocoaArrayWrapper.endIndex.getter(v173);
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v9 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v8)
      break;
    v212[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    if ((v8 & 0x8000000000000000) == 0)
    {
      v9 = 0;
      v6 = v11;
      v11 &= 0xC000000000000001;
      while (v8 != v9)
      {
        if (v11)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
        else
          v24 = *(id *)(v6 + 8 * v9 + 32);
        v25 = v24;
        v26 = sub_1005CCBAC(objc_msgSend(v25, "remObjectID"), &qword_10083AA30, off_1007D6658);
        ++v9;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v5 = *(_QWORD *)(v212[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
        v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v26);
        specialized ContiguousArray._endMutation()(v28);
        if (v8 == v9)
        {
          v9 = v212[0];
          v5 = v204;
          v11 = v6;
          v6 = v198;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_93:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_3;
    }
    __break(1u);
LABEL_99:
    if (v11 < 0)
      v174 = v11;
    else
      v174 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v18 = _CocoaArrayWrapper.endIndex.getter(v174);
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    v209 = (void *)v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    v19 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v209 = (void *)sub_10001A820(v21, v23, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 32) = 2082;
    swift_bridgeObjectRetain(v9);
    v209 = (void *)sub_10001A820(v194, v9, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, log, v192, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v15, 0x2Au);
    swift_arrayDestroy(v189, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v189, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v5 = v204;
    v17 = (unint64_t)v11 >> 62;
    v6 = v198;
  }
LABEL_19:
  sub_100647C90(v9, v6);
  v30 = v29;
  swift_bridgeObjectRelease();
  if (v196)
  {
    if (v11 < 0)
      v32 = v11;
    else
      v32 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v31 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease();
    if (!v31)
      goto LABEL_20;
  }
  else
  {
    v31 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v31)
    {
LABEL_20:
      swift_bridgeObjectRelease();
LABEL_21:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v185 = v5 + 24;
  v33 = v11 & 0xC000000000000001;
  v182 = (uint64_t *)(v6 + 48);
  swift_beginAccess(v6 + 48, v212, 0, 0);
  v34 = 0;
  v176 = v11 + 32;
  v177 = v11 & 0xFFFFFFFFFFFFFF8;
  v35 = (unint64_t)"REMCDTemplateSection";
  v175 = (char *)&type metadata for Swift.AnyObject + 8;
  v183 = v11;
  v178 = v11 & 0xC000000000000001;
  v179 = v31;
  while (1)
  {
    if (v33)
    {
      v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v11);
      v37 = __OFADD__(v34, 1);
      v38 = v34 + 1;
      if (v37)
        goto LABEL_103;
    }
    else
    {
      if (v34 >= *(_QWORD *)(v177 + 16))
        goto LABEL_104;
      v36 = *(id *)(v176 + 8 * v34);
      v37 = __OFADD__(v34, 1);
      v38 = v34 + 1;
      if (v37)
      {
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
        return;
      }
    }
    loga = (os_log_t)v36;
    v39 = sub_1005CCBAC(-[NSObject remObjectID](loga, "remObjectID"), &qword_10083AA30, off_1007D6658);

    if (!*(_QWORD *)(v30 + 16))
    {
      v157 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_87:
      v158 = v39;
      swift_retain_n(v5);
      v159 = v158;
      v160 = Logger.logObject.getter(v159);
      v161 = static os_log_type_t.error.getter(v160);
      if (os_log_type_enabled(v160, v161))
      {
        v162 = swift_slowAlloc(32, -1);
        v207 = swift_slowAlloc(96, -1);
        v209 = (void *)v207;
        *(_DWORD *)v162 = 136446722;
        v211 = sub_10001A820(0xD00000000000001ALL, v157 | 0x8000000000000000, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        *(_WORD *)(v162 + 12) = 2082;
        sub_1000184A8(v185, (uint64_t)v213);
        sub_100671124((uint64_t)v213, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v164 = v163;
        v166 = v165;
        sub_100671124((uint64_t)v213, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v211 = sub_10001A820(v164, v166, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        swift_release_n(v5);
        *(_QWORD *)&v167 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v162 + 22) = 2080;
        v168 = objc_msgSend(v159, "description", v167);
        v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
        v171 = v170;

        v211 = sub_10001A820(v169, v171, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v160, v161, "[%{public}s] Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v162, 0x20u);
        swift_arrayDestroy(v207, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v207, -1, -1);
        swift_slowDealloc(v162, -1, -1);

      }
      else
      {

        swift_release_n(v5);
      }
      v172 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v159);
      swift_willThrow(v172);

      return;
    }
    v181 = v38;
    v40 = v39;
    v41 = sub_1002C672C(v40);
    if ((v42 & 1) == 0)
    {
      v157 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_87;
    }
    v43 = *(id *)(*(_QWORD *)(v30 + 56) + 8 * v41);

    v44 = *v182;
    v197 = v43;
    v199 = v40;
    if ((*v182 & 0xC000000000000001) != 0)
    {
      if (v44 < 0)
        v45 = *v182;
      else
        v45 = v44 & 0xFFFFFFFFFFFFFF8;
      v46 = v40;
      v47 = v43;
      swift_bridgeObjectRetain(v44);
      v48 = __CocoaDictionary.lookup(_:)(v46, v45);
      if (v48)
      {
        v49 = v48;
        v211 = v48;
        v50 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v49);
        swift_dynamicCast(&v209, &v211, v175, v50, 7);
        v51 = v209;
        swift_unknownObjectRelease(v49);

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        v51 = 0;
      }
      v43 = v197;
      goto LABEL_52;
    }
    if (!*(_QWORD *)(v44 + 16))
    {
      v56 = v43;
LABEL_51:
      v51 = 0;
      goto LABEL_52;
    }
    v52 = v40;
    v53 = v43;
    swift_bridgeObjectRetain(v44);
    v54 = sub_1002C66DC((uint64_t)v52);
    if ((v55 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    v51 = *(id *)(*(_QWORD *)(v44 + 56) + 8 * v54);

    swift_bridgeObjectRelease();
LABEL_52:

    v57 = *(_QWORD *)(v5 + 72);
    v58 = -[NSObject remObjectID](loga, "remObjectID");
    v59 = v58;
    if (*(_QWORD *)(v57 + 16) && (v60 = sub_1002C66DC((uint64_t)v58), (v61 & 1) != 0))
    {
      v62 = *(_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * v60);
      swift_bridgeObjectRetain(v62);
    }
    else
    {
      v62 = 0;
    }

    v63 = sub_1005CF5F0(v62, (uint64_t)&off_1007DBB38, (uint64_t)sub_1002C9024, (uint64_t (*)(void))sub_1005CB7D8, &qword_100851C50);
    *(_QWORD *)&v64 = swift_bridgeObjectRelease().n128_u64[0];
    v193 = v63[2];
    if (v193)
      break;

    swift_bridgeObjectRelease();
LABEL_75:

    v33 = v178;
    v34 = v181;
    v11 = v183;
    if (v181 == v179)
      goto LABEL_20;
  }
  v180 = v30;
  v65 = 0;
  v184 = (const char *)v35;
  v195 = v63;
  while (1)
  {
    v66 = *((unsigned __int8 *)v63 + v65 + 32);
    v67 = objc_msgSend(v43, "entity", v64, v175);
    v68 = objc_msgSend(v67, "relationshipsByName");

    v69 = sub_1000151B0(0, &qword_100851910, NSRelationshipDescription_ptr);
    v70 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v68, &type metadata for String, v69, &protocol witness table for String);

    if (!*(_QWORD *)(v70 + 16))
      break;
    v71 = sub_10001A6DC(0x737473696CLL, 0xE500000000000000);
    if ((v72 & 1) == 0)
      break;
    v73 = *(id *)(*(_QWORD *)(v70 + 56) + 8 * v71);
    if (!objc_msgSend(v73, "isOrdered", swift_bridgeObjectRelease().n128_f64[0]))
    {
      v191 = v73;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v123 = v199;
      swift_retain_n(v5);
      v124 = v123;
      v125 = Logger.logObject.getter(v124);
      v126 = static os_log_type_t.fault.getter();
      v127 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      if (os_log_type_enabled(v125, v126))
      {
        v128 = swift_slowAlloc(42, -1);
        v206 = swift_slowAlloc(128, -1);
        v209 = (void *)v206;
        *(_DWORD *)v128 = 136446978;
        v203 = v126;
        v211 = sub_10001A820(0xD00000000000001ALL, v35 | 0x8000000000000000, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        *(_WORD *)(v128 + 12) = 2082;
        v129 = v185;
        sub_1000184A8(v185, (uint64_t)v218);
        sub_100671124((uint64_t)v218, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
        sub_1000181B8();
        v131 = v130;
        v133 = v132;
        sub_100671124((uint64_t)v218, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
        v211 = sub_10001A820(v131, v133, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        swift_release_n(v5);
        *(_QWORD *)&v134 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v128 + 22) = 2080;
        v135 = objc_msgSend(v124, "description", v134);
        v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
        v138 = v137;

        v211 = sub_10001A820(v136, v138, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);

        swift_bridgeObjectRelease();
        *(_WORD *)(v128 + 32) = 2080;
        v211 = sub_10001A820(0x737473696CLL, 0xE500000000000000, (uint64_t *)&v209);
        v127 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
        _os_log_impl((void *)&_mh_execute_header, v125, v203, "[%{public}s] Tried to mutate a relationship that is not ordered -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}", (uint8_t *)v128, 0x2Au);
        swift_arrayDestroy(v206, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v206, -1, -1);
        swift_slowDealloc(v128, -1, -1);

      }
      else
      {

        swift_release_n(v5);
        v129 = v185;
      }
      v139 = (void *)objc_opt_self(REMError);
      v209 = 0;
      v210 = 0xE000000000000000;
      _StringGuts.grow(_:)(115);
      v140._countAndFlagsBits = 0xD000000000000044;
      v140._object = (void *)0x8000000100709C60;
      String.append(_:)(v140);
      sub_1000184A8(v129, (uint64_t)v217);
      sub_100671124((uint64_t)v217, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v142 = v141;
      v144 = v143;
      sub_100671124((uint64_t)v217, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v145._countAndFlagsBits = v142;
      v145._object = v144;
      String.append(_:)(v145);
      swift_bridgeObjectRelease();
      v146._countAndFlagsBits = 0x656A624F6463202CLL;
      v146._object = (void *)0xEE00203A44497463;
      String.append(_:)(v146);
      v147 = objc_msgSend(v124, v127[152]);
      v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
      v150 = v149;

      v151._countAndFlagsBits = v148;
      v151._object = v150;
      String.append(_:)(v151);
      swift_bridgeObjectRelease();
      v152._object = (void *)0x8000000100709C40;
      v152._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v152);
      v153._countAndFlagsBits = 0x737473696CLL;
      v153._object = (void *)0xE500000000000000;
      String.append(_:)(v153);
      v154._countAndFlagsBits = 125;
      v154._object = (void *)0xE100000000000000;
      String.append(_:)(v154);
      v155 = String._bridgeToObjectiveC()();
      objc_msgSend(v139, "internalErrorWithDebugDescription:", v155, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v156);
      return;
    }
    v74 = v199;
    swift_retain_n(v5);
    v75 = v74;
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.default.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v190 = v73;
      v78 = swift_slowAlloc(52, -1);
      v186 = (_QWORD *)swift_slowAlloc(8, -1);
      v188 = swift_slowAlloc(128, -1);
      v209 = (void *)v188;
      *(_DWORD *)v78 = 136447234;
      type = v77;
      v211 = sub_10001A820(0xD00000000000001ALL, 0x8000000100709B10, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      *(_WORD *)(v78 + 12) = 2082;
      sub_1000184A8(v185, (uint64_t)v216);
      sub_100671124((uint64_t)v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v80 = v79;
      v82 = v81;
      sub_100671124((uint64_t)v216, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      v211 = sub_10001A820(v80, v82, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      swift_release_n(v204);
      swift_bridgeObjectRelease();
      *(_WORD *)(v78 + 22) = 2114;
      v211 = (uint64_t)v75;
      v83 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      *v186 = v199;

      *(_WORD *)(v78 + 32) = 2082;
      if (v66)
        v84 = 0xD00000000000001ALL;
      else
        v84 = 0xD000000000000018;
      if (v66)
        v85 = 0x80000001006F42B0;
      else
        v85 = 0x80000001006F4290;
      v211 = sub_10001A820(v84, v85, (uint64_t *)&v209);
      v35 = (unint64_t)v184;
      v5 = v204;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      swift_bridgeObjectRelease();
      *(_WORD *)(v78 + 42) = 2082;
      v211 = sub_10001A820(0x737473696CLL, 0xE500000000000000, (uint64_t *)&v209);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
      _os_log_impl((void *)&_mh_execute_header, v76, type, "[%{public}s] Updating relationship ordering {author: %{public}s, objectID: %{public}@, changedValueKey: %{public}s, orderableRelationshipKey: %{public}s}", (uint8_t *)v78, 0x34u);
      v86 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v186, 1, v86);
      swift_slowDealloc(v186, -1, -1);
      swift_arrayDestroy(v188, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v188, -1, -1);
      v87 = v78;
      v73 = v190;
      swift_slowDealloc(v87, -1, -1);

    }
    else
    {

      swift_release_n(v5);
    }
    v88 = objc_autoreleasePoolPush();
    v43 = v197;
    sub_10063F950(v197, v219, loga, v5, 0xD00000000000001ALL, v35 | 0x8000000000000000);
    v63 = v195;
    objc_autoreleasePoolPop(v88);
    if (*(_BYTE *)(v5 + 104) == 1)
    {
      v89 = v197;
      objc_msgSend(v89, "updateChangeCount");

    }
    ++v65;

    if (v193 == v65)
    {

      swift_bridgeObjectRelease();
      v30 = v180;
      goto LABEL_75;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v90 = v199;
  swift_retain_n(v5);
  v91 = v90;
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v92, v93))
  {
    v94 = swift_slowAlloc(42, -1);
    v205 = swift_slowAlloc(128, -1);
    v209 = (void *)v205;
    *(_DWORD *)v94 = 136446978;
    v202 = v93;
    v211 = sub_10001A820(0xD00000000000001ALL, v35 | 0x8000000000000000, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
    *(_WORD *)(v94 + 12) = 2082;
    v95 = v185;
    sub_1000184A8(v185, (uint64_t)v215);
    sub_100671124((uint64_t)v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    sub_1000181B8();
    v97 = v96;
    v99 = v98;
    sub_100671124((uint64_t)v215, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v211 = sub_10001A820(v97, v99, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
    swift_release_n(v5);
    *(_QWORD *)&v100 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v94 + 22) = 2080;
    v101 = objc_msgSend(v91, "description", v100);
    v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
    v104 = v103;

    v211 = sub_10001A820(v102, v104, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);

    swift_bridgeObjectRelease();
    *(_WORD *)(v94 + 32) = 2080;
    v211 = sub_10001A820(0x737473696CLL, 0xE500000000000000, (uint64_t *)&v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, v212);
    _os_log_impl((void *)&_mh_execute_header, v92, v202, "[%{public}s] Tried to mutate ordering of a non-existing relationship -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}", (uint8_t *)v94, 0x2Au);
    swift_arrayDestroy(v205, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v205, -1, -1);
    swift_slowDealloc(v94, -1, -1);

  }
  else
  {

    swift_release_n(v5);
    v95 = v185;
  }
  v105 = (void *)objc_opt_self(REMError);
  v209 = 0;
  v210 = 0xE000000000000000;
  _StringGuts.grow(_:)(120);
  v106._countAndFlagsBits = 0xD000000000000049;
  v106._object = (void *)0x8000000100709BF0;
  String.append(_:)(v106);
  sub_1000184A8(v95, (uint64_t)v214);
  sub_100671124((uint64_t)v214, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
  sub_1000181B8();
  v108 = v107;
  v110 = v109;
  sub_100671124((uint64_t)v214, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
  v111._countAndFlagsBits = v108;
  v111._object = v110;
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v112._countAndFlagsBits = 0x656A624F6463202CLL;
  v112._object = (void *)0xEE00203A44497463;
  String.append(_:)(v112);
  v113 = objc_msgSend(v91, "description");
  v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
  v116 = v115;

  v117._countAndFlagsBits = v114;
  v117._object = v116;
  String.append(_:)(v117);
  swift_bridgeObjectRelease();
  v118._object = (void *)0x8000000100709C40;
  v118._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v118);
  v119._countAndFlagsBits = 0x737473696CLL;
  v119._object = (void *)0xE500000000000000;
  String.append(_:)(v119);
  v120._countAndFlagsBits = 125;
  v120._object = (void *)0xE100000000000000;
  String.append(_:)(v120);
  v121 = String._bridgeToObjectiveC()();
  objc_msgSend(v105, "internalErrorWithDebugDescription:", v121, swift_bridgeObjectRelease().n128_f64[0]);

  swift_willThrow(v122);
}

double sub_10063F444(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(void *, uint64_t))
{
  NSString v12;
  id v13;
  id v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(a1, "mutableOrderedSetValueForKey:", v12);

  if (v13)
  {
    v14 = v13;
    a7(a1, a3);

  }
  else
  {
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain_n(a6, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(64, -1);
      v24 = v21;
      *(_DWORD *)v20 = 136446466;
      swift_bridgeObjectRetain(a6);
      v22 = sub_10001A820(a5, a6, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      swift_bridgeObjectRelease_n(a6, 3);
      *(_WORD *)(v20 + 12) = 2080;
      v22 = sub_10001A820(0x736E6F6974636573, 0xE800000000000000, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s] Not mutating ordering because mutableOrderedSet for relationship is nil {orderableRelationshipKey: %s}", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      *(_QWORD *)&result = swift_bridgeObjectRelease_n(a6, 2).n128_u64[0];
    }
  }
  return result;
}

double sub_10063F6A8(void *a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  char v9;
  uint64_t v10;
  unint64_t v11;
  NSString v12;
  id v13;
  id v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = a2 & 1;
  if ((a2 & 1) != 0)
    v10 = 0x736E6F6974636573;
  else
    v10 = 0x7265646E696D6572;
  if ((a2 & 1) != 0)
    v11 = 0xE800000000000000;
  else
    v11 = 0xE900000000000073;
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(a1, "mutableOrderedSetValueForKey:", v12, swift_bridgeObjectRelease().n128_f64[0]);

  if (v13)
  {
    v14 = v13;
    sub_1005333EC(v14, v9, a1, a4, a5);

  }
  else
  {
    v25 = v10;
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain_n(a7, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(64, -1);
      v28 = v21;
      *(_DWORD *)v20 = 136446466;
      swift_bridgeObjectRetain(a7);
      v26 = sub_10001A820(a6, a7, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease_n(a7, 3);
      *(_WORD *)(v20 + 12) = 2080;
      v26 = sub_10001A820(v25, v11, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s] Not mutating ordering because mutableOrderedSet for relationship is nil {orderableRelationshipKey: %s}", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      *(_QWORD *)&result = swift_bridgeObjectRelease_n(a7, 2).n128_u64[0];
    }
  }
  return result;
}

double sub_10063F950(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  NSString v11;
  id v12;
  id v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(a1, "mutableOrderedSetValueForKey:", v11);

  if (v12)
  {
    v13 = v12;
    sub_10025D334(v13, a1, a3, a4);

  }
  else
  {
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_100845DC0);
    v16 = swift_bridgeObjectRetain_n(a6, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v20 = swift_slowAlloc(64, -1);
      v22 = v20;
      *(_DWORD *)v19 = 136446466;
      swift_bridgeObjectRetain(a6);
      v21 = sub_10001A820(a5, a6, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease_n(a6, 3);
      *(_WORD *)(v19 + 12) = 2080;
      v21 = sub_10001A820(0x737473696CLL, 0xE500000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%{public}s] Not mutating ordering because mutableOrderedSet for relationship is nil {orderableRelationshipKey: %s}", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      *(_QWORD *)&result = swift_bridgeObjectRelease_n(a6, 2).n128_u64[0];
    }
  }
  return result;
}

void sub_10063FBA4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  char v48;
  id v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t (*v53)();
  char v54;
  id v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t (*v69)();
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  double v78;
  id v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t type;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)();
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  os_log_type_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[4];
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[16];
  uint64_t v106[3];
  _BYTE v107[48];
  _BYTE v108[56];
  void *v109;

  v5 = v3;
  v6 = a3;
  v9 = *(uint64_t (**)())(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v3 + 72);
  v106[0] = a2;
  v102[2] = v106;
  v102[3] = v10;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(a1);
  v11 = sub_1005CA184((uint64_t (*)(id *))sub_10067202C, v102, a1);
  if (!v4)
  {
    v12 = (uint64_t)v11;
    if (qword_1008371E8 != -1)
      goto LABEL_66;
LABEL_3:
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain_n(v12, 2);
    swift_bridgeObjectRetain(v8);
    v15 = Logger.logObject.getter(v14);
    v95 = static os_log_type_t.info.getter(v15);
    v16 = v15;
    v17 = (unint64_t)v12 >> 62;
    v99 = (unint64_t)v12 >> 62;
    v101 = v12;
    v94 = v5;
    v97 = v6;
    if (os_log_type_enabled(v15, v95))
    {
      v93 = (unint64_t)v9;
      v9 = (uint64_t (*)())swift_slowAlloc(42, -1);
      v18 = swift_slowAlloc(96, -1);
      v106[0] = v18;
      *(_DWORD *)v9 = 136446978;
      v104 = sub_10001A820(0x7661537265746661, 0xEF6E6F6974634165, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
      *((_WORD *)v9 + 6) = 2048;
      v92 = v18;
      if (!v17)
      {
        v19 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_6;
      }
      goto LABEL_72;
    }

    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease_n(v12, 2);
    while (1)
    {
      if (v17)
      {
        v82 = v12 < 0 ? v12 : v12 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v12);
        v6 = _CocoaArrayWrapper.endIndex.getter(v82);
        swift_bridgeObjectRelease();
      }
      else
      {
        v6 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v8 = (uint64_t)_swiftEmptyArrayStorage;
      if (!v6)
        break;
      v106[0] = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v6);
      if ((v6 & 0x8000000000000000) == 0)
      {
        v8 = 0;
        v5 = v12 & 0xC000000000000001;
        v9 = type metadata accessor for REMCDManualSortHint;
        while (v6 != v8)
        {
          if (v5)
            v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v12);
          else
            v25 = *(id *)(v12 + 8 * v8 + 32);
          v26 = v25;
          v27 = sub_1005CDB68(objc_msgSend(v26, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, 0xD000000000000013, (void *)0x8000000100709CB0);

          ++v8;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
          v29 = *(_QWORD *)(v106[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
          v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
          specialized ContiguousArray._endMutation()(v30);
          v12 = v101;
          if (v6 == v8)
          {
            v8 = v106[0];
            v5 = v94;
            v17 = v99;
            goto LABEL_19;
          }
        }
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        swift_once(&qword_1008371E8, sub_100331650);
        goto LABEL_3;
      }
      __break(1u);
LABEL_72:
      if (v12 < 0)
        v83 = v12;
      else
        v83 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v19 = _CocoaArrayWrapper.endIndex.getter(v83);
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      v104 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
      swift_bridgeObjectRelease();
      *((_WORD *)v9 + 11) = 2082;
      v20 = type metadata accessor for REMCDManualSortHint();
      v21 = objc_msgSend((id)swift_getObjCClassFromMetadata(v20), "description");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v104 = sub_10001A820(v22, v24, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
      v12 = v101;
      swift_bridgeObjectRelease();
      *((_WORD *)v9 + 16) = 2082;
      swift_bridgeObjectRetain(v8);
      v104 = sub_10001A820(v93, v8, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
      swift_bridgeObjectRelease_n(v8, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v95, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v9, 0x2Au);
      swift_arrayDestroy(v92, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      v5 = v94;
      v17 = v99;
    }
LABEL_19:
    sub_100644F30(v8, v97);
    v32 = v31;
    swift_bridgeObjectRelease();
    if (v17)
    {
      if (v12 < 0)
        v34 = v12;
      else
        v34 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v33 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease();
      if (!v33)
        goto LABEL_20;
    }
    else
    {
      v33 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v33)
      {
LABEL_20:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    v6 = v97 + 56;
    v87 = v5 + 24;
    v93 = v12 & 0xC000000000000001;
    v91 = (uint64_t *)(v97 + 48);
    swift_beginAccess(v97 + 48, v106, 0, 0);
    v86 = v97 + 56;
    swift_beginAccess(v97 + 56, &v104, 0, 0);
    v8 = 4;
    v92 = 0x8000000100709CB0;
    v90 = v33;
    while (1)
    {
      v35 = v8 - 4;
      if (v93)
      {
        v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v12);
        v37 = v8 - 3;
        if (__OFADD__(v35, 1))
          goto LABEL_65;
      }
      else
      {
        v36 = *(id *)(v12 + 8 * v8);
        v37 = v8 - 3;
        if (__OFADD__(v35, 1))
          goto LABEL_65;
      }
      v38 = v36;
      v39 = sub_1005CDB68(objc_msgSend(v38, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, 0xD000000000000013, (void *)0x8000000100709CB0);
      v96 = v38;

      v40 = *v91;
      v98 = v37;
      v100 = v8;
      if ((*v91 & 0xC000000000000001) != 0)
        break;
      if (*(_QWORD *)(v40 + 16))
      {
        v42 = v39;
        swift_bridgeObjectRetain(v40);
        v47 = sub_1002C66DC((uint64_t)v42);
        if ((v48 & 1) != 0)
        {
          v46 = *(id *)(*(_QWORD *)(v40 + 56) + 8 * v47);
          goto LABEL_46;
        }
        goto LABEL_47;
      }
LABEL_48:
      v46 = 0;
LABEL_49:

      if (!*(_QWORD *)(v32 + 16))
        goto LABEL_55;
      v49 = v39;
      v50 = sub_1002C672C(v49);
      if ((v51 & 1) == 0)
      {

LABEL_55:
        v55 = v39;
        swift_retain_n(v5);
        v6 = (uint64_t)v55;
        v9 = (uint64_t (*)())Logger.logObject.getter(v6);
        v56 = static os_log_type_t.error.getter(v9);
        if (os_log_type_enabled((os_log_t)v9, v56))
        {
          v57 = swift_slowAlloc(22, -1);
          v88 = swift_slowAlloc(64, -1);
          v109 = (void *)v88;
          *(_DWORD *)v57 = 136446466;
          sub_1000184A8(v87, (uint64_t)v107);
          sub_100671124((uint64_t)v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v59 = v58;
          v61 = v60;
          sub_100671124((uint64_t)v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          *(_QWORD *)(v57 + 4) = sub_10001A820(v59, v61, (uint64_t *)&v109);
          swift_release_n(v94);
          *(_QWORD *)&v62 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v57 + 12) = 2080;
          v63 = objc_msgSend((id)v6, "description", v62);
          v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          v65 = v32;
          v67 = v66;

          v68 = v64;
          v5 = v94;
          *(_QWORD *)(v57 + 14) = sub_10001A820(v68, v67, (uint64_t *)&v109);

          v32 = v65;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v9, v56, "Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v57, 0x16u);
          swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
          v12 = v101;
          swift_slowDealloc(v88, -1, -1);
          swift_slowDealloc(v57, -1, -1);

        }
        else
        {

          swift_release_n(v5);
        }
        goto LABEL_31;
      }
      v9 = (uint64_t (*)())*(id *)(*(_QWORD *)(v32 + 56) + 8 * v50);

      v52 = *(_QWORD *)v86;
      if (!*(_QWORD *)(*(_QWORD *)v86 + 16))
      {
        v69 = v9;
LABEL_59:
        v70 = v49;
        swift_retain_n(v5);
        v6 = (uint64_t)v70;
        v71 = Logger.logObject.getter(v6);
        v72 = static os_log_type_t.error.getter(v71);
        if (os_log_type_enabled(v71, v72))
        {
          v73 = swift_slowAlloc(22, -1);
          v85 = swift_slowAlloc(64, -1);
          v109 = (void *)v85;
          *(_DWORD *)v73 = 136446466;
          sub_1000184A8(v87, (uint64_t)v108);
          sub_100671124((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          type = v72;
          sub_1000181B8();
          v75 = v74;
          v89 = v9;
          v77 = v76;
          sub_100671124((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          *(_QWORD *)(v73 + 4) = sub_10001A820(v75, v77, (uint64_t *)&v109);
          swift_release_n(v5);
          *(_QWORD *)&v78 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v73 + 12) = 2080;
          v79 = objc_msgSend((id)v6, "description", v78);
          v9 = (uint64_t (*)())static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
          v81 = v80;

          *(_QWORD *)(v73 + 14) = sub_10001A820((uint64_t)v9, v81, (uint64_t *)&v109);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v71, type, "Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v73, 0x16u);
          swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1, -1);
          swift_slowDealloc(v73, -1, -1);

        }
        else
        {

          swift_release_n(v5);
        }
        v12 = v101;
        goto LABEL_31;
      }
      v6 = (uint64_t)v49;
      v53 = v9;
      swift_bridgeObjectRetain(v52);
      sub_1002C66DC(v6);
      if ((v54 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        goto LABEL_59;
      }

      swift_bridgeObjectRelease();
LABEL_31:
      v8 = v100 + 1;
      if (v98 == v90)
        goto LABEL_20;
    }
    if (v40 < 0)
      v41 = *v91;
    else
      v41 = v40 & 0xFFFFFFFFFFFFFF8;
    v42 = v39;
    swift_bridgeObjectRetain(v40);
    v43 = __CocoaDictionary.lookup(_:)(v42, v41);
    if (v43)
    {
      v44 = v43;
      v103 = v43;
      v45 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
      swift_unknownObjectRetain(v44);
      swift_dynamicCast(&v109, &v103, (char *)&type metadata for Swift.AnyObject + 8, v45, 7);
      v46 = v109;
      swift_unknownObjectRelease(v44);
LABEL_46:

      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
LABEL_47:

    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
LABEL_21:
  swift_bridgeObjectRelease();
}

void sub_10064075C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *), uint64_t a5, _QWORD *a6, uint64_t (*a7)(_QWORD *, NSObject *, __n128), uint64_t (*a8)(void))
{
  unint64_t v8;
  uint64_t v9;
  NSObject *v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  id v43;
  BOOL v44;
  uint64_t (*v45)(_QWORD *, NSObject *, __n128);
  void *v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD *, NSObject *, __n128);
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  unint64_t v56;
  char v57;
  id v58;
  uint64_t v59;
  char v60;
  id v61;
  Class isa;
  id v63;
  id v64;
  char v65;
  id v66;
  id v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  double v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  unint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  double v91;
  id v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t type;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t (*v103)(_QWORD *, NSObject *, __n128);
  uint64_t *v104;
  unint64_t v105;
  NSObject *log;
  unint64_t v107;
  void *v109;
  uint64_t (*v110)(_QWORD *, NSObject *, __n128);
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t *v115;
  _QWORD v116[4];
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[16];
  uint64_t v120[3];
  _BYTE v121[48];
  _BYTE v122[56];
  void *v123;

  v14 = a3;
  v16 = *(void **)(a3 + 16);
  v17 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(v8 + 72);
  v120[0] = a2;
  v116[2] = v120;
  v116[3] = v18;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a1);
  v19 = sub_1005CA184(a4, v116, a1);
  if (!v9)
  {
    v20 = (uint64_t)v19;
    v109 = v16;
    v110 = a7;
    v107 = v8;
    v114 = a6;
    if (qword_1008371E8 != -1)
      goto LABEL_65;
LABEL_3:
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain_n(v20, 2);
    swift_bridgeObjectRetain(v17);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter(v23);
    v25 = (unint64_t)v20 >> 62;
    v111 = (unint64_t)v20 >> 62;
    v113 = v20;
    v115 = (unint64_t *)a5;
    if (os_log_type_enabled(v23, v24))
    {
      a7 = (uint64_t (*)(_QWORD *, NSObject *, __n128))swift_slowAlloc(42, -1);
      v104 = (uint64_t *)swift_slowAlloc(96, -1);
      v120[0] = (uint64_t)v104;
      *(_DWORD *)a7 = 136446978;
      v118 = sub_10001A820(0x7661537265746661, 0xEF6E6F6974634165, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);
      *((_WORD *)a7 + 6) = 2048;
      log = v23;
      LOBYTE(v105) = v24;
      if (!v25)
      {
        v26 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_6;
      }
      goto LABEL_71;
    }

    swift_bridgeObjectRelease_n(v17, 2);
    v32 = swift_bridgeObjectRelease_n(v20, 2);
    while (1)
    {
      v17 = v107;
      if (v25)
      {
        v97 = v20 < 0 ? v20 : v20 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v20);
        v33 = _CocoaArrayWrapper.endIndex.getter(v97);
        v32 = swift_bridgeObjectRelease();
      }
      else
      {
        v33 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v34 = _swiftEmptyArrayStorage;
      if (!v33)
        break;
      v120[0] = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v33);
      if ((v33 & 0x8000000000000000) == 0)
      {
        a5 = 0;
        v17 = v20 & 0xC000000000000001;
        while (v33 != a5)
        {
          if (v17)
            v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a5, v20);
          else
            v35 = *(id *)(v20 + 8 * a5 + 32);
          v36 = v35;
          v37 = sub_1005CCBAC(objc_msgSend(v36, "remObjectID"), v115, v114);

          ++a5;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
          a7 = *(uint64_t (**)(_QWORD *, NSObject *, __n128))(v120[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a7);
          v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(a7, v37);
          specialized ContiguousArray._endMutation()(v39);
          v20 = v113;
          if (v33 == a5)
          {
            v34 = (_QWORD *)v120[0];
            v17 = v107;
            goto LABEL_19;
          }
        }
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        swift_once(&qword_1008371E8, sub_100331650);
        goto LABEL_3;
      }
      __break(1u);
LABEL_71:
      if (v20 < 0)
        v98 = v20;
      else
        v98 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v26 = _CocoaArrayWrapper.endIndex.getter(v98);
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      v118 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);
      swift_bridgeObjectRelease();
      *((_WORD *)a7 + 11) = 2082;
      v27 = sub_1000151B0(0, v115, v114);
      v28 = objc_msgSend((id)swift_getObjCClassFromMetadata(v27), "description");
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      v118 = sub_10001A820(v29, v31, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);
      v20 = v113;
      swift_bridgeObjectRelease();
      *((_WORD *)a7 + 16) = 2082;
      swift_bridgeObjectRetain(v17);
      v118 = sub_10001A820((uint64_t)v109, v17, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v105, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)a7, 0x2Au);
      swift_arrayDestroy(v104, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1, -1);
      swift_slowDealloc(a7, -1, -1);

      v25 = v111;
    }
LABEL_19:
    log = v110(v34, v14, v32);
    swift_bridgeObjectRelease();
    if (v111)
    {
      if (v20 < 0)
        v96 = v20;
      else
        v96 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v40 = _CocoaArrayWrapper.endIndex.getter(v96);
      swift_bridgeObjectRelease();
      v41 = v115;
      if (v40)
        goto LABEL_21;
    }
    else
    {
      v40 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      v41 = v115;
      if (v40)
      {
LABEL_21:
        v102 = v17 + 24;
        v104 = (uint64_t *)&v14[6];
        v105 = v20 & 0xC000000000000001;
        swift_beginAccess(&v14[6], v120, 0, 0);
        v101 = v14 + 7;
        swift_beginAccess(&v14[7], &v118, 0, 0);
        a5 = 4;
        v14 = log;
        v103 = (uint64_t (*)(_QWORD *, NSObject *, __n128))v40;
        while (1)
        {
          v42 = a5 - 4;
          if (v105)
          {
            v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a5 - 4, v20);
            v44 = __OFADD__(v42, 1);
            v45 = (uint64_t (*)(_QWORD *, NSObject *, __n128))(a5 - 3);
            if (v44)
              goto LABEL_64;
          }
          else
          {
            v43 = *(id *)(v20 + 8 * a5);
            v44 = __OFADD__(v42, 1);
            v45 = (uint64_t (*)(_QWORD *, NSObject *, __n128))(a5 - 3);
            if (v44)
              goto LABEL_64;
          }
          a7 = (uint64_t (*)(_QWORD *, NSObject *, __n128))v43;
          v46 = sub_1005CCBAC(objc_msgSend(a7, "remObjectID"), v41, v114);
          v110 = v45;

          v47 = *v104;
          v112 = a5;
          if ((*v104 & 0xC000000000000001) != 0)
          {
            v48 = a7;
            if (v47 < 0)
              v49 = *v104;
            else
              v49 = v47 & 0xFFFFFFFFFFFFFF8;
            v50 = v46;
            swift_bridgeObjectRetain(v47);
            v51 = __CocoaDictionary.lookup(_:)(v50, v49);
            if (v51)
            {
              v52 = v51;
              v117 = v51;
              v53 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
              swift_unknownObjectRetain(v52);
              swift_dynamicCast(&v123, &v117, (char *)&type metadata for Swift.AnyObject + 8, v53, 7);
              v54 = v123;
              swift_unknownObjectRelease(v52);

              swift_bridgeObjectRelease();
            }
            else
            {

              swift_bridgeObjectRelease();
              v54 = 0;
            }
            a7 = v48;
            v14 = log;
          }
          else if (*(_QWORD *)(v47 + 16))
          {
            v55 = v46;
            swift_bridgeObjectRetain(v47);
            v56 = sub_1002C66DC((uint64_t)v55);
            if ((v57 & 1) != 0)
            {
              v54 = *(id *)(*(_QWORD *)(v47 + 56) + 8 * v56);

              swift_bridgeObjectRelease();
            }
            else
            {

              swift_bridgeObjectRelease();
              v54 = 0;
            }
          }
          else
          {
            v54 = 0;
          }

          v109 = a7;
          if (!v14[2].isa)
            goto LABEL_47;
          v58 = v46;
          v59 = a8();
          if ((v60 & 1) == 0)
            break;
          v61 = *((id *)v14[7].isa + v59);

          isa = v101->isa;
          if (!*((_QWORD *)v101->isa + 2))
          {
            v81 = v61;
LABEL_53:
            v82 = v58;
            swift_retain_n(v17);
            a7 = (uint64_t (*)(_QWORD *, NSObject *, __n128))v82;
            v83 = v17;
            v84 = Logger.logObject.getter(a7);
            v85 = static os_log_type_t.error.getter(v84);
            if (os_log_type_enabled(v84, v85))
            {
              v86 = swift_slowAlloc(22, -1);
              v100 = swift_slowAlloc(64, -1);
              v123 = (void *)v100;
              *(_DWORD *)v86 = 136446466;
              sub_1000184A8(v102, (uint64_t)v122);
              sub_100671124((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
              type = v85;
              sub_1000181B8();
              v88 = v87;
              v90 = v89;
              sub_100671124((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
              *(_QWORD *)(v86 + 4) = sub_10001A820(v88, v90, (uint64_t *)&v123);
              swift_release_n(v83);
              *(_QWORD *)&v91 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v86 + 12) = 2080;
              v92 = objc_msgSend(a7, "description", v91);
              v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
              v95 = v94;

              *(_QWORD *)(v86 + 14) = sub_10001A820(v93, v95, (uint64_t *)&v123);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v84, type, "Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v86, 0x16u);
              swift_arrayDestroy(v100, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v100, -1, -1);
              swift_slowDealloc(v86, -1, -1);

            }
            else
            {

              swift_release_n(v83);
            }
            v20 = v113;
            v41 = v115;
            v17 = v83;
            v14 = log;
            goto LABEL_24;
          }
          v63 = v58;
          v64 = v61;
          swift_bridgeObjectRetain(isa);
          sub_1002C66DC((uint64_t)v63);
          if ((v65 & 1) == 0)
          {

            swift_bridgeObjectRelease();
            goto LABEL_53;
          }

          swift_bridgeObjectRelease();
LABEL_23:
          v20 = v113;
          v41 = v115;
LABEL_24:
          a5 = v112 + 1;
          if (v110 == v103)
            goto LABEL_61;
        }

LABEL_47:
        v66 = v46;
        swift_retain_n(v17);
        v67 = v66;
        a7 = (uint64_t (*)(_QWORD *, NSObject *, __n128))Logger.logObject.getter(v67);
        v68 = static os_log_type_t.error.getter(a7);
        if (os_log_type_enabled((os_log_t)a7, v68))
        {
          v69 = swift_slowAlloc(22, -1);
          v70 = swift_slowAlloc(64, -1);
          v123 = (void *)v70;
          *(_DWORD *)v69 = 136446466;
          sub_1000184A8(v102, (uint64_t)v121);
          sub_100671124((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v72 = v71;
          v74 = v73;
          sub_100671124((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          *(_QWORD *)(v69 + 4) = sub_10001A820(v72, v74, (uint64_t *)&v123);
          swift_release_n(v107);
          *(_QWORD *)&v75 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v69 + 12) = 2080;
          v76 = objc_msgSend(v67, "description", v75);
          v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
          v79 = v78;

          *(_QWORD *)(v69 + 14) = sub_10001A820(v77, v79, (uint64_t *)&v123);
          v14 = log;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)a7, v68, "Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v69, 0x16u);
          swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1, -1);
          v80 = v69;
          v17 = v107;
          swift_slowDealloc(v80, -1, -1);

        }
        else
        {

          swift_release_n(v17);
        }
        goto LABEL_23;
      }
    }
LABEL_61:
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

void sub_100641330(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *), uint64_t a5, _QWORD *a6, uint64_t (*a7)(_QWORD *, NSObject *, __n128), uint64_t (*a8)(void))
{
  unint64_t v8;
  uint64_t v9;
  NSObject *v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  double v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  BOOL v55;
  uint64_t (*v56)(_QWORD *, NSObject *, __n128);
  void *v57;
  uint64_t v58;
  uint64_t (*v59)(_QWORD *, NSObject *, __n128);
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  unint64_t v67;
  char v68;
  id v69;
  uint64_t v70;
  char v71;
  id v72;
  Class isa;
  id v74;
  id v75;
  char v76;
  id v77;
  id v78;
  os_log_type_t v79;
  id v80;
  id v81;
  unint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t type;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t (*v105)(_QWORD *, NSObject *, __n128);
  NSObject *log;
  unint64_t v107;
  void *v109;
  uint64_t (*v110)(_QWORD *, NSObject *, __n128);
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t *v115;
  _QWORD v116[4];
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[16];
  uint64_t v120[3];
  _BYTE v121[48];
  _BYTE v122[56];
  void *v123;

  v14 = a3;
  v16 = *(void **)(a3 + 16);
  v17 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(v8 + 72);
  v120[0] = a2;
  v116[2] = v120;
  v116[3] = v18;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a1);
  v19 = sub_1005CA184(a4, v116, a1);
  if (!v9)
  {
    v20 = (uint64_t)v19;
    v109 = v16;
    v110 = a7;
    v107 = v8;
    v114 = a6;
    if (qword_1008371E8 != -1)
      goto LABEL_65;
LABEL_3:
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain_n(v20, 2);
    swift_bridgeObjectRetain(v17);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter(v23);
    v25 = (unint64_t)v20 >> 62;
    v111 = (unint64_t)v20 >> 62;
    v113 = v20;
    v115 = (unint64_t *)a5;
    if (os_log_type_enabled(v23, v24))
    {
      a7 = (uint64_t (*)(_QWORD *, NSObject *, __n128))swift_slowAlloc(42, -1);
      v104 = swift_slowAlloc(96, -1);
      v120[0] = v104;
      *(_DWORD *)a7 = 136446978;
      v118 = sub_10001A820(0x7661537265746661, 0xEF6E6F6974634165, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);
      *((_WORD *)a7 + 6) = 2048;
      log = v23;
      LOBYTE(v105) = v24;
      if (!v25)
      {
        v26 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_6;
      }
      goto LABEL_71;
    }

    swift_bridgeObjectRelease_n(v17, 2);
    v32 = swift_bridgeObjectRelease_n(v20, 2);
    while (1)
    {
      v17 = v107;
      if (v25)
      {
        v97 = v20 < 0 ? v20 : v20 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v20);
        v33 = _CocoaArrayWrapper.endIndex.getter(v97);
        v32 = swift_bridgeObjectRelease();
      }
      else
      {
        v33 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v34 = _swiftEmptyArrayStorage;
      if (!v33)
        break;
      v120[0] = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v33);
      if ((v33 & 0x8000000000000000) == 0)
      {
        a5 = 0;
        v17 = v20 & 0xC000000000000001;
        while (v33 != a5)
        {
          if (v17)
            v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a5, v20);
          else
            v35 = *(id *)(v20 + 8 * a5 + 32);
          v36 = v35;
          v37 = sub_1005CCBAC(objc_msgSend(v36, "remObjectID"), v115, v114);

          ++a5;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
          a7 = *(uint64_t (**)(_QWORD *, NSObject *, __n128))(v120[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a7);
          v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(a7, v37);
          specialized ContiguousArray._endMutation()(v39);
          v20 = v113;
          if (v33 == a5)
          {
            v34 = (_QWORD *)v120[0];
            v17 = v107;
            goto LABEL_19;
          }
        }
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        swift_once(&qword_1008371E8, sub_100331650);
        goto LABEL_3;
      }
      __break(1u);
LABEL_71:
      if (v20 < 0)
        v98 = v20;
      else
        v98 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v26 = _CocoaArrayWrapper.endIndex.getter(v98);
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      v118 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);
      swift_bridgeObjectRelease();
      *((_WORD *)a7 + 11) = 2082;
      v27 = sub_1000151B0(0, v115, v114);
      v28 = objc_msgSend((id)swift_getObjCClassFromMetadata(v27), "description");
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      v118 = sub_10001A820(v29, v31, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);
      v20 = v113;
      swift_bridgeObjectRelease();
      *((_WORD *)a7 + 16) = 2082;
      swift_bridgeObjectRetain(v17);
      v118 = sub_10001A820((uint64_t)v109, v17, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v105, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)a7, 0x2Au);
      swift_arrayDestroy(v104, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1, -1);
      swift_slowDealloc(a7, -1, -1);

      v25 = v111;
    }
LABEL_19:
    log = v110(v34, v14, v32);
    swift_bridgeObjectRelease();
    if (v111)
    {
      if (v20 < 0)
        v95 = v20;
      else
        v95 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v96 = _CocoaArrayWrapper.endIndex.getter(v95);
      swift_bridgeObjectRelease();
      v40 = v115;
      v105 = (uint64_t (*)(_QWORD *, NSObject *, __n128))v96;
      if (v96)
        goto LABEL_21;
    }
    else
    {
      v40 = v115;
      v105 = *(uint64_t (**)(_QWORD *, NSObject *, __n128))((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v105)
      {
LABEL_21:
        v102 = v17 + 24;
        v103 = (uint64_t *)&v14[6];
        v104 = v20 & 0xC000000000000001;
        swift_beginAccess(&v14[6], v120, 0, 0);
        v101 = v14 + 7;
        swift_beginAccess(&v14[7], &v118, 0, 0);
        a5 = 4;
        v14 = log;
        do
        {
          v53 = a5 - 4;
          if (v104)
          {
            v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a5 - 4, v20);
            v55 = __OFADD__(v53, 1);
            v56 = (uint64_t (*)(_QWORD *, NSObject *, __n128))(a5 - 3);
            if (v55)
              goto LABEL_64;
          }
          else
          {
            v54 = *(id *)(v20 + 8 * a5);
            v55 = __OFADD__(v53, 1);
            v56 = (uint64_t (*)(_QWORD *, NSObject *, __n128))(a5 - 3);
            if (v55)
              goto LABEL_64;
          }
          a7 = (uint64_t (*)(_QWORD *, NSObject *, __n128))v54;
          v57 = sub_1005CCBAC(objc_msgSend(a7, "remObjectID"), v40, v114);
          v110 = v56;

          v58 = *v103;
          v112 = a5;
          if ((*v103 & 0xC000000000000001) != 0)
          {
            v59 = a7;
            if (v58 < 0)
              v60 = *v103;
            else
              v60 = v58 & 0xFFFFFFFFFFFFFF8;
            v61 = v57;
            swift_bridgeObjectRetain(v58);
            v62 = __CocoaDictionary.lookup(_:)(v61, v60);
            if (v62)
            {
              v63 = v62;
              v117 = v62;
              v64 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
              swift_unknownObjectRetain(v63);
              swift_dynamicCast(&v123, &v117, (char *)&type metadata for Swift.AnyObject + 8, v64, 7);
              v65 = v123;
              swift_unknownObjectRelease(v63);

              swift_bridgeObjectRelease();
            }
            else
            {

              swift_bridgeObjectRelease();
              v65 = 0;
            }
            a7 = v59;
            v14 = log;
          }
          else
          {
            if (*(_QWORD *)(v58 + 16))
            {
              v66 = v57;
              swift_bridgeObjectRetain(v58);
              v67 = sub_1002C66DC((uint64_t)v66);
              if ((v68 & 1) != 0)
              {
                v65 = *(id *)(*(_QWORD *)(v58 + 56) + 8 * v67);

                swift_bridgeObjectRelease();
                goto LABEL_43;
              }

              swift_bridgeObjectRelease();
            }
            v65 = 0;
          }
LABEL_43:

          v109 = a7;
          if (!v14[2].isa)
            goto LABEL_49;
          v69 = v57;
          v70 = a8();
          if ((v71 & 1) == 0)
          {

LABEL_49:
            v77 = v57;
            swift_retain_n(v17);
            v78 = v77;
            a7 = (uint64_t (*)(_QWORD *, NSObject *, __n128))Logger.logObject.getter(v78);
            v79 = static os_log_type_t.error.getter(a7);
            if (os_log_type_enabled((os_log_t)a7, v79))
            {
              v41 = swift_slowAlloc(22, -1);
              v42 = swift_slowAlloc(64, -1);
              v123 = (void *)v42;
              *(_DWORD *)v41 = 136446466;
              sub_1000184A8(v102, (uint64_t)v121);
              sub_100671124((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
              sub_1000181B8();
              v44 = v43;
              v46 = v45;
              sub_100671124((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
              *(_QWORD *)(v41 + 4) = sub_10001A820(v44, v46, (uint64_t *)&v123);
              swift_release_n(v107);
              *(_QWORD *)&v47 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v41 + 12) = 2080;
              v48 = objc_msgSend(v78, "description", v47);
              v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
              v51 = v50;

              *(_QWORD *)(v41 + 14) = sub_10001A820(v49, v51, (uint64_t *)&v123);
              v14 = log;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)a7, v79, "Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v41, 0x16u);
              swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v42, -1, -1);
              v52 = v41;
              v17 = v107;
              swift_slowDealloc(v52, -1, -1);

            }
            else
            {

              swift_release_n(v17);
            }
            goto LABEL_23;
          }
          v72 = *((id *)v14[7].isa + v70);

          isa = v101->isa;
          if (!*((_QWORD *)v101->isa + 2))
          {
            v80 = v72;
LABEL_53:
            v81 = v69;
            swift_retain_n(v17);
            a7 = (uint64_t (*)(_QWORD *, NSObject *, __n128))v81;
            v82 = v17;
            v83 = Logger.logObject.getter(a7);
            v84 = static os_log_type_t.error.getter(v83);
            if (os_log_type_enabled(v83, v84))
            {
              v85 = swift_slowAlloc(22, -1);
              v100 = swift_slowAlloc(64, -1);
              v123 = (void *)v100;
              *(_DWORD *)v85 = 136446466;
              sub_1000184A8(v102, (uint64_t)v122);
              sub_100671124((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
              type = v84;
              sub_1000181B8();
              v87 = v86;
              v89 = v88;
              sub_100671124((uint64_t)v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
              *(_QWORD *)(v85 + 4) = sub_10001A820(v87, v89, (uint64_t *)&v123);
              swift_release_n(v82);
              *(_QWORD *)&v90 = swift_bridgeObjectRelease().n128_u64[0];
              *(_WORD *)(v85 + 12) = 2080;
              v91 = objc_msgSend(a7, "description", v90);
              v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
              v94 = v93;

              *(_QWORD *)(v85 + 14) = sub_10001A820(v92, v94, (uint64_t *)&v123);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v83, type, "Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v85, 0x16u);
              swift_arrayDestroy(v100, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v100, -1, -1);
              swift_slowDealloc(v85, -1, -1);

            }
            else
            {

              swift_release_n(v82);
            }
            v20 = v113;
            v40 = v115;
            v17 = v82;
            v14 = log;
            goto LABEL_24;
          }
          v74 = v69;
          v75 = v72;
          swift_bridgeObjectRetain(isa);
          sub_1002C66DC((uint64_t)v74);
          if ((v76 & 1) == 0)
          {

            swift_bridgeObjectRelease();
            goto LABEL_53;
          }

          swift_bridgeObjectRelease();
LABEL_23:
          v20 = v113;
          v40 = v115;
LABEL_24:
          a5 = v112 + 1;
        }
        while (v110 != v105);
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

void sub_100641F00(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *), uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD *, uint64_t, __n128), uint64_t a7, NSObject *a8, uint64_t (*a9)(void))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  NSObject *v38;
  _QWORD *v39;
  unint64_t v40;
  id v41;
  id v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  double v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  BOOL v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  unint64_t v76;
  char v77;
  id v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  id v82;
  NSObject *v83;
  char v84;
  id v85;
  id v86;
  NSObject *v87;
  os_log_type_t v88;
  NSObject *v89;
  id v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  double v99;
  id v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t type;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(_QWORD *, uint64_t, __n128);
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(_QWORD);
  _QWORD v126[4];
  uint64_t v127;
  uint64_t v128;
  _BYTE v129[16];
  uint64_t v130[3];
  _BYTE v131[48];
  _BYTE v132[56];
  void *v133;

  v15 = a3;
  v18 = *(_QWORD *)(a3 + 16);
  v17 = *(char **)(a3 + 24);
  v19 = *(_QWORD *)(v9 + 72);
  v130[0] = a2;
  v126[2] = v130;
  v126[3] = v19;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a1);
  v20 = sub_1005CA184(a4, v126, a1);
  v21 = v10;
  if (v10)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v22 = (uint64_t)v20;
  v124 = a5;
  v115 = v18;
  v116 = a6;
  v23 = a8;
  v114 = v9;
  v122 = a7;
  if (qword_1008371E8 != -1)
    goto LABEL_68;
LABEL_4:
  v24 = type metadata accessor for Logger(0);
  sub_10001AAA8(v24, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(v22, 2);
  v25 = (unint64_t)v17;
  swift_bridgeObjectRetain(v17);
  v17 = (char *)Logger.logObject.getter(v26);
  v27 = static os_log_type_t.info.getter(v17);
  v28 = (unint64_t)v22 >> 62;
  v123 = v22;
  v117 = (unint64_t)v22 >> 62;
  v119 = v15;
  if (os_log_type_enabled((os_log_t)v17, v27))
  {
    LOBYTE(v113) = v27;
    v121 = v21;
    v29 = swift_slowAlloc(42, -1);
    v30 = swift_slowAlloc(96, -1);
    v130[0] = v30;
    *(_DWORD *)v29 = 136446978;
    v128 = sub_10001A820(0x7661537265746661, 0xEF6E6F6974634165, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
    *(_WORD *)(v29 + 12) = 2048;
    v112 = v30;
    v23 = v17;
    if (!v28)
    {
      v31 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_7;
    }
    goto LABEL_74;
  }
  v38 = v23;

  swift_bridgeObjectRelease_n(v25, 2);
  v37 = swift_bridgeObjectRelease_n(v22, 2);
  while (1)
  {
    v25 = v114;
    if (v28)
    {
      v105 = v22 < 0 ? v22 : v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v22);
      v29 = _CocoaArrayWrapper.endIndex.getter(v105);
      v37 = swift_bridgeObjectRelease();
    }
    else
    {
      v29 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v39 = _swiftEmptyArrayStorage;
    if (!v29)
      break;
    v130[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v29);
    if ((v29 & 0x8000000000000000) == 0)
    {
      v15 = 0;
      v40 = v22 & 0xC000000000000001;
      while (v29 != v15)
      {
        if (v40)
          v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v22);
        else
          v41 = *(id *)(v22 + 8 * v15 + 32);
        v42 = v41;
        v43 = v21;
        v44 = sub_1005CDB68(objc_msgSend(v42, "remObjectID"), v124, v122, a8);

        v23 = v43;
        if (v43)
        {
          v48 = v130[0];
          swift_bridgeObjectRelease();
          swift_release(v48);
          return;
        }
        ++v15;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v45);
        v17 = *(char **)(v130[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
        v22 = v123;
        v46 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v44);
        specialized ContiguousArray._endMutation()(v46);
        v21 = 0;
        if (v29 == v15)
        {
          v39 = (_QWORD *)v130[0];
          v38 = a8;
          v25 = v114;
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_4;
    }
    __break(1u);
LABEL_74:
    if (v22 < 0)
      v106 = v22;
    else
      v106 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v31 = _CocoaArrayWrapper.endIndex.getter(v106);
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRelease();
    v128 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
    v32 = swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 22) = 2082;
    v33 = ((uint64_t (*)(_QWORD, __n128))v124)(0, v32);
    v17 = (char *)objc_msgSend((id)swift_getObjCClassFromMetadata(v33), "description");
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v36 = v35;

    v22 = v123;
    v128 = sub_10001A820(v34, v36, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 32) = 2082;
    swift_bridgeObjectRetain(v25);
    v128 = sub_10001A820(v115, v25, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
    swift_bridgeObjectRelease_n(v25, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v113, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v29, 0x2Au);
    swift_arrayDestroy(v112, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    v38 = a8;
    v28 = v117;
    v21 = v121;
  }
LABEL_21:
  v47 = v116(v39, v119, v37);
  v121 = v21;
  if (!v21)
  {
    v21 = v47;
    swift_bridgeObjectRelease();
    if (v117)
    {
      if (v22 < 0)
        v50 = v22;
      else
        v50 = v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v22);
      v51 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease();
      v49 = v124;
      v113 = v51;
      if (!v51)
        goto LABEL_65;
    }
    else
    {
      v49 = v124;
      v113 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v113)
        goto LABEL_65;
    }
    v110 = v25 + 24;
    v111 = (uint64_t *)(v119 + 48);
    v112 = v22 & 0xC000000000000001;
    swift_beginAccess(v119 + 48, v130, 0, 0);
    v109 = v119 + 56;
    swift_beginAccess(v119 + 56, &v128, 0, 0);
    v15 = 4;
    v115 = v21;
    while (1)
    {
      v63 = v15 - 4;
      if (v112)
      {
        v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, v22);
        v65 = __OFADD__(v63, 1);
        v66 = v15 - 3;
        if (v65)
          goto LABEL_67;
      }
      else
      {
        v64 = *(id *)(v22 + 8 * v15);
        v65 = __OFADD__(v63, 1);
        v66 = v15 - 3;
        if (v65)
          goto LABEL_67;
      }
      v67 = v64;
      v68 = sub_1005CDB68(objc_msgSend(v67, "remObjectID"), v49, v122, v38);
      v118 = v66;

      v69 = *v111;
      v120 = v15;
      v116 = (uint64_t (*)(_QWORD *, uint64_t, __n128))v67;
      if ((*v111 & 0xC000000000000001) != 0)
      {
        if (v69 < 0)
          v70 = *v111;
        else
          v70 = v69 & 0xFFFFFFFFFFFFFF8;
        v71 = v68;
        swift_bridgeObjectRetain(v69);
        v72 = __CocoaDictionary.lookup(_:)(v71, v70);
        if (v72)
        {
          v17 = (char *)v72;
          v127 = v72;
          v73 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
          swift_unknownObjectRetain(v17);
          swift_dynamicCast(&v133, &v127, (char *)&type metadata for Swift.AnyObject + 8, v73, 7);
          v74 = v133;
          swift_unknownObjectRelease(v17);

          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
          v74 = 0;
        }
        v22 = v123;
      }
      else if (*(_QWORD *)(v69 + 16))
      {
        v75 = v68;
        swift_bridgeObjectRetain(v69);
        v76 = sub_1002C66DC((uint64_t)v75);
        if ((v77 & 1) != 0)
        {
          v74 = *(id *)(*(_QWORD *)(v69 + 56) + 8 * v76);

          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
          v74 = 0;
        }
      }
      else
      {
        v74 = 0;
      }

      v21 = v115;
      if (!*(_QWORD *)(v115 + 16))
        goto LABEL_56;
      v78 = v68;
      v79 = a9();
      if ((v80 & 1) == 0)
      {

LABEL_56:
        v85 = v68;
        swift_retain_n(v25);
        v86 = v85;
        v87 = Logger.logObject.getter(v86);
        v23 = v25;
        v88 = static os_log_type_t.error.getter(v87);
        if (os_log_type_enabled(v87, v88))
        {
          v17 = (char *)swift_slowAlloc(22, -1);
          v52 = swift_slowAlloc(64, -1);
          v133 = (void *)v52;
          *(_DWORD *)v17 = 136446466;
          sub_1000184A8(v110, (uint64_t)v131);
          sub_100671124((uint64_t)v131, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v54 = v53;
          v56 = v55;
          sub_100671124((uint64_t)v131, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          *(_QWORD *)(v17 + 4) = sub_10001A820(v54, v56, (uint64_t *)&v133);
          swift_release_n(v23);
          *(_QWORD *)&v57 = swift_bridgeObjectRelease().n128_u64[0];
          *((_WORD *)v17 + 6) = 2080;
          v58 = objc_msgSend(v86, "description", v57);
          v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
          v23 = v60;

          v61 = v59;
          v38 = a8;
          *(_QWORD *)(v17 + 14) = sub_10001A820(v61, (unint64_t)v23, (uint64_t *)&v133);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v17, 0x16u);
          swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
          v62 = v52;
          v21 = v115;
          swift_slowDealloc(v62, -1, -1);
          v22 = v123;
          swift_slowDealloc(v17, -1, -1);

          v25 = v114;
        }
        else
        {

          swift_release_n(v23);
          v25 = (unint64_t)v23;
        }
        goto LABEL_33;
      }
      v23 = *(id *)(*(_QWORD *)(v115 + 56) + 8 * v79);

      v81 = *(_QWORD *)v109;
      if (!*(_QWORD *)(*(_QWORD *)v109 + 16))
        break;
      v82 = v78;
      v83 = v23;
      swift_bridgeObjectRetain(v81);
      sub_1002C66DC((uint64_t)v82);
      if ((v84 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        v21 = v115;
LABEL_62:
        v90 = v78;
        swift_retain_n(v25);
        v91 = v90;
        v92 = Logger.logObject.getter(v91);
        v93 = static os_log_type_t.error.getter(v92);
        if (os_log_type_enabled(v92, v93))
        {
          v94 = swift_slowAlloc(22, -1);
          v108 = swift_slowAlloc(64, -1);
          v133 = (void *)v108;
          *(_DWORD *)v94 = 136446466;
          sub_1000184A8(v110, (uint64_t)v132);
          sub_100671124((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          type = v93;
          sub_1000181B8();
          v96 = v95;
          v98 = v97;
          sub_100671124((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          *(_QWORD *)(v94 + 4) = sub_10001A820(v96, v98, (uint64_t *)&v133);
          swift_release_n(v114);
          *(_QWORD *)&v99 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v94 + 12) = 2080;
          v100 = objc_msgSend(v91, "description", v99);
          v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
          v17 = v102;

          v103 = v101;
          v21 = v115;
          *(_QWORD *)(v94 + 14) = sub_10001A820(v103, (unint64_t)v17, (uint64_t *)&v133);

          v22 = v123;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v92, type, "Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v94, 0x16u);
          swift_arrayDestroy(v108, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v108, -1, -1);
          v104 = v94;
          v25 = v114;
          swift_slowDealloc(v104, -1, -1);

        }
        else
        {

          swift_release_n(v25);
        }
        goto LABEL_33;
      }

      swift_bridgeObjectRelease();
      v21 = v115;
LABEL_33:
      v15 = v120 + 1;
      v49 = v124;
      if (v118 == v113)
        goto LABEL_65;
    }
    v89 = v23;
    goto LABEL_62;
  }
LABEL_65:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100642B24(unint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  _QWORD *v8;
  Class isa;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  NSObject *v17;
  BOOL v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  unint64_t v64;
  char v65;
  id v66;
  unint64_t v67;
  char v68;
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  char v73;
  id v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  id v78;
  id v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t v87;
  unint64_t v88;
  double v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_type_t type;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[4];
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[16];
  uint64_t v116[3];
  _BYTE v117[48];
  _BYTE v118[56];
  void *v119;

  v5 = a3;
  v8 = *(_QWORD **)(a3 + 16);
  v7 = *(void **)(a3 + 24);
  isa = v3[9].isa;
  v116[0] = a2;
  v112[2] = v116;
  v112[3] = isa;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(a1);
  v10 = sub_1005CA184((uint64_t (*)(id *))sub_10067247C, v112, a1);
  if (!v4)
  {
    v11 = (uint64_t)v10;
    v106 = v3;
    if (qword_1008371E8 != -1)
      goto LABEL_65;
LABEL_3:
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain_n(v11, 2);
    swift_bridgeObjectRetain(v7);
    v101 = v13;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    v17 = v15;
    v18 = os_log_type_enabled(v15, v16);
    v19 = (unint64_t)v11 >> 62;
    v109 = (unint64_t)v11 >> 62;
    v111 = v11;
    if (v18)
    {
      LOBYTE(v107) = v16;
      v20 = (_QWORD *)swift_slowAlloc(42, -1);
      v105 = swift_slowAlloc(96, -1);
      v116[0] = v105;
      *(_DWORD *)v20 = 136446978;
      v114 = sub_10001A820(0x7661537265746661, 0xEF6E6F6974634165, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
      *((_WORD *)v20 + 6) = 2048;
      v108 = (uint64_t)v8;
      if (!v19)
      {
        v21 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_6;
      }
      goto LABEL_71;
    }

    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease_n(v11, 2);
    while (1)
    {
      v17 = v106;
      if (v19)
      {
        v95 = v11 < 0 ? v11 : v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
        v27 = _CocoaArrayWrapper.endIndex.getter(v95);
        swift_bridgeObjectRelease();
      }
      else
      {
        v27 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v20 = _swiftEmptyArrayStorage;
      if (!v27)
        break;
      v116[0] = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v27);
      if ((v27 & 0x8000000000000000) == 0)
      {
        v28 = 0;
        v29 = v11 & 0xC000000000000001;
        v11 = (uint64_t)&selRef_isConcealed;
        while (v27 != v28)
        {
          if (v29)
            v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v111);
          else
            v30 = *(id *)(v111 + 8 * v28 + 32);
          v31 = v30;
          v7 = sub_1005CBC20(objc_msgSend(v31, "remObjectID"));

          ++v28;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
          v8 = *(_QWORD **)(v116[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
          v33 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
          specialized ContiguousArray._endMutation()(v33);
          if (v27 == v28)
          {
            v20 = (_QWORD *)v116[0];
            v11 = v111;
            v17 = v106;
            goto LABEL_19;
          }
        }
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        swift_once(&qword_1008371E8, sub_100331650);
        goto LABEL_3;
      }
      __break(1u);
LABEL_71:
      if (v11 < 0)
        v96 = v11;
      else
        v96 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v21 = _CocoaArrayWrapper.endIndex.getter(v96);
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      v114 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
      swift_bridgeObjectRelease();
      *((_WORD *)v20 + 11) = 2082;
      v22 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v22), "description");
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v25 = v24;

      v26 = v23;
      v11 = v111;
      v114 = sub_10001A820(v26, v25, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
      swift_bridgeObjectRelease();
      *((_WORD *)v20 + 16) = 2082;
      swift_bridgeObjectRetain(v7);
      v114 = sub_10001A820(v108, (unint64_t)v7, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
      swift_bridgeObjectRelease_n(v7, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v107, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v20, 0x2Au);
      swift_arrayDestroy(v105, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v105, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      v19 = v109;
    }
LABEL_19:
    sub_10064A5D0((uint64_t)v20, v5);
    v8 = v34;
    swift_bridgeObjectRelease();
    if (v109)
    {
      if (v11 < 0)
        v35 = v11;
      else
        v35 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v36 = _CocoaArrayWrapper.endIndex.getter(v35);
      swift_bridgeObjectRelease();
      v104 = v36;
      if (!v36)
        goto LABEL_61;
    }
    else
    {
      v104 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v104)
      {
LABEL_61:
        swift_bridgeObjectRelease();
        goto LABEL_62;
      }
    }
    v100 = (uint64_t)&v17[3];
    v102 = (uint64_t *)(v5 + 48);
    v103 = v11 & 0xC000000000000001;
    swift_beginAccess(v5 + 48, v116, 0, 0);
    v99 = v5 + 56;
    swift_beginAccess(v5 + 56, &v114, 0, 0);
    v37 = 4;
    v5 = v101;
    v105 = (uint64_t)v8;
    while (1)
    {
      v52 = v37 - 4;
      if (v103)
      {
        v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37 - 4, v11);
        v7 = (void *)(v37 - 3);
        if (__OFADD__(v52, 1))
          goto LABEL_64;
      }
      else
      {
        v53 = *(id *)(v11 + 8 * v37);
        v7 = (void *)(v37 - 3);
        if (__OFADD__(v52, 1))
          goto LABEL_64;
      }
      v54 = v53;
      v55 = sub_1005CBC20(objc_msgSend(v54, "remObjectID"));
      v107 = v54;

      v56 = *v102;
      v108 = (uint64_t)v7;
      v110 = v37;
      if ((*v102 & 0xC000000000000001) != 0)
      {
        if (v56 < 0)
          v57 = *v102;
        else
          v57 = v56 & 0xFFFFFFFFFFFFFF8;
        v58 = v55;
        swift_bridgeObjectRetain(v56);
        v59 = __CocoaDictionary.lookup(_:)(v58, v57);
        if (v59)
        {
          v60 = v59;
          v113 = v59;
          v61 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
          swift_unknownObjectRetain(v60);
          swift_dynamicCast(&v119, &v113, (char *)&type metadata for Swift.AnyObject + 8, v61, 7);
          v62 = v119;
          swift_unknownObjectRelease(v60);

          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
          v62 = 0;
        }
        v8 = (_QWORD *)v105;
      }
      else if (*(_QWORD *)(v56 + 16))
      {
        v63 = v55;
        swift_bridgeObjectRetain(v56);
        v64 = sub_1002C66DC((uint64_t)v63);
        if ((v65 & 1) != 0)
        {
          v62 = *(id *)(*(_QWORD *)(v56 + 56) + 8 * v64);

          swift_bridgeObjectRelease();
        }
        else
        {

          swift_bridgeObjectRelease();
          v62 = 0;
        }
      }
      else
      {
        v62 = 0;
      }

      if (!v8[2])
        goto LABEL_51;
      v66 = v55;
      v67 = sub_1002C672C(v66);
      if ((v68 & 1) == 0)
        break;
      v69 = *(id *)(v8[7] + 8 * v67);

      v70 = *(_QWORD *)v99;
      if (!*(_QWORD *)(*(_QWORD *)v99 + 16))
      {
        v78 = v69;
LABEL_57:
        v79 = v66;
        swift_retain_n(v17);
        v80 = v79;
        v81 = Logger.logObject.getter(v80);
        v82 = static os_log_type_t.error.getter(v81);
        if (os_log_type_enabled(v81, v82))
        {
          v83 = swift_slowAlloc(22, -1);
          v98 = swift_slowAlloc(64, -1);
          v119 = (void *)v98;
          *(_DWORD *)v83 = 136446466;
          sub_1000184A8(v100, (uint64_t)v118);
          sub_100671124((uint64_t)v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          type = v82;
          sub_1000181B8();
          v85 = v84;
          v86 = v69;
          v88 = v87;
          sub_100671124((uint64_t)v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          *(_QWORD *)(v83 + 4) = sub_10001A820(v85, v88, (uint64_t *)&v119);
          swift_release_n(v17);
          *(_QWORD *)&v89 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v83 + 12) = 2080;
          v90 = objc_msgSend(v80, "description", v89);
          v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
          v93 = v92;

          *(_QWORD *)(v83 + 14) = sub_10001A820(v91, v93, (uint64_t *)&v119);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v81, type, "Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v83, 0x16u);
          swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v98, -1, -1);
          v94 = v83;
          v8 = (_QWORD *)v105;
          swift_slowDealloc(v94, -1, -1);

          v5 = v101;
        }
        else
        {

          swift_release_n(v17);
        }
        v11 = v111;
        goto LABEL_28;
      }
      v71 = v66;
      v72 = v69;
      swift_bridgeObjectRetain(v70);
      sub_1002C66DC((uint64_t)v71);
      if ((v73 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        v8 = (_QWORD *)v105;
        goto LABEL_57;
      }

      swift_bridgeObjectRelease();
      v8 = (_QWORD *)v105;
LABEL_28:
      v37 = v110 + 1;
      if (v108 == v104)
        goto LABEL_61;
    }

LABEL_51:
    v74 = v55;
    swift_retain_n(v17);
    v75 = v74;
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(64, -1);
      v119 = (void *)v39;
      *(_DWORD *)v38 = 136446466;
      sub_1000184A8(v100, (uint64_t)v117);
      sub_100671124((uint64_t)v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      sub_1000181B8();
      v41 = v40;
      v43 = v42;
      sub_100671124((uint64_t)v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      *(_QWORD *)(v38 + 4) = sub_10001A820(v41, v43, (uint64_t *)&v119);
      swift_release_n(v106);
      *(_QWORD *)&v44 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v38 + 12) = 2080;
      v45 = objc_msgSend(v75, "description", v44);
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

      v49 = v46;
      v17 = v106;
      *(_QWORD *)(v38 + 14) = sub_10001A820(v49, v48, (uint64_t *)&v119);

      v5 = v101;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      v50 = v39;
      v11 = v111;
      swift_slowDealloc(v50, -1, -1);
      v51 = v38;
      v8 = (_QWORD *)v105;
      swift_slowDealloc(v51, -1, -1);

    }
    else
    {

      swift_release_n(v17);
    }
    goto LABEL_28;
  }
LABEL_62:
  swift_bridgeObjectRelease();
}

void sub_1006436D8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  unint64_t v60;
  char v61;
  id v62;
  unint64_t v63;
  char v64;
  id v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  id v71;
  NSObject *v72;
  os_log_type_t v73;
  id v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  double v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  os_log_type_t type;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  os_log_type_t v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  _QWORD v107[4];
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[16];
  uint64_t v111[3];
  _BYTE v112[48];
  _BYTE v113[56];
  void *v114;

  v5 = v3;
  v6 = a3;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(unint64_t **)(a3 + 24);
  v10 = *(_QWORD *)(v3 + 72);
  v111[0] = a2;
  v107[2] = v111;
  v107[3] = v10;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a1);
  v11 = sub_1005CA184((uint64_t (*)(id *))sub_100672E44, v107, a1);
  if (!v4)
  {
    v12 = (uint64_t)v11;
    if (qword_1008371E8 != -1)
      goto LABEL_64;
LABEL_3:
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain_n(v12, 2);
    swift_bridgeObjectRetain(v9);
    v15 = Logger.logObject.getter(v14);
    v100 = static os_log_type_t.info.getter(v15);
    v16 = v15;
    v17 = (unint64_t)v12 >> 62;
    v104 = (unint64_t)v12 >> 62;
    v106 = v12;
    v99 = v5;
    v102 = v6;
    if (os_log_type_enabled(v15, v100))
    {
      v98 = v8;
      v18 = (_QWORD *)swift_slowAlloc(42, -1);
      v19 = swift_slowAlloc(96, -1);
      v111[0] = v19;
      *(_DWORD *)v18 = 136446978;
      v109 = sub_10001A820(0x7661537265746661, 0xEF6E6F6974634165, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110);
      *((_WORD *)v18 + 6) = 2048;
      v97 = v19;
      if (!v17)
      {
        v20 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_6;
      }
      goto LABEL_70;
    }

    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease_n(v12, 2);
    while (1)
    {
      if (v17)
      {
        v88 = v12 < 0 ? v12 : v12 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v12);
        v6 = _CocoaArrayWrapper.endIndex.getter(v88);
        swift_bridgeObjectRelease();
      }
      else
      {
        v6 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v18 = _swiftEmptyArrayStorage;
      if (!v6)
        break;
      v111[0] = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v6);
      if ((v6 & 0x8000000000000000) == 0)
      {
        v8 = 0;
        v5 = v12 & 0xC000000000000001;
        v9 = &qword_10083AA30;
        while (v6 != v8)
        {
          if (v5)
            v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v12);
          else
            v27 = *(id *)(v12 + 8 * v8 + 32);
          v28 = v27;
          v29 = sub_1005CCBAC(objc_msgSend(v28, "remObjectID"), &qword_10083AA30, off_1007D6658);
          ++v8;

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v30);
          v31 = *(_QWORD *)(v111[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
          v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
          specialized ContiguousArray._endMutation()(v32);
          v12 = v106;
          if (v6 == v8)
          {
            v18 = (_QWORD *)v111[0];
            v5 = v99;
            v17 = v104;
            goto LABEL_19;
          }
        }
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        swift_once(&qword_1008371E8, sub_100331650);
        goto LABEL_3;
      }
      __break(1u);
LABEL_70:
      if (v12 < 0)
        v89 = v12;
      else
        v89 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v20 = _CocoaArrayWrapper.endIndex.getter(v89);
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      v109 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110);
      swift_bridgeObjectRelease();
      *((_WORD *)v18 + 11) = 2082;
      v21 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
      v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(v21), "description");
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      v26 = v23;
      v12 = v106;
      v109 = sub_10001A820(v26, v25, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110);
      swift_bridgeObjectRelease();
      *((_WORD *)v18 + 16) = 2082;
      swift_bridgeObjectRetain(v9);
      v109 = sub_10001A820(v98, (unint64_t)v9, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110);
      swift_bridgeObjectRelease_n(v9, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v100, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v18, 0x2Au);
      swift_arrayDestroy(v97, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v97, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      v5 = v99;
      v17 = v104;
    }
LABEL_19:
    v6 = v102;
    sub_100647C90((uint64_t)v18, v102);
    v34 = v33;
    swift_bridgeObjectRelease();
    if (v17)
    {
      if (v12 < 0)
        v35 = v12;
      else
        v35 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v36 = _CocoaArrayWrapper.endIndex.getter(v35);
      swift_bridgeObjectRelease();
      v98 = v36;
      if (!v36)
        goto LABEL_60;
    }
    else
    {
      v98 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v98)
      {
LABEL_60:
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
    }
    v93 = v5 + 24;
    v96 = (uint64_t *)(v102 + 48);
    v97 = v12 & 0xC000000000000001;
    swift_beginAccess(v102 + 48, v111, 0, 0);
    v92 = v102 + 56;
    swift_beginAccess(v102 + 56, &v109, 0, 0);
    v8 = 4;
    while (1)
    {
      v49 = v8 - 4;
      if (v97)
      {
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v12);
        v9 = (unint64_t *)(v8 - 3);
        if (__OFADD__(v49, 1))
          goto LABEL_63;
      }
      else
      {
        v50 = *(id *)(v12 + 8 * v8);
        v9 = (unint64_t *)(v8 - 3);
        if (__OFADD__(v49, 1))
          goto LABEL_63;
      }
      v51 = v50;
      v52 = sub_1005CCBAC(objc_msgSend(v51, "remObjectID"), &qword_10083AA30, off_1007D6658);
      v105 = v51;

      v53 = *v96;
      v101 = v9;
      v103 = v8;
      if ((*v96 & 0xC000000000000001) != 0)
        break;
      if (*(_QWORD *)(v53 + 16))
      {
        v55 = v52;
        swift_bridgeObjectRetain(v53);
        v60 = sub_1002C66DC((uint64_t)v55);
        if ((v61 & 1) != 0)
        {
          v59 = *(id *)(*(_QWORD *)(v53 + 56) + 8 * v60);
          goto LABEL_43;
        }
        goto LABEL_44;
      }
LABEL_45:
      v59 = 0;
LABEL_46:

      if (!*(_QWORD *)(v34 + 16))
        goto LABEL_52;
      v62 = v52;
      v63 = sub_1002C672C(v62);
      if ((v64 & 1) == 0)
      {

LABEL_52:
        v71 = v52;
        swift_retain_n(v5);
        v6 = (uint64_t)v71;
        v72 = Logger.logObject.getter(v6);
        v73 = static os_log_type_t.error.getter(v72);
        if (os_log_type_enabled(v72, v73))
        {
          v37 = swift_slowAlloc(22, -1);
          v94 = swift_slowAlloc(64, -1);
          v114 = (void *)v94;
          *(_DWORD *)v37 = 136446466;
          sub_1000184A8(v93, (uint64_t)v112);
          sub_100671124((uint64_t)v112, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          sub_1000181B8();
          v39 = v38;
          v41 = v40;
          sub_100671124((uint64_t)v112, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          *(_QWORD *)(v37 + 4) = sub_10001A820(v39, v41, (uint64_t *)&v114);
          swift_release_n(v99);
          *(_QWORD *)&v42 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v37 + 12) = 2080;
          v43 = objc_msgSend((id)v6, "description", v42);
          v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          v45 = v34;
          v47 = v46;

          v48 = v44;
          v5 = v99;
          *(_QWORD *)(v37 + 14) = sub_10001A820(v48, v47, (uint64_t *)&v114);

          v34 = v45;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v37, 0x16u);
          swift_arrayDestroy(v94, 2, (char *)&type metadata for Any + 8);
          v12 = v106;
          swift_slowDealloc(v94, -1, -1);
          swift_slowDealloc(v37, -1, -1);

        }
        else
        {

          swift_release_n(v5);
        }
        goto LABEL_28;
      }
      v65 = *(id *)(*(_QWORD *)(v34 + 56) + 8 * v63);

      v66 = *(_QWORD *)v92;
      if (!*(_QWORD *)(*(_QWORD *)v92 + 16))
      {
        v74 = v65;
LABEL_56:
        v75 = v62;
        swift_retain_n(v5);
        v6 = (uint64_t)v75;
        v76 = Logger.logObject.getter(v6);
        v77 = static os_log_type_t.error.getter(v76);
        if (os_log_type_enabled(v76, v77))
        {
          v78 = swift_slowAlloc(22, -1);
          v91 = swift_slowAlloc(64, -1);
          v114 = (void *)v91;
          *(_DWORD *)v78 = 136446466;
          sub_1000184A8(v93, (uint64_t)v113);
          sub_100671124((uint64_t)v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          type = v77;
          sub_1000181B8();
          v80 = v79;
          v95 = v65;
          v82 = v81;
          sub_100671124((uint64_t)v113, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
          *(_QWORD *)(v78 + 4) = sub_10001A820(v80, v82, (uint64_t *)&v114);
          swift_release_n(v5);
          *(_QWORD *)&v83 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v78 + 12) = 2080;
          v84 = objc_msgSend((id)v6, "description", v83);
          v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
          v87 = v86;

          *(_QWORD *)(v78 + 14) = sub_10001A820(v85, v87, (uint64_t *)&v114);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v76, type, "Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v78, 0x16u);
          swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v91, -1, -1);
          swift_slowDealloc(v78, -1, -1);

        }
        else
        {

          swift_release_n(v5);
        }
        v12 = v106;
        goto LABEL_28;
      }
      v6 = (uint64_t)v62;
      v67 = v65;
      swift_bridgeObjectRetain(v66);
      v68 = sub_1002C66DC(v6);
      if ((v69 & 1) == 0)
      {

        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      v70 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v68);
      swift_bridgeObjectRetain(v70);

      swift_bridgeObjectRelease();
      sub_10025F370(v67, v70);

      swift_bridgeObjectRelease();
LABEL_28:
      v8 = v103 + 1;
      if (v101 == (unint64_t *)v98)
        goto LABEL_60;
    }
    if (v53 < 0)
      v54 = *v96;
    else
      v54 = v53 & 0xFFFFFFFFFFFFFF8;
    v55 = v52;
    swift_bridgeObjectRetain(v53);
    v56 = __CocoaDictionary.lookup(_:)(v55, v54);
    if (v56)
    {
      v57 = v56;
      v108 = v56;
      v58 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
      swift_unknownObjectRetain(v57);
      swift_dynamicCast(&v114, &v108, (char *)&type metadata for Swift.AnyObject + 8, v58, 7);
      v59 = v114;
      swift_unknownObjectRelease(v57);
LABEL_43:

      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
LABEL_44:

    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
LABEL_61:
  swift_bridgeObjectRelease();
}

void sub_1006442D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C9128);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851A08);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851A10);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843C08);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D7394, (void (*)(void))sub_1002CF2D0, (uint64_t *)&unk_100843C10);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F364(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100215CF8((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E9264((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064AE10((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_1006541F0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_1006446F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C913C);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_1008517F0);
  v27 = v5;
  v6 = sub_10001A630(&qword_1008517F8);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843970);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = &_swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D73AC, (void (*)(void))sub_1002CF2E8, (uint64_t *)&unk_100843980);
    swift_bridgeObjectRelease(v7);
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F42C(v10);
    swift_bridgeObjectRelease(a1);
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      swift_bridgeObjectRelease(v7);
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100215D44((uint64_t)v16, v11);
    swift_bridgeObjectRelease(v16);
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E9270((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064B208((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_1006544B0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease(0x8000000000000000);
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease(v24);
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100644B10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C9178);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851B98);
  v27 = v5;
  v6 = sub_10001A630((uint64_t *)&unk_100851BA0);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843D98);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = &_swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D75F4, (void (*)(void))sub_1002CF654, (uint64_t *)&unk_100843DA0);
    swift_bridgeObjectRelease(v7);
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F448(v10);
    swift_bridgeObjectRelease(a1);
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      swift_bridgeObjectRelease(v7);
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100215D90((uint64_t)v16, v11);
    swift_bridgeObjectRelease(v16);
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E94A8((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064B5C0((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100654770((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease(0x8000000000000000);
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease(v24);
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100644F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C91C8);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851930);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851938);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_100843AD0);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D7BC0, (void (*)(void))sub_1002D0018, &qword_10083B588);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F488(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100215DDC((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E9694((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064B9AC((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100654A30((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100645350(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C9330);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851E40);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851E48);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_100851E50);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D7DB0, (void (*)(void))sub_1002D032C, (uint64_t *)&unk_100844250);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F4EC(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100215E28((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E9A08((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064BDA4((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100654CF0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100645770(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C9358);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851DF8);
  v27 = v5;
  v6 = sub_10001A630((uint64_t *)&unk_100851E00);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100844220);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D7DBC, (void (*)(void))sub_1002D0338, &qword_100851E10);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F508(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100215E74((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E9A14((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064C190((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100654FB0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100645B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C9380);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851DB0);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851DB8);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_100851DC0);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D7DC8, (void (*)(void))sub_1002D0344, (uint64_t *)&unk_1008441F0);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F524(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100215EC0((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E9A20((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064C57C((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100655270((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100645FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C93A8);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851D10);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851D18);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_1008441C0);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D7DD4, (void (*)(void))sub_1002D0350, &qword_10083B648);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F540(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100215F0C((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E9A2C((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064C968((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100655530((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_1006463D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C9F74);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851A80);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851A88);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843CB0);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D838C, (void (*)(void))sub_1002D0C90, &qword_10083B5C8);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F7C8(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_1002163C4((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA1C0((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064CD54((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_1006557F0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_1006467F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C9F9C);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851AB8);
  v27 = v5;
  v6 = sub_10001A630((uint64_t *)&unk_100851AC0);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843CD8);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D8398, (void (*)(void))sub_1002D0C9C, (uint64_t *)&unk_100843CE0);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F7E4(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216410((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA1CC((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064D140((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100655AB0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100646C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C9FC4);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851AF0);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851AF8);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843D10);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D83A4, (void (*)(void))sub_1002D0CA8, &qword_10083B5E0);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F800(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_10021645C((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA1F4((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064D52C((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100655D70((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100647030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002C9FEC);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851B28);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851B30);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843D38);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D83B0, (void (*)(void))sub_1002D0CB4, (uint64_t *)&unk_100843D40);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F81C(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_1002164A8((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA200((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064D918((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100656030((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100647450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CA014);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851B60);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851B68);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843D70);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D83BC, (void (*)(void))sub_1002D0CC0, &qword_10083B5F8);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F838(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_1002164F4((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA20C((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064DD04((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_1006562F0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100647870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CA03C);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851BD0);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851BD8);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843DD0);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D83C8, (void (*)(void))sub_1002D0CCC, &qword_10083B610);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F854(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216540((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    v19 = swift_retain();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA234((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064E0F0((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_1006565B0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100647C90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CA59C);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851818);
  v27 = v5;
  v6 = sub_10001A630((uint64_t *)&unk_100851820);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_1008439D0);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = &_swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D8ED8, (void (*)(void))sub_1002D20A4, (uint64_t *)&unk_100851830);
    swift_bridgeObjectRelease(v7);
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011EF18(v10);
    swift_bridgeObjectRelease(a1);
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      swift_bridgeObjectRelease(v7);
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216B48((uint64_t)v16, v11);
    swift_bridgeObjectRelease(v16);
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA534((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064E4DC((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100656870((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease(0x8000000000000000);
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease(v24);
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_1006480B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CA5B0);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851C70);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851C78);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_100851C80);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D8EE4, (void (*)(void))sub_1002D20B0, (uint64_t *)&unk_100843F60);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F9C0(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216B94((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA540((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064E8B0((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100656B30((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_1006484D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CA5D8);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851CB8);
  v27 = v5;
  v6 = sub_10001A630((uint64_t *)&unk_100851CC0);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_100843F90);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002D8EF0, (void (*)(void))sub_1002D20BC, (uint64_t *)&unk_100851CD0);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011F9DC(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216BE0((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA54C((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064EC84((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100656DF0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_1006488F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CAC6C);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851E80);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851E88);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_1008446B0);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002DAC74, (void (*)(void))sub_1002D5200, &qword_10083B680);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10011FFB4(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216C2C((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA770((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064F058((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_1006570B0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, v25, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100648D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CACA8);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_1008517C0);
  v27 = v5;
  v6 = sub_10001A630((uint64_t *)&unk_1008517C8);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_100843940);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002DB068, (void (*)(void))sub_1002D5894, &qword_10083B540);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_100120170(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216C78((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA77C((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064F434((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100657370((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100649130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CACD0);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851860);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851868);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843A00);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002DB074, (void (*)(void))sub_1002D58A0, &qword_10083B560);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_10012018C(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216CC4((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA788((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064F810((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100657630((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100649550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CACF8);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_1008518A0);
  v27 = v5;
  v6 = sub_10001A630(&qword_1008518A8);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_1008518B0);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002DB080, (void (*)(void))sub_1002D58AC, (uint64_t *)&unk_100843A40);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_1001201A8(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216D10((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA794((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064FBEC((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_1006578F0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100649970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CAD20);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_1008518F0);
  v27 = v5;
  v6 = sub_10001A630(&qword_1008518F8);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843A80);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002DB08C, (void (*)(void))sub_1002D58B8, &qword_10083B578);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_1001201C4(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216D5C((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA7A0((uint64_t)v17);
        swift_release(v17);
        v24 = sub_10064FFC8((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100657BB0((uint64_t)v24, (uint64_t)sub_1006591EC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_100649D90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CAD48);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851998);
  v27 = v5;
  v6 = sub_10001A630((uint64_t *)&unk_1008519A0);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100843B68);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002DB098, (void (*)(void))sub_1002D58C4, (uint64_t *)&unk_100843B70);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_1001201E0(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216DA8((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA7AC((uint64_t)v17);
        swift_release(v17);
        v24 = sub_1006503AC((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100657E70((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_10064A1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CAD70);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_1008519E0);
  v27 = v5;
  v6 = sub_10001A630(&qword_1008519E8);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630((uint64_t *)&unk_100843BC0);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002DB0A4, (void (*)(void))sub_1002D58D0, &qword_10083B5A8);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_1001201FC(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216DF4((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001EA7B8((uint64_t)v17);
        swift_release(v17);
        v24 = sub_100650780((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_100658130((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_10064A5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CAD98);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851A50);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851A58);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100851A60);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002DB0B0, (void (*)(void))sub_1002D58DC, (uint64_t *)&unk_100843C70);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_100120218(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216E40((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E888C((uint64_t)v17);
        swift_release(v17);
        v24 = sub_100650B5C((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_1006583F0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

void sub_10064A9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  objc_class *v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;

  swift_retain();
  v5 = sub_100659910(a1, a2, (uint64_t (*)(BOOL, uint64_t, uint64_t, _QWORD *))sub_1002CADC0);
  swift_release(a2);
  v28[2] = sub_10001A630(&qword_100851C00);
  v27 = v5;
  v6 = sub_10001A630(&qword_100851C08);
  throwingCast<A>(_:as:failureMessage:)(&v29, &v27, v6, 0, 0, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v27);
  if (!v2)
  {
    v7 = v29;
    v8 = v29[2];
    if (v8)
    {
      sub_10001A630(&qword_100851C10);
      v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v8);
    }
    else
    {
      v9 = _swiftEmptyDictionarySingleton;
    }
    v27 = v9;
    swift_bridgeObjectRetain_n(v7, 2);
    sub_100658970(v7, 1, &v27, (uint64_t (*)(id))sub_1002C672C, (void (*)(void))sub_1002DB0BC, (void (*)(void))sub_1002D58E8, (uint64_t *)&unk_100843E20);
    swift_bridgeObjectRelease();
    v26 = v27;
    swift_bridgeObjectRetain(a1);
    v11 = sub_100120234(v10);
    swift_bridgeObjectRelease();
    if (v8)
    {
      v27 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v8);
      v12 = 4;
      do
      {
        v13 = (id)v7[v12];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v14 = v27[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
        v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v13);
        specialized ContiguousArray._endMutation()(v15);
        v12 += 2;
        --v8;
      }
      while (v8);
      v16 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v17 = sub_100216E8C((uint64_t)v16, v11);
    swift_bridgeObjectRelease();
    if (qword_1008371E8 != -1)
      swift_once(&qword_1008371E8, sub_100331650);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_100845DC0);
    swift_bridgeObjectRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v27 = (_QWORD *)v17[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_release(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetching pending objects from database {cdPendingObjectIDs.count: %ld}", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);

      if (v17[2])
      {
LABEL_14:
        v23 = sub_1001E8898((uint64_t)v17);
        swift_release(v17);
        v24 = sub_100650F28((uint64_t)v23, *(void **)(a2 + 32));
        swift_release(v23);
        swift_bridgeObjectRetain(v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        v27 = v26;
        sub_1006586B0((uint64_t)v24, (uint64_t)sub_1006736FC, 0, isUniquelyReferenced_nonNull_native, &v27);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100659480((uint64_t)v24, a2);
        swift_bridgeObjectRelease();
        swift_release(a2);
        return;
      }
    }
    else
    {

      swift_release(v17);
      if (v17[2])
        goto LABEL_14;
    }
    swift_release(v17);
  }
}

_QWORD *sub_10064AE10(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  _QWORD *result;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (_QWORD *)sub_1002B0370((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (id)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CF0CC(a1, 0, 1, 0, (uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, &qword_100851A18, (uint64_t *)&unk_100843C10);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = _swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CDB68(v21, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, 0xD000000000000014, (void *)0x8000000100709CD0);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = v2[2];
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (v2[3] < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D7394();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = v2[7];
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    v2[(v29 >> 6) + 8] |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(v2[6] + v36) = v26;
    *(_QWORD *)(v2[7] + v36) = v10;
    v37 = v2[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    v2[2] = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002CF2D0(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630((uint64_t *)&unk_100843C10);
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

_QWORD *sub_10064B208(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  id v37;
  _QWORD *result;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;

  if (!*(_QWORD *)(a1 + 16))
    return (_QWORD *)sub_1002B037C((uint64_t)_swiftEmptyArrayStorage);
  v6 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v7 + 32) = a2;
  v45 = (id)v7;
  specialized Array._endMutation()(v7);
  v8 = a2;
  sub_1005CF038(a1, 0, 1, 0);
  v10 = v9;
  swift_bridgeObjectRelease(v45);
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_35:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v10);
    if (v11)
      goto LABEL_5;
LABEL_39:
    swift_bridgeObjectRelease(v10);
    return &_swiftEmptyDictionarySingleton;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
    goto LABEL_39;
LABEL_5:
  v44 = v10 & 0xC000000000000001;
  v2 = &_swiftEmptyDictionarySingleton;
  v12 = 4;
  v43 = v10;
  while (1)
  {
    v15 = v12 - 4;
    if (v44)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_32;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
    v45 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v45);
    v20 = v45;
    if (!v19)
      break;
    v21 = v19;
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    v22 = v20;

    v10 = (uint64_t)v18;
    v23 = v21;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v26 = sub_1002C672C(v23);
    v27 = v2[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      goto LABEL_33;
    v30 = v25;
    if (v2[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v2 = v45;
        if ((v25 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_1002D73AC();
        v2 = v45;
        if ((v30 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      sub_1002CF2E8(v29, isUniquelyReferenced_nonNull_native);
      v31 = sub_1002C672C(v23);
      if ((v30 & 1) != (v32 & 1))
      {
        v42 = sub_10001A630((uint64_t *)&unk_100843980);
        result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
        __break(1u);
        return result;
      }
      v26 = v31;
      v2 = v45;
      if ((v30 & 1) != 0)
      {
LABEL_6:
        v13 = v2[7];
        v14 = 8 * v26;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
    v2[(v26 >> 6) + 8] |= 1 << v26;
    v33 = 8 * v26;
    *(_QWORD *)(v2[6] + v33) = v23;
    *(_QWORD *)(v2[7] + v33) = v10;
    v34 = v2[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_34;
    v2[2] = v36;
    v37 = v23;
LABEL_7:

    swift_bridgeObjectRelease(0x8000000000000000);
    ++v12;
    v10 = v43;
    if (v17 == v11)
    {
      swift_bridgeObjectRelease(v43);
      return v2;
    }
  }
  v39 = v45;
  _convertNSErrorToError(_:)(v20);

  swift_willThrow(v40);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v10);
  return v2;
}

objc_class *sub_10064B5C0(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B06BC((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, (unint64_t *)&qword_10083DA60, off_1007D66C8, &qword_10083DAE0, (uint64_t *)&unk_100843DA0);
  swift_bridgeObjectRelease(v48);
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease(v10);
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease(v10);
    return (objc_class *)&_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)&_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease(v2);
      swift_bridgeObjectRelease(v10);
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D75F4();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease(0x8000000000000000);
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease(v10);
      return v2;
    }
  }
  sub_1002CF654(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630((uint64_t *)&unk_100843DA0);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

_QWORD *sub_10064B9AC(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  _QWORD *result;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (_QWORD *)sub_1002B07EC((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (id)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CF0CC(a1, 0, 1, 0, (uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, &qword_100851940, &qword_10083B588);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = _swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CDB68(v21, (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint, 0xD000000000000013, (void *)0x8000000100709CB0);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = v2[2];
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (v2[3] < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D7BC0();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = v2[7];
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    v2[(v29 >> 6) + 8] |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(v2[6] + v36) = v26;
    *(_QWORD *)(v2[7] + v36) = v10;
    v37 = v2[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    v2[2] = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0018(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630(&qword_10083B588);
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064BDA4(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B07F8((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, &qword_100840C00, off_1007D6688, &qword_100851E60, (uint64_t *)&unk_100844250);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, &qword_100840C00, off_1007D6688);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D7DB0();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D032C(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630((uint64_t *)&unk_100844250);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064C190(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B0804((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, &qword_100840C10, off_1007D6670, &qword_100851E18, &qword_100851E10);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, &qword_100840C10, off_1007D6670);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D7DBC();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0338(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630(&qword_100851E10);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064C57C(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B0810((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, (unint64_t *)&qword_100840C40, off_1007D6668, &qword_100851DD0, (uint64_t *)&unk_1008441F0);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, (unint64_t *)&qword_100840C40, off_1007D6668);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D7DC8();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0344(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630((uint64_t *)&unk_1008441F0);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064C968(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B081C((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, &qword_10084FBF8, off_1007D6678, (uint64_t *)&unk_100851D20, &qword_10083B648);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, &qword_10084FBF8, off_1007D6678);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D7DD4();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0350(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630(&qword_10083B648);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064CD54(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B0958((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, (unint64_t *)&unk_1008398F0, off_1007D6660, &qword_100851A90, &qword_10083B5C8);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, (unint64_t *)&unk_1008398F0, off_1007D6660);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D838C();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0C90(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630(&qword_10083B5C8);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064D140(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B0964((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, &qword_100840020, off_1007D6690, &qword_100841340, (uint64_t *)&unk_100843CE0);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, &qword_100840020, off_1007D6690);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D8398();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0C9C(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630((uint64_t *)&unk_100843CE0);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064D52C(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B0970((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, &qword_100845598, off_1007D6728, &qword_100851B00, &qword_10083B5E0);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, &qword_100845598, off_1007D6728);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D83A4();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0CA8(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630(&qword_10083B5E0);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064D918(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B097C((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, (unint64_t *)&unk_1008455A0, off_1007D66D8, &qword_100851B38, (uint64_t *)&unk_100843D40);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, (unint64_t *)&unk_1008455A0, off_1007D66D8);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D83B0();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0CB4(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630((uint64_t *)&unk_100843D40);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064DD04(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B0988((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, (unint64_t *)&unk_10083AE00, off_1007D66C0, &qword_100851B70, &qword_10083B5F8);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, (unint64_t *)&unk_10083AE00, off_1007D66C0);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D83BC();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0CC0(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630(&qword_10083B5F8);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064E0F0(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  id v40;
  objc_class *result;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  objc_class *v48;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B0994((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v48 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v48, (unint64_t *)&qword_100841620, off_1007D6700, &qword_100851BE0, &qword_10083B610);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v44 = v10;
    else
      v44 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
    goto LABEL_38;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
LABEL_5:
  v46 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v12 = 4;
  while (1)
  {
    v15 = v12 - 4;
    if (v46)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v12);
      v17 = v12 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v48 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v48);
    v20 = v48;
    if (!v19)
    {
      v42 = v48;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v43);
LABEL_28:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v48;
    v23 = sub_1005CCBAC(v21, (unint64_t *)&qword_100841620, off_1007D6700);
    if (v4)
      goto LABEL_28;
    v24 = v23;
    v47 = v17;
    v25 = v11;
    v4 = v10;

    v10 = (uint64_t)v18;
    v26 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v48 = v2;
    v29 = sub_1002C672C(v26);
    v30 = *((_QWORD *)v2 + 2);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v33 = v28;
    if (*((_QWORD *)v2 + 3) < v32)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v48;
      if ((v28 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_1002D83C8();
      v2 = v48;
      if ((v33 & 1) != 0)
      {
LABEL_6:
        v13 = *((_QWORD *)v2 + 7);
        v14 = 8 * v29;

        *(_QWORD *)(v13 + v14) = v10;
        goto LABEL_7;
      }
    }
LABEL_22:
    *((_QWORD *)v2 + (v29 >> 6) + 8) |= 1 << v29;
    v36 = 8 * v29;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v36) = v26;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v36) = v10;
    v37 = *((_QWORD *)v2 + 2);
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v39;
    v40 = v26;
LABEL_7:

    swift_bridgeObjectRelease();
    ++v12;
    v11 = v25;
    v10 = v4;
    v4 = 0;
    if (v47 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D0CCC(v32, isUniquelyReferenced_nonNull_native);
  v34 = sub_1002C672C(v26);
  if ((v33 & 1) == (v35 & 1))
  {
    v29 = v34;
    v2 = v48;
    if ((v33 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v45 = sub_10001A630(&qword_10083B610);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
  return result;
}

objc_class *sub_10064E4DC(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  objc_class *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  objc_class *v21;
  void *v22;
  objc_class *v23;
  void *v24;
  void *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  objc_class *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  objc_class *v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B11C0((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v45, &qword_10083AA30, off_1007D6658, &qword_10083FE60, (uint64_t *)&unk_100851830);
  swift_bridgeObjectRelease(v45);
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v10);
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease(v10);
    return (objc_class *)&_swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = (objc_class *)&_swiftEmptyDictionarySingleton;
  v13 = 4;
  v43 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v45);
    v21 = v45;
    if (!v20)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease(v2);
      swift_bridgeObjectRelease(v10);
      return v2;
    }
    v22 = v20;
    v23 = v45;
    v24 = sub_1005CCBAC(v22, &qword_10083AA30, off_1007D6658);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v25);
    v29 = *((_QWORD *)v2 + 2);
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (*((_QWORD *)v2 + 3) < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002D8ED8();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = *((_QWORD *)v2 + 7);
        v15 = 8 * v28;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    *((_QWORD *)v2 + (v28 >> 6) + 8) |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v34) = v25;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v34) = v19;
    v35 = *((_QWORD *)v2 + 2);
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v37;
    v38 = v25;
LABEL_9:

    swift_bridgeObjectRelease(0x8000000000000000);
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v43)
    {
      swift_bridgeObjectRelease(v10);
      return v2;
    }
  }
  sub_1002D20A4(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v25);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630((uint64_t *)&unk_100851830);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

objc_class *sub_10064E8B0(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  objc_class *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  objc_class *v21;
  void *v22;
  objc_class *v23;
  void *v24;
  void *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  objc_class *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  objc_class *v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B11CC((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v45, (unint64_t *)&qword_100839928, off_1007D6718, &qword_100851C90, (uint64_t *)&unk_100843F60);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v13 = 4;
  v43 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v45);
    v21 = v45;
    if (!v20)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v22 = v20;
    v23 = v45;
    v24 = sub_1005CCBAC(v22, (unint64_t *)&qword_100839928, off_1007D6718);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v25);
    v29 = *((_QWORD *)v2 + 2);
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (*((_QWORD *)v2 + 3) < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002D8EE4();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = *((_QWORD *)v2 + 7);
        v15 = 8 * v28;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    *((_QWORD *)v2 + (v28 >> 6) + 8) |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v34) = v25;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v34) = v19;
    v35 = *((_QWORD *)v2 + 2);
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v37;
    v38 = v25;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v43)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D20B0(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v25);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630((uint64_t *)&unk_100843F60);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

objc_class *sub_10064EC84(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  objc_class *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  objc_class *v21;
  void *v22;
  objc_class *v23;
  void *v24;
  void *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  objc_class *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  objc_class *v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B11D8((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v45, (unint64_t *)&qword_100851CB0, off_1007D66B0, &qword_10084F3B8, (uint64_t *)&unk_100851CD0);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v13 = 4;
  v43 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v45);
    v21 = v45;
    if (!v20)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v22 = v20;
    v23 = v45;
    v24 = sub_1005CCBAC(v22, (unint64_t *)&qword_100851CB0, off_1007D66B0);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v25);
    v29 = *((_QWORD *)v2 + 2);
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (*((_QWORD *)v2 + 3) < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002D8EF0();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = *((_QWORD *)v2 + 7);
        v15 = 8 * v28;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    *((_QWORD *)v2 + (v28 >> 6) + 8) |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v34) = v25;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v34) = v19;
    v35 = *((_QWORD *)v2 + 2);
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v37;
    v38 = v25;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v43)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D20BC(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v25);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630((uint64_t *)&unk_100851CD0);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

_QWORD *sub_10064F058(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (_QWORD *)sub_1002B1858((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v46 = (id)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CF0CC(a1, 0, 1, 0, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert, &qword_100851E90, &qword_10083B680);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v42 = v10;
    else
      v42 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v45 = v10 & 0xC000000000000001;
  v2 = _swiftEmptyDictionarySingleton;
  v13 = 4;
  v44 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v45)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v46 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v46);
    v21 = v46;
    if (!v20)
    {
      v40 = v46;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v41);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v22 = v20;
    v23 = v46;
    v24 = sub_1005CDB68(v22, (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert, 0xD000000000000016, (void *)0x8000000100709CF0);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    swift_isUniquelyReferenced_nonNull_native(v2);
    v27 = v26;
    v46 = v2;
    v29 = sub_1002C672C(v25);
    v30 = v2[2];
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_32;
    v10 = v28;
    if (v2[3] < v32)
      break;
    if ((v27 & 1) != 0)
    {
      v2 = v46;
      if ((v28 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002DAC74();
      v2 = v46;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = v2[7];
        v15 = 8 * v29;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    v2[(v29 >> 6) + 8] |= 1 << v29;
    v35 = 8 * v29;
    *(_QWORD *)(v2[6] + v35) = v25;
    *(_QWORD *)(v2[7] + v35) = v19;
    v36 = v2[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_33;
    v2[2] = v38;
    v39 = v25;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v44)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D5200(v32, v27);
  v33 = sub_1002C672C(v25);
  if ((v10 & 1) == (v34 & 1))
  {
    v29 = v33;
    v2 = v46;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v43 = sub_10001A630(&qword_10083B680);
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v43);
  __break(1u);
  return result;
}

_QWORD *sub_10064F434(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (_QWORD *)sub_1002B1864((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (id)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CF0CC(a1, 0, 1, 0, (uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection, &qword_1008431C0, &qword_10083B540);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = _swiftEmptyDictionarySingleton;
  v13 = 4;
  v43 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v45);
    v21 = v45;
    if (!v20)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v22 = v20;
    v23 = v45;
    v24 = sub_1005CDB68(v22, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection, 0xD000000000000014, (void *)0x8000000100709AF0);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v25);
    v29 = v2[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (v2[3] < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002DB068();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = v2[7];
        v15 = 8 * v28;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    v2[(v28 >> 6) + 8] |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(v2[6] + v34) = v25;
    *(_QWORD *)(v2[7] + v34) = v19;
    v35 = v2[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    v2[2] = v37;
    v38 = v25;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v43)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D5894(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v25);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630(&qword_10083B540);
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

_QWORD *sub_10064F810(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (_QWORD *)sub_1002B1870((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (id)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CF0CC(a1, 0, 1, 0, (uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListSection, &qword_100851870, &qword_10083B560);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = _swiftEmptyDictionarySingleton;
  v13 = 4;
  v43 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v45);
    v21 = v45;
    if (!v20)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v22 = v20;
    v23 = v45;
    v24 = sub_1005CDB68(v22, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListSection, 0xD000000000000015, (void *)0x8000000100709BB0);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v25);
    v29 = v2[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (v2[3] < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002DB074();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = v2[7];
        v15 = 8 * v28;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    v2[(v28 >> 6) + 8] |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(v2[6] + v34) = v25;
    *(_QWORD *)(v2[7] + v34) = v19;
    v35 = v2[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    v2[2] = v37;
    v38 = v25;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v43)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D58A0(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v25);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630(&qword_10083B560);
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

_QWORD *sub_10064FBEC(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (_QWORD *)sub_1002B187C((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (id)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CF0CC(a1, 0, 1, 0, (uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListSection, &qword_1008518C0, (uint64_t *)&unk_100843A40);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = _swiftEmptyDictionarySingleton;
  v13 = 4;
  v43 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v45);
    v21 = v45;
    if (!v20)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v22 = v20;
    v23 = v45;
    v24 = sub_1005CDB68(v22, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListSection, 0xD000000000000010, (void *)0x8000000100709BD0);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v25);
    v29 = v2[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (v2[3] < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002DB080();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = v2[7];
        v15 = 8 * v28;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    v2[(v28 >> 6) + 8] |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(v2[6] + v34) = v25;
    *(_QWORD *)(v2[7] + v34) = v19;
    v35 = v2[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    v2[2] = v37;
    v38 = v25;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v43)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D58AC(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v25);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630((uint64_t *)&unk_100843A40);
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

_QWORD *sub_10064FFC8(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (_QWORD *)sub_1002B1888((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (id)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CF0CC(a1, 0, 1, 0, (uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, &qword_100851900, &qword_10083B578);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v2 = _swiftEmptyDictionarySingleton;
  v43 = v10 & 0xC000000000000001;
  v13 = 4;
  while (1)
  {
    v15 = v13 - 4;
    if (v43)
    {
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v17 = v13 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
    }
    else
    {
      v16 = *(id *)(v10 + 8 * v13);
      v17 = v13 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v18 = v16;
    v19 = objc_msgSend(v18, "remObjectIDWithError:", &v45);
    v20 = v45;
    if (!v19)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v45;
    v23 = sub_1005CDB68(v21, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplate, 0x6D655444434D4552, (void *)0xED00006574616C70);
    if (v4)
      goto LABEL_29;
    v24 = v23;
    v44 = v17;
    v25 = v12;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v24);
    v29 = v2[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (v2[3] < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002DB08C();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = v2[7];

        *(_QWORD *)(v14 + 8 * v28) = v18;
        goto LABEL_9;
      }
    }
LABEL_24:
    v2[(v28 >> 6) + 8] |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(v2[6] + v34) = v24;
    *(_QWORD *)(v2[7] + v34) = v18;
    v35 = v2[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    v2[2] = v37;
    v38 = v24;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v12 = v25;
    v10 = v4;
    v4 = 0;
    if (v44 == v25)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D58B8(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v24);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630(&qword_10083B578);
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

objc_class *sub_1006503AC(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  objc_class *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  objc_class *v21;
  void *v22;
  objc_class *v23;
  void *v24;
  void *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  objc_class *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  objc_class *v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B1894((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v45, (unint64_t *)&unk_100840000, off_1007D6720, (uint64_t *)&unk_100851970, (uint64_t *)&unk_100843B70);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v13 = 4;
  v43 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v45);
    v21 = v45;
    if (!v20)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v22 = v20;
    v23 = v45;
    v24 = sub_1005CCBAC(v22, (unint64_t *)&unk_100840000, off_1007D6720);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v25);
    v29 = *((_QWORD *)v2 + 2);
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (*((_QWORD *)v2 + 3) < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002DB098();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = *((_QWORD *)v2 + 7);
        v15 = 8 * v28;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    *((_QWORD *)v2 + (v28 >> 6) + 8) |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v34) = v25;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v34) = v19;
    v35 = *((_QWORD *)v2 + 2);
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v37;
    v38 = v25;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v43)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D58C4(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v25);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630((uint64_t *)&unk_100843B70);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

_QWORD *sub_100650780(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (_QWORD *)sub_1002B18A0((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (id)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CF0CC(a1, 0, 1, 0, (uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder, &qword_1008519F0, &qword_10083B5A8);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = _swiftEmptyDictionarySingleton;
  v13 = 4;
  v43 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v45);
    v21 = v45;
    if (!v20)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v22 = v20;
    v23 = v45;
    v24 = sub_1005CDB68(v22, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder, 0xD000000000000012, (void *)0x80000001006FA060);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v25);
    v29 = v2[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (v2[3] < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002DB0A4();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = v2[7];
        v15 = 8 * v28;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    v2[(v28 >> 6) + 8] |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(v2[6] + v34) = v25;
    *(_QWORD *)(v2[7] + v34) = v19;
    v35 = v2[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    v2[2] = v37;
    v38 = v25;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v43)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D58D0(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v25);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630(&qword_10083B5A8);
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

objc_class *sub_100650B5C(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  objc_class *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  id v39;
  objc_class *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  objc_class *v46;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B18AC((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v46 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v46, (unint64_t *)&qword_10083AE90, off_1007D6708, &qword_10083D590, (uint64_t *)&unk_100843C70);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_32:
    if (v10 < 0)
      v42 = v10;
    else
      v42 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_36:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_36;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v13 = 4;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_29;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    v46 = 0;
    v45 = v17;
    v19 = objc_msgSend(v45, "remObjectIDWithError:", &v46);
    v20 = v46;
    if (!v19)
    {
      v40 = v46;
      _convertNSErrorToError(_:)(v20);

      swift_willThrow(v41);
LABEL_27:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v21 = v19;
    v22 = v46;
    v23 = sub_1005CBC20(v21);
    if (v4)
      goto LABEL_27;
    v24 = v23;
    v25 = v13;
    v26 = v12;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v46 = v2;
    v10 = sub_1002C672C(v24);
    v29 = *((_QWORD *)v2 + 2);
    v30 = (v28 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_30;
    v32 = v28;
    if (*((_QWORD *)v2 + 3) < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1002DB0B0();
LABEL_23:
    v12 = v26;
    v2 = v46;
    if ((v32 & 1) != 0)
    {
      v14 = *((_QWORD *)v46 + 7);
      v15 = 8 * v10;

      *(_QWORD *)(v14 + v15) = v45;
    }
    else
    {
      *((_QWORD *)v46 + ((unint64_t)v10 >> 6) + 8) |= 1 << v10;
      v35 = 8 * v10;
      *(_QWORD *)(*((_QWORD *)v2 + 6) + v35) = v24;
      *(_QWORD *)(*((_QWORD *)v2 + 7) + v35) = v45;
      v36 = *((_QWORD *)v2 + 2);
      v37 = __OFADD__(v36, 1);
      v38 = v36 + 1;
      if (v37)
        goto LABEL_31;
      *((_QWORD *)v2 + 2) = v38;
      v39 = v24;
    }

    swift_bridgeObjectRelease();
    v13 = v25 + 1;
    v10 = v4;
    v4 = 0;
    if (v18 == v12)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D58DC(v31, isUniquelyReferenced_nonNull_native);
  v33 = sub_1002C672C(v24);
  if ((v32 & 1) == (v34 & 1))
  {
    v10 = v33;
    goto LABEL_23;
  }
  v43 = sub_10001A630((uint64_t *)&unk_100843C70);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v43);
  __break(1u);
  return result;
}

objc_class *sub_100650F28(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  objc_class *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  objc_class *v21;
  void *v22;
  objc_class *v23;
  void *v24;
  void *v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  objc_class *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  objc_class *v45;

  v4 = v3;
  if (!*(_QWORD *)(a1 + 16))
    return (objc_class *)sub_1002B18B8((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a2;
  v45 = (objc_class *)v8;
  specialized Array._endMutation()(v8);
  v9 = a2;
  v10 = (uint64_t)sub_1005CEB1C(a1, 0, 1, 0, v45, (unint64_t *)&qword_100839900, off_1007D66E0, &qword_10083FF50, (uint64_t *)&unk_100843E20);
  swift_bridgeObjectRelease();
  if (v3)
    return v2;
  if ((unint64_t)v10 >> 62)
  {
LABEL_34:
    if (v10 < 0)
      v41 = v10;
    else
      v41 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_7;
LABEL_38:
    swift_bridgeObjectRelease();
    return (objc_class *)_swiftEmptyDictionarySingleton;
  }
  v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_38;
LABEL_7:
  v44 = v10 & 0xC000000000000001;
  v2 = (objc_class *)_swiftEmptyDictionarySingleton;
  v13 = 4;
  v43 = v12;
  while (1)
  {
    v16 = v13 - 4;
    if (v44)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v10);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(id *)(v10 + 8 * v13);
      v18 = v13 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v45 = 0;
    v19 = v17;
    v20 = objc_msgSend(v19, "remObjectIDWithError:", &v45);
    v21 = v45;
    if (!v20)
    {
      v39 = v45;
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v40);
LABEL_29:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
    v22 = v20;
    v23 = v45;
    v24 = sub_1005CCBAC(v22, (unint64_t *)&qword_100839900, off_1007D66E0);
    if (v4)
      goto LABEL_29;
    v25 = v24;
    v4 = v10;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v45 = v2;
    v28 = sub_1002C672C(v25);
    v29 = *((_QWORD *)v2 + 2);
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_32;
    v10 = v27;
    if (*((_QWORD *)v2 + 3) < v31)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = v45;
      if ((v27 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      sub_1002DB0BC();
      v2 = v45;
      if ((v10 & 1) != 0)
      {
LABEL_8:
        v14 = *((_QWORD *)v2 + 7);
        v15 = 8 * v28;

        *(_QWORD *)(v14 + v15) = v19;
        goto LABEL_9;
      }
    }
LABEL_24:
    *((_QWORD *)v2 + (v28 >> 6) + 8) |= 1 << v28;
    v34 = 8 * v28;
    *(_QWORD *)(*((_QWORD *)v2 + 6) + v34) = v25;
    *(_QWORD *)(*((_QWORD *)v2 + 7) + v34) = v19;
    v35 = *((_QWORD *)v2 + 2);
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_33;
    *((_QWORD *)v2 + 2) = v37;
    v38 = v25;
LABEL_9:

    swift_bridgeObjectRelease();
    ++v13;
    v10 = v4;
    v4 = 0;
    if (v18 == v43)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  sub_1002D58E8(v31, isUniquelyReferenced_nonNull_native);
  v32 = sub_1002C672C(v25);
  if ((v10 & 1) == (v33 & 1))
  {
    v28 = v32;
    v2 = v45;
    if ((v10 & 1) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
  v42 = sub_10001A630((uint64_t *)&unk_100843E20);
  result = (objc_class *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v42);
  __break(1u);
  return result;
}

void sub_1006512FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint32_t *p_ivar_base_size;
  void *ObjCClassFromMetadata;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  void *v40;
  NSArray v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;

  v5 = v4;
  v58 = a4;
  v67 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = &_swiftEmptyDictionarySingleton;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v12; ++i)
    {
      v14 = *(id *)(a1 + 8 * i + 32);
      sub_1006518F4((uint64_t *)&v69, v14);
      if (v4)
      {
        v56 = v69;
        swift_bridgeObjectRelease(a1);

        swift_bridgeObjectRelease(v56);
        return;
      }

    }
    swift_bridgeObjectRelease(a1);
    v15 = v69;
  }
  else
  {
    v15 = &_swiftEmptyDictionarySingleton;
  }
  v69 = _swiftEmptyArrayStorage;
  v16 = objc_msgSend((id)objc_opt_self(REMCDObject), "subclassesOfREMCDObjectRepresentingRootCoreDataEntities");
  v17 = sub_10001A630(&qword_100847A00);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  v65 = *(_QWORD *)(v18 + 16);
  if (!v65)
  {
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v18);
    return;
  }
  v19 = 0;
  v57 = v18;
  v64 = v18 + 32;
  if ((a3 & 1) != 0)
    v20 = 0;
  else
    v20 = a2;
  v61 = v20;
  p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
  v59 = v15;
  while (1)
  {
    v66 = v19;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(*(_QWORD *)(v64 + 8 * v19));
    if ((objc_msgSend(ObjCClassFromMetadata, "respondsToSelector:", *((_QWORD *)p_ivar_base_size + 478)) & 1) == 0)
      break;
    v23 = objc_msgSend(ObjCClassFromMetadata, *((SEL *)p_ivar_base_size + 478));
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    if (v15[2])
    {
      v27 = sub_10001A6DC(v24, v26);
      if ((v28 & 1) != 0)
      {
        v62 = v5;
        v29 = *(_QWORD *)(v15[7] + 8 * v27);
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRelease(v26);
        v30 = *(_QWORD *)(v29 + 16);
        if (v30)
        {
          v68 = (unint64_t)_swiftEmptyArrayStorage;
          sub_1001C1BE4(0, v30, 0);
          v31 = 0;
          v32 = v68;
          do
          {
            v33 = *(id *)(v29 + 8 * v31 + 32);
            v34 = objc_msgSend(v33, "uuid");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

            v68 = v32;
            v36 = *(_QWORD *)(v32 + 16);
            v35 = *(_QWORD *)(v32 + 24);
            if (v36 >= v35 >> 1)
            {
              sub_1001C1BE4(v35 > 1, v36 + 1, 1);
              v32 = v68;
            }
            ++v31;
            *(_QWORD *)(v32 + 16) = v36 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v32+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v36, v11, v67);
          }
          while (v30 != v31);
          swift_bridgeObjectRelease(v29);
          v37 = sub_10011EF34(v32);
          swift_release(v32);
          KeyPath = swift_getKeyPath(&unk_1006C4900);
          v39 = sub_1002EBC2C(v37);
          swift_bridgeObjectRelease(v37);
          v40 = (void *)sub_10034297C(KeyPath, v39, &qword_1008517D8, (uint64_t *)&unk_100844290);
          swift_release(KeyPath);
          if (v61 < 0)
            goto LABEL_53;
          v15 = v59;
          if (v58)
            v41.super.isa = Array._bridgeToObjectiveC()().super.isa;
          else
            v41.super.isa = 0;
          v60 = v40;
          v42 = objc_msgSend(ObjCClassFromMetadata, "ic_resultsMatchingPredicate:sortDescriptors:resultType:fetchBatchSize:propertiesToFetch:relationshipKeyPathsForPrefetching:context:", v40, 0, 0, v61, 0, v41.super.isa, v63);

          v43 = sub_10001A630((uint64_t *)&unk_100851800);
          v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, v43);

          v68 = (unint64_t)_swiftEmptyArrayStorage;
          if ((unint64_t)v44 >> 62)
          {
            if (v44 < 0)
              v55 = v44;
            else
              v55 = v44 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v44);
            v45 = _CocoaArrayWrapper.endIndex.getter(v55);
            if (!v45)
              goto LABEL_45;
LABEL_29:
            if (v45 < 1)
            {
              __break(1u);
              break;
            }
            for (j = 0; j != v45; ++j)
            {
              if ((v44 & 0xC000000000000001) != 0)
              {
                v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, v44);
              }
              else
              {
                v47 = *(_QWORD *)(v44 + 8 * j + 32);
                swift_unknownObjectRetain(v47);
              }
              v48 = objc_opt_self(REMCDObject);
              v49 = swift_dynamicCastObjCClass(v47, v48);
              if (v49)
              {
                v50 = v49;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
                v52 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v51 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v52 >= v51 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1);
                v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v50);
                specialized Array._endMutation()(v53);
              }
              else
              {
                swift_unknownObjectRelease(v47);
              }
            }
            swift_bridgeObjectRelease(v44);
            v54 = (_QWORD *)v68;
            v15 = v59;
          }
          else
          {
            v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain(v44);
            if (v45)
              goto LABEL_29;
LABEL_45:
            swift_bridgeObjectRelease(v44);
            v54 = _swiftEmptyArrayStorage;
          }
          swift_bridgeObjectRelease(v44);
          sub_1001E2950((uint64_t)v54);

        }
        else
        {
          swift_bridgeObjectRelease(v29);
        }
        v5 = v62;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(v26);
LABEL_13:
    p_ivar_base_size = &RDDataAccess.ivar_base_size;
    v19 = v66 + 1;
    if (v66 + 1 == v65)
    {
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v57);
      return;
    }
  }
  __break(1u);
LABEL_53:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
}

void sub_1006518F4(uint64_t *a1, void *a2)
{
  _QWORD *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  _QWORD *v16;
  void (*v17)(_QWORD *);
  _QWORD *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;

  v4 = sub_100501B84();
  v5 = objc_msgSend(a2, "entityName");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  if (v4[2] && (v9 = sub_10001A6DC(v6, v8), (v10 & 1) != 0))
  {
    v11 = (uint64_t *)(v4[7] + 16 * v9);
    v13 = *v11;
    v12 = v11[1];
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v4);
    if (*(_QWORD *)(*a1 + 16)
      && (swift_bridgeObjectRetain(v12),
          sub_10001A6DC(v13, v12),
          v15 = v14,
          swift_bridgeObjectRelease(v12),
          (v15 & 1) != 0))
    {
      v17 = sub_1001CFF64(&v41, v13, v12);
      if (*v16)
      {
        v18 = v16;
        v19 = a2;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
        v21 = *(_QWORD *)(*v18 + 16);
        v20 = *(_QWORD *)(*v18 + 24);
        if (v21 >= v20 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1);
        v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
        specialized Array._endMutation()(v22);
      }
      ((void (*)(uint64_t *, _QWORD))v17)(&v41, 0);
      v23 = v12;
    }
    else
    {
      v35 = sub_10001A630(&qword_10083FD00);
      v36 = swift_allocObject(v35, 40, 7);
      *(_OWORD *)(v36 + 16) = xmmword_1006A3C00;
      *(_QWORD *)(v36 + 32) = a2;
      v41 = v36;
      specialized Array._endMutation()(v36);
      v37 = v41;
      v38 = a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
      v41 = *a1;
      *a1 = 0x8000000000000000;
      sub_10028C408(v37, v13, v12, isUniquelyReferenced_nonNull_native);
      v40 = *a1;
      *a1 = v41;
      swift_bridgeObjectRelease(v12);
      v23 = v40;
    }
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v4);
    v24 = (void *)objc_opt_self(REMError);
    _StringGuts.grow(_:)(52);
    v25._object = (void *)0x8000000100709B50;
    v25._countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v25);
    v26 = a2;
    v27 = objc_msgSend(v26, "description", 0);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    v31._countAndFlagsBits = v28;
    v31._object = v30;
    String.append(_:)(v31);

    swift_bridgeObjectRelease(v30);
    v32._countAndFlagsBits = 125;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v24, "internalErrorWithDebugDescription:", v33, swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);

    swift_willThrow(v34);
  }
}

uint64_t sub_100651BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_1008516D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_1008516D0);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100651C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  unsigned __int8 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  void *v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[6];
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE v75[56];
  uint64_t v76;

  v15 = v14;
  v67 = a4;
  v68 = a8;
  v71 = a5;
  v72 = a7;
  v69 = a3;
  v70 = a6;
  v66 = a2;
  v17 = a13;
  v73 = a12;
  sub_1000184A8(a13, (uint64_t)v75);
  if (*(_QWORD *)(v13 + 32) != 3)
    goto LABEL_12;
  v64 = a11;
  v65 = a13;
  v62 = v14;
  v63 = v13;
  if (!((unint64_t)a1 >> 62))
  {
    v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v18)
      goto LABEL_4;
    goto LABEL_11;
  }
LABEL_28:
  if (a1 < 0)
    v47 = a1;
  else
    v47 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v18 = _CocoaArrayWrapper.endIndex.getter(v47);
  if (!v18)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    v17 = v65;
    v15 = v62;
    v13 = v63;
LABEL_12:
    swift_bridgeObjectRetain(a9);
    v25 = sub_1006597D0(_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, a1, a9);
    v27 = v26;
    swift_bridgeObjectRelease();
    if (!v15)
    {
      sub_100670BB0((uint64_t)v25);
      __chkstk_darwin(v40);
      v48[2] = v41;
      v48[3] = v13;
      v48[4] = a9;
      v48[5] = v17;
      v49 = v42 & 1;
      v50 = v66;
      v51 = a1;
      v52 = v68;
      v53 = v43;
      v54 = v73;
      v55 = v67;
      v56 = v70;
      v57 = v69;
      v58 = v71;
      v59 = v72;
      v60 = v27;
      v61 = v25;
      sub_10035288C(v17, (uint64_t)sub_1006710D8, (uint64_t)v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return;
  }
LABEL_4:
  v19 = 4;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, a1);
    else
      v20 = *(id *)(a1 + 8 * v19);
    v21 = v20;
    v22 = v19 - 3;
    if (__OFADD__(v19 - 4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v23 = objc_msgSend(v20, "accountTypeHost");
    v24 = objc_msgSend(v23, "isCloudKit");

    if ((v24 & 1) != 0)
      break;
    ++v19;
    if (v22 == v18)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  if (qword_1008379D0 != -1)
    swift_once(&qword_1008379D0, sub_100651BE4);
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_1008516D0);
  v29 = v73;
  swift_bridgeObjectRetain(v73);
  v30 = v65;
  sub_100671124(v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
  swift_bridgeObjectRetain(v73);
  v31 = sub_100671124(v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v76 = v35;
    *(_DWORD *)v34 = 136446466;
    if (v29)
      v36 = v64;
    else
      v36 = 7104878;
    if (v29)
      v37 = v29;
    else
      v37 = 0xE300000000000000;
    swift_bridgeObjectRetain(v29);
    v74 = sub_10001A820(v36, v37, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    swift_bridgeObjectRelease_n(v29, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2082;
    sub_1000181B8();
    v74 = sub_10001A820(v38, v39, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    swift_bridgeObjectRelease();
    sub_100671124(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    sub_100671124(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDDatabaseSaver: Unexpected use of REMStoreModeEventKitSync to edit/insert/remove CloudKit account(s) {author: %{public}s, clientIdentity: %{public}s}", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v73, 2);
    sub_100671124(v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    sub_100671124(v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
  }

  v44 = (void *)objc_opt_self(REMError);
  v45 = String._bridgeToObjectiveC()();
  objc_msgSend(v44, "internalErrorWithDebugDescription:", v45);

  swift_willThrow(v46);
}

void sub_100652168(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v70;
  double v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  unint64_t v85;
  id v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  id v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  void *v126;
  uint64_t v127;
  NSString v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSString v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  os_log_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[6];
  NSObject *v163;
  _QWORD *v164;
  uint64_t v165;
  char *v166;
  __int128 v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  os_log_t v178;
  uint64_t ObjCClassFromMetadata;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;

  v26 = *(void **)(a3 + 24);
  sub_1004A29D8(a2, a1, v26);
  if (v18)
    return;
  ObjCClassFromMetadata = a7;
  v170 = 0;
  v162[5] = a3;
  v27 = *(_QWORD *)(a3 + 32);
  v28 = type metadata accessor for CDIngestionCoordinator();
  v29 = swift_allocObject(v28, 152, 7);
  swift_bridgeObjectRetain(a4);
  v30 = v26;
  sub_100671124((uint64_t)a5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
  v171 = a1;
  v174 = a5;
  sub_100658FC0(a4, v30, v171, (uint64_t)a5, v27, a6 & 1, v29);
  v32 = *(_BYTE *)(v31 + 16);
  v172 = v31;
  if ((v32 & 1) != 0)
  {
    v33 = v31;
    v34 = 1;
    goto LABEL_38;
  }
  v33 = ObjCClassFromMetadata;
  if ((unint64_t)ObjCClassFromMetadata >> 62)
    goto LABEL_27;
  v35 = *(_QWORD *)((ObjCClassFromMetadata & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(ObjCClassFromMetadata);
  if (v35)
    goto LABEL_6;
LABEL_13:
  while (1)
  {
    swift_bridgeObjectRelease();
    if ((unint64_t)a8 >> 62)
      break;
    v41 = *(_QWORD *)((a8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a8);
    v33 = v172;
    if (!v41)
      goto LABEL_36;
LABEL_15:
    v42 = 4;
    while (1)
    {
      v43 = (a8 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42 - 4, a8)
          : *(id *)(a8 + 8 * v42);
      v44 = v43;
      v45 = v42 - 3;
      if (__OFADD__(v42 - 4, 1))
        break;
      v34 = objc_msgSend(v43, "listsDADisplayOrderChanged");

      if ((v34 & 1) == 0)
      {
        ++v42;
        if (v45 != v41)
          continue;
      }
      goto LABEL_24;
    }
    __break(1u);
    while (1)
    {
      __break(1u);
LABEL_27:
      v46 = v33 < 0 ? v33 : v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v33);
      v35 = _CocoaArrayWrapper.endIndex.getter(v46);
      if (!v35)
        break;
LABEL_6:
      v36 = 4;
      while (1)
      {
        v37 = (v33 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36 - 4, v33)
            : *(id *)(v33 + 8 * v36);
        v38 = v37;
        v39 = v36 - 3;
        if (__OFADD__(v36 - 4, 1))
          break;
        v40 = objc_msgSend(v37, "remindersICSDisplayOrderChanged");

        if ((v40 & 1) != 0)
        {
          v34 = 1;
LABEL_24:
          v33 = v172;
          goto LABEL_37;
        }
        ++v36;
        if (v39 == v35)
          goto LABEL_13;
      }
    }
  }
  if (a8 < 0)
    v47 = a8;
  else
    v47 = a8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a8);
  v41 = _CocoaArrayWrapper.endIndex.getter(v47);
  v33 = v172;
  if (v41)
    goto LABEL_15;
LABEL_36:
  v34 = 0;
LABEL_37:
  swift_bridgeObjectRelease();
LABEL_38:
  v175 = a11;
  *(_BYTE *)(v33 + 16) = v34;
  v48 = type metadata accessor for REMAccountStorageCDIngestor();
  v49 = swift_allocObject(v48, 16, 7);
  sub_1005DA460(a8, v49);
  swift_release(v49);
  v50 = type metadata accessor for REMListStorageCDIngestor();
  v51 = swift_allocObject(v50, 16, 7);
  sub_1005DAC68(ObjCClassFromMetadata, v51);
  swift_release(v51);
  v182 = (uint64_t)_swiftEmptyArrayStorage;
  v183 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a9 >> 62)
  {
    if (a9 < 0)
      v147 = a9;
    else
      v147 = a9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a9);
    v52 = _CocoaArrayWrapper.endIndex.getter(v147);
  }
  else
  {
    v52 = *(_QWORD *)((a9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a9);
  }
  v173 = a10;
  if (!v52)
  {
    swift_bridgeObjectRelease();
    v96 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_72:
    v97 = v170;
    v98 = v175;
    if ((unint64_t)v96 >> 62)
    {
      if (v96 < 0)
        v148 = v96;
      else
        v148 = v96 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v96);
      v149 = _CocoaArrayWrapper.endIndex.getter(v148);
      swift_bridgeObjectRelease();
      if (!v149)
      {
LABEL_75:
        swift_bridgeObjectRelease();
        v101 = v182;
        if ((unint64_t)v182 >> 62)
        {
          if (v182 < 0)
            v150 = v182;
          else
            v150 = v182 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v182);
          v151 = _CocoaArrayWrapper.endIndex.getter(v150);
          swift_bridgeObjectRelease();
          v102 = a12;
          if (!v151)
          {
LABEL_78:
            swift_bridgeObjectRelease();
            if ((unint64_t)v102 >> 62)
            {
              if (v102 < 0)
                v152 = v102;
              else
                v152 = v102 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v102);
              v153 = _CocoaArrayWrapper.endIndex.getter(v152);
              swift_bridgeObjectRelease();
              v107 = a13;
              if (!v153)
              {
LABEL_81:
                if ((unint64_t)v107 >> 62)
                {
                  if (v107 < 0)
                    v154 = v107;
                  else
                    v154 = v107 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(v107);
                  v155 = _CocoaArrayWrapper.endIndex.getter(v154);
                  swift_bridgeObjectRelease();
                  v110 = a14;
                  if (!v155)
                  {
LABEL_84:
                    if ((unint64_t)v110 >> 62)
                    {
                      if (v110 < 0)
                        v156 = v110;
                      else
                        v156 = v110 & 0xFFFFFFFFFFFFFF8;
                      swift_bridgeObjectRetain(v110);
                      v157 = _CocoaArrayWrapper.endIndex.getter(v156);
                      swift_bridgeObjectRelease();
                      v116 = a15;
                      if (!v157)
                      {
LABEL_87:
                        if ((unint64_t)v116 >> 62)
                        {
                          if (v116 < 0)
                            v158 = v116;
                          else
                            v158 = v116 & 0xFFFFFFFFFFFFFF8;
                          swift_bridgeObjectRetain(v116);
                          v159 = _CocoaArrayWrapper.endIndex.getter(v158);
                          swift_bridgeObjectRelease();
                          v119 = a16;
                          if (!v159)
                          {
LABEL_90:
                            if ((unint64_t)v119 >> 62)
                            {
                              if (v119 < 0)
                                v160 = v119;
                              else
                                v160 = v119 & 0xFFFFFFFFFFFFFF8;
                              swift_bridgeObjectRetain(v119);
                              v161 = _CocoaArrayWrapper.endIndex.getter(v160);
                              swift_bridgeObjectRelease();
                              if (!v161)
                              {
LABEL_93:
                                v124 = static os_log_type_t.info.getter(v106);
                                measureTimeElapsed(_:level:block:)(0xD00000000000002BLL, 0x80000001007098F0, v124, sub_100671164, v33);
                                if (v97)
                                {
                                  swift_release(v33);
                                  return;
                                }
                                if (v98)
                                {
                                  v52 = v98;
                                }
                                else
                                {
                                  sub_1000181B8();
                                  v52 = 0xE300000000000000;
                                }
                                v125 = objc_msgSend(v171, "transactionAuthor", swift_bridgeObjectRetain(v98).n128_f64[0]);
                                if (v125)
                                {
                                  v126 = v125;
                                  static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
                                  a8 = v127;

                                }
                                else
                                {
                                  a8 = 0;
                                }
                                v128 = String._bridgeToObjectiveC()();
                                objc_msgSend(v171, "setTransactionAuthor:", v128, swift_bridgeObjectRelease().n128_f64[0]);

                                __chkstk_darwin(v129);
                                v162[2] = v171;
                                v131 = static os_log_type_t.info.getter(v130);
                                measureTimeElapsed(_:level:block:)(0xD00000000000002CLL, 0x8000000100709920, v131, sub_100671178, v162);
                                sub_100671190(a17, v174);
                                v133 = v173;
                                sub_100653280(a17, v173, v98);
                                sub_100653B64(a18, v133, v98);
                                sub_100331CAC();
                                if (qword_1008379D0 == -1)
                                  goto LABEL_104;
                                goto LABEL_154;
                              }
                            }
                            else if (!*(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10))
                            {
                              goto LABEL_93;
                            }
                            v122 = type metadata accessor for REMTemplateSectionStorageCDIngestor();
                            v123 = swift_allocObject(v122, 16, 7);
                            sub_1005DE460(v119, v123);
                            v106 = swift_release(v123);
                            goto LABEL_93;
                          }
                        }
                        else
                        {
                          v119 = a16;
                          if (!*(_QWORD *)((v116 & 0xFFFFFFFFFFFFF8) + 0x10))
                            goto LABEL_90;
                        }
                        v120 = type metadata accessor for REMSmartListSectionStorageCDIngestor();
                        v121 = swift_allocObject(v120, 16, 7);
                        sub_1005DDC68(v116, v121);
                        v106 = swift_release(v121);
                        goto LABEL_90;
                      }
                    }
                    else
                    {
                      v116 = a15;
                      if (!*(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10))
                        goto LABEL_87;
                    }
                    v117 = type metadata accessor for REMListSectionStorageCDIngestor();
                    v118 = swift_allocObject(v117, 16, 7);
                    sub_1005DD470(v110, v118);
                    v106 = swift_release(v118);
                    goto LABEL_87;
                  }
                }
                else
                {
                  v110 = a14;
                  if (!*(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_84;
                }
                v111 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
                objc_msgSend(v111, "templatePublicLinkTTL");
                v113 = v112;

                v114 = type metadata accessor for REMTemplateStorageCDIngestor();
                v115 = swift_allocObject(v114, 24, 7);
                *(_QWORD *)(v115 + 16) = v113;
                sub_1005DCC78(v107, v115);
                v106 = swift_release(v115);
                goto LABEL_84;
              }
            }
            else
            {
              v107 = a13;
              if (!*(_QWORD *)((v102 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_81;
            }
            v108 = type metadata accessor for REMSmartListStorageCDIngestor();
            v109 = swift_allocObject(v108, 16, 7);
            sub_1005DC470(v102, v109);
            v106 = swift_release(v109);
            goto LABEL_81;
          }
        }
        else
        {
          v102 = a12;
          if (!*(_QWORD *)((v182 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_78;
        }
        v103 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
        v104 = type metadata accessor for REMSavedReminderStorageCDIngestor();
        v105 = swift_allocObject(v104, 24, 7);
        *(_QWORD *)(v105 + 16) = v103;
        sub_1005DBC78(v101, v105);
        swift_release(v105);
        goto LABEL_78;
      }
    }
    else if (!*(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_75;
    }
    v99 = type metadata accessor for REMReminderStorageCDIngestor();
    v100 = swift_allocObject(v99, 16, 7);
    sub_1005DB470(v96, v100);
    swift_release(v100);
    goto LABEL_75;
  }
  v53 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v53);
  if (v52 >= 1)
  {
    v55 = 0;
    v56 = 7104878;
    if (v175)
      v56 = v173;
    v169 = v56;
    v57 = 0xE300000000000000;
    if (v175)
      v57 = v175;
    v168 = v57;
    v177 = (unint64_t)"com.apple.remindd.";
    v178 = (os_log_t)(a9 & 0xC000000000000001);
    v176 = 0x80000001006FA060;
    *(_QWORD *)&v54 = 136446722;
    v167 = v54;
    v166 = (char *)&type metadata for Any + 8;
    while (1)
    {
      v58 = v178
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, a9)
          : *(id *)(a9 + 8 * v55 + 32);
      v59 = v58;
      v60 = objc_msgSend(v58, "objectID");
      v61 = objc_msgSend(v60, "entityName");

      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      v64 = v63;

      v65 = objc_msgSend((id)ObjCClassFromMetadata, "cdEntityName");
      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v68 = v67;

      if (v62 == v66 && v64 == v68)
        break;
      v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v64, v66, v68, 0);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v71 = swift_bridgeObjectRelease().n128_u64[0];
      if ((v70 & 1) != 0)
        goto LABEL_59;
      v72 = objc_msgSend(v59, "objectID", v71);
      v73 = objc_msgSend(v72, "entityName");

      v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
      v76 = v75;

      if (v74 == 0xD000000000000012 && v76 == v176)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v74, v76, 0xD000000000000012, v177 | 0x8000000000000000, 0);
        swift_bridgeObjectRelease();
        if ((v81 & 1) == 0)
        {
          if (qword_1008379D0 != -1)
            swift_once(&qword_1008379D0, sub_100651BE4);
          v82 = type metadata accessor for Logger(0);
          sub_10001AAA8(v82, (uint64_t)qword_1008516D0);
          v83 = (uint64_t)v174;
          sub_100671124((uint64_t)v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          v84 = v59;
          v85 = v175;
          swift_bridgeObjectRetain(v175);
          sub_100671124((uint64_t)v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
          v86 = v84;
          swift_bridgeObjectRetain(v175);
          v88 = Logger.logObject.getter(v87);
          v89 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v88, v89))
          {
            v90 = swift_slowAlloc(32, -1);
            v164 = (_QWORD *)swift_slowAlloc(8, -1);
            v165 = swift_slowAlloc(64, -1);
            v181 = v165;
            *(_DWORD *)v90 = v167;
            swift_bridgeObjectRetain(v85);
            v163 = v88;
            *(_QWORD *)(v90 + 4) = sub_10001A820(v169, v168, &v181);
            swift_bridgeObjectRelease_n(v85, 2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v90 + 12) = 2082;
            sub_1000181B8();
            *(_QWORD *)(v90 + 14) = sub_10001A820(v91, v92, &v181);
            swift_bridgeObjectRelease();
            sub_100671124(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
            sub_100671124(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
            *(_WORD *)(v90 + 22) = 2114;
            v93 = objc_msgSend(v86, "objectID");
            *(_QWORD *)(v90 + 24) = v93;
            v94 = v164;
            *v164 = v93;

            _os_log_impl((void *)&_mh_execute_header, v163, v89, "RDDatabaseSaver: Attempt to ingest REMReminderStorage with unexpected '\\REMReminderStorage.objectID.entityName' {author: %{public}s, clientIdentity: %{public}s, reminderStorage.objectID: %{public}@}", (uint8_t *)v90, 0x20u);
            v95 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v94, 1, v95);
            swift_slowDealloc(v94, -1, -1);
            swift_arrayDestroy(v165, 2, v166);
            swift_slowDealloc(v165, -1, -1);
            swift_slowDealloc(v90, -1, -1);

          }
          else
          {
            swift_bridgeObjectRelease_n(v175, 2);

            sub_100671124((uint64_t)v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
            sub_100671124((uint64_t)v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);

          }
          goto LABEL_61;
        }
      }
      v77 = v59;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v77);
      v79 = *(_QWORD *)((v182 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v78 = *(_QWORD *)((v182 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v79 >= v78 >> 1)
LABEL_65:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1);
LABEL_60:
      v80 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, v77);
      specialized Array._endMutation()(v80);

LABEL_61:
      if (v52 == ++v55)
      {
        swift_bridgeObjectRelease();
        v96 = v183;
        v33 = v172;
        goto LABEL_72;
      }
    }
    swift_bridgeObjectRelease_n(v64, 2);
LABEL_59:
    v77 = v59;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v77);
    v79 = *(_QWORD *)((v183 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v78 = *(_QWORD *)((v183 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v79 >= v78 >> 1)
      goto LABEL_65;
    goto LABEL_60;
  }
  __break(1u);
LABEL_154:
  swift_once(&qword_1008379D0, sub_100651BE4);
LABEL_104:
  v134 = type metadata accessor for Logger(0);
  sub_10001AAA8(v134, (uint64_t)qword_1008516D0);
  v135 = (uint64_t)v174;
  sub_100671124((uint64_t)v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
  v136 = v175;
  swift_bridgeObjectRetain(v175);
  sub_100671124(v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
  swift_bridgeObjectRetain(v136);
  v138 = Logger.logObject.getter(v137);
  v139 = static os_log_type_t.default.getter(v138);
  v140 = v139;
  if (os_log_type_enabled(v138, v139))
  {
    v141 = swift_slowAlloc(22, -1);
    ObjCClassFromMetadata = swift_slowAlloc(64, -1);
    v181 = ObjCClassFromMetadata;
    *(_DWORD *)v141 = 136446466;
    if (v136)
      v142 = v173;
    else
      v142 = 7104878;
    v178 = v138;
    swift_bridgeObjectRetain(v136);
    v180 = sub_10001A820(v142, v52, &v181);
    LODWORD(v177) = v140;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
    swift_bridgeObjectRelease_n(v136, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v141 + 12) = 2082;
    sub_1000181B8();
    v180 = sub_10001A820(v143, v144, &v181);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181);
    swift_bridgeObjectRelease();
    sub_100671124(v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    sub_100671124(v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    v145 = v178;
    _os_log_impl((void *)&_mh_execute_header, v178, (os_log_type_t)v177, "SAVE END {request.author: %{public}s, clientIdentity: %{public}s}", (uint8_t *)v141, 0x16u);
    v146 = ObjCClassFromMetadata;
    swift_arrayDestroy(ObjCClassFromMetadata, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v146, -1, -1);
    swift_slowDealloc(v141, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(v136, 2);
    sub_100671124(v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    sub_100671124(v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);

  }
  if (a8)
    v132 = String._bridgeToObjectiveC()();
  else
    v132 = 0;
  objc_msgSend(v171, "setTransactionAuthor:", v132);
  swift_bridgeObjectRelease();
  swift_release(v172);

}

id sub_1006531E0(void *a1)
{
  unsigned int v1;
  id v2;
  id v4;
  uint64_t v5;
  id v6;

  v6 = 0;
  v1 = objc_msgSend(a1, "save:", &v6);
  v2 = v6;
  if (v1)
    return v6;
  v4 = v6;
  _convertNSErrorToError(_:)(v2);

  return (id)swift_willThrow(v5);
}

double sub_100653280(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  Class isa;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v25 = a1;
    else
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v26 = _CocoaArrayWrapper.endIndex.getter(v25);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    if (!v26)
      return result;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v8 = (void *)sub_1006534D0(a1);
  if (v8)
  {
    v9 = v8;
    sub_100302300(v8);

  }
  v10 = (uint64_t)sub_10065398C(a1);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 >= 0)
      v10 &= 0xFFFFFFFFFFFFFF8uLL;
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v11)
    sub_100303548(0);
  v12 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v12, &v27);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSManagedObjectContextTransactionAuthorKey);
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  v15 = 0x68747561206F6E28;
  if (a3)
    v15 = a2;
  v16 = 0xEB0000000029726FLL;
  if (a3)
    v16 = a3;
  *(_QWORD *)(inited + 48) = v15;
  *(_QWORD *)(inited + 56) = v16;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidDisableAccountsNotificationAccountStoragesKey"));
  *(_QWORD *)(inited + 88) = v17;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  sub_10011FFD0(a1);
  v19 = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 120) = sub_10001A630(&qword_100847A70);
  *(_QWORD *)(inited + 96) = v19;
  v20 = sub_10016E7E4(inited);
  v21 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v22 = *(_QWORD *)(v4 + 24);
  sub_1003B21A4(v20);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v21, "postNotificationName:object:userInfo:", CFSTR("RDStoreControllerDidDisableAccountsNotification"), v22, isa, swift_bridgeObjectRelease().n128_f64[0]);

  return result;
}

uint64_t sub_1006534D0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  id v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  _QWORD *v39;
  os_log_type_t v40;
  unint64_t v41;
  uint8_t *v42;
  _QWORD *v43;
  _QWORD *v44;

  v1 = a1;
  v44 = _swiftEmptyArrayStorage;
  v2 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v3)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    v3 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_19:
    v13 = v3 < 0 || (v3 & 0x4000000000000000) != 0;
    if (v13)
    {
      swift_bridgeObjectRetain(v3);
      v37 = _CocoaArrayWrapper.endIndex.getter(v36);
      swift_release(v3);
      if (v37 <= 1)
        goto LABEL_42;
    }
    else if (*(uint64_t *)(v3 + 16) <= 1)
    {
      goto LABEL_42;
    }
    if (qword_1008379D0 != -1)
      goto LABEL_56;
    while (1)
    {
      v14 = type metadata accessor for Logger(0);
      sub_10001AAA8(v14, (uint64_t)qword_1008516D0);
      swift_bridgeObjectRetain_n(v1, 2);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v40 = v17;
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = (_QWORD *)swift_slowAlloc(32, -1);
        v44 = v39;
        v42 = v18;
        *(_DWORD *)v18 = 136446210;
        if (v2)
        {
          if (v1 < 0)
            v20 = v1;
          else
            v20 = v1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v1);
          v19 = _CocoaArrayWrapper.endIndex.getter(v20);
          swift_bridgeObjectRelease();
        }
        else
        {
          v19 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v21 = _swiftEmptyArrayStorage;
        if (v19)
        {
          v38 = v16;
          v43 = _swiftEmptyArrayStorage;
          result = specialized ContiguousArray.reserveCapacity(_:)(v19);
          if (v19 < 0)
          {
            __break(1u);
            return result;
          }
          v23 = 0;
          do
          {
            if ((v1 & 0xC000000000000001) != 0)
              v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v1);
            else
              v24 = *(id *)(v1 + 8 * v23 + 32);
            v25 = v24;
            ++v23;
            v26 = objc_msgSend(v24, "remObjectID", v38);

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
            v28 = v43[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
            v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
            specialized ContiguousArray._endMutation()(v29);
          }
          while (v19 != v23);
          v21 = v43;
          v16 = v38;
        }
        v2 = (unint64_t)v42;
        v30 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        v31 = Array.description.getter(v21, v30);
        v33 = v32;
        swift_bridgeObjectRelease();
        v43 = (_QWORD *)sub_10001A820(v31, v33, (uint64_t *)&v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
        swift_bridgeObjectRelease_n(v1, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v40, "RDDatabaseSaver: Found more than 1 primary cloudkit account storage in array {accountIDs: %{public}s}", v42, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v42, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v1, 2);
      }
LABEL_42:
      if (v13)
      {
        swift_bridgeObjectRetain(v3);
        v1 = _CocoaArrayWrapper.endIndex.getter(v34);
        swift_release(v3);
        if (!v1)
          goto LABEL_50;
      }
      else
      {
        v1 = *(_QWORD *)(v3 + 16);
        if (!v1)
          goto LABEL_50;
      }
      if ((v3 & 0xC000000000000001) != 0)
        goto LABEL_54;
      if (*(_QWORD *)(v3 + 16))
      {
        v35 = *(id *)(v3 + 32);
        goto LABEL_49;
      }
      __break(1u);
LABEL_56:
      swift_once(&qword_1008379D0, sub_100651BE4);
    }
  }
  if (a1 < 0)
    v12 = a1;
  else
    v12 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v3 = _CocoaArrayWrapper.endIndex.getter(v12);
  if (!v3)
    goto LABEL_18;
LABEL_3:
  if (v3 >= 1)
  {
    v41 = v2;
    for (i = 0; i != v3; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
      else
        v5 = *(id *)(v1 + 8 * i + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, "accountTypeHost");
      v8 = objc_msgSend(v7, "isPrimaryCloudKit");

      if (!v8 || (v9 = objc_msgSend(v6, "_isAddingExtraPrimaryCKAccountForTesting"), (v9 & 1) != 0))
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
        v10 = v44[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v6);
        specialized ContiguousArray._endMutation()(v11);
      }
    }
    swift_bridgeObjectRelease();
    v3 = (uint64_t)v44;
    v2 = v41;
    goto LABEL_19;
  }
  __break(1u);
LABEL_54:
  v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
LABEL_49:
  v1 = (uint64_t)v35;
LABEL_50:
  swift_release(v3);
  return v1;
}

_QWORD *sub_10065398C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v1 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v12);
    if (!v2)
      goto LABEL_17;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v2)
      goto LABEL_17;
  }
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_22;
  }
  for (i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
    else
      v7 = *(id *)(v1 + 8 * i + 32);
    v8 = v7;
    v9 = objc_msgSend(v7, "accountTypeHost");
    v10 = objc_msgSend(v9, "isNonPrimaryCloudKit");

    if (v10)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v5 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
      v6 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v8);
      specialized ContiguousArray._endMutation()(v6);
    }
    else
    {

    }
  }
LABEL_17:
  swift_bridgeObjectRelease();
  v13 = (void *)sub_1006534D0(v1);
  if (v13)
  {
    v1 = v13;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v1);
    v2 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v3 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v2 < v3 >> 1)
    {
LABEL_19:
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v1);
      specialized Array._endMutation()(v14);

      return _swiftEmptyArrayStorage;
    }
LABEL_22:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1);
    goto LABEL_19;
  }
  return _swiftEmptyArrayStorage;
}

void sub_100653B64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36[128];
  uint64_t v37;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v3);
    swift_bridgeObjectRelease();
    if (!v8)
      return;
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v8)
      return;
  }
  v37 = (uint64_t)_swiftEmptyArrayStorage;
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_36;
  }
  v34 = a2;
  v35 = a3;
  swift_bridgeObjectRetain(a1);
  for (i = 0; i != v8; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    else
      v10 = *(id *)(a1 + 8 * i + 32);
    v11 = v10;
    if ((objc_msgSend(v10, "inactive", v34, v35) & 1) != 0
      || (v12 = objc_msgSend(v11, "markedForRemoval"), (v12 & 1) != 0))
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v13 = *(_QWORD *)(v37 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized ContiguousArray._endMutation()(v14);
    }
  }
  swift_bridgeObjectRelease();
  v8 = v37;
  v3 = v4;
  if (v37 < 0 || (v37 & 0x4000000000000000) != 0)
  {
LABEL_36:
    v31 = swift_retain();
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_release(v8);
    if (v32)
      goto LABEL_16;
LABEL_37:
    swift_release(v8);
    return;
  }
  if (!*(_QWORD *)(v37 + 16))
    goto LABEL_37;
LABEL_16:
  v15 = (void *)sub_1006534D0(v8);
  if (v15)
  {
    v16 = v15;
    if ((objc_msgSend(v15, "_isAddingExtraPrimaryCKAccountForTesting") & 1) == 0)
      sub_100302AC4(v16);

  }
  v17 = (uint64_t)sub_10065398C(v8);
  swift_release(v8);
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v33 = v17;
    else
      v33 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v18 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v18)
    sub_100303548(1);
  v19 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v19, v36);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSManagedObjectContextTransactionAuthorKey);
  *(_QWORD *)(inited + 40) = v21;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  v22 = 0x68747561206F6E28;
  if (v35)
    v22 = v34;
  v23 = 0xEB0000000029726FLL;
  if (v35)
    v23 = v35;
  *(_QWORD *)(inited + 48) = v22;
  *(_QWORD *)(inited + 56) = v23;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidEnableAccountsNotificationAccountStoragesKey"));
  *(_QWORD *)(inited + 88) = v24;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v35);
  sub_10011FFD0(a1);
  v26 = v25;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 120) = sub_10001A630(&qword_100847A70);
  *(_QWORD *)(inited + 96) = v26;
  v27 = sub_10016E7E4(inited);
  v28 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v29 = *(_QWORD *)(v3 + 24);
  sub_1003B21A4(v27);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v28, "postNotificationName:object:userInfo:", CFSTR("RDStoreControllerDidEnableAccountsNotification"), v29, isa, swift_bridgeObjectRelease().n128_f64[0]);

}

uint64_t sub_100653F0C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for RDDatabaseSaver()
{
  return objc_opt_self(_TtC7remindd15RDDatabaseSaver);
}

void sub_100653F58(_QWORD *a1, id *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  char v14;
  double v15;
  unsigned __int8 v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v5 = *a2;
  v6 = objc_msgSend(*a2, "remObjectID");
  v7 = v6;
  if (!*(_QWORD *)(a3 + 16) || (v8 = sub_1002C66DC((uint64_t)v6), (v9 & 1) == 0))
  {

    return;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v8);
  swift_bridgeObjectRetain(v10);

  v11 = objc_msgSend(v5, "markedForRemoval");
  if ((sub_1001B2278(0x6576697463616E69, 0xE800000000000000, v10) & 1) != 0)
    v12 = objc_msgSend(v5, "inactive");
  else
    v12 = 0;
  v13 = sub_1001B2278(0x44497463656A626FLL, 0xE800000000000000, v10);
  v14 = sub_1001B2278(0x6576697463616E69, 0xE800000000000000, v10);
  *(_QWORD *)&v15 = swift_bridgeObjectRelease().n128_u64[0];
  if ((v14 & 1) != 0)
  {
    v16 = objc_msgSend(v5, "inactive", v15);
    if ((v11 & 1) != 0)
    {
      if ((v13 & 1) == 0)
      {
        if ((v16 & 1) == 0)
        {
          v17 = (void *)objc_opt_self(REMError);
          v18 = objc_msgSend(v5, "objectID");
          v19 = objc_msgSend(v17, "validationErrorRemoveAccountBeingActivated:", v18);
LABEL_16:
          v19;

          swift_willThrow(v21);
          return;
        }
        goto LABEL_24;
      }
LABEL_15:
      v20 = (void *)objc_opt_self(REMError);
      v18 = objc_msgSend(v5, "objectID");
      v19 = objc_msgSend(v20, "validationErrorRemoveAccountBeingInserted:", v18);
      goto LABEL_16;
    }
    if (!(v13 & 1 | ((v16 & 1) == 0)))
    {
LABEL_23:
      if (!v12)
        return;
      goto LABEL_24;
    }
LABEL_20:
    v22 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
    v24 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v23 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v24 >= v23 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1);
    v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
    specialized Array._endMutation()(v25);
    goto LABEL_23;
  }
  if (!v11)
  {
    if ((v13 & 1) == 0)
      goto LABEL_23;
    goto LABEL_20;
  }
  if ((v13 & 1) != 0)
    goto LABEL_15;
LABEL_24:
  v26 = v5;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
  v27 = a1[1] & 0xFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)(v27 + 0x10);
  v28 = *(_QWORD *)(v27 + 24);
  if (v29 >= v28 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1);
  v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v26);
  specialized Array._endMutation()(v30);
}

uint64_t sub_1006541F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D7394();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002CF2D0(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002CF2D0(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100843C10);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_1006544B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v9)
    goto LABEL_24;
  v11 = v9;
  v12 = v10;
  v13 = (_QWORD *)*a5;
  v15 = sub_1002C672C(v9);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v14 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D73AC();
      v22 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    v24 = 8 * v15;
    *(_QWORD *)(v22[6] + v24) = v11;
    *(_QWORD *)(v22[7] + v24) = v12;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v27;
LABEL_13:
    sub_100190B14();
    if (v28)
    {
      v30 = v28;
      v31 = v29;
      do
      {
        v36 = (_QWORD *)*a5;
        v38 = sub_1002C672C(v30);
        v39 = v36[2];
        v40 = (v37 & 1) == 0;
        v41 = v39 + v40;
        if (__OFADD__(v39, v40))
          goto LABEL_25;
        v42 = v37;
        if (v36[3] < v41)
        {
          sub_1002CF2E8(v41, 1);
          v43 = sub_1002C672C(v30);
          if ((v42 & 1) != (v44 & 1))
            goto LABEL_27;
          v38 = v43;
        }
        v45 = (_QWORD *)*a5;
        if ((v42 & 1) != 0)
        {

          v32 = v45[7];
          v33 = 8 * v38;

          *(_QWORD *)(v32 + v33) = v31;
        }
        else
        {
          v45[(v38 >> 6) + 8] |= 1 << v38;
          v46 = 8 * v38;
          *(_QWORD *)(v45[6] + v46) = v30;
          *(_QWORD *)(v45[7] + v46) = v31;
          v47 = v45[2];
          v26 = __OFADD__(v47, 1);
          v48 = v47 + 1;
          if (v26)
            goto LABEL_26;
          v45[2] = v48;
        }
        sub_100190B14();
        v30 = v34;
        v31 = v35;
      }
      while (v34);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002CF2E8(v18, a4 & 1);
  v20 = sub_1002C672C(v11);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = (_QWORD *)*a5;
    if ((v19 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v23 = v22[7];
    *(_QWORD *)(v23 + 8 * v15) = v12;
    goto LABEL_13;
  }
LABEL_27:
  v50 = sub_10001A630((uint64_t *)&unk_100843980);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v50);
  __break(1u);
  return result;
}

uint64_t sub_100654770(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v9)
    goto LABEL_24;
  v11 = v9;
  v12 = v10;
  v13 = (_QWORD *)*a5;
  v15 = sub_1002C672C(v9);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v14 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D75F4();
      v22 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    v24 = 8 * v15;
    *(_QWORD *)(v22[6] + v24) = v11;
    *(_QWORD *)(v22[7] + v24) = v12;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v27;
LABEL_13:
    sub_100190B14();
    if (v28)
    {
      v30 = v28;
      v31 = v29;
      do
      {
        v36 = (_QWORD *)*a5;
        v38 = sub_1002C672C(v30);
        v39 = v36[2];
        v40 = (v37 & 1) == 0;
        v41 = v39 + v40;
        if (__OFADD__(v39, v40))
          goto LABEL_25;
        v42 = v37;
        if (v36[3] < v41)
        {
          sub_1002CF654(v41, 1);
          v43 = sub_1002C672C(v30);
          if ((v42 & 1) != (v44 & 1))
            goto LABEL_27;
          v38 = v43;
        }
        v45 = (_QWORD *)*a5;
        if ((v42 & 1) != 0)
        {

          v32 = v45[7];
          v33 = 8 * v38;

          *(_QWORD *)(v32 + v33) = v31;
        }
        else
        {
          v45[(v38 >> 6) + 8] |= 1 << v38;
          v46 = 8 * v38;
          *(_QWORD *)(v45[6] + v46) = v30;
          *(_QWORD *)(v45[7] + v46) = v31;
          v47 = v45[2];
          v26 = __OFADD__(v47, 1);
          v48 = v47 + 1;
          if (v26)
            goto LABEL_26;
          v45[2] = v48;
        }
        sub_100190B14();
        v30 = v34;
        v31 = v35;
      }
      while (v34);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002CF654(v18, a4 & 1);
  v20 = sub_1002C672C(v11);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = (_QWORD *)*a5;
    if ((v19 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v23 = v22[7];
    *(_QWORD *)(v23 + 8 * v15) = v12;
    goto LABEL_13;
  }
LABEL_27:
  v50 = sub_10001A630((uint64_t *)&unk_100843DA0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v50);
  __break(1u);
  return result;
}

uint64_t sub_100654A30(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D7BC0();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0018(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0018(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B588);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100654CF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D7DB0();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D032C(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D032C(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100844250);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100654FB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D7DBC();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0338(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0338(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_100851E10);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100655270(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D7DC8();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0344(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0344(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_1008441F0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100655530(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D7DD4();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0350(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0350(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B648);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_1006557F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D838C();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0C90(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0C90(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B5C8);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100655AB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D8398();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0C9C(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0C9C(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100843CE0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100655D70(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D83A4();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0CA8(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0CA8(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B5E0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100656030(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D83B0();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0CB4(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0CB4(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100843D40);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_1006562F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D83BC();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0CC0(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0CC0(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B5F8);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_1006565B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D83C8();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D0CCC(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D0CCC(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B610);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100656870(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v9)
    goto LABEL_24;
  v11 = v9;
  v12 = v10;
  v13 = (_QWORD *)*a5;
  v15 = sub_1002C672C(v9);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v14 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D8ED8();
      v22 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    v24 = 8 * v15;
    *(_QWORD *)(v22[6] + v24) = v11;
    *(_QWORD *)(v22[7] + v24) = v12;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v27;
LABEL_13:
    sub_100190B14();
    if (v28)
    {
      v30 = v28;
      v31 = v29;
      do
      {
        v36 = (_QWORD *)*a5;
        v38 = sub_1002C672C(v30);
        v39 = v36[2];
        v40 = (v37 & 1) == 0;
        v41 = v39 + v40;
        if (__OFADD__(v39, v40))
          goto LABEL_25;
        v42 = v37;
        if (v36[3] < v41)
        {
          sub_1002D20A4(v41, 1);
          v43 = sub_1002C672C(v30);
          if ((v42 & 1) != (v44 & 1))
            goto LABEL_27;
          v38 = v43;
        }
        v45 = (_QWORD *)*a5;
        if ((v42 & 1) != 0)
        {

          v32 = v45[7];
          v33 = 8 * v38;

          *(_QWORD *)(v32 + v33) = v31;
        }
        else
        {
          v45[(v38 >> 6) + 8] |= 1 << v38;
          v46 = 8 * v38;
          *(_QWORD *)(v45[6] + v46) = v30;
          *(_QWORD *)(v45[7] + v46) = v31;
          v47 = v45[2];
          v26 = __OFADD__(v47, 1);
          v48 = v47 + 1;
          if (v26)
            goto LABEL_26;
          v45[2] = v48;
        }
        sub_100190B14();
        v30 = v34;
        v31 = v35;
      }
      while (v34);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D20A4(v18, a4 & 1);
  v20 = sub_1002C672C(v11);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = (_QWORD *)*a5;
    if ((v19 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v23 = v22[7];
    *(_QWORD *)(v23 + 8 * v15) = v12;
    goto LABEL_13;
  }
LABEL_27:
  v50 = sub_10001A630((uint64_t *)&unk_100851830);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v50);
  __break(1u);
  return result;
}

uint64_t sub_100656B30(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D8EE4();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D20B0(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D20B0(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100843F60);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100656DF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D8EF0();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D20BC(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D20BC(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100851CD0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_1006570B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002DAC74();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D5200(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D5200(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B680);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100657370(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002DB068();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D5894(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D5894(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B540);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100657630(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002DB074();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D58A0(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D58A0(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B560);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_1006578F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002DB080();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D58AC(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D58AC(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100843A40);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100657BB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002DB08C();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D58B8(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D58B8(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B578);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100657E70(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002DB098();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D58C4(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D58C4(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100843B70);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_100658130(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002DB0A4();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D58D0(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D58D0(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630(&qword_10083B5A8);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_1006583F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002DB0B0();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D58DC(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D58DC(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100843C70);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_1006586B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100190B14();
  if (!v8)
    goto LABEL_24;
  v10 = v8;
  v11 = v9;
  v12 = (_QWORD *)*a5;
  v14 = sub_1002C672C(v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002DB0BC();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v23 = 8 * v14;
    *(_QWORD *)(v21[6] + v23) = v10;
    *(_QWORD *)(v21[7] + v23) = v11;
    v24 = v21[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v21[2] = v26;
LABEL_13:
    sub_100190B14();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      do
      {
        v35 = (_QWORD *)*a5;
        v37 = sub_1002C672C(v29);
        v38 = v35[2];
        v39 = (v36 & 1) == 0;
        v40 = v38 + v39;
        if (__OFADD__(v38, v39))
          goto LABEL_25;
        v41 = v36;
        if (v35[3] < v40)
        {
          sub_1002D58E8(v40, 1);
          v42 = sub_1002C672C(v29);
          if ((v41 & 1) != (v43 & 1))
            goto LABEL_27;
          v37 = v42;
        }
        v44 = (_QWORD *)*a5;
        if ((v41 & 1) != 0)
        {

          v31 = v44[7];
          v32 = 8 * v37;

          *(_QWORD *)(v31 + v32) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = 8 * v37;
          *(_QWORD *)(v44[6] + v45) = v29;
          *(_QWORD *)(v44[7] + v45) = v30;
          v46 = v44[2];
          v25 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v25)
            goto LABEL_26;
          v44[2] = v47;
        }
        sub_100190B14();
        v29 = v33;
        v30 = v34;
      }
      while (v33);
    }
LABEL_24:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_1000C6560(a1);
    return swift_release(a3);
  }
  sub_1002D58E8(v17, a4 & 1);
  v19 = sub_1002C672C(v10);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:

    v22 = v21[7];
    *(_QWORD *)(v22 + 8 * v14) = v11;
    goto LABEL_13;
  }
LABEL_27:
  v49 = sub_10001A630((uint64_t *)&unk_100843E20);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

void sub_100658970(_QWORD *a1, char a2, _QWORD *a3, uint64_t (*a4)(id), void (*a5)(void), void (*a6)(void), uint64_t *a7)
{
  uint64_t v7;
  void *v11;
  void *v12;
  _QWORD *v13;
  id v14;
  id v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void *v32;
  _QWORD *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;

  v7 = a1[2];
  if (!v7)
  {
    swift_bridgeObjectRelease(a1);
    return;
  }
  v12 = (void *)a1[4];
  v11 = (void *)a1[5];
  swift_bridgeObjectRetain(a1);
  v56 = v12;
  v13 = (_QWORD *)*a3;
  v14 = v12;
  v15 = v11;
  v17 = a4(v14);
  v18 = v13[2];
  v19 = (v16 & 1) == 0;
  if (__OFADD__(v18, v19))
    goto LABEL_23;
  v20 = v16;
  if (v13[3] >= v18 + v19)
  {
    if ((a2 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      a5();
      if ((v20 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v25 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    v26 = 8 * v17;
    *(_QWORD *)(v25[6] + v26) = v14;
    *(_QWORD *)(v25[7] + v26) = v15;
    v27 = v25[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v25[2] = v29;
    v30 = v7 - 1;
    if (v7 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v31 = (void **)(a1 + 7);
    while (1)
    {
      v32 = *v31;
      v56 = *(v31 - 1);
      v33 = (_QWORD *)*a3;
      v14 = v56;
      v15 = v32;
      v34 = a4(v14);
      v36 = v33[2];
      v37 = (v35 & 1) == 0;
      v28 = __OFADD__(v36, v37);
      v38 = v36 + v37;
      if (v28)
        break;
      v39 = v35;
      if (v33[3] < v38)
      {
        ((void (*)(uint64_t, uint64_t))a6)(v38, 1);
        v34 = a4(v14);
        if ((v39 & 1) != (v40 & 1))
          goto LABEL_25;
      }
      if ((v39 & 1) != 0)
        goto LABEL_10;
      v41 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v34 >> 6) + 64) |= 1 << v34;
      v42 = 8 * v34;
      *(_QWORD *)(v41[6] + v42) = v14;
      *(_QWORD *)(v41[7] + v42) = v15;
      v43 = v41[2];
      v28 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v28)
        goto LABEL_24;
      v41[2] = v44;
      v31 += 2;
      if (!--v30)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  a6();
  v21 = a4(v14);
  if ((v20 & 1) == (v22 & 1))
  {
    v17 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v23);
    v55 = v23;
    swift_errorRetain(v23);
    v24 = sub_10001A630((uint64_t *)&unk_10083AA20);
    if ((swift_dynamicCast(v24, &v55, v24, &type metadata for _MergeError, 0) & 1) == 0)
    {

      swift_bridgeObjectRelease_n(a1, 2);
      swift_errorRelease(v55);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  v45 = sub_10001A630(a7);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
  __break(1u);
LABEL_26:
  v53 = 0;
  v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v46._object = (void *)0x8000000100701A20;
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v46);
  v47 = sub_10001A630(a7);
  _print_unlocked<A, B>(_:_:)(&v56, &v53, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v48._countAndFlagsBits = 39;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v53, v54, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

uint64_t sub_100658CFC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

double sub_100658DAC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;

  v25 = a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)&v13 = __chkstk_darwin(v11).n128_u64[0];
  v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a2;
  v17 = objc_msgSend(*(id *)(*(_QWORD *)a3 + 16), "uuid", v13, v25);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v19 = UUID.uuidString.getter(v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v27 = v16;
  v26[0] = v19;
  v26[1] = v21;
  v22 = sub_10001A630(a4);
  v23 = sub_1006736A8(a5, a6);
  Dictionary<>.append(_:toCollectionUnderKey:)(&v27, v26, v22, v23);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v21).n128_u64[0];
  return result;
}

BOOL sub_100658ED0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v5 = a4(*a1, a3);
  if (!v4)
  {
    v7 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRelease(v5);
    return v7 != 0;
  }
  return v6;
}

BOOL sub_100658F14(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;

  v4 = sub_1006709B4(*a1, *(_QWORD *)(a3 + 72));
  if (!v3)
  {
    v6 = v4[2];
    swift_bridgeObjectRelease();
    return v6 != 0;
  }
  return v5;
}

void sub_100658F58(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(_QWORD, _QWORD)@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = (void *)*a1;
  v7 = a3(*a1, *(_QWORD *)(a2 + 72));
  if (!v4)
  {
    v8 = v7;
    if (*(_QWORD *)(v7 + 16))
    {
      v9 = v6;
    }
    else
    {
      swift_bridgeObjectRelease(v7);
      v6 = 0;
      v8 = 0;
    }
    *a4 = v6;
    a4[1] = v8;
  }
}

void sub_100658FC0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;

  v23 = a6;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 112) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a7 + 120) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a7 + 128) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a7 + 136) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a7 + 72) = a1;
  *(_QWORD *)(a7 + 80) = a2;
  *(_QWORD *)(a7 + 88) = a3;
  sub_1000184A8(a4, a7 + 24);
  v17 = a2;
  v18 = a3;
  *(_QWORD *)(a7 + 144) = sub_1002B05A4((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(a7 + 96) = a5;
  *(_BYTE *)(a7 + 104) = v23;
  switch(a5)
  {
    case 0:
      goto LABEL_5;
    case 1:
    case 2:
    case 3:

      *(_WORD *)(a7 + 16) = 257;
      break;
    case 4:

      *(_BYTE *)(a7 + 17) = 1;
      break;
    default:
      if (a5 == 4499 || a5 == 4599)
      {
LABEL_5:

      }
      else
      {
        if (qword_1008371E8 != -1)
          swift_once(&qword_1008371E8, sub_100331650);
        v19 = sub_10001AAA8(v13, (uint64_t)qword_100845DC0);
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v19, v13);
        v20 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        v21 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v20, v21);
        __break(1u);
      }
      break;
  }
}

BOOL sub_10065919C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t *a6)
{
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;

  v7 = sub_1006621E8(*a1, a3, a4, a5, a6);
  if (!v6)
  {
    v9 = v7[2];
    swift_bridgeObjectRelease();
    return v9 != 0;
  }
  return v8;
}

id sub_1006591EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  id v3;
  id v5;

  v2 = *(void **)a1;
  v5 = *(id *)(a1 + 8);
  *a2 = *(_QWORD *)a1;
  a2[1] = v5;
  v3 = v2;
  return v5;
}

BOOL sub_100659218(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v5 = a4(*a1, *(_QWORD *)(a3 + 72));
  if (!v4)
  {
    v7 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRelease(v5);
    return v7 != 0;
  }
  return v6;
}

void sub_10065925C(void **a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  id v8;

  v5 = *a1;
  v6 = sub_1006621E8(*a1, *(_QWORD *)(a2 + 72), (uint64_t)&type metadata for REMListStorageCDIngestor.RelationshipKey, (uint64_t (*)(void))sub_1005CA328, &qword_100851C28);
  if (!v3)
  {
    v7 = v6;
    if (v6[2])
    {
      v8 = v5;
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = 0;
      v7 = 0;
    }
    *a3 = v5;
    a3[1] = v7;
  }
}

void sub_1006592DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19[2];

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = v16[1];
    v19[0] = *v16;
    v19[1] = v17;
    swift_bridgeObjectRetain(v17);
    sub_100331DD8(v19, a2);
    if (v2)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v17);
      return;
    }
    swift_bridgeObjectRelease(v17);
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v9)
      goto LABEL_26;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    if (!v14)
    {
      v15 = v10 + 1;
      if (v10 + 1 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v5 + 8 * v15);
      if (v14)
        goto LABEL_14;
      v15 = v10 + 2;
      if (v10 + 2 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v5 + 8 * v15);
      if (v14)
        goto LABEL_14;
      v15 = v10 + 3;
      if (v10 + 3 >= v9)
        goto LABEL_26;
      v14 = *(_QWORD *)(v5 + 8 * v15);
      if (v14)
      {
LABEL_14:
        v10 = v15;
        goto LABEL_15;
      }
      v18 = v10 + 4;
      if (v10 + 4 >= v9)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v14 = *(_QWORD *)(v5 + 8 * v18);
      v10 += 4;
      if (!v14)
        break;
    }
LABEL_15:
    v8 = (v14 - 1) & v14;
  }
  while (1)
  {
    v10 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v10 >= v9)
      goto LABEL_26;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v18;
    if (v14)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100659480(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::Int *v5;
  int64_t v6;
  uint64_t v7;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::Int v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  id v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  _BYTE v43[24];
  _QWORD *v44;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (Swift::Int *)(a2 + 40);
  v41 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v9 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v10 = v9 | (v6 << 6);
    }
    else
    {
      v11 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_43;
      if (v11 >= v41)
        return swift_release(a1);
      v12 = *(_QWORD *)(v40 + 8 * v11);
      ++v6;
      if (!v12)
      {
        v6 = v11 + 1;
        if (v11 + 1 >= v41)
          return swift_release(a1);
        v12 = *(_QWORD *)(v40 + 8 * v6);
        if (!v12)
        {
          v6 = v11 + 2;
          if (v11 + 2 >= v41)
            return swift_release(a1);
          v12 = *(_QWORD *)(v40 + 8 * v6);
          if (!v12)
          {
            v6 = v11 + 3;
            if (v11 + 3 >= v41)
              return swift_release(a1);
            v12 = *(_QWORD *)(v40 + 8 * v6);
            if (!v12)
            {
              v13 = v11 + 4;
              if (v13 >= v41)
                return swift_release(a1);
              v12 = *(_QWORD *)(v40 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v6 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_44;
                  if (v6 >= v41)
                    return swift_release(a1);
                  v12 = *(_QWORD *)(v40 + 8 * v6);
                  ++v13;
                  if (v12)
                    goto LABEL_23;
                }
              }
              v6 = v13;
            }
          }
        }
      }
LABEL_23:
      v4 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v6 << 6);
    }
    v14 = 8 * v10;
    v15 = *(void **)(*(_QWORD *)(a1 + 48) + v14);
    v16 = *(void **)(*(_QWORD *)(a1 + 56) + v14);
    swift_beginAccess(v5, v43, 33, 0);
    v17 = *v5;
    if ((*v5 & 0xC000000000000001) != 0)
    {
      if (v17 >= 0)
        v17 &= 0xFFFFFFFFFFFFFF8uLL;
      v18 = v16;
      v19 = v15;
      v20 = __CocoaDictionary.count.getter(v17);
      if (__OFADD__(v20, 1))
        goto LABEL_41;
      v17 = sub_100191E28(v17, v20 + 1);
      *v5 = v17;
    }
    else
    {
      v21 = v16;
      v22 = v15;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v44 = (_QWORD *)*v5;
    v24 = v44;
    *v5 = 0x8000000000000000;
    v26 = sub_1002C66DC((uint64_t)v15);
    v27 = v24[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      break;
    v30 = v25;
    if (v24[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1002D7388();
    }
    else
    {
      sub_1002CF2C4(v29, isUniquelyReferenced_nonNull_native);
      v31 = sub_1002C66DC((uint64_t)v15);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_45;
      v26 = v31;
    }
    v33 = v44;
    if ((v30 & 1) != 0)
    {
      v7 = v44[7];

      *(_QWORD *)(v7 + 8 * v26) = v16;
    }
    else
    {
      v44[(v26 >> 6) + 8] |= 1 << v26;
      *(_QWORD *)(v33[6] + 8 * v26) = v15;
      *(_QWORD *)(v33[7] + 8 * v26) = v16;
      v34 = v33[2];
      v35 = __OFADD__(v34, 1);
      v36 = v34 + 1;
      if (v35)
        goto LABEL_42;
      v33[2] = v36;
      v37 = v15;
    }
    v8 = *v5;
    *v5 = (Swift::Int)v33;
    swift_bridgeObjectRelease(v8);
    swift_endAccess(v43);

  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  v39 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v39);
  __break(1u);
  return result;
}

uint64_t sub_1006597BC(uint64_t a1, uint64_t a2)
{
  return sub_10034297C(a1, a2, (uint64_t *)&unk_100851D00, &qword_10083DAA8);
}

void *sub_1006597D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  _QWORD v16[2];

  v5 = v4;
  v8 = a1;
  v16[0] = a1;
  v16[1] = a2;
  if ((unint64_t)a3 >> 62)
    goto LABEL_13;
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    for (i = 4; ; ++i)
    {
      v11 = (a3 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
          : *(id *)(a3 + 8 * i);
      v8 = v11;
      v12 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v15 = v11;
      sub_100653F58(v16, &v15, a4);
      if (v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v8;
      }

      if (v12 == v9)
      {
        swift_bridgeObjectRelease();
        return (void *)v16[0];
      }
    }
    __break(1u);
LABEL_13:
    if (a3 < 0)
      v13 = a3;
    else
      v13 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_100659910(uint64_t a1, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, _QWORD *))
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  void *v39;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v5 = (uint64_t *)(a2 + 48);
  v6 = (uint64_t *)(a2 + 40);
  swift_bridgeObjectRetain(a1);
  v35 = v5;
  swift_beginAccess(v5, v38, 0, 0);
  v34 = v6;
  swift_beginAccess(v6, v37, 0, 0);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  do
  {
    v9 = *(void **)(a1 + 8 * v7 + 32);
    v10 = *v35;
    if ((*v35 & 0xC000000000000001) != 0)
    {
      if (v10 < 0)
        v11 = *v35;
      else
        v11 = v10 & 0xFFFFFFFFFFFFFF8;
      v12 = v9;
      swift_bridgeObjectRetain(v10);
      v13 = __CocoaDictionary.lookup(_:)(v12, v11);
      if (v13)
      {
        v14 = v13;
        v36 = v13;
        v15 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v14);
        swift_dynamicCast(&v39, &v36, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
        v16 = v39;
        swift_unknownObjectRelease(v14);
        goto LABEL_15;
      }
LABEL_17:

      swift_bridgeObjectRelease(v10);
      goto LABEL_18;
    }
    v17 = *(_QWORD *)(v10 + 16);
    v18 = v9;
    if (v17)
    {
      v12 = v18;
      swift_bridgeObjectRetain(v10);
      v19 = sub_1002C66DC((uint64_t)v12);
      if ((v20 & 1) != 0)
      {
        v16 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v19);
LABEL_15:

        swift_bridgeObjectRelease(v10);
        if (v16)
          goto LABEL_28;
        goto LABEL_18;
      }
      goto LABEL_17;
    }
LABEL_18:
    v21 = *v34;
    if ((*v34 & 0xC000000000000001) != 0)
    {
      if (v21 < 0)
        v22 = *v34;
      else
        v22 = v21 & 0xFFFFFFFFFFFFFF8;
      v23 = v9;
      swift_bridgeObjectRetain(v21);
      v24 = __CocoaDictionary.lookup(_:)(v23, v22);
      if (!v24)
        goto LABEL_3;
      v25 = v24;
      v36 = v24;
      v26 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
      swift_unknownObjectRetain(v25);
      swift_dynamicCast(&v39, &v36, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
      v16 = v39;
      swift_unknownObjectRelease(v25);
    }
    else
    {
      if (!*(_QWORD *)(v21 + 16))
        goto LABEL_4;
      v23 = v9;
      swift_bridgeObjectRetain(v21);
      v27 = sub_1002C66DC((uint64_t)v23);
      if ((v28 & 1) == 0)
      {
LABEL_3:

        swift_bridgeObjectRelease(v21);
LABEL_4:

        goto LABEL_5;
      }
      v16 = *(id *)(*(_QWORD *)(v21 + 56) + 8 * v27);
    }

    swift_bridgeObjectRelease(v21);
    if (!v16)
      goto LABEL_4;
LABEL_28:
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = (_QWORD *)a3(0, v8[2] + 1, 1, v8);
    v30 = v8[2];
    v29 = v8[3];
    if (v30 >= v29 >> 1)
      v8 = (_QWORD *)a3(v29 > 1, v30 + 1, 1, v8);
    v8[2] = v30 + 1;
    v31 = &v8[2 * v30];
    v31[4] = v9;
    v31[5] = v16;
LABEL_5:
    ++v7;
  }
  while (v3 != v7);
  swift_bridgeObjectRelease(a1);
  return v8;
}

void sub_100659C38(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  Swift::String v7;
  Swift::Int v8;
  int v9;
  Swift::String v10;
  Swift::Int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  NSString v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  _QWORD v59[3];
  uint64_t v60;
  unint64_t v61;
  _BYTE v62[8];

  v1 = a1;
  if (a1 >> 62)
  {
LABEL_66:
    if (v1 < 0)
      v54 = v1;
    else
      v54 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v54);
    if (v2)
      goto LABEL_3;
LABEL_70:
    swift_bridgeObjectRelease();
    return;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v2)
    goto LABEL_70;
LABEL_3:
  v57 = v1 & 0xC000000000000001;
  v3 = 4;
  v55 = v1;
  v56 = v2;
  while (1)
  {
    if (v57)
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1);
    else
      v5 = *(id *)(v1 + 8 * v3);
    v58 = v5;
    v6 = v3 - 3;
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
      goto LABEL_66;
    }
    v7._countAndFlagsBits = 0x49746E756F636361;
    v7._object = (void *)0xE900000000000044;
    v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCD98, v7);
    if (v8)
    {
      if (v8 != 1)
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v13 = type metadata accessor for Logger(0);
        v14 = sub_10001AAA8(v13, (uint64_t)qword_100847400);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.error.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = type metadata accessor for REMCDSavedAttachment();
          v18 = swift_slowAlloc(12, -1);
          v19 = swift_slowAlloc(32, -1);
          v60 = v19;
          *(_DWORD *)v18 = 136446210;
          v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          v23 = v22;

          *(_QWORD *)(v18 + 4) = sub_10001A820(v21, v23, &v60);
          v2 = v56;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", (uint8_t *)v18, 0xCu);
          swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v19, -1, -1);
          v24 = v18;
          v1 = v55;
          swift_slowDealloc(v24, -1, -1);
        }

LABEL_7:
        if (v6 == v2)
          goto LABEL_70;
        goto LABEL_8;
      }
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v10._countAndFlagsBits = 0x44497463656A626FLL;
    v10._object = (void *)0xE800000000000000;
    v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCDE8, v10);
    if (!v11)
      break;
    if (v11 == 1)
    {
      v12 = 1;
      goto LABEL_26;
    }
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10001AAA8(v31, (uint64_t)qword_100847400);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (!os_log_type_enabled(v33, v34))
    {

      v1 = v55;
      goto LABEL_7;
    }
    v35 = swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v60 = v36;
    *(_DWORD *)v35 = 136446210;
    v37 = type metadata accessor for REMCDSavedAttachment();
    v38 = objc_msgSend((id)swift_getObjCClassFromMetadata(v37), "description");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    v2 = v56;
    *(_QWORD *)(v35 + 4) = sub_10001A820(v39, v41, &v60);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", (uint8_t *)v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    v1 = v55;
    if (v6 == v56)
      goto LABEL_70;
LABEL_8:
    ++v3;
  }
  v12 = 0;
LABEL_26:
  if (v9)
    v25 = 0x7265646E696D6572;
  else
    v25 = 0x49746E756F636361;
  if (v9)
    v26 = 0xEA00000000004449;
  else
    v26 = 0xE900000000000044;
  if (v25 == 0x49746E756F636361 && v26 == 0xE900000000000044)
    goto LABEL_39;
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v25, v26, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v28 & 1) == 0)
  {
    if (v25 == 0x7265646E696D6572 && v26 == 0xEA00000000004449)
    {
LABEL_39:
      swift_bridgeObjectRelease_n(v26, 2);
      goto LABEL_40;
    }
    v43 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265646E696D6572, 0xEA00000000004449, v25, v26, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0)
      goto LABEL_5;
  }
LABEL_40:
  if (v12)
    v29 = 6911093;
  else
    v29 = 0x44497463656A626FLL;
  if (v12)
    v30 = 0xE300000000000000;
  else
    v30 = 0xE800000000000000;
  if (v29 == 0x44497463656A626FLL && v30 == 0xE800000000000000)
    goto LABEL_48;
  v42 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v29, v30, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
    goto LABEL_5;
  if (v29 == 6911093 && v30 == 0xE300000000000000)
  {
LABEL_48:

    swift_bridgeObjectRelease_n(v30, 2);
    goto LABEL_6;
  }
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)(6911093, 0xE300000000000000, v29, v30, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
LABEL_5:

LABEL_6:
    v2 = v56;
    goto LABEL_7;
  }
  v44 = sub_100671B60();
  v45 = swift_allocError(&type metadata for CDIngestionValidationError, v44, 0, 0);
  swift_willThrow(v45);
  swift_bridgeObjectRelease();
  v60 = v45;
  swift_errorRetain(v45);
  v46 = sub_10001A630((uint64_t *)&unk_10083AA20);
  if ((swift_dynamicCast(v46, &v60, v46, &type metadata for CDIngestionValidationError, 0) & 1) != 0)
  {
    swift_errorRelease(v45);
    v47 = (void *)objc_opt_self(REMError);
    v48 = objc_msgSend(v58, "remObjectID");
    objc_msgSend(v47, "validationErrorMoveAcrossAccount:", v48);

    swift_willThrow(v49);
    swift_errorRelease(v60);
  }
  else
  {
    swift_errorRelease(v60);
    v50 = (void *)objc_opt_self(REMError);
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v60 = 0xD00000000000001ALL;
    v61 = 0x8000000100709B90;
    swift_getErrorValue(v45, v62, v59);
    v51._countAndFlagsBits = Error.rem_errorDescription.getter(v59[1], v59[2]);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52 = String._bridgeToObjectiveC()();
    objc_msgSend(v50, "internalErrorWithDebugDescription:", v52, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v53);
    swift_errorRelease(v45);

  }
}

double sub_10065A460(uint64_t a1)
{
  unint64_t v1;
  uint64_t i;
  id v3;
  uint64_t v4;
  Swift::String v5;
  Swift::Int v6;
  int v7;
  Swift::OpaquePointer v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  id v30;
  uint64_t v31;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v25 = a1;
    else
      v25 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v28 = _CocoaArrayWrapper.endIndex.getter(v25);
    if (v28)
      goto LABEL_3;
  }
  else
  {
    v28 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v28)
    {
LABEL_3:
      v1 = a1 & 0xC000000000000001;
      for (i = 4; ; ++i)
      {
        if (v1)
          v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
        else
          v3 = *(id *)(a1 + 8 * i);
        v30 = v3;
        v4 = i - 3;
        if (__OFADD__(i - 4, 1))
        {
          __break(1u);
          JUMPOUT(0x10065ACE4);
        }
        v5._countAndFlagsBits = 0x49746E756F636361;
        v5._object = (void *)0xE900000000000044;
        v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE1E8, v5);
        if (!v6)
          break;
        if (v6 == 1)
        {
          v7 = 1;
          goto LABEL_15;
        }
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v12 = type metadata accessor for Logger(0);
        v13 = sub_10001AAA8(v12, (uint64_t)qword_100847400);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v14, v15))
        {

LABEL_5:
          if (v4 == v28)
            goto LABEL_42;
          continue;
        }
        v16 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
        v27 = i;
        v17 = swift_slowAlloc(12, -1);
        v18 = swift_slowAlloc(32, -1);
        v31 = v18;
        *(_DWORD *)v17 = 136446210;
        v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "description");
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

        *(_QWORD *)(v17 + 4) = sub_10001A820(v20, v22, &v31);
        v23 = v22;
        v1 = a1 & 0xC000000000000001;
        swift_bridgeObjectRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", (uint8_t *)v17, 0xCu);
        swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        i = v27;
        swift_slowDealloc(v17, -1, -1);

        if (v4 == v28)
          goto LABEL_42;
      }
      v7 = 0;
LABEL_15:
      v8._rawValue = &off_1007DE238;
      if (sub_1005CFB2C(v8, (unint64_t *)&qword_10083DA60, off_1007D66C8) == 4)
      {

      }
      else
      {
        if (v7)
          v9 = 0x7265646E696D6572;
        else
          v9 = 0x49746E756F636361;
        if (v7)
          v10 = 0xEA00000000004449;
        else
          v10 = 0xE900000000000044;
        if (v9 == 0x49746E756F636361 && v10 == 0xE900000000000044)
          goto LABEL_27;
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v9, v10, 0);
        swift_bridgeObjectRelease(0xE900000000000044);
        swift_bridgeObjectRelease(v10);
        if ((v11 & 1) != 0)
          goto LABEL_28;
        if (v9 == 0x7265646E696D6572 && v10 == 0xEA00000000004449)
        {
LABEL_27:
          swift_bridgeObjectRelease_n(v10, 2);
LABEL_28:
          JUMPOUT(0x10065A854);
        }
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265646E696D6572, 0xEA00000000004449, v9, v10, 0);
        swift_bridgeObjectRelease(0xEA00000000004449);
        swift_bridgeObjectRelease(v10);
        if ((v24 & 1) != 0)
          goto LABEL_28;

        v1 = a1 & 0xC000000000000001;
      }
      goto LABEL_5;
    }
  }
LABEL_42:
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

void sub_10065AF6C(void *a1, char a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  NSObject *log;
  __objc2_prot *v47;
  uint64_t v48[4];
  id v49;
  uint64_t v50;

  v48[3] = sub_1000151B0(0, a4, a5);
  v48[0] = (uint64_t)a1;
  v10 = sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
  v11 = a1;
  throwingCast<A>(_:as:failureMessage:)(&v49, v48, v10, 0, 0, v10);
  if (v6)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v48);
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v48);
    v12 = v49;
    if ((a2 & 1) != 0)
    {
      sub_1003F7930(1, *(void **)(v5 + 24), a3);
      v18 = v17;
      objc_msgSend(v12, "setAlarm:", v17);
      v47 = &OBJC_PROTOCOL___REMNonceGenerating;
      objc_msgSend((id)swift_dynamicCastObjCProtocolUnconditional(v11, 1, &v47, 0, 0, 0), "generateNonce");
      v20 = v19;
      if (qword_100836D90 != -1)
        swift_once(&qword_100836D90, sub_10014895C);
      v21 = type metadata accessor for Logger(0);
      sub_10001AAA8(v21, (uint64_t)qword_10083C5C8);
      static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
      static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
      v22 = v12;
      v23 = v18;
      v24 = v22;
      v25 = v23;
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.info.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v45 = v27;
        v28 = swift_slowAlloc(38, -1);
        v44 = swift_slowAlloc(64, -1);
        v48[0] = v44;
        *(_DWORD *)v28 = 68158466;
        LODWORD(v49) = 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, (char *)&v49 + 4);
        *(_WORD *)(v28 + 8) = 2050;
        v49 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
        *(_WORD *)(v28 + 18) = 2082;
        v29 = objc_msgSend(v25, "remObjectID");
        if (v29)
        {
          v30 = v29;
          v31 = objc_msgSend(v29, "description");

          v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          v34 = v33;

        }
        else
        {
          v34 = 0xE300000000000000;
          v32 = 7104878;
        }
        log = v26;
        v49 = (id)sub_10001A820(v32, v34, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        *(_QWORD *)&v35 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v28 + 28) = 2082;
        v36 = objc_msgSend(v24, "remObjectID", v35);
        if (v36)
        {
          v37 = v36;
          v38 = objc_msgSend(v36, "description");

          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
          v41 = v40;

          v42 = v45;
          v43 = v44;
        }
        else
        {
          v41 = 0xE300000000000000;
          v42 = v45;
          v43 = v44;
          v39 = 7104878;
        }
        v49 = (id)sub_10001A820(v39, v41, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v42, "REMAlarmTriggerCDIngestor.establishRelationship: Setting alarm.dueDateResolutionTokenAsNonce {nonce: %{public}.*f, alarmID: %{public}s, triggerID: %{public}s}", (uint8_t *)v28, 0x26u);
        swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v28, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v25, "setDueDateResolutionTokenAsNonce:", *(double *)&v20);

    }
    else
    {
      v13 = *(void **)(v5 + 16);
      v14 = v49;
      sub_1003F790C(0, v13, a3);
      v16 = v15;
      objc_msgSend(v14, "setAccount:", v15);

    }
  }
}

void sub_10065B400(void *a1, char a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  NSObject *log;
  __objc2_prot *v48;
  uint64_t v49[4];
  id v50;
  uint64_t v51;

  v49[3] = sub_1000151B0(0, a4, a5);
  v49[0] = (uint64_t)a1;
  v10 = sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
  v11 = a1;
  throwingCast<A>(_:as:failureMessage:)(&v50, v49, v10, 0, 0, v10);
  if (v6)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v49);
  }
  else
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v49);
    v12 = v50;
    if ((a2 & 1) != 0)
    {
      sub_1003F7930(1, *(void **)(v5 + 24), a3);
      v18 = v17;
      objc_msgSend(v12, "setAlarm:", v17);
      v48 = &OBJC_PROTOCOL___REMNonceGenerating;
      v19 = (void *)swift_dynamicCastObjCProtocolConditional(v11, 1, &v48);
      if (v19)
      {
        objc_msgSend(v19, "generateNonce");
        v21 = v20;
      }
      else
      {
        v21 = (void *)kREMNonceUnset;
      }
      if (qword_100836D90 != -1)
        swift_once(&qword_100836D90, sub_10014895C);
      v22 = type metadata accessor for Logger(0);
      sub_10001AAA8(v22, (uint64_t)qword_10083C5C8);
      static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
      static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
      v23 = v12;
      v24 = v18;
      v25 = v23;
      v26 = v24;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.info.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v46 = v28;
        v29 = swift_slowAlloc(38, -1);
        v45 = swift_slowAlloc(64, -1);
        v49[0] = v45;
        *(_DWORD *)v29 = 68158466;
        LODWORD(v50) = 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, (char *)&v50 + 4);
        *(_WORD *)(v29 + 8) = 2050;
        v50 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
        *(_WORD *)(v29 + 18) = 2082;
        v30 = objc_msgSend(v26, "remObjectID");
        if (v30)
        {
          v31 = v30;
          v32 = objc_msgSend(v30, "description");

          v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
          v35 = v34;

        }
        else
        {
          v35 = 0xE300000000000000;
          v33 = 7104878;
        }
        log = v27;
        v50 = (id)sub_10001A820(v33, v35, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);

        *(_QWORD *)&v36 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v29 + 28) = 2082;
        v37 = objc_msgSend(v25, "remObjectID", v36);
        if (v37)
        {
          v38 = v37;
          v39 = objc_msgSend(v37, "description");

          v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
          v42 = v41;

          v43 = v46;
          v44 = v45;
        }
        else
        {
          v42 = 0xE300000000000000;
          v43 = v46;
          v44 = v45;
          v40 = 7104878;
        }
        v50 = (id)sub_10001A820(v40, v42, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v43, "REMAlarmTriggerCDIngestor.establishRelationship: Setting alarm.dueDateResolutionTokenAsNonce {nonce: %{public}.*f, alarmID: %{public}s, triggerID: %{public}s}", (uint8_t *)v29, 0x26u);
        swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v26, "setDueDateResolutionTokenAsNonce:", *(double *)&v21);

    }
    else
    {
      v13 = *(void **)(v5 + 16);
      v14 = v50;
      sub_1003F790C(0, v13, a3);
      v16 = v15;
      objc_msgSend(v14, "setAccount:", v15);

    }
  }
}

_UNKNOWN **sub_10065B89C(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = sub_1002C66DC((uint64_t)v3);
    if ((v6 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5));
  }

  swift_bridgeObjectRelease();
  return &off_1007DF270;
}

_UNKNOWN **sub_10065B920(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = sub_1002C66DC((uint64_t)v3);
    if ((v6 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5));
  }

  swift_bridgeObjectRelease();
  return &off_1007DF298;
}

void sub_10065B9A4(void *a1, uint64_t a2)
{
  uint64_t v2;
  _UNKNOWN **v5;
  _UNKNOWN **v6;
  _UNKNOWN **v7;
  Swift::OpaquePointer v8;
  Swift::OpaquePointer v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35[72];

  v5 = sub_10065B89C(a1, a2);
  if (v2)
    return;
  v6 = v5;
  v7 = sub_10065B920(a1, a2);
  v8._rawValue = &off_1007DF200;
  if (sub_1005D20B8(v8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint))
    goto LABEL_33;
  v9._rawValue = &off_1007DE8F8;
  v10 = sub_1005D0484(v9, (uint64_t (*)(_QWORD))type metadata accessor for REMCDManualSortHint);
  if (v10 == 2)
    goto LABEL_33;
  v11 = v10;
  v12 = sub_10001A630(&qword_100851960);
  inited = swift_initStackObject(v12, v35);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  v14 = inited + 32;
  *(_QWORD *)(inited + 56) = &type metadata for REMManualOrderingCDIngestor.RelationshipKey;
  *(_QWORD *)(inited + 64) = &off_1007F3050;
  swift_bridgeObjectRetain(inited);
  sub_10000A388((_QWORD *)(inited + 32), (uint64_t)&type metadata for REMManualOrderingCDIngestor.RelationshipKey);
  v15 = sub_10040B84C();
  if (v15 == 0x49746E756F636361 && v16 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 0x49746E756F636361, 0xE900000000000044, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_32:
    swift_setDeallocating(inited);
    v30 = *(_QWORD *)(inited + 16);
    v31 = sub_10001A630(&qword_100851968);
    swift_arrayDestroy(v14, v30, v31);
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  swift_setDeallocating(inited);
  v19 = *(_QWORD *)(inited + 16);
  v20 = sub_10001A630(&qword_100851968);
  swift_arrayDestroy(v14, v19, v20);
  v21 = v7[2];
  swift_bridgeObjectRelease();
  if (!v21)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    return;
  }
  v22 = v6[2];
  if (v22)
  {
    if ((v11 & 1) != 0)
      v23 = 0x6465696669646F6DLL;
    else
      v23 = 0x44497463656A626FLL;
    if ((v11 & 1) != 0)
      v24 = 0xEC00000065746144;
    else
      v24 = 0xE800000000000000;
    swift_bridgeObjectRetain(v6);
    v25 = 0;
    while (1)
    {
      if (*((_BYTE *)v6 + v25 + 32))
        v26 = 0x6465696669646F6DLL;
      else
        v26 = 0x44497463656A626FLL;
      if (*((_BYTE *)v6 + v25 + 32))
        v27 = 0xEC00000065746144;
      else
        v27 = 0xE800000000000000;
      if (v26 == v23 && v27 == v24)
      {
        swift_bridgeObjectRelease_n(v6, 2);
        v34 = v24;
        goto LABEL_40;
      }
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v23, v24, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
        break;
      if (v22 == (void *)++v25)
      {
        swift_bridgeObjectRelease_n(v6, 2);
        goto LABEL_37;
      }
    }
    v34 = (unint64_t)v6;
LABEL_40:
    swift_bridgeObjectRelease_n(v34, 2);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_37:
    v32 = sub_100671B60();
    v33 = swift_allocError(&type metadata for CDIngestionValidationError, v32, 0, 0);
    swift_willThrow(v33);
  }
}

void sub_10065BCD8()
{
  Swift::OpaquePointer v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;

  v0._rawValue = &off_1007DE480;
  v1 = sub_1005D16D4(v0, &qword_100840C10, off_1007D6670);
  if (v1 == 2)
    return;
  v2 = v1;
  v3 = sub_1005D1158();
  if (v3 == 3)
    return;
  v4 = v3;
  if ((v2 & 1) != 0)
    v5 = 0x44496D72616C61;
  else
    v5 = 0x49746E756F636361;
  if ((v2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE900000000000044;
  if (v5 == 0x49746E756F636361 && v6 == 0xE900000000000044)
    goto LABEL_11;
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v5, v6, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    if (v5 == 0x44496D72616C61 && v6 == 0xE700000000000000)
    {
LABEL_11:
      swift_bridgeObjectRelease_n(v6, 2);
      goto LABEL_16;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496D72616C61, 0xE700000000000000, v5, v6, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      return;
  }
LABEL_16:
  v9 = 0x44497463656A626FLL;
  v10 = 0xE800000000000000;
  if (!v4)
    goto LABEL_21;
  if (v4 == 1)
  {
    v11 = 0x80000001006F4D50;
    v12 = 0xD000000000000012;
  }
  else
  {
    v12 = 0x74696D69786F7270;
    v11 = 0xE900000000000079;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v12, v11, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    v10 = 0x80000001006F4D50;
    if (v4)
    {
      if (v4 == 1)
      {
        v14 = 0x80000001006F4D50;
        v15 = 0xD000000000000012;
      }
      else
      {
        v15 = 0x74696D69786F7270;
        v14 = 0xE900000000000079;
      }
    }
    else
    {
      v14 = 0xE800000000000000;
      v15 = 0x44497463656A626FLL;
    }
    if (v15 != 0xD000000000000012 || 0x80000001006F4D50 != v14)
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001006F4D50, v15, v14, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        return;
      v10 = 0xE900000000000079;
      if (v4)
      {
        if (v4 == 1)
        {
          v17 = 0x80000001006F4D50;
          v9 = 0xD000000000000012;
        }
        else
        {
          v9 = 0x74696D69786F7270;
          v17 = 0xE900000000000079;
        }
      }
      else
      {
        v17 = 0xE800000000000000;
      }
      if (v9 != 0x74696D69786F7270 || v17 != 0xE900000000000079)
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696D69786F7270, 0xE900000000000079, v9, v17, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          v19 = sub_100671B60();
          v20 = swift_allocError(&type metadata for CDIngestionValidationError, v19, 0, 0);
          swift_willThrow(v20);
        }
        return;
      }
    }
LABEL_21:
    swift_bridgeObjectRelease_n(v10, 2);
  }
}

void sub_10065C180()
{
  Swift::OpaquePointer v0;
  char v1;
  char v2;
  Swift::OpaquePointer v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0._rawValue = &off_1007DED08;
  v1 = sub_1005D16D4(v0, (unint64_t *)&unk_1008398F0, off_1007D6660);
  if (v1 != 2)
  {
    v2 = v1;
    v3._rawValue = &off_1007DE570;
    if (sub_1005CFEE4(v3, (unint64_t *)&unk_1008398F0, off_1007D6660) != 5)
    {
      if ((v2 & 1) != 0)
        v4 = 0x7265646E696D6572;
      else
        v4 = 0x49746E756F636361;
      if ((v2 & 1) != 0)
        v5 = 0xEA00000000004449;
      else
        v5 = 0xE900000000000044;
      if (v4 == 0x49746E756F636361 && v5 == 0xE900000000000044)
        goto LABEL_11;
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v4, v5, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
        goto LABEL_13;
      if (v4 == 0x7265646E696D6572 && v5 == 0xEA00000000004449)
      {
LABEL_11:
        swift_bridgeObjectRelease_n(v5, 2);
        goto LABEL_13;
      }
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265646E696D6572, 0xEA00000000004449, v4, v5, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
LABEL_13:
        __asm { BR              X10; loc_10065C380 }
    }
  }
}

void sub_10065C874()
{
  JUMPOUT(0x10065C8C4);
}

void sub_10065C88C()
{
  JUMPOUT(0x10065C8B4);
}

void sub_10065C898()
{
  JUMPOUT(0x10065C8C4);
}

void sub_10065C8EC(uint64_t a1)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;

  if (a1 != 0x72656767697274 || v1 != 0xE700000000000000)
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x72656767697274, 0xE700000000000000, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      v3 = sub_100671B60();
      v4 = swift_allocError(&type metadata for CDIngestionValidationError, v3, 0, 0);
      swift_willThrow(v4);
    }
    JUMPOUT(0x10065C7F8);
  }
  JUMPOUT(0x10065C7ECLL);
}

unint64_t sub_10065C9A4()
{
  Swift::OpaquePointer v0;
  unint64_t result;

  v0._rawValue = &off_1007DEDA8;
  result = sub_1005D1ED4(v0, &qword_100840020, off_1007D6690);
  if (result != 4)
  {
    result = sub_1005CF94C();
    if (result != 6)
      __asm { BR              X10; loc_10065CAA4 }
  }
  return result;
}

void sub_10065CE1C()
{
  JUMPOUT(0x10065CE38);
}

uint64_t sub_10065CE70(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 v3;

  if (a1 == 0x7265646E696D6572 && v1 == 0xEA00000000004449)
    JUMPOUT(0x10065CB38);
  v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7265646E696D6572, 0xEA00000000004449, 0);
  swift_bridgeObjectRelease();
  v3 = swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
    JUMPOUT(0x10065CB70);
  return ((uint64_t (*)(uint64_t, __n128))((char *)&loc_10065CF0C + 4 * unk_1006C4789))(0x49746E756F636361, v3);
}

uint64_t sub_10065CFB8(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __n128 v3;

  if (a1 == 0x7265646E696D6572 && v1 == 0xEA00000000004449)
    JUMPOUT(0x10065CB38);
  v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7265646E696D6572, 0xEA00000000004449, 0);
  swift_bridgeObjectRelease();
  v3 = swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
    JUMPOUT(0x10065CB70);
  return ((uint64_t (*)(uint64_t, __n128))((char *)&loc_10065D074 + 4 * unk_1006C4792))(0x49746E756F636361, v3);
}

void sub_10065D0DC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 != 0x7265646E696D6572 || v1 != 0xEA00000000004449)
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7265646E696D6572, 0xEA00000000004449, 0);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(0xEA00000000004449);
    if ((v2 & 1) == 0)
      JUMPOUT(0x10065CD60);
    JUMPOUT(0x10065CB70);
  }
  JUMPOUT(0x10065CB38);
}

void sub_10065D168()
{
  Swift::OpaquePointer v0;
  char v1;
  char v2;
  Swift::OpaquePointer v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0._rawValue = &off_1007DEFD8;
  v1 = sub_1005D16D4(v0, (unint64_t *)&unk_1008455A0, off_1007D66D8);
  if (v1 != 2)
  {
    v2 = v1;
    v3._rawValue = &off_1007DEA70;
    if (sub_1005D0DB0(v3, (unint64_t *)&unk_1008455A0, off_1007D66D8) != 7)
    {
      if ((v2 & 1) != 0)
        v4 = 0x7265646E696D6572;
      else
        v4 = 0x49746E756F636361;
      if ((v2 & 1) != 0)
        v5 = 0xEA00000000004449;
      else
        v5 = 0xE900000000000044;
      if (v4 == 0x49746E756F636361 && v5 == 0xE900000000000044)
        goto LABEL_11;
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v4, v5, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
        goto LABEL_16;
      if (v4 == 0x7265646E696D6572 && v5 == 0xEA00000000004449)
      {
LABEL_11:
        swift_bridgeObjectRelease_n(v5, 2);
        goto LABEL_16;
      }
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265646E696D6572, 0xEA00000000004449, v4, v5, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
LABEL_16:
        __asm { BR              X9 }
    }
  }
}

void sub_10065D504()
{
  Swift::OpaquePointer v0;
  char v1;
  char v2;
  Swift::OpaquePointer v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0._rawValue = &off_1007DEF00;
  v1 = sub_1005D16D4(v0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
  if (v1 != 2)
  {
    v2 = v1;
    v3._rawValue = &off_1007DE860;
    if (sub_1005CFEE4(v3, (unint64_t *)&unk_10083AE00, off_1007D66C0) != 5)
    {
      if ((v2 & 1) != 0)
        v4 = 0x7265646E696D6572;
      else
        v4 = 0x49746E756F636361;
      if ((v2 & 1) != 0)
        v5 = 0xEA00000000004449;
      else
        v5 = 0xE900000000000044;
      if (v4 == 0x49746E756F636361 && v5 == 0xE900000000000044)
        goto LABEL_11;
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v4, v5, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
        goto LABEL_13;
      if (v4 == 0x7265646E696D6572 && v5 == 0xEA00000000004449)
      {
LABEL_11:
        swift_bridgeObjectRelease_n(v5, 2);
        goto LABEL_13;
      }
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265646E696D6572, 0xEA00000000004449, v4, v5, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
LABEL_13:
        __asm { BR              X10; loc_10065D708 }
    }
  }
}

void sub_10065DC20()
{
  JUMPOUT(0x10065DC74);
}

void sub_10065DC30()
{
  JUMPOUT(0x10065DC74);
}

void sub_10065DC44()
{
  JUMPOUT(0x10065DC74);
}

void sub_10065DC9C(uint64_t a1)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;

  if (a1 != 6911093 || v1 != 0xE300000000000000)
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 6911093, 0xE300000000000000, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      v3 = sub_100671B60();
      v4 = swift_allocError(&type metadata for CDIngestionValidationError, v3, 0, 0);
      swift_willThrow(v4);
    }
    JUMPOUT(0x10065DBA4);
  }
  JUMPOUT(0x10065DB98);
}

void sub_10065DD58()
{
  Swift::OpaquePointer v0;
  char v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;

  v0._rawValue = &off_1007DEF88;
  v1 = sub_1005D16D4(v0, (unint64_t *)&qword_100841620, off_1007D6700);
  if (v1 != 2)
  {
    v2 = v1;
    if (sub_1005D00BC((uint64_t (*)(uint64_t, unint64_t))sub_100318010, (unint64_t *)&qword_100841620, off_1007D6700) != 11)
    {
      if ((v2 & 1) != 0)
        v3 = 0x7265646E696D6572;
      else
        v3 = 0x49746E756F636361;
      if ((v2 & 1) != 0)
        v4 = 0xEA00000000004449;
      else
        v4 = 0xE900000000000044;
      if (v3 == 0x49746E756F636361 && v4 == 0xE900000000000044)
        goto LABEL_11;
      v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v3, v4, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v5 & 1) != 0)
        goto LABEL_16;
      if (v3 == 0x7265646E696D6572 && v4 == 0xEA00000000004449)
      {
LABEL_11:
        swift_bridgeObjectRelease_n(v4, 2);
        goto LABEL_16;
      }
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265646E696D6572, 0xEA00000000004449, v3, v4, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
LABEL_16:
        __asm { BR              X9; loc_10065E060 }
    }
  }
}

_UNKNOWN **sub_10065E280(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = sub_1002C66DC((uint64_t)v3);
    if ((v6 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5));
  }

  swift_bridgeObjectRelease();
  return &off_1007DF5E8;
}

_UNKNOWN **sub_10065E304(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = sub_1002C66DC((uint64_t)v3);
    if ((v6 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5));
  }

  swift_bridgeObjectRelease();
  return &off_1007DF618;
}

void sub_10065E388(void *a1, uint64_t a2)
{
  uint64_t v2;
  _UNKNOWN **v5;
  _UNKNOWN **v6;
  _UNKNOWN **v7;
  Swift::OpaquePointer v8;
  char v9;
  char v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v18;
  unint64_t v19;
  uint64_t v20;

  v5 = sub_10065E280(a1, a2);
  if (!v2)
  {
    v6 = v5;
    v7 = sub_10065E304(a1, a2);
    v8._rawValue = &off_1007DED58;
    v9 = sub_1005D16D4(v8, (unint64_t *)&qword_100839928, off_1007D6718);
    if (v9 == 2
      || (v10 = v9,
          sub_1005D00BC((uint64_t (*)(uint64_t, unint64_t))sub_1003CD6D8, (unint64_t *)&qword_100839928, off_1007D6718) == 11)|| (v11 = v7[2]) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v10 & 1) != 0)
        v12 = 0x44497473696CLL;
      else
        v12 = 0x49746E756F636361;
      if ((v10 & 1) != 0)
        v13 = 0xE600000000000000;
      else
        v13 = 0xE900000000000044;
      swift_bridgeObjectRetain(v7);
      v14 = 0;
      while (1)
      {
        if (*((_BYTE *)v7 + v14 + 32))
          v15 = 0x44497473696CLL;
        else
          v15 = 0x49746E756F636361;
        if (*((_BYTE *)v7 + v14 + 32))
          v16 = 0xE600000000000000;
        else
          v16 = 0xE900000000000044;
        if (v15 == v12 && v16 == v13)
        {
          swift_bridgeObjectRelease_n(v7, 2);
          goto LABEL_30;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v12, v13, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          break;
        if (v11 == (void *)++v14)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v7, 2);
          return;
        }
      }
      v13 = (unint64_t)v7;
LABEL_30:
      swift_bridgeObjectRelease_n(v13, 2);
      if (v6[2])
      {
        swift_bridgeObjectRetain(v6);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v19 = sub_100671B60();
      v20 = swift_allocError(&type metadata for CDIngestionValidationError, v19, 0, 0);
      swift_willThrow(v20);
    }
  }
}

_UNKNOWN **sub_10065E880(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = sub_1002C66DC((uint64_t)v3);
    if ((v6 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5));
  }

  swift_bridgeObjectRelease();
  return &off_1007DF640;
}

_UNKNOWN **sub_10065E904(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = sub_1002C66DC((uint64_t)v3);
    if ((v6 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5));
  }

  swift_bridgeObjectRelease();
  return &off_1007DF668;
}

void sub_10065E988(void *a1, uint64_t a2)
{
  uint64_t v2;
  _UNKNOWN **v5;
  _UNKNOWN **v6;
  _UNKNOWN **v7;
  Swift::OpaquePointer v8;
  char v9;
  char v10;
  Swift::OpaquePointer v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v19;
  unint64_t v20;
  uint64_t v21;

  v5 = sub_10065E880(a1, a2);
  if (!v2)
  {
    v6 = v5;
    v7 = sub_10065E904(a1, a2);
    v8._rawValue = &off_1007DF140;
    v9 = sub_1005D16D4(v8, (unint64_t *)&qword_100851CB0, off_1007D66B0);
    if (v9 == 2
      || (v10 = v9,
          v11._rawValue = &off_1007DEB88,
          sub_1005D0DB0(v11, (unint64_t *)&qword_100851CB0, off_1007D66B0) == 7)
      || (v12 = v7[2]) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v10 & 1) != 0)
        v13 = 0x44497473696CLL;
      else
        v13 = 0x49746E756F636361;
      if ((v10 & 1) != 0)
        v14 = 0xE600000000000000;
      else
        v14 = 0xE900000000000044;
      swift_bridgeObjectRetain(v7);
      v15 = 0;
      while (1)
      {
        if (*((_BYTE *)v7 + v15 + 32))
          v16 = 0x44497473696CLL;
        else
          v16 = 0x49746E756F636361;
        if (*((_BYTE *)v7 + v15 + 32))
          v17 = 0xE600000000000000;
        else
          v17 = 0xE900000000000044;
        if (v16 == v13 && v17 == v14)
        {
          swift_bridgeObjectRelease_n(v7, 2);
          goto LABEL_30;
        }
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v13, v14, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v19 & 1) != 0)
          break;
        if (v12 == (void *)++v15)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v7, 2);
          return;
        }
      }
      v14 = (unint64_t)v7;
LABEL_30:
      swift_bridgeObjectRelease_n(v14, 2);
      if (v6[2])
      {
        swift_bridgeObjectRetain(v6);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v20 = sub_100671B60();
      v21 = swift_allocError(&type metadata for CDIngestionValidationError, v20, 0, 0);
      swift_willThrow(v21);
    }
  }
}

_QWORD *sub_10065EDE4(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DC6B8, (uint64_t)sub_1002C90A8, (uint64_t (*)(void))sub_1005CB1A4, &qword_100851E98);
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_10065EEA0(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DC680, (uint64_t)sub_1002C909C, (uint64_t (*)(void))sub_1005CAF9C, &qword_100851EA0);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_10065EF5C(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  Swift::OpaquePointer v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = sub_10065EDE4(a1, a2);
  if (!v2)
  {
    v6 = v5;
    v7 = sub_10065EEA0(a1, a2);
    v8._rawValue = &off_1007DF238;
    if (sub_1005D20B8(v8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDDueDateDeltaAlert)
      || sub_1005D0BE0() == 6)
    {
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      return;
    }
    v9 = v7[2];
    swift_bridgeObjectRelease();
    if (!v9)
      goto LABEL_5;
    if (v6[2])
    {
      swift_bridgeObjectRetain(v6);
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    v10 = sub_100671B60();
    v11 = swift_allocError(&type metadata for CDIngestionValidationError, v10, 0, 0);
    swift_willThrow(v11);
  }
}

_QWORD *sub_10065F274(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DCB20, (uint64_t)sub_1002C90F0, (uint64_t (*)(void))sub_1005CBA00, (uint64_t *)&unk_1008517E0);
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_10065F330(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DCAD0, (uint64_t)sub_1002C90E4, (uint64_t (*)(void))sub_1005CB7D8, &qword_100851810);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_10065F3EC(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  Swift::OpaquePointer v8;
  char v9;
  char v10;
  Swift::OpaquePointer v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v19;
  unint64_t v20;
  uint64_t v21;

  v5 = sub_10065F274(a1, a2);
  if (!v2)
  {
    v6 = v5;
    v7 = sub_10065F330(a1, a2);
    v8._rawValue = &off_1007DCAD0;
    v9 = sub_1005D2294(v8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection);
    if (v9 == 2
      || (v10 = v9,
          v11._rawValue = &off_1007DCB20,
          sub_1005D1508(v11, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateSection) == 4)|| (v12 = v7[2]) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v10 & 1) != 0)
        v13 = 0x4449746E65726170;
      else
        v13 = 0x49746E756F636361;
      if ((v10 & 1) != 0)
        v14 = 0xE800000000000000;
      else
        v14 = 0xE900000000000044;
      swift_bridgeObjectRetain(v7);
      v15 = 0;
      while (1)
      {
        if (*((_BYTE *)v7 + v15 + 32))
          v16 = 0x4449746E65726170;
        else
          v16 = 0x49746E756F636361;
        if (*((_BYTE *)v7 + v15 + 32))
          v17 = 0xE800000000000000;
        else
          v17 = 0xE900000000000044;
        if (v16 == v13 && v17 == v14)
        {
          swift_bridgeObjectRelease_n(v7, 2);
          goto LABEL_30;
        }
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v13, v14, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v19 & 1) != 0)
          break;
        if (v12 == ++v15)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v7, 2);
          return;
        }
      }
      v14 = (unint64_t)v7;
LABEL_30:
      swift_bridgeObjectRelease_n(v14, 2);
      if (v6[2])
      {
        swift_bridgeObjectRetain(v6);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v20 = sub_100671B60();
      v21 = swift_allocError(&type metadata for CDIngestionValidationError, v20, 0, 0);
      swift_willThrow(v21);
    }
  }
}

_QWORD *sub_10065F7A0(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DCBF0, (uint64_t)sub_1002C9108, (uint64_t (*)(void))sub_1005CBA00, &qword_100851878);
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_10065F85C(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DCBA0, (uint64_t)sub_1002C90FC, (uint64_t (*)(void))sub_1005CB7D8, &qword_100851880);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_10065F918(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  Swift::OpaquePointer v8;
  char v9;
  char v10;
  Swift::OpaquePointer v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v19;
  unint64_t v20;
  uint64_t v21;

  v5 = sub_10065F7A0(a1, a2);
  if (!v2)
  {
    v6 = v5;
    v7 = sub_10065F85C(a1, a2);
    v8._rawValue = &off_1007DCBA0;
    v9 = sub_1005D2294(v8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListSection);
    if (v9 == 2
      || (v10 = v9,
          v11._rawValue = &off_1007DCBF0,
          sub_1005D1508(v11, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSmartListSection) == 4)|| (v12 = v7[2]) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v10 & 1) != 0)
        v13 = 0x4449746E65726170;
      else
        v13 = 0x49746E756F636361;
      if ((v10 & 1) != 0)
        v14 = 0xE800000000000000;
      else
        v14 = 0xE900000000000044;
      swift_bridgeObjectRetain(v7);
      v15 = 0;
      while (1)
      {
        if (*((_BYTE *)v7 + v15 + 32))
          v16 = 0x4449746E65726170;
        else
          v16 = 0x49746E756F636361;
        if (*((_BYTE *)v7 + v15 + 32))
          v17 = 0xE800000000000000;
        else
          v17 = 0xE900000000000044;
        if (v16 == v13 && v17 == v14)
        {
          swift_bridgeObjectRelease_n(v7, 2);
          goto LABEL_30;
        }
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v13, v14, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v19 & 1) != 0)
          break;
        if (v12 == ++v15)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v7, 2);
          return;
        }
      }
      v14 = (unint64_t)v7;
LABEL_30:
      swift_bridgeObjectRelease_n(v14, 2);
      if (v6[2])
      {
        swift_bridgeObjectRetain(v6);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v20 = sub_100671B60();
      v21 = swift_allocError(&type metadata for CDIngestionValidationError, v20, 0, 0);
      swift_willThrow(v21);
    }
  }
}

_QWORD *sub_10065FCCC(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DC768, (uint64_t)sub_1002C90B4, (uint64_t (*)(void))sub_1005CB7D8, &qword_1008518D0);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_10065FD88(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  Swift::OpaquePointer v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v18;
  unint64_t v19;
  uint64_t v20;

  v5 = sub_1006621E8(a1, a2, (uint64_t)&type metadata for REMListSectionStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CB3C4, &qword_1008518C8);
  if (!v2)
  {
    v6 = v5;
    v7 = sub_10065FCCC(a1, a2);
    v8._rawValue = &off_1007DC768;
    v9 = sub_1005D2294(v8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListSection);
    if (v9 == 2 || (v10 = v9, sub_1005D0F88() == 5) || (v11 = v7[2]) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v10 & 1) != 0)
        v12 = 0x4449746E65726170;
      else
        v12 = 0x49746E756F636361;
      if ((v10 & 1) != 0)
        v13 = 0xE800000000000000;
      else
        v13 = 0xE900000000000044;
      swift_bridgeObjectRetain(v7);
      v14 = 0;
      while (1)
      {
        if (*((_BYTE *)v7 + v14 + 32))
          v15 = 0x4449746E65726170;
        else
          v15 = 0x49746E756F636361;
        if (*((_BYTE *)v7 + v14 + 32))
          v16 = 0xE800000000000000;
        else
          v16 = 0xE900000000000044;
        if (v15 == v12 && v16 == v13)
        {
          swift_bridgeObjectRelease_n(v7, 2);
          goto LABEL_30;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v12, v13, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          break;
        if (v11 == ++v14)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v7, 2);
          return;
        }
      }
      v13 = (unint64_t)v7;
LABEL_30:
      swift_bridgeObjectRelease_n(v13, 2);
      if (v6[2])
      {
        swift_bridgeObjectRetain(v6);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v19 = sub_100671B60();
      v20 = swift_allocError(&type metadata for CDIngestionValidationError, v19, 0, 0);
      swift_willThrow(v20);
    }
  }
}

_QWORD *sub_100660184(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DC278, (uint64_t)sub_1002C9054, (uint64_t (*)(void))sub_1005CA94C, &qword_100851928);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_100660240(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = sub_1006621E8(a1, a2, (uint64_t)&type metadata for REMTemplateStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CAB6C, &qword_100851908);
  if (v2)
    return;
  v6 = v5;
  v7 = sub_100660184(a1, a2);
  v8 = sub_1005D1CF8();
  if (v8 == 3 || (v9 = v8, sub_1005D0654() == 12) || (v22 = v7[2]) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain(v7);
  v10 = 0;
  while (1)
  {
    v11 = (char *)v7 + v10++;
    v12 = v11[32];
    v13 = 0x6341746E65726170;
    if (v12 != 1)
      v13 = 0xD000000000000014;
    v14 = 0xEF4449746E756F63;
    if (v12 != 1)
      v14 = 0x80000001006F3EE0;
    v15 = v12 ? v13 : 0x49746E756F636361;
    v16 = (_QWORD *)(v12 ? v14 : 0xE900000000000044);
    if (v9)
    {
      if (v9 == 1)
        v17 = 0x6341746E65726170;
      else
        v17 = 0xD000000000000014;
      if (v9 == 1)
        v18 = 0xEF4449746E756F63;
      else
        v18 = 0x80000001006F3EE0;
      if (v15 != v17)
        goto LABEL_29;
    }
    else
    {
      v17 = 0x49746E756F636361;
      v18 = 0xE900000000000044;
      if (v15 != 0x49746E756F636361)
        goto LABEL_29;
    }
    if (v16 == (_QWORD *)v18)
    {
      swift_bridgeObjectRelease_n(v7, 2);
      goto LABEL_35;
    }
LABEL_29:
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    if (v22 == v10)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v7, 2);
      return;
    }
  }
  v16 = v7;
LABEL_35:
  swift_bridgeObjectRelease_n(v16, 2);
  if (v6[2])
  {
    swift_bridgeObjectRetain(v6);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v20 = sub_100671B60();
  v21 = swift_allocError(&type metadata for CDIngestionValidationError, v20, 0, 0);
  swift_willThrow(v21);
}

_QWORD *sub_1006607E4(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DC458, (uint64_t)sub_1002C9078, (uint64_t (*)(void))sub_1005CBA00, &qword_1008519C0);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_1006608A0(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  Swift::OpaquePointer v6;

  sub_1006621E8(a1, a2, (uint64_t)&type metadata for REMSmartListStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CAD84, &qword_1008519B0);
  if (!v2)
  {
    v5 = sub_1006607E4(a1, a2);
    v6._rawValue = &off_1007DC458;
    if (sub_1005D1ED4(v6, (unint64_t *)&unk_100840000, off_1007D6720) != 4
      && sub_1005D0A00() != 14)
    {
      if (v5[2])
      {
        swift_bridgeObjectRetain(v5);
        __asm { BR              X9 }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100660BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t))((char *)sub_100660D5C
                                                                     + 4 * *(unsigned __int8 *)(v3 + v2)))(0xD000000000000017, a2, 0x44497463656A626FLL);
}

void sub_100660D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v18 = a14 | 0x8000000000000000;
  if (a1 == 0xD000000000000017 && v15 == v18)
  {
    swift_bridgeObjectRelease_n(v14, 2);
    v20 = v15;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v15, 0xD000000000000017, a14 | 0x8000000000000000, 0);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v18);
    if ((v19 & 1) == 0)
    {
      if (v16 == v17)
      {
        swift_bridgeObjectRelease_n(v14, 2);
        JUMPOUT(0x100660EF4);
      }
      JUMPOUT(0x100660BC0);
    }
    v20 = v14;
  }
  swift_bridgeObjectRelease_n(v20, 2);
  JUMPOUT(0x100660958);
}

_QWORD *sub_100660F44(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DC850, (uint64_t)sub_1002C90CC, (uint64_t (*)(void))sub_1005CB7D8, &qword_100851A00);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_100661000(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  Swift::OpaquePointer v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v18;
  unint64_t v19;
  uint64_t v20;

  v5 = sub_1006621E8(a1, a2, (uint64_t)&type metadata for REMSavedReminderStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CB5DC, &qword_1008519F8);
  if (!v2)
  {
    v6 = v5;
    v7 = sub_100660F44(a1, a2);
    v8._rawValue = &off_1007DC850;
    v9 = sub_1005D2294(v8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder);
    if (v9 == 2 || (v10 = v9, sub_1005D1338() == 22) || (v11 = v7[2]) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v10 & 1) != 0)
        v12 = 0x44497473696CLL;
      else
        v12 = 0x49746E756F636361;
      if ((v10 & 1) != 0)
        v13 = 0xE600000000000000;
      else
        v13 = 0xE900000000000044;
      swift_bridgeObjectRetain(v7);
      v14 = 0;
      while (1)
      {
        if (*((_BYTE *)v7 + v14 + 32))
          v15 = 0x44497473696CLL;
        else
          v15 = 0x49746E756F636361;
        if (*((_BYTE *)v7 + v14 + 32))
          v16 = 0xE600000000000000;
        else
          v16 = 0xE900000000000044;
        if (v15 == v12 && v16 == v13)
        {
          swift_bridgeObjectRelease_n(v7, 2);
          goto LABEL_30;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v12, v13, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          break;
        if (v11 == ++v14)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v7, 2);
          return;
        }
      }
      v13 = (unint64_t)v7;
LABEL_30:
      swift_bridgeObjectRelease_n(v13, 2);
      if (v6[2])
      {
        swift_bridgeObjectRetain(v6);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v19 = sub_100671B60();
      v20 = swift_allocError(&type metadata for CDIngestionValidationError, v19, 0, 0);
      swift_willThrow(v20);
    }
  }
}

_QWORD *sub_100661758(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)sub_100222494, (uint64_t)sub_1002C9048, (uint64_t (*)(void))sub_1005CA73C, &qword_100851A68);
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_100661814(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DBE18, (uint64_t)sub_1002C903C, (uint64_t (*)(void))sub_1005CB1A4, (uint64_t *)&unk_100851A70);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_1006618D0(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  sub_100661758(a1, a2);
  if (!v2)
  {
    v5 = sub_100661814(a1, a2);
    if (sub_1005D1B0C() != 6
      && sub_1005D02A0((uint64_t (*)(uint64_t, unint64_t))sub_100222494, (unint64_t *)&qword_10083AE90, off_1007D6708) != 38)
    {
      if (v5[2])
      {
        swift_bridgeObjectRetain(v5);
        __asm { BR              X9 }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

_QWORD *sub_100661C8C(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)sub_1005367C8, (uint64_t)sub_1002C900C, (uint64_t (*)(void))sub_1005CA73C, &qword_100851C18);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_100661D48(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  sub_100661C8C(a1, a2);
  if (!v2)
  {
    v5 = sub_1006621E8(a1, a2, (uint64_t)&type metadata for REMListStorageCDIngestor.RelationshipKey, (uint64_t (*)(void))sub_1005CA328, &qword_100851C28);
    if (sub_1005D18BC() != 8
      && sub_1005D02A0((uint64_t (*)(uint64_t, unint64_t))sub_1005367C8, (unint64_t *)&qword_100839900, off_1007D66E0) != 38)
    {
      if (v5[2])
      {
        swift_bridgeObjectRetain(v5);
        __asm { BR              X9 }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

_QWORD *sub_1006621E8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5)
{
  id v8;
  void *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;

  v8 = objc_msgSend(a1, "remObjectID");
  v9 = v8;
  if (*(_QWORD *)(a2 + 16) && (v10 = sub_1002C66DC((uint64_t)v8), (v11 & 1) != 0))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v10);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v12 = 0;
  }

  v13 = sub_1005CF7A0(v12, a4, a5);
  swift_bridgeObjectRelease();
  return v13;
}

_QWORD *sub_1006622A4(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DBAE8, (uint64_t)sub_1002C9018, (uint64_t (*)(void))sub_1005CB7D8, &qword_100851C58);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_100662360(void *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  char v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int8 v29;
  uint64_t v30;

  v5 = sub_1006621E8(a1, a2, (uint64_t)&type metadata for REMAccountStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CA540, &qword_100851C48);
  if (!v2)
  {
    v6 = v5;
    v7 = sub_1006622A4(a1, a2);
    v8 = sub_1005D1AA8();
    if (v8 == 2 || (v9 = v8, v10 = sub_1005CFD04(), v10 == 26) || (v30 = v7[2]) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = v10;
      if ((v9 & 1) != 0)
        v11 = 0xD000000000000016;
      else
        v11 = 0xD000000000000011;
      if ((v9 & 1) != 0)
        v12 = 0x80000001006F4270;
      else
        v12 = 0x80000001006F4250;
      swift_bridgeObjectRetain(v7);
      v13 = 0;
      while (1)
      {
        if (*((_BYTE *)v7 + v13 + 32))
          v14 = 0xD000000000000016;
        else
          v14 = 0xD000000000000011;
        if (*((_BYTE *)v7 + v13 + 32))
          v15 = 0x80000001006F4270;
        else
          v15 = 0x80000001006F4250;
        if (v14 == v11 && v15 == v12)
        {
          swift_bridgeObjectRelease_n(v7, 2);
          goto LABEL_30;
        }
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v11, v12, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) != 0)
          break;
        if (v30 == ++v13)
        {
          swift_bridgeObjectRelease();
LABEL_42:
          v28 = v7;
LABEL_44:
          swift_bridgeObjectRelease_n(v28, 2);
          return;
        }
      }
      v12 = (unint64_t)v7;
LABEL_30:
      swift_bridgeObjectRelease_n(v12, 2);
      v18 = v6[2];
      if (v18)
      {
        swift_bridgeObjectRetain(v6);
        v19 = 0;
        while (1)
        {
          v20 = sub_100256DEC(*((_BYTE *)v6 + v19 + 32));
          v7 = v21;
          v22 = sub_100256DEC(v29);
          if (v20 == v22 && v7 == v23)
          {
            swift_bridgeObjectRelease_n(v6, 2);
            goto LABEL_42;
          }
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v7, v22, v23, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v25 & 1) != 0)
            break;
          if (v18 == ++v19)
          {
            swift_bridgeObjectRelease_n(v6, 2);
            goto LABEL_40;
          }
        }
        v28 = v6;
        goto LABEL_44;
      }
      swift_bridgeObjectRelease();
LABEL_40:
      v26 = sub_100671B60();
      v27 = swift_allocError(&type metadata for CDIngestionValidationError, v26, 0, 0);
      swift_willThrow(v27);
    }
  }
}

void sub_100662610(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  Swift::String v7;
  Swift::Int v8;
  int v9;
  Swift::String v10;
  Swift::Int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  NSString v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  _QWORD v58[3];
  uint64_t v59;
  unint64_t v60;
  _BYTE v61[8];

  v1 = a1;
  if (a1 >> 62)
  {
LABEL_64:
    if (v1 < 0)
      v53 = v1;
    else
      v53 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v53);
    if (v2)
      goto LABEL_3;
LABEL_68:
    swift_bridgeObjectRelease();
    return;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v2)
    goto LABEL_68;
LABEL_3:
  v56 = v1 & 0xC000000000000001;
  v3 = 4;
  v54 = v1;
  v55 = v2;
  while (1)
  {
    if (v56)
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1);
    else
      v5 = *(id *)(v1 + 8 * v3);
    v57 = v5;
    v6 = v3 - 3;
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    v7._countAndFlagsBits = 0x49746E756F636361;
    v7._object = (void *)0xE900000000000044;
    v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE480, v7);
    if (v8)
    {
      if (v8 != 1)
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v13 = type metadata accessor for Logger(0);
        v14 = sub_10001AAA8(v13, (uint64_t)qword_100847400);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.error.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = sub_1000151B0(0, &qword_10084FBF8, off_1007D6678);
          v18 = swift_slowAlloc(12, -1);
          v19 = swift_slowAlloc(32, -1);
          v59 = v19;
          *(_DWORD *)v18 = 136446210;
          v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          v23 = v22;

          *(_QWORD *)(v18 + 4) = sub_10001A820(v21, v23, &v59);
          v2 = v55;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", (uint8_t *)v18, 0xCu);
          swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v19, -1, -1);
          v24 = v18;
          v1 = v54;
          swift_slowDealloc(v24, -1, -1);
        }

LABEL_7:
        if (v6 == v2)
          goto LABEL_68;
        goto LABEL_8;
      }
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v10._countAndFlagsBits = 0x44497463656A626FLL;
    v10._object = (void *)0xE800000000000000;
    v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE4F8, v10);
    if (!v11)
      break;
    if (v11 == 1)
    {
      v12 = 1;
      goto LABEL_26;
    }
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10001AAA8(v30, (uint64_t)qword_100847400);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (!os_log_type_enabled(v32, v33))
    {

      v1 = v54;
      goto LABEL_7;
    }
    v34 = swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v59 = v35;
    *(_DWORD *)v34 = 136446210;
    v36 = sub_1000151B0(0, &qword_10084FBF8, off_1007D6678);
    v37 = objc_msgSend((id)swift_getObjCClassFromMetadata(v36), "description");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;

    v2 = v55;
    *(_QWORD *)(v34 + 4) = sub_10001A820(v38, v40, &v59);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", (uint8_t *)v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    v1 = v54;
    if (v6 == v55)
      goto LABEL_68;
LABEL_8:
    ++v3;
  }
  v12 = 0;
LABEL_26:
  if (v9)
    v25 = 0x44496D72616C61;
  else
    v25 = 0x49746E756F636361;
  if (v9)
    v26 = 0xE700000000000000;
  else
    v26 = 0xE900000000000044;
  if (v25 == 0x49746E756F636361 && v26 == 0xE900000000000044)
    goto LABEL_37;
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v25, v26, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
    if (v25 == 0x44496D72616C61 && v26 == 0xE700000000000000)
    {
LABEL_37:
      swift_bridgeObjectRelease_n(v26, 2);
      goto LABEL_38;
    }
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496D72616C61, 0xE700000000000000, v25, v26, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
      goto LABEL_5;
  }
LABEL_38:
  if (v12)
    v28 = 0x65746E49656D6974;
  else
    v28 = 0x44497463656A626FLL;
  if (v12)
    v29 = 0xEC0000006C617672;
  else
    v29 = 0xE800000000000000;
  if (v28 == 0x44497463656A626FLL && v29 == 0xE800000000000000)
    goto LABEL_46;
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v28, v29, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
    goto LABEL_5;
  if (v28 == 0x65746E49656D6974 && v29 == 0xEC0000006C617672)
  {
LABEL_46:

    swift_bridgeObjectRelease_n(v29, 2);
    goto LABEL_6;
  }
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65746E49656D6974, 0xEC0000006C617672, v28, v29, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
LABEL_5:

LABEL_6:
    v2 = v55;
    goto LABEL_7;
  }
  v43 = sub_100671B60();
  v44 = swift_allocError(&type metadata for CDIngestionValidationError, v43, 0, 0);
  swift_willThrow(v44);
  swift_bridgeObjectRelease();
  v59 = v44;
  swift_errorRetain(v44);
  v45 = sub_10001A630((uint64_t *)&unk_10083AA20);
  if ((swift_dynamicCast(v45, &v59, v45, &type metadata for CDIngestionValidationError, 0) & 1) != 0)
  {
    swift_errorRelease(v44);
    v46 = (void *)objc_opt_self(REMError);
    v47 = objc_msgSend(v57, "remObjectID");
    objc_msgSend(v46, "validationErrorMoveAcrossAccount:", v47);

    swift_willThrow(v48);
    swift_errorRelease(v59);
  }
  else
  {
    swift_errorRelease(v59);
    v49 = (void *)objc_opt_self(REMError);
    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v59 = 0xD00000000000001ALL;
    v60 = 0x8000000100709B90;
    swift_getErrorValue(v44, v61, v58);
    v50._countAndFlagsBits = Error.rem_errorDescription.getter(v58[1], v58[2]);
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51 = String._bridgeToObjectiveC()();
    objc_msgSend(v49, "internalErrorWithDebugDescription:", v51, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v52);
    swift_errorRelease(v44);

  }
}

void sub_100662E74(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  Swift::String v7;
  Swift::Int v8;
  int v9;
  Swift::String v10;
  Swift::Int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  NSString v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  _QWORD v58[3];
  uint64_t v59;
  unint64_t v60;
  _BYTE v61[8];

  v1 = a1;
  if (a1 >> 62)
  {
LABEL_64:
    if (v1 < 0)
      v53 = v1;
    else
      v53 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v53);
    if (v2)
      goto LABEL_3;
LABEL_68:
    swift_bridgeObjectRelease();
    return;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v2)
    goto LABEL_68;
LABEL_3:
  v56 = v1 & 0xC000000000000001;
  v3 = 4;
  v54 = v1;
  v55 = v2;
  while (1)
  {
    if (v56)
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1);
    else
      v5 = *(id *)(v1 + 8 * v3);
    v57 = v5;
    v6 = v3 - 3;
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    v7._countAndFlagsBits = 0x49746E756F636361;
    v7._object = (void *)0xE900000000000044;
    v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE480, v7);
    if (v8)
    {
      if (v8 != 1)
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v13 = type metadata accessor for Logger(0);
        v14 = sub_10001AAA8(v13, (uint64_t)qword_100847400);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.error.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = sub_1000151B0(0, (unint64_t *)&qword_100840C40, off_1007D6668);
          v18 = swift_slowAlloc(12, -1);
          v19 = swift_slowAlloc(32, -1);
          v59 = v19;
          *(_DWORD *)v18 = 136446210;
          v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          v23 = v22;

          *(_QWORD *)(v18 + 4) = sub_10001A820(v21, v23, &v59);
          v2 = v55;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", (uint8_t *)v18, 0xCu);
          swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v19, -1, -1);
          v24 = v18;
          v1 = v54;
          swift_slowDealloc(v24, -1, -1);
        }

LABEL_7:
        if (v6 == v2)
          goto LABEL_68;
        goto LABEL_8;
      }
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v10._countAndFlagsBits = 0x44497463656A626FLL;
    v10._object = (void *)0xE800000000000000;
    v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEB38, v10);
    if (!v11)
      break;
    if (v11 == 1)
    {
      v12 = 1;
      goto LABEL_26;
    }
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10001AAA8(v30, (uint64_t)qword_100847400);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (!os_log_type_enabled(v32, v33))
    {

      v1 = v54;
      goto LABEL_7;
    }
    v34 = swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v59 = v35;
    *(_DWORD *)v34 = 136446210;
    v36 = sub_1000151B0(0, (unint64_t *)&qword_100840C40, off_1007D6668);
    v37 = objc_msgSend((id)swift_getObjCClassFromMetadata(v36), "description");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;

    v2 = v55;
    *(_QWORD *)(v34 + 4) = sub_10001A820(v38, v40, &v59);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", (uint8_t *)v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    v1 = v54;
    if (v6 == v55)
      goto LABEL_68;
LABEL_8:
    ++v3;
  }
  v12 = 0;
LABEL_26:
  if (v9)
    v25 = 0x44496D72616C61;
  else
    v25 = 0x49746E756F636361;
  if (v9)
    v26 = 0xE700000000000000;
  else
    v26 = 0xE900000000000044;
  if (v25 == 0x49746E756F636361 && v26 == 0xE900000000000044)
    goto LABEL_37;
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v25, v26, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
    if (v25 == 0x44496D72616C61 && v26 == 0xE700000000000000)
    {
LABEL_37:
      swift_bridgeObjectRelease_n(v26, 2);
      goto LABEL_38;
    }
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496D72616C61, 0xE700000000000000, v25, v26, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
      goto LABEL_5;
  }
LABEL_38:
  if (v12)
    v28 = 0x706D6F4365746164;
  else
    v28 = 0x44497463656A626FLL;
  if (v12)
    v29 = 0xEE0073746E656E6FLL;
  else
    v29 = 0xE800000000000000;
  if (v28 == 0x44497463656A626FLL && v29 == 0xE800000000000000)
    goto LABEL_46;
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v28, v29, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
    goto LABEL_5;
  if (v28 == 0x706D6F4365746164 && v29 == 0xEE0073746E656E6FLL)
  {
LABEL_46:

    swift_bridgeObjectRelease_n(v29, 2);
    goto LABEL_6;
  }
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x706D6F4365746164, 0xEE0073746E656E6FLL, v28, v29, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
LABEL_5:

LABEL_6:
    v2 = v55;
    goto LABEL_7;
  }
  v43 = sub_100671B60();
  v44 = swift_allocError(&type metadata for CDIngestionValidationError, v43, 0, 0);
  swift_willThrow(v44);
  swift_bridgeObjectRelease();
  v59 = v44;
  swift_errorRetain(v44);
  v45 = sub_10001A630((uint64_t *)&unk_10083AA20);
  if ((swift_dynamicCast(v45, &v59, v45, &type metadata for CDIngestionValidationError, 0) & 1) != 0)
  {
    swift_errorRelease(v44);
    v46 = (void *)objc_opt_self(REMError);
    v47 = objc_msgSend(v57, "remObjectID");
    objc_msgSend(v46, "validationErrorMoveAcrossAccount:", v47);

    swift_willThrow(v48);
    swift_errorRelease(v59);
  }
  else
  {
    swift_errorRelease(v59);
    v49 = (void *)objc_opt_self(REMError);
    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v59 = 0xD00000000000001ALL;
    v60 = 0x8000000100709B90;
    swift_getErrorValue(v44, v61, v58);
    v50._countAndFlagsBits = Error.rem_errorDescription.getter(v58[1], v58[2]);
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51 = String._bridgeToObjectiveC()();
    objc_msgSend(v49, "internalErrorWithDebugDescription:", v51, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v52);
    swift_errorRelease(v44);

  }
}

void sub_1006636E0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  Swift::String v7;
  Swift::Int v8;
  int v9;
  Swift::String v10;
  Swift::Int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  NSString v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  _QWORD v58[3];
  uint64_t v59;
  unint64_t v60;
  _BYTE v61[8];

  v1 = a1;
  if (a1 >> 62)
  {
LABEL_64:
    if (v1 < 0)
      v53 = v1;
    else
      v53 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v53);
    if (v2)
      goto LABEL_3;
LABEL_68:
    swift_bridgeObjectRelease();
    return;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v2)
    goto LABEL_68;
LABEL_3:
  v56 = v1 & 0xC000000000000001;
  v3 = 4;
  v54 = v1;
  v55 = v2;
  while (1)
  {
    if (v56)
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1);
    else
      v5 = *(id *)(v1 + 8 * v3);
    v57 = v5;
    v6 = v3 - 3;
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    v7._countAndFlagsBits = 0x49746E756F636361;
    v7._object = (void *)0xE900000000000044;
    v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE480, v7);
    if (v8)
    {
      if (v8 != 1)
      {
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v13 = type metadata accessor for Logger(0);
        v14 = sub_10001AAA8(v13, (uint64_t)qword_100847400);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.error.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = sub_1000151B0(0, &qword_100840C00, off_1007D6688);
          v18 = swift_slowAlloc(12, -1);
          v19 = swift_slowAlloc(32, -1);
          v59 = v19;
          *(_DWORD *)v18 = 136446210;
          v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "description");
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          v23 = v22;

          *(_QWORD *)(v18 + 4) = sub_10001A820(v21, v23, &v59);
          v2 = v55;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", (uint8_t *)v18, 0xCu);
          swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v19, -1, -1);
          v24 = v18;
          v1 = v54;
          swift_slowDealloc(v24, -1, -1);
        }

LABEL_7:
        if (v6 == v2)
          goto LABEL_68;
        goto LABEL_8;
      }
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v10._countAndFlagsBits = 0x44497463656A626FLL;
    v10._object = (void *)0xE800000000000000;
    v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEC50, v10);
    if (!v11)
      break;
    if (v11 == 1)
    {
      v12 = 1;
      goto LABEL_26;
    }
    if (qword_100837310 != -1)
      swift_once(&qword_100837310, sub_10038B34C);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10001AAA8(v30, (uint64_t)qword_100847400);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (!os_log_type_enabled(v32, v33))
    {

      v1 = v54;
      goto LABEL_7;
    }
    v34 = swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v59 = v35;
    *(_DWORD *)v34 = 136446210;
    v36 = sub_1000151B0(0, &qword_100840C00, off_1007D6688);
    v37 = objc_msgSend((id)swift_getObjCClassFromMetadata(v36), "description");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;

    v2 = v55;
    *(_QWORD *)(v34 + 4) = sub_10001A820(v38, v40, &v59);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}", (uint8_t *)v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    v1 = v54;
    if (v6 == v55)
      goto LABEL_68;
LABEL_8:
    ++v3;
  }
  v12 = 0;
LABEL_26:
  if (v9)
    v25 = 0x44496D72616C61;
  else
    v25 = 0x49746E756F636361;
  if (v9)
    v26 = 0xE700000000000000;
  else
    v26 = 0xE900000000000044;
  if (v25 == 0x49746E756F636361 && v26 == 0xE900000000000044)
    goto LABEL_37;
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v25, v26, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
    if (v25 == 0x44496D72616C61 && v26 == 0xE700000000000000)
    {
LABEL_37:
      swift_bridgeObjectRelease_n(v26, 2);
      goto LABEL_38;
    }
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496D72616C61, 0xE700000000000000, v25, v26, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
      goto LABEL_5;
  }
LABEL_38:
  if (v12)
    v28 = 0x746E657665;
  else
    v28 = 0x44497463656A626FLL;
  if (v12)
    v29 = 0xE500000000000000;
  else
    v29 = 0xE800000000000000;
  if (v28 == 0x44497463656A626FLL && v29 == 0xE800000000000000)
    goto LABEL_46;
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44497463656A626FLL, 0xE800000000000000, v28, v29, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
    goto LABEL_5;
  if (v28 == 0x746E657665 && v29 == 0xE500000000000000)
  {
LABEL_46:

    swift_bridgeObjectRelease_n(v29, 2);
    goto LABEL_6;
  }
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E657665, 0xE500000000000000, v28, v29, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
LABEL_5:

LABEL_6:
    v2 = v55;
    goto LABEL_7;
  }
  v43 = sub_100671B60();
  v44 = swift_allocError(&type metadata for CDIngestionValidationError, v43, 0, 0);
  swift_willThrow(v44);
  swift_bridgeObjectRelease();
  v59 = v44;
  swift_errorRetain(v44);
  v45 = sub_10001A630((uint64_t *)&unk_10083AA20);
  if ((swift_dynamicCast(v45, &v59, v45, &type metadata for CDIngestionValidationError, 0) & 1) != 0)
  {
    swift_errorRelease(v44);
    v46 = (void *)objc_opt_self(REMError);
    v47 = objc_msgSend(v57, "remObjectID");
    objc_msgSend(v46, "validationErrorMoveAcrossAccount:", v47);

    swift_willThrow(v48);
    swift_errorRelease(v59);
  }
  else
  {
    swift_errorRelease(v59);
    v49 = (void *)objc_opt_self(REMError);
    v59 = 0;
    v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v59 = 0xD00000000000001ALL;
    v60 = 0x8000000100709B90;
    swift_getErrorValue(v44, v61, v58);
    v50._countAndFlagsBits = Error.rem_errorDescription.getter(v58[1], v58[2]);
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51 = String._bridgeToObjectiveC()();
    objc_msgSend(v49, "internalErrorWithDebugDescription:", v51, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v52);
    swift_errorRelease(v44);

  }
}

double sub_100663F2C(uint64_t a1)
{
  unint64_t v1;
  uint64_t i;
  id v3;
  uint64_t v4;
  Swift::String v5;
  Swift::Int v6;
  int v7;
  Swift::OpaquePointer v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  double result;
  uint64_t v26;
  uint64_t v27;
  id v29;
  uint64_t v30;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v24 = a1;
    else
      v24 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v27 = _CocoaArrayWrapper.endIndex.getter(v24);
    if (v27)
      goto LABEL_3;
  }
  else
  {
    v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v27)
    {
LABEL_3:
      v1 = a1 & 0xC000000000000001;
      for (i = 4; ; ++i)
      {
        if (v1)
          v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
        else
          v3 = *(id *)(a1 + 8 * i);
        v29 = v3;
        v4 = i - 3;
        if (__OFADD__(i - 4, 1))
        {
          __break(1u);
          JUMPOUT(0x100664750);
        }
        v5._countAndFlagsBits = 0x49746E756F636361;
        v5._object = (void *)0xE900000000000044;
        v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DEE78, v5);
        if (!v6)
          break;
        if (v6 == 1)
        {
          v7 = 1;
          goto LABEL_15;
        }
        if (qword_100837310 != -1)
          swift_once(&qword_100837310, sub_10038B34C);
        v12 = type metadata accessor for Logger(0);
        v13 = sub_10001AAA8(v12, (uint64_t)qword_100847400);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.error.getter(v14);
        if (!os_log_type_enabled(v14, v15))
        {

LABEL_5:
          if (v4 == v27)
            goto LABEL_42;
          continue;
        }
        v16 = sub_1000151B0(0, &qword_100845598, off_1007D6728);
        v26 = i;
        v17 = swift_slowAlloc(12, -1);
        v18 = swift_slowAlloc(32, -1);
        v30 = v18;
        *(_DWORD *)v17 = 136446210;
        v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "description");
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

        *(_QWORD *)(v17 + 4) = sub_10001A820(v20, v22, &v30);
        v1 = a1 & 0xC000000000000001;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}", (uint8_t *)v17, 0xCu);
        swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        i = v26;
        swift_slowDealloc(v17, -1, -1);

        if (v4 == v27)
          goto LABEL_42;
      }
      v7 = 0;
LABEL_15:
      v8._rawValue = &off_1007DE7E0;
      if (sub_1005CFB2C(v8, &qword_100845598, off_1007D6728) == 4)
      {

      }
      else
      {
        if (v7)
          v9 = 0x7265646E696D6572;
        else
          v9 = 0x49746E756F636361;
        if (v7)
          v10 = 0xEA00000000004449;
        else
          v10 = 0xE900000000000044;
        if (v9 == 0x49746E756F636361 && v10 == 0xE900000000000044)
          goto LABEL_27;
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746E756F636361, 0xE900000000000044, v9, v10, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0)
          goto LABEL_28;
        if (v9 == 0x7265646E696D6572 && v10 == 0xEA00000000004449)
        {
LABEL_27:
          swift_bridgeObjectRelease_n(v10, 2);
LABEL_28:
          JUMPOUT(0x100664314);
        }
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265646E696D6572, 0xEA00000000004449, v9, v10, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
          goto LABEL_28;

        v1 = a1 & 0xC000000000000001;
      }
      goto LABEL_5;
    }
  }
LABEL_42:
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1006649D8(uint64_t a1, void (*a2)(void))
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  char v21[8];
  unint64_t v22;
  unint64_t v23;

  v4 = v2;
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v6)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_15:
  if (a1 < 0)
    v19 = a1;
  else
    v19 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v19);
  if (!v6)
    goto LABEL_10;
LABEL_3:
  v7 = 4;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1);
    else
      v8 = *(id *)(a1 + 8 * v7);
    v9 = v8;
    v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
      goto LABEL_15;
    }
    a2();
    if (v4)
      break;

    ++v7;
    if (v10 == v6)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  v22 = v4;
  swift_errorRetain(v4);
  v11 = sub_10001A630((uint64_t *)&unk_10083AA20);
  if ((swift_dynamicCast(v11, &v22, v11, &type metadata for CDIngestionValidationError, 0) & 1) != 0)
  {
    swift_errorRelease(v4);
    v12 = (void *)objc_opt_self(REMError);
    v13 = objc_msgSend(v9, "remObjectID");
    objc_msgSend(v12, "validationErrorMoveAcrossAccount:", v13);

    swift_willThrow(v14);
    swift_errorRelease(v22);
  }
  else
  {
    swift_errorRelease(v22);
    v15 = (void *)objc_opt_self(REMError);
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v22 = 0xD00000000000001ALL;
    v23 = 0x8000000100709B90;
    swift_getErrorValue(v4, v21, v20);
    v16._countAndFlagsBits = Error.rem_errorDescription.getter(v20[1], v20[2]);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "internalErrorWithDebugDescription:", v17, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v18);
    swift_errorRelease(v4);

  }
}

void sub_100664C48(uint64_t a1, void (*a2)(id, uint64_t))
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  unint64_t v22;
  unint64_t v23;
  char v24[8];

  v5 = v3;
  if (!((unint64_t)a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v7)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_15:
  if (a1 < 0)
    v20 = a1;
  else
    v20 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v7 = _CocoaArrayWrapper.endIndex.getter(v20);
  if (!v7)
    goto LABEL_10;
LABEL_3:
  v8 = *(_QWORD *)(v2 + 72);
  v9 = 4;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1);
    else
      v10 = *(id *)(a1 + 8 * v9);
    v11 = v10;
    v2 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
      goto LABEL_15;
    }
    a2(v10, v8);
    if (v5)
      break;

    ++v9;
    if (v2 == v7)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  v22 = v5;
  swift_errorRetain(v5);
  v12 = sub_10001A630((uint64_t *)&unk_10083AA20);
  if ((swift_dynamicCast(v12, &v22, v12, &type metadata for CDIngestionValidationError, 0) & 1) != 0)
  {
    swift_errorRelease(v5);
    v13 = (void *)objc_opt_self(REMError);
    v14 = objc_msgSend(v11, "remObjectID");
    objc_msgSend(v13, "validationErrorMoveAcrossAccount:", v14);

    swift_willThrow(v15);
    swift_errorRelease(v22);
  }
  else
  {
    swift_errorRelease(v22);
    v16 = (void *)objc_opt_self(REMError);
    v22 = 0;
    v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v22 = 0xD00000000000001ALL;
    v23 = 0x8000000100709B90;
    swift_getErrorValue(v5, v24, v21);
    v17._countAndFlagsBits = Error.rem_errorDescription.getter(v21[1], v21[2]);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "internalErrorWithDebugDescription:", v18, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v19);
    swift_errorRelease(v5);

  }
}

double sub_100664ECC(uint64_t a1, void *a2, SEL *a3, uint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD v27[2];
  void *v28;

  v25 = a6;
  v26 = a1;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)&v12 = __chkstk_darwin(v10).n128_u64[0];
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(a2, *a3, v12);
  v16 = objc_msgSend(v15, "uuid");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v28 = a2;
  v27[0] = v18;
  v27[1] = v20;
  v21 = sub_10001A630(a4);
  v22 = sub_1006736A8(a5, v25);
  Dictionary<>.append(_:toCollectionUnderKey:)(&v28, v27, v21, v22);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_100665004(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  _BOOL4 v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  _QWORD *v51;
  _QWORD *v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint8_t *v58;
  unint64_t v59;
  unint64_t v60;
  __n128 v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  char *v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  NSObject *v74;
  id v75;
  BOOL v76;
  NSObject *v77;
  id v78;
  void *v79;
  void *v80;
  id v81;
  id v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  id v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  Swift::OpaquePointer v101;
  id v102;
  unint64_t v103;
  char v104;
  id v105;
  id v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _OWORD v120[6];
  __n128 v121;
  char *v122;
  __n128 v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  unint64_t v131;
  uint64_t *v132;
  NSObject *v133;
  __n128 v134;
  char *v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  id v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;

  v4 = v3;
  v5 = v2;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v140 = (char *)v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v139 = (char *)v120 - v11;
  v146 = type metadata accessor for UUID(0);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v142 = (char *)v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v141 = (char *)v120 - v14;
  v15 = type metadata accessor for Logger(0);
  v143 = *(id *)(v15 - 8);
  __chkstk_darwin(v15);
  v147 = (char *)v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = a2;
  v18 = a2[2];
  v17 = a2[3];
  v138 = a2[4];
  v19 = qword_1008371E8;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a1);
  if (v19 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v20 = sub_10001AAA8(v15, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v17);
  v150 = v20;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter(v22);
  v24 = os_log_type_enabled(v22, (os_log_type_t)v23);
  v25 = (unint64_t)a1 >> 62;
  v151 = v5;
  v152 = a1;
  v144 = v15;
  v149 = (unint64_t)a1 >> 62;
  if (!v24)
  {

    swift_bridgeObjectRelease_n(v17, 2);
    v35 = swift_bridgeObjectRelease_n(a1, 2);
    goto LABEL_8;
  }
  a1 = swift_slowAlloc(42, -1);
  v26 = (char *)swift_slowAlloc(96, -1);
  v153 = v26;
  *(_DWORD *)a1 = 136446978;
  v154 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v153);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
  *(_WORD *)(a1 + 12) = 2048;
  v137 = v18;
  v136 = v23;
  v135 = v26;
  if (v25)
    goto LABEL_75;
  v27 = *(_QWORD *)((v152 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v154 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
    swift_bridgeObjectRelease();
    *(_WORD *)(a1 + 22) = 2082;
    v28 = sub_1000151B0(0, &qword_100845598, off_1007D6728);
    v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v154 = sub_10001A820(v30, v32, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
    swift_bridgeObjectRelease();
    *(_WORD *)(a1 + 32) = 2082;
    swift_bridgeObjectRetain(v17);
    v154 = sub_10001A820(v137, v17, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v136, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)a1, 0x2Au);
    v33 = v135;
    swift_arrayDestroy(v135, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(a1, -1, -1);

    v5 = v151;
    a1 = v152;
    v15 = v144;
    v25 = v149;
LABEL_8:
    if (v25)
    {
      if (a1 < 0)
        v116 = a1;
      else
        v116 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v116);
      v35 = swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v36 = (char *)_swiftEmptyArrayStorage;
    if (!v17)
    {
LABEL_20:
      v46 = *(_QWORD *)(v5 + 96);
      if (v46 <= 1)
      {
        if (v46)
        {
          if (v46 != 1)
            goto LABEL_80;
          swift_bridgeObjectRelease();
          v63 = Logger.logObject.getter(v62);
          v64 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v63, v64))
          {
            v65 = (uint8_t *)swift_slowAlloc(12, -1);
            v66 = (char *)swift_slowAlloc(32, -1);
            v153 = v66;
            *(_DWORD *)v65 = 136315138;
            v147 = (char *)(v65 + 4);
            v67 = objc_msgSend((id)objc_opt_self(REMCDURLAttachment), "cdEntityName");
            v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
            v70 = v69;

            v71 = v68;
            a1 = v152;
            v154 = sub_10001A820(v71, v70, (uint64_t *)&v153);
            v5 = v151;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v63, v64, "Skipping fetch during upsert {CDType: %s}", v65, 0xCu);
            swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
            v72 = v66;
            v25 = v149;
            swift_slowDealloc(v72, -1, -1);
            swift_slowDealloc(v65, -1, -1);
          }

          v17 = (uint64_t)v148;
          v137 = sub_1002B0970((uint64_t)_swiftEmptyArrayStorage);
          if (!v25)
          {
LABEL_32:
            v22 = *(NSObject **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v22)
            {
LABEL_66:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return;
            }
LABEL_42:
            v74 = 0;
            v128 = v5 + 24;
            v129 = v17 + 48;
            v127 = v17 + 56;
            v131 = a1 & 0xC000000000000001;
            v126 = a1 & 0xFFFFFFFFFFFFFF8;
            v125 = a1 + 32;
            v132 = &v155;
            v124 = (char *)&v154 + 4;
            v61.n128_u64[0] = 136446978;
            v123 = v61;
            v61.n128_u64[0] = 136446210;
            v134 = v61;
            v61.n128_u64[0] = 136447490;
            v120[5] = v61;
            v61.n128_u64[0] = 136447234;
            v120[3] = v61;
            v61.n128_u64[0] = 136446466;
            v121 = v61;
            v122 = (char *)&type metadata for Any + 8;
            v130 = v22;
            while (1)
            {
              if (v131)
              {
                v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v74, a1);
                v76 = __OFADD__(v74, 1);
                v77 = ((char *)&v74->isa + 1);
                if (v76)
                  goto LABEL_74;
              }
              else
              {
                if ((unint64_t)v74 >= *(_QWORD *)(v126 + 16))
                {
                  __break(1u);
                  JUMPOUT(0x100667634);
                }
                v75 = *(id *)(v125 + 8 * (_QWORD)v74);
                v76 = __OFADD__(v74, 1);
                v77 = ((char *)&v74->isa + 1);
                if (v76)
                  goto LABEL_74;
              }
              v133 = v77;
              v78 = v75;
              v79 = sub_1005CCBAC(objc_msgSend(v78, "remObjectID"), &qword_100845598, off_1007D6728);
              if (v4)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                return;
              }
              v80 = v79;
              v149 = 0;

              v143 = v78;
              v81 = objc_msgSend(v78, "accountID");
              v82 = objc_msgSend(v81, "uuid");

              v83 = v141;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v82);

              v85 = UUID.uuidString.getter(v84);
              v87 = v86;
              v88 = *(void (**)(char *, uint64_t))(v145 + 8);
              v89 = v83;
              v90 = v146;
              v88(v89, v146);
              v91 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
              v92 = objc_msgSend(v91, "uuid");

              v93 = v142;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v92);

              v95 = UUID.uuidString.getter(v94);
              v97 = v96;
              v88(v93, v90);
              if (v85 == v95 && v87 == v97)
              {
                swift_bridgeObjectRelease_n(v87, 2);
                v98 = v151;
LABEL_54:
                __asm { BR              X10 }
              }
              v99 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v87, v95, v97, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v98 = v151;
              v100 = v137;
              if ((v99 & 1) != 0)
                goto LABEL_54;
              v101._rawValue = &off_1007DE7E0;
              v17 = sub_1005CFB2C(v101, &qword_100845598, off_1007D6728);
              if (!*(_QWORD *)(v100 + 16))
                break;
              v102 = v80;
              v103 = sub_1002C672C(v102);
              if ((v104 & 1) == 0)
              {

                break;
              }
              v105 = *(id *)(*(_QWORD *)(v100 + 56) + 8 * v103);

              v106 = v102;
              v107 = Logger.logObject.getter(v106);
              v108 = static os_log_type_t.info.getter(v107);
              if (os_log_type_enabled(v107, v108))
              {
                v109 = swift_slowAlloc(22, -1);
                v110 = (_QWORD *)swift_slowAlloc(8, -1);
                v147 = (char *)swift_slowAlloc(32, -1);
                v153 = v147;
                *(_DWORD *)v109 = v121.n128_u32[0];
                v154 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v153);
                v148 = v105;
                v111 = v132;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, v132);
                *(_WORD *)(v109 + 12) = 2114;
                v154 = (uint64_t)v106;
                v17 = (uint64_t)v106;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, v111);
                *v110 = v106;

                _os_log_impl((void *)&_mh_execute_header, v107, v108, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v109, 0x16u);
                v112 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v110, 1, v112);
                v113 = v110;
                a1 = v152;
                swift_slowDealloc(v113, -1, -1);
                v114 = v147;
                swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v114, -1, -1);
                swift_slowDealloc(v109, -1, -1);

              }
              else
              {

              }
              v74 = v133;
              v22 = v130;
              v4 = v149;
              if (v133 == v130)
                goto LABEL_66;
            }
            if (v17 != 4)
              JUMPOUT(0x100665E0CLL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v115 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v80);
            swift_willThrow(v115);

            return;
          }
LABEL_38:
          if (a1 < 0)
            v73 = a1;
          else
            v73 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v22 = _CocoaArrayWrapper.endIndex.getter(v73);
          v61 = swift_bridgeObjectRelease();
          if (!v22)
            goto LABEL_66;
          goto LABEL_42;
        }
      }
      else if ((unint64_t)(v46 - 2) >= 3 && v46 != 4499 && v46 != 4599)
      {
LABEL_80:
        (*((void (**)(char *, uint64_t, uint64_t, __n128))v143 + 2))(v147, v150, v15, v35);
        v118 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        v119 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v118, v119);
        __break(1u);
        JUMPOUT(0x1006676ACLL);
      }
      v48 = Logger.logObject.getter(v34);
      v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(12, -1);
        v51 = (_QWORD *)swift_slowAlloc(32, -1);
        v147 = v36;
        v52 = v51;
        v153 = (char *)v51;
        *(_DWORD *)v50 = 136315138;
        v143 = v50 + 4;
        v53 = objc_msgSend((id)objc_opt_self(REMCDURLAttachment), "cdEntityName");
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v56 = v55;

        a1 = v152;
        v154 = sub_10001A820(v54, v56, (uint64_t *)&v153);
        v5 = v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Performing fetch during upsert {CDType: %s}", v50, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        v57 = v52;
        v36 = v147;
        swift_slowDealloc(v57, -1, -1);
        v58 = v50;
        v25 = v149;
        swift_slowDealloc(v58, -1, -1);
      }

      v17 = (uint64_t)v148;
      sub_100646C10((uint64_t)v36, (uint64_t)v148);
      v60 = v59;
      v61 = swift_bridgeObjectRelease();
      if (v4)
      {
        swift_bridgeObjectRelease();
        return;
      }
      v137 = v60;
      if (!v25)
        goto LABEL_32;
      goto LABEL_38;
    }
    v153 = (char *)_swiftEmptyArrayStorage;
    v22 = &v153;
    specialized ContiguousArray.reserveCapacity(_:)(v17);
    if ((v17 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    if (v152 < 0)
      v117 = v152;
    else
      v117 = v152 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v152);
    v27 = _CocoaArrayWrapper.endIndex.getter(v117);
    swift_bridgeObjectRelease();
  }
  v37 = 0;
  v38 = a1 & 0xC000000000000001;
  while (1)
  {
    if (v17 == v37)
    {
      __break(1u);
      JUMPOUT(0x10066759CLL);
    }
    v39 = v38 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, a1) : *(id *)(a1 + 8 * v37 + 32);
    v40 = v39;
    v41 = sub_1005CCBAC(objc_msgSend(v40, "remObjectID"), &qword_100845598, off_1007D6728);
    if (v4)
      break;
    v42 = v41;
    ++v37;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v43);
    v44 = *((_QWORD *)v153 + 2);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
    v45 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
    v34 = specialized ContiguousArray._endMutation()(v45);
    a1 = v152;
    if (v17 == v37)
    {
      v36 = v153;
      v5 = v151;
      v15 = v144;
      v25 = v149;
      goto LABEL_20;
    }
  }

  v47 = v153;
  swift_bridgeObjectRelease();
  swift_release(v47);
}

void sub_10066774C(uint64_t a1, char *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  _BOOL4 v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  char *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8_t *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  char *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  BOOL v79;
  char *v80;
  char *v81;
  void *v82;
  void *v83;
  id v84;
  id v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  id v93;
  id v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  Swift::OpaquePointer v102;
  char v103;
  id v104;
  unint64_t v105;
  char v106;
  id v107;
  id v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t *v113;
  id v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _OWORD v123[6];
  char *v124;
  __n128 v125;
  __n128 v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  __n128 v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  id v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;

  v4 = v3;
  v5 = v2;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v144 = (char *)v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v145 = (char *)v123 - v11;
  v150 = type metadata accessor for UUID(0);
  v148 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v147 = (char *)v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v146 = (char *)v123 - v14;
  v15 = type metadata accessor for Logger(0);
  v141 = *(id *)(v15 - 8);
  __chkstk_darwin(v15);
  v143 = (char *)v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *((_QWORD *)a2 + 2);
  v18 = *((_QWORD *)a2 + 3);
  v149 = a2;
  v142 = *((_QWORD *)a2 + 4);
  v19 = qword_1008371E8;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(a1);
  if (v19 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v20 = sub_10001AAA8(v15, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v18);
  v152 = v20;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter(v22);
  v24 = os_log_type_enabled(v22, (os_log_type_t)v23);
  v25 = (unint64_t)a1 >> 62;
  v153 = v5;
  v154 = a1;
  v151 = (unint64_t)a1 >> 62;
  v139 = v15;
  if (v24)
  {
    LODWORD(v138) = v23;
    v140 = (char *)v17;
    v26 = swift_slowAlloc(42, -1);
    v27 = (char *)swift_slowAlloc(96, -1);
    v155 = v27;
    *(_DWORD *)v26 = 136446978;
    v156 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    *(_WORD *)(v26 + 12) = 2048;
    v137 = v27;
    if (v25)
    {
      if (a1 < 0)
        v120 = a1;
      else
        v120 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v28 = _CocoaArrayWrapper.endIndex.getter(v120);
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v156 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2082;
    v29 = sub_1000151B0(0, (unint64_t *)&unk_1008455A0, off_1007D66D8);
    v30 = objc_msgSend((id)swift_getObjCClassFromMetadata(v29), "description");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v156 = sub_10001A820(v31, v33, (uint64_t *)&v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2082;
    a1 = v154;
    swift_bridgeObjectRetain(v18);
    v156 = sub_10001A820((uint64_t)v140, v18, (uint64_t *)&v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v138, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v26, 0x2Au);
    v34 = v137;
    swift_arrayDestroy(v137, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v25 = v151;
  }
  else
  {

    swift_bridgeObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease_n(a1, 2);
  }
  if (v25)
  {
    if (a1 < 0)
      v119 = a1;
    else
      v119 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v36 = _CocoaArrayWrapper.endIndex.getter(v119);
    swift_bridgeObjectRelease();
  }
  else
  {
    v36 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v36)
  {
    v46 = (char *)_swiftEmptyArrayStorage;
LABEL_21:
    v47 = v153;
    v48 = *(_QWORD *)(v153 + 96);
    if (v48 <= 1)
    {
      if (v48)
      {
        if (v48 != 1)
          goto LABEL_80;
        swift_bridgeObjectRelease();
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc(12, -1);
          v68 = (char *)swift_slowAlloc(32, -1);
          v155 = v68;
          *(_DWORD *)v67 = 136315138;
          v143 = (char *)(v67 + 4);
          v69 = objc_msgSend((id)objc_opt_self(REMCDImageAttachment), "cdEntityName");
          v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
          v72 = v71;

          v73 = v70;
          a1 = v154;
          v156 = sub_10001A820(v73, v72, (uint64_t *)&v155);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "Skipping fetch during upsert {CDType: %s}", v67, 0xCu);
          swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          v47 = v153;
          swift_slowDealloc(v67, -1, -1);
        }

        v59 = v149;
        v74 = v151;
        v61 = sub_1002B097C((uint64_t)_swiftEmptyArrayStorage);
        if (!v74)
        {
LABEL_33:
          v63 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v63)
          {
LABEL_65:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
LABEL_43:
          v76 = 0;
          v129 = v47 + 24;
          v132 = v59 + 48;
          v128 = v59 + 56;
          v77 = a1 & 0xC000000000000001;
          v131 = a1 & 0xFFFFFFFFFFFFFF8;
          v130 = a1 + 32;
          v135 = &v157;
          v127 = (char *)&v156 + 4;
          v62.n128_u64[0] = 136446978;
          v125 = v62;
          v62.n128_u64[0] = 136446210;
          v136 = v62;
          v62.n128_u64[0] = 136447490;
          v123[5] = v62;
          v62.n128_u64[0] = 136447234;
          v123[4] = v62;
          v62.n128_u64[0] = 136446466;
          v126 = v62;
          v143 = "ss";
          v124 = (char *)&type metadata for Any + 8;
          v138 = v61;
          v134 = v63;
          v133 = a1 & 0xC000000000000001;
          while (1)
          {
            if (v77)
            {
              v78 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v76, a1);
              v79 = __OFADD__(v76, 1);
              v80 = (char *)(v76 + 1);
              if (v79)
                goto LABEL_78;
            }
            else
            {
              if (v76 >= *(_QWORD *)(v131 + 16))
                goto LABEL_79;
              v78 = *(id *)(v130 + 8 * v76);
              v79 = __OFADD__(v76, 1);
              v80 = (char *)(v76 + 1);
              if (v79)
              {
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
                JUMPOUT(0x100669C18);
              }
            }
            v137 = v80;
            v81 = (char *)v78;
            v82 = sub_1005CCBAC(objc_msgSend(v81, "remObjectID"), (unint64_t *)&unk_1008455A0, off_1007D66D8);
            if (v4)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return;
            }
            v83 = v82;
            v151 = 0;

            v149 = v81;
            v84 = objc_msgSend(v81, "accountID");
            v85 = objc_msgSend(v84, "uuid");

            v86 = v146;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

            v88 = UUID.uuidString.getter(v87);
            v90 = v89;
            v91 = *(void (**)(char *, uint64_t))(v148 + 8);
            v92 = v150;
            v91(v86, v150);
            v93 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
            v94 = objc_msgSend(v93, "uuid");

            v95 = v147;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

            v97 = UUID.uuidString.getter(v96);
            v99 = v98;
            v91(v95, v92);
            if (v88 == v97 && v90 == v99)
            {
              swift_bridgeObjectRelease_n(v90, 2);
LABEL_55:
              __asm { BR              X10 }
            }
            v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v90, v97, v99, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v100 & 1) != 0)
              goto LABEL_55;
            v101 = v138;
            v102._rawValue = &off_1007DEA70;
            v103 = sub_1005D0DB0(v102, (unint64_t *)&unk_1008455A0, off_1007D66D8);
            if (!*(_QWORD *)(v101 + 16))
              break;
            v104 = v83;
            v105 = sub_1002C672C(v104);
            if ((v106 & 1) == 0)
            {

              break;
            }
            v107 = *(id *)(*(_QWORD *)(v101 + 56) + 8 * v105);

            v108 = v104;
            v109 = Logger.logObject.getter(v108);
            v110 = static os_log_type_t.info.getter(v109);
            if (os_log_type_enabled(v109, v110))
            {
              v111 = swift_slowAlloc(22, -1);
              v112 = (_QWORD *)swift_slowAlloc(8, -1);
              v140 = (char *)swift_slowAlloc(32, -1);
              v155 = v140;
              *(_DWORD *)v111 = v126.n128_u32[0];
              v141 = v107;
              v156 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v155);
              v113 = v135;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v135);
              *(_WORD *)(v111 + 12) = 2114;
              v156 = (uint64_t)v108;
              v114 = v108;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v113);
              *v112 = v108;

              _os_log_impl((void *)&_mh_execute_header, v109, v110, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v111, 0x16u);
              v115 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v112, 1, v115);
              v116 = v112;
              a1 = v154;
              swift_slowDealloc(v116, -1, -1);
              v117 = (uint64_t)v140;
              swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v117, -1, -1);
              swift_slowDealloc(v111, -1, -1);

            }
            else
            {

            }
            v4 = v151;
            v76 = (unint64_t)v137;
            v77 = v133;
            if (v137 == (char *)v134)
              goto LABEL_65;
          }
          if (v103 != 7)
            JUMPOUT(0x100668554);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v118 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v83);
          swift_willThrow(v118);

          return;
        }
LABEL_39:
        if (a1 < 0)
          v75 = a1;
        else
          v75 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v63 = _CocoaArrayWrapper.endIndex.getter(v75);
        v62 = swift_bridgeObjectRelease();
        if (!v63)
          goto LABEL_65;
        goto LABEL_43;
      }
    }
    else if ((unint64_t)(v48 - 2) >= 3 && v48 != 4499 && v48 != 4599)
    {
LABEL_80:
      (*((void (**)(char *, uint64_t, uint64_t))v141 + 2))(v143, v152, v139);
      v121 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v122 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v121, v122);
      __break(1u);
      JUMPOUT(0x100669C98);
    }
    v50 = Logger.logObject.getter(v35);
    v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v143 = v46;
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (char *)swift_slowAlloc(32, -1);
      v155 = v53;
      *(_DWORD *)v52 = 136315138;
      v141 = v52 + 4;
      v54 = objc_msgSend((id)objc_opt_self(REMCDImageAttachment), "cdEntityName");
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v57 = v56;

      v156 = sub_10001A820(v55, v57, (uint64_t *)&v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
      v46 = v143;
      v47 = v153;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Performing fetch during upsert {CDType: %s}", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      v58 = v52;
      v25 = v151;
      swift_slowDealloc(v58, -1, -1);
    }

    v59 = v149;
    sub_100647030((uint64_t)v46, (uint64_t)v149);
    v61 = v60;
    v62 = swift_bridgeObjectRelease();
    if (v4)
    {
      swift_bridgeObjectRelease();
      return;
    }
    a1 = v154;
    if (!v25)
      goto LABEL_33;
    goto LABEL_39;
  }
  v155 = (char *)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v36);
  if (v36 < 0)
  {
    __break(1u);
    JUMPOUT(0x100669BCCLL);
  }
  v37 = 0;
  v38 = a1 & 0xC000000000000001;
  while (1)
  {
    if (v36 == v37)
    {
      __break(1u);
      JUMPOUT(0x100669B5CLL);
    }
    v39 = v38
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v154)
        : *(id *)(v154 + 8 * v37 + 32);
    v40 = v39;
    v41 = sub_1005CCBAC(objc_msgSend(v40, "remObjectID"), (unint64_t *)&unk_1008455A0, off_1007D66D8);
    if (v4)
      break;
    v42 = v41;
    ++v37;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v43);
    v44 = *((_QWORD *)v155 + 2);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
    v45 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
    v35 = specialized ContiguousArray._endMutation()(v45);
    if (v36 == v37)
    {
      a1 = v154;
      v46 = v155;
      v25 = v151;
      goto LABEL_21;
    }
  }

  v49 = v155;
  swift_bridgeObjectRelease();
  swift_release(v49);
}

void sub_100669CFC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint8_t *v23;
  _BOOL4 v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  __n128 v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  char *v65;
  id v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  id v71;
  BOOL v72;
  NSObject *v73;
  id v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  Swift::OpaquePointer v95;
  id v96;
  unint64_t v97;
  char v98;
  _WORD *v99;
  id v100;
  NSObject *v101;
  os_log_type_t v102;
  uint64_t *v103;
  id v104;
  uint64_t v105;
  char *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _OWORD v112[7];
  __n128 v113;
  char *v114;
  __n128 v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  NSObject *v122;
  unint64_t v123;
  uint64_t *v124;
  char *v125;
  NSObject *v126;
  __n128 v127;
  unint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  char *v134;
  char *v135;
  uint8_t *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  _WORD *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;

  v4 = v3;
  v5 = v2;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v134 = (char *)v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v137 = (char *)v112 - v11;
  v140 = type metadata accessor for UUID(0);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v136 = (uint8_t *)v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v135 = (char *)v112 - v14;
  v15 = type metadata accessor for Logger(0);
  v133 = *(id *)(v15 - 8);
  __chkstk_darwin(v15);
  v141 = (char *)v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = a2;
  v18 = a2[2];
  v17 = (_WORD *)a2[3];
  v132 = a2[4];
  v19 = qword_1008371E8;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(a1);
  if (v19 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v20 = sub_10001AAA8(v15, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v17);
  v144 = v20;
  v22 = Logger.logObject.getter(v21);
  v23 = (uint8_t *)static os_log_type_t.info.getter(v22);
  v24 = os_log_type_enabled(v22, (os_log_type_t)v23);
  v25 = (unint64_t)a1 >> 62;
  v145 = v5;
  v146 = a1;
  v138 = v15;
  v143 = (unint64_t)a1 >> 62;
  if (!v24)
  {

    swift_bridgeObjectRelease_n(v17, 2);
    v35 = swift_bridgeObjectRelease_n(a1, 2);
    goto LABEL_8;
  }
  v130 = (int)v23;
  v23 = (uint8_t *)swift_slowAlloc(42, -1);
  v26 = (char *)swift_slowAlloc(96, -1);
  v147 = v26;
  *(_DWORD *)v23 = 136446978;
  v148 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v147);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);
  *((_WORD *)v23 + 6) = 2048;
  v131 = v18;
  v129 = v26;
  if (v25)
    goto LABEL_75;
  v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v148 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);
    swift_bridgeObjectRelease();
    *((_WORD *)v23 + 11) = 2082;
    v28 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
    v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(v28), "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    a1 = v146;
    v148 = sub_10001A820(v30, v32, (uint64_t *)&v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);
    swift_bridgeObjectRelease();
    *((_WORD *)v23 + 16) = 2082;
    swift_bridgeObjectRetain(v17);
    v148 = sub_10001A820(v131, (unint64_t)v17, (uint64_t *)&v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v130, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", v23, 0x2Au);
    v33 = v129;
    swift_arrayDestroy(v129, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v5 = v145;
    v15 = v138;
    v25 = v143;
LABEL_8:
    if (v25)
    {
      if (a1 < 0)
        v108 = a1;
      else
        v108 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v36 = _CocoaArrayWrapper.endIndex.getter(v108);
      v35 = swift_bridgeObjectRelease();
    }
    else
    {
      v36 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v37 = (char *)_swiftEmptyArrayStorage;
    if (!v36)
    {
LABEL_20:
      v47 = *(_QWORD *)(v5 + 96);
      if (v47 <= 1)
      {
        if (v47)
        {
          if (v47 != 1)
            goto LABEL_80;
          swift_bridgeObjectRelease();
          v62 = Logger.logObject.getter(v61);
          v63 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v62, v63))
          {
            v64 = (uint8_t *)swift_slowAlloc(12, -1);
            v65 = (char *)swift_slowAlloc(32, -1);
            v147 = v65;
            *(_DWORD *)v64 = 136315138;
            v141 = (char *)(v64 + 4);
            v66 = objc_msgSend((id)objc_opt_self(REMCDFileAttachment), "cdEntityName");
            v23 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
            v68 = v67;

            v148 = sub_10001A820((uint64_t)v23, v68, (uint64_t *)&v147);
            a1 = v146;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);
            v5 = v145;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "Skipping fetch during upsert {CDType: %s}", v64, 0xCu);
            swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v65, -1, -1);
            swift_slowDealloc(v64, -1, -1);
          }

          v17 = v142;
          v128 = sub_1002B0988((uint64_t)_swiftEmptyArrayStorage);
          if (!v143)
          {
LABEL_32:
            v22 = *(NSObject **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v22)
            {
LABEL_66:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return;
            }
LABEL_42:
            v70 = 0;
            v120 = v5 + 24;
            v121 = (char *)(v17 + 24);
            v119 = (char *)(v17 + 28);
            v123 = a1 & 0xC000000000000001;
            v118 = a1 & 0xFFFFFFFFFFFFFF8;
            v117 = a1 + 32;
            v124 = &v149;
            v116 = (char *)&v148 + 4;
            v60.n128_u64[0] = 136446978;
            v115 = v60;
            v60.n128_u64[0] = 136446210;
            v127 = v60;
            v60.n128_u64[0] = 136447490;
            v112[6] = v60;
            v60.n128_u64[0] = 136447234;
            v112[4] = v60;
            v60.n128_u64[0] = 136446466;
            v113 = v60;
            v125 = "ss";
            v114 = (char *)&type metadata for Any + 8;
            v122 = v22;
            while (1)
            {
              if (v123)
              {
                v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v70, a1);
                v72 = __OFADD__(v70, 1);
                v73 = ((char *)&v70->isa + 1);
                if (v72)
                  goto LABEL_74;
              }
              else
              {
                if ((unint64_t)v70 >= *(_QWORD *)(v118 + 16))
                {
                  __break(1u);
                  JUMPOUT(0x10066C5A8);
                }
                v71 = *(id *)(v117 + 8 * (_QWORD)v70);
                v72 = __OFADD__(v70, 1);
                v73 = ((char *)&v70->isa + 1);
                if (v72)
                  goto LABEL_74;
              }
              v126 = v73;
              v74 = v71;
              v75 = sub_1005CCBAC(objc_msgSend(v74, "remObjectID"), (unint64_t *)&unk_10083AE00, off_1007D66C0);
              if (v4)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                return;
              }
              v76 = v75;
              v143 = 0;

              v133 = v74;
              v77 = objc_msgSend(v74, "accountID");
              v78 = objc_msgSend(v77, "uuid");

              v79 = v135;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v78);

              v81 = UUID.uuidString.getter(v80);
              v83 = v82;
              v84 = *(void (**)(char *, uint64_t))(v139 + 8);
              v85 = v79;
              v86 = v140;
              v84(v85, v140);
              v87 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
              v88 = objc_msgSend(v87, "uuid");

              v23 = v136;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v88);

              v90 = UUID.uuidString.getter(v89);
              v92 = v91;
              v84((char *)v23, v86);
              if (v81 == v90 && v83 == v92)
              {
                swift_bridgeObjectRelease_n(v83, 2);
LABEL_54:
                __asm { BR              X10 }
              }
              v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v83, v90, v92, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v93 & 1) != 0)
                goto LABEL_54;
              v94 = v128;
              v95._rawValue = &off_1007DE860;
              v17 = (_WORD *)sub_1005CFEE4(v95, (unint64_t *)&unk_10083AE00, off_1007D66C0);
              if (!*(_QWORD *)(v94 + 16))
                break;
              v96 = v76;
              v97 = sub_1002C672C(v96);
              if ((v98 & 1) == 0)
              {

                break;
              }
              v99 = *(id *)(*(_QWORD *)(v94 + 56) + 8 * v97);

              v100 = v96;
              v101 = Logger.logObject.getter(v100);
              v102 = static os_log_type_t.info.getter(v101);
              if (os_log_type_enabled(v101, v102))
              {
                v17 = (_WORD *)swift_slowAlloc(22, -1);
                v23 = (uint8_t *)swift_slowAlloc(8, -1);
                v141 = (char *)swift_slowAlloc(32, -1);
                v147 = v141;
                *(_DWORD *)v17 = v113.n128_u32[0];
                v148 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v147);
                v142 = v99;
                v103 = v124;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v124);
                v17[6] = 2114;
                v148 = (uint64_t)v100;
                v104 = v100;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v103);
                *(_QWORD *)v23 = v100;

                _os_log_impl((void *)&_mh_execute_header, v101, v102, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v17, 0x16u);
                v105 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v23, 1, v105);
                swift_slowDealloc(v23, -1, -1);
                v106 = v141;
                swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v106, -1, -1);
                swift_slowDealloc(v17, -1, -1);

              }
              else
              {

              }
              a1 = v146;
              v70 = v126;
              v22 = v122;
              v4 = v143;
              if (v126 == v122)
                goto LABEL_66;
            }
            if (v17 != 5)
              JUMPOUT(0x10066AB5CLL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v107 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v76);
            swift_willThrow(v107);

            return;
          }
LABEL_38:
          if (a1 < 0)
            v69 = a1;
          else
            v69 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v22 = _CocoaArrayWrapper.endIndex.getter(v69);
          v60 = swift_bridgeObjectRelease();
          if (!v22)
            goto LABEL_66;
          goto LABEL_42;
        }
      }
      else if ((unint64_t)(v47 - 2) >= 3 && v47 != 4499 && v47 != 4599)
      {
LABEL_80:
        (*((void (**)(char *, uint64_t, uint64_t, __n128))v133 + 2))(v141, v144, v15, v35);
        v110 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        v111 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v110, v111);
        __break(1u);
        JUMPOUT(0x10066C620);
      }
      v49 = Logger.logObject.getter(v34);
      v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v141 = (char *)swift_slowAlloc(32, -1);
        v147 = v141;
        *(_DWORD *)v51 = 136315138;
        v133 = v51 + 4;
        v23 = (uint8_t *)objc_msgSend((id)objc_opt_self(REMCDFileAttachment), "cdEntityName");
        v52 = v37;
        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v55 = v54;

        v56 = v53;
        v37 = v52;
        v148 = sub_10001A820(v56, v55, (uint64_t *)&v147);
        a1 = v146;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Performing fetch during upsert {CDType: %s}", v51, 0xCu);
        v57 = v141;
        swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
        v5 = v145;
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v51, -1, -1);
      }

      v17 = v142;
      sub_100647450((uint64_t)v37, (uint64_t)v142);
      v59 = v58;
      v60 = swift_bridgeObjectRelease();
      if (v4)
      {
        swift_bridgeObjectRelease();
        return;
      }
      v128 = v59;
      if (!v143)
        goto LABEL_32;
      goto LABEL_38;
    }
    v147 = (char *)_swiftEmptyArrayStorage;
    v22 = &v147;
    specialized ContiguousArray.reserveCapacity(_:)(v36);
    if ((v36 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    if (a1 < 0)
      v109 = a1;
    else
      v109 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v27 = _CocoaArrayWrapper.endIndex.getter(v109);
    swift_bridgeObjectRelease();
  }
  v38 = 0;
  v23 = (uint8_t *)(a1 & 0xC000000000000001);
  while (1)
  {
    if (v36 == v38)
    {
      __break(1u);
      JUMPOUT(0x10066C514);
    }
    v39 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, a1) : *(id *)(a1 + 8 * v38 + 32);
    v40 = v39;
    v41 = sub_1005CCBAC(objc_msgSend(v40, "remObjectID"), (unint64_t *)&unk_10083AE00, off_1007D66C0);
    if (v4)
      break;
    v42 = v41;
    ++v38;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v43);
    v44 = *((_QWORD *)v147 + 2);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
    v45 = v44;
    a1 = v146;
    v46 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v42);
    v34 = specialized ContiguousArray._endMutation()(v46);
    if (v36 == v38)
    {
      v37 = v147;
      v5 = v145;
      v15 = v138;
      goto LABEL_20;
    }
  }

  v48 = v147;
  swift_bridgeObjectRelease();
  swift_release(v48);
}

void sub_10066C70C(uint64_t a1, char *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  _BOOL4 v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  char *v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  BOOL v81;
  char *v82;
  char *v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  id v95;
  id v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  id v105;
  unint64_t v106;
  char v107;
  char *v108;
  id v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  id v115;
  uint64_t v116;
  char *v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _OWORD v123[6];
  char *v124;
  __n128 v125;
  char *v126;
  __n128 v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  __n128 v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;

  v4 = v3;
  v5 = v2;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v143 = (char *)v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v144 = (char *)v123 - v11;
  v149 = type metadata accessor for UUID(0);
  v147 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v146 = (char *)v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v145 = (char *)v123 - v14;
  v15 = type metadata accessor for Logger(0);
  v140 = *(char **)(v15 - 8);
  __chkstk_darwin(v15);
  v141 = (char *)v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *((_QWORD *)a2 + 2);
  v18 = *((_QWORD *)a2 + 3);
  v148 = a2;
  v142 = *((_QWORD *)a2 + 4);
  v19 = qword_1008371E8;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(a1);
  if (v19 != -1)
    swift_once(&qword_1008371E8, sub_100331650);
  v20 = sub_10001AAA8(v15, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v18);
  v152 = v20;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter(v22);
  v24 = os_log_type_enabled(v22, (os_log_type_t)v23);
  v25 = (unint64_t)a1 >> 62;
  v153 = v5;
  v154 = a1;
  v150 = v15;
  v151 = (unint64_t)a1 >> 62;
  if (v24)
  {
    LODWORD(v138) = v23;
    v139 = v17;
    v26 = swift_slowAlloc(42, -1);
    v27 = (char *)swift_slowAlloc(96, -1);
    v155 = v27;
    *(_DWORD *)v26 = 136446978;
    v156 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    *(_WORD *)(v26 + 12) = 2048;
    v137 = v27;
    if (v25)
    {
      if (a1 < 0)
        v120 = a1;
      else
        v120 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v28 = _CocoaArrayWrapper.endIndex.getter(v120);
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v156 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2082;
    v29 = sub_1000151B0(0, (unint64_t *)&qword_100841620, off_1007D6700);
    v30 = objc_msgSend((id)swift_getObjCClassFromMetadata(v29), "description");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v156 = sub_10001A820(v31, v33, (uint64_t *)&v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2082;
    a1 = v154;
    swift_bridgeObjectRetain(v18);
    v156 = sub_10001A820(v139, v18, (uint64_t *)&v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v138, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v26, 0x2Au);
    v34 = v137;
    swift_arrayDestroy(v137, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v5 = v153;
    v15 = v150;
    v25 = v151;
  }
  else
  {

    swift_bridgeObjectRelease_n(v18, 2);
    v36 = swift_bridgeObjectRelease_n(a1, 2);
  }
  if (v25)
  {
    if (a1 < 0)
      v119 = a1;
    else
      v119 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v37 = _CocoaArrayWrapper.endIndex.getter(v119);
    v36 = swift_bridgeObjectRelease();
  }
  else
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v38 = (char *)_swiftEmptyArrayStorage;
  if (!v37)
  {
LABEL_20:
    v48 = *(_QWORD *)(v5 + 96);
    if (v48 <= 1)
    {
      if (v48)
      {
        if (v48 != 1)
          goto LABEL_79;
        swift_bridgeObjectRelease();
        v67 = Logger.logObject.getter(v66);
        v68 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v67, v68))
        {
          v69 = (uint8_t *)swift_slowAlloc(12, -1);
          v70 = (char *)swift_slowAlloc(32, -1);
          v155 = v70;
          *(_DWORD *)v69 = 136315138;
          v141 = (char *)(v69 + 4);
          v71 = objc_msgSend((id)objc_opt_self(REMCDRecurrenceRule), "cdEntityName");
          v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
          v74 = v73;

          v75 = v72;
          a1 = v154;
          v156 = sub_10001A820(v75, v74, (uint64_t *)&v155);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Skipping fetch during upsert {CDType: %s}", v69, 0xCu);
          swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1, -1);
          swift_slowDealloc(v69, -1, -1);
        }

        v60 = v148;
        v76 = v151;
        v63 = sub_1002B0994((uint64_t)_swiftEmptyArrayStorage);
        v5 = v153;
        if (!v76)
        {
LABEL_32:
          v65 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v65)
          {
LABEL_64:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
LABEL_42:
          v78 = 0;
          v129 = v5 + 24;
          v132 = v60 + 48;
          v128 = v60 + 56;
          v79 = a1 & 0xC000000000000001;
          v131 = a1 & 0xFFFFFFFFFFFFFF8;
          v130 = a1 + 32;
          v135 = &v157;
          v126 = (char *)&v156 + 4;
          v64.n128_u64[0] = 136446978;
          v125 = v64;
          v64.n128_u64[0] = 136446210;
          v136 = v64;
          v64.n128_u64[0] = 136447490;
          v123[5] = v64;
          v64.n128_u64[0] = 136447234;
          v123[4] = v64;
          v64.n128_u64[0] = 136446466;
          v127 = v64;
          v138 = "equency";
          v124 = (char *)&type metadata for Any + 8;
          v139 = v63;
          v134 = v65;
          v133 = a1 & 0xC000000000000001;
          while (1)
          {
            if (v79)
            {
              v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, a1);
              v81 = __OFADD__(v78, 1);
              v82 = (char *)(v78 + 1);
              if (v81)
                goto LABEL_77;
            }
            else
            {
              if (v78 >= *(_QWORD *)(v131 + 16))
                goto LABEL_78;
              v80 = *(id *)(v130 + 8 * v78);
              v81 = __OFADD__(v78, 1);
              v82 = (char *)(v78 + 1);
              if (v81)
              {
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
                JUMPOUT(0x10066EE3CLL);
              }
            }
            v83 = (char *)v80;
            v84 = sub_1005CCBAC(objc_msgSend(v83, "remObjectID"), (unint64_t *)&qword_100841620, off_1007D6700);
            if (v4)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return;
            }
            v85 = v84;
            v137 = v82;
            v151 = 0;

            v148 = v83;
            v86 = objc_msgSend(v83, "accountID");
            v87 = objc_msgSend(v86, "uuid");

            v88 = v145;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v87);

            v90 = UUID.uuidString.getter(v89);
            v92 = v91;
            v93 = *(void (**)(char *, uint64_t))(v147 + 8);
            v94 = v149;
            v93(v88, v149);
            v95 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
            v96 = objc_msgSend(v95, "uuid");

            v97 = v146;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v96);

            v99 = UUID.uuidString.getter(v98);
            v101 = v100;
            v93(v97, v94);
            if (v90 == v99 && v92 == v101)
            {
              swift_bridgeObjectRelease_n(v92, 2);
LABEL_54:
              __asm { BR              X10 }
            }
            v102 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v92, v99, v101, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v102 & 1) != 0)
              goto LABEL_54;
            v103 = v139;
            v104 = sub_1005D00BC((uint64_t (*)(uint64_t, unint64_t))sub_100318010, (unint64_t *)&qword_100841620, off_1007D6700);
            if (!*(_QWORD *)(v103 + 16))
              break;
            v105 = v85;
            v106 = sub_1002C672C(v105);
            if ((v107 & 1) == 0)
            {

              break;
            }
            v108 = (char *)*(id *)(*(_QWORD *)(v103 + 56) + 8 * v106);

            v109 = v105;
            v110 = Logger.logObject.getter(v109);
            v111 = static os_log_type_t.info.getter(v110);
            if (os_log_type_enabled(v110, v111))
            {
              v112 = swift_slowAlloc(22, -1);
              v113 = (_QWORD *)swift_slowAlloc(8, -1);
              v140 = (char *)swift_slowAlloc(32, -1);
              v155 = v140;
              *(_DWORD *)v112 = v127.n128_u32[0];
              v141 = v108;
              v156 = sub_10001A820(0x747265737075, 0xE600000000000000, (uint64_t *)&v155);
              v114 = v135;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v135);
              *(_WORD *)(v112 + 12) = 2114;
              v156 = (uint64_t)v109;
              v115 = v109;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v114);
              *v113 = v109;

              _os_log_impl((void *)&_mh_execute_header, v110, v111, "[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v112, 0x16u);
              v116 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v113, 1, v116);
              swift_slowDealloc(v113, -1, -1);
              v117 = v140;
              swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v117, -1, -1);
              swift_slowDealloc(v112, -1, -1);

            }
            else
            {

            }
            a1 = v154;
            v78 = (unint64_t)v137;
            v4 = v151;
            v79 = v133;
            if (v137 == (char *)v134)
              goto LABEL_64;
          }
          if (v104 != 11)
            JUMPOUT(0x10066D650);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v118 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v85);
          swift_willThrow(v118);

          return;
        }
LABEL_38:
        if (a1 < 0)
          v77 = a1;
        else
          v77 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v65 = _CocoaArrayWrapper.endIndex.getter(v77);
        v64 = swift_bridgeObjectRelease();
        if (!v65)
          goto LABEL_64;
        goto LABEL_42;
      }
    }
    else if ((unint64_t)(v48 - 2) >= 3 && v48 != 4499 && v48 != 4599)
    {
LABEL_79:
      (*((void (**)(char *, uint64_t, uint64_t, __n128))v140 + 2))(v141, v152, v15, v36);
      v121 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v122 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown mode", 12, 2uLL, v121, v122);
      __break(1u);
      JUMPOUT(0x10066EEB8);
    }
    v50 = Logger.logObject.getter(v35);
    v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (_QWORD *)swift_slowAlloc(32, -1);
      v141 = v38;
      v54 = v53;
      v155 = (char *)v53;
      *(_DWORD *)v52 = 136315138;
      v140 = (char *)(v52 + 4);
      v55 = objc_msgSend((id)objc_opt_self(REMCDRecurrenceRule), "cdEntityName");
      v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      v58 = v57;

      v156 = sub_10001A820(v56, v58, (uint64_t *)&v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Performing fetch during upsert {CDType: %s}", v52, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      v59 = v54;
      v38 = v141;
      swift_slowDealloc(v59, -1, -1);
      v5 = v153;
      swift_slowDealloc(v52, -1, -1);
    }

    v60 = v148;
    v61 = v151;
    sub_100647870((uint64_t)v38, (uint64_t)v148);
    v63 = v62;
    v64 = swift_bridgeObjectRelease();
    if (v4)
    {
      swift_bridgeObjectRelease();
      return;
    }
    a1 = v154;
    if (!v61)
      goto LABEL_32;
    goto LABEL_38;
  }
  v155 = (char *)_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v37);
  if (v37 < 0)
  {
    __break(1u);
    JUMPOUT(0x10066EDF0);
  }
  v39 = 0;
  v40 = a1 & 0xC000000000000001;
  while (1)
  {
    if (v37 == v39)
    {
      __break(1u);
      JUMPOUT(0x10066ED84);
    }
    v41 = v40
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v154)
        : *(id *)(v154 + 8 * v39 + 32);
    v42 = v41;
    v43 = sub_1005CCBAC(objc_msgSend(v42, "remObjectID"), (unint64_t *)&qword_100841620, off_1007D6700);
    if (v4)
      break;
    v44 = v43;
    ++v39;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v45);
    v46 = *((_QWORD *)v155 + 2);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
    v47 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v44);
    v35 = specialized ContiguousArray._endMutation()(v47);
    if (v37 == v39)
    {
      a1 = v154;
      v38 = v155;
      v5 = v153;
      v15 = v150;
      goto LABEL_20;
    }
  }

  v49 = v155;
  swift_bridgeObjectRelease();
  swift_release(v49);
}

void sub_10066EF4C(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  BOOL v35;
  NSObject *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  unint64_t v46;
  char v47;
  id v48;
  id v49;
  unint64_t v50;
  char v51;
  id v52;
  uint64_t v53;
  id v54;
  char v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  id v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  os_log_type_t type;
  os_log_type_t typea;
  NSObject *v97;
  os_log_t v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t (*v108)();
  os_log_t log;
  os_log_t loga;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE v114[16];
  uint64_t v115[3];
  _BYTE v116[48];
  _BYTE v117[56];
  void *v118;

  v5 = v3;
  v6 = v2;
  v7 = a2;
  v9 = a2[2];
  v10 = a2[3];
  v11 = qword_1008371E8;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(a1);
  if (v11 != -1)
    goto LABEL_71;
LABEL_2:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  log = v14;
  v16 = os_log_type_enabled(v14, v15);
  v17 = (unint64_t)a1 >> 62;
  v111 = a1;
  v101 = v6;
  v105 = (uint64_t)v7;
  v107 = (unint64_t)a1 >> 62;
  if (v16)
  {
    LOBYTE(v103) = v15;
    v4 = (uint64_t (*)())swift_slowAlloc(42, -1);
    v102 = swift_slowAlloc(96, -1);
    v115[0] = v102;
    *(_DWORD *)v4 = 136446978;
    v113 = sub_10001A820(0x7661537265746661, 0xEF6E6F6974634165, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114);
    *((_WORD *)v4 + 6) = 2048;
    v104 = v9;
    if (!v17)
    {
      v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
    goto LABEL_77;
  }

  swift_bridgeObjectRelease_n(v10, 2);
  swift_bridgeObjectRelease_n(a1, 2);
  while (1)
  {
    if (v17)
    {
      if (a1 < 0)
        v91 = a1;
      else
        v91 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v9 = _CocoaArrayWrapper.endIndex.getter(v91);
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v10 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v9)
      goto LABEL_19;
    v115[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    if ((v9 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_77:
    if (a1 < 0)
      v92 = a1;
    else
      v92 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v18 = _CocoaArrayWrapper.endIndex.getter(v92);
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v113 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114);
    swift_bridgeObjectRelease();
    *((_WORD *)v4 + 11) = 2082;
    v7 = (_QWORD *)((char *)v4 + 24);
    v19 = type metadata accessor for REMCDSavedAttachment();
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24 = v21;
    a1 = v111;
    v113 = sub_10001A820(v24, v23, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114);
    swift_bridgeObjectRelease();
    *((_WORD *)v4 + 16) = 2082;
    swift_bridgeObjectRetain(v10);
    v113 = sub_10001A820(v104, v10, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114);
    swift_bridgeObjectRelease_n(v10, 3);
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v103, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v4, 0x2Au);
    swift_arrayDestroy(v102, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v102, -1, -1);
    swift_slowDealloc(v4, -1, -1);

    v6 = v101;
    v17 = v107;
  }
  v10 = 0;
  v6 = a1 & 0xC000000000000001;
  v4 = type metadata accessor for REMCDSavedAttachment;
  while (1)
  {
    if (v9 == v10)
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_2;
    }
    v25 = v6 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1) : *(id *)(a1 + 8 * v10 + 32);
    v26 = v25;
    v27 = sub_1005CDB68(objc_msgSend(v26, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, 0xD000000000000014, (void *)0x8000000100709CD0);

    if (v5)
      break;
    ++v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
    v7 = *(_QWORD **)(v115[0] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v27);
    specialized ContiguousArray._endMutation()(v29);
    a1 = v111;
    if (v9 == v10)
    {
      v10 = v115[0];
      v6 = v101;
LABEL_19:
      v7 = (_QWORD *)v105;
      sub_1006442D0(v10, v105);
      if (v5)
      {
LABEL_20:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      v4 = v30;
      swift_bridgeObjectRelease();
      if (v107)
      {
        if (a1 < 0)
          v32 = a1;
        else
          v32 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v10 = _CocoaArrayWrapper.endIndex.getter(v32);
        swift_bridgeObjectRelease();
        if (!v10)
          goto LABEL_20;
      }
      else
      {
        v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v10)
          goto LABEL_20;
      }
      v94 = v6 + 24;
      v106 = a1 & 0xC000000000000001;
      v103 = v7 + 6;
      swift_beginAccess(v7 + 6, v115, 0, 0);
      v93 = (char *)(v7 + 7);
      swift_beginAccess(v7 + 7, &v113, 0, 0);
      v6 = 4;
      v104 = 0x8000000100709CD0;
      v108 = v4;
      v102 = v10;
      while (1)
      {
        v33 = v6 - 4;
        if (v106)
        {
          v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
          v35 = __OFADD__(v33, 1);
          v36 = (v6 - 3);
          if (v35)
            goto LABEL_70;
        }
        else
        {
          v34 = *(id *)(a1 + 8 * v6);
          v35 = __OFADD__(v33, 1);
          v36 = (v6 - 3);
          if (v35)
            goto LABEL_70;
        }
        v7 = v34;
        v37 = sub_1005CDB68(objc_msgSend(v7, "remObjectID"), (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment, 0xD000000000000014, (void *)0x8000000100709CD0);
        loga = v36;

        v38 = *v103;
        if ((*v103 & 0xC000000000000001) != 0)
        {
          if (v38 < 0)
            v39 = *v103;
          else
            v39 = v38 & 0xFFFFFFFFFFFFFF8;
          v40 = v37;
          swift_bridgeObjectRetain(v38);
          v41 = __CocoaDictionary.lookup(_:)(v40, v39);
          if (!v41)
          {

            swift_bridgeObjectRelease();
            v4 = v108;
LABEL_55:
            v9 = v37;
            v56 = Logger.logObject.getter(v9);
            v57 = static os_log_type_t.info.getter(v56);
            if (os_log_type_enabled(v56, v57))
            {
              v58 = swift_slowAlloc(12, -1);
              v59 = (uint64_t *)swift_slowAlloc(8, -1);
              *(_DWORD *)v58 = 138543362;
              *(_QWORD *)(v58 + 4) = v9;
              *v59 = v9;

              _os_log_impl((void *)&_mh_execute_header, v56, v57, "Skipping afterSaveAction() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v58, 0xCu);
              v60 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v59, 1, v60);
              v61 = v59;
              v4 = v108;
              swift_slowDealloc(v61, -1, -1);
              v62 = v58;
LABEL_60:
              swift_slowDealloc(v62, -1, -1);

              goto LABEL_32;
            }

            goto LABEL_31;
          }
          v42 = v41;
          v112 = v41;
          v43 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
          swift_unknownObjectRetain(v42);
          swift_dynamicCast(&v118, &v112, (char *)&type metadata for Swift.AnyObject + 8, v43, 7);
          v44 = v118;
          swift_unknownObjectRelease(v42);

          swift_bridgeObjectRelease();
          v4 = v108;

          if (!v44)
            goto LABEL_55;
        }
        else
        {
          if (!*(_QWORD *)(v38 + 16))
            goto LABEL_55;
          v45 = v37;
          swift_bridgeObjectRetain(v38);
          v46 = sub_1002C66DC((uint64_t)v45);
          if ((v47 & 1) == 0)
          {

            swift_bridgeObjectRelease();
            goto LABEL_55;
          }
          v48 = *(id *)(*(_QWORD *)(v38 + 56) + 8 * v46);

          swift_bridgeObjectRelease();
          if (!v48)
            goto LABEL_55;
        }
        if (!*((_QWORD *)v4 + 2))
          goto LABEL_58;
        v49 = v37;
        v50 = sub_1002C672C(v49);
        if ((v51 & 1) == 0)
        {

LABEL_58:
          v63 = v37;
          swift_retain_n(v101);
          v9 = (uint64_t)v63;
          v64 = Logger.logObject.getter(v9);
          v65 = static os_log_type_t.error.getter(v64);
          if (os_log_type_enabled(v64, v65))
          {
            v66 = swift_slowAlloc(22, -1);
            v100 = swift_slowAlloc(64, -1);
            v118 = (void *)v100;
            *(_DWORD *)v66 = 136446466;
            sub_1000184A8(v94, (uint64_t)v116);
            sub_100671124((uint64_t)v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
            v97 = v64;
            sub_1000181B8();
            v68 = v67;
            type = v65;
            v70 = v69;
            sub_100671124((uint64_t)v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
            *(_QWORD *)(v66 + 4) = sub_10001A820(v68, v70, (uint64_t *)&v118);
            swift_release_n(v101);
            *(_QWORD *)&v71 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v66 + 12) = 2080;
            v72 = objc_msgSend((id)v9, "description", v71);
            v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
            v75 = v74;

            *(_QWORD *)(v66 + 14) = sub_10001A820(v73, v75, (uint64_t *)&v118);
            a1 = v111;
            swift_bridgeObjectRelease();
            v56 = v97;
            _os_log_impl((void *)&_mh_execute_header, v97, type, "Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v66, 0x16u);
            swift_arrayDestroy(v100, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v100, -1, -1);
            v62 = v66;
            v4 = v108;
            goto LABEL_60;
          }

          swift_release_n(v101);
LABEL_31:

          goto LABEL_32;
        }
        v52 = *(id *)(*((_QWORD *)v4 + 7) + 8 * v50);

        v53 = *(_QWORD *)v93;
        v99 = v52;
        if (!*(_QWORD *)(*(_QWORD *)v93 + 16))
        {
          v76 = v52;
LABEL_64:
          v77 = v49;
          swift_retain_n(v101);
          v9 = (uint64_t)v77;
          v78 = Logger.logObject.getter(v9);
          v79 = static os_log_type_t.error.getter(v78);
          if (os_log_type_enabled(v78, v79))
          {
            v80 = swift_slowAlloc(22, -1);
            v98 = (os_log_t)swift_slowAlloc(64, -1);
            v118 = v98;
            *(_DWORD *)v80 = 136446466;
            sub_1000184A8(v94, (uint64_t)v117);
            sub_100671124((uint64_t)v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
            typea = v79;
            sub_1000181B8();
            v82 = v81;
            v84 = v83;
            sub_100671124((uint64_t)v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
            *(_QWORD *)(v80 + 4) = sub_10001A820(v82, v84, (uint64_t *)&v118);
            swift_release_n(v101);
            *(_QWORD *)&v85 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v80 + 12) = 2080;
            v86 = objc_msgSend((id)v9, "description", v85);
            v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
            v89 = v88;

            *(_QWORD *)(v80 + 14) = sub_10001A820(v87, v89, (uint64_t *)&v118);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v78, typea, "Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v80, 0x16u);
            swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v98, -1, -1);
            v90 = v80;
            a1 = v111;
            swift_slowDealloc(v90, -1, -1);

          }
          else
          {

            swift_release_n(v101);
          }
          v4 = v108;
          goto LABEL_32;
        }
        v9 = (uint64_t)v49;
        v54 = v52;
        swift_bridgeObjectRetain(v53);
        sub_1002C66DC(v9);
        if ((v55 & 1) == 0)
        {

          swift_bridgeObjectRelease();
          v52 = v99;
          goto LABEL_64;
        }

        swift_bridgeObjectRelease();
LABEL_32:
        v10 = v102;
        ++v6;
        if (loga == (os_log_t)v102)
          goto LABEL_20;
      }
    }
  }
  v31 = v115[0];
  swift_bridgeObjectRelease();
  swift_release(v31);
}

void sub_10066FBE4(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  BOOL v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  char v47;
  id v48;
  uint64_t v49;
  char v50;
  id v51;
  uint64_t v52;
  char v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  double v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  os_log_type_t type;
  uint64_t typea;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  NSObject *log;
  uint64_t v98;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[16];
  uint64_t v109[3];
  _BYTE v110[48];
  _BYTE v111[56];
  void *v112;

  v7 = v6;
  v8 = a2;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(NSObject **)(a2 + 24);
  v12 = qword_1008371E8;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(a1);
  if (v12 != -1)
    goto LABEL_69;
LABEL_2:
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_100845DC0);
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain(v11);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter(v15);
  v17 = (unint64_t)a1 >> 62;
  v100 = v8;
  if (os_log_type_enabled(v15, v16))
  {
    v95 = v10;
    v8 = swift_slowAlloc(42, -1);
    v93 = swift_slowAlloc(96, -1);
    v109[0] = v93;
    *(_DWORD *)v8 = 136446978;
    v107 = sub_10001A820(0x7661537265746661, 0xEF6E6F6974634165, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
    *(_WORD *)(v8 + 12) = 2048;
    log = v15;
    LOBYTE(v94) = v16;
    if (!v17)
    {
      v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
    goto LABEL_75;
  }

  swift_bridgeObjectRelease_n(v11, 2);
  v24 = swift_bridgeObjectRelease_n(a1, 2);
  while (1)
  {
    if (v17)
    {
      v84 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v8 = _CocoaArrayWrapper.endIndex.getter(v84);
      v24 = swift_bridgeObjectRelease(a1);
    }
    else
    {
      v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v10 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v8)
      break;
    v109[0] = (uint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    if ((v8 & 0x8000000000000000) == 0)
    {
      v10 = 0;
      while (v8 != v10)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
        else
          v25 = *(id *)(a1 + 8 * v10 + 32);
        v26 = v25;
        v11 = sub_1005CCBAC(objc_msgSend(v26, "remObjectID"), a3, a4);

        if (v7)
        {
          v31 = v109[0];
          swift_bridgeObjectRelease(a1);
          swift_release(v31);
          return;
        }
        ++v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v28 = *(_QWORD *)(v109[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
        v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v11);
        specialized ContiguousArray._endMutation()(v29);
        if (v8 == v10)
        {
          v10 = v109[0];
          v17 = (unint64_t)a1 >> 62;
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      swift_once(&qword_1008371E8, sub_100331650);
      goto LABEL_2;
    }
    __break(1u);
LABEL_75:
    if (a1 < 0)
      v85 = a1;
    else
      v85 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v18 = _CocoaArrayWrapper.endIndex.getter(v85);
    swift_bridgeObjectRelease(a1);
LABEL_5:
    swift_bridgeObjectRelease(a1);
    v107 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
    swift_bridgeObjectRelease(a1);
    *(_WORD *)(v8 + 22) = 2082;
    v19 = sub_1000151B0(0, a3, a4);
    v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v19), "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v107 = sub_10001A820(v21, v23, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v8 + 32) = 2082;
    swift_bridgeObjectRetain(v11);
    v107 = sub_10001A820(v95, (unint64_t)v11, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
    swift_bridgeObjectRelease_n(v11, 3);
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v94, "[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}", (uint8_t *)v8, 0x2Au);
    swift_arrayDestroy(v93, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v17 = (unint64_t)a1 >> 62;
  }
LABEL_19:
  v8 = v100;
  v30 = ((uint64_t (*)(uint64_t, uint64_t, __n128))a5)(v10, v100, v24);
  if (v7)
  {
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v10);
    return;
  }
  v32 = v30;
  swift_bridgeObjectRelease(v10);
  if (v17)
  {
    if (a1 < 0)
      v34 = a1;
    else
      v34 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v33 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v33 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v102 = a1;
  if (v33)
  {
    v88 = v98 + 24;
    a5 = (uint64_t *)(v100 + 48);
    v101 = a1 & 0xC000000000000001;
    swift_beginAccess(v8 + 48, v109, 0, 0);
    v87 = v8 + 56;
    swift_beginAccess(v8 + 56, &v107, 0, 0);
    a1 = 4;
    v93 = 138543362;
    v94 = (char *)&type metadata for Swift.AnyObject + 8;
    v95 = v32;
    log = v33;
    while (1)
    {
      v35 = a1 - 4;
      if (v101)
      {
        v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1 - 4, v102);
        v37 = __OFADD__(v35, 1);
        v38 = a1 - 3;
        if (v37)
          goto LABEL_68;
      }
      else
      {
        v36 = *(id *)(v102 + 8 * a1);
        v37 = __OFADD__(v35, 1);
        v38 = a1 - 3;
        if (v37)
          goto LABEL_68;
      }
      v39 = v36;
      v11 = sub_1005CCBAC(objc_msgSend(v39, "remObjectID"), a3, a4);
      v103 = v38;

      v40 = *a5;
      if ((*a5 & 0xC000000000000001) != 0)
      {
        if (v40 < 0)
          v41 = *a5;
        else
          v41 = v40 & 0xFFFFFFFFFFFFFF8;
        v8 = v11;
        swift_bridgeObjectRetain(v40);
        v42 = __CocoaDictionary.lookup(_:)(v8, v41);
        if (!v42)
        {

          swift_bridgeObjectRelease(v40);
          v33 = (uint64_t)log;
          goto LABEL_54;
        }
        v43 = v42;
        v106 = v42;
        v44 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
        swift_unknownObjectRetain(v43);
        swift_dynamicCast(&v112, &v106, v94, v44, 7);
        v45 = v112;
        swift_unknownObjectRelease(v43);

        swift_bridgeObjectRelease(v40);
        v33 = (uint64_t)log;

        if (!v45)
          goto LABEL_54;
      }
      else
      {
        if (!*(_QWORD *)(v40 + 16))
          goto LABEL_54;
        v8 = v11;
        swift_bridgeObjectRetain(v40);
        v46 = sub_1002C66DC(v8);
        if ((v47 & 1) == 0)
        {

          swift_bridgeObjectRelease(v40);
LABEL_54:
          v8 = v11;
          v54 = Logger.logObject.getter(v8);
          v55 = static os_log_type_t.info.getter(v54);
          v10 = v55;
          if (os_log_type_enabled(v54, v55))
          {
            v56 = swift_slowAlloc(12, -1);
            v11 = swift_slowAlloc(8, -1);
            *(_DWORD *)v56 = 138543362;
            *(_QWORD *)(v56 + 4) = v8;
            v11->isa = (Class)v8;

            _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v10, "Skipping afterSaveAction() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}", (uint8_t *)v56, 0xCu);
            v57 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v11, 1, v57);
            swift_slowDealloc(v11, -1, -1);
            v58 = v56;
            v32 = v95;
            swift_slowDealloc(v58, -1, -1);

          }
          else
          {

          }
          goto LABEL_31;
        }
        v48 = *(id *)(*(_QWORD *)(v40 + 56) + 8 * v46);

        swift_bridgeObjectRelease(v40);
        if (!v48)
          goto LABEL_54;
      }
      if (!*(_QWORD *)(v32 + 16))
        goto LABEL_57;
      v8 = v11;
      v49 = a6();
      if ((v50 & 1) == 0)
        break;
      v51 = *(id *)(*(_QWORD *)(v32 + 56) + 8 * v49);

      v52 = *(_QWORD *)v87;
      v91 = v51;
      if (*(_QWORD *)(*(_QWORD *)v87 + 16))
      {
        v10 = (uint64_t)(id)v8;
        v11 = v51;
        swift_bridgeObjectRetain(v52);
        sub_1002C66DC(v10);
        if ((v53 & 1) != 0)
        {

          swift_bridgeObjectRelease(v52);
          goto LABEL_31;
        }

        swift_bridgeObjectRelease(v52);
      }
      else
      {
        v71 = v51;
      }
      v72 = (id)v8;
      v10 = v98;
      swift_retain_n(v98);
      v73 = v72;
      v11 = Logger.logObject.getter(v73);
      v74 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v11, v74))
      {

        swift_release_n(v98);
        goto LABEL_65;
      }
      v8 = swift_slowAlloc(22, -1);
      typea = swift_slowAlloc(64, -1);
      v112 = (void *)typea;
      *(_DWORD *)v8 = 136446466;
      sub_1000184A8(v88, (uint64_t)v111);
      sub_100671124((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
      v86 = v74;
      sub_1000181B8();
      v76 = v75;
      v78 = v77;
      sub_100671124((uint64_t)v111, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
      *(_QWORD *)(v8 + 4) = sub_10001A820(v76, v78, (uint64_t *)&v112);
      swift_release_n(v98);
      *(_QWORD *)&v79 = swift_bridgeObjectRelease(v78).n128_u64[0];
      *(_WORD *)(v8 + 12) = 2080;
      v80 = objc_msgSend(v73, "description", v79);
      v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
      v10 = v82;

      v83 = v81;
      v32 = v95;
      *(_QWORD *)(v8 + 14) = sub_10001A820(v83, v10, (uint64_t *)&v112);

      swift_bridgeObjectRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v11, v86, "Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(typea, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typea, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      v33 = (uint64_t)log;
LABEL_31:
      ++a1;
      if (v103 == v33)
        goto LABEL_66;
    }

LABEL_57:
    v59 = v11;
    v10 = v98;
    swift_retain_n(v98);
    v11 = v59;
    v60 = Logger.logObject.getter(v11);
    v61 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v60, v61))
    {

      swift_release_n(v98);
LABEL_65:

      v33 = (uint64_t)log;
      goto LABEL_31;
    }
    v8 = swift_slowAlloc(22, -1);
    v92 = swift_slowAlloc(64, -1);
    v112 = (void *)v92;
    *(_DWORD *)v8 = 136446466;
    sub_1000184A8(v88, (uint64_t)v110);
    sub_100671124((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_10001BB24);
    type = v61;
    sub_1000181B8();
    v63 = v62;
    v65 = v64;
    sub_100671124((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))sub_1000178E8);
    *(_QWORD *)(v8 + 4) = sub_10001A820(v63, v65, (uint64_t *)&v112);
    swift_release_n(v98);
    *(_QWORD *)&v66 = swift_bridgeObjectRelease(v65).n128_u64[0];
    *(_WORD *)(v8 + 12) = 2080;
    v67 = -[NSObject description](v11, "description", v66);
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    v10 = v69;

    v70 = v68;
    v32 = v95;
    *(_QWORD *)(v8 + 14) = sub_10001A820(v70, v10, (uint64_t *)&v112);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v60, type, "Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v92, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v33 = (uint64_t)log;
    goto LABEL_31;
  }
LABEL_66:
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v102);
}

_QWORD *sub_10067083C(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DC2E0, (uint64_t)sub_1002C9060, (uint64_t (*)(void))sub_1005CAF9C, (uint64_t *)&unk_100851918);
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_1006708F8(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DC4D8, (uint64_t)sub_1002C9084, (uint64_t (*)(void))sub_1005CAF9C, &qword_1008519B8);
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_1006709B4(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = sub_1002C66DC((uint64_t)v3);
    if ((v6 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5));
  }

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100670A38(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DB6D0, (uint64_t)sub_1002C9000, (uint64_t (*)(void))sub_1005CA94C, &qword_100851C20);
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_100670AF4(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = objc_msgSend(a1, "remObjectID");
  v4 = v3;
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1002C66DC((uint64_t)v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v7 = 0;
  }

  v8 = sub_1005CF5F0(v7, (uint64_t)&off_1007DBB38, (uint64_t)sub_1002C9024, (uint64_t (*)(void))sub_1005CB7D8, &qword_100851C50);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_100670BB0(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  Class isa;
  double v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  const char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  _QWORD *v57;

  v3 = v2;
  v5 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_39;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v7)
  {
    v51 = v1;
    v57 = _swiftEmptyArrayStorage;
    v8 = a1 & 0xC000000000000001;
    swift_bridgeObjectRetain(a1);
    v9 = 4;
    v52 = a1 & 0xC000000000000001;
    while (1)
    {
      v10 = v8
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1)
          : *(id *)(a1 + 8 * v9);
      v1 = v10;
      v11 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      if ((objc_msgSend(v10, "markedForRemoval") & 1) != 0)
      {

      }
      else
      {
        v12 = v1;
        v13 = sub_1005CCBAC(objc_msgSend(v12, "remObjectID"), &qword_10083AA30, off_1007D6658);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          return;
        }
        v14 = v13;

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v17 = v57[2];
        v16 = v57[3];
        if (v17 >= v16 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
        v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
        specialized Array._endMutation()(v18);
        v3 = 0;
        v8 = v52;
      }
      ++v9;
      if (v11 == v7)
      {
        swift_bridgeObjectRelease();
        v19 = v57;
        v20 = v57[2];
        if (v20)
        {
          v52 = v3;
          v57 = _swiftEmptyArrayStorage;
          sub_1001C1B0C(0, v20, 0);
          v21 = 0;
          do
          {
            v22 = (id)v19[v21 + 4];
            v23 = objc_msgSend(v22, "uuid");
            v24 = v53;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

            v26 = UUID.uuidString.getter(v25);
            v28 = v27;
            (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v55);

            v29 = v57;
            if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
            {
              sub_1001C1B0C(0, v29[2] + 1, 1);
              v29 = v57;
            }
            v31 = v29[2];
            v30 = v29[3];
            if (v31 >= v30 >> 1)
            {
              sub_1001C1B0C(v30 > 1, v31 + 1, 1);
              v29 = v57;
            }
            ++v21;
            v29[2] = v31 + 1;
            v32 = &v29[2 * v31];
            v32[4] = v26;
            v32[5] = v28;
          }
          while (v20 != v21);
        }
        swift_bridgeObjectRelease();
        v56 = 0;
        v33 = (void *)v51[3];
        isa = Array._bridgeToObjectiveC()().super.isa;
        *(_QWORD *)&v35 = swift_bridgeObjectRelease().n128_u64[0];
        v57 = 0;
        LOBYTE(v33) = objc_msgSend(v33, "createAccountStoresWithIdentifiers:didAddNewStores:error:", isa, &v56, &v57, v35);

        v36 = v57;
        if ((v33 & 1) == 0)
        {
          v46 = v57;
          _convertNSErrorToError(_:)(v36);

          swift_willThrow(v47);
          return;
        }
        v37 = v56;
        v38 = qword_1008379D0;
        v39 = v57;
        if (v37 == 1)
        {
          if (v38 != -1)
            swift_once(&qword_1008379D0, sub_100651BE4);
          v40 = type metadata accessor for Logger(0);
          v41 = sub_10001AAA8(v40, (uint64_t)qword_1008516D0);
          v42 = Logger.logObject.getter(v41);
          v43 = static os_log_type_t.default.getter(v42);
          if (os_log_type_enabled(v42, v43))
          {
            v44 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v44 = 0;
            v45 = "RDDatabaseSaver: createMissingAccountStores did add some new stores.";
            goto LABEL_35;
          }
        }
        else
        {
          if (v38 != -1)
            swift_once(&qword_1008379D0, sub_100651BE4);
          v48 = type metadata accessor for Logger(0);
          v49 = sub_10001AAA8(v48, (uint64_t)qword_1008516D0);
          v42 = Logger.logObject.getter(v49);
          v43 = static os_log_type_t.info.getter(v42);
          if (os_log_type_enabled(v42, v43))
          {
            v44 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v44 = 0;
            v45 = "RDDatabaseSaver: createMissingAccountStores did not add any new store because stores for all accounts "
                  "are already present.";
LABEL_35:
            _os_log_impl((void *)&_mh_execute_header, v42, v43, v45, v44, 2u);
            swift_slowDealloc(v44, -1, -1);
          }
        }

        return;
      }
    }
    __break(1u);
LABEL_39:
    if (a1 < 0)
      v50 = a1;
    else
      v50 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease();
  }
}

void sub_1006710D8(_QWORD *a1)
{
  uint64_t v1;

  sub_100652168(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_BYTE *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144));
}

uint64_t sub_100671124(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32));
  return a1;
}

void sub_100671164()
{
  sub_100331A50();
}

id sub_100671178()
{
  uint64_t v0;

  return sub_1006531E0(*(void **)(v0 + 16));
}

double sub_100671190(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char **v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  Class isa;
  double v43;
  unsigned int v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  double result;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  char v76[16];
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80[3];
  _QWORD *v81;

  v4 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  __chkstk_darwin(v4);
  v70 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
LABEL_41:
    if (a1 < 0)
      v65 = a1;
    else
      v65 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v65);
    if (v6)
    {
LABEL_3:
      v66[1] = a2;
      v7 = 0;
      v8 = a1 & 0xC000000000000001;
      v9 = _swiftEmptyArrayStorage;
      v10 = 4;
      v11 = &selRef_rd_isExcludedFromBackup;
      v68 = v6;
      v69 = a1;
      v67 = a1 & 0xC000000000000001;
      do
      {
        if (v8)
          v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a1);
        else
          v12 = *(id *)(a1 + 8 * v10);
        a2 = v12;
        v13 = v10 - 3;
        if (__OFADD__(v10 - 4, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        if ((objc_msgSend(v12, v11[266]) & 1) != 0)
        {
          v14 = a2;
          v15 = sub_1005CCBAC(objc_msgSend(v14, "remObjectID"), &qword_10083AA30, off_1007D6658);
          v16 = v7;
          if (v7)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_34;
          }
          v17 = v15;
          v73 = 0;

          v18 = objc_msgSend(v17, "uuid");
          v19 = v70;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

          v21 = UUID.uuidString.getter(v20);
          v23 = v22;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v72);
          v9 = v81;
          if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
            v9 = sub_1002C8224(0, v9[2] + 1, 1, v9);
          v25 = v9[2];
          v24 = v9[3];
          if (v25 >= v24 >> 1)
            v9 = sub_1002C8224((_QWORD *)(v24 > 1), v25 + 1, 1, v9);
          v9[2] = v25 + 1;
          v26 = &v9[2 * v25];
          v26[4] = v21;
          v26[5] = v23;

          v81 = v9;
          v6 = v68;
          a1 = v69;
          v7 = v73;
          v8 = v67;
          v11 = &selRef_rd_isExcludedFromBackup;
        }
        else
        {

        }
        ++v10;
      }
      while (v13 != v6);
      swift_bridgeObjectRelease();
      if (!v9[2])
        goto LABEL_46;
      goto LABEL_18;
    }
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v6)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  if (!_swiftEmptyArrayStorage[2])
  {
LABEL_46:
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
    return result;
  }
LABEL_18:
  v27 = sub_10001853C();
  if (v28)
    v29 = v27;
  else
    v29 = 7104878;
  if (v28)
    v30 = v28;
  else
    v30 = 0xE300000000000000;
  if (qword_1008379D0 != -1)
    swift_once(&qword_1008379D0, sub_100651BE4);
  v31 = type metadata accessor for Logger(0);
  sub_10001AAA8(v31, (uint64_t)qword_1008516D0);
  swift_bridgeObjectRetain_n(v30, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(22, -1);
    v73 = swift_slowAlloc(64, -1);
    v80[0] = v73;
    *(_DWORD *)v35 = 136446466;
    swift_bridgeObjectRetain(v30);
    v77 = sub_10001A820(v29, v30, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
    swift_bridgeObjectRelease_n(v30, 3);
    *(_WORD *)(v35 + 12) = 2082;
    swift_beginAccess(&v81, &v77, 0, 0);
    swift_bridgeObjectRetain(v81);
    v37 = Array.description.getter(v36, &type metadata for String);
    v39 = v38;
    swift_bridgeObjectRelease();
    v79 = (id)sub_10001A820(v37, v39, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "RDDatabaseSaver: These accounts are marked for removal {clientIdentity: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v35, 0x16u);
    v40 = v73;
    swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v30, 2);
  }
  v41 = *(void **)(v66[2] + 24);
  swift_beginAccess(&v81, v80, 0, 0);
  swift_bridgeObjectRetain(v81);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
  v79 = 0;
  v44 = objc_msgSend(v41, "removeAccountStoresWithIdentifiers:error:", isa, &v79, v43);

  v45 = v79;
  if (v44)
  {
    swift_bridgeObjectRetain(v30);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(22, -1);
      v49 = (void *)swift_slowAlloc(64, -1);
      v79 = v49;
      *(_DWORD *)v48 = 136446466;
      swift_bridgeObjectRetain(v30);
      v74 = sub_10001A820(v29, v30, (uint64_t *)&v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
      swift_bridgeObjectRelease_n(v30, 3);
      *(_WORD *)(v48 + 12) = 2082;
      swift_bridgeObjectRetain(v81);
      v51 = Array.description.getter(v50, &type metadata for String);
      v53 = v52;
      swift_bridgeObjectRelease();
      v74 = sub_10001A820(v51, v53, (uint64_t *)&v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "RDDatabaseSaver: Removed account stores {clientIdentity: %{public}s, accountIdentifiers: %{public}s}", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();

      *(_QWORD *)&result = swift_bridgeObjectRelease_n(v30, 2).n128_u64[0];
    }
  }
  else
  {
    v55 = v79;
    swift_bridgeObjectRelease();
    v16 = _convertNSErrorToError(_:)(v45);

    swift_willThrow(v56);
    swift_bridgeObjectRelease();
LABEL_34:
    if (qword_1008379D0 != -1)
      swift_once(&qword_1008379D0, sub_100651BE4);
    v57 = type metadata accessor for Logger(0);
    sub_10001AAA8(v57, (uint64_t)qword_1008516D0);
    swift_errorRetain(v16);
    v58 = swift_errorRetain(v16);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = (_QWORD *)swift_slowAlloc(32, -1);
      v81 = v62;
      *(_DWORD *)v61 = 136446210;
      swift_getErrorValue(v16, v76, v75);
      v63 = Error.rem_errorDescription.getter(v75[1], v75[2]);
      v79 = (id)sub_10001A820(v63, v64, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80);
      swift_bridgeObjectRelease();
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "RDDatabaseSaver: Error performing removeAccountStores(withIdentifiers:). {error: %{public}s}", v61, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      swift_errorRelease(v16);
    }
    else
    {
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      swift_errorRelease(v16);

    }
  }
  return result;
}

double sub_100671A38(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851840, &qword_100851848, &qword_100851850);
}

uint64_t sub_100671A70()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100671A98()
{
  return sub_100671BFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1005DF3C4);
}

void sub_100671AB8()
{
  uint64_t *v0;

  sub_1005E1FA8(v0[2], v0[3], v0[4]);
}

void sub_100671AD8()
{
  uint64_t *v0;

  sub_1005E5B8C(v0[2], v0[3], v0[4]);
}

void sub_100671AF8()
{
  uint64_t *v0;

  sub_1005E7794(v0[2], v0[3], v0[4]);
}

BOOL sub_100671B14(_QWORD *a1)
{
  uint64_t v1;

  return sub_100658ED0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t))sub_10065F274);
}

void sub_100671B40(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_10065F330, a2);
}

unint64_t sub_100671B60()
{
  unint64_t result;

  result = qword_100851858;
  if (!qword_100851858)
  {
    result = swift_getWitnessTable(&unk_1006B8264, &type metadata for CDIngestionValidationError);
    atomic_store(result, (unint64_t *)&qword_100851858);
  }
  return result;
}

double sub_100671BA4(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851888, &qword_100851890, &qword_100851898);
}

uint64_t sub_100671BE0()
{
  return sub_100671BFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1005DF7E0);
}

uint64_t sub_100671BFC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_100671C24()
{
  uint64_t *v0;

  sub_1005E2354(v0[2], v0[3], v0[4]);
}

void sub_100671C44()
{
  uint64_t *v0;

  sub_1005E5F1C(v0[2], v0[3], v0[4]);
}

void sub_100671C64()
{
  uint64_t *v0;

  sub_1005E7B24(v0[2], v0[3], v0[4]);
}

BOOL sub_100671C80(_QWORD *a1)
{
  uint64_t v1;

  return sub_100658ED0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t))sub_10065F7A0);
}

void sub_100671CA4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_10065F85C, a2);
}

double sub_100671CC4(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_1008518D8, &qword_1008518E0, &qword_1008518E8);
}

void sub_100671D00()
{
  sub_100671D1C((void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10060761C);
}

void sub_100671D1C(void (*a1)(uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t *v1;

  sub_1005DFBFC(v1[2], v1[3], v1[4], v1[5], v1[6], a1);
}

void sub_100671D44()
{
  uint64_t *v0;

  sub_1005E2700(v0[2], v0[3], v0[4]);
}

void sub_100671D64()
{
  uint64_t *v0;

  sub_1005E62AC(v0[2], v0[3], v0[4]);
}

void sub_100671D84()
{
  uint64_t *v0;

  sub_1005E7EB4(v0[2], v0[3], v0[4]);
}

BOOL sub_100671DA0(void **a1)
{
  uint64_t v1;

  return sub_10065919C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&type metadata for REMListSectionStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CB3C4, &qword_1008518C8);
}

void sub_100671DD4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_10065FCCC, a2);
}

double sub_100671DF4(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851980, &qword_100851988, &qword_100851990);
}

void sub_100671E30()
{
  sub_100671D1C((void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100609C00);
}

void sub_100671E50()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10062A838);
}

void sub_100671E78()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100637C74);
}

void sub_100671EA0()
{
  uint64_t *v0;

  sub_1005E8244(v0[2], v0[3], v0[4]);
}

BOOL sub_100671EBC(void **a1)
{
  uint64_t v1;

  return sub_10065919C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&type metadata for REMTemplateStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CAB6C, &qword_100851908);
}

BOOL sub_100671EF0(_QWORD *a1)
{
  uint64_t v1;

  return sub_100659218(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_10067083C);
}

void sub_100671F14(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_100660184, a2);
}

double sub_100671F34(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851948, &qword_100851950, &qword_100851958);
}

uint64_t sub_100671F68()
{
  return sub_100671F8C((uint64_t)sub_1005EDB60, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

uint64_t sub_100671F8C(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v2;

  return a2(v2[2], v2[3], v2[4], v2[5], v2[6], a1);
}

void sub_100671FB8()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10061BABC);
}

void sub_100671FE0()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100635B94);
}

void sub_100672008()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10063FBA4);
}

BOOL sub_10067202C(_QWORD *a1)
{
  uint64_t v1;

  return sub_100658ED0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t))sub_10065B89C);
}

void sub_100672050(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_10065B920, a2);
}

double sub_100672070(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_1008519C8, &qword_1008519D0, &qword_1008519D8);
}

void sub_1006720AC()
{
  sub_100671D1C((void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10060C4D0);
}

void sub_1006720CC()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10062C428);
}

void sub_1006720F4()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1006394E0);
}

void sub_10067211C()
{
  uint64_t *v0;

  sub_1005E85D4(v0[2], v0[3], v0[4]);
}

BOOL sub_100672138(void **a1)
{
  uint64_t v1;

  return sub_10065919C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&type metadata for REMSmartListStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CAD84, &qword_1008519B0);
}

BOOL sub_10067216C(_QWORD *a1)
{
  uint64_t v1;

  return sub_100659218(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_1006708F8);
}

void sub_100672190(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_1006607E4, a2);
}

double sub_1006721B0(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851A38, (unint64_t *)&unk_100851A40, &qword_10083FEF0);
}

void sub_1006721EC()
{
  sub_100671D1C((void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10060EE5C);
}

void sub_10067220C()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10062E19C);
}

void sub_100672234()
{
  uint64_t *v0;

  sub_1005E663C(v0[2], v0[3], v0[4]);
}

void sub_100672254()
{
  uint64_t *v0;

  sub_1005E8948(v0[2], v0[3], v0[4]);
}

BOOL sub_100672270(void **a1)
{
  uint64_t v1;

  return sub_10065919C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&type metadata for REMSavedReminderStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CB5DC, &qword_1008519F8);
}

BOOL sub_1006722A4(void **a1)
{
  uint64_t v1;

  return sub_100658F14(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1006722C0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_100660F44, a2);
}

double sub_1006722E0(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851A20, &qword_100851A28, &qword_100851A30);
}

uint64_t sub_10067231C()
{
  return sub_100671F8C((uint64_t)sub_1005E904C, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_100672344()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100618498);
}

void sub_10067236C()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100634FCC);
}

void sub_100672394()
{
  uint64_t v0;

  sub_1005E69CC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_1006723B0@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E1888;
  return v2;
}

void sub_1006723E8()
{
  sub_100671D1C((void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100611ACC);
}

void sub_100672408()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10062FC50);
}

void sub_100672430()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10063B7E0);
}

void sub_100672458()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100642B24);
}

BOOL sub_10067247C(_QWORD *a1)
{
  uint64_t v1;

  return sub_100658ED0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t))sub_100661758);
}

void sub_1006724A0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_100661814, a2);
}

double sub_1006724C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851A98, &qword_100851AA0, (uint64_t *)&unk_100851AA8);
}

uint64_t sub_1006724F4()
{
  return sub_100671F8C((uint64_t)sub_1005F9210, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_10067251C()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10061EEE4);
}

void sub_100672544()
{
  uint64_t *v0;

  sub_1005E3F7C(v0[2], v0[3], v0[4]);
}

void sub_100672564()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], (unint64_t *)&unk_1008398F0, off_1007D6660, (uint64_t *)sub_1006463D0, (uint64_t (*)(void))sub_1002C672C);
}

id sub_1006725A0@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E1978;
  return v2;
}

double sub_1006725D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), (uint64_t *)&unk_100851AD0, (unint64_t *)&unk_10083A310, (uint64_t *)&unk_100851AE0);
}

uint64_t sub_100672608()
{
  return sub_100671F8C((uint64_t)sub_1005FBBFC, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_100672630()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1006209CC);
}

void sub_100672658()
{
  uint64_t *v0;

  sub_1005E42FC(v0[2], v0[3], v0[4]);
}

void sub_100672678()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], &qword_100840020, off_1007D6690, (uint64_t *)sub_1006467F0, (uint64_t (*)(void))sub_1002C672C);
}

id sub_1006726B4@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E19A0;
  return v2;
}

double sub_1006726E8(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851B08, &qword_100851B10, (uint64_t *)&unk_100851B18);
}

uint64_t sub_100672724()
{
  return sub_100671F8C((uint64_t)sub_100665004, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DEC58);
}

void sub_10067274C()
{
  uint64_t *v0;

  sub_1005E1158(v0[2], v0[3], v0[4]);
}

void sub_10067276C()
{
  uint64_t *v0;

  sub_1005E467C(v0[2], v0[3], v0[4]);
}

void sub_10067278C()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], &qword_100845598, off_1007D6728, (uint64_t *)sub_100646C10, (uint64_t (*)(void))sub_1002C672C);
}

id sub_1006727C8@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E19C8;
  return v2;
}

double sub_1006727FC(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851B40, &qword_100851B48, (uint64_t *)&unk_100851B50);
}

uint64_t sub_100672838()
{
  return sub_100671F8C((uint64_t)sub_10066774C, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DEC58);
}

void sub_100672860()
{
  uint64_t *v0;

  sub_1005E14EC(v0[2], v0[3], v0[4]);
}

void sub_100672880()
{
  uint64_t *v0;

  sub_1005E49FC(v0[2], v0[3], v0[4]);
}

void sub_1006728A0()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], (unint64_t *)&unk_1008455A0, off_1007D66D8, (uint64_t *)sub_100647030, (uint64_t (*)(void))sub_1002C672C);
}

id sub_1006728DC@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E19F0;
  return v2;
}

double sub_100672910(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851B78, &qword_100851B80, (uint64_t *)&unk_100851B88);
}

uint64_t sub_10067294C()
{
  return sub_100671F8C((uint64_t)sub_100669CFC, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DEC58);
}

void sub_100672974()
{
  uint64_t *v0;

  sub_1005E1880(v0[2], v0[3], v0[4]);
}

void sub_100672994()
{
  uint64_t *v0;

  sub_1005E4D7C(v0[2], v0[3], v0[4]);
}

void sub_1006729B4()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], (unint64_t *)&unk_10083AE00, off_1007D66C0, (uint64_t *)sub_100647450, (uint64_t (*)(void))sub_1002C672C);
}

id sub_1006729F0@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E1A18;
  return v2;
}

double sub_100672A24(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851BB0, &qword_100851BB8, (uint64_t *)&unk_100851BC0);
}

uint64_t sub_100672A58()
{
  return sub_100671F8C((uint64_t)sub_1005EB3E0, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_100672A80()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100619FD4);
}

void sub_100672AA8()
{
  uint64_t *v0;

  sub_1005E2DFC(v0[2], v0[3], v0[4]);
}

void sub_100672AC8()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t *)sub_100644B10, (uint64_t (*)(void))sub_1002C672C);
}

id sub_100672B04@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E18B0;
  return v2;
}

double sub_100672B38(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851BE8, &qword_100851BF0, &qword_100851BF8);
}

uint64_t sub_100672B74()
{
  return sub_100671F8C((uint64_t)sub_10066C70C, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DEC58);
}

void sub_100672B9C()
{
  uint64_t *v0;

  sub_1005E1C14(v0[2], v0[3], v0[4]);
}

void sub_100672BBC()
{
  uint64_t *v0;

  sub_1005E50FC(v0[2], v0[3], v0[4]);
}

void sub_100672BDC()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], (unint64_t *)&qword_100841620, off_1007D6700, (uint64_t *)sub_100647870, (uint64_t (*)(void))sub_1002C672C);
}

id sub_100672C18@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E1A40;
  return v2;
}

double sub_100672C4C(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_accountID, &qword_100851C30, (unint64_t *)&unk_100851C38, &qword_10083FEA0);
}

void sub_100672C88()
{
  sub_100671D1C((void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100613EE8);
}

void sub_100672CA8()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100631974);
}

void sub_100672CD0()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10063C250);
}

void sub_100672CF8()
{
  uint64_t *v0;

  sub_1005E8CD8(v0[2], v0[3], v0[4]);
}

BOOL sub_100672D14(_QWORD *a1)
{
  uint64_t v1;

  return sub_100658ED0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t))sub_100661C8C);
}

BOOL sub_100672D38(_QWORD *a1)
{
  uint64_t v1;

  return sub_100659218(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_100670A38);
}

void sub_100672D5C(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_10065925C(a1, *(_QWORD *)(v2 + 24), a2);
}

double sub_100672D74(uint64_t a1, void **a2)
{
  return sub_100664ECC(a1, *a2, (SEL *)&selRef_objectID, &qword_100851C60, &qword_100851C68, &qword_10083FFE0);
}

void sub_100672DB0()
{
  sub_100671D1C((void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10061603C);
}

void sub_100672DD0()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1006333B4);
}

void sub_100672DF8()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10063DBC0);
}

void sub_100672E20()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1006436D8);
}

BOOL sub_100672E44(void **a1)
{
  uint64_t v1;

  return sub_10065919C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&type metadata for REMAccountStorageCDIngestor.ValueKey, (uint64_t (*)(void))sub_1005CA540, &qword_100851C48);
}

BOOL sub_100672E78(_QWORD *a1)
{
  uint64_t v1;

  return sub_100659218(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_100670AF4);
}

void sub_100672E9C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_1006622A4, a2);
}

double sub_100672EBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851C98, (unint64_t *)&unk_100851CA0, &qword_10083A230);
}

uint64_t sub_100672EF0()
{
  return sub_100671F8C((uint64_t)sub_1005FE178, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_100672F18()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10062414C);
}

void sub_100672F40()
{
  uint64_t *v0;

  sub_1005E7084(v0[2], v0[3], v0[4], (uint64_t)sub_100673718, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __objc2_class **, void (*)(uint64_t, uint64_t), unint64_t (*)(void *), __n128))sub_1006371D8);
}

void sub_100672F70()
{
  uint64_t *v0;

  sub_1005E7084(v0[2], v0[3], v0[4], (uint64_t)sub_100672F9C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __objc2_class **, void (*)(uint64_t, uint64_t), unint64_t (*)(void *), __n128))sub_10064075C);
}

BOOL sub_100672F9C(_QWORD *a1)
{
  uint64_t v1;

  return sub_100658ED0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t))sub_10065E280);
}

void sub_100672FC0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_10065E304, a2);
}

double sub_100672FE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851CE0, &qword_100851CE8, (uint64_t *)&unk_100851CF0);
}

uint64_t sub_100673014()
{
  return sub_100671F8C((uint64_t)sub_1006008AC, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_10067303C()
{
  uint64_t *v0;

  sub_1005DFFAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100625B1C);
}

void sub_100673064()
{
  uint64_t *v0;

  sub_1005E547C(v0[2], v0[3], v0[4], (uint64_t)sub_100673718, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __objc2_class **, void (*)(uint64_t, uint64_t), unint64_t (*)(void *), __n128))sub_1006371D8);
}

void sub_100673094()
{
  uint64_t *v0;

  sub_1005E547C(v0[2], v0[3], v0[4], (uint64_t)sub_1006730C0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __objc2_class **, void (*)(uint64_t, uint64_t), unint64_t (*)(void *), __n128))sub_10064075C);
}

BOOL sub_1006730C0(_QWORD *a1)
{
  uint64_t v1;

  return sub_100658ED0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t))sub_10065E880);
}

void sub_1006730E4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_10065E904, a2);
}

double sub_100673104(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851D90, &qword_100851D98, (uint64_t *)&unk_100851DA0);
}

uint64_t sub_100673138()
{
  return sub_100671F8C((uint64_t)sub_1005F6D34, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_100673160()
{
  uint64_t *v0;

  sub_1005E0DC4(v0[2], v0[3], v0[4]);
}

void sub_100673180()
{
  uint64_t *v0;

  sub_1005E3BFC(v0[2], v0[3], v0[4]);
}

void sub_1006731A0()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], &qword_10084FBF8, off_1007D6678, (uint64_t *)sub_100645FB0, (uint64_t (*)(void))sub_1002C672C);
}

id sub_1006731DC@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E1950;
  return v2;
}

double sub_100673210(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851DD8, &qword_100851DE0, (uint64_t *)&unk_100851DE8);
}

uint64_t sub_100673244()
{
  return sub_100671F8C((uint64_t)sub_1005F4964, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_10067326C()
{
  uint64_t *v0;

  sub_1005E0A30(v0[2], v0[3], v0[4]);
}

void sub_10067328C()
{
  uint64_t *v0;

  sub_1005E387C(v0[2], v0[3], v0[4]);
}

void sub_1006732AC()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], (unint64_t *)&qword_100840C40, off_1007D6668, (uint64_t *)sub_100645B90, (uint64_t (*)(void))sub_1002C672C);
}

id sub_1006732E8@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E1928;
  return v2;
}

double sub_10067331C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851E20, &qword_100851E28, (uint64_t *)&unk_100851E30);
}

uint64_t sub_100673350()
{
  return sub_100671F8C((uint64_t)sub_1005F23BC, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_100673378()
{
  uint64_t *v0;

  sub_1005E069C(v0[2], v0[3], v0[4]);
}

void sub_100673398()
{
  uint64_t *v0;

  sub_1005E34FC(v0[2], v0[3], v0[4]);
}

void sub_1006733B8()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], &qword_100840C10, off_1007D6670, (uint64_t *)sub_100645770, (uint64_t (*)(void))sub_1002C672C);
}

id sub_1006733F4@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E1900;
  return v2;
}

double sub_100673428(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851E68, &qword_100851E70, &qword_100851E78);
}

uint64_t sub_10067345C()
{
  return sub_100671F8C((uint64_t)sub_1005F002C, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))sub_1005DF008);
}

void sub_100673484()
{
  uint64_t *v0;

  sub_1005E0308(v0[2], v0[3], v0[4]);
}

void sub_1006734A4()
{
  uint64_t *v0;

  sub_1005E317C(v0[2], v0[3], v0[4]);
}

void sub_1006734C4()
{
  uint64_t *v0;

  sub_1005E6D20(v0[2], v0[3], v0[4], &qword_100840C00, off_1007D6688, (uint64_t *)sub_100645350, (uint64_t (*)(void))sub_1002C672C);
}

id sub_100673500@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  a2[1] = &off_1007E18D8;
  return v2;
}

double sub_100673534(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_100658DAC(a1, a2, *(_QWORD *)(v2 + 16), &qword_100851EA8, &qword_100851EB0, (uint64_t *)&unk_10083FDB0);
}

uint64_t sub_100673568()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_errorRelease(v0[3]);
  swift_errorRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1006735AC()
{
  sub_100671D1C((void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100602EC0);
}

void sub_1006735CC()
{
  uint64_t *v0;

  sub_1005E2AAC(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100627540);
}

void sub_1006735F4()
{
  uint64_t *v0;

  sub_1005E57FC(v0[2], v0[3], v0[4]);
}

uint64_t sub_100673614()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100673648()
{
  uint64_t *v0;

  sub_1005E7404(v0[2], v0[3], v0[4]);
}

BOOL sub_100673664(_QWORD *a1)
{
  uint64_t v1;

  return sub_100658ED0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD, uint64_t))sub_10065EDE4);
}

void sub_100673688(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100658F58(a1, *(_QWORD *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_10065EEA0, a2);
}

uint64_t sub_1006736A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000A5A94(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

double sub_1006736E8(uint64_t a1, void **a2)
{
  return sub_1006721B0(a1, a2);
}

BOOL sub_100673700(_QWORD *a1)
{
  return sub_100671B14(a1);
}

BOOL sub_100673718(void **a1)
{
  return sub_1006722A4(a1);
}

BOOL sub_100673730(_QWORD *a1)
{
  return sub_100671C80(a1);
}

BOOL sub_100673748(void **a1)
{
  return sub_100671DA0(a1);
}

BOOL sub_100673760(void **a1)
{
  return sub_100671EBC(a1);
}

BOOL sub_100673778(_QWORD *a1)
{
  return sub_10067202C(a1);
}

BOOL sub_100673790(void **a1)
{
  return sub_100672138(a1);
}

BOOL sub_1006737A8(void **a1)
{
  return sub_100672270(a1);
}

BOOL sub_1006737C0(_QWORD *a1)
{
  return sub_10067247C(a1);
}

BOOL sub_1006737D8(_QWORD *a1)
{
  return sub_100672D14(a1);
}

BOOL sub_1006737F0(void **a1)
{
  return sub_100672E44(a1);
}

BOOL sub_100673808(_QWORD *a1)
{
  return sub_100672F9C(a1);
}

BOOL sub_100673820(_QWORD *a1)
{
  return sub_1006730C0(a1);
}

BOOL sub_100673838(_QWORD *a1)
{
  return sub_100673664(a1);
}

uint64_t sub_100673850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100851EB8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100851EB8);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1006738E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;

  v43 = a6;
  v44 = a8;
  v41 = a4;
  v42 = a5;
  v45 = a3;
  v40 = a2;
  v15 = type metadata accessor for REMAnalyticsEvent(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v23);
  v24 = Date.timeIntervalSince(_:)(a1);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  if (qword_1008379D8 != -1)
    swift_once(&qword_1008379D8, sub_100673850);
  v38 = a10;
  v39 = a12;
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10001AAA8(v25, (uint64_t)qword_100851EB8);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = a7;
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v30 = 134217984;
    v46 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "REMGroceryClassifier model loading time: %f", v30, 0xCu);
    v31 = v30;
    a7 = v29;
    swift_slowDealloc(v31, -1, -1);
  }

  type metadata accessor for REMAnalyticsManager(0, v32);
  v34 = static REMAnalyticsManager.shared.getter(v33);
  *(double *)v18 = v24;
  v35 = v45;
  *((_QWORD *)v18 + 1) = v40;
  *((_QWORD *)v18 + 2) = v35;
  v18[24] = v41 & 1;
  v18[25] = v42;
  *((_QWORD *)v18 + 4) = v43;
  *((_QWORD *)v18 + 5) = a7;
  *((_QWORD *)v18 + 6) = v44;
  *((_QWORD *)v18 + 7) = a9;
  *((_QWORD *)v18 + 8) = v38;
  *((_QWORD *)v18 + 9) = a11;
  *((_QWORD *)v18 + 10) = v39;
  *((_QWORD *)v18 + 11) = a13;
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for REMAnalyticsEvent.loadGroceryModel(_:), v15);
  swift_bridgeObjectRetain(a13);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a9);
  v36 = swift_bridgeObjectRetain(a11);
  REMAnalyticsManager.post(event:)(v18, v36);
  swift_release(v34);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

char *sub_100673B80(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = a2;
  v33 = a1;
  v8 = type metadata accessor for REMTrialNamespace(0, a5);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v34 = *(_QWORD *)(v12 - 8);
  v35 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v15);
  v17 = type metadata accessor for REMTrialClient(0, v16);
  v18 = (char *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = REMTrialClient.init()();
  if (v5)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  }
  else
  {
    v20 = (char *)v19;
    v31 = a3;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for REMTrialNamespace.grocery(_:), v8);
    v30 = dispatch thunk of REMTrialClient.deploymentId(for:)(v11);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_retain();
    v24 = v32;
    v23 = v33;
    v18 = sub_1001C9B14(v33, v32, v20);
    swift_release(v20);
    v26 = REMGroceryClassifier.modelTypesDescription.getter();
    sub_1006738E0((uint64_t)v14, v26, v27, 1, 2, v30, v22, v23, (uint64_t)v24, v31, a4, 0, 0);
    swift_release(v20);
    swift_bridgeObjectRelease();
    v28 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v14, v35, v28);
  }
  return v18;
}

uint64_t sub_100673DFC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, unint64_t);
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *(void (**)(uint64_t, unint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v8 = v7;

  v4(v6, v8);
  sub_1000A71C8(v6, v8);
  return swift_release(v3);
}

void sub_100673E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)(a1);
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_100673EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_100851ED0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_100851ED0);
  if (qword_100837618 != -1)
    swift_once(&qword_100837618, sub_1004A1800);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872028);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100673F48()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for RDDataAccess(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100674124();
  qword_100872340 = result;
  return result;
}

id sub_100673F84()
{
  id result;

  result = sub_100673FA4();
  byte_100872349 = result & 1;
  return result;
}

id sub_100673FA4()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v0 = objc_msgSend(objc_allocWithZone((Class)REMDataAccessBehaviorManager), "init");
  v1 = objc_msgSend(v0, "isDataAccessEnabled");

  if ((_DWORD)v1)
  {
    if (qword_1008379E0 != -1)
      swift_once(&qword_1008379E0, sub_100673EB8);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001AAA8(v2, (uint64_t)qword_100851ED0);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      v7 = "Did query DataAccess Enabled status {dataAccessEnabled: true}";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
  }
  else
  {
    if (qword_1008379E0 != -1)
      swift_once(&qword_1008379E0, sub_100673EB8);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_100851ED0);
    v4 = Logger.logObject.getter(v9);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      v7 = "BehaviorManager says dataAccess is not enabled {dataAccessEnabled: false}";
      goto LABEL_10;
    }
  }

  return v1;
}

uint64_t sub_100674124()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t result;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  __objc2_prot *v18;

  v0[2] = 0;
  v0[5] = 0;
  v1 = (char *)v0 + OBJC_IVAR____TtC7remindd12RDDataAccess_storeControllerNotificationCenterToken;
  v2 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (void *)qword_100851EE8;
  if (qword_100851EE8)
  {
    if (off_100851EF0)
    {
      v4 = qword_100851EF8;
      if (qword_100851EF8)
      {
        v5 = (void *)*((_QWORD *)off_100851EF0 + 2);
        v18 = &OBJC_PROTOCOL___DADREMUserNotificationPresenting;
        v6 = swift_dynamicCastObjCProtocolConditional(qword_100851EF8, 1, &v18);
        if (v6)
        {
          v7 = v6;
          v8 = type metadata accessor for RDDataAccessREMStoreProvider();
          v9 = swift_allocObject(v8, 32, 7);
          *(_QWORD *)(v9 + 16) = v3;
          *(_QWORD *)(v9 + 24) = v5;
          v0[3] = v9;
          v10 = type metadata accessor for RDDataAccessUserNotificationPresentingProvider();
          v11 = swift_allocObject(v10, 24, 7);
          *(_QWORD *)(v11 + 16) = v7;
          v0[4] = v11;
          v12 = v3;
          v13 = v5;
          swift_unknownObjectRetain(v4);
          return (uint64_t)v0;
        }
      }
      v15 = 0xD0000000000000A7;
      v17 = 98;
      v16 = "You must first call RDDataAccess.setup(...) to set up a rdUserNotificationCenter that conforms to DADREMUser"
            "NotificationPresenting before accessing RDDataAccess.shared";
    }
    else
    {
      v15 = 0xD000000000000080;
      v17 = 95;
      v16 = "You must first call RDDataAccess.setup(...) to set up a rdStoreControllerNotificationCenter before accessing"
            " RDDataAccess.shared";
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, (unint64_t)(v16 - 32) | 0x8000000000000000, "remindd/RDDataAccess.swift", 26, 2, v17, 0);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000006FLL, 0x8000000100709F80, "remindd/RDDataAccess.swift", 26, 2, 92, 0);
  }
  __break(1u);
  return result;
}

void sub_1006742D8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  _BYTE v16[24];
  _BYTE v17[24];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083A360);
  __chkstk_darwin(v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v1[5];
  if (!v9)
    goto LABEL_6;
  v10 = (uint64_t)v1 + OBJC_IVAR____TtC7remindd12RDDataAccess_storeControllerNotificationCenterToken;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC7remindd12RDDataAccess_storeControllerNotificationCenterToken, v17, 0, 0);
  sub_1000E542C(v10, (uint64_t)v4);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000E5474((uint64_t)v4);
LABEL_6:
    swift_release(v1[2]);
    swift_release(v1[3]);
    swift_release(v1[4]);
    swift_release(v1[5]);
    sub_1000E5474((uint64_t)v1 + OBJC_IVAR____TtC7remindd12RDDataAccess_storeControllerNotificationCenterToken);
    return;
  }
  sub_1000E54B4((uint64_t)v4, (uint64_t)v8);
  v11 = *(os_unfair_lock_s **)(v9 + 40);
  swift_retain();
  os_unfair_lock_lock(v11);
  __chkstk_darwin(v12);
  *(_QWORD *)&v15[-16] = v8;
  swift_beginAccess(v9 + 48, v16, 33, 0);
  sub_1001CE554((uint64_t (*)(unint64_t, __n128))sub_1000E54F8, (uint64_t)&v15[-32]);
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16);
  if (v14 >= v13)
  {
    sub_1001CED20(v13, v14);
    swift_endAccess(v16);
    os_unfair_lock_unlock(v11);
    swift_release(v9);
    sub_1000A3F78((uint64_t)v8);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_1006744BC()
{
  uint64_t v0;

  sub_1006742D8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_1006744E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  __n128 v22;
  void *v23;
  _QWORD v24[5];
  _QWORD *v25;

  if (qword_1008379E0 != -1)
    swift_once(&qword_1008379E0, sub_100673EB8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_100851ED0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDDataAccess is starting...", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "os_transaction INIT {name: com.apple.remindd.dataaccess.launch}", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = os_transaction_create("com.apple.remindd.dataaccess.launch");
  setDAIsRunningInDataAccessD();
  v14 = (void *)objc_opt_self(DAPowerAssertionManager);
  v15 = sub_1000151B0(0, &qword_100852368, DADaemonPowerAssertionManager_ptr);
  objc_msgSend(v14, "vendDaemons:", swift_getObjCClassFromMetadata(v15));
  v16 = objc_msgSend((id)objc_opt_self(DADMain), "sharedMain");
  if (v16)
  {
    v17 = v16;
    v18 = (_QWORD *)swift_allocObject(&unk_1007FDEA0, 48, 7);
    v18[2] = v17;
    v18[3] = a1;
    v18[4] = a2;
    v18[5] = v13;
    v24[4] = sub_100676B8C;
    v25 = v18;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 1107296256;
    v24[2] = sub_1000094C8;
    v24[3] = &unk_1007FDEB8;
    v19 = _Block_copy(v24);
    v20 = v25;
    v21 = v17;
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain(v13);
    swift_release(v20);
    sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v23 = (void *)static OS_dispatch_queue.main.getter(v22);
    objc_msgSend(v21, "waitForSystemAvailabilityWithCompletionBlock:completionQueue:", v19, v23);

    swift_unknownObjectRelease(v13);
    _Block_release(v19);

  }
  else
  {
    swift_unknownObjectRelease(v13);
  }
}

void sub_1006747B0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD v27[5];
  _QWORD *v28;

  if (qword_1008379E0 != -1)
    swift_once(&qword_1008379E0, sub_100673EB8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_100851ED0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDDataAccess has done waitForSystemAvailability, now adding to operation queue to bootstrap DADAgentManager", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "os_transaction INIT {name: com.apple.remindd.dataaccess.agentManager.load}", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = os_transaction_create("com.apple.remindd.dataaccess.agentManager.load");
  if (a1)
  {
    v16 = (_QWORD *)swift_allocObject(&unk_1007FDEF0, 40, 7);
    v16[2] = a2;
    v16[3] = a3;
    v16[4] = v15;
    v27[4] = sub_100676BCC;
    v28 = v16;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 1107296256;
    v27[2] = sub_1000094C8;
    v27[3] = &unk_1007FDF08;
    v17 = _Block_copy(v27);
    v18 = v28;
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain(v15);
    swift_release(v18);
    objc_msgSend(a1, "addToOperationsQueueDisabledCheckAndGoBlock:wrappedBlock:", 0, v17);
    _Block_release(v17);
  }
  if (gDADHighAvailabilityQueue)
  {
    dispatch_resume(gDADHighAvailabilityQueue);
    byte_100872348 = 1;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDDataAccess finished starting (note that DADAgentManager may not have done loading up yet)", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "os_transaction RELEASE {name: com.apple.remindd.dataaccess.launch}", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
      swift_unknownObjectRelease(v15);

    }
    else
    {

      swift_unknownObjectRelease(v15);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100674AD8(_QWORD *a1, uint64_t a2)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD v21[6];

  v4 = objc_msgSend((id)objc_opt_self(DADAgentManager), "sharedManager");
  objc_msgSend(v4, "setRem_storeProvider:", a1[3]);
  v5 = objc_msgSend((id)objc_opt_self(DADREMLocalDBWatcher), "sharedDBWatcher");
  objc_msgSend(v4, "setRem_localDBWatcher:", v5);

  objc_msgSend(v4, "setRem_userNotificationPresentingProvider:", a1[4]);
  v21[4] = j___s7remindd28RDLaunchAnalyticsPostNotifydyySo13OS_xpc_object_pF;
  v21[5] = 0;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_1004F4824;
  v21[3] = &unk_1007FDF30;
  v6 = _Block_copy(v21);
  objc_msgSend(v4, "setRem_xpcEventHandler:", v6);
  _Block_release(v6);
  objc_msgSend(v4, "_loadAndStartMonitoringAgents:", 1);
  if (qword_1008379E0 != -1)
    swift_once(&qword_1008379E0, sub_100673EB8);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001AAA8(v7, (uint64_t)qword_100851ED0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDDataAccess has done _loadAndStartMonitoringAgents on DADAgentManager", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = objc_msgSend(v4, "rem_localDBWatcher");
  if (v12)
  {
    v13 = v12;
    v14 = (void *)gDADHighAvailabilityQueue;
    v15 = gDADHighAvailabilityQueue;
    sub_1006756FC((uint64_t)v13, v14);

    v16 = a1[2];
    a1[2] = a2;
    swift_retain();
    swift_release(v16);
    *(_QWORD *)(a2 + 48) = &off_1007FDCF0;
    swift_unknownObjectWeakAssign(a2 + 40, a1);
    v17 = sub_100674F70(a2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "os_transaction RELEASE {name: com.apple.remindd.dataaccess.agentManager.load}", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100674DC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (qword_1008379E0 != -1)
    swift_once(&qword_1008379E0, sub_100673EB8);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_100851ED0);
  v3 = swift_retain();
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v9);
    v11 = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
    swift_release(a1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDDataAccess: Did add pending request {from: %{public}s}.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
  return sub_100674F70(a1);
}

uint64_t sub_100674F70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_1007FDE00, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v1;
  aBlock[4] = sub_100676B34;
  v21 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007FDE18;
  v12 = _Block_copy(aBlock);
  swift_retain();
  v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v19 = _swiftEmptyArrayStorage;
  v14 = sub_1000D3124();
  v15 = sub_10001A630((uint64_t *)&unk_100838000);
  v16 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v21);
}

double sub_10067512C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  const void *v39;
  void *v40;
  double result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD);
  char *v54;
  _QWORD aBlock[5];
  uint64_t v56;

  v48 = a2;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  __chkstk_darwin(v2);
  v45 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v54 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10019E168();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v42 = v6;
    v8 = (_BYTE *)(v6 + 80);
    v9 = v45;
    do
    {
      v17 = *((_QWORD *)v8 - 6);
      v18 = *((_QWORD *)v8 - 5);
      v19 = *((_QWORD *)v8 - 4);
      v20 = *((_QWORD *)v8 - 3);
      v21 = (void (*)(_QWORD))*((_QWORD *)v8 - 2);
      v22 = *((_QWORD *)v8 - 1);
      if (*v8)
      {
        v23 = *((_QWORD *)v8 - 6);
        v24 = *((_QWORD *)v8 - 5);
        v25 = *((_QWORD *)v8 - 4);
        v26 = *((_QWORD *)v8 - 3);
        v27 = *((_QWORD *)v8 - 2);
        v28 = *((_QWORD *)v8 - 1);
        if (*v8 == 1)
        {
          sub_10019E498(v23, v24, v25, v26, v27, v28, 1);
          swift_bridgeObjectRetain(v18);
          swift_bridgeObjectRetain(v20);
          swift_retain();
          sub_1004AA1E8(1, v17, v18, v19, v20, v21, v22);
          v10 = v17;
          v11 = v18;
          v12 = v19;
          v13 = v20;
          v14 = (uint64_t)v21;
          v15 = v22;
          v16 = 1;
        }
        else
        {
          sub_10019E498(v23, v24, v25, v26, v27, v28, 2);
          swift_bridgeObjectRetain(v18);
          swift_bridgeObjectRetain(v20);
          swift_retain();
          sub_1004AA1E8(2, v17, v18, v19, v20, v21, v22);
          v10 = v17;
          v11 = v18;
          v12 = v19;
          v13 = v20;
          v14 = (uint64_t)v21;
          v15 = v22;
          v16 = 2;
        }
        sub_10019E538(v10, v11, v12, v13, v14, v15, v16);
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v20);
        swift_release(v22);
      }
      else
      {
        sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
        sub_10019E498(v17, v18, v19, v20, (uint64_t)v21, v22, 0);
        v29 = swift_bridgeObjectRetain(v17);
        v52 = static OS_dispatch_queue.main.getter(v29);
        v30 = swift_allocObject(&unk_1007FDE50, 32, 7);
        v53 = v21;
        v31 = v48;
        *(_QWORD *)(v30 + 16) = v17;
        *(_QWORD *)(v30 + 24) = v31;
        aBlock[4] = sub_100676B48;
        v56 = v30;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1000094C8;
        aBlock[3] = &unk_1007FDE68;
        v50 = _Block_copy(aBlock);
        v32 = v56;
        swift_retain();
        v33 = swift_release(v32);
        v51 = v19;
        v34 = v54;
        static DispatchQoS.unspecified.getter(v33);
        aBlock[0] = _swiftEmptyArrayStorage;
        v49 = sub_1000D3124();
        v35 = sub_10001A630((uint64_t *)&unk_100838000);
        v36 = sub_1000D316C();
        v37 = v47;
        dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v35, v36, v47, v49);
        v38 = v34;
        v39 = v50;
        v40 = (void *)v52;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v9, v50);
        _Block_release(v39);

        sub_10019E538(v17, v18, v51, v20, (uint64_t)v53, v22, 0);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v37);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v54, v44);
      }
      v8 += 56;
      --v7;
    }
    while (v7);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v42).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  }
  return result;
}

void sub_1006754E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;

  if (qword_1008379E0 != -1)
    swift_once(&qword_1008379E0, sub_100673EB8);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_100851ED0);
  v3 = swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_bridgeObjectRetain(a1);
    v9 = Array.description.getter(v8, &type metadata for String);
    v11 = v10;
    swift_bridgeObjectRelease(a1);
    v14 = sub_10001A820(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDDataAccess RDDARequest.updateContentsOfAllFolders {accountIDs: %{public}s}", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v12 = objc_msgSend((id)objc_opt_self(DADAgentManager), "sharedManager");
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "updateContentsOfAllFoldersForAccountIDs:", isa);

}

void sub_1006756FC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t inited;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[80];
  _BYTE v45[24];

  v3 = v2;
  v6 = sub_10001A630((uint64_t *)&unk_10083A360);
  v7 = __chkstk_darwin(v6);
  v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  v11 = &v44[-v10 - 8];
  v12 = off_100851EF0;
  if (off_100851EF0)
    v13 = a2 == 0;
  else
    v13 = 1;
  if (v13)
  {
    v14 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;
    swift_release(v14);
    v15 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 1, 1, v15);
    v16 = v3 + OBJC_IVAR____TtC7remindd12RDDataAccess_storeControllerNotificationCenterToken;
    swift_beginAccess(v16, v45, 33, 0);
    sub_1000E5374((uint64_t)v11, v16);
    swift_endAccess(v45);
    if (qword_1008379E0 != -1)
      swift_once(&qword_1008379E0, sub_100673EB8);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001AAA8(v17, (uint64_t)qword_100851ED0);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "You should set up a RDStoreControllerNotificationCenter and work queue before starting RDDataAccess in order to observe reminders database.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

  }
  else
  {
    v22 = sub_10001A630((uint64_t *)&unk_10083A340);
    inited = swift_initStackObject(v22, v44);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C20;
    v24 = (void *)objc_opt_self(REMAccount);
    swift_retain();
    v25 = a2;
    v43 = a1;
    v26 = objc_msgSend(v24, "cdEntityName");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    *(_QWORD *)(inited + 32) = v27;
    *(_QWORD *)(inited + 40) = v29;
    v30 = objc_msgSend((id)objc_opt_self(REMList), "cdEntityName");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    *(_QWORD *)(inited + 48) = v31;
    *(_QWORD *)(inited + 56) = v33;
    v34 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    *(_QWORD *)(inited + 64) = v35;
    *(_QWORD *)(inited + 72) = v37;
    v38 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v12;
    swift_retain();
    swift_release(v38);
    v39 = sub_10011EE40(inited);
    swift_bridgeObjectRelease(inited);
    v40 = swift_allocObject(&unk_1007FDDD8, 24, 7);
    swift_unknownObjectWeakInit(v40 + 16, v43);
    swift_retain();
    sub_100395434(v39, v25, (uint64_t)sub_100676B20, v40, (uint64_t)v11);
    swift_bridgeObjectRelease(v39);
    swift_release_n(v40, 2);

    swift_release(v12);
    v41 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v11, 0, 1, v41);
    sub_1000E532C((uint64_t)v11, (uint64_t)v9);
    v42 = v3 + OBJC_IVAR____TtC7remindd12RDDataAccess_storeControllerNotificationCenterToken;
    swift_beginAccess(v42, v45, 33, 0);
    sub_1000E5374((uint64_t)v9, v42);
    swift_endAccess(v45);
  }
}

void sub_100675A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  _BYTE v15[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = Strong;
    if (qword_1008379E0 != -1)
      swift_once(&qword_1008379E0, sub_100673EB8);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001AAA8(v6, (uint64_t)qword_100851ED0);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDDataAccess: Received store controller changes!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    -[NSObject remindersDatabaseDidChange](v5, "remindersDatabaseDidChange");
  }
  else
  {
    if (qword_1008379E0 != -1)
      swift_once(&qword_1008379E0, sub_100673EB8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001AAA8(v11, (uint64_t)qword_100851ED0);
    v5 = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.info.getter(v5);
    if (os_log_type_enabled(v5, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v13, "Received store changes with deallocated RDDataAccess!", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
  }

}

id sub_100675D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *(void **)(v5 + 24);
  v20 = a2;
  v21 = a3;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_100673DFC;
  v19 = &unk_1007FDD28;
  v10 = _Block_copy(&v16);
  v11 = v21;
  swift_retain();
  swift_release(v11);
  v20 = a4;
  v21 = a5;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_10042D6CC;
  v19 = &unk_1007FDD50;
  v12 = _Block_copy(&v16);
  v13 = v21;
  swift_retain();
  swift_release(v13);
  v14 = objc_msgSend(v9, "observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:", a1, v10, v12);
  _Block_release(v12);
  _Block_release(v10);
  return v14;
}

void RDUserNotificationCenter.showNotification(withIdentifier:content:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = v5;
  v58 = a4;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v16 = a2;
  }
  else
  {
    v17 = UUID.init()(v13);
    a1 = UUID.uuidString.getter(v17);
    v16 = v18;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  v19 = objc_opt_self(UNMutableNotificationContent);
  v20 = swift_dynamicCastObjCClass(a3, v19);
  if (v20)
  {
    v21 = (void *)v20;
    v22 = qword_1008379E0;
    swift_bridgeObjectRetain(a2);
    swift_unknownObjectRetain(a3);
    if (v22 != -1)
      swift_once(&qword_1008379E0, sub_100673EB8);
    v23 = type metadata accessor for Logger(0);
    sub_10001AAA8(v23, (uint64_t)qword_100851ED0);
    swift_unknownObjectRetain_n(a3, 4);
    swift_bridgeObjectRetain_n(v16, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc(32, -1);
      v56 = a5;
      v29 = v28;
      v54 = swift_slowAlloc(96, -1);
      v60 = v54;
      *(_DWORD *)v29 = 136446722;
      swift_bridgeObjectRetain(v16);
      v55 = a1;
      v59 = sub_10001A820(a1, v16, &v60);
      v52 = &v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      *(_QWORD *)&v30 = swift_bridgeObjectRelease_n(v16, 3).n128_u64[0];
      *(_WORD *)(v29 + 12) = 2082;
      v31 = objc_msgSend(v21, "categoryIdentifier", v30);
      v57 = v6;
      v32 = v31;
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v53 = v27;
      v34 = v33;
      v36 = v35;

      v59 = sub_10001A820(v34, v36, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_unknownObjectRelease_n(a3, 2);
      *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v29 + 22) = 2080;
      v38 = objc_msgSend(v21, "userInfo", v37, v29 + 24);
      v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v38, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v40 = Dictionary.description.getter(v39, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v42 = v41;
      swift_bridgeObjectRelease();
      v59 = sub_10001A820(v40, v42, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v52);
      swift_unknownObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v53, "DADREMUserNotificationPresenting: show notification for DA {identifier: %{public}s, category: %{public}s, content.userInfo: %s}", (uint8_t *)v29, 0x20u);
      v43 = v54;
      swift_arrayDestroy(v54, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      v44 = v29;
      a5 = v56;
      swift_slowDealloc(v44, -1, -1);

      v45 = v55;
    }
    else
    {

      swift_unknownObjectRelease_n(a3, 4);
      swift_bridgeObjectRelease_n(v16, 2);
      v45 = a1;
    }
    sub_1004853D8(v45, v16, v21, v58, a5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(a3);
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease();
    if (qword_1008379E0 != -1)
      swift_once(&qword_1008379E0, sub_100673EB8);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_10001AAA8(v46, (uint64_t)qword_100851ED0);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "DADREMUserNotificationPresenting: content must be kind of UNMutableNotificationContent", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

  }
}

id RDUserNotificationCenter.calDAVSharedListNotificationContent(with:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v9;

  v2 = type metadata accessor for RDUserNotificationType(0);
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = __chkstk_darwin(v2).n128_u64[0];
  v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = objc_msgSend(a1, "objectID", v4);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for RDUserNotificationType.caldavSharedList(_:), v2);
  v7 = sub_10023F73C(0, a1, 0);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

uint64_t sub_10067694C()
{
  return type metadata accessor for RDDataAccess(0);
}

uint64_t type metadata accessor for RDDataAccess(uint64_t a1)
{
  uint64_t result;

  result = qword_100851F30;
  if (!qword_100851F30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDDataAccess);
  return result;
}

void sub_100676990(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = "\b";
  sub_1000DFA6C(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for RDDataAccessREMStoreProvider()
{
  return objc_opt_self(_TtC7reminddP33_9540E3B410C6F96B6B224FD2AED82F7B28RDDataAccessREMStoreProvider);
}

uint64_t type metadata accessor for RDDataAccessUserNotificationPresentingProvider()
{
  return objc_opt_self(_TtC7reminddP33_9540E3B410C6F96B6B224FD2AED82F7B46RDDataAccessUserNotificationPresentingProvider);
}

uint64_t sub_100676A58()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100676A7C()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;

  v1 = *(_QWORD *)(v0 + 16);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v1 + 16))(v1, isa);

}

void sub_100676ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = (id)_convertErrorToNSError(_:)(a1);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

}

uint64_t sub_100676AFC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100676B20(uint64_t a1)
{
  uint64_t v1;

  sub_100675A9C(a1, v1);
}

uint64_t sub_100676B28()
{
  return sub_100502B54((void (*)(_QWORD))&_swift_release);
}

double sub_100676B34()
{
  uint64_t v0;

  return sub_10067512C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100676B3C()
{
  return sub_100502B54((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_100676B48()
{
  uint64_t v0;

  sub_1006754E4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100676B50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100676B8C()
{
  uint64_t v0;

  sub_1006747B0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100676B98()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100676BCC()
{
  uint64_t v0;

  sub_100674AD8(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100676C00(id *a1, uint64_t a2, uint64_t a3)
{
  sub_100676C60(a1, a2, a3, (SEL *)&selRef_reminderIdentifier);
}

void sub_100676C0C(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;

  v2 = *a2;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setReminderIdentifier:", isa);

}

void sub_100676C54(id *a1, uint64_t a2, uint64_t a3)
{
  sub_100676C60(a1, a2, a3, (SEL *)&selRef_identifier);
}

void sub_100676C60(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4;

  v4 = objc_msgSend(*a1, *a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v4);

}

void sub_100676CA8(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;

  v2 = *a2;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setIdentifier:", isa);

}

id static REMCDDueDateDeltaAlert.objectID(with:)()
{
  uint64_t v0;
  id v1;
  Class isa;
  NSString v3;
  id v4;
  uint64_t v6;

  v0 = sub_10001A630((uint64_t *)&unk_100850A90);
  String.init<A>(describing:)(&v6, v0);
  v1 = objc_allocWithZone((Class)REMObjectID);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "initWithUUID:entityName:", isa, v3, swift_bridgeObjectRelease().n128_f64[0]);

  return v4;
}

uint64_t sub_100676DA4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100676DD8 + 4 * byte_1006C4A80[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

unint64_t sub_100676DD8()
{
  return 0xD000000000000012;
}

uint64_t sub_100676E70(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100852370, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_100676E94(uint64_t a1)
{
  return sub_1001489A4(a1, qword_100852388, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

void sub_100676EB8(char *a1)
{
  sub_1002B3618(*a1);
}

void sub_100676EC4()
{
  char *v0;

  sub_1004F52C0(*v0);
}

void sub_100676ECC(uint64_t a1)
{
  char *v1;

  sub_1002B5C18(a1, *v1);
}

void sub_100676ED4(uint64_t a1)
{
  char *v1;

  sub_1002B28C8(a1, *v1);
}

unint64_t sub_100676EDC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1006782EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100676F08@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100676DA4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100676F30(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E1800;
}

unint64_t sub_100676F40@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1006782EC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100676F64()
{
  unsigned __int8 *v0;

  return sub_100676DA4(*v0);
}

void sub_100676F6C(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E1828, v3);
  swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
}

void sub_100676FBC(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E1860;
}

void sub_100676FCC(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DF108, v3);
  swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
}

uint64_t REMCDDueDateDeltaAlert.ingestableObjectIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(v1, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
}

uint64_t REMCDDueDateDeltaAlert.ingestableObjectIdentifier.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  Class isa;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  Optional.tryUnwrap(_:file:line:)(v7, 0xD000000000000039, 0x800000010070A130, 0xD000000000000091, 0x800000010070A170, 143, v8);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v2, "setIdentifier:", isa);

  return sub_10000882C(a1, (uint64_t *)&unk_100839C80);
}

void (*REMCDDueDateDeltaAlert.ingestableObjectIdentifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  size_t v3;
  void *v4;
  id v5;
  uint64_t v6;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(sub_10001A630((uint64_t *)&unk_100839C80) - 8) + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  v5 = objc_msgSend(v1, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v5);

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 0, 1, v6);
  return sub_1006773E0;
}

void sub_1006773E0(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_100008868(*(_QWORD *)(a1 + 16), (uint64_t)v2, (uint64_t *)&unk_100839C80);
    REMCDDueDateDeltaAlert.ingestableObjectIdentifier.setter((uint64_t)v2);
    sub_10000882C((uint64_t)v3, (uint64_t *)&unk_100839C80);
  }
  else
  {
    REMCDDueDateDeltaAlert.ingestableObjectIdentifier.setter(*(_QWORD *)(a1 + 16));
  }
  free(v3);
  free(v2);
}

void REMCDDueDateDeltaAlert.checkedREMObjectID()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = REMCDDueDateDeltaAlert.remChangedObjectID()();
  v0 = sub_10001A630((uint64_t *)&unk_100844910);
  Optional.tryUnwrap(_:file:line:)(&v2, 0xD000000000000031, 0x800000010070A210, 0xD000000000000091, 0x800000010070A170, 162, v0);

}

id sub_1006776CC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  id v39;
  id v40;
  void *v41;
  Class isa;
  id v43;
  id v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __n128 v59;
  void (*v60)(char *, uint64_t, __n128);
  id v61;
  uint64_t ObjCClassFromMetadata;
  NSString v63;
  uint64_t v64;
  uint64_t v65;
  NSString v66;
  uint64_t v67;
  Swift::String v69;
  Swift::String v70;
  void *object;
  Swift::String v72;
  Swift::String v73;
  void *v74;
  Swift::String v75;
  NSString v76;
  double v77;
  uint64_t v78;
  id v79;
  NSUUID v80;
  unsigned int v81;
  Class v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  Class v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  id v91;
  uint64_t v92;
  id v93;
  void *v94;
  id v95;
  char *v96;
  Class v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unsigned int (*ObjectType)(char *, uint64_t, uint64_t);
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;

  ObjectType = (unsigned int (*)(char *, uint64_t, uint64_t))swift_getObjectType(a1);
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v96 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v92 - v5;
  v7 = type metadata accessor for Date(0);
  v101 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v100 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v92 - v10;
  __chkstk_darwin(v12);
  v98 = (char *)&v92 - v13;
  v14 = type metadata accessor for UUID(0);
  v104 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v99 = (char *)&v92 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v92 - v20;
  *(_QWORD *)&v23 = __chkstk_darwin(v22).n128_u64[0];
  v25 = (char *)&v92 - v24;
  v26 = objc_msgSend(a1, "identifier", v23);
  v105 = v25;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

  v27 = objc_msgSend(a1, "reminderIdentifier");
  v103 = v21;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

  v28 = objc_msgSend(a1, "account");
  if (!v28
    || (v29 = v28, v30 = objc_msgSend(v28, "remObjectID"), v29, !v30))
  {
    if (qword_100837A00 != -1)
      swift_once(&qword_100837A00, sub_100676E94);
    v48 = type metadata accessor for Logger(0);
    sub_10001AAA8(v48, (uint64_t)qword_100852388);
    v49 = v104;
    v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v104 + 16))(v16, v105, v14);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v106 = v54;
      *(_DWORD *)v53 = 136446210;
      v55 = sub_10031EA80();
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v14, v55);
      v58 = v57;
      v108 = sub_10001A820(v56, v57, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109);
      v59 = swift_bridgeObjectRelease(v58);
      v60 = *(void (**)(char *, uint64_t, __n128))(v104 + 8);
      v60(v16, v14, v59);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "REMDueDateDeltaAlertCDIngestor: cdDueDateDeltaAlert.account is nil {cdDueDateDeltaAlert.identifier: %{public}s}", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      v60 = *(void (**)(char *, uint64_t, __n128))(v49 + 8);
      ((void (*)(char *, uint64_t))v60)(v16, v14);
    }

    v61 = (id)objc_opt_self(REMError);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
    v63 = String._bridgeToObjectiveC()();
    objc_msgSend(v61, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v63);

    swift_willThrow(v64);
    goto LABEL_17;
  }
  v31 = objc_msgSend(a1, "creationDate");
  if (!v31)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v6, 1, 1, v7);
    goto LABEL_15;
  }
  v32 = v31;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

  v95 = v30;
  v33 = v101;
  v34 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
  v35 = v7;
  v34(v6, v11, v7);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  v36(v6, 0, 1, v7);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  v30 = v95;
  if (v37(v6, 1, v7) == 1)
  {
LABEL_15:
    sub_10000882C((uint64_t)v6, (uint64_t *)&unk_1008380D0);
    v61 = (id)objc_opt_self(REMError);
    v65 = swift_getObjCClassFromMetadata(ObjectType);
    v66 = String._bridgeToObjectiveC()();
    objc_msgSend(v61, "unexpectedNilPropertyWithClass:property:", v65, v66);

    swift_willThrow(v67);
LABEL_16:
    v60 = *(void (**)(char *, uint64_t, __n128))(v104 + 8);
LABEL_17:
    ((void (*)(char *, uint64_t))v60)(v103, v14);
    ((void (*)(char *, uint64_t))v60)(v105, v14);
    return v61;
  }
  ObjectType = v37;
  v38 = v98;
  v34(v98, v6, v35);
  v39 = objc_msgSend(objc_allocWithZone((Class)REMDueDateDeltaInterval), "initWithUnitInteger:count:", (int)objc_msgSend(a1, "dueDateDeltaUnit"), (int)objc_msgSend(a1, "dueDateDeltaCount"));
  if (!v39)
  {
    ObjectType = (unsigned int (*)(char *, uint64_t, uint64_t))objc_opt_self(REMError);
    v106 = 0;
    v107 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v69._object = (void *)0x800000010070A2A0;
    v69._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v69);
    LOWORD(v108) = (unsigned __int16)objc_msgSend(a1, "dueDateDeltaUnit");
    v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
    object = v70._object;
    String.append(_:)(v70);
    swift_bridgeObjectRelease(object);
    v72._countAndFlagsBits = 0x756F6320726F2029;
    v72._object = (void *)0xEC0000002820746ELL;
    String.append(_:)(v72);
    LOWORD(v108) = (unsigned __int16)objc_msgSend(a1, "dueDateDeltaCount");
    v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int16, &protocol witness table for Int16);
    v74 = v73._object;
    String.append(_:)(v73);
    swift_bridgeObjectRelease(v74);
    v75._countAndFlagsBits = 41;
    v75._object = (void *)0xE100000000000000;
    String.append(_:)(v75);
    v61 = (id)v107;
    v76 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v77 = swift_bridgeObjectRelease(v61).n128_u64[0];
    objc_msgSend(ObjectType, "internalErrorWithDebugDescription:", v76, v77);

    swift_willThrow(v78);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v38, v35);
    goto LABEL_16;
  }
  v40 = v39;
  (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v99, v105, v14);
  v41 = (void *)objc_opt_self(REMReminder);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v43 = objc_msgSend(v41, "objectIDWithUUID:", isa);

  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v100, v38, v35);
  v44 = objc_msgSend(a1, "acknowledgedDate");
  v93 = v43;
  v94 = v40;
  if (v44)
  {
    v45 = v44;
    v46 = v96;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

    v47 = 0;
  }
  else
  {
    v47 = 1;
    v46 = v96;
  }
  v36(v46, v47, 1, v35);
  v79 = objc_msgSend(a1, "minimumSupportedAppVersion");
  v80.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v97 = Date._bridgeToObjectiveC()().super.isa;
  v81 = ObjectType(v46, 1, v35);
  v92 = v35;
  if (v81 == 1)
  {
    v82 = 0;
  }
  else
  {
    v82 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v46, v35);
  }
  v83 = objc_allocWithZone((Class)REMDueDateDeltaAlert);
  v91 = v79;
  v84 = v93;
  v85 = v94;
  v86 = v95;
  v87 = v97;
  v61 = objc_msgSend(v83, "initWithIdentifier:reminderID:accountID:dueDateDelta:creationDate:acknowledgedDate:minimumSupportedAppVersion:", v80.super.isa, v93, v95, v94, v97, v82, v91);

  v88 = *(void (**)(char *, uint64_t))(v101 + 8);
  v89 = v92;
  v88(v100, v92);
  v90 = *(void (**)(char *, uint64_t))(v104 + 8);
  v90(v99, v14);

  v88(v98, v89);
  v90(v103, v14);
  v90(v105, v14);
  return v61;
}

void sub_100677FF4()
{
  JUMPOUT(0x1006780A4);
}

void sub_1006780A4()
{
  JUMPOUT(0x100678044);
}

void sub_1006780B0()
{
  JUMPOUT(0x100678044);
}

void sub_1006780BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  KeyPath = swift_getKeyPath(&unk_1006C4BF8);
  v11 = swift_getKeyPath(&unk_1006C4C38);
  if ((unint64_t)a10 >> 62)
  {
    if (a10 < 0)
      v26 = a10;
    else
      v26 = a10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a10);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(a10);
    v13 = v27 + 2;
    if (!__OFADD__(v27, 2))
    {
LABEL_3:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(a10);
      v15 = 0;
      if ((_DWORD)isUniquelyReferenced_nonNull_bridgeObject
        && (a10 & 0x8000000000000000) == 0
        && (a10 & 0x4000000000000000) == 0)
      {
        if (v13 <= *(_QWORD *)((a10 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
          goto LABEL_14;
        v15 = 1;
      }
      if ((unint64_t)a10 >> 62)
      {
        if (a10 < 0)
          v28 = a10;
        else
          v28 = a10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a10);
        v16 = _CocoaArrayWrapper.endIndex.getter(v28);
        swift_bridgeObjectRelease(a10);
      }
      else
      {
        v16 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v16 <= v13)
        v17 = v13;
      else
        v17 = v16;
      isUniquelyReferenced_nonNull_bridgeObject = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v15, v17, 1, a10);
      a10 = isUniquelyReferenced_nonNull_bridgeObject;
LABEL_14:
      specialized Array._endMutation()(isUniquelyReferenced_nonNull_bridgeObject);
      v18 = swift_retain(KeyPath);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      v20 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v19 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v20 >= v19 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1);
      v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, KeyPath);
      specialized Array._endMutation()(v21);
      v22 = swift_retain(v11);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v24 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v23 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v24 >= v23 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1);
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v11);
      specialized Array._endMutation()(v25);
      swift_release(v11);
      swift_release(KeyPath);
      JUMPOUT(0x100678080);
    }
  }
  else
  {
    v12 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFF8) + 0x10);
    v13 = v12 + 2;
    if (!__OFADD__(v12, 2))
      goto LABEL_3;
  }
  __break(1u);
  JUMPOUT(0x1006782D4);
}

void sub_1006781E0()
{
  JUMPOUT(0x100678044);
}

void sub_1006781EC()
{
  JUMPOUT(0x100678044);
}

unint64_t sub_1006782EC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC6B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

void sub_100678334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v12[3] = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v13 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v12[5] = (char *)v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a3 + 16);
  if (v11)
  {
    v12[4] = v8;
    v12[1] = v3;
    swift_bridgeObjectRetain(a3);
    v14 = v7;
    v15 = v11;
    v12[2] = v9;
    __asm { BR              X9 }
  }
}

id _s7remindd22REMCDDueDateDeltaAlertC11newObjectIDSo09REMObjectH0CyFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Class isa;
  NSString v13;
  id v14;
  uint64_t v16;
  uint64_t v17;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1008379F8 != -1)
    swift_once(&qword_1008379F8, sub_100676E70);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_100852370);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    swift_slowDealloc(v8, -1, -1);
  }

  UUID.init()(v9);
  v17 = type metadata accessor for REMCDDueDateDeltaAlert();
  v10 = sub_10001A630((uint64_t *)&unk_100850A90);
  String.init<A>(describing:)(&v17, v10);
  v11 = objc_allocWithZone((Class)REMObjectID);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v11, "initWithUUID:entityName:", isa, v13, swift_bridgeObjectRelease().n128_f64[0]);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v14;
}

uint64_t type metadata accessor for REMDueDateDeltaAlertCDIngestor()
{
  return objc_opt_self(_TtC7remindd30REMDueDateDeltaAlertCDIngestor);
}

_UNKNOWN **sub_1006789AC()
{
  return &off_1007FDF60;
}

_UNKNOWN **sub_1006789B8()
{
  return &off_1007FDFB0;
}

_UNKNOWN **sub_1006789C4()
{
  return &off_1007FDF80;
}

const char *sub_1006789D8()
{
  return "acknowledgedDate";
}

uint64_t sub_1006789E4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015070C(a1, (SEL *)&selRef_acknowledgedDate, a2);
}

void sub_100678A00(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100150798(a1, a2, a3, a4, (SEL *)&selRef_setAcknowledgedDate_);
}

uint64_t sub_100678A1C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015070C(a1, (SEL *)&selRef_creationDate, a2);
}

void sub_100678A38(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100150798(a1, a2, a3, a4, (SEL *)&selRef_setCreationDate_);
}

const char *sub_100678A54()
{
  return "dueDateDeltaUnit";
}

id sub_100678A60@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "dueDateDeltaUnit");
  *a2 = (_WORD)result;
  return result;
}

id sub_100678A90(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDueDateDeltaUnit:", *a1);
}

const char *sub_100678AA4()
{
  return "dueDateDeltaCount";
}

id sub_100678AB0@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "dueDateDeltaCount");
  *a2 = (_WORD)result;
  return result;
}

id sub_100678AE0(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDueDateDeltaCount:", *a1);
}

void sub_100678AF4(id *a1, uint64_t a2, uint64_t a3)
{
  sub_100676C60(a1, a2, a3, (SEL *)&selRef_reminderIdentifier);
}

void sub_100678B10(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100678B44(a1, a2, a3, a4, (SEL *)&selRef_setReminderIdentifier_);
}

void sub_100678B1C(id *a1, uint64_t a2, uint64_t a3)
{
  sub_100676C60(a1, a2, a3, (SEL *)&selRef_identifier);
}

void sub_100678B38(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100678B44(a1, a2, a3, a4, (SEL *)&selRef_setIdentifier_);
}

void sub_100678B44(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v6;
  Class isa;

  v6 = *a2;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, *a5, isa);

}

uint64_t storeEnumTagSinglePayload for REMDueDateDeltaAlertCDIngestor.RelationshipKey(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100678BD4 + 4 * byte_1006C4A86[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100678BF4 + 4 * byte_1006C4A8B[v4]))();
}

_BYTE *sub_100678BD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100678BF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100678BFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100678C04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100678C0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100678C14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for REMDueDateDeltaAlertCDIngestor.RelationshipKey()
{
  return &type metadata for REMDueDateDeltaAlertCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMDueDateDeltaAlertCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100678C7C + 4 * byte_1006C4A95[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100678CB0 + 4 * byte_1006C4A90[v4]))();
}

uint64_t sub_100678CB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100678CB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100678CC0);
  return result;
}

uint64_t sub_100678CCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100678CD4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100678CD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100678CE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMDueDateDeltaAlertCDIngestor.ValueKey()
{
  return &type metadata for REMDueDateDeltaAlertCDIngestor.ValueKey;
}

uint64_t sub_100678CFC()
{
  return sub_1000BAEEC(&qword_1008525B8, &qword_1008525C0);
}

unint64_t sub_100678D24()
{
  unint64_t result;

  result = qword_1008525C8;
  if (!qword_1008525C8)
  {
    result = swift_getWitnessTable(&unk_1006C4DA4, &type metadata for REMDueDateDeltaAlertCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_1008525C8);
  }
  return result;
}

uint64_t sub_100678D68()
{
  return sub_1000BAEEC(&qword_1008525D0, &qword_1008525D8);
}

unint64_t sub_100678D90()
{
  unint64_t result;

  result = qword_1008525E0;
  if (!qword_1008525E0)
  {
    result = swift_getWitnessTable(&unk_1006C4E7C, &type metadata for REMDueDateDeltaAlertCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_1008525E0);
  }
  return result;
}

void sub_100678DD4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Failed to save delete batch. Migration error {deleteError: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_100678E48(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "_applicationDocumentsURLForPersonaIdentifier:accountIdentifier: Failed to get group container url, probably simulator, will use fall back value {personaIdentifier: %@, accountIdentifier: %{public}@}", (uint8_t *)&v3, 0x16u);
}

void sub_100678ECC(NSObject *a1)
{
  void *v2;
  int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  v3 = 138412290;
  v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "rem_log_fault_if (![NSStringFromClass([REMCDAuxiliaryChangeInfo class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAuxiliaryChangeInfo called '- [REMCDAuxiliaryChangeInfo cdEntityName]'. The subclass should override this method. {callstack: %@}", (uint8_t *)&v3, 0xCu);

}

void sub_100678F68(void *a1, NSObject *a2)
{
  NSString *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;

  v4 = NSStringFromSelector((SEL)objc_msgSend(a1, "selector"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "target"));
  v7 = 138412546;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Could not get method for selector %@ on target %@", (uint8_t *)&v7, 0x16u);

}

void sub_10067902C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a2, a3, "Store missing url. Failed to populate RDStoreControllerAccountIdentifier {store: %{public}@}", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_100679090(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a2, a3, "Error fetching accounts. Failed to populate RDStoreControllerAccountIdentifier {error: %{public}@}", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_1006790F4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a2, a3, "Account has nil identifier. Failed to populate RDStoreControllerAccountIdentifier {account: %{public}@}", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_100679158(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a2, a3, "No account found in store {store: %{public}@}", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_1006791C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Trying to add zoneID without an account ID", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_1006791EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Trying to add zoneID with an empty account ID", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679218()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Trying to add nil zoneID.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679244()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Trying to remove zoneID without an account ID", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679270()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Trying to remove zoneID with an empty account ID", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067929C()
{
  NSObject *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  NSString *v6;
  const char *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;

  sub_10005083C();
  v5 = (objc_class *)objc_opt_class(v3, v4);
  v6 = NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue(v6);
  v7 = (const char *)sub_100050934();
  v8 = NSStringFromSelector(v7);
  objc_claimAutoreleasedReturnValue(v8);
  sub_100050940();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  v11 = 138543362;
  v12 = v9;
  sub_100050760((void *)&_mh_execute_header, v0, v10, "[%{public}@] Cannot proceed because account.identifier is nil", (uint8_t *)&v11);

  sub_100050808();
}

void sub_10067935C()
{
  NSObject *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  NSString *v6;
  const char *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;

  sub_10005083C();
  v5 = (objc_class *)objc_opt_class(v3, v4);
  v6 = NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue(v6);
  v7 = (const char *)sub_100050934();
  v8 = NSStringFromSelector(v7);
  objc_claimAutoreleasedReturnValue(v8);
  sub_100050940();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  v11 = 138543362;
  v12 = v9;
  sub_100050860((void *)&_mh_execute_header, v0, v10, "[%{public}@] ICCloudContext does not conform to RDICCloudContextCryptoStringProviding - should implement it in a Swift extension", (uint8_t *)&v11);

  sub_100050808();
}

void sub_10067941C()
{
  NSObject *v0;
  id v1;
  uint8_t v2[24];

  sub_10005095C();
  objc_msgSend(v1, "hasPassedBuddy");
  sub_100050A48();
  sub_1000509D4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Attempting to look up AAAccount while system is not ready {hasPassedBuddy: %d, isSystemAvailableForSyncing: %d}", v2, 0xEu);
  sub_10005073C();
}

void sub_1006794A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "ICCC no longer available upon our RDAccountPersonIDSaltObserver success handler is called", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_1006794CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "ICCC no longer available upon our RDAccountPersonIDSaltObserver error handler is called", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_1006794F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "containerForAccountID: accountID is nil", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679524()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "containerForAccountID: accountID is empty", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679550()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Could not set affectedStores for contextForAccountID:withBatchFetchHelper: because we can't find persistent store for accountID: %{public}@", v2);
  sub_10001F1A4();
}

void sub_1006795B4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Could not set affectedStores for mergeLocalObjectsFetchContext because we can't find persistent store for accountIdentifier: %{public}@", v2);
  sub_10001F1A4();
}

void sub_100679618()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Could not set affectedStores for mergeLocalObjectsWriteContext because we can't find persistent store for accountIdentifier: %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067967C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "filterNonUploadableChangedManagedObjectIDs: objectIDs with nil store id: %{public}@", v2);
  sub_10001F1A4();
}

void sub_1006796E0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "filterNonUploadableChangedManagedObjectIDs: objectIDs with nil entity name: %{public}@", v2);
  sub_10001F1A4();
}

void sub_100679744()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  const char *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[14];
  const char *v12;

  sub_10005083C();
  v4 = (objc_class *)objc_opt_class(v2, v3);
  v5 = NSStringFromClass(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = (const char *)sub_100050934();
  v7 = NSStringFromSelector(v6);
  objc_claimAutoreleasedReturnValue(v7);
  sub_100050940();
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  sub_10005086C();
  v12 = "transactionAuthor";
  sub_10005077C((void *)&_mh_execute_header, v9, v10, "[%{public}@] Passing in nil '%s'", v11);

  sub_100050808();
}

void sub_100679808()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10005095C();
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "operatingSystemVersionString"));
  sub_100050848();
  sub_10005074C((void *)&_mh_execute_header, v2, v3, "Current version of the OS (%{public}@) is not supported for sync. Needs at least (%{public}@)", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_10067989C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "OS version sent from server is in the incorrect format. Should be majorVersion,minorVersion,patchVersion", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_1006798C8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000508F0();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "Error serializing state data for \"%{public}s\": data size greater than UINT32_MAX", v2);
  sub_10001F1A4();
}

void sub_100679930()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10005091C();
  sub_1000507D8((void *)&_mh_execute_header, v0, (uint64_t)v0, "Error serializing state data for \"%{public}s\": %{public}@", v1);
  sub_10001F1A4();
}

void sub_10067999C()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10005083C();
  objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ic_loggingDescription"));
  v2 = objc_msgSend((id)sub_100050A20(), "ic_loggingDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "Zone not found %{public}@ %{public}@", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_100679A28()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10005083C();
  objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ic_loggingDescription"));
  v2 = objc_msgSend((id)sub_100050A20(), "ic_loggingDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "Shared zone not found %{public}@ %{public}@", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_100679AB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Cannot generate PersonIDSalt because there's no primary CK account, shouldn't even call this function", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679AE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "SYNC[FULL] FAIL - no network connection", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679B0C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "readinessLoggingDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "SYNC[FULL] FAIL - not ready {readinessDescription: %{public}@}", v5);

  sub_100050830();
}

void sub_100679B8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "SYNC[FULL] FAIL - no CloudKit account", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679BB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "SYNC[FULL] FAIL - store controller syncing disabled", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679BE4(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_msgSend((id)sub_10005094C(a1, a2), "waiterID");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "Bypassing babysitter against SYNC[FULL], which failed too many times, because sync was user initiated {syncReason: %{public}@, waiterID: %{public}@}", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_100679C60(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = objc_msgSend((id)sub_10005094C(a1, a2), "waiterID");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005077C((void *)&_mh_execute_header, v4, v5, "Babysitting SYNC[FULL] because it failed too many times {syncReason: %{public}@, waiterID: %{public}@}", v6);

  sub_10005073C();
}

void sub_100679CE0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100050984(__stack_chk_guard);
  sub_1000508F0();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "SYNC[FULL] FAIL {error: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_100679D44()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100050818();
  sub_10005078C((void *)&_mh_execute_header, v0, (uint64_t)v0, "SYNC[FULL] FAIL {error: %{public}@, syncReason: %{public}@}", v1);
  sub_10001F1A4();
}

void sub_100679DB0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "_syncWithReason: Error fetching database changes during full sync {fetchDatabaseChangesError: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_100679E14()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "_syncWithReason: Error fetching record zone changes during full sync {fetchRecordZoneChangesError: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_100679E78(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "firstObject"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "_syncWithReason: Error while processing for full sync {processingErrors.first: %{public}@}", v5);

  sub_100050830();
}

void sub_100679EF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Timed out when cancelling the cloud operations. Performing cleanup anyway.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679F24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Trying to deleteRecordZonesWithZoneIDs with empty accountID.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100679F50()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10005091C();
  sub_10005078C((void *)&_mh_execute_header, v0, (uint64_t)v0, "Error deleting zones in account ID %{public}@: {operationError: %{public}@}", v1);
  sub_10001F1A4();
}

void sub_100679FBC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_1000508E4((void *)&_mh_execute_header, v0, v1, "Updating CloudKit account status for account: %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067A020()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_1000508F0();
  v3 = 2112;
  v4 = v0;
  sub_10005078C((void *)&_mh_execute_header, v1, (uint64_t)v1, "Error updating account status for account: %{public}@, %@", v2);
  sub_10001F1A4();
}

void sub_10067A09C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Per-record error fetching user record {userRecordError: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_10067A100()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Error fetching user record: %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067A164()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Trying to fetchUserRecordWithAccountID with empty accountID.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067A190()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "updateUserRecordWithAccountID: accountID is nil or empty", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067A1BC()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10005083C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ic_loggingDescription"));
  sub_1000507CC();
  sub_10005074C((void *)&_mh_execute_header, v2, v3, "Error fetching user record ID: %{public}@, error: %@", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_10067A244(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ic_loggingDescription"));
  v6 = 138543618;
  v7 = a1;
  sub_1000507F8();
  sub_10005077C((void *)&_mh_execute_header, v4, v5, "rem_log_fault_if (accountID == nil) -- Trying to fetch a cloud object {recordType: %{public}@, recordID: %{public}@} without an account ID", (uint8_t *)&v6);

  sub_10005073C();
}

void sub_10067A2D4(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  sub_1000507D8((void *)&_mh_execute_header, a3, (uint64_t)a3, "rem_log_fault_if (recordID == nil) -- Trying to fetch a cloud object {recordType: %{public}@, accountID: %{public}@} without a record ID", (uint8_t *)&v3);
  sub_10001F1A4();
}

void sub_10067A34C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Account ID is required to create fetch record operations.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067A378()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "operationToFetchRecordIDs:database operation.perRecordCompletionBlock with nil recordID", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067A3A4()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5[24];

  sub_10005083C();
  v1 = objc_msgSend((id)sub_100050894(v0), "ic_loggingDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100050848();
  sub_10005077C((void *)&_mh_execute_header, v3, v4, "accountID is nil or empty in fetchOperation:fetchRecord: %{public}@, accountID: %{public}@", v5);

  sub_10005073C();
}

void sub_10067A424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  sub_10005095C();
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 56), "ic_loggingDescription"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v0 + 72), "ic_loggingDescription"));
  sub_1000509B0((void *)&_mh_execute_header, v2, v3, "Fetched in account ID %{public}@: %@ %{public}@", v4, v5, v6, v7, 2u);

  sub_100050808();
}

void sub_10067A4D4()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10005083C();
  v2 = objc_msgSend((id)sub_100050A04(v1), "ic_loggingDescription");
  objc_claimAutoreleasedReturnValue(v2);
  sub_100050968();
  sub_100050818();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "Error fetching {operation: %{public}@, error: %{public}@}", v5, v6, v7, v8, v9);

  sub_10005073C();
}

void sub_10067A550(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ic_loggingDescription"));
  sub_1000507F8();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "didFetchShare: Cannot get CK account {ckIdentifier: %{public}@} for {record: %{public}@, nil rootRecordType}", v5, v6, v7, v8, 2u);

  sub_10005073C();
}

void sub_10067A5DC(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_loggingDescription"));
  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, a2, v5, "Received a share with no root record ID: %{public}@", v6);

  sub_10005073C();
}

void sub_10067A670(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_loggingDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v5, "Received share for unknown object: %{public}@", v6);

  sub_10005073C();
}

void sub_10067A704()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000508F0();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Error deleting shares for objects in account ID %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067A76C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Creating modify operations: Account ID is required to create operations.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067A798(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a1 = 134217984;
  *(_QWORD *)(a1 + 4) = a2;
  sub_1000508E4((void *)&_mh_execute_header, a3, (uint64_t)a3, "Grouping modify operations into %ld batches", (uint8_t *)a1);
}

void sub_10067A7D4(_BYTE *a1, _BYTE *a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_100050974(a1, a2);
  sub_1000509C4((void *)&_mh_execute_header, v2, v3, "Ending batch because we've reached maxRecordCountPerBatch", v4);
}

void sub_10067A7FC(_BYTE *a1, _BYTE *a2)
{
  int v2;
  os_log_t v3;
  uint8_t *v4;

  sub_100050974(a1, a2);
  sub_1000509C4((void *)&_mh_execute_header, v2, v3, "Ending batch because we're out of records", v4);
}

void sub_10067A824(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend((id)sub_100050880(a1, a2), "recordID");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000509A4((uint64_t)v3, 5.7779e-34);
  sub_1000508FC((void *)&_mh_execute_header, v4, v5, "Adding record to save batch: %@");

  sub_1000508D8();
}

void sub_10067A870(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint8_t *v3;
  id v4;
  void *v5;

  v4 = objc_msgSend((id)sub_100050880(a1, a2), "recordID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000509A4((uint64_t)v5, 5.8381e-34);
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Ending batch because an impossible batch was detected ICCloudContext: %{public}@", v3, 0xCu);

  sub_1000508D8();
}

void sub_10067A8CC(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend((id)sub_100050880(a1, a2), "recordID");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000509A4((uint64_t)v3, 5.7779e-34);
  sub_1000508FC((void *)&_mh_execute_header, v4, v5, "Ending batch because record does not fit: %@");

  sub_1000508D8();
}

void sub_10067A918()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_1000508E4((void *)&_mh_execute_header, v0, v1, "About to create modify operation for database: %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067A97C(void *a1, int a2, NSObject *a3)
{
  void *v5;
  uint8_t v6[12];
  __int16 v7;
  int v8;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingDescription"));
  sub_1000507CC();
  v7 = 1024;
  v8 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Progress pushing %@: %d%%", v6, 0x12u);

  sub_10005073C();
}

void sub_10067AA18()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_100050A3C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ic_loggingDescription"));
  sub_1000508A0();
  sub_10005077C((void *)&_mh_execute_header, v2, v3, "accountID is nil or empty in modifyRecordsOperation:perSaveRecordCompletion %{public}@, accountID: %{public}@", v4);

  sub_10005073C();
}

void sub_10067AA9C()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_10005083C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ic_loggingDescription"));
  sub_100050848();
  sub_10005077C((void *)&_mh_execute_header, v2, v3, "accountID is nil or empty in modifyRecordsOperation:recordWasDeletedWithRecordID %{public}@, accountID: %{public}@", v4);

  sub_10005073C();
}

void sub_10067AB1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint8_t v8[40];

  sub_10005083C();
  v4 = objc_msgSend((id)sub_100050A2C(v2, v3), "ic_loggingDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 64), "ic_loggingDescription"));
  sub_1000508B8();
  sub_100050910((void *)&_mh_execute_header, v0, v7, "No record on server to delete in account ID %{public}@: %{public}@ %{public}@", v8);

  sub_100050808();
}

void sub_10067ABB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint8_t v8[40];

  sub_10005083C();
  v4 = objc_msgSend((id)sub_100050A2C(v2, v3), "ic_loggingDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 64), "ic_loggingDescription"));
  sub_1000508B8();
  sub_100050910((void *)&_mh_execute_header, v0, v7, "Reference violation in account ID %{public}@: for %{public}@ %{public}@", v8);

  sub_100050808();
}

void sub_10067AC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  sub_10005083C();
  v3 = objc_msgSend((id)sub_100050A2C(v1, v2), "ic_loggingDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v0 + 64), "ic_loggingDescription"));
  sub_1000508B8();
  sub_1000509B0((void *)&_mh_execute_header, v6, v7, "Batch request failed in account ID %{public}@: for deleting %{public}@ %{public}@", v8, v9, v10, v11, v12);

  sub_100050808();
}

void sub_10067ACDC()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5[24];

  sub_10005083C();
  v1 = objc_msgSend((id)sub_100050894(v0), "ic_loggingDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100050848();
  sub_10005077C((void *)&_mh_execute_header, v3, v4, "accountID is nil or empty in modifyRecordsOperation:didCompleteWithError: %{public}@, accountID: %{public}@", v5);

  sub_10005073C();
}

void sub_10067AD5C()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10005083C();
  v2 = objc_msgSend((id)sub_100050894(v1), "ic_loggingDescription");
  objc_claimAutoreleasedReturnValue(v2);
  sub_100050968();
  sub_100050818();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "Error modifying records %{public}@: %{public}@", v5, v6, v7, v8, v9);

  sub_10005073C();
}

void sub_10067ADD8()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10005083C();
  v2 = objc_msgSend((id)sub_100050894(v1), "ic_loggingDescription");
  objc_claimAutoreleasedReturnValue(v2);
  sub_100050968();
  sub_100050818();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "Partial error for modify operation %{public}@: %{public}@", v5, v6, v7, v8, v9);

  sub_10005073C();
}

void sub_10067AE54(uint64_t a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = objc_msgSend((id)sub_100050894(a1), "ic_loggingDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v5, "Error modifying records, canceling dependent operations: %{public}@", v6);

  sub_100050830();
}

void sub_10067AED4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "User exceeded iCloud quota in account ID %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067AF38()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_100050A3C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ic_loggingDescription"));
  sub_1000508A0();
  sub_10005077C((void *)&_mh_execute_header, v2, v3, "accountID is nil or empty in handleGenericPartialFailuresForError %{public}@, accountID: %{public}@", v4);

  sub_10005073C();
}

void sub_10067AFBC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Unexpected item id %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067B020()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Error topologically sorting records: %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067B084()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  sub_10005095C();
  v3 = (id)objc_opt_class(*(_QWORD *)(v1 + 32), v2);
  v4 = objc_msgSend((id)sub_100050934(), "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v6, v7, "Ignoring this object that doesn't have an account id: %{public}@, %{public}@", v8, v9, v10, v11, v12);

  sub_10005073C();
}

void sub_10067B11C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_100050974(a1, a2);
  sub_1000507A8((void *)&_mh_execute_header, v2, (uint64_t)v2, "No record ID when trying to modify record", v3);
}

void sub_10067B148(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend((id)sub_100050880(a1, a2), "ic_loggingDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000509A4((uint64_t)v3, 5.8381e-34);
  sub_1000508FC((void *)&_mh_execute_header, v4, v5, "Trying to modify two instances of the same object %{public}@");

  sub_1000508D8();
}

void sub_10067B194()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Continue to save context while having custom validation failures for %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067B1F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (partialError.code != CKErrorPartialFailure) -- Called -partialFailure:containsError with a non-partialFailure.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067B224()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "%{public}@", v2);
  sub_10001F1A4();
}

void sub_10067B288()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "%{public}@", v2);
  sub_10001F1A4();
}

void sub_10067B2EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Trying to create operationToSaveZonesForZoneIDs with empty accountID.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067B318()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10005083C();
  v2 = objc_msgSend((id)sub_100050A04(v1), "ic_loggingDescription");
  objc_claimAutoreleasedReturnValue(v2);
  sub_100050968();
  sub_100050818();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "Error saving zones %{public}@: %{public}@", v5, v6, v7, v8, v9);

  sub_10005073C();
}

void sub_10067B394(uint64_t a1, NSObject *a2)
{
  id WeakRetained;
  uint64_t v4;
  uint8_t v5[24];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  sub_1000507CC();
  sub_1000508E4((void *)&_mh_execute_header, a2, v4, "Processing objects with operation %{public}p", v5);

  sub_100050830();
}

void sub_10067B414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "SYNC[COREDATA] FAIL", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067B440()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "SYNC[COREDATA] ERROR - upload is suspended", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067B46C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "SYNC[COREDATA] ERROR - network isn't reachable", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067B498(void *a1, NSObject *a2)
{
  void *v4;
  unsigned int v5;
  void *v6;
  unsigned int v7;
  void *v8;
  _DWORD v9[2];
  __int16 v10;
  unsigned int v11;
  __int16 v12;
  void *v13;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectIDsToProcess"));
  v5 = objc_msgSend(v4, "count");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectIDsToRetry"));
  v7 = objc_msgSend(v6, "count");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "readinessLoggingDescription"));
  v9[0] = 67109634;
  v9[1] = v5;
  v10 = 1024;
  v11 = v7;
  v12 = 2114;
  v13 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SYNC[COREDATA] ERROR - is pendingAccountInitializerCompleteOnLaunch {idsToProc.count: %d, idsToRetry.count: %d, readinessDescription: %{public}@}", (uint8_t *)v9, 0x18u);

}

void sub_10067B590(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "readinessLoggingDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "SYNC[COREDATA] ERROR - not ready {readinessDescription: %{public}@}", v5);

  sub_100050830();
}

void sub_10067B610()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "SYNC[COREDATA] ERROR - no CloudKit account", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067B63C()
{
  __int16 v0;
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[22];
  __int16 v4;
  uint64_t v5;

  sub_1000509EC();
  v4 = v0;
  v5 = v1;
  sub_100050910((void *)&_mh_execute_header, v2, (uint64_t)v2, "accountID is nil or empty in processPendingCloudObjectsWithOperationName:syncReason:completionHandler: operationName: %{public}@, syncReason: %{public}@, accountID: %{public}@", v3);
}

void sub_10067B6B4()
{
  NSObject *v0;
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  id v13;

  sub_10005083C();
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v4, "timeIntervalSinceDate:", v3[4]);
  v6 = v5;
  objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "firstObject"));
  v8 = 134218498;
  v9 = v6;
  v10 = 2114;
  v11 = v3;
  v12 = 2048;
  v13 = objc_msgSend((id)sub_100050A20(), "count");
  sub_100050910((void *)&_mh_execute_header, v0, v7, "SYNC[COREDATA] FAIL {duration: %.4f, errors.first: %{public}@, errors.count: %ld}", (uint8_t *)&v8);

}

void sub_10067B798()
{
  NSObject *v0;
  id v1;
  uint64_t v2;
  uint8_t v3[24];

  sub_10005095C();
  objc_msgSend(v1, "hasPassedBuddy");
  sub_100050A48();
  sub_1000509D4();
  sub_100050A54((void *)&_mh_execute_header, v0, v2, "MERGE.LOCAL: Trying to call addOperationToMergeLocalObjectsWithCompletionHandler: when system has not passed buddy or system-migrator {hasPassedBuddy: %d, isSystemAvailableForSyncing: %d}", v3);
  sub_10005073C();
}

void sub_10067B814()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100050984(__stack_chk_guard);
  sub_1000508F0();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "MERGE.LOCAL: (MergeLocalObjectsContext) Could not find CK account matching {accountIdentifier: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_10067B878()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "MERGE.LOCAL: Maximum retry count reached for Merge.Local, aborting", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067B8A4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100050984(__stack_chk_guard);
  sub_1000508F0();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "MERGE.LOCAL[COREDATA] Account not found with accountID %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067B908()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100050984(__stack_chk_guard);
  sub_1000508F0();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "MERGE.LOCAL[COREDATA] MERGE SAVE FAILED! for accountID %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067B96C(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend((id)sub_100050880(a1, a2), "loggingDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000509A4((uint64_t)v3, 5.7779e-34);
  sub_100050990((void *)&_mh_execute_header, v4, v5, "Not syncing object because it's missing mandatory fields: %@");

  sub_1000508D8();
}

void sub_10067B9B8(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "readinessLoggingDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "SYNC[APS] ERROR - Disabled or not ready {readinessDescription: %{public}@}", v5);

  sub_100050830();
}

void sub_10067BA38()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10005095C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "subscriptionOwnerUserRecordID"));
  sub_1000507F8();
  sub_10005074C((void *)&_mh_execute_header, v2, v3, "SYNC[APS] CONTINUE - Cannot handle this CKDatabaseNotification because subscriptionOwnerUserRecordID is nil or empty, skipping {databaseNotification: %{public}@, subscriptionOwnerUserRecordID: %{public}@}", v4, v5, v6, v7, 2u);

  sub_10005073C();
}

void sub_10067BABC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;

  v2 = (void *)objc_opt_class(a1, a2);
  v3 = v2;
  objc_opt_class(CKDatabaseNotification, v4);
  v9 = 138543618;
  v10 = v2;
  sub_1000507F8();
  v6 = v5;
  sub_10005077C((void *)&_mh_execute_header, v7, v8, "SYNC[APS] FAULT - Received database notificiation (%{public}@), but expected %{public}@", (uint8_t *)&v9);

  sub_10005073C();
}

void sub_10067BB64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (database == nil) -- SYNC[APS] CONTINUE - [container databaseWithDatabaseScope:databaseScope] is nil unexpectedly, bailing out APS sync", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067BB90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Unexpected nil accountID calling into _handleDatabaseNotification:database:accountID:completionHandler:", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067BBBC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "...SYNC[APS] ERROR fetching database changes during aps notification sync {error: %{public}@}", v5);

  sub_100050830();
}

void sub_10067BC3C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "...SYNC[APS] ERROR fetching record zone changes during aps notification sync {error: %{public}@}", v5);

  sub_100050830();
}

void sub_10067BCBC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "firstObject"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "...SYNC[APS] ERROR processing for aps notification sync {processingErrors.first: %{public}@}", v5);

  sub_100050830();
}

void sub_10067BD3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Trying to populate operationsToFetchRecordZoneChangesForZoneIDs with nil or empty accountID.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067BD68(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend((id)sub_100050880(a1, a2), "ic_loggingDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000509A4((uint64_t)v3, 5.8381e-34);
  sub_100050990((void *)&_mh_execute_header, v4, v5, "operationToFetchRecordZoneChangesForZoneIDs existingOperation %{public}@ with nil or empty accountID.");

  sub_1000508D8();
}

void sub_10067BDB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "operationToFetchRecordZoneChangesForZoneIDs with nil or empty accountID.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067BDE0()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5[24];

  sub_10005083C();
  v1 = objc_msgSend((id)sub_100050894(v0), "ic_loggingDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100050848();
  sub_10005077C((void *)&_mh_execute_header, v3, v4, "accountID is nil or empty in fetchRecordZoneChangesOperation %{public}@, accountID: %{public}@", v5);

  sub_10005073C();
}

void sub_10067BE60()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5[24];

  sub_10005083C();
  v1 = objc_msgSend((id)sub_100050894(v0), "ic_loggingDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100050848();
  sub_10005077C((void *)&_mh_execute_header, v3, v4, "accountID is nil or empty in fetchRecordZoneChangesOperationDidComplete %{public}@, accountID: %{public}@", v5);

  sub_10005073C();
}

void sub_10067BEE0()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_10005083C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ic_loggingDescription"));
  sub_100050848();
  sub_10005077C((void *)&_mh_execute_header, v2, v3, "[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] accountID is nil or empty %{public}@, accountID: %{public}@", v4);

  sub_10005073C();
}

void sub_10067BF60(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_shortLoggingDescription"));
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v2, v3, "[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] No account after record changed {accountID: %{public}@, operation: %{public}@}", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_10067BFE4()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_10005083C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ic_loggingDescription"));
  sub_100050848();
  sub_10005077C((void *)&_mh_execute_header, v2, v3, "accountID is nil or empty in fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID: %{public}@, accountID: %{public}@", v4);

  sub_10005073C();
}

void sub_10067C064()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (ckRecordIDs.count > 0) -- Some record IDs marked as needing to sort children are left not sorted {ckRecordIDs: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_10067C0C8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_1000508E4((void *)&_mh_execute_header, v0, v1, "Adding private and shared cloud databases for account: %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067C12C()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[24];

  sub_100050A3C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ic_loggingDescription"));
  sub_1000508A0();
  sub_10005077C((void *)&_mh_execute_header, v2, v3, "accountID is nil or empty in operationToFetchDatabaseChangesForDatabase %{public}@, accountID: %{public}@", v4);

  sub_10005073C();
}

void sub_10067C1B0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10005095C();
  v2 = objc_msgSend((id)sub_100050A04(v1), "ic_loggingDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v0 + 48), "ic_loggingDescription"));
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v5, v6, "accountID is nil in fetchDatabaseChangesOperation:finishedWithServerChangeToken:accountID:error:completionHandler: %{public}@ %{public}@", v7, v8, v9, v10, v11);

  sub_10005073C();
}

void sub_10067C240(uint64_t a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = objc_msgSend((id)sub_100050894(a1), "ic_loggingDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v5, "Error fetching database changes, canceling dependent operations: %{public}@", v6);

  sub_100050830();
}

void sub_10067C2C0()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_1000507CC();
  v3 = 2048;
  v4 = v0;
  sub_10005078C((void *)&_mh_execute_header, v1, (uint64_t)v1, "%@: Maximum retry count reached, aborting (maxRetryCount: %lu)", v2);
  sub_10001F1A4();
}

void sub_10067C334(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_msgSend((id)sub_100050A10(a1, a2), "ic_loggingDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "Database changes server change token expired for account %{public}@, %{public}@", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_10067C3B0(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_msgSend((id)sub_100050A10(a1, a2), "ic_loggingDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "Operation to fetch database changes was cancelled for account %{public}@, %{public}@", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_10067C42C(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_msgSend((id)sub_100050A10(a1, a2), "ic_loggingDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "Operation to fetch database changes failed with no network connection for account %{public}@, %{public}@", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_10067C4A8(char a1, char a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a3 = 67109376;
  *(_DWORD *)(a3 + 4) = a1 & 1;
  *(_WORD *)(a3 + 8) = 1024;
  *(_DWORD *)(a3 + 10) = a2 & 1;
  sub_100050A54((void *)&_mh_execute_header, a4, a3, "updateSubscriptions: Trying to get ACAccount appleAccountUtilities when system has not passed buddy or system-migrator {hasPassedBuddy: %d, isSystemAvailableForSyncing: %d}", (uint8_t *)a3);
}

void sub_10067C4FC()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10005083C();
  v2 = objc_msgSend((id)sub_100050A04(v1), "ic_loggingDescription");
  objc_claimAutoreleasedReturnValue(v2);
  sub_100050968();
  sub_100050818();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "Error fetching subscriptions %{public}@: %{public}@", v5, v6, v7, v8, v9);

  sub_10005073C();
}

void sub_10067C578()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5[24];

  sub_100050A3C();
  v1 = objc_msgSend((id)sub_100050894(v0), "ic_loggingDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_1000508A0();
  sub_10005077C((void *)&_mh_execute_header, v3, v4, "accountID is nil or empty in saveSubscriptionsForDatabase: %{public}@, accountID: %{public}@", v5);

  sub_10005073C();
}

void sub_10067C5FC()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_10005083C();
  v2 = objc_msgSend((id)sub_100050A04(v1), "ic_loggingDescription");
  objc_claimAutoreleasedReturnValue(v2);
  sub_100050968();
  sub_100050818();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "Error saving subscriptions %{public}@: %{public}@", v5, v6, v7, v8, v9);

  sub_10005073C();
}

void sub_10067C678(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = objc_msgSend((id)sub_10005094C(a1, a2), "waiterID");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "Bypassing babysitter against updateCloudContextState, which failed too many times, because sync was user initiated {syncReason: %{public}@, waiterID: %{public}@}", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_10067C6F4(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[24];

  v2 = objc_msgSend((id)sub_10005094C(a1, a2), "waiterID");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005077C((void *)&_mh_execute_header, v4, v5, "Babysitting updateCloudContextState because it failed too many times {syncReason: %{public}@, waiterID: %{public}@}", v6);

  sub_10005073C();
}

void sub_10067C774()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (syncReason == nil) -- No sync reason passed to updateCloudContextStateWithSyncOption", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067C7A0(uint64_t a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = objc_msgSend((id)sub_100050894(a1), "readinessLoggingDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v5, "Not ready to sync after updating cloud context state: %{public}@", v6);

  sub_100050830();
}

void sub_10067C824()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "No longer reachable after updating cloud context state", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067C850()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "No longer in foreground after updating cloud context state", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067C87C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "WARNING: LOOKATME: UpdateCloudContextState: CK account is inactive but didChooseToMigrate=YES && didFinishMigration=NO, try FetchUserRecord again... {accountID: %{public}@}", v5);

  sub_100050830();
}

void sub_10067C8FC()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_1000509EC();
  sub_10005078C((void *)&_mh_execute_header, v0, (uint64_t)v0, "UpdateCloudContextState: Error fetching user record with accountIdentifier: %{public}@: %{public}@", v1);
  sub_10001F1A4();
}

void sub_10067C96C()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100050818();
  sub_10005078C((void *)&_mh_execute_header, v0, (uint64_t)v0, "error fetching all long lived operation IDs: %{public}@, accountID: %{public}@", v1);
  sub_10001F1A4();
}

void sub_10067C9D8()
{
  __int16 v0;
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[22];
  __int16 v4;
  uint64_t v5;

  sub_10005091C();
  v4 = v0;
  v5 = v1;
  sub_100050910((void *)&_mh_execute_header, v2, (uint64_t)v2, "error fetching long lived operation, ID: %{public}@ error: %{public}@ accountID: %{public}@", v3);
}

void sub_10067CA50(uint64_t a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = objc_msgSend((id)sub_100050894(a1), "readinessLoggingDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v5, "ICCC: Not retrying because we're not ready: %{public}@", v6);

  sub_100050830();
}

void sub_10067CAD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "ICCC: Not retrying because we have no internet connection", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067CB00(uint64_t a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = objc_msgSend((id)sub_100050894(a1), "readinessLoggingDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v5, "Retry timer fired, but we're not ready to sync: %{public}@", v6);

  sub_100050830();
}

void sub_10067CB84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Retry timer fired, but we have no internet connection", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067CBB0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "CKFetchDatabaseChangesOperation: Error occured when retrying to sync {error: %@}", v2);
  sub_10001F1A4();
}

void sub_10067CC14()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "CloudSchemaCatchUpSync: Error occured when retrying to catch-up sync {error: %@}", v2);
  sub_10001F1A4();
}

void sub_10067CC78()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "MERGE.LOCAL: Error occured when retrying to merge local objects {error: %@}", v2);
  sub_10001F1A4();
}

void sub_10067CCDC()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10005083C();
  objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ic_loggingDescription"));
  v2 = sub_100050A20();
  v3 = CKDatabaseScopeString(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v5, v6, "accountID is nil in saveServerChangeToken:forRecordZoneID:databaseScope:accountID: %{public}@ %{public}@", v7, v8, v9, v10, v11);

  sub_10005073C();
}

void sub_10067CD68()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_100050A3C();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ic_loggingDescription"));
  v3 = CKDatabaseScopeString(v0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507F8();
  sub_10005074C((void *)&_mh_execute_header, v5, v6, "accountID is nil in serverChangeTokenForRecordZoneID:databaseScope:accountID: %{public}@ %{public}@", v7, v8, v9, v10, 2u);

  sub_10005073C();
}

void sub_10067CE04()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100050984(__stack_chk_guard);
  sub_1000508F0();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Couldn't find account to obtain server change token with account ID: %@", v2);
  sub_10001F1A4();
}

void sub_10067CE68()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10005083C();
  objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ic_loggingDescription"));
  v2 = sub_100050A20();
  v3 = CKDatabaseScopeString(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507B4();
  sub_10005074C((void *)&_mh_execute_header, v5, v6, "accountID is nil in deleteServerChangeTokenForRecordZoneID:databaseScope:accountID: %{public}@ %{public}@", v7, v8, v9, v10, v11);

  sub_10005073C();
}

void sub_10067CEF4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100050984(__stack_chk_guard);
  sub_1000508F0();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Couldn't find account to obtain server change token with account ID: %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067CF58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "deleteAllApplicationDataFromServerWithAccountID: accountID is nil or empty", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067CF84()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000508F0();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Failed to fetch user record in account: %{public}@ for updating", v2);
  sub_10001F1A4();
}

void sub_10067CFEC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Failed to update user record for resetting migration state {error: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_10067D050()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (self.accountPersonIDSaltObserver != nil) -- accountPersonIDSaltObserver should not be created from -_accountsDidEnableOrDisable if the primary CK account is absent or inactive", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067D07C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "ICCC: RDAccountInitializer failed, so we won't UpdateCloudContext after accountsDidChange: {error: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_10067D0E0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Failed to get push token: %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067D144(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100050860((void *)&_mh_execute_header, a3, (uint64_t)a3, "SYNC[APS] FAIL - CKNotification failed to parse APS message {apsTopic: %{public}@}", (uint8_t *)a2);

}

void sub_10067D190(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100050860((void *)&_mh_execute_header, a3, (uint64_t)a3, "SYNC[APS] FAIL - unexpected aps topic {topic: %{public}@}", (uint8_t *)a2);

}

void sub_10067D1DC(uint64_t a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = objc_msgSend((id)sub_100050894(a1), "waiterID");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, a2, v5, "Babysitting APS's didReceiveIncomingMessage because it failed too many times {waiterID: %{public}@}", v6);

  sub_100050830();
}

void sub_10067D25C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "SYNC[APS] PUSH FAIL {error: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_10067D2C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Force-setting migration state: cannot get display account for force-setting migration state", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067D2EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Timeout fetching user / account record for force-setting migration state", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067D318()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Timeout creating zone record for force-setting migration state", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067D344()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Force-setting migration state: Reminders zone creation failed with error: %@", v2);
  sub_10001F1A4();
}

void sub_10067D3A8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "CloudSchemaCatchUpSync: Maximum retry count reached, aborting (maxRetryCount: %lu)", v2);
  sub_10001F1A4();
}

void sub_10067D40C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  const char *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[14];
  const char *v12;

  sub_10005083C();
  v4 = (objc_class *)objc_opt_class(v2, v3);
  v5 = NSStringFromClass(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = (const char *)sub_100050934();
  v7 = NSStringFromSelector(v6);
  objc_claimAutoreleasedReturnValue(v7);
  sub_100050940();
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  sub_10005086C();
  v12 = "accountIdentifier";
  sub_10005077C((void *)&_mh_execute_header, v9, v10, "[%{public}@] Passing in nil '%s'", v11);

  sub_100050808();
}

void sub_10067D4D0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  const char *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[14];
  const char *v12;

  sub_10005083C();
  v4 = (objc_class *)objc_opt_class(v2, v3);
  v5 = NSStringFromClass(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = (const char *)sub_100050934();
  v7 = NSStringFromSelector(v6);
  objc_claimAutoreleasedReturnValue(v7);
  sub_100050940();
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  sub_10005086C();
  v12 = "cdAccount.remObjectID";
  sub_10005077C((void *)&_mh_execute_header, v9, v10, "[%{public}@] Passing in nil '%s'", v11);

  sub_100050808();
}

void sub_10067D594()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  const char *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[14];
  const char *v12;

  sub_10005083C();
  v4 = (objc_class *)objc_opt_class(v2, v3);
  v5 = NSStringFromClass(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = (const char *)sub_100050934();
  v7 = NSStringFromSelector(v6);
  objc_claimAutoreleasedReturnValue(v7);
  sub_100050940();
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  sub_10005086C();
  v12 = "managedObjectContext";
  sub_10005077C((void *)&_mh_execute_header, v9, v10, "[%{public}@] Passing in nil '%s'", v11);

  sub_100050808();
}

void sub_10067D658()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  const char *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[14];
  const char *v12;

  sub_10005083C();
  v4 = (objc_class *)objc_opt_class(v2, v3);
  v5 = NSStringFromClass(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = (const char *)sub_100050934();
  v7 = NSStringFromSelector(v6);
  objc_claimAutoreleasedReturnValue(v7);
  sub_100050940();
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  sub_10005086C();
  v12 = "storeController";
  sub_10005077C((void *)&_mh_execute_header, v9, v10, "[%{public}@] Passing in nil '%s'", v11);

  sub_100050808();
}

void sub_10067D71C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (![managedObjectContext.__unsafe_doesNotWorkUniversally_affectedStores.firstObject.identifier isEqual:cdAccount.objectID.persistentStore.identifier]) -- MergeLocalObjectsContext: The MoC has a different affectedStores set than the given cdAccount's store", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067D748()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (managedObjectContext.__unsafe_doesNotWorkUniversally_affectedStores.count != 1) -- MergeLocalObjectsContext: Must set affectedStores on the MoC used to validate with the given cdAccount", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067D774(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "accountIdentifier"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "MergeLocalObjectsContext.validate:(MERGE.LOCAL) This CK account has never attempted migration, how come? {accountIdentifier: %{public}@}", v5);

  sub_100050830();
}

void sub_10067D7F4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  const char *v6;
  NSString *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[14];
  const char *v12;

  sub_10005083C();
  v4 = (objc_class *)objc_opt_class(v2, v3);
  v5 = NSStringFromClass(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = (const char *)sub_100050934();
  v7 = NSStringFromSelector(v6);
  objc_claimAutoreleasedReturnValue(v7);
  sub_100050940();
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  sub_10005086C();
  v12 = "[cdAccount.remObjectID.uuid.UUIDString isEqualToString:self.accountIdentifier]";
  sub_10005077C((void *)&_mh_execute_header, v9, v10, "[%{public}@] Passing in nil '%s'", v11);

  sub_100050808();
}

void sub_10067D8B8(NSObject *a1)
{
  void *v2;
  int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  v3 = 138412290;
  v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "rem_log_fault_if (![NSStringFromClass([REMCDAlarmTrigger class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAlarmTrigger called '- [REMCDAlarmTrigger cdEntityName]'. The subclass should override this method. {callstack: %@}", (uint8_t *)&v3, 0xCu);

}

void sub_10067D954(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remObjectID"));
  v4 = 138543362;
  v5 = v3;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Should not unset the tombstone field .reminderIdentifier of an REMCDHashtag {cdHashtag: %{public}@}", (uint8_t *)&v4, 0xCu);

}

void sub_10067D9E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Configuration has no version", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DA14(void *a1, NSObject *a2)
{
  uint8_t v3[12];
  __int16 v4;
  uint64_t v5;

  objc_msgSend(a1, "unsignedIntegerValue");
  sub_1000507CC();
  v4 = 2048;
  v5 = 2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Configuration version (%ld) is not the expected version (%ld)", v3, 0x16u);
  sub_100050830();
}

void sub_10067DAA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Cache directory is unavailable for reading configuration cache", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DACC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Unable to download remote configuration.", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DAF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Cache directory is unavailable for writing configuration cache", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DB24()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Not able to write remote configuration to cache. {writeError: %{public}@}", v2);
}

void sub_10067DB8C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "Error serializing plist data to dictionary: %@", v5);

  sub_100050830();
}

void sub_10067DC0C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSHTTPURLResponse localizedStringForStatusCode:](NSHTTPURLResponse, "localizedStringForStatusCode:", objc_msgSend(a1, "statusCode")));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "Connected to remote configuration plist server but got back non 200 response: %{public}@", v5);

  sub_100050830();
}

void sub_10067DCA0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "Error downloading remote configuration plist: %{public}@", v5);

  sub_100050830();
}

void sub_10067DD20()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Failed to load cloud configuration dictionary {configurationURL: %{public}@}", v2);
}

void sub_10067DD88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Trying to create a cloud configuration with no max attachment size", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DDB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Trying to create a cloud configuration with no max sub attachments per attachment", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DDE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Trying to create a cloud configuration with no max attachments per note", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DE0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Trying to create a cloud configuration with no max inline asset size", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DE38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Trying to create a cloud configuration with no throttling levels", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DE64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Trying to create a cloud configuration with no minimum client version", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067DE90(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint8_t v11[40];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "previousList"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "list"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
  sub_100057F08();
  sub_100050910((void *)&_mh_execute_header, a2, v10, "Validation Failure: Tried to move reminders accross lists in an unsupported account {fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}", v11);

  sub_100057F40();
}

void sub_10067DF78(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint8_t v11[40];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "previousList"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "list"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
  sub_100057F08();
  sub_100050910((void *)&_mh_execute_header, a2, v10, "Validation Failure: Tried to move reminders accross shared lists in an unsupported account {fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}", v11);

  sub_100057F40();
}

void sub_10067E060(void *a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "list"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "list"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  sub_100057F58((void *)&_mh_execute_header, v7, v8, "Validation Failure: Subtasks are left on a different list to its parent reminder {subtask.list.identifier: %{public}@, list.identifier: %{public}@, subtask.identifier: %{public}@, reminder.identifier: %{public}@}", v9, v10, v11, v12, 2u);

  sub_100057F28();
}

void sub_10067E168(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "parentReminder"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "list"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "list"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "parentReminder"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  sub_100057F58((void *)&_mh_execute_header, v8, v9, "Validation Failure: Tried to set a subtask on a different list to its parent reminder {parentList.identifier: %{public}@, list.identifier: %{public}@, parentReminder.identifier: %{public}@, reminder.identifier: %{public}@}", v10, v11, v12, v13, 2u);

}

void sub_10067E2A8(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint8_t v10[40];

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "list"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "parentReminder"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  sub_100057F08();
  sub_100050910((void *)&_mh_execute_header, a2, v9, "Validation Failure: Tried to create nested subtasks {list.identifier: %{public}@, parentReminder.identifier: %{public}@, reminder.identifier: %{public}@}", v10);

}

void sub_10067E38C(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "previousList"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "list"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
  v11 = 138544130;
  v12 = v4;
  v13 = 2114;
  v14 = v6;
  v15 = 2114;
  v16 = v8;
  v17 = 2114;
  v18 = v10;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Validation WARNING: Attempt to move a reminder with assignments to a different list while supportsMoveAcrossSharedLists=NO {reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}", (uint8_t *)&v11, 0x2Au);

  sub_100057F28();
}

void sub_10067E4B0(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remObjectID"));
  v4 = 138543362;
  v5 = v3;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "rem_log_fault_if (self.willSave_handledUpdateDisplayDate) -- Unexpected case to have deleted alarms after markExtraneousAlarmsForDeletion() but already handled updateDisplayDate {remObjectID: %{public}@}", (uint8_t *)&v4, 0xCu);

}

void sub_10067E544(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = 138412802;
  v6 = v3;
  v7 = 2048;
  v8 = v4;
  v9 = 2048;
  v10 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Not enough free space at '%@': require %llu bytes, %llu bytes available", (uint8_t *)&v5, 0x20u);
}

void sub_10067E5D8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to check for free disk space: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10067E64C(NSObject *a1)
{
  void *v2;
  int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  v3 = 138412290;
  v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "rem_log_fault_if (![NSStringFromClass([REMCDAuxiliaryReminderChangeInfo class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAuxiliaryReminderChangeInfo called '- [REMCDAuxiliaryReminderChangeInfo cdEntityName]'. The subclass should override this method. {callstack: %@}", (uint8_t *)&v3, 0xCu);

}

void sub_10067E6E8(NSObject *a1)
{
  void *v2;
  int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  v3 = 138412290;
  v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "rem_log_fault_if (![NSStringFromClass([REMCDRootEntityObject class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDRootEntityObject called '- [REMCDRootEntityObject cdEntityName]'. The subclass should override this method. {callstack: %@}", (uint8_t *)&v3, 0xCu);

}

void sub_10067E784(NSObject *a1)
{
  void *v2;
  int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  v3 = 138543362;
  v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "Calling -isConnectedToAccountObject: on REMCDSharedToMeReminderPlaceholder is unexpected as this is not a class that should be updated or saved directly from a save request {callstack: %{public}@}", (uint8_t *)&v3, 0xCu);

}

void sub_10067E820(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Error creating unarchiver: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10067E894(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "You are not allowed to lowLevelRemoveFromParent a non-custom smart list from parent", v1, 2u);
}

void sub_10067E8D4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Error creating unarchiver: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10067E948(NSObject *a1)
{
  void *v2;
  int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  v3 = 138543362;
  v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "Trying to get an object from a nil object ID: %{public}@", (uint8_t *)&v3, 0xCu);

  sub_100050830();
}

void sub_10067E9DC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005A450((void *)&_mh_execute_header, a2, a3, "Unable to find object from objectID: %{public}@", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_10067EA40()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_10005A460();
  v3 = v0;
  sub_10005078C((void *)&_mh_execute_header, v1, (uint64_t)v1, "Error finding object from objectID: %{public}@, %{public}@", v2);
  sub_10001F1A4();
}

void sub_10067EAAC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005A450((void *)&_mh_execute_header, a2, a3, "Error obtaining permanent object ID for objects with error: %{public}@", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_10067EB10(uint64_t a1, uint64_t a2, NSObject *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint8_t v8[14];
  uint64_t v9;

  objc_opt_class(a1, a2);
  sub_10005A460();
  v9 = a2;
  v6 = v5;
  sub_10005078C((void *)&_mh_execute_header, a3, v7, "Error obtaining permanent object ID for %{public}@: %{public}@", v8);

  sub_100050830();
}

void sub_10067EB98(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 134217984;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "ICCloudSchemaCatchUpSyncContext: Initiated with an invalid scheduling state value (%ld), assume shouldPerformCloudSchemaCatchUpSync=YES", (uint8_t *)&v2, 0xCu);
}

void sub_10067EC0C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  sub_1000507CC();
  sub_10005E434((void *)&_mh_execute_header, v1, v2, "Called isAbstract on REMCDObject. This is an abstract core data model super class. {callstack: %@}", v3, v4, v5, v6, v7);

  sub_100050830();
}

void sub_10067EC8C(void *a1, const char *a2, NSObject *a3)
{
  objc_class *v6;
  NSString *v7;
  void *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  uint8_t buf[24];

  v6 = (objc_class *)objc_opt_class(a1, a2);
  v7 = NSStringFromClass(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = NSStringFromSelector(a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), v8, v10));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remObjectID"));
  sub_10005E4A4();
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "[%{public}@] Model type does allow setResolutionTokenMap, you are good {objectID: %{public}@}", buf, 0x16u);

  sub_10005E478();
}

void sub_10067ED78(void *a1, const char *a2, NSObject *a3)
{
  objc_class *v6;
  NSString *v7;
  void *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint8_t v14[24];

  v6 = (objc_class *)objc_opt_class(a1, a2);
  v7 = NSStringFromClass(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = NSStringFromSelector(a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@"), v8, v10));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remObjectID"));
  sub_10005E4A4();
  sub_1000507D8((void *)&_mh_execute_header, a3, v13, "[%{public}@] Model type is not supposed to use or set resolutionTokenMap {objectID: %{public}@}", v14);

  sub_10005E478();
}

void sub_10067EE5C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "objectID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000507F8();
  sub_10005E420((void *)&_mh_execute_header, v7, v8, "2022:-[REMCDObject willSave]: Attempting to save a %{public}@ object without an identifier {moid: %{public}@}", v9, v10, v11, v12, 2u);

  sub_10005073C();
}

void sub_10067EEF0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "validateForInsert_Swift FAILED {error: %{public}@}", v2);
}

void sub_10067EF58(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "entity"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "name"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "UUIDString"));
  v9 = 138543618;
  v10 = v5;
  sub_1000507F8();
  sub_1000507D8((void *)&_mh_execute_header, a2, v8, "Validation Failure: We have a REMCDObject that is not a REMCDAccount and is missing an account relationship {entity: %{public}@, identifier: %{public}@}", (uint8_t *)&v9);

  sub_10005E464();
}

void sub_10067F020()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "validateForUpdate_Swift FAILED {error: %{public}@}", v2);
}

void sub_10067F088(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "previousAccount"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = 138543618;
  v9 = v5;
  sub_1000507F8();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Validation Failure: Tried to move lists accross accounts {fromAccount.identifier: %{public}@, toAccount.identifier: %{public}@}", (uint8_t *)&v8, 0x16u);

  sub_10005E464();
}

void sub_10067F158(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remObjectID"));
  sub_1000507CC();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Not recursiveMarkForDeletion for %{public}@ because isDelete == self.markedForDeletion", v4, 0xCu);

  sub_100050830();
}

void sub_10067F1E0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  sub_10005E48C();
  sub_10005E420((void *)&_mh_execute_header, v2, v3, "Unexpected nil remObjectID when recursively traversing object tree. {self.objectID = %@, visitedMap = %@}", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_10067F260(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remObjectID"));
  sub_10005E48C();
  sub_10005E420((void *)&_mh_execute_header, v2, v3, "Unexpected cyclic graph when recursively traversing object tree. {self.remObjectID = %@, visitedMap = %@}", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_10067F2E0(unsigned __int8 *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a1));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 32), "remObjectID"));
  sub_10005E450((void *)&_mh_execute_header, v4, v5, "Continue recursiveMarkForDeletion:%@ from %@", v6, v7, v8, v9, 2u);

  sub_10005073C();
}

void sub_10067F394(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "className"));
  sub_1000507F8();
  sub_10005E420((void *)&_mh_execute_header, v3, v4, "Don't know how to handle property %{public}@ of entity %{public}@ to avoid constraint violation before marking for deletion", v5, v6, v7, v8, 2u);

  sub_10005073C();
}

void sub_10067F420()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000507F8();
  sub_10005E420((void *)&_mh_execute_header, v7, v8, "REMSupportedVersionUpdating: Changing minimumSupportedVersion on %{public}@ is not currently allowed {identifier: %{public}@}", v9, v10, v11, v12, 2u);

  sub_10005073C();
}

void sub_10067F4B4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000507F8();
  sub_10005E420((void *)&_mh_execute_header, v7, v8, "REMSupportedVersionUpdating: Setting effectiveMinimumSupportedVersion on %{public}@ is not currently allowed {identifier: %{public}@}", v9, v10, v11, v12, 2u);

  sub_10005073C();
}

void sub_10067F548(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  NSString *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (objc_class *)sub_10005E448(a1, a2);
  v3 = NSStringFromClass(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  sub_1000507F8();
  sub_10005E420((void *)&_mh_execute_header, v6, v7, "REMSupportedVersionUpdating: Abstract method called for -parentEffectiveMinimumSupportedVersion {class: %{public}@, callstack: %{public}@}", v8, v9, v10, v11, 2u);

  sub_10005073C();
}

void sub_10067F5E4(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  NSString *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (objc_class *)sub_10005E448(a1, a2);
  v3 = NSStringFromClass(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  sub_1000507F8();
  sub_10005E420((void *)&_mh_execute_header, v6, v7, "REMSupportedVersionUpdating: Abstract method called for -keyPathsForValuesAffectingEffectiveMinimumSupportedVersion {class: %{public}@, callstack: %{public}@}", v8, v9, v10, v11, 2u);

  sub_10005073C();
}

void sub_10067F680(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "storeControllerManagedObjectContext"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ic_loggingDescription"));
  sub_1000507CC();
  sub_10005E434((void *)&_mh_execute_header, v3, v4, "rem_log_fault_if (dirtySet == nil) -- REMSupportedVersionUpdating: Failed to obtain managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion from storeControllerManagedObjectContext {storeControllerManagedObjectContext: %{public}@}", v5, v6, v7, v8, v9);

  sub_10005073C();
}

void sub_10067F70C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000507F8();
  sub_10005E450((void *)&_mh_execute_header, v7, v8, "REMSupportedVersionUpdating: validateEffectiveMinimumSupportedVersion cannot process %{public}@ because it does not currently allow object supported version {identifier: %{public}@}", v9, v10, v11, v12, 2u);

  sub_10005073C();
}

void sub_10067F7A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  sub_1000507CC();
  sub_10005E434((void *)&_mh_execute_header, v1, v2, "A subclass of REMCDObject called '- [REMCDObject cdEntityName]'. REMCDObject class does not have a corresponding Core Data entity. The subclass should override this method. {callstack: %@}", v3, v4, v5, v6, v7);

  sub_100050830();
}

void sub_10067F820(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Missing requirements to get alarmDateTrigger {accountID: %{public}@, alarmID: %{public}@}", (uint8_t *)&v3, 0x16u);
}

void sub_10067F8A4(void *a1, uint64_t a2, NSObject *a3)
{
  int v5;
  id v6;
  __int16 v7;
  uint64_t v8;

  v5 = 134218242;
  v6 = objc_msgSend(a1, "count");
  v7 = 2114;
  v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error fetching objects from (%ld) object IDs: %{public}@", (uint8_t *)&v5, 0x16u);
}

void sub_10067F93C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "rem_log_fault_if (!entityName) -- Unexpected error: found entity with no name", v1, 2u);
}

void sub_10067F97C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "ICCSCU: Number of entities must match array size of lists of property keys", v1, 2u);
}

void sub_10067F9BC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "ICCSCU: cloudSchemaCatchUpSyncDidComplete: Update ckAccount.persistenceCloudSchemaVersion FAILED {accountID: %{public}@}", (uint8_t *)&v2, 0xCu);
}

void sub_10067FA30(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v3 = 138543874;
  v4 = a1;
  v5 = 2048;
  v6 = a2;
  v7 = 2048;
  v8 = 20240715;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "ICCSCU: cloudSchemaCatchUpSyncDidComplete: persistenceCloudSchemaVersion is already >= kRuntimeCloudSchemaVersion, stopping {accountIdentifier: %{public}@, persistence: %lld, runtime: %lld}", (uint8_t *)&v3, 0x20u);
}

void sub_10067FAC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (!context) -- Expected non-nil value for managedObjectContext", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067FAF0()
{
  NSObject *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint8_t v8[24];

  sub_10005095C();
  v4 = (void *)sub_10005E448(v2, v3);
  sub_1000695A4(v4);
  v5 = objc_msgSend((id)sub_100050934(), "ckIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_100069558();
  sub_10005078C((void *)&_mh_execute_header, v0, v7, "Failed to find cloud account for %@ %@", v8);

  sub_10005073C();
}

void sub_10067FB80()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  sub_10005095C();
  v4 = (objc_class *)sub_1000695AC(v2, v3);
  v5 = NSStringFromClass(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = objc_msgSend((id)sub_100050A20(), "objectID");
  objc_claimAutoreleasedReturnValue(v6);
  v7 = objc_msgSend((id)sub_100050934(), "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  sub_100069570();
  sub_100069590((void *)&_mh_execute_header, v9, v10, "_setCKIdentifierIfNecessary: .ckIdentifier is still nil %{public}@ %{public}@ %{public}@", v11, v12, v13, v14, v15);

  sub_100050808();
}

void sub_10067FC1C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  sub_10005095C();
  v4 = (objc_class *)sub_1000695AC(v2, v3);
  v5 = NSStringFromClass(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = objc_msgSend((id)sub_100050A20(), "objectID");
  objc_claimAutoreleasedReturnValue(v6);
  v7 = objc_msgSend((id)sub_100050934(), "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  sub_100069570();
  sub_100069590((void *)&_mh_execute_header, v9, v10, "_setCKIdentifierIfNecessary: .identifier.UUIDString is nil %{public}@ %{public}@ %{public}@", v11, v12, v13, v14, v15);

  sub_100050808();
}

void sub_10067FCB8()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_10005A460();
  v3 = v0;
  sub_10005078C((void *)&_mh_execute_header, v1, (uint64_t)v1, "objectWithRecordID: (object.ckIdentifier: %{public}@, accountID: %{public}@) has nil account even after fixed up", v2);
  sub_10001F1A4();
}

void sub_10067FD24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Missing ckIdentifier. Failed to get failedToSyncCount", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067FD50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Missing ckIdentifier. Failed to set failedToSyncCount", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067FD7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Missing ckIdentifier. Failed to get numberOfPushAttemptstoWaitCount", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067FDA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "Missing ckIdentifier. Failed to set numberOfPushAttemptstoWaitCount", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10067FDD4()
{
  NSObject *v0;
  void *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  NSString *v6;
  id v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void *v14;

  sub_10005095C();
  v5 = (objc_class *)sub_1000695AC(v3, v4);
  v6 = NSStringFromClass(v5);
  objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend((id)sub_100050A20(), "failedToSyncCount");
  v7 = objc_msgSend((id)sub_100050934(), "loggingDescription");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = 138412802;
  v10 = v1;
  v11 = 1024;
  v12 = v2;
  v13 = 2112;
  v14 = v8;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to sync %@ %d times. Now resetting failure counts, deleting change tokens, and trying full re-sync. %@", (uint8_t *)&v9, 0x1Cu);

  sub_100050808();
}

void sub_10067FE94()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;

  sub_10005095C();
  v4 = (objc_class *)sub_1000695AC(v2, v3);
  v5 = NSStringFromClass(v4);
  objc_claimAutoreleasedReturnValue(v5);
  v6 = objc_msgSend((id)sub_100050A20(), "objectID");
  objc_claimAutoreleasedReturnValue(v6);
  v7 = objc_msgSend((id)sub_100050934(), "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  sub_100069570();
  sub_100069590((void *)&_mh_execute_header, v9, v10, "CKIdentifier is undefined. This should not happen since [_setCKIdentifierIfNecessary] should set it already { class: %{public}@, objectID: %{public}@, identifier: %{public}@}", v11, v12, v13, v14, v15);

  sub_100050808();
}

void sub_10067FF30()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "objectID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000507B4();
  sub_10005E420((void *)&_mh_execute_header, v7, v8, "Trying to get recordID with no context %{public}@ %{public}@", v9, v10, v11, v12, v13);

  sub_10005073C();
}

void sub_10067FFBC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "objectID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000507B4();
  sub_10005E420((void *)&_mh_execute_header, v7, v8, "Trying to get recordID with no record name %{public}@ %{public}@", v9, v10, v11, v12, v13);

  sub_10005073C();
}

void sub_100680048()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "objectID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000507B4();
  sub_10005E420((void *)&_mh_execute_header, v7, v8, "Trying to get recordID with empty record name %{public}@ %{public}@", v9, v10, v11, v12, v13);

  sub_10005073C();
}

void sub_1006800D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "objectID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000507B4();
  sub_10005E420((void *)&_mh_execute_header, v7, v8, "Trying to get recordID with no zone name %{public}@ %{public}@", v9, v10, v11, v12, v13);

  sub_10005073C();
}

void sub_100680160(objc_class *a1, uint64_t a2, NSObject *a3)
{
  NSString *v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  v4 = NSStringFromClass(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000508A0();
  sub_10005078C((void *)&_mh_execute_header, a3, v6, "newObjectWithCKIdentifier attempted to create an instance from an abstract entity {class: %{public}@, ckIdentifier: %{public}@}", v7);

  sub_10005073C();
}

void sub_1006801EC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "newObjectWithCKIdentifier attempted to create a REMCDAccount CD object with ckIdentifier: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_100680250(objc_class *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = NSStringFromClass(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_1000508A0();
  sub_10005E420((void *)&_mh_execute_header, v3, v4, "newObjectWithCKIdentifier attempted to create a non REMCDAccount CD object with nil account {class: %{public}@, ckIdentifier: %{public}@}", v5, v6, v7, v8, v9);

  sub_10005073C();
}

void sub_1006802D4(objc_class *a1)
{
  NSString *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = NSStringFromClass(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_1000508A0();
  sub_10005E420((void *)&_mh_execute_header, v3, v4, "newObjectWithCKIdentifier attempted to create a CD object with nil account ckIdentifier {class: %{public}@, ckIdentifier: %{public}@}", v5, v6, v7, v8, v9);

  sub_10005073C();
}

void sub_100680358()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (!batchFetchHelper) -- Unexpected error: batchFetchHelper not defined", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100680384()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "Unable to decode UUID string %@, will generate a random one. Expect something not working.", v2);
  sub_10001F1A4();
}

void sub_1006803E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (!entityName) -- Unexpected error: entity name not defined", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100680414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_10005076C((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (!entityName) -- Unexpected error: cdEntityName name not defined", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100680440(NSObject *a1)
{
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, a1, v3, "Should not call +allCloudObjectsPredicate on the abstract 'REMCDObject' class as a unified predicate for both REMCDAccount and non-REMCDAccount does not exist. Returning nil predicate... {stack: %{public}@}", v4);

  sub_100050830();
}

void sub_1006804C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Error encoding resolution token map of CDObject {CDObject: %@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100680528(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, a2, v4, "Trying to create record without record ID for %@", v5);

  sub_100050830();
}

void sub_1006805A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_100069558();
  sub_10005E450((void *)&_mh_execute_header, v7, v8, "REMCDObjectSystemFieldsMerging: Calling +mergeSystemPropertiesIntoCDObject:fromCKRecord: {class: %@, identifier: %@}", v9, v10, v11, v12, v13);

  sub_10005073C();
}

void sub_100680634()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  NSString *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  sub_10005095C();
  v3 = (objc_class *)sub_10005E448(v1, v2);
  v4 = NSStringFromClass(v3);
  objc_claimAutoreleasedReturnValue(v4);
  v5 = objc_msgSend((id)sub_100050A20(), "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000507B4();
  sub_10005E420((void *)&_mh_execute_header, v7, v8, "REMCDObjectSystemFieldsMerging: Duck typing failed to work. We are expecting REMCDObject must be conforming to REMCDObjectSystemFieldsMerging {class: %{public}@, identifier: %{public}@}", v9, v10, v11, v12, v13);

  sub_10005073C();
}

void sub_1006806C0(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordType"));
  v2 = objc_msgSend((id)sub_100050A20(), "recordType");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000507B4();
  sub_10005E420((void *)&_mh_execute_header, v4, v5, "rem_log_fault_if (![record.recordType isEqual:self.recordType]) -- Record type {%{public}@} to be merged must match object record type {%{public}@}", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_100680750(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingDescription"));
  sub_10005A460();
  sub_10005E420((void *)&_mh_execute_header, v2, v3, "accountID is nil or empty in objectFailedToBePushedToCloudWithOperation %{public}@, accountID: %{public}@", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_1006807D4(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordName"));
  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, a2, v5, "Tried to cache a record that is older than or equal to our current version: %@", v6);

  sub_10005073C();
}

void sub_100680868(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "Record fetched from server is older or equal to the saved record on device: %@", v5);

  sub_100050830();
}

void sub_1006808E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Error writing temporary asset file: %@", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100680948()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Error getting or creating temporary file directory: %@", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_1006809A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Error creating temporary assets directory: %@", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100680A08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Error deleting file for temporary asset: %@", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100680A68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Error while enumerating all temporary asset files: %@", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100680AC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Trying to purge CDObject with a read only persistent store {CDObject: %@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100680B28(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "parentCloudObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "parentCloudObject"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "parentCloudObject"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
  v11 = 138544386;
  v12 = v4;
  v13 = 2114;
  v14 = v5;
  v15 = 2114;
  v16 = v6;
  v17 = 2114;
  v18 = v8;
  v19 = 2114;
  v20 = v10;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "updateParentReferenceIfNecessary: self.parentCloudObject.recordID is nil %{public}@ %{public}@ %{public}@ %{public}@ %{public}@", (uint8_t *)&v11, 0x34u);

}

void sub_100680C6C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "Updating sharees for %@ is not supported", v5);

  sub_100050830();
}

void sub_100680CEC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  sub_10005095C();
  v3 = (void *)sub_10005E448(v1, v2);
  sub_1000695A4(v3);
  v4 = objc_msgSend((id)sub_100050934(), "ckIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100069558();
  sub_10005E420((void *)&_mh_execute_header, v6, v7, "Missing managed object context for updating owner name for %@ %@", v8, v9, v10, v11, v12);

  sub_10005073C();
}

void sub_100680D74()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  sub_10005095C();
  v3 = (void *)sub_10005E448(v1, v2);
  sub_1000695A4(v3);
  v4 = objc_msgSend((id)sub_100050934(), "ckIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100069558();
  sub_10005E420((void *)&_mh_execute_header, v6, v7, "Missing account for updating owner name for %@ %@", v8, v9, v10, v11, v12);

  sub_10005073C();
}

void sub_100680DFC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  sub_10005095C();
  v3 = (void *)sub_10005E448(v1, v2);
  sub_1000695A4(v3);
  v4 = objc_msgSend((id)sub_100050934(), "ckIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100069558();
  sub_10005E420((void *)&_mh_execute_header, v6, v7, "Missing account.ckIdentifier for updating owner name for %@ %@", v8, v9, v10, v11, v12);

  sub_10005073C();
}

void sub_100680E84()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, v0, v1, "Error decoding resolution token map of CDObject {CDObject: %@}", v2);
  sub_10001F1A4();
}

void sub_100680EE8()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10005095C();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectID"));
  objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ckServerRecord"));
  v3 = objc_msgSend((id)sub_1000695B4(), "numberWithInt:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507B4();
  sub_10005E450((void *)&_mh_execute_header, v5, v6, "isEligibleInCloudObjectForLocalObjectMerge: found an REMCDObject that isInCloud && shouldAttemptLocalObjectMerge {objectID: %{public}@, hasServerRecord: %{public}@}", v7, v8, v9, v10, v11);

  sub_10005073C();
}

void sub_100680F90()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  sub_10005095C();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectID"));
  objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "ckServerRecord"));
  v3 = objc_msgSend((id)sub_1000695B4(), "numberWithInt:");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000507B4();
  sub_10005E450((void *)&_mh_execute_header, v5, v6, "isEligibleInCloudObjectForLocalObjectMerge: this REMCDObject is NOT isInCloud {objectID: %{public}@, hasServerRecord: %{public}@}", v7, v8, v9, v10, v11);

  sub_10005073C();
}

void sub_100681038(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Called cdEntityName on REMCDAudioAttachment. We don't have a way to create these from the API. How did we get here?", v1, 2u);
}

void sub_100681078(void *a1, uint64_t *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  uint64_t v17;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "name"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uuidForChangeTracking"));
  v9 = *a2;
  v10 = 138544130;
  v11 = v6;
  v12 = 2112;
  v13 = v7;
  v14 = 2114;
  v15 = v8;
  v16 = 2114;
  v17 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "REMCDHashtagLabel.validateForInsert_Swift: { id: %{public}@, name: %@, uuidForTracking: %{public}@, error: %{public}@ }", (uint8_t *)&v10, 0x2Au);

  sub_10006A418();
}

void sub_100681160(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "name"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uuidForChangeTracking"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "accountIdentifier"));
  v8 = 138544130;
  v9 = v4;
  v10 = 2112;
  v11 = v5;
  v12 = 2114;
  v13 = v6;
  v14 = 2114;
  v15 = v7;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "REMCDHashtagLabel.validateForInsert: { id: %{public}@, name: %@, uuidForChangeTracking: %{public}@ } with invalid nil or empty accountIdentifier: %{public}@", (uint8_t *)&v8, 0x2Au);

  sub_10006A418();
}

void sub_100681254(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  v4 = 138543362;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Cannot return an -remChangedObjectID because this REMCDHashtagLabel object has no UUID {mid: %{public}@}", (uint8_t *)&v4, 0xCu);

}

void sub_1006812E8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Failed to save last object. Migration error {error: %@}", (uint8_t *)&v2, 0xCu);
  sub_10001F1A4();
}

void sub_100681358(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005A450((void *)&_mh_execute_header, a2, a3, "Failed to fetch objects. Migration failed {error: %@}", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_1006813BC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006BCC4();
  sub_10006BCB0((void *)&_mh_execute_header, v0, v1, "Unable to create REMCRMergeableOrderedSet. Skipipng listIDsMergeableOrdering migration {error: %@, cdAccount: %@}");
  sub_10001F1A4();
}

void sub_10068141C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006BCC4();
  sub_10006BCB0((void *)&_mh_execute_header, v0, v1, "Unable to migrate legacyOrderedSet. Skipping listIDsMergeableOrdering migration {error: %@, cdAccount: %@}");
  sub_10001F1A4();
}

void sub_10068147C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005A450((void *)&_mh_execute_header, a2, a3, "cdList missing account. Skipping reminderListOrdering migration {cdList: %@}", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_1006814E0()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006BCC4();
  sub_10006BCB0((void *)&_mh_execute_header, v0, v1, "Unable to create REMCRMergeableOrderedSet. Skipipng reminderListOrdering migration {error: %@, cdList: %@}");
  sub_10001F1A4();
}

void sub_100681540()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006BCC4();
  sub_10006BCB0((void *)&_mh_execute_header, v0, v1, "Unable to migrate legacyOrderedSet. Skipping reminderListOrdering migration {error: %@, cdList: %@}");
  sub_10001F1A4();
}

void sub_1006815A0()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10005083C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "transactionAuthor"));
  sub_10005E48C();
  sub_10005074C((void *)&_mh_execute_header, v2, v3, "earliestChangeTokenForAccountID: could not get a PHT token from fetch result {author: %{public}@, nsTransactions: %@}", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_10068161C()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10005083C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "transactionAuthor"));
  sub_10005E48C();
  sub_10005074C((void *)&_mh_execute_header, v2, v3, "earliestChangeTokenForAccountID: COREDATA NSPersistentHistoryChangeRequest FAILED {author: %{public}@, error: %@}", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_100681698()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_1000507CC();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CT Implementation: getTrackingStateWithClientID:%@", v1, 0xCu);
  sub_10001F1A4();
}

void sub_100681704(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10006F69C();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "Couldn't archive REMChangeToken to save tracking state for {clientID: %{public}@, encodeError: %@}", v5, v6, v7, v8, 2u);

  sub_10005073C();
}

void sub_100681790()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Couldn't get a persistence store to save tracking state for {clientID: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_1006817F4()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_1000507CC();
  v3 = 2114;
  v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "CT Implementation: saveTrackingState {state: %@, clientID: %{public}@}", v2, 0x16u);
  sub_10001F1A4();
}

void sub_100681870(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "Failed to save tracking state to CoreData with error %@", v5);

}

void sub_1006818F8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005076C((void *)&_mh_execute_header, a1, a3, "rem_log_fault_if (transactionFetchLimit > 0 && entityNames.count > 0) -- transactionFetchLimit and entityNames are incompatible with each other and cannot be set at the same time", a5, a6, a7, a8, 0);
  sub_1000507E4();
}

void sub_100681928(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005076C((void *)&_mh_execute_header, a1, a3, "rem_log_fault_if (!error) -- Attempting to get errorChangeSet with nil error.", a5, a6, a7, a8, 0);
  sub_1000507E4();
}

void sub_100681958(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend((id)sub_100050880(a1, a2), "description");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *v3 = 138412290;
  *v2 = v5;
  sub_10006F6AC((void *)&_mh_execute_header, v6, v7, "REMNSPersistentHistoryTransaction has no storeID {transaction: %@}");

  sub_1000508D8();
}

void sub_1006819A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend((id)sub_100050880(a1, a2), "storeID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *v3 = 138412290;
  *v2 = v5;
  sub_10006F6AC((void *)&_mh_execute_header, v6, v7, "Failed to get account objectID from storeID {storeID: %@}");

  sub_1000508D8();
}

void sub_1006819F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10001F194((void *)&_mh_execute_header, v0, v1, "rem_log_fault_if (!historyResult) -- Failed to get HistoryResult from request {request: %@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100681A58()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_10005083C();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "transactionAuthor"));
  sub_10005E48C();
  sub_10005074C((void *)&_mh_execute_header, v2, v3, "COREDATA NSPersistentHistoryChangeRequest FAILED {author: %{public}@, error: %@}", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_100681AD4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a2, a3, "rem_log_fault_if (!res) -- nil persistent history result {request: %@}", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_100681B3C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a2, a3, "rem_log_fault_if (cdTrackingStates.count > 1) -- Unexpectedly found more than 1 entry of REMCDTrackingState for {clientID: %{public}@}", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_100681BA4(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10006F69C();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "Failed fetch request to get REMCDTrackingState for {clientID: %{public}@, error: %@}", v5, v6, v7, v8, 2u);

  sub_10005073C();
}

void sub_100681C30(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "clientName"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "accountIdentifier"));
  sub_10006F69C();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "Unexpected nil lastConsumedChangeTokenData from the fetched REMCDTrackingState entry for {clientName: %@, accountIdentifier: %@}", v6, v7, v8, v9, 2u);

  sub_10005073C();
}

void sub_100681CCC()
{
  NSObject *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  void *v12;

  sub_10005083C();
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "clientName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accountIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedDescription"));
  v7 = 138412802;
  v8 = v4;
  v9 = 2112;
  v10 = v5;
  v11 = 2112;
  v12 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Couldn't unarchive REMChangeToken from an REMCDTrackingState for {clientName: %@, accountIdentifier: %@, decodeError: %@}", (uint8_t *)&v7, 0x20u);

}

void sub_100681DA8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Could not find REMCDAuxiliaryChangeInfo with {identifier: %@}", v2);
  sub_10001F1A4();
}

void sub_100681E0C(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  sub_10006F69C();
  sub_10005074C((void *)&_mh_execute_header, v3, v4, "Failed fetch request to get REMCDAuxiliaryChangeInfo {identifier: %@, error: %@}", v5, v6, v7, v8, 2u);

  sub_10005073C();
}

void sub_100681E98(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  NSString *v4;
  void *v5;
  int v6;
  void *v7;

  v3 = (objc_class *)objc_opt_class(a1, a2);
  v4 = NSStringFromClass(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = 138543362;
  v7 = v5;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "-[REMCDObjectTreeProcessorDelegate preprocessTreeNode:] Unknown node type {type: %{public}@}", (uint8_t *)&v6, 0xCu);

}

void sub_100681F30(os_log_t log)
{
  int v1;
  uint64_t v2;

  v1 = 138412290;
  v2 = qword_100852848;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "rem_log_fault_if (sharedSettings != nil) -- Sync settings have already been initialized. {sharedSettings: %@}", (uint8_t *)&v1, 0xCu);
}

void sub_100681FB0()
{
  const char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  void *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint8_t v17;

  sub_1000708C0();
  v4 = (objc_class *)objc_opt_class(v2, v3);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = NSStringFromSelector(v0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "remObjectID"));
  sub_10005E4A4();
  sub_1000708AC((void *)&_mh_execute_header, v11, v12, "[%{public}@] Cannot obtain RDStoreControllerManagedObjectContext from attachment {attachmentID: %{public}@}", v13, v14, v15, v16, (uint64_t)v6, (uint64_t)v8, v17);

  sub_10005E478();
}

void sub_100682084()
{
  const char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  void *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint8_t v17;

  sub_1000708C0();
  v4 = (objc_class *)objc_opt_class(v2, v3);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = NSStringFromSelector(v0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectID"));
  sub_10005E4A4();
  sub_1000708AC((void *)&_mh_execute_header, v11, v12, "[%{public}@] Cannot obtain identifier from attachment {moid: %{public}@}", v13, v14, v15, v16, (uint64_t)v6, (uint64_t)v8, v17);

  sub_10005E478();
}

void sub_100682158()
{
  const char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  NSString *v5;
  void *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint8_t v17;

  sub_1000708C0();
  v4 = (objc_class *)objc_opt_class(v2, v3);
  v5 = NSStringFromClass(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = NSStringFromSelector(v0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%@")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "remObjectID"));
  sub_10005E4A4();
  sub_1000708AC((void *)&_mh_execute_header, v11, v12, "[%{public}@] Cannot obtain account identifier from attachment {attachmentID: %{public}@}", v13, v14, v15, v16, (uint64_t)v6, (uint64_t)v8, v17);

  sub_10005E478();
}

void sub_10068222C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "backingCDObject";
  sub_100050860((void *)&_mh_execute_header, a1, a3, "rem_log_fault_if (!backingCDObject) -- invalid nil value for '%s'", (uint8_t *)&v3);
  sub_10001F1A4();
}

void sub_1006822A0(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  NSString *v4;
  void *v5;
  uint64_t v6;
  uint8_t v7[24];

  v3 = (objc_class *)objc_opt_class(a1, a2);
  v4 = NSStringFromClass(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, a2, v6, "REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Incorrect node type passed to REMCDObjectEffectiveVersionValidationDelegateImpl {type: %{public}@}", v7);

  sub_100050830();
}

void sub_100682324()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_1000507CC();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Unexpected non-REMCDObject {mid: %{public}@}", v1, 0xCu);
  sub_10001F1A4();
}

void sub_100682390()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_1000507CC();
  v3 = 2114;
  v4 = v0;
  sub_10005078C((void *)&_mh_execute_header, v1, (uint64_t)v1, "REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Failed to fetch managed object {mid: %{public}@, error: %{public}@}", v2);
  sub_10001F1A4();
}

void sub_100682404(uint64_t a1, uint64_t a2, NSObject *a3)
{
  objc_class *v5;
  NSString *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  void *v12;

  v5 = (objc_class *)objc_opt_class(a2, a2);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9 = 138543618;
  v10 = a1;
  v11 = 2114;
  v12 = v7;
  sub_10005078C((void *)&_mh_execute_header, a3, v8, "REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Unexpected non-REMCDObject {mid: %{public}@, managedObject.class: %{public}@}", (uint8_t *)&v9);

}

void sub_1006824B0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, a2, v4, "-[REMCDObjectTreeProcessorDelegate processBatchOfTreeNodes:] Unexpectedly processes a node with nil REMCDObject {node: %{public}@}", v5);

  sub_100050830();
}

void sub_100682530(NSObject *a1)
{
  void *v2;
  int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  v3 = 138412290;
  v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "Called fetchRequest on REMCDObject. This will only fetch objects in SQLite table named 'ZREMCDOBJECT', but not those in other SQLite tables. {callstack: %@}", (uint8_t *)&v3, 0xCu);

}

void sub_1006825CC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 134217984;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Trying to insert object in mutableArray at negative index %ld", (uint8_t *)&v2, 0xCu);
}

void sub_100682640(void *a1, uint64_t a2, NSObject *a3)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  id v7;

  v4 = 134218240;
  v5 = a2;
  v6 = 2048;
  v7 = objc_msgSend(a1, "count");
  _os_log_fault_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_FAULT, "Trying to insert object in mutableArray at index (%ld) greater than count (%ld)", (uint8_t *)&v4, 0x16u);
}

void sub_1006826D8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "rem_log_fault_if (!entityName) -- Nil NSManagedObject.entity.name {mangedObject: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_10068274C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error fetching server change tokens: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1006827C0(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "Trying to get root record for %@, but we don't have a server record. This likely won't work.", v5);

  sub_100050830();
}

void sub_100682840()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10005083C();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ic_loggingDescription"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "shortLoggingDescription"));
  sub_100069558();
  sub_10005E420((void *)&_mh_execute_header, v4, v5, "Trying to populate share %@ with no record type for %@", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_1006828D0(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "shortLoggingDescription"));
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "Have a share that wasn't persisted for %@", a1, 0xCu);

}

void sub_100682944(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100050860((void *)&_mh_execute_header, a3, (uint64_t)a3, "No root record for %@", (uint8_t *)a2);

}

void sub_100682990(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "object";
  sub_100050860((void *)&_mh_execute_header, a1, a3, "rem_log_fault_if (!object) -- invalid nil value for '%s'", (uint8_t *)&v3);
  sub_10001F1A4();
}

void sub_100682A04(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "shortLoggingDescription"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
  sub_100069558();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "No CKShare or error returned for %@ %@", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_100682A9C()
{
  NSObject *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  uint64_t v15;

  sub_10005083C();
  v3 = v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 72), "ic_loggingDescription"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 40), "shortLoggingDescription"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 48), "ic_loggingDescription"));
  v7 = *v1;
  v8 = 138413058;
  v9 = v4;
  v10 = 2112;
  v11 = v5;
  v12 = 2112;
  v13 = v6;
  v14 = 2112;
  v15 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error saving share %@ for %@ %@: %@", (uint8_t *)&v8, 0x2Au);

}

void sub_100682B90(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "shortLoggingDescription"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ic_loggingDescription"));
  sub_100069558();
  sub_10005074C((void *)&_mh_execute_header, v4, v5, "Partial failure saving share for %@ %@", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_100682C28()
{
  NSObject *v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  void *v12;

  sub_10005083C();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_loggingDescription"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "shortLoggingDescription"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "ic_loggingDescription"));
  v7 = 138412802;
  v8 = v3;
  v9 = 2112;
  v10 = v4;
  v11 = 2112;
  v12 = v5;
  sub_100050910((void *)&_mh_execute_header, v0, v6, "No server record from error saving share for %@ %@ %@", (uint8_t *)&v7);

}

void sub_100682CF8()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  sub_10005083C();
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "ic_loggingDescription"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v0 + 40), "ic_loggingDescription"));
  sub_100069558();
  sub_10005E420((void *)&_mh_execute_header, v4, v5, "Server record %@ is not a share %@", v6, v7, v8, v9, v10);

  sub_10005073C();
}

void sub_100682D88(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ckIdentifier"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "Trying to fetchShareIfNecessaryForObject with nil or empty accountID: object ckIdentifier: %{public}@", v5);

  sub_100050830();
}

void sub_100682E0C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingDescription"));
  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, a2, v4, "No root record reference for share %@", v5);

  sub_100050830();
}

void sub_100682E8C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingDescription"));
  sub_1000507CC();
  sub_100050860((void *)&_mh_execute_header, a2, v4, "No record type in share %@", v5);

  sub_100050830();
}

void sub_100682F0C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Accepting share: Couldn't find container for metadata %@", v2);
  sub_10001F1A4();
}

void sub_100682F70()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Accepting share: Couldn't find account id for container %@", v2);
  sub_10001F1A4();
}

void sub_100682FD4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Must have an account ID to get container.", v1, 2u);
}

void sub_100683014(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;

  v3 = 136315138;
  v4 = "shareURL";
  sub_100050860((void *)&_mh_execute_header, a1, a3, "rem_log_fault_if (!shareURL) -- invalid nil value for '%s'", (uint8_t *)&v3);
  sub_10001F1A4();
}

void sub_100683088(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  void *v7;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "share"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URL"));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "ic_loggingDescription"));
  v11 = 138412802;
  v12 = v7;
  v13 = 2112;
  v14 = v9;
  v15 = 2112;
  v16 = a2;
  sub_100050910((void *)&_mh_execute_header, a3, v10, "Error accepting share at URL %@ %@: %@", (uint8_t *)&v11);

}

void sub_100683178(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_loggingDescription"));
  sub_1000507CC();
  sub_10005074C((void *)&_mh_execute_header, v2, v3, "Error fetching record from share %@: %@", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_10068320C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005076C((void *)&_mh_execute_header, a1, a3, "Performed save with nil author", a5, a6, a7, a8, 0);
  sub_1000507E4();
}

void sub_10068323C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transactionAuthor"));
  sub_10005E48C();
  sub_10005E450((void *)&_mh_execute_header, v2, v3, "COREDATA REQUEST {author: %{public}@, request: %@}", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_1006832BC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005076C((void *)&_mh_execute_header, a1, a3, "Performed fetch with nil author", a5, a6, a7, a8, 0);
  sub_1000507E4();
}

void sub_1006832EC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transactionAuthor"));
  sub_10005E48C();
  sub_10005E450((void *)&_mh_execute_header, v2, v3, "FETCH COREDATA REQUEST {author: %{public}@, request: %@}", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_10068336C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "transactionAuthor"));
  sub_10005E48C();
  sub_10005E450((void *)&_mh_execute_header, v2, v3, "FETCH COUNT COREDATA REQUEST {author: %{public}@, request: %@}", v4, v5, v6, v7, v8);

  sub_10005073C();
}

void sub_1006833EC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "debugDescription"));
  v5 = 138543362;
  v6 = v3;
  sub_100050860((void *)&_mh_execute_header, a2, v4, "Entity has nil name {entity: %{public}@}", (uint8_t *)&v5);

}

void sub_100683478(os_log_t log)
{
  int v1;
  uint64_t v2;

  v1 = 138543362;
  v2 = qword_100852878;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "sTopologicallyWeightedEntities = %{public}@", (uint8_t *)&v1, 0xCu);
  sub_10001F1A4();
}

void sub_1006834F4(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_100050860((void *)&_mh_execute_header, a2, a3, "Dirty object for effectiveMinimumSupportedVersion validation is not REMCDObject {managedObjectID: %{public}@}", (uint8_t *)&v3);
  sub_10001F1A4();
}

void sub_10068355C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Failed to fetch dirty object for effectiveMinimumSupportedVersion validation {managedObjectID: %{public}@, error: %{public}@}", (uint8_t *)&v3, 0x16u);
  sub_10001F1A4();
}

void sub_1006835DC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[%{public}@] missing persistentStoreCoordinator -- Can't get REMFetchResultToken {managedObjectContext: %@}", (uint8_t *)&v3, 0x16u);
  sub_10001F1A4();
}

void sub_10068365C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005A450((void *)&_mh_execute_header, a2, a3, "[%{public}@] Failed to obtain RDStoreController", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_1006836C8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10005A450((void *)&_mh_execute_header, a2, a3, "[%{public}@] Failed to obtain fileIOWorkerQueue", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_100683734()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006BCC4();
  sub_10007CE54((void *)&_mh_execute_header, v0, v1, "Failed to create RDCoreDataCoreSpotlightDelegate {exception: %@, storeDescription: %@}");
}

void sub_100683798()
{
  uint64_t v0;
  os_log_t v1;

  sub_10006BCC4();
  sub_10007CE54((void *)&_mh_execute_header, v0, v1, "The store doesn't have coreSpotlightExporter {store: %@, coordinator: %@}");
}

void sub_1006837FC(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = 138412802;
  v6 = a1;
  v7 = 2112;
  v8 = v3;
  v9 = 2112;
  v10 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to remove Spotlight indices for store {error: %@, store: %@, coordinator: %@}", (uint8_t *)&v5, 0x20u);
}

void sub_10068388C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "CoreSpotlight delegates has already been activated. -activateCoreSpotlightDelegates should be called only once.", v1, 2u);
}

void sub_1006838CC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "CoreSpotlight indexing is not enabled. Skipping activating CoreSpotlight delegates.", v1, 2u);
}

void sub_10068390C(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v4 = 138412290;
  v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Trying to unset didChooseToMigrate and didFinishMigration on ACAccount (%@)", (uint8_t *)&v4, 0xCu);

}

void sub_1006839A0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error saving migration state to ACAccount: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100683A14(NSObject *a1)
{
  void *v2;
  int v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](NSThread, "callStackSymbols"));
  v3 = 138412290;
  v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "rem_log_fault_if (![NSStringFromClass([REMCDAttachment class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAttachment called '- [REMCDAttachment cdEntityName]'. The subclass should override this method. {callstack: %@}", (uint8_t *)&v3, 0xCu);

}

void sub_100683AB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "[init] Error occured when loading accounts from disk {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100683B10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "[init] Error occured trying to delete all spotlight indices. Will not enable CoreSpotlight delegates {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100683B70()
{
  uint64_t v0;
  os_log_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000507CC();
  WORD2(v3) = 2048;
  HIWORD(v3) = v0;
  sub_10006BCB0((void *)&_mh_execute_header, v0, v1, "[loadAccountStoresFromDisk] Number of PSC loaded stores is not the same as our account store map entry count! {pscStoresCount: %ld, accountStoreMapCount: %ld}", v2, v3);
  sub_10001F1A4();
}

void sub_100683BDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10001F194((void *)&_mh_execute_header, v0, v1, "[loadAccountStoresFromDisk] Failed to discover account identifiers on disk. {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100683C3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "[discoverApplicationDocumentURLs] Attempted to discover application documents URLs before buddy or system data migrator, falling back to default container URL only {appDocumentsURL: %@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100683C9C()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_100092B7C();
  v3 = v0;
  sub_1000507D8((void *)&_mh_execute_header, v1, (uint64_t)v1, "[discoverAccountStoreURLsFromURL] Failed to enumerate files in RDStoreController.databaseDirectoryURL - Can't load stores from disk {error: %{public}@, databaseDirectoryURL: %@}", v2);
  sub_10001F1A4();
}

void sub_100683D08(void *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "absoluteString"));
  objc_msgSend(a2, "count");
  sub_100092B70();
  sub_10005E450((void *)&_mh_execute_header, v4, v5, "Done getting files from URL {databaseDirectoryURL: %{private}@, count: %ld}", v6, v7, v8, v9, 3u);

  sub_10005073C();
}

void sub_100683D9C(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "absoluteString"));
  sub_1000507CC();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Before getting files from URL {databaseDirectoryURL: %{private}@}", v4, 0xCu);

  sub_100050830();
}

void sub_100683E24(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  uint64_t v6;
  uint8_t v7[12];
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "absoluteString"));
  sub_1000507CC();
  v8 = 2114;
  v9 = a2;
  sub_10005078C((void *)&_mh_execute_header, a3, v6, "[migrateStoresToDataSeparationLocations] Error getting store URLs from legacy container path {legacyDatabaseDirectoryURL: %@, error: %{public}@}", v7);

  sub_10005073C();
}

void sub_100683EB8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend((id)sub_100050880(a1, a2), "lastPathComponent");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *v3 = 138412290;
  *v2 = v5;
  sub_1000508FC((void *)&_mh_execute_header, v6, v7, "[loadAccountStoresFromDisk] Added store URL to pending batch {url: %@}");

  sub_1000508D8();
}

void sub_100683F08(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[loadDummyStoreIfNeeded] Still unable to load local store after deleting and reloading.", v1, 2u);
}

void sub_100683F48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "[loadDummyStoreIfNeeded] Failed to load local store {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100683FA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "[loadDummyStoreIfNeeded] Failed to delete local store file {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100684008()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "[loadDummyStoreIfNeeded] Local store is not loaded to the PSC. Probably it's corrupted and failed to load. Going to delete the file and reload again. {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100684068()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Failed to delete (some) store files immeidately {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_1006840C8(void *a1, NSObject *a2)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = objc_msgSend(a1, "isolated");
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Attempted to delete stores immediately in situations other than -init. Abort. {isolated: %d}", (uint8_t *)v3, 8u);
  sub_10001F1A4();
}

void sub_10068414C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *v3;
  uint8_t *v4;
  id v5;
  void *v6;

  v5 = objc_msgSend((id)sub_100050880(a1, a2), "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  *(_DWORD *)v4 = 138543362;
  *v3 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "RDStoreControllerMigrator: [MIGRATE STORE] Store URL is nil {identifier: %{public}@}", v4, 0xCu);

  sub_1000508D8();
}

void sub_1006841AC()
{
  uint64_t v0;
  os_log_t v1;

  sub_1000507CC();
  sub_10006BCB0((void *)&_mh_execute_header, v0, v1, "RDStoreControllerMigrator: [MIGRATE STORE] ERROR: Failed to flush stores metadata {error: %{public}@, updatedStores: %@}");
  sub_10001F1A4();
}

void sub_10068421C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "[addValidatedStoresToAccountStoreMapWithStores] storeURL or storeURL.lastPathComponent is nil {storeURL: %@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_10068427C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_100092B7C();
  v3 = 0;
  sub_10005078C((void *)&_mh_execute_header, v0, v1, "[addValidatedStoresToAccountStoreMapWithStores] invalidStoreBackupURL is nil {storeURL: %@, backupURL: %@}", v2);
  sub_10001F1A4();
}

void sub_1006842E4()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_100092B60();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "identifier"));
  sub_100092B40();
  sub_100092B2C((void *)&_mh_execute_header, v2, v3, "[addValidatedStoresToAccountStoreMapWithStores] Error backing up invalid store sqlite-shm {store: id=%{public}@ %@, backupURL: %@}", v4, v5, v6, v7, v8);

  sub_100050808();
}

void sub_100684360()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_100092B60();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "identifier"));
  sub_100092B40();
  sub_100092B2C((void *)&_mh_execute_header, v2, v3, "[addValidatedStoresToAccountStoreMapWithStores] Error backing up invalid store sqlite-wal {store: id=%{public}@ %@, backupURL: %@}", v4, v5, v6, v7, v8);

  sub_100050808();
}

void sub_1006843DC()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_100092B60();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "identifier"));
  sub_100092B40();
  sub_100092B2C((void *)&_mh_execute_header, v2, v3, "[addValidatedStoresToAccountStoreMapWithStores] Error backing up invalid store sqlite {store: id=%{public}@ %@, backupURL: %@}", v4, v5, v6, v7, v8);

  sub_100050808();
}

void sub_100684458()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v2 = 138412546;
  v3 = 0;
  sub_100092B70();
  sub_10005078C((void *)&_mh_execute_header, v0, v1, "Cannot obtain a valid container directory path from storeURL {reminderDataContainerURL: %@, storeURL: %@}", (uint8_t *)&v2);
  sub_10001F1A4();
}

void sub_1006844C8()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100092B60();
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "valueForKey:", CFSTR("lastPathComponent")));
  sub_100092B2C((void *)&_mh_execute_header, v2, v3, "Failed to delete stores. {storeFileNamesToDelete: %{public}@, storeURLsToDelete: %@, error: %{public}@}", v4, v5, v6, v7, 2u);

  sub_100050808();
}

void sub_100684568()
{
  uint64_t v0;
  os_log_t v1;

  sub_100050818();
  sub_10006BCB0((void *)&_mh_execute_header, v0, v1, "Error fetching stores from account types {error: %{public}@, types: %{public}@}");
  sub_10001F1A4();
}

void sub_1006845CC()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v2 = 134218240;
  v3 = 15;
  sub_100092B70();
  sub_1000507D8((void *)&_mh_execute_header, v0, v1, "[createOrLoadAccountStores] Trying to load more stores than the maximum we allow. Bailing. {limit: %ld, loaded.count: %ld}", (uint8_t *)&v2);
  sub_10001F1A4();
}

void sub_100684640()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100050818();
  sub_1000507D8((void *)&_mh_execute_header, v0, (uint64_t)v0, "[createOrLoadAccountStores] Failed to add store {error: %@, fileName: %{public}@}", v1);
  sub_10001F1A4();
}

void sub_1006846AC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138543618;
  *(_QWORD *)&v3[4] = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_WORD *)&v3[12] = 2112;
  *(_QWORD *)&v3[14] = a2;
  sub_10006BCB0((void *)&_mh_execute_header, a2, a3, "[markAccountStoreDeleted] Failed to obtain accountIdentifier from store {accountIdentifier: %{public}@, store: %@}", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  sub_10001F1A4();
}

void sub_100684724(_QWORD *a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = *a1;
  *(_WORD *)&v3[12] = 2114;
  *(_QWORD *)&v3[14] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 40);
  sub_10006BCB0((void *)&_mh_execute_header, a2, a3, "[markAccountStoreDeleted] Failed to mark account store as deleted {store: %@, error: %{public}@}", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  sub_10001F1A4();
}

void sub_1006847A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10001F194((void *)&_mh_execute_header, v0, v1, "Failed to set query generation token to current {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100684804(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "accountID is nil in cloudContext:receivedZoneNotFound:accountID: zoneID %{public}@", v5);

  sub_100050830();
}

void sub_100684884(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingDescription"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "accountID is nil in cloudContext:userDidDeleteRecordZoneWithID:accountID: zoneID %{public}@", v5);

  sub_100050830();
}

void sub_100684904()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Error saving after notes zone deleted by user: %@", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100684964(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "className"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordName"));
  sub_100092B70();
  sub_10005E450((void *)&_mh_execute_header, v5, v6, "%@ (%@) hasn't been fully pushed to the cloud. Not deleting.", v7, v8, v9, v10, 2u);

  sub_10005073C();
}

void sub_100684A14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Failed to create an RDAccountPersonIDSaltObserver to add to accountPropertiesNotifier {accountObjID: %@}", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100684A74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507CC();
  sub_10005A450((void *)&_mh_execute_header, v0, v1, "Error purging deleted objects: %{public}@", v2, v3, v4, v5, v6);
  sub_10001F1A4();
}

void sub_100684AD4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend((id)sub_100050880(a1, a2), "shortLoggingDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *v3 = 138412290;
  *v2 = v5;
  sub_1000508FC((void *)&_mh_execute_header, v6, v7, "Deleting object from database because it's marked for deletion and its deletion has synced: %@");

  sub_1000508D8();
}

void sub_100684B24(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 72);
  v5 = 138412802;
  v6 = a1;
  v7 = 2112;
  v8 = v3;
  v9 = 2112;
  v10 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "PopulateDefaultValues ERROR {updateError: %@, entity: %@, attributeName: %@}", (uint8_t *)&v5, 0x20u);
}

void sub_100684BB4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a1, a3, "rem_log_fault_if (!accountIdentifier) -- invalid nil value for '%s'", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_100684C24(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a1, a3, "rem_log_fault_if (!ckIdentifier) -- invalid nil value for '%s'", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_100684C94(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a2, a3, "managedObjectContext should not be nil in BatchFatchHelper._canObtainPermanentIDForObject for %{public}@", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_100684CF8()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100050818();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Cannot obtain permanent ID for %{public}@ with error: %{public}@", v1, 0x16u);
  sub_10001F1A4();
}

void sub_100684D70(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "managedObjectContext should not be nil in BatchFatchHelper._flush", v1, 2u);
}

void sub_100684DB0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a2, a3, "managedObjectContext should not be nil in BatchFatchHelper.cachedManagedObjectForCKIdentifier for %{public}@", a5, a6, a7, a8, 2u);
  sub_10001F1A4();
}

void sub_100684E14()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100050818();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "ICBatchFetchHelper: existingObjectWithID %{public}@ with error %{public}@", v1, 0x16u);
  sub_10001F1A4();
}

void sub_100684E8C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10001F194((void *)&_mh_execute_header, a2, a3, "Number of dispatch blocks not run in ICBatchFetchHelper : %lu", a5, a6, a7, a8, 0);
  sub_10001F1A4();
}

void sub_100684EF0(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  *(_DWORD *)a1 = 138543362;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "REMCDObjectTreeProcessor: \tCYCLIC REFERENCE in object tree detected! Tail node has already been flushed before {tailNode: %{public}@}", a1, 0xCu);

}

void sub_100684F64(void *a1, NSObject *a2)
{
  int v3;
  id v4;

  v3 = 134217984;
  v4 = objc_msgSend(a1, "count");
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "REMCDObjectTreeProcessor: \tFLUSHING {count: %ld}", (uint8_t *)&v3, 0xCu);
}

void sub_100684FEC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error saving context: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_100685060(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error saving context (%{public}@): %{public}@", (uint8_t *)&v3, 0x16u);
}

void sub_1006850E4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "CKParentReminderIdentifierMigration ERROR {updateError: %{public}@}", (uint8_t *)&v2, 0xCu);
}

void sub_100685158(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100050760((void *)&_mh_execute_header, a3, (uint64_t)a3, "PersonIDSaltGenerator failed to generate random salt with exception: %@.", (uint8_t *)a2);

}

void sub_1006851A4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Failed to fetch CD accounts: %@", v2);
}

void sub_10068520C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, v0, v1, "Failed to fetch cloud-based accounts: %@", v2);
}

void sub_100685274(void *a1, void *a2, NSObject *a3)
{
  id v5;
  void *v6;
  int v7;
  id v8;
  __int16 v9;
  void *v10;

  v5 = objc_msgSend(a1, "count");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v7 = 134218242;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_fault_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_FAULT, "Trying to get a primary active CloudKit account based on the assumption that there should only be at most 1 active (primary) .cloudKit account type object but multiple was found {count: %lu, first.identifier: %@}", (uint8_t *)&v7, 0x16u);

  sub_10005073C();
}

void sub_100685320()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "Trying to get a primary active CloudKit account but can't find any", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_10068534C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "CloudKitUtils: No CloudKit REMCDAccount found in the database", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_100685378()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "CloudKitUtils: Trying to get the primary iCloud ACAccount but can't find any", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_1006853A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "cloudKitAccountWithCKIdentifier with nil or empty ckIdentifier", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_1006853D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000507EC();
  sub_100050798((void *)&_mh_execute_header, v0, v1, "cloudKitAccountWithCKIdentifier with nil context", v2, v3, v4, v5, v6);
  sub_1000507E4();
}

void sub_1006853FC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remObjectID"));
  sub_1000507CC();
  sub_100050760((void *)&_mh_execute_header, a2, v4, "generateAndSavePersonIDSaltIfNeeded...: Could not generate random salt due to system error {accountID: %{public}@}", v5);

}

void sub_100685484(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  uint8_t v6[12];
  __int16 v7;
  uint64_t v8;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "remObjectID"));
  sub_1000507CC();
  v7 = 2112;
  v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "generateAndSavePersonIDSaltIfNeeded...: Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {accountID: %{public}@, salt: %@}", v6, 0x16u);

  sub_10005073C();
}

void sub_100685520(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUIDString"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "personIDSalt"));
  v7 = 138543618;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "generateAndSavePersonIDSaltIfNeeded...: Account .personIDSalt is already set {accountID: %{public}@, salt: %@}", (uint8_t *)&v7, 0x16u);

  sub_10005073C();
}

void sub_1006855E4()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1000507EC();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "rem_log_fault_if (![[self accountTypeHost] isPrimaryCloudKit]) -- Generating PersonIDSalt is supported on the primary CloudKit account only", v1, 2u);
  sub_1000507E4();
}

void sub_10068561C(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ic_loggingDescription"));
  *(_DWORD *)a1 = 138543362;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "Found cloudKit account without ckIdentifier: %{public}@", a1, 0xCu);

}

id objc_msgSend_AccountAbsentError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AccountAbsentError");
}

id objc_msgSend_InitiallyNilError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "InitiallyNilError");
}

id objc_msgSend_SentinelFileName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SentinelFileName");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByDeletingLastPathComponent");
}

id objc_msgSend_URLByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByDeletingPathExtension");
}

id objc_msgSend_URLByResolvingSymlinksInPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByResolvingSymlinksInPath");
}

id objc_msgSend_URLByStandardizingPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByStandardizingPath");
}

id objc_msgSend_URLForAccountFileDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForAccountFileDirectory:");
}

id objc_msgSend_URLForAttachmentDirectory_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForAttachmentDirectory:accountID:");
}

id objc_msgSend_URLForAttachmentFile_accountID_fileName_sha512Sum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForAttachmentFile:accountID:fileName:sha512Sum:");
}

id objc_msgSend_URLForDefaultFilesDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForDefaultFilesDirectory");
}

id objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForDirectory:inDomain:appropriateForURL:create:error:");
}

id objc_msgSend_URLForGroupContainerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForGroupContainerWithIdentifier:");
}

id objc_msgSend_URLForHashedAttachmentDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForHashedAttachmentDirectory:");
}

id objc_msgSend_URLForHashedAttachmentFileInAccount_sha512Sum_fileExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForHashedAttachmentFileInAccount:sha512Sum:fileExtension:");
}

id objc_msgSend_URLForHashedAttachmentFileInAccount_sha512SumWithFileExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForHashedAttachmentFileInAccount:sha512SumWithFileExtension:");
}

id objc_msgSend_URLHostAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLHostAllowedCharacterSet");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_URLsForDirectory_inDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLsForDirectory:inDomains:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend___unsafe_doesNotWorkUniversally_affectedStores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__unsafe_doesNotWorkUniversally_affectedStores");
}

id objc_msgSend___unsafe_doesNotWorkUniversally_setAffectedStoresWithAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__unsafe_doesNotWorkUniversally_setAffectedStoresWithAccountIdentifier:");
}

id objc_msgSend__accountIDForPersistenceStoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountIDForPersistenceStoreID:");
}

id objc_msgSend__accountIdentifierForPersistenceStoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountIdentifierForPersistenceStoreID:");
}

id objc_msgSend__accountType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountType");
}

id objc_msgSend__accountTypeMaskWithBitMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountTypeMaskWithBitMask:");
}

id objc_msgSend__accountsDidEnableOrDisable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountsDidEnableOrDisable");
}

id objc_msgSend__addOperationToProcessBlockWithOperationName_processBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addOperationToProcessBlockWithOperationName:processBlock:");
}

id objc_msgSend__allowsObjectSupportedVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allowsObjectSupportedVersion");
}

id objc_msgSend__applicationDocumentsURLForPersonaIdentifier_accountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationDocumentsURLForPersonaIdentifier:accountIdentifier:");
}

id objc_msgSend__backupInvalidStores_outBackUpFailedStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backupInvalidStores:outBackUpFailedStores:");
}

id objc_msgSend__canObtainPermanentIDForObject_context_ckIdentifierAccountIdentifierPair_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canObtainPermanentIDForObject:context:ckIdentifierAccountIdentifierPair:");
}

id objc_msgSend__cancelFireRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelFireRequests");
}

id objc_msgSend__changeTokenFromCDTrackingState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeTokenFromCDTrackingState:error:");
}

id objc_msgSend__cleanUpCloudKitNetworkActivityObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanUpCloudKitNetworkActivityObservers");
}

id objc_msgSend__cleanUpPreDataSeparationDataContainerIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanUpPreDataSeparationDataContainerIfNeeded");
}

id objc_msgSend__clearCloudDirtyForToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearCloudDirtyForToken:");
}

id objc_msgSend__cloudObjectClassesByRecordType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudObjectClassesByRecordType");
}

id objc_msgSend__computeShouldPerformCloudSchemaCatchUpSyncFrom_storeController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeShouldPerformCloudSchemaCatchUpSyncFrom:storeController:");
}

id objc_msgSend__currentREMChangeTokenFromNSPersistentStores_persistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentREMChangeTokenFromNSPersistentStores:persistentStoreCoordinator:");
}

id objc_msgSend__dataSeparationIncompatible_defaultReminderDataContainerURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataSeparationIncompatible_defaultReminderDataContainerURL");
}

id objc_msgSend__deduplicateLocalAccountStore_withStore_managedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deduplicateLocalAccountStore:withStore:managedObjectContext:");
}

id objc_msgSend__deduplicateStore_withStore_isLocalAccountType_managedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deduplicateStore:withStore:isLocalAccountType:managedObjectContext:");
}

id objc_msgSend__discoverReminderDataContainerURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discoverReminderDataContainerURLs");
}

id objc_msgSend__dispatchBlockApplyingBackPressureIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchBlockApplyingBackPressureIfNeeded:");
}

id objc_msgSend__errorChangeSetWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorChangeSetWithError:");
}

id objc_msgSend__executeDeleteHistoryRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeDeleteHistoryRequest:");
}

id objc_msgSend__existingCloudDirtyToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_existingCloudDirtyToken");
}

id objc_msgSend__fetchCDAuxiliaryChangeInfosWithObjectID_inManagedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCDAuxiliaryChangeInfosWithObjectID:inManagedObjectContext:error:");
}

id objc_msgSend__fetchCDTrackingStateWithClientID_andPerformBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCDTrackingStateWithClientID:andPerformBlock:");
}

id objc_msgSend__fetchCloudKitAccountsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCloudKitAccountsInContext:");
}

id objc_msgSend__fetchRequestWithPredicateUsingEntityNames_managedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRequestWithPredicateUsingEntityNames:managedObjectContext:error:");
}

id objc_msgSend__flush(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flush");
}

id objc_msgSend__flushIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flushIfNeeded:");
}

id objc_msgSend__flushRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flushRemaining:");
}

id objc_msgSend__generateAndSavePersonIDSaltIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateAndSavePersonIDSaltIfNeeded:");
}

id objc_msgSend__handleDatabaseNotification_database_accountID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDatabaseNotification:database:accountID:completionHandler:");
}

id objc_msgSend__heightOfEntityNodeInMOMTreeForEffectiveMinimumSupportedVersionPropagation_heightMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_heightOfEntityNodeInMOMTreeForEffectiveMinimumSupportedVersionPropagation:heightMap:");
}

id objc_msgSend__ic_objectsFromObjectIDs_propertiesToFetch_relationshipKeyPathsForPrefetching_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ic_objectsFromObjectIDs:propertiesToFetch:relationshipKeyPathsForPrefetching:context:");
}

id objc_msgSend__ic_resultsMatchingPredicate_sortDescriptors_resultType_fetchBatchSize_propertiesToFetch_relationshipKeyPathsForPrefetching_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ic_resultsMatchingPredicate:sortDescriptors:resultType:fetchBatchSize:propertiesToFetch:relationshipKeyPathsForPrefetching:context:");
}

id objc_msgSend__isCloudKitAccountAvailableWithManagedObjectContext_requireActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCloudKitAccountAvailableWithManagedObjectContext:requireActive:");
}

id objc_msgSend__isCloudSchemaCatchUpSyncNeededForExistingCloudObject_persistenceCloudSchemaVersion_outIncompatiblePropertyKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCloudSchemaCatchUpSyncNeededForExistingCloudObject:persistenceCloudSchemaVersion:outIncompatiblePropertyKeys:");
}

id objc_msgSend__isInICloudAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInICloudAccount");
}

id objc_msgSend__isRecognizedCloudObjectClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRecognizedCloudObjectClass:");
}

id objc_msgSend__legacy_mlModelURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_legacy_mlModelURL");
}

id objc_msgSend__legacy_temporaryMLModelURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_legacy_temporaryMLModelURL");
}

id objc_msgSend__makePersistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makePersistentStoreCoordinator");
}

id objc_msgSend__markCloudAsDirtyAndReturnToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markCloudAsDirtyAndReturnToken");
}

id objc_msgSend__markDirtyForEffectiveMinimumSupportedVersionValidation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markDirtyForEffectiveMinimumSupportedVersionValidation");
}

id objc_msgSend__migrateAttachmentFilesToPostDataSeparationLocationsIfNeededWithAccountIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateAttachmentFilesToPostDataSeparationLocationsIfNeededWithAccountIdentifiers:");
}

id objc_msgSend__migrateBackupStoresToPostDataSeparationLocationIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateBackupStoresToPostDataSeparationLocationIfNeeded");
}

id objc_msgSend__migrateImageDeduplicationSentinelFileIfNeededWithPreMigrationAttachmentFileManager_dataSeparationAttachmentFileManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateImageDeduplicationSentinelFileIfNeededWithPreMigrationAttachmentFileManager:dataSeparationAttachmentFileManager:");
}

id objc_msgSend__migrateMLModelsToPostDataSeparationLocationIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateMLModelsToPostDataSeparationLocationIfNeeded");
}

id objc_msgSend__migrateStoresToPostDataSeparationLocationsWithDataSeparatedStoreURLsMap_deleteFilesMarkedDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateStoresToPostDataSeparationLocationsWithDataSeparatedStoreURLsMap:deleteFilesMarkedDeleted:");
}

id objc_msgSend__moveAttachmentFilesFromAttachmentFileManager_toAttachmentFileManager_affectedAccountIdentifiers_logPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveAttachmentFilesFromAttachmentFileManager:toAttachmentFileManager:affectedAccountIdentifiers:logPrefix:");
}

id objc_msgSend__notifyCloudKitNetworkActivityObservers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyCloudKitNetworkActivityObservers:");
}

id objc_msgSend__parentZoneMismatchErrorDebugDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parentZoneMismatchErrorDebugDescription");
}

id objc_msgSend__performDataSeparationMigrationIfNeededWithDataSeparatedStoreURLsMap_deleteFilesMarkedDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performDataSeparationMigrationIfNeededWithDataSeparatedStoreURLsMap:deleteFilesMarkedDeleted:");
}

id objc_msgSend__performLocalObjectMergeWithEligibleObjectIDs_cloudKitAccount_managedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performLocalObjectMergeWithEligibleObjectIDs:cloudKitAccount:managedObjectContext:error:");
}

id objc_msgSend__performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext_fetchHasFullyCompleted_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:fetchHasFullyCompleted:accountID:");
}

id objc_msgSend__performStagedLightweightMigrationIfNeededForAccountStoreWithURL_persistentStoreDescriptionOptionsOverride_migrationCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performStagedLightweightMigrationIfNeededForAccountStoreWithURL:persistentStoreDescriptionOptionsOverride:migrationCoordinator:");
}

id objc_msgSend__performStagedLightweightMigrationIfNeededForAccountStoresWithURLs_persistentStoreDescriptionOptionsOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performStagedLightweightMigrationIfNeededForAccountStoresWithURLs:persistentStoreDescriptionOptionsOverride:");
}

id objc_msgSend__persistenceStoreForAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistenceStoreForAccountID:");
}

id objc_msgSend__persistenceStoreIDForAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistenceStoreIDForAccountID:");
}

id objc_msgSend__persistenceStoreIDsForAccountTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistenceStoreIDsForAccountTypes:");
}

id objc_msgSend__persistenceStoresForAccountTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistenceStoresForAccountTypes:");
}

id objc_msgSend__persistentStoreConnectionPoolMaxSizeWithTotalStoreCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistentStoreConnectionPoolMaxSizeWithTotalStoreCount:");
}

id objc_msgSend__populateCountForEntity_withinCDAccount_statsAccumulator_errorAccumulator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:");
}

id objc_msgSend__postDidRemoveAccountStoresNotificationWithDeletedObjectIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postDidRemoveAccountStoresNotificationWithDeletedObjectIDs:");
}

id objc_msgSend__processCloudObjectIDs_operationQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processCloudObjectIDs:operationQueue:completionHandler:");
}

id objc_msgSend__processFetchedCloudObjectsWithObjectIDs_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processFetchedCloudObjectsWithObjectIDs:usingBlock:");
}

id objc_msgSend__processFetchedCloudObjectsWithObjectIDs_withManagedObjectContext_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processFetchedCloudObjectsWithObjectIDs:withManagedObjectContext:usingBlock:");
}

id objc_msgSend__recordTypesToSortChildrenAfterFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordTypesToSortChildrenAfterFetch");
}

id objc_msgSend__relocateMisplacedDataSeparationAccountAttachmentFilesWithRelocatedAccountIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relocateMisplacedDataSeparationAccountAttachmentFilesWithRelocatedAccountIdentifiers:");
}

id objc_msgSend__relocateMisplacedDataSeparationStoresAndFilesWithDataSeparatedStoreURLsMap_deleteFilesMarkedDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relocateMisplacedDataSeparationStoresAndFilesWithDataSeparatedStoreURLsMap:deleteFilesMarkedDeleted:");
}

id objc_msgSend__relocateMisplacedDataSeparationStoresWithDataSeparatedStoreURLsMap_deleteFilesMarkedDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_relocateMisplacedDataSeparationStoresWithDataSeparatedStoreURLsMap:deleteFilesMarkedDeleted:");
}

id objc_msgSend__reminderDataContainerURLForAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reminderDataContainerURLForAccountIdentifier:");
}

id objc_msgSend__removeAllPersistentStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAllPersistentStores:");
}

id objc_msgSend__removeFilesOfStoresAtURLs_outRemovedFileURLs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeFilesOfStoresAtURLs:outRemovedFileURLs:error:");
}

id objc_msgSend__resolveAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resolveAccountID:");
}

id objc_msgSend__resolveObjectIDsInChanges_deletedObjectsIDMap_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resolveObjectIDsInChanges:deletedObjectsIDMap:inManagedObjectContext:");
}

id objc_msgSend__resultChangeSetByExecutingRequest_managedObjectContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resultChangeSetByExecutingRequest:managedObjectContext:error:");
}

id objc_msgSend__scheduleRetryMergeLocalObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleRetryMergeLocalObjects");
}

id objc_msgSend__setAllowsExpandedUserInfoKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAllowsExpandedUserInfoKeys:");
}

id objc_msgSend__setCKIdentifierIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCKIdentifierIfNecessary");
}

id objc_msgSend__setEnabledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabledTopics:");
}

id objc_msgSend__startCoreSpotlightDelegate_forStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startCoreSpotlightDelegate:forStore:");
}

id objc_msgSend__syncWithReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_syncWithReason:completionHandler:");
}

id objc_msgSend__systemBuildVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemBuildVersion");
}

id objc_msgSend__unitTest_purgeDeletedFileAttachmentsDidComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unitTest_purgeDeletedFileAttachmentsDidComplete");
}

id objc_msgSend__urlsToDeleteFromFileURLs_matchingStoreURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_urlsToDeleteFromFileURLs:matchingStoreURL:");
}

id objc_msgSend__validateAccountStores_outValidStoresByAccountIDs_outInvalidStores_outLocalAccountStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateAccountStores:outValidStoresByAccountIDs:outInvalidStores:outLocalAccountStores:");
}

id objc_msgSend__validateAssignmentsForInvalidSharees_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateAssignmentsForInvalidSharees:");
}

id objc_msgSend__validateDirtyEffectiveMinimumSupportedVersionsWithBatchSize_isManualValidation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateDirtyEffectiveMinimumSupportedVersionsWithBatchSize:isManualValidation:");
}

id objc_msgSend__validateForReminderTreeConsistency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateForReminderTreeConsistency:");
}

id objc_msgSend__validateMoveAcrossLists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateMoveAcrossLists:");
}

id objc_msgSend__validateMoveAcrossSharedLists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateMoveAcrossSharedLists:");
}

id objc_msgSend__validateZoneOwnerNamesWithLogPrefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateZoneOwnerNamesWithLogPrefix:error:");
}

id objc_msgSend_aa_accountClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_accountClass");
}

id objc_msgSend_aa_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_altDSID");
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isAccountClass:");
}

id objc_msgSend_aa_personID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_personID");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_acceptShareWithMetadata_container_accountID_fetchObjectWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptShareWithMetadata:container:accountID:fetchObjectWithCompletionHandler:");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account");
}

id objc_msgSend_accountByCKIdentifierFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountByCKIdentifierFrom:");
}

id objc_msgSend_accountCKIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountCKIdentifier");
}

id objc_msgSend_accountChangedDebouncerInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountChangedDebouncerInterval");
}

id objc_msgSend_accountChangedNotificationHandlingDebouncer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountChangedNotificationHandlingDebouncer");
}

id objc_msgSend_accountDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountDescription");
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountID");
}

id objc_msgSend_accountIDForDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountIDForDatabase:");
}

id objc_msgSend_accountIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountIdentifier");
}

id objc_msgSend_accountIdentifierForStoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountIdentifierForStoreID:");
}

id objc_msgSend_accountInitializerDidCompleteOnAccountsDidChangeObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInitializerDidCompleteOnAccountsDidChangeObserver");
}

id objc_msgSend_accountInitializerDidCompleteOnLaunchObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInitializerDidCompleteOnLaunchObserver");
}

id objc_msgSend_accountOverrideInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountOverrideInfo");
}

id objc_msgSend_accountPersonIDSaltObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountPersonIDSaltObserver");
}

id objc_msgSend_accountPropertiesNotifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountPropertiesNotifier");
}

id objc_msgSend_accountPropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountPropertyForKey:");
}

id objc_msgSend_accountStatusByAccountIDDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusByAccountIDDescription");
}

id objc_msgSend_accountStatusFromAccountStatusNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusFromAccountStatusNumber:");
}

id objc_msgSend_accountStatusNumberByAccountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusNumberByAccountID");
}

id objc_msgSend_accountStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatusWithCompletionHandler:");
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStore");
}

id objc_msgSend_accountStoreManagementDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStoreManagementDelegate");
}

id objc_msgSend_accountStoresFailToLoadWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStoresFailToLoadWithError:");
}

id objc_msgSend_accountTypeHost(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTypeHost");
}

id objc_msgSend_accountTypeWithAccountTypeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTypeWithAccountTypeIdentifier:");
}

id objc_msgSend_accountWithCKIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWithCKIdentifier:context:");
}

id objc_msgSend_accountWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWithIdentifier:");
}

id objc_msgSend_accountZoneIDsFetchingChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountZoneIDsFetchingChanges");
}

id objc_msgSend_accountZoneIDsNeedingFetchChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountZoneIDsNeedingFetchChanges");
}

id objc_msgSend_accountZoneIDsNeedingToBeSaved(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountZoneIDsNeedingToBeSaved");
}

id objc_msgSend_accountsMatchingPredicate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsMatchingPredicate:context:");
}

id objc_msgSend_accountsWithAccountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsWithAccountType:");
}

id objc_msgSend_activateCoreSpotlightDelegates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateCoreSpotlightDelegates");
}

id objc_msgSend_addBarrierBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBarrierBlock:");
}

id objc_msgSend_addCKIdentifiers_accountIdentifier_dispatchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCKIdentifiers:accountIdentifier:dispatchBlock:");
}

id objc_msgSend_addCKIdentifiers_accountIdentifier_onCurrentQueue_dispatchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCKIdentifiers:accountIdentifier:onCurrentQueue:dispatchBlock:");
}

id objc_msgSend_addCallbackBlocksToModifyRecordsOperation_rootRecordIDsByShareID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCallbackBlocksToModifyRecordsOperation:rootRecordIDsByShareID:");
}

id objc_msgSend_addCkServerChangeTokensObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCkServerChangeTokensObject:");
}

id objc_msgSend_addDependenciesForModifyRecordsOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDependenciesForModifyRecordsOperation:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addDispatchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDispatchBlock:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addExecutionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExecutionBlock:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperationToProcessObjectsWithOperationName_syncReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperationToProcessObjectsWithOperationName:syncReason:completionHandler:");
}

id objc_msgSend_addOperations_waitUntilFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperations:waitUntilFinished:");
}

id objc_msgSend_addPersistentStoreWithDescription_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPersistentStoreWithDescription:completionHandler:");
}

id objc_msgSend_addProcessLocalObjectsOperationToMergeLocalObjectsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addProcessLocalObjectsOperationToMergeLocalObjectsWithCompletionHandler:");
}

id objc_msgSend_addRunExclusivelyOperations_operationQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRunExclusivelyOperations:operationQueue:");
}

id objc_msgSend_addServerChangeTokenForAccount_ckServerChangeToken_zoneID_databaseScope_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addServerChangeTokenForAccount:ckServerChangeToken:zoneID:databaseScope:context:");
}

id objc_msgSend_addStateHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStateHandler");
}

id objc_msgSend_addStateHandlerWithName_stateBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStateHandlerWithName:stateBlock:");
}

id objc_msgSend_addSubscribedSubscriptionIDs_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscribedSubscriptionIDs:accountID:");
}

id objc_msgSend_adjustAPSNotificationDebouncerInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustAPSNotificationDebouncerInterval");
}

id objc_msgSend_adjustAPSNotificationDebouncerIntervalWithMigrationState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustAPSNotificationDebouncerIntervalWithMigrationState:");
}

id objc_msgSend_affectedStores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "affectedStores");
}

id objc_msgSend_alarm(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alarm");
}

id objc_msgSend_alarmIDsLimitPerReminder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alarmIDsLimitPerReminder");
}

id objc_msgSend_alarmReferenceCKRecordType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alarmReferenceCKRecordType");
}

id objc_msgSend_alarmStorage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alarmStorage");
}

id objc_msgSend_alarms(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alarms");
}

id objc_msgSend_allChildObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChildObjects");
}

id objc_msgSend_allCloudKitAccountsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allCloudKitAccountsInContext:");
}

id objc_msgSend_allCloudObjectIDsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allCloudObjectIDsInContext:");
}

id objc_msgSend_allCloudObjectIDsOfClassesPassingTest_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allCloudObjectIDsOfClassesPassingTest:inContext:");
}

id objc_msgSend_allCloudObjectsPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allCloudObjectsPredicate");
}

id objc_msgSend_allDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDay");
}

id objc_msgSend_allDirtyCloudObjectIDsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDirtyCloudObjectIDsInContext:");
}

id objc_msgSend_allDirtyCloudObjectsPredicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDirtyCloudObjectsPredicate");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_andPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "andPredicateWithSubpredicates:");
}

id objc_msgSend_appStoreReviewCreatedOrCompletedRemindersCountThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appStoreReviewCreatedOrCompletedRemindersCountThreshold");
}

id objc_msgSend_appStoreReviewNumberOfForegroundsThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appStoreReviewNumberOfForegroundsThreshold");
}

id objc_msgSend_appStoreReviewTimeIntervalOfInterest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appStoreReviewTimeIntervalOfInterest");
}

id objc_msgSend_appStoreReviewTimeIntervalSinceInitialForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appStoreReviewTimeIntervalSinceInitialForeground");
}

id objc_msgSend_appStoreReviewTimeIntervalSinceLastFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appStoreReviewTimeIntervalSinceLastFetch");
}

id objc_msgSend_appStoreReviewTimeIntervalSinceLastPrompt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appStoreReviewTimeIntervalSinceLastPrompt");
}

id objc_msgSend_appZoneID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appZoneID");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appleAccountUtilities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleAccountUtilities");
}

id objc_msgSend_applicationDocumentsURLForAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDocumentsURLForAccountIdentifier:");
}

id objc_msgSend_apsConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apsConnection");
}

id objc_msgSend_apsDebouncerDefaultInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apsDebouncerDefaultInterval");
}

id objc_msgSend_apsDebouncerMigrationInProgressInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apsDebouncerMigrationInProgressInterval");
}

id objc_msgSend_apsDebouncerWatchDefaultInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apsDebouncerWatchDefaultInterval");
}

id objc_msgSend_apsDebouncerWatchMigrationInProgressInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apsDebouncerWatchMigrationInProgressInterval");
}

id objc_msgSend_apsNotificationHandlingDebouncer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apsNotificationHandlingDebouncer");
}

id objc_msgSend_apsTopic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apsTopic");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assignObject_toPersistentStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assignObject:toPersistentStore:");
}

id objc_msgSend_assignee(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assignee");
}

id objc_msgSend_assignments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assignments");
}

id objc_msgSend_attachmentFileManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentFileManager");
}

id objc_msgSend_attachmentIDsFromAttachmentDirectoryWithAccountID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentIDsFromAttachmentDirectoryWithAccountID:error:");
}

id objc_msgSend_attributeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeType");
}

id objc_msgSend_attributesByName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesByName");
}

id objc_msgSend_author(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "author");
}

id objc_msgSend_availableConfigurationURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableConfigurationURLs");
}

id objc_msgSend_babySatErrorWithOperationName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "babySatErrorWithOperationName:");
}

id objc_msgSend_backingCDObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingCDObject");
}

id objc_msgSend_base64EncodedHMACStringFromString_usingSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedHMACStringFromString:usingSalt:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_batchDeleteExpiredRemindersDefaultThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchDeleteExpiredRemindersDefaultThrottleInterval");
}

id objc_msgSend_batchDeleteExpiredRemindersMinimumDeletionTimeInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchDeleteExpiredRemindersMinimumDeletionTimeInterval");
}

id objc_msgSend_batchDeleteExpiredRemindersRateReduceFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchDeleteExpiredRemindersRateReduceFactor");
}

id objc_msgSend_batchFetchHelper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchFetchHelper");
}

id objc_msgSend_batchFetchHelperWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchFetchHelperWithContext:");
}

id objc_msgSend_batchInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchInterval");
}

id objc_msgSend_batchRecordsToSave_delete_maxRecordCountPerBatch_maxRecordSizePerBatch_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchRecordsToSave:delete:maxRecordCountPerBatch:maxRecordSizePerBatch:withBlock:");
}

id objc_msgSend_batchSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchSize");
}

id objc_msgSend_batchUpdateRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchUpdateRequestWithEntityName:");
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockOperationWithBlock:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bootstrapSyncingOnLaunchIfSystemReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bootstrapSyncingOnLaunchIfSystemReady");
}

id objc_msgSend_buddyStateObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyStateObserver");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleID");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cachedAccountIDsByStoreIDsMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedAccountIDsByStoreIDsMap");
}

id objc_msgSend_cachedConfigurationURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedConfigurationURL");
}

id objc_msgSend_cachedManagedObjectForCKIdentifier_accountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedManagedObjectForCKIdentifier:accountIdentifier:");
}

id objc_msgSend_cached_CDResolutionMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cached_CDResolutionMap");
}

id objc_msgSend_callOnMainThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callOnMainThread");
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callStackSymbols");
}

id objc_msgSend_callTargetSelector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callTargetSelector");
}

id objc_msgSend_callingParticipant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callingParticipant");
}

id objc_msgSend_canBeRootShareObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canBeRootShareObject");
}

id objc_msgSend_canCoalesceWithOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canCoalesceWithOperation:");
}

id objc_msgSend_canRetryImmediatelyAfterError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canRetryImmediatelyAfterError:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllOperations");
}

id objc_msgSend_cancelEverythingWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelEverythingWithCompletionHandler:");
}

id objc_msgSend_cancelPreviousFireRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousFireRequests");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:");
}

id objc_msgSend_candidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "candidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_cdEntityName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdEntityName");
}

id objc_msgSend_changeLevelIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeLevelIfNecessary");
}

id objc_msgSend_changeTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeTracking");
}

id objc_msgSend_changedManagedObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changedManagedObjectID");
}

id objc_msgSend_changedObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changedObjectID");
}

id objc_msgSend_changedValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changedValues");
}

id objc_msgSend_changes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changes");
}

id objc_msgSend_checkForLongLivedOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForLongLivedOperations");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_children(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "children");
}

id objc_msgSend_childrenNodes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childrenNodes");
}

id objc_msgSend_ckCloudState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckCloudState");
}

id objc_msgSend_ckDirtyFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckDirtyFlags");
}

id objc_msgSend_ckIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckIdentifier");
}

id objc_msgSend_ckIdentifierAccountPairs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckIdentifierAccountPairs");
}

id objc_msgSend_ckIdentifierFromRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckIdentifierFromRecordName:");
}

id objc_msgSend_ckNeedsInitialFetchFromCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckNeedsInitialFetchFromCloud");
}

id objc_msgSend_ckNeedsToBeFetchedFromCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckNeedsToBeFetchedFromCloud");
}

id objc_msgSend_ckRecordKeyForMinimumSupportedVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckRecordKeyForMinimumSupportedVersion");
}

id objc_msgSend_ckRecordType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckRecordType");
}

id objc_msgSend_ckServerChangeTokens(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckServerChangeTokens");
}

id objc_msgSend_ckServerRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckServerRecord");
}

id objc_msgSend_ckServerRecordData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckServerRecordData");
}

id objc_msgSend_ckServerShare(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckServerShare");
}

id objc_msgSend_ckServerShareData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckServerShareData");
}

id objc_msgSend_ckUserRecordName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckUserRecordName");
}

id objc_msgSend_ckZoneOwnerName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckZoneOwnerName");
}

id objc_msgSend_className(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "className");
}

id objc_msgSend_cleanUpAfterLocalObjectMerge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUpAfterLocalObjectMerge");
}

id objc_msgSend_clearContainers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearContainers");
}

id objc_msgSend_clearPendingActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingActivity");
}

id objc_msgSend_clearRetryCountForOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearRetryCountForOperationType:");
}

id objc_msgSend_clearServerRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearServerRecord");
}

id objc_msgSend_clearSubscribedSubscriptionIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearSubscribedSubscriptionIDs");
}

id objc_msgSend_clearTransformedCKServerValueCachesOnDidTurnIntoFault(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearTransformedCKServerValueCachesOnDidTurnIntoFault");
}

id objc_msgSend_clearZoneFetchState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearZoneFetchState");
}

id objc_msgSend_clientName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientName");
}

id objc_msgSend_clientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation");
}

id objc_msgSend_cloneStoreAtSourceStoreURL_destinationStoreURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloneStoreAtSourceStoreURL:destinationStoreURL:error:");
}

id objc_msgSend_cloudAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudAccount");
}

id objc_msgSend_cloudConfigurationDownloadThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigurationDownloadThrottleInterval");
}

id objc_msgSend_cloudContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudContext");
}

id objc_msgSend_cloudContext_didFetchUserRecord_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudContext:didFetchUserRecord:accountID:");
}

id objc_msgSend_cloudContext_receivedZoneNotFound_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudContext:receivedZoneNotFound:accountID:");
}

id objc_msgSend_cloudContext_sharedZoneWasDeleted_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudContext:sharedZoneWasDeleted:accountID:");
}

id objc_msgSend_cloudContext_userDidDeleteRecordZoneWithID_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudContext:userDidDeleteRecordZoneWithID:accountID:");
}

id objc_msgSend_cloudContextDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudContextDelegate");
}

id objc_msgSend_cloudKitAccountWithCKIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitAccountWithCKIdentifier:context:");
}

id objc_msgSend_cloudKitAccountsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitAccountsInContext:");
}

id objc_msgSend_cloudKitMergeLocalLastBuildVersionMaxRetryReached(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitMergeLocalLastBuildVersionMaxRetryReached");
}

id objc_msgSend_cloudKitMergeLocalLastDateMaxRetryReached(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitMergeLocalLastDateMaxRetryReached");
}

id objc_msgSend_cloudKitMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitMetrics");
}

id objc_msgSend_cloudKitNetworkActivityObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitNetworkActivityObservers");
}

id objc_msgSend_cloudKitResultsLimitPerSyncOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitResultsLimitPerSyncOperation");
}

id objc_msgSend_cloudKitSchemaCatchUpSyncLastSuccessBuildVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitSchemaCatchUpSyncLastSuccessBuildVersion");
}

id objc_msgSend_cloudKitSchemaCatchUpSyncLastSuccessDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitSchemaCatchUpSyncLastSuccessDate");
}

id objc_msgSend_cloudKitSchemaCatchUpSyncSchedulingState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitSchemaCatchUpSyncSchedulingState");
}

id objc_msgSend_cloudObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudObject");
}

id objc_msgSend_cloudObjectClassesByRecordType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudObjectClassesByRecordType");
}

id objc_msgSend_cloudSchemaCatchUpSyncContextsByAccountIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
}

id objc_msgSend_cloudSchemaCatchUpSyncController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudSchemaCatchUpSyncController");
}

id objc_msgSend_cloudSchemaCatchUpSyncDidCompleteWithAccountIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudSchemaCatchUpSyncDidCompleteWithAccountIdentifier:context:");
}

id objc_msgSend_cloudSchemaCatchUpSyncInitialRetryInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudSchemaCatchUpSyncInitialRetryInterval");
}

id objc_msgSend_cloudSchemaCatchUpSyncMaximumRetryCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudSchemaCatchUpSyncMaximumRetryCount");
}

id objc_msgSend_cloudSchemaCatchUpSyncSchedulingStateStorage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudSchemaCatchUpSyncSchedulingStateStorage");
}

id objc_msgSend_cloudkit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudkit");
}

id objc_msgSend_cloudkitCollaboration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudkitCollaboration");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionBlock");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuration");
}

id objc_msgSend_configurationsByRecordZoneID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationsByRecordZoneID");
}

id objc_msgSend_configureOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureOperation:");
}

id objc_msgSend_confirmOrRejectFilePurgeCandidatesThatMightBeDeduplicatedAcrossMultipleAttachments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmOrRejectFilePurgeCandidatesThatMightBeDeduplicatedAcrossMultipleAttachments");
}

id objc_msgSend_confirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier");
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "container");
}

id objc_msgSend_containerAccountIDsDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerAccountIDsDescription");
}

id objc_msgSend_containerForAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerForAccountID:");
}

id objc_msgSend_containerForUserRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerForUserRecordID:");
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerIdentifier");
}

id objc_msgSend_containerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithIdentifier:");
}

id objc_msgSend_containersByAccountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containersByAccountID");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "context");
}

id objc_msgSend_contextForAccountID_withBatchFetchHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextForAccountID:withBatchFetchHelper:");
}

id objc_msgSend_contextName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextName");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copySQLiteFileAtPath_toPath_timeout_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copySQLiteFileAtPath:toPath:timeout:error:");
}

id objc_msgSend_coreDataSave_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coreDataSave:");
}

id objc_msgSend_coreSpotlightDelegateManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coreSpotlightDelegateManager");
}

id objc_msgSend_coreSpotlightExporter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coreSpotlightExporter");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForFetchRequest:error:");
}

id objc_msgSend_createAndAttachCoreSpotlightDelegateForStoreWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndAttachCoreSpotlightDelegateForStoreWithDescription:");
}

id objc_msgSend_createCoordinatorForMigratingReminderDataWithClientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCoordinatorForMigratingReminderDataWithClientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createResolutionTokenMapIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createResolutionTokenMapIfNecessary");
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "creationDate");
}

id objc_msgSend_creatorUserRecordID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "creatorUserRecordID");
}

id objc_msgSend_currentBatchCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentBatchCount");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLevel");
}

id objc_msgSend_currentLevelIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLevelIndex");
}

id objc_msgSend_currentLocalVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocalVersion");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentPersistentHistoryTokenFromStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPersistentHistoryTokenFromStores:");
}

id objc_msgSend_currentQueryGenerationToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentQueryGenerationToken");
}

id objc_msgSend_currentReachabilityStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentReachabilityStatus");
}

id objc_msgSend_currentUserParticipant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentUserParticipant");
}

id objc_msgSend_customValidationFailed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customValidationFailed");
}

id objc_msgSend_daCalendarItemUniqueIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daCalendarItemUniqueIdentifier");
}

id objc_msgSend_daWasMigrated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daWasMigrated");
}

id objc_msgSend_daemonUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonUserDefaults");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataTaskWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithURL:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "database");
}

id objc_msgSend_databaseBackupDirectoryURLWithContainerURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseBackupDirectoryURLWithContainerURL:");
}

id objc_msgSend_databaseDirectoryURLWithContainerURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseDirectoryURLWithContainerURL:");
}

id objc_msgSend_databaseScope(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseScope");
}

id objc_msgSend_databaseScopeStringsNeedingRetryFetchChangesByAccountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseScopeStringsNeedingRetryFetchChangesByAccountID");
}

id objc_msgSend_databaseStagedMigrationDirectoryURLWithContainerURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseStagedMigrationDirectoryURLWithContainerURL:");
}

id objc_msgSend_databaseWithDatabaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "databaseWithDatabaseScope:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingUnit:value:toDate:options:");
}

id objc_msgSend_dateFormatFromTemplate_options_locale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFormatFromTemplate:options:locale:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_debugForceSupportBackgroundScheduling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugForceSupportBackgroundScheduling");
}

id objc_msgSend_debugForceSupportCloudKitSchemaCatchUpSyncBackgroundScheduling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugForceSupportCloudKitSchemaCatchUpSyncBackgroundScheduling");
}

id objc_msgSend_debugSimulateSqliteFull(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugSimulateSqliteFull");
}

id objc_msgSend_debugSimulatedCKErrorCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugSimulatedCKErrorCode");
}

id objc_msgSend_debugSyncDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugSyncDisabled");
}

id objc_msgSend_debug_replaceWithSimulatedCKErrorIfSetWithOriginalError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debug_replaceWithSimulatedCKErrorIfSetWithOriginalError:");
}

id objc_msgSend_decodeExternalIdentifierForMarkedForDeletionObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeExternalIdentifierForMarkedForDeletionObject:");
}

id objc_msgSend_decrementFailureCounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decrementFailureCounts");
}

id objc_msgSend_deduplicatedRecordsForCloudObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deduplicatedRecordsForCloudObjects:");
}

id objc_msgSend_defaultApplicationDocumentsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultApplicationDocumentsURL");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultConfigurationURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultConfigurationURL");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultMergePolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultMergePolicy");
}

id objc_msgSend_defaultRelationshipKeyPathsForPrefetching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultRelationshipKeyPathsForPrefetching");
}

id objc_msgSend_defaultReminderDataContainerURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultReminderDataContainerURL");
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSessionConfiguration");
}

id objc_msgSend_defaultTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTimeZone");
}

id objc_msgSend_defaultValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultValue");
}

id objc_msgSend_delay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delay");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_deleteAllChildrenFromLocalDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllChildrenFromLocalDatabase");
}

id objc_msgSend_deleteAllIndicesIfVersionOutdatedWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllIndicesIfVersionOutdatedWithCompletionHandler:");
}

id objc_msgSend_deleteAllIndicesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllIndicesWithCompletionHandler:");
}

id objc_msgSend_deleteAllServerChangeTokens(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllServerChangeTokens");
}

id objc_msgSend_deleteChangeTokensAndReSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteChangeTokensAndReSync");
}

id objc_msgSend_deleteCloudObjectIfFullyPushed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCloudObjectIfFullyPushed:");
}

id objc_msgSend_deleteFromLocalDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteFromLocalDatabase");
}

id objc_msgSend_deleteHistoryBeforeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryBeforeDate:");
}

id objc_msgSend_deleteHistoryBeforeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHistoryBeforeToken:");
}

id objc_msgSend_deleteIndicesForStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteIndicesForStore:");
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObject:");
}

id objc_msgSend_deleteRecordZonesWithZoneIDs_accountID_markZonesAsUserPurged_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordZonesWithZoneIDs:accountID:markZonesAsUserPurged:completionHandler:");
}

id objc_msgSend_deleteRule(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRule");
}

id objc_msgSend_deleteServerChangeTokenForChangedZonesInDatabase_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteServerChangeTokenForChangedZonesInDatabase:accountID:");
}

id objc_msgSend_deleteServerChangeTokenForRecordZoneID_databaseScope_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteServerChangeTokenForRecordZoneID:databaseScope:accountID:");
}

id objc_msgSend_deleteSharesForObjects_accountID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSharesForObjects:accountID:completionHandler:");
}

id objc_msgSend_deleteTemporaryAssetFilesForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteTemporaryAssetFilesForOperation:");
}

id objc_msgSend_deleteTemporaryFilesForAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteTemporaryFilesForAsset:");
}

id objc_msgSend_deletedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedObjects");
}

id objc_msgSend_deletedRecordsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedRecordsCount");
}

id objc_msgSend_dependencies(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dependencies");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_destinationEntity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationEntity");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfURL:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didAcceptShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAcceptShare:");
}

id objc_msgSend_didAccessValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAccessValueForKey:");
}

id objc_msgSend_didAddObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAddObservers");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didChangeValueForKey_Swfit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey_Swfit:");
}

id objc_msgSend_didCheckForLongLivedOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCheckForLongLivedOperations");
}

id objc_msgSend_didChooseToMigrate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseToMigrate");
}

id objc_msgSend_didCompleteCloudSchemaCatchUpSyncWithContextMap_error_syncTypeLabel_debugLogLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteCloudSchemaCatchUpSyncWithContextMap:error:syncTypeLabel:debugLogLabel:");
}

id objc_msgSend_didCompleteInitializeAllAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteInitializeAllAccounts:");
}

id objc_msgSend_didFailPushingExceededStorageQuotaForContext_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFailPushingExceededStorageQuotaForContext:accountID:");
}

id objc_msgSend_didFetchShare_accountID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchShare:accountID:context:");
}

id objc_msgSend_didFinishMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishMigration");
}

id objc_msgSend_didHandleMarkingExtraneousAlarmDuringWillSave(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didHandleMarkingExtraneousAlarmDuringWillSave");
}

id objc_msgSend_didMarkForDeletingOnNextLanuchWithPersistentStore_deletedObjectIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMarkForDeletingOnNextLanuchWithPersistentStore:deletedObjectIDs:");
}

id objc_msgSend_didNotFinishMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didNotFinishMigration");
}

id objc_msgSend_didRemoveInvalidPersistentStoreOnInitWithStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRemoveInvalidPersistentStoreOnInitWithStore:");
}

id objc_msgSend_didRemoveStoreFilesOnInitWithURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRemoveStoreFilesOnInitWithURLs:");
}

id objc_msgSend_didSave_Swift(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSave_Swift");
}

id objc_msgSend_disableCloudSyncingIfCurrentVersionNotSuppported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableCloudSyncingIfCurrentVersionNotSuppported");
}

id objc_msgSend_dispatchBlocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchBlocks");
}

id objc_msgSend_displayAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayAccount");
}

id objc_msgSend_displayDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDate");
}

id objc_msgSend_displayDateDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDateDate");
}

id objc_msgSend_displayDateIsAllDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDateIsAllDay");
}

id objc_msgSend_displayDateTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDateTimeZone");
}

id objc_msgSend_displayDateUtils(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDateUtils");
}

id objc_msgSend_displayDateWithDueDateComponents_alarms_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDateWithDueDateComponents:alarms:");
}

id objc_msgSend_displayNameFromListName_isPlaceholder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayNameFromListName:isPlaceholder:");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distantFuture");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distantPast");
}

id objc_msgSend_documentsURLForAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "documentsURLForAccountIdentifier:");
}

id objc_msgSend_documentsURLProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "documentsURLProvider");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_downloadConfigurationFromRemoteURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadConfigurationFromRemoteURL:completionHandler:");
}

id objc_msgSend_dueDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dueDate");
}

id objc_msgSend_dueDateComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dueDateComponents");
}

id objc_msgSend_dueDateComponentsWithDueDate_isAllDay_timeZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dueDateComponentsWithDueDate:isAllDay:timeZoneName:");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_earlyStoppedStoreIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlyStoppedStoreIdentifiers");
}

id objc_msgSend_effectiveMinimumSupportedVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveMinimumSupportedVersion");
}

id objc_msgSend_enableAutoGenerateCKPersonIDSalt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableAutoGenerateCKPersonIDSalt");
}

id objc_msgSend_enableCoreSpotlightIndexing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableCoreSpotlightIndexing");
}

id objc_msgSend_enableHashingUserIdentifiablesWithPersonIDSalt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableHashingUserIdentifiablesWithPersonIDSalt");
}

id objc_msgSend_encodeExternalIdentifierForMarkedForDeletionObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeExternalIdentifierForMarkedForDeletionObject:");
}

id objc_msgSend_encodeSystemFieldsWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeSystemFieldsWithCoder:");
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedData");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDate");
}

id objc_msgSend_entities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entities");
}

id objc_msgSend_entitiesByName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entitiesByName");
}

id objc_msgSend_entity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entity");
}

id objc_msgSend_entityDescriptionWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityDescriptionWithContext:");
}

id objc_msgSend_entityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityForName:inManagedObjectContext:");
}

id objc_msgSend_entityName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityName");
}

id objc_msgSend_entityNamesToIncludeFromTrackingWithOptionProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityNamesToIncludeFromTrackingWithOptionProvider:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "error");
}

id objc_msgSend_errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary");
}

id objc_msgSend_errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue:");
}

id objc_msgSend_errorChangeSetWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorChangeSetWithError:");
}

id objc_msgSend_errorCodesToIgnoreForBackoffTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorCodesToIgnoreForBackoffTimer");
}

id objc_msgSend_errorForDisabledCloudSyncing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorForDisabledCloudSyncing");
}

id objc_msgSend_errorFromErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorFromErrors:");
}

id objc_msgSend_errorFromOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorFromOperations:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errorWithREMChangeErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithREMChangeErrorCode:");
}

id objc_msgSend_errorWithREMChangeErrorCode_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithREMChangeErrorCode:underlyingError:");
}

id objc_msgSend_errorsFromError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorsFromError:");
}

id objc_msgSend_event(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "event");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_executeRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRequest:error:");
}

id objc_msgSend_executeRequest_withContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRequest:withContext:error:");
}

id objc_msgSend_existingCloudObjectForRecord_accountID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingCloudObjectForRecord:accountID:context:");
}

id objc_msgSend_existingCloudObjectForRecordID_accountID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingCloudObjectForRecordID:accountID:context:");
}

id objc_msgSend_existingCloudObjectForRecordID_recordType_accountID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingCloudObjectForRecordID:recordType:accountID:context:");
}

id objc_msgSend_existingFileAttachmentsMatchingSHA512Sums_accountID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingFileAttachmentsMatchingSHA512Sums:accountID:error:");
}

id objc_msgSend_existingLocalObjectToMergeWithPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingLocalObjectToMergeWithPredicate:");
}

id objc_msgSend_existingObjectWithID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingObjectWithID:error:");
}

id objc_msgSend_existingOperationToDeleteRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingOperationToDeleteRecordID:");
}

id objc_msgSend_existingOperationToFetchRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingOperationToFetchRecordID:");
}

id objc_msgSend_existingOperationToSaveRecordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingOperationToSaveRecordID:");
}

id objc_msgSend_existingShareForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingShareForObject:");
}

id objc_msgSend_expanded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expanded");
}

id objc_msgSend_expressionForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressionForKeyPath:");
}

id objc_msgSend_externalIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "externalIdentifier");
}

id objc_msgSend_extractSha512Sum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractSha512Sum:");
}

id objc_msgSend_extraneousAlarmsBackoffThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraneousAlarmsBackoffThrottleInterval");
}

id objc_msgSend_extraneousAlarmsCleanUpTriggerReductionFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraneousAlarmsCleanUpTriggerReductionFactor");
}

id objc_msgSend_extraneousAlarmsCollectorDebounceInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraneousAlarmsCollectorDebounceInterval");
}

id objc_msgSend_extraneousAlarmsCollectorThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraneousAlarmsCollectorThrottleInterval");
}

id objc_msgSend_extraneousAlarmsDeleteCountLimit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraneousAlarmsDeleteCountLimit");
}

id objc_msgSend_extraneousAlarmsDeleteCountThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraneousAlarmsDeleteCountThreshold");
}

id objc_msgSend_extraneousAlarmsThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extraneousAlarmsThrottleInterval");
}

id objc_msgSend_failedToSyncCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedToSyncCount");
}

id objc_msgSend_failedToSyncCountsByCKIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedToSyncCountsByCKIdentifier");
}

id objc_msgSend_failureCountQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failureCountQueue");
}

id objc_msgSend_faultAndPromptToFileRadarWithICTap2RadarType_logMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "faultAndPromptToFileRadarWithICTap2RadarType:logMessage:");
}

id objc_msgSend_faultAndPromptToFileRadarWithICTap2RadarType_title_description_logMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "faultAndPromptToFileRadarWithICTap2RadarType:title:description:logMessage:");
}

id objc_msgSend_fetchAllLongLivedOperationIDsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllLongLivedOperationIDsWithCompletionHandler:");
}

id objc_msgSend_fetchAllSubscriptionsOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllSubscriptionsOperation");
}

id objc_msgSend_fetchAndCompletionOperationWithDeleteShareObjects_accountID_dependencyOperations_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAndCompletionOperationWithDeleteShareObjects:accountID:dependencyOperations:completionHandler:");
}

id objc_msgSend_fetchBatchSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBatchSize");
}

id objc_msgSend_fetchCacheCountLimit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCacheCountLimit");
}

id objc_msgSend_fetchCurrentUserRecordOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCurrentUserRecordOperation");
}

id objc_msgSend_fetchDatabaseChangesForDatabases_reason_cloudSchemaCatchUpSyncContextMap_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDatabaseChangesForDatabases:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:");
}

id objc_msgSend_fetchDatabaseChangesOperation_changeTokenUpdated_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDatabaseChangesOperation:changeTokenUpdated:accountID:");
}

id objc_msgSend_fetchDatabaseChangesOperation_finishedWithServerChangeToken_accountID_error_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDatabaseChangesOperation:finishedWithServerChangeToken:accountID:error:completionHandler:");
}

id objc_msgSend_fetchDatabaseChangesOperation_recordZoneWithIDChanged_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDatabaseChangesOperation:recordZoneWithIDChanged:accountID:");
}

id objc_msgSend_fetchDatabaseChangesOperation_recordZoneWithIDWasDeleted_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDatabaseChangesOperation:recordZoneWithIDWasDeleted:accountID:");
}

id objc_msgSend_fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount");
}

id objc_msgSend_fetchDatabaseChangesWithReason_cloudSchemaCatchUpSyncContextMap_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDatabaseChangesWithReason:cloudSchemaCatchUpSyncContextMap:completionHandler:");
}

id objc_msgSend_fetchHistoryAfterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHistoryAfterDate:");
}

id objc_msgSend_fetchHistoryAfterToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHistoryAfterToken:");
}

id objc_msgSend_fetchLongLivedOperationWithID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLongLivedOperationWithID:completionHandler:");
}

id objc_msgSend_fetchOperation_didCompleteWithRecordsByRecordID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOperation:didCompleteWithRecordsByRecordID:error:");
}

id objc_msgSend_fetchOperation_progressChangedWithRecordID_progress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOperation:progressChangedWithRecordID:progress:");
}

id objc_msgSend_fetchOperation_recordWasFetchedWithRecordID_record_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOperation:recordWasFetchedWithRecordID:record:error:");
}

id objc_msgSend_fetchRecordIDs_accountID_operationGroupName_runExclusively_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordIDs:accountID:operationGroupName:runExclusively:completionHandler:");
}

id objc_msgSend_fetchRecordZoneChangesForAccountZoneIDs_reason_cloudSchemaCatchUpSyncContextMap_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordZoneChangesForAccountZoneIDs:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:");
}

id objc_msgSend_fetchRecordZoneChangesForZoneIDs_accountID_reason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordZoneChangesForZoneIDs:accountID:reason:completionHandler:");
}

id objc_msgSend_fetchRecordZoneChangesOperation_completedFetchForZoneID_serverChangeToken_batchFetchHelper_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordZoneChangesOperation:completedFetchForZoneID:serverChangeToken:batchFetchHelper:error:");
}

id objc_msgSend_fetchRecordZoneChangesOperation_recordWasChangedWithRecordID_record_error_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:");
}

id objc_msgSend_fetchRecordZoneChangesOperation_recordWasDeletedWithRecordID_recordType_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID:recordType:context:");
}

id objc_msgSend_fetchRecordZoneChangesOperation_zoneID_accountID_changeTokenUpdated_batchFetchHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordZoneChangesOperation:zoneID:accountID:changeTokenUpdated:batchFetchHelper:");
}

id objc_msgSend_fetchRecordZoneChangesOperationDidComplete_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordZoneChangesOperationDidComplete:error:");
}

id objc_msgSend_fetchRecordZoneChangesWithReason_cloudSchemaCatchUpSyncContextMap_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordZoneChangesWithReason:cloudSchemaCatchUpSyncContextMap:completionHandler:");
}

id objc_msgSend_fetchRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequest");
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestWithEntityName:");
}

id objc_msgSend_fetchUserRecordIDWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserRecordIDWithCompletionHandler:");
}

id objc_msgSend_fetchUserRecordOperationWithAccountID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserRecordOperationWithAccountID:completionHandler:");
}

id objc_msgSend_fetchUserRecordOperationWithContainer_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserRecordOperationWithContainer:completionHandler:");
}

id objc_msgSend_fetchUserRecordWithContainer_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserRecordWithContainer:completionHandler:");
}

id objc_msgSend_fetchedRecordCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchedRecordCount");
}

id objc_msgSend_fileAttachmentIdentifiersToPurgeByAccountIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileAttachmentIdentifiersToPurgeByAccountIdentifier");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileIOWorkerQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileIOWorkerQueue");
}

id objc_msgSend_fileName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileName");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSystemRepresentation");
}

id objc_msgSend_fileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURL");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_filterNonUploadableChangedManagedObjectIDs_cloudKitStoreIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterNonUploadableChangedManagedObjectIDs:cloudKitStoreIdentifiers:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_finishEncoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishEncoding");
}

id objc_msgSend_finishOperationsForRecordID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishOperationsForRecordID:completionHandler:");
}

id objc_msgSend_finishWithSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithSuccess:");
}

id objc_msgSend_fire_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fire:completion:");
}

id objc_msgSend_fireBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireBlock");
}

id objc_msgSend_fireDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireDate");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_fixBrokenReferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixBrokenReferences");
}

id objc_msgSend_fixValueBeforeMarkingForDeletionForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixValueBeforeMarkingForDeletionForKey:");
}

id objc_msgSend_fixValueBeforeUnmarkingForDeletionForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixValueBeforeUnmarkingForDeletionForKey:");
}

id objc_msgSend_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:");
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flush");
}

id objc_msgSend_flushOnCurrentQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushOnCurrentQueue:");
}

id objc_msgSend_generateAndSavePersonIDSaltIfNeededWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateAndSavePersonIDSaltIfNeededWithContext:");
}

id objc_msgSend_getCharacters_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCharacters:range:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getTokenForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTokenForKey:");
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "group");
}

id objc_msgSend_hack_didHandleShouldSyncUpDelete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hack_didHandleShouldSyncUpDelete");
}

id objc_msgSend_hack_resolutionTokenMapCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hack_resolutionTokenMapCopy");
}

id objc_msgSend_hack_willSaveHandled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hack_willSaveHandled");
}

id objc_msgSend_handleDatabaseNotification_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDatabaseNotification:completionHandler:");
}

id objc_msgSend_handleGenericPartialFailuresForError_operation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleGenericPartialFailuresForError:operation:");
}

id objc_msgSend_handleNotification_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotification:completionHandler:");
}

id objc_msgSend_hasAllMandatoryFields(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAllMandatoryFields");
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChanges");
}

id objc_msgSend_hasOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOptions:");
}

id objc_msgSend_hasPassedBuddy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPassedBuddy");
}

id objc_msgSend_hasPassedBuddyAndSystemDataMigrator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPassedBuddyAndSystemDataMigrator");
}

id objc_msgSend_hasPendingListNameRelatedChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPendingListNameRelatedChanges");
}

id objc_msgSend_hasPendingOperations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPendingOperations");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasRetryTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRetryTimer");
}

id objc_msgSend_hasSuccessfullyPushedLatestVersionToCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuccessfullyPushedLatestVersionToCloud");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hashTableWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashTableWithOptions:");
}

id objc_msgSend_haveZoneIDsInAccountZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "haveZoneIDsInAccountZoneIDs:");
}

id objc_msgSend_hierarchicalRootRecordID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hierarchicalRootRecordID");
}

id objc_msgSend_housekeepingActivityMinimumDelay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "housekeepingActivityMinimumDelay");
}

id objc_msgSend_iCloudIsOffTimeIntervalSinceLastPrompt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iCloudIsOffTimeIntervalSinceLastPrompt");
}

id objc_msgSend_icUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icUserDefaults");
}

id objc_msgSend_ic_addZoneID_forAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_addZoneID:forAccountID:");
}

id objc_msgSend_ic_arrayByGroupingIntoArraysWithMaxCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_arrayByGroupingIntoArraysWithMaxCount:");
}

id objc_msgSend_ic_containsObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_containsObjectPassingTest:");
}

id objc_msgSend_ic_defaultDatabaseScopeForOwnerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_defaultDatabaseScopeForOwnerName:");
}

id objc_msgSend_ic_intersectsRecordZoneIDSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_intersectsRecordZoneIDSet:");
}

id objc_msgSend_ic_isEarlierThanDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isEarlierThanDate:");
}

id objc_msgSend_ic_isLaterThanDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isLaterThanDate:");
}

id objc_msgSend_ic_isOwnedByCurrentUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isOwnedByCurrentUser");
}

id objc_msgSend_ic_isToday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isToday");
}

id objc_msgSend_ic_isYesterday(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_isYesterday");
}

id objc_msgSend_ic_localDateWithSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_localDateWithSeconds");
}

id objc_msgSend_ic_loggingDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_loggingDescription");
}

id objc_msgSend_ic_loggingDescriptionFromLoggable_isPretty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_loggingDescriptionFromLoggable:isPretty:");
}

id objc_msgSend_ic_loggingDescriptionIncludingBrackets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_loggingDescriptionIncludingBrackets:");
}

id objc_msgSend_ic_loggingIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_loggingIdentifier");
}

id objc_msgSend_ic_loggingValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_loggingValues");
}

id objc_msgSend_ic_map_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_map:");
}

id objc_msgSend_ic_objectIDsFromObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectIDsFromObjects:");
}

id objc_msgSend_ic_objectIDsMatchingPredicate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectIDsMatchingPredicate:context:");
}

id objc_msgSend_ic_objectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectPassingTest:");
}

id objc_msgSend_ic_objectsFromObjectIDs_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectsFromObjectIDs:context:");
}

id objc_msgSend_ic_objectsFromObjectIDs_propertiesToFetch_relationshipKeyPathsForPrefetching_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectsFromObjectIDs:propertiesToFetch:relationshipKeyPathsForPrefetching:context:");
}

id objc_msgSend_ic_objectsMatchingPredicate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectsMatchingPredicate:context:");
}

id objc_msgSend_ic_objectsMatchingPredicate_sortDescriptors_propertiesToFetch_relationshipKeyPathsForPrefetching_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectsMatchingPredicate:sortDescriptors:propertiesToFetch:relationshipKeyPathsForPrefetching:context:");
}

id objc_msgSend_ic_objectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_objectsPassingTest:");
}

id objc_msgSend_ic_obtainPermanentObjectIDIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_obtainPermanentObjectIDIfNecessary");
}

id objc_msgSend_ic_permanentObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_permanentObjectID");
}

id objc_msgSend_ic_prettyDescriptionWithTabLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_prettyDescriptionWithTabLevel:");
}

id objc_msgSend_ic_removeAllCKCompletionBlocksButNotTheNSOperationCompletionBlock_50200031(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_removeAllCKCompletionBlocksButNotTheNSOperationCompletionBlock_50200031");
}

id objc_msgSend_ic_removeRecordsWithSameCKRecordIDInRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_removeRecordsWithSameCKRecordIDInRecords:");
}

id objc_msgSend_ic_removeZoneID_forAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_removeZoneID:forAccountID:");
}

id objc_msgSend_ic_resultsMatchingPredicate_sortDescriptors_resultType_fetchBatchSize_propertiesToFetch_relationshipKeyPathsForPrefetching_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_resultsMatchingPredicate:sortDescriptors:resultType:fetchBatchSize:propertiesToFetch:relationshipKeyPathsForPrefetching:context:");
}

id objc_msgSend_ic_save(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_save");
}

id objc_msgSend_ic_saveWithLogDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_saveWithLogDescription:");
}

id objc_msgSend_ic_shortLoggingDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_shortLoggingDescription");
}

id objc_msgSend_ic_shortLoggingOperationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_shortLoggingOperationName");
}

id objc_msgSend_ic_shouldDependOnCKFetchRecordZoneChangesOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ic_shouldDependOnCKFetchRecordZoneChangesOperation:");
}

id objc_msgSend_icsDisplayOrder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icsDisplayOrder");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_imageDeduplicationApproximatePerRunDeleteLimit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageDeduplicationApproximatePerRunDeleteLimit");
}

id objc_msgSend_imageDeduplicationBackoffThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageDeduplicationBackoffThrottleInterval");
}

id objc_msgSend_imageDeduplicationDefaultThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageDeduplicationDefaultThrottleInterval");
}

id objc_msgSend_imageDeduplicationRateReduceFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageDeduplicationRateReduceFactor");
}

id objc_msgSend_inCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inCloud");
}

id objc_msgSend_inMemoryPrimaryActiveCKAccountREMObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inMemoryPrimaryActiveCKAccountREMObjectID");
}

id objc_msgSend_inactive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inactive");
}

id objc_msgSend_incrementBatchCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementBatchCount");
}

id objc_msgSend_incrementFailureCounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementFailureCounts");
}

id objc_msgSend_incrementOrClearRetryCountForOperationType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementOrClearRetryCountForOperationType:error:");
}

id objc_msgSend_incrementRetryCountForOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementRetryCountForOperationType:");
}

id objc_msgSend_incrementSpotlightIndexCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementSpotlightIndexCount");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexesOfObjectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexesOfObjectsPassingTest:");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initForStoreWithDescription_coordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForStoreWithDescription:coordinator:");
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRequiringSecureCoding:");
}

id objc_msgSend_initWithAccountID_objectID_property_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountID:objectID:property:");
}

id objc_msgSend_initWithAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountIdentifier:");
}

id objc_msgSend_initWithAccountIdentifier_syncReason_schedulingStateStorage_managedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountIdentifier:syncReason:schedulingStateStorage:managedObjectContext:");
}

id objc_msgSend_initWithAccountObjectID_accountType_initialSaltValue_callbackQueue_successHandler_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountObjectID:accountType:initialSaltValue:callbackQueue:successHandler:errorHandler:");
}

id objc_msgSend_initWithAccountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountType:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBatchInterval_numberOfBatches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBatchInterval:numberOfBatches:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithChangeTransactions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChangeTransactions:");
}

id objc_msgSend_initWithCkIdentifier_accountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCkIdentifier:accountIdentifier:");
}

id objc_msgSend_initWithCloudSchemaCatchUpSyncSchedulingStateStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudSchemaCatchUpSyncSchedulingStateStorage:");
}

id objc_msgSend_initWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoder:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDatabaseScope_subscriptionOwnerUserRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabaseScope:subscriptionOwnerUserRecordName:");
}

id objc_msgSend_initWithDate_allDay_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDate:allDay:timeZone:");
}

id objc_msgSend_initWithDebouncingInterval_queue_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDebouncingInterval:queue:handler:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDocumentsURLProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDocumentsURLProvider:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntity:");
}

id objc_msgSend_initWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntityName:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEvent:");
}

id objc_msgSend_initWithFetchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFetchRequest:");
}

id objc_msgSend_initWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithHandler_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHandler:queue:");
}

id objc_msgSend_initWithIsolated_coordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIsolated:coordinator:");
}

id objc_msgSend_initWithManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManagedObjectContext:");
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManagedObjectModel:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithPersistentHistoryChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentHistoryChange:");
}

id objc_msgSend_initWithPersistentHistoryToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentHistoryToken:");
}

id objc_msgSend_initWithPersistentHistoryTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentHistoryTokens:");
}

id objc_msgSend_initWithPersistentHistoryTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentHistoryTransaction:");
}

id objc_msgSend_initWithPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPreviousServerChangeToken:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_managedObjectContext_batchSize_cacheCountLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:managedObjectContext:batchSize:cacheCountLimit:");
}

id objc_msgSend_initWithRecordID_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordID:action:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRecordZoneIDs_configurationsByRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneIDs:configurationsByRecordZoneID:");
}

id objc_msgSend_initWithRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordsToSave:recordIDsToDelete:");
}

id objc_msgSend_initWithReplicaIDSource_orderedSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReplicaIDSource:orderedSet:");
}

id objc_msgSend_initWithReplicaIDSource_serializedData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReplicaIDSource:serializedData:error:");
}

id objc_msgSend_initWithRootRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootRecord:");
}

id objc_msgSend_initWithRootRecord_shareID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootRecord:shareID:");
}

id objc_msgSend_initWithShareMetadatas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareMetadatas:");
}

id objc_msgSend_initWithShouldValidateMoveAcrossSharedList_saveShouldContinueIfCustomValidationFailed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShouldValidateMoveAcrossSharedList:saveShouldContinueIfCustomValidationFailed:");
}

id objc_msgSend_initWithStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStorage:");
}

id objc_msgSend_initWithStoreController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreController:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithStructuredLocation_proximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStructuredLocation:proximity:");
}

id objc_msgSend_initWithSubscriptionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscriptionID:");
}

id objc_msgSend_initWithSubscriptionsToSave_subscriptionIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscriptionsToSave:subscriptionIDsToDelete:");
}

id objc_msgSend_initWithSyncReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSyncReason:");
}

id objc_msgSend_initWithTarget_selector_delay_waitToFireUntilRequestsStop_callOnMainThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:delay:waitToFireUntilRequestsStop:callOnMainThread:");
}

id objc_msgSend_initWithThrottlingLevels_resetInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithThrottlingLevels:resetInterval:");
}

id objc_msgSend_initWithTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:");
}

id objc_msgSend_initWithTraversalOrder_batchSize_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTraversalOrder:batchSize:delegate:");
}

id objc_msgSend_initWithTrigger_objectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrigger:objectID:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:");
}

id objc_msgSend_initWithZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:");
}

id objc_msgSend_initWithZoneName_ownerName_databaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:databaseScope:");
}

id objc_msgSend_insertCloudStateIfNeededOnAwakeFromFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertCloudStateIfNeededOnAwakeFromFetch");
}

id objc_msgSend_insertCloudStateOnAwakeFromInsert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertCloudStateOnAwakeFromInsert");
}

id objc_msgSend_insertNewObjectForEntityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertNewObjectForEntityForName:inManagedObjectContext:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertedObjects");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_internalContextWithBatchFetchHelper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalContextWithBatchFetchHelper");
}

id objc_msgSend_internalErrorWithDebugDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalErrorWithDebugDescription:");
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectSet:");
}

id objc_msgSend_intersectsSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectsSet:");
}

id objc_msgSend_invalidParameterErrorWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidParameterErrorWithDescription:");
}

id objc_msgSend_invalidStoreBackupURLWithFileName_withContainerURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidStoreBackupURLWithFileName:withContainerURL:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_isAbstract(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAbstract");
}

id objc_msgSend_isActivated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActivated");
}

id objc_msgSend_isAllDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAllDay");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isCloudKit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudKit");
}

id objc_msgSend_isCloudKitAccountAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudKitAccountAvailable");
}

id objc_msgSend_isCloudKitAccountAvailableRequiringActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudKitAccountAvailableRequiringActive:");
}

id objc_msgSend_isCloudSchemaCatchUpSyncNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudSchemaCatchUpSyncNeeded");
}

id objc_msgSend_isCloudSchemaCatchUpSyncNeededForAccountIdentifier_context_outPersistenceCloudSchemaVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudSchemaCatchUpSyncNeededForAccountIdentifier:context:outPersistenceCloudSchemaVersion:");
}

id objc_msgSend_isCloudSchemaCatchUpSyncNeededForExistingCloudObject_persistenceCloudSchemaVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudSchemaCatchUpSyncNeededForExistingCloudObject:persistenceCloudSchemaVersion:");
}

id objc_msgSend_isConcealed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConcealed");
}

id objc_msgSend_isConfigurationValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConfigurationValid:");
}

id objc_msgSend_isConnectedToAccountObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnectedToAccountObject:");
}

id objc_msgSend_isDataSeparationEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDataSeparationEnabled");
}

id objc_msgSend_isDatabaseMigrated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDatabaseMigrated");
}

id objc_msgSend_isDeletable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeletable");
}

id objc_msgSend_isDeleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeleted");
}

id objc_msgSend_isDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDisabled");
}

id objc_msgSend_isDisabledInternal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDisabledInternal");
}

id objc_msgSend_isDummyStoreURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDummyStoreURL:");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEnabledForDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabledForDataclass:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExecuting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExecuting");
}

id objc_msgSend_isFetchingEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFetchingEnabled");
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFinished");
}

id objc_msgSend_isInCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInCloud");
}

id objc_msgSend_isInForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInForeground");
}

id objc_msgSend_isInICloudAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInICloudAccount");
}

id objc_msgSend_isInactive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInactive");
}

id objc_msgSend_isInitializing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInitializing");
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInternalInstall");
}

id objc_msgSend_isInternetReachable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInternetReachable");
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMainThread");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMergeableWithLocalObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMergeableWithLocalObject");
}

id objc_msgSend_isMissingCKIdentifier_accountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMissingCKIdentifier:accountIdentifier:");
}

id objc_msgSend_isNonPrimaryCloudKit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonPrimaryCloudKit");
}

id objc_msgSend_isNonUploadingTransactionAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonUploadingTransactionAuthor:");
}

id objc_msgSend_isObsolete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isObsolete");
}

id objc_msgSend_isOperatingSystemAtLeastVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOperatingSystemAtLeastVersion:");
}

id objc_msgSend_isOptional(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOptional");
}

id objc_msgSend_isOwnedByCurrentUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOwnedByCurrentUser");
}

id objc_msgSend_isPPTStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPPTStore");
}

id objc_msgSend_isPlaceholder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPlaceholder");
}

id objc_msgSend_isPrimaryCloudKit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPrimaryCloudKit");
}

id objc_msgSend_isProcessObjectsForContextDidSaveOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isProcessObjectsForContextDidSaveOperation");
}

id objc_msgSend_isPushingSameOrLaterThanVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPushingSameOrLaterThanVersion:");
}

id objc_msgSend_isReadyToSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReadyToSync");
}

id objc_msgSend_isReadyToSyncWithActiveAccountAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReadyToSyncWithActiveAccountAvailable:");
}

id objc_msgSend_isSandboxEnvironment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSandboxEnvironment");
}

id objc_msgSend_isScheduledToFire(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isScheduledToFire");
}

id objc_msgSend_isShared(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShared");
}

id objc_msgSend_isSharedReadOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedReadOnly");
}

id objc_msgSend_isSharedRootObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedRootObject");
}

id objc_msgSend_isSharedViaICloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedViaICloud");
}

id objc_msgSend_isSharedWithShareeCount_sharingStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSharedWithShareeCount:sharingStatus:");
}

id objc_msgSend_isShareeActivelyParticipatingWithSharee_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShareeActivelyParticipatingWithSharee:");
}

id objc_msgSend_isSubclassOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubclassOfClass:");
}

id objc_msgSend_isSubsetOfSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubsetOfSet:");
}

id objc_msgSend_isSystemAvailableForSyncing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSystemAvailableForSyncing");
}

id objc_msgSend_isTemporaryID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTemporaryID");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValid");
}

id objc_msgSend_isZoneConfigurations_subsetOfZoneConfigurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isZoneConfigurations:subsetOfZoneConfigurations:");
}

id objc_msgSend_isolated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isolated");
}

id objc_msgSend_isolatedReminderDataContainerURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isolatedReminderDataContainerURL");
}

id objc_msgSend_iterativelyCancelDependentOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterativelyCancelDependentOperations:");
}

id objc_msgSend_jsonDataFromResolutionTokenMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsonDataFromResolutionTokenMap:");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEnumerator");
}

id objc_msgSend_keyPathsForValuesAffectingEffectiveMinimumSupportedVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyPathsForValuesAffectingEffectiveMinimumSupportedVersion");
}

id objc_msgSend_l_accountExternalIdentifiersToObjectIDsMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_accountExternalIdentifiersToObjectIDsMap");
}

id objc_msgSend_l_accountStorageCacheByObjectIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_accountStorageCacheByObjectIDs");
}

id objc_msgSend_l_accountStoragesForAccountObjectIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_accountStoragesForAccountObjectIDs:");
}

id objc_msgSend_l_accountStoreMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_accountStoreMap");
}

id objc_msgSend_l_activateCoreSpotlightDelegates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_activateCoreSpotlightDelegates");
}

id objc_msgSend_l_addValidatedStoresToAccountStoreMapWithStores_shouldDeleteInvalidStoresImmediately_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_addValidatedStoresToAccountStoreMapWithStores:shouldDeleteInvalidStoresImmediately:");
}

id objc_msgSend_l_allGenericAccountsObjectIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_allGenericAccountsObjectIDs");
}

id objc_msgSend_l_createAccountStoresWithIdentifiers_didAddNewStores_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_createAccountStoresWithIdentifiers:didAddNewStores:error:");
}

id objc_msgSend_l_createOrLoadAccountStoresWithURLs_persistentStoreDescriptionOptionsOverride_isCreatingStores_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_createOrLoadAccountStoresWithURLs:persistentStoreDescriptionOptionsOverride:isCreatingStores:error:");
}

id objc_msgSend_l_discoverAccountStoreURLsFromDatabaseDirectoryURL_deletingFilesMarkedDeleted_storesDiscoveryStatesRef_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_discoverAccountStoreURLsFromDatabaseDirectoryURL:deletingFilesMarkedDeleted:storesDiscoveryStatesRef:error:");
}

id objc_msgSend_l_discoverAccountStoreURLsFromReminderDataContainerURLs_deletingFilesMarkedDeleted_storesDiscoveryStatesRef_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_discoverAccountStoreURLsFromReminderDataContainerURLs:deletingFilesMarkedDeleted:storesDiscoveryStatesRef:error:");
}

id objc_msgSend_l_invalidateAccountStorageCaches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_invalidateAccountStorageCaches:");
}

id objc_msgSend_l_loadAccountStoresFromDiskAndValidateInBatchesWithStoreURLs_shouldDeleteInvalidStoresImmediately_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_loadAccountStoresFromDiskAndValidateInBatchesWithStoreURLs:shouldDeleteInvalidStoresImmediately:error:");
}

id objc_msgSend_l_loadAccountStoresFromDiskDeletingFilesMarkedDeleted_shouldDeleteInvalidStoresImmediately_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_loadAccountStoresFromDiskDeletingFilesMarkedDeleted:shouldDeleteInvalidStoresImmediately:error:");
}

id objc_msgSend_l_loadBatchOfAccountStoresFromDiskAndValidateWithStoreURLs_processedStoreIdentifiers_shouldDeleteInvalidStoresImmediately_connectionPoolMaxSize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_loadBatchOfAccountStoresFromDiskAndValidateWithStoreURLs:processedStoreIdentifiers:shouldDeleteInvalidStoresImmediately:connectionPoolMaxSize:error:");
}

id objc_msgSend_l_loadDummyStoreIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_loadDummyStoreIfNeeded");
}

id objc_msgSend_l_loadPPTStoreStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_loadPPTStoreStatus");
}

id objc_msgSend_l_markAccountStoreDeletedAndDeleteData_deletedObjectIDs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_markAccountStoreDeletedAndDeleteData:deletedObjectIDs:error:");
}

id objc_msgSend_l_performManualStoreMigrations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_performManualStoreMigrations:");
}

id objc_msgSend_l_primaryActiveCloudKitAccountREMObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_primaryActiveCloudKitAccountREMObjectID");
}

id objc_msgSend_l_removeAccountStoresWithIdentifiers_deletedObjectIDs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_removeAccountStoresWithIdentifiers:deletedObjectIDs:error:");
}

id objc_msgSend_l_removeFromPersistentStoreCoordinatorAndDeleteImmediatelyWithStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_removeFromPersistentStoreCoordinatorAndDeleteImmediatelyWithStores:");
}

id objc_msgSend_l_setAccountIdentifier_intoMetadataOfCreatedStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_setAccountIdentifier:intoMetadataOfCreatedStore:error:");
}

id objc_msgSend_l_setAccountStorages_forAccountObjectIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "l_setAccountStorages:forAccountObjectIDs:");
}

id objc_msgSend_languageHypothesisThresholdForAdditionalLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageHypothesisThresholdForAdditionalLanguages");
}

id objc_msgSend_languageHypothesisThresholdForPrimaryLanguage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageHypothesisThresholdForPrimaryLanguage");
}

id objc_msgSend_lastConsumedChangeToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastConsumedChangeToken");
}

id objc_msgSend_lastConsumedChangeTokenData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastConsumedChangeTokenData");
}

id objc_msgSend_lastConsumedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastConsumedDate");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_lastScheduledDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastScheduledDate");
}

id objc_msgSend_lastSyncMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSyncMetrics");
}

id objc_msgSend_lastSyncSinceInternetReachable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSyncSinceInternetReachable");
}

id objc_msgSend_lastTransactionTimestampWithManagedObjectContext_affectedStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastTransactionTimestampWithManagedObjectContext:affectedStores:");
}

id objc_msgSend_latestVersionSyncedToCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestVersionSyncedToCloud");
}

id objc_msgSend_latitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latitude");
}

id objc_msgSend_launchAndSignificantTimeChangePollThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchAndSignificantTimeChangePollThrottleInterval");
}

id objc_msgSend_legacy_applicationDocumentsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legacy_applicationDocumentsURL");
}

id objc_msgSend_legacy_centralizedDataPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legacy_centralizedDataPath");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_list(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "list");
}

id objc_msgSend_loadConfigurationFromURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadConfigurationFromURL:");
}

id objc_msgSend_loadLocalConfigurationFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadLocalConfigurationFile");
}

id objc_msgSend_loadSavedPolicyState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadSavedPolicyState");
}

id objc_msgSend_loadSubscribedSubscriptionIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadSubscribedSubscriptionIDs");
}

id objc_msgSend_loadZoneFetchState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadZoneFetchState");
}

id objc_msgSend_localAccountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localAccountID");
}

id objc_msgSend_localInternalAccountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localInternalAccountID");
}

id objc_msgSend_localVersionDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localVersionDate");
}

id objc_msgSend_localWiFiStatusForFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localWiFiStatusForFlags:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedStringForStatusCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForStatusCode:");
}

id objc_msgSend_loggableDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggableDescription");
}

id objc_msgSend_loggingDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggingDescription");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_longitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longitude");
}

id objc_msgSend_lowLevelMarkForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowLevelMarkForDeletion");
}

id objc_msgSend_lowLevelUnmarkForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowLevelUnmarkForDeletion");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_managedObjectClassName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectClassName");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectContext");
}

id objc_msgSend_managedObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectID");
}

id objc_msgSend_managedObjectIDCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectIDCache");
}

id objc_msgSend_managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion");
}

id objc_msgSend_managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation:");
}

id objc_msgSend_managedObjectModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectModel");
}

id objc_msgSend_manualSortHintClientSideExpiration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manualSortHintClientSideExpiration");
}

id objc_msgSend_manualSortHintLastAccessedUpdatePolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manualSortHintLastAccessedUpdatePolicy");
}

id objc_msgSend_markExtraneousAlarmsForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markExtraneousAlarmsForDeletion");
}

id objc_msgSend_markForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markForDeletion");
}

id objc_msgSend_markObjectDirtyAfterMarkedForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markObjectDirtyAfterMarkedForDeletion");
}

id objc_msgSend_markObjectDirtyAfterUnmarkedForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markObjectDirtyAfterUnmarkedForDeletion");
}

id objc_msgSend_markedForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markedForDeletion");
}

id objc_msgSend_maxAttachmentsPerNote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxAttachmentsPerNote");
}

id objc_msgSend_maxInlineAssetSizeBytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxInlineAssetSizeBytes");
}

id objc_msgSend_maxSubAttachmentsPerAttachment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxSubAttachmentsPerAttachment");
}

id objc_msgSend_maximumAttachmentSizeMB(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumAttachmentSizeMB");
}

id objc_msgSend_mergeChangesFromRemoteContextSave_intoContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeChangesFromRemoteContextSave:intoContexts:");
}

id objc_msgSend_mergeDataFromRecord_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeDataFromRecord:accountID:");
}

id objc_msgSend_mergeLocalObjectsFetchContextAffectingStoreOf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeLocalObjectsFetchContextAffectingStoreOf:");
}

id objc_msgSend_mergeLocalObjectsInitialRetryInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeLocalObjectsInitialRetryInterval");
}

id objc_msgSend_mergeLocalObjectsMaximumRetryCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeLocalObjectsMaximumRetryCount");
}

id objc_msgSend_mergeLocalObjectsRetryStartOverThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeLocalObjectsRetryStartOverThrottleInterval");
}

id objc_msgSend_mergeLocalObjectsWriteContextAffectingStoreOf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeLocalObjectsWriteContextAffectingStoreOf:");
}

id objc_msgSend_mergeMigrationStateFromRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeMigrationStateFromRecord:");
}

id objc_msgSend_mergePolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergePolicy");
}

id objc_msgSend_mergeSystemPropertiesIntoCDObject_fromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeSystemPropertiesIntoCDObject:fromCKRecord:");
}

id objc_msgSend_mergeWithLocalObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeWithLocalObject:");
}

id objc_msgSend_mergedModelFromBundles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergedModelFromBundles:");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}

id objc_msgSend_metadataForPersistentStoreOfType_URL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataForPersistentStoreOfType:URL:options:error:");
}

id objc_msgSend_metadataZoneID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataZoneID");
}

id objc_msgSend_methodForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "methodForSelector:");
}

id objc_msgSend_metrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metrics");
}

id objc_msgSend_migrateCRDTsInAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateCRDTsInAccount:");
}

id objc_msgSend_migrateCRDTsInList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateCRDTsInList:");
}

id objc_msgSend_migrateCRDTsInObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateCRDTsInObject:");
}

id objc_msgSend_migrateStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateStore:");
}

id objc_msgSend_migrateStore_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateStore:metadata:");
}

id objc_msgSend_migrateStoreIfNeeded_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateStoreIfNeeded:metadata:");
}

id objc_msgSend_migrateTokenResolutionMapInObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateTokenResolutionMapInObject:");
}

id objc_msgSend_migratedAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migratedAccount");
}

id objc_msgSend_migratedListsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migratedListsCount");
}

id objc_msgSend_migrationZoneID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationZoneID");
}

id objc_msgSend_minimumClientVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumClientVersion");
}

id objc_msgSend_minimumSearchTermLengthByBaseLanguage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumSearchTermLengthByBaseLanguage");
}

id objc_msgSend_minimumSupportedAppVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumSupportedAppVersion");
}

id objc_msgSend_minimumSupportedVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumSupportedVersion");
}

id objc_msgSend_miniumumAutomaticLanguageConfidenceScoreAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "miniumumAutomaticLanguageConfidenceScoreAllowed");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_missingCKIdentifierAccountPairCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "missingCKIdentifierAccountPairCache");
}

id objc_msgSend_mlModelURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mlModelURL");
}

id objc_msgSend_modelObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelObject");
}

id objc_msgSend_modificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modificationDate");
}

id objc_msgSend_modifiedRecordCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifiedRecordCount");
}

id objc_msgSend_modifyRecordZonesCompletionBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyRecordZonesCompletionBlock");
}

id objc_msgSend_modifyRecordsOperation_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyRecordsOperation:didCompleteWithError:");
}

id objc_msgSend_modifyRecordsOperation_recordWasDeletedWithRecordID_rootRecordIDsByShareID_onProcessingQueue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyRecordsOperation:recordWasDeletedWithRecordID:rootRecordIDsByShareID:onProcessingQueue:error:");
}

id objc_msgSend_modifyRecordsOperation_recordWasSavedWithRecordID_record_context_onProcessingQueue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyRecordsOperation:recordWasSavedWithRecordID:record:context:onProcessingQueue:error:");
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtURL:toURL:error:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_needsToBeDeletedFromCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToBeDeletedFromCloud");
}

id objc_msgSend_needsToBePushedToCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToBePushedToCloud");
}

id objc_msgSend_needsToDeleteShare(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToDeleteShare");
}

id objc_msgSend_needsToFetchAfterServerRecordChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToFetchAfterServerRecordChanged:");
}

id objc_msgSend_needsToFetchUserRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToFetchUserRecord");
}

id objc_msgSend_needsToMergeLocalObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToMergeLocalObjects");
}

id objc_msgSend_needsToProcessAllDirtyObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToProcessAllDirtyObjects");
}

id objc_msgSend_needsToReFetchServerRecordValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToReFetchServerRecordValue:");
}

id objc_msgSend_needsToUpdateCloudContextOnAccountsDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToUpdateCloudContextOnAccountsDidChange");
}

id objc_msgSend_needsToUpdateSubscriptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToUpdateSubscriptions");
}

id objc_msgSend_networkStatusForFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkStatusForFlags:");
}

id objc_msgSend_newBackgroundContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newBackgroundContext");
}

id objc_msgSend_newBackgroundContextWithAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newBackgroundContextWithAuthor:");
}

id objc_msgSend_newBackgroundContextWithAuthor_enableQueryGenerationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newBackgroundContextWithAuthor:enableQueryGenerationToken:");
}

id objc_msgSend_newCloudContainerForAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newCloudContainerForAccountID:");
}

id objc_msgSend_newCloudObjectForRecord_account_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newCloudObjectForRecord:account:context:");
}

id objc_msgSend_newCloudObjectForRecord_accountID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newCloudObjectForRecord:accountID:context:");
}

id objc_msgSend_newObjectWithCKIdentifier_context_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newObjectWithCKIdentifier:context:account:");
}

id objc_msgSend_newOperationToFetchRecordZoneChangesWithZoneConfigurations_database_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newOperationToFetchRecordZoneChangesWithZoneConfigurations:database:reason:");
}

id objc_msgSend_newPlaceholderObjectForRecordID_account_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newPlaceholderObjectForRecordID:account:context:");
}

id objc_msgSend_newPlaceholderObjectForRecordID_account_recordType_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newPlaceholderObjectForRecordID:account:recordType:context:");
}

id objc_msgSend_newShareForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newShareForObject:");
}

id objc_msgSend_newlyCreatedRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newlyCreatedRecord");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextObject");
}

id objc_msgSend_notificationContainsChangeTrackingChangesOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationContainsChangeTrackingChangesOnly:");
}

id objc_msgSend_notificationContainsCloudContextInternalChangesOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationContainsCloudContextInternalChangesOnly:");
}

id objc_msgSend_notificationFromRemoteNotificationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationFromRemoteNotificationDictionary:");
}

id objc_msgSend_notificationID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationID");
}

id objc_msgSend_notificationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationType");
}

id objc_msgSend_notificationUserInfoAccountObjectIDKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationUserInfoAccountObjectIDKey");
}

id objc_msgSend_notificationUserInfoAccountTypeKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationUserInfoAccountTypeKey");
}

id objc_msgSend_notificationUserInfoPropertyNameKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationUserInfoPropertyNameKey");
}

id objc_msgSend_notificationUserInfoPropertyValueKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationUserInfoPropertyValueKey");
}

id objc_msgSend_notifyDidMarkExtraneousAlarmsPendingToSyncUpDelete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDidMarkExtraneousAlarmsPendingToSyncUpDelete");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "now");
}

id objc_msgSend_numberOfBatches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfBatches");
}

id objc_msgSend_numberOfPushAttemptsToWaitByCKIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfPushAttemptsToWaitByCKIdentifier");
}

id objc_msgSend_numberOfPushAttemptsToWaitCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfPushAttemptsToWaitCount");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objc_newObjectFromJSONString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objc_newObjectFromJSONString:");
}

id objc_msgSend_objc_toJSONString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objc_toJSONString");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectCkZoneOwnerNameFromCKRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectCkZoneOwnerNameFromCKRecordZoneID:");
}

id objc_msgSend_objectEffectiveVersionValidationFlushBatchSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectEffectiveVersionValidationFlushBatchSize");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectFailedToBePushedToCloudWithOperation_recordID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectFailedToBePushedToCloudWithOperation:recordID:error:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectForShare_accountID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForShare:accountID:context:");
}

id objc_msgSend_objectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectID");
}

id objc_msgSend_objectIDWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectIDWithUUID:");
}

id objc_msgSend_objectIDWithUUID_entityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectIDWithUUID:entityName:");
}

id objc_msgSend_objectIDsForRelationshipNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectIDsForRelationshipNamed:");
}

id objc_msgSend_objectIDsOfClassesEligibleForLocalObjectMerge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectIDsOfClassesEligibleForLocalObjectMerge");
}

id objc_msgSend_objectIDsToProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectIDsToProcess");
}

id objc_msgSend_objectIDsToRetry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectIDsToRetry");
}

id objc_msgSend_objectIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectIdentifier");
}

id objc_msgSend_objectTreeProcessorDelegateFactoryWithTreeNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectTreeProcessorDelegateFactoryWithTreeNode:");
}

id objc_msgSend_objectWasDeletedFromCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWasDeletedFromCloud");
}

id objc_msgSend_objectWasDeletedFromCloudByAnotherDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWasDeletedFromCloudByAnotherDevice");
}

id objc_msgSend_objectWasFetchedButDoesNotExistInCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWasFetchedButDoesNotExistInCloud");
}

id objc_msgSend_objectWasFetchedFromCloudWithRecord_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWasFetchedFromCloudWithRecord:accountID:");
}

id objc_msgSend_objectWasPushedToCloudWithOperation_serverRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWasPushedToCloudWithOperation:serverRecord:");
}

id objc_msgSend_objectWillBePushedToCloudWithOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWillBePushedToCloudWithOperation:");
}

id objc_msgSend_objectWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithID:");
}

id objc_msgSend_objectWithRecordID_accountID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithRecordID:accountID:context:");
}

id objc_msgSend_objectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsAtIndexes:");
}

id objc_msgSend_objectsByAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsByAccount:");
}

id objc_msgSend_objectsByDatabaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsByDatabaseScope:");
}

id objc_msgSend_objectsForKeys_notFoundMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsForKeys:notFoundMarker:");
}

id objc_msgSend_objectsToBeDeletedBeforeThisObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsToBeDeletedBeforeThisObject");
}

id objc_msgSend_observe(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observe");
}

id objc_msgSend_observePrimaryCloudKitAccountPersonIDSaltChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observePrimaryCloudKitAccountPersonIDSaltChanges");
}

id objc_msgSend_observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue_successHandler_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:");
}

id objc_msgSend_observeWithObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeWithObserver:");
}

id objc_msgSend_obtainPermanentIDsForObjects_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "obtainPermanentIDsForObjects:error:");
}

id objc_msgSend_operatingSystemVersionString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operatingSystemVersionString");
}

id objc_msgSend_operationCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationCount");
}

id objc_msgSend_operationID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationID");
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationQueue");
}

id objc_msgSend_operationQueueFetchUserRecordWithAccountID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationQueueFetchUserRecordWithAccountID:completionHandler:");
}

id objc_msgSend_operationToFetchDatabaseChangesForDatabase_cloudSchemaCatchUpSyncContextMap_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToFetchDatabaseChangesForDatabase:cloudSchemaCatchUpSyncContextMap:completionHandler:");
}

id objc_msgSend_operationToFetchRecordIDs_database_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToFetchRecordIDs:database:");
}

id objc_msgSend_operationToFetchRecordZoneChangesForZoneIDs_database_reason_ignoreServerChangeTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToFetchRecordZoneChangesForZoneIDs:database:reason:ignoreServerChangeTokens:");
}

id objc_msgSend_operationToModifyRecordsToSave_delete_rootRecordIDsByShareID_database_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToModifyRecordsToSave:delete:rootRecordIDsByShareID:database:");
}

id objc_msgSend_operationToSaveZonesForZoneIDs_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToSaveZonesForZoneIDs:accountID:");
}

id objc_msgSend_operationToSaveZonesIfNecessaryForAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToSaveZonesIfNecessaryForAccountID:");
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operations");
}

id objc_msgSend_operationsToFetchRecordIDs_database_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationsToFetchRecordIDs:database:");
}

id objc_msgSend_operationsToFetchRecordIDs_operationGroupName_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationsToFetchRecordIDs:operationGroupName:accountID:");
}

id objc_msgSend_operationsToFetchRecordZoneChangesForZoneIDs_accountID_reason_cloudSchemaCatchUpSyncContextMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationsToFetchRecordZoneChangesForZoneIDs:accountID:reason:cloudSchemaCatchUpSyncContextMap:");
}

id objc_msgSend_operationsToModifyRecordsForCloudObjectsToSave_delete_deleteShares_operationGroupName_addDependencies_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationsToModifyRecordsForCloudObjectsToSave:delete:deleteShares:operationGroupName:addDependencies:accountID:");
}

id objc_msgSend_operationsToModifyRecordsToSave_delete_rootRecordIDsByShareID_database_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationsToModifyRecordsToSave:delete:rootRecordIDsByShareID:database:");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "options");
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSet");
}

id objc_msgSend_orderedSetWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithArray:");
}

id objc_msgSend_originalAlarmUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originalAlarmUID");
}

id objc_msgSend_originator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originator");
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "owner");
}

id objc_msgSend_ownerName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownerName");
}

id objc_msgSend_parent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parent");
}

id objc_msgSend_parentAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentAccount");
}

id objc_msgSend_parentCloudObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentCloudObject");
}

id objc_msgSend_parentEffectiveMinimumSupportedVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentEffectiveMinimumSupportedVersion");
}

id objc_msgSend_parentList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentList");
}

id objc_msgSend_parentReminder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentReminder");
}

id objc_msgSend_participantID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "participantID");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathComponents");
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtension");
}

id objc_msgSend_pendingAccountInitializerCompleteOnLaunch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingAccountInitializerCompleteOnLaunch");
}

id objc_msgSend_pendingPostSaveActions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingPostSaveActions");
}

id objc_msgSend_pendingReindexAll(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingReindexAll");
}

id objc_msgSend_pendingReindexIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingReindexIdentifiers");
}

id objc_msgSend_performAndWaitContextWithBatchFetchHelperForAccountID_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitContextWithBatchFetchHelperForAccountID:block:");
}

id objc_msgSend_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performBlockInPersonaContextForAccountIdentifier_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockInPersonaContextForAccountIdentifier:block:");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_performStagedLightweightMigrationForStoreAtStoreURL_persistentStoreDescriptionOptionsOverride_postMigrationDataUpdatesTransactionAuthor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performStagedLightweightMigrationForStoreAtStoreURL:persistentStoreDescriptionOptionsOverride:postMigrationDataUpdatesTransactionAuthor:error:");
}

id objc_msgSend_permission(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "permission");
}

id objc_msgSend_persistedSubscriptionIDsValidityPeriod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistedSubscriptionIDsValidityPeriod");
}

id objc_msgSend_persistenceCloudSchemaVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistenceCloudSchemaVersion");
}

id objc_msgSend_persistenceCloudSchemaVersionWithAccountIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistenceCloudSchemaVersionWithAccountIdentifier:context:");
}

id objc_msgSend_persistentHistoryTokens(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentHistoryTokens");
}

id objc_msgSend_persistentStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStore");
}

id objc_msgSend_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreCoordinator");
}

id objc_msgSend_persistentStoreDescriptionWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreDescriptionWithURL:");
}

id objc_msgSend_persistentStoreForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreForIdentifier:");
}

id objc_msgSend_persistentStoreForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreForURL:");
}

id objc_msgSend_persistentStoreOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreOptions");
}

id objc_msgSend_persistentStores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStores");
}

id objc_msgSend_personID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personID");
}

id objc_msgSend_personIDSalt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personIDSalt");
}

id objc_msgSend_policyResetTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "policyResetTimer");
}

id objc_msgSend_policyStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "policyStartDate");
}

id objc_msgSend_pollingInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pollingInterval");
}

id objc_msgSend_pollingSelectorDelayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pollingSelectorDelayer");
}

id objc_msgSend_populateShare_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateShare:withObject:");
}

id objc_msgSend_postAccountPropertyChangeNotificationWithKey_changedValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postAccountPropertyChangeNotificationWithKey:changedValue:");
}

id objc_msgSend_postAnalyticsDefaultThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postAnalyticsDefaultThrottleInterval");
}

id objc_msgSend_postAnalyticsRateReduceFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postAnalyticsRateReduceFactor");
}

id objc_msgSend_postEventWithName_payload_error_performAutoBugCaptureOnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEventWithName:payload:error:performAutoBugCaptureOnError:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_pptSentinelURLInContainerURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pptSentinelURLInContainerURL:");
}

id objc_msgSend_pq_unregisterForBuddy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pq_unregisterForBuddy");
}

id objc_msgSend_predicateForCloudKitAccountsWithKeyPathPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForCloudKitAccountsWithKeyPathPrefix:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predicateWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithValue:");
}

id objc_msgSend_prepareForDeletion_Swift(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForDeletion_Swift");
}

id objc_msgSend_prepareShare_forObject_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareShare:forObject:completionHandler:");
}

id objc_msgSend_preprocessTreeNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preprocessTreeNode:");
}

id objc_msgSend_previousAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousAccount");
}

id objc_msgSend_previousList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousList");
}

id objc_msgSend_previousServerChangeToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousServerChangeToken");
}

id objc_msgSend_primaryCloudKitAccountInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryCloudKitAccountInContext:");
}

id objc_msgSend_primaryCloudKitAccountPersonIDSaltDidFailToSetWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryCloudKitAccountPersonIDSaltDidFailToSetWithError:");
}

id objc_msgSend_primaryCloudKitAccountPersonIDSaltDidSetWithSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryCloudKitAccountPersonIDSaltDidSetWithSalt:");
}

id objc_msgSend_primitiveCkZoneOwnerName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primitiveCkZoneOwnerName");
}

id objc_msgSend_primitiveValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primitiveValueForKey:");
}

id objc_msgSend_privateCloudDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateCloudDatabase");
}

id objc_msgSend_processAllDirtyCloudObjectsWithSyncReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processAllDirtyCloudObjectsWithSyncReason:completionHandler:");
}

id objc_msgSend_processBatchOfTreeNodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processBatchOfTreeNodes:");
}

id objc_msgSend_processID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processID");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processLocalObjectMergeEligibleObjectIDs_operationQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processLocalObjectMergeEligibleObjectIDs:operationQueue:completionHandler:");
}

id objc_msgSend_processObjectIDs_operationQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processObjectIDs:operationQueue:completionHandler:");
}

id objc_msgSend_processPendingCloudObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processPendingCloudObjects");
}

id objc_msgSend_processPendingCloudObjectsWithOperationName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processPendingCloudObjectsWithOperationName:");
}

id objc_msgSend_processPendingCloudObjectsWithOperationName_syncReason_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processPendingCloudObjectsWithOperationName:syncReason:completionHandler:");
}

id objc_msgSend_processedRecordCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processedRecordCount");
}

id objc_msgSend_processingQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingQueue");
}

id objc_msgSend_processingSelectorDelayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingSelectorDelayer");
}

id objc_msgSend_promptToFileRadarWithICTap2RadarType_title_description_logMessage_additionalFaultMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptToFileRadarWithICTap2RadarType:title:description:logMessage:additionalFaultMessage:");
}

id objc_msgSend_promptUserToFileBugWithAlertMessage_bugTitle_bugDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptUserToFileBugWithAlertMessage:bugTitle:bugDescription:");
}

id objc_msgSend_propertiesByName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertiesByName");
}

id objc_msgSend_propertiesThatShouldTriggerReindexing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertiesThatShouldTriggerReindexing");
}

id objc_msgSend_propertiesToFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertiesToFetch");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_proposePurgingFileAttachmentWithSha512Sum_fileExtension_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proposePurgingFileAttachmentWithSha512Sum:fileExtension:account:");
}

id objc_msgSend_proximity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximity");
}

id objc_msgSend_purgeAttachmentFilesWithAttachmentIDs_accountID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeAttachmentFilesWithAttachmentIDs:accountID:error:");
}

id objc_msgSend_purgeAttachmentFilesWithSha512SumsAndExtensions_accountID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeAttachmentFilesWithSha512SumsAndExtensions:accountID:error:");
}

id objc_msgSend_purgeDeletedFileAttachments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeDeletedFileAttachments");
}

id objc_msgSend_purgeFilesForAccountWithAccountID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeFilesForAccountWithAccountID:error:");
}

id objc_msgSend_qualityOfService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "qualityOfService");
}

id objc_msgSend_quantity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quantity");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queue");
}

id objc_msgSend_radius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "radius");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_randomSalt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "randomSalt");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rd_associatedCoreSpotlightDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rd_associatedCoreSpotlightDelegate");
}

id objc_msgSend_rd_ckDatabaseScope(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rd_ckDatabaseScope");
}

id objc_msgSend_reachabilityChangeSyncThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachabilityChangeSyncThrottleInterval");
}

id objc_msgSend_reachabilityForInternetConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachabilityForInternetConnection");
}

id objc_msgSend_reachabilityWithAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachabilityWithAddress:");
}

id objc_msgSend_read(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "read");
}

id objc_msgSend_readinessLoggingDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readinessLoggingDescription");
}

id objc_msgSend_receivedZoneNotFound_operation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedZoneNotFound:operation:");
}

id objc_msgSend_recognizedCloudObjectClasses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recognizedCloudObjectClasses");
}

id objc_msgSend_recordChangeTag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordChangeTag");
}

id objc_msgSend_recordFetchWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordFetchWith:");
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordID");
}

id objc_msgSend_recordIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDs");
}

id objc_msgSend_recordIDsToDelete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDsToDelete");
}

id objc_msgSend_recordIDsToSortChildrenAfterFetching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDsToSortChildrenAfterFetching");
}

id objc_msgSend_recordName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordName");
}

id objc_msgSend_recordSaveWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordSaveWith:");
}

id objc_msgSend_recordSystemFieldsTransformer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordSystemFieldsTransformer");
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordType");
}

id objc_msgSend_recordZoneIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordZoneIDs");
}

id objc_msgSend_recordZoneName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordZoneName");
}

id objc_msgSend_recordZonesToSave(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordZonesToSave");
}

id objc_msgSend_recordsToSave(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToSave");
}

id objc_msgSend_recursiveMarkForDeletion_usingVisitedMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recursiveMarkForDeletion:usingVisitedMap:");
}

id objc_msgSend_recursivelyFixCrossZoneRelationship_perObjectHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recursivelyFixCrossZoneRelationship:perObjectHandler:");
}

id objc_msgSend_recursivelyFixCrossZoneRelationshipWithVisitedMap_perObjectHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recursivelyFixCrossZoneRelationshipWithVisitedMap:perObjectHandler:");
}

id objc_msgSend_reduceIntoDictionaryByRootEntityNamesWithManagedObjectIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reduceIntoDictionaryByRootEntityNamesWithManagedObjectIDs:");
}

id objc_msgSend_referenceFrameString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceFrameString");
}

id objc_msgSend_refreshObject_mergeChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshObject:mergeChanges:");
}

id objc_msgSend_registerDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDefaults:");
}

id objc_msgSend_registerForBuddy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForBuddy");
}

id objc_msgSend_reindexAllSearchableItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reindexAllSearchableItems");
}

id objc_msgSend_reindexAllSearchableItemsWithAcknowledgementHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reindexAllSearchableItemsWithAcknowledgementHandler:");
}

id objc_msgSend_reindexSearchableItemsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reindexSearchableItemsWithIdentifiers:");
}

id objc_msgSend_reindexSearchableItemsWithIdentifiers_acknowledgementHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reindexSearchableItemsWithIdentifiers:acknowledgementHandler:");
}

id objc_msgSend_rejectPurgingFileAttachmentWithSha512Sum_fileExtension_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rejectPurgingFileAttachmentWithSha512Sum:fileExtension:account:");
}

id objc_msgSend_relationshipsByName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relationshipsByName");
}

id objc_msgSend_relationshipsEligibleForEffectiveMinimumSupportedVersionPropagationWithEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relationshipsEligibleForEffectiveMinimumSupportedVersionPropagationWithEntity:");
}

id objc_msgSend_remChangedObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remChangedObjectID");
}

id objc_msgSend_remObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remObjectID");
}

id objc_msgSend_rem_URLByAppendingReminderDataContainerPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_URLByAppendingReminderDataContainerPathComponent");
}

id objc_msgSend_rem_createDirectoryIfNecessaryAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_createDirectoryIfNecessaryAtURL:error:");
}

id objc_msgSend_rem_createProtectedTemporaryDirectoryIfNeededWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_createProtectedTemporaryDirectoryIfNeededWithError:");
}

id objc_msgSend_rem_dataWithRandomBytesWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_dataWithRandomBytesWithLength:");
}

id objc_msgSend_rem_dateComponentsWithDate_timeZone_isAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_dateComponentsWithDate:timeZone:isAllDay:");
}

id objc_msgSend_rem_dateComponentsWithDateUsingArchivingTimeZone_isAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_dateComponentsWithDateUsingArchivingTimeZone:isAllDay:");
}

id objc_msgSend_rem_dateWithDateComponents_timeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_dateWithDateComponents:timeZone:");
}

id objc_msgSend_rem_dateWithDateComponentsUsingArchivingTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_dateWithDateComponentsUsingArchivingTimeZone:");
}

id objc_msgSend_rem_eligibleForAutoCloudKitMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_eligibleForAutoCloudKitMigration");
}

id objc_msgSend_rem_fileExistsAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_fileExistsAtURL:");
}

id objc_msgSend_rem_fileExistsAtURL_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_fileExistsAtURL:isDirectory:");
}

id objc_msgSend_rem_formatterWithTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_formatterWithTimeZone:");
}

id objc_msgSend_rem_hasPrefixCaseInsensitive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_hasPrefixCaseInsensitive:");
}

id objc_msgSend_rem_isAllDayDateComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_isAllDayDateComponents");
}

id objc_msgSend_rem_isDiskFullSQLError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_isDiskFullSQLError");
}

id objc_msgSend_rem_isEligibleForCloudKitReminders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_isEligibleForCloudKitReminders");
}

id objc_msgSend_rem_isEmptyDirectoryAtURL_skipsHiddenFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_isEmptyDirectoryAtURL:skipsHiddenFiles:");
}

id objc_msgSend_rem_isFirstString_equalToSecondString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_isFirstString:equalToSecondString:");
}

id objc_msgSend_rem_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_isManagedAppleID");
}

id objc_msgSend_rem_now(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rem_now");
}

id objc_msgSend_reminder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminder");
}

id objc_msgSend_reminderDataContainerURLForAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderDataContainerURLForAccountIdentifier:");
}

id objc_msgSend_reminderDataContainerURLWithAppDocumentsURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderDataContainerURLWithAppDocumentsURL:");
}

id objc_msgSend_reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:error:");
}

id objc_msgSend_reminderIDsMergeableOrderingReplicaIDSourceWithAccountID_listID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderIDsMergeableOrderingReplicaIDSourceWithAccountID:listID:");
}

id objc_msgSend_reminderIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reminderIdentifier");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeCkServerChangeTokensObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCkServerChangeTokensObject:");
}

id objc_msgSend_removeCkSharedObjectOwnerNamesObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCkSharedObjectOwnerNamesObject:");
}

id objc_msgSend_removeHideEmptySectionsForGroceryList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeHideEmptySectionsForGroceryList:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLastObject");
}

id objc_msgSend_removeMuteNotificationOptionsForSharedList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMuteNotificationOptionsForSharedList:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removePersistentStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePersistentStore:error:");
}

id objc_msgSend_removeStaleAccountStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeStaleAccountStatus");
}

id objc_msgSend_removeStaleFetchDatabaseRetryMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeStaleFetchDatabaseRetryMetadata");
}

id objc_msgSend_requestFire(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestFire");
}

id objc_msgSend_requestFreeSpace_atPath_effortLevel_queue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestFreeSpace:atPath:effortLevel:queue:completionBlock:");
}

id objc_msgSend_requestQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestQueue");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset");
}

id objc_msgSend_resetFailureCounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetFailureCounts");
}

id objc_msgSend_resetInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetInterval");
}

id objc_msgSend_resolutionTokenMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolutionTokenMap");
}

id objc_msgSend_resolutionTokenMapFromJsonData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolutionTokenMapFromJsonData:");
}

id objc_msgSend_resolveObjectIDWithUUID_entityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveObjectIDWithUUID:entityName:");
}

id objc_msgSend_resourceURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceURL");
}

id objc_msgSend_restoreParentReferenceAfterUnmarkingForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restoreParentReferenceAfterUnmarkingForDeletion");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "result");
}

id objc_msgSend_resultType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultType");
}

id objc_msgSend_resultsLimitPerSyncOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultsLimitPerSyncOperation");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_retryCountFetchDatabaseChangesOperationTypeForAccountID_dataScopeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryCountFetchDatabaseChangesOperationTypeForAccountID:dataScopeString:");
}

id objc_msgSend_retryCountsByOperationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryCountsByOperationType");
}

id objc_msgSend_retryLaterErrorWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryLaterErrorWithInterval:");
}

id objc_msgSend_retryPerformingCloudSchemaCatchUpSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryPerformingCloudSchemaCatchUpSync");
}

id objc_msgSend_retryProcessingCloudObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryProcessingCloudObjects");
}

id objc_msgSend_retryTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryTimer");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_reverseTransformedValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseTransformedValue:");
}

id objc_msgSend_rootEntityNameWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootEntityNameWithEntityName:");
}

id objc_msgSend_rootRecordForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootRecordForObject:");
}

id objc_msgSend_rootRecordID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootRecordID");
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "save:");
}

id objc_msgSend_saveAccount_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveAccount:withCompletionHandler:");
}

id objc_msgSend_saveAndFaultIfFailWithContext_shouldTakeServerAsTruth_logDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:");
}

id objc_msgSend_saveCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveCount");
}

id objc_msgSend_saveRecordZone_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRecordZone:completionHandler:");
}

id objc_msgSend_saveServerChangeToken_forChangedZonesInDatabase_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveServerChangeToken:forChangedZonesInDatabase:accountID:");
}

id objc_msgSend_saveServerChangeToken_forRecordZoneID_databaseScope_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveServerChangeToken:forRecordZoneID:databaseScope:accountID:");
}

id objc_msgSend_saveServerShare_accountID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveServerShare:accountID:completionHandler:");
}

id objc_msgSend_saveShare_forObject_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveShare:forObject:completionHandler:");
}

id objc_msgSend_saveShare_withRootRecord_object_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveShare:withRootRecord:object:completionHandler:");
}

id objc_msgSend_saveShouldContinueIfCustomValidationFailed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveShouldContinueIfCustomValidationFailed");
}

id objc_msgSend_saveSubscriptionsForDatabase_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveSubscriptionsForDatabase:completionHandler:");
}

id objc_msgSend_saveZoneFetchState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveZoneFetchState");
}

id objc_msgSend_savedAttachment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedAttachment");
}

id objc_msgSend_savedImageDeduplicationApproximatePerRunDeleteLimit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedImageDeduplicationApproximatePerRunDeleteLimit");
}

id objc_msgSend_savedImageDeduplicationBackoffThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedImageDeduplicationBackoffThrottleInterval");
}

id objc_msgSend_savedImageDeduplicationDefaultThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedImageDeduplicationDefaultThrottleInterval");
}

id objc_msgSend_savedImageDeduplicationRateReduceFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedImageDeduplicationRateReduceFactor");
}

id objc_msgSend_savedReminder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedReminder");
}

id objc_msgSend_scheduleBackgroundActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleBackgroundActivity");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_schedulingState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "schedulingState");
}

id objc_msgSend_search(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "search");
}

id objc_msgSend_secondsFromGMT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondsFromGMT");
}

id objc_msgSend_section(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "section");
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selector");
}

id objc_msgSend_serializedData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializedData");
}

id objc_msgSend_serverChangeToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverChangeToken");
}

id objc_msgSend_serverChangeTokenContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverChangeTokenContext");
}

id objc_msgSend_serverChangeTokenData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverChangeTokenData");
}

id objc_msgSend_serverChangeTokenForAccount_zoneID_databaseScope_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverChangeTokenForAccount:zoneID:databaseScope:context:");
}

id objc_msgSend_serverChangeTokenForChangedZonesInDatabase_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverChangeTokenForChangedZonesInDatabase:accountID:");
}

id objc_msgSend_serverChangeTokenForRecordZoneID_databaseScope_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverChangeTokenForRecordZoneID:databaseScope:accountID:");
}

id objc_msgSend_serverChangeTokensMatchingPredicate_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverChangeTokensMatchingPredicate:inContext:");
}

id objc_msgSend_serverShareCheckingParent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverShareCheckingParent");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "session");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setAcceptSharesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptSharesCompletionBlock:");
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccountChangedDebouncerInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountChangedDebouncerInterval:");
}

id objc_msgSend_setAccountChangedNotificationHandlingDebouncer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountChangedNotificationHandlingDebouncer:");
}

id objc_msgSend_setAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountIdentifier:");
}

id objc_msgSend_setAccountInitializerDidCompleteOnAccountsDidChangeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountInitializerDidCompleteOnAccountsDidChangeObserver:");
}

id objc_msgSend_setAccountInitializerDidCompleteOnLaunchObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountInitializerDidCompleteOnLaunchObserver:");
}

id objc_msgSend_setAccountPersonIDSaltObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountPersonIDSaltObserver:");
}

id objc_msgSend_setAccountPropertiesNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountPropertiesNotifier:");
}

id objc_msgSend_setAccountStatus_forAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountStatus:forAccountID:");
}

id objc_msgSend_setAccountStatusNumberByAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountStatusNumberByAccountID:");
}

id objc_msgSend_setAccountZoneIDsFetchingChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountZoneIDsFetchingChanges:");
}

id objc_msgSend_setAccountZoneIDsNeedingFetchChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountZoneIDsNeedingFetchChanges:");
}

id objc_msgSend_setAccountZoneIDsNeedingToBeSaved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountZoneIDsNeedingToBeSaved:");
}

id objc_msgSend_setAffectedStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAffectedStores:");
}

id objc_msgSend_setAlarmIDsLimitPerReminder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlarmIDsLimitPerReminder:");
}

id objc_msgSend_setAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllDay:");
}

id objc_msgSend_setAppStoreReviewCreatedOrCompletedRemindersCountThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppStoreReviewCreatedOrCompletedRemindersCountThreshold:");
}

id objc_msgSend_setAppStoreReviewNumberOfForegroundsThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppStoreReviewNumberOfForegroundsThreshold:");
}

id objc_msgSend_setAppStoreReviewTimeIntervalOfInterest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppStoreReviewTimeIntervalOfInterest:");
}

id objc_msgSend_setAppStoreReviewTimeIntervalSinceInitialForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppStoreReviewTimeIntervalSinceInitialForeground:");
}

id objc_msgSend_setAppStoreReviewTimeIntervalSinceLastFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppStoreReviewTimeIntervalSinceLastFetch:");
}

id objc_msgSend_setAppStoreReviewTimeIntervalSinceLastPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppStoreReviewTimeIntervalSinceLastPrompt:");
}

id objc_msgSend_setAppleAccountUtilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleAccountUtilities:");
}

id objc_msgSend_setApsConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsConnection:");
}

id objc_msgSend_setApsDebouncerDefaultInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsDebouncerDefaultInterval:");
}

id objc_msgSend_setApsDebouncerMigrationInProgressInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsDebouncerMigrationInProgressInterval:");
}

id objc_msgSend_setApsDebouncerWatchDefaultInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsDebouncerWatchDefaultInterval:");
}

id objc_msgSend_setApsDebouncerWatchMigrationInProgressInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsDebouncerWatchMigrationInProgressInterval:");
}

id objc_msgSend_setApsNotificationHandlingDebouncer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsNotificationHandlingDebouncer:");
}

id objc_msgSend_setApsTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsTopic:");
}

id objc_msgSend_setAssignee_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssignee:");
}

id objc_msgSend_setAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthor:");
}

id objc_msgSend_setBackingCDObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackingCDObject:");
}

id objc_msgSend_setBatchDeleteExpiredRemindersDefaultThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatchDeleteExpiredRemindersDefaultThrottleInterval:");
}

id objc_msgSend_setBatchDeleteExpiredRemindersMinimumDeletionTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatchDeleteExpiredRemindersMinimumDeletionTimeInterval:");
}

id objc_msgSend_setBatchDeleteExpiredRemindersRateReduceFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatchDeleteExpiredRemindersRateReduceFactor:");
}

id objc_msgSend_setBatchFetchHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatchFetchHelper:");
}

id objc_msgSend_setBatchInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatchInterval:");
}

id objc_msgSend_setBuddyDidFinishHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBuddyDidFinishHandler:");
}

id objc_msgSend_setBuddyStateObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBuddyStateObserver:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObject:");
}

id objc_msgSend_setCachedManagedObject_forCKIdentifier_accountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedManagedObject:forCKIdentifier:accountIdentifier:");
}

id objc_msgSend_setCached_CDResolutionMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCached_CDResolutionMap:");
}

id objc_msgSend_setCallOnMainThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallOnMainThread:");
}

id objc_msgSend_setChangeTokenUpdatedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeTokenUpdatedBlock:");
}

id objc_msgSend_setChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChanges:");
}

id objc_msgSend_setCkCloudState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkCloudState:");
}

id objc_msgSend_setCkDirtyFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkDirtyFlags:");
}

id objc_msgSend_setCkIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkIdentifier:");
}

id objc_msgSend_setCkNeedsInitialFetchFromCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkNeedsInitialFetchFromCloud:");
}

id objc_msgSend_setCkNeedsToBeFetchedFromCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkNeedsToBeFetchedFromCloud:");
}

id objc_msgSend_setCkServerRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkServerRecord:");
}

id objc_msgSend_setCkServerRecordData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkServerRecordData:");
}

id objc_msgSend_setCkServerShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkServerShare:");
}

id objc_msgSend_setCkServerShareData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkServerShareData:");
}

id objc_msgSend_setCkZoneOwnerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkZoneOwnerName:");
}

id objc_msgSend_setClientName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientName:");
}

id objc_msgSend_setCloudConfigurationDownloadThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudConfigurationDownloadThrottleInterval:");
}

id objc_msgSend_setCloudContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudContext:");
}

id objc_msgSend_setCloudContextDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudContextDelegate:");
}

id objc_msgSend_setCloudKitMergeLocalLastBuildVersionMaxRetryReached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitMergeLocalLastBuildVersionMaxRetryReached:");
}

id objc_msgSend_setCloudKitMergeLocalLastDateMaxRetryReached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitMergeLocalLastDateMaxRetryReached:");
}

id objc_msgSend_setCloudKitSchemaCatchUpSyncLastSuccessBuildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitSchemaCatchUpSyncLastSuccessBuildVersion:");
}

id objc_msgSend_setCloudKitSchemaCatchUpSyncLastSuccessDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitSchemaCatchUpSyncLastSuccessDate:");
}

id objc_msgSend_setCloudKitSchemaCatchUpSyncSchedulingState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitSchemaCatchUpSyncSchedulingState:");
}

id objc_msgSend_setCloudSchemaCatchUpSyncContextsByAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudSchemaCatchUpSyncContextsByAccountIdentifier:");
}

id objc_msgSend_setCloudSchemaCatchUpSyncInitialRetryInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudSchemaCatchUpSyncInitialRetryInterval:");
}

id objc_msgSend_setCloudSchemaCatchUpSyncMaximumRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudSchemaCatchUpSyncMaximumRetryCount:");
}

id objc_msgSend_setCloudSchemaCatchUpSyncSchedulingStateStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudSchemaCatchUpSyncSchedulingStateStorage:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfiguration:");
}

id objc_msgSend_setConfigurationFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurationFromDictionary:");
}

id objc_msgSend_setContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainer:");
}

id objc_msgSend_setContainsLargeDatabases_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainsLargeDatabases:");
}

id objc_msgSend_setContainsOnlySmallDatabases_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainsOnlySmallDatabases:");
}

id objc_msgSend_setContextName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextName:");
}

id objc_msgSend_setCountLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCountLimit:");
}

id objc_msgSend_setCurrentBatchCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentBatchCount:");
}

id objc_msgSend_setCurrentLevelIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLevelIndex:");
}

id objc_msgSend_setCurrentLocalVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLocalVersion:");
}

id objc_msgSend_setCustomValidationFailed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomValidationFailed:");
}

id objc_msgSend_setDaCalendarItemUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaCalendarItemUniqueIdentifier:");
}

id objc_msgSend_setDaWasMigrated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaWasMigrated:");
}

id objc_msgSend_setDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatabase:");
}

id objc_msgSend_setDatabaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatabaseScope:");
}

id objc_msgSend_setDatabaseScopeStringsNeedingRetryFetchChangesByAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDatabaseScopeStringsNeedingRetryFetchChangesByAccountID:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDebouncingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebouncingInterval:");
}

id objc_msgSend_setDefaultConfigurationURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultConfigurationURL:");
}

id objc_msgSend_setDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelay:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDeletedRecordsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeletedRecordsCount:");
}

id objc_msgSend_setDidAddObservers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidAddObservers:");
}

id objc_msgSend_setDidCheckForLongLivedOperations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidCheckForLongLivedOperations:");
}

id objc_msgSend_setDidChooseToMigrate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidChooseToMigrate:");
}

id objc_msgSend_setDidHandleMarkingExtraneousAlarmDuringWillSave_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidHandleMarkingExtraneousAlarmDuringWillSave:");
}

id objc_msgSend_setDidNotFinishMigration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidNotFinishMigration:");
}

id objc_msgSend_setDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabled:");
}

id objc_msgSend_setDisabledInternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabledInternal:");
}

id objc_msgSend_setDiscretionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscretionary:");
}

id objc_msgSend_setDisplayDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayDate:");
}

id objc_msgSend_setDisplayDateDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayDateDate:");
}

id objc_msgSend_setDisplayDateIsAllDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayDateIsAllDay:");
}

id objc_msgSend_setDisplayDateTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayDateTimeZone:");
}

id objc_msgSend_setDisplayDateUpdatedForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayDateUpdatedForSecondsFromGMT:");
}

id objc_msgSend_setDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDouble:forKey:");
}

id objc_msgSend_setDueDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDueDate:");
}

id objc_msgSend_setEffectiveMinimumSupportedVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEffectiveMinimumSupportedVersion:");
}

id objc_msgSend_setEnableCoreSpotlightIndexing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableCoreSpotlightIndexing:");
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDate:");
}

id objc_msgSend_setEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntity:");
}

id objc_msgSend_setExpanded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpanded:");
}

id objc_msgSend_setExpectedReceiveSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedReceiveSize:");
}

id objc_msgSend_setExpectedSendSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedSendSize:");
}

id objc_msgSend_setExtraneousAlarmsBackoffThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtraneousAlarmsBackoffThrottleInterval:");
}

id objc_msgSend_setExtraneousAlarmsCleanUpTriggerReductionFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtraneousAlarmsCleanUpTriggerReductionFactor:");
}

id objc_msgSend_setExtraneousAlarmsCollectorDebounceInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtraneousAlarmsCollectorDebounceInterval:");
}

id objc_msgSend_setExtraneousAlarmsCollectorThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtraneousAlarmsCollectorThrottleInterval:");
}

id objc_msgSend_setExtraneousAlarmsDeleteCountLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtraneousAlarmsDeleteCountLimit:");
}

id objc_msgSend_setExtraneousAlarmsDeleteCountThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtraneousAlarmsDeleteCountThreshold:");
}

id objc_msgSend_setExtraneousAlarmsThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtraneousAlarmsThrottleInterval:");
}

id objc_msgSend_setFailedToSyncCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailedToSyncCount:");
}

id objc_msgSend_setFetchAllChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchAllChanges:");
}

id objc_msgSend_setFetchBatchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchBatchSize:");
}

id objc_msgSend_setFetchCacheCountLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchCacheCountLimit:");
}

id objc_msgSend_setFetchDatabaseChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchDatabaseChangesCompletionBlock:");
}

id objc_msgSend_setFetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount:");
}

id objc_msgSend_setFetchLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchLimit:");
}

id objc_msgSend_setFetchNewestChangesFirst_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchNewestChangesFirst:");
}

id objc_msgSend_setFetchRecordZoneChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZoneChangesCompletionBlock:");
}

id objc_msgSend_setFetchRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordsCompletionBlock:");
}

id objc_msgSend_setFetchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRequest:");
}

id objc_msgSend_setFetchSubscriptionCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchSubscriptionCompletionBlock:");
}

id objc_msgSend_setFetchedRecordCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchedRecordCount:");
}

id objc_msgSend_setFetchingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchingEnabled:");
}

id objc_msgSend_setFireBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFireBlock:");
}

id objc_msgSend_setGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroup:");
}

id objc_msgSend_setHack_didHandleShouldSyncUpDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHack_didHandleShouldSyncUpDelete:");
}

id objc_msgSend_setHack_resolutionTokenMapCopy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHack_resolutionTokenMapCopy:");
}

id objc_msgSend_setHack_willSaveHandled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHack_willSaveHandled:");
}

id objc_msgSend_setHasFailedLoadingAccountStoresFromDiskDueToDiskFull_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasFailedLoadingAccountStoresFromDiskDueToDiskFull:");
}

id objc_msgSend_setHasPassedBuddy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasPassedBuddy:");
}

id objc_msgSend_setHasRetryTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasRetryTimer:");
}

id objc_msgSend_setHousekeepingActivityMinimumDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHousekeepingActivityMinimumDelay:");
}

id objc_msgSend_setICloudIsOffTimeIntervalSinceLastPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setICloudIsOffTimeIntervalSinceLastPrompt:");
}

id objc_msgSend_setIcUserDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIcUserDefaults:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setImageDeduplicationApproximatePerRunDeleteLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageDeduplicationApproximatePerRunDeleteLimit:");
}

id objc_msgSend_setImageDeduplicationBackoffThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageDeduplicationBackoffThrottleInterval:");
}

id objc_msgSend_setImageDeduplicationDefaultThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageDeduplicationDefaultThrottleInterval:");
}

id objc_msgSend_setImageDeduplicationRateReduceFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageDeduplicationRateReduceFactor:");
}

id objc_msgSend_setInCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInCloud:");
}

id objc_msgSend_setIncludesSubentities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludesSubentities:");
}

id objc_msgSend_setInternal_ChangeTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInternal_ChangeTransaction:");
}

id objc_msgSend_setIsActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsActivated:");
}

id objc_msgSend_setIsCloudSchemaCatchUpSyncNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCloudSchemaCatchUpSyncNeeded:");
}

id objc_msgSend_setIsExtraneous_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsExtraneous:");
}

id objc_msgSend_setIsInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInactive:");
}

id objc_msgSend_setIsPPTStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPPTStore:");
}

id objc_msgSend_setIsSystemAvailableForSyncing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSystemAvailableForSyncing:");
}

id objc_msgSend_setL_accountExternalIdentifiersToObjectIDsMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setL_accountExternalIdentifiersToObjectIDsMap:");
}

id objc_msgSend_setL_accountStorageCacheByObjectIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setL_accountStorageCacheByObjectIDs:");
}

id objc_msgSend_setL_accountStoreMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setL_accountStoreMap:");
}

id objc_msgSend_setL_allGenericAccountsObjectIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setL_allGenericAccountsObjectIDs:");
}

id objc_msgSend_setL_primaryActiveCloudKitAccountREMObjectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setL_primaryActiveCloudKitAccountREMObjectID:");
}

id objc_msgSend_setLanguageHypothesisThresholdForAdditionalLanguages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLanguageHypothesisThresholdForAdditionalLanguages:");
}

id objc_msgSend_setLanguageHypothesisThresholdForPrimaryLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLanguageHypothesisThresholdForPrimaryLanguage:");
}

id objc_msgSend_setLastConsumedChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConsumedChangeToken:");
}

id objc_msgSend_setLastConsumedChangeTokenData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConsumedChangeTokenData:");
}

id objc_msgSend_setLastConsumedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConsumedDate:");
}

id objc_msgSend_setLastDataSeparationMigrationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDataSeparationMigrationDate:");
}

id objc_msgSend_setLastScheduledDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastScheduledDate:");
}

id objc_msgSend_setLastSyncMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSyncMetrics:");
}

id objc_msgSend_setLastSyncSinceInternetReachable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSyncSinceInternetReachable:");
}

id objc_msgSend_setLatestVersionSyncedToCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatestVersionSyncedToCloud:");
}

id objc_msgSend_setLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatitude:");
}

id objc_msgSend_setLaunchAndSignificantTimeChangePollThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchAndSignificantTimeChangePollThrottleInterval:");
}

id objc_msgSend_setLocalVersionDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalVersionDate:");
}

id objc_msgSend_setLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongitude:");
}

id objc_msgSend_setManagedObjectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManagedObjectID:");
}

id objc_msgSend_setManualSortHintClientSideExpiration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManualSortHintClientSideExpiration:");
}

id objc_msgSend_setManualSortHintLastAccessedUpdatePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManualSortHintLastAccessedUpdatePolicy:");
}

id objc_msgSend_setMarkZonesAsUserPurged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarkZonesAsUserPurged:");
}

id objc_msgSend_setMarkedForDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarkedForDeletion:");
}

id objc_msgSend_setMaxAttachmentsPerNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxAttachmentsPerNote:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaxInlineAssetSizeBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxInlineAssetSizeBytes:");
}

id objc_msgSend_setMaxSubAttachmentsPerAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxSubAttachmentsPerAttachment:");
}

id objc_msgSend_setMaximumAttachmentSizeMB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumAttachmentSizeMB:");
}

id objc_msgSend_setMergeLocalObjectsInitialRetryInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergeLocalObjectsInitialRetryInterval:");
}

id objc_msgSend_setMergeLocalObjectsMaximumRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergeLocalObjectsMaximumRetryCount:");
}

id objc_msgSend_setMergeLocalObjectsRetryStartOverThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergeLocalObjectsRetryStartOverThrottleInterval:");
}

id objc_msgSend_setMergePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergePolicy:");
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadata:");
}

id objc_msgSend_setMigratedAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMigratedAccount:");
}

id objc_msgSend_setMigratedListsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMigratedListsCount:");
}

id objc_msgSend_setMinimumClientVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumClientVersion:");
}

id objc_msgSend_setMinimumSearchTermLengthByBaseLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumSearchTermLengthByBaseLanguage:");
}

id objc_msgSend_setMinimumSupportedAppVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumSupportedAppVersion:");
}

id objc_msgSend_setMiniumumAutomaticLanguageConfidenceScoreAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMiniumumAutomaticLanguageConfidenceScoreAllowed:");
}

id objc_msgSend_setModifiedRecordCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedRecordCount:");
}

id objc_msgSend_setModifyRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordZonesCompletionBlock:");
}

id objc_msgSend_setModifyRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordsCompletionBlock:");
}

id objc_msgSend_setModifySubscriptionsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifySubscriptionsCompletionBlock:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNeedsToFetchUserRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsToFetchUserRecord:");
}

id objc_msgSend_setNeedsToMergeLocalObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsToMergeLocalObjects:");
}

id objc_msgSend_setNeedsToProcessAllDirtyObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsToProcessAllDirtyObjects:");
}

id objc_msgSend_setNeedsToUpdateCloudContextOnAccountsDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsToUpdateCloudContextOnAccountsDidChange:");
}

id objc_msgSend_setNeedsToUpdateSubscriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsToUpdateSubscriptions:");
}

id objc_msgSend_setNotificationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationInfo:");
}

id objc_msgSend_setNumberOfBatches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfBatches:");
}

id objc_msgSend_setNumberOfPushAttemptsToWaitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfPushAttemptsToWaitCount:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObjectContext:");
}

id objc_msgSend_setObjectEffectiveVersionValidationFlushBatchSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObjectEffectiveVersionValidationFlushBatchSize:");
}

id objc_msgSend_setObjectIDsOfClassesEligibleForLocalObjectMerge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObjectIDsOfClassesEligibleForLocalObjectMerge:");
}

id objc_msgSend_setObjectIDsToProcess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObjectIDsToProcess:");
}

id objc_msgSend_setObjectIDsToRetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObjectIDsToRetry:");
}

id objc_msgSend_setObjectIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObjectIdentifier:");
}

id objc_msgSend_setOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperationCount:");
}

id objc_msgSend_setOperationQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperationQueue:");
}

id objc_msgSend_setOption_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOption:forKey:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOriginator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginator:");
}

id objc_msgSend_setOwnerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwnerName:");
}

id objc_msgSend_setParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParent:");
}

id objc_msgSend_setParentList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentList:");
}

id objc_msgSend_setParentReminder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentReminder:");
}

id objc_msgSend_setPendingAccountInitializerCompleteOnLaunch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingAccountInitializerCompleteOnLaunch:");
}

id objc_msgSend_setPendingPostSaveActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingPostSaveActions:");
}

id objc_msgSend_setPendingReindexAll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingReindexAll:");
}

id objc_msgSend_setPerRecordCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordCompletionBlock:");
}

id objc_msgSend_setPerRecordDeleteBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordDeleteBlock:");
}

id objc_msgSend_setPerRecordProgressBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordProgressBlock:");
}

id objc_msgSend_setPerRecordSaveBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerRecordSaveBlock:");
}

id objc_msgSend_setPerShareCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareCompletionBlock:");
}

id objc_msgSend_setPersistedSubscriptionIDsValidityPeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistedSubscriptionIDsValidityPeriod:");
}

id objc_msgSend_setPersistenceCloudSchemaVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistenceCloudSchemaVersion:");
}

id objc_msgSend_setPersistentStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStore:");
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreCoordinator:");
}

id objc_msgSend_setPersonID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonID:");
}

id objc_msgSend_setPersonIDSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonIDSalt:");
}

id objc_msgSend_setPolicyResetTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPolicyResetTimer:");
}

id objc_msgSend_setPolicyStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPolicyStartDate:");
}

id objc_msgSend_setPollingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPollingInterval:");
}

id objc_msgSend_setPostAnalyticsDefaultThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPostAnalyticsDefaultThrottleInterval:");
}

id objc_msgSend_setPostAnalyticsRateReduceFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPostAnalyticsRateReduceFactor:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPreviousAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousAccount:");
}

id objc_msgSend_setPreviousList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousList:");
}

id objc_msgSend_setPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousServerChangeToken:");
}

id objc_msgSend_setPrimitiveValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimitiveValue:forKey:");
}

id objc_msgSend_setProcessID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessID:");
}

id objc_msgSend_setProcessedRecordCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessedRecordCount:");
}

id objc_msgSend_setProcessingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingQueue:");
}

id objc_msgSend_setProcessingSelectorDelayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessingSelectorDelayer:");
}

id objc_msgSend_setPropertiesToFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertiesToFetch:");
}

id objc_msgSend_setPropertiesToUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPropertiesToUpdate:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQuantity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuantity:");
}

id objc_msgSend_setQueryGenerationFromToken_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryGenerationFromToken:error:");
}

id objc_msgSend_setQueuePriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuePriority:");
}

id objc_msgSend_setRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRadius:");
}

id objc_msgSend_setRd_associatedCoreSpotlightDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRd_associatedCoreSpotlightDelegate:");
}

id objc_msgSend_setRd_isExcludedFromBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRd_isExcludedFromBackup:");
}

id objc_msgSend_setReachabilityChangeSyncThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachabilityChangeSyncThrottleInterval:");
}

id objc_msgSend_setRecognizedCloudObjectClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecognizedCloudObjectClasses:");
}

id objc_msgSend_setRecordIDsToSortChildrenAfterFetching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordIDsToSortChildrenAfterFetching:");
}

id objc_msgSend_setRecordWasChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordWasChangedBlock:");
}

id objc_msgSend_setRecordWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordWithIDWasDeletedBlock:");
}

id objc_msgSend_setRecordZoneChangeTokensUpdatedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneChangeTokensUpdatedBlock:");
}

id objc_msgSend_setRecordZoneFetchCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneFetchCompletionBlock:");
}

id objc_msgSend_setRecordZoneWithIDChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDChangedBlock:");
}

id objc_msgSend_setRecordZoneWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDWasDeletedBlock:");
}

id objc_msgSend_setReferenceFrameString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferenceFrameString:");
}

id objc_msgSend_setRelationshipKeyPathsForPrefetching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelationshipKeyPathsForPrefetching:");
}

id objc_msgSend_setRequestQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestQueue:");
}

id objc_msgSend_setResetInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResetInterval:");
}

id objc_msgSend_setResolutionTokenMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolutionTokenMap:");
}

id objc_msgSend_setResolutionTokenMapData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolutionTokenMapData:");
}

id objc_msgSend_setResultType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultType:");
}

id objc_msgSend_setResultsLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultsLimit:");
}

id objc_msgSend_setResultsLimitPerSyncOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultsLimitPerSyncOperation:");
}

id objc_msgSend_setRetryCountsByOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryCountsByOperationType:");
}

id objc_msgSend_setRetryTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryTimer:");
}

id objc_msgSend_setReturnsDistinctResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReturnsDistinctResults:");
}

id objc_msgSend_setSaveCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSaveCount:");
}

id objc_msgSend_setSavedImageDeduplicationApproximatePerRunDeleteLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavedImageDeduplicationApproximatePerRunDeleteLimit:");
}

id objc_msgSend_setSavedImageDeduplicationBackoffThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavedImageDeduplicationBackoffThrottleInterval:");
}

id objc_msgSend_setSavedImageDeduplicationDefaultThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavedImageDeduplicationDefaultThrottleInterval:");
}

id objc_msgSend_setSavedImageDeduplicationRateReduceFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavedImageDeduplicationRateReduceFactor:");
}

id objc_msgSend_setSchedulingState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSchedulingState:");
}

id objc_msgSend_setSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelector:");
}

id objc_msgSend_setServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerChangeToken:");
}

id objc_msgSend_setServerChangeTokenData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerChangeTokenData:");
}

id objc_msgSend_setServerShareIfNewer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerShareIfNewer:");
}

id objc_msgSend_setShouldAddStoreAsynchronously_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAddStoreAsynchronously:");
}

id objc_msgSend_setShouldInferMappingModelAutomatically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldInferMappingModelAutomatically:");
}

id objc_msgSend_setShouldMigrateStoreAutomatically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldMigrateStoreAutomatically:");
}

id objc_msgSend_setShouldPerformCloudSchemaCatchUpSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPerformCloudSchemaCatchUpSync:");
}

id objc_msgSend_setShouldSendContentAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSendContentAvailable:");
}

id objc_msgSend_setShouldSortChildrenAfterFetching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSortChildrenAfterFetching:");
}

id objc_msgSend_setShouldStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldStart:");
}

id objc_msgSend_setShouldSyncUpDeleteIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSyncUpDeleteIfNeeded");
}

id objc_msgSend_setShouldUnregisterBuddy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUnregisterBuddy:");
}

id objc_msgSend_setSortDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortDescriptors:");
}

id objc_msgSend_setSpotlightIndexCountUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpotlightIndexCountUpdated:");
}

id objc_msgSend_setStaledFileAttachmentCleanupBackoffThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStaledFileAttachmentCleanupBackoffThrottleInterval:");
}

id objc_msgSend_setStaledFileAttachmentCleanupDefaultThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStaledFileAttachmentCleanupDefaultThrottleInterval:");
}

id objc_msgSend_setStaledFileAttachmentCleanupPerRunDeleteLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStaledFileAttachmentCleanupPerRunDeleteLimit:");
}

id objc_msgSend_setStaledFileAttachmentCleanupRateReduceFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStaledFileAttachmentCleanupRateReduceFactor:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStorage:");
}

id objc_msgSend_setStoreController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreController:");
}

id objc_msgSend_setStoreID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoreID:");
}

id objc_msgSend_setSubscribedSubscriptionIDsByAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscribedSubscriptionIDsByAccountID:");
}

id objc_msgSend_setSubscribedSubscriptionIDsLastModifiedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscribedSubscriptionIDsLastModifiedDate:");
}

id objc_msgSend_setSuggestConversionToGroceryListDefaultThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuggestConversionToGroceryListDefaultThrottleInterval:");
}

id objc_msgSend_setSuggestConversionToGroceryListRateReduceFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuggestConversionToGroceryListRateReduceFactor:");
}

id objc_msgSend_setSuggestedAttributesAutoTrainingThrottleInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuggestedAttributesAutoTrainingThrottleInterval:");
}

id objc_msgSend_setSuggestedAttributesHarvestingOverrides_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuggestedAttributesHarvestingOverrides:");
}

id objc_msgSend_setSuggestedAttributesTrainingOverrides_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuggestedAttributesTrainingOverrides:");
}

id objc_msgSend_setSupportsCloudKitSyncing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsCloudKitSyncing:");
}

id objc_msgSend_setSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspended:");
}

id objc_msgSend_setSyncDisabledByServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncDisabledByServer:");
}

id objc_msgSend_setSyncReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncReason:");
}

id objc_msgSend_setTapToRadarThrottlingInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTapToRadarThrottlingInterval:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTemplatePublicLinkOperationTimeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemplatePublicLinkOperationTimeoutInterval:");
}

id objc_msgSend_setTemplatePublicLinkTTL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemplatePublicLinkTTL:");
}

id objc_msgSend_setThrottlingLevels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThrottlingLevels:");
}

id objc_msgSend_setThrottlingPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThrottlingPolicy:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForResource:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:");
}

id objc_msgSend_setTotalListCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalListCount:");
}

id objc_msgSend_setTotalMigratedCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalMigratedCount:");
}

id objc_msgSend_setTransactionAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransactionAuthor:");
}

id objc_msgSend_setTransactionNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransactionNumber:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUpCloudSchemaCatchUpSyncContextMapWithAccountIDs_syncReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpCloudSchemaCatchUpSyncContextMapWithAccountIDs:syncReason:");
}

id objc_msgSend_setUploadSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadSuspended:");
}

id objc_msgSend_setUuidForChangeTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUuidForChangeTracking:");
}

id objc_msgSend_setValidateForInsertion_handledJournalEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValidateForInsertion_handledJournalEntries:");
}

id objc_msgSend_setValidateForUpdate_handledJournalEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValidateForUpdate_handledJournalEntries:");
}

id objc_msgSend_setValidationPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValidationPolicy:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVersion_forOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:forOperation:");
}

id objc_msgSend_setWaitToFireUntilRequestsStop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitToFireUntilRequestsStop:");
}

id objc_msgSend_setWasInternetReachable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasInternetReachable:");
}

id objc_msgSend_setWasMigrated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasMigrated:");
}

id objc_msgSend_setWillSave_handledExtraneousAlarmsMarking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWillSave_handledExtraneousAlarmsMarking:");
}

id objc_msgSend_setWillSave_handledUpdateDisplayDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWillSave_handledUpdateDisplayDate:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_setZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneName:");
}

id objc_msgSend_set__unsafe_doesNotWorkUniversally_affectedStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set__unsafe_doesNotWorkUniversally_affectedStores:");
}

id objc_msgSend_set_sourceApplicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_sourceApplicationBundleIdentifier:");
}

id objc_msgSend_setupAPSConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupAPSConnection");
}

id objc_msgSend_sha512Sum(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sha512Sum");
}

id objc_msgSend_share(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "share");
}

id objc_msgSend_shareSystemFieldsTransformer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareSystemFieldsTransformer");
}

id objc_msgSend_shareTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareTitle");
}

id objc_msgSend_shareType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareType");
}

id objc_msgSend_sharedBabysitter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedBabysitter");
}

id objc_msgSend_sharedCloudDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedCloudDatabase");
}

id objc_msgSend_sharedConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedConfiguration");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedReachabilityForInternetConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedReachabilityForInternetConnection");
}

id objc_msgSend_sharedSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedSettings");
}

id objc_msgSend_sharedZoneWasDeleted_accountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedZoneWasDeleted:accountID:");
}

id objc_msgSend_sharees(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharees");
}

id objc_msgSend_sharingStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharingStatus");
}

id objc_msgSend_shortDebugName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortDebugName");
}

id objc_msgSend_shortLoggingDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortLoggingDescription");
}

id objc_msgSend_shouldAttemptLocalObjectMerge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAttemptLocalObjectMerge");
}

id objc_msgSend_shouldBeDeletedFromLocalDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBeDeletedFromLocalDatabase");
}

id objc_msgSend_shouldBeIgnoredForSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBeIgnoredForSync");
}

id objc_msgSend_shouldCascadeMarkAsDeleteInto_forRelationship_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCascadeMarkAsDeleteInto:forRelationship:");
}

id objc_msgSend_shouldIgnoreErrorForBackoffTimer_operationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldIgnoreErrorForBackoffTimer:operationType:");
}

id objc_msgSend_shouldMarkAsDeletedInsteadOfDeletingImmediately(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldMarkAsDeletedInsteadOfDeletingImmediately");
}

id objc_msgSend_shouldPerformCloudSchemaCatchUpSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPerformCloudSchemaCatchUpSync");
}

id objc_msgSend_shouldPerformStagedLightweightMigrationForStoreAtStoreURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPerformStagedLightweightMigrationForStoreAtStoreURL:");
}

id objc_msgSend_shouldRetryMergeLocalObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRetryMergeLocalObjects");
}

id objc_msgSend_shouldSortChildrenAfterFetching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSortChildrenAfterFetching");
}

id objc_msgSend_shouldStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldStart");
}

id objc_msgSend_shouldSyncToCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSyncToCloud");
}

id objc_msgSend_shouldUnregisterBuddy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUnregisterBuddy");
}

id objc_msgSend_shouldValidateMoveAcrossSharedList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldValidateMoveAcrossSharedList");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_smartListType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smartListType");
}

id objc_msgSend_sortChildrenObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortChildrenObjects");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sortedRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedRecords:");
}

id objc_msgSend_spotlightIndexCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spotlightIndexCount");
}

id objc_msgSend_spotlightIndexCountUpdated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spotlightIndexCountUpdated");
}

id objc_msgSend_sqliteErrorWithCode_path_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sqliteErrorWithCode:path:format:");
}

id objc_msgSend_stagedLightweightCoreDataMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stagedLightweightCoreDataMigration");
}

id objc_msgSend_stagedMigrationsInfoForPersistentStoreAt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stagedMigrationsInfoForPersistentStoreAt:");
}

id objc_msgSend_staledFileAttachmentCleanupBackoffThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "staledFileAttachmentCleanupBackoffThrottleInterval");
}

id objc_msgSend_staledFileAttachmentCleanupDefaultThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "staledFileAttachmentCleanupDefaultThrottleInterval");
}

id objc_msgSend_staledFileAttachmentCleanupPerRunDeleteLimit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "staledFileAttachmentCleanupPerRunDeleteLimit");
}

id objc_msgSend_staledFileAttachmentCleanupRateReduceFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "staledFileAttachmentCleanupRateReduceFactor");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startAccessingSecurityScopedResource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAccessingSecurityScopedResource");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDate");
}

id objc_msgSend_startNotifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNotifier");
}

id objc_msgSend_startPolicyResetTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPolicyResetTimer");
}

id objc_msgSend_startRetryTimerIfNecessaryWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRetryTimerIfNecessaryWithError:");
}

id objc_msgSend_startSpotlightIndexing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSpotlightIndexing");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusCode");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stop");
}

id objc_msgSend_stopAccessingSecurityScopedResource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAccessingSecurityScopedResource");
}

id objc_msgSend_stopCoreSpotlightDelegatesForStores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopCoreSpotlightDelegatesForStores:");
}

id objc_msgSend_stopNotifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopNotifier");
}

id objc_msgSend_stopSpotlightIndexing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSpotlightIndexing");
}

id objc_msgSend_storage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storage");
}

id objc_msgSend_storageFrom_accountID_alarmID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storageFrom:accountID:alarmID:");
}

id objc_msgSend_storeBackupURLWithFileName_withContainerURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeBackupURLWithFileName:withContainerURL:");
}

id objc_msgSend_storeController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeController");
}

id objc_msgSend_storeControllerManagedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeControllerManagedObjectContext");
}

id objc_msgSend_storeFileNameWithStoreName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeFileNameWithStoreName:");
}

id objc_msgSend_storeForAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeForAccountIdentifier:");
}

id objc_msgSend_storeID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeID");
}

id objc_msgSend_storeURLWithName_withContainerURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeURLWithName:withContainerURL:");
}

id objc_msgSend_storesForAccountTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storesForAccountTypes:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByDeletingLastPathComponent");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByDeletingPathExtension");
}

id objc_msgSend_stringByStandardizingPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByStandardizingPath");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringRepresentation");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strongToStrongObjectsMapTable");
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strongToWeakObjectsMapTable");
}

id objc_msgSend_subclassNamesOfREMCDObjectRepresentingRootCoreDataEntities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subclassNamesOfREMCDObjectRepresentingRootCoreDataEntities");
}

id objc_msgSend_subclassesOfREMCDObjectRepresentingRootCoreDataEntities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subclassesOfREMCDObjectRepresentingRootCoreDataEntities");
}

id objc_msgSend_subentities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subentities");
}

id objc_msgSend_subscribedSubscriptionIDsByAccountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribedSubscriptionIDsByAccountID");
}

id objc_msgSend_subscribedSubscriptionIDsLastModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribedSubscriptionIDsLastModifiedDate");
}

id objc_msgSend_subscriptionForDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionForDatabase:");
}

id objc_msgSend_subscriptionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionID");
}

id objc_msgSend_subscriptionOwnerUserRecordID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionOwnerUserRecordID");
}

id objc_msgSend_subscriptionOwnerUserRecordName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionOwnerUserRecordName");
}

id objc_msgSend_subscriptionsToSave(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionsToSave");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_success(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "success");
}

id objc_msgSend_suggestConversionToGroceryListDefaultThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestConversionToGroceryListDefaultThrottleInterval");
}

id objc_msgSend_suggestConversionToGroceryListRateReduceFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestConversionToGroceryListRateReduceFactor");
}

id objc_msgSend_suggestedAttributesAutoTrainingThrottleInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestedAttributesAutoTrainingThrottleInterval");
}

id objc_msgSend_suggestedAttributesHarvestingOverrides(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestedAttributesHarvestingOverrides");
}

id objc_msgSend_suggestedAttributesTrainingOverrides(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suggestedAttributesTrainingOverrides");
}

id objc_msgSend_superentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superentity");
}

id objc_msgSend_supportsAccountUtils(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsAccountUtils");
}

id objc_msgSend_supportsAlarmEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsAlarmEngine");
}

id objc_msgSend_supportsApplicationShortcuts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsApplicationShortcuts");
}

id objc_msgSend_supportsAssignmentNotificationEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsAssignmentNotificationEngine");
}

id objc_msgSend_supportsAssignments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsAssignments");
}

id objc_msgSend_supportsCloudKitSyncing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsCloudKitSyncing");
}

id objc_msgSend_supportsCloudSchemaCatchUpSyncBackgroundScheduling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsCloudSchemaCatchUpSyncBackgroundScheduling");
}

id objc_msgSend_supportsCoreSpotlightIndexing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsCoreSpotlightIndexing");
}

id objc_msgSend_supportsDeletionByTTL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDeletionByTTL");
}

id objc_msgSend_supportsLocalInternalAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsLocalInternalAccount");
}

id objc_msgSend_supportsMoveAcrossLists(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsMoveAcrossLists");
}

id objc_msgSend_supportsMoveAcrossSharedLists(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsMoveAcrossSharedLists");
}

id objc_msgSend_supportsSharedInlineTagAutoConvertEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsSharedInlineTagAutoConvertEngine");
}

id objc_msgSend_supportsSuggestedAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsSuggestedAttributes");
}

id objc_msgSend_supportsSyncActivityNotificationEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsSyncActivityNotificationEngine");
}

id objc_msgSend_supportsSyncingToCloudKit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsSyncingToCloudKit");
}

id objc_msgSend_supportsTimelineEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsTimelineEngine");
}

id objc_msgSend_sync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sync");
}

id objc_msgSend_syncDisabledByServer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncDisabledByServer");
}

id objc_msgSend_syncReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncReason");
}

id objc_msgSend_syncWithReason_discretionary_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncWithReason:discretionary:completionHandler:");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronize");
}

id objc_msgSend_systemBuildVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemBuildVersion");
}

id objc_msgSend_systemTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemTimeZone");
}

id objc_msgSend_tapToRadarThrottlingInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tapToRadarThrottlingInterval");
}

id objc_msgSend_target(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "target");
}

id objc_msgSend_template(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "template");
}

id objc_msgSend_templatePublicLinkOperationTimeoutInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "templatePublicLinkOperationTimeoutInterval");
}

id objc_msgSend_templatePublicLinkTTL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "templatePublicLinkTTL");
}

id objc_msgSend_temporaryAssetDirectoryURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temporaryAssetDirectoryURL");
}

id objc_msgSend_temporaryAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temporaryAssets");
}

id objc_msgSend_throttlingLevels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "throttlingLevels");
}

id objc_msgSend_throttlingPolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "throttlingPolicy");
}

id objc_msgSend_timeInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeInterval");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeIntervalToRetryAfterFromError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalToRetryAfterFromError:");
}

id objc_msgSend_timeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZone");
}

id objc_msgSend_timeZoneFromName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneFromName:");
}

id objc_msgSend_timeZoneWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneWithName:");
}

id objc_msgSend_timeoutIntervalForResource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeoutIntervalForResource");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestamp");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "token");
}

id objc_msgSend_tokenByRegisteringAccount_forOperationWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenByRegisteringAccount:forOperationWithName:");
}

id objc_msgSend_tombstone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tombstone");
}

id objc_msgSend_tooManyLoadedStoresError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tooManyLoadedStoresError");
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topic");
}

id objc_msgSend_topologicallySortRecords_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topologicallySortRecords:withError:");
}

id objc_msgSend_topologicallyWeightedEntitiesForEffectiveMinimumSupportedVersionPropagation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topologicallyWeightedEntitiesForEffectiveMinimumSupportedVersionPropagation");
}

id objc_msgSend_totalListCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalListCount");
}

id objc_msgSend_totalMigratedCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalMigratedCount");
}

id objc_msgSend_transactionAuthor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionAuthor");
}

id objc_msgSend_transactionNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionNumber");
}

id objc_msgSend_transformedValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformedValue:");
}

id objc_msgSend_traversalOrder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traversalOrder");
}

id objc_msgSend_traverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traverse:");
}

id objc_msgSend_traverseByPostOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traverseByPostOrder:");
}

id objc_msgSend_traverseObjectTreeUsingVisitedMap_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traverseObjectTreeUsingVisitedMap:handler:");
}

id objc_msgSend_trigger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trigger");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniquenessConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniquenessConstraints");
}

id objc_msgSend_unitTest_notificationCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unitTest_notificationCenter");
}

id objc_msgSend_unitTest_setLegacyApplicationDocumentsURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unitTest_setLegacyApplicationDocumentsURL:");
}

id objc_msgSend_unittest_isTestingDataSeparation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unittest_isTestingDataSeparation");
}

id objc_msgSend_unmarkForDeletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unmarkForDeletion");
}

id objc_msgSend_unobserve(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unobserve");
}

id objc_msgSend_unobservePrimaryCloudKitAccountPersonIDSaltChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unobservePrimaryCloudKitAccountPersonIDSaltChanges");
}

id objc_msgSend_unobservePrimaryCloudKitAccountPersonIDSaltChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unobservePrimaryCloudKitAccountPersonIDSaltChanges:");
}

id objc_msgSend_unobserveWithObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unobserveWithObserver:");
}

id objc_msgSend_unsafeUntilSystemReady_allCloudKitRemindersEnabledICloudACAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsafeUntilSystemReady_allCloudKitRemindersEnabledICloudACAccounts");
}

id objc_msgSend_unsafeUntilSystemReady_allICloudACAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsafeUntilSystemReady_allICloudACAccounts");
}

id objc_msgSend_unsafeUntilSystemReady_allICloudAccountsWithCloudKitEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsafeUntilSystemReady_allICloudAccountsWithCloudKitEnabled");
}

id objc_msgSend_unsafeUntilSystemReady_hashedAccountPersonIDForAccount_usingSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsafeUntilSystemReady_hashedAccountPersonIDForAccount:usingSalt:");
}

id objc_msgSend_unsafeUntilSystemReady_icloudACAccountMatchingAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsafeUntilSystemReady_icloudACAccountMatchingAccountIdentifier:");
}

id objc_msgSend_unsafeUntilSystemReady_primaryCloudKitAccountInContext_appleAccountUtilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsafeUntilSystemReady_primaryCloudKitAccountInContext:appleAccountUtilities:");
}

id objc_msgSend_unsafeUntilSystemReady_primaryICloudACAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsafeUntilSystemReady_primaryICloudACAccount");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_updateAccountStatusWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAccountStatusWithCompletionHandler:");
}

id objc_msgSend_updateAttachmentFile_accountID_fileName_sha512Sum_fileURL_keepSource_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAttachmentFile:accountID:fileName:sha512Sum:fileURL:keepSource:error:");
}

id objc_msgSend_updateChangeCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateChangeCount");
}

id objc_msgSend_updateCloudContextStateWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCloudContextStateWithReason:");
}

id objc_msgSend_updateCloudContextStateWithSyncOption_syncReason_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCloudContextStateWithSyncOption:syncReason:withCompletionHandler:");
}

id objc_msgSend_updateDisplayDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDisplayDate");
}

id objc_msgSend_updateDisplayDateWithAlarm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDisplayDateWithAlarm:");
}

id objc_msgSend_updateDisplayDateWithDueDateComponents_alarm_alarmsProviding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDisplayDateWithDueDateComponents:alarm:alarmsProviding:");
}

id objc_msgSend_updateDisplayDatesIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDisplayDatesIn:");
}

id objc_msgSend_updateForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateForKey:");
}

id objc_msgSend_updateNetworkActivityWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNetworkActivityWithValue:");
}

id objc_msgSend_updateObjectWithShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateObjectWithShare:");
}

id objc_msgSend_updateParentReferenceIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateParentReferenceIfNecessary");
}

id objc_msgSend_updateSubscriptionsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSubscriptionsWithCompletionHandler:");
}

id objc_msgSend_updateUserRecordWithAccountID_updateFunction_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUserRecordWithAccountID:updateFunction:completionHandler:");
}

id objc_msgSend_updatedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedObjects");
}

id objc_msgSend_uploadSuspended(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadSuspended");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_userDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDefaults");
}

id objc_msgSend_userIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userIdentity");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userRecordID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userRecordID");
}

id objc_msgSend_userRecordNameForContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userRecordNameForContainer:");
}

id objc_msgSend_utility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "utility");
}

id objc_msgSend_utilityQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "utilityQueue");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uuid");
}

id objc_msgSend_uuidForChangeTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uuidForChangeTracking");
}

id objc_msgSend_validPersistentStores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validPersistentStores");
}

id objc_msgSend_validateAccountZoneIDsNeedingFetchChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateAccountZoneIDsNeedingFetchChanges");
}

id objc_msgSend_validateDirtyEffectiveMinimumSupportedVersions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateDirtyEffectiveMinimumSupportedVersions");
}

id objc_msgSend_validateEffectiveMinimumSupportedVersionApplyingChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateEffectiveMinimumSupportedVersionApplyingChange:");
}

id objc_msgSend_validateForInsert_Swift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateForInsert_Swift:");
}

id objc_msgSend_validateForInsertion_handledJournalEntries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateForInsertion_handledJournalEntries");
}

id objc_msgSend_validateForUpdate_Swift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateForUpdate_Swift:");
}

id objc_msgSend_validateForUpdate_handledJournalEntries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateForUpdate_handledJournalEntries");
}

id objc_msgSend_validateIndexVersionWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateIndexVersionWithCompletionHandler:");
}

id objc_msgSend_validateWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateWithAccount:");
}

id objc_msgSend_validationErrorDifferentZoneObjectID_zoneOwnerName_parentObjectID_parentZoneOwnerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validationErrorDifferentZoneObjectID:zoneOwnerName:parentObjectID:parentZoneOwnerName:");
}

id objc_msgSend_validationErrorListHasNoAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validationErrorListHasNoAccount:");
}

id objc_msgSend_validationErrorMoveFromAccount_toAccount_objectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validationErrorMoveFromAccount:toAccount:objectID:");
}

id objc_msgSend_validationErrorMoveReminderFromList_toList_inAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validationErrorMoveReminderFromList:toList:inAccount:");
}

id objc_msgSend_validationErrorNestedSubtask_parentReminderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validationErrorNestedSubtask:parentReminderID:");
}

id objc_msgSend_validationErrorSubtaskAndParentNotOnSameList_parentReminderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validationErrorSubtaskAndParentNotOnSameList:parentReminderID:");
}

id objc_msgSend_validationPolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validationPolicy");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_versionForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionForOperation:");
}

id objc_msgSend_versionsByOperationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionsByOperationQueue");
}

id objc_msgSend_versionsByRecordIDByOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionsByRecordIDByOperation");
}

id objc_msgSend_waitForSyncEngineSystemAvailabilityBlockingQueue_completionQueue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForSyncEngineSystemAvailabilityBlockingQueue:completionQueue:completionBlock:");
}

id objc_msgSend_waitToFireUntilRequestsStop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitToFireUntilRequestsStop");
}

id objc_msgSend_waitUntilAllOperationsAreFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitUntilAllOperationsAreFinished");
}

id objc_msgSend_waiterID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waiterID");
}

id objc_msgSend_wasInternetReachable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wasInternetReachable");
}

id objc_msgSend_wasMigrated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wasMigrated");
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakToStrongObjectsMapTable");
}

id objc_msgSend_willAccessValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willAccessValueForKey:");
}

id objc_msgSend_willChangeList_toList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willChangeList:toList:");
}

id objc_msgSend_willChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willChangeValueForKey:");
}

id objc_msgSend_willChangeValueForKey_Swfit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willChangeValueForKey_Swfit:");
}

id objc_msgSend_willSave_Swift(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willSave_Swift");
}

id objc_msgSend_willSave_handledExtraneousAlarmsMarking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willSave_handledExtraneousAlarmsMarking");
}

id objc_msgSend_willSave_handledUpdateDisplayDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willSave_handledUpdateDisplayDate");
}

id objc_msgSend_withManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "withManagedObjectContext:");
}

id objc_msgSend_wrappedFeatureFlagsWithRawValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wrappedFeatureFlagsWithRawValue:");
}

id objc_msgSend_write(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "write");
}

id objc_msgSend_writeMigrationStateTo_didChooseToMigrate_didFinishMigration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeMigrationStateTo:didChooseToMigrate:didFinishMigration:");
}

id objc_msgSend_writeToURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:error:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_xpcDefaultQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcDefaultQueue");
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneID");
}

id objc_msgSend_zoneIDsFromZoneInfos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIDsFromZoneInfos:");
}

id objc_msgSend_zoneInfosFromZoneIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneInfosFromZoneIDs:");
}

id objc_msgSend_zoneName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneName");
}

