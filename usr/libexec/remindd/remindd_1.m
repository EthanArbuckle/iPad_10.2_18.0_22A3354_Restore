uint64_t sub_1000EFC84()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26[3];

  v1 = v0;
  v25 = *v0;
  v2 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v23 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_10084A290);
  v24 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1008373B0 != -1)
    swift_once(&qword_1008373B0, sub_1003AAB88);
  NSNotificationCenter.publisher(for:object:)(qword_100871EC0, 0);

  if (qword_100836F28 != -1)
    swift_once(&qword_100836F28, sub_1001BA8F8);
  v12 = (void *)qword_100871CE8;
  v26[0] = (id)qword_100871CE8;
  v13 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v4, 1, 1, v13);
  v14 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v15 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v16 = sub_1000A5E70();
  v17 = v12;
  Publisher.receive<A>(on:options:)(v26, v4, v5, v14, v15, v16);
  sub_10000882C((uint64_t)v4, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  sub_1000A5F84((unint64_t *)&qword_10083AA10, (uint64_t *)&unk_10084A290, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v18 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v1, sub_1000EFF9C, 0, 0, 0, v8, v25);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  v19 = v1 + 10;
  swift_beginAccess(v19, v26, 33, 0);
  v20 = sub_10001A630((uint64_t *)&unk_1008380C0);
  v21 = sub_1000A5F84((unint64_t *)&unk_10083A9F0, (uint64_t *)&unk_1008380C0, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v19, v20, v21);
  swift_endAccess(v26);
  return swift_release(v18);
}

void sub_1000EFF9C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_100836CF8 != -1)
    swift_once(&qword_100836CF8, sub_1000EDEE4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083A860);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ExchACS: Received DidCompleteInitializeAllAccountsNotification", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_1000EF050();
}

void sub_1000F0074(BOOL *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_1000F29D4();
  v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = _CocoaArrayWrapper.endIndex.getter(v2);
  }
  else
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v3);
  *a1 = v4 != 0;
}

void sub_1000F00E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  Class isa;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v29, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v13 = Strong;
    if (qword_100836CF8 != -1)
      swift_once(&qword_100836CF8, sub_1000EDEE4);
    v14 = type metadata accessor for Logger(0);
    sub_10001AAA8(v14, (uint64_t)qword_10083A860);
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a4, v8);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(12, -1);
      v26[2] = a2;
      v19 = (uint8_t *)v18;
      v20 = swift_slowAlloc(32, -1);
      v28 = v20;
      v26[1] = a1;
      *(_DWORD *)v19 = 136446210;
      v26[0] = v19 + 4;
      v21 = UUID.uuidString.getter(v20);
      v23 = v22;
      v27 = sub_10001A820(v21, v22, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      v24 = swift_bridgeObjectRelease(v23);
      (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v24);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "ExchACS received a primary CK account personIDSalt change or initial value {debugTrackingUUID: %{public}s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000F0334(isa);
    swift_release(v13);

  }
}

void sub_1000F0334(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  NSString v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD v17[5];
  uint64_t v18;

  v2 = v1;
  v3 = a1;
  v4 = NSData.startIndex.getter();
  v5 = NSData.endIndex.getter();

  if (v4 != v5)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v2 + 32, v6);
    if (Strong)
    {
      v8 = (void *)Strong;
      v9 = String._bridgeToObjectiveC()();
      v10 = objc_msgSend(v8, "newBackgroundContextWithAuthor:", v9);

      if (v10)
      {
        v11 = (_QWORD *)swift_allocObject(&unk_1007E3D98, 40, 7);
        v11[2] = v2;
        v11[3] = v10;
        v11[4] = v3;
        v12 = swift_allocObject(&unk_1007E3DC0, 32, 7);
        *(_QWORD *)(v12 + 16) = sub_1000F2CC8;
        *(_QWORD *)(v12 + 24) = v11;
        v17[4] = sub_1000A66B8;
        v18 = v12;
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 1107296256;
        v17[2] = sub_1000098C4;
        v17[3] = &unk_1007E3DD8;
        v13 = _Block_copy(v17);
        v14 = v18;
        v15 = v3;
        swift_retain(v2);
        v16 = v10;
        swift_retain(v12);
        swift_release(v14);
        objc_msgSend(v16, "performBlockAndWait:", v13);

        _Block_release(v13);
        LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v12, "", 118, 213, 45, 1);
        swift_release(v11);
        swift_release(v12);
        if ((v16 & 1) != 0)
          __break(1u);
      }
    }
  }
}

void sub_1000F04E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD v34[3];
  char v35[8];
  uint64_t v36;
  uint64_t v37;
  char v38[24];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v38, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v11 = Strong;
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    v12 = (void *)_convertErrorToNSError(_:)(a1);
    if (qword_100837768 != -1)
      swift_once(&qword_100837768, sub_1004EDADC);
    v13 = static NSObject.== infix(_:_:)(v12);

    if ((v13 & 1) != 0)
    {
      swift_release(v11);
    }
    else
    {
      if (qword_100836CF8 != -1)
        swift_once(&qword_100836CF8, sub_1000EDEE4);
      v14 = type metadata accessor for Logger(0);
      sub_10001AAA8(v14, (uint64_t)qword_10083A860);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
      swift_errorRetain(a1);
      v15 = swift_errorRetain(a1);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      v18 = v17;
      if (os_log_type_enabled(v16, v17))
      {
        v19 = swift_slowAlloc(22, -1);
        v20 = swift_slowAlloc(64, -1);
        v33 = v20;
        v37 = v20;
        *(_DWORD *)v19 = 136446466;
        v32 = v18;
        v21 = UUID.uuidString.getter(v20);
        v23 = v22;
        v36 = sub_10001A820(v21, v22, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        v24 = swift_bridgeObjectRelease(v23);
        (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v24);
        *(_WORD *)(v19 + 12) = 2082;
        swift_getErrorValue(a1, v35, v34);
        v25 = Error.rem_errorDescription.getter(v34[1], v34[2]);
        v27 = v26;
        v36 = sub_10001A820(v25, v26, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        swift_bridgeObjectRelease(v27);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v32, "ExchACS received a primary CK account personIDSalt error {debugTrackingUUID: %{public}s, saltError: %{public}s}", (uint8_t *)v19, 0x16u);
        v28 = v33;
        swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v19, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
      }

      v29 = (void *)_convertErrorToNSError(_:)(a1);
      sub_1000F0818(v29, v30);
      swift_release(v11);

    }
  }
}

void sub_1000F0818(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v5;
  NSString v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  char isEscapingClosureAtFileLocation;
  _QWORD v15[5];
  uint64_t v16;

  Strong = swift_unknownObjectWeakLoadStrong(v2 + 32, a2);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "newBackgroundContextWithAuthor:", v6);

    if (v7)
    {
      v8 = (_QWORD *)swift_allocObject(&unk_1007E3D20, 40, 7);
      v8[2] = v2;
      v8[3] = v7;
      v8[4] = a1;
      v9 = swift_allocObject(&unk_1007E3D48, 32, 7);
      *(_QWORD *)(v9 + 16) = sub_1000F29B8;
      *(_QWORD *)(v9 + 24) = v8;
      v15[4] = sub_1000A66B8;
      v16 = v9;
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 1107296256;
      v15[2] = sub_1000098C4;
      v15[3] = &unk_1007E3D60;
      v10 = _Block_copy(v15);
      v11 = v16;
      swift_retain(v2);
      v12 = v7;
      v13 = a1;
      swift_retain(v9);
      swift_release(v11);
      objc_msgSend(v12, "performBlockAndWait:", v10);

      _Block_release(v10);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 118, 251, 45, 1);
      swift_release(v8);
      swift_release(v9);
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        __break(1u);
    }
  }
}

double sub_1000F09A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unsigned __int8 v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  __n128 v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  double result;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  void (*v67)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  id v68;
  NSObject *v69;
  _QWORD v70[3];
  _BYTE v71[8];
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  id v75[3];
  uint64_t v76;

  v7 = sub_1000F29D4();
  v8 = v7;
  v74 = _swiftEmptyArrayStorage;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v13 = v7;
    else
      v13 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v9 = _CocoaArrayWrapper.endIndex.getter(v13);
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v7);
    if (!v9)
      goto LABEL_13;
  }
  if (v9 < 1)
  {
    __break(1u);
    goto LABEL_37;
  }
  v10 = 0;
  do
  {
    if ((v8 & 0xC000000000000001) != 0)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
    else
      v11 = *(id *)(v8 + 8 * v10 + 32);
    v12 = v11;
    ++v10;
    v75[0] = v11;
    sub_1000F0F0C(v75, a1, a3, &v74);

  }
  while (v9 != v10);
LABEL_13:
  swift_bridgeObjectRelease_n(v8, 2);
  v75[0] = 0;
  v14 = objc_msgSend(a2, "save:", v75);
  v15 = v75[0];
  if ((v14 & 1) == 0)
  {
    v31 = v75[0];
    v3 = _convertNSErrorToError(_:)(v15);

    swift_willThrow(v32);
    if (qword_100836CF8 == -1)
    {
LABEL_20:
      v33 = type metadata accessor for Logger(0);
      sub_10001AAA8(v33, (uint64_t)qword_10083A860);
      swift_errorRetain(v3);
      v34 = swift_errorRetain(v3);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = swift_slowAlloc(22, -1);
        v38 = swift_slowAlloc(64, -1);
        v76 = v38;
        *(_DWORD *)v37 = 136446466;
        swift_beginAccess(&v74, v75, 0, 0);
        v39 = v74;
        v40 = v74[2];
        v41 = _swiftEmptyArrayStorage;
        if (v40)
        {
          v64 = v38;
          v66 = v36;
          v69 = v35;
          v72 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain(v74);
          sub_1001C1B0C(0, v40, 0);
          v41 = _swiftEmptyArrayStorage;
          v62 = v39;
          v42 = v39 + 6;
          do
          {
            v43 = (void *)*(v42 - 2);
            if (v43)
            {
              v44 = *v42;
              swift_bridgeObjectRetain(*v42);
              v45 = v43;
              v46 = objc_msgSend(v45, "description");
              v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
              v49 = v48;
              swift_bridgeObjectRelease(v44);

            }
            else
            {
              v49 = 0xE300000000000000;
              v47 = 7104878;
            }
            v72 = v41;
            v51 = v41[2];
            v50 = v41[3];
            if (v51 >= v50 >> 1)
            {
              sub_1001C1B0C(v50 > 1, v51 + 1, 1);
              v41 = v72;
            }
            v41[2] = v51 + 1;
            v52 = &v41[2 * v51];
            v52[4] = v47;
            v52[5] = v49;
            v42 += 3;
            --v40;
          }
          while (v40);
          swift_bridgeObjectRelease(v62);
          v35 = v69;
          v36 = v66;
          v38 = v64;
        }
        v56 = Array.description.getter(v41, &type metadata for String);
        v58 = v57;
        swift_bridgeObjectRelease(v41);
        v72 = (_QWORD *)sub_10001A820(v56, v58, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
        swift_bridgeObjectRelease(v58);
        *(_WORD *)(v37 + 12) = 2080;
        swift_getErrorValue(v3, v71, v70);
        v59 = Error.rem_errorDescription.getter(v70[1], v70[2]);
        v61 = v60;
        v72 = (_QWORD *)sub_10001A820(v59, v60, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
        swift_bridgeObjectRelease(v61);
        swift_errorRelease(v3);
        swift_errorRelease(v3);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "ExchACS failed to saved account personID {accountIDs: %{public}s, saveError: %s}", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);

        swift_errorRelease(v3);
      }
      else
      {
        swift_errorRelease(v3);
        swift_errorRelease(v3);
        swift_errorRelease(v3);

      }
      v55 = v74;
      goto LABEL_35;
    }
LABEL_37:
    swift_once(&qword_100836CF8, sub_1000EDEE4);
    goto LABEL_20;
  }
  v16 = v74;
  v17 = v74[2];
  if (!v17)
  {
    v54 = v75[0];
    v55 = v16;
LABEL_35:
    *(_QWORD *)&result = swift_bridgeObjectRelease(v55).n128_u64[0];
    return result;
  }
  v65 = a1 + 40;
  v18 = v75[0];
  swift_bridgeObjectRetain(v16);
  v63 = v16;
  v20 = v16 + 6;
  do
  {
    v22 = (void *)*(v20 - 2);
    v21 = *(v20 - 1);
    v23 = *v20;
    Strong = swift_unknownObjectWeakLoadStrong(v65, v19);
    if (Strong)
    {
      v25 = Strong;
      v26 = a1;
      v27 = *(_QWORD *)(a1 + 48);
      ObjectType = swift_getObjectType(Strong);
      v67 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v27 + 24);
      v68 = v22;
      v29 = swift_bridgeObjectRetain(v23);
      v30 = v27;
      a1 = v26;
      v67(v22, v21, v23, a3, ObjectType, v30, v29);
      swift_bridgeObjectRelease(v23);

      swift_unknownObjectRelease(v25);
    }
    v20 += 3;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease_n(v63, 2);
  return result;
}

void sub_1000F0F0C(id *a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSString v29;
  id v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  uint64_t v52;
  NSObject *log;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *a1;
  v7 = objc_msgSend(*a1, "personID");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = (uint64_t)sub_1000F1550(v6, a3);
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    v16 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v16 = v12 & 0xFFFFFFFFFFFFLL;
    if (v16)
    {
      if (v11
        && (v9 == v12 && v11 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0) & 1) != 0))
      {
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v15);
      }
      else
      {
        v29 = String._bridgeToObjectiveC()();
        objc_msgSend(v6, "setPersonID:", v29);

        v30 = objc_msgSend(v6, "remObjectID");
        v31 = *a4;
        swift_bridgeObjectRetain(v15);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
        *a4 = v31;
        v52 = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v31 = sub_1002C8DA0(0, v31[2] + 1, 1, v31);
          *a4 = v31;
        }
        v34 = v31[2];
        v33 = v31[3];
        if (v34 >= v33 >> 1)
        {
          v31 = sub_1002C8DA0((_QWORD *)(v33 > 1), v34 + 1, 1, v31);
          *a4 = v31;
        }
        v31[2] = v34 + 1;
        v35 = &v31[3 * v34];
        v35[4] = v30;
        v35[5] = v14;
        v35[6] = v15;
        if (qword_100836CF8 != -1)
          swift_once(&qword_100836CF8, sub_1000EDEE4);
        v36 = type metadata accessor for Logger(0);
        sub_10001AAA8(v36, (uint64_t)qword_10083A860);
        swift_bridgeObjectRetain(v11);
        v37 = v6;
        swift_bridgeObjectRetain(v15);
        v38 = v37;
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.default.getter(v39);
        log = v39;
        if (os_log_type_enabled(v39, v40))
        {
          v51 = v40;
          v41 = swift_slowAlloc(32, -1);
          v50 = swift_slowAlloc(96, -1);
          v56 = v50;
          *(_DWORD *)v41 = 136446722;
          v42 = objc_msgSend(v38, "remObjectID");
          if (v42)
          {
            v43 = v42;
            v44 = objc_msgSend(v42, "description");

            v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
            v47 = v46;

          }
          else
          {
            v45 = 7104878;
            v47 = 0xE300000000000000;
          }
          v54 = sub_10001A820(v45, v47, &v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

          swift_bridgeObjectRelease(v47);
          *(_WORD *)(v41 + 12) = 2080;
          swift_bridgeObjectRetain(v15);
          v54 = sub_10001A820(v14, v15, &v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
          swift_bridgeObjectRelease_n(v15, 3);
          *(_WORD *)(v41 + 22) = 2080;
          if (v11)
            v48 = v52;
          else
            v48 = 7104878;
          if (v11)
            v49 = v11;
          else
            v49 = 0xE300000000000000;
          swift_bridgeObjectRetain(v11);
          v54 = sub_10001A820(v48, v49, &v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
          swift_bridgeObjectRelease_n(v11, 2);
          swift_bridgeObjectRelease(v49);
          _os_log_impl((void *)&_mh_execute_header, log, v51, "ExchACS will save update to account personID {accountIDs: %{public}s, newPersonID: %s, oldPersonID: %s}", (uint8_t *)v41, 0x20u);
          swift_arrayDestroy(v50, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v41, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v11, 2);
          swift_bridgeObjectRelease_n(v15, 2);

        }
      }
      return;
    }
    swift_bridgeObjectRelease(v13);
  }
  swift_bridgeObjectRelease(v11);
  if (qword_100836CF8 != -1)
    swift_once(&qword_100836CF8, sub_1000EDEE4);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_10083A860);
  v18 = v6;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v56 = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = objc_msgSend(v18, "remObjectID");
    if (v23)
    {
      v24 = v23;
      v25 = objc_msgSend(v23, "description");

      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

    }
    else
    {
      v26 = 7104878;
      v28 = 0xE300000000000000;
    }
    v54 = sub_10001A820(v26, v28, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "ExchACS failed to generate a hashed personID from the salt {accountID: %{public}s}", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

  }
}

id sub_1000F1550(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  NSString v46;
  id v47;
  id result;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  id v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v86 - v14;
  v16 = objc_msgSend(a1, "remObjectID");
  v87 = a2;
  if (v16)
  {
    v18 = v16;
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 40, v17);
    if (Strong)
    {
      v20 = Strong;
      v86 = v3;
      v21 = *(_QWORD *)(v3 + 48);
      ObjectType = swift_getObjectType(Strong);
      v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 40))(v18, ObjectType, v21);
      v25 = v24;
      swift_unknownObjectRelease(v20);

LABEL_4:
      if (qword_100836CF8 != -1)
        swift_once(&qword_100836CF8, sub_1000EDEE4);
      v26 = type metadata accessor for Logger(0);
      sub_10001AAA8(v26, (uint64_t)qword_10083A860);
      v27 = a1;
      swift_bridgeObjectRetain_n(v25, 2);
      v28 = v27;
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.info.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(22, -1);
        v32 = swift_slowAlloc(64, -1);
        v89 = v32;
        *(_DWORD *)v31 = 136315394;
        v33 = objc_msgSend(v28, "remObjectID");
        if (v33)
        {
          v34 = v33;
          v35 = objc_msgSend(v33, "description");

          v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
          v38 = v37;

        }
        else
        {
          v38 = 0xE300000000000000;
          v36 = 7104878;
        }
        v88 = sub_10001A820(v36, v38, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);

        swift_bridgeObjectRelease(v38);
        *(_WORD *)(v31 + 12) = 2080;
        swift_bridgeObjectRetain(v25);
        v88 = sub_10001A820(v23, v25, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
        swift_bridgeObjectRelease_n(v25, 3);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "ExchACS: hashedAccountPersonID: account: %s, nonNilUsername = %s", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v25, 2);
      }
      v59 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
      v60 = objc_msgSend(v59, "enableHashingUserIdentifiablesWithPersonIDSalt");

      v62 = v86;
      if (v60)
      {
        v63 = swift_unknownObjectWeakLoadStrong(v86 + 40, v61);
        if (v63)
        {
          v64 = v63;
          v65 = *(_QWORD *)(v62 + 48);
          v66 = swift_getObjectType(v63);
          v89 = v64;
          v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v87);
          v69 = v68;
          v23 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v65 + 8) + 8))(v23, v25, v67, v68, v66);
          swift_bridgeObjectRelease(v25);
          sub_1000A71C8(v67, v69);
          swift_unknownObjectRelease(v64);
        }
        else
        {
          v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v87);
          v72 = v71;
          v23 = String.base64EncodedHMACString(using:)(v70, v71, v23, v25);
          sub_1000A71C8(v70, v72);
          swift_bridgeObjectRelease(v25);
        }
      }
      return (id)v23;
    }

  }
  v39 = objc_msgSend(a1, "identifier");
  if (v39)
  {
    v40 = v39;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

    v41 = 0;
  }
  else
  {
    v41 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, v41, 1, v6);
  sub_1000F2CE4((uint64_t)v13, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
  {
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
  v42 = sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
  UUID.uuidString.getter(v42);
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v45 = objc_msgSend(*(id *)(v3 + 96), "accountStore");
  v46 = String._bridgeToObjectiveC()();
  v47 = objc_msgSend(v45, "accountWithIdentifier:", v46, swift_bridgeObjectRelease(v44).n128_f64[0]);

  if (!v47)
    return 0;
  v86 = v3;
  result = objc_msgSend(v47, "accountType");
  if (!result)
  {
    __break(1u);
    goto LABEL_49;
  }
  v49 = result;
  v50 = objc_msgSend(result, "identifier");

  if (!v50)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierExchange);
    v56 = v73;
    goto LABEL_33;
  }
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  v53 = v52;

  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierExchange);
  v56 = v55;
  if (!v53)
  {
LABEL_33:
    v58 = swift_bridgeObjectRelease(v56).n128_u64[0];
    goto LABEL_34;
  }
  if (v51 == v54 && v53 == v55)
    goto LABEL_39;
  v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v54, v55, 0);
  swift_bridgeObjectRelease(v53);
  v58 = swift_bridgeObjectRelease(v56).n128_u64[0];
  if ((v57 & 1) != 0)
    goto LABEL_40;
LABEL_34:
  result = objc_msgSend(v47, "accountType", *(double *)&v58);
  if (result)
  {
    v74 = result;
    v75 = objc_msgSend(result, "identifier");

    if (v75)
    {
      v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
      v53 = v77;

      v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierHotmail);
      v80 = v79;
      if (v53)
      {
        if (v76 != v78 || v53 != v79)
        {
          v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v53, v78, v79, 0);
          swift_bridgeObjectRelease(v53);
          v58 = swift_bridgeObjectRelease(v80).n128_u64[0];
          if ((v85 & 1) == 0)
          {

            return 0;
          }
LABEL_40:
          v81 = objc_msgSend(v47, "username", *(double *)&v58);
          v82 = v81;
          if (v81)
          {
            v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
            v25 = v83;

            goto LABEL_4;
          }

          return 0;
        }
LABEL_39:
        swift_bridgeObjectRelease_n(v53, 2);
        goto LABEL_40;
      }
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifierHotmail);
      v80 = v84;
    }

    swift_bridgeObjectRelease(v80);
    return 0;
  }
LABEL_49:
  __break(1u);
  return result;
}

double sub_1000F1CD4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  void (*v27)(void *, uint64_t, uint64_t, void *, uint64_t, uint64_t, __n128);
  id v28;
  __n128 v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _DWORD *v38;
  _QWORD *v39;
  int64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  double result;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  NSObject *v69;
  _QWORD *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  os_log_type_t v75;
  _DWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  id v80[3];
  uint64_t v81;

  v6 = sub_1000F29D4();
  v7 = v6;
  v79 = _swiftEmptyArrayStorage;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v12 = v6;
    else
      v12 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v8 = _CocoaArrayWrapper.endIndex.getter(v12);
    if (!v8)
      goto LABEL_13;
  }
  else
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    if (!v8)
      goto LABEL_13;
  }
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_37;
  }
  v9 = 0;
  do
  {
    if ((v7 & 0xC000000000000001) != 0)
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
    else
      v10 = *(id *)(v7 + 8 * v9 + 32);
    v11 = v10;
    ++v9;
    v80[0] = v10;
    sub_1000F22D8(v80, &v79, a3);

  }
  while (v8 != v9);
LABEL_13:
  swift_bridgeObjectRelease_n(v7, 2);
  v80[0] = 0;
  v13 = objc_msgSend(a2, "save:", v80);
  v14 = v80[0];
  if ((v13 & 1) == 0)
  {
    v30 = v80[0];
    v3 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v31);
    if (qword_100836CF8 == -1)
    {
LABEL_20:
      v32 = type metadata accessor for Logger(0);
      sub_10001AAA8(v32, (uint64_t)qword_10083A860);
      v33 = a3;
      swift_errorRetain(v3);
      v34 = v33;
      v35 = swift_errorRetain(v3);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v71 = v34;
        v75 = v37;
        v38 = (_DWORD *)swift_slowAlloc(32, -1);
        v73 = swift_slowAlloc(96, -1);
        v81 = v73;
        v76 = v38;
        *v38 = 136446722;
        swift_beginAccess(&v79, v80, 0, 0);
        v39 = v79;
        v40 = v79[2];
        v41 = _swiftEmptyArrayStorage;
        if (v40)
        {
          v69 = v36;
          v77 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain(v79);
          sub_1001C1B0C(0, v40, 0);
          v41 = _swiftEmptyArrayStorage;
          v68 = v39;
          v42 = v39 + 6;
          do
          {
            v43 = (void *)*(v42 - 2);
            if (v43)
            {
              v44 = *v42;
              swift_bridgeObjectRetain(*v42);
              v45 = v43;
              v46 = objc_msgSend(v45, "description", v68);
              v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
              v49 = v48;
              swift_bridgeObjectRelease(v44);

            }
            else
            {
              v49 = 0xE300000000000000;
              v47 = 7104878;
            }
            v77 = v41;
            v51 = v41[2];
            v50 = v41[3];
            if (v51 >= v50 >> 1)
            {
              sub_1001C1B0C(v50 > 1, v51 + 1, 1);
              v41 = v77;
            }
            v41[2] = v51 + 1;
            v52 = &v41[2 * v51];
            v52[4] = v47;
            v52[5] = v49;
            v42 += 3;
            --v40;
          }
          while (v40);
          swift_bridgeObjectRelease(v68);
          v36 = v69;
        }
        v56 = Array.description.getter(v41, &type metadata for String);
        v58 = v57;
        swift_bridgeObjectRelease(v41);
        v77 = (_QWORD *)sub_10001A820(v56, v58, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
        swift_bridgeObjectRelease(v58);
        *((_WORD *)v76 + 6) = 2082;
        v59 = v71;
        v60 = objc_msgSend(v59, "description");
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v77 = (_QWORD *)sub_10001A820(v61, v63, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

        swift_bridgeObjectRelease(v63);
        *((_WORD *)v76 + 11) = 2080;
        v77 = (_QWORD *)v3;
        swift_errorRetain(v3);
        v64 = sub_10001A630((uint64_t *)&unk_10083AA20);
        v65 = String.init<A>(describing:)(&v77, v64);
        v67 = v66;
        v77 = (_QWORD *)sub_10001A820(v65, v66, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
        swift_bridgeObjectRelease(v67);
        swift_errorRelease(v3);
        swift_errorRelease(v3);
        _os_log_impl((void *)&_mh_execute_header, v36, v75, "ExchACS failed to reset account personID to nil {accountIDs: %{public}s, saltError: %{public}s, saveError: %s}", (uint8_t *)v76, 0x20u);
        swift_arrayDestroy(v73, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        swift_slowDealloc(v76, -1, -1);

        swift_errorRelease(v3);
      }
      else
      {
        swift_errorRelease(v3);

        swift_errorRelease(v3);
        swift_errorRelease(v3);

      }
      v55 = v79;
      goto LABEL_35;
    }
LABEL_37:
    swift_once(&qword_100836CF8, sub_1000EDEE4);
    goto LABEL_20;
  }
  v15 = v79;
  v16 = v79[2];
  if (!v16)
  {
    v54 = v80[0];
    v55 = v15;
LABEL_35:
    *(_QWORD *)&result = swift_bridgeObjectRelease(v55).n128_u64[0];
    return result;
  }
  v72 = a3;
  v17 = v80[0];
  swift_bridgeObjectRetain(v15);
  v70 = v15;
  v19 = v15 + 6;
  do
  {
    v21 = (void *)*(v19 - 2);
    v20 = *(v19 - 1);
    v22 = *v19;
    Strong = swift_unknownObjectWeakLoadStrong(a1 + 40, v18);
    if (Strong)
    {
      v24 = Strong;
      v25 = *(_QWORD *)(a1 + 48);
      ObjectType = swift_getObjectType(Strong);
      v27 = *(void (**)(void *, uint64_t, uint64_t, void *, uint64_t, uint64_t, __n128))(v25 + 32);
      v28 = v21;
      v29 = swift_bridgeObjectRetain(v22);
      v27(v21, v20, v22, v72, ObjectType, v25, v29);
      swift_bridgeObjectRelease(v22);

      swift_unknownObjectRelease(v24);
    }
    v19 += 3;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease_n(v70, 2);
  return result;
}

void sub_1000F22D8(id *a1, _QWORD **a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *a1;
  v6 = objc_msgSend(*a1, "personID");
  if (v6)
  {
    v7 = v6;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v10 = v9;

    objc_msgSend(v5, "setPersonID:", 0);
    v11 = objc_msgSend(v5, "remObjectID");
    v12 = *a2;
    swift_bridgeObjectRetain(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
    *a2 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = sub_1002C8DA0(0, v12[2] + 1, 1, v12);
      *a2 = v12;
    }
    v15 = v12[2];
    v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      v12 = sub_1002C8DA0((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
      *a2 = v12;
    }
    v12[2] = v15 + 1;
    v16 = &v12[3 * v15];
    v16[4] = v11;
    v16[5] = v8;
    v37 = v8;
    v16[6] = v10;
    if (qword_100836CF8 != -1)
      swift_once(&qword_100836CF8, sub_1000EDEE4);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10083A860);
    v18 = v5;
    v19 = a3;
    swift_bridgeObjectRetain(v10);
    v20 = v18;
    v21 = v19;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(32, -1);
      v36 = swift_slowAlloc(96, -1);
      v40 = v36;
      *(_DWORD *)v24 = 136446722;
      v25 = objc_msgSend(v20, "remObjectID");
      if (v25)
      {
        v26 = v25;
        v27 = objc_msgSend(v25, "description");

        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v30 = v29;

      }
      else
      {
        v30 = 0xE300000000000000;
        v28 = 7104878;
      }
      v38 = sub_10001A820(v28, v30, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain(v10);
      v38 = sub_10001A820(v37, v10, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease_n(v10, 3);
      *(_WORD *)(v24 + 22) = 2082;
      v31 = v21;
      v32 = objc_msgSend(v31, "description");
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v35 = v34;

      v38 = sub_10001A820(v33, v35, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "ExchACS will reset account personID to nil {accountID: %{public}s, origPersonID: %s, saltError: %{public}s}", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy(v36, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v10, 2);
    }
  }
}

uint64_t sub_1000F26CC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectWeakDestroy(v0 + 32);
  sub_100008EFC(v0 + 40);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));

  return v0;
}

uint64_t sub_1000F2720()
{
  uint64_t v0;

  sub_1000F26CC();
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for RDExchangeAccountComplimentaryService()
{
  return objc_opt_self(_TtC7remindd37RDExchangeAccountComplimentaryService);
}

uint64_t sub_1000F2760()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000F278C()
{
  sub_1000EEBFC();
}

uint64_t sub_1000F2794@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(id)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = *a1;
  swift_retain(a3);
  swift_bridgeObjectRetain(v7);
  v9 = sub_1000F2EEC(v8, a2, a3);
  result = swift_release(a3);
  *a4 = v9;
  return result;
}

BOOL sub_1000F27FC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) != 0;
}

uint64_t sub_1000F2810()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F2834@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1000F2794(a1, *(uint64_t (**)(id))(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1000F283C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000F2868()
{
  uint64_t v0;

  sub_1000F0074(*(BOOL **)(v0 + 16));
}

uint64_t sub_1000F2874()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F2884()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F28AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_1000F00E0(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_1000F2900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000F2974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_1000F04E0(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

double sub_1000F29B8()
{
  uint64_t v0;

  return sub_1000F1CD4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000F29C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F29D4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[48];

  sub_10034B07C(1, 0, 7);
  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v2, v10);
  *(_OWORD *)(inited + 16) = xmmword_1006A8550;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006A8638);
  KeyPath = swift_getKeyPath(&unk_1006A8670);
  *(_QWORD *)(inited + 40) = KeyPath;
  specialized Array._endMutation()(KeyPath);
  v5 = inited;
  v6 = (void *)sub_100357FC0(inited, 0, 0, (uint64_t)v1);
  swift_bridgeObjectRelease(v5);

  v7 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v8 = NSManagedObjectContext.fetch<A>(_:)(v6, v7);

  return v8;
}

const char *sub_1000F2C7C()
{
  return "personID";
}

uint64_t sub_1000F2C94()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

double sub_1000F2CC8()
{
  uint64_t v0;

  return sub_1000F09A0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000F2CD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F2CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000F2D2C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;

  v22 = 0;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v16 >= v23)
      goto LABEL_22;
    v17 = *(_QWORD *)(v24 + 8 * v16);
    ++v6;
    if (!v17)
    {
      v6 = v16 + 1;
      if (v16 + 1 >= v23)
        goto LABEL_22;
      v17 = *(_QWORD *)(v24 + 8 * v6);
      if (!v17)
        break;
    }
LABEL_18:
    v9 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_5:
    v12 = *(_QWORD *)(a3 + 48) + 24 * v11;
    v13 = *(void **)(v12 + 16);
    v14 = *(id *)(v12 + 8);
    v15 = v13;
    LOBYTE(v13) = a4(v14);

    if ((v13 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_22:
        swift_retain(a3);
        sub_1002182CC(a1, a2, v22, a3);
        return;
      }
    }
  }
  v18 = v16 + 2;
  if (v18 >= v23)
    goto LABEL_22;
  v17 = *(_QWORD *)(v24 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v6 >= v23)
      goto LABEL_22;
    v17 = *(_QWORD *)(v24 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_18;
  }
LABEL_24:
  __break(1u);
}

uint64_t sub_1000F2EEC(uint64_t a1, uint64_t (*a2)(id), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v8;
  unsigned int v9;
  unint64_t v10;
  size_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;

  v4 = v3;
  v8 = *(_BYTE *)(a1 + 32);
  v9 = v8 & 0x3F;
  v10 = (unint64_t)((1 << v8) + 63) >> 6;
  v11 = 8 * v10;
  isStackAllocationSafe = swift_retain_n(a3, 2);
  if (v9 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v11, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v19 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    swift_retain(a3);
    sub_1000F2D2C((unint64_t *)((char *)&v19 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0)), v10, a1, a2);
    v14 = v13;
    swift_release(a1);
    v15 = swift_release(a3);
    if (v4)
      swift_willThrow(v15);
    swift_release_n(a3, 2);
  }
  else
  {
    v16 = (void *)swift_slowAlloc(v11, -1);
    bzero(v16, v11);
    swift_retain(a3);
    sub_1000F2D2C((unint64_t *)v16, v10, a1, a2);
    v14 = v17;
    swift_release(a1);
    swift_release(a3);
    swift_slowDealloc(v16, -1, -1);
    swift_release_n(a3, 2);
  }
  return v14;
}

Swift::Int sub_1000F30DC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(1u);
  return Hasher._finalize()();
}

void sub_1000F311C()
{
  Hasher._combine(_:)(1u);
}

Swift::Int sub_1000F3140(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(1u);
  return Hasher._finalize()();
}

unsigned __int16 *sub_1000F317C@<X0>(unsigned __int16 *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 1;
  return result;
}

void sub_1000F3190(_WORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000F319C()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  void (*v15)(_QWORD *);
  _QWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  Class isa;
  double v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  void (*v58)(id *, _QWORD);
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64[4];
  _BYTE v65[224];

  v1 = *v0;
  v63 = v1;
  swift_bridgeObjectRetain(v1);
  v2 = sub_1002AFEDC((uint64_t)_swiftEmptyArrayStorage);
  v60 = (_QWORD *)v2;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v56 = v0;
    v4 = v0[2];
    swift_bridgeObjectRetain(v1);
    v5 = (uint64_t *)(v1 + 40);
    v57 = v4;
    while (1)
    {
      if (*(_QWORD *)(v4 + 16))
      {
        v7 = *(v5 - 1);
        v6 = *v5;
        swift_bridgeObjectRetain_n(*v5, 2);
        v8 = sub_10001A6DC(v7, v6);
        if ((v9 & 1) != 0)
        {
          v10 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v8);
          v11 = *v10;
          v12 = v10[1];
          swift_bridgeObjectRetain(v12);
          swift_bridgeObjectRelease(v6);
          if (!v60[2]
            || (swift_bridgeObjectRetain(v12),
                sub_10001A6DC(v11, v12),
                v14 = v13,
                swift_bridgeObjectRelease(v12),
                (v14 & 1) == 0))
          {
            v24 = sub_10001A630((uint64_t *)&unk_10083A340);
            v25 = swift_allocObject(v24, 48, 7);
            *(_OWORD *)(v25 + 16) = xmmword_1006A3C00;
            *(_QWORD *)(v25 + 32) = v7;
            *(_QWORD *)(v25 + 40) = v6;
            swift_bridgeObjectRetain(v6);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
            v64[0] = v60;
            v59 = v11;
            v28 = sub_10001A6DC(v11, v12);
            v29 = v60[2];
            v30 = (v27 & 1) == 0;
            v31 = v29 + v30;
            if (__OFADD__(v29, v30))
            {
              __break(1u);
LABEL_36:
              __break(1u);
            }
            v32 = v27;
            if (v60[3] >= v31)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                v35 = v64[0];
                if ((v27 & 1) == 0)
                  goto LABEL_25;
              }
              else
              {
                sub_1002D70F4();
                v35 = v64[0];
                if ((v32 & 1) == 0)
                  goto LABEL_25;
              }
            }
            else
            {
              sub_1002CEEA4(v31, isUniquelyReferenced_nonNull_native);
              v33 = sub_10001A6DC(v59, v12);
              if ((v32 & 1) != (v34 & 1))
              {
                result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
                __break(1u);
                return result;
              }
              v28 = v33;
              v35 = v64[0];
              if ((v32 & 1) == 0)
              {
LABEL_25:
                v35[(v28 >> 6) + 8] |= 1 << v28;
                v37 = (uint64_t *)(v35[6] + 16 * v28);
                *v37 = v59;
                v37[1] = v12;
                *(_QWORD *)(v35[7] + 8 * v28) = v25;
                v38 = v35[2];
                v39 = __OFADD__(v38, 1);
                v40 = v38 + 1;
                if (v39)
                  goto LABEL_36;
                v35[2] = v40;
                swift_bridgeObjectRetain(v12);
LABEL_27:
                v60 = v35;
                swift_bridgeObjectRelease(v6);
                swift_bridgeObjectRelease(v12);
                v23 = 0x8000000000000000;
LABEL_28:
                swift_bridgeObjectRelease(v23);
                v4 = v57;
                goto LABEL_4;
              }
            }
            v36 = v35[7];
            swift_bridgeObjectRelease(*(_QWORD *)(v36 + 8 * v28));
            *(_QWORD *)(v36 + 8 * v28) = v25;
            goto LABEL_27;
          }
          v15 = sub_1001CFEF4(v64, v11, v12);
          v17 = *v16;
          if (*v16)
          {
            v18 = v16;
            v58 = (void (*)(id *, _QWORD))v15;
            swift_bridgeObjectRetain(v6);
            v19 = swift_isUniquelyReferenced_nonNull_native(v17);
            *v18 = v17;
            if ((v19 & 1) == 0)
            {
              v17 = sub_1002C8224(0, v17[2] + 1, 1, v17);
              *v18 = v17;
            }
            v21 = v17[2];
            v20 = v17[3];
            if (v21 >= v20 >> 1)
            {
              v17 = sub_1002C8224((_QWORD *)(v20 > 1), v21 + 1, 1, v17);
              *v18 = v17;
            }
            v17[2] = v21 + 1;
            v22 = &v17[2 * v21];
            v22[4] = v7;
            v22[5] = v6;
            v58(v64, 0);
            swift_bridgeObjectRelease(v6);
            v23 = v12;
            goto LABEL_28;
          }
          ((void (*)(id *, _QWORD))v15)(v64, 0);
          swift_bridgeObjectRelease(v6);
          swift_bridgeObjectRelease(v12);
        }
        else
        {
          swift_bridgeObjectRelease_n(v6, 2);
        }
      }
LABEL_4:
      v5 += 2;
      if (!--v3)
      {
        sub_1000F4320(&v63);
        v41 = v60;
        v0 = v56;
        goto LABEL_31;
      }
    }
  }
  v41 = (_QWORD *)v2;
LABEL_31:
  sub_1000F4320(&v63);
  v42 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v42, v65);
  *(_OWORD *)(inited + 16) = xmmword_1006A5130;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x80000001006F7600;
  v44 = sub_10001A630((uint64_t *)&unk_10083AE10);
  *(_QWORD *)(inited + 48) = v63;
  *(_QWORD *)(inited + 72) = v44;
  *(_QWORD *)(inited + 80) = 0xD00000000000002BLL;
  *(_QWORD *)(inited + 88) = 0x80000001006F7620;
  v62 = v0[1];
  v45 = sub_10001A630(&qword_10083AA48);
  *(_QWORD *)(inited + 96) = v62;
  *(_QWORD *)(inited + 120) = v45;
  *(_QWORD *)(inited + 128) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 136) = 0x80000001006F7650;
  *(_QWORD *)(inited + 144) = v41;
  *(_QWORD *)(inited + 168) = v45;
  *(_QWORD *)(inited + 176) = 0xD000000000000019;
  *(_QWORD *)(inited + 184) = 0x80000001006F7670;
  v46 = v0[3];
  v61 = v46;
  *(_QWORD *)(inited + 216) = sub_10001A630(&qword_10083F1F0);
  *(_QWORD *)(inited + 192) = v46;
  sub_1000F4348(&v63);
  sub_1000F4348(&v62);
  sub_1000F4348(&v61);
  v47 = sub_10016E7E4(inited);
  v48 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v50 = swift_bridgeObjectRelease(v47).n128_u64[0];
  v64[0] = 0;
  v51 = objc_msgSend(v48, "dataWithJSONObject:options:error:", isa, 0, v64, v50);

  v52 = v64[0];
  if (v51)
  {
    v53 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);

  }
  else
  {
    v53 = v52;
    _convertNSErrorToError(_:)(v52);

    swift_willThrow(v54);
  }
  return (uint64_t)v53;
}

void sub_1000F371C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;

  v8 = (_QWORD *)sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  v9 = a3 + 64;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a3 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  v14 = 0;
  v50 = a4;
  v51 = a1;
  v48 = a3 + 64;
  v49 = a3;
  v47 = v13;
  if (!v12)
    goto LABEL_7;
LABEL_4:
  v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v20)) + (v14 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * i);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v53 = v12;
      v54 = v14;
      v22 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * i);
      v23 = v22[1];
      v55 = *v22;
      swift_bridgeObjectRetain_n(v23, 2);
      swift_bridgeObjectRetain_n(v17, 2);
      v52 = v17;
      v24 = (uint64_t *)(v17 + 40);
      do
      {
        v27 = *(v24 - 1);
        v26 = *v24;
        swift_bridgeObjectRetain_n(*v24, 2);
        v28 = v23;
        swift_bridgeObjectRetain(v23);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
        v31 = sub_10001A6DC(v27, v26);
        v32 = v8[2];
        v33 = (v30 & 1) == 0;
        v34 = v32 + v33;
        if (__OFADD__(v32, v33))
        {
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        v35 = v30;
        if (v8[3] >= v34)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1002D6574();
        }
        else
        {
          sub_1002CCF14(v34, isUniquelyReferenced_nonNull_native);
          v36 = sub_10001A6DC(v27, v26);
          if ((v35 & 1) != (v37 & 1))
            goto LABEL_47;
          v31 = v36;
        }
        v23 = v28;
        if ((v35 & 1) != 0)
        {
          v25 = (_QWORD *)(v8[7] + 16 * v31);
          swift_bridgeObjectRelease(v25[1]);
          *v25 = v55;
          v25[1] = v28;
        }
        else
        {
          v8[(v31 >> 6) + 8] |= 1 << v31;
          v38 = (uint64_t *)(v8[6] + 16 * v31);
          *v38 = v27;
          v38[1] = v26;
          v39 = (_QWORD *)(v8[7] + 16 * v31);
          *v39 = v55;
          v39[1] = v28;
          v40 = v8[2];
          v19 = __OFADD__(v40, 1);
          v41 = v40 + 1;
          if (v19)
            goto LABEL_44;
          v8[2] = v41;
          swift_bridgeObjectRetain(v26);
        }
        v24 += 2;
        swift_bridgeObjectRelease_n(v26, 2);
        swift_bridgeObjectRelease(0x8000000000000000);
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease_n(v28, 2);
      swift_bridgeObjectRelease_n(v52, 2);
      a4 = v50;
      a1 = v51;
      v9 = v48;
      a3 = v49;
      v13 = v47;
      v12 = v53;
      v14 = v54;
      if (v53)
        goto LABEL_4;
    }
    else if (v12)
    {
      goto LABEL_4;
    }
LABEL_7:
    v19 = __OFADD__(v14++, 1);
    if (v19)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v14 >= v13)
      goto LABEL_40;
    v20 = *(_QWORD *)(v9 + 8 * v14);
    if (!v20)
      break;
LABEL_21:
    v12 = (v20 - 1) & v20;
  }
  v21 = v14 + 1;
  if (v14 + 1 >= v13)
    goto LABEL_40;
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
    goto LABEL_20;
  v21 = v14 + 2;
  if (v14 + 2 >= v13)
    goto LABEL_40;
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
    goto LABEL_20;
  v21 = v14 + 3;
  if (v14 + 3 >= v13)
    goto LABEL_40;
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
    goto LABEL_20;
  v21 = v14 + 4;
  if (v14 + 4 >= v13)
    goto LABEL_40;
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
    goto LABEL_20;
  v21 = v14 + 5;
  if (v14 + 5 >= v13)
  {
LABEL_40:
    swift_release(a3);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRetain(a4);
    v43 = sub_10011E910(v42);
    sub_1000F3AF0(a1, (uint64_t)v8, v43);
    if (v46)
    {
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      *a5 = a1;
      a5[1] = a2;
      a5[2] = v8;
      a5[3] = a4;
      a5[4] = v43;
    }
    return;
  }
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
  {
LABEL_20:
    v14 = v21;
    goto LABEL_21;
  }
  while (1)
  {
    v14 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v14 >= v13)
      goto LABEL_40;
    v20 = *(_QWORD *)(v9 + 8 * v14);
    ++v21;
    if (v20)
      goto LABEL_21;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000F3AF0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[2];
  if (v3)
  {
    v7 = a1[4];
    v6 = a1[5];
    if (*(_QWORD *)(a2 + 16))
    {
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(v6);
      v9 = sub_10001A6DC(v7, v6);
      if ((v10 & 1) != 0)
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v9);
        v13 = *v11;
        v12 = v11[1];
        swift_bridgeObjectRetain(v12);
        if ((sub_1001B2278(v13, v12, a3) & 1) == 0)
        {
LABEL_16:
          swift_bridgeObjectRelease(a1);
          v25 = sub_10001A630(&qword_10083AA50);
          v26 = sub_1000F42D4();
          v27 = swift_allocError(v25, v26, 0, 0);
          *(_QWORD *)v28 = v13;
          *(_QWORD *)(v28 + 8) = v12;
          *(_BYTE *)(v28 + 16) = 1;
          swift_willThrow(v27);
          v15 = (_QWORD *)v6;
          goto LABEL_17;
        }
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v12);
        v14 = v3 - 1;
        if (!v14)
        {
LABEL_6:
          v15 = a1;
LABEL_17:
          swift_bridgeObjectRelease(v15);
          return;
        }
        v16 = a1 + 7;
        while (1)
        {
          v7 = *(v16 - 1);
          v6 = *v16;
          v17 = *(_QWORD *)(a2 + 16);
          swift_bridgeObjectRetain(*v16);
          if (!v17)
            break;
          v18 = sub_10001A6DC(v7, v6);
          if ((v19 & 1) == 0)
            break;
          v20 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v18);
          v13 = *v20;
          v12 = v20[1];
          swift_bridgeObjectRetain(v12);
          if ((sub_1001B2278(v13, v12, a3) & 1) == 0)
            goto LABEL_16;
          v16 += 2;
          swift_bridgeObjectRelease(v6);
          swift_bridgeObjectRelease(v12);
          if (!--v14)
            goto LABEL_6;
        }
      }
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      swift_bridgeObjectRetain(a1[5]);
    }
    v21 = sub_10001A630(&qword_10083AA50);
    v22 = sub_1000F42D4();
    v23 = swift_allocError(v21, v22, 0, 0);
    *(_QWORD *)v24 = v7;
    *(_QWORD *)(v24 + 8) = v6;
    *(_BYTE *)(v24 + 16) = 0;
    swift_willThrow(v23);
  }
}

uint64_t sub_1000F3CCC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v7;
  Class isa;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _OWORD v55[2];
  uint64_t v56;
  __int128 v57;
  __int128 v58;

  v7 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v57 = 0;
  v9 = objc_msgSend(v7, "JSONObjectWithData:options:error:", isa, 0, &v57);

  v10 = v57;
  if (!v9)
  {
    v26 = (id)v57;
    _convertNSErrorToError(_:)(v10);

LABEL_18:
    swift_willThrow(v27);
    return sub_1000A71C8(a1, a2);
  }
  v11 = (id)v57;
  _bridgeAnyObjectToAny(_:)(&v57, v9);
  swift_unknownObjectRelease(v9);
  v12 = sub_10001A630((uint64_t *)&unk_1008473E0);
  if ((swift_dynamicCast(&v54, &v57, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
  {
    sub_1000F4730(0, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa);
    v29 = v28;
    v30 = sub_1000F46F0(&qword_10083AA40, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa, (uint64_t)&unk_1006A8718);
    v27 = swift_allocError(v29, v30, 0, 0);
    *v31 = 0;
    v31[1] = 0;
    goto LABEL_18;
  }
  v13 = (uint64_t)v54;
  if (!v54[2]
    || (v14 = sub_10001A6DC(0xD000000000000012, 0x80000001006F7600), (v15 & 1) == 0)
    || (sub_10001A670(*(_QWORD *)(v13 + 56) + 32 * v14, (uint64_t)&v57),
        v16 = sub_10001A630((uint64_t *)&unk_10083AE10),
        (swift_dynamicCast(&v54, &v57, (char *)&type metadata for Any + 8, v16, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease(v13);
    sub_1000F4730(0, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa);
    v33 = v32;
    v34 = sub_1000F46F0(&qword_10083AA40, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa, (uint64_t)&unk_1006A8718);
    v27 = swift_allocError(v33, v34, 0, 0);
    *v35 = 0xD000000000000012;
    v35[1] = 0x80000001006F7600;
    goto LABEL_18;
  }
  v17 = v54;
  v18 = "secondaryLevelElementIDsByTopLevelElementID";
  if (!*(_QWORD *)(v13 + 16)
    || (v19 = sub_10001A6DC(0xD00000000000002BLL, 0x80000001006F7620), (v20 & 1) == 0)
    || (sub_10001A670(*(_QWORD *)(v13 + 56) + 32 * v19, (uint64_t)&v57),
        v53 = sub_10001A630(&qword_10083AA48),
        (swift_dynamicCast(&v54, &v57, (char *)&type metadata for Any + 8, v53, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v13);
    sub_1000F4730(0, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa);
    v38 = v37;
    v39 = sub_1000F46F0(&qword_10083AA40, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa, (uint64_t)&unk_1006A8718);
    v27 = swift_allocError(v38, v39, 0, 0);
    v41 = 0xD00000000000002BLL;
LABEL_21:
    v42 = v18 - 32;
LABEL_22:
    *v40 = v41;
    v40[1] = (unint64_t)v42 | 0x8000000000000000;
    goto LABEL_18;
  }
  v52 = (uint64_t)v54;
  v18 = "topLevelElementIDsByContainerID";
  if (!*(_QWORD *)(v13 + 16) || (v21 = sub_10001A6DC(0xD00000000000001FLL, 0x80000001006F7650), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v13);
    v43 = v52;
LABEL_24:
    swift_bridgeObjectRelease(v43);
    sub_1000F4730(0, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa);
    v45 = v44;
    v46 = sub_1000F46F0(&qword_10083AA40, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa, (uint64_t)&unk_1006A8718);
    v27 = swift_allocError(v45, v46, 0, 0);
    v41 = 0xD00000000000001FLL;
    goto LABEL_21;
  }
  sub_10001A670(*(_QWORD *)(v13 + 56) + 32 * v21, (uint64_t)&v57);
  if ((swift_dynamicCast(&v54, &v57, (char *)&type metadata for Any + 8, v53, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v17);
    v43 = v13;
    goto LABEL_24;
  }
  v23 = (uint64_t)v54;
  if (*(_QWORD *)(v13 + 16) && (v24 = sub_10001A6DC(0xD000000000000019, 0x80000001006F7670), (v25 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v13 + 56) + 32 * v24, (uint64_t)&v57);
  }
  else
  {
    v57 = 0u;
    v58 = 0u;
  }
  swift_bridgeObjectRelease(v13);
  if (!*((_QWORD *)&v58 + 1))
  {
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v17);
    sub_1000F4294((uint64_t)&v57);
LABEL_33:
    sub_1000F4730(0, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa);
    v50 = v49;
    v51 = sub_1000F46F0(&qword_10083AA40, &qword_10083AA38, (uint64_t (*)(_QWORD))_s24DataDeserializationErrorOMa, (uint64_t)&unk_1006A8718);
    v27 = swift_allocError(v50, v51, 0, 0);
    v41 = 0xD000000000000019;
    v42 = "topLevelElementIDsByContainerID";
    goto LABEL_22;
  }
  v47 = sub_10001A630(&qword_10083F1F0);
  if (!swift_dynamicCast(&v54, &v57, (char *)&type metadata for Any + 8, v47, 6))
  {
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v17);
    goto LABEL_33;
  }
  sub_1000F371C(v17, v52, v23, (uint64_t)v54, v55);
  result = sub_1000A71C8(a1, a2);
  if (!v3)
  {
    v48 = v55[1];
    *(_OWORD *)a3 = v55[0];
    *(_OWORD *)(a3 + 16) = v48;
    *(_QWORD *)(a3 + 32) = v56;
  }
  return result;
}

uint64_t _s24DataDeserializationErrorOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&_s24DataDeserializationErrorOMn);
}

uint64_t sub_1000F4294(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_10083D5B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000F42D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083AA58[0];
  if (!qword_10083AA58[0])
  {
    v1 = sub_1000A5A94(&qword_10083AA50);
    result = swift_getWitnessTable(&unk_1006BF900, v1);
    atomic_store(result, qword_10083AA58);
  }
  return result;
}

_QWORD *sub_1000F4320(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

_QWORD *sub_1000F4348(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_1000F4370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 0);
}

_QWORD *initializeBufferWithCopyOfBuffer for RDSavedTemplateSection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for RDSavedTemplateSection(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for RDSavedTemplateSection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for RDSavedTemplateSection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000F441C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_1000F446C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1000F44C0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000F44D8(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

_WORD *sub_1000F44F8(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_1000F4504(unsigned __int16 *a1, int a2)
{
  int v2;
  int v3;
  int v4;

  if (!a2)
    return 0;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if ((a2 + 0xFFFF) < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        return 0;
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  return 0;
}

uint64_t sub_1000F4574(_WORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if ((a3 + 0xFFFF) < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_1000F45EC + 4 * byte_1006A86A5[v4]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_1000F45CC + 4 * byte_1006A86A0[v4]))();
}

uint64_t sub_1000F45CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000F45EC(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_1000F45F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000F45FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000F4604(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1000F460C(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

uint64_t _s22DataSerializationErrorOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&_s22DataSerializationErrorOMn);
}

uint64_t sub_1000F4624(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000F4664 + 4 * byte_1006A86AA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000F4684 + 4 * byte_1006A86AF[v4]))();
}

_BYTE *sub_1000F4664(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000F4684(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000F468C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000F4694(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000F469C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000F46A4(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t _s24DataSerializationVersionOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&_s24DataSerializationVersionOMn);
}

uint64_t sub_1000F46BC()
{
  return sub_1000F46F0(&qword_10083ABE0, &qword_10083ABE8, (uint64_t (*)(_QWORD))_s24DataSerializationVersionOMa, (uint64_t)&unk_1006A8848);
}

uint64_t sub_1000F46F0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1000F4730(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000F4730(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1000F4774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083ABF0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083ABF0);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000F4804(uint64_t a1)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*v1, "objectIDs");
  v4 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  sub_1000F4B70(a1, v5, 128, 0);
  v7 = v6;
  swift_bridgeObjectRelease(v5);
  return v7;
}

uint64_t sub_1000F48A4(uint64_t a1)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend(*v1, "listObjectID");
  if (qword_100837750 != -1)
    swift_once(&qword_100837750, sub_1004E80E4);
  sub_1000F4B70(a1, (uint64_t)v3, 1, (objc_class *)qword_1008721E8);
  v5 = v4;

  return v5;
}

id sub_1000F4940()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v2 = v1;
  v3 = objc_msgSend(v0, "listObjectID");
  v4 = (void *)sub_1004E7C40((uint64_t)v3, 1);
  v5 = type metadata accessor for REMCDListSection();
  v6 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "entity");
  objc_msgSend(v6, "setEntity:", v7);

  objc_msgSend(v6, "setAffectedStores:", 0);
  objc_msgSend(v6, "setPredicate:", v4);

  v8 = NSManagedObjectContext.count<A>(for:)(v6, v5);
  if (!v1)
  {
    v9 = v8;
    v2 = objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
    v10 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v9);
    objc_msgSend(v2, "storeProperty:forKey:", v10, REMListSectionsDataViewFetchSectionsCountResultKey);

    v3 = v6;
    v6 = v10;
  }

  return v2;
}

id sub_1000F4AC4()
{
  return sub_1000F4940();
}

NSString sub_1000F4AE4@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  NSString result;
  uint64_t v7;

  v4 = *a1;
  v5 = type metadata accessor for REMListSectionStorageCDIngestor();
  swift_initStackObject(v5, &v7);
  result = sub_10030DBE0(v4);
  if (!v2)
    *a2 = result;
  return result;
}

NSObject *sub_1000F4B44@<X0>(void **a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2;
  NSObject *result;

  result = sub_100534CF0(*a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_1000F4B70(uint64_t a1, uint64_t a2, char a3, objc_class *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  objc_class *v15;
  objc_class *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, __n128);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t i;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t j;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  Class isa;
  Class v70;
  uint64_t v71;
  Class v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t, __n128);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;

  v84 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v84 - 8);
  v9 = __chkstk_darwin(v84);
  v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v74 - v12;
  sub_1004E8204();
  v15 = v14;
  v16 = (objc_class *)sub_1004E8694();
  v17 = v85;
  v18 = sub_1004E892C(a2, a3, a1, a4, v15, v16);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  if (!v17)
  {
    v19 = v13;
    v85 = v11;
    if (qword_100836D00 != -1)
      swift_once(&qword_100836D00, sub_1000F4774);
    v20 = sub_10001AAA8(v84, (uint64_t)qword_10083ABF0);
    v21 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v80 = v20;
    v81 = v21;
    v22 = ((uint64_t (*)(char *))v21)(v13);
    v86 = v18;
    __chkstk_darwin(v22);
    *(&v74 - 2) = (uint64_t)v13;
    v23 = sub_10001A630(&qword_1008518C0);
    v24 = sub_1000151B0(0, (unint64_t *)&qword_10083AC08, REMListSectionStorage_ptr);
    v25 = sub_1000C4C0C(&qword_10083AC10, &qword_1008518C0);
    v82 = v24;
    v26 = _swiftEmptyArrayStorage;
    v27 = Sequence.map<A>(skippingError:_:)(sub_1000F5258, &v74 - 4, sub_1000F4AE4, 0, v23, v24, v25);
    v28 = *(void (**)(char *, uint64_t))(v8 + 8);
    v28(v19, v84);
    v86 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v73 = v18;
      else
        v73 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v29 = _CocoaArrayWrapper.endIndex.getter(v73);
    }
    else
    {
      v29 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v18);
    }
    v30 = v85;
    v83 = v27;
    v79 = v28;
    if (v29)
    {
      if (v29 < 1)
      {
        __break(1u);
        __break(1u);
        return;
      }
      for (i = 0; i != v29; ++i)
      {
        if ((v18 & 0xC000000000000001) != 0)
          v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
        else
          v33 = *(id *)(v18 + 8 * i + 32);
        v34 = v33;
        v35 = objc_msgSend(v33, "list");

        if (v35)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
          v38 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v37 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v38 >= v37 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1);
          v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
          specialized Array._endMutation()(v32);
        }
      }
      swift_bridgeObjectRelease(v18);
      v26 = (_QWORD *)v86;
      v30 = v85;
    }
    else
    {
      swift_bridgeObjectRelease(v18);
    }
    v86 = (uint64_t)v26;
    v39 = sub_10001A630(&qword_10083FF50);
    v40 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v41 = sub_1000EC524(&qword_10083AC18, (unint64_t *)&qword_100839900, off_1007D66E0);
    v42 = Sequence<>.unique()(v39, v40, v41);
    swift_bridgeObjectRelease(v26);
    v43 = sub_1004A8268(v42);
    v76 = v39;
    v77 = v44;
    v78 = v43;
    swift_bridgeObjectRelease(v42);
    v45 = _swiftEmptyArrayStorage;
    v86 = (uint64_t)_swiftEmptyArrayStorage;
    v75 = v41;
    if (v29)
    {
      v74 = v40;
      swift_bridgeObjectRetain(v18);
      for (j = 0; j != v29; ++j)
      {
        if ((v18 & 0xC000000000000001) != 0)
          v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v18);
        else
          v48 = *(id *)(v18 + 8 * j + 32);
        v49 = v48;
        v50 = objc_msgSend(v48, "list", v74, v75);

        if (v50)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
          v53 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v52 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v53 >= v52 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1);
          v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v50);
          specialized Array._endMutation()(v47);
        }
      }
      swift_bridgeObjectRelease(v18);
      v45 = (_QWORD *)v86;
      v30 = v85;
      v40 = v74;
    }
    swift_bridgeObjectRelease(v18);
    v86 = (uint64_t)v45;
    v54 = v76;
    v55 = v40;
    v56 = Sequence<>.unique()(v76, v40, v75);
    v57 = swift_bridgeObjectRelease(v45);
    v58 = v84;
    v59 = v81(v30, v80, v84, v57);
    v86 = v56;
    __chkstk_darwin(v59);
    *(&v74 - 2) = (uint64_t)v30;
    v60 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v61 = Sequence.map<A>(skippingError:_:)(sub_1000F5264, &v74 - 4, sub_1000F4B44, 0, v54, v60, v55);
    v79(v30, v58);
    swift_bridgeObjectRelease(v56);
    v86 = v61;
    sub_1001E1A5C(v77);
    v62 = v86;
    v63 = sub_10001A630(&qword_10083FEA0);
    v64 = sub_1000C4C0C(&qword_10083AC20, &qword_10083FEA0);
    v65 = sub_1000EC524(&qword_10083AC28, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v66 = Sequence<>.unique()(v63, v64, v65);
    swift_bridgeObjectRelease(v62);
    v67 = objc_allocWithZone((Class)REMListSectionsDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    v68 = v78;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v68);
    v70 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v66);
    v71 = v83;
    v72 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v67, "initWithAccountStorages:listStorages:listSectionStorages:", isa, v70, v72, swift_bridgeObjectRelease(v71).n128_f64[0]);

  }
}

uint64_t sub_1000F5258(uint64_t a1, uint64_t a2)
{
  return sub_10037F958(a2);
}

uint64_t sub_1000F5264(uint64_t a1, uint64_t a2)
{
  return sub_10015D100(a1, a2);
}

_QWORD *sub_1000F526C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v6)
      break;
    v19 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v6);
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v9 = *(id *)(a1 + 8 * v8 + 32);
      v10 = v9;
      v17 = v9;
      sub_100104988(&v17, a2, &v16, &v18);

      if (v3)
        return (_QWORD *)swift_release(v19);
      ++v8;
      v12 = v18;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = v19[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      if (v6 == v8)
        return v19;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_1000F53D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083AC30);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083AC30);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1000F5490()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDXPCDebugPerformer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000F56BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for REMAccountSnapshotSummary(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 40) == 1)
  {
    v8 = sub_10001A630(&qword_10083AEA8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  v9 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v9 == v10)
    goto LABEL_7;
  if (v9 >= v10)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = *(_QWORD *)v1
      + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(_QWORD *)(v4 + 72) * v9;
  *(_QWORD *)(v1 + 8) = v9 + 1;
  result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, v11, v3);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = *(_QWORD *)(v1 + 32);
  if (v13 == v12)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
LABEL_7:
    *(_BYTE *)(v1 + 40) = 1;
    v14 = sub_10001A630(&qword_10083AEA8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  v15 = *(_QWORD *)(v1 + 16);
  if (v12 < v15)
    goto LABEL_14;
  if (v13 < v15)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v13 >= v12)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 32) = v13 + 1;
  v16 = sub_10001A630(&qword_10083AEA8);
  v17 = *(int *)(v16 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v7, v3);
  *(_QWORD *)(a1 + v17) = v13;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
}

void sub_1000F5884(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  id v11;
  _QWORD v12[5];
  _QWORD *v13;

  v8 = (_QWORD *)swift_allocObject(&unk_1007E4F70, 40, 7);
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v12[4] = sub_1001190F4;
  v13 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1000F5EA0;
  v12[3] = &unk_1007E4F88;
  v9 = _Block_copy(v12);
  v10 = v13;
  v11 = a2;
  swift_retain();
  swift_retain();
  swift_release(v10);
  objc_msgSend(a1, "statusReportWithCompletionBlock:", v9);
  _Block_release(v9);
}

void sub_1000F5960(uint64_t a1, dispatch_group_t group, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  char v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v59;
  int64_t v60;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  _BYTE *v67;
  void *v68;
  uint64_t v69;
  int64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  char v74[32];

  if (!a1)
  {
    dispatch_group_leave(group);
    return;
  }
  v4 = (_QWORD *)(a3 + 16);
  v67 = (_BYTE *)(a4 + 16);
  v59 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v63 = v6 & *(_QWORD *)(a1 + 64);
  v60 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
LABEL_7:
  if (!v63)
  {
    v11 = v7 + 1;
    v10 = a1;
    if (__OFADD__(v7, 1))
      goto LABEL_62;
    if (v11 >= v60)
      goto LABEL_58;
    v12 = *(_QWORD *)(v59 + 8 * v11);
    v13 = v7 + 1;
    if (!v12)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v60)
        goto LABEL_58;
      v12 = *(_QWORD *)(v59 + 8 * v13);
      if (!v12)
      {
        v13 = v7 + 3;
        if (v7 + 3 >= v60)
          goto LABEL_58;
        v12 = *(_QWORD *)(v59 + 8 * v13);
        if (!v12)
        {
          v14 = v7 + 4;
          if (v7 + 4 < v60)
          {
            v12 = *(_QWORD *)(v59 + 8 * v14);
            if (v12)
            {
              v13 = v7 + 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
                goto LABEL_63;
              if (v13 >= v60)
                break;
              v12 = *(_QWORD *)(v59 + 8 * v13);
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
LABEL_58:
          swift_release(v10);
          dispatch_group_leave(group);
          return;
        }
      }
    }
LABEL_22:
    v62 = v13;
    v63 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v13 << 6);
    goto LABEL_23;
  }
  v8 = __clz(__rbit64(v63));
  v62 = v7;
  v63 &= v63 - 1;
  v9 = v8 | (v7 << 6);
  v10 = a1;
LABEL_23:
  v15 = *(_QWORD *)(v10 + 56);
  v16 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v9);
  v17 = (void *)v16[1];
  v66 = *v16;
  v18 = *(_QWORD *)(v15 + 8 * v9);
  v64 = v18 + 64;
  v19 = 1 << *(_BYTE *)(v18 + 32);
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v21 = v20 & *(_QWORD *)(v18 + 64);
  v68 = v17;
  swift_bridgeObjectRetain(v17);
  v69 = v18;
  swift_bridgeObjectRetain(v18);
  swift_beginAccess(v67, v74, 1, 0);
  v22 = 0;
  v65 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v70 = v22;
      v26 = v25 | (v22 << 6);
    }
    else
    {
      v27 = v22 + 1;
      if (__OFADD__(v22, 1))
        goto LABEL_60;
      if (v27 >= v65)
      {
LABEL_6:
        swift_bridgeObjectRelease(v68);
        swift_release(v69);
        v7 = v62;
        goto LABEL_7;
      }
      v28 = *(_QWORD *)(v64 + 8 * v27);
      v29 = v22 + 1;
      if (!v28)
      {
        v29 = v22 + 2;
        if (v22 + 2 >= v65)
          goto LABEL_6;
        v28 = *(_QWORD *)(v64 + 8 * v29);
        if (!v28)
        {
          v29 = v22 + 3;
          if (v22 + 3 >= v65)
            goto LABEL_6;
          v28 = *(_QWORD *)(v64 + 8 * v29);
          if (!v28)
          {
            v30 = v22 + 4;
            if (v22 + 4 >= v65)
              goto LABEL_6;
            v28 = *(_QWORD *)(v64 + 8 * v30);
            if (!v28)
            {
              while (1)
              {
                v29 = v30 + 1;
                if (__OFADD__(v30, 1))
                  goto LABEL_61;
                if (v29 >= v65)
                  goto LABEL_6;
                v28 = *(_QWORD *)(v64 + 8 * v29);
                ++v30;
                if (v28)
                  goto LABEL_44;
              }
            }
            v29 = v22 + 4;
          }
        }
      }
LABEL_44:
      v21 = (v28 - 1) & v28;
      v70 = v29;
      v26 = __clz(__rbit64(v28)) + (v29 << 6);
    }
    v31 = 16 * v26;
    v32 = (uint64_t *)(*(_QWORD *)(v69 + 48) + v31);
    v33 = *v32;
    v34 = (void *)v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v69 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    v72 = 0;
    v73 = 0xE000000000000000;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v37);
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease(v73);
    v72 = 0x7474697379626162;
    v73 = 0xEB000000002E7265;
    v38._countAndFlagsBits = v66;
    v38._object = v68;
    String.append(_:)(v38);
    v39._countAndFlagsBits = 46;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    v40._countAndFlagsBits = v33;
    v40._object = v34;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v34);
    v41 = v72;
    v42 = v73;
    swift_beginAccess(v4, &v72, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v44 = *v4;
    v71 = (_QWORD *)*v4;
    *v4 = 0x8000000000000000;
    v46 = sub_10001A6DC(v41, v42);
    v47 = *(_QWORD *)(v44 + 16);
    v48 = (v45 & 1) == 0;
    v10 = v47 + v48;
    if (__OFADD__(v47, v48))
    {
      __break(1u);
      goto LABEL_58;
    }
    v49 = v45;
    if (*(_QWORD *)(v44 + 24) >= v10)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v52 = v71;
        if ((v45 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        sub_1002D6574();
        v52 = v71;
        if ((v49 & 1) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      sub_1002CCF14(v10, isUniquelyReferenced_nonNull_native);
      v50 = sub_10001A6DC(v41, v42);
      if ((v49 & 1) != (v51 & 1))
        goto LABEL_64;
      v46 = v50;
      v52 = v71;
      if ((v49 & 1) != 0)
      {
LABEL_27:
        v23 = (_QWORD *)(v52[7] + 16 * v46);
        swift_bridgeObjectRelease(v23[1]);
        *v23 = v36;
        v23[1] = v37;
        goto LABEL_28;
      }
    }
    v52[(v46 >> 6) + 8] |= 1 << v46;
    v53 = (uint64_t *)(v52[6] + 16 * v46);
    *v53 = v41;
    v53[1] = v42;
    v54 = (_QWORD *)(v52[7] + 16 * v46);
    *v54 = v36;
    v54[1] = v37;
    v55 = v52[2];
    v56 = __OFADD__(v55, 1);
    v57 = v55 + 1;
    if (v56)
      break;
    v52[2] = v57;
    swift_bridgeObjectRetain(v42);
LABEL_28:
    v24 = *v4;
    *v4 = v52;
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v24);
    swift_endAccess(&v72);
    *v67 = 0;
    v22 = v70;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

double sub_1000F5EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  double result;

  v2 = a2;
  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v5 = sub_10001A630(&qword_10083AEB8);
    v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, v5, &protocol witness table for String);
  }
  swift_retain();
  v4(v2);
  swift_release(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

void sub_1000F5F20(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;

  v7 = *a2;
  v8 = a1;
  v9 = a3;
  swift_bridgeObjectRetain(v7);
  v10 = sub_10010A36C(&_swiftEmptyDictionarySingleton, v7, v8);
  swift_bridgeObjectRelease(v7);

  if (!v4)
    *a4 = v10;
}

double sub_1000F5FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;

  v10 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", a3);
  objc_msgSend(v11, "setAffectedStores:", 0);
  v13 = NSManagedObjectContext.count<A>(for:)(v11, v10);

  if (!v5 && v13 > 0)
  {
    swift_bridgeObjectRetain(a2);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v17 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a5);
    v20 = *a5;
    *a5 = 0x8000000000000000;
    sub_10028B8BC(v15, v17, a1, a2, isUniquelyReferenced_nonNull_native);
    v19 = *a5;
    *a5 = v20;
    swift_bridgeObjectRelease(a2);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v19).n128_u64[0];
  }
  return result;
}

void sub_1000F64D4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  id v23;
  uint64_t v24;

  v6 = (void *)_convertErrorToNSError(_:)(a1);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_10083AC30);
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = a2;
    v23 = v8;
    v12 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    *v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDXPCDebugPerformer: Failed testInitialSync {error: %@}", v11, 0xCu);
    v14 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v12, 1, v14);
    v15 = v12;
    a2 = v22;
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  v16 = (void *)objc_opt_self(REMError);
  v17 = v8;
  v18 = (void *)_convertErrorToNSError(_:)(v17);

  v19 = objc_msgSend(v16, "errorSanitizedForXPCFromError:", v18);
  swift_beginAccess(a4 + 16, &v23, 0, 0);
  v20 = *(_QWORD *)(a4 + 16);
  swift_bridgeObjectRetain(v20);
  v21 = v19;
  a2(0, v20, v19);

  swift_bridgeObjectRelease(v20);
}

uint64_t sub_1000F6728(uint64_t a1, void (*a2)(uint64_t, uint64_t, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE v9[24];

  swift_beginAccess(a4 + 16, v9, 0, 0);
  v7 = *(_QWORD *)(a4 + 16);
  swift_bridgeObjectRetain(v7);
  a2(a1, v7, 0);
  return swift_bridgeObjectRelease(v7);
}

void sub_1000F6798(void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  unsigned __int8 v32;
  void *v33;
  double v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t v41;
  NSString v42;
  id v43;
  void *v44;
  NSString v45;
  uint64_t v46;
  void *v47;
  double v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  id v77;
  char *v78;
  char *v79;
  id v80;
  void *v81;
  void *v82;
  NSString v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  NSString v88;
  uint64_t v89;
  Swift::String v90;
  uint64_t v91;
  id v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  void *v99;
  uint64_t v100;
  Swift::String v101;
  void *object;
  Swift::String v103;
  unint64_t v104;
  NSString v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  id v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  void **aBlock;
  unint64_t v122;
  uint64_t (*v123)(uint64_t);
  void *v124;
  void (*v125)();
  uint64_t v126;
  _QWORD *v127;

  v113 = a6;
  v114 = a8;
  v117 = a4;
  v118 = a7;
  v115 = a5;
  v119 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v119 - 8);
  v12 = *(_QWORD *)(v116 + 64);
  v13 = __chkstk_darwin(v119);
  __chkstk_darwin(v13);
  v15 = (char *)&v106 - v14;
  sub_10034B07C(a2, a3, 0);
  v17 = v16;
  v18 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v19 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "entity");
  objc_msgSend(v19, "setEntity:", v20);

  objc_msgSend(v19, "setAffectedStores:", 0);
  objc_msgSend(v19, "setPredicate:", v17);
  v21 = v120;
  v22 = NSManagedObjectContext.fetch<A>(_:)(v19, v18);
  if (v21)
  {

    return;
  }
  v23 = v22;
  v120 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = a1;
  v24 = v119;

  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v85 = v23;
    else
      v85 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v25 = _CocoaArrayWrapper.endIndex.getter(v85);
    swift_bridgeObjectRelease(v23);
    if (v25 < 2)
    {
      v26 = v15;
      swift_bridgeObjectRetain(v23);
      v86 = _CocoaArrayWrapper.endIndex.getter(v85);
      swift_bridgeObjectRelease(v23);
      if (v86)
        goto LABEL_6;
      goto LABEL_26;
    }
LABEL_27:
    aBlock = 0;
    v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v90._countAndFlagsBits = 0xD000000000000034;
    v90._object = (void *)0x80000001006F8930;
    String.append(_:)(v90);
    v127 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v25);
    v91 = 0;
    do
    {
      if ((v23 & 0xC000000000000001) != 0)
        v92 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v91, v23);
      else
        v92 = *(id *)(v23 + 8 * v91 + 32);
      v93 = v92;
      ++v91;
      v94 = objc_msgSend(v92, "remObjectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v95);
      v96 = v127[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v96);
      v97 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v96, v94);
      specialized ContiguousArray._endMutation()(v97);
    }
    while (v25 != v91);
    v98 = v127;
    swift_bridgeObjectRelease(v23);
    v99 = (void *)objc_opt_self(REMError);
    v100 = sub_10001A630((uint64_t *)&unk_100844910);
    v101._countAndFlagsBits = Array.description.getter(v98, v100);
    object = v101._object;
    String.append(_:)(v101);
    swift_bridgeObjectRelease(v98);
    swift_bridgeObjectRelease(object);
    v103._countAndFlagsBits = 125;
    v103._object = (void *)0xE100000000000000;
    String.append(_:)(v103);
    v104 = v122;
    v105 = String._bridgeToObjectiveC()();
    objc_msgSend(v99, "internalErrorWithDebugDescription:", v105, swift_bridgeObjectRelease(v104).n128_f64[0]);

    goto LABEL_33;
  }
  v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  v26 = v15;
  if ((unint64_t)v25 >= 2)
    goto LABEL_27;
  if (!v25)
  {
LABEL_26:
    swift_bridgeObjectRelease(v23);
    v87 = (void *)objc_opt_self(REMError);
    v88 = String._bridgeToObjectiveC()();
    objc_msgSend(v87, "internalErrorWithDebugDescription:", v88);

LABEL_33:
    swift_willThrow(v89);
    return;
  }
LABEL_6:
  if ((v23 & 0xC000000000000001) != 0)
  {
    v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
    v27 = v118;
  }
  else
  {
    v27 = v118;
    if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v28 = *(id *)(v23 + 32);
  }
  v29 = objc_msgSend(v28, "remObjectID", swift_bridgeObjectRelease(v23).n128_f64[0]);
  if (!v29)
  {
    v44 = (void *)objc_opt_self(REMError);
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v44, "internalErrorWithDebugDescription:", v45);

    swift_willThrow(v46);
    return;
  }
  v30 = v29;
  v31 = objc_msgSend(v28, "accountTypeHost");
  v32 = objc_msgSend(v31, "isCloudKit");

  if ((v32 & 1) == 0)
  {
    v47 = (void *)objc_opt_self(REMError);
    aBlock = 0;
    v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    *(_QWORD *)&v48 = swift_bridgeObjectRelease(v122).n128_u64[0];
    aBlock = (void **)0xD000000000000025;
    v122 = 0x80000001006F8990;
    v49 = objc_msgSend(v30, "description", v48);
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v52 = v51;

    v53._countAndFlagsBits = v50;
    v53._object = v52;
    String.append(_:)(v53);
    swift_bridgeObjectRelease(v52);
    v54._countAndFlagsBits = 125;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    v55 = v122;
    v42 = String._bridgeToObjectiveC()();
    v43 = objc_msgSend(v47, "internalErrorWithDebugDescription:", v42, swift_bridgeObjectRelease(v55).n128_f64[0]);
    goto LABEL_15;
  }
  if ((objc_msgSend(v28, "inactive") & 1) != 0)
  {
    v33 = (void *)objc_opt_self(REMError);
    aBlock = 0;
    v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    *(_QWORD *)&v34 = swift_bridgeObjectRelease(v122).n128_u64[0];
    aBlock = (void **)0xD000000000000020;
    v122 = 0x80000001006F89C0;
    v35 = objc_msgSend(v30, "description", v34);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v39._countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease(v38);
    v40._countAndFlagsBits = 125;
    v40._object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    v41 = v122;
    v42 = String._bridgeToObjectiveC()();
    v43 = objc_msgSend(v33, "internalErrorWithDebugDescription:", v42, swift_bridgeObjectRelease(v41).n128_f64[0]);
LABEL_15:
    v43;

    swift_willThrow(v56);
    return;
  }
  v57 = *(void **)&v117[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController];
  v58 = (char *)objc_msgSend(v57, "cloudContext");
  if (!v58)
  {
    v81 = (void *)objc_opt_self(REMError);
    v42 = String._bridgeToObjectiveC()();
    v43 = objc_msgSend(v81, "internalErrorWithDebugDescription:", v42);
    goto LABEL_15;
  }
  v59 = v58;
  if ((objc_msgSend(v57, "supportsSyncingToCloudKit") & 1) != 0)
  {
    v118 = a9;
    Date.init()(objc_msgSend(v59, "setDisabled:", 1));
    v60 = v116;
    (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v120, v26, v24);
    v61 = *(unsigned __int8 *)(v60 + 80);
    v110 = v28;
    v111 = v30;
    v62 = (v61 + 24) & ~v61;
    v109 = (v12 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v108 = (v109 + 15) & 0xFFFFFFFFFFFFFFF8;
    v107 = (v108 + 15) & 0xFFFFFFFFFFFFFFF8;
    v63 = (v107 + 15) & 0xFFFFFFFFFFFFFFF8;
    v106 = (v63 + 23) & 0xFFFFFFFFFFFFFFF8;
    v64 = (v106 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = swift_allocObject(&unk_1007E4DB8, v64 + 16, v61 | 7);
    v66 = v59;
    v117 = v59;
    v67 = v65;
    *(_QWORD *)(v65 + 16) = v115;
    (*(void (**)(uint64_t, char *, uint64_t))(v116 + 32))(v65 + v62, v120, v119);
    v69 = v112;
    v68 = v113;
    *(_QWORD *)(v67 + v109) = v112;
    *(_QWORD *)(v67 + v108) = v28;
    *(_QWORD *)(v67 + v107) = v66;
    v70 = (_QWORD *)(v67 + v63);
    *v70 = v68;
    v70[1] = v27;
    v71 = v111;
    *(_QWORD *)(v67 + v106) = v111;
    v72 = (_QWORD *)(v67 + v64);
    v73 = v118;
    *v72 = v114;
    v72[1] = v73;
    v125 = sub_100118CE0;
    v126 = v67;
    aBlock = _NSConcreteStackBlock;
    v122 = 1107296256;
    v123 = sub_1000094C8;
    v124 = &unk_1007E4DD0;
    v74 = _Block_copy(&aBlock);
    v75 = v126;
    swift_retain();
    v76 = v69;
    v77 = v110;
    v78 = v26;
    v79 = v117;
    swift_retain();
    v80 = v71;
    swift_retain();
    swift_release(v75);
    objc_msgSend(v79, "cancelEverythingWithCompletionHandler:", v74);
    _Block_release(v74);

    (*(void (**)(char *, uint64_t))(v116 + 8))(v78, v119);
  }
  else
  {
    v82 = (void *)objc_opt_self(REMError);
    v83 = String._bridgeToObjectiveC()();
    objc_msgSend(v82, "internalErrorWithDebugDescription:", v83);

    swift_willThrow(v84);
  }
}

void sub_1000F7144(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD aBlock[5];
  _QWORD *v44;
  uint64_t v45;

  v41 = a7;
  v42 = a8;
  v39 = a10;
  v40 = a6;
  v38 = a9;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A630((uint64_t *)&unk_10083A270);
  v20 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1006A3C00;
  Date.init()(v20);
  v21 = Date.timeIntervalSince(_:)(a2);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(_QWORD *)(v20 + 56) = &type metadata for Double;
  *(_QWORD *)(v20 + 64) = &protocol witness table for Double;
  *(double *)(v20 + 32) = v21;
  v22 = String.init(format:_:)(1714695717, 0xE400000000000000, v20);
  v24 = v23;
  swift_beginAccess(a1 + 16, aBlock, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 16));
  v45 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  sub_10028B8BC(v22, v24, 0xD00000000000001FLL, 0x80000001006F8A10, isUniquelyReferenced_nonNull_native);
  v26 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v45;
  swift_bridgeObjectRelease(v26);
  swift_endAccess(aBlock);
  v27 = (_QWORD *)swift_allocObject(&unk_1007E4E08, 88, 7);
  v27[2] = a4;
  v27[3] = a3;
  v27[4] = a1;
  v27[5] = a5;
  v28 = v41;
  v27[6] = v40;
  v27[7] = v28;
  v29 = v42;
  v30 = v38;
  v31 = v39;
  v27[8] = v42;
  v27[9] = v30;
  v27[10] = v31;
  aBlock[4] = sub_100118DCC;
  v44 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E4E20;
  v32 = _Block_copy(aBlock);
  v33 = v44;
  v34 = a4;
  v35 = a3;
  swift_retain();
  v36 = a5;
  swift_retain();
  v37 = v29;
  swift_retain();
  swift_release(v33);
  objc_msgSend(v35, "performBlock:", v32);
  _Block_release(v32);
}

uint64_t sub_1000F73AC(void *a1, void *a2, uint64_t a3, void *a4, void (*a5)(uint64_t), void (*a6)(uint64_t), void *a7, uint64_t a8, char *a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t KeyPath;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  char *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  __CFString *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  char *v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  double v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char *v62;
  void *v63;
  id v64;
  id v65;
  void *v66;
  void *v67;
  void (*v68)(char *, uint64_t);
  id v69;
  id v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  id v91;
  unsigned int v92;
  void *v93;
  id v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  id v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  id v109;
  void (**v110)(uint64_t);
  void (*v111)(uint64_t);
  id v112;
  uint64_t v113;
  void *v114;
  _QWORD *v115;
  char *v116;
  void *v117;
  uint64_t v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  __CFString *v131;
  unint64_t v132;
  char *v133;
  id v134;
  char *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  id v144;
  void (*v145)(uint64_t);
  void (*v146)(uint64_t);
  id v147[2];
  __int128 aBlock;
  __int128 v149;
  void (*v150)(uint64_t);
  uint64_t v151;

  v138 = a7;
  v139 = a8;
  v145 = a6;
  v146 = a5;
  v140 = a4;
  v141 = a3;
  v144 = a2;
  v143 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v143 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v143);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v126 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v126 - v17;
  __chkstk_darwin(v16);
  v142 = (char *)&v126 - v19;
  KeyPath = swift_getKeyPath(&unk_1006A8DA8);
  v21 = a1;
  v22 = (void *)sub_1002E8770(KeyPath, a1);
  swift_release(KeyPath);

  v23 = sub_1004BB544((uint64_t)v22);
  v135 = v15;
  v132 = v11;
  v133 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = v21;
  v137 = v10;
  v136 = v18;
  v24 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v23);
  v25 = objc_msgSend(v24, "setResultType:", 2);
  v26 = v142;
  Date.init()(v25);
  *(_QWORD *)&aBlock = 0;
  v27 = objc_msgSend(v144, "executeRequest:error:", v24, &aBlock);
  v28 = (void *)v23;
  v29 = (void *)aBlock;
  if (!v27)
  {
    v37 = (id)aBlock;
    v38 = _convertNSErrorToError(_:)(v29);

    swift_willThrow(v39);
    v40 = v38;

    (*(void (**)(char *, uint64_t))(v137 + 8))(v26, v143);
LABEL_8:
    v45 = v146;
LABEL_9:
    v45(v40);
    return swift_errorRelease(v40);
  }
  v30 = v27;
  v31 = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
  *((_QWORD *)&v149 + 1) = v31;
  *(_QWORD *)&aBlock = v30;
  v32 = sub_1000151B0(0, (unint64_t *)&unk_10083AE80, NSBatchDeleteResult_ptr);
  v33 = v29;
  v34 = v30;
  throwingCast<A>(_:as:failureMessage:)(v147, &aBlock, v32, 0, 0, v32);
  v35 = v143;
  v36 = v137;
  v131 = v34;
  v129 = v31;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
  v130 = v147[0];
  v41 = objc_msgSend(v147[0], "result");
  if (v41)
  {
    v42 = v41;
    _bridgeAnyObjectToAny(_:)(&aBlock, v41);
    swift_unknownObjectRelease(v42);
  }
  else
  {
    aBlock = 0u;
    v149 = 0u;
  }
  v43 = v136;
  v44 = v141;
  throwingCast<A>(_:as:failureMessage:)(v147, &aBlock, &type metadata for Int, 0, 0, &type metadata for Int);
  v127 = v32;
  v47 = (_QWORD *)(v44 + 16);
  sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
  *(id *)&aBlock = v147[0];
  v128 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v49 = v48;
  swift_beginAccess(v44 + 16, &aBlock, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v44 + 16));
  v147[0] = *(id *)(v44 + 16);
  *(_QWORD *)(v44 + 16) = 0x8000000000000000;
  sub_10028B8BC(v128, v49, 0xD00000000000001ELL, 0x80000001006F8A30, isUniquelyReferenced_nonNull_native);
  v51 = *(_QWORD *)(v44 + 16);
  *(id *)(v44 + 16) = v147[0];
  swift_bridgeObjectRelease(v51);
  swift_endAccess(&aBlock);
  v128 = sub_10001A630((uint64_t *)&unk_10083A270);
  v52 = swift_allocObject(v128, 72, 7);
  v126 = xmmword_1006A3C00;
  *(_OWORD *)(v52 + 16) = xmmword_1006A3C00;
  Date.init()(v52);
  v53 = Date.timeIntervalSince(_:)(v26);
  v54 = *(void (**)(char *, uint64_t))(v36 + 8);
  v54(v43, v35);
  *(_QWORD *)(v52 + 56) = &type metadata for Double;
  *(_QWORD *)(v52 + 64) = &protocol witness table for Double;
  *(double *)(v52 + 32) = v53;
  v55 = String.init(format:_:)(1714695717, 0xE400000000000000, v52);
  v57 = v56;
  swift_beginAccess(v44 + 16, &aBlock, 33, 0);
  v58 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v44 + 16));
  v147[0] = *(id *)(v44 + 16);
  *(_QWORD *)(v44 + 16) = 0x8000000000000000;
  sub_10028B8BC(v55, v57, 0xD00000000000001FLL, 0x80000001006F8A50, v58);
  v59 = *(_QWORD *)(v44 + 16);
  *(id *)(v44 + 16) = v147[0];
  swift_bridgeObjectRelease(v59);
  swift_endAccess(&aBlock);

  v54(v26, v35);
  v60 = sub_1004BB568(0);
  v61 = v144;
  v62 = v135;
  v63 = (void *)v60;
  v64 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v60);
  Date.init()(objc_msgSend(v64, "setResultType:", 2));
  *(_QWORD *)&aBlock = 0;
  v65 = objc_msgSend(v61, "executeRequest:error:", v64, &aBlock);
  v66 = (void *)aBlock;
  if (!v65)
  {
    v72 = (id)aBlock;
    v73 = _convertNSErrorToError(_:)(v66);

    swift_willThrow(v74);
    v40 = v73;

    v54(v62, v143);
    goto LABEL_8;
  }
  v67 = v65;
  v68 = v54;
  *((_QWORD *)&v149 + 1) = v129;
  *(_QWORD *)&aBlock = v65;
  v69 = v66;
  v70 = v67;
  throwingCast<A>(_:as:failureMessage:)(v147, &aBlock, v127, 0, 0, v127);
  v71 = v143;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&aBlock);
  v75 = (char *)v147[0];
  v76 = objc_msgSend(v147[0], "result");
  v142 = v75;
  if (v76)
  {
    v77 = v76;
    _bridgeAnyObjectToAny(_:)(&aBlock, v76);
    swift_unknownObjectRelease(v77);
  }
  else
  {
    aBlock = 0u;
    v149 = 0u;
  }
  throwingCast<A>(_:as:failureMessage:)(v147, &aBlock, &type metadata for Int, 0, 0, &type metadata for Int);
  sub_10000882C((uint64_t)&aBlock, (uint64_t *)&unk_10083D5B0);
  *(id *)&aBlock = v147[0];
  v78 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v80 = v79;
  swift_beginAccess(v47, &aBlock, 33, 0);
  v81 = swift_isUniquelyReferenced_nonNull_native(*v47);
  v147[0] = *(id *)v47;
  *v47 = 0x8000000000000000;
  sub_10028B8BC(v78, v80, 0xD000000000000020, 0x80000001006F8A70, v81);
  v82 = *v47;
  *v47 = v147[0];
  swift_bridgeObjectRelease(v82);
  swift_endAccess(&aBlock);
  v83 = swift_allocObject(v128, 72, 7);
  *(_OWORD *)(v83 + 16) = v126;
  v84 = v136;
  Date.init()(v83);
  v85 = Date.timeIntervalSince(_:)(v135);
  v68(v84, v71);
  *(_QWORD *)(v83 + 56) = &type metadata for Double;
  *(_QWORD *)(v83 + 64) = &protocol witness table for Double;
  *(double *)(v83 + 32) = v85;
  v86 = String.init(format:_:)(1714695717, 0xE400000000000000, v83);
  v88 = v87;
  swift_beginAccess(v47, &aBlock, 33, 0);
  v89 = swift_isUniquelyReferenced_nonNull_native(*v47);
  v147[0] = *(id *)v47;
  *v47 = 0x8000000000000000;
  sub_10028B8BC(v86, v88, 0xD000000000000023, 0x80000001006F8AA0, v89);
  v90 = *v47;
  *v47 = v147[0];
  swift_bridgeObjectRelease(v90);
  swift_endAccess(&aBlock);

  v142 = (char *)v68;
  v68(v135, v71);
  v91 = v134;
  objc_msgSend(v134, "setCkUserRecordName:", 0);
  objc_msgSend(v91, "setListIDsMergeableOrdering:", 0);
  objc_msgSend(v91, "setListIDsMergeableOrdering_v2:", 0);
  objc_msgSend(v91, "setCkServerChangeTokens:", 0);
  objc_msgSend(v91, "setCkSharedObjectOwnerNames:", 0);
  objc_msgSend(v91, "setLists:", 0);
  objc_msgSend(v91, "setReminders:", 0);
  *(_QWORD *)&aBlock = 0;
  v92 = objc_msgSend(v144, "save:", &aBlock);
  v93 = (void *)aBlock;
  if (!v92)
  {
    v123 = (id)aBlock;
    v124 = _convertNSErrorToError(_:)(v93);

    swift_willThrow(v125);
    v40 = v124;
    v45 = v146;
    goto LABEL_9;
  }
  v135 = a9;
  swift_beginAccess(v47, &aBlock, 33, 0);
  v94 = v93;
  v95 = v141;
  v96 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v141 + 16));
  v147[0] = *(id *)(v95 + 16);
  *(_QWORD *)(v95 + 16) = 0x8000000000000000;
  sub_10028B8BC(1702195828, 0xE400000000000000, 0xD00000000000001CLL, 0x80000001006F8AD0, v96);
  v97 = *(_QWORD *)(v95 + 16);
  *(id *)(v95 + 16) = v147[0];
  swift_bridgeObjectRelease(v97);
  swift_endAccess(&aBlock);
  v98 = objc_msgSend(v140, "setDisabled:", 0);
  v99 = v136;
  Date.init()(v98);
  v131 = CFSTR("TestInitialSync");
  v100 = v137;
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v133, v99, v71);
  v101 = *(unsigned __int8 *)(v100 + 80);
  v102 = (v101 + 24) & ~v101;
  v132 = (v132 + v102 + 7) & 0xFFFFFFFFFFFFFFF8;
  v103 = (v132 + 15) & 0xFFFFFFFFFFFFFFF8;
  v104 = (v103 + 23) & 0xFFFFFFFFFFFFFFF8;
  v105 = (v104 + 15) & 0xFFFFFFFFFFFFFFF8;
  v106 = (v105 + 15) & 0xFFFFFFFFFFFFFFF8;
  v107 = (v106 + 15) & 0xFFFFFFFFFFFFFFF8;
  v108 = swift_allocObject(&unk_1007E4E58, v107 + 16, v101 | 7);
  *(_QWORD *)(v108 + 16) = v141;
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v108 + v102, v133, v71);
  v109 = v140;
  *(_QWORD *)(v108 + v132) = v140;
  v110 = (void (**)(uint64_t))(v108 + v103);
  v111 = v145;
  *v110 = v146;
  v110[1] = v111;
  v112 = v144;
  *(_QWORD *)(v108 + v104) = v144;
  *(_QWORD *)(v108 + v105) = v91;
  v114 = v138;
  v113 = v139;
  *(_QWORD *)(v108 + v106) = v138;
  v115 = (_QWORD *)(v108 + v107);
  v116 = v135;
  *v115 = v113;
  v115[1] = v116;
  v150 = sub_100118F44;
  v151 = v108;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v149 = sub_1000E18E4;
  *((_QWORD *)&v149 + 1) = &unk_1007E4E70;
  v117 = _Block_copy(&aBlock);
  v118 = v151;
  v119 = v91;
  swift_retain();
  v120 = v109;
  swift_retain();
  v121 = v112;
  v122 = v114;
  swift_retain();
  swift_release(v118);
  objc_msgSend(v120, "syncWithReason:discretionary:completionHandler:", v131, 0, v117);
  _Block_release(v117);
  return ((uint64_t (*)(char *, uint64_t))v142)(v136, v71);
}

void sub_1000F8060(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t), uint64_t a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void (*v78)(uint64_t);
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int64_t v94;
  int64_t v95;
  _QWORD *v96;
  uint64_t aBlock;
  unint64_t v98;
  uint64_t (*v99)(uint64_t);
  void *v100;
  void (*v101)();
  _QWORD *v102;
  _QWORD *v103;

  v88 = a7;
  v89 = a8;
  v90 = a5;
  v91 = a6;
  v92 = a1;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630((uint64_t *)&unk_10083A270);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1006A3C00;
  Date.init()(v19);
  v20 = Date.timeIntervalSince(_:)(a3);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(_QWORD *)(v19 + 56) = &type metadata for Double;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Double;
  *(double *)(v19 + 32) = v20;
  v21 = String.init(format:_:)(1714695717, 0xE400000000000000, v19);
  v23 = v22;
  v96 = (_QWORD *)(a2 + 16);
  swift_beginAccess(a2 + 16, &aBlock, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 16));
  v103 = *(_QWORD **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0x8000000000000000;
  sub_10028B8BC(v21, v23, 0xD000000000000012, 0x80000001006F8AF0, isUniquelyReferenced_nonNull_native);
  v25 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v103;
  swift_bridgeObjectRelease(v25);
  swift_endAccess(&aBlock);
  v26 = objc_msgSend(a4, "lastSyncMetrics");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "dictionaryRepresentation");

    v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v28, &type metadata for String, &type metadata for String, &protocol witness table for String);
  }
  else
  {
    v29 = sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  }
  v30 = 0;
  v85 = a10;
  v86 = a9;
  v87 = a11;
  v31 = *(_QWORD *)(v29 + 64);
  v93 = v29 + 64;
  v32 = 1 << *(_BYTE *)(v29 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & v31;
  v94 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      v37 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      v95 = v30;
      v38 = v37 | (v30 << 6);
      goto LABEL_25;
    }
    v39 = v30 + 1;
    if (__OFADD__(v30, 1))
      goto LABEL_41;
    if (v39 >= v94)
      break;
    v40 = *(_QWORD *)(v93 + 8 * v39);
    v41 = v30 + 1;
    if (!v40)
    {
      v41 = v30 + 2;
      if (v30 + 2 >= v94)
        break;
      v40 = *(_QWORD *)(v93 + 8 * v41);
      if (!v40)
      {
        v41 = v30 + 3;
        if (v30 + 3 >= v94)
          break;
        v40 = *(_QWORD *)(v93 + 8 * v41);
        if (!v40)
        {
          v42 = v30 + 4;
          if (v30 + 4 >= v94)
            break;
          v40 = *(_QWORD *)(v93 + 8 * v42);
          if (!v40)
          {
            while (1)
            {
              v41 = v42 + 1;
              if (__OFADD__(v42, 1))
                goto LABEL_42;
              if (v41 >= v94)
                goto LABEL_36;
              v40 = *(_QWORD *)(v93 + 8 * v41);
              ++v42;
              if (v40)
                goto LABEL_24;
            }
          }
          v41 = v30 + 4;
        }
      }
    }
LABEL_24:
    v34 = (v40 - 1) & v40;
    v95 = v41;
    v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_25:
    v43 = 16 * v38;
    v44 = *(_QWORD *)(v29 + 56);
    v45 = v29;
    v46 = (uint64_t *)(*(_QWORD *)(v29 + 48) + v43);
    v47 = *v46;
    v48 = (void *)v46[1];
    v49 = (uint64_t *)(v44 + v43);
    v50 = *v49;
    v51 = v49[1];
    aBlock = 0x2E636E7973;
    v98 = 0xE500000000000000;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v51);
    v52._countAndFlagsBits = v47;
    v52._object = v48;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(v48);
    v54 = aBlock;
    v53 = v98;
    v55 = v96;
    swift_beginAccess(v96, &aBlock, 33, 0);
    v56 = swift_isUniquelyReferenced_nonNull_native(*v55);
    v103 = (_QWORD *)*v55;
    v57 = v103;
    *v55 = 0x8000000000000000;
    v59 = sub_10001A6DC(v54, v53);
    v60 = v57[2];
    v61 = (v58 & 1) == 0;
    v62 = v60 + v61;
    if (__OFADD__(v60, v61))
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return;
    }
    v63 = v58;
    if (v57[3] >= v62)
    {
      if ((v56 & 1) != 0)
      {
        v66 = v103;
        if ((v58 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_1002D6574();
        v66 = v103;
        if ((v63 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_1002CCF14(v62, v56);
      v64 = sub_10001A6DC(v54, v53);
      if ((v63 & 1) != (v65 & 1))
        goto LABEL_43;
      v59 = v64;
      v66 = v103;
      if ((v63 & 1) != 0)
      {
LABEL_7:
        v35 = (_QWORD *)(v66[7] + 16 * v59);
        swift_bridgeObjectRelease(v35[1]);
        *v35 = v50;
        v35[1] = v51;
        goto LABEL_8;
      }
    }
    v66[(v59 >> 6) + 8] |= 1 << v59;
    v67 = (uint64_t *)(v66[6] + 16 * v59);
    *v67 = v54;
    v67[1] = v53;
    v68 = (_QWORD *)(v66[7] + 16 * v59);
    *v68 = v50;
    v68[1] = v51;
    v69 = v66[2];
    v70 = __OFADD__(v69, 1);
    v71 = v69 + 1;
    if (v70)
      goto LABEL_40;
    v66[2] = v71;
    swift_bridgeObjectRetain(v53);
LABEL_8:
    v36 = *v96;
    *v96 = v66;
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v36);
    swift_endAccess(&aBlock);
    v29 = v45;
    v30 = v95;
  }
LABEL_36:
  swift_release(v29);
  v72 = v92;
  if (v92)
  {
    swift_errorRetain(v92);
    v90(v72);
    swift_errorRelease(v72);
  }
  else
  {
    v73 = (_QWORD *)swift_allocObject(&unk_1007E4EA8, 72, 7);
    v74 = v88;
    v75 = v89;
    v73[2] = v88;
    v73[3] = v75;
    v76 = v85;
    v77 = v86;
    v73[4] = v86;
    v73[5] = v76;
    v78 = v90;
    v79 = v91;
    v73[6] = v87;
    v73[7] = v78;
    v73[8] = v79;
    v101 = sub_100119034;
    v102 = v73;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v98 = 1107296256;
    v99 = sub_1000094C8;
    v100 = &unk_1007E4EC0;
    v80 = _Block_copy(&aBlock);
    v81 = v102;
    v82 = v74;
    v83 = v75;
    v84 = v77;
    swift_retain();
    swift_retain();
    swift_release(v81);
    objc_msgSend(v82, "performBlock:", v80);
    _Block_release(v80);
  }
}

void sub_1000F865C(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v8 = _s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, "refreshObject:mergeChanges:", a2, 0);
  *(_QWORD *)v10 = a3;
  v10[8] = 2;
  swift_storeEnumTagMultiPayload(v10, v8, 33);
  v11 = a3;
  sub_10000D2C0();
  v13 = v12;
  sub_10001C744((uint64_t)v10, _s10PredicatesOMa);
  v14 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v15 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(v14), "entity");
  objc_msgSend(v15, "setEntity:", v16);

  objc_msgSend(v15, "setAffectedStores:", 0);
  objc_msgSend(v15, "setPredicate:", v13);

  v17 = NSManagedObjectContext.count<A>(for:)(v15, v14);
  a4(v17);

}

void sub_1000F8830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSDictionary v7;
  uint64_t v8;
  id v9;

  if (!a2)
  {
    v7.super.isa = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v8 = 0;
    goto LABEL_6;
  }
  v7.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v8 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  v9 = (id)v8;
  (*(void (**)(uint64_t, uint64_t, Class))(a4 + 16))(a4, a1, v7.super.isa);

}

void sub_1000F88C8(uint64_t a1, void (*a2)(void))
{
  void (*v2)(void);
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void (*v18)(void);
  id v19;
  uint64_t v20;

  v2 = a2;
  if (a1)
  {
    v3 = (void *)_convertErrorToNSError(_:)(a1);
    if (qword_100836D08 != -1)
      swift_once(&qword_100836D08, sub_1000F53D4);
    v4 = type metadata accessor for Logger(0);
    sub_10001AAA8(v4, (uint64_t)qword_10083AC30);
    v5 = v3;
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = v2;
      v19 = v5;
      v9 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      *v9 = v5;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDXPCDebugPerformer: Failed testReinitializeCloudKit {error: %@}", v8, 0xCu);
      v11 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v9, 1, v11);
      v12 = v9;
      v2 = v18;
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

    }
    v13 = (void *)objc_opt_self(REMError);
    v14 = v5;
    v15 = (void *)_convertErrorToNSError(_:)(v14);

    v16 = objc_msgSend(v13, "errorSanitizedForXPCFromError:", v15);
    v17 = v16;
    ((void (*)(id))v2)(v16);

  }
  else
  {
    a2();
  }
}

uint64_t sub_1000F8AE4(char a1, void *a2, void *a3, uint64_t a4, id *a5, void **a6, char *a7, uint64_t a8, void *a9, uint64_t a10, NSObject *a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  void **v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void ***v39;
  void **v40;
  uint64_t v41;
  id *v42;
  id v43;
  double v44;
  id v45;
  void *v46;
  char *v47;
  char *v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id **v67;
  void *v68;
  void **v69;
  id v70;
  void *v71;
  _QWORD *v72;
  os_log_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  id v77;
  void *v79;
  NSString v80;
  uint64_t v81;
  void *v82;
  NSString v83;
  uint64_t v84;
  void *v85;
  NSString v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  os_log_t v90;
  id v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  id *v99;
  _QWORD v100[3];
  char v101[8];
  char v102[24];
  void **aBlock;
  _QWORD v104[4];
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[24];

  v94 = a8;
  v98 = a7;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v99 = (id *)(a4 + 16);
  v96 = v18;
  v97 = __chkstk_darwin(v17);
  v95 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = v19;
  if ((a1 & 1) != 0 || !a2)
  {
    if (qword_100836D08 != -1)
      swift_once(&qword_100836D08, sub_1000F53D4);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_10083AC30);
    v35 = a3;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v92 = a6;
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v38 = 138412290;
      aBlock = v35;
      v40 = v35;
      a6 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v104);
      *v39 = v35;

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDXPCDebugPerformer: testReinitializeCloudKit: Done ACAccont migration flags unset {acAccount: %@}", v38, 0xCu);
      v41 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v39, 1, v41);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

    }
    v42 = v99;
  }
  else
  {
    swift_errorRetain(a2);
    if (qword_100836D08 != -1)
      swift_once(&qword_100836D08, sub_1000F53D4);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_10083AC30);
    swift_errorRetain(a2);
    v21 = a3;
    swift_errorRetain(a2);
    v22 = v21;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = (_QWORD *)swift_slowAlloc(8, -1);
      v92 = (void **)swift_slowAlloc(32, -1);
      aBlock = v92;
      *(_DWORD *)v26 = 138412546;
      LODWORD(v91) = v25;
      v106 = (uint64_t)v22;
      v90 = v23;
      v28 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
      *v27 = v22;

      *(_WORD *)(v26 + 12) = 2080;
      swift_getErrorValue(a2, v101, v100);
      v29 = Error.rem_errorDescription.getter(v100[1], v100[2]);
      v31 = v30;
      v106 = sub_10001A820(v29, v30, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      v23 = v90;
      _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v91, "RDXPCDebugPerformer: testReinitializeCloudKit: ERROR unsetting ACAccount migration flags {acAccount: %@, error: %s}", (uint8_t *)v26, 0x16u);
      v32 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v27, 1, v32);
      swift_slowDealloc(v27, -1, -1);
      v33 = v92;
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v42 = v99;
    swift_beginAccess(v99, v102, 1, 0);
    v43 = *v42;
    *v42 = a2;
    swift_errorRelease(v43);
  }
  *(_QWORD *)&v44 = swift_beginAccess(v42, &v106, 0, 0).n128_u64[0];
  v45 = *v42;
  if (v45)
  {
    swift_errorRetain(v45);
    ((void (*)(id))a5)(v45);
    return swift_errorRelease(v45);
  }
  v46 = *(void **)&v98[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController];
  v47 = (char *)objc_msgSend(v46, "cloudContext", v44);
  if (!v47)
  {
    v79 = (void *)objc_opt_self(REMError);
    v80 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v79, "internalErrorWithDebugDescription:", v80);

    swift_willThrow(v81);
LABEL_28:
    swift_errorRetain(v45);
    ((void (*)(id))a5)(v45);
    swift_errorRelease(v45);
    return swift_errorRelease(v45);
  }
  v48 = v47;
  v49 = objc_msgSend(v46, "accountUtils");
  if (!v49)
  {
    v82 = (void *)objc_opt_self(REMError);
    v83 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v82, "internalErrorWithDebugDescription:", v83);

    swift_willThrow(v84);
    goto LABEL_28;
  }
  v50 = v49;
  if ((objc_msgSend(v46, "supportsSyncingToCloudKit") & 1) == 0)
  {
    v85 = (void *)objc_opt_self(REMError);
    v86 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v85, "internalErrorWithDebugDescription:", v86);

    swift_willThrow(v87);
    swift_release(v50);
    goto LABEL_28;
  }
  objc_msgSend(v48, "setDisabled:", 1);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v91 = v50;
  v98 = v48;
  v99 = a5;
  v92 = a6;
  v90 = a11;
  v88 = a10;
  v89 = a9;
  v51 = type metadata accessor for Logger(0);
  v52 = sub_10001AAA8(v51, (uint64_t)qword_10083AC30);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit disabled.", v55, 2u);
    swift_slowDealloc(v55, -1, -1);
  }

  v57 = v96;
  v56 = v97;
  v58 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v95, v94, v97);
  v59 = *(unsigned __int8 *)(v57 + 80);
  v60 = (v59 + 16) & ~v59;
  v61 = (v93 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
  v62 = (v61 + 23) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF8;
  v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
  v65 = (v64 + 15) & 0xFFFFFFFFFFFFFFF8;
  v66 = swift_allocObject(&unk_1007E4CA0, v65 + 16, v59 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v66 + v60, v58, v56);
  v67 = (id **)(v66 + v61);
  v68 = v98;
  v69 = v92;
  *v67 = v99;
  v67[1] = v69;
  *(_QWORD *)(v66 + v62) = v68;
  v70 = v91;
  *(_QWORD *)(v66 + v63) = v91;
  v71 = v89;
  *(_QWORD *)(v66 + v64) = v89;
  v72 = (_QWORD *)(v66 + v65);
  v73 = v90;
  *v72 = v88;
  v72[1] = v73;
  v104[3] = sub_100118A8C;
  v105 = v66;
  aBlock = _NSConcreteStackBlock;
  v104[0] = 1107296256;
  v104[1] = sub_1000094C8;
  v104[2] = &unk_1007E4CB8;
  v74 = _Block_copy(&aBlock);
  v75 = v105;
  swift_retain();
  v76 = v68;
  swift_retain();
  v77 = v71;
  swift_bridgeObjectRetain(v73);
  swift_release(v75);
  objc_msgSend(v76, "cancelEverythingWithCompletionHandler:", v74);
  _Block_release(v74);

  return swift_release(v70);
}

void sub_1000F93D8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  Class isa;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  id v25;
  unsigned int v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject **v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  void (*v47)(uint64_t);
  NSObject *v51;
  uint64_t v52;

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001AAA8(v11, (uint64_t)qword_10083AC30);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit cancelEverything completed.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = (void *)objc_opt_self(REMAccount);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(v16, "objectIDWithUUID:", isa);

  v19 = objc_msgSend(objc_allocWithZone((Class)REMStore), "init");
  v20 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v19);
  v51 = 0;
  v21 = objc_msgSend(v19, "fetchAccountWithObjectID:error:", v18, &v51);
  v22 = v51;
  if (!v21)
  {
    v36 = v51;
    v37 = _convertNSErrorToError(_:)(v22);

    swift_willThrow(v38);
LABEL_11:

    swift_errorRetain(v37);
    a2(v37);
    swift_errorRelease(v37);
    swift_errorRelease(v37);

    return;
  }
  v23 = v21;
  v24 = v51;
  v25 = objc_msgSend(v20, "updateAccount:", v23);
  objc_msgSend(v25, "removeFromStore");
  v51 = 0;
  v26 = objc_msgSend(v20, "saveSynchronouslyWithError:", &v51);
  v27 = v51;
  if (!v26)
  {
    v39 = a2;
    v40 = v51;
    v37 = _convertNSErrorToError(_:)(v27);

    a2 = v39;
    swift_willThrow(v41);

    v20 = v25;
    goto LABEL_11;
  }
  v28 = v51;

  objc_msgSend(a4, "setDisabled:", 0);
  v29 = v18;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v47 = a2;
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v32 = 138412290;
    v51 = v29;
    v34 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    *v33 = v29;

    _os_log_impl((void *)&_mh_execute_header, v30, v31, "RDXPCDebugPerformer: testReinitializeCloudKit: REM account removed from DB. CloudKit re-enabled. {objectID: %@}", v32, 0xCu);
    v35 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v33, 1, v35);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {

    v30 = v29;
  }

  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(a6);
  v44 = v43;
  if (qword_100836F10 != -1)
    swift_once(&qword_100836F10, sub_1001BA718);
  v45 = (void *)qword_100871CD0;
  v46 = (_QWORD *)swift_allocObject(&unk_1007E4CF0, 48, 7);
  v46[2] = a7;
  v46[3] = a8;
  v46[4] = v47;
  v46[5] = a3;
  swift_bridgeObjectRetain(a8);
  swift_retain();
  sub_100545C5C(v42, v44, 1, v45, (uint64_t)sub_100118B34, (uint64_t)v46);

  swift_bridgeObjectRelease(v44);
  swift_release(v46);
}

uint64_t sub_1000F9888(char a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  _QWORD v22[3];
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_10083AC30);
  swift_bridgeObjectRetain(a5);
  swift_errorRetain(a3);
  swift_bridgeObjectRetain(a5);
  v13 = swift_errorRetain(a3);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(34, -1);
    v21 = swift_slowAlloc(64, -1);
    v25 = v21;
    *(_DWORD *)v16 = 136315906;
    swift_bridgeObjectRetain(a5);
    v24 = sub_10001A820(a4, a5, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease_n(a5, 3);
    *(_WORD *)(v16 + 12) = 1024;
    LODWORD(v24) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, (char *)&v24 + 4);
    *(_WORD *)(v16 + 18) = 1024;
    LODWORD(v24) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, (char *)&v24 + 4);
    *(_WORD *)(v16 + 24) = 2080;
    if (a3)
    {
      swift_getErrorValue(a3, v23, v22);
      v17 = Error.rem_errorDescription.getter(v22[1], v22[2]);
      v19 = v18;
    }
    else
    {
      v19 = 0xE300000000000000;
      v17 = 7104878;
    }
    v24 = sub_10001A820(v17, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDXPCDebugPerformer: testReinitializeCloudKit: Completed updateState() for accountIdentifier: %s, didAddAccount: %{BOOL}d, didUpdateAccount: %{BOOL}d, updateAccountError: %s", (uint8_t *)v16, 0x22u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a5, 2);
    swift_errorRelease(a3);
    swift_errorRelease(a3);

  }
  return a6(a3);
}

void sub_1000F9B80(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  void **v25;
  void **v26;
  void **v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSString v34;
  NSString v35;
  void *v36;
  uint64_t v37;
  NSString v38;
  NSString v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **aBlock;
  uint64_t v55;
  void (*v56)(uint64_t, void *);
  void *v57;
  uint64_t (*v58)();
  uint64_t v59;

  v49 = a7;
  v51 = a3;
  v52 = a1;
  v16 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_10083AC30);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v46 = a5;
    v23 = swift_slowAlloc(12, -1);
    v47 = a8;
    v24 = (uint8_t *)v23;
    v25 = (void **)swift_slowAlloc(32, -1);
    v45 = v16;
    v26 = v25;
    aBlock = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(a2);
    v53 = sub_10001A820(v52, a2, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &aBlock);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDXPCDebugPerformer: fireDebugNotification initiated with text: %s", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    v27 = v26;
    v16 = v45;
    swift_slowDealloc(v27, -1, -1);
    v28 = v24;
    a8 = v47;
    swift_slowDealloc(v28, -1, -1);

    if (a4)
    {
LABEL_5:
      v30 = a4;
      goto LABEL_8;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    if (a4)
      goto LABEL_5;
  }
  v31 = UUID.init()(v29);
  v51 = UUID.uuidString.getter(v31);
  v30 = v32;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v16);
LABEL_8:
  v33 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init", swift_bridgeObjectRetain(a4).n128_f64[0]);
  v34 = String._bridgeToObjectiveC()();
  objc_msgSend(v33, "setBody:", v34);

  if (a6)
  {
    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(v33, "setCategoryIdentifier:", v35);

  }
  if (a8)
  {
    v36 = *(void **)(v50 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_notificationCenter);
    if ((a9 & 1) != 0)
    {
      v37 = swift_allocObject(&unk_1007E4B10, 32, 7);
      *(_QWORD *)(v37 + 16) = a10;
      *(_QWORD *)(v37 + 24) = a11;
      swift_retain();
      v38 = String._bridgeToObjectiveC()();
      v39 = String._bridgeToObjectiveC()();
      v58 = sub_1000098EC;
      v59 = v37;
      aBlock = _NSConcreteStackBlock;
      v55 = 1107296256;
      v56 = sub_1000E18E4;
      v57 = &unk_1007E4B28;
      v40 = _Block_copy(&aBlock);
      v41 = v59;
      swift_retain();
      swift_release(v41);
      objc_msgSend(v36, "releaseNotificationWithIdentifier:reference:completion:", v38, v39, v40);
    }
    else
    {
      v37 = swift_allocObject(&unk_1007E4AC0, 32, 7);
      *(_QWORD *)(v37 + 16) = a10;
      *(_QWORD *)(v37 + 24) = a11;
      swift_retain();
      v38 = String._bridgeToObjectiveC()();
      v39 = String._bridgeToObjectiveC()();
      v58 = sub_100119B20;
      v59 = v37;
      aBlock = _NSConcreteStackBlock;
      v55 = 1107296256;
      v56 = sub_1000E18E4;
      v57 = &unk_1007E4AD8;
      v40 = _Block_copy(&aBlock);
      v43 = v59;
      swift_retain();
      swift_release(v43);
      objc_msgSend(v36, "retainNotificationWithIdentifier:reference:content:skipBanner:completion:", v38, v39, v33, 0, v40);
    }
    _Block_release(v40);
    swift_release(v37);

    swift_bridgeObjectRelease(v30);
  }
  else
  {
    v42 = swift_allocObject(&unk_1007E4A98, 32, 7);
    *(_QWORD *)(v42 + 16) = a10;
    *(_QWORD *)(v42 + 24) = a11;
    swift_retain();
    sub_1004853D8(v51, v30, v33, (uint64_t)sub_100119B20, v42);
    swift_release(v42);

    swift_bridgeObjectRelease(v30);
  }
}

uint64_t sub_1000FA1CC(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  _QWORD *v42;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001AAA8(v13, (uint64_t)qword_10083AC30);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    v38 = v12;
    v18 = v3;
    v19 = v9;
    v20 = v6;
    v21 = a2;
    v22 = v10;
    v23 = a1;
    v24 = v7;
    v25 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDXPCDebugPerformer: Debug: fetchGeofences", v17, 2u);
    v26 = v25;
    v7 = v24;
    a1 = v23;
    v10 = v22;
    a2 = v21;
    v6 = v20;
    v9 = v19;
    v3 = v18;
    v12 = v38;
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = *(void **)(*(_QWORD *)&v3[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager]
                 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  v28 = (_QWORD *)swift_allocObject(&unk_1007E4A20, 40, 7);
  v28[2] = v3;
  v28[3] = a1;
  v28[4] = a2;
  aBlock[4] = sub_100118818;
  v42 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E4A38;
  v29 = _Block_copy(aBlock);
  v30 = v27;
  v31 = v3;
  v32 = swift_retain();
  static DispatchQoS.unspecified.getter(v32);
  v40 = _swiftEmptyArrayStorage;
  v33 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_10001A630((uint64_t *)&unk_100838000);
  v35 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v34, v35, v6, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v39);
  return swift_release(v42);
}

void sub_1000FA4D0(uint64_t a1, void (*a2)(_QWORD *, __n128))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  __n128 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  _BYTE v39[32];
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  _QWORD *v43;

  v2 = sub_10046B968();
  v3 = v2;
  v38 = v2 & 0xC000000000000001;
  if ((v2 & 0xC000000000000001) == 0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
      goto LABEL_5;
LABEL_11:
    v9 = swift_bridgeObjectRelease(v3);
    v10 = _swiftEmptyArrayStorage;
LABEL_29:
    a2(v10, v9);
    swift_bridgeObjectRelease(v10);
    return;
  }
  if (v2 >= 0)
    v2 &= 0xFFFFFFFFFFFFFF8uLL;
  v4 = __CocoaSet.count.getter(v2);
  if (!v4)
    goto LABEL_11;
LABEL_5:
  v43 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v4 & ~(v4 >> 63), 0);
  if (v38)
  {
    if (v3 < 0)
      v5 = v3;
    else
      v5 = v3 & 0xFFFFFFFFFFFFFF8;
    v6 = __CocoaSet.startIndex.getter(v5);
    v8 = 1;
  }
  else
  {
    v6 = sub_100364E8C(v3);
    v8 = v11 & 1;
  }
  v40 = v6;
  v41 = v7;
  v42 = v8;
  if ((v4 & 0x8000000000000000) == 0)
  {
    v12 = v3 & 0xFFFFFFFFFFFFFF8;
    if (v3 < 0)
      v12 = v3;
    v37 = v12;
    do
    {
      while (1)
      {
        v19 = v40;
        v18 = v41;
        v20 = v42;
        sub_100364B68(v40, v41, v42, v3);
        v22 = v21;
        v23 = objc_msgSend(v21, "debugDescription");
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

        v27 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        {
          sub_1001C1B0C(0, v27[2] + 1, 1);
          v27 = v43;
        }
        v29 = v27[2];
        v28 = v27[3];
        if (v29 >= v28 >> 1)
        {
          sub_1001C1B0C(v28 > 1, v29 + 1, 1);
          v27 = v43;
        }
        v27[2] = v29 + 1;
        v30 = &v27[2 * v29];
        v30[4] = v24;
        v30[5] = v26;
        if (v38)
          break;
        v13 = sub_10036456C(v19, v18, v20, v3);
        v15 = v14;
        v17 = v16;
        sub_1000E515C(v19, v18, v20);
        v40 = v13;
        v41 = v15;
        v42 = v17 & 1;
        if (!--v4)
          goto LABEL_28;
      }
      if ((v20 & 1) == 0)
        goto LABEL_31;
      v31 = __CocoaSet.Index.handleBitPattern.getter(v19, v18);
      if (v31)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v33 = sub_10001A630(&qword_10083AE70);
      v34 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v39, v33);
      __CocoaSet.formIndex(after:isUnique:)(v35, isUniquelyReferenced_nonNull_native, v37);
      v34(v39, 0);
      --v4;
    }
    while (v4);
LABEL_28:
    sub_1000E515C(v40, v41, v42);
    v9 = swift_bridgeObjectRelease(v3);
    v10 = v43;
    goto LABEL_29;
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t sub_1000FA7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t aBlock[5];
  _QWORD *v49;

  v4 = v3;
  v44 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = UUID.uuidString.getter(v11);
  v15 = v14;
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v16 = type metadata accessor for Logger(0);
  sub_10001AAA8(v16, (uint64_t)qword_10083AC30);
  v17 = swift_bridgeObjectRetain_n(v15, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v39 = v4;
    v20 = swift_slowAlloc(12, -1);
    v42 = v7;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v41 = a3;
    v23 = v22;
    aBlock[0] = v22;
    v40 = v13;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain(v15);
    v24 = v43;
    v47 = (_QWORD *)sub_10001A820(v43, v15, aBlock);
    v4 = v39;
    v13 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, aBlock);
    swift_bridgeObjectRelease_n(v15, 3);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDXPCDebugPerformer: Debug: removeGeofence {UUID=%s}", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v25 = v23;
    a3 = v41;
    swift_slowDealloc(v25, -1, -1);
    v26 = v21;
    v7 = v42;
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v15, 2);
    v24 = v43;
  }
  v27 = *(void **)(*(_QWORD *)&v4[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager]
                 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  v28 = (_QWORD *)swift_allocObject(&unk_1007E49A8, 56, 7);
  v28[2] = v4;
  v28[3] = v24;
  v28[4] = v15;
  v28[5] = a2;
  v28[6] = a3;
  aBlock[4] = (uint64_t)sub_100118760;
  v49 = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007E49C0;
  v29 = _Block_copy(aBlock);
  v30 = v27;
  v31 = v4;
  v32 = swift_retain();
  static DispatchQoS.unspecified.getter(v32);
  v47 = _swiftEmptyArrayStorage;
  v33 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_10001A630((uint64_t *)&unk_100838000);
  v35 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v34, v35, v44, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v36);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
  return swift_release(v49);
}

uint64_t sub_1000FAC84(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  double *v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t (*v65)(char *, char *, uint64_t);
  char *v66;
  void (*v67)(char *, uint64_t, __n128);
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t aBlock[5];
  double *v80;

  v71 = a3;
  v69 = a2;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v76 = *(_QWORD *)(v10 - 8);
  v77 = v10;
  __chkstk_darwin(v10);
  v75 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v12 - 8);
  v74 = v12;
  __chkstk_darwin(v12);
  v72 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v14);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v17);
  v68 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v64 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v64 - v24;
  sub_100008868(a1, (uint64_t)v16, (uint64_t *)&unk_100839C80);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  if ((_DWORD)v26 == 1)
  {
    UUID.init()(v26);
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v25, v16, v17);
  }
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v27 = type metadata accessor for Logger(0);
  sub_10001AAA8(v27, (uint64_t)qword_10083AC30);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  v28 = *(uint64_t (**)(char *, char *, uint64_t))(v18 + 16);
  v29 = v28(v23, v25, v17);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(60, -1);
    v65 = v28;
    v33 = v32;
    v64 = swift_slowAlloc(32, -1);
    aBlock[0] = v64;
    *(_DWORD *)v33 = 68159234;
    LODWORD(v78) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 4);
    *(_WORD *)(v33 + 8) = 2048;
    v78 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, aBlock);
    v66 = v25;
    *(_WORD *)(v33 + 18) = 1040;
    LODWORD(v78) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 4);
    *(_WORD *)(v33 + 24) = 2048;
    v78 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, aBlock);
    *(_WORD *)(v33 + 34) = 1040;
    LODWORD(v78) = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 4);
    *(_WORD *)(v33 + 40) = 2048;
    v78 = a6;
    v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, aBlock);
    *(_WORD *)(v33 + 50) = 2080;
    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    v78 = COERCE_DOUBLE(sub_10001A820(v35, v36, aBlock));
    v25 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, aBlock);
    v38 = swift_bridgeObjectRelease(v37);
    v67 = *(void (**)(char *, uint64_t, __n128))(v18 + 8);
    v67(v23, v17, v38);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "RDXPCDebugPerformer: Debug: addGeofence {center=(%.*f,%.*f), r=%.*f, UUID=%s}", (uint8_t *)v33, 0x3Cu);
    v39 = v64;
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    v40 = v33;
    v28 = v65;
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    v67 = *(void (**)(char *, uint64_t, __n128))(v18 + 8);
    ((void (*)(char *, uint64_t))v67)(v23, v17);
  }

  v41 = v70;
  v42 = *(void **)(*(_QWORD *)&v70[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager]
                 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  v43 = v68;
  v28(v68, v25, v17);
  v44 = *(unsigned __int8 *)(v18 + 80);
  v45 = (v44 + 40) & ~v44;
  v46 = (v19 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = v25;
  v48 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
  v49 = (double *)swift_allocObject(&unk_1007E4930, v48 + 16, v44 | 7);
  v49[2] = a4;
  v49[3] = a5;
  v49[4] = a6;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))((char *)v49 + v45, v43, v17);
  *(_QWORD *)((char *)v49 + v46) = v41;
  v50 = (_QWORD *)((char *)v49 + v48);
  v51 = v71;
  *v50 = v69;
  v50[1] = v51;
  aBlock[4] = (uint64_t)sub_1001186D4;
  v80 = v49;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007E4948;
  v52 = _Block_copy(aBlock);
  v53 = v42;
  v54 = v41;
  v55 = swift_retain();
  v56 = v72;
  static DispatchQoS.unspecified.getter(v55);
  v78 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  v57 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v58 = sub_10001A630((uint64_t *)&unk_100838000);
  v59 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v60 = v75;
  v61 = v58;
  v62 = v77;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v61, v59, v77, v57);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v56, v60, v52);
  _Block_release(v52);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v60, v62);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v56, v74);
  ((void (*)(char *, uint64_t))v67)(v47, v17);
  return swift_release(v80);
}

void sub_1000FB2E0(uint64_t a1, double a2, double a3, double a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  id v14;

  UUID.uuidString.getter(a1);
  v11 = v10;
  v12 = objc_allocWithZone((Class)CLCircularRegion);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v14 = objc_msgSend(v12, "initWithCenter:radius:identifier:", v13, a2, a3, a4);

  objc_msgSend(v14, "setNotifyOnEntry:", 1);
  objc_msgSend(v14, "setNotifyOnExit:", 1);
  sub_10046B1F8((uint64_t)v14);
  a6();

}

uint64_t sub_1000FB5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  CLLocationCoordinate2D v17;
  id v18;
  NSString v19;
  id v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  id v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[5];
  _QWORD *v41;

  v34 = a6;
  v35 = a7;
  v33 = a3;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v14 - 8);
  v37 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = CLLocationCoordinate2DMake(37.3318, 122.0312);
  v18 = objc_allocWithZone((Class)CLCircularRegion);
  swift_bridgeObjectRetain(a2);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v20 = objc_msgSend(v18, "initWithCenter:radius:identifier:", v19, v17.latitude, v17.longitude, 100.0);

  v21 = *(void **)(*(_QWORD *)&v7[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager]
                 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  v22 = (_QWORD *)swift_allocObject(a5, 48, 7);
  v22[2] = v7;
  v22[3] = v20;
  v22[4] = v33;
  v22[5] = a4;
  aBlock[4] = v34;
  v41 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = v35;
  v23 = _Block_copy(aBlock);
  v24 = v21;
  v25 = v7;
  v26 = v20;
  v27 = swift_retain();
  static DispatchQoS.unspecified.getter(v27);
  v39 = _swiftEmptyArrayStorage;
  v28 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_10001A630((uint64_t *)&unk_100838000);
  v30 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v29, v30, v11, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v37);
  return swift_release(v41);
}

void sub_1000FBAD8(void *a1, void *a2, char a3)
{
  uint64_t v3;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  NSString v15;
  void *v16;
  NSString v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2;
  v7 = sub_1005CBC20(v6);
  if (!v3)
  {
    v8 = v7;
    sub_1004BB130(v7, 0);
    v10 = v9;
    if (v9)
    {
      if ((a3 & 1) == 0)
      {
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextAuthor);
        v13 = v12;
        v20 = v11;
        v21 = v12;
        swift_bridgeObjectRetain(v12);
        v14._object = (void *)0x80000001006F8520;
        v14._countAndFlagsBits = 0xD000000000000038;
        String.append(_:)(v14);
        swift_bridgeObjectRelease(v13);
        v15 = String._bridgeToObjectiveC()();
        objc_msgSend(a1, "setTransactionAuthor:", v15, swift_bridgeObjectRelease(v21).n128_f64[0], v20);

      }
      v16 = (void *)objc_opt_self(REMError);
      v17 = String._bridgeToObjectiveC()();
      objc_msgSend(v16, "internalErrorWithDebugDescription:", v17);

      swift_willThrow(v18);
      v8 = v10;
    }
    else
    {
      v19 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v6);
      swift_willThrow(v19);
    }

  }
}

void sub_1000FBC88(void *a1, int a2, void *a3, uint64_t a4, void *aBlock, void (*a6)(id, uint64_t, id, void *))
{
  void *v10;
  id v11;
  id v12;

  v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  v11 = a3;
  v12 = a1;
  a6(v11, a4, v12, v10);
  _Block_release(v10);
  _Block_release(v10);

}

void sub_1000FBD14(void *a1, void *a2, char a3, double a4)
{
  uint64_t v4;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  id v14;
  void *v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  os_log_type_t v36;
  uint64_t v37;
  id v38;

  v8 = a2;
  v9 = sub_1005CDAE0(v8);
  if (!v4)
  {
    v10 = v9;
    sub_1004BB154(v9, 0);
    v12 = v11;
    if (v11)
    {
      -[NSObject setDueDateResolutionTokenAsNonce:](v11, "setDueDateResolutionTokenAsNonce:", a4);
      if ((a3 & 1) != 0)
      {
        -[NSObject updateChangeCount](v12, "updateChangeCount");
      }
      else
      {
        -[NSObject setCkDirtyFlags:](v12, "setCkDirtyFlags:", 0);
        v14 = -[NSObject trigger](v12, "trigger");
        if (v14)
        {
          v15 = v14;
          objc_msgSend(v14, "setCkDirtyFlags:", 0);

        }
      }
      if (!objc_msgSend(a1, "hasChanges"))
        goto LABEL_19;
      v38 = 0;
      v16 = objc_msgSend(a1, "save:", &v38);
      v17 = v38;
      if (!v16)
      {
        v30 = v38;
        _convertNSErrorToError(_:)(v17);

        swift_willThrow(v31);
LABEL_19:

        goto LABEL_20;
      }
      v18 = qword_100836D08;
      v19 = v38;
      if (v18 != -1)
        swift_once(&qword_100836D08, sub_1000F53D4);
      v20 = type metadata accessor for Logger(0);
      sub_10001AAA8(v20, (uint64_t)qword_10083AC30);
      v21 = v12;
      v12 = Logger.logObject.getter(v21);
      v22 = static os_log_type_t.default.getter(v12);
      if (os_log_type_enabled(v12, v22))
      {
        v36 = v22;
        v23 = swift_slowAlloc(22, -1);
        v35 = (void *)swift_slowAlloc(64, -1);
        v38 = v35;
        *(_DWORD *)v23 = 136446466;
        v24 = -[NSObject remObjectID](v21, "remObjectID");
        if (v24)
        {
          v25 = v24;
          v26 = objc_msgSend(v24, "description");

          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v29 = v28;

        }
        else
        {
          v29 = 0xE300000000000000;
          v27 = 7104878;
        }
        v37 = sub_10001A820(v27, v29, (uint64_t *)&v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

        swift_bridgeObjectRelease(v29);
        *(_WORD *)(v23 + 12) = 2082;
        v32 = Bool.yesno.getter(a3 & 1);
        v34 = v33;
        v37 = sub_10001A820(v32, v33, (uint64_t *)&v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
        swift_bridgeObjectRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v12, v36, "RDXPCDebugPerformer: setDueDateResolutionTokenNonceForAlarmID: Saved changes {alarmID: %{public}s, shouldSetDirtyFlags: %{public}s}", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        goto LABEL_19;
      }

    }
    else
    {
      v13 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v8);
      swift_willThrow(v13);
    }
LABEL_20:

  }
}

void sub_1000FC12C(void *a1, void *a2, char a3, double a4)
{
  uint64_t v4;
  char **v5;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char **v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  char **v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  NSString v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  NSString v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  LOBYTE(v5) = a3;
  v8 = a2;
  v9 = sub_1005CBC20(v8);
  if (v4)
    return;
  v10 = (uint64_t)v9;
  sub_1004BB130(v9, 0);
  v12 = 0;
  v13 = v11;
  if (!v11)
  {
    v33 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v8);
    swift_willThrow(v33);
LABEL_3:

    return;
  }
  v14 = objc_msgSend(v11, "alarmStorage");
  if (!v14)
    goto LABEL_57;
  v15 = v14;
  v70 = a1;
  v71 = v13;
  v76 = (uint64_t)v14;
  v16 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
  v17 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
  v18 = sub_1000E51DC((unint64_t *)&qword_100841630, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr, (uint64_t)&protocol conformance descriptor for NSOrderedSet);
  v19 = (unint64_t)&v76;
  v20 = Sequence.elements<A>(ofType:)(v16, v17, v16, v18);

  if ((unint64_t)v20 >> 62)
    goto LABEL_52;
  v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
    goto LABEL_56;
  while (2)
  {
    v68 = v12;
    v69 = (void *)v10;
    v73 = (char)v5;
    v76 = (uint64_t)_swiftEmptyArrayStorage;
    if (v21 < 1)
    {
      __break(1u);
    }
    else
    {
      v22 = 0;
      v23 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
      do
      {
        if ((v20 & 0xC000000000000001) != 0)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
        else
          v24 = *(id *)(v20 + 8 * v22 + 32);
        v25 = v24;
        if ((objc_msgSend(v24, "isConcealed", v68) & 1) != 0
          || (objc_msgSend(v25, v23[184]) & 1) != 0
          || (v26 = objc_msgSend(v25, "trigger")) == 0)
        {

        }
        else
        {
          v27 = v26;
          v28 = v23;
          v29 = objc_msgSend(v26, "isTemporal");

          if ((v29 & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v30);
            v31 = *(_QWORD *)(v76 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
            v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v25);
            specialized ContiguousArray._endMutation()(v32);
          }
          else
          {

          }
          v23 = v28;
        }
        ++v22;
      }
      while (v21 != v22);
      swift_bridgeObjectRelease(v20);
      v19 = v76;
      if ((v76 & 0x8000000000000000) == 0 && (v76 & 0x4000000000000000) == 0)
      {
        v20 = *(_QWORD *)(v76 + 16);
        if (v20)
          goto LABEL_27;
LABEL_60:
        swift_release(v19);
        v65 = (void *)objc_opt_self(REMError);
        v66 = String._bridgeToObjectiveC()();
        objc_msgSend(v65, "internalErrorWithDebugDescription:", v66);

        swift_willThrow(v67);
        return;
      }
    }
    v64 = swift_retain();
    v20 = _CocoaArrayWrapper.endIndex.getter(v64);
    swift_release(v19);
    if (!v20)
      goto LABEL_60;
LABEL_27:
    v12 = v19 & 0xC000000000000001;
    swift_retain();
    v10 = 4;
    v5 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
    v34 = 0;
    if ((v19 & 0xC000000000000001) == 0)
    {
LABEL_31:
      v35 = *(id *)(v19 + 8 * v10);
      goto LABEL_32;
    }
    while (1)
    {
      v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v19);
LABEL_32:
      v36 = v35;
      v37 = v34 + 1;
      if (__OFADD__(v34, 1))
        break;
      objc_msgSend(v35, "setDueDateResolutionTokenAsNonce:", a4);
      if ((v73 & 1) != 0)
      {
        objc_msgSend(v36, "updateChangeCount");
      }
      else
      {
        objc_msgSend(v36, "setCkDirtyFlags:", 0);
        v38 = objc_msgSend(v36, "trigger");
        if (v38)
        {
          v39 = v38;
          objc_msgSend(v38, "setCkDirtyFlags:", 0);

          goto LABEL_38;
        }
      }

LABEL_38:
      if (v37 == v20)
      {
        swift_release(v19);
        v75 = v20;
        swift_release(v19);
        v10 = (uint64_t)v69;
        if ((objc_msgSend(v70, "hasChanges") & 1) == 0)
        {

          return;
        }
        v76 = 0;
        v40 = objc_msgSend(v70, "save:", &v76);
        v41 = v76;
        if (!v40)
        {
          v55 = (id)v76;
          _convertNSErrorToError(_:)(v41);

          swift_willThrow(v56);
          goto LABEL_3;
        }
        v42 = qword_100836D08;
        v43 = (id)v76;
        if (v42 != -1)
          swift_once(&qword_100836D08, sub_1000F53D4);
        v44 = type metadata accessor for Logger(0);
        sub_10001AAA8(v44, (uint64_t)qword_10083AC30);
        v45 = v71;
        v46 = Logger.logObject.getter(v45);
        v47 = static os_log_type_t.default.getter(v46);
        if (!os_log_type_enabled(v46, v47))
        {

          goto LABEL_3;
        }
        v48 = swift_slowAlloc(32, -1);
        v72 = swift_slowAlloc(64, -1);
        v78 = v72;
        *(_DWORD *)v48 = 136446722;
        v49 = objc_msgSend(v45, "remObjectID");
        if (v49)
        {
          v50 = v49;
          v51 = objc_msgSend(v49, "description");

          v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
          v54 = v53;

        }
        else
        {
          v54 = 0xE300000000000000;
          v52 = 7104878;
        }
        v76 = sub_10001A820(v52, v54, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);

        swift_bridgeObjectRelease(v54);
        *(_WORD *)(v48 + 12) = 2048;
        swift_beginAccess(&v75, &v76, 0, 0);
        v74 = v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
        *(_WORD *)(v48 + 22) = 2082;
        v57 = Bool.yesno.getter(v73 & 1);
        v59 = v58;
        v74 = sub_10001A820(v57, v58, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
        swift_bridgeObjectRelease(v59);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "RDXPCDebugPerformer: setDueDateResolutionTokenNonceForReminderID: Saved changes {reminderID: %{public}s, alarmsUpdated.count: %ld, shouldSetDirtyFlags: %{public}s}", (uint8_t *)v48, 0x20u);
        swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v48, -1, -1);

        return;
      }
      v34 = ++v10 - 4;
      if (!v12)
        goto LABEL_31;
    }
    __break(1u);
LABEL_52:
    if (v20 < 0)
      v60 = v20;
    else
      v60 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v21 = _CocoaArrayWrapper.endIndex.getter(v60);
    swift_bridgeObjectRelease(v20);
    if (v21)
      continue;
    break;
  }
LABEL_56:
  swift_bridgeObjectRelease(v20);
  v13 = v71;
LABEL_57:
  v61 = (void *)objc_opt_self(REMError);
  v62 = String._bridgeToObjectiveC()();
  objc_msgSend(v61, "internalErrorWithDebugDescription:", v62);

  swift_willThrow(v63);
}

void sub_1000FC93C(void *a1, int a2, void *a3, char a4, void *aBlock, const char *a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  void *v17;
  id v18;
  id v19;

  v17 = _Block_copy(aBlock);
  _Block_copy(v17);
  v18 = a3;
  v19 = a1;
  sub_1001110A8(v18, a4, (uint64_t)v19, (uint64_t)v17, a6, a7, a8, a10, a9);
  _Block_release(v17);
  _Block_release(v17);

}

uint64_t sub_1000FCB34(void *a1, int a2, id a3, _QWORD *a4)
{
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  double v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  void *object;
  Swift::String v54;
  Swift::String v55;
  void *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  id v64;
  unint64_t v65;

  v5 = a1;
  v6 = objc_msgSend(a3, "stringFromContact:", a1);
  if (v6)
  {
    v7 = v6;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v10 = v9;

  }
  else
  {
    v10 = 0xE500000000000000;
    v8 = 0x296C696E28;
  }
  v11 = objc_msgSend(v5, "phoneNumbers");
  v12 = sub_10001A630((uint64_t *)&unk_10083AE50);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v43 = v13;
    else
      v43 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v14 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v62 = v10;
  v63 = a4;
  v61 = v8;
  v64 = v5;
  if (v14)
  {
    result = sub_1001C1B0C(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_43;
    }
    v16 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v13);
      else
        v17 = *(id *)(v13 + 8 * v16 + 32);
      v18 = v17;
      v19 = objc_msgSend(v17, "value");
      v20 = objc_msgSend(v19, "stringValue");

      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      v25 = _swiftEmptyArrayStorage[2];
      v24 = _swiftEmptyArrayStorage[3];
      if (v25 >= v24 >> 1)
        sub_1001C1B0C(v24 > 1, v25 + 1, 1);
      ++v16;
      _swiftEmptyArrayStorage[2] = v25 + 1;
      v26 = &_swiftEmptyArrayStorage[2 * v25];
      v26[4] = v21;
      v26[5] = v23;
    }
    while (v14 != v16);
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v13).n128_u64[0];
    v5 = v64;
  }
  else
  {
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  v28 = objc_msgSend(v5, "emailAddresses", v27);
  v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v12);

  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0)
      v44 = v29;
    else
      v44 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v30 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease(v29);
    if (v30)
    {
LABEL_19:
      result = sub_1001C1B0C(0, v30 & ~(v30 >> 63), 0);
      if ((v30 & 0x8000000000000000) == 0)
      {
        v31 = 0;
        v65 = v29 & 0xC000000000000001;
        v32 = v29;
        do
        {
          if (v65)
            v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v29);
          else
            v33 = *(id *)(v29 + 8 * v31 + 32);
          v34 = v33;
          v35 = objc_msgSend(v33, "value");
          v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
          v38 = v37;

          v40 = _swiftEmptyArrayStorage[2];
          v39 = _swiftEmptyArrayStorage[3];
          if (v40 >= v39 >> 1)
            sub_1001C1B0C(v39 > 1, v40 + 1, 1);
          ++v31;
          _swiftEmptyArrayStorage[2] = v40 + 1;
          v41 = &_swiftEmptyArrayStorage[2 * v40];
          v41[4] = v36;
          v41[5] = v38;
          v29 = v32;
        }
        while (v30 != v31);
        v42 = swift_bridgeObjectRelease(v32).n128_u64[0];
        v5 = v64;
        goto LABEL_37;
      }
LABEL_43:
      __break(1u);
      return result;
    }
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v30)
      goto LABEL_19;
  }
  v42 = swift_bridgeObjectRelease(v29).n128_u64[0];
LABEL_37:
  v45 = objc_msgSend(v5, "identifier", *(double *)&v42);
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  v48 = v47;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(0xE000000000000000);
  v49._countAndFlagsBits = 0x6469202020200A3ALL;
  v49._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v49);
  v50._countAndFlagsBits = v46;
  v50._object = v48;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v48);
  v51._countAndFlagsBits = 0x6F6870202020200ALL;
  v51._object = (void *)0xEC0000003D73656ELL;
  String.append(_:)(v51);
  v52._countAndFlagsBits = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
  object = v52._object;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(object);
  v54._object = (void *)0xEC0000003D736C69;
  v54._countAndFlagsBits = 0x616D65202020200ALL;
  String.append(_:)(v54);
  v55._countAndFlagsBits = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
  v56 = v55._object;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v56);
  v57 = (_QWORD *)*v63;
  result = swift_isUniquelyReferenced_nonNull_native(*v63);
  *v63 = v57;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1002C8224(0, v57[2] + 1, 1, v57);
    v57 = (_QWORD *)result;
    *v63 = result;
  }
  v59 = v57[2];
  v58 = v57[3];
  if (v59 >= v58 >> 1)
  {
    result = (uint64_t)sub_1002C8224((_QWORD *)(v58 > 1), v59 + 1, 1, v57);
    v57 = (_QWORD *)result;
    *v63 = result;
  }
  v57[2] = v59 + 1;
  v60 = &v57[2 * v59];
  v60[4] = v61;
  v60[5] = v62;
  return result;
}

void sub_1000FD088(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

void sub_1000FD154(void **a1, uint64_t a2)
{
  id v3;
  NSURL *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;

  v3 = *(id *)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerByContainerURL);
  URL._bridgeToObjectiveC()(v4);
  v6 = v5;
  v7 = objc_msgSend(v3, "objectForKey:", v5);

  v8 = *a1;
  *a1 = v7;

}

uint64_t sub_1000FD1C8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083AC30);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "RDXPCDebugPerformer: Notifying stores did change for isolated store", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return notify_post(_REMStoreChangedNotificationName);
}

void sub_1000FD2A0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, NSURL *a4@<X8>)
{
  void *v7;
  id v8;

  URL._bridgeToObjectiveC()(a4);
  v8 = v7;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerByContainerURL), "setObject:forKey:", a2, v7);
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerNotificationCenterByContainerURL), "setObject:forKey:", a3, v8);

}

uint64_t sub_1000FD320(uint64_t a1)
{
  id v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend((id)objc_opt_self(REMCDAccount), "_groundTruth_primaryActiveCloudKitAccountInContext:", a1);
  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v2 = (_QWORD *)qword_100872288;
  v3 = qword_100837960;
  swift_retain(qword_100872288);
  if (v3 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v4 = qword_100872290;
  swift_retain(qword_100872290);
  sub_100300C1C(v1, v2, v4);

  swift_release(v2);
  return swift_release(v4);
}

void sub_1000FD420(void *a1, int a2, void *aBlock, void (*a4)(void *))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4(v6);
  _Block_release(v6);
  _Block_release(v6);

}

uint64_t sub_1000FD484(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  id v33;
  char *v34;
  NSObject *v35;
  void *v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v74[2];
  void (*v75)(uint64_t, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  _QWORD *v97;
  void **aBlock;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  void *v101;
  void *v102;
  uint64_t v103;

  v4 = v3;
  v83 = a3;
  v81 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v91 = *(_QWORD *)(v6 - 8);
  v92 = v6;
  __chkstk_darwin(v6);
  v90 = (char *)v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v88 = *(_QWORD *)(v8 - 8);
  v89 = v8;
  __chkstk_darwin(v8);
  v87 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for DispatchTime(0);
  v80 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v79 = (char *)v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v86 = (char *)v74 - v12;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v94 = v19;
  v95 = (char *)v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v96 = (char *)v74 - v21;
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001AAA8(v22, (uint64_t)qword_10083AC30);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "os_transaction INIT {name: com.apple.remindd.RDXPCDebugPerformer.destroyIsolatedStoreContainer}", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  v78 = os_transaction_create("com.apple.remindd.RDXPCDebugPerformer.destroyIsolatedStoreContainer");
  v27 = (void *)objc_opt_self(RDPaths);
  v82 = a1;
  v28 = objc_msgSend(a1, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

  UUID.uuidString.getter(v29);
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v27, "urlForIsolatedContainerWithIdentifier:", v32, swift_bridgeObjectRelease(v31).n128_f64[0]);

  v34 = v96;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v35 = *(NSObject **)&v4[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_accessQueue];
  v36 = v4;
  v37 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v38 = v95;
  v37(v95, v34, v17);
  v39 = *(unsigned __int8 *)(v18 + 80);
  v40 = (v39 + 24) & ~v39;
  v77 = v39 | 7;
  v41 = swift_allocObject(&unk_1007E4610, v40 + v94, v39 | 7);
  *(_QWORD *)(v41 + 16) = v36;
  v84 = v18;
  v42 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 32);
  v85 = v17;
  v42(v41 + v40, v38, v17);
  v43 = swift_allocObject(&unk_1007E4638, 32, 7);
  *(_QWORD *)(v43 + 16) = sub_1001182CC;
  *(_QWORD *)(v43 + 24) = v41;
  v102 = sub_1000A66B8;
  v103 = v43;
  aBlock = _NSConcreteStackBlock;
  v99 = 1107296256;
  v100 = sub_1000098C4;
  v101 = &unk_1007E4650;
  v44 = _Block_copy(&aBlock);
  v45 = v103;
  v46 = v36;
  swift_retain();
  swift_release(v45);
  dispatch_sync(v35, v44);
  _Block_release(v44);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v43, "", 105, 907, 31, 1);
  v48 = swift_release(v43);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v75 = v42;
  v76 = v41;
  isEscapingClosureAtFileLocation = ~v39;
  if (qword_100836F28 != -1)
LABEL_9:
    v48 = swift_once(&qword_100836F28, sub_1001BA8F8);
  v74[1] = qword_100871CE8;
  v49 = v79;
  static DispatchTime.now()(v48);
  v50 = v86;
  + infix(_:_:)(v49, 2.0);
  v80 = *(_QWORD *)(v80 + 8);
  ((void (*)(char *, uint64_t))v80)(v49, v93);
  v51 = v95;
  v52 = v85;
  v37(v95, v96, v85);
  v53 = (v39 + 32) & isEscapingClosureAtFileLocation;
  v54 = (v94 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55 = (v54 + 23) & 0xFFFFFFFFFFFFFFF8;
  v56 = swift_allocObject(&unk_1007E4688, v55 + 8, v77);
  v57 = v82;
  *(_QWORD *)(v56 + 16) = v46;
  *(_QWORD *)(v56 + 24) = v57;
  v75(v56 + v53, v51, v52);
  v58 = (_QWORD *)(v56 + v54);
  v59 = v83;
  *v58 = v81;
  v58[1] = v59;
  v60 = v78;
  *(_QWORD *)(v56 + v55) = v78;
  v102 = sub_1001183B8;
  v103 = v56;
  aBlock = _NSConcreteStackBlock;
  v99 = 1107296256;
  v100 = sub_1000094C8;
  v101 = &unk_1007E46A0;
  v61 = _Block_copy(&aBlock);
  v62 = v46;
  v63 = v57;
  swift_retain();
  swift_unknownObjectRetain(v60);
  v64 = v87;
  static DispatchQoS.unspecified.getter(v65);
  v97 = _swiftEmptyArrayStorage;
  v66 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v67 = sub_10001A630((uint64_t *)&unk_100838000);
  v68 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v69 = v90;
  v70 = v67;
  v71 = v92;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v97, v70, v68, v92, v66);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v50, v64, v69, v61);
  _Block_release(v61);
  swift_unknownObjectRelease(v60);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v69, v71);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v64, v89);
  ((void (*)(char *, uint64_t))v80)(v50, v93);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v96, v52);
  v72 = v103;
  swift_release(v76);
  return swift_release(v72);
}

void sub_1000FDBAC(uint64_t a1)
{
  id v1;
  NSURL *v2;
  void *v3;
  id v4;

  v1 = objc_retain(*(id *)(a1
                         + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerNotificationCenterByContainerURL));
  URL._bridgeToObjectiveC()(v2);
  v4 = v3;
  objc_msgSend(v1, "removeObjectForKey:", v3);

}

void sub_1000FDC08(char *a1, void *a2, uint64_t a3, void (*a4)(id), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  char *v24;
  id v25;
  void **p_weak_ivar_lyt;
  void *v27;
  void *v28;
  unsigned int v29;
  NSURL *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char *v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __n128 v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, __n128);
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  id v72;
  void (*v73)(char *, uint64_t, uint64_t, __n128);
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  id v81;
  os_log_t v82;
  int v83;
  void *v84;
  void (*v85)(char *, uint64_t, uint64_t, __n128);
  char *v86;
  uint64_t v87;
  void (*v88)(id);
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[15];
  unsigned __int8 v92;
  char *v93;
  id aBlock[5];
  uint64_t v95;

  v87 = a5;
  v88 = a4;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v86 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v82 - v13;
  v92 = 1;
  v15 = *(NSObject **)&a1[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_accessQueue];
  v85 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v85((char *)&v82 - v13, a3, v8, v12);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1007E46D8, v18 + 8, v16 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v17, v14, v8);
  *(_QWORD *)(v19 + v18) = &v92;
  v20 = swift_allocObject(&unk_1007E4700, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100118494;
  *(_QWORD *)(v20 + 24) = v19;
  aBlock[4] = sub_1000A66B8;
  v95 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000098C4;
  aBlock[3] = &unk_1007E4718;
  v21 = _Block_copy(aBlock);
  v22 = v95;
  v23 = a2;
  v24 = a1;
  swift_retain();
  swift_release(v22);
  dispatch_sync(v15, v21);
  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v20, "", 105, 915, 35, 1);
  swift_release(v20);
  if ((v21 & 1) == 0)
  {
    v25 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    p_weak_ivar_lyt = &RDAlarmEngine.weak_ivar_lyt;
    if (v92 == 1)
    {
      URL._bridgeToObjectiveC()((NSURL *)v92);
      v28 = v27;
      v29 = objc_msgSend(v25, "rem_fileExistsAtURL:", v27);

      if (v29)
      {
        URL._bridgeToObjectiveC()(v30);
        v32 = v31;
        aBlock[0] = 0;
        v33 = objc_msgSend(v25, "removeItemAtURL:error:", v31, aBlock);

        v34 = aBlock[0];
        if (!v33)
        {
          v54 = aBlock[0];
          v55 = (void *)_convertNSErrorToError(_:)(v34);

          swift_willThrow(v56);
          aBlock[0] = v55;
          v57 = sub_10001A630((uint64_t *)&unk_10083AA20);
          v58 = sub_1000151B0(0, &qword_10083AE30, NSError_ptr);
          swift_dynamicCast(&v90, aBlock, v57, v58, 0);
          v59 = (void *)v90;
          if (qword_100836D08 != -1)
            swift_once(&qword_100836D08, sub_1000F53D4);
          v60 = type metadata accessor for Logger(0);
          sub_10001AAA8(v60, (uint64_t)qword_10083AC30);
          v61 = v23;
          v62 = v59;
          v63 = v61;
          v64 = v62;
          v65 = Logger.logObject.getter(v64);
          v66 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v65, v66))
          {
            v67 = swift_slowAlloc(22, -1);
            v85 = (void (*)(char *, uint64_t, uint64_t, __n128))swift_slowAlloc(8, -1);
            v86 = (char *)swift_slowAlloc(32, -1);
            v93 = v86;
            *(_DWORD *)v67 = 136315394;
            v89 = (uint64_t)v64;
            v68 = sub_1000E51DC((unint64_t *)&unk_10083AE38, &qword_10083AE30, NSError_ptr, (uint64_t)&protocol conformance descriptor for NSError);
            v69 = Error.rem_errorDescription.getter(v58, v68);
            v71 = v70;
            v89 = sub_10001A820(v69, v70, (uint64_t *)&v93);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);

            swift_bridgeObjectRelease(v71);
            *(_WORD *)(v67 + 12) = 2112;
            v89 = (uint64_t)v63;
            v72 = v63;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
            v73 = v85;
            *(_QWORD *)v85 = v63;

            _os_log_impl((void *)&_mh_execute_header, v65, v66, "RDXPCDebugPerformer: Failed to delete isolated container {error: %s, token: %@}", (uint8_t *)v67, 0x16u);
            v74 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v73, 1, v74);
            swift_slowDealloc(v73, -1, -1);
            v75 = v86;
            swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v75, -1, -1);
            swift_slowDealloc(v67, -1, -1);

          }
          else
          {

          }
          v81 = v64;
          v88(v64);

          swift_errorRelease(aBlock[0]);
          p_weak_ivar_lyt = (void **)(&RDAlarmEngine + 56);
LABEL_16:
          if (p_weak_ivar_lyt[417] == (void *)-1)
            goto LABEL_17;
          goto LABEL_23;
        }
        v35 = qword_100836D08;
        v36 = aBlock[0];
        if (v35 != -1)
          swift_once(&qword_100836D08, sub_1000F53D4);
        v37 = type metadata accessor for Logger(0);
        sub_10001AAA8(v37, (uint64_t)qword_10083AC30);
        v38 = v86;
        ((void (*)(char *, uint64_t, uint64_t))v85)(v86, a3, v8);
        v39 = v23;
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.default.getter(v40);
        v42 = v41;
        if (os_log_type_enabled(v40, v41))
        {
          v43 = swift_slowAlloc(22, -1);
          v85 = (void (*)(char *, uint64_t, uint64_t, __n128))swift_slowAlloc(8, -1);
          v84 = (void *)swift_slowAlloc(32, -1);
          aBlock[0] = v84;
          *(_DWORD *)v43 = 138412546;
          v82 = v40;
          v83 = v42;
          v90 = (uint64_t)v39;
          v44 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
          *(_QWORD *)v85 = v39;

          p_weak_ivar_lyt = (void **)(&RDAlarmEngine + 56);
          *(_WORD *)(v43 + 12) = 2080;
          v45 = v86;
          v47 = URL.absoluteString.getter(v46);
          v49 = v48;
          v90 = sub_10001A820(v47, v48, (uint64_t *)aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
          v50 = swift_bridgeObjectRelease(v49);
          (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v45, v8, v50);
          v40 = v82;
          _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v83, "RDXPCDebugPerformer: Destroyed isolated container {token: %@, url: %s}", (uint8_t *)v43, 0x16u);
          v51 = sub_10001A630((uint64_t *)&unk_100839E70);
          v52 = v85;
          swift_arrayDestroy(v85, 1, v51);
          swift_slowDealloc(v52, -1, -1);
          v53 = v84;
          swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v53, -1, -1);
          swift_slowDealloc(v43, -1, -1);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v9 + 8))(v38, v8);
        }

      }
    }
    v88(0);

    goto LABEL_16;
  }
  __break(1u);
LABEL_23:
  swift_once(&qword_100836D08, sub_1000F53D4);
LABEL_17:
  v76 = type metadata accessor for Logger(0);
  v77 = sub_10001AAA8(v76, (uint64_t)qword_10083AC30);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter(v78);
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "os_transaction RELEASE {name: com.apple.remindd.RDXPCDebugPerformer.destroyIsolatedStoreContainer}", v80, 2u);
    swift_slowDealloc(v80, -1, -1);
  }
  swift_release(v19);

}

void sub_1000FE448(void *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  ClassDescriptor **v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  NSURL *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v54 = a4;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001AAA8(v11, (uint64_t)qword_10083AC30);
  v13 = a1;
  v14 = a2;
  v15 = v13;
  v16 = (char *)v14;
  v55 = v12;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = &off_10083A000;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc(22, -1);
    v51 = v10;
    v21 = v20;
    v22 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v21 = 138412546;
    v53 = v7;
    v57 = (uint64_t)v15;
    v50 = a3;
    v23 = v15;
    v52 = v8;
    v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    *v22 = v15;

    *(_WORD *)(v21 + 12) = 2112;
    v25 = *(void **)&v16[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_q_storeControllerByContainerURL];
    v57 = (uint64_t)v25;
    v26 = v25;
    a3 = v50;
    v7 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    v22[1] = v25;
    v8 = v52;

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDXPCDebugPerformer: Request to destroy isolated container {token: %@, storeControllers: %@}", (uint8_t *)v21, 0x16u);
    v27 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v22, 2, v27);
    v28 = v22;
    v19 = &off_10083A000;
    swift_slowDealloc(v28, -1, -1);
    v29 = v21;
    v10 = v51;
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

  }
  v30 = *(id *)((char *)&v19[398]->Flags + (_QWORD)v16);
  URL._bridgeToObjectiveC()(v31);
  v33 = v32;
  v34 = objc_msgSend(v30, "objectForKey:", v32);

  if (v34)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
    v35 = v15;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v52 = v8;
      v39 = v38;
      v40 = v10;
      v41 = (_QWORD *)swift_slowAlloc(8, -1);
      v55 = swift_slowAlloc(32, -1);
      v56 = (uint64_t)v35;
      v57 = v55;
      *(_DWORD *)v39 = 138412546;
      v53 = v7;
      v42 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      *v41 = v35;

      *(_WORD *)(v39 + 12) = 2080;
      v44 = URL.absoluteString.getter(v43);
      v46 = v45;
      v56 = sub_10001A820(v44, v45, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      v47 = swift_bridgeObjectRelease(v46);
      (*(void (**)(char *, uint64_t, __n128))(v52 + 8))(v40, v53, v47);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDXPCDebugPerformer: Destroying an isolated container that still has live references to it, skipping {token: %@, url: %s}", (uint8_t *)v39, 0x16u);
      v48 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v41, 1, v48);
      swift_slowDealloc(v41, -1, -1);
      v49 = v55;
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }

    *v54 = 0;
  }
}

void sub_1000FE940(void (*a1)(_QWORD *, _QWORD, __n128))
{
  id v2;
  uint64_t v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  __n128 v22;
  char v23[48];
  char v24[48];

  v2 = objc_msgSend((id)objc_opt_self(DADAgentManager), "sharedManager");
  v3 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v3, v24);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  v5 = objc_msgSend(v2, "stateString");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = 4013373;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v8;
  v10 = objc_msgSend((id)objc_opt_self(DARefreshManager), "sharedManager");
  v11 = v10;
  if (v10 && (v12 = objc_msgSend(v10, "stateString")) != 0)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = swift_initStackObject(v3, v23);
  *(_OWORD *)(v17 + 16) = xmmword_1006A3C00;
  if (v16)
    v18 = v14;
  else
    v18 = 0;
  v19 = 0xE000000000000000;
  if (v16)
    v19 = v16;
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v19;
  sub_1001E190C(v17);
  v20 = inited;
  v21 = sub_1001DFBD0(inited);
  v22 = swift_bridgeObjectRelease(v20);
  a1(v21, 0, v22);
  swift_bridgeObjectRelease(v21);

}

void sub_1000FEB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSArray v5;
  uint64_t v6;
  id v7;

  if (!a1)
  {
    v5.super.isa = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

void sub_1000FEC18(uint64_t a1, unint64_t a2, void (*a3)(_QWORD, __n128))
{
  objc_class *v6;
  char *v7;
  uint64_t *v8;
  double v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  objc_super v24;

  v6 = (objc_class *)type metadata accessor for DebugPerformerMockDABabysittableAccount();
  v7 = (char *)objc_allocWithZone(v6);
  v8 = (uint64_t *)&v7[OBJC_IVAR____TtC7reminddP33_A793612D66A4A6A32EDDE79136FC5A3839DebugPerformerMockDABabysittableAccount_accountID];
  *v8 = a1;
  v8[1] = a2;
  v24.receiver = v7;
  v24.super_class = v6;
  *(_QWORD *)&v9 = swift_bridgeObjectRetain(a2).n128_u64[0];
  v10 = objc_msgSendSuper2(&v24, "init", v9);
  v11 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v11)
  {
    v12 = v11;
    v13 = v10;
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "registerAccount:forOperationWithName:", v13, v14);

  }
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v15 = type metadata accessor for Logger(0);
  sub_10001AAA8(v15, (uint64_t)qword_10083AC30);
  v16 = swift_bridgeObjectRetain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v23 = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain(a2);
    v22 = sub_10001A820(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDXPCDebugPerformer: Called registerBabysitter {waiterID: %s}", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    v21 = swift_bridgeObjectRelease_n(a2, 2);
  }
  a3(0, v21);

}

uint64_t sub_1000FEF5C(uint64_t a1, unint64_t a2, uint64_t (*a3)(_QWORD, __n128))
{
  id v6;
  void *v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v17;
  uint64_t v18;

  v6 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v6)
  {
    v7 = v6;
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "giveAccountWithIDAnotherChance:", v8);

  }
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v9 = type metadata accessor for Logger(0);
  sub_10001AAA8(v9, (uint64_t)qword_10083AC30);
  v10 = swift_bridgeObjectRetain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v18 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain(a2);
    v17 = sub_10001A820(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDXPCDebugPerformer: Called resetBabysitter {waiterID: %s}", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    v15 = swift_bridgeObjectRelease_n(a2, 2);
  }
  return a3(0, v15);
}

void sub_1000FF2A4(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  NSString v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - v13;
  v15 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v16 = NSManagedObjectContext.fetch<A>(_:)(a1, v15);
  if (v2)
    return;
  v17 = v16;
  if (!((unint64_t)v16 >> 62))
  {
    v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v18 < 2)
    {
      if (v18)
        goto LABEL_5;
LABEL_28:
      swift_bridgeObjectRelease(v17);
      goto LABEL_29;
    }
LABEL_30:
    swift_bridgeObjectRelease(v17);
    v46 = (void *)objc_opt_self(REMError);
    v44 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v46, "internalErrorWithDebugDescription:", v44);
    goto LABEL_31;
  }
  if (v16 < 0)
    v40 = (void *)v16;
  else
    v40 = (void *)(v16 & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(v16);
  v50 = v40;
  v41 = _CocoaArrayWrapper.endIndex.getter(v40);
  swift_bridgeObjectRelease(v17);
  if (v41 > 1)
    goto LABEL_30;
  swift_bridgeObjectRetain(v17);
  v42 = _CocoaArrayWrapper.endIndex.getter(v50);
  swift_bridgeObjectRelease(v17);
  if (!v42)
    goto LABEL_28;
LABEL_5:
  if ((v17 & 0xC000000000000001) != 0)
  {
    v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
  }
  else
  {
    if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v19 = *(id *)(v17 + 32);
  }
  v20 = v19;
  swift_bridgeObjectRelease(v17);
  v21 = objc_opt_self(REMCDObject);
  v22 = (void *)swift_dynamicCastObjCClass(v20, v21);
  v23 = v20;
  if (!v22)
  {

LABEL_29:
    v43 = (void *)objc_opt_self(REMError);
    v44 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v43, "internalErrorWithDebugDescription:", v44);
LABEL_31:
    v45;

    swift_willThrow(v47);
    return;
  }
  v24 = v22;
  v50 = v23;
  if (!objc_msgSend(v22, "markedForDeletion"))
    goto LABEL_18;
  v25 = objc_msgSend(v24, "account");
  if (!v25)
    goto LABEL_18;
  v26 = v25;
  v49 = objc_msgSend(v25, "identifier");

  v27 = v49;
  if (v49)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, v28, 1, v5);
  sub_1000A5CA8((uint64_t)v11, (uint64_t)v14, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5))
  {
    sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);
LABEL_18:
    v29 = (void *)objc_opt_self(REMError);
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v29, "internalErrorWithDebugDescription:", v30);
LABEL_19:
    v31;

    swift_willThrow(v32);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, v5);
  v33 = sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);
  v34 = UUID.uuidString.getter(v33);
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v37 = objc_msgSend(v24, "newlyCreatedRecord");
  if (!v37)
  {
    swift_bridgeObjectRelease(v36);
    v39 = (void *)objc_opt_self(REMError);
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v39, "internalErrorWithDebugDescription:", v30);
    goto LABEL_19;
  }
  v38 = (uint64_t)v37;

  *a2 = v34;
  a2[1] = v36;
  a2[2] = v38;
}

uint64_t sub_1000FF7A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(id))
{
  void *v5;
  Swift::String v6;
  void *object;
  unint64_t v8;
  NSString v9;
  id v10;
  _QWORD v12[3];
  _BYTE v13[8];
  unint64_t v14;
  unint64_t v15;

  if (!a2)
    return a3(0);
  v5 = (void *)objc_opt_self(REMError);
  swift_errorRetain(a2);
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v14 = 0xD00000000000001DLL;
  v15 = 0x80000001006F81D0;
  swift_getErrorValue(a2, v13, v12);
  v6._countAndFlagsBits = Error.rem_errorDescription.getter(v12[1], v12[2]);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8 = v15;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v10 = objc_msgSend(v5, "internalErrorWithDebugDescription:", v9);

  a3(v10);
  return swift_errorRelease(a2);
}

void sub_1000FF8C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_1000FFB20(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  uint64_t v6;
  id v7;

  isa = a1;
  if (a1)
  {
    sub_10001A630((uint64_t *)&unk_1008473E0);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    v6 = _convertErrorToNSError(_:)(a2);
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

uint64_t sub_1000FFBB4(void *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t Request;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  double v24;
  unsigned int v25;
  id v26;
  id v27;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD);
  id v33;

  Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v11, a2, v12);
  swift_storeEnumTagMultiPayload(v11, Request, 0);
  sub_100106B50();
  v14 = v13;
  v15 = type metadata accessor for REMCDManualSortHint();
  v16 = NSManagedObjectContext.fetch<A>(_:)(v14, v15);
  if (v4)
  {

    sub_10001C744((uint64_t)v11, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    v17 = v4;
    goto LABEL_18;
  }
  v18 = v16;

  sub_10001C744((uint64_t)v11, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
  v31 = a4;
  v32 = a3;
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v23 = v18;
    else
      v23 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v19 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v18);
    if (v19)
      goto LABEL_5;
  }
  else
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v19)
    {
LABEL_5:
      if (v19 < 1)
        __break(1u);
      v20 = 0;
      do
      {
        if ((v18 & 0xC000000000000001) != 0)
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
        else
          v21 = *(id *)(v18 + 8 * v20 + 32);
        v22 = v21;
        ++v20;
        objc_msgSend(v21, "markForDeletion", v31);
        objc_msgSend(v22, "updateChangeCount");

      }
      while (v19 != v20);
    }
  }
  *(_QWORD *)&v24 = swift_bridgeObjectRelease(v18).n128_u64[0];
  v33 = 0;
  v25 = objc_msgSend(a1, "save:", &v33, v24);
  v26 = v33;
  if (v25)
  {
    v27 = v33;
    return ((uint64_t (*)(_QWORD))v32)(0);
  }
  v29 = v33;
  v17 = _convertNSErrorToError(_:)(v26);

  swift_willThrow(v30);
  a3 = v32;
LABEL_18:
  swift_errorRetain(v17);
  a3(v17);
  swift_errorRelease(v17);
  return swift_errorRelease(v17);
}

uint64_t sub_1001000A0(void *a1, int a2, uint64_t a3, uint64_t a4, void *aBlock, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *))
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v10 = _Block_copy(aBlock);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v16 = v15;
  _Block_copy(v10);
  v17 = a1;
  a6(v11, v13, v14, v16, v17, v10);
  _Block_release(v10);
  _Block_release(v10);

  swift_bridgeObjectRelease(v13);
  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_1001002BC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Request;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  Swift::Double v28;
  uint64_t v29;
  double v30;
  unsigned __int8 v31;
  id v32;
  id v33;
  id v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  _QWORD v38[3];
  void (*v39)(_QWORD);
  void *v40;
  uint64_t v41;
  id v42;

  v6 = v5;
  v38[2] = a5;
  v39 = a4;
  v41 = a3;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a2, v16);
  swift_storeEnumTagMultiPayload(v15, Request, 0);
  sub_100106B50();
  v18 = v17;
  v19 = type metadata accessor for REMCDManualSortHint();
  v20 = NSManagedObjectContext.fetch<A>(_:)(v18, v19);
  if (v5)
  {

    sub_10001C744((uint64_t)v15, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    goto LABEL_18;
  }
  v21 = v20;
  v38[1] = 0;
  v40 = a1;

  sub_10001C744((uint64_t)v15, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0)
      v29 = v21;
    else
      v29 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v21);
    v22 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v21);
    v23 = v40;
    if (v22)
      goto LABEL_5;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    v23 = v40;
    if (v22)
    {
LABEL_5:
      if (v22 < 1)
        __break(1u);
      v24 = 0;
      do
      {
        if ((v21 & 0xC000000000000001) != 0)
          v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v21);
        else
          v25 = *(id *)(v21 + 8 * v24 + 32);
        v26 = v25;
        ++v24;
        v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v41, v9);
        v28 = Date.timeIntervalSinceReferenceDate.getter(v27);
        objc_msgSend(v26, "setLastAccessedSinceReferenceDate:", Int32.init(timeIntervalSinceReferenceDate:)(v28));
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        objc_msgSend(v26, "updateChangeCount");

        v23 = v40;
      }
      while (v22 != v24);
    }
  }
  *(_QWORD *)&v30 = swift_bridgeObjectRelease(v21).n128_u64[0];
  v42 = 0;
  v31 = objc_msgSend(v23, "save:", &v42, v30);
  v32 = v42;
  if ((v31 & 1) != 0)
  {
    v33 = v42;
    return ((uint64_t (*)(_QWORD))v39)(0);
  }
  v35 = v42;
  v6 = _convertNSErrorToError(_:)(v32);

  swift_willThrow(v36);
LABEL_18:
  v37 = v39;
  swift_errorRetain(v6);
  v37(v6);
  swift_errorRelease(v6);
  return swift_errorRelease(v6);
}

void sub_1001006F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __n128 v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  NSObject *v30;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_100838030);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_manualHashtagLabelUpdater;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_manualHashtagLabelUpdater))
  {
    v8 = v0 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
    Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon, v4);
    if (Strong)
    {
      v10 = Strong;
      v30 = *(NSObject **)(v8 + 8);
      v11 = *(void **)(v1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeContainerToken);
      v12 = type metadata accessor for DebugPerformerManualHashtagLabelUpdaterDelegate();
      v13 = swift_allocObject(v12, 24, 7);
      *(_QWORD *)(v13 + 16) = v11;
      sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
      v14 = v11;
      v29 = (void *)static OS_dispatch_queue.main.getter(v15);
      v16 = *(void **)(v1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
      v17 = qword_100836E08;
      swift_retain();
      v18 = v16;
      swift_unknownObjectRetain(v10);
      if (v17 != -1)
        swift_once(&qword_100836E08, sub_10016F1A0);
      v19 = sub_10001AAA8(v2, (uint64_t)qword_100871C70);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v19, v2);
      v20 = type metadata accessor for RDHashtagLabelUpdater(0);
      swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      v21 = v29;
      v22 = sub_1001844E8(v29, v18, v10, (uint64_t)v30, (uint64_t)v6, v13, (uint64_t)&off_1007E4088);

      swift_unknownObjectRelease(v10);
      swift_release(v13);
      v23 = swift_retain();
      sub_100113F14(v23);
      swift_release(v22);
      v24 = *(_QWORD *)(v1 + v7);
      *(_QWORD *)(v1 + v7) = v22;
      swift_unknownObjectRelease(v10);
      swift_release(v13);
      swift_release(v24);
    }
    else
    {
      if (qword_100836D08 != -1)
        swift_once(&qword_100836D08, sub_1000F53D4);
      v25 = type metadata accessor for Logger(0);
      v26 = sub_10001AAA8(v25, (uint64_t)qword_10083AC30);
      v30 = Logger.logObject.getter(v26);
      v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v27, "RDXPCDebugPerformer: Failed to set up manual hashtag label updater; missing xpcDaemon",
          v28,
          2u);
        swift_slowDealloc(v28, -1, -1);
      }

    }
  }
}

void sub_1001009F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_manualHashtagLabelUpdater);
  if (v1)
  {
    v2 = swift_retain();
    sub_100114088(v2);
    swift_release(v1);
  }
  else
  {
    if (qword_100836D08 != -1)
      swift_once(&qword_100836D08, sub_1000F53D4);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001AAA8(v3, (uint64_t)qword_10083AC30);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "RDXPCDebugPerformer: Failed to refresh hashtag labels; missing manualHashtagLabelUpdater",
        v6,
        2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
}

double sub_100100AF0()
{
  _QWORD *v0;
  double result;

  v0 = sub_10017084C();
  sub_100170F00((uint64_t)v0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v0).n128_u64[0];
  return result;
}

void sub_100100B54()
{
  uint64_t v0;
  _QWORD v1[4];
  _QWORD v2[2];

  v1[0] = 0xD000000000000036;
  v1[1] = 0x80000001006F7F10;
  v1[3] = 0;
  v2[0] = 0;
  v1[2] = 0;
  *(_QWORD *)((char *)v2 + 6) = 0;
  sub_10035288C((uint64_t)v1, (uint64_t)sub_10011732C, (uint64_t)&v0);
}

void sub_100100D78(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t ObjectType;
  id v11;
  id v12;
  void *v13;
  NSString v14;
  uint64_t v15;

  v5 = a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
  Strong = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon, a2);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(v5 + 8);
    v9 = (objc_class *)type metadata accessor for RDDaemonController();
    ObjectType = swift_getObjectType(v7);
    swift_unknownObjectRetain(v7);
    sub_10001BAE8(a3);
    v11 = sub_1004AD610(v7, a3, 0, v9, ObjectType, v8);
    v12 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", v11);
    type metadata accessor for RDTemplateOperationQueue();
    sub_1004D9500(a1, v12);
    swift_unknownObjectRelease(v7);

  }
  else
  {
    v13 = (void *)objc_opt_self(REMError);
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "internalErrorWithDebugDescription:", v14);

    swift_willThrow(v15);
  }
}

void sub_100100F08(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t ObjectType;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  void *v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD v32[3];
  _BYTE v33[8];
  uint64_t v34;
  _QWORD v35[4];
  _QWORD v36[2];

  v35[0] = 0xD000000000000035;
  v35[1] = 0x80000001006F7EB0;
  v35[3] = 0;
  v36[0] = 0;
  v35[2] = 0;
  *(_QWORD *)((char *)v36 + 6) = 0;
  v5 = v3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
  Strong = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon, a3);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(v5 + 8);
    v9 = (objc_class *)type metadata accessor for RDDaemonController();
    ObjectType = swift_getObjectType(v7);
    swift_unknownObjectRetain(v7);
    v12 = sub_1004AD610(v11, (uint64_t)v35, 0, v9, ObjectType, v8);
    v13 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", v12);
    v14 = *(void **)(v3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
    sub_1000181B8();
    v16 = v15;
    v17 = String._bridgeToObjectiveC()();
    v30 = objc_msgSend(v14, "newBackgroundContextWithAuthor:", v17, swift_bridgeObjectRelease(v16).n128_f64[0]);

    type metadata accessor for RDGroceryOperationQueue();
    sub_10053F3F4(v30, v13, a1);
    swift_unknownObjectRelease(v7);

  }
  else
  {
    v18 = (void *)objc_opt_self(REMError);
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v18, "internalErrorWithDebugDescription:", v19);

    swift_willThrow(v21);
    if (qword_100836D08 != -1)
      swift_once(&qword_100836D08, sub_1000F53D4);
    v22 = type metadata accessor for Logger(0);
    sub_10001AAA8(v22, (uint64_t)qword_10083AC30);
    v30 = v20;
    v23 = Logger.logObject.getter(v30);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v34 = v26;
      *(_DWORD *)v25 = 136315138;
      swift_getErrorValue(v30, v33, v32);
      v27 = Error.rem_errorDescription.getter(v32[1], v32[2]);
      v29 = v28;
      v31 = sub_10001A820(v27, v28, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);

      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDXPCDebugPerformer: Failed to handle incomplete grocery operation queue items {error: %s}", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      return;
    }

  }
}

uint64_t sub_1001012B0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t updated;
  uint64_t v17;
  uint64_t v18;
  id v19;
  double v20;
  double v21;
  __int128 v25;
  uint64_t v26;
  _UNKNOWN **v27;

  v8 = type metadata accessor for RDPublicCloudDatabaseControllerMock();
  v9 = swift_allocObject(v8, 57, 7);
  *(_QWORD *)(v9 + 16) = objc_msgSend((id)objc_opt_self(REMError), "cancelledError");
  *(_BYTE *)(v9 + 56) = 1;
  v10 = (void *)objc_opt_self(ICCloudConfiguration);
  v11 = a2;
  v12 = a3;
  swift_retain();
  v13 = objc_msgSend(v10, "sharedConfiguration");
  objc_msgSend(v13, "templatePublicLinkTTL");
  v15 = v14;

  v26 = v8;
  v27 = &off_1007E6258;
  *(_QWORD *)&v25 = v9;
  updated = type metadata accessor for RDTemplateOperationCreateOrUpdateTemplatePublicLink();
  v17 = swift_allocObject(updated, 96, 7);
  *(_QWORD *)(v17 + 16) = v11;
  *(_QWORD *)(v17 + 24) = v12;
  sub_10001BCA8(&v25, v17 + 32);
  *(_BYTE *)(v17 + 72) = 1;
  *(_QWORD *)(v17 + 80) = 1000;
  *(_QWORD *)(v17 + 88) = v15;
  v18 = swift_allocObject(&unk_1007E4250, 32, 7);
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = a5;
  swift_retain();
  v19 = objc_msgSend(v10, "sharedConfiguration");
  objc_msgSend(v19, "templatePublicLinkOperationTimeoutInterval");
  v21 = v20;

  sub_1004FB494(a1, (void (*)(uint64_t, uint64_t))sub_100117308, v18, v21);
  swift_release(v9);
  swift_release(v17);
  return swift_release(v18);
}

uint64_t sub_10010150C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  double v16;
  double v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _UNKNOWN **v22;

  v8 = type metadata accessor for RDPublicCloudDatabaseControllerMock();
  v9 = swift_allocObject(v8, 57, 7);
  *(_QWORD *)(v9 + 16) = objc_msgSend((id)objc_opt_self(REMError), "cancelledError");
  *(_BYTE *)(v9 + 56) = 1;
  v21 = v8;
  v22 = &off_1007E6258;
  *(_QWORD *)&v20 = v9;
  v10 = type metadata accessor for RDTemplateOperationRevokeTemplatePublicLink();
  inited = swift_initStackObject(v10, &v19);
  *(_QWORD *)(inited + 16) = a2;
  sub_10001BCA8(&v20, inited + 24);
  *(_BYTE *)(inited + 64) = 1;
  v12 = swift_allocObject(&unk_1007E4200, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  v13 = (void *)objc_opt_self(ICCloudConfiguration);
  v14 = a2;
  swift_retain();
  swift_retain();
  v15 = objc_msgSend(v13, "sharedConfiguration");
  objc_msgSend(v15, "templatePublicLinkOperationTimeoutInterval");
  v17 = v16;

  sub_1000CDCC8(a1, (void (*)(_QWORD, _QWORD))sub_1001172BC, v12, v17);
  swift_release(v12);
  swift_setDeallocating(inited);

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(inited + 24));
  return swift_release(v9);
}

uint64_t sub_1001016A4(void *a1, char a2, void (*a3)(void *, void *), uint64_t a4, uint64_t (*a5)(void *, _QWORD))
{
  void *v8;
  void *v9;
  id v10;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v8 = 0;
    v9 = a1;
  }
  else
  {
    v10 = a1;
    v8 = a1;
    v9 = 0;
  }
  a3(v8, v9);
  return a5(a1, a2 & 1);
}

unint64_t sub_100101720(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRetain(a1);
  v2 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v3 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
  v4 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v2, v3);
  v6 = v5;
  swift_bridgeObjectRelease(a1);
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  return 0xD000000000000021;
}

unint64_t sub_100101800()
{
  uint64_t *v0;

  return sub_100101720(*v0);
}

void sub_100101808(void *a1, uint64_t a2, uint64_t a3, id *a4, void (*a5)(uint64_t), uint64_t a6)
{
  int64_t v6;
  int64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD *@<X8>);
  uint64_t v54;
  _QWORD *v55;
  __n128 v56;
  void (*v57)(uint64_t, uint64_t, __n128);
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  id v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  BOOL v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  Class isa;
  Class v119;
  NSString v120;
  NSString v121;
  id v122;
  Class v123;
  Class v124;
  NSString v125;
  id v126;
  char *v127;
  void *v128;
  id v129;
  char *v130;
  NSURL *v131;
  void *v132;
  void *v133;
  id v134;
  id v135;
  char *v136;
  NSURL *v137;
  void *v138;
  void *v139;
  NSURL *v140;
  void *v141;
  void *v142;
  unsigned int v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(_QWORD, _QWORD, uint64_t, uint64_t);
  id v149;
  void (*v150)(uint64_t, char *, uint64_t);
  uint64_t v151;
  id *v152;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v154;
  char v155;
  unint64_t v156;
  uint64_t v157;
  _BOOL8 v158;
  uint64_t v159;
  char v160;
  unint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  BOOL v167;
  uint8_t *v168;
  NSObject *v169;
  os_log_type_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  os_log_type_t v174;
  BOOL v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  void (*v186)(char *, uint64_t);
  id *v187;
  id v188;
  _QWORD *v189;
  __n128 v190;
  uint64_t v191;
  unint64_t v192;
  unsigned __int8 v193;
  id v194;
  unint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  id v198;
  _QWORD *v199;
  uint64_t v200;
  void (*v201)(_QWORD *@<X8>);
  _QWORD *v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  __n128 v208;
  int64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  void (*v224)(uint64_t, uint64_t, uint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  __n128 v230;
  int64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  void (*v235)(char *, uint64_t);
  void (*v236)(char *, uint64_t);
  id v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(char *, uint64_t);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void (*v248)(char *, uint64_t);
  uint64_t v249;
  void (*v250)(uint64_t);
  char *v251;
  void (*v252)(_QWORD *@<X8>);
  char *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  id *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  id v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268;
  char *v269;
  char *v270;
  int64_t v271;
  uint64_t v272;
  uint64_t v273;
  id v274[2];
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;

  v7 = v6;
  v249 = a6;
  v257 = a4;
  v262 = a3;
  v11 = sub_10001A630(&qword_10083ADD8);
  __chkstk_darwin(v11);
  v266 = (char *)&v243 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v259 = (uint64_t)&v243 - v14;
  v256 = type metadata accessor for URL(0);
  v254 = *(_QWORD *)(v256 - 8);
  __chkstk_darwin(v256);
  v253 = (char *)&v243 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v255 = (char *)&v243 - v17;
  __chkstk_darwin(v18);
  v261 = (char *)&v243 - v19;
  v20 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v20);
  v265 = (char *)&v243 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v268 = (uint64_t)&v243 - v23;
  __chkstk_darwin(v24);
  v269 = (char *)&v243 - v25;
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  __chkstk_darwin(v28);
  v251 = (char *)&v243 - v29;
  __chkstk_darwin(v30);
  v260 = (uint64_t)&v243 - v31;
  __chkstk_darwin(v32);
  v267 = (char *)&v243 - v33;
  __chkstk_darwin(v34);
  v270 = (char *)&v243 - v35;
  __chkstk_darwin(v36);
  v38 = (char *)&v243 - v37;
  v250 = a5;
  v258 = v39;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v242 = a2;
    else
      v242 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v40 = _CocoaArrayWrapper.endIndex.getter(v242);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v40 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v41 = _swiftEmptyArrayStorage;
  v272 = v26;
  v273 = v27;
  v264 = a1;
  if (v40)
  {
    v275 = _swiftEmptyArrayStorage;
    sub_1001C1BE4(0, v40 & ~(v40 >> 63), 0);
    if (v40 < 0)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
    }
    v271 = v7;
    v42 = 0;
    v41 = v275;
    do
    {
      if ((a2 & 0xC000000000000001) != 0)
        v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, a2);
      else
        v43 = *(id *)(a2 + 8 * v42 + 32);
      v44 = v43;
      v45 = objc_msgSend(v43, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

      v275 = v41;
      v47 = v41[2];
      v46 = v41[3];
      if (v47 >= v46 >> 1)
      {
        sub_1001C1BE4(v46 > 1, v47 + 1, 1);
        v41 = v275;
      }
      ++v42;
      v41[2] = v47 + 1;
      v48 = (unint64_t)v41
          + ((*(unsigned __int8 *)(v273 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v273 + 80))
          + *(_QWORD *)(v273 + 72) * v47;
      v26 = v272;
      (*(void (**)(unint64_t, char *, uint64_t))(v273 + 32))(v48, v38, v272);
    }
    while (v40 != v42);
    v27 = v273;
    v7 = v271;
  }
  sub_100114540((uint64_t)v41);
  v50 = v266;
  v51 = (uint64_t)v269;
  if (v7)
  {
    swift_bridgeObjectRelease(v41);
    return;
  }
  v52 = v49;
  v263 = 0;
  swift_bridgeObjectRelease(v41);
  v53 = *(void (**)(_QWORD *@<X8>))(v52 + 16);
  if (v53)
  {
    v252 = 0;
    v244 = v52;
    v54 = v52 + 32;
    v55 = _swiftEmptyArrayStorage;
    v245 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController;
    while (1)
    {
      v271 = (int64_t)v55;
      sub_100018618(v54, (uint64_t)&v275);
      v60 = v276;
      v61 = v277;
      sub_10000A388(&v275, v276);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v61);
      v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
      if (v62(v51, 1, v26) == 1)
      {
        sub_10000882C(v51, (uint64_t *)&unk_100839C80);
        if (qword_100836D08 != -1)
          swift_once(&qword_100836D08, sub_1000F53D4);
        v63 = type metadata accessor for Logger(0);
        v64 = sub_10001AAA8(v63, (uint64_t)qword_10083AC30);
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v67 = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, v66, "RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get identifier from attachment", v67, 2u);
          swift_slowDealloc(v67, -1, -1);
        }

        v68 = v276;
        v69 = v277;
        sub_10000A388(&v275, v276);
        v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 56))(v68, v69);
        v72 = v71;
        v73 = (_QWORD *)v271;
        if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
          v73 = sub_1002C8224(0, v73[2] + 1, 1, v73);
        v75 = v73[2];
        v74 = v73[3];
        v76 = v73;
        if (v75 >= v74 >> 1)
          v76 = sub_1002C8224((_QWORD *)(v74 > 1), v75 + 1, 1, v73);
        v76[2] = v75 + 1;
        v55 = v76;
        v77 = &v76[2 * v75];
        v77[4] = v70;
        v77[5] = v72;
      }
      else
      {
        v78 = v51;
        v79 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
        v79(v270, v78, v26);
        v80 = v276;
        v81 = v277;
        sub_10000A388(&v275, v276);
        v82 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v81 + 48))(v80, v81);
        if (!v82)
        {
          v87 = v268;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v268, 1, 1, v26);
LABEL_35:
          sub_10000882C(v87, (uint64_t *)&unk_100839C80);
          if (qword_100836D08 != -1)
            swift_once(&qword_100836D08, sub_1000F53D4);
          v89 = type metadata accessor for Logger(0);
          v90 = sub_10001AAA8(v89, (uint64_t)qword_10083AC30);
          v91 = Logger.logObject.getter(v90);
          v92 = static os_log_type_t.error.getter();
          v93 = os_log_type_enabled(v91, v92);
          v27 = v273;
          v51 = (uint64_t)v269;
          if (v93)
          {
            v94 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v94 = 0;
            _os_log_impl((void *)&_mh_execute_header, v91, v92, "RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get account from attachment", v94, 2u);
            swift_slowDealloc(v94, -1, -1);
          }

          v95 = v276;
          v96 = v277;
          sub_10000A388(&v275, v276);
          v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 56))(v95, v96);
          v99 = v98;
          v100 = (_QWORD *)v271;
          if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
            v100 = sub_1002C8224(0, v100[2] + 1, 1, v100);
          v102 = v100[2];
          v101 = v100[3];
          v103 = v100;
          if (v102 >= v101 >> 1)
            v103 = sub_1002C8224((_QWORD *)(v101 > 1), v102 + 1, 1, v100);
          v103[2] = v102 + 1;
          v55 = v103;
          v104 = &v103[2 * v102];
          v104[4] = v97;
          v104[5] = v99;
          (*(void (**)(char *, uint64_t))(v27 + 8))(v270, v26);
          goto LABEL_18;
        }
        v83 = v82;
        v84 = objc_msgSend(v82, "identifier");

        if (v84)
        {
          v85 = v265;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v84);

          v86 = 0;
        }
        else
        {
          v86 = 1;
          v85 = v265;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v273 + 56))(v85, v86, 1, v26);
        v88 = (uint64_t)v85;
        v87 = v268;
        sub_1000A5CA8(v88, v268, (uint64_t *)&unk_100839C80);
        if (v62(v87, 1, v26) == 1)
          goto LABEL_35;
        v79(v267, v87, v26);
        v105 = v276;
        v106 = v277;
        sub_10000A388(&v275, v276);
        v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 16))(v105, v106);
        if (!v108)
        {
          v27 = v273;
          if (qword_100836D08 != -1)
            swift_once(&qword_100836D08, sub_1000F53D4);
          v163 = type metadata accessor for Logger(0);
          v164 = sub_10001AAA8(v163, (uint64_t)qword_10083AC30);
          v165 = Logger.logObject.getter(v164);
          v166 = static os_log_type_t.error.getter();
          v167 = os_log_type_enabled(v165, v166);
          v51 = (uint64_t)v269;
          if (v167)
          {
            v168 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v168 = 0;
            v169 = v165;
            v170 = v166;
            v171 = "RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get fileName from attachment";
            goto LABEL_60;
          }
LABEL_61:

          v176 = v276;
          v177 = v277;
          sub_10000A388(&v275, v276);
          v178 = (*(uint64_t (**)(uint64_t, uint64_t))(v177 + 56))(v176, v177);
          v180 = v179;
          v181 = (_QWORD *)v271;
          if ((swift_isUniquelyReferenced_nonNull_native(v271) & 1) == 0)
            v181 = sub_1002C8224(0, v181[2] + 1, 1, v181);
          v183 = v181[2];
          v182 = v181[3];
          v184 = v181;
          if (v183 >= v182 >> 1)
            v184 = sub_1002C8224((_QWORD *)(v182 > 1), v183 + 1, 1, v181);
          v184[2] = v183 + 1;
          v55 = v184;
          v185 = &v184[2 * v183];
          v185[4] = v178;
          v185[5] = v180;
          v186 = *(void (**)(char *, uint64_t))(v27 + 8);
          v186(v267, v26);
          v186(v270, v26);
          goto LABEL_18;
        }
        v109 = (void (*)(char *, uint64_t))v107;
        v110 = v108;
        v111 = v276;
        v112 = v277;
        sub_10000A388(&v275, v276);
        v113 = (*(uint64_t (**)(uint64_t, uint64_t))(v112 + 24))(v111, v112);
        v27 = v273;
        if (!v114)
        {
          swift_bridgeObjectRelease(v110);
          if (qword_100836D08 != -1)
            swift_once(&qword_100836D08, sub_1000F53D4);
          v172 = type metadata accessor for Logger(0);
          v173 = sub_10001AAA8(v172, (uint64_t)qword_10083AC30);
          v165 = Logger.logObject.getter(v173);
          v174 = static os_log_type_t.error.getter();
          v175 = os_log_type_enabled(v165, v174);
          v26 = v272;
          v51 = (uint64_t)v269;
          if (v175)
          {
            v168 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v168 = 0;
            v169 = v165;
            v170 = v174;
            v171 = "RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get sha512Sum from attachment";
LABEL_60:
            _os_log_impl((void *)&_mh_execute_header, v169, v170, v171, v168, 2u);
            swift_slowDealloc(v168, -1, -1);
          }
          goto LABEL_61;
        }
        v115 = v113;
        v116 = v114;
        v117 = *(void **)(v262 + v245);
        v248 = v109;
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v119 = UUID._bridgeToObjectiveC()().super.isa;
        v120 = String._bridgeToObjectiveC()();
        v246 = v115;
        v247 = v116;
        v121 = String._bridgeToObjectiveC()();
        v122 = objc_msgSend(v117, "URLForAttachmentFile:accountID:fileName:sha512Sum:", isa, v119, v120, v121);

        static URL._unconditionallyBridgeFromObjectiveC(_:)(v122);
        v123 = UUID._bridgeToObjectiveC()().super.isa;
        v124 = UUID._bridgeToObjectiveC()().super.isa;
        v125 = String._bridgeToObjectiveC()();
        v126 = objc_msgSend(v117, "URLForAttachmentFile:accountID:fileName:sha512Sum:", v123, v124, v125, 0, swift_bridgeObjectRelease(v110).n128_f64[0]);

        v127 = v255;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v126);

        v128 = (void *)objc_opt_self(NSFileManager);
        v129 = objc_msgSend(v128, "defaultManager");
        v130 = v253;
        URL.deletingLastPathComponent()(v129);
        URL._bridgeToObjectiveC()(v131);
        v133 = v132;
        v248 = *(void (**)(char *, uint64_t))(v254 + 8);
        v248(v130, v256);
        v274[0] = 0;
        LOBYTE(v130) = objc_msgSend(v129, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v133, 1, 0, v274);

        v134 = v274[0];
        if ((v130 & 1) == 0)
        {
          v232 = v134;
          swift_bridgeObjectRelease(v271);
          swift_bridgeObjectRelease(v244);
          swift_bridgeObjectRelease(v247);
          _convertNSErrorToError(_:)(v232);

          swift_willThrow(v233);
          v234 = v256;
          v235 = v248;
          v248(v127, v256);
          v235(v261, v234);
          v236 = *(void (**)(char *, uint64_t))(v273 + 8);
LABEL_112:
          v241 = v272;
          v236(v267, v272);
          v236(v270, v241);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v275);
          v201 = v252;
          goto LABEL_108;
        }
        v135 = objc_msgSend(v128, "defaultManager");
        v136 = v261;
        URL._bridgeToObjectiveC()(v137);
        v139 = v138;
        URL._bridgeToObjectiveC()(v140);
        v142 = v141;
        v274[0] = 0;
        v143 = objc_msgSend(v135, "copyItemAtURL:toURL:error:", v139, v141, v274);

        v145 = v273;
        v144 = v274[0];
        if (!v143)
        {
          v237 = v274[0];
          swift_bridgeObjectRelease(v271);
          swift_bridgeObjectRelease(v244);
          swift_bridgeObjectRelease(v247);
          _convertNSErrorToError(_:)(v144);

          swift_willThrow(v238);
          v239 = v256;
          v240 = v248;
          v248(v127, v256);
          v240(v136, v239);
          v236 = *(void (**)(char *, uint64_t))(v145 + 8);
          goto LABEL_112;
        }
        v146 = v276;
        v147 = v277;
        sub_10001BA38((uint64_t)&v275, v276);
        v148 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v147 + 32);
        v149 = v144;
        v148(0, 0, v146, v147);
        v27 = v273;
        v150 = *(void (**)(uint64_t, char *, uint64_t))(v273 + 16);
        v151 = v260;
        v150(v260, v267, v272);
        sub_1000A5C24((uint64_t)v252, 0);
        v152 = v257;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v257);
        v274[0] = *v152;
        v154 = v274[0];
        *v152 = (id)0x8000000000000000;
        v156 = sub_1002C65F8(v151);
        v157 = v154[2];
        v158 = (v155 & 1) == 0;
        v159 = v157 + v158;
        if (__OFADD__(v157, v158))
          goto LABEL_119;
        v160 = v155;
        if (v154[3] >= v159)
        {
          v51 = (uint64_t)v269;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1002D7100();
            v154 = v274[0];
          }
        }
        else
        {
          sub_1002CEEB0(v159, isUniquelyReferenced_nonNull_native);
          v154 = v274[0];
          v161 = sub_1002C65F8(v260);
          v51 = (uint64_t)v269;
          if ((v160 & 1) != (v162 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v272);
            __break(1u);
            return;
          }
          v156 = v161;
        }
        v187 = v257;
        v188 = *v257;
        *v257 = v154;
        swift_bridgeObjectRelease(v188);
        v189 = *v187;
        v190 = swift_bridgeObjectRetain(*v187);
        if ((v160 & 1) == 0)
        {
          v191 = (uint64_t)v251;
          ((void (*)(char *, uint64_t, uint64_t, __n128))v150)(v251, v260, v272, v190);
          sub_10028F070(v156, v191, (uint64_t)&_swiftEmptySetSingleton, v189);
        }
        swift_bridgeObjectRelease(v189);
        sub_1002DB0E4((uint64_t *)v274, v246, v247);
        v56 = swift_bridgeObjectRelease(v274[1]);
        v57 = *(void (**)(uint64_t, uint64_t, __n128))(v27 + 8);
        v26 = v272;
        v57(v260, v272, v56);
        v58 = v256;
        v59 = v248;
        v248(v255, v256);
        v59(v261, v58);
        ((void (*)(char *, uint64_t))v57)(v267, v26);
        ((void (*)(char *, uint64_t))v57)(v270, v26);
        v252 = sub_1000D92DC;
        v55 = (_QWORD *)v271;
      }
LABEL_18:
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v275);
      v54 += 40;
      v53 = (void (*)(_QWORD *@<X8>))((char *)v53 - 1);
      if (!v53)
      {
        v192 = swift_bridgeObjectRelease(v244).n128_u64[0];
        v50 = v266;
        v53 = v252;
        goto LABEL_72;
      }
    }
  }
  v192 = swift_bridgeObjectRelease(v52).n128_u64[0];
  v55 = _swiftEmptyArrayStorage;
LABEL_72:
  v275 = 0;
  v193 = objc_msgSend(v264, "save:", &v275, *(double *)&v192);
  v194 = v275;
  if ((v193 & 1) != 0)
  {
    if (v55[2])
    {
      v195 = sub_100117214();
      v196 = swift_allocError(&type metadata for RDXPCDebugPerformer.ImageReversionError, v195, 0, 0);
      *v197 = v55;
      v198 = v194;
      v250(v196);
      swift_errorRelease(v196);
LABEL_107:
      v201 = v53;
    }
    else
    {
      v252 = v53;
      v202 = v275;
      swift_bridgeObjectRelease(v55);
      v203 = *v257;
      v204 = *((_QWORD *)*v257 + 8);
      v270 = (char *)*v257 + 64;
      v205 = 1 << v203[32];
      v206 = -1;
      if (v205 < 64)
        v206 = ~(-1 << v205);
      v207 = v206 & v204;
      v271 = (unint64_t)(v205 + 63) >> 6;
      v269 = (char *)(v271 - 1);
      v208 = swift_bridgeObjectRetain(v203);
      v209 = 0;
      v210 = v258;
      if (!v207)
        goto LABEL_81;
LABEL_79:
      v211 = __clz(__rbit64(v207));
      v207 &= v207 - 1;
      v212 = v211 | (v209 << 6);
      v213 = v273;
LABEL_80:
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v213 + 16))(v50, *((_QWORD *)v203 + 6) + *(_QWORD *)(v213 + 72) * v212, v272, v208);
      v214 = *((_QWORD *)v203 + 7);
      v215 = sub_10001A630(&qword_10083ADE8);
      v216 = *(_QWORD *)(v214 + 8 * v212);
      *(_QWORD *)&v50[*(int *)(v215 + 48)] = v216;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v215 - 8) + 56))(v50, 0, 1, v215);
      swift_bridgeObjectRetain(v216);
      while (1)
      {
        v220 = (uint64_t)v50;
        v221 = v259;
        sub_1000A5CA8(v220, v259, &qword_10083ADD8);
        v222 = sub_10001A630(&qword_10083ADE8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v222 - 8) + 48))(v221, 1, v222) == 1)
        {
          swift_release(v203);
          v250(0);
          v53 = v252;
          goto LABEL_107;
        }
        v223 = *(_QWORD **)(v221 + *(int *)(v222 + 48));
        v224 = *(void (**)(uint64_t, uint64_t, uint64_t))(v213 + 32);
        v225 = v221;
        v226 = v213;
        v227 = v272;
        v224(v210, v225, v272);
        v228 = objc_autoreleasePoolPush();
        v229 = v263;
        sub_100102CCC(v262, v210, (uint64_t)v264, v223);
        v263 = v229;
        if (v229)
          break;
        objc_autoreleasePoolPop(v228);
        v230 = swift_bridgeObjectRelease(v223);
        (*(void (**)(uint64_t, uint64_t, __n128))(v226 + 8))(v210, v227, v230);
        v50 = v266;
        if (v207)
          goto LABEL_79;
LABEL_81:
        v217 = v209 + 1;
        v213 = v273;
        if (__OFADD__(v209, 1))
          goto LABEL_118;
        if (v217 < v271)
        {
          v218 = *(_QWORD *)&v270[8 * v217];
          if (v218)
            goto LABEL_84;
          v209 += 2;
          if (v217 + 1 >= v271)
          {
            v209 = v217;
          }
          else
          {
            v218 = *(_QWORD *)&v270[8 * v209];
            if (v218)
            {
              ++v217;
LABEL_84:
              v207 = (v218 - 1) & v218;
              v212 = __clz(__rbit64(v218)) + (v217 << 6);
              v209 = v217;
              goto LABEL_80;
            }
            if (v217 + 2 < v271)
            {
              v218 = *(_QWORD *)&v270[8 * v217 + 16];
              if (v218)
              {
                v217 += 2;
                goto LABEL_84;
              }
              v231 = v217 + 3;
              if (v217 + 3 >= v271)
              {
                v209 = v217 + 2;
              }
              else
              {
                v218 = *(_QWORD *)&v270[8 * v231];
                if (v218)
                {
                  v217 += 3;
                  goto LABEL_84;
                }
                while (1)
                {
                  v217 = v231 + 1;
                  if (__OFADD__(v231, 1))
                    goto LABEL_120;
                  if (v217 >= v271)
                    break;
                  v218 = *(_QWORD *)&v270[8 * v217];
                  ++v231;
                  if (v218)
                    goto LABEL_84;
                }
                v209 = (int64_t)v269;
              }
            }
          }
        }
        v219 = sub_10001A630(&qword_10083ADE8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v219 - 8) + 56))(v50, 1, 1, v219);
        v207 = 0;
      }
      objc_autoreleasePoolPop(v228);
      swift_bridgeObjectRelease(v223);
      swift_release(v203);
      (*(void (**)(uint64_t, uint64_t))(v226 + 8))(v210, v227);
      v201 = v252;
    }
  }
  else
  {
    v199 = v275;
    swift_bridgeObjectRelease(v55);
    _convertNSErrorToError(_:)(v194);

    swift_willThrow(v200);
    v201 = v53;
  }
LABEL_108:
  sub_1000A5C24((uint64_t)v201, 0);
}

void sub_100102CCC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  __n128 v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v35;
  int64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  Class isa;
  Class v43;
  NSString v44;
  NSString v45;
  id v46;
  char *v47;
  id v48;
  NSURL *v49;
  void *v50;
  void *v51;
  id v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  uint64_t v72;
  _QWORD *i;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _QWORD v82[3];
  char v83[8];
  _QWORD *v84;

  i = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v81;
  sub_100114978(a2, a3);
  if (!v15)
  {
    v17 = v16;
    v76 = v11;
    v77 = v8;
    v74 = v14;
    v75 = v12;
    v80 = v10;
    v84 = v16;
    v18 = sub_10001A630(&qword_10083ADF0);
    v19 = sub_1000A5F84(&qword_10083ADF8, &qword_10083ADF0, (uint64_t)&protocol conformance descriptor for [A]);
    v20 = Sequence.compactMapToSet<A>(_:)(sub_100103344, 0, v18, &type metadata for String, v19, &protocol witness table for String);
    swift_bridgeObjectRelease(v17);
    v21 = *(_QWORD *)(v20 + 16);
    v22 = (uint64_t)i;
    v23 = i[2];
    v69 = 0;
    if (v21 <= v23 >> 3)
    {
      v84 = i;
      swift_bridgeObjectRetain(i);
      sub_10059B880(v20);
      v25 = swift_bridgeObjectRelease(v20);
      v24 = v84;
    }
    else
    {
      swift_bridgeObjectRetain(i);
      v24 = sub_100215890(v20, v22);
      v25 = swift_bridgeObjectRelease(v20);
    }
    v26 = 0;
    v27 = v24[7];
    v70 = (char *)(v24 + 7);
    v28 = 1 << *((_BYTE *)v24 + 32);
    v29 = -1;
    if (v28 < 64)
      v29 = ~(-1 << v28);
    v30 = v29 & v27;
    v71 = (unint64_t)(v28 + 63) >> 6;
    v72 = OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController;
    v25.n128_u64[0] = 136315394;
    v67 = v25;
    v66 = (char *)&type metadata for Any + 8;
    v31 = v80;
    v68 = a2;
    v78 = v7;
    v79 = a1;
    for (i = v24; ; v24 = i)
    {
      if (v30)
      {
        v81 = (v30 - 1) & v30;
        v33 = __clz(__rbit64(v30)) | (v26 << 6);
      }
      else
      {
        if (__OFADD__(v26++, 1))
        {
          __break(1u);
          goto LABEL_37;
        }
        if (v26 >= v71)
          goto LABEL_34;
        v35 = *(_QWORD *)&v70[8 * v26];
        if (!v35)
        {
          v36 = v26 + 1;
          if (v26 + 1 >= v71)
            goto LABEL_34;
          v35 = *(_QWORD *)&v70[8 * v36];
          if (!v35)
          {
            v36 = v26 + 2;
            if (v26 + 2 >= v71)
              goto LABEL_34;
            v35 = *(_QWORD *)&v70[8 * v36];
            if (!v35)
            {
              v36 = v26 + 3;
              if (v26 + 3 >= v71)
              {
LABEL_34:
                swift_release(v24);
                return;
              }
              v35 = *(_QWORD *)&v70[8 * v36];
              if (!v35)
              {
                while (1)
                {
                  v26 = v36 + 1;
                  if (__OFADD__(v36, 1))
                    break;
                  if (v26 >= v71)
                    goto LABEL_34;
                  v35 = *(_QWORD *)&v70[8 * v26];
                  ++v36;
                  if (v35)
                    goto LABEL_22;
                }
LABEL_37:
                __break(1u);
              }
            }
          }
          v26 = v36;
        }
LABEL_22:
        v81 = (v35 - 1) & v35;
        v33 = __clz(__rbit64(v35)) + (v26 << 6);
      }
      v37 = (uint64_t *)(v24[6] + 16 * v33);
      v39 = *v37;
      v38 = v37[1];
      v40 = *(void **)(a1 + v72);
      swift_bridgeObjectRetain(v38);
      UUID.init()(v41);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v31, v7);
      v43 = UUID._bridgeToObjectiveC()().super.isa;
      v44 = String._bridgeToObjectiveC()();
      v45 = String._bridgeToObjectiveC()();
      v46 = objc_msgSend(v40, "URLForAttachmentFile:accountID:fileName:sha512Sum:", isa, v43, v44, v45);

      v47 = v74;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v46);

      v48 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      URL._bridgeToObjectiveC()(v49);
      v51 = v50;
      v84 = 0;
      LODWORD(isa) = objc_msgSend(v48, "removeItemAtURL:error:", v50, &v84);

      v52 = v84;
      if ((_DWORD)isa)
      {
        v32 = v84;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v76);
        swift_bridgeObjectRelease(v38);
      }
      else
      {
        v53 = v84;
        v54 = _convertNSErrorToError(_:)(v52);

        swift_willThrow(v55);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v76);
        if (qword_100836D08 != -1)
          swift_once(&qword_100836D08, sub_1000F53D4);
        v56 = type metadata accessor for Logger(0);
        sub_10001AAA8(v56, (uint64_t)qword_10083AC30);
        swift_errorRetain(v54);
        swift_bridgeObjectRetain(v38);
        v57 = swift_errorRetain(v54);
        v58 = Logger.logObject.getter(v57);
        v59 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v58, v59))
        {
          v60 = swift_slowAlloc(22, -1);
          v61 = (_QWORD *)swift_slowAlloc(64, -1);
          v84 = v61;
          *(_DWORD *)v60 = v67.n128_u32[0];
          swift_bridgeObjectRetain(v38);
          *(_QWORD *)(v60 + 4) = sub_10001A820(v39, v38, (uint64_t *)&v84);
          swift_bridgeObjectRelease_n(v38, 3);
          *(_WORD *)(v60 + 12) = 2080;
          swift_getErrorValue(v54, v83, v82);
          v62 = Error.rem_errorDescription.getter(v82[1], v82[2]);
          v64 = v63;
          *(_QWORD *)(v60 + 14) = sub_10001A820(v62, v63, (uint64_t *)&v84);
          swift_bridgeObjectRelease(v64);
          swift_errorRelease(v54);
          swift_errorRelease(v54);
          _os_log_impl((void *)&_mh_execute_header, v58, v59, "REMXPCDebugPerformer.synchronous_revertImageAttachments could not clean up file { sha512Sum: %s, error: %s }", (uint8_t *)v60, 0x16u);
          swift_arrayDestroy(v61, 2, v66);
          swift_slowDealloc(v61, -1, -1);
          swift_slowDealloc(v60, -1, -1);

          swift_errorRelease(v54);
        }
        else
        {
          swift_errorRelease(v54);
          swift_bridgeObjectRelease_n(v38, 2);
          swift_errorRelease(v54);
          swift_errorRelease(v54);

        }
        v69 = 0;
      }
      v7 = v78;
      a1 = v79;
      v31 = v80;
      v30 = v81;
    }
  }
}

uint64_t sub_100103344@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000A388(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

void sub_100103488(void *a1, int a2, char a3, void *aBlock, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v14;
  id v15;

  v14 = _Block_copy(aBlock);
  _Block_copy(v14);
  v15 = a1;
  sub_100114DF8(a3, (uint64_t)v15, (uint64_t)v14, a5, a6, a7, a8);
  _Block_release(v14);
  _Block_release(v14);

}

void sub_100103550(void *a1, int a2, char a3, void *aBlock, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v14;
  id v15;

  v14 = _Block_copy(aBlock);
  _Block_copy(v14);
  v15 = a1;
  sub_100115064(a3, (uint64_t)v15, (uint64_t)v14, a5, a6, a7, a8);
  _Block_release(v14);
  _Block_release(v14);

}

void sub_1001035EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSArray v5;
  uint64_t v6;
  id v7;

  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2)
    v6 = _convertErrorToNSError(_:)(a2);
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

void sub_1001036E4(void *a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t))
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Class isa;
  NSString v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;

  v6 = objc_msgSend((id)objc_opt_self(REMAccount), "cdEntityName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v8 = v7;

  v9 = objc_allocWithZone((Class)REMObjectID);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "initWithUUID:entityName:", isa, v11, swift_bridgeObjectRelease(v8).n128_f64[0]);

  sub_100204328(v12, a1);
  if (v3)
  {

    swift_errorRetain(v3);
    a3(_swiftEmptyArrayStorage, v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }
  else
  {
    v14 = v13;
    if (v13)
    {
      v15 = objc_msgSend(v13, "orderedIdentifiers");

      v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String);
      a3((_QWORD *)v16, 0);

      swift_bridgeObjectRelease(v16);
    }
    else
    {
      a3(_swiftEmptyArrayStorage, 0);

    }
  }
}

void sub_100103888(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t))
{
  uint64_t v3;
  uint64_t Option;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  uint64_t v13;

  Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v7, v8, 2);
  v9 = sub_1001156B4((uint64_t)v7);
  if (v3)
  {
    sub_10001C744((uint64_t)v7, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    swift_errorRetain(v3);
    a3(_swiftEmptyArrayStorage, v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }
  else
  {
    v10 = v9;
    sub_10001C744((uint64_t)v7, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    v11 = sub_100115C1C(v10);
    v12 = swift_bridgeObjectRelease(v10);
    ((void (*)(_QWORD *, _QWORD, __n128))a3)(v11, 0, v12);
    swift_bridgeObjectRelease(v11);
  }
}

void sub_1001039AC(void *a1, void *a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *ObjCClassFromMetadata;
  id v18;
  id v19;
  id v20;
  id v21;
  NSString v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  Class isa;
  id v28;
  __int16 v29;
  NSString v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  NSString v36;
  double v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  objc_class *v46;
  Class v47;
  char *v48;
  uint64_t v49;
  unsigned int v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  id v64;

  v62 = a5;
  v63 = a4;
  v8 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  __chkstk_darwin(v8);
  v57 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v58 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for REMCKSharedEntitySyncActivity();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v16);
  v18 = objc_msgSend(ObjCClassFromMetadata, "entity");
  v19 = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), "initWithEntity:insertIntoManagedObjectContext:", v18, a1);
  v20 = a2;
  v21 = v19;
  v61 = a1;
  objc_msgSend(a1, "assignObject:toPersistentStore:", v21, v20);

  v22 = objc_msgSend(a3, "accountIdentifier");
  if (!v22)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v25 = v24;
    v22 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v23 = swift_bridgeObjectRelease(v25).n128_u64[0];
  }
  objc_msgSend(v21, "setAccountIdentifier:", v22, v23);

  v26 = objc_msgSend(a3, "activityDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  objc_msgSend(v21, "setActivityDate:", isa);

  v28 = objc_msgSend(a3, "activityType");
  if ((unint64_t)v28 >= 4)
    v29 = 0;
  else
    v29 = (__int16)v28;
  objc_msgSend(v21, "setActivityTypeRawValue:", v29);
  v30 = objc_msgSend(a3, "authorUserRecordIDString");
  if (!v30)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v33 = v32;
    v30 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v31 = swift_bridgeObjectRelease(v33).n128_u64[0];
  }
  objc_msgSend(v21, "setAuthorUserRecordIDString:", v30, v31);

  v34 = objc_msgSend(a3, "ckParentCloudObjectEntityName");
  objc_msgSend(v21, "setCkParentCloudObjectEntityName:", v34);

  v35 = objc_msgSend(a3, "ckParentCloudObjectIdentifier");
  objc_msgSend(v21, "setCkParentCloudObjectIdentifier:", v35);

  v36 = objc_msgSend(a3, "ckIdentifier");
  v39 = v58;
  v38 = v59;
  if (!v36)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v41 = v40;
    v36 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v37 = swift_bridgeObjectRelease(v41).n128_u64[0];
  }
  objc_msgSend(v21, "setCkIdentifier:", v36, v37);

  v42 = objc_msgSend(a3, "sharedEntityName");
  if (!v42)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v45 = v44;
    v42 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v43 = swift_bridgeObjectRelease(v45).n128_u64[0];
  }
  objc_msgSend(v21, "setSharedEntityName:", v42, v43);

  v46 = (objc_class *)objc_msgSend(a3, "uuidForChangeTracking");
  v47 = v46;
  if (v46)
  {
    v48 = v57;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

    v49 = v60;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v39, v48, v60);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v39, 1, v49) == 1)
    {
      v47 = 0;
    }
    else
    {
      v47 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v49);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v39, 1, 1, v60);
  }
  objc_msgSend(v21, "setUuidForChangeTracking:", v47);

  v64 = 0;
  v50 = objc_msgSend(v61, "save:", &v64);
  v51 = v64;
  if (v50)
  {
    v52 = v64;
    v63(0);

  }
  else
  {
    v53 = v64;
    v54 = _convertNSErrorToError(_:)(v51);

    swift_willThrow(v55);
    swift_errorRetain(v54);
    v63(v54);
    swift_errorRelease(v54);
    swift_errorRelease(v54);
  }
}

void sub_100103F04(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);

}

uint64_t sub_100103F74(void *a1, uint64_t a2, uint64_t a3, const void *a4, void (*a5)(char *, id, void *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v16;

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  _Block_copy(v13);
  v14 = a1;
  a5(v12, v14, v13);
  _Block_release(v13);
  _Block_release(v13);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100104058(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v8 = _Block_copy(aBlock);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = v10;
  _Block_copy(v8);
  v12 = a1;
  a5(v9, v11, v12, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_bridgeObjectRelease(v11);
}

void sub_1001040E4(void *a1, void *a2, void *a3, void (*a4)(id), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  NSString v22;
  Class isa;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  unsigned int v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  id v49;
  uint64_t v50;
  Swift::String v51;
  void *object;
  __n128 v53;
  id v54;
  NSString v55;
  double v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void (*v62)(id);
  id v63;
  id v64[2];

  v62 = a4;
  v60 = a3;
  v61 = a5;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v9 = __chkstk_darwin(v7).n128_u64[0];
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a2, "entityName", v9);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14 = v13;

  v15 = objc_allocWithZone((Class)NSFetchRequest);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "initWithEntityName:", v16, swift_bridgeObjectRelease(v14).n128_f64[0]);

  v18 = sub_10001A630((uint64_t *)&unk_100839E80);
  v19 = swift_allocObject(v18, 64, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1006A3C00;
  v20 = objc_msgSend(a2, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

  *(_QWORD *)(v19 + 56) = v7;
  v21 = sub_1000087F0((_QWORD *)(v19 + 32));
  (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 32))(v21, v11, v7);
  v22 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  v24 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v22, isa);

  v25 = v17;
  objc_msgSend(v17, "setPredicate:", v24);

  objc_msgSend(v17, "setFetchLimit:", 1);
  v26 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  v27 = (uint64_t)v63;
  v28 = NSManagedObjectContext.fetch<A>(_:)(v17, v26);
  if (!v27)
  {
    v30 = v28;
    v63 = a1;
    v31 = v60;
    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0)
        v40 = v28;
      else
        v40 = v28 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v28);
      v41 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v30);
      if (v41)
      {
LABEL_7:
        if ((v30 & 0xC000000000000001) != 0)
        {
          v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v30);
          v32 = v31;
        }
        else
        {
          if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
            __break(1u);
          v32 = v31;
          v33 = *(id *)(v30 + 32);
        }
        v34 = v63;
        objc_msgSend(v33, "setMinimumSupportedVersion:", v32, swift_bridgeObjectRelease(v30).n128_f64[0]);
        v64[0] = 0;
        v35 = objc_msgSend(v34, "save:", v64);
        v36 = v64[0];
        if (v35)
        {
          v37 = v64[0];
          v62(0);

          return;
        }
        v38 = v64[0];
        v29 = _convertNSErrorToError(_:)(v36);

        swift_willThrow(v39);
        v25 = v33;
        goto LABEL_3;
      }
    }
    else if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_7;
    }
    swift_bridgeObjectRelease(v30);
    v63 = (id)objc_opt_self(REMError);
    v64[0] = 0;
    v64[1] = (id)0xE000000000000000;
    _StringGuts.grow(_:)(41);
    *(_QWORD *)&v42 = swift_bridgeObjectRelease(v64[1]).n128_u64[0];
    strcpy((char *)v64, "Cannot fetch ");
    HIWORD(v64[1]) = -4864;
    v43 = objc_msgSend(a2, "entityName", v42);
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v60 = v17;
    v46 = v45;

    v47._countAndFlagsBits = v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease(v46);
    v48._countAndFlagsBits = 0xD000000000000018;
    v48._object = (void *)0x80000001006F7A90;
    String.append(_:)(v48);
    v49 = objc_msgSend(a2, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

    v50 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v50);
    object = v51._object;
    String.append(_:)(v51);
    v53 = swift_bridgeObjectRelease(object);
    (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v11, v7, v53);
    v54 = v64[1];
    v55 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v56 = swift_bridgeObjectRelease(v54).n128_u64[0];
    v57 = objc_msgSend(v63, "internalErrorWithDebugDescription:", v55, v56);

    v58 = v57;
    v62(v57);

    return;
  }
  v29 = v27;
LABEL_3:

  swift_errorRetain(v29);
  v62((id)v29);
  swift_errorRelease(v29);
  swift_errorRelease(v29);
}

void sub_1001046B8(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = _swiftEmptyArrayStorage;
  v10 = _swiftEmptyArrayStorage;
  if ((a2 & 1) == 0)
  {
    v3 = rem_currentRuntimeVersion(_swiftEmptyArrayStorage);
    KeyPath = swift_getKeyPath(&unk_1006A8AD0);
    v5 = sub_10033F888(KeyPath, v3);
    v6 = swift_release(KeyPath);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
    v8 = v10[2];
    v7 = v10[3];
    if (v8 >= v7 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
    v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v5);
    specialized Array._endMutation()(v9);
    v2 = v10;
  }
  sub_10000D2BC(v2);
  sub_100677FF4();
}

void sub_100104988(id *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  Class isa;
  void (*v20)(char *, uint64_t);
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void (*v28)(char *, uint64_t, __n128);
  id v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  __n128 v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  id v41[2];

  v40 = a3;
  v39 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v39 - 8);
  *(_QWORD *)&v9 = __chkstk_darwin(v39).n128_u64[0];
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v13 = objc_msgSend(*a1, "account", v9);
  v41[1] = v13;
  v14 = sub_10001A630((uint64_t *)&unk_10083ADA0);
  Optional.tryUnwrap(_:file:line:)(v41, 0xD000000000000017, 0x80000001006F79C0, 0xD000000000000069, 0x80000001006F79E0, 1583, v14);
  v15 = v4;

  if (v4)
    goto LABEL_2;
  v37 = a4;
  v16 = v41[0];
  v17 = (void *)objc_opt_self(REMReminder);
  v18 = objc_msgSend(v12, "reminderIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v39);
  v21 = objc_msgSend(v17, "objectIDWithUUID:", isa);

  v41[0] = 0;
  v38 = v16;
  v22 = objc_msgSend(v16, "remObjectIDWithError:", v41);
  v23 = v41[0];
  if (!v22)
  {
    v34 = v41[0];
    v15 = _convertNSErrorToError(_:)(v23);

    swift_willThrow(v35);
LABEL_2:
    *v40 = v15;
    return;
  }
  v24 = v22;
  v25 = v41[0];
  v26 = v21;
  v27 = objc_msgSend(v12, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

  v28 = (void (*)(char *, uint64_t, __n128))v20;
  v29 = objc_msgSend(v12, "sortOrder");
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  v41[0] = *(id *)a2;
  *a2 = 0x8000000000000000;
  sub_10028C2B8((uint64_t)v29, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  v31 = *a2;
  *a2 = v41[0];
  v32 = swift_bridgeObjectRelease(v31);
  v28(v11, v39, v32);
  v33 = sub_1006776CC(v12);

  *v37 = v33;
}

uint64_t sub_100104C84(void **a1, void **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  id v26;
  char v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  id v57;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, uint64_t);
  id v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  char *v70;
  char *v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  uint64_t v75;

  v73 = a3;
  v75 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v74 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v70 - v8;
  __chkstk_darwin(v10);
  v72 = (char *)&v70 - v11;
  __chkstk_darwin(v12);
  v71 = (char *)&v70 - v13;
  __chkstk_darwin(v14);
  v70 = (char *)&v70 - v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v70 - v17;
  v19 = *a1;
  v20 = *a2;
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  v21 = objc_msgSend(v19, "accountID");
  v22 = objc_msgSend(v20, "accountID");
  v23 = static NSObject.== infix(_:_:)(v21);

  if ((v23 & 1) == 0)
  {
    v35 = objc_msgSend(v19, "accountID");
    v36 = objc_msgSend(v35, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v38 = UUID.uuidString.getter(v37);
    v40 = v39;
    v41 = *(void (**)(char *, uint64_t))(v5 + 8);
    v42 = v9;
    v43 = v75;
    v41(v42, v75);
    v44 = objc_msgSend(v20, "accountID");
    v45 = objc_msgSend(v44, "uuid");

    v46 = v74;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

    v48 = UUID.uuidString.getter(v47);
    v50 = v49;
    v41(v46, v43);
    if (v38 != v48)
      goto LABEL_11;
LABEL_9:
    if (v40 == v50)
    {
      swift_bridgeObjectRelease_n(v40, 2);
      v62 = 0;
      return v62 & 1;
    }
LABEL_11:
    v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v48, v50, 1);
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v40);
    return v62 & 1;
  }
  v24 = v75;
  v25 = objc_msgSend(v19, "reminderID");
  v26 = objc_msgSend(v20, "reminderID");
  v27 = static NSObject.== infix(_:_:)(v25);

  if ((v27 & 1) == 0)
  {
    v51 = objc_msgSend(v19, "reminderID");
    v52 = objc_msgSend(v51, "uuid");

    v53 = v71;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v52);

    v38 = UUID.uuidString.getter(v54);
    v40 = v55;
    v56 = *(void (**)(char *, uint64_t))(v5 + 8);
    v56(v53, v24);
    v57 = objc_msgSend(v20, "reminderID");
    v58 = objc_msgSend(v57, "uuid");

    v59 = v72;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v58);

    v48 = UUID.uuidString.getter(v60);
    v50 = v61;
    v56(v59, v24);
    if (v38 != v48)
      goto LABEL_11;
    goto LABEL_9;
  }
  v28 = objc_msgSend(v19, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

  v29 = *v73;
  if (*(_QWORD *)(*v73 + 16))
  {
    v30 = sub_1002C65F8((uint64_t)v18);
    v31 = v24;
    v32 = (uint64_t)v70;
    if ((v33 & 1) != 0)
      v34 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
    else
      v34 = 0;
  }
  else
  {
    v34 = 0;
    v31 = v24;
    v32 = (uint64_t)v70;
  }
  v63 = *(void (**)(char *, uint64_t))(v5 + 8);
  v63(v18, v31);
  v64 = objc_msgSend(v20, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v64);

  v65 = *v73;
  if (*(_QWORD *)(*v73 + 16))
  {
    v66 = sub_1002C65F8(v32);
    if ((v67 & 1) != 0)
      v68 = *(_QWORD *)(*(_QWORD *)(v65 + 56) + 8 * v66);
    else
      v68 = 0;
  }
  else
  {
    v68 = 0;
  }
  v63((char *)v32, v31);
  v62 = v34 < v68;
  return v62 & 1;
}

void sub_100105168(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  void *v8;
  id v9;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a1;
  a5(a3, v9, v8);
  _Block_release(v8);
  _Block_release(v8);

}

void sub_1001051D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  NSArray v7;
  uint64_t v8;
  id v9;

  sub_1000151B0(0, a4, a5);
  v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2)
    v8 = _convertErrorToNSError(_:)(a2);
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v7.super.isa);

}

void sub_100105260(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void (*a5)(_QWORD, uint64_t))
{
  uint64_t v5;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  void (*v25)(_QWORD *, _QWORD, __n128);
  int v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;

  sub_100106B50();
  v9 = v8;
  v10 = type metadata accessor for REMCDManualSortHint();
  v11 = NSManagedObjectContext.fetch<A>(_:)(v9, v10);
  if (v5)
  {

    swift_errorRetain(v5);
    a5(0, v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }
  else
  {
    v12 = v11;

    v13 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend((id)v13, "setDateFormat:", v14);

    if ((unint64_t)v12 >> 62)
      goto LABEL_23;
    v15 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v29 = (void *)v13;
      v25 = (void (*)(_QWORD *, _QWORD, __n128))a5;
      if (!v15)
        break;
      v28 = v12 & 0xC000000000000001;
      v16 = _swiftEmptyArrayStorage;
      v13 = 4;
      v27 = v12;
      v26 = a3;
      while (1)
      {
        v17 = v28
            ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v12)
            : (char *)*(id *)(v12 + 8 * v13);
        v18 = v17;
        a5 = (void (*)(_QWORD, uint64_t))(v13 - 3);
        if (__OFADD__(v13 - 4, 1))
          break;
        if ((a3 & 1) != 0)
          v19 = sub_1001174C4(v17, v29);
        else
          v19 = sub_100117DC4(v17, v29);
        v20 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          v16 = sub_1002C8EEC(0, v16[2] + 1, 1, v16);
        v22 = v16[2];
        v21 = v16[3];
        if (v22 >= v21 >> 1)
          v16 = sub_1002C8EEC((_QWORD *)(v21 > 1), v22 + 1, 1, v16);
        v16[2] = v22 + 1;
        v16[v22 + 4] = v20;

        ++v13;
        v12 = v27;
        a3 = v26;
        if (a5 == (void (*)(_QWORD, uint64_t))v15)
          goto LABEL_21;
      }
      __break(1u);
LABEL_23:
      if (v12 < 0)
        v24 = v12;
      else
        v24 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v15 = _CocoaArrayWrapper.endIndex.getter(v24);
      swift_bridgeObjectRelease(v12);
    }
    v16 = _swiftEmptyArrayStorage;
LABEL_21:
    v23 = swift_bridgeObjectRelease(v12);
    v25(v16, 0, v23);

    swift_bridgeObjectRelease(v16);
  }
}

uint64_t sub_100105524(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  Swift::Double v24;
  double v25;
  uint64_t v26;
  unsigned __int8 v27;
  id v28;
  id v29;
  id v31;
  uint64_t v32;
  _QWORD v33[2];
  void *v34;
  uint64_t (*v35)(uint64_t);
  id v36;

  v35 = a3;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100106B50();
  v12 = v11;
  v13 = type metadata accessor for REMCDManualSortHint();
  v14 = NSManagedObjectContext.fetch<A>(_:)(v12, v13);
  if (v4)
  {

    v15 = v4;
    v16 = v35;
    goto LABEL_20;
  }
  v17 = v14;
  v33[1] = a4;
  v34 = a1;

  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v26 = v17;
    else
      v26 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v18 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v17);
    v19 = v34;
    v16 = v35;
    if (v18)
      goto LABEL_5;
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    v19 = v34;
    v16 = v35;
    if (v18)
    {
LABEL_5:
      v33[0] = 0;
      if (v18 < 1)
        __break(1u);
      v20 = 0;
      do
      {
        if ((v17 & 0xC000000000000001) != 0)
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v17);
        else
          v21 = *(id *)(v17 + 8 * v20 + 32);
        v22 = v21;
        ++v20;
        objc_msgSend(v21, "setETag:", 0, v33[0]);
        objc_msgSend(v22, "setHintData:", 0);
        objc_msgSend(v22, "setConcatenatedContainerIDsWithLocalContainerIDPrefix:", 0);
        v23 = static Date.referenceDate.getter(objc_msgSend(v22, "setConcatenatedElementIDsWithLocalElementIDPrefix:", 0));
        v24 = Date.timeIntervalSinceReferenceDate.getter(v23);
        objc_msgSend(v22, "setLastAccessedSinceReferenceDate:", Int32.init(timeIntervalSinceReferenceDate:)(v24));
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        objc_msgSend(v22, "setSerializationVersion:", 0);
        objc_msgSend(v22, "updateChangeCount");

      }
      while (v18 != v20);
      *(_QWORD *)&v25 = swift_bridgeObjectRelease(v17).n128_u64[0];
      v19 = v34;
      v16 = v35;
      goto LABEL_17;
    }
  }
  *(_QWORD *)&v25 = swift_bridgeObjectRelease(v17).n128_u64[0];
LABEL_17:
  v36 = 0;
  v27 = objc_msgSend(v19, "save:", &v36, v25);
  v28 = v36;
  if ((v27 & 1) != 0)
  {
    v29 = v36;
    return v16(0);
  }
  v31 = v36;
  v15 = _convertNSErrorToError(_:)(v28);

  swift_willThrow(v32);
LABEL_20:
  swift_errorRetain(v15);
  v16(v15);
  swift_errorRelease(v15);
  return swift_errorRelease(v15);
}

void sub_100105808(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, _QWORD *a8)
{
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  __int128 *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  __int128 v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  _OWORD v38[2];
  __int128 v39;
  void *v40;
  _OWORD v41[2];
  uint64_t v42;

  v37._object = a7;
  v37._countAndFlagsBits = a6;
  v13 = *a1;
  *(_QWORD *)&v41[0] = a2;
  *((_QWORD *)&v41[0] + 1) = a3;
  swift_bridgeObjectRetain_n(a3, 2);
  v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v41, &type metadata for String);
  v15 = objc_msgSend(v13, "__swift_objectForKeyedSubscript:", v14);
  swift_unknownObjectRelease(v14);
  if (!v15)
  {
    swift_bridgeObjectRelease(a3);
    return;
  }
  _bridgeAnyObjectToAny(_:)(&v39, v15);
  swift_unknownObjectRelease(v15);
  sub_10001A6CC(&v39, v41);
  swift_bridgeObjectRelease(a3);
  *(_QWORD *)&v38[0] = 0x746E756F63;
  *((_QWORD *)&v38[0] + 1) = 0xE500000000000000;
  v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v38, &type metadata for String);
  v17 = objc_msgSend(v13, "__swift_objectForKeyedSubscript:", v16);
  swift_unknownObjectRelease(v16);
  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(v38, v17);
    swift_unknownObjectRelease(v17);
  }
  else
  {
    memset(v38, 0, sizeof(v38));
  }
  sub_1000A5CA8((uint64_t)v38, (uint64_t)&v39, (uint64_t *)&unk_10083D5B0);
  if (v40)
  {
    if ((swift_dynamicCast(&v42, &v39, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
    {
      v36 = v42;
      *(_QWORD *)&v39 = a4;
      *((_QWORD *)&v39 + 1) = a5;
      swift_bridgeObjectRetain_n(a5, 2);
      v18 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v39, &type metadata for String);
      v19 = objc_msgSend(v13, "__swift_objectForKeyedSubscript:", v18);
      swift_unknownObjectRelease(v18);
      if (v19)
      {
        _bridgeAnyObjectToAny(_:)(v38, v19);
        swift_unknownObjectRelease(v19);
        sub_10001A6CC(v38, &v39);
        swift_bridgeObjectRelease(a5);
      }
      else
      {
        v40 = &type metadata for String;
        swift_bridgeObjectRelease(a5);
        *(_QWORD *)&v39 = 7104846;
        *((_QWORD *)&v39 + 1) = 0xE300000000000000;
      }
      *(_QWORD *)&v38[0] = 0;
      *((_QWORD *)&v38[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v21._countAndFlagsBits = 0x5B746E756F636361;
      v21._object = (void *)0xE800000000000000;
      String.append(_:)(v21);
      String.append(_:)(v37);
      v22._countAndFlagsBits = 0x5B7473696C2E5DLL;
      v22._object = (void *)0xE700000000000000;
      String.append(_:)(v22);
      _print_unlocked<A, B>(_:_:)(&v39, v38, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v23._countAndFlagsBits = 0x646E696D65722E5DLL;
      v23._object = (void *)0xEC0000002E737265;
      String.append(_:)(v23);
      v24 = v38[0];
      *(_QWORD *)&v38[0] = 0;
      *((_QWORD *)&v38[0] + 1) = 0xE000000000000000;
      v25._countAndFlagsBits = a2;
      v25._object = a3;
      String.append(_:)(v25);
      v26._countAndFlagsBits = 40;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      _print_unlocked<A, B>(_:_:)(v41, v38, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v27._countAndFlagsBits = 0x746E756F632E29;
      v27._object = (void *)0xE700000000000000;
      String.append(_:)(v27);
      v29 = (void *)*((_QWORD *)&v38[0] + 1);
      v28._countAndFlagsBits = *(_QWORD *)&v38[0];
      v38[0] = v24;
      v28._object = v29;
      String.append(_:)(v28);
      swift_bridgeObjectRelease(v29);
      v30 = v38[0];
      *(_QWORD *)&v38[0] = v36;
      v31 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v33 = v32;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a8);
      *(_QWORD *)&v38[0] = *a8;
      *a8 = 0x8000000000000000;
      sub_10028B8BC(v31, v33, v30, *((uint64_t *)&v30 + 1), isUniquelyReferenced_nonNull_native);
      v35 = *a8;
      *a8 = *(_QWORD *)&v38[0];
      swift_bridgeObjectRelease(*((_QWORD *)&v30 + 1));
      swift_bridgeObjectRelease(v35);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v41);
      v20 = &v39;
      goto LABEL_14;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v39, (uint64_t *)&unk_10083D5B0);
  }
  v20 = v41;
LABEL_14:
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v20);
}

id sub_100105C1C@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id result;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void (*v26)(char *, char *, uint64_t);
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  __n128 v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;

  v69 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v58 - v14;
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = (char *)&v58 - v18;
  v20 = *a1;
  result = objc_msgSend(v20, "accountIdentifier", v17);
  if (!result)
  {
    v46 = 0;
    goto LABEL_27;
  }
  v22 = result;
  v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v68 = v23;

  v24 = objc_msgSend(v20, "activityDate");
  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_14;
  }
  v25 = v24;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v26(v8, v15, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_14:
    swift_bridgeObjectRelease(v68);
    result = (id)sub_10000882C((uint64_t)v8, (uint64_t *)&unk_1008380D0);
    v46 = 0;
    goto LABEL_27;
  }
  v26(v19, v8, v9);
  v27 = objc_msgSend(v20, "authorUserRecordIDString");
  if (!v27)
  {
LABEL_18:
    v48 = swift_bridgeObjectRelease(v68);
    result = (id)(*(uint64_t (**)(char *, uint64_t, __n128))(v10 + 8))(v19, v9, v48);
    v46 = 0;
    goto LABEL_27;
  }
  v28 = v27;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v31 = v30;

  v32 = objc_msgSend(v20, "ckIdentifier");
  if (!v32)
  {
    v47 = v31;
LABEL_17:
    swift_bridgeObjectRelease(v47);
    goto LABEL_18;
  }
  v33 = v32;
  v66 = v31;
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  v36 = objc_msgSend(v20, "sharedEntityName");
  if (!v36)
  {
    swift_bridgeObjectRelease(v35);
    v47 = v66;
    goto LABEL_17;
  }
  v37 = v36;
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v62 = v39;
  v63 = v38;

  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v19, v9);
  v40 = objc_msgSend(v20, "activityTypeRawValue");
  if (v40 - 1 < 3)
    v41 = (unsigned __int16)(v40 - 1) + 1;
  else
    v41 = 0;
  v61 = v41;
  v42 = objc_msgSend(v20, "ckParentCloudObjectEntityName");
  if (v42)
  {
    v43 = v42;
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v59 = v45;
    v60 = v44;

  }
  else
  {
    v59 = 0;
    v60 = 0;
  }
  v64 = v29;
  v49 = objc_msgSend(v20, "ckParentCloudObjectIdentifier");
  if (v49)
  {
    v50 = v49;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v52 = v51;

  }
  else
  {
    v58 = 0;
    v52 = 0;
  }
  v53 = objc_msgSend(v20, "uuidForChangeTracking", v58);
  if (v53)
  {
    v54 = v53;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v53);

    v55 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v5, 0, 1, v55);
  }
  else
  {
    v56 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v5, 1, 1, v56);
  }
  v57 = objc_allocWithZone((Class)REMSharedEntitySyncActivity);
  v46 = sub_1001074B8(v67, v68, (uint64_t)v12, v61, v64, v66, v60, v59, v58, v52, v65, v35, v63, v62, (uint64_t)v5);
  result = (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v19, v9);
LABEL_27:
  *v69 = v46;
  return result;
}

void sub_100106098(void *a1, void *a2, char a3, char a4, char a5)
{
  uint64_t v5;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  char **v17;
  id v18;
  unsigned int v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  os_log_type_t v41;
  uint64_t v42;
  id v43;

  v10 = a2;
  v11 = (void *)sub_1005CDB04((uint64_t)v10);
  if (!v5)
  {
    v12 = v11;
    sub_1004BB178(v11, 0);
    v14 = v13;
    if (!v13)
    {
      v18 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v10);
      swift_willThrow(v18);
      goto LABEL_3;
    }
    v15 = 0xD000000000000017;
    if ((a3 & 1) != 0)
    {
      -[NSObject debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:](v13, "debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:", 0);
      -[NSObject debug_lowLevelUnmarkForDeletion](v14, "debug_lowLevelUnmarkForDeletion");
      v15 = 0xD000000000000019;
      v16 = 0x80000001006F8600;
      if ((a5 & 1) == 0)
      {
LABEL_15:
        if (!objc_msgSend(a1, "hasChanges"))
        {

          swift_bridgeObjectRelease(v16);
          return;
        }
        v43 = 0;
        v19 = objc_msgSend(a1, "save:", &v43);
        v20 = v43;
        if (!v19)
        {
          v38 = v43;
          swift_bridgeObjectRelease(v16);
          _convertNSErrorToError(_:)(v20);

          swift_willThrow(v39);
LABEL_27:

          goto LABEL_3;
        }
        v21 = qword_100836D08;
        v22 = v43;
        if (v21 != -1)
          swift_once(&qword_100836D08, sub_1000F53D4);
        v23 = type metadata accessor for Logger(0);
        sub_10001AAA8(v23, (uint64_t)qword_10083AC30);
        v24 = v14;
        swift_bridgeObjectRetain(v16);
        v14 = Logger.logObject.getter(v25);
        v26 = static os_log_type_t.default.getter(v14);
        if (os_log_type_enabled(v14, v26))
        {
          v41 = v26;
          v27 = swift_slowAlloc(32, -1);
          v40 = (void *)swift_slowAlloc(96, -1);
          v43 = v40;
          *(_DWORD *)v27 = 136446722;
          swift_bridgeObjectRetain(v16);
          v42 = sub_10001A820(v15, v16, (uint64_t *)&v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
          swift_bridgeObjectRelease_n(v16, 3);
          *(_WORD *)(v27 + 12) = 2082;
          v28 = Bool.yesno.getter(a5 & 1);
          v30 = v29;
          v42 = sub_10001A820(v28, v29, (uint64_t *)&v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
          *(_QWORD *)&v31 = swift_bridgeObjectRelease(v30).n128_u64[0];
          *(_WORD *)(v27 + 22) = 2082;
          v32 = -[NSObject remObjectID](v24, "remObjectID", v31);
          if (v32)
          {
            v33 = v32;
            v34 = objc_msgSend(v32, "description");

            v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
            v37 = v36;

          }
          else
          {
            v37 = 0xE300000000000000;
            v35 = 7104878;
          }
          v42 = sub_10001A820(v35, v37, (uint64_t *)&v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);

          swift_bridgeObjectRelease(v37);
          _os_log_impl((void *)&_mh_execute_header, v14, v41, "RDXPCDebugPerformer: %{public}s: Saved updating .markedForDeletion flag {shouldSetDirtyFlags: %{public}s, objectID: %{public}s}", (uint8_t *)v27, 0x20u);
          swift_arrayDestroy(v40, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v40, -1, -1);
          swift_slowDealloc(v27, -1, -1);

          goto LABEL_27;
        }

        swift_bridgeObjectRelease_n(v16, 2);
LABEL_3:

        return;
      }
      v17 = &selRef_debug_markObjectDirtyAfterUnmarkedForDeletion;
    }
    else
    {
      if ((a4 & 1) != 0)
        -[NSObject debug_lowLevelRemoveFromParent](v13, "debug_lowLevelRemoveFromParent");
      -[NSObject debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:](v14, "debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:", 1);
      -[NSObject debug_lowLevelMarkForDeletion](v14, "debug_lowLevelMarkForDeletion");
      v16 = 0x80000001006F8620;
      if ((a5 & 1) == 0)
        goto LABEL_15;
      v17 = &selRef_debug_markObjectDirtyAfterMarkedForDeletion;
    }
    objc_msgSend(v14, *v17);
    goto LABEL_15;
  }
}

unint64_t sub_100106520()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t Option;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;

  v1 = v0;
  v2 = 0xD000000000000021;
  Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151E8(v1, (uint64_t)v5, v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, Option);
  if (!EnumCaseMultiPayload)
  {
    v2 = 0xD000000000000037;
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v2 = 0xD000000000000030;
LABEL_5:
    sub_10001C744((uint64_t)v5, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  }
  return v2;
}

void sub_10010660C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;

  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v10, (uint64_t *)&unk_100839C80);
  v11 = *a2;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  }
  objc_msgSend(v11, *a5, isa);

}

void sub_1001066F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "ckIdentifier");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_100106754(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setCkIdentifier:");

}

uint64_t sub_1001067B0(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  id v19;
  uint64_t v20;
  id v21;

  v7 = sub_1001156B4(a3);
  v8 = v4;
  if (v4)
    goto LABEL_17;
  v9 = v7;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v14 = v7;
    else
      v14 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v10 = _CocoaArrayWrapper.endIndex.getter(v14);
    if (v10)
      goto LABEL_4;
  }
  else
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v7);
    if (v10)
    {
LABEL_4:
      if (v10 < 1)
        __break(1u);
      for (i = 0; i != v10; ++i)
      {
        if ((v9 & 0xC000000000000001) != 0)
          v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v9);
        else
          v12 = *(id *)(v9 + 8 * i + 32);
        v13 = v12;
        objc_msgSend(a1, "deleteObject:", v12);

      }
    }
  }
  v21 = 0;
  v15 = objc_msgSend(a1, "save:", &v21, swift_bridgeObjectRelease_n(v9, 2).n128_f64[0]);
  v16 = v21;
  if ((v15 & 1) != 0)
  {
    v17 = v21;
    return a4(0);
  }
  v19 = v21;
  v8 = _convertNSErrorToError(_:)(v16);

  swift_willThrow(v20);
LABEL_17:
  swift_errorRetain(v8);
  a4(v8);
  swift_errorRelease(v8);
  return swift_errorRelease(v8);
}

uint64_t sub_100106970@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010697C(a1, (SEL *)&selRef_identifier, a2);
}

uint64_t sub_10010697C@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v4);

    v6 = type metadata accessor for UUID(0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a3;
    v9 = 0;
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a3;
    v9 = 1;
  }
  return v7(v8, v9, 1, v6);
}

void sub_1001069FC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10010660C(a1, a2, a3, a4, (SEL *)&selRef_setIdentifier_);
}

id sub_100106A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  objc_class *v8;
  char *v9;
  char *v10;
  id v11;
  objc_super v13;

  v7 = *(void **)(v3 + 16);
  v8 = (objc_class *)type metadata accessor for RDDaemonController();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = &v9[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  sub_1000184A8(a3, (uint64_t)&v9[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
  *(_QWORD *)&v9[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = v7;
  swift_unknownObjectRetain(a1);
  sub_10001BAE8(a3);
  v13.receiver = v9;
  v13.super_class = v8;
  v11 = v7;
  return objc_msgSendSuper2(&v13, "init");
}

void sub_100106B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Request;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for Date(0);
  __chkstk_darwin(v1);
  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for UUID(0);
  __chkstk_darwin(v3);
  Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151E8(v0, (uint64_t)v6, v7);
  v8 = (char *)&loc_100106C80 + *((int *)qword_100107240 + swift_getEnumCaseMultiPayload(v6, Request));
  __asm { BR              X10 }
}

id sub_100106C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v3, v1);
  v6 = sub_10001A630(&qword_100839C30);
  inited = swift_initStackObject(v6, v5 - 184);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  KeyPath = swift_getKeyPath(&unk_1006A8D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v0, v2, v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v0, 0, 1, v1);
  v9 = sub_1002E7EE0(KeyPath, v0);
  swift_release(KeyPath);
  *(_QWORD *)(inited + 32) = v9;
  v10 = swift_getKeyPath(&unk_1006A8CD8);
  v11 = sub_1003426B0(v10);
  v12 = swift_release(v10);
  *(_QWORD *)(inited + 40) = v11;
  *(_QWORD *)(v5 - 136) = inited;
  specialized Array._endMutation()(v12);
  v13 = (void *)sub_10000D2BC(*(_QWORD *)(v5 - 136));
  v14 = type metadata accessor for REMCDManualSortHint();
  v15 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(v14), "entity");
  objc_msgSend(v15, "setEntity:", v16);

  objc_msgSend(v15, "setAffectedStores:", 0);
  objc_msgSend(v15, "setPredicate:", v13);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
  return v15;
}

uint64_t sub_100107254(uint64_t a1, uint64_t a2)
{
  return sub_10010726C(a1, a2, (SEL *)&selRef_fileName);
}

uint64_t sub_100107260(uint64_t a1, uint64_t a2)
{
  return sub_10010726C(a1, a2, (SEL *)&selRef_sha512Sum);
}

uint64_t sub_10010726C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(*v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

void sub_1001072CC(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v3;
  id v5;

  v3 = *v2;
  if (a2)
  {
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(v3, "setSha512Sum:", v5);

}

uint64_t sub_100107330@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, "identifier");
  if (v3)
  {
    v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for UUID(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

id sub_1001073B4()
{
  id *v0;

  return objc_msgSend(*v0, "account");
}

uint64_t type metadata accessor for RDXPCDebugPerformer()
{
  return objc_opt_self(_TtC7remindd19RDXPCDebugPerformer);
}

uint64_t type metadata accessor for DebugPerformerManualHashtagLabelUpdaterDelegate()
{
  return objc_opt_self(_TtC7reminddP33_A793612D66A4A6A32EDDE79136FC5A3847DebugPerformerManualHashtagLabelUpdaterDelegate);
}

uint64_t type metadata accessor for DebugPerformerMockDABabysittableAccount()
{
  return objc_opt_self(_TtC7reminddP33_A793612D66A4A6A32EDDE79136FC5A3839DebugPerformerMockDABabysittableAccount);
}

uint64_t sub_100107438(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1001D92D4(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  sub_1001076A4(v9, a2);
  return specialized ContiguousArray._endMutation()(v7);
}

id sub_1001074B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  NSDate v19;
  NSString v20;
  NSString v21;
  uint64_t v22;
  NSString v23;
  NSString v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  id v29;
  uint64_t v30;
  NSString v32;
  void *v34;
  uint64_t v35;

  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v35 = a3;
  v19.super.isa = Date._bridgeToObjectiveC()().super.isa;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  if (a8)
  {
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a8);
    v22 = a15;
    if (a10)
    {
LABEL_3:
      v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a10);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = 0;
    v22 = a15;
    if (a10)
      goto LABEL_3;
  }
  v23 = 0;
LABEL_6:
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a12);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a14);
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v22, 1, v26) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v22, v26);
  }
  v29 = objc_msgSend(v34, "initWithAccountIdentifier:activityDate:activityType:authorUserRecordIDString:ckParentCloudObjectEntityName:ckParentCloudObjectIdentifier:ckIdentifier:sharedEntityName:uuidForChangeTracking:", v32, v19.super.isa, a4, v20, v21, v23, v24, v25, isa);

  v30 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v35, v30);
  return v29;
}

void sub_1001076A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  Swift::Int v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  int v18;
  int v19;
  Swift::Int v20;
  char *v21;
  void **v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  int v27;
  uint64_t *v28;
  Swift::Int v29;
  Swift::Int v30;
  uint64_t *v31;
  uint64_t v32;
  Swift::Int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  Swift::Int v89;
  uint64_t v90;
  void *v91;
  id v92;
  id v93;
  char v94;
  char v95;
  void *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  Swift::Int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  Swift::Int v114;
  Swift::Int v115;
  Swift::Int v116;
  Swift::Int v117;
  Swift::Int v118;
  void **__dst;
  uint64_t v120;
  void *v122;
  void *v123;
  uint64_t v124;

  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_142;
    if (v4)
      sub_100107E5C(0, v4, 1, a1, a2);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_151;
  v114 = v5;
  v112 = a1;
  if (v4 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    v124 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v36 = _swiftEmptyArrayStorage[2];
LABEL_104:
      v98 = v10;
      if (v36 >= 2)
      {
        v99 = *v112;
        do
        {
          v100 = v36 - 2;
          if (v36 < 2)
            goto LABEL_137;
          if (!v99)
            goto LABEL_150;
          v101 = v98;
          v102 = *(_QWORD *)&v98[16 * v100 + 32];
          v103 = *(_QWORD *)&v98[16 * v36 + 24];
          sub_100107F54((void **)(v99 + 8 * v102), (void **)(v99 + 8 * *(_QWORD *)&v98[16 * v36 + 16]), v99 + 8 * v103, __dst, a2);
          if (v2)
          {
            v98 = v101;
            break;
          }
          if (v103 < v102)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
            v101 = sub_1001D52E4((uint64_t)v101);
          if (v100 >= *((_QWORD *)v101 + 2))
            goto LABEL_139;
          v104 = v101 + 32;
          v105 = &v101[16 * v100 + 32];
          *(_QWORD *)v105 = v102;
          *((_QWORD *)v105 + 1) = v103;
          v106 = v101;
          v107 = *((_QWORD *)v101 + 2);
          if (v36 > v107)
            goto LABEL_140;
          memmove(&v104[16 * v36 - 16], &v104[16 * v36], 16 * (v107 - v36));
          v98 = v106;
          *((_QWORD *)v106 + 2) = v107 - 1;
          v36 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease(v98);
      goto LABEL_119;
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v124 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v113 = *a1 + 16;
  v111 = *a1 - 8;
  v10 = (char *)_swiftEmptyArrayStorage;
  v115 = v4;
  v120 = *a1;
LABEL_13:
  v13 = v11++;
  if (v11 < v4)
  {
    v14 = *(void **)(v12 + 8 * v11);
    v122 = *(void **)(v12 + 8 * v13);
    v15 = v122;
    v123 = v14;
    v16 = v14;
    v17 = v15;
    v18 = sub_100104C84(&v123, &v122, a2);
    if (v2)
    {
      swift_bridgeObjectRelease(v10);

      goto LABEL_119;
    }
    v19 = v18;

    v11 = v13 + 2;
    if (v13 + 2 < v4)
    {
      v20 = v13;
      v21 = v10;
      v116 = v20;
      v22 = (void **)(v113 + 8 * v20);
      while (1)
      {
        v23 = *v22;
        v122 = *(v22 - 1);
        v24 = v122;
        v123 = v23;
        v25 = v23;
        v26 = v24;
        v27 = sub_100104C84(&v123, &v122, a2);

        if (((v19 ^ v27) & 1) != 0)
          break;
        ++v11;
        ++v22;
        v4 = v115;
        if (v115 == v11)
        {
          v11 = v115;
          v10 = v21;
          goto LABEL_21;
        }
      }
      v10 = v21;
      v4 = v115;
LABEL_21:
      v13 = v116;
    }
    v12 = v120;
    if ((v19 & 1) != 0)
    {
      if (v11 < v13)
        goto LABEL_146;
      if (v13 < v11)
      {
        v28 = (uint64_t *)(v111 + 8 * v11);
        v29 = v11;
        v30 = v13;
        v31 = (uint64_t *)(v120 + 8 * v13);
        do
        {
          if (v30 != --v29)
          {
            if (!v120)
              goto LABEL_149;
            v32 = *v31;
            *v31 = *v28;
            *v28 = v32;
          }
          ++v30;
          --v28;
          ++v31;
        }
        while (v30 < v29);
      }
    }
  }
  if (v11 >= v4)
    goto LABEL_40;
  if (__OFSUB__(v11, v13))
    goto LABEL_143;
  if (v11 - v13 >= v114)
  {
LABEL_40:
    if (v11 < v13)
      goto LABEL_141;
    goto LABEL_41;
  }
  if (__OFADD__(v13, v114))
    goto LABEL_144;
  if (v13 + v114 >= v4)
    v33 = v4;
  else
    v33 = v13 + v114;
  if (v33 >= v13)
  {
    if (v11 == v33)
      goto LABEL_40;
    v118 = v13;
    v109 = v10;
    v110 = v33;
    v87 = v111 + 8 * v11;
    while (1)
    {
      v88 = *(void **)(v12 + 8 * v11);
      v89 = v118;
      v90 = v87;
      while (1)
      {
        v122 = *(void **)v87;
        v91 = v122;
        v123 = v88;
        v92 = v88;
        v93 = v91;
        v94 = sub_100104C84(&v123, &v122, a2);
        if (v2)
        {
          swift_bridgeObjectRelease(v109);

LABEL_119:
          *(_QWORD *)((v124 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
          specialized Array._endMutation()(v108);
          swift_bridgeObjectRelease(v124);
          return;
        }
        v95 = v94;

        if ((v95 & 1) == 0)
          break;
        v12 = v120;
        if (!v120)
          goto LABEL_148;
        v96 = *(void **)v87;
        v88 = *(void **)(v87 + 8);
        *(_QWORD *)v87 = v88;
        *(_QWORD *)(v87 + 8) = v96;
        v87 -= 8;
        if (v11 == ++v89)
          goto LABEL_99;
      }
      v12 = v120;
LABEL_99:
      ++v11;
      v87 = v90 + 8;
      if (v11 == v110)
      {
        v11 = v110;
        v10 = v109;
        v13 = v118;
        if (v110 < v118)
          goto LABEL_141;
LABEL_41:
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_1001D4DF0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v35 = *((_QWORD *)v10 + 2);
        v34 = *((_QWORD *)v10 + 3);
        v36 = v35 + 1;
        v12 = v120;
        if (v35 >= v34 >> 1)
        {
          v97 = sub_1001D4DF0((char *)(v34 > 1), v35 + 1, 1, v10);
          v12 = v120;
          v10 = v97;
        }
        *((_QWORD *)v10 + 2) = v36;
        v37 = v10 + 32;
        v38 = &v10[16 * v35 + 32];
        *(_QWORD *)v38 = v13;
        *((_QWORD *)v38 + 1) = v11;
        if (v35)
        {
          v117 = v11;
          while (1)
          {
            v39 = v36 - 1;
            if (v36 >= 4)
            {
              v44 = &v37[16 * v36];
              v45 = *((_QWORD *)v44 - 8);
              v46 = *((_QWORD *)v44 - 7);
              v50 = __OFSUB__(v46, v45);
              v47 = v46 - v45;
              if (v50)
                goto LABEL_126;
              v49 = *((_QWORD *)v44 - 6);
              v48 = *((_QWORD *)v44 - 5);
              v50 = __OFSUB__(v48, v49);
              v42 = v48 - v49;
              v43 = v50;
              if (v50)
                goto LABEL_127;
              v51 = v36 - 2;
              v52 = &v37[16 * v36 - 32];
              v54 = *(_QWORD *)v52;
              v53 = *((_QWORD *)v52 + 1);
              v50 = __OFSUB__(v53, v54);
              v55 = v53 - v54;
              if (v50)
                goto LABEL_129;
              v50 = __OFADD__(v42, v55);
              v56 = v42 + v55;
              if (v50)
                goto LABEL_132;
              if (v56 >= v47)
              {
                v74 = &v37[16 * v39];
                v76 = *(_QWORD *)v74;
                v75 = *((_QWORD *)v74 + 1);
                v50 = __OFSUB__(v75, v76);
                v77 = v75 - v76;
                if (v50)
                  goto LABEL_136;
                v67 = v42 < v77;
                goto LABEL_78;
              }
            }
            else
            {
              if (v36 != 3)
              {
                v68 = *((_QWORD *)v10 + 4);
                v69 = *((_QWORD *)v10 + 5);
                v50 = __OFSUB__(v69, v68);
                v61 = v69 - v68;
                v62 = v50;
                goto LABEL_72;
              }
              v41 = *((_QWORD *)v10 + 4);
              v40 = *((_QWORD *)v10 + 5);
              v50 = __OFSUB__(v40, v41);
              v42 = v40 - v41;
              v43 = v50;
            }
            if ((v43 & 1) != 0)
              goto LABEL_128;
            v51 = v36 - 2;
            v57 = &v37[16 * v36 - 32];
            v59 = *(_QWORD *)v57;
            v58 = *((_QWORD *)v57 + 1);
            v60 = __OFSUB__(v58, v59);
            v61 = v58 - v59;
            v62 = v60;
            if (v60)
              goto LABEL_131;
            v63 = &v37[16 * v39];
            v65 = *(_QWORD *)v63;
            v64 = *((_QWORD *)v63 + 1);
            v50 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            if (v50)
              goto LABEL_134;
            if (__OFADD__(v61, v66))
              goto LABEL_135;
            if (v61 + v66 >= v42)
            {
              v67 = v42 < v66;
LABEL_78:
              if (v67)
                v39 = v51;
              goto LABEL_80;
            }
LABEL_72:
            if ((v62 & 1) != 0)
              goto LABEL_130;
            v70 = &v37[16 * v39];
            v72 = *(_QWORD *)v70;
            v71 = *((_QWORD *)v70 + 1);
            v50 = __OFSUB__(v71, v72);
            v73 = v71 - v72;
            if (v50)
              goto LABEL_133;
            if (v73 < v61)
              goto LABEL_89;
LABEL_80:
            v78 = v39 - 1;
            if (v39 - 1 >= v36)
            {
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            if (!v12)
              goto LABEL_147;
            v79 = v10;
            v80 = &v37[16 * v78];
            v81 = *(_QWORD *)v80;
            v82 = v37;
            v83 = v39;
            v84 = &v37[16 * v39];
            v85 = *((_QWORD *)v84 + 1);
            sub_100107F54((void **)(v12 + 8 * *(_QWORD *)v80), (void **)(v12 + 8 * *(_QWORD *)v84), v12 + 8 * v85, __dst, a2);
            if (v2)
            {
              v98 = v79;
              goto LABEL_118;
            }
            if (v85 < v81)
              goto LABEL_123;
            if (v83 > *((_QWORD *)v79 + 2))
              goto LABEL_124;
            *(_QWORD *)v80 = v81;
            *(_QWORD *)&v82[16 * v78 + 8] = v85;
            v86 = *((_QWORD *)v79 + 2);
            if (v83 >= v86)
              goto LABEL_125;
            v10 = v79;
            v36 = v86 - 1;
            memmove(v84, v84 + 16, 16 * (v86 - 1 - v83));
            v37 = v82;
            *((_QWORD *)v79 + 2) = v86 - 1;
            v12 = v120;
            v11 = v117;
            if (v86 <= 2)
              goto LABEL_89;
          }
        }
        v36 = 1;
LABEL_89:
        v4 = v115;
        if (v11 >= v115)
          goto LABEL_104;
        goto LABEL_13;
      }
    }
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_100107E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  char v15;
  void *v16;
  uint64_t v19;
  void *v20;
  void *v21;

  if (a3 != a2)
  {
    v7 = a3;
    v8 = a1;
    v9 = *a4;
    v10 = *a4 + 8 * a3 - 8;
LABEL_4:
    v11 = *(void **)(v9 + 8 * v7);
    v19 = v10;
    while (1)
    {
      v21 = v11;
      v20 = *(void **)v10;
      v12 = v20;
      v13 = v11;
      v14 = v12;
      v15 = sub_100104C84(&v21, &v20, a5);

      if (v5)
        break;
      if ((v15 & 1) != 0)
      {
        if (!v9)
        {
          __break(1u);
          return;
        }
        v16 = *(void **)v10;
        v11 = *(void **)(v10 + 8);
        *(_QWORD *)v10 = v11;
        *(_QWORD *)(v10 + 8) = v16;
        v10 -= 8;
        if (v7 != ++v8)
          continue;
      }
      ++v7;
      v10 = v19 + 8;
      v8 = a1;
      if (v7 != a2)
        goto LABEL_4;
      return;
    }
  }
}

uint64_t sub_100107F54(void **__src, void **a2, unint64_t a3, void **__dst, uint64_t *a5)
{
  void **v5;
  void **v7;
  void **v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void **v17;
  void *v18;
  void *v19;
  id v20;
  char v21;
  char v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  void **v27;
  unint64_t v28;
  void **v29;
  void *v30;
  void *v31;
  id v32;
  char v33;
  char v34;
  void **v35;
  void **v36;
  uint64_t result;
  void **v38;
  void **v39;
  uint64_t v41;
  void *v42;
  void *v43;
  void **v44;
  void **v45;
  void **v46;

  v5 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = (char *)a2 - (char *)__src;
  v10 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v10 = (char *)a2 - (char *)__src;
  v11 = v10 >> 3;
  v12 = a3 - (_QWORD)a2;
  v13 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v13 = a3 - (_QWORD)a2;
  v14 = v13 >> 3;
  v46 = __src;
  v45 = __dst;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      if (__dst != a2 || &a2[v14] <= __dst)
        memmove(__dst, a2, 8 * v14);
      v25 = &v5[v14];
      v44 = v25;
      v46 = v7;
      if (v8 < v7 && v12 >= 8)
      {
        v26 = (void **)(a3 - 8);
        v27 = v7;
        v38 = v5;
        v39 = v8;
        while (1)
        {
          v28 = (unint64_t)v25;
          v29 = v25 - 1;
          v43 = *(v25 - 1);
          v30 = *--v27;
          v42 = v30;
          v31 = v43;
          v32 = v30;
          v33 = sub_100104C84(&v43, &v42, a5);
          if (v41)
            break;
          v34 = v33;
          v41 = 0;
          v35 = v26 + 1;

          if ((v34 & 1) != 0)
          {
            if (v35 != v7 || v26 >= v7)
              *v26 = *v27;
            v46 = v27;
            v36 = v38;
            v25 = (void **)v28;
            if (v27 <= v39)
              goto LABEL_48;
          }
          else
          {
            v44 = v29;
            if ((unint64_t)v35 < v28 || (unint64_t)v26 >= v28 || v35 != (void **)v28)
              *v26 = *v29;
            v27 = v7;
            v25 = v29;
            v36 = v38;
            if (v7 <= v39)
              goto LABEL_48;
          }
          --v26;
          v7 = v27;
          if (v25 <= v36)
            goto LABEL_48;
        }

      }
      goto LABEL_48;
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != __src || &__src[v11] <= __dst)
      memmove(__dst, __src, 8 * v11);
    v15 = &v5[v11];
    v44 = v15;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      while (1)
      {
        v16 = v8;
        v43 = *v7;
        v17 = v5;
        v42 = *v5;
        v18 = v42;
        v19 = v43;
        v20 = v18;
        v21 = sub_100104C84(&v43, &v42, a5);
        if (v41)
          break;
        v22 = v21;

        if ((v22 & 1) != 0)
        {
          v23 = v7 + 1;
          v24 = v16;
          if (v16 < v7 || v16 >= v23 || v16 != v7)
            *v16 = *v7;
          v5 = v17;
        }
        else
        {
          v24 = v16;
          if (v16 != v17)
            *v16 = *v17;
          v5 = v17 + 1;
          v45 = v17 + 1;
          v23 = v7;
        }
        v41 = 0;
        v8 = v24 + 1;
        v46 = v8;
        if (v5 < v15)
        {
          v7 = v23;
          if ((unint64_t)v23 < a3)
            continue;
        }
        goto LABEL_48;
      }

    }
LABEL_48:
    sub_1001D4FA4(&v46, &v45, &v44);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_10010829C(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  __n128 v31;
  void *v32;
  uint64_t v33;
  NSString v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  Class isa;
  id v41;
  id v42;
  id v43;
  NSString v44;
  uint64_t v45;
  Class v46;
  uint64_t v47;
  id v48;
  Class v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  __int128 v67;
  void *v68;
  id v69;
  uint64_t v70;
  void *v71;
  void *v72;

  v69 = a4;
  v70 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v61 - v15;
  v17 = objc_msgSend(a1, "identifier");
  if (v17)
  {
    v18 = v17;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v14, v19, 1, v7);
  sub_1000A5CA8((uint64_t)v14, (uint64_t)v16, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7))
  {
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
    sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v16, v7);
  v20 = sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
  v63 = UUID.uuidString.getter(v20);
  v68 = v21;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v22 = objc_msgSend((id)objc_opt_self(REMReminder), "cdEntityName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v24 = v23;

  v25 = objc_allocWithZone((Class)NSFetchRequest);
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v25, "initWithEntityName:", v26, swift_bridgeObjectRelease(v24).n128_f64[0]);

  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  v28 = sub_10001A630((uint64_t *)&unk_10083A270);
  v29 = swift_allocObject(v28, 112, 7);
  v67 = xmmword_1006A3C40;
  *(_OWORD *)(v29 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v29 + 56) = &type metadata for String;
  *(_QWORD *)(v29 + 64) = sub_1000184F8();
  *(_QWORD *)(v29 + 32) = 0x746E756F636361;
  *(_QWORD *)(v29 + 40) = 0xE700000000000000;
  *(_QWORD *)(v29 + 96) = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  *(_QWORD *)(v29 + 104) = sub_1000E51DC(&qword_10083AEE0, &qword_10083AA30, off_1007D6658, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v29 + 72) = a1;
  v30 = a1;
  v32 = (void *)NSPredicate.init(format:_:)(0x4025203D3D204B25, 0xE800000000000000, v29, v31);
  objc_msgSend(v27, "setPredicate:", v32);

  swift_bridgeObjectRetain(a3);
  v33 = v70;
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v35 = (void *)objc_opt_self(NSExpression);
  v36 = objc_msgSend(v35, "expressionForKeyPath:", v34);

  v37 = sub_10001A630((uint64_t *)&unk_100839E80);
  v38 = swift_allocObject(v37, 64, 7);
  *(_OWORD *)(v38 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v38 + 56) = sub_1000151B0(0, &qword_10083AEE8, NSExpression_ptr);
  *(_QWORD *)(v38 + 32) = v36;
  v65 = v36;
  v39 = String._bridgeToObjectiveC()();
  v66 = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v41 = objc_msgSend(v35, "expressionForFunction:arguments:", v39, isa, swift_bridgeObjectRelease(v38).n128_f64[0]);

  v42 = objc_msgSend(objc_allocWithZone((Class)NSExpressionDescription), "init");
  v64 = v41;
  objc_msgSend(v42, "setExpression:", v41);
  v43 = v42;
  v44 = String._bridgeToObjectiveC()();
  objc_msgSend(v43, "setName:", v44);

  objc_msgSend(v43, "setExpressionResultType:", 300);
  objc_msgSend(v27, "setReturnsObjectsAsFaults:", 0);
  v45 = swift_allocObject(v37, 96, 7);
  *(_OWORD *)(v45 + 16) = v67;
  *(_QWORD *)(v45 + 32) = v33;
  *(_QWORD *)(v45 + 40) = a3;
  *(_QWORD *)(v45 + 88) = &type metadata for String;
  *(_QWORD *)(v45 + 56) = &type metadata for String;
  *(_QWORD *)(v45 + 64) = 0x6564692E7473696CLL;
  *(_QWORD *)(v45 + 72) = 0xEF7265696669746ELL;
  swift_bridgeObjectRetain(a3);
  v46 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setPropertiesToGroupBy:", v46, swift_bridgeObjectRelease(v45).n128_f64[0]);

  v47 = swift_allocObject(v37, 128, 7);
  *(_OWORD *)(v47 + 16) = xmmword_1006A3C20;
  *(_QWORD *)(v47 + 32) = v33;
  *(_QWORD *)(v47 + 40) = a3;
  *(_QWORD *)(v47 + 88) = &type metadata for String;
  *(_QWORD *)(v47 + 56) = &type metadata for String;
  *(_QWORD *)(v47 + 64) = 0x6564692E7473696CLL;
  *(_QWORD *)(v47 + 72) = 0xEF7265696669746ELL;
  *(_QWORD *)(v47 + 120) = sub_1000151B0(0, (unint64_t *)&unk_10083AEF0, NSExpressionDescription_ptr);
  *(_QWORD *)(v47 + 96) = v43;
  swift_bridgeObjectRetain(a3);
  v48 = v43;
  v49 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setPropertiesToFetch:", v49, swift_bridgeObjectRelease(v47).n128_f64[0]);

  objc_msgSend(v27, "setResultType:", 2);
  v72 = &_swiftEmptyDictionarySingleton;
  v50 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v51 = v66;
  v52 = NSManagedObjectContext.fetch<A>(_:)(v27, v50);
  if (v51)
  {
    swift_bridgeObjectRelease(v68);

    return;
  }
  v53 = v52;
  v69 = v48;
  v54 = v63;
  v55 = v68;
  v62 = v27;
  if (!((unint64_t)v52 >> 62))
  {
    v56 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v52);
    if (v56)
      goto LABEL_10;
LABEL_20:

    swift_bridgeObjectRelease_n(v53, 2);
    swift_bridgeObjectRelease(v55);

    return;
  }
  if (v52 < 0)
    v60 = v52;
  else
    v60 = v52 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v52);
  v56 = _CocoaArrayWrapper.endIndex.getter(v60);
  if (!v56)
    goto LABEL_20;
LABEL_10:
  if (v56 >= 1)
  {
    v57 = 0;
    do
    {
      if ((v53 & 0xC000000000000001) != 0)
        v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v57, v53);
      else
        v58 = *(id *)(v53 + 8 * v57 + 32);
      v59 = v58;
      ++v57;
      v71 = v58;
      sub_100105808(&v71, v70, a3, 0x6564692E7473696CLL, 0xEF7265696669746ELL, v54, v55, &v72);

    }
    while (v56 != v57);
    goto LABEL_20;
  }
  __break(1u);
}

unint64_t sub_100108A44(void *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t KeyPath;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Class isa;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  void *object;
  Swift::String v62;
  __int128 v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  unint64_t v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  id v90;
  void *ObjCClassFromMetadata;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  id v124;
  id v125;
  uint64_t v126;
  Swift::String v127;
  Swift::String v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  void *v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  Swift::String v140;
  void *v141;
  Swift::String v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unint64_t result;
  uint64_t v149;
  Swift::String v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  void *v155;
  id v156;
  uint64_t v157;
  unsigned int (*v158)(char *, uint64_t, uint64_t);
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  __int128 v164;
  _QWORD *v165;
  char v166[48];
  char v167[48];
  uint64_t v168;
  __int128 v169;
  void *v170;
  char v171[8];
  _QWORD *v172;

  v157 = a2;
  v165 = (_QWORD *)_s10PredicatesOMa(0);
  __chkstk_darwin(v165);
  v4 = (uint64_t *)((char *)&v152 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  *(_QWORD *)&v164 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v160 = (char *)&v152 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v152 - v11;
  v13 = sub_10001A630((uint64_t *)&unk_100839C80);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v152 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v152 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v152 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v152 - v23;
  v156 = a1;
  v25 = objc_msgSend(a1, "identifier");
  if (v25)
  {
    v26 = v25;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

    v27 = *(void **)(v6 + 56);
    v28 = v22;
    v29 = 0;
  }
  else
  {
    v27 = *(void **)(v6 + 56);
    v28 = v22;
    v29 = 1;
  }
  v163 = v27;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v27)(v28, v29, 1, v5);
  sub_1000A5CA8((uint64_t)v22, (uint64_t)v24, (uint64_t *)&unk_100839C80);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v30(v24, 1, v5))
  {
    sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
    return sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  }
  v158 = v30;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v24, v5);
  v31 = sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
  v32 = UUID.uuidString.getter(v31);
  v34 = v33;
  v162 = v6;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  v35 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  v36 = (uint64_t)objc_msgSend(v35, "extraneousAlarmsDeleteCountThreshold");

  if (v36 < 0)
  {
    __break(1u);
LABEL_48:
    sub_1001C1C48(v37 > 1, v34, 1);
    v45 = v172;
    goto LABEL_12;
  }
  v153 = v32;
  v155 = (void *)v34;
  *v4 = v36;
  swift_storeEnumTagMultiPayload(v4, v165, 31);
  sub_10000D2C0();
  v39 = v38;
  sub_10001C744((uint64_t)v4, _s10PredicatesOMa);
  v4 = (_QWORD *)sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v40 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v41 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "entity");
  objc_msgSend(v40, "setEntity:", v41);

  objc_msgSend(v40, "setAffectedStores:", 0);
  objc_msgSend(v40, "setPredicate:", v39);

  v154 = v40;
  objc_msgSend(v40, "setFetchLimit:", 10000);
  v42 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v42, v171);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006A8DD0);
  *(_QWORD *)(inited + 32) = KeyPath;
  *(_QWORD *)&v169 = inited;
  specialized Array._endMutation()(KeyPath);
  v32 = v169;
  v172 = _swiftEmptyArrayStorage;
  sub_1001C1C48(0, 1, 0);
  v45 = v172;
  v161 = v36;
  if ((v32 & 0xC000000000000001) != 0)
  {
    v46 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v32);
    v47 = v46;
  }
  else
  {
    v47 = *(_QWORD *)(v32 + 32);
    v46 = swift_retain();
  }
  v48 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v46);
  if (!v49)
    goto LABEL_54;
  v50 = v48;
  v51 = v49;
  v170 = &type metadata for String;
  swift_release(v47);
  *(_QWORD *)&v169 = v50;
  *((_QWORD *)&v169 + 1) = v51;
  v36 = v45[2];
  v37 = v45[3];
  v34 = v36 + 1;
  if (v36 >= v37 >> 1)
    goto LABEL_48;
LABEL_12:
  v45[2] = v34;
  sub_10001A6CC(&v169, &v45[4 * v36 + 4]);
  swift_bridgeObjectRelease(v32);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v45);
  v53 = v154;
  objc_msgSend(v154, "setPropertiesToFetch:", isa);

  v54 = v159;
  v55 = NSManagedObjectContext.fetch<A>(_:)(v53, v4);
  if (v54)
  {
    swift_bridgeObjectRelease(v155);

    return (unint64_t)v4;
  }
  v56 = v55;
  v159 = 0;
  *(_QWORD *)&v169 = 0;
  *((_QWORD *)&v169 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v57._countAndFlagsBits = 0x5B746E756F636361;
  v57._object = (void *)0xE800000000000000;
  String.append(_:)(v57);
  v58._countAndFlagsBits = v153;
  v58._object = v155;
  String.append(_:)(v58);
  v59._countAndFlagsBits = 0xD00000000000002ELL;
  v59._object = (void *)0x80000001006F8C40;
  String.append(_:)(v59);
  v172 = (_QWORD *)v161;
  v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  object = v60._object;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(object);
  v62._countAndFlagsBits = 0x746E756F632E29;
  v62._object = (void *)0xE700000000000000;
  String.append(_:)(v62);
  v63 = v169;
  v64 = (unint64_t)v56 >> 62;
  v161 = v56;
  if ((unint64_t)v56 >> 62)
  {
    if (v56 < 0)
      v149 = v56;
    else
      v149 = v56 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v56);
    v65 = _CocoaArrayWrapper.endIndex.getter(v149);
    swift_bridgeObjectRelease(v56);
  }
  else
  {
    v65 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v169 = v65;
  v66 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v68 = v67;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  *(_QWORD *)&v169 = &_swiftEmptyDictionarySingleton;
  sub_10028B8BC(v66, v68, v63, *((uint64_t *)&v63 + 1), isUniquelyReferenced_nonNull_native);
  v152 = v169;
  swift_bridgeObjectRelease(*((_QWORD *)&v63 + 1));
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v64)
  {
    v47 = v161;
    if (v161 < 0)
      v71 = v161;
    else
      v71 = v161 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v161);
    v70 = _CocoaArrayWrapper.endIndex.getter(v71);
  }
  else
  {
    v47 = v161;
    v70 = *(_QWORD *)((v161 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v161);
  }
  v72 = v158;
  if (!v70)
  {
    v165 = _swiftEmptyArrayStorage;
LABEL_41:
    swift_bridgeObjectRelease_n(v47, 2);
    v87 = v165;
    sub_10020B48C((uint64_t)v165, 0);
    v4 = v88;
    v89 = sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
    v90 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v89);
    v92 = objc_msgSend(ObjCClassFromMetadata, "entity");
    objc_msgSend(v90, "setEntity:", v92);

    objc_msgSend(v90, "setAffectedStores:", 0);
    objc_msgSend(v90, "setPredicate:", v4);
    objc_msgSend(v90, "setAffectedStores:", 0);
    v93 = v159;
    v94 = NSManagedObjectContext.count<A>(for:)(v90, v89);
    if (v93)
    {
      swift_bridgeObjectRelease(v155);

      swift_bridgeObjectRelease(v87);
      swift_bridgeObjectRelease(v152);

    }
    else
    {
      v95 = v94;
      v163 = ObjCClassFromMetadata;
      v162 = v89;

      *(_QWORD *)&v169 = 0;
      *((_QWORD *)&v169 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      v96._countAndFlagsBits = 0x5B746E756F636361;
      v96._object = (void *)0xE800000000000000;
      String.append(_:)(v96);
      v97._countAndFlagsBits = v153;
      v97._object = v155;
      String.append(_:)(v97);
      v98._countAndFlagsBits = 0xD000000000000037;
      v98._object = (void *)0x80000001006F8C70;
      String.append(_:)(v98);
      v100 = *((_QWORD *)&v169 + 1);
      v99 = v169;
      *(_QWORD *)&v169 = v95;
      v101 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v103 = v102;
      v104 = v152;
      v105 = swift_isUniquelyReferenced_nonNull_native(v152);
      *(_QWORD *)&v169 = v104;
      sub_10028B8BC(v101, v103, v99, v100, v105);
      v106 = v169;
      swift_bridgeObjectRelease(v100);
      swift_bridgeObjectRelease(0x8000000000000000);
      v107 = sub_10001A630((uint64_t *)&unk_10083AED0);
      v108 = swift_initStackObject(v107, v167);
      v164 = xmmword_1006A3C40;
      *(_OWORD *)(v108 + 16) = xmmword_1006A3C40;
      *(_QWORD *)(v108 + 32) = sub_1000153F4(1);
      v109 = swift_getKeyPath(&unk_1006A8DF8);
      v110 = v156;
      v111 = v156;
      v112 = sub_1002E8748(v109, v110);
      swift_release(v109);

      *(_QWORD *)(v108 + 40) = v112;
      *(_QWORD *)&v169 = v108;
      specialized Array._endMutation()(v113);
      v114 = v169;
      v115 = sub_10001A630((uint64_t *)&unk_100840BF0);
      v116 = swift_initStackObject(v115, v166);
      *(_OWORD *)(v116 + 16) = v164;
      *(_QWORD *)(v116 + 32) = sub_1000153F4(1);
      v117 = swift_getKeyPath(&unk_1006A8E20);
      v118 = v111;
      v119 = sub_1002E875C(v117, v110);
      swift_release(v117);

      *(_QWORD *)(v116 + 40) = v119;
      *(_QWORD *)&v169 = v116;
      specialized Array._endMutation()(v120);
      v121 = v169;
      v122 = (void *)sub_10000D2BC(v114);
      v123 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
      v124 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
      v125 = objc_msgSend((id)swift_getObjCClassFromMetadata(v123), "entity");
      objc_msgSend(v124, "setEntity:", v125);

      objc_msgSend(v124, "setAffectedStores:", 0);
      objc_msgSend(v124, "setPredicate:", v122);
      objc_msgSend(v124, "setAffectedStores:", 0);
      v126 = NSManagedObjectContext.count<A>(for:)(v124, v123);

      *(_QWORD *)&v169 = 0;
      *((_QWORD *)&v169 + 1) = 0xE000000000000000;
      v159 = 0;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(*((_QWORD *)&v169 + 1));
      *(_QWORD *)&v169 = 0x5B746E756F636361;
      *((_QWORD *)&v169 + 1) = 0xE800000000000000;
      v127._countAndFlagsBits = v153;
      v127._object = v155;
      String.append(_:)(v127);
      v128._object = (void *)0x80000001006F8CB0;
      v128._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v128);
      v129 = v169;
      *(_QWORD *)&v169 = v126;
      v130 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v132 = v131;
      v133 = swift_isUniquelyReferenced_nonNull_native(v106);
      *(_QWORD *)&v169 = v106;
      sub_10028B8BC(v130, v132, v129, *((uint64_t *)&v129 + 1), v133);
      v4 = (_QWORD *)v169;
      swift_bridgeObjectRelease(*((_QWORD *)&v129 + 1));
      swift_bridgeObjectRelease(0x8000000000000000);
      v134 = (void *)sub_10000D2BC(v121);
      v135 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
      v136 = objc_msgSend(v163, "entity");
      objc_msgSend(v135, "setEntity:", v136);

      objc_msgSend(v135, "setAffectedStores:", 0);
      objc_msgSend(v135, "setPredicate:", v134);
      objc_msgSend(v135, "setAffectedStores:", 0);
      v137 = v159;
      v138 = NSManagedObjectContext.count<A>(for:)(v135, v162);
      if (v137)
      {
        swift_bridgeObjectRelease(v155);

        swift_bridgeObjectRelease(v165);
        swift_bridgeObjectRelease(v4);

      }
      else
      {
        v139 = v138;

        *(_QWORD *)&v169 = 0;
        *((_QWORD *)&v169 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        swift_bridgeObjectRelease(*((_QWORD *)&v169 + 1));
        *(_QWORD *)&v169 = 0x5B746E756F636361;
        *((_QWORD *)&v169 + 1) = 0xE800000000000000;
        v140._countAndFlagsBits = v153;
        v141 = v155;
        v140._object = v155;
        String.append(_:)(v140);
        swift_bridgeObjectRelease(v141);
        v142._countAndFlagsBits = 0xD000000000000023;
        v142._object = (void *)0x80000001006F8CD0;
        String.append(_:)(v142);
        v143 = v169;
        *(_QWORD *)&v169 = v139;
        v144 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v146 = v145;
        v147 = swift_isUniquelyReferenced_nonNull_native(v4);
        *(_QWORD *)&v169 = v4;
        sub_10028B8BC(v144, v146, v143, *((uint64_t *)&v143 + 1), v147);
        v4 = (_QWORD *)v169;

        swift_bridgeObjectRelease(v165);
        swift_bridgeObjectRelease(*((_QWORD *)&v143 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
      }
    }
    return (unint64_t)v4;
  }
  if (v70 >= 1)
  {
    v73 = 0;
    v74 = v47 & 0xC000000000000001;
    v165 = _swiftEmptyArrayStorage;
    do
    {
      if (v74)
        v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v73, v47);
      else
        v75 = *(id *)(v47 + 8 * v73 + 32);
      v76 = v75;
      v77 = objc_msgSend(v75, "identifier");
      if (v77)
      {
        v78 = v77;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v77);

        v79 = v16;
        v80 = 0;
      }
      else
      {
        v79 = v16;
        v80 = 1;
      }
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v163)(v79, v80, 1, v5);
      sub_1000A5CA8((uint64_t)v16, (uint64_t)v19, (uint64_t *)&unk_100839C80);

      if (v72(v19, 1, v5) == 1)
      {
        sub_10000882C((uint64_t)v19, (uint64_t *)&unk_100839C80);
      }
      else
      {
        v81 = *(void (**)(char *, char *, uint64_t))(v162 + 32);
        v82 = v160;
        v81(v160, v19, v5);
        v81((char *)v164, v82, v5);
        if ((swift_isUniquelyReferenced_nonNull_native(v165) & 1) != 0)
          v83 = v165;
        else
          v83 = (_QWORD *)sub_1002C8EC4(0, v165[2] + 1, 1, (unint64_t)v165);
        v85 = v83[2];
        v84 = v83[3];
        if (v85 >= v84 >> 1)
          v83 = (_QWORD *)sub_1002C8EC4(v84 > 1, v85 + 1, 1, (unint64_t)v83);
        v83[2] = v85 + 1;
        v86 = (*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
        v165 = v83;
        v81((char *)v83 + v86 + *(_QWORD *)(v162 + 72) * v85, (char *)v164, v5);
        v72 = v158;
      }
      v47 = v161;
      ++v73;
    }
    while (v70 != v73);
    goto LABEL_41;
  }
  __break(1u);
LABEL_54:
  *(_QWORD *)&v169 = 0;
  *((_QWORD *)&v169 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v150._countAndFlagsBits = 0xD00000000000002CLL;
  v150._object = (void *)0x80000001006F8C10;
  String.append(_:)(v150);
  v168 = v47;
  v151 = sub_10001A630((uint64_t *)&unk_10083AEC0);
  _print_unlocked<A, B>(_:_:)(&v168, &v169, v151, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v169, *((_QWORD *)&v169 + 1), "remindd/TypedPredicate.swift", 28, 2, 19, 0);
  __break(1u);
  return result;
}

double sub_100109B10(_QWORD *a1, id *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  double result;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  void *v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  id v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  Swift::OpaquePointer v82;
  Swift::OpaquePointer v83;
  void *rawValue;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v98 = a3;
  v101 = a1;
  v4 = _s10PredicatesOMa(0);
  v5 = __chkstk_darwin(v4);
  v92 = (_QWORD **)((char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v5);
  v93 = (_QWORD **)((char *)&v92 - v8);
  v9 = __chkstk_darwin(v7);
  v94 = (_QWORD **)((char *)&v92 - v10);
  __chkstk_darwin(v9);
  v12 = (_QWORD **)((char *)&v92 - v11);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  v18 = objc_msgSend(*a2, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  v20 = UUID.uuidString.getter(v19);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v102 = 0;
  v103 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v23._countAndFlagsBits = 0x5B746E756F636361;
  v23._object = (void *)0xE800000000000000;
  String.append(_:)(v23);
  v97 = v20;
  v24._countAndFlagsBits = v20;
  v100 = v22;
  v24._object = v22;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD00000000000002FLL;
  v25._object = (void *)0x80000001006F8B30;
  String.append(_:)(v25);
  v27 = v102;
  v26 = v103;
  v28 = sub_10001A630(&qword_10083AEB0);
  v29 = (char *)v12 + *(int *)(v28 + 48);
  v30 = *(int *)(v28 + 64);
  *v12 = v17;
  v95 = _s10PredicatesO19CompletionPredicateOMa(0);
  swift_storeEnumTagMultiPayload(v29, v95, 3);
  *((_BYTE *)v12 + v30) = 0;
  v96 = v4;
  v31 = v4;
  v32 = v98;
  swift_storeEnumTagMultiPayload(v12, v31, 38);
  v33 = v17;
  sub_10000D2C0();
  v35 = v34;
  sub_10001C744((uint64_t)v12, _s10PredicatesOMa);
  v36 = v99;
  sub_1000F5FAC(v27, v26, (uint64_t)v35, (uint64_t)v32, v101);
  if (v36)
  {
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v26);

  }
  else
  {
    swift_bridgeObjectRelease(v26);

    v102 = 0;
    v103 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v38._countAndFlagsBits = 0x5B746E756F636361;
    v38._object = (void *)0xE800000000000000;
    String.append(_:)(v38);
    v39._countAndFlagsBits = v97;
    v40 = v100;
    v39._object = v100;
    String.append(_:)(v39);
    v41._countAndFlagsBits = 0xD00000000000002CLL;
    v41._object = (void *)0x80000001006F8B60;
    String.append(_:)(v41);
    v43 = v102;
    v42 = v103;
    v45 = (uint64_t)v94;
    v44 = v95;
    v46 = (char *)v94 + *(int *)(v28 + 48);
    v47 = *(int *)(v28 + 64);
    *v94 = v33;
    swift_storeEnumTagMultiPayload(v46, v44, 3);
    *(_BYTE *)(v45 + v47) = 1;
    swift_storeEnumTagMultiPayload(v45, v96, 38);
    v48 = v33;
    sub_10000D2C0();
    v50 = v49;
    sub_10001C744(v45, _s10PredicatesOMa);
    sub_1000F5FAC(v43, v42, (uint64_t)v50, (uint64_t)v32, v101);
    swift_bridgeObjectRelease(v42);

    v51 = v48;
    v52 = v40;
    v102 = 0;
    v103 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v53._countAndFlagsBits = 0x5B746E756F636361;
    v53._object = (void *)0xE800000000000000;
    String.append(_:)(v53);
    v54._countAndFlagsBits = v97;
    v54._object = v40;
    String.append(_:)(v54);
    v55._countAndFlagsBits = 0xD00000000000002ELL;
    v55._object = (void *)0x80000001006F8B90;
    String.append(_:)(v55);
    v56 = v28;
    v58 = v102;
    v57 = v103;
    v59 = (uint64_t)v93;
    v60 = (char *)v93 + *(int *)(v56 + 48);
    v61 = v56;
    v62 = *(int *)(v56 + 64);
    *v93 = v51;
    swift_storeEnumTagMultiPayload(v60, v95, 4);
    *(_BYTE *)(v59 + v62) = 0;
    swift_storeEnumTagMultiPayload(v59, v96, 38);
    v63 = v51;
    sub_10000D2C0();
    v65 = v64;
    sub_10001C744(v59, _s10PredicatesOMa);
    sub_1000F5FAC(v58, v57, (uint64_t)v65, (uint64_t)v32, v101);
    swift_bridgeObjectRelease(v57);

    v102 = 0;
    v103 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v66._countAndFlagsBits = 0x5B746E756F636361;
    v66._object = (void *)0xE800000000000000;
    String.append(_:)(v66);
    v67._countAndFlagsBits = v97;
    v67._object = v52;
    String.append(_:)(v67);
    v68._countAndFlagsBits = 0xD00000000000002BLL;
    v68._object = (void *)0x80000001006F8BC0;
    String.append(_:)(v68);
    v70 = v102;
    v69 = v103;
    v71 = (uint64_t)v92;
    v72 = (char *)v92 + *(int *)(v61 + 48);
    v73 = *(int *)(v61 + 64);
    *v92 = v63;
    swift_storeEnumTagMultiPayload(v72, v95, 4);
    *(_BYTE *)(v71 + v73) = 1;
    swift_storeEnumTagMultiPayload(v71, v96, 38);
    v74 = v63;
    sub_10000D2C0();
    v76 = v75;
    sub_10001C744(v71, _s10PredicatesOMa);
    sub_1000F5FAC(v70, v69, (uint64_t)v76, (uint64_t)v32, v101);
    v77 = v97;
    swift_bridgeObjectRelease(v69);

    v78 = sub_1005CCB88(v74);
    sub_1004BB10C(v78, 0);
    v80 = v79;

    if (v80)
    {
      swift_bridgeObjectRelease(v52);
      sub_10010829C(v80, 0xD000000000000011, (void *)0x80000001006A8CA0, v32);
      v82._rawValue = v81;
      sub_10001A630(&qword_10083AEB8);
      Dictionary.merge(takingValuesIn:)(v82);
      swift_bridgeObjectRelease(v82._rawValue);
      sub_10010829C(v80, 0x6574656C706D6F63, (void *)0xE900000000000064, v32);
      rawValue = v83._rawValue;
      Dictionary.merge(takingValuesIn:)(v83);
      swift_bridgeObjectRelease(rawValue);
      v91 = sub_100108A44(v80, (uint64_t)v32);
      Dictionary.merge(takingValuesIn:)((Swift::OpaquePointer)v91);

      *(_QWORD *)&result = swift_bridgeObjectRelease(v91).n128_u64[0];
    }
    else
    {
      if (qword_100836D08 != -1)
        swift_once(&qword_100836D08, sub_1000F53D4);
      v85 = type metadata accessor for Logger(0);
      sub_10001AAA8(v85, (uint64_t)qword_10083AC30);
      swift_bridgeObjectRetain(v52);
      v87 = Logger.logObject.getter(v86);
      v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc(12, -1);
        v90 = swift_slowAlloc(32, -1);
        v102 = v90;
        *(_DWORD *)v89 = 136315138;
        swift_bridgeObjectRetain(v52);
        v104 = sub_10001A820(v77, (unint64_t)v52, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
        swift_bridgeObjectRelease_n(v52, 3);
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Cannot get cdAccount from %s for extra container stats", v89, 0xCu);
        swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1, -1);
        swift_slowDealloc(v89, -1, -1);

      }
      else
      {

        *(_QWORD *)&result = swift_bridgeObjectRelease_n(v52, 2).n128_u64[0];
      }
    }
  }
  return result;
}

void *sub_10010A36C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v15;
  void *v16;

  v4 = v3;
  v7 = a1;
  v16 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    for (i = 4; ; ++i)
    {
      v10 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      v7 = v10;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v15 = v10;
      sub_100109B10(&v16, &v15, a3);
      if (v4)
      {
        v12 = v16;
        swift_bridgeObjectRelease(a2);

        swift_bridgeObjectRelease(v12);
        return v7;
      }

      if (v11 == v8)
      {
        swift_bridgeObjectRelease(a2);
        return v16;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v13 = a2;
    else
      v13 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v7;
}

void sub_10010A49C(int a1, int64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  __int128 v36;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  id v51;
  id v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  Swift::String v61;
  void *object;
  __int128 v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t Strong;
  void (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t ObjectType;
  uint64_t (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  void *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  uint64_t v120;
  _BOOL8 v121;
  uint64_t v122;
  char v123;
  unint64_t v124;
  char v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  void *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  Swift::String v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  unint64_t v154;
  uint64_t v155;
  _BOOL8 v156;
  uint64_t v157;
  char v158;
  unint64_t v159;
  char v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  int64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  int64_t v174;
  unint64_t v175;
  int64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  void *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  Swift::String v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  unint64_t v189;
  uint64_t v190;
  _BOOL8 v191;
  uint64_t v192;
  char v193;
  unint64_t v194;
  char v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  char *v206;
  _QWORD *v207;
  _QWORD *v208;
  id v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  char v215;
  _QWORD *v216;
  uint64_t v217;
  double v218;
  char *v219;
  id v220;
  uint64_t v221;
  int64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  int64_t v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  void *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  Swift::String v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  unint64_t v244;
  uint64_t v245;
  _BOOL8 v246;
  uint64_t v247;
  char v248;
  unint64_t v249;
  char v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  id v254;
  uint64_t v255;
  int64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  int64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  void *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  Swift::String v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  unint64_t v278;
  uint64_t v279;
  _BOOL8 v280;
  uint64_t v281;
  char v282;
  unint64_t v283;
  char v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _BYTE *v289;
  id v290;
  void *v291;
  NSObject *v292;
  __n128 v293;
  void *v294;
  _QWORD *v295;
  void *v296;
  _QWORD *v297;
  NSObject *v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  char *v309;
  void (*v310)(char *, uint64_t);
  uint64_t v311;
  int64_t *v312;
  char v313;
  int64_t v314;
  uint64_t v315;
  uint64_t v316;
  Class isa;
  uint64_t v318;
  int64_t v319;
  Swift::String v320;
  void *v321;
  Swift::String v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  id v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  char v334;
  uint64_t v335;
  __n128 v336;
  uint64_t v337;
  id v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t *v343;
  unint64_t v344;
  unint64_t v345;
  int64_t v346;
  unint64_t v347;
  int64_t v348;
  char *v349;
  uint64_t *v350;
  uint64_t v351;
  void *v352;
  void *v353;
  id v354;
  Swift::String v355;
  void *v356;
  Swift::String v357;
  Swift::String v358;
  double v359;
  uint64_t v360;
  uint64_t v361;
  id v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  char v369;
  unint64_t v370;
  uint64_t v371;
  _BOOL8 v372;
  uint64_t v373;
  char v374;
  unint64_t v375;
  char v376;
  _QWORD *v377;
  uint64_t *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  id v393;
  void (**v394)(_QWORD, _QWORD, _QWORD);
  id v395;
  uint64_t v396;
  void (*v397)(char *, uint64_t, uint64_t);
  char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  id v403;
  uint64_t v404;
  char *v405;
  _QWORD *v406;
  int64_t v407;
  int64_t v408;
  _QWORD *v409;
  _QWORD *v410;
  _QWORD *v411;
  __int128 aBlock;
  uint64_t (*v413)(uint64_t);
  void *v414;
  void (*v415)();
  _QWORD *v416;
  int64_t v417;
  uint64_t v418;
  unint64_t v419;
  _QWORD v420[6];

  v394 = a3;
  v407 = a2;
  LODWORD(v406) = a1;
  v392 = type metadata accessor for DispatchTime(0);
  v390 = *(_QWORD *)(v392 - 8);
  v3 = __chkstk_darwin(v392);
  v389 = (char *)&v382 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v391 = (char *)&v382 - v5;
  v388 = type metadata accessor for DispatchWorkItemFlags(0);
  v387 = *(_QWORD *)(v388 - 8);
  __chkstk_darwin(v388);
  v386 = (char *)&v382 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v385 = type metadata accessor for DispatchQoS(0);
  v384 = *(_QWORD *)(v385 - 8);
  __chkstk_darwin(v385);
  v383 = (char *)&v382 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v400 = type metadata accessor for UUID(0);
  v399 = *(_QWORD *)(v400 - 8);
  __chkstk_darwin(v400);
  v398 = (char *)&v382 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v404 = type metadata accessor for REMAccountSnapshotSummary(0);
  v401 = *(_QWORD *)(v404 - 8);
  __chkstk_darwin(v404);
  v405 = (char *)&v382 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630(&qword_10083AEA0);
  __chkstk_darwin(v10);
  v402 = (uint64_t)&v382 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v13 = swift_allocObject(&unk_1007E4D40, 24, 7);
  v14 = (_QWORD *)sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  v396 = v13;
  *(_QWORD *)(v13 + 16) = v14;
  v411 = (_QWORD *)(v13 + 16);
  v403 = v12;
  v15 = objc_msgSend(v12, "environment");
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String, &type metadata for String, &protocol witness table for String);

  v17 = 0;
  v18 = *(_QWORD *)(v16 + 64);
  v408 = v16 + 64;
  v19 = 1 << *(_BYTE *)(v16 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v409 = (_QWORD *)((unint64_t)(v19 + 63) >> 6);
  v410 = (_QWORD *)v16;
  while (1)
  {
    if (v21)
    {
      v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v24 = v23 | (v17 << 6);
      goto LABEL_22;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_273;
    if (v25 >= (uint64_t)v409)
      goto LABEL_33;
    v26 = *(_QWORD *)(v408 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= (uint64_t)v409)
        goto LABEL_33;
      v26 = *(_QWORD *)(v408 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= (uint64_t)v409)
          goto LABEL_33;
        v26 = *(_QWORD *)(v408 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_21:
    v21 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_22:
    v28 = 16 * v24;
    v29 = (uint64_t *)(v410[6] + v28);
    v30 = *v29;
    v31 = (void *)v29[1];
    v32 = (uint64_t *)(v410[7] + v28);
    v34 = *v32;
    v33 = v32[1];
    *(_QWORD *)&aBlock = 779513445;
    *((_QWORD *)&aBlock + 1) = 0xE400000000000000;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    v35._countAndFlagsBits = v30;
    v35._object = v31;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v31);
    v36 = aBlock;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    *(_QWORD *)&aBlock = *v411;
    v38 = aBlock;
    *v411 = 0x8000000000000000;
    v40 = sub_10001A6DC(v36, *((uint64_t *)&v36 + 1));
    v41 = *(_QWORD *)(v38 + 16);
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
      goto LABEL_264;
    v44 = v39;
    if (*(_QWORD *)(v38 + 24) >= v43)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v14 = (_QWORD *)aBlock;
        if ((v39 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_1002D6574();
        v14 = (_QWORD *)aBlock;
        if ((v44 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_1002CCF14(v43, isUniquelyReferenced_nonNull_native);
      v45 = sub_10001A6DC(v36, *((uint64_t *)&v36 + 1));
      if ((v44 & 1) != (v46 & 1))
        goto LABEL_293;
      v40 = v45;
      v14 = (_QWORD *)aBlock;
      if ((v44 & 1) != 0)
      {
LABEL_4:
        v22 = (_QWORD *)(v14[7] + 16 * v40);
        swift_bridgeObjectRelease(v22[1]);
        *v22 = v34;
        v22[1] = v33;
        goto LABEL_5;
      }
    }
    v14[(v40 >> 6) + 8] |= 1 << v40;
    *(_OWORD *)(v14[6] + 16 * v40) = v36;
    v47 = (_QWORD *)(v14[7] + 16 * v40);
    *v47 = v34;
    v47[1] = v33;
    v48 = v14[2];
    v49 = __OFADD__(v48, 1);
    v50 = v48 + 1;
    if (v49)
      goto LABEL_269;
    v14[2] = v50;
    swift_bridgeObjectRetain(*((_QWORD *)&v36 + 1));
LABEL_5:
    *v411 = v14;
    swift_bridgeObjectRelease(*((_QWORD *)&v36 + 1));
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v27 = v25 + 3;
  if (v27 >= (uint64_t)v409)
    goto LABEL_33;
  v26 = *(_QWORD *)(v408 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_21;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      goto LABEL_286;
    if (v17 >= (uint64_t)v409)
      break;
    v26 = *(_QWORD *)(v408 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_21;
  }
LABEL_33:
  swift_release(v410);
  v51 = v403;
  v52 = objc_msgSend(v403, "arguments");
  v53 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, &type metadata for String);

  v54 = objc_msgSend(v51, "arguments");
  v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v54, &type metadata for String);

  v56 = *(_QWORD *)(v55 + 16);
  swift_bridgeObjectRelease(v55);
  v410 = (_QWORD *)v53[2];
  if (!v410 || !v56)
  {
    v79 = v53;
    goto LABEL_53;
  }
  v408 = v56;
  v58 = v53[4];
  v57 = v53[5];
  swift_bridgeObjectRetain(v57);
  v409 = v53;
  v59 = v53 + 7;
  v60 = 1;
  while (2)
  {
    *(_QWORD *)&aBlock = 778531425;
    *((_QWORD *)&aBlock + 1) = 0xE400000000000000;
    v420[0] = v60 - 1;
    v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v61._object;
    String.append(_:)(v61);
    swift_bridgeObjectRelease(object);
    v63 = aBlock;
    v64 = v411;
    v65 = *v411;
    v66 = swift_isUniquelyReferenced_nonNull_native(*v411);
    *(_QWORD *)&aBlock = v65;
    *v64 = 0x8000000000000000;
    v68 = sub_10001A6DC(v63, *((uint64_t *)&v63 + 1));
    v69 = *(_QWORD *)(v65 + 16);
    v70 = (v67 & 1) == 0;
    v71 = v69 + v70;
    if (__OFADD__(v69, v70))
      goto LABEL_283;
    v72 = v67;
    if (*(_QWORD *)(v65 + 24) >= v71)
    {
      if ((v66 & 1) != 0)
      {
        v14 = (_QWORD *)aBlock;
        if ((v67 & 1) == 0)
          goto LABEL_40;
      }
      else
      {
        sub_1002D6574();
        v14 = (_QWORD *)aBlock;
        if ((v72 & 1) == 0)
          goto LABEL_40;
      }
      goto LABEL_44;
    }
    sub_1002CCF14(v71, v66);
    v73 = sub_10001A6DC(v63, *((uint64_t *)&v63 + 1));
    if ((v72 & 1) != (v74 & 1))
      goto LABEL_294;
    v68 = v73;
    v14 = (_QWORD *)aBlock;
    if ((v72 & 1) != 0)
    {
LABEL_44:
      v78 = (_QWORD *)(v14[7] + 16 * v68);
      swift_bridgeObjectRelease(v78[1]);
      *v78 = v58;
      v78[1] = v57;
      goto LABEL_45;
    }
LABEL_40:
    v14[(v68 >> 6) + 8] |= 1 << v68;
    *(_OWORD *)(v14[6] + 16 * v68) = v63;
    v75 = (_QWORD *)(v14[7] + 16 * v68);
    *v75 = v58;
    v75[1] = v57;
    v76 = v14[2];
    v49 = __OFADD__(v76, 1);
    v77 = v76 + 1;
    if (v49)
      goto LABEL_289;
    v14[2] = v77;
    swift_bridgeObjectRetain(*((_QWORD *)&v63 + 1));
LABEL_45:
    *v411 = v14;
    swift_bridgeObjectRelease(*((_QWORD *)&v63 + 1));
    swift_bridgeObjectRelease(0x8000000000000000);
    if (v410 != (_QWORD *)v60)
    {
      v79 = v409;
      if (v60 >= v409[2])
        goto LABEL_284;
      if (v408 == v60)
        goto LABEL_53;
      ++v60;
      v58 = *(v59 - 1);
      v57 = *v59;
      swift_bridgeObjectRetain(*v59);
      v59 += 2;
      continue;
    }
    break;
  }
  v79 = v409;
LABEL_53:
  *(_QWORD *)&v80 = swift_bridgeObjectRelease(v79).n128_u64[0];
  LODWORD(aBlock) = objc_msgSend(v403, "processIdentifier", v80);
  v81 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  v83 = v82;
  v84 = swift_isUniquelyReferenced_nonNull_native(v14);
  v85 = v411;
  *(_QWORD *)&aBlock = *v411;
  *v411 = 0x8000000000000000;
  sub_10028B8BC(v81, v83, 6580592, 0xE300000000000000, v84);
  v86 = (_QWORD *)aBlock;
  v87 = *v85;
  *v85 = aBlock;
  swift_bridgeObjectRelease(v87);
  v88 = v407 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
  Strong = swift_unknownObjectWeakLoadStrong(v407 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon, v89);
  if (!Strong)
    goto LABEL_87;
  v91 = (void (*)(char *, uint64_t, uint64_t))Strong;
  v92 = *(_QWORD *)(v88 + 8);
  ObjectType = swift_getObjectType(Strong);
  v94 = *(uint64_t (**)(uint64_t, uint64_t))(v92 + 48);
  v397 = v91;
  v95 = v94(ObjectType, v92);
  v96 = 0;
  v97 = *(_QWORD *)(v95 + 64);
  v408 = v95 + 64;
  v98 = 1 << *(_BYTE *)(v95 + 32);
  v99 = -1;
  if (v98 < 64)
    v99 = ~(-1 << v98);
  v100 = v99 & v97;
  v409 = (_QWORD *)((unint64_t)(v98 + 63) >> 6);
  v410 = (_QWORD *)v95;
  while (2)
  {
    if (v100)
    {
      v102 = __clz(__rbit64(v100));
      v100 &= v100 - 1;
      v103 = v102 | (v96 << 6);
      goto LABEL_75;
    }
    v104 = v96 + 1;
    if (__OFADD__(v96, 1))
      goto LABEL_280;
    if (v104 >= (uint64_t)v409)
      goto LABEL_86;
    v105 = *(_QWORD *)(v408 + 8 * v104);
    ++v96;
    if (v105)
      goto LABEL_74;
    v96 = v104 + 1;
    if (v104 + 1 >= (uint64_t)v409)
      goto LABEL_86;
    v105 = *(_QWORD *)(v408 + 8 * v96);
    if (v105)
      goto LABEL_74;
    v96 = v104 + 2;
    if (v104 + 2 >= (uint64_t)v409)
      goto LABEL_86;
    v105 = *(_QWORD *)(v408 + 8 * v96);
    if (v105)
    {
LABEL_74:
      v100 = (v105 - 1) & v105;
      v103 = __clz(__rbit64(v105)) + (v96 << 6);
LABEL_75:
      v107 = 16 * v103;
      v108 = (uint64_t *)(v410[6] + v107);
      v109 = *v108;
      v110 = (void *)v108[1];
      v111 = (uint64_t *)(v410[7] + v107);
      v113 = *v111;
      v112 = v111[1];
      *(_QWORD *)&aBlock = 0x6F6D656144637078;
      *((_QWORD *)&aBlock + 1) = 0xEA00000000002E6ELL;
      swift_bridgeObjectRetain(v110);
      swift_bridgeObjectRetain(v112);
      v114._countAndFlagsBits = v109;
      v114._object = v110;
      String.append(_:)(v114);
      swift_bridgeObjectRelease(v110);
      v115 = aBlock;
      v116 = swift_isUniquelyReferenced_nonNull_native(v86);
      *(_QWORD *)&aBlock = *v411;
      v117 = aBlock;
      *v411 = 0x8000000000000000;
      v119 = sub_10001A6DC(v115, *((uint64_t *)&v115 + 1));
      v120 = *(_QWORD *)(v117 + 16);
      v121 = (v118 & 1) == 0;
      v122 = v120 + v121;
      if (__OFADD__(v120, v121))
        goto LABEL_268;
      v123 = v118;
      if (*(_QWORD *)(v117 + 24) < v122)
      {
        sub_1002CCF14(v122, v116);
        v124 = sub_10001A6DC(v115, *((uint64_t *)&v115 + 1));
        if ((v123 & 1) != (v125 & 1))
          goto LABEL_293;
        v119 = v124;
        v86 = (_QWORD *)aBlock;
        if ((v123 & 1) == 0)
          goto LABEL_82;
LABEL_57:
        v101 = (_QWORD *)(v86[7] + 16 * v119);
        swift_bridgeObjectRelease(v101[1]);
        *v101 = v113;
        v101[1] = v112;
LABEL_58:
        *v411 = v86;
        swift_bridgeObjectRelease(*((_QWORD *)&v115 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        continue;
      }
      if ((v116 & 1) != 0)
      {
        v86 = (_QWORD *)aBlock;
        if ((v118 & 1) != 0)
          goto LABEL_57;
      }
      else
      {
        sub_1002D6574();
        v86 = (_QWORD *)aBlock;
        if ((v123 & 1) != 0)
          goto LABEL_57;
      }
LABEL_82:
      v86[(v119 >> 6) + 8] |= 1 << v119;
      *(_OWORD *)(v86[6] + 16 * v119) = v115;
      v126 = (_QWORD *)(v86[7] + 16 * v119);
      *v126 = v113;
      v126[1] = v112;
      v127 = v86[2];
      v49 = __OFADD__(v127, 1);
      v128 = v127 + 1;
      if (v49)
        goto LABEL_276;
      v86[2] = v128;
      swift_bridgeObjectRetain(*((_QWORD *)&v115 + 1));
      goto LABEL_58;
    }
    break;
  }
  v106 = v104 + 3;
  if (v106 >= (uint64_t)v409)
    goto LABEL_86;
  v105 = *(_QWORD *)(v408 + 8 * v106);
  if (v105)
  {
    v96 = v106;
    goto LABEL_74;
  }
  while (1)
  {
    v96 = v106 + 1;
    if (__OFADD__(v106, 1))
      goto LABEL_290;
    if (v96 >= (uint64_t)v409)
      break;
    v105 = *(_QWORD *)(v408 + 8 * v96);
    ++v106;
    if (v105)
      goto LABEL_74;
  }
LABEL_86:
  swift_unknownObjectRelease(v397);
  swift_release(v410);
LABEL_87:
  v393 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v129 = objc_msgSend(v393, "status");
  v130 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v129, &type metadata for String, &type metadata for String, &protocol witness table for String);

  v131 = 0;
  v132 = *(_QWORD *)(v130 + 64);
  v408 = v130 + 64;
  v133 = 1 << *(_BYTE *)(v130 + 32);
  v134 = -1;
  if (v133 < 64)
    v134 = ~(-1 << v133);
  v135 = v134 & v132;
  v409 = (_QWORD *)((unint64_t)(v133 + 63) >> 6);
  v410 = (_QWORD *)v130;
  while (2)
  {
    if (v135)
    {
      v137 = __clz(__rbit64(v135));
      v135 &= v135 - 1;
      v138 = v137 | (v131 << 6);
      goto LABEL_108;
    }
    v139 = v131 + 1;
    if (__OFADD__(v131, 1))
      goto LABEL_274;
    if (v139 >= (uint64_t)v409)
      goto LABEL_119;
    v140 = *(_QWORD *)(v408 + 8 * v139);
    ++v131;
    if (v140)
      goto LABEL_107;
    v131 = v139 + 1;
    if (v139 + 1 >= (uint64_t)v409)
      goto LABEL_119;
    v140 = *(_QWORD *)(v408 + 8 * v131);
    if (v140)
      goto LABEL_107;
    v131 = v139 + 2;
    if (v139 + 2 >= (uint64_t)v409)
      goto LABEL_119;
    v140 = *(_QWORD *)(v408 + 8 * v131);
    if (v140)
    {
LABEL_107:
      v135 = (v140 - 1) & v140;
      v138 = __clz(__rbit64(v140)) + (v131 << 6);
LABEL_108:
      v142 = 16 * v138;
      v143 = (uint64_t *)(v410[6] + v142);
      v144 = *v143;
      v145 = (void *)v143[1];
      v146 = (uint64_t *)(v410[7] + v142);
      v147 = *v146;
      v148 = v146[1];
      *(_QWORD *)&aBlock = 0;
      *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain(v145);
      swift_bridgeObjectRetain(v148);
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease(*((_QWORD *)&aBlock + 1));
      strcpy((char *)&aBlock, "AppleAccounts.");
      HIBYTE(aBlock) = -18;
      v149._countAndFlagsBits = v144;
      v149._object = v145;
      String.append(_:)(v149);
      swift_bridgeObjectRelease(v145);
      v150 = aBlock;
      v151 = swift_isUniquelyReferenced_nonNull_native(v86);
      *(_QWORD *)&aBlock = *v411;
      v152 = aBlock;
      *v411 = 0x8000000000000000;
      v154 = sub_10001A6DC(v150, *((uint64_t *)&v150 + 1));
      v155 = *(_QWORD *)(v152 + 16);
      v156 = (v153 & 1) == 0;
      v157 = v155 + v156;
      if (__OFADD__(v155, v156))
        goto LABEL_265;
      v158 = v153;
      if (*(_QWORD *)(v152 + 24) < v157)
      {
        sub_1002CCF14(v157, v151);
        v159 = sub_10001A6DC(v150, *((uint64_t *)&v150 + 1));
        if ((v158 & 1) != (v160 & 1))
          goto LABEL_293;
        v154 = v159;
        v86 = (_QWORD *)aBlock;
        if ((v158 & 1) == 0)
          goto LABEL_115;
LABEL_90:
        v136 = (_QWORD *)(v86[7] + 16 * v154);
        swift_bridgeObjectRelease(v136[1]);
        *v136 = v147;
        v136[1] = v148;
LABEL_91:
        *v411 = v86;
        swift_bridgeObjectRelease(*((_QWORD *)&v150 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        continue;
      }
      if ((v151 & 1) != 0)
      {
        v86 = (_QWORD *)aBlock;
        if ((v153 & 1) != 0)
          goto LABEL_90;
      }
      else
      {
        sub_1002D6574();
        v86 = (_QWORD *)aBlock;
        if ((v158 & 1) != 0)
          goto LABEL_90;
      }
LABEL_115:
      v86[(v154 >> 6) + 8] |= 1 << v154;
      *(_OWORD *)(v86[6] + 16 * v154) = v150;
      v161 = (_QWORD *)(v86[7] + 16 * v154);
      *v161 = v147;
      v161[1] = v148;
      v162 = v86[2];
      v49 = __OFADD__(v162, 1);
      v163 = v162 + 1;
      if (v49)
        goto LABEL_270;
      v86[2] = v163;
      swift_bridgeObjectRetain(*((_QWORD *)&v150 + 1));
      goto LABEL_91;
    }
    break;
  }
  v141 = v139 + 3;
  if (v141 >= (uint64_t)v409)
    goto LABEL_119;
  v140 = *(_QWORD *)(v408 + 8 * v141);
  if (v140)
  {
    v131 = v141;
    goto LABEL_107;
  }
  while (1)
  {
    v131 = v141 + 1;
    if (__OFADD__(v141, 1))
      goto LABEL_287;
    if (v131 >= (uint64_t)v409)
      break;
    v140 = *(_QWORD *)(v408 + 8 * v131);
    ++v141;
    if (v140)
      goto LABEL_107;
  }
LABEL_119:
  swift_release(v410);
  v395 = *(id *)(v407 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v164 = objc_msgSend(v395, "status:", v406 & 1);
  v165 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v164, &type metadata for String, &type metadata for String, &protocol witness table for String);

  v166 = 0;
  v167 = *(_QWORD *)(v165 + 64);
  v407 = v165 + 64;
  v168 = 1 << *(_BYTE *)(v165 + 32);
  v169 = -1;
  if (v168 < 64)
    v169 = ~(-1 << v168);
  v170 = v169 & v167;
  v408 = (unint64_t)(v168 + 63) >> 6;
  v409 = (_QWORD *)0x80000001006F8D00;
  v410 = (_QWORD *)v165;
  while (2)
  {
    if (v170)
    {
      v172 = __clz(__rbit64(v170));
      v170 &= v170 - 1;
      v173 = v172 | (v166 << 6);
      goto LABEL_140;
    }
    v174 = v166 + 1;
    if (__OFADD__(v166, 1))
      goto LABEL_275;
    if (v174 >= v408)
      goto LABEL_151;
    v175 = *(_QWORD *)(v407 + 8 * v174);
    ++v166;
    if (v175)
      goto LABEL_139;
    v166 = v174 + 1;
    if (v174 + 1 >= v408)
      goto LABEL_151;
    v175 = *(_QWORD *)(v407 + 8 * v166);
    if (v175)
      goto LABEL_139;
    v166 = v174 + 2;
    if (v174 + 2 >= v408)
      goto LABEL_151;
    v175 = *(_QWORD *)(v407 + 8 * v166);
    if (v175)
    {
LABEL_139:
      v170 = (v175 - 1) & v175;
      v173 = __clz(__rbit64(v175)) + (v166 << 6);
LABEL_140:
      v177 = 16 * v173;
      v178 = (uint64_t *)(v410[6] + v177);
      v179 = *v178;
      v180 = (void *)v178[1];
      v181 = (uint64_t *)(v410[7] + v177);
      v183 = *v181;
      v182 = v181[1];
      *(_QWORD *)&aBlock = 0;
      *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain(v180);
      swift_bridgeObjectRetain(v182);
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease(*((_QWORD *)&aBlock + 1));
      *(_QWORD *)&aBlock = 0xD000000000000010;
      *((_QWORD *)&aBlock + 1) = v409;
      v184._countAndFlagsBits = v179;
      v184._object = v180;
      String.append(_:)(v184);
      swift_bridgeObjectRelease(v180);
      v185 = aBlock;
      v186 = swift_isUniquelyReferenced_nonNull_native(v86);
      *(_QWORD *)&aBlock = *v411;
      v187 = aBlock;
      *v411 = 0x8000000000000000;
      v189 = sub_10001A6DC(v185, *((uint64_t *)&v185 + 1));
      v190 = *(_QWORD *)(v187 + 16);
      v191 = (v188 & 1) == 0;
      v192 = v190 + v191;
      if (__OFADD__(v190, v191))
        goto LABEL_266;
      v193 = v188;
      if (*(_QWORD *)(v187 + 24) < v192)
      {
        sub_1002CCF14(v192, v186);
        v194 = sub_10001A6DC(v185, *((uint64_t *)&v185 + 1));
        if ((v193 & 1) != (v195 & 1))
          goto LABEL_293;
        v189 = v194;
        v86 = (_QWORD *)aBlock;
        if ((v193 & 1) == 0)
          goto LABEL_147;
LABEL_122:
        v171 = (_QWORD *)(v86[7] + 16 * v189);
        swift_bridgeObjectRelease(v171[1]);
        *v171 = v183;
        v171[1] = v182;
LABEL_123:
        *v411 = v86;
        swift_bridgeObjectRelease(*((_QWORD *)&v185 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        continue;
      }
      if ((v186 & 1) != 0)
      {
        v86 = (_QWORD *)aBlock;
        if ((v188 & 1) != 0)
          goto LABEL_122;
      }
      else
      {
        sub_1002D6574();
        v86 = (_QWORD *)aBlock;
        if ((v193 & 1) != 0)
          goto LABEL_122;
      }
LABEL_147:
      v86[(v189 >> 6) + 8] |= 1 << v189;
      *(_OWORD *)(v86[6] + 16 * v189) = v185;
      v196 = (_QWORD *)(v86[7] + 16 * v189);
      *v196 = v183;
      v196[1] = v182;
      v197 = v86[2];
      v49 = __OFADD__(v197, 1);
      v198 = v197 + 1;
      if (v49)
        goto LABEL_272;
      v86[2] = v198;
      swift_bridgeObjectRetain(*((_QWORD *)&v185 + 1));
      goto LABEL_123;
    }
    break;
  }
  v176 = v174 + 3;
  if (v176 >= v408)
    goto LABEL_151;
  v175 = *(_QWORD *)(v407 + 8 * v176);
  if (v175)
  {
    v166 = v176;
    goto LABEL_139;
  }
  while (1)
  {
    v166 = v176 + 1;
    if (__OFADD__(v176, 1))
      goto LABEL_288;
    if (v166 >= v408)
      break;
    v175 = *(_QWORD *)(v407 + 8 * v166);
    ++v176;
    if (v175)
      goto LABEL_139;
  }
LABEL_151:
  swift_release(v410);
  v420[0] = 0xD000000000000013;
  v420[1] = 0x80000001006F8B10;
  memset(&v420[2], 0, 30);
  sub_100352C90((uint64_t)v420, (uint64_t)sub_1003847FC, 0);
  v382 = 0;
  v200 = *(void **)(v199 + 16);
  aBlock = v199;
  v413 = 0;
  v414 = v200;
  v415 = 0;
  LOBYTE(v416) = 0;
  v201 = v402;
  sub_1000F56BC(v402);
  v202 = v201;
  v203 = sub_10001A630(&qword_10083AEA8);
  v204 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v203 - 8) + 48))(v202, 1, v203);
  v205 = v404;
  v206 = v405;
  if (v204 != 1)
  {
    v397 = *(void (**)(char *, uint64_t, uint64_t))(v401 + 32);
    do
    {
      v319 = *(_QWORD *)(v202 + *(int *)(v203 + 48));
      v397(v206, v202, v205);
      v418 = 0;
      v419 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v419);
      v417 = v319;
      v418 = 0x53746E756F636361;
      v419 = 0xEF2E7972616D6D75;
      v408 = v319;
      v320._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v321 = v320._object;
      String.append(_:)(v320);
      swift_bridgeObjectRelease(v321);
      v322._countAndFlagsBits = 0x746E756F6363612ELL;
      v322._object = (void *)0xEA00000000004449;
      String.append(_:)(v322);
      v324 = v418;
      v323 = v419;
      v325 = (void *)REMAccountSnapshotSummary.accountID.getter();
      v326 = objc_msgSend(v325, "uuid");

      v327 = v398;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v326);

      v329 = UUID.uuidString.getter(v328);
      v331 = v330;
      (*(void (**)(char *, uint64_t))(v399 + 8))(v327, v400);
      v332 = v411;
      v333 = *v411;
      v334 = swift_isUniquelyReferenced_nonNull_native(*v411);
      v418 = v333;
      *v332 = 0x8000000000000000;
      sub_10028B8BC(v329, v331, v324, v323, v334);
      v335 = *v332;
      *v332 = v418;
      swift_bridgeObjectRelease(v323);
      v336 = swift_bridgeObjectRelease(v335);
      v337 = REMAccountSnapshotSummary.nsPayload.getter(v336);
      v338 = 0;
      v339 = *(_QWORD *)(v337 + 64);
      v406 = (_QWORD *)(v337 + 64);
      v409 = (_QWORD *)v337;
      v340 = 1 << *(_BYTE *)(v337 + 32);
      if (v340 < 64)
        v341 = ~(-1 << v340);
      else
        v341 = -1;
      v342 = v341 & v339;
      v407 = (unint64_t)(v340 + 63) >> 6;
      while (1)
      {
        if (v342)
        {
          v344 = __clz(__rbit64(v342));
          v342 &= v342 - 1;
          v410 = v338;
          v345 = v344 | ((_QWORD)v338 << 6);
          goto LABEL_251;
        }
        v346 = (int64_t)v338 + 1;
        v206 = v405;
        if (__OFADD__(v338, 1))
          goto LABEL_267;
        v205 = v404;
        if (v346 >= v407)
          break;
        v347 = v406[v346];
        v348 = (int64_t)v338 + 1;
        if (!v347)
        {
          v348 = (int64_t)v338 + 2;
          if ((uint64_t)v338 + 2 >= v407)
            break;
          v347 = v406[v348];
          if (!v347)
          {
            v348 = (int64_t)v338 + 3;
            if ((uint64_t)v338 + 3 >= v407)
              break;
            v347 = v406[v348];
            if (!v347)
            {
              v349 = (char *)v338 + 4;
              if ((uint64_t)v338 + 4 >= v407)
                break;
              v347 = v406[(_QWORD)v349];
              if (!v347)
              {
                while (1)
                {
                  v348 = (int64_t)(v349 + 1);
                  if (__OFADD__(v349, 1))
                    break;
                  if (v348 >= v407)
                    goto LABEL_228;
                  v347 = v406[v348];
                  ++v349;
                  if (v347)
                    goto LABEL_250;
                }
LABEL_278:
                __break(1u);
LABEL_279:
                __break(1u);
LABEL_280:
                __break(1u);
LABEL_281:
                __break(1u);
LABEL_282:
                __break(1u);
LABEL_283:
                __break(1u);
LABEL_284:
                __break(1u);
LABEL_285:
                __break(1u);
LABEL_286:
                __break(1u);
LABEL_287:
                __break(1u);
LABEL_288:
                __break(1u);
LABEL_289:
                __break(1u);
LABEL_290:
                __break(1u);
                goto LABEL_291;
              }
              v348 = (int64_t)v338 + 4;
            }
          }
        }
LABEL_250:
        v342 = (v347 - 1) & v347;
        v410 = (_QWORD *)v348;
        v345 = __clz(__rbit64(v347)) + (v348 << 6);
LABEL_251:
        v350 = (uint64_t *)(v409[6] + 16 * v345);
        v351 = *v350;
        v352 = (void *)v350[1];
        v353 = *(void **)(v409[7] + 8 * v345);
        v418 = 0;
        v419 = 0xE000000000000000;
        swift_bridgeObjectRetain(v352);
        v354 = v353;
        _StringGuts.grow(_:)(20);
        swift_bridgeObjectRelease(v419);
        v418 = 0x53746E756F636361;
        v419 = 0xEF2E7972616D6D75;
        v417 = v408;
        v355._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v356 = v355._object;
        String.append(_:)(v355);
        swift_bridgeObjectRelease(v356);
        v357._countAndFlagsBits = 46;
        v357._object = (void *)0xE100000000000000;
        String.append(_:)(v357);
        v358._countAndFlagsBits = v351;
        v358._object = v352;
        String.append(_:)(v358);
        *(_QWORD *)&v359 = swift_bridgeObjectRelease(v352).n128_u64[0];
        v361 = v418;
        v360 = v419;
        v362 = objc_msgSend(v354, "stringValue", v359);
        v363 = static String._unconditionallyBridgeFromObjectiveC(_:)(v362);
        v365 = v364;

        v366 = v411;
        v367 = *v411;
        v368 = swift_isUniquelyReferenced_nonNull_native(*v411);
        v418 = v367;
        *v366 = 0x8000000000000000;
        v370 = sub_10001A6DC(v361, v360);
        v371 = *(_QWORD *)(v367 + 16);
        v372 = (v369 & 1) == 0;
        v373 = v371 + v372;
        if (__OFADD__(v371, v372))
        {
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
          goto LABEL_278;
        }
        v374 = v369;
        if (*(_QWORD *)(v367 + 24) >= v373)
        {
          if ((v368 & 1) != 0)
          {
            v377 = (_QWORD *)v418;
            if ((v369 & 1) != 0)
              goto LABEL_233;
          }
          else
          {
            sub_1002D6574();
            v377 = (_QWORD *)v418;
            if ((v374 & 1) != 0)
              goto LABEL_233;
          }
        }
        else
        {
          sub_1002CCF14(v373, v368);
          v375 = sub_10001A6DC(v361, v360);
          if ((v374 & 1) != (v376 & 1))
            goto LABEL_293;
          v370 = v375;
          v377 = (_QWORD *)v418;
          if ((v374 & 1) != 0)
          {
LABEL_233:
            v343 = (uint64_t *)(v377[7] + 16 * v370);
            swift_bridgeObjectRelease(v343[1]);
            *v343 = v363;
            v343[1] = v365;
            goto LABEL_234;
          }
        }
        v377[(v370 >> 6) + 8] |= 1 << v370;
        v378 = (uint64_t *)(v377[6] + 16 * v370);
        *v378 = v361;
        v378[1] = v360;
        v379 = (uint64_t *)(v377[7] + 16 * v370);
        *v379 = v363;
        v379[1] = v365;
        v380 = v377[2];
        v49 = __OFADD__(v380, 1);
        v381 = v380 + 1;
        if (v49)
          goto LABEL_263;
        v377[2] = v381;
        swift_bridgeObjectRetain(v360);
LABEL_234:
        *v411 = v377;

        swift_bridgeObjectRelease(v360);
        swift_bridgeObjectRelease(0x8000000000000000);
        v338 = v410;
      }
LABEL_228:
      swift_release(v409);
      (*(void (**)(char *, uint64_t))(v401 + 8))(v206, v205);
      v318 = v402;
      sub_1000F56BC(v402);
      v202 = v318;
      v203 = sub_10001A630(&qword_10083AEA8);
    }
    while ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v203 - 8) + 48))(v202, 1, v203) != 1);
  }
  swift_bridgeObjectRelease(aBlock);
  v207 = objc_msgSend(v395, "cloudContext", v382);
  if (!v207)
  {
LABEL_222:
    v288 = swift_allocObject(&unk_1007E4EF8, 17, 7);
    *(_BYTE *)(v288 + 16) = 1;
    v289 = (_BYTE *)(v288 + 16);
    v290 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
    if (v290)
    {
      v291 = v290;
      v292 = dispatch_group_create();
      dispatch_group_enter(v292);
      sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
      v294 = (void *)static OS_dispatch_queue.main.getter(v293);
      v295 = (_QWORD *)swift_allocObject(&unk_1007E4F20, 48, 7);
      v295[2] = v291;
      v295[3] = v292;
      v295[4] = v396;
      v295[5] = v288;
      v415 = sub_1001190B4;
      v416 = v295;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v413 = sub_1000094C8;
      v414 = &unk_1007E4F38;
      v296 = _Block_copy(&aBlock);
      v297 = v416;
      v410 = v291;
      v298 = v292;
      swift_retain();
      swift_retain();
      v299 = swift_release(v297);
      v300 = v383;
      static DispatchQoS.unspecified.getter(v299);
      *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
      v301 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v302 = sub_10001A630((uint64_t *)&unk_100838000);
      v303 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
      v304 = v386;
      v305 = v302;
      v306 = v388;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v305, v303, v388, v301);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v300, v304, v296);
      _Block_release(v296);

      (*(void (**)(char *, uint64_t))(v387 + 8))(v304, v306);
      v307 = (*(uint64_t (**)(char *, uint64_t))(v384 + 8))(v300, v385);
      v308 = v389;
      static DispatchTime.now()(v307);
      v309 = v391;
      + infix(_:_:)(v308, 1000.0);
      v310 = *(void (**)(char *, uint64_t))(v390 + 8);
      v311 = v392;
      v310(v308, v392);
      OS_dispatch_group.wait(timeout:)(v309);

      v310(v309, v311);
    }
    swift_beginAccess(v289, &aBlock, 0, 0);
    if (*v289 == 1)
    {
      v312 = v411;
      swift_beginAccess(v411, &v418, 33, 0);
      v313 = swift_isUniquelyReferenced_nonNull_native(*v312);
      v417 = *v312;
      *v312 = 0x8000000000000000;
      sub_10028B8BC(0xD00000000000001ALL, 0x80000001006F8D20, 0x7474697379626162, 0xEA00000000007265, v313);
      v314 = *v312;
      *v312 = v417;
      swift_bridgeObjectRelease(v314);
      swift_endAccess(&v418);
    }
    swift_beginAccess(v411, &v418, 0, 0);
    v315 = v396;
    v316 = *(_QWORD *)(v396 + 16);
    swift_bridgeObjectRetain(v316);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class, _QWORD))v394)[2](v394, isa, 0);

    swift_release(v315);
    swift_release(v288);
    swift_bridgeObjectRelease(v316);

    return;
  }
  v208 = v207;
  v209 = objc_msgSend(v207, "readinessLoggingDescription");
  v210 = static String._unconditionallyBridgeFromObjectiveC(_:)(v209);
  v212 = v211;

  v213 = v411;
  v214 = *v411;
  v215 = swift_isUniquelyReferenced_nonNull_native(*v411);
  *(_QWORD *)&aBlock = v214;
  *v213 = 0x8000000000000000;
  sub_10028B8BC(v210, v212, 0xD000000000000028, 0x80000001006F8D40, v215);
  v216 = (_QWORD *)aBlock;
  v217 = *v213;
  *v213 = aBlock;
  *(_QWORD *)&v218 = swift_bridgeObjectRelease(v217).n128_u64[0];
  v406 = v208;
  v219 = (char *)objc_msgSend(v208, "lastSyncMetrics", v218);
  if (!v219)
    goto LABEL_188;
  v405 = v219;
  v220 = objc_msgSend(v219, "dictionaryRepresentation");
  v221 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v220, &type metadata for String, &type metadata for String, &protocol witness table for String);

  v222 = 0;
  v223 = *(_QWORD *)(v221 + 64);
  v407 = v221 + 64;
  v224 = 1 << *(_BYTE *)(v221 + 32);
  v225 = -1;
  if (v224 < 64)
    v225 = ~(-1 << v224);
  v226 = v225 & v223;
  v408 = (unint64_t)(v224 + 63) >> 6;
  v409 = (_QWORD *)0x80000001006F8D90;
  v410 = (_QWORD *)v221;
  while (2)
  {
    if (v226)
    {
      v228 = __clz(__rbit64(v226));
      v226 &= v226 - 1;
      v229 = v228 | (v222 << 6);
      goto LABEL_172;
    }
    v49 = __OFADD__(v222++, 1);
    if (v49)
      goto LABEL_285;
    if (v222 >= v408)
      goto LABEL_187;
    v230 = *(_QWORD *)(v407 + 8 * v222);
    if (v230)
    {
LABEL_171:
      v226 = (v230 - 1) & v230;
      v229 = __clz(__rbit64(v230)) + (v222 << 6);
LABEL_172:
      v232 = 16 * v229;
      v233 = (uint64_t *)(v410[6] + v232);
      v234 = *v233;
      v235 = (void *)v233[1];
      v236 = (uint64_t *)(v410[7] + v232);
      v237 = *v236;
      v238 = v236[1];
      *(_QWORD *)&aBlock = 0;
      *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain(v235);
      swift_bridgeObjectRetain(v238);
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease(*((_QWORD *)&aBlock + 1));
      *(_QWORD *)&aBlock = 0xD00000000000001DLL;
      *((_QWORD *)&aBlock + 1) = v409;
      v239._countAndFlagsBits = v234;
      v239._object = v235;
      String.append(_:)(v239);
      swift_bridgeObjectRelease(v235);
      v240 = aBlock;
      v241 = swift_isUniquelyReferenced_nonNull_native(v216);
      *(_QWORD *)&aBlock = *v411;
      v242 = aBlock;
      *v411 = 0x8000000000000000;
      v244 = sub_10001A6DC(v240, *((uint64_t *)&v240 + 1));
      v245 = *(_QWORD *)(v242 + 16);
      v246 = (v243 & 1) == 0;
      v247 = v245 + v246;
      if (__OFADD__(v245, v246))
        goto LABEL_277;
      v248 = v243;
      if (*(_QWORD *)(v242 + 24) < v247)
      {
        sub_1002CCF14(v247, v241);
        v249 = sub_10001A6DC(v240, *((uint64_t *)&v240 + 1));
        if ((v248 & 1) != (v250 & 1))
          goto LABEL_293;
        v244 = v249;
        v216 = (_QWORD *)aBlock;
        if ((v248 & 1) == 0)
          goto LABEL_179;
LABEL_157:
        v227 = (_QWORD *)(v216[7] + 16 * v244);
        swift_bridgeObjectRelease(v227[1]);
        *v227 = v237;
        v227[1] = v238;
LABEL_158:
        *v411 = v216;
        swift_bridgeObjectRelease(*((_QWORD *)&v240 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        continue;
      }
      if ((v241 & 1) != 0)
      {
        v216 = (_QWORD *)aBlock;
        if ((v243 & 1) != 0)
          goto LABEL_157;
      }
      else
      {
        sub_1002D6574();
        v216 = (_QWORD *)aBlock;
        if ((v248 & 1) != 0)
          goto LABEL_157;
      }
LABEL_179:
      v216[(v244 >> 6) + 8] |= 1 << v244;
      *(_OWORD *)(v216[6] + 16 * v244) = v240;
      v251 = (_QWORD *)(v216[7] + 16 * v244);
      *v251 = v237;
      v251[1] = v238;
      v252 = v216[2];
      v49 = __OFADD__(v252, 1);
      v253 = v252 + 1;
      if (v49)
        goto LABEL_282;
      v216[2] = v253;
      swift_bridgeObjectRetain(*((_QWORD *)&v240 + 1));
      goto LABEL_158;
    }
    break;
  }
  v231 = v222 + 1;
  if (v222 + 1 >= v408)
    goto LABEL_187;
  v230 = *(_QWORD *)(v407 + 8 * v231);
  if (v230)
    goto LABEL_170;
  v231 = v222 + 2;
  if (v222 + 2 >= v408)
    goto LABEL_187;
  v230 = *(_QWORD *)(v407 + 8 * v231);
  if (v230)
    goto LABEL_170;
  v231 = v222 + 3;
  if (v222 + 3 >= v408)
    goto LABEL_187;
  v230 = *(_QWORD *)(v407 + 8 * v231);
  if (v230)
  {
LABEL_170:
    v222 = v231;
    goto LABEL_171;
  }
  while (1)
  {
    v222 = v231 + 1;
    if (__OFADD__(v231, 1))
      goto LABEL_292;
    if (v222 >= v408)
      break;
    v230 = *(_QWORD *)(v407 + 8 * v222);
    ++v231;
    if (v230)
      goto LABEL_171;
  }
LABEL_187:

  swift_release(v410);
LABEL_188:
  v254 = objc_msgSend(v406, "configurationDump");
  v255 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v254, &type metadata for String, &type metadata for String, &protocol witness table for String);

  v256 = 0;
  v257 = *(_QWORD *)(v255 + 64);
  v407 = v255 + 64;
  v258 = 1 << *(_BYTE *)(v255 + 32);
  v259 = -1;
  if (v258 < 64)
    v259 = ~(-1 << v258);
  v260 = v259 & v257;
  v408 = (unint64_t)(v258 + 63) >> 6;
  v409 = (_QWORD *)0x80000001006F8D70;
  v410 = (_QWORD *)v255;
  while (2)
  {
    if (v260)
    {
      v262 = __clz(__rbit64(v260));
      v260 &= v260 - 1;
      v263 = v262 | (v256 << 6);
      goto LABEL_206;
    }
    v49 = __OFADD__(v256++, 1);
    if (v49)
      goto LABEL_281;
    if (v256 >= v408)
    {
LABEL_221:

      swift_release(v410);
      goto LABEL_222;
    }
    v264 = *(_QWORD *)(v407 + 8 * v256);
    if (v264)
    {
LABEL_205:
      v260 = (v264 - 1) & v264;
      v263 = __clz(__rbit64(v264)) + (v256 << 6);
LABEL_206:
      v266 = 16 * v263;
      v267 = (uint64_t *)(v410[6] + v266);
      v268 = *v267;
      v269 = (void *)v267[1];
      v270 = (uint64_t *)(v410[7] + v266);
      v271 = *v270;
      v272 = v270[1];
      *(_QWORD *)&aBlock = 0;
      *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain(v269);
      swift_bridgeObjectRetain(v272);
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease(*((_QWORD *)&aBlock + 1));
      *(_QWORD *)&aBlock = 0xD00000000000001BLL;
      *((_QWORD *)&aBlock + 1) = v409;
      v273._countAndFlagsBits = v268;
      v273._object = v269;
      String.append(_:)(v273);
      swift_bridgeObjectRelease(v269);
      v274 = aBlock;
      v275 = swift_isUniquelyReferenced_nonNull_native(v216);
      *(_QWORD *)&aBlock = *v411;
      v276 = aBlock;
      *v411 = 0x8000000000000000;
      v278 = sub_10001A6DC(v274, *((uint64_t *)&v274 + 1));
      v279 = *(_QWORD *)(v276 + 16);
      v280 = (v277 & 1) == 0;
      v281 = v279 + v280;
      if (__OFADD__(v279, v280))
        goto LABEL_271;
      v282 = v277;
      if (*(_QWORD *)(v276 + 24) < v281)
      {
        sub_1002CCF14(v281, v275);
        v283 = sub_10001A6DC(v274, *((uint64_t *)&v274 + 1));
        if ((v282 & 1) != (v284 & 1))
          goto LABEL_293;
        v278 = v283;
        v216 = (_QWORD *)aBlock;
        if ((v282 & 1) == 0)
          goto LABEL_213;
LABEL_191:
        v261 = (_QWORD *)(v216[7] + 16 * v278);
        swift_bridgeObjectRelease(v261[1]);
        *v261 = v271;
        v261[1] = v272;
LABEL_192:
        *v411 = v216;
        swift_bridgeObjectRelease(*((_QWORD *)&v274 + 1));
        swift_bridgeObjectRelease(0x8000000000000000);
        continue;
      }
      if ((v275 & 1) != 0)
      {
        v216 = (_QWORD *)aBlock;
        if ((v277 & 1) != 0)
          goto LABEL_191;
      }
      else
      {
        sub_1002D6574();
        v216 = (_QWORD *)aBlock;
        if ((v282 & 1) != 0)
          goto LABEL_191;
      }
LABEL_213:
      v216[(v278 >> 6) + 8] |= 1 << v278;
      *(_OWORD *)(v216[6] + 16 * v278) = v274;
      v285 = (_QWORD *)(v216[7] + 16 * v278);
      *v285 = v271;
      v285[1] = v272;
      v286 = v216[2];
      v49 = __OFADD__(v286, 1);
      v287 = v286 + 1;
      if (v49)
        goto LABEL_279;
      v216[2] = v287;
      swift_bridgeObjectRetain(*((_QWORD *)&v274 + 1));
      goto LABEL_192;
    }
    break;
  }
  v265 = v256 + 1;
  if (v256 + 1 >= v408)
    goto LABEL_221;
  v264 = *(_QWORD *)(v407 + 8 * v265);
  if (v264)
    goto LABEL_204;
  v265 = v256 + 2;
  if (v256 + 2 >= v408)
    goto LABEL_221;
  v264 = *(_QWORD *)(v407 + 8 * v265);
  if (v264)
    goto LABEL_204;
  v265 = v256 + 3;
  if (v256 + 3 >= v408)
    goto LABEL_221;
  v264 = *(_QWORD *)(v407 + 8 * v265);
  if (v264)
  {
LABEL_204:
    v256 = v265;
    goto LABEL_205;
  }
  while (1)
  {
    v256 = v265 + 1;
    if (__OFADD__(v265, 1))
      break;
    if (v256 >= v408)
      goto LABEL_221;
    v264 = *(_QWORD *)(v407 + 8 * v256);
    ++v265;
    if (v264)
      goto LABEL_205;
  }
LABEL_291:
  __break(1u);
LABEL_292:
  __break(1u);
LABEL_293:
  _Block_release(v394);
LABEL_294:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10010C85C(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  int64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  void *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  char v87;
  _QWORD *v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  Class isa;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  Swift::String v103;
  void *object;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char isUniquelyReferenced_nonNull_native;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  int64_t v123;
  uint64_t v124;
  unint64_t v125;
  int64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  id v132;
  uint64_t v133;
  Swift::String v134;
  void *v135;
  Swift::String v136;
  Swift::String v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char v147;
  unint64_t v148;
  uint64_t v149;
  _BOOL8 v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  char v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(char *, uint64_t, uint64_t);
  void (**v162)(_QWORD, _QWORD, _QWORD);
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  id v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  uint64_t v173;
  int64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD v178[2];
  unint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[3];
  _QWORD v184[6];

  v162 = a2;
  v3 = type metadata accessor for REMAccountSnapshotSummary(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v160 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_10083AEA0);
  __chkstk_darwin(v7);
  v9 = (char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  v163 = a1;
  v10 = *(void **)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v184[0] = 0xD000000000000013;
  v184[1] = 0x80000001006F8B10;
  memset(&v184[2], 0, 30);
  v167 = v10;
  sub_100352C90((uint64_t)v184, (uint64_t)sub_1003847FC, 0);
  v166 = v9;
  v165 = v6;
  v179 = (unint64_t)_swiftEmptyArrayStorage;
  v164 = 0;
  if (!v11)
    goto LABEL_4;
  v13 = *(_QWORD *)(v11 + 16);
  v180 = v11;
  v181 = 0;
  v182 = v13;
  v183[0] = 0;
  LOBYTE(v183[1]) = 0;
  v14 = (uint64_t)v166;
  sub_1000F56BC((uint64_t)v166);
  v15 = sub_10001A630(&qword_10083AEA8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15) != 1)
  {
    v161 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 32);
    v95 = v165;
    v169 = v3;
    v170 = v4;
    do
    {
      v96 = *(_QWORD *)(v14 + *(int *)(v15 + 48));
      v97 = v161(v95, v14, v3);
      v98 = (void *)REMAccountSnapshotSummary.accountID.getter(v97);
      v99 = REMAccountSnapshotSummary.accountID.getter(v98);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v99);
      v101 = *(_QWORD *)((v179 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v100 = *(_QWORD *)((v179 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v101 >= v100 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v100 > 1);
      v102 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v101, v99);
      specialized Array._endMutation()(v102);
      v178[0] = 0;
      v178[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v178[1]);
      v177 = v96;
      v178[0] = 0x53746E756F636361;
      v178[1] = 0xEF2E7972616D6D75;
      v103._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v103._object;
      String.append(_:)(v103);
      swift_bridgeObjectRelease(object);
      v105._countAndFlagsBits = 0x746E756F6363612ELL;
      v105._object = (void *)0xEA00000000004449;
      String.append(_:)(v105);
      v106 = v178[0];
      v107 = v178[1];
      v168 = v98;
      v108 = objc_msgSend(v98, "stringRepresentation");
      v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
      v111 = v110;

      v112 = v176;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v176);
      v178[0] = v112;
      sub_10028B8BC(v109, v111, v106, v107, isUniquelyReferenced_nonNull_native);
      v176 = v178[0];
      swift_bridgeObjectRelease(v107);
      v114 = swift_bridgeObjectRelease(0x8000000000000000);
      v115 = REMAccountSnapshotSummary.nsPayload.getter(v114);
      v116 = 0;
      v117 = *(_QWORD *)(v115 + 64);
      v171 = v115 + 64;
      v173 = v115;
      v118 = 1 << *(_BYTE *)(v115 + 32);
      if (v118 < 64)
        v119 = ~(-1 << v118);
      else
        v119 = -1;
      v120 = v119 & v117;
      v172 = (unint64_t)(v118 + 63) >> 6;
      while (1)
      {
        if (v120)
        {
          v174 = (v120 - 1) & v120;
          v175 = v116;
          v122 = __clz(__rbit64(v120)) | (v116 << 6);
          goto LABEL_95;
        }
        v123 = v116 + 1;
        v124 = v170;
        if (__OFADD__(v116, 1))
          goto LABEL_107;
        v3 = v169;
        if (v123 >= v172)
          break;
        v125 = *(_QWORD *)(v171 + 8 * v123);
        v126 = v116 + 1;
        if (!v125)
        {
          v126 = v116 + 2;
          if (v116 + 2 >= v172)
            break;
          v125 = *(_QWORD *)(v171 + 8 * v126);
          if (!v125)
          {
            v126 = v116 + 3;
            if (v116 + 3 >= v172)
              break;
            v125 = *(_QWORD *)(v171 + 8 * v126);
            if (!v125)
            {
              v127 = v116 + 4;
              if (v116 + 4 >= v172)
                break;
              v125 = *(_QWORD *)(v171 + 8 * v127);
              if (!v125)
              {
                while (1)
                {
                  v126 = v127 + 1;
                  if (__OFADD__(v127, 1))
                    goto LABEL_111;
                  if (v126 >= v172)
                    goto LABEL_70;
                  v125 = *(_QWORD *)(v171 + 8 * v126);
                  ++v127;
                  if (v125)
                    goto LABEL_94;
                }
              }
              v126 = v116 + 4;
            }
          }
        }
LABEL_94:
        v174 = (v125 - 1) & v125;
        v175 = v126;
        v122 = __clz(__rbit64(v125)) + (v126 << 6);
LABEL_95:
        v128 = (uint64_t *)(*(_QWORD *)(v173 + 48) + 16 * v122);
        v129 = *v128;
        v130 = (void *)v128[1];
        v131 = *(void **)(*(_QWORD *)(v173 + 56) + 8 * v122);
        v178[0] = 0;
        v178[1] = 0xE000000000000000;
        swift_bridgeObjectRetain(v130);
        v132 = v131;
        _StringGuts.grow(_:)(20);
        swift_bridgeObjectRelease(v178[1]);
        v177 = v96;
        v178[0] = 0x53746E756F636361;
        v178[1] = 0xEF2E7972616D6D75;
        v133 = v96;
        v134._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v135 = v134._object;
        String.append(_:)(v134);
        swift_bridgeObjectRelease(v135);
        v136._countAndFlagsBits = 46;
        v136._object = (void *)0xE100000000000000;
        String.append(_:)(v136);
        v137._countAndFlagsBits = v129;
        v137._object = v130;
        String.append(_:)(v137);
        *(_QWORD *)&v138 = swift_bridgeObjectRelease(v130).n128_u64[0];
        v139 = v178[0];
        v140 = v178[1];
        v141 = objc_msgSend(v132, "stringValue", v138);
        v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
        v144 = v143;

        v145 = v176;
        v146 = swift_isUniquelyReferenced_nonNull_native(v176);
        v178[0] = v145;
        v148 = sub_10001A6DC(v139, v140);
        v149 = *(_QWORD *)(v145 + 16);
        v150 = (v147 & 1) == 0;
        v151 = v149 + v150;
        if (__OFADD__(v149, v150))
        {
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
        v152 = v147;
        if (*(_QWORD *)(v145 + 24) >= v151)
        {
          if ((v146 & 1) == 0)
            sub_1002D6574();
        }
        else
        {
          sub_1002CCF14(v151, v146);
          v153 = sub_10001A6DC(v139, v140);
          if ((v152 & 1) != (v154 & 1))
            goto LABEL_116;
          v148 = v153;
        }
        v155 = (_QWORD *)v178[0];
        v176 = v178[0];
        if ((v152 & 1) != 0)
        {
          v121 = (uint64_t *)(*(_QWORD *)(v178[0] + 56) + 16 * v148);
          swift_bridgeObjectRelease(v121[1]);
          *v121 = v142;
          v121[1] = v144;
        }
        else
        {
          *(_QWORD *)(v178[0] + 8 * (v148 >> 6) + 64) |= 1 << v148;
          v156 = (uint64_t *)(v155[6] + 16 * v148);
          *v156 = v139;
          v156[1] = v140;
          v157 = (uint64_t *)(v155[7] + 16 * v148);
          *v157 = v142;
          v157[1] = v144;
          v158 = v155[2];
          v26 = __OFADD__(v158, 1);
          v159 = v158 + 1;
          if (v26)
            goto LABEL_106;
          v155[2] = v159;
          swift_bridgeObjectRetain(v140);
        }

        swift_bridgeObjectRelease(v140);
        swift_bridgeObjectRelease(0x8000000000000000);
        v96 = v133;
        v120 = v174;
        v116 = v175;
      }
LABEL_70:
      swift_release(v173);

      v95 = v165;
      (*(void (**)(char *, uint64_t))(v124 + 8))(v165, v3);
      v14 = (uint64_t)v166;
      sub_1000F56BC((uint64_t)v166);
      v15 = sub_10001A630(&qword_10083AEA8);
    }
    while ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15) != 1);
  }
  *(_QWORD *)&v12 = swift_bridgeObjectRelease(v180).n128_u64[0];
LABEL_4:
  v16 = objc_msgSend(v167, "containerStats", v12);
  v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v16, &type metadata for String, &type metadata for String, &protocol witness table for String);

  v18 = 0;
  v19 = *(_QWORD *)(v17 + 64);
  v173 = v17 + 64;
  v20 = 1 << *(_BYTE *)(v17 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v174 = (unint64_t)(v20 + 63) >> 6;
  v175 = v17;
  while (1)
  {
    if (v22)
    {
      v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v25 = v24 | (v18 << 6);
      goto LABEL_22;
    }
    v26 = __OFADD__(v18++, 1);
    if (v26)
      goto LABEL_109;
    if (v18 >= v174)
    {
LABEL_35:
      v52 = swift_release(v175);
      v180 = xmmword_1006A8980;
      v182 = 0;
      memset(v183, 0, 14);
      v181 = 0;
      __chkstk_darwin(v52);
      *(&v160 - 2) = (uint64_t)&v179;
      *(&v160 - 1) = v163;
      v53 = v164;
      sub_1003530B4((uint64_t)&v180, (uint64_t)sub_100119048, (uint64_t)(&v160 - 4));
      if (v53)
      {
        swift_errorRelease(v53);
      }
      else if (v54)
      {
        v55 = 0;
        v56 = *(_QWORD *)(v54 + 64);
        v173 = v54 + 64;
        v57 = 1 << *(_BYTE *)(v54 + 32);
        v58 = -1;
        if (v57 < 64)
          v58 = ~(-1 << v57);
        v59 = v58 & v56;
        v174 = (unint64_t)(v57 + 63) >> 6;
        while (1)
        {
          if (v59)
          {
            v61 = __clz(__rbit64(v59));
            v59 &= v59 - 1;
            v175 = v55;
            v62 = v61 | (v55 << 6);
          }
          else
          {
            v63 = v55 + 1;
            if (__OFADD__(v55, 1))
              goto LABEL_114;
            if (v63 >= v174)
            {
LABEL_67:
              swift_release(v54);
              break;
            }
            v64 = *(_QWORD *)(v173 + 8 * v63);
            i = v55 + 1;
            if (!v64)
            {
              i = v55 + 2;
              if (v55 + 2 >= v174)
                goto LABEL_67;
              v64 = *(_QWORD *)(v173 + 8 * i);
              if (!v64)
              {
                i = v55 + 3;
                if (v55 + 3 >= v174)
                  goto LABEL_67;
                v64 = *(_QWORD *)(v173 + 8 * i);
                if (!v64)
                {
                  v66 = v55 + 4;
                  if (v55 + 4 >= v174)
                    goto LABEL_67;
                  v64 = *(_QWORD *)(v173 + 8 * v66);
                  for (i = v55 + 4; !v64; ++v66)
                  {
                    i = v66 + 1;
                    if (__OFADD__(v66, 1))
                      goto LABEL_115;
                    if (i >= v174)
                      goto LABEL_67;
                    v64 = *(_QWORD *)(v173 + 8 * i);
                  }
                }
              }
            }
            v59 = (v64 - 1) & v64;
            v175 = i;
            v62 = __clz(__rbit64(v64)) + (i << 6);
          }
          v67 = 16 * v62;
          v68 = v54;
          v69 = (uint64_t *)(*(_QWORD *)(v54 + 48) + v67);
          v70 = *v69;
          v71 = (void *)v69[1];
          v72 = (uint64_t *)(*(_QWORD *)(v54 + 56) + v67);
          v73 = *v72;
          v74 = v72[1];
          strcpy((char *)v178, "contentStats.");
          HIWORD(v178[1]) = -4864;
          swift_bridgeObjectRetain(v71);
          swift_bridgeObjectRetain(v74);
          v75._countAndFlagsBits = v70;
          v75._object = v71;
          String.append(_:)(v75);
          swift_bridgeObjectRelease(v71);
          v77 = v178[0];
          v76 = v178[1];
          v78 = v176;
          v79 = swift_isUniquelyReferenced_nonNull_native(v176);
          v178[0] = v78;
          v81 = sub_10001A6DC(v77, v76);
          v82 = *(_QWORD *)(v78 + 16);
          v83 = (v80 & 1) == 0;
          v84 = v82 + v83;
          if (__OFADD__(v82, v83))
            goto LABEL_110;
          v85 = v80;
          if (*(_QWORD *)(v78 + 24) >= v84)
          {
            if ((v79 & 1) == 0)
              sub_1002D6574();
          }
          else
          {
            sub_1002CCF14(v84, v79);
            v86 = sub_10001A6DC(v77, v76);
            if ((v85 & 1) != (v87 & 1))
              goto LABEL_116;
            v81 = v86;
          }
          v88 = (_QWORD *)v178[0];
          v176 = v178[0];
          if ((v85 & 1) != 0)
          {
            v60 = (_QWORD *)(*(_QWORD *)(v178[0] + 56) + 16 * v81);
            swift_bridgeObjectRelease(v60[1]);
            *v60 = v73;
            v60[1] = v74;
          }
          else
          {
            *(_QWORD *)(v178[0] + 8 * (v81 >> 6) + 64) |= 1 << v81;
            v89 = (uint64_t *)(v88[6] + 16 * v81);
            *v89 = v77;
            v89[1] = v76;
            v90 = (_QWORD *)(v88[7] + 16 * v81);
            *v90 = v73;
            v90[1] = v74;
            v91 = v88[2];
            v26 = __OFADD__(v91, 1);
            v92 = v91 + 1;
            if (v26)
              goto LABEL_112;
            v88[2] = v92;
            swift_bridgeObjectRetain(v76);
          }
          swift_bridgeObjectRelease(v76);
          swift_bridgeObjectRelease(0x8000000000000000);
          v54 = v68;
          v55 = v175;
        }
      }
      v93 = v176;
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      ((void (**)(_QWORD, Class, _QWORD))v162)[2](v162, isa, 0);
      swift_bridgeObjectRelease(v93);

      swift_bridgeObjectRelease(v179);
      return;
    }
    v27 = *(_QWORD *)(v173 + 8 * v18);
    if (!v27)
      break;
LABEL_21:
    v22 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v18 << 6);
LABEL_22:
    v29 = 16 * v25;
    v30 = (uint64_t *)(*(_QWORD *)(v175 + 48) + v29);
    v31 = *v30;
    v32 = (void *)v30[1];
    v33 = (uint64_t *)(*(_QWORD *)(v175 + 56) + v29);
    v34 = *v33;
    v35 = v33[1];
    strcpy((char *)&v180, "contentStats.");
    HIWORD(v180) = -4864;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v35);
    v36._countAndFlagsBits = v31;
    v36._object = v32;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v32);
    v37 = v180;
    v38 = v176;
    v39 = swift_isUniquelyReferenced_nonNull_native(v176);
    *(_QWORD *)&v180 = v38;
    v41 = sub_10001A6DC(v37, *((uint64_t *)&v37 + 1));
    v42 = *(_QWORD *)(v38 + 16);
    v43 = (v40 & 1) == 0;
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
      goto LABEL_105;
    v45 = v40;
    if (*(_QWORD *)(v38 + 24) >= v44)
    {
      if ((v39 & 1) == 0)
        sub_1002D6574();
    }
    else
    {
      sub_1002CCF14(v44, v39);
      v46 = sub_10001A6DC(v37, *((uint64_t *)&v37 + 1));
      if ((v45 & 1) != (v47 & 1))
        goto LABEL_116;
      v41 = v46;
    }
    v48 = (_QWORD *)v180;
    v176 = v180;
    if ((v45 & 1) != 0)
    {
      v23 = (_QWORD *)(*(_QWORD *)(v180 + 56) + 16 * v41);
      swift_bridgeObjectRelease(v23[1]);
      *v23 = v34;
      v23[1] = v35;
    }
    else
    {
      *(_QWORD *)(v180 + 8 * (v41 >> 6) + 64) |= 1 << v41;
      *(_OWORD *)(v48[6] + 16 * v41) = v37;
      v49 = (_QWORD *)(v48[7] + 16 * v41);
      *v49 = v34;
      v49[1] = v35;
      v50 = v48[2];
      v26 = __OFADD__(v50, 1);
      v51 = v50 + 1;
      if (v26)
        goto LABEL_108;
      v48[2] = v51;
      swift_bridgeObjectRetain(*((_QWORD *)&v37 + 1));
    }
    swift_bridgeObjectRelease(*((_QWORD *)&v37 + 1));
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v28 = v18 + 1;
  if (v18 + 1 >= v174)
    goto LABEL_35;
  v27 = *(_QWORD *)(v173 + 8 * v28);
  if (v27)
    goto LABEL_20;
  v28 = v18 + 2;
  if (v18 + 2 >= v174)
    goto LABEL_35;
  v27 = *(_QWORD *)(v173 + 8 * v28);
  if (v27)
    goto LABEL_20;
  v28 = v18 + 3;
  if (v18 + 3 >= v174)
    goto LABEL_35;
  v27 = *(_QWORD *)(v173 + 8 * v28);
  if (v27)
  {
LABEL_20:
    v18 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v18 >= v174)
      goto LABEL_35;
    v27 = *(_QWORD *)(v173 + 8 * v18);
    ++v28;
    if (v27)
      goto LABEL_21;
  }
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  _Block_release(v162);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10010D688(void (**a1)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  Class isa;
  uint64_t v42;
  int64_t v43;
  int64_t v44;
  __int128 v45;
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  __int128 v49;

  if (qword_100836D08 != -1)
LABEL_48:
    swift_once(&qword_100836D08, sub_1000F53D4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001AAA8(v1, (uint64_t)qword_10083AC30);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDXPCDebugPerformer: dumpUbKVS initiated", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  if (qword_100837148 != -1)
    swift_once(&qword_100837148, sub_1003080F0);
  v7 = objc_msgSend(*(id *)(static RDSynchronizedKeyValueStore.default + 16), "dictionaryRepresentation");
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v42 = v8 + 64;
  v9 = 1 << *(_BYTE *)(v8 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v8 + 64);
  v43 = (unint64_t)(v9 + 63) >> 6;
  v44 = 0;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v44 << 6);
LABEL_13:
      v15 = *(_QWORD *)(v8 + 56);
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      v17 = v16[1];
      *(_QWORD *)&v45 = *v16;
      *((_QWORD *)&v45 + 1) = v17;
      sub_10001A670(v15 + 32 * v14, (uint64_t)v46);
      swift_bridgeObjectRetain(v17);
      goto LABEL_32;
    }
    v18 = v44 + 1;
    if (__OFADD__(v44, 1))
      goto LABEL_47;
    if (v18 < v43)
    {
      v19 = *(_QWORD *)(v42 + 8 * v18);
      if (v19)
        goto LABEL_17;
      v20 = v44 + 2;
      ++v44;
      if (v18 + 1 < v43)
      {
        v19 = *(_QWORD *)(v42 + 8 * v20);
        if (v19)
          goto LABEL_20;
        v44 = v18 + 1;
        if (v18 + 2 < v43)
        {
          v19 = *(_QWORD *)(v42 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_17;
          }
          v20 = v18 + 3;
          v44 = v18 + 2;
          if (v18 + 3 < v43)
            break;
        }
      }
    }
LABEL_31:
    v11 = 0;
    memset(v46, 0, sizeof(v46));
    v45 = 0u;
LABEL_32:
    sub_1000A5CA8((uint64_t)&v45, (uint64_t)&v47, &qword_10083AE98);
    v21 = v48;
    if (!v48)
    {
      swift_release(v8);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      ((void (**)(_QWORD, Class, _QWORD))a1)[2](a1, isa, 0);
      swift_bridgeObjectRelease(v6);

      return;
    }
    v22 = v47;
    sub_10001A6CC(&v49, &v45);
    v23 = String.init<A>(describing:)(&v45, (char *)&type metadata for Any + 8);
    v25 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    *(_QWORD *)&v45 = v6;
    v28 = sub_10001A6DC(v22, v21);
    v29 = v6[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v32 = v27;
    if (v6[3] >= v31)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v6 = (_QWORD *)v45;
        if ((v27 & 1) != 0)
          goto LABEL_9;
      }
      else
      {
        sub_1002D6574();
        v6 = (_QWORD *)v45;
        if ((v32 & 1) != 0)
          goto LABEL_9;
      }
    }
    else
    {
      sub_1002CCF14(v31, isUniquelyReferenced_nonNull_native);
      v33 = sub_10001A6DC(v22, v21);
      if ((v32 & 1) != (v34 & 1))
        goto LABEL_50;
      v28 = v33;
      v6 = (_QWORD *)v45;
      if ((v32 & 1) != 0)
      {
LABEL_9:
        v12 = (uint64_t *)(v6[7] + 16 * v28);
        swift_bridgeObjectRelease(v12[1]);
        *v12 = v23;
        v12[1] = v25;
        goto LABEL_10;
      }
    }
    v6[(v28 >> 6) + 8] |= 1 << v28;
    v35 = (uint64_t *)(v6[6] + 16 * v28);
    *v35 = v22;
    v35[1] = v21;
    v36 = (uint64_t *)(v6[7] + 16 * v28);
    *v36 = v23;
    v36[1] = v25;
    v37 = v6[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_46;
    v6[2] = v39;
    swift_bridgeObjectRetain(v21);
LABEL_10:
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v19 = *(_QWORD *)(v42 + 8 * v20);
  if (v19)
  {
LABEL_20:
    v18 = v20;
LABEL_17:
    v11 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v18 << 6);
    v44 = v18;
    goto LABEL_13;
  }
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v43)
    {
      v44 = v43 - 1;
      goto LABEL_31;
    }
    v19 = *(_QWORD *)(v42 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_17;
  }
  __break(1u);
LABEL_50:
  _Block_release(a1);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010DB5C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_10083AC30);
  sub_100008868(a3, (uint64_t)v21, (uint64_t *)&unk_10083D5B0);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v20 = v13;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain(a2);
    v19 = sub_10001A820(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v12 + 12) = 2080;
    v14 = sub_10001A630((uint64_t *)&unk_10083D5B0);
    v15 = Optional.descriptionOrNil.getter(v14);
    v17 = v16;
    v19 = sub_10001A820(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease(v17);
    sub_10000882C((uint64_t)v21, (uint64_t *)&unk_10083D5B0);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: writeUbKVS initiated {key: %s, value: %s}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    sub_10000882C((uint64_t)v21, (uint64_t *)&unk_10083D5B0);
  }

  if (qword_100837148 != -1)
    swift_once(&qword_100837148, sub_1003080F0);
  sub_1004A58D8(a3);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 16))(a4, 0);
}

uint64_t sub_10010DDD8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  NSString v13;
  uint64_t v15;
  uint64_t v16;

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_10083AC30);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v16 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(a2);
    v15 = sub_10001A820(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDXPCDebugPerformer: removeFromUbKVS initiated {key: %s}", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  if (qword_100837148 != -1)
    swift_once(&qword_100837148, sub_1003080F0);
  v12 = *(void **)(static RDSynchronizedKeyValueStore.default + 16);
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "removeObjectForKey:", v13);

  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
}

uint64_t sub_10010DFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  unsigned int v10;
  id v11;
  id v12;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject **v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  NSObject *v32;
  id v33[2];
  id v34;

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_10083AC30);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDXPCDebugPerformer: nukeDatabase initiated", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = *(void **)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v34 = 0;
  v10 = objc_msgSend(v9, "nukeDataWithError:", &v34);
  v11 = v34;
  if (v10)
  {
    v12 = v34;
    sub_100279E94();
    return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
  }
  else
  {
    v14 = v34;
    v15 = (void *)_convertNSErrorToError(_:)(v11);

    swift_willThrow(v16);
    v34 = v15;
    v17 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v18 = sub_1000151B0(0, &qword_10083AE30, NSError_ptr);
    swift_dynamicCast(v33, &v34, v17, v18, 0);
    v19 = v33[0];
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v22 = 138412290;
      v32 = v19;
      v24 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33);
      *v23 = v19;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDXPCDebugPerformer: Failed to nuke database {error: %@}", v22, 0xCu);
      v25 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v23, 1, v25);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {

      v20 = v19;
    }

    v26 = (void *)objc_opt_self(REMError);
    v27 = v19;
    v28 = (void *)_convertErrorToNSError(_:)(v27);

    v29 = objc_msgSend(v26, "errorSanitizedForXPCFromError:", v28);
    v30 = v29;
    v31 = (void *)_convertErrorToNSError(_:)(v30);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v31);

    return swift_errorRelease(v34);
  }
}

void sub_10010E348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  Class isa;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  v5 = (void *)_convertErrorToNSError(_:)(a1);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_10083AC30);
  v7 = v5;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = a3;
    v24 = v7;
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    *v11 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDXPCDebugPerformer: Failed testInitialSync {error: %@}", v10, 0xCu);
    v13 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v11, 1, v13);
    v14 = v11;
    a3 = v23;
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v15 = (void *)objc_opt_self(REMError);
  v16 = v7;
  v17 = (void *)_convertErrorToNSError(_:)(v16);

  v18 = objc_msgSend(v15, "errorSanitizedForXPCFromError:", v17);
  swift_beginAccess(a2 + 16, &v24, 0, 0);
  v19 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v19);
  v20 = v18;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v22 = (void *)_convertErrorToNSError(_:)(v20);
  (*(void (**)(uint64_t, _QWORD, Class, void *))(a3 + 16))(a3, 0, isa, v22);

  swift_bridgeObjectRelease(v19);
}

uint64_t sub_10010E5C0(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v17[10];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v18 = a2;
  v7 = swift_allocObject(&unk_1007E4D18, 24, 7);
  *(_QWORD *)(v7 + 16) = a4;
  _Block_copy(a4);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001AAA8(v8, (uint64_t)qword_10083AC30);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: testInitialSync initiated", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = swift_allocObject(&unk_1007E4D40, 24, 7);
  *(_QWORD *)(v13 + 16) = &_swiftEmptyDictionarySingleton;
  v14 = (_QWORD *)swift_allocObject(&unk_1007E4D68, 40, 7);
  v14[2] = sub_100118B40;
  v14[3] = v7;
  v14[4] = v13;
  v15 = (_QWORD *)swift_allocObject(&unk_1007E4D90, 40, 7);
  v15[2] = sub_100118B40;
  v15[3] = v7;
  v15[4] = v13;
  v19 = xmmword_1006A8990;
  v21 = 0;
  v22[0] = 0;
  v20 = 0;
  *(_QWORD *)((char *)v22 + 6) = 0;
  v17[2] = a1;
  v17[3] = v18;
  v17[4] = a3;
  v17[5] = v13;
  v17[6] = sub_100118B70;
  v17[7] = v14;
  v17[8] = sub_100118BAC;
  v17[9] = __chkstk_darwin(v15);
  swift_retain_n(v7, 2);
  swift_retain_n(v13, 2);
  sub_10035288C((uint64_t)&v19, (uint64_t)sub_100118BB8, (uint64_t)v17);
  swift_release(v7);
  swift_release(v13);
  swift_release(v15);
  return swift_release(v14);
}

void sub_10010E85C(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;

  if (a1)
  {
    v3 = (void *)_convertErrorToNSError(_:)(a1);
    if (qword_100836D08 != -1)
      swift_once(&qword_100836D08, sub_1000F53D4);
    v4 = type metadata accessor for Logger(0);
    sub_10001AAA8(v4, (uint64_t)qword_10083AC30);
    v5 = v3;
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      v18 = v5;
      v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      *v9 = v5;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDXPCDebugPerformer: Failed testReinitializeCloudKit {error: %@}", v8, 0xCu);
      v11 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

    }
    v12 = (void *)objc_opt_self(REMError);
    v13 = v5;
    v14 = (void *)_convertErrorToNSError(_:)(v13);

    v15 = objc_msgSend(v12, "errorSanitizedForXPCFromError:", v14);
    v16 = v15;
    v17 = (void *)_convertErrorToNSError(_:)(v16);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v17);

  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
  }
}

void sub_10010EAA0(uint64_t a1, void *a2, void *a3, const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  NSString v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t v41;
  NSString v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  id v52;
  char *v53;
  void *v54;
  char *v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  void *v60;
  unint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  id v63;
  id v64;
  char *v65;
  id v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void **aBlock;
  unint64_t v74;
  void (*v75)(uint64_t, uint64_t, void *);
  void *v76;
  uint64_t (*v77)(char, void *);
  char *v78;

  v66 = a3;
  v71 = a1;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v65 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v67 = (char *)&v61 - v13;
  v70 = swift_allocObject(&unk_1007E4BD8, 24, 7);
  *(_QWORD *)(v70 + 16) = a4;
  _Block_copy(a4);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v64 = v8;
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_10083AC30);
  v15 = swift_bridgeObjectRetain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v68 = v10;
  v69 = v9;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = (void **)swift_slowAlloc(32, -1);
    aBlock = v20;
    *(_DWORD *)v19 = 136446210;
    swift_bridgeObjectRetain(a2);
    v21 = v71;
    v72 = sub_10001A820(v71, (unint64_t)a2, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &aBlock);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDXPCDebugPerformer: testReinitializeCloudKit initiated {accountIdentifier: %{public}s}", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    v21 = v71;
  }
  v22 = swift_allocObject(&unk_1007E4C00, 32, 7);
  v23 = v70;
  *(_QWORD *)(v22 + 16) = sub_100119B24;
  *(_QWORD *)(v22 + 24) = v23;
  v24 = (void *)objc_opt_self(REMAppleAccountUtilities);
  swift_retain();
  v25 = objc_msgSend(v24, "sharedInstance");
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v25, "unsafeUntilSystemReady_icloudACAccountMatchingAccountIdentifier:", v26);

  if (!v27)
    goto LABEL_13;
  v28 = objc_msgSend(v27, "displayAccount");
  if (!v28)
    goto LABEL_13;
  v29 = v28;
  v30 = objc_msgSend(v28, "identifier");
  if (!v30)
  {

    goto LABEL_12;
  }
  v63 = v30;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;
  v34 = (uint64_t)v64;
  UUID.init(uuidString:)(v31, v32);
  v35 = swift_bridgeObjectRelease(v33);
  v36 = v69;
  v37 = v68;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v68 + 48))(v34, 1, v69, v35) == 1)
  {

    sub_10000882C(v34, (uint64_t *)&unk_100839C80);
LABEL_12:
    v23 = v70;
    v21 = v71;
LABEL_13:
    v38 = (void *)objc_opt_self(REMError);
    aBlock = 0;
    v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v39._object = (void *)0x80000001006F8890;
    v39._countAndFlagsBits = 0xD000000000000040;
    String.append(_:)(v39);
    v40._countAndFlagsBits = v21;
    v40._object = a2;
    String.append(_:)(v40);
    v41 = v74;
    v42 = String._bridgeToObjectiveC()();
    v43 = objc_msgSend(v38, "internalErrorWithDebugDescription:", v42, swift_bridgeObjectRelease(v41).n128_f64[0]);

    _Block_copy(a4);
    v44 = v43;
    sub_10010E85C((uint64_t)v43, (uint64_t)a4);
    _Block_release(a4);
    swift_release(v23);
    swift_release(v22);

    return;
  }
  v62 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
  v62(v67, v34, v36);
  v64 = objc_msgSend(v25, "accountStore");
  v45 = swift_allocObject(&unk_1007E4C28, 24, 7);
  *(_QWORD *)(v45 + 16) = 0;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v65, v67, v36);
  v46 = *(unsigned __int8 *)(v37 + 80);
  v47 = v36;
  v48 = (v46 + 56) & ~v46;
  v61 = (v11 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
  v50 = (char *)swift_allocObject(&unk_1007E4C50, v49 + 16, v46 | 7);
  *((_QWORD *)v50 + 2) = v29;
  *((_QWORD *)v50 + 3) = v45;
  *((_QWORD *)v50 + 4) = sub_100118848;
  *((_QWORD *)v50 + 5) = v22;
  v51 = v65;
  *((_QWORD *)v50 + 6) = v66;
  v62(&v50[v48], (uint64_t)v51, v47);
  v52 = v63;
  *(_QWORD *)&v50[v61] = v63;
  v53 = &v50[v49];
  *(_QWORD *)v53 = v71;
  *((_QWORD *)v53 + 1) = a2;
  v77 = sub_100118930;
  v78 = v50;
  aBlock = _NSConcreteStackBlock;
  v74 = 1107296256;
  v75 = sub_1001BCC34;
  v76 = &unk_1007E4C68;
  v54 = _Block_copy(&aBlock);
  v55 = v78;
  swift_bridgeObjectRetain(a2);
  v56 = v29;
  v57 = v45;
  swift_retain();
  swift_retain();
  v58 = v66;
  v59 = v52;
  swift_release(v55);
  v60 = v64;
  objc_msgSend(v25, "_unsetMigrationFlagsWithACAccount:inStore:completionHandler:", v56, v64, v54);
  _Block_release(v54);

  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
  swift_release(v70);
  swift_release(v57);
}

void sub_10010F0F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSString v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  _QWORD *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  NSString v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  Class isa;
  NSObject *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  _QWORD *v44;
  NSObject *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t Strong;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  objc_class *v55;
  uint64_t ObjectType;
  uint64_t v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  id v64;
  objc_class *v65;
  char *v66;
  id v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  NSObject *v76;
  uint64_t v77;
  id v79;
  objc_super v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD v85[3];
  _QWORD v86[3];

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_10083AC30);
  v8 = swift_bridgeObjectRetain_n(a2, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v84 = v12;
    *(_DWORD *)v11 = 136446210;
    swift_bridgeObjectRetain(a2);
    v81 = sub_10001A820(a1, (unint64_t)a2, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration initiated {accountIdentifier: %{public}s}", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v13 = (void *)objc_opt_self(REMAppleAccountUtilities);
  v14 = objc_msgSend(v13, "sharedInstance");
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "unsafeUntilSystemReady_icloudACAccountMatchingAccountIdentifier:", v15);

  v79 = v16;
  if (!v16)
    goto LABEL_12;
  v17 = objc_msgSend(v16, "displayAccount");
  if (!v17)
    goto LABEL_12;
  v18 = v17;
  v19 = objc_msgSend(v17, "identifier");
  if (!v19)
  {

LABEL_12:
    v25 = (void *)objc_opt_self(REMError);
    v84 = 0;
    v85[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(116);
    v26._countAndFlagsBits = 0xD000000000000072;
    v26._object = (void *)0x80000001006F8740;
    String.append(_:)(v26);
    v27._countAndFlagsBits = a1;
    v27._object = a2;
    String.append(_:)(v27);
    v28 = v85[0];
    v29 = String._bridgeToObjectiveC()();
    v30 = objc_msgSend(v25, "internalErrorWithDebugDescription:", v29, swift_bridgeObjectRelease(v28).n128_f64[0]);

    v31 = v30;
    v32 = (void *)_convertErrorToNSError(_:)(v31);
    (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v32);

    return;
  }
  v20 = v19;
  v21 = (void *)objc_opt_self(REMUserDefaults);
  v22 = objc_msgSend(v21, "daemonUserDefaults");
  v23 = objc_msgSend(v22, "acAccountIdentifiersToMigrateInactivatedCalDavData");

  v74 = v13;
  if (v23)
  {
    v24 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for String);

  }
  else
  {
    v24 = _swiftEmptyArrayStorage;
  }
  v33 = sub_10011EE40((uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  v83 = v33;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  sub_1002DB0E4((uint64_t *)&v84, v34, v35);
  v36 = objc_msgSend(v21, "daemonUserDefaults", swift_bridgeObjectRelease(v85[0]).n128_f64[0]);
  v37 = v83;
  v38 = sub_1001E8BAC(v83);
  swift_bridgeObjectRelease(v37);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v38);
  objc_msgSend(v36, "setAcAccountIdentifiersToMigrateInactivatedCalDavData:", isa);

  v40 = v20;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  v76 = v40;
  v77 = a4;
  v73 = v21;
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v72 = v14;
    v44 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v43 = 138543362;
    v84 = (unint64_t)v40;
    v45 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
    *v44 = v20;

    v46 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v44, 1, v46);
    v47 = v44;
    v14 = v72;
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {

    v41 = v40;
  }

  v48 = a3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon;
  Strong = swift_unknownObjectWeakLoadStrong(a3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon, v49);
  v51 = *(_QWORD *)(v48 + 8);
  v81 = Strong;
  v82 = v51;
  v52 = sub_10001A630(&qword_10083AE78);
  Optional.tryUnwrap(_:file:line:)(&v84, 0xD000000000000015, 0x80000001006F87C0, 0xD000000000000069, 0x80000001006F79E0, 517, v52);
  swift_unknownObjectRelease(Strong);
  v75 = v18;
  v54 = v84;
  v53 = v85[0];
  v55 = (objc_class *)type metadata accessor for RDDaemonController();
  v84 = 0xD000000000000030;
  v85[0] = 0x80000001006F8850;
  v85[2] = 0;
  v86[0] = 0;
  v85[1] = 0;
  *(_QWORD *)((char *)v86 + 6) = 0;
  ObjectType = swift_getObjectType(v54);
  swift_unknownObjectRetain(v54);
  v58 = sub_1004AD610(v57, (uint64_t)&v84, 0, v55, ObjectType, v53);
  v59 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", v58);
  v60 = *(void **)(a3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v61 = v59;
  v62 = v60;
  v63 = objc_msgSend(v74, "sharedInstance");
  v64 = objc_msgSend(v73, "daemonUserDefaults");
  v65 = (objc_class *)type metadata accessor for RDAccountInitializer();
  v66 = (char *)objc_allocWithZone(v65);
  *(_QWORD *)&v66[OBJC_IVAR____TtC7remindd20RDAccountInitializer_store] = v61;
  *(_QWORD *)&v66[OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController] = v62;
  *(_QWORD *)&v66[OBJC_IVAR____TtC7remindd20RDAccountInitializer_appleAccountUtilities] = v63;
  *(_QWORD *)&v66[OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults] = v64;
  v80.receiver = v66;
  v80.super_class = v65;
  v67 = objc_msgSendSuper2(&v80, "init");
  sub_1003AA80C();

  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.default.getter(v69);
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v71 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration called initializeAllAccounts()", v71, 2u);
    swift_slowDealloc(v71, -1, -1);
    swift_unknownObjectRelease(v54);

  }
  else
  {

    swift_unknownObjectRelease(v54);
  }
  (*(void (**)(uint64_t, _QWORD))(v77 + 16))(v77, 0);

}

void sub_10010F9AC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  void *v26;
  NSString v27;
  id v28;
  void *v29;
  NSString v30;
  NSString v31;
  _QWORD *v32;
  os_log_type_t type;
  id v34;
  id v35;
  uint64_t v36;
  id v37;

  v7 = *(void **)(a3 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v8 = objc_msgSend(v7, "cloudContext");
  if (!v8)
  {
    v26 = (void *)objc_opt_self(REMError);
    v27 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend(v26, "internalErrorWithDebugDescription:", v27);

    v35 = (id)_convertErrorToNSError(_:)(v28);
    (*(void (**)(uint64_t, id))(a4 + 16))(a4, v35);
LABEL_9:

    return;
  }
  v9 = v8;
  if ((objc_msgSend(v7, "supportsSyncingToCloudKit") & 1) == 0)
  {
    v29 = (void *)objc_opt_self(REMError);
    v30 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend(v29, "internalErrorWithDebugDescription:", v30);

    v35 = (id)_convertErrorToNSError(_:)(v28);
    (*(void (**)(uint64_t, id))(a4 + 16))(a4, v35);

    goto LABEL_9;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Reminders"));
  v11 = v10;
  static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v13 = v12;
  v14 = objc_allocWithZone((Class)CKRecordZoneID);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v14, "initWithZoneName:ownerName:databaseScope:", v15, v16, 2, swift_bridgeObjectRelease(v13).n128_f64[0]);

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_10083AC30);
  swift_bridgeObjectRetain_n(a2, 2);
  v19 = v17;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    type = v21;
    v22 = swift_slowAlloc(22, -1);
    v32 = (_QWORD *)swift_slowAlloc(8, -1);
    v34 = (id)swift_slowAlloc(32, -1);
    v37 = v34;
    *(_DWORD *)v22 = 136315394;
    swift_bridgeObjectRetain(a2);
    v36 = sub_10001A820(a1, a2, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v22 + 12) = 2112;
    v36 = (uint64_t)v19;
    v23 = v20;
    v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    *v32 = v19;

    _os_log_impl((void *)&_mh_execute_header, v23, type, "RDXPCDebugPerformer.retryAccountZoneIDsNeedingToBeSaved: {accountID: %s, zoneID: %@}", (uint8_t *)v22, 0x16u);
    v25 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v32, 1, v25);
    swift_slowDealloc(v32, -1, -1);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "debug_retryAccountZoneIDsNeedingToBeSavedWithZoneID:accountID:", v19, v31);

  (*(void (**)(uint64_t, _QWORD))(a4 + 16))(a4, 0);
}

void sub_10010FE34(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  void *v5;
  NSString *(__cdecl **v6)(SEL);
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  NSString v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void **v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void ***v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void ***v26;
  void *v27;
  void **v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void (**v34)(_QWORD, _QWORD);
  void **aBlock;
  _QWORD v36[4];
  uint64_t v37;

  v4 = swift_allocObject(&unk_1007E4B60, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  v5 = *(void **)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  _Block_copy(a2);
  v6 = &NSStringFromSelector_ptr;
  if (objc_msgSend(v5, "supportsSyncingToCloudKit")
    && (v7 = objc_msgSend(v5, "cloudContext")) != 0)
  {
    v8 = v7;
    v9 = swift_allocObject(&unk_1007E4B88, 32, 7);
    *(_QWORD *)(v9 + 16) = sub_100119B24;
    *(_QWORD *)(v9 + 24) = v4;
    v36[3] = sub_100118824;
    v37 = v9;
    aBlock = _NSConcreteStackBlock;
    v36[0] = 1107296256;
    v36[1] = sub_1000094C8;
    v36[2] = &unk_1007E4BA0;
    v10 = _Block_copy(&aBlock);
    v11 = v37;
    swift_retain();
    swift_release(v11);
    objc_msgSend(v8, "cancelEverythingWithCompletionHandler:", v10);
    _Block_release(v10);
    swift_release(v4);

  }
  else
  {
    v12 = (void *)objc_opt_self(REMError);
    v13 = String._bridgeToObjectiveC()();
    v14 = objc_msgSend(v12, "internalErrorWithDebugDescription:", v13);

    swift_willThrow(v15);
    v16 = (void *)_convertErrorToNSError(_:)(v14);
    if (qword_100836D08 != -1)
      swift_once(&qword_100836D08, sub_1000F53D4);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10083AC30);
    v18 = v16;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = v14;
      v22 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138412290;
      aBlock = v18;
      v34 = a2;
      v23 = v4;
      v24 = v18;
      v6 = &NSStringFromSelector_ptr;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v36);
      *v22 = v18;

      v4 = v23;
      a2 = v34;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDXPCDebugPerformer: Failed cancelCloudKitSync {error: %@}", v21, 0xCu);
      v25 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v22, 1, v25);
      v26 = v22;
      v14 = v33;
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

    }
    v27 = (void *)objc_opt_self(v6[252]);
    v28 = v18;
    v29 = (void *)_convertErrorToNSError(_:)(v28);

    v30 = objc_msgSend(v27, "errorSanitizedForXPCFromError:", v29);
    v31 = v30;
    v32 = (void *)_convertErrorToNSError(_:)(v31);
    ((void (**)(_QWORD, void *))a2)[2](a2, v32);

    swift_errorRelease(v14);
    swift_release(v4);
  }
}

void sub_100110204(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  NSString v20;
  NSDictionary v21;
  id v22;
  id v23;
  Class isa;

  v3 = *(void **)(a1 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  if (!objc_msgSend(v3, "supportsSyncingToCloudKit")
    || (v4 = objc_msgSend(v3, "cloudContext")) == 0)
  {
    v22 = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, id, _QWORD, _QWORD))(a2 + 16))(a2, v22, 0, 0);

    return;
  }
  v5 = v4;
  if ((objc_msgSend(v4, "isCloudKitAccountAvailableRequiringActive:", 0) & 1) == 0
    || (objc_msgSend(v5, "isCloudKitAccountAvailableRequiringActive:", 1) & 1) == 0)
  {
    v23 = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, id, _QWORD, _QWORD))(a2 + 16))(a2, v23, 0, 0);

    return;
  }
  v6 = objc_msgSend(v5, "status");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v8 = v7;

  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = 10;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10 = v8;
  v11 = objc_msgSend(v5, "readinessLoggingDescription");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  swift_bridgeObjectRetain(v10);
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  v16 = v10;
  v17 = objc_msgSend(v5, "lastSyncMetrics");
  v18 = v17;
  if (v17)
  {
    v19 = objc_msgSend(v17, "dictionaryRepresentation");

    v18 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String, &type metadata for String, &protocol witness table for String);
    v20 = String._bridgeToObjectiveC()();
    if (v18)
    {
      v21.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      goto LABEL_12;
    }
  }
  else
  {
    v20 = String._bridgeToObjectiveC()();
  }
  v21.super.isa = 0;
LABEL_12:
  isa = v21.super.isa;
  (*(void (**)(uint64_t, NSString, Class, _QWORD))(a2 + 16))(a2, v20, v21.super.isa, 0);

  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v16);

}

void sub_1001104F8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint8_t *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;

  v32 = a3;
  v33 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_10083AC30);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v30 = a2;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (_QWORD *)swift_slowAlloc(8, -1);
    v31 = v7;
    v29 = v12;
    *(_DWORD *)v12 = 138412290;
    v34 = v9;
    v14 = v9;
    a2 = v30;
    v7 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    *v13 = v9;

    v15 = v29;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: persistenceStoreID for {accountID: %@}", v29, 0xCu);
    v16 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v13, 1, v16);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  v17 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v18 = objc_msgSend(v9, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  UUID.uuidString.getter(v19);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v33);
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v17, "storeForAccountIdentifier:", v22, swift_bridgeObjectRelease(v21).n128_f64[0]);

  if (v23 && (v24 = objc_msgSend(v23, "identifier")) != 0)
  {
    v25 = v24;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v28 = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, NSString))(v32 + 16))(v32, v28);
    swift_bridgeObjectRelease(v27);

    v23 = v28;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v32 + 16))(v32, 0);
  }

}

uint64_t sub_1001107F0(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD v8[3];
  char v9;
  char v10;
  char v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v12[0] = 0xD000000000000023;
  v12[1] = 0x80000001006F85D0;
  v12[3] = 0;
  v13[0] = 0;
  v12[2] = 0;
  *(_QWORD *)((char *)v13 + 6) = 0;
  v8[2] = a1;
  v9 = a2 & 1;
  v10 = a4;
  v11 = a3;
  sub_10035288C((uint64_t)v12, (uint64_t)sub_100118580, (uint64_t)v8);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);
}

void sub_1001108CC(void *a1, char a2, char a3, uint64_t a4, void *aBlock)
{
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  _Block_copy(aBlock);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_10083AC30);
  v11 = a1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v20 = (_QWORD *)swift_slowAlloc(8, -1);
    v21 = swift_slowAlloc(32, -1);
    v24 = v21;
    *(_DWORD *)v14 = 136446466;
    v15 = Bool.yesno.getter(a2 & 1);
    v22 = a3;
    v17 = v16;
    v23 = sub_10001A820(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2114;
    v23 = (uint64_t)v11;
    v18 = v11;
    a3 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    *v20 = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDXPCDebugPerformer: lowLevelMarkForDeletion {shouldSetDirtyFlags: %{public}s, objectID: %{public}@}", (uint8_t *)v14, 0x16u);
    v19 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v20, 1, v19);
    swift_slowDealloc(v20, -1, -1);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  _Block_copy(aBlock);
  sub_1001107F0((uint64_t)v11, 0, a2 & 1, a3 & 1, a4, (uint64_t)aBlock);
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_100110B48(void *a1, char a2, uint64_t a3, void *aBlock)
{
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  _Block_copy(aBlock);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_10083AC30);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    v19 = swift_slowAlloc(32, -1);
    v22 = v19;
    *(_DWORD *)v12 = 136446466;
    v13 = Bool.yesno.getter(a2 & 1);
    v20 = a3;
    v15 = v14;
    v21 = sub_10001A820(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v12 + 12) = 2114;
    v21 = (uint64_t)v9;
    v16 = v9;
    a3 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    *v18 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: lowLevelUnmarkForDeletion {shouldSetDirtyFlags: %{public}s, objectID: %{public}@}", (uint8_t *)v12, 0x16u);
    v17 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v18, 1, v17);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  _Block_copy(aBlock);
  sub_1001107F0((uint64_t)v9, 1, a2 & 1, 0, a3, (uint64_t)aBlock);
  _Block_release(aBlock);
  _Block_release(aBlock);
}

uint64_t sub_100110DB8(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[4];
  _QWORD v30[2];

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_10083AC30);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = (_QWORD *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v29[0] = v24;
    *(_DWORD *)v12 = 138543618;
    v26 = a4;
    v27 = (uint64_t)v9;
    v25 = a3;
    v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    *v13 = v9;

    *(_WORD *)(v12 + 12) = 2082;
    v15 = Bool.yesno.getter(a2 & 1);
    v17 = v16;
    v27 = sub_10001A820(v15, v16, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    v18 = v17;
    a4 = v26;
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: markAndDeleteExtraneousAlarmsFromReminderID {reminderID: %{public}@, shouldSetDirtyFlags: %{public}s}", (uint8_t *)v12, 0x16u);
    v19 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v13, 1, v19);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  v29[0] = 0xD00000000000002BLL;
  v29[1] = 0x80000001006F84F0;
  v29[3] = 0;
  v30[0] = 0;
  v29[2] = 0;
  *(_QWORD *)((char *)v30 + 6) = 0;
  __chkstk_darwin(v20);
  v22[2] = v9;
  v23 = a2 & 1;
  sub_10035288C((uint64_t)v29, (uint64_t)sub_100118564, (uint64_t)v22);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 16))(a4, 0);
}

uint64_t sub_1001110A8(void *a1, char a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[4];
  char v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[4];
  _QWORD v45[2];

  v41 = a3;
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_10083AC30);
  v18 = a1;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v37 = a6;
    v21 = swift_slowAlloc(22, -1);
    v39 = a8;
    v22 = (_QWORD *)swift_slowAlloc(8, -1);
    v36 = swift_slowAlloc(32, -1);
    v44[0] = v36;
    *(_DWORD *)v21 = 138543618;
    v38 = a7;
    v42 = (uint64_t)v18;
    v40 = a4;
    v35 = a5;
    v23 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
    *v22 = v18;

    *(_WORD *)(v21 + 12) = 2082;
    v24 = Bool.yesno.getter(a2 & 1);
    v26 = v25;
    v42 = sub_10001A820(v24, v25, v44);
    a4 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
    v27 = v26;
    a7 = v38;
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v35, (uint8_t *)v21, 0x16u);
    v28 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v22, 1, v28);
    v29 = v22;
    a8 = v39;
    swift_slowDealloc(v29, -1, -1);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    v30 = v21;
    a6 = v37;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

  }
  v44[0] = a6;
  v44[1] = a7;
  v44[3] = 0;
  v45[0] = 0;
  v44[2] = 0;
  *(_QWORD *)((char *)v45 + 6) = 0;
  __chkstk_darwin(v31);
  v33[2] = v18;
  *(double *)&v33[3] = a9;
  v34 = a2 & 1;
  sub_10035288C((uint64_t)v44, a8, (uint64_t)v33);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 16))(a4, 0);
}

double sub_1001113BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSString *v7;
  id v8;
  void *v9;
  id v10;
  NSString *v11;
  NSString *v12;
  NSString *v13;
  NSString *v14;
  NSString *v15;
  NSString *v16;
  id v17;
  Class isa;
  id v19;
  void *v20;
  NSString v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  unsigned __int8 v29;
  id v30;
  id v31;
  char isEscapingClosureAtFileLocation;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  Class v36;
  _QWORD *v37;
  double result;
  id v40;
  id aBlock[5];
  uint64_t v42;
  _QWORD *v43;

  v40 = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
  v4 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v5 = swift_allocObject(v4, 104, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A89A0;
  *(_QWORD *)(v5 + 32) = CNContactIdentifierKey;
  v6 = (void *)objc_opt_self(CNContactFormatter);
  v7 = CNContactIdentifierKey;
  v8 = objc_msgSend(v6, "descriptorForRequiredKeysForStyle:", 0);
  *(_QWORD *)(v5 + 40) = v8;
  *(_QWORD *)(v5 + 48) = CNContactEmailAddressesKey;
  *(_QWORD *)(v5 + 56) = CNContactPhoneNumbersKey;
  *(_QWORD *)(v5 + 64) = CNContactTypeKey;
  *(_QWORD *)(v5 + 72) = CNContainerIdentifierKey;
  *(_QWORD *)(v5 + 80) = CNContainerNameKey;
  v9 = (void *)CNContactLinkIdentifierKey;
  *(_QWORD *)(v5 + 88) = CNContainerTypeKey;
  *(_QWORD *)(v5 + 96) = v9;
  aBlock[0] = (id)v5;
  specialized Array._endMutation()(v8);
  v43 = _swiftEmptyArrayStorage;
  v10 = objc_allocWithZone((Class)CNContactFetchRequest);
  v11 = CNContactEmailAddressesKey;
  v12 = CNContactPhoneNumbersKey;
  v13 = CNContactTypeKey;
  v14 = CNContainerIdentifierKey;
  v15 = CNContainerNameKey;
  v16 = CNContainerTypeKey;
  v17 = v9;
  sub_10001A630(&qword_10083AE48);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(v10, "initWithKeysToFetch:", isa, swift_bridgeObjectRelease(v5).n128_f64[0]);

  if (a2)
  {
    v20 = (void *)objc_opt_self(CNContact);
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "predicateForContactsMatchingName:", v21);

    objc_msgSend(v19, "setPredicate:", v22);
  }
  v23 = objc_msgSend(objc_allocWithZone((Class)CNContactFormatter), "init");
  objc_msgSend(v23, "setStyle:", 0);
  v24 = swift_allocObject(&unk_1007E4750, 32, 7);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = &v43;
  v25 = swift_allocObject(&unk_1007E4778, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10011850C;
  *(_QWORD *)(v25 + 24) = v24;
  aBlock[4] = sub_1000098EC;
  v42 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000FD088;
  aBlock[3] = &unk_1007E4790;
  v26 = _Block_copy(aBlock);
  v27 = v42;
  v28 = v23;
  swift_retain();
  swift_release(v27);
  aBlock[0] = 0;
  v29 = objc_msgSend(v40, "enumerateContactsWithFetchRequest:error:usingBlock:", v19, aBlock, v26);
  _Block_release(v26);
  v30 = aBlock[0];
  v31 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v25, "", 105, 835, 60, 1);
  swift_release(v25);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if ((v29 & 1) == 0)
  {
    v33 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v34);
    swift_errorRelease(v33);
  }
  v35 = v43;
  swift_bridgeObjectRetain(v43);
  v36 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v36);

  swift_bridgeObjectRelease(v35);
  v37 = v43;
  swift_release(v24);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v37).n128_u64[0];
  return result;
}

void sub_1001117BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  Class isa;
  id v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject **v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v6);
  v7 = objc_allocWithZone((Class)REMStoreContainerToken);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v7, "initWithIdentifier:", isa);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_10083AC30);
  v11 = v9;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 138412290;
    v19 = v11;
    v16 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    *v15 = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDXPCDebugPerformer: Created isolated store {token: %@}", v14, 0xCu);
    v17 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v15, 1, v17);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {

    v12 = v11;
  }

  (*(void (**)(uint64_t, NSObject *, _QWORD))(a1 + 16))(a1, v11, 0);
}

uint64_t sub_1001119F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_1007E4598, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  aBlock[4] = sub_100118250;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E45B0;
  v14 = _Block_copy(aBlock);
  v15 = v24;
  swift_retain();
  v16 = swift_release(v15);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A630((uint64_t *)&unk_100838000);
  v19 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100111C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[5];
  _QWORD *v35;

  v29 = a6;
  v30 = a7;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v15 - 8);
  v32 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter(v18);
  v20 = (_QWORD *)swift_allocObject(a5, 48, 7);
  v20[2] = a1;
  v20[3] = a2;
  v20[4] = a3;
  v20[5] = a4;
  aBlock[4] = v29;
  v35 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = v30;
  v21 = _Block_copy(aBlock);
  v22 = v35;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  v23 = swift_release(v22);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A630((uint64_t *)&unk_100838000);
  v26 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v12, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v17, v32);
}

void sub_100111E34(uint64_t a1, void *a2, char *a3, void *aBlock)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  void *v21;
  void *v22;
  NSString v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  NSString v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  void *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  void *v43;
  NSString v44;
  id v45;
  id v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  void *v52;
  Swift::String v53;
  unint64_t v54;
  NSString v55;
  id v56;
  id v57;
  uint64_t v58;
  _QWORD v59[7];
  void *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v4 = aBlock;
  _Block_copy(aBlock);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_10083AC30);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v61 = a3;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = v4;
    v13 = swift_slowAlloc(32, -1);
    v62 = v13;
    v63 = a1;
    *(_DWORD *)v12 = 136315138;
    v64 = (unint64_t)a2;
    swift_bridgeObjectRetain(a2);
    v14 = sub_10001A630((uint64_t *)&unk_10083A370);
    v15 = String.init<A>(describing:)(&v63, v14);
    v17 = v16;
    v63 = sub_10001A820(v15, v16, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
    swift_bridgeObjectRelease_n(a2, 2);
    v18 = v17;
    a3 = v61;
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: downloadContainer with accountID: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v19 = v13;
    v4 = v60;
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    *(_QWORD *)&v20 = swift_bridgeObjectRelease_n(a2, 2).n128_u64[0];
  }
  v21 = *(void **)&a3[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController];
  v61 = (char *)objc_msgSend(v21, "cloudContext", v20);
  if (v61)
  {
    v22 = a2;
    if (a2)
    {
LABEL_8:
      swift_bridgeObjectRetain(a2);
      v23 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(v21, "newBackgroundContextWithAuthor:", v23);

      __chkstk_darwin(v25);
      v59[2] = a1;
      v59[3] = v22;
      v59[4] = v24;
      NSManagedObjectContext.rem_performAndWait<A>(_:)(&v63, sub_1001181F4, v59, &type metadata for Bool);
      if ((v63 & 1) != 0)
      {
        _Block_copy(v4);
        v39 = v61;
        sub_1003A58C4(a1, v22, v61, (uint64_t)v4);
        _Block_release(v4);

        swift_bridgeObjectRelease(v22);
        v33 = v39;
      }
      else
      {
        v47 = swift_bridgeObjectRetain_n(v22, 2);
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc(12, -1);
          v51 = swift_slowAlloc(32, -1);
          v63 = v51;
          *(_DWORD *)v50 = 136315138;
          swift_bridgeObjectRetain(v22);
          v62 = sub_10001A820(a1, (unint64_t)v22, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
          swift_bridgeObjectRelease_n(v22, 3);
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "RDXPCDebugPerformer: downloadContainer accountIdentifier { %s } is not from CloudKit account", v50, 0xCu);
          swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v51, -1, -1);
          swift_slowDealloc(v50, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v22, 2);
        }
        v52 = (void *)objc_opt_self(REMError);
        v63 = 0;
        v64 = 0xE000000000000000;
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease(v64);
        v63 = a1;
        v64 = (unint64_t)v22;
        v53._countAndFlagsBits = 0xD00000000000001FLL;
        v53._object = (void *)0x80000001006F8350;
        String.append(_:)(v53);
        v54 = v64;
        v55 = String._bridgeToObjectiveC()();
        v56 = objc_msgSend(v52, "internalErrorWithDebugDescription:", v55, swift_bridgeObjectRelease(v54).n128_f64[0]);

        v57 = v56;
        v58 = _convertErrorToNSError(_:)(v57);
        (*((void (**)(void *, _QWORD, uint64_t))v4 + 2))(v4, 0, v58);

        v33 = (void *)v58;
      }
      goto LABEL_24;
    }
    v34 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
    v35 = objc_msgSend(v34, "unsafeUntilSystemReady_primaryICloudACAccount");

    if (v35)
    {
      v37 = objc_msgSend(v35, "identifier");

      if (v37)
      {
        a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v22 = v38;

        goto LABEL_8;
      }
    }
    v40 = Logger.logObject.getter(v36);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "RDXPCDebugPerformer: downloadContainer accountIdentifier is nil -- can't download cloudKit container", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    v43 = (void *)objc_opt_self(REMError);
    v44 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v43, "internalErrorWithDebugDescription:", v44);

    v46 = v45;
    v33 = (void *)_convertErrorToNSError(_:)(v46);
    (*((void (**)(void *, _QWORD, void *))v4 + 2))(v4, 0, v33);

  }
  else
  {
    v26 = Logger.logObject.getter(0);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDXPCDebugPerformer: CloudContext is nil -- can't sync to cloudKit", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = (void *)objc_opt_self(REMError);
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v29, "internalErrorWithDebugDescription:", v30);

    v32 = v31;
    v33 = (void *)_convertErrorToNSError(_:)(v32);
    (*((void (**)(void *, _QWORD, void *))v4 + 2))(v4, 0, v33);

  }
LABEL_24:

  _Block_release(v4);
}

void sub_100112848(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  void *ObjCClassFromMetadata;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  Class v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  NSString v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  Swift::String v44;
  NSString v45;
  id v46;
  void *v47;
  NSString v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void **aBlock;
  unint64_t v55;
  void (*v56)(uint64_t, void *, void *);
  void *v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  _QWORD v60[4];
  _QWORD v61[2];

  v9 = swift_allocObject(&unk_1007E4408, 24, 7);
  *(_QWORD *)(v9 + 16) = a5;
  if (a1 == 0x656D686361747441 && a2 == (void *)0xEA0000000000746ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656D686361747441, 0xEA0000000000746ELL, a1, a2, 0) & 1) != 0)
  {
    v52 = v9;
    v10 = sub_1000151B0(0, (unint64_t *)&unk_10083AE20, off_1007D6698);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v10);
    _Block_copy(a5);
    v12 = objc_msgSend(ObjCClassFromMetadata, "cdEntityName");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v14 = v13;

    v15 = objc_allocWithZone((Class)NSFetchRequest);
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v15, "initWithEntityName:", v16, swift_bridgeObjectRelease(v14).n128_f64[0]);

    v18 = sub_10001A630((uint64_t *)&unk_100839E80);
    v19 = swift_allocObject(v18, 160, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1006A5130;
    strcpy((char *)(v19 + 32), "ckIdentifier");
    *(_BYTE *)(v19 + 45) = 0;
    *(_WORD *)(v19 + 46) = -5120;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = 0xD000000000000011;
    *(_QWORD *)(v19 + 72) = 0x80000001006A8CA0;
    *(_QWORD *)(v19 + 88) = &type metadata for String;
    *(_QWORD *)(v19 + 96) = 0x774F656E6F5A6B63;
    *(_QWORD *)(v19 + 104) = 0xEF656D614E72656ELL;
    *(_QWORD *)(v19 + 152) = &type metadata for String;
    *(_QWORD *)(v19 + 120) = &type metadata for String;
    *(_QWORD *)(v19 + 128) = 0xD000000000000012;
    *(_QWORD *)(v19 + 136) = 0x80000001006F8140;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v19).n128_f64[0]);

    v21 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "setRelationshipKeyPathsForPrefetching:", v21);

    v22 = swift_allocObject(v18, 96, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1006A3C40;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 32) = 0x696669746E656469;
    *(_QWORD *)(v22 + 40) = 0xEA00000000007265;
    v23 = UUID.uuidString.getter(v22);
    *(_QWORD *)(v22 + 88) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = v23;
    *(_QWORD *)(v22 + 72) = v24;
    v25 = String._bridgeToObjectiveC()();
    v26 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    v27 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v25, v26);

    objc_msgSend(v17, "setPredicate:", v27);
    v28 = *(void **)(a4 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
    v60[0] = 0xD00000000000001BLL;
    v60[1] = 0x80000001006F8160;
    v60[3] = 0;
    v61[0] = 0;
    v60[2] = 0;
    *(_QWORD *)((char *)v61 + 6) = 0;
    __chkstk_darwin(v29);
    sub_1003534D8((uint64_t)v60);
    v31 = v30;
    v33 = v32;
    v34 = objc_msgSend(v28, "cloudContext");
    if (v34)
    {
      v35 = v34;
      v36 = String._bridgeToObjectiveC()();
      v37 = objc_msgSend(v35, "containerForAccountID:", v36, swift_bridgeObjectRelease(v31).n128_f64[0]);

      if (v37)
      {
        v38 = objc_msgSend(v37, "databaseWithDatabaseScope:", objc_msgSend(v33, "rd_ckDatabaseScope"));
        v39 = objc_msgSend(v33, "recordID");
        v40 = swift_allocObject(&unk_1007E4430, 32, 7);
        *(_QWORD *)(v40 + 16) = sub_100119B24;
        *(_QWORD *)(v40 + 24) = v52;
        v58 = sub_1001181EC;
        v59 = v40;
        aBlock = _NSConcreteStackBlock;
        v55 = 1107296256;
        v56 = sub_1000FF8C4;
        v57 = &unk_1007E4448;
        v41 = _Block_copy(&aBlock);
        v42 = v59;
        swift_retain();
        swift_release(v42);
        objc_msgSend(v38, "deleteRecordWithID:completionHandler:", v39, v41);
        _Block_release(v41);
        swift_release(v52);

        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v31);
    }
    v47 = (void *)objc_opt_self(REMError);
    v48 = String._bridgeToObjectiveC()();
    v49 = objc_msgSend(v47, "internalErrorWithDebugDescription:", v48);

    swift_willThrow(v50);
    swift_errorRetain(v49);
    v51 = (void *)_convertErrorToNSError(_:)(v49);
    ((void (**)(_QWORD, void *))a5)[2](a5, v51);

    swift_errorRelease(v49);
    swift_errorRelease(v49);
    swift_release(v52);
  }
  else
  {
    v43 = (void *)objc_opt_self(REMError);
    _Block_copy(a5);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(0xE000000000000000);
    aBlock = (void **)0xD000000000000014;
    v55 = 0x80000001006F8120;
    v44._countAndFlagsBits = a1;
    v44._object = a2;
    String.append(_:)(v44);
    v45 = String._bridgeToObjectiveC()();
    v46 = objc_msgSend(v43, "internalErrorWithDebugDescription:", v45, swift_bridgeObjectRelease(0x80000001006F8120).n128_f64[0]);

    v53 = (void *)_convertErrorToNSError(_:)(v46);
    ((void (**)(_QWORD, void *))a5)[2](a5, v53);
    swift_release(v9);

  }
}

uint64_t sub_100112F28(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint8_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v21[3];
  char v22;
  uint64_t v23;
  void (*v24)(objc_class *, uint64_t);
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[4];
  _QWORD v32[2];

  LODWORD(v9) = a3;
  v12 = swift_allocObject(&unk_1007E43E0, 24, 7);
  *(_QWORD *)(v12 + 16) = a6;
  _Block_copy(a6);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_10083AC30);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v27 = a5;
    v28 = (int)v9;
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v31[0] = v17;
    v26 = a6;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(a2);
    v29 = sub_10001A820(a1, a2, v31);
    a5 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDXPCDebugPerformer: %s initiated", v9, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v18 = v9;
    LOBYTE(v9) = v28;
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v31[0] = a1;
  v31[1] = a2;
  v31[3] = 0;
  v32[0] = 0;
  v31[2] = 0;
  *(_QWORD *)((char *)v32 + 6) = 0;
  __chkstk_darwin(v19);
  v21[2] = a4;
  v22 = v9 & 1;
  v23 = a5;
  v24 = sub_100117498;
  v25 = v12;
  sub_10035288C((uint64_t)v31, (uint64_t)sub_1001174A0, (uint64_t)v21);
  return swift_release(v12);
}

uint64_t sub_1001131F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v4 = REMManualOrderingListType.description.getter(1);
  if (v4 == a1 && v5 == a2)
  {
    swift_bridgeObjectRelease_n(a2, 2);
    goto LABEL_8;
  }
  v7 = v5;
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, a1, a2, 0);
  swift_bridgeObjectRelease(v7);
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
LABEL_8:
    v9 = 0;
    v10 = 1;
    return v10 & 0xFFFEFFFF | ((v9 & 1) << 16);
  }
  v12 = REMManualOrderingListType.description.getter(2);
  v14 = v13;
  if (v12 == a1 && v13 == a2)
  {
    v10 = 2;
    swift_bridgeObjectRelease_n(a2, 2);
    v9 = 0;
    return v10 & 0xFFFEFFFF | ((v9 & 1) << 16);
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a1, a2, 0);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    v9 = 0;
    v10 = 2;
    return v10 & 0xFFFEFFFF | ((v9 & 1) << 16);
  }
  v16 = REMManualOrderingListType.description.getter(3);
  v18 = v17;
  if (v16 == a1 && v17 == a2)
  {
    swift_bridgeObjectRelease_n(a2, 2);
LABEL_20:
    v9 = 0;
    v10 = 3;
    return v10 & 0xFFFEFFFF | ((v9 & 1) << 16);
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a1, a2, 0);
  swift_bridgeObjectRelease(v18);
  if ((v19 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_20;
  }
  v20 = REMManualOrderingListType.description.getter(4);
  v22 = v21;
  if (v20 == a1 && v21 == a2)
  {
    swift_bridgeObjectRelease_n(a2, 2);
LABEL_26:
    v9 = 0;
    v10 = 4;
    return v10 & 0xFFFEFFFF | ((v9 & 1) << 16);
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, a1, a2, 0);
  swift_bridgeObjectRelease(v22);
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_26;
  }
  v24 = REMManualOrderingListType.description.getter(5);
  v26 = v25;
  if (v24 == a1 && v25 == a2)
  {
    swift_bridgeObjectRelease_n(a2, 2);
LABEL_32:
    v9 = 0;
    v10 = 5;
    return v10 & 0xFFFEFFFF | ((v9 & 1) << 16);
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, a1, a2, 0);
  swift_bridgeObjectRelease(v26);
  if ((v27 & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_32;
  }
  v28 = REMManualOrderingListType.description.getter(6);
  v30 = v29;
  if (v28 == a1 && v29 == a2)
  {
    swift_bridgeObjectRelease_n(a2, 2);
    v9 = 0;
    v10 = 6;
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v30);
    v9 = v31 ^ 1;
    if ((v31 & 1) != 0)
      v10 = 6;
    else
      v10 = 0;
  }
  return v10 & 0xFFFEFFFF | ((v9 & 1) << 16);
}

void sub_10011348C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(_QWORD, _QWORD, _QWORD))
{
  uint64_t Request;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  unint64_t v18;
  NSString v19;
  id v20;
  id v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;

  Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a6);
  swift_bridgeObjectRetain(a2);
  v15 = sub_1001131F4(a1, (uint64_t)a2);
  if ((v15 & 0x10000) != 0)
  {
    v16 = (void *)objc_opt_self(REMError);
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease(v24);
    v23 = 0xD000000000000028;
    v24 = 0x80000001006F7FA0;
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    v18 = v24;
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v16, "internalErrorWithDebugDescription:", v19, swift_bridgeObjectRelease(v18).n128_f64[0]);

    v21 = v20;
    v22 = (void *)_convertErrorToNSError(_:)(v21);
    ((void (**)(_QWORD, _QWORD, void *))a6)[2](a6, 0, v22);

  }
  else
  {
    *(_WORD *)v14 = v15;
    *((_QWORD *)v14 + 1) = a3;
    *((_QWORD *)v14 + 2) = a4;
    swift_storeEnumTagMultiPayload(v14, Request, 1);
    _Block_copy(a6);
    swift_bridgeObjectRetain(a4);
    sub_100112F28(0xD000000000000021, 0x80000001006F8070, 1, (uint64_t)v14, a5, a6);
    _Block_release(a6);
    sub_10001C744((uint64_t)v14, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
  }
  _Block_release(a6);
}

uint64_t sub_100113698(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD v13[8];
  _QWORD v14[4];
  _QWORD v15[2];

  v5 = swift_allocObject(&unk_1007E43B8, 24, 7);
  *(_QWORD *)(v5 + 16) = a3;
  _Block_copy(a3);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_10083AC30);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDXPCDebugPerformer: removeManualSortHint initiated", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v14[0] = 0xD000000000000014;
  v14[1] = 0x80000001006F8050;
  v14[3] = 0;
  v15[0] = 0;
  v14[2] = 0;
  *(_QWORD *)((char *)v15 + 6) = 0;
  __chkstk_darwin(v11);
  v13[2] = a1;
  v13[3] = sub_100119B24;
  v13[4] = v5;
  sub_10035288C((uint64_t)v14, (uint64_t)sub_10011747C, (uint64_t)v13);
  return swift_release(v5);
}

uint64_t sub_10011387C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v19[7];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[4];
  _QWORD v24[2];

  v9 = swift_allocObject(&unk_1007E4390, 24, 7);
  *(_QWORD *)(v9 + 16) = a5;
  _Block_copy(a5);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_10083AC30);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v20 = a3;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v23[0] = v15;
    v19[6] = a5;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    v21 = sub_10001A820(a1, a2, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDXPCDebugPerformer: %s initiated", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    v16 = v14;
    a3 = v20;
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v23[0] = a1;
  v23[1] = a2;
  v23[3] = 0;
  v24[0] = 0;
  v23[2] = 0;
  *(_QWORD *)((char *)v24 + 6) = 0;
  __chkstk_darwin(v17);
  v19[2] = a3;
  v19[3] = sub_100119B24;
  v19[4] = v9;
  sub_10035288C((uint64_t)v23, (uint64_t)sub_100117460, (uint64_t)v19);
  return swift_release(v9);
}

void sub_100113B28(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(_QWORD, _QWORD))
{
  uint64_t Request;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  unint64_t v18;
  NSString v19;
  id v20;
  id v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;

  Request = type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(0);
  __chkstk_darwin(Request);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a6);
  swift_bridgeObjectRetain(a2);
  v15 = sub_1001131F4(a1, (uint64_t)a2);
  if ((v15 & 0x10000) != 0)
  {
    v16 = (void *)objc_opt_self(REMError);
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease(v24);
    v23 = 0xD000000000000028;
    v24 = 0x80000001006F7FA0;
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    v18 = v24;
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v16, "internalErrorWithDebugDescription:", v19, swift_bridgeObjectRelease(v18).n128_f64[0]);

    v21 = v20;
    v22 = (void *)_convertErrorToNSError(_:)(v21);
    ((void (**)(_QWORD, void *))a6)[2](a6, v22);

  }
  else
  {
    *(_WORD *)v14 = v15;
    *((_QWORD *)v14 + 1) = a3;
    *((_QWORD *)v14 + 2) = a4;
    swift_storeEnumTagMultiPayload(v14, Request, 1);
    _Block_copy(a6);
    swift_bridgeObjectRetain(a4);
    sub_10011387C(0xD000000000000020, 0x80000001006F7FD0, (uint64_t)v14, a5, a6);
    _Block_release(a6);
    sub_10001C744((uint64_t)v14, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
  }
  _Block_release(a6);
}

uint64_t sub_100113D2C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD v15[8];
  _QWORD v16[4];
  _QWORD v17[2];

  v7 = swift_allocObject(&unk_1007E4368, 24, 7);
  *(_QWORD *)(v7 + 16) = a4;
  _Block_copy(a4);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001AAA8(v8, (uint64_t)qword_10083AC30);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: updateManualSortHint initiated", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v16[0] = 0xD000000000000014;
  v16[1] = 0x80000001006F7F50;
  v16[3] = 0;
  v17[0] = 0;
  v16[2] = 0;
  *(_QWORD *)((char *)v17 + 6) = 0;
  __chkstk_darwin(v13);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = sub_100119B24;
  v15[5] = v7;
  sub_10035288C((uint64_t)v16, (uint64_t)sub_100117390, (uint64_t)v15);
  return swift_release(v7);
}

void sub_100113F14(uint64_t a1)
{
  __n128 v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    sub_10016EF80();
  }
  else
  {
    sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v3 = static OS_dispatch_queue.main.getter(v2);
    v4 = swift_allocObject(&unk_1007E42F0, 32, 7);
    *(_QWORD *)(v4 + 16) = sub_10011736C;
    *(_QWORD *)(v4 + 24) = a1;
    v5 = swift_allocObject(&unk_1007E4318, 32, 7);
    *(_QWORD *)(v5 + 16) = sub_100119B20;
    *(_QWORD *)(v5 + 24) = v4;
    v8[4] = sub_1000A66B8;
    v9 = v5;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_1000098C4;
    v8[3] = &unk_1007E4330;
    v6 = _Block_copy(v8);
    v7 = v9;
    swift_retain();
    swift_release(v7);
    dispatch_sync(v3, v6);

    _Block_release(v6);
    LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v5, "", 105, 1619, 37, 1);
    swift_release(v4);
    swift_release(v5);
    if ((v3 & 1) != 0)
      __break(1u);
  }
}

void sub_100114088(uint64_t a1)
{
  _QWORD *v2;
  __n128 v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  if (objc_msgSend((id)objc_opt_self(NSThread), "isMainThread"))
  {
    v2 = sub_10017084C();
    sub_100170F00((uint64_t)v2, 0);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v4 = static OS_dispatch_queue.main.getter(v3);
    v5 = swift_allocObject(&unk_1007E4278, 32, 7);
    *(_QWORD *)(v5 + 16) = sub_100117344;
    *(_QWORD *)(v5 + 24) = a1;
    v6 = swift_allocObject(&unk_1007E42A0, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_1000098EC;
    *(_QWORD *)(v6 + 24) = v5;
    v9[4] = sub_1000098E4;
    v10 = v6;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_1000098C4;
    v9[3] = &unk_1007E42B8;
    v7 = _Block_copy(v9);
    v8 = v10;
    swift_retain();
    swift_release(v8);
    dispatch_sync(v4, v7);

    _Block_release(v7);
    LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v6, "", 105, 1619, 37, 1);
    swift_release(v5);
    swift_release(v6);
    if ((v4 & 1) != 0)
      __break(1u);
  }
}

uint64_t sub_100114220(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v7;
  _QWORD v9[8];
  _QWORD v10[4];
  _QWORD v11[2];

  v7 = swift_allocObject(&unk_1007E4228, 24, 7);
  *(_QWORD *)(v7 + 16) = a4;
  v10[0] = 0xD00000000000002DLL;
  v10[1] = 0x80000001006F7E80;
  v10[3] = 0;
  v11[0] = 0;
  v10[2] = 0;
  *(_QWORD *)((char *)v11 + 6) = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = sub_10001AAC0;
  v9[5] = v7;
  _Block_copy(a4);
  sub_10035288C((uint64_t)v10, (uint64_t)sub_1001172EC, (uint64_t)v9);
  return swift_release(v7);
}

uint64_t sub_100114328(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  _QWORD v7[6];
  _QWORD v8[4];
  _QWORD v9[2];

  v5 = swift_allocObject(&unk_1007E41D8, 24, 7);
  *(_QWORD *)(v5 + 16) = a3;
  v8[0] = 0xD000000000000025;
  v8[1] = 0x80000001006F7E50;
  v8[3] = 0;
  v9[0] = 0;
  v8[2] = 0;
  *(_QWORD *)((char *)v9 + 6) = 0;
  v7[2] = a1;
  v7[3] = sub_10001AAC0;
  v7[4] = v5;
  _Block_copy(a3);
  sub_10035288C((uint64_t)v8, (uint64_t)sub_1001172A0, (uint64_t)v7);
  return swift_release(v5);
}

double sub_100114424(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  void *v7;
  double result;
  _QWORD v9[9];
  void *v10;
  _QWORD v11[4];
  _QWORD v12[2];

  v6 = swift_allocObject(&unk_1007E41B0, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  v10 = &_swiftEmptyDictionarySingleton;
  v11[0] = 0xD000000000000021;
  v11[1] = 0x80000001006F7E20;
  v11[2] = 0;
  v11[3] = 0;
  v12[0] = 0;
  *(_QWORD *)((char *)v12 + 6) = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = &v10;
  v9[5] = sub_100119B24;
  v9[6] = v6;
  _Block_copy(a3);
  sub_10035288C((uint64_t)v11, (uint64_t)sub_1001171F4, (uint64_t)v9);
  v7 = v10;
  swift_release(v6);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

void sub_100114540(uint64_t a1)
{
  uint64_t KeyPath;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  Class v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  Class v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  KeyPath = swift_getKeyPath(&unk_1006A8C48);
  v3 = sub_1001DF8D0(a1);
  v4 = (void *)sub_1003428A0(KeyPath, (uint64_t)v3);
  swift_release(KeyPath);
  v5 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "entity");
  objc_msgSend(v6, "setEntity:", v7);

  objc_msgSend(v6, "setAffectedStores:", 0);
  objc_msgSend(v6, "setPredicate:", v4);

  v8 = sub_10001A630((uint64_t *)&unk_100839E80);
  v9 = swift_allocObject(v8, 128, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1006A3C20;
  *(_QWORD *)(v9 + 32) = 0x696669746E656469;
  *(_QWORD *)(v9 + 40) = 0xEA00000000007265;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = 0x656D614E656C6966;
  *(_QWORD *)(v9 + 72) = 0xE800000000000000;
  *(_QWORD *)(v9 + 120) = &type metadata for String;
  *(_QWORD *)(v9 + 88) = &type metadata for String;
  *(_QWORD *)(v9 + 96) = 0x7553323135616873;
  *(_QWORD *)(v9 + 104) = 0xE90000000000006DLL;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

  v11 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, "setRelationshipKeyPathsForPrefetching:", v11);

  v12 = NSManagedObjectContext.fetch<A>(_:)(v6, v5);
  if (v25)
  {

    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }
  else
  {
    v13 = v12;
    v14 = sub_1001DFF48(v12);
    swift_bridgeObjectRelease(v13);
    sub_1001E27DC(v14);

    sub_10050DEE8(a1, 128);
    v16 = v15;
    v17 = type metadata accessor for REMCDSavedAttachment();
    v18 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "entity");
    objc_msgSend(v18, "setEntity:", v19);

    objc_msgSend(v18, "setAffectedStores:", 0);
    objc_msgSend(v18, "setPredicate:", v16);

    v20 = swift_allocObject(v8, 128, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1006A3C20;
    *(_QWORD *)(v20 + 32) = 0x696669746E656469;
    *(_QWORD *)(v20 + 40) = 0xEA00000000007265;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = 0x656D614E656C6966;
    *(_QWORD *)(v20 + 72) = 0xE800000000000000;
    *(_QWORD *)(v20 + 120) = &type metadata for String;
    *(_QWORD *)(v20 + 88) = &type metadata for String;
    *(_QWORD *)(v20 + 96) = 0x7553323135616873;
    *(_QWORD *)(v20 + 104) = 0xE90000000000006DLL;
    v21 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v18, "setPropertiesToFetch:", v21, swift_bridgeObjectRelease(v20).n128_f64[0]);

    v22 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v18, "setRelationshipKeyPathsForPrefetching:", v22);

    v23 = NSManagedObjectContext.fetch<A>(_:)(v18, v17);
    v24 = sub_1001E0138(v23);
    swift_bridgeObjectRelease(v23);
    sub_1001E27DC(v24);

  }
}

void sub_100114978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  Class v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Class v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  Class v33;
  Class v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = _swiftEmptyArrayStorage;
  KeyPath = swift_getKeyPath(&unk_1006A8BF8);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, a1, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  v10 = (void *)sub_1002E8950(KeyPath, (uint64_t)v6);
  swift_release(KeyPath);
  v11 = sub_1000151B0(0, (unint64_t *)&unk_10083AE00, off_1007D66C0);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v11), "entity");
  objc_msgSend(v12, "setEntity:", v13);

  objc_msgSend(v12, "setAffectedStores:", 0);
  objc_msgSend(v12, "setPredicate:", v10);

  v14 = sub_10001A630((uint64_t *)&unk_100839E80);
  v15 = swift_allocObject(v14, 64, 7);
  v37 = xmmword_1006A3C00;
  *(_OWORD *)(v15 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 32) = 0x7553323135616873;
  *(_QWORD *)(v15 + 40) = 0xE90000000000006DLL;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v15).n128_f64[0]);

  v17 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setRelationshipKeyPathsForPrefetching:", v17);

  v38 = a2;
  v18 = v39;
  v19 = NSManagedObjectContext.fetch<A>(_:)(v12, v11);
  if (v18)
  {
    v20 = v40;

    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v21 = v19;
    v22 = sub_1001DFF48(v19);
    swift_bridgeObjectRelease(v21);
    sub_1001E27DC(v22);

    v23 = (void *)objc_opt_self(REMAccount);
    v24 = UUID._bridgeToObjectiveC()().super.isa;
    v25 = objc_msgSend(v23, "objectIDWithUUID:", v24);

    v26 = v25;
    sub_10050DEE8((uint64_t)v25, 96);
    v28 = v27;
    v29 = type metadata accessor for REMCDSavedAttachment();
    v30 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(v29), "entity");
    objc_msgSend(v30, "setEntity:", v31);

    objc_msgSend(v30, "setAffectedStores:", 0);
    objc_msgSend(v30, "setPredicate:", v28);

    v32 = swift_allocObject(v14, 64, 7);
    *(_OWORD *)(v32 + 16) = v37;
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 32) = 0x7553323135616873;
    *(_QWORD *)(v32 + 40) = 0xE90000000000006DLL;
    v33 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v30, "setPropertiesToFetch:", v33, swift_bridgeObjectRelease(v32).n128_f64[0]);

    v34 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v30, "setRelationshipKeyPathsForPrefetching:", v34);

    v35 = NSManagedObjectContext.fetch<A>(_:)(v30, v29);
    v36 = sub_1001E0138(v35);
    swift_bridgeObjectRelease(v35);
    sub_1001E27DC(v36);

  }
}

void sub_100114DF8(char a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  _QWORD v27[3];
  char v28;
  _BYTE v29[24];
  _QWORD v30[4];
  _QWORD v31[2];

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_10083AC30);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, a4, v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v20 = type metadata accessor for RDHashtagLabelRepairer();
  inited = swift_initStackObject(v20, v29);
  *(_QWORD *)(inited + 16) = v19;
  v30[0] = a5;
  v30[1] = a6;
  v30[3] = 0;
  v31[0] = 0;
  v30[2] = 0;
  *(_QWORD *)((char *)v31 + 6) = 0;
  __chkstk_darwin(inited);
  v27[2] = v22;
  v28 = a1 & 1;
  v23 = v19;
  sub_100353914((uint64_t)v30, a7, (uint64_t)v27);
  v25 = v24;
  sub_1000151B0(0, (unint64_t *)&unk_10083ADC8, REMHashtagLabel_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, _QWORD))(a3 + 16))(a3, isa, 0);
  swift_bridgeObjectRelease(v25);

  swift_setDeallocating(inited);
}

void sub_100115064(char a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  _QWORD v27[3];
  char v28;
  _BYTE v29[24];
  _QWORD v30[4];
  _QWORD v31[2];

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_10083AC30);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, a4, v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v20 = type metadata accessor for RDHashtagLabelRepairer();
  inited = swift_initStackObject(v20, v29);
  *(_QWORD *)(inited + 16) = v19;
  v30[0] = a5;
  v30[1] = a6;
  v30[3] = 0;
  v31[0] = 0;
  v30[2] = 0;
  *(_QWORD *)((char *)v31 + 6) = 0;
  __chkstk_darwin(inited);
  v27[2] = v22;
  v28 = a1 & 1;
  v23 = v19;
  sub_100353D38((uint64_t)v30, a7, (uint64_t)v27);
  v25 = v24;
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, _QWORD))(a3 + 16))(a3, isa, 0);
  swift_bridgeObjectRelease(v25);

  swift_setDeallocating(inited);
}

uint64_t sub_1001152A4(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD v13[8];
  _QWORD v14[4];
  _QWORD v15[2];

  v5 = swift_allocObject(&unk_1007E4188, 24, 7);
  *(_QWORD *)(v5 + 16) = a3;
  _Block_copy(a3);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_10083AC30);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDXPCDebugPerformer: fetchAccountListOrderedIdentifiers initiated", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v14[0] = 0xD000000000000022;
  v14[1] = 0x80000001006F7CA0;
  v14[3] = 0;
  v15[0] = 0;
  v14[2] = 0;
  *(_QWORD *)((char *)v15 + 6) = 0;
  __chkstk_darwin(v11);
  v13[2] = a1;
  v13[3] = sub_100117128;
  v13[4] = v5;
  sub_10035288C((uint64_t)v14, (uint64_t)sub_100117130, (uint64_t)v13);
  return swift_release(v5);
}

uint64_t sub_1001154A8(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD v12[8];
  _QWORD v13[4];
  _QWORD v14[2];

  v4 = swift_allocObject(&unk_1007E4160, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  _Block_copy(a2);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001AAA8(v5, (uint64_t)qword_10083AC30);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDXPCDebugPerformer: fetchAllSharedEntitySyncActivities initiated", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v13[0] = 0xD000000000000022;
  v13[1] = 0x80000001006F7C70;
  v13[3] = 0;
  v14[0] = 0;
  v13[2] = 0;
  *(_QWORD *)((char *)v14 + 6) = 0;
  __chkstk_darwin(v10);
  v12[2] = a1;
  v12[3] = sub_1001170E4;
  v12[4] = v4;
  sub_10035288C((uint64_t)v13, (uint64_t)sub_10011710C, (uint64_t)v12);
  return swift_release(v4);
}

uint64_t sub_1001156B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Option;
  uint64_t v12;
  uint64_t *v13;
  uint64_t (*v14)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t KeyPath;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  Swift::String v33;
  uint64_t v34;
  Swift::String v35;
  void *object;
  Swift::String v37;
  Swift::String v38;
  void *v39;
  NSString v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  v13 = (uint64_t *)((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000151E8(a1, (uint64_t)v13, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, Option);
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v13, v7);
    KeyPath = swift_getKeyPath(&unk_1006A8BB8);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    v24 = (void *)sub_1002E8964(KeyPath, (uint64_t)v6);
    swift_release(KeyPath);
    v25 = type metadata accessor for REMCKSharedEntitySyncActivity();
    v26 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v27 = objc_msgSend((id)swift_getObjCClassFromMetadata(v25), "entity");
    objc_msgSend(v26, "setEntity:", v27);

    objc_msgSend(v26, "setAffectedStores:", 0);
    objc_msgSend(v26, "setPredicate:", v24);

    v28 = NSManagedObjectContext.fetch<A>(_:)(v26, v25);
    if (v1)
    {
LABEL_5:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);

      return v2;
    }
    v2 = v28;
    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0)
        v43 = v28;
      else
        v43 = v28 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v28);
      v44 = _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease(v2);
      if (v44 < 2)
        goto LABEL_5;
    }
    else if (*(uint64_t *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10) < 2)
    {
      goto LABEL_5;
    }
    v32 = (void *)objc_opt_self(REMError);
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v33._object = (void *)0x80000001006F7B60;
    v33._countAndFlagsBits = 0xD000000000000047;
    String.append(_:)(v33);
    v34 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v34);
    object = v35._object;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(object);
    v37._countAndFlagsBits = 0x6C6C6F6620736120;
    v37._object = (void *)0xED0000203A73776FLL;
    String.append(_:)(v37);
    v38._countAndFlagsBits = Array.description.getter(v2, v25);
    v39 = v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v39);
    v2 = v46;
    v40 = String._bridgeToObjectiveC()();
    objc_msgSend(v32, "internalErrorWithDebugDescription:", v40, swift_bridgeObjectRelease(v2).n128_f64[0]);

    swift_willThrow(v41);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return v2;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v16 = *v13;
    v17 = v13[1];
    v18 = swift_getKeyPath(&unk_1006A8B70);
    v19 = (void *)sub_1002E8978(v18, v16, v17);
    swift_release(v18);
    swift_bridgeObjectRelease(v17);
    v20 = type metadata accessor for REMCKSharedEntitySyncActivity();
    v21 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(v20), "entity");
    objc_msgSend(v21, "setEntity:", v22);

    objc_msgSend(v21, "setAffectedStores:", 0);
    objc_msgSend(v21, "setPredicate:", v19);

    v2 = NSManagedObjectContext.fetch<A>(_:)(v21, v20);
  }
  else
  {
    v29 = type metadata accessor for REMCKSharedEntitySyncActivity();
    v30 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(v29), "entity");
    objc_msgSend(v30, "setEntity:", v31);

    objc_msgSend(v30, "setAffectedStores:", 0);
    objc_msgSend(v30, "setPredicate:", 0);
    v2 = NSManagedObjectContext.fetch<A>(_:)(v30, v29);

  }
  return v2;
}

_QWORD *sub_100115C1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;

  v16 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    for (i = 4; ; ++i)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
         : *(id *)(a1 + 8 * i);
      v6 = v5;
      v7 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v15 = v5;
      sub_100105C1C(&v15, &v14);

      v9 = v14;
      if (v14)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        v11 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v10 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v11 >= v10 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1);
        v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
        specialized Array._endMutation()(v4);
      }
      if (v7 == v2)
      {
        swift_bridgeObjectRelease(a1);
        return (_QWORD *)v16;
      }
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void sub_100115DA0(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  NSString v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint32_t *p_ivar_base_size;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t inited;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD v50[2];
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[176];
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];

  v6 = sub_10001A630((uint64_t *)&unk_100839C70);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CocoaError.Code(0, v7);
  v55 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v54 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_1007E4138, 24, 7);
  *(_QWORD *)(v12 + 16) = a3;
  _Block_copy(a3);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001AAA8(v13, (uint64_t)qword_10083AC30);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDXPCDebugPerformer: addSharedEntitySyncActivity initiated", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController);
  v19 = objc_msgSend(a1, "accountIdentifier");
  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v22 = v21;
    v19 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v20 = swift_bridgeObjectRelease(v22).n128_u64[0];
  }
  v23 = objc_msgSend(v18, "storeForAccountIdentifier:", v19, v20);

  if (v23)
  {
    v58 = 0xD00000000000001BLL;
    v59 = 0x80000001006F7C50;
    v61 = 0;
    memset(v62, 0, 14);
    v60 = 0;
    __chkstk_darwin(v24);
    v50[-4] = v23;
    v50[-3] = a1;
    v50[-2] = sub_100119B24;
    v50[-1] = v12;
    sub_10035288C((uint64_t)&v58, (uint64_t)sub_1001170C8, (uint64_t)&v50[-6]);
    swift_release(v12);

  }
  else
  {
    v51 = v10;
    v52 = v9;
    v53 = v12;
    v25 = a1;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, (os_log_type_t)v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v58 = v29;
      *(_DWORD *)v28 = 136315138;
      v50[1] = v28 + 4;
      v30 = objc_msgSend(v25, "accountIdentifier");
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v33 = v32;

      v56 = sub_10001A820(v31, v33, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57);

      v34 = v33;
      p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v27, "Persistent store not found for accountIdentifier %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      v36 = v55;
      v37 = v54;
    }
    else
    {

      v36 = v55;
      v37 = v54;
      p_ivar_base_size = &RDDataAccess.ivar_base_size;
    }
    static CocoaError.Code.persistentStoreUnsupportedRequestType.getter();
    v38 = sub_10001A630(&qword_10083ADC0);
    inited = swift_initStackObject(v38, v57);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    v58 = 0xD00000000000001ALL;
    v59 = 0x80000001006F7BB0;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v58, &type metadata for String, &protocol witness table for String);
    v40 = objc_msgSend(v25, *((SEL *)p_ivar_base_size + 329));
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = v41;
    *(_QWORD *)(inited + 80) = v43;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
    v59 = v44;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 104), &v58, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 168) = &type metadata for String;
    *(_QWORD *)(inited + 144) = 0xD000000000000073;
    *(_QWORD *)(inited + 152) = 0x80000001006F7BD0;
    v45 = sub_1002B007C(inited);
    v46 = type metadata accessor for URL(0);
    v47 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v52, 1, 1, v46);
    v48 = static CocoaError.error(_:userInfo:url:)(v37, v45, v47);
    swift_bridgeObjectRelease(v45);
    sub_10000882C(v47, (uint64_t *)&unk_100839C70);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v51);
    v49 = (void *)_convertErrorToNSError(_:)(v48);
    ((void (**)(_QWORD, void *))a3)[2](a3, v49);

    swift_errorRelease(v48);
    swift_release(v53);
  }
}

double sub_1001163A4(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t Option;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  double result;
  _BYTE v16[16];
  _QWORD v17[4];
  _QWORD v18[2];

  Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = swift_allocObject(&unk_1007E4110, 24, 7);
  *(_QWORD *)(v9 + 16) = a3;
  sub_1000151E8(a1, (uint64_t)v8, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, Option);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      _Block_copy(a3);
      v11 = sub_10001C744((uint64_t)v8, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
      v12 = 0xD000000000000030;
      v13 = "removeSharedEntitySyncActivitiesWithCKIdentifier";
    }
    else
    {
      v12 = 0xD000000000000021;
      v11 = (uint64_t)_Block_copy(a3);
      v13 = "removeAllSharedEntitySyncActivity";
    }
  }
  else
  {
    _Block_copy(a3);
    v11 = sub_10001C744((uint64_t)v8, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    v12 = 0xD000000000000037;
    v13 = "removeSharedEntitySyncActivityWithUUIDForChangeTracking";
  }
  v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  v17[0] = v12;
  v17[1] = v14;
  v17[3] = 0;
  v18[0] = 0;
  v17[2] = 0;
  *(_QWORD *)((char *)v18 + 6) = 0;
  __chkstk_darwin(v11);
  *(_QWORD *)&v16[-32] = a2;
  *(_QWORD *)&v16[-24] = a1;
  *(_QWORD *)&v16[-16] = sub_100119B24;
  *(_QWORD *)&v16[-8] = v9;
  sub_10035288C((uint64_t)v17, (uint64_t)sub_100117054, (uint64_t)&v16[-48]);
  swift_release(v9);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v14).n128_u64[0];
  return result;
}

void sub_1001165B8(uint64_t a1, const void *a2)
{
  uint64_t Option;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a2);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001AAA8(v7, (uint64_t)qword_10083AC30);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDXPCDebugPerformer: removeSharedEntitySyncActivityWithActivities initiated", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  swift_storeEnumTagMultiPayload(v6, Option, 2);
  _Block_copy(a2);
  sub_1001163A4((uint64_t)v6, a1, a2);
  _Block_release(a2);
  sub_10001C744((uint64_t)v6, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  _Block_release(a2);
}

void sub_100116728(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t Option;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a3);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001AAA8(v9, (uint64_t)qword_10083AC30);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDXPCDebugPerformer: removeSharedEntitySyncActivityWithUUID initiated", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, a1, v14);
  swift_storeEnumTagMultiPayload(v8, Option, 0);
  _Block_copy(a3);
  sub_1001163A4((uint64_t)v8, a2, a3);
  _Block_release(a3);
  sub_10001C744((uint64_t)v8, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  _Block_release(a3);
}

void sub_1001168BC(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t Option;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  Option = type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(0);
  __chkstk_darwin(Option);
  v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  _Block_copy(a4);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001AAA8(v11, (uint64_t)qword_10083AC30);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDXPCDebugPerformer: removeSharedEntitySyncActivities initiated", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  *v10 = a1;
  v10[1] = a2;
  swift_storeEnumTagMultiPayload(v10, Option, 1);
  _Block_copy(a4);
  swift_bridgeObjectRetain(a2);
  sub_1001163A4((uint64_t)v10, a3, a4);
  _Block_release(a4);
  sub_10001C744((uint64_t)v10, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
  _Block_release(a4);
}

uint64_t sub_100116A48(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD v15[8];
  _QWORD v16[4];
  _QWORD v17[2];

  v7 = swift_allocObject(&unk_1007E40E8, 24, 7);
  *(_QWORD *)(v7 + 16) = a4;
  _Block_copy(a4);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001AAA8(v8, (uint64_t)qword_10083AC30);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDXPCDebugPerformer: updateMinimumSupportedVersion initiated", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v16[0] = 0xD00000000000001DLL;
  v16[1] = 0x80000001006F7A50;
  v16[3] = 0;
  v17[0] = 0;
  v16[2] = 0;
  *(_QWORD *)((char *)v17 + 6) = 0;
  __chkstk_darwin(v13);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = sub_10011701C;
  v15[5] = v7;
  sub_10035288C((uint64_t)v16, (uint64_t)sub_100117024, (uint64_t)v15);
  return swift_release(v7);
}

void sub_100116C30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  id v8;

  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10083AC30);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDXPCDebugPerformer: updateRemCurrentRuntimeVersionDebuggingOverride initiated", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v8 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a1);
  objc_msgSend(v7, "setRemCurrentRuntimeVersionDebuggingOverride:", v8);

}

uint64_t sub_100116D68(char a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _BYTE v13[24];
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  _QWORD v16[4];
  _QWORD v17[2];

  v5 = swift_allocObject(&unk_1007E40C0, 24, 7);
  *(_QWORD *)(v5 + 16) = a3;
  _Block_copy(a3);
  if (qword_100836D08 != -1)
    swift_once(&qword_100836D08, sub_1000F53D4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_10083AC30);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDXPCDebugPerformer: fetchAllDueDateDeltaAlerts initiated", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v16[0] = 0xD00000000000001ALL;
  v16[1] = 0x80000001006F79A0;
  v16[3] = 0;
  v17[0] = 0;
  v16[2] = 0;
  *(_QWORD *)((char *)v17 + 6) = 0;
  __chkstk_darwin(v11);
  v13[16] = a1 & 1;
  v14 = sub_100116FA8;
  v15 = v5;
  sub_10035288C((uint64_t)v16, (uint64_t)sub_100116FD0, (uint64_t)v13);
  return swift_release(v5);
}

uint64_t sub_100116F84()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100116FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001051D8(a1, a2, *(_QWORD *)(v2 + 16), (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
}

void sub_100116FD0(uint64_t a1)
{
  uint64_t v1;

  sub_1001046B8(a1, *(_BYTE *)(v1 + 16));
}

const char *sub_100116FEC()
{
  return "minimumSupportedAppVersion";
}

const char *sub_100117000()
{
  return "sortOrder";
}

void sub_10011701C(uint64_t a1)
{
  uint64_t v1;

  sub_100673E6C(a1, *(_QWORD *)(v1 + 16));
}

void sub_100117024(void *a1)
{
  uint64_t v1;

  sub_1001040E4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void (**)(id))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083B018, (uint64_t)&nominal type descriptor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
}

uint64_t sub_100117054(void *a1)
{
  uint64_t v1;

  return sub_1001067B0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

const char *sub_100117070()
{
  return "ckIdentifier";
}

const char *sub_100117084()
{
  return "uuidForChangeTracking";
}

uint64_t sub_100117090@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010697C(a1, (SEL *)&selRef_uuidForChangeTracking, a2);
}

void sub_1001170AC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10010660C(a1, a2, a3, a4, (SEL *)&selRef_setUuidForChangeTracking_);
}

void sub_1001170C8(void *a1)
{
  uint64_t v1;

  sub_1001039AC(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_1001170E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001051D8(a1, a2, *(_QWORD *)(v2 + 16), (unint64_t *)&unk_100840090, REMSharedEntitySyncActivity_ptr);
}

void sub_10011710C(uint64_t a1)
{
  uint64_t v1;

  sub_100103888(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD *, uint64_t))(v1 + 24));
}

void sub_100117128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001035EC(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100117130(void *a1)
{
  uint64_t v1;

  sub_1001036E4(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD *, uint64_t))(v1 + 24));
}

void sub_10011714C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100182D44(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

void sub_100117168(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100181E18(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

double sub_100117184@<D0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100180B80(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

void sub_1001171A0(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100180068(a1, *(unsigned __int8 *)(v2 + 24), a2);
}

void sub_1001171BC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_10017F338(a1, *(_BYTE *)(v2 + 24), a2);
}

void sub_1001171D8(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_10017EFE8(a1, *(_BYTE *)(v2 + 24), a2);
}

void sub_1001171F4(void *a1)
{
  uint64_t v1;

  sub_100101808(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(id **)(v1 + 32), *(void (**)(uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48));
}

unint64_t sub_100117214()
{
  unint64_t result;

  result = qword_10083ADE0;
  if (!qword_10083ADE0)
  {
    result = swift_getWitnessTable(&unk_1006A8F40, &type metadata for RDXPCDebugPerformer.ImageReversionError);
    atomic_store(result, (unint64_t *)&qword_10083ADE0);
  }
  return result;
}

uint64_t sub_100117268@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010697C(a1, (SEL *)&selRef_identifier, a2);
}

void sub_100117284(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10010660C(a1, a2, a3, a4, (SEL *)&selRef_setIdentifier_);
}

uint64_t sub_1001172A0(uint64_t a1)
{
  uint64_t v1;

  return sub_10010150C(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001172BC(void *a1, char a2)
{
  uint64_t v2;

  return sub_1001016A4(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t (*)(void *, _QWORD))sub_1001172E0);
}

void sub_1001172E0(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_1001172EC(uint64_t a1)
{
  uint64_t v1;

  return sub_1001012B0(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100117308(void *a1, char a2)
{
  uint64_t v2;

  return sub_1001016A4(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t (*)(void *, _QWORD))sub_100119B1C);
}

void sub_10011732C(void *a1)
{
  uint64_t v1;

  sub_100100D78(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_100117344()
{
  return sub_100100AF0();
}

uint64_t sub_10011734C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011735C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100117370()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100117380()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100117390(void *a1)
{
  uint64_t v1;

  return sub_1001002BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083AF70, (uint64_t)&nominal type descriptor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
}

const char *sub_1001173C8()
{
  return "markedForDeletion";
}

id sub_1001173D4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "markedForDeletion");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100117404(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setMarkedForDeletion:", *a1);
}

uint64_t sub_100117428@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010697C(a1, (SEL *)&selRef_identifier, a2);
}

void sub_100117444(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_10010660C(a1, a2, a3, a4, (SEL *)&selRef_setIdentifier_);
}

uint64_t sub_100117460(void *a1)
{
  uint64_t v1;

  return sub_100105524(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10011747C(void *a1)
{
  uint64_t v1;

  return sub_1000FFBB4(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_100117498(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000FFB20(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_1001174A0(uint64_t a1)
{
  uint64_t v1;

  sub_100105260(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(_QWORD, uint64_t))(v1 + 40));
}

unint64_t sub_1001174C4(char *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  Class isa;
  id v26;
  id v27;
  uint64_t v28;
  Class v29;
  id v30;
  char *v31;
  id v32;
  void *v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t inited;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  char *v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  id v88;
  void *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  _QWORD *v98;
  unint64_t v99;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _OWORD v114[2];
  _OWORD v115[2];
  uint64_t v116;
  char v117[80];

  v111 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v105 = (char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v108 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v109 = (uint64_t)&v103 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v103 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v103 - v14;
  v107 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v18 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v19 = objc_msgSend(a1, "hintData");
  v112 = a1;
  v106 = v4;
  if (v19)
  {
    v20 = v19;
    v103 = (uint64_t)a2;
    v104 = v12;
    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

    v24 = (void *)objc_opt_self(NSJSONSerialization);
    isa = Data._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v114[0] = 0;
    v26 = objc_msgSend(v24, "JSONObjectWithData:options:error:", isa, 0, v114);

    v27 = *(id *)&v114[0];
    if (!v26)
    {
      v101 = v27;
      swift_bridgeObjectRelease(v110);
      _convertNSErrorToError(_:)(v101);

      swift_willThrow(v102);
      return sub_1000A71C8(v21, v23);
    }
    _bridgeAnyObjectToAny(_:)(v115, v26);
    sub_1000A71C8(v21, v23);
    swift_unknownObjectRelease(v26);
    sub_10001A6CC(v115, v114);
    v28 = sub_10001A630((uint64_t *)&unk_1008473E0);
    if (swift_dynamicCast(&v113, v114, (char *)&type metadata for Any + 8, v28, 6))
    {
      swift_bridgeObjectRelease(v110);
      v110 = v113;
    }
    a1 = v112;
    v4 = v106;
    a2 = (void *)v103;
    v12 = v104;
  }
  Date.init(timeIntervalSinceReferenceDate:)((double)(int)objc_msgSend(a1, "lastAccessedSinceReferenceDate"));
  v29 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v107);
  v30 = objc_msgSend(a2, "stringFromDate:", v29);

  v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v104 = v31;

  v32 = objc_msgSend(a1, "identifier");
  if (v32)
  {
    v33 = v32;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v35 = v12;
    v36 = 0;
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v35 = v12;
    v36 = 1;
  }
  v37 = v111;
  v34(v35, v36, 1, v111);
  sub_1000A5CA8((uint64_t)v12, (uint64_t)v15, (uint64_t *)&unk_100839C80);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v38(v15, 1, v37))
  {
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
    v39 = 0;
    v40 = 0xE000000000000000;
  }
  else
  {
    v41 = v105;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v105, v15, v37);
    v42 = sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
    v39 = UUID.uuidString.getter(v42);
    v43 = v4;
    v40 = v44;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v37);
  }
  v45 = REMManualOrderingListType.init(intValue:)(objc_msgSend(a1, "listTypeRawValue"));
  if ((v45 & 0x10000) != 0)
  {
    v103 = 0;
    v47 = 0xE000000000000000;
  }
  else
  {
    v103 = REMManualOrderingListType.description.getter(v45);
    v47 = v46;
  }
  v48 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v48, v117);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = v39;
  *(_QWORD *)(inited + 40) = v40;
  v50 = swift_initStackObject(v48, &v116);
  *(_OWORD *)(v50 + 16) = xmmword_1006A89B0;
  *(_QWORD *)(v50 + 32) = 1734431845;
  *(_QWORD *)(v50 + 40) = 0xE400000000000000;
  v51 = objc_msgSend(a1, "eTag");
  if (v51)
  {
    v52 = v51;
    v53 = (uint64_t)v108;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

    v54 = 0;
    v55 = v111;
  }
  else
  {
    v54 = 1;
    v55 = v111;
    v53 = (uint64_t)v108;
  }
  v34((char *)v53, v54, 1, v55);
  v56 = v109;
  sub_1000A5CA8(v53, v109, (uint64_t *)&unk_100839C80);
  if (v38((char *)v56, 1, v55))
  {
    sub_10000882C(v56, (uint64_t *)&unk_100839C80);
    v57 = (uint64_t *)(v50 + 48);
    *(_QWORD *)(v50 + 72) = &type metadata for String;
LABEL_20:
    *v57 = 0;
    v58 = 0xE000000000000000;
    goto LABEL_23;
  }
  v60 = v105;
  v59 = v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v105, v56, v55);
  v61 = sub_10000882C(v56, (uint64_t *)&unk_100839C80);
  v62 = UUID.uuidString.getter(v61);
  v63 = v55;
  v64 = v62;
  v58 = v65;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v63);
  v57 = (uint64_t *)(v50 + 48);
  *(_QWORD *)(v50 + 72) = &type metadata for String;
  if (!v58)
    goto LABEL_20;
  *v57 = v64;
LABEL_23:
  *(_QWORD *)(v50 + 56) = v58;
  *(_QWORD *)(v50 + 80) = 0x61746144746E6968;
  *(_QWORD *)(v50 + 88) = 0xE800000000000000;
  v66 = sub_10001A630((uint64_t *)&unk_1008473E0);
  *(_QWORD *)(v50 + 96) = v110;
  v111 = v66;
  *(_QWORD *)(v50 + 120) = v66;
  strcpy((char *)(v50 + 128), "lastAccessed");
  *(_BYTE *)(v50 + 141) = 0;
  *(_WORD *)(v50 + 142) = -5120;
  v67 = v104;
  *(_QWORD *)(v50 + 144) = v107;
  *(_QWORD *)(v50 + 152) = v67;
  *(_QWORD *)(v50 + 168) = &type metadata for String;
  *(_QWORD *)(v50 + 176) = 0x657079547473696CLL;
  v68 = v103;
  *(_QWORD *)(v50 + 184) = 0xE800000000000000;
  *(_QWORD *)(v50 + 192) = v68;
  *(_QWORD *)(v50 + 200) = v47;
  *(_QWORD *)(v50 + 216) = &type metadata for String;
  *(_QWORD *)(v50 + 224) = 0xD000000000000010;
  *(_QWORD *)(v50 + 232) = 0x80000001006A8CE0;
  v69 = v112;
  *(_WORD *)(v50 + 240) = (unsigned __int16)objc_msgSend(v112, "listTypeRawValue");
  *(_QWORD *)(v50 + 264) = &type metadata for Int16;
  *(_QWORD *)(v50 + 272) = 0x44497473696CLL;
  *(_QWORD *)(v50 + 280) = 0xE600000000000000;
  v70 = objc_msgSend(v69, "listID");
  if (!v70)
  {
    v75 = (uint64_t *)(v50 + 288);
    *(_QWORD *)(v50 + 312) = &type metadata for String;
    goto LABEL_27;
  }
  v71 = v70;
  v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
  v74 = v73;

  v75 = (uint64_t *)(v50 + 288);
  *(_QWORD *)(v50 + 312) = &type metadata for String;
  if (!v74)
  {
LABEL_27:
    v76 = v112;
    *v75 = 0;
    v74 = 0xE000000000000000;
    goto LABEL_28;
  }
  *v75 = v72;
  v76 = v112;
LABEL_28:
  *(_QWORD *)(v50 + 296) = v74;
  *(_QWORD *)(v50 + 320) = 0xD000000000000014;
  *(_QWORD *)(v50 + 328) = 0x80000001006F80A0;
  *(_WORD *)(v50 + 336) = (unsigned __int16)objc_msgSend(v76, "serializationVersion", v103);
  *(_QWORD *)(v50 + 360) = &type metadata for Int16;
  *(_QWORD *)(v50 + 368) = 0xD000000000000026;
  *(_QWORD *)(v50 + 376) = 0x80000001006F80C0;
  v77 = objc_msgSend(v76, "concatenatedContainerIDsWithLocalContainerIDPrefix");
  if (v77)
  {
    v78 = v77;
    v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v81 = v80;

    *(_QWORD *)&v115[0] = v79;
    *((_QWORD *)&v115[0] + 1) = v81;
    v82 = *(_QWORD *)&v76[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
                        + 8];
    *(_QWORD *)&v114[0] = *(_QWORD *)&v76[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix];
    *((_QWORD *)&v114[0] + 1) = v82;
    v83 = sub_1000E525C();
    v84 = StringProtocol.components<A>(separatedBy:)(v114, &type metadata for String, &type metadata for String, v83, v83);
    swift_bridgeObjectRelease(v81);
    v85 = (void *)sub_10011EE40(v84);
    swift_bridgeObjectRelease(v84);
  }
  else
  {
    v85 = &_swiftEmptySetSingleton;
  }
  v86 = sub_1001E8BAC((uint64_t)v85);
  swift_bridgeObjectRelease(v85);
  v87 = sub_10001A630((uint64_t *)&unk_10083AE10);
  *(_QWORD *)(v50 + 384) = v86;
  *(_QWORD *)(v50 + 408) = v87;
  *(_QWORD *)(v50 + 416) = 0xD000000000000022;
  *(_QWORD *)(v50 + 424) = 0x80000001006F80F0;
  v88 = objc_msgSend(v76, "concatenatedElementIDsWithLocalElementIDPrefix");
  if (v88)
  {
    v89 = v88;
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    v91 = v76;
    v93 = v92;

    *(_QWORD *)&v115[0] = v90;
    *((_QWORD *)&v115[0] + 1) = v93;
    v94 = *(_QWORD *)&v91[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix + 8];
    *(_QWORD *)&v114[0] = *(_QWORD *)&v91[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix];
    *((_QWORD *)&v114[0] + 1) = v94;
    v95 = sub_1000E525C();
    v96 = StringProtocol.components<A>(separatedBy:)(v114, &type metadata for String, &type metadata for String, v95, v95);
    swift_bridgeObjectRelease(v93);
    v97 = (void *)sub_10011EE40(v96);
    swift_bridgeObjectRelease(v96);
  }
  else
  {
    v97 = &_swiftEmptySetSingleton;
  }
  v98 = sub_1001E8BAC((uint64_t)v97);
  swift_bridgeObjectRelease(v97);
  *(_QWORD *)(v50 + 456) = v87;
  *(_QWORD *)(v50 + 432) = v98;
  v99 = sub_10016E7E4(v50);
  *(_QWORD *)(inited + 72) = v111;
  *(_QWORD *)(inited + 48) = v99;
  return sub_10016E7E4(inited);
}

unint64_t sub_100117DC4(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  Class isa;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  char v52[88];

  v50 = a2;
  v3 = type metadata accessor for Date(0);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v44 - v15;
  v17 = objc_msgSend(a1, "identifier", v14);
  if (v17)
  {
    v18 = v17;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, v19, 1, v6);
  sub_1000A5CA8((uint64_t)v12, (uint64_t)v16, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6))
  {
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v16, v6);
    v22 = sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
    v20 = UUID.uuidString.getter(v22);
    v21 = v23;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v24 = objc_msgSend(a1, "listID");
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;

  }
  else
  {
    v26 = 0;
    v28 = 0xE000000000000000;
  }
  v29 = REMManualOrderingListType.init(intValue:)(objc_msgSend(a1, "listTypeRawValue"));
  v46 = v28;
  v47 = v26;
  if ((v29 & 0x10000) != 0)
  {
    v44 = 0xE000000000000000;
    v45 = 0;
  }
  else
  {
    v30 = REMManualOrderingListType.description.getter(v29);
    v44 = v31;
    v45 = v30;
  }
  Date.init(timeIntervalSinceReferenceDate:)((double)(int)objc_msgSend(a1, "lastAccessedSinceReferenceDate", v44, v45));
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v5, v49);
  v33 = objc_msgSend(v50, "stringFromDate:", isa);

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  v37 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v37, v52);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = v20;
  *(_QWORD *)(inited + 40) = v21;
  v39 = swift_initStackObject(v37, &v51);
  *(_OWORD *)(v39 + 16) = xmmword_1006A5130;
  *(_QWORD *)(v39 + 32) = 0xD000000000000010;
  *(_QWORD *)(v39 + 40) = 0x80000001006A8CE0;
  *(_WORD *)(v39 + 48) = (unsigned __int16)objc_msgSend(a1, "listTypeRawValue");
  *(_QWORD *)(v39 + 72) = &type metadata for Int16;
  *(_QWORD *)(v39 + 80) = 0x657079547473696CLL;
  v40 = v45;
  *(_QWORD *)(v39 + 88) = 0xE800000000000000;
  *(_QWORD *)(v39 + 96) = v40;
  *(_QWORD *)(v39 + 104) = v44;
  *(_QWORD *)(v39 + 120) = &type metadata for String;
  *(_QWORD *)(v39 + 128) = 0x44497473696CLL;
  v41 = v47;
  *(_QWORD *)(v39 + 136) = 0xE600000000000000;
  *(_QWORD *)(v39 + 144) = v41;
  *(_QWORD *)(v39 + 152) = v46;
  *(_QWORD *)(v39 + 168) = &type metadata for String;
  strcpy((char *)(v39 + 176), "lastAccessed");
  *(_QWORD *)(v39 + 216) = &type metadata for String;
  *(_BYTE *)(v39 + 189) = 0;
  *(_WORD *)(v39 + 190) = -5120;
  *(_QWORD *)(v39 + 192) = v34;
  *(_QWORD *)(v39 + 200) = v36;
  v42 = sub_10016E7E4(v39);
  *(_QWORD *)(inited + 72) = sub_10001A630((uint64_t *)&unk_1008473E0);
  *(_QWORD *)(inited + 48) = v42;
  return sub_10016E7E4(inited);
}

void sub_1001181B0(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1000FF2A4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1001181C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001181EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000FF7A0(a1, a2, *(uint64_t (**)(id))(v2 + 16));
}

uint64_t sub_1001181F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  result = sub_1003A6D3C(v1[2], v1[3], v1[4]);
  if (!v2)
    *a1 = result & 1;
  return result;
}

uint64_t sub_10011822C()
{
  uint64_t v0;

  return sub_1000FEF5C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD, __n128))(v0 + 32));
}

void sub_10011823C()
{
  uint64_t v0;

  sub_1000FEC18(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD, __n128))(v0 + 32));
}

void sub_100118248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000FEB94(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100118250()
{
  uint64_t v0;

  sub_1000FE940(*(void (**)(_QWORD *, _QWORD, __n128))(v0 + 16));
}

uint64_t sub_100118258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1001182CC()
{
  uint64_t v0;

  type metadata accessor for URL(0);
  sub_1000FDBAC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001182FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011830C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_1001183B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1000FDC08(*(char **)(v0 + 16), *(void **)(v0 + 24), v0 + v2, *(void (**)(id))v3, *(_QWORD *)(v3 + 8));
}

uint64_t sub_10011840C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_100118494()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1000FE448(*(void **)(v0 + 16), *(void **)(v0 + 24), v0 + v2, *(_BYTE **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1001184D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001184E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011850C(void *a1, int a2)
{
  uint64_t v2;

  return sub_1000FCB34(a1, a2, *(id *)(v2 + 16), *(_QWORD **)(v2 + 24));
}

uint64_t sub_100118514()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100118524(void *a1)
{
  uint64_t v1;

  sub_1000FC12C(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 32), *(double *)(v1 + 24));
}

void sub_100118544(void *a1)
{
  uint64_t v1;

  sub_1000FBD14(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 32), *(double *)(v1 + 24));
}

void sub_100118564(void *a1)
{
  uint64_t v1;

  sub_1000FBAD8(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24));
}

void sub_100118580(void *a1)
{
  uint64_t v1;

  sub_100106098(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24), *(_BYTE *)(v1 + 25), *(_BYTE *)(v1 + 26));
}

uint64_t sub_1001185A4()
{
  uint64_t v0;

  return sub_1004849C4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001185B0()
{
  return sub_100118600((uint64_t (*)(_QWORD))sub_10046BAE8);
}

uint64_t sub_1001185C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001185F4()
{
  return sub_100118600((uint64_t (*)(_QWORD))sub_10046BADC);
}

uint64_t sub_100118600(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(v1 + 32);
  v3 = a1(*(_QWORD *)(v1 + 24));
  return v2(v3);
}

uint64_t sub_100118644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

void sub_1001186D4()
{
  double *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000FB2E0((uint64_t)v0 + v2, v0[2], v0[3], v0[4], *(_QWORD *)((char *)v0 + v3), *(void (**)(void))((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10011872C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100118760()
{
  uint64_t *v0;
  uint64_t (*v1)(void);

  v1 = (uint64_t (*)(void))v0[5];
  sub_10046B470(v0[3], v0[4]);
  return v1();
}

void sub_1001187A4()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;

  v1 = *(_QWORD *)(v0 + 16);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v1 + 16))(v1, isa);

}

uint64_t sub_1001187EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100118818()
{
  uint64_t v0;

  sub_1000FA4D0(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *, __n128))(v0 + 24));
}

uint64_t sub_100118824()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

void sub_100118848(uint64_t a1)
{
  uint64_t v1;

  sub_1000F88C8(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_100118850()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100118874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100118930(char a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000F8AE4(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(id **)(v2 + 32), *(void ***)(v2 + 40), *(char **)(v2 + 48), v2 + v6, *(void **)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(NSObject **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001189C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));

  swift_release(*(_QWORD *)(v0 + v8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v5);
}

void sub_100118A8C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_1000F93D8(v0 + v2, *(void (**)(uint64_t))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(void **)(v0 + v4), *(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100118B08()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100118B34(char a1, char a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000F9888(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(uint64_t (**)(uint64_t))(v3 + 32));
}

void sub_100118B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000F8830(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_100118B48()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100118B70(uint64_t a1)
{
  uint64_t v1;

  sub_1000F64D4(a1, *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100118B80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100118BAC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F6728(a1, *(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_100118BB8(void *a1)
{
  uint64_t v1;

  sub_1000F6798(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_100118BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v8 + 8));
  swift_release(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v12);
}

void sub_100118CE0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_1000F7144(*(_QWORD *)(v0 + 16), v0 + v2, *(void **)(v0 + v3), *(void **)(v0 + v4), *(void **)(v0 + v5), *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(void **)(v0 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100118D78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 56));

  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100118DCC()
{
  uint64_t v0;

  return sub_1000F73AC(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(void (**)(uint64_t))(v0 + 48), *(void (**)(uint64_t))(v0 + 56), *(void **)(v0 + 64), *(_QWORD *)(v0 + 72), *(char **)(v0 + 80));
}

id sub_100118E00@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "account");
  *a2 = result;
  return result;
}

id sub_100118E38(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAccount:", *a1);
}

uint64_t sub_100118E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v12);
}

void sub_100118F44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_1000F8060(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void **)(v1 + v5), *(void (**)(uint64_t))(v1 + v6), *(_QWORD *)(v1 + v6 + 8), *(void **)(v1 + v7), *(void **)(v1 + v8), *(void **)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100118FF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_100119034()
{
  uint64_t v0;

  sub_1000F865C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void (**)(uint64_t))(v0 + 40));
}

void sub_100119048(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1000F5F20(a1, *(uint64_t **)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t sub_100119068()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100119078()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1001190B4()
{
  uint64_t v0;

  sub_1000F5884(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001190C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001190F4(uint64_t a1)
{
  uint64_t v1;

  sub_1000F5960(a1, *(dispatch_group_t *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t *sub_100119100(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v12 = a2[2];
      a1[1] = a2[1];
      a1[2] = v12;
      swift_bridgeObjectRetain(v12);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10011921C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
    v4 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    v4 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *sub_100119290(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v9 = a2[2];
    a1[1] = a2[1];
    a1[2] = v9;
    swift_bridgeObjectRetain(v9);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_QWORD *sub_100119384(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      a1[1] = a2[1];
      v9 = a2[2];
      a1[2] = v9;
      swift_bridgeObjectRetain(v9);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void *sub_100119498(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_10011955C(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for RDXPCDebugPerformer.ManualSortHintFetchRequest);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for Date(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100119638(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1006A8E70;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDXPCDebugPerformer.ImageReversionError()
{
  return &type metadata for RDXPCDebugPerformer.ImageReversionError;
}

uint64_t *sub_1001196D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain(v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1001197A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

_QWORD *sub_100119808(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain(v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_QWORD *sub_1001198B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v8 = a2[1];
      a1[1] = v8;
      swift_bridgeObjectRetain(v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void *sub_100119988(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_100119A10(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, type metadata accessor for RDXPCDebugPerformer.SharedEntitySyncActivityFetchOption);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100119AB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006A8ED8;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_100119C9C(NSObject *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t Subtasks;
  uint64_t v24;

  v24 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v21 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v6 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(v1 + 24);
  v22 = a1;
  sub_100119ECC(v13, a1);
  if (!v2)
  {
    v20 = v14;
    v15 = objc_msgSend(*(id *)(v1 + 40), "shouldSaveCompleted");
    v16 = (unsigned int *)&enum case for REMRemindersListDataView.ShowCompleted.on(_:);
    if (!v15)
      v16 = (unsigned int *)&enum case for REMRemindersListDataView.ShowCompleted.off(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *v16, v9);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), Subtasks);
    v17 = v21;
    (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v5, enum case for REMRemindersListDataView.SortingStyle.manual(_:), v24);
    sub_100507F38(v20, v22, (uint64_t)v12, (uint64_t)v8, (uint64_t)v5);
    v1 = v19;

    (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v24);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, Subtasks);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v1;
}

void sub_100119ECC(void *a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  Class v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;

  v4 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeCustom);
  v8 = v7;
  v9 = objc_allocWithZone((Class)REMSmartListsDataViewInvocation_fetchSmartList);
  v10 = a1;
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "initWithSmartListType:objectID:createIfNeeded:", v11, v10, 0, swift_bridgeObjectRelease(v8).n128_f64[0]);

  v13 = sub_1004796D0(a2);
  if (!v3)
  {
    v14 = objc_opt_self(REMSmartListsDataViewInvocationResult);
    v15 = swift_dynamicCastObjCClass(v13, v14);
    if (v15)
    {
      v16 = (void *)v15;
      v39 = v4;
      v37 = v13;
      v40 = v13;
      isa = (Class)objc_msgSend(v16, "smartListStorages");
      if (!isa)
      {
        v18 = sub_1000151B0(0, &qword_10083B1D8, REMSmartListStorage_ptr);
        v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v18);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v19);
      }
      v38 = (void *)objc_opt_self(REMSmartListsDataView);
      v20 = objc_msgSend(v16, "accountStorages");
      v21 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v22 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      v23 = sub_10011A5DC();
      v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v20, v21, v22, v23);

      v25 = Dictionary._bridgeToObjectiveC()().super.isa;
      v26 = objc_msgSend(v16, "parentListStorages", swift_bridgeObjectRelease(v24).n128_f64[0]);
      v27 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
      v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v26, v21, v27, v23);

      v29 = Dictionary._bridgeToObjectiveC()().super.isa;
      v30 = objc_msgSend(v38, "smartListsFromSmartListStorages:accountStorages:parentListStorages:store:", isa, v25, v29, *(_QWORD *)(v39 + 48), swift_bridgeObjectRelease(v28).n128_f64[0]);

      v31 = sub_1000151B0(0, &qword_10083B1E0, REMSmartList_ptr);
      v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

      v33 = v10;
      v34 = sub_10011A634(v32);
      swift_bridgeObjectRelease(v32);

      if (v34)
      {
        REMSmartList.codable.getter();

        return;
      }
      v36 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v33);
      swift_willThrow(v36);

      v13 = v37;
    }
    else
    {
      v35 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v10);
      swift_willThrow(v35);
    }

  }
}

uint64_t sub_10011A284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  id v6;
  objc_class *v7;
  objc_class *v8;
  objc_class *v9;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(void **)(v1 + 24);
  v5 = qword_100836F48;
  v6 = v4;
  if (v5 != -1)
    swift_once(&qword_100836F48, sub_1001BB6F0);
  v7 = (objc_class *)qword_100871D00;
  sub_1001BB810();
  v9 = v8;
  v10 = (objc_class *)sub_1001BBCA0();
  v11 = sub_1001BBE78((uint64_t)v4, 1, a1, v7, v9, v10);
  if (v2)
  {

    swift_bridgeObjectRelease(v9);
  }
  else
  {
    a1 = v11;
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v10);
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v14 = a1;
      else
        v14 = a1 & 0xFFFFFFFFFFFFFF8;
      v15 = type metadata accessor for REMCDBaseSection();
      swift_bridgeObjectRetain(a1);
      v16 = _bridgeCocoaArray<A>(_:)(v14, v15);

      swift_bridgeObjectRelease(a1);
      v10 = (objc_class *)a1;
      a1 = v16;
    }
    else
    {
      swift_bridgeObjectRetain(a1);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v12);
      type metadata accessor for REMCDBaseSection();

      v10 = (objc_class *)a1;
    }
  }
  swift_bridgeObjectRelease(v10);
  return a1;
}

void sub_10011A3D4(NSObject *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  __n128 v9;
  NSObject *v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  sub_100119ECC(*(void **)(v1 + 24), a1);
  if (!v2)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "smartListType");
    v7 = objc_msgSend(v5, "objectID");
    if (qword_100837960 != -1)
      swift_once(&qword_100837960, sub_1005B8A54);
    v8 = qword_100872290;
    swift_retain();
    v10 = sub_10058E6E0(v6, v7, a1, v8, v9);

    swift_release(v8);
    v11 = -[NSObject membershipsOfRemindersInSectionsAsData](v10, "membershipsOfRemindersInSectionsAsData");
    if (v11)
    {
      v12 = v11;
      v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

      sub_1000151B0(0, (unint64_t *)&qword_100840030, REMMemberships_ptr);
      static REMJSONRepresentable.fromJSONData(_:)(&v16, v13, v15);
      sub_1000A71C8(v13, v15);

    }
    else
    {

    }
  }
}

uint64_t sub_10011A578()
{
  id *v0;

  return swift_deallocClassInstance(v0, 65, 7);
}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersFromCustomSmartListToTemplate()
{
  return objc_opt_self(_TtC7remindd61RDTemplateOperationCopyRemindersFromCustomSmartListToTemplate);
}

unint64_t sub_10011A5DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083A1F0;
  if (!qword_10083A1F0)
  {
    v1 = sub_1000151B0(255, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10083A1F0);
  }
  return result;
}

void *sub_10011A634(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v9))
  {
    sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
    v3 = 4;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = objc_msgSend(v4, "objectID");
      v8 = static NSObject.== infix(_:_:)(v7);

      if ((v8 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v5;
      }

      ++v3;
      if (v6 == v2)
        goto LABEL_17;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return 0;
}

id REMCDAccountV2023MinorEMigratingToZREMCDBASELIST.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone(v2), "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id REMCDAccountListData.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDAccountListData();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t type metadata accessor for REMCDAccountListData()
{
  return objc_opt_self(REMCDAccountListData);
}

id REMCDAccountListData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDAccountListData();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10011A910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083B210);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083B210);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10011A9A0()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListener], "invalidate");
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7remindd26RDClientConnectionListener_xpcListenerUserInteractive], "invalidate");
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDClientConnectionListener();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10011AB04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  void (*v32)(_BYTE *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE v36[32];
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  _QWORD *v40;
  char v41[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnections, v41, 0, 0);
  v2 = *v1;
  v35 = v2 & 0xC000000000000001;
  if ((v2 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v3 = v2;
    else
      v3 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = __CocoaSet.count.getter(v3);
    if (v4)
      goto LABEL_6;
LABEL_12:
    swift_bridgeObjectRelease();
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  v4 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(v2);
  if (!v4)
    goto LABEL_12;
LABEL_6:
  v40 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v4 & ~(v4 >> 63), 0);
  if (v35)
  {
    if (v2 < 0)
      v5 = v2;
    else
      v5 = v2 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.startIndex.getter(v5);
    v8 = 1;
  }
  else
  {
    result = sub_100364E8C(v2);
    v8 = v9 & 1;
  }
  v37 = result;
  v38 = v7;
  v39 = v8;
  if (v4 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
    if (v2 < 0)
      v10 = v2;
    v34 = v10;
    do
    {
      while (1)
      {
        v17 = v37;
        v16 = v38;
        v18 = v39;
        sub_100364910(v37, v38, v39, v2);
        v20 = v19;
        v21 = objc_msgSend(v19, "description");
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

        v25 = v40;
        result = swift_isUniquelyReferenced_nonNull_native(v40);
        if ((result & 1) == 0)
        {
          result = sub_1001C1B0C(0, v25[2] + 1, 1);
          v25 = v40;
        }
        v27 = v25[2];
        v26 = v25[3];
        if (v27 >= v26 >> 1)
        {
          result = sub_1001C1B0C(v26 > 1, v27 + 1, 1);
          v25 = v40;
        }
        v25[2] = v27 + 1;
        v28 = &v25[2 * v27];
        v28[4] = v22;
        v28[5] = v24;
        if (v35)
          break;
        v11 = sub_10036456C(v17, v16, v18, v2);
        v13 = v12;
        v15 = v14;
        sub_1000E515C(v17, v16, v18);
        v37 = v11;
        v38 = v13;
        v39 = v15 & 1;
        if (!--v4)
          goto LABEL_29;
      }
      if ((v18 & 1) == 0)
        goto LABEL_31;
      v29 = __CocoaSet.Index.handleBitPattern.getter(v17, v16);
      if (v29)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v31 = sub_10001A630(&qword_10083B2E8);
      v32 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v36, v31);
      __CocoaSet.formIndex(after:isUnique:)(v33, isUniquelyReferenced_nonNull_native, v34);
      v32(v36, 0);
      --v4;
    }
    while (v4);
LABEL_29:
    sub_1000E515C(v37, v38, v39);
    swift_bridgeObjectRelease();
    return (uint64_t)v40;
  }
  return result;
}

uint64_t type metadata accessor for RDClientConnectionListener()
{
  return objc_opt_self(_TtC7remindd26RDClientConnectionListener);
}

void sub_10011AE18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_10041E628();

  }
}

uint64_t sub_10011AE68()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10011AE8C()
{
  uint64_t v0;

  sub_10011AE18(v0);
}

uint64_t sub_10011AE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  char v5;
  uint64_t v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, _QWORD));
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v34[48];
  _QWORD v35[5];
  unsigned int v36;
  unsigned __int16 v37;

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_clientIdentity, (uint64_t)v34);
  sub_10001BAE8((uint64_t)v34);
  sub_1005C2394((uint64_t)v34);
  v5 = v4;
  if (v4 == 2)
  {
    v6 = type metadata accessor for RDNoOpAppProtectionGuard();
    v7 = &off_1007FCCA8;
  }
  else
  {
    v6 = type metadata accessor for RDSystemAppProtectionGuard();
    v7 = &off_1007FCC98;
  }
  v8 = swift_allocObject(v6, 16, 7);
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppBundleIdentifier);
  v10 = v9;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC7remindd18RDClientConnection_xpcConnection), "auditToken");
  v29 = v35[1];
  v30 = v35[0];
  v27 = v35[3];
  v28 = v35[2];
  v11 = sub_10001A630((uint64_t *)&unk_10083A270);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1006A3C40;
  sub_1000184A8((uint64_t)v34, (uint64_t)v35);
  v13 = v36 | ((unint64_t)v37 << 32);
  v14 = v37 >> 14;
  if (v14 >= 2)
  {
    if (v14 == 2)
    {
      v37 = WORD2(v13) & 0x3FFF;
      if ((v13 & 0x10000000000) != 0)
      {
        v16 = 0x80000001006F8F90;
        v15 = 0xD000000000000011;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v37 = WORD2(v13) & 0x3FFF;
  }
  v15 = 0;
  v16 = 0xE000000000000000;
LABEL_9:
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_1000184F8();
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v16;
  sub_1000181B8();
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v17;
  *(_QWORD *)(v12 + 72) = v18;
  *(_QWORD *)(v12 + 80) = v19;
  v20 = String.init(format:_:)(1076183077, 0xE400000000000000, v12);
  v22 = v21;
  swift_getObjectType(v8);
  v23 = swift_allocObject(&unk_1007E50A8, 32, 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, _QWORD)))v7[1];
  swift_retain(a3);
  LOBYTE(v26) = (v5 == 2) | v5 & 1;
  v24(v31, v10, v30, v29, v28, v27, v20, v22, v26, (uint64_t (*)(uint64_t, _QWORD))sub_1000098EC);
  swift_unknownObjectRelease(v8);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v22);
  return swift_release(v23);
}

uint64_t sub_10011B114()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011B138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083B2F0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083B2F0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10011B1C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002B4EE4(*a1, *a2);
}

Swift::Int sub_10011B1D4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEB00000000656D61;
  v3 = 0x4E79616C70736964;
  if (v1 != 1)
  {
    v3 = 0x6574616C706D6574;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6E6F697461657263;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEC00000065746144;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10011B284(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEB00000000656D61;
  v3 = 0x4E79616C70736964;
  if (*v1 != 1)
  {
    v3 = 0x6574616C706D6574;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6E6F697461657263;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEC00000065746144;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10011B310(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEB00000000656D61;
  v4 = 0x4E79616C70736964;
  if (v2 != 1)
  {
    v4 = 0x6574616C706D6574;
    v3 = 0xE800000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6E6F697461657263;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEC00000065746144;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10011B3BC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10011D024(*a1);
  *a2 = result;
  return result;
}

void sub_10011B3E8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC00000065746144;
  v4 = 0xEB00000000656D61;
  v5 = 0x4E79616C70736964;
  if (v2 != 1)
  {
    v5 = 0x6574616C706D6574;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E6F697461657263;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_10011B458(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DD060;
}

_UNKNOWN **static REMCDTemplateSection.recordTypes()()
{
  return &off_1007DD088;
}

uint64_t static REMCDTemplateSection.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t result;

  v8 = type metadata accessor for REMCDTemplateSection();
  v9 = a1;
  swift_bridgeObjectRetain(a3);
  v10 = a4;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "objectWithRecordID:accountID:context:", v9, v11, v10);

  if (v12)
  {
    result = swift_dynamicCastClass(v12, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDTemplateSection.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t MetatypeMetadata;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v11 = v10;
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
  }
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v12)
  {
    v13 = objc_msgSend(a2, "ckIdentifier");
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v12, "mergeDataFromRecord:accountID:", a1, v13);

      objc_msgSend(v12, "setCkServerRecord:", a1);
      objc_msgSend(v12, "setInCloud:", 1);
      objc_msgSend(v12, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_100836D18 != -1)
        swift_once(&qword_100836D18, sub_10011B138);
      v15 = type metadata accessor for Logger(0);
      sub_10001AAA8(v15, (uint64_t)qword_10083B2F0);
      v16 = a2;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc(22, -1);
        v20 = swift_slowAlloc(64, -1);
        v33 = v20;
        v34 = v4;
        *(_DWORD *)v19 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v22 = String.init<A>(describing:)(&v34, MetatypeMetadata);
        v24 = v23;
        v34 = sub_10001A820(v22, v23, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
        *(_QWORD *)&v25 = swift_bridgeObjectRelease(v24).n128_u64[0];
        *(_WORD *)(v19 + 12) = 2082;
        v26 = objc_msgSend(v16, "remObjectID", v25, v33);
        if (v26)
        {
          v27 = v26;
          v28 = objc_msgSend(v26, "description");

          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          v31 = v30;

        }
        else
        {
          v31 = 0xE300000000000000;
          v29 = 7104878;
        }
        v34 = sub_10001A820(v29, v31, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);

        swift_bridgeObjectRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v12;
}

Swift::String __swiftcall REMCDTemplateSection.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x6574616C706D6554;
  v1 = (void *)0xEF6E6F6974636553;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDTemplateSection.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  NSString v4;
  id v5;
  NSString v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  id v16;
  objc_class *v17;
  id v18;
  void *v19;
  char v20;
  objc_super v21;

  v4 = String._bridgeToObjectiveC()();
  v21.receiver = v2;
  v21.super_class = (Class)type metadata accessor for REMCDTemplateSection();
  objc_msgSendSuper2(&v21, "mergeDataFromRecord:accountID:", from.super.isa, v4);

  v5 = -[objc_class recordID](from.super.isa, "recordID");
  v6 = objc_msgSend(v5, "recordName");

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = v8;
    v6 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v7 = swift_bridgeObjectRelease(v9).n128_u64[0];
  }
  v10 = objc_msgSend(v2, "ckIdentifierFromRecordName:", v6, v7);

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v13 = v12;
    v10 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v11 = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  objc_msgSend(v2, "setCkIdentifier:", v10, v11);

  v14 = objc_msgSend(v2, "mergeDataRevertedLocallyMarkedForDeletion");
  v15 = objc_msgSend(v2, "mergeDataRefusedToMergeMarkedForDeletion");
  v20 = 0;
  v16 = v2;
  v17 = from.super.isa;
  sub_10044322C(v17, v14, v15, v16, v16, v17, &v20);

  if (v20 == 1)
  {
    v18 = objc_msgSend(v16, "template");
    if (v18)
    {
      v19 = v18;
      if ((objc_msgSend(v18, "ckNeedsInitialFetchFromCloud") & 1) == 0)
        _s7remindd13REMCDTemplateC19sortChildrenObjectsyyF_0();

    }
  }
}

void sub_10011BC20(_BYTE *a1, void *a2, void *a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  id v29;
  NSString v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Class isa;
  id v38;
  void *v39;
  id v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  char v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  _QWORD v68[2];
  NSString v69;

  v66 = a4;
  v7 = type metadata accessor for UUID(0);
  v67 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v63 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v64);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v65 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v63 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v63 - v23;
  v25 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v26 = __chkstk_darwin(v25).n128_u64[0];
  v28 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    if (*a1 == 1)
    {
      v29 = objc_msgSend(a3, "encryptedValues", v26);
      v30 = String._bridgeToObjectiveC()();
      v31 = objc_msgSend(v29, "objectForKeyedSubscript:", v30);
      swift_unknownObjectRelease(v29);

      if (v31)
      {
        v69 = v31;
        v32 = sub_10001A630(&qword_1008398E0);
        if ((swift_dynamicCast(v68, &v69, v32, &type metadata for String, 6) & 1) != 0)
        {
          v33 = v68[1];
          v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v33);
        }
        else
        {
          v31 = 0;
        }
      }
      objc_msgSend(a2, "setDisplayName:", v31);

      return;
    }
    v38 = objc_msgSend(a2, "template", v26);
    if (v38)
    {
      v39 = v38;
      v40 = objc_msgSend(v38, "identifier");

      if (v40)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

        v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
        v41(v21, 0, 1, v7);
      }
      else
      {
        v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
        v41(v21, 1, 1, v7);
      }
      sub_1000A5CA8((uint64_t)v21, (uint64_t)v24, (uint64_t *)&unk_100839C80);
    }
    else
    {
      v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
      v41(v24, 1, 1, v7);
    }
    v42 = CKRecord.subscript.getter(0x6574616C706D6554, 0xE800000000000000);
    if (v42)
    {
      v43 = v42;
      v44 = objc_opt_self(CKReference);
      v45 = (void *)swift_dynamicCastObjCClass(v43, v44);
      if (!v45)
        swift_unknownObjectRelease(v43);
    }
    else
    {
      v45 = 0;
    }
    v46 = sub_1000C8F60(v45);
    if (v46)
    {
      v47 = v46;
      v48 = type metadata accessor for REMCDTemplate();
      v49 = (void *)swift_dynamicCastClass(v47, v48);
      if (!v49)

    }
    else
    {
      v49 = 0;
    }

    objc_msgSend(a2, "setTemplate:", v49);
    v50 = objc_msgSend(a2, "template");
    if (v50)
    {
      v51 = v50;
      v52 = objc_msgSend(v50, "identifier");

      if (v52)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v52);

        v53 = 0;
      }
      else
      {
        v53 = 1;
      }
      v54 = (uint64_t)v65;
      v41(v15, v53, 1, v7);
      sub_1000A5CA8((uint64_t)v15, (uint64_t)v18, (uint64_t *)&unk_100839C80);
    }
    else
    {
      v41(v18, 1, 1, v7);
      v54 = (uint64_t)v65;
    }
    v55 = (uint64_t)&v10[*(int *)(v64 + 48)];
    sub_10011D420((uint64_t)v18, (uint64_t)v10);
    sub_10011D420((uint64_t)v24, v55);
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
    if (v56((uint64_t)v10, 1, v7) == 1)
    {
      sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
      sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
      if (v56(v55, 1, v7) == 1)
      {
        sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
        v57 = 0;
LABEL_38:
        *v66 = v57 & 1;
        return;
      }
    }
    else
    {
      sub_10011D420((uint64_t)v10, v54);
      if (v56(v55, 1, v7) != 1)
      {
        v58 = v67;
        v59 = v63;
        (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v63, v55, v7);
        v60 = sub_10011D468();
        v61 = dispatch thunk of static Equatable.== infix(_:_:)(v54, v59, v7, v60);
        v62 = *(void (**)(char *, uint64_t))(v58 + 8);
        v62(v59, v7);
        sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
        sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
        v62((char *)v54, v7);
        sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
        v57 = v61 ^ 1;
        goto LABEL_38;
      }
      sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100839C80);
      sub_10000882C((uint64_t)v24, (uint64_t *)&unk_100839C80);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v54, v7);
    }
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_10083B370);
    v57 = 1;
    goto LABEL_38;
  }
  v34 = sub_10011D06C();
  v35 = type metadata accessor for Date(0);
  CKRecordKeyValueSetting.subscript.getter(0x6E6F697461657243, 0xEC00000065746144, v34, v35, &protocol witness table for Date);
  v36 = *(_QWORD *)(v35 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v28, 1, v35) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v35);
  }
  objc_msgSend(a2, "setCreationDate:", isa);

}

CKRecord_optional __swiftcall REMCDTemplateSection.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  Swift::Bool v9;
  id v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  char *v20;
  char *v21;
  _UNKNOWN **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t ObjectType;
  uint64_t v35;
  objc_class *v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  objc_super v42;
  CKRecord_optional result;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - v6;
  v8 = (objc_class *)type metadata accessor for REMCDTemplateSection();
  v42.receiver = v0;
  v42.super_class = v8;
  v10 = objc_msgSendSuper2(&v42, "newlyCreatedRecord");
  if (v10)
  {
    v11 = 0;
    v12 = &off_1007DE130;
    v13 = (uint64_t *)&unk_1008380D0;
    v38 = v0;
    do
    {
      if (!*((_BYTE *)v12 + v11 + 32))
      {
        v27 = objc_msgSend(v1, "creationDate");
        if (v27)
        {
          v28 = v27;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v27);

          v29 = type metadata accessor for Date(0);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v4, 0, 1, v29);
        }
        else
        {
          v29 = type metadata accessor for Date(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v4, 1, 1, v29);
        }
        sub_1000A5CA8((uint64_t)v4, (uint64_t)v7, v13);
        type metadata accessor for Date(0);
        v35 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v7, 1, v29) == 1)
        {
          sub_10000882C((uint64_t)v7, v13);
          v39 = 0u;
          v40 = 0u;
          v41 = 0;
        }
        else
        {
          *((_QWORD *)&v40 + 1) = v29;
          v41 = &protocol witness table for Date;
          v14 = sub_1000087F0(&v39);
          (*(void (**)(_QWORD *, char *, uint64_t))(v35 + 32))(v14, v7, v29);
        }
        v15 = sub_10011D06C();
        CKRecordKeyValueSetting.subscript.setter(&v39, 0x6E6F697461657243, 0xEC00000065746144, v15);
        goto LABEL_5;
      }
      if (*((_BYTE *)v12 + v11 + 32) == 1)
      {
        v16 = objc_msgSend(v10, "encryptedValues");
        v17 = objc_msgSend(v1, "displayName");
        if (v17)
        {
          v18 = v17;
          v19 = v10;
          v20 = v7;
          v21 = v4;
          v22 = v12;
          v23 = v13;
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          v26 = v25;

          *((_QWORD *)&v40 + 1) = &type metadata for String;
          v41 = &protocol witness table for String;
          *(_QWORD *)&v39 = v24;
          *((_QWORD *)&v39 + 1) = v26;
          v13 = v23;
          v12 = v22;
          v4 = v21;
          v7 = v20;
          v10 = v19;
          v1 = v38;
        }
        else
        {
          v41 = 0;
          v39 = 0u;
          v40 = 0u;
        }
        ObjectType = swift_getObjectType(v16);
        CKRecordKeyValueSetting.subscript.setter(&v39, 0x4E79616C70736944, 0xEB00000000656D61, ObjectType);
        swift_unknownObjectRelease(v16);
        goto LABEL_5;
      }
      if ((objc_msgSend(v1, "markedForDeletion") & 1) == 0)
      {
        v31 = objc_msgSend(v1, "template");
        v30 = v31;
        if (!v31)
          goto LABEL_18;
        v32 = objc_msgSend(v31, "recordID");

        if (v32)
        {
          v30 = objc_msgSend(v1, "cloudKitReferenceWithRecordIDAndValidateAction:", v32);

          if (v30)
            v33 = v30;
          goto LABEL_18;
        }
      }
      v30 = 0;
LABEL_18:
      CKRecord.subscript.setter(v30, 0x6574616C706D6554, 0xE800000000000000);

LABEL_5:
      ++v11;
    }
    while (v11 != 3);
  }
  v36 = (objc_class *)v10;
  result.value.super.isa = v36;
  result.is_nil = v9;
  return result;
}

id REMCDTemplateSection.parentCDObject.getter()
{
  void *v0;

  return objc_msgSend(v0, "template");
}

Swift::Void __swiftcall REMCDTemplateSection.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100836D18 != -1)
    swift_once(&qword_100836D18, sub_10011B138);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083B2F0);
  v10 = v0;
  v2 = Logger.logObject.getter(v10);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v12 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType(v10);
    v6 = sub_10001A630(&qword_10083B308);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    v9 = v8;
    ObjectType = sub_10001A820(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

Swift::Void __swiftcall REMCDTemplateSection.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (qword_100836D18 != -1)
    swift_once(&qword_100836D18, sub_10011B138);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083B2F0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_subscriptionOwnerUserRecordID;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = 7104878;
  v7 = swift_slowAlloc(22, -1);
  v8 = swift_slowAlloc(64, -1);
  v48 = v8;
  *(_DWORD *)v7 = 136446466;
  v9 = objc_msgSend(v2, "remObjectID");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "description");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v14 = 0xE300000000000000;
    v12 = 7104878;
  }
  v47 = sub_10001A820(v12, v14, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v14).n128_u64[0];
  *(_WORD *)(v7 + 12) = 2082;
  v16 = objc_msgSend(v2, "template", v15);
  if (!v16)
    goto LABEL_12;
  v17 = v16;
  v18 = objc_msgSend(v16, "remObjectID");
  if (!v18)
  {

LABEL_12:
    v22 = 0xE300000000000000;
    goto LABEL_13;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "description");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v22 = v21;

LABEL_13:
  v5 = &selRef_subscriptionOwnerUserRecordID;
  v47 = sub_10001A820(v6, v22, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

  swift_bridgeObjectRelease(v22);
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for section in template {templateSectionID: %{public}s, templateID: %{public}s}", (uint8_t *)v7, 0x16u);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v7, -1, -1);

LABEL_14:
  v23 = objc_msgSend(v2, v5[38]);
  if (!v23)
    return;
  v24 = v23;
  if (objc_msgSend(v23, "markedForDeletion")
    && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
  {
    v25 = v2;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v27))
    {

LABEL_28:
      objc_msgSend(v25, "markForDeletion");
      goto LABEL_29;
    }
    v28 = v5;
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v48 = v30;
    *(_DWORD *)v29 = 136446466;
    v31 = objc_msgSend(v25, "remObjectID");
    if (v31)
    {
      v32 = v31;
      v33 = objc_msgSend(v31, "description");

      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

    }
    else
    {
      v36 = 0xE300000000000000;
      v34 = 7104878;
    }
    v47 = sub_10001A820(v34, v36, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

    *(_QWORD *)&v37 = swift_bridgeObjectRelease(v36).n128_u64[0];
    *(_WORD *)(v29 + 12) = 2082;
    v38 = objc_msgSend(v25, v28[38], v37);
    v46 = v30;
    if (v38)
    {
      v39 = v38;
      v40 = objc_msgSend(v38, "remObjectID");
      if (v40)
      {
        v41 = v40;
        v42 = objc_msgSend(v40, "description");

        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

LABEL_27:
        v47 = sub_10001A820(v43, v45, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Template is marked for deletion but section in template is not {templateSectionID: %{public}s, templateID: %{public}s}", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        goto LABEL_28;
      }

    }
    v45 = 0xE300000000000000;
    v43 = 7104878;
    goto LABEL_27;
  }
LABEL_29:
  objc_msgSend(v24, "forcePushToCloud");

}

unint64_t sub_10011D024(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCFF8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_10011D06C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100839CB0;
  if (!qword_100839CB0)
  {
    v1 = objc_opt_self(CKRecord);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100839CB0);
  }
  return result;
}

uint64_t _s7remindd20REMCDTemplateSectionC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;

  if (qword_100836D18 != -1)
    swift_once(&qword_100836D18, sub_10011B138);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083B2F0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_10083B308);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    v10 = v9;
    ObjectType = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v13);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s7remindd20REMCDTemplateSectionC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;

  if (qword_100836D18 != -1)
    swift_once(&qword_100836D18, sub_10011B138);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083B2F0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_10083B308);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    v10 = v9;
    ObjectType = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v13);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_10011D420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10011D468()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083B380;
  if (!qword_10083B380)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10083B380);
  }
  return result;
}

uint64_t _s6FieldsOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6FieldsOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10011D58C + 4 * byte_1006A9045[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10011D5C0 + 4 * byte_1006A9040[v4]))();
}

uint64_t sub_10011D5C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011D5C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011D5D0);
  return result;
}

uint64_t sub_10011D5DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10011D5E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10011D5E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011D5F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6FieldsOMa()
{
  return &_s6FieldsON;
}

unint64_t sub_10011D60C(uint64_t a1)
{
  unint64_t result;

  result = sub_10011D630();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10011D630()
{
  unint64_t result;

  result = qword_10083B390;
  if (!qword_10083B390)
  {
    result = swift_getWitnessTable(&unk_1006A9090, &_s6FieldsON);
    atomic_store(result, (unint64_t *)&qword_10083B390);
  }
  return result;
}

unint64_t sub_10011D674(uint64_t a1)
{
  unint64_t result;

  result = sub_10011D698();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10011D698()
{
  unint64_t result;

  result = qword_10083B398;
  if (!qword_10083B398)
  {
    result = swift_getWitnessTable(&unk_1006A9058, &_s6FieldsON);
    atomic_store(result, (unint64_t *)&qword_10083B398);
  }
  return result;
}

unint64_t sub_10011D6E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083B3A0;
  if (!qword_10083B3A0)
  {
    v1 = sub_1000A5A94(&qword_10083B3A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083B3A0);
  }
  return result;
}

unint64_t sub_10011D730()
{
  unint64_t result;

  result = qword_10083B3B0;
  if (!qword_10083B3B0)
  {
    result = swift_getWitnessTable(&unk_1006A9140, &_s6FieldsON);
    atomic_store(result, (unint64_t *)&qword_10083B3B0);
  }
  return result;
}

unint64_t sub_10011D774(uint64_t a1)
{
  unint64_t result;

  result = sub_10011D798();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10011D798()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083B4A0;
  if (!qword_10083B4A0)
  {
    v1 = type metadata accessor for REMReminderDetailDataView.CheckUpdateInvocation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMReminderDetailDataView.CheckUpdateInvocation, v1);
    atomic_store(result, (unint64_t *)&qword_10083B4A0);
  }
  return result;
}

uint64_t sub_10011D7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = (*(uint64_t (**)(void))(a2 + 16))();
  if (v4 >> 60 == 15)
    return 0;
  v6 = v3;
  v7 = v4;
  sub_10011D974();
  static REMJSONRepresentable.fromJSONData(_:)(&v8, v6, v7);
  result = sub_1000A71B4(v6, v7);
  if (!v2)
    return v8;
  return result;
}

uint64_t sub_10011D87C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083B4A8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083B4A8);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10011D910()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "membershipsOfRemindersInSectionsAsData");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_10011D974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100840030;
  if (!qword_100840030)
  {
    v1 = objc_opt_self(REMMemberships);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100840030);
  }
  return result;
}

uint64_t sub_10011D9B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v1 + 32) = swift_getKeyPath(&unk_1006A9228);
  KeyPath = swift_getKeyPath(&unk_1006A9260);
  *(_QWORD *)(v1 + 40) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_10083B4C0 = v1;
  return result;
}

uint64_t sub_10011DA30(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = v3;
  v7 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    for (i = 4; ; ++i)
    {
      v7 = i - 4;
      v10 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      v11 = v10;
      v12 = i - 3;
      if (__OFADD__(v7, 1))
        break;
      v13 = sub_10034BA18(a3);
      if (v4)
      {
        v7 = a1;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v7;
      }
      sub_1001E1A68(v13);

      if (v12 == v8)
      {
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v14 = a2;
    else
      v14 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease();
  return v7;
}

void *sub_10011DB60(void *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  sub_10034B07C(7, 0, 7);
  v4 = v3;
  v5 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "entity");
  objc_msgSend(v6, "setEntity:", v7);

  objc_msgSend(v6, "setAffectedStores:", 0);
  objc_msgSend(v6, "setPredicate:", v4);
  v8 = NSManagedObjectContext.fetch<A>(_:)(v6, v5);

  if (!v1)
  {
    if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain(v8);
      v9 = (uint64_t)sub_1001E8BA0(v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
    }
    v14 = v9;
    sub_1005C29C0(&v14);
    swift_bridgeObjectRelease();
    v10 = v14;
    v11 = a1;
    a1 = (void *)sub_10011DA30((uint64_t)_swiftEmptyArrayStorage, v10, v11);
    swift_release(v10);

  }
  return a1;
}

void sub_10011DD08(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t Subtasks;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  void (*v34)(char *, uint64_t, __n128);
  uint64_t v35;
  char v36;
  __n128 v37;
  void (*v38)(char *, uint64_t, __n128);
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Class isa;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  id v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  void (*v69)(char *, uint64_t, uint64_t);
  id v70;
  void *v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  void (*v83)(char *, uint64_t);
  void *v84;
  NSString v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  id v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  id v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[2];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;

  v97 = a1;
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v99 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v100 = (uint64_t)&v88 - v6;
  __chkstk_darwin(v7);
  v101 = (char *)&v88 - v8;
  __chkstk_darwin(v9);
  v105 = (uint64_t)&v88 - v10;
  v11 = type metadata accessor for UUID(0);
  v106 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v89 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v102 = (char *)&v88 - v14;
  v15 = (_QWORD *)type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v95 = *(v15 - 1);
  v96 = v15;
  __chkstk_darwin(v15);
  v94 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v17);
  v93 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v92);
  v91 = (char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v98 = (uint64_t)&v88 - v21;
  v90 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v90);
  v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v25 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v27 = (char *)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v88 - v29;
  v104 = a2;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v31);
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v27, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
  v32 = sub_10011E814();
  dispatch thunk of RawRepresentable.rawValue.getter(&v110, Subtasks, v32);
  dispatch thunk of RawRepresentable.rawValue.getter(&v108, Subtasks, v32);
  if (v110 == v108 && v111 == v109)
  {
    v33 = swift_bridgeObjectRelease_n(v111, 2);
    v34 = *(void (**)(char *, uint64_t, __n128))(v25 + 8);
    v34(v27, Subtasks, v33);
    v35 = ((uint64_t (*)(char *, uint64_t))v34)(v30, Subtasks);
  }
  else
  {
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v111, v108, v109, 0);
    swift_bridgeObjectRelease();
    v37 = swift_bridgeObjectRelease();
    v38 = *(void (**)(char *, uint64_t, __n128))(v25 + 8);
    v38(v27, Subtasks, v37);
    v35 = ((uint64_t (*)(char *, uint64_t))v38)(v30, Subtasks);
    if ((v36 & 1) == 0)
    {
      v84 = (void *)objc_opt_self(REMError);
      v85 = String._bridgeToObjectiveC()();
      objc_msgSend(v84, "internalErrorWithDebugDescription:", v85);

      swift_willThrow(v86);
      return;
    }
  }
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v35);
  swift_storeEnumTagMultiPayload(v23, v90, 15);
  sub_10000D2C0();
  v40 = v39;
  v41 = sub_10001C744((uint64_t)v23, _s10PredicatesOMa);
  v42 = (uint64_t)v93;
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v41);
  v43 = (uint64_t)v91;
  swift_storeEnumTagMultiPayload(v91, v92, 5);
  v44 = v98;
  sub_1004957D0(v42, v43, v98);
  if (qword_1008375D8 != -1)
    swift_once(&qword_1008375D8, sub_100497894);
  v110 = qword_100871F88;
  v45 = qword_100836D28;
  swift_bridgeObjectRetain(qword_100871F88);
  v46 = (uint64_t)v101;
  v47 = v105;
  v48 = v106;
  if (v45 != -1)
    swift_once(&qword_100836D28, sub_10011D9B0);
  v108 = qword_10083B4C0;
  swift_bridgeObjectRetain(qword_10083B4C0);
  sub_10049AAF8(v44);
  sub_1001E12FC(v49);
  sub_10049ACB4(v44);
  sub_1001E12FC(v50);
  v51 = (void *)sub_100358798(v110, v108, 0, (uint64_t)v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v90 = v40;
  v52 = (uint64_t)v94;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v53);
  sub_10049ADC0(v44, v52, 0);
  (*(void (**)(uint64_t, id))(v95 + 8))(v52, v96);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v51, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v55 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v56 = v103;
  v57 = NSManagedObjectContext.fetch<A>(_:)(v51, v55);
  v97 = v56;
  if (v56)
  {
    sub_10001C744(v44, _s9UtilitiesO12SortingStyleOMa);

    return;
  }
  v58 = v57;
  v59 = v90;
  v112 = _swiftEmptyDictionarySingleton;
  v107[1] = _swiftEmptyDictionarySingleton;
  v104 = v57;
  if ((unint64_t)v57 >> 62)
  {
    if (v57 < 0)
      v87 = v57;
    else
      v87 = v57 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v57);
    v60 = _CocoaArrayWrapper.endIndex.getter(v87);
    swift_bridgeObjectRelease();
    v58 = v104;
    if (v60)
      goto LABEL_13;
LABEL_41:

LABEL_42:
    swift_bridgeObjectRelease();
    sub_10001C744(v44, _s9UtilitiesO12SortingStyleOMa);
    return;
  }
  v60 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v60)
    goto LABEL_41;
LABEL_13:
  v96 = v51;
  if (v60 >= 1)
  {
    v61 = 0;
    v103 = v58 & 0xC000000000000001;
    while (1)
    {
      if (v103)
        v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v61, v58);
      else
        v62 = *(id *)(v58 + 8 * v61 + 32);
      v63 = v62;
      v64 = objc_msgSend(v62, "list");
      if (v64)
      {
        v65 = v64;
        v66 = objc_msgSend(v64, "identifier");

        if (v66)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v66);

          v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
          v67(v46, 0, 1, v11);
        }
        else
        {
          v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
          v67(v46, 1, 1, v11);
        }
        v47 = v105;
        sub_1000F2CE4(v46, v105);
        v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
        if (v68(v47, 1, v11) != 1)
        {
          v69 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 32);
          v69(v102, v47, v11);
          v70 = objc_msgSend(v63, "parentReminder");
          if (v70)
          {
            v71 = v70;
            v72 = objc_msgSend(v70, "identifier");

            if (v72)
            {
              v73 = v99;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v72);

              v74 = 0;
            }
            else
            {
              v74 = 1;
              v73 = v99;
            }
            v67((uint64_t)v73, v74, 1, v11);
            v76 = (uint64_t)v73;
            v75 = v100;
            sub_1000F2CE4(v76, v100);
            if (v68(v75, 1, v11) == 1)
            {
LABEL_32:
              sub_10011E85C(v75);
              v107[0] = v63;
              v77 = sub_10001A630(&qword_10083B4D0);
              v78 = sub_10011E89C();
              v79 = v102;
              Dictionary<>.append(_:toCollectionUnderKey:)(v107, v102, v77, v78);
              v48 = v106;
              (*(void (**)(char *, uint64_t))(v106 + 8))(v79, v11);
            }
            else
            {
              v80 = v89;
              v69(v89, v75, v11);
              v107[0] = v63;
              v81 = sub_10001A630(&qword_10083B4D0);
              v82 = sub_10011E89C();
              Dictionary<>.append(_:toCollectionUnderKey:)(v107, v80, v81, v82);
              v48 = v106;
              v83 = *(void (**)(char *, uint64_t))(v106 + 8);
              v83(v80, v11);
              v83(v102, v11);
            }

            v46 = (uint64_t)v101;
            v47 = v105;
            goto LABEL_17;
          }
          v75 = v100;
          v67(v100, 1, 1, v11);
          goto LABEL_32;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v47, 1, 1, v11);
      }

      sub_10011E85C(v47);
      v48 = v106;
LABEL_17:
      ++v61;
      v58 = v104;
      if (v60 == v61)
      {

        v44 = v98;
        goto LABEL_42;
      }
    }
  }
  __break(1u);
}

uint64_t sub_10011E698(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD v15[2];

  v3 = _s10PredicatesOMa(0);
  __chkstk_darwin(v3);
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (char *)v15 - v6;
  if ((a2 & 1) == 0)
    return 0;
  swift_storeEnumTagMultiPayload((char *)v15 - v6, v4, 50);
  sub_10000D2C0();
  v9 = v8;
  sub_10001C744((uint64_t)v7, _s10PredicatesOMa);
  v10 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);
  v13 = NSManagedObjectContext.count<A>(for:)(v11, v10);

  return v13;
}

unint64_t sub_10011E814()
{
  unint64_t result;
  uint64_t Subtasks;

  result = qword_10083B4C8;
  if (!qword_10083B4C8)
  {
    Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMRemindersListDataView.FetchSubtasks, Subtasks);
    atomic_store(result, (unint64_t *)&qword_10083B4C8);
  }
  return result;
}

uint64_t sub_10011E85C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10011E89C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083B4D8;
  if (!qword_10083B4D8)
  {
    v1 = sub_1000A5A94(&qword_10083D590);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083B4D8);
  }
  return result;
}

const char *sub_10011E8E8()
{
  return "list";
}

const char *sub_10011E8FC()
{
  return "parentReminder";
}

void sub_10011E914(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16[3];

  v2 = 0;
  v16[2] = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      goto LABEL_23;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        goto LABEL_23;
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          goto LABEL_23;
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            goto LABEL_23;
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain(v12);
    sub_1002DB0E4(v16, v11, v12);
    swift_bridgeObjectRelease(v16[1]);
  }
  v15 = v13 + 4;
  if (v15 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t static REMCDTemplateSection.cdEntityName.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v0 = sub_1000151B0(0, &qword_10083B4E0, REMTemplateSection_ptr);
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "cdEntityName");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

Swift::Int __swiftcall REMCDTemplateSection.parentEffectiveMinimumSupportedVersion()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, "template");
  if (!v1)
    return kREMSupportedVersionUnset;
  v2 = v1;
  v3 = objc_msgSend(v1, "effectiveMinimumSupportedVersion");

  return (Swift::Int)v3;
}

uint64_t static REMCDTemplateSection.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0;

  v0 = sub_10011EE40((uint64_t)&off_1007DE158);
  swift_arrayDestroy(&unk_1007DE178, 1, &type metadata for String);
  return v0;
}

id REMCDTemplateSection.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDTemplateSection();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id REMCDTemplateSection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDTemplateSection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10011EE40(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1002DB0E4(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t type metadata accessor for REMCDTemplateSection()
{
  return objc_opt_self(REMCDTemplateSection);
}

void sub_10011EEF4(uint64_t a1)
{
  sub_10011FFF4(a1, &qword_1008440E0, UNNotificationCategory_ptr, (unint64_t *)&qword_10084C120, (void (*)(id *, uint64_t))sub_1002DB0C8);
}

uint64_t sub_10011EF18(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100851830, &qword_10083B558, (void (*)(id *, void *))sub_1002DC778);
}

uint64_t sub_10011EF34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_1002DB318((uint64_t)v8, (uint64_t)v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

void sub_10011F104(uint64_t a1)
{
  sub_10011FFF4(a1, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr, (unint64_t *)&qword_10083A1F0, (void (*)(id *, uint64_t))sub_1002DB2CC);
}

void sub_10011F128(uint64_t a1)
{
  sub_10011FFF4(a1, (unint64_t *)&qword_10083AE90, off_1007D6708, (unint64_t *)&qword_1008448D0, (void (*)(id *, uint64_t))sub_1002DB2E8);
}

uint64_t sub_10011F14C(uint64_t a1)
{
  return sub_10011F894(a1, (uint64_t (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, &qword_100840EB0, (uint64_t)&protocol conformance descriptor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, (void (*)(char *, char *))sub_1002DB5B0);
}

uint64_t sub_10011F170(uint64_t a1)
{
  return sub_10011F894(a1, (uint64_t (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList, &qword_10083B598, (uint64_t)&protocol conformance descriptor for REMManualOrdering.PinnedList, (void (*)(char *, char *))sub_1002DB820);
}

uint64_t sub_10011F194(uint64_t a1)
{
  return sub_10011F894(a1, (uint64_t (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty, &qword_100844430, (uint64_t)&protocol conformance descriptor for REMAccountsListDataView.CachableProperty, (void (*)(char *, char *))sub_1002DBA7C);
}

void sub_10011F1B8(uint64_t a1)
{
  sub_10011F1D4(a1, (uint64_t (*)(uint64_t))type metadata accessor for REMCDSavedReminder, &qword_10083B518, (void (*)(id *, uint64_t))sub_1002DBD08);
}

void sub_10011F1D4(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, void (*a4)(id *, uint64_t))
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  id v19[2];

  v8 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = a2(0);
  v11 = sub_10009FC50(a3, a2, (uint64_t)&protocol conformance descriptor for NSObject);
  v19[1] = (id)Set.init(minimumCapacity:)(v9, v10, v11);
  if (!v8)
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v12)
      return;
    goto LABEL_10;
  }
  if (a1 < 0)
    v13 = a1;
  else
    v13 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v12 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease(a1);
  if (v12)
  {
LABEL_10:
    if (v12 < 1)
    {
      __break(1u);
    }
    else if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v12; ++i)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        a4(v19, v15);

      }
    }
    else
    {
      v16 = (void **)(a1 + 32);
      do
      {
        v17 = *v16++;
        a4(v19, (uint64_t)v17);

        --v12;
      }
      while (v12);
    }
  }
}

void sub_10011F348(uint64_t a1)
{
  sub_10011F1D4(a1, (uint64_t (*)(uint64_t))type metadata accessor for REMCDTemplate, (unint64_t *)&qword_100844900, (void (*)(id *, uint64_t))sub_1002DBD68);
}

uint64_t sub_10011F364(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843C10, &qword_10083B5B8, (void (*)(id *, void *))sub_1002DBD7C);
}

uint64_t sub_10011F380(uint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(id *, void *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void **v12;
  void *v13;
  id v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = sub_10001A630(a2);
  v10 = sub_1000A5F84(a3, a2, (uint64_t)&unk_1006A9D80);
  result = Set.init(minimumCapacity:)(v8, v9, v10);
  v15 = result;
  if (v8)
  {
    v12 = (void **)(a1 + 32);
    do
    {
      v13 = *v12++;
      a4(&v14, v13);

      --v8;
    }
    while (v8);
    return v15;
  }
  return result;
}

uint64_t sub_10011F42C(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843980, &qword_10083B550, (void (*)(id *, void *))sub_1002DBD90);
}

uint64_t sub_10011F448(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843DA0, &qword_10083B608, (void (*)(id *, void *))sub_1002DBDC0);
}

void sub_10011F464(uint64_t a1)
{
  sub_10011FFF4(a1, (unint64_t *)&qword_10083DA60, off_1007D66C8, (unint64_t *)&qword_10083BDF0, (void (*)(id *, uint64_t))sub_1002DBDD4);
}

uint64_t sub_10011F488(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B588, &qword_10083B590, (void (*)(id *, void *))sub_1002DBDF0);
}

void sub_10011F4A4(uint64_t a1)
{
  sub_10011FFF4(a1, (unint64_t *)&unk_10083FDE0, REMAssignment_ptr, &qword_10083A250, (void (*)(id *, uint64_t))sub_1002DBE20);
}

void sub_10011F4C8(uint64_t a1)
{
  sub_10011FFF4(a1, &qword_10083DAC0, REMHashtag_ptr, (unint64_t *)&qword_10083B670, (void (*)(id *, uint64_t))sub_1002DBE04);
}

uint64_t sub_10011F4EC(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100844250, &qword_10083B668, (void (*)(id *, void *))sub_1002DBE64);
}

uint64_t sub_10011F508(uint64_t a1)
{
  return sub_10011F380(a1, &qword_100851E10, &qword_10083B660, (void (*)(id *, void *))sub_1002DBE78);
}

uint64_t sub_10011F524(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_1008441F0, &qword_10083B658, (void (*)(id *, void *))sub_1002DBE8C);
}

uint64_t sub_10011F540(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B648, &qword_10083B650, (void (*)(id *, void *))sub_1002DBEA0);
}

void sub_10011F55C(uint64_t a1)
{
  sub_10011FFF4(a1, &qword_10083AA30, off_1007D6658, &qword_10083B520, (void (*)(id *, uint64_t))sub_1002DBEB4);
}

void sub_10011F580(uint64_t a1)
{
  sub_10011FFF4(a1, (unint64_t *)&unk_10083ADB0, off_1007D66F0, &qword_10083B528, (void (*)(id *, uint64_t))sub_1002DBED0);
}

void sub_10011F5A4(uint64_t a1)
{
  sub_10011FFF4(a1, (unint64_t *)&qword_100839DE0, NSNumber_ptr, &qword_100847B30, (void (*)(id *, uint64_t))sub_1002DBD1C);
}

void sub_10011F5C8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = sub_10001A630((uint64_t *)&unk_10083AEC0);
  v10[1] = Set.init(minimumCapacity:)(v3, v4, &protocol witness table for AnyKeyPath);
  if (v2)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(a1);
    if (!v5)
      return;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
      return;
  }
  if (v5 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_1002DB2B8(v10, v8);
      swift_release(v10[0]);
    }
  }
}

void sub_10011F70C(uint64_t a1)
{
  sub_10011FBA8(a1, &qword_10083B640, &qword_10084A880, (void (*)(id *, uint64_t))sub_1002DBEEC);
}

uint64_t sub_10011F728(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for URLResourceKey(0);
  v4 = v3;
  v5 = sub_10009FC50(&qword_100837E48, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1006A3EF0);
  result = Set.init(minimumCapacity:)(v2, v4, v5);
  v10 = result;
  if (v2)
  {
    v7 = (void **)(a1 + 32);
    do
    {
      v8 = *v7++;
      sub_1002DBF00(&v9, v8);

      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t sub_10011F7C8(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B5C8, &qword_10083B5D0, (void (*)(id *, void *))sub_1002DC128);
}

uint64_t sub_10011F7E4(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843CE0, &qword_10083B5D8, (void (*)(id *, void *))sub_1002DC13C);
}

uint64_t sub_10011F800(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B5E0, &qword_10083B5E8, (void (*)(id *, void *))sub_1002DC150);
}

uint64_t sub_10011F81C(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843D40, &qword_10083B5F0, (void (*)(id *, void *))sub_1002DC164);
}

uint64_t sub_10011F838(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B5F8, &qword_10083B600, (void (*)(id *, void *))sub_1002DC178);
}

uint64_t sub_10011F854(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B610, &qword_10083B618, (void (*)(id *, void *))sub_1002DC18C);
}

uint64_t sub_10011F870(uint64_t a1)
{
  return sub_10011F894(a1, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, &qword_100843E00, (uint64_t)&protocol conformance descriptor for Calendar.Component, (void (*)(char *, char *))sub_1002DC1A0);
}

uint64_t sub_10011F894(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, void (*a5)(char *, char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v10 = a2(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v23 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = sub_10009FC50(a3, a2, a4);
  result = Set.init(minimumCapacity:)(v17, v10, v18);
  v24 = result;
  if (v17)
  {
    v20 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v21 = *(_QWORD *)(v11 + 72);
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    do
    {
      v22(v14, v20, v10);
      a5(v16, v14);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      v20 += v21;
      --v17;
    }
    while (v17);
    return v24;
  }
  return result;
}

uint64_t sub_10011F9C0(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843F60, &qword_10083B628, (void (*)(id *, void *))sub_1002DC78C);
}

uint64_t sub_10011F9DC(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100851CD0, &qword_10083B630, (void (*)(id *, void *))sub_1002DC7A0);
}

void sub_10011F9F8(uint64_t a1)
{
  sub_10011FFF4(a1, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr, &qword_10083B678, (void (*)(id *, uint64_t))sub_1002DCCE4);
}

uint64_t sub_10011FA1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  Swift::UInt *v5;
  id v6[2];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100120250();
  result = Set.init(minimumCapacity:)(v2, &type metadata for RDStoreControllerNotificationCenter.ChangedEntityFireValue, v3);
  v7 = result;
  if (v2)
  {
    v5 = (Swift::UInt *)(a1 + 40);
    do
    {
      sub_1002DCD00(v6, (id)*(v5 - 1), *v5);

      v5 += 2;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10011FAA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  void **v5;
  void *v6;
  Swift::UInt v7;
  void *v8;
  Swift::UInt v9[3];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_10011FB48();
  result = Set.init(minimumCapacity:)(v2, &type metadata for RDStoreControllerNotificationCenter.ChangedAccountFireValue, v3);
  v10 = result;
  if (v2)
  {
    v5 = (void **)(a1 + 48);
    do
    {
      v7 = (Swift::UInt)*(v5 - 2);
      v6 = *(v5 - 1);
      v8 = *v5;
      v5 += 3;
      sub_1002DCEC0(v9, v7, v6, v8);

      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

unint64_t sub_10011FB48()
{
  unint64_t result;

  result = qword_10083B510;
  if (!qword_10083B510)
  {
    result = swift_getWitnessTable(&unk_1006B87EC, &type metadata for RDStoreControllerNotificationCenter.ChangedAccountFireValue);
    atomic_store(result, (unint64_t *)&qword_10083B510);
  }
  return result;
}

void sub_10011FB8C(uint64_t a1)
{
  sub_10011FBA8(a1, &qword_100844630, &qword_10084A690, (void (*)(id *, uint64_t))sub_1002DD470);
}

void sub_10011FBA8(uint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(id *, uint64_t))
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  id v19[2];

  v8 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = sub_10001A630(a2);
  v11 = sub_1000A5F84(a3, a2, (uint64_t)&protocol conformance descriptor for NSObject);
  v19[1] = (id)Set.init(minimumCapacity:)(v9, v10, v11);
  if (!v8)
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v12)
      return;
    goto LABEL_10;
  }
  if (a1 < 0)
    v13 = a1;
  else
    v13 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v12 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease();
  if (v12)
  {
LABEL_10:
    if (v12 < 1)
    {
      __break(1u);
    }
    else if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v12; ++i)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        a4(v19, v15);

      }
    }
    else
    {
      v16 = (void **)(a1 + 32);
      do
      {
        v17 = *v16++;
        a4(v19, (uint64_t)v17);

        --v12;
      }
      while (v12);
    }
  }
}

uint64_t sub_10011FD1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - v7;
  v9 = sub_10001A630((uint64_t *)&unk_100843FD0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_10009FC50(&qword_10083B530, type metadata accessor for RDPermanentlyHiddenReminder, (uint64_t)&unk_1006BE2F4);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v15 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_10011FECC(v14, (uint64_t)v11);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      sub_10011FF10((uint64_t)v11, (uint64_t)v5);
      sub_1002DD10C((uint64_t)v8, (uint64_t)v5);
      sub_10011FF54((uint64_t)v8);
      v14 += v15;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_10011FECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011FF10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011FF54(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10011FF90(uint64_t a1)
{
  sub_10011FFF4(a1, (unint64_t *)&unk_10083FE30, NSString_ptr, (unint64_t *)&unk_100850740, (void (*)(id *, uint64_t))sub_1002DDA60);
}

uint64_t sub_10011FFB4(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B680, &qword_10083B688, (void (*)(id *, void *))sub_1002DDA7C);
}

void sub_10011FFD0(uint64_t a1)
{
  sub_10011FFF4(a1, &qword_10083FF70, REMAccountStorage_ptr, &qword_10083B538, (void (*)(id *, uint64_t))sub_1002DDA90);
}

void sub_10011FFF4(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  id v21[2];

  v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = sub_1000151B0(0, a2, a3);
  v13 = sub_1000EC524(a4, a2, a3);
  v21[1] = (id)Set.init(minimumCapacity:)(v11, v12, v13);
  if (!v10)
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
      return;
    goto LABEL_10;
  }
  if (a1 < 0)
    v15 = a1;
  else
    v15 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v14 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(a1);
  if (v14)
  {
LABEL_10:
    if (v14 < 1)
    {
      __break(1u);
    }
    else if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v14; ++i)
      {
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        a5(v21, v17);

      }
    }
    else
    {
      v18 = (void **)(a1 + 32);
      do
      {
        v19 = *v18++;
        a5(v21, (uint64_t)v19);

        --v14;
      }
      while (v14);
    }
  }
}

uint64_t sub_100120170(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B540, &qword_10083B548, (void (*)(id *, void *))sub_1002DDD74);
}

uint64_t sub_10012018C(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B560, &qword_10083B568, (void (*)(id *, void *))sub_1002DDD88);
}

uint64_t sub_1001201A8(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843A40, &qword_10083B570, (void (*)(id *, void *))sub_1002DDD9C);
}

uint64_t sub_1001201C4(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B578, &qword_10083B580, (void (*)(id *, void *))sub_1002DDDB0);
}

uint64_t sub_1001201E0(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843B70, &qword_10083B5A0, (void (*)(id *, void *))sub_1002DDDC4);
}

uint64_t sub_1001201FC(uint64_t a1)
{
  return sub_10011F380(a1, &qword_10083B5A8, &qword_10083B5B0, (void (*)(id *, void *))sub_1002DDDD8);
}

uint64_t sub_100120218(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843C70, &qword_10083B5C0, (void (*)(id *, void *))sub_1002DB588);
}

uint64_t sub_100120234(uint64_t a1)
{
  return sub_10011F380(a1, (uint64_t *)&unk_100843E20, &qword_10083B620, (void (*)(id *, void *))sub_1002DB59C);
}

unint64_t sub_100120250()
{
  unint64_t result;

  result = qword_10083B638;
  if (!qword_10083B638)
  {
    result = swift_getWitnessTable(&unk_1006B8768, &type metadata for RDStoreControllerNotificationCenter.ChangedEntityFireValue);
    atomic_store(result, (unint64_t *)&qword_10083B638);
  }
  return result;
}

uint64_t sub_100120294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083B690);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083B690);
  if (qword_100837658 != -1)
    swift_once(&qword_100837658, sub_1004A18E0);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008720E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100120324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v0 + 16);
  v17 = *(_QWORD *)(v1 + 24);
  v11 = swift_allocObject(&unk_1007E5338, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  aBlock[4] = sub_100120630;
  v20 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E5350;
  v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v10);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_1000D3124();
  v14 = sub_10001A630((uint64_t *)&unk_100838000);
  v15 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release(v20);

  return v1;
}

id sub_1001204F0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_100836D30 != -1)
    swift_once(&qword_100836D30, sub_100120294);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10083B690);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Invalidating RDSpringBoardApplicationShortcutUpdater's application shortcut service", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return objc_msgSend(a1, "invalidate");
}

uint64_t sub_1001205CC()
{
  uint64_t v0;

  sub_100120324();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for RDSpringBoardApplicationShortcutUpdater()
{
  return objc_opt_self(_TtC7remindd39RDSpringBoardApplicationShortcutUpdater);
}

uint64_t sub_10012060C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100120630()
{
  uint64_t v0;

  return sub_1001204F0(*(void **)(v0 + 16));
}

uint64_t sub_100120638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t aBlock[5];
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D30 != -1)
    swift_once(&qword_100836D30, sub_100120294);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_10083B690);
  v11 = swift_bridgeObjectRetain_n(a1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v34 = v4;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v33 = v6;
    v17 = v16;
    aBlock[0] = v16;
    *(_DWORD *)v15 = 136315138;
    v32[1] = v15 + 4;
    v18 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
    swift_bridgeObjectRetain(a1);
    v20 = Array.description.getter(v19, v18);
    v22 = v21;
    swift_bridgeObjectRelease(a1);
    v38 = (_QWORD *)sub_10001A820(v20, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, aBlock);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Application shortcut update requested for lists {lists: %s}", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v23 = v17;
    v6 = v33;
    swift_slowDealloc(v23, -1, -1);
    v24 = v15;
    v4 = v34;
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v25 = swift_allocObject(&unk_1007E5388, 32, 7);
  *(_QWORD *)(v25 + 16) = a1;
  *(_QWORD *)(v25 + 24) = v2;
  aBlock[4] = (uint64_t)sub_1001213D4;
  v40 = v25;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007E53A0;
  v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  v27 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v27);
  v38 = _swiftEmptyArrayStorage;
  v28 = sub_1000D3124();
  v29 = sub_10001A630((uint64_t *)&unk_100838000);
  v30 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v29, v30, v4, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
  return swift_release(v40);
}

void sub_10012099C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (qword_100836D30 != -1)
    swift_once(&qword_100836D30, sub_100120294);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_10083B690);
  v3 = swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
    swift_bridgeObjectRetain(a1);
    v10 = Array.description.getter(v9, v8);
    v12 = v11;
    swift_bridgeObjectRelease(a1);
    v13 = sub_10001A820(v10, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Updating application shortcuts for lists {lists: %s}", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  sub_100120B78(a1);
}

void sub_100120B78(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;

  v2 = v1;
  v4 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  v21 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v20 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v20[0] = v2;
    v22 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v10);
    v20[1] = sub_1001213DC();
    v12 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v13 = *(_QWORD *)(v21 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    do
    {
      v14(v9, v12, v4);
      v14(v7, (uint64_t)v9, v4);
      v15 = sub_100120D28((uint64_t)v7);
      v16 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v9, v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v17 = v22[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      specialized ContiguousArray._endMutation()(v18);
      v12 += v13;
      --v10;
    }
    while (v10);
    v11 = v22;
    v2 = (void *)v20[0];
  }
  sub_1001213DC();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "updateDynamicApplicationShortcutItems:forBundleIdentifier:", isa, REMAppBundleIdentifier, swift_bridgeObjectRelease(v11).n128_f64[0]);

}

id sub_100120D28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  Class isa;
  uint64_t v21;
  _BYTE v24[56];

  v3 = type metadata accessor for REMApplicationShortcutUserInfoKeys(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)), "init");
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setType:", v8);

  sub_100120F4C();
  v10 = v9;
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setLocalizedTitle:", v11, swift_bridgeObjectRelease(v10).n128_f64[0]);

  v12 = objc_msgSend(objc_allocWithZone((Class)SBSApplicationShortcutSystemIcon), "initWithType:", 3);
  objc_msgSend(v7, "setIcon:", v12);

  v13 = sub_10001A630((uint64_t *)&unk_10083B760);
  inited = swift_initStackObject(v13, v24);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for REMApplicationShortcutUserInfoKeys.actionURLAbsoluteString(_:), v3);
  v16 = REMApplicationShortcutUserInfoKeys.rawValue.getter(v15);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(_QWORD *)(inited + 32) = v16;
  *(_QWORD *)(inited + 40) = v18;
  *(_QWORD *)(inited + 48) = sub_100121100();
  v19 = sub_1002B048C(inited);
  sub_10001A630((uint64_t *)&unk_10083D620);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v7, "setUserInfo:", isa, swift_bridgeObjectRelease(v19).n128_f64[0]);

  v21 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  return v7;
}

uint64_t sub_100120F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (void **)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (id)_REMGetLocalizedString(0);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  (*(void (**)(void **, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v10 = (*(uint64_t (**)(void **, uint64_t))(v3 + 88))(v5, v2);
  if (v10 == enum case for REMAccountsListDataView.Model.GroupChild.list(_:))
  {
    v11 = &selRef_displayName;
LABEL_5:
    (*(void (**)(void **, uint64_t))(v3 + 96))(v5, v2);
    v12 = *v5;
    v13 = sub_10001A630((uint64_t *)&unk_10083A270);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1006A3C00;
    v15 = objc_msgSend(v12, *v11);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_1000184F8();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v18;
    v19 = static String.localizedStringWithFormat(_:_:)(v7, v9, v14);

    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v9);
    return v19;
  }
  if (v10 == enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:))
  {
    v11 = &selRef_name;
    goto LABEL_5;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v2, v2);
  __break(1u);
  return result;
}

uint64_t sub_100121100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  void *v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  void *v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  __n128 v31;
  uint64_t result;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for REMAccountsListDataView.Model.GroupChild(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (void **)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for REMNavigationSpecifier(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void **, uint64_t, uint64_t))(v7 + 16))(v9, v1, v6);
  v14 = (*(uint64_t (**)(void **, uint64_t))(v7 + 88))(v9, v6);
  if (v14 == enum case for REMAccountsListDataView.Model.GroupChild.list(_:))
  {
    (*(void (**)(void **, uint64_t))(v7 + 96))(v9, v6);
    v15 = *v9;
    v16 = (char *)v13 + *(int *)(sub_10001A630(&qword_10083B770) + 48);
    v17 = objc_msgSend(v15, "objectID");

    *v13 = v17;
    v18 = enum case for REMNavigationSpecifier.ListPathSpecifier.newReminder(_:);
    v19 = type metadata accessor for REMNavigationSpecifier.ListPathSpecifier(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v16, v18, v19);
    v20 = (unsigned int *)&enum case for REMNavigationSpecifier.list(_:);
LABEL_5:
    v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *v20, v10);
    v27 = REMNavigationSpecifier.url.getter(v26);
    URL.absoluteString.getter(v27);
    v29 = v28;
    v30 = String._bridgeToObjectiveC()();
    v31 = swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v31);
    (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
    return (uint64_t)v30;
  }
  if (v14 == enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:))
  {
    (*(void (**)(void **, uint64_t))(v7 + 96))(v9, v6);
    v21 = *v9;
    v22 = (char *)v13 + *(int *)(sub_10001A630(&qword_10083B770) + 48);
    v23 = objc_msgSend(v21, "objectID");

    *v13 = v23;
    v24 = enum case for REMNavigationSpecifier.ListPathSpecifier.newReminder(_:);
    v25 = type metadata accessor for REMNavigationSpecifier.ListPathSpecifier(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v22, v24, v25);
    v20 = (unsigned int *)&enum case for REMNavigationSpecifier.customSmartList(_:);
    goto LABEL_5;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v6, v6);
  __break(1u);
  return result;
}

uint64_t sub_1001213A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001213D4()
{
  uint64_t v0;

  sub_10012099C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1001213DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083B758;
  if (!qword_10083B758)
  {
    v1 = objc_opt_self(SBSApplicationShortcutItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083B758);
  }
  return result;
}

uint64_t sub_100121420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083B778);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083B778);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Bool __swiftcall REMCDReminder.markExtraneousAlarmsForDeletion()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  unsigned int v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[6];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if ((objc_msgSend(v0, "markedForDeletion") & 1) != 0
    || (objc_msgSend(v0, "isDeleted") & 1) != 0)
  {
    goto LABEL_23;
  }
  v1 = objc_msgSend(v0, "account");
  if (!v1)
    return (char)v1;
  v2 = v1;
  v3 = objc_msgSend(v1, "accountTypeHost");
  v4 = objc_msgSend(v3, "isCloudKit");

  if (!v4)
  {
LABEL_22:

LABEL_23:
    LOBYTE(v1) = 0;
    return (char)v1;
  }
  v5 = objc_msgSend(v0, "alarmStorage");
  if (!v5)
  {
LABEL_13:
    if (qword_100836D38 != -1)
      swift_once(&qword_100836D38, sub_100121420);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10083B778);
    v20 = v0;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v45 = v24;
      *(_DWORD *)v23 = 136446210;
      v25 = objc_msgSend(v20, "remObjectID");
      if (v25)
      {
        v26 = v25;
        v27 = objc_msgSend(v25, "description");

        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v30 = v29;

      }
      else
      {
        v28 = 7104878;
        v30 = 0xE300000000000000;
      }
      v44 = sub_10001A820(v28, v30, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "REMCDReminder.markExtraneousAlarmsForDeletion(): Reminder has <= 1 alarm, stopping early {reminderID: %{public}s}", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

    }
    goto LABEL_22;
  }
  v6 = v5;
  if ((uint64_t)objc_msgSend(v5, "count") < 2)
  {

    goto LABEL_13;
  }
  if (qword_100836D38 != -1)
    swift_once(&qword_100836D38, sub_100121420);
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_10083B778);
  v8 = v0;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v45 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = objc_msgSend(v8, "remObjectID");
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(v13, "description");

      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

    }
    else
    {
      v18 = 0xE300000000000000;
      v16 = 7104878;
    }
    v44 = sub_10001A820(v16, v18, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

    *(_QWORD *)&v32 = swift_bridgeObjectRelease(v18).n128_u64[0];
    *(_WORD *)(v11 + 12) = 2082;
    v33 = objc_msgSend(v8, "managedObjectContext", v32);
    v43 = v12;
    if (v33
      && (v34 = v33,
          v35 = objc_msgSend(v33, "transactionAuthor"),
          v34,
          v35))
    {
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v38 = v37;

    }
    else
    {
      v38 = 0xE300000000000000;
      v36 = 7104878;
    }
    v44 = sub_10001A820(v36, v38, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "REMCDReminder.markExtraneousAlarmsForDeletion() {reminderID: %{public}s, author: %{public}s}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  LOBYTE(v45) = 0;
  __chkstk_darwin(v31);
  v42[2] = v6;
  v42[3] = v8;
  v42[4] = &v45;
  v40 = static os_log_type_t.info.getter(v39);
  measureTimeElapsed(_:level:block:)(0xD00000000000002FLL, 0x80000001006F9100, v40, sub_100123B84, v42);

  LOBYTE(v1) = v45;
  return (char)v1;
}

void sub_100121A44(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v5 = sub_1000151B0(0, (unint64_t *)&unk_1008398F0, off_1007D6660);
  v6 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
  v7 = sub_100123BE0();
  v8 = Sequence.elements<A>(ofType:)(v5, v6, v5, v7);
  v9 = objc_msgSend(a2, "remObjectID");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "description");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v14 = 0xE300000000000000;
    v12 = 7104878;
  }
  v15 = sub_10012693C(v8, (void *)v12, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v8);
  v22 = sub_100121BB0((uint64_t)v15, v17, v19, v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v17);
  *a3 = v22 & 1;
}

uint64_t sub_100121BB0(uint64_t a1, unint64_t a2, int64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  __n128 v19;
  uint64_t v20;
  uint64_t inited;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  _BYTE v63[80];
  _BYTE v64[24];
  _BYTE v65[80];
  _BYTE v66[24];
  uint64_t v67;
  _BYTE v68[16];
  uint64_t v69[3];
  uint64_t v70;
  _QWORD v71[2];

  v70 = 0;
  v71[0] = 0;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v30 = a3;
    else
      v30 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(a3);
    if (v7 >= 2)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7 >= 2)
    {
LABEL_3:
      result = (uint64_t)sub_100122CB8(a3);
      v12 = result;
      v13 = (v11 >> 1) - v10;
      if (v11 >> 1 == v10)
      {
        swift_unknownObjectRelease(result);
        goto LABEL_15;
      }
      if ((uint64_t)(v11 >> 1) > v10)
      {
        v14 = 0;
        v15 = (uint64_t *)(v9 + 8 * v10);
        while (1)
        {
          v16 = *v15;
          swift_retain();
          v17 = sub_10012333C();
          swift_release(v16);
          if (v17)
          {
            if (__OFADD__(v14++, 1))
            {
              __break(1u);
LABEL_12:
              swift_unknownObjectRelease(v12);
              if (v14 > 0)
              {
                type metadata accessor for Analytics(0, v19);
                if ((static Analytics.isEventUsed(_:)(0xD000000000000031, 0x80000001006F91E0) & 1) != 0)
                {
                  v20 = sub_10001A630((uint64_t *)&unk_10083A260);
                  inited = swift_initStackObject(v20, v63);
                  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
                  *(_QWORD *)(inited + 32) = 1701869940;
                  *(_QWORD *)(inited + 40) = 0xE400000000000000;
                  sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
                  *(_QWORD *)(inited + 48) = NSString.init(stringLiteral:)("verifiable", 10, 2);
                  *(_QWORD *)(inited + 56) = 0x746E756F63;
                  *(_QWORD *)(inited + 64) = 0xE500000000000000;
                  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
                  v22 = sub_1002AF09C(inited);
                  static Analytics.postEvent(_:payload:duration:)(0xD000000000000031, 0x80000001006F91E0, v22, 0, 1);
                  swift_bridgeObjectRelease(v22);
                }
              }
LABEL_15:
              if (qword_100836D38 != -1)
                swift_once(&qword_100836D38, sub_100121420);
              v23 = type metadata accessor for Logger(0);
              sub_10001AAA8(v23, (uint64_t)qword_10083B778);
              swift_bridgeObjectRetain_n(a3, 2);
              swift_bridgeObjectRetain_n(a2, 2);
              v24 = swift_bridgeObjectRetain_n(a4, 2);
              v25 = Logger.logObject.getter(v24);
              v26 = static os_log_type_t.default.getter(v25);
              if (os_log_type_enabled(v25, v26))
              {
                v27 = swift_slowAlloc(32, -1);
                v28 = swift_slowAlloc(32, -1);
                v69[0] = v28;
                *(_DWORD *)v27 = 134218498;
                v67 = v7;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
                *(_WORD *)(v27 + 12) = 2048;
                swift_beginAccess(v71, v64, 0, 0);
                v67 = v71[0];
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
                *(_WORD *)(v27 + 22) = 2080;
                swift_bridgeObjectRetain(a2);
                v67 = sub_10001A820(a1, a2, v69);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
                swift_bridgeObjectRelease_n(a4, 2);
                swift_bridgeObjectRelease_n(a3, 2);
                swift_bridgeObjectRelease_n(a2, 3);
                _os_log_impl((void *)&_mh_execute_header, v25, v26, "REMCDReminder.ExtraneousAlarmsMarker: markExtraneousAlarmsForDeletion: (dueDateVerifiableAlarms) {total: %ld, deleted: %ld, reminderID: %s}", (uint8_t *)v27, 0x20u);
                swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v28, -1, -1);
                v29 = v27;
                goto LABEL_27;
              }
LABEL_28:

              swift_bridgeObjectRelease_n(a4, 2);
              swift_bridgeObjectRelease_n(a3, 2);
              swift_bridgeObjectRelease_n(a2, 2);
              goto LABEL_29;
            }
            v71[0] = v14;
          }
          ++v15;
          if (!--v13)
            goto LABEL_12;
        }
      }
      __break(1u);
LABEL_60:
      __break(1u);
      return result;
    }
  }
  if (qword_100836D38 != -1)
    swift_once(&qword_100836D38, sub_100121420);
  v31 = type metadata accessor for Logger(0);
  sub_10001AAA8(v31, (uint64_t)qword_10083B778);
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain_n(a2, 2);
  v32 = swift_bridgeObjectRetain_n(a4, 2);
  v25 = Logger.logObject.getter(v32);
  v33 = static os_log_type_t.info.getter(v25);
  if (!os_log_type_enabled(v25, v33))
    goto LABEL_28;
  v34 = (uint8_t *)swift_slowAlloc(12, -1);
  v35 = swift_slowAlloc(32, -1);
  v69[0] = v35;
  *(_DWORD *)v34 = 136315138;
  swift_bridgeObjectRetain(a2);
  v67 = sub_10001A820(a1, a2, v69);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
  swift_bridgeObjectRelease_n(a4, 2);
  swift_bridgeObjectRelease_n(a3, 2);
  swift_bridgeObjectRelease_n(a2, 3);
  _os_log_impl((void *)&_mh_execute_header, v25, v33, "REMCDReminder.ExtraneousAlarmsMarker: Reminder has <= 1 dueDateVerifiableAlarms so no need to scan for extraneous items {reminderID: %s}", v34, 0xCu);
  swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v35, -1, -1);
  v29 = (uint64_t)v34;
LABEL_27:
  swift_slowDealloc(v29, -1, -1);

LABEL_29:
  if ((unint64_t)a4 >> 62)
    goto LABEL_46;
  v36 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v36 >= 2)
  {
LABEL_31:
    result = (uint64_t)sub_100122F14(a4);
    v40 = result;
    v41 = (v39 >> 1) - v38;
    if (v39 >> 1 == v38)
    {
LABEL_32:
      swift_unknownObjectRelease(v40);
      if (v70 > 0)
      {
        type metadata accessor for Analytics(0, v42);
        if ((static Analytics.isEventUsed(_:)(0xD000000000000031, 0x80000001006F91E0) & 1) != 0)
        {
          v43 = sub_10001A630((uint64_t *)&unk_10083A260);
          v44 = swift_initStackObject(v43, v65);
          *(_OWORD *)(v44 + 16) = xmmword_1006A3C40;
          *(_QWORD *)(v44 + 32) = 1701869940;
          *(_QWORD *)(v44 + 40) = 0xE400000000000000;
          sub_1000151B0(0, (unint64_t *)&unk_10083FE30, NSString_ptr);
          *(_QWORD *)(v44 + 48) = NSString.init(stringLiteral:)("nonVerifiable", 13, 2);
          *(_QWORD *)(v44 + 56) = 0x746E756F63;
          *(_QWORD *)(v44 + 64) = 0xE500000000000000;
          *(NSNumber *)(v44 + 72) = Int._bridgeToObjectiveC()();
          v45 = sub_1002AF09C(v44);
          static Analytics.postEvent(_:payload:duration:)(0xD000000000000031, 0x80000001006F91E0, v45, 0, 1);
          swift_bridgeObjectRelease(v45);
        }
      }
      if (qword_100836D38 != -1)
        swift_once(&qword_100836D38, sub_100121420);
      v46 = type metadata accessor for Logger(0);
      sub_10001AAA8(v46, (uint64_t)qword_10083B778);
      swift_bridgeObjectRetain_n(a3, 2);
      swift_bridgeObjectRetain_n(a4, 2);
      v47 = swift_bridgeObjectRetain_n(a2, 2);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.default.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc(32, -1);
        v51 = swift_slowAlloc(32, -1);
        v69[0] = v51;
        *(_DWORD *)v50 = 134218498;
        v67 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
        *(_WORD *)(v50 + 12) = 2048;
        swift_beginAccess(&v70, v66, 0, 0);
        v67 = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
        *(_WORD *)(v50 + 22) = 2080;
        swift_bridgeObjectRetain(a2);
        v67 = sub_10001A820(a1, a2, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
        swift_bridgeObjectRelease_n(a4, 2);
        swift_bridgeObjectRelease_n(a3, 2);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "REMCDReminder.ExtraneousAlarmsMarker: markExtraneousAlarmsForDeletion: (dueDateNonVerifiableAlarms) {total: %ld, deleted: %ld, reminderID: %s}", (uint8_t *)v50, 0x20u);
        swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v51, -1, -1);
        v52 = v50;
        goto LABEL_54;
      }
LABEL_55:

      swift_bridgeObjectRelease_n(a4, 2);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a2, 2);
      goto LABEL_56;
    }
    if ((uint64_t)(v39 >> 1) <= v38)
      goto LABEL_60;
    v53 = (uint64_t *)(v37 + 8 * v38);
    while (1)
    {
      v54 = *v53;
      swift_retain();
      v55 = sub_10012333C();
      swift_release(v54);
      if (v55)
      {
        if (__OFADD__(v70, 1))
        {
          __break(1u);
LABEL_46:
          if (a4 < 0)
            v56 = a4;
          else
            v56 = a4 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a4);
          v36 = _CocoaArrayWrapper.endIndex.getter(v56);
          swift_bridgeObjectRelease(a4);
          if (v36 < 2)
            break;
          goto LABEL_31;
        }
        ++v70;
      }
      ++v53;
      if (!--v41)
        goto LABEL_32;
    }
  }
  if (qword_100836D38 != -1)
    swift_once(&qword_100836D38, sub_100121420);
  v57 = type metadata accessor for Logger(0);
  sub_10001AAA8(v57, (uint64_t)qword_10083B778);
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain_n(a4, 2);
  v58 = swift_bridgeObjectRetain_n(a2, 2);
  v48 = Logger.logObject.getter(v58);
  v59 = static os_log_type_t.info.getter(v48);
  if (!os_log_type_enabled(v48, v59))
    goto LABEL_55;
  v60 = (uint8_t *)swift_slowAlloc(12, -1);
  v61 = swift_slowAlloc(32, -1);
  v69[0] = v61;
  *(_DWORD *)v60 = 136315138;
  swift_bridgeObjectRetain(a2);
  v67 = sub_10001A820(a1, a2, v69);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
  swift_bridgeObjectRelease_n(a4, 2);
  swift_bridgeObjectRelease_n(a3, 2);
  swift_bridgeObjectRelease_n(a2, 3);
  _os_log_impl((void *)&_mh_execute_header, v48, v59, "REMCDReminder.ExtraneousAlarmsMarker: Reminder has <= 1 dueDateNonVerifiableAlarms so no need to scan for extraneous items {reminderID: %s}", v60, 0xCu);
  swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v61, -1, -1);
  v52 = (uint64_t)v60;
LABEL_54:
  swift_slowDealloc(v52, -1, -1);

LABEL_56:
  swift_beginAccess(v71, v69, 0, 0);
  if (v71[0] > 0)
    return 1;
  swift_beginAccess(&v70, &v67, 0, 0);
  return v70 > 0;
}

void sub_1001226C8(uint64_t a1, id *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  os_log_type_t v49;
  NSObject *log;
  NSObject *loga;
  double v52;
  uint64_t v53;
  uint64_t v54;

  v3 = *a2;
  if ((objc_msgSend(*a2, "markedForDeletion") & 1) == 0
    && (objc_msgSend(v3, "isDeleted") & 1) == 0
    && (objc_msgSend(v3, "isExtraneous") & 1) == 0
    && (objc_msgSend(v3, "isSnooze") & 1) == 0)
  {
    v4 = objc_msgSend(v3, "trigger");
    if (v4)
    {
      v5 = v4;
      if (objc_msgSend(v4, "isTemporal"))
      {
        if (rem_isNonceUnset(objc_msgSend(v3, "dueDateResolutionTokenAsNonce")))
        {
          v6 = type metadata accessor for DueDateNonVerifiableAlarm();
          v7 = swift_allocObject(v6, 33, 7);
          *(_BYTE *)(v7 + 32) = 1;
          *(_QWORD *)(v7 + 16) = v3;
          *(_QWORD *)(v7 + 24) = 0;
          v8 = qword_100836D38;
          v9 = v3;
          if (v8 != -1)
            swift_once(&qword_100836D38, sub_100121420);
          v10 = type metadata accessor for Logger(0);
          sub_10001AAA8(v10, (uint64_t)qword_10083B778);
          v11 = v9;
          swift_retain_n(v7, 2);
          v12 = v11;
          v13 = Logger.logObject.getter(v12);
          v14 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v13, v14))
          {
            v48 = v14;
            log = v13;
            v15 = swift_slowAlloc(22, -1);
            v46 = swift_slowAlloc(32, -1);
            v54 = v46;
            *(_DWORD *)v15 = 136315394;
            v16 = objc_msgSend(v12, "remObjectID");
            if (v16)
            {
              v17 = v16;
              v18 = objc_msgSend(v16, "description");

              v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
              v21 = v20;

            }
            else
            {
              v19 = 7104878;
              v21 = 0xE300000000000000;
            }
            v52 = COERCE_DOUBLE(sub_10001A820(v19, v21, &v54));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

            swift_bridgeObjectRelease(v21);
            *(_WORD *)(v15 + 12) = 2048;
            v52 = sub_1001238F8();
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
            swift_release_n(v7, 2);
            _os_log_impl((void *)&_mh_execute_header, log, v48, "REMCDReminder.ExtraneousAlarmsMarker: Populating legacy alarm {remObjectID: %s, fallbackNonce: %f}", (uint8_t *)v15, 0x16u);
            swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v46, -1, -1);
            swift_slowDealloc(v15, -1, -1);

          }
          else
          {

            swift_release_n(v7, 2);
          }
          v37 = swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
          v38 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          v22 = type metadata accessor for DueDateVerifiableAlarm();
          v7 = swift_allocObject(v22, 24, 7);
          *(_QWORD *)(v7 + 16) = v3;
          v23 = qword_100836D38;
          v24 = v3;
          if (v23 != -1)
            swift_once(&qword_100836D38, sub_100121420);
          v25 = type metadata accessor for Logger(0);
          sub_10001AAA8(v25, (uint64_t)qword_10083B778);
          v26 = v24;
          swift_retain_n(v7, 2);
          v27 = v26;
          v28 = Logger.logObject.getter(v27);
          v29 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v28, v29))
          {
            v49 = v29;
            loga = v28;
            v30 = swift_slowAlloc(22, -1);
            v47 = swift_slowAlloc(32, -1);
            v54 = v47;
            *(_DWORD *)v30 = 136315394;
            v31 = objc_msgSend(v27, "remObjectID");
            if (v31)
            {
              v32 = v31;
              v33 = objc_msgSend(v31, "description");

              v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
              v36 = v35;

            }
            else
            {
              v34 = 7104878;
              v36 = 0xE300000000000000;
            }
            v52 = COERCE_DOUBLE(sub_10001A820(v34, v36, &v54));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

            *(_QWORD *)&v39 = swift_bridgeObjectRelease(v36).n128_u64[0];
            *(_WORD *)(v30 + 12) = 2048;
            objc_msgSend(*(id *)(v7 + 16), "dueDateResolutionTokenAsNonce", v39);
            v52 = v40;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
            swift_release_n(v7, 2);
            _os_log_impl((void *)&_mh_execute_header, loga, v49, "REMCDReminder.ExtraneousAlarmsMarker: Populating dueDate verifiable alarm {remObjectID: %s, nonce: %f}", (uint8_t *)v30, 0x16u);
            swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v47, -1, -1);
            swift_slowDealloc(v30, -1, -1);

          }
          else
          {

            swift_release_n(v7, 2);
          }
          v41 = swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
          v38 = *(_QWORD *)(a1 + 16);
        }
        v42 = v38 & 0xFFFFFFFFFFFFFF8;
        v44 = *(_QWORD *)(v42 + 16);
        v43 = *(_QWORD *)(v42 + 24);
        if (v44 >= v43 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1);
        v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v7);
        specialized Array._endMutation()(v45);

        swift_release(v7);
      }
      else
      {

      }
    }
  }
}

_QWORD *sub_100122CB8(unint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  double v11;
  int isEqualNonces;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 1uLL)
    goto LABEL_28;
  swift_bridgeObjectRetain(a1);
  while (2)
  {
    v20 = v2;
    sub_100123AFC(&v20, sub_1001D92D4, (uint64_t (*)(_QWORD *))sub_1001252B0);
    v1 = v20;
    if (v20 < 0 || (v20 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain(v20);
      v3 = _CocoaArrayWrapper.endIndex.getter(v18);
      swift_release(v1);
      if (v3)
        goto LABEL_7;
LABEL_27:
      swift_release(v1);
      break;
    }
    v3 = *(_QWORD *)(v20 + 16);
    if (!v3)
      goto LABEL_27;
LABEL_7:
    if ((v1 & 0xC000000000000001) != 0)
    {
      v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    }
    else
    {
      if (!*(_QWORD *)(v1 + 16))
      {
        __break(1u);
        result = (_QWORD *)swift_release(v1);
        __break(1u);
        return result;
      }
      v4 = *(_QWORD *)(v1 + 32);
      swift_retain();
    }
    objc_msgSend(*(id *)(v4 + 16), "dueDateResolutionTokenAsNonce");
    v6 = v5;
    swift_release(v4);
    swift_retain();
    v7 = 0;
    while (1)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v1);
        v9 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
        goto LABEL_16;
      }
      v8 = *(_QWORD *)(v1 + 8 * v7 + 32);
      swift_retain();
      v9 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
LABEL_16:
      v10 = objc_msgSend(*(id *)(v8 + 16), "dueDateResolutionTokenAsNonce");
      isEqualNonces = rem_isEqualNonces(v10, v11, v6);
      swift_release(v8);
      if (!isEqualNonces)
        goto LABEL_19;
      ++v7;
      if (v9 == v3)
      {
        v7 = v3;
LABEL_19:
        swift_release(v1);
        sub_1003D6ADC(v7, v1);
        v14 = v13;
        swift_release(v1);
        return v14;
      }
    }
    __break(1u);
LABEL_21:
    if (v1 < 0)
      v15 = v1;
    else
      v15 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(v1);
    if (v16 >= 2)
    {
      swift_bridgeObjectRetain(v1);
      v2 = (uint64_t)sub_1001E9394(v17);
      swift_bridgeObjectRelease(v1);
      continue;
    }
    break;
  }
LABEL_28:
  v14 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
    return sub_1001E9394((unint64_t)_swiftEmptyArrayStorage);
  return v14;
}

_QWORD *sub_100122F14(uint64_t isEqualNonces)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - v6;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)isEqualNonces >> 62)
    goto LABEL_32;
  v12 = isEqualNonces & 0xFFFFFFFFFFFFFF8;
  if (*(_QWORD *)((isEqualNonces & 0xFFFFFFFFFFFFFF8) + 0x10) <= 1uLL)
    goto LABEL_39;
  swift_bridgeObjectRetain(isEqualNonces);
  while (2)
  {
    v42 = v12;
    sub_100123AFC((uint64_t *)&v42, sub_1001D92D4, (uint64_t (*)(_QWORD *))sub_100123C38);
    v13 = v42;
    if ((v42 & 0x8000000000000000) != 0 || (v42 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain(v42);
      v36 = _CocoaArrayWrapper.endIndex.getter(v35);
      swift_release(v13);
      v41 = v36;
      if (v36)
        goto LABEL_7;
LABEL_38:
      swift_release(v13);
      break;
    }
    v41 = *(_QWORD *)(v42 + 16);
    if (!v41)
      goto LABEL_38;
LABEL_7:
    v40 = v13 & 0xC000000000000001;
    if ((v13 & 0xC000000000000001) != 0)
    {
      isEqualNonces = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    }
    else
    {
      if (!*(_QWORD *)(v13 + 16))
      {
        __break(1u);
        result = (_QWORD *)swift_release(v13);
        __break(1u);
        return result;
      }
      isEqualNonces = *(_QWORD *)(v13 + 32);
      swift_retain();
    }
    v14 = sub_1001238F8();
    swift_release(isEqualNonces);
    swift_retain();
    v15 = 0;
    v39 = v13;
    while (v40)
    {
      v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
      v17 = v16;
      v18 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_31;
LABEL_16:
      if ((*(_BYTE *)(v17 + 32) & 1) != 0)
      {
        v19 = objc_msgSend(*(id *)(v17 + 16), "ckServerRecord");
        if (v19)
        {
          v20 = v19;
          v21 = v11;
          v22 = (uint64_t)v7;
          v23 = v4;
          v24 = objc_msgSend(v19, "creationDate");

          if (v24)
          {
            v25 = (uint64_t)v23;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

            v26 = 0;
          }
          else
          {
            v26 = 1;
            v25 = (uint64_t)v23;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v25, v26, 1, v8);
          v7 = (char *)v22;
          sub_1000CDA74(v25, v22);
          v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v22, 1, v8);
          v4 = (char *)v25;
          v11 = v21;
          v13 = v39;
          if ((_DWORD)v28 == 1)
          {
LABEL_24:
            static Date.distantPast.getter(v28);
            v29 = sub_1000EA320((uint64_t)v7);
          }
          else
          {
            v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
          }
          v27 = Date.timeIntervalSinceReferenceDate.getter(v29);
          v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          *(double *)(v17 + 24) = v27;
          *(_BYTE *)(v17 + 32) = 0;
          goto LABEL_27;
        }
        v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
        goto LABEL_24;
      }
      v27 = *(double *)(v17 + 24);
LABEL_27:
      isEqualNonces = rem_isEqualNonces(v16, v27, v14);
      swift_release(v17);
      if ((isEqualNonces & 1) == 0)
        goto LABEL_30;
      ++v15;
      if (v18 == v41)
      {
        v15 = v41;
LABEL_30:
        swift_release(v13);
        sub_1003D6AE8(v15, v13);
        v31 = v30;
        swift_release(v13);
        return v31;
      }
    }
    v17 = *(_QWORD *)(v13 + 8 * v15 + 32);
    v16 = swift_retain();
    v18 = v15 + 1;
    if (!__OFADD__(v15, 1))
      goto LABEL_16;
LABEL_31:
    __break(1u);
LABEL_32:
    if (isEqualNonces < 0)
      v32 = isEqualNonces;
    else
      v32 = isEqualNonces & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(isEqualNonces);
    v33 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(isEqualNonces);
    if (v33 >= 2)
    {
      swift_bridgeObjectRetain(isEqualNonces);
      v12 = (uint64_t)sub_1001E9280(v34);
      swift_bridgeObjectRelease(isEqualNonces);
      continue;
    }
    break;
  }
LABEL_39:
  v31 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
    return sub_1001E9280((unint64_t)_swiftEmptyArrayStorage);
  return v31;
}

BOOL sub_10012333C()
{
  void *v0;
  unsigned int v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *object;
  Swift::Bool v25;
  double v26;
  id v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  unsigned __int16 v41;
  uint64_t v43;
  uint64_t v44;

  v1 = objc_msgSend(v0, "ckDirtyFlags");
  if (v1)
  {
    if (qword_100836D38 != -1)
      swift_once(&qword_100836D38, sub_100121420);
    v2 = type metadata accessor for Logger(0);
    sub_10001AAA8(v2, (uint64_t)qword_10083B778);
    v3 = v0;
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc(16, -1);
      v7 = swift_slowAlloc(32, -1);
      v44 = v7;
      *(_DWORD *)v6 = 136446466;
      v8 = objc_msgSend(v3, "remObjectID");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "description");

        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        v13 = v12;

      }
      else
      {
        v11 = 7104878;
        v13 = 0xE300000000000000;
      }
      v43 = sub_10001A820(v11, v13, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);

      *(_QWORD *)&v40 = swift_bridgeObjectRelease(v13).n128_u64[0];
      *(_WORD *)(v6 + 12) = 514;
      v41 = (unsigned __int16)objc_msgSend(v3, "ckDirtyFlags", v40);

      LOWORD(v43) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, (char *)&v43 + 2);

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "REMCDAlarm.markAsExtraneousAndDelete(): Alarm is outdated but dirty flags is not .none, skipping {remObjectID: %{public}s, dirtyFlags: %{public}hd}", (uint8_t *)v6, 0x10u);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      return v1 == 0;
    }

LABEL_26:
    return v1 == 0;
  }
  v3 = objc_msgSend(v0, "reminder");
  objc_msgSend(v3, "removeAlarmStorageObject:", v0);
  objc_msgSend(v0, "setIsExtraneous:", 1);
  objc_msgSend(v0, "__lowLevelMarkForDeletion");
  v14 = objc_msgSend(v0, "trigger");
  objc_msgSend(v14, "setIsExtraneous:", 1);

  v15 = objc_msgSend(v0, "trigger");
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, "__lowLevelMarkForDeletion");

  }
  v17 = objc_msgSend(v0, "storeControllerManagedObjectContext");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "transactionAuthor");
    if (v19)
    {
      v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      v23._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextAuthor);
      object = v23._object;
      v25 = String.hasPrefix(_:)(v23);
      swift_bridgeObjectRelease(object);
      *(_QWORD *)&v26 = swift_bridgeObjectRelease(v22).n128_u64[0];
      if (v25)
      {
        objc_msgSend(v18, "setPendingPostSaveActions:", (unint64_t)objc_msgSend(v18, "pendingPostSaveActions", v26) | 1);
LABEL_19:

        goto LABEL_20;
      }
    }

  }
  if (v3)
    objc_msgSend(v3, "forcePushToCloud");
  objc_msgSend(v0, "setShouldSyncUpDeleteIfNeeded");
  v27 = objc_msgSend(v0, "trigger");
  if (v27)
  {
    v18 = v27;
    objc_msgSend(v27, "setShouldSyncUpDeleteIfNeeded");
    goto LABEL_19;
  }
LABEL_20:
  if (qword_100836D38 != -1)
    swift_once(&qword_100836D38, sub_100121420);
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_10083B778);
  v29 = v0;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (!os_log_type_enabled(v30, v31))
  {

    goto LABEL_26;
  }
  v32 = (uint8_t *)swift_slowAlloc(12, -1);
  v33 = swift_slowAlloc(32, -1);
  v44 = v33;
  *(_DWORD *)v32 = 136446210;
  v34 = objc_msgSend(v29, "remObjectID");
  if (v34)
  {
    v35 = v34;
    v36 = objc_msgSend(v34, "description");

    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

  }
  else
  {
    v37 = 7104878;
    v39 = 0xE300000000000000;
  }
  v43 = sub_10001A820(v37, v39, &v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);

  swift_bridgeObjectRelease(v39);
  _os_log_impl((void *)&_mh_execute_header, v30, v31, "REMCDAlarm.markAsExtraneousAndDelete(): Outdated alarm is marked extraneous and deleted {remObjectID: %{public}s}", v32, 0xCu);
  swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v33, -1, -1);
  swift_slowDealloc(v32, -1, -1);

  return v1 == 0;
}

double sub_1001238F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - v6;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = __chkstk_darwin(v8).n128_u64[0];
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + 32) & 1) != 0)
  {
    v13 = objc_msgSend(*(id *)(v1 + 16), "ckServerRecord", v10);
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(v13, "creationDate");

      if (v15)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);

        v16 = 0;
      }
      else
      {
        v16 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v4, v16, 1, v8);
      sub_1000CDA74((uint64_t)v4, (uint64_t)v7);
      v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
      if ((_DWORD)v18 != 1)
      {
        v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
        goto LABEL_11;
      }
    }
    else
    {
      v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    }
    static Date.distantPast.getter(v18);
    v19 = sub_1000EA320((uint64_t)v7);
LABEL_11:
    v17 = Date.timeIntervalSinceReferenceDate.getter(v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    *(double *)(v1 + 24) = v17;
    *(_BYTE *)(v1 + 32) = 0;
    return v17;
  }
  return *(double *)(v1 + 24);
}

uint64_t sub_100123AD8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 33, 7);
}

uint64_t sub_100123AFC(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v6 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = a2(v6);
    *a1 = v6;
  }
  v8 = *(_QWORD *)(v6 + 16);
  v11[0] = v6 + 32;
  v11[1] = v8;
  v9 = a3(v11);
  return specialized ContiguousArray._endMutation()(v9);
}

void sub_100123B84()
{
  uint64_t v0;

  sub_100121A44(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE **)(v0 + 32));
}

uint64_t type metadata accessor for DueDateVerifiableAlarm()
{
  return objc_opt_self(_TtC7reminddP33_21DE925B29389F3F365F2E7E031C4B6422DueDateVerifiableAlarm);
}

uint64_t type metadata accessor for DueDateNonVerifiableAlarm()
{
  return objc_opt_self(_TtC7reminddP33_21DE925B29389F3F365F2E7E031C4B6425DueDateNonVerifiableAlarm);
}

unint64_t sub_100123BE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100841630;
  if (!qword_100841630)
  {
    v1 = sub_1000151B0(255, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSOrderedSet, v1);
    atomic_store(result, (unint64_t *)&qword_100841630);
  }
  return result;
}

void sub_100123C38(char **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  Swift::Int v65;
  char *v66;
  char *v67;
  unint64_t v68;
  Swift::Int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  char *v74;
  char *v75;
  void *v76;
  id v77;
  char *v78;
  uint64_t v79;
  Swift::Int v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  id v92;
  void *v93;
  id v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  void *v109;
  id v110;
  char *v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  void *v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  char *v139;
  Swift::Int v140;
  Swift::Int v141;
  char *v142;
  uint64_t v143;
  Swift::Int v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  Swift::Int v148;
  uint64_t v149;
  void *v150;
  id v151;
  void *v152;
  id v153;
  uint64_t v154;
  double v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  id v166;
  void *v167;
  id v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  BOOL v195;
  unint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  BOOL v205;
  uint64_t v206;
  char v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  unint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  id v242;
  void *v243;
  id v244;
  uint64_t v245;
  uint64_t v246;
  double v247;
  uint64_t v248;
  double v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  id v254;
  void *v255;
  id v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char isEqualNonces;
  uint64_t v263;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  char *v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  char *v283;
  Swift::Int v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  Swift::Int v288;
  Swift::Int v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v298 = (char *)&v273 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v300 = (char *)&v273 - v5;
  __chkstk_darwin(v6);
  v301 = (char *)&v273 - v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v273 - v9;
  __chkstk_darwin(v11);
  v296 = (char *)&v273 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v273 - v14;
  __chkstk_darwin(v16);
  v294 = (char *)&v273 - v17;
  __chkstk_darwin(v18);
  v299 = (char *)&v273 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v273 - v21;
  __chkstk_darwin(v23);
  v287 = (uint64_t)&v273 - v24;
  __chkstk_darwin(v25);
  v285 = (char *)&v273 - v26;
  __chkstk_darwin(v27);
  v286 = (uint64_t)&v273 - v28;
  __chkstk_darwin(v29);
  v278 = (char *)&v273 - v30;
  __chkstk_darwin(v31);
  v280 = (uint64_t)&v273 - v32;
  __chkstk_darwin(v33);
  v277 = (char *)&v273 - v34;
  __chkstk_darwin(v35);
  v279 = (uint64_t)&v273 - v36;
  v37 = type metadata accessor for Date(0);
  v304 = *(_QWORD *)(v37 - 8);
  v305 = v37;
  __chkstk_darwin(v37);
  v303 = (char *)&v273 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v41 = (char *)&v273 - v40;
  __chkstk_darwin(v42);
  v44 = (char *)&v273 - v43;
  __chkstk_darwin(v45);
  v47 = (char *)&v273 - v46;
  __chkstk_darwin(v48);
  v291 = (char *)&v273 - v49;
  __chkstk_darwin(v50);
  v52 = (char *)&v273 - v51;
  __chkstk_darwin(v53);
  v283 = (char *)&v273 - v54;
  __chkstk_darwin(v55);
  v281 = (char *)&v273 - v56;
  v57 = (Swift::Int)a1[1];
  v284 = _minimumMergeRunLength(_:)(v57);
  v293 = (char *)v57;
  if (v284 >= v57)
  {
    if (v57 < 0)
      goto LABEL_240;
    if ((unint64_t)v57 < 2)
      return;
    v234 = -1;
    v235 = *a1;
    v236 = 1;
    v302 = *a1;
    v238 = (uint64_t)v300;
    v237 = (uint64_t)v301;
    v299 = v10;
LABEL_177:
    v295 = (char *)v236;
    v296 = (char *)v234;
    v239 = *(_QWORD *)&v302[8 * v236];
    v294 = v235;
    while (1)
    {
      v240 = *(_QWORD *)v235;
      if ((*(_BYTE *)(v239 + 32) & 1) == 0)
      {
        v247 = *(double *)(v239 + 24);
        swift_retain();
        v248 = swift_retain();
        if ((*(_BYTE *)(v240 + 32) & 1) == 0)
          goto LABEL_183;
        goto LABEL_191;
      }
      v241 = *(void **)(v239 + 16);
      swift_retain();
      swift_retain();
      v242 = objc_msgSend(v241, "ckServerRecord");
      if (!v242)
        break;
      v243 = v242;
      v244 = objc_msgSend(v242, "creationDate");

      if (v244)
      {
        v245 = (uint64_t)v298;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v244);

        v246 = 0;
      }
      else
      {
        v246 = 1;
        v245 = (uint64_t)v298;
      }
      v252 = v304;
      v251 = v305;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56))(v245, v246, 1, v305);
      sub_1000CDA74(v245, (uint64_t)v10);
      v250 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v252 + 48))(v10, 1, v251);
      v238 = (uint64_t)v300;
      v237 = (uint64_t)v301;
      if ((_DWORD)v250 == 1)
        goto LABEL_188;
      v253 = (*(uint64_t (**)(char *, char *, uint64_t))(v304 + 32))(v41, v10, v305);
LABEL_190:
      v247 = Date.timeIntervalSinceReferenceDate.getter(v253);
      v248 = (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v41, v305);
      *(double *)(v239 + 24) = v247;
      *(_BYTE *)(v239 + 32) = 0;
      if ((*(_BYTE *)(v240 + 32) & 1) == 0)
      {
LABEL_183:
        v249 = *(double *)(v240 + 24);
        if (v249 >= v247)
          goto LABEL_175;
        goto LABEL_200;
      }
LABEL_191:
      v254 = objc_msgSend(*(id *)(v240 + 16), "ckServerRecord");
      if (!v254)
      {
        v258 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56))(v237, 1, 1, v305);
LABEL_197:
        static Date.distantPast.getter(v258);
        v261 = sub_1000EA320(v237);
        goto LABEL_199;
      }
      v255 = v254;
      v256 = objc_msgSend(v254, "creationDate");

      if (v256)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v256);

        v257 = 0;
      }
      else
      {
        v257 = 1;
      }
      v260 = v304;
      v259 = v305;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56))(v238, v257, 1, v305);
      v237 = (uint64_t)v301;
      sub_1000CDA74(v238, (uint64_t)v301);
      v258 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v260 + 48))(v237, 1, v259);
      v10 = v299;
      if ((_DWORD)v258 == 1)
        goto LABEL_197;
      v261 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v304 + 32))(v303, v237, v305);
LABEL_199:
      v249 = Date.timeIntervalSinceReferenceDate.getter(v261);
      v248 = (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v303, v305);
      *(double *)(v240 + 24) = v249;
      *(_BYTE *)(v240 + 32) = 0;
      if (v249 >= v247)
      {
LABEL_175:
        swift_release(v239);
        swift_release(v240);
LABEL_176:
        v236 = (uint64_t)(v295 + 1);
        v235 = v294 + 8;
        v234 = (uint64_t)(v296 - 1);
        if (v295 + 1 == v293)
          return;
        goto LABEL_177;
      }
LABEL_200:
      isEqualNonces = rem_isEqualNonces(v248, v247, v249);
      swift_release(v239);
      swift_release(v240);
      if ((isEqualNonces & 1) == 0)
      {
        if (!v302)
          goto LABEL_244;
        v263 = *(_QWORD *)v235;
        v239 = *((_QWORD *)v235 + 1);
        *(_QWORD *)v235 = v239;
        *((_QWORD *)v235 + 1) = v263;
        v235 -= 8;
        if (!__CFADD__(v234++, 1))
          continue;
      }
      goto LABEL_176;
    }
    v250 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v304 + 56))(v10, 1, 1, v305);
LABEL_188:
    static Date.distantPast.getter(v250);
    v253 = sub_1000EA320((uint64_t)v10);
    goto LABEL_190;
  }
  if (v57 >= 0)
    v58 = v57;
  else
    v58 = v57 + 1;
  if (v57 < -1)
    goto LABEL_249;
  v298 = v47;
  v302 = v44;
  v300 = v15;
  v59 = v291;
  v60 = v296;
  v274 = (uint64_t *)a1;
  if (v57 < 2)
  {
    v64 = (char *)_swiftEmptyArrayStorage;
    v306 = (uint64_t)_swiftEmptyArrayStorage;
    v292 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v57 != 1)
    {
      v68 = _swiftEmptyArrayStorage[2];
LABEL_206:
      v265 = v297;
      if (v68 >= 2)
      {
        v266 = *v274;
        do
        {
          v267 = v68 - 2;
          if (v68 < 2)
            goto LABEL_235;
          if (!v266)
            goto LABEL_248;
          v268 = *(_QWORD *)&v64[16 * v267 + 32];
          v269 = *(_QWORD *)&v64[16 * v68 + 24];
          sub_100125BF4(v266 + 8 * v268, (char *)(v266 + 8 * *(_QWORD *)&v64[16 * v68 + 16]), v266 + 8 * v269, v292);
          if (v265)
            break;
          if (v269 < v268)
            goto LABEL_236;
          if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
            v64 = sub_1001D52E4((uint64_t)v64);
          if (v267 >= *((_QWORD *)v64 + 2))
            goto LABEL_237;
          v270 = &v64[16 * v267 + 32];
          *(_QWORD *)v270 = v268;
          *((_QWORD *)v270 + 1) = v269;
          v271 = *((_QWORD *)v64 + 2);
          if (v68 > v271)
            goto LABEL_238;
          memmove(&v64[16 * v68 + 16], &v64[16 * v68 + 32], 16 * (v271 - v68));
          *((_QWORD *)v64 + 2) = v271 - 1;
          v68 = v271 - 1;
        }
        while (v271 > 2);
      }
LABEL_217:
      swift_bridgeObjectRelease(v64);
      *(_QWORD *)((v306 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v272);
      swift_bridgeObjectRelease(v306);
      return;
    }
  }
  else
  {
    v61 = v58 >> 1;
    v62 = type metadata accessor for DueDateNonVerifiableAlarm();
    v63 = static Array._allocateBufferUninitialized(minimumCapacity:)(v61, v62);
    *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) = v61;
    v292 = (char *)((v63 & 0xFFFFFFFFFFFFFF8) + 32);
    v306 = v63;
  }
  v282 = v22;
  v65 = 0;
  v66 = *a1;
  v275 = (uint64_t)(*a1 + 16);
  v276 = v66 - 8;
  v295 = (char *)_swiftEmptyArrayStorage;
  v67 = v302;
  v301 = v52;
  v303 = v66;
  while (2)
  {
    v69 = v65++;
    v289 = v69;
    if (v65 >= v57)
    {
      v80 = v284;
      goto LABEL_82;
    }
    v70 = *(_QWORD *)&v66[8 * v65];
    v71 = *(_QWORD *)&v66[8 * v69];
    if ((*(_BYTE *)(v70 + 32) & 1) == 0)
    {
      v81 = *(double *)(v70 + 24);
      swift_retain();
      v82 = swift_retain();
      v74 = v283;
      if ((*(_BYTE *)(v71 + 32) & 1) != 0)
        goto LABEL_29;
      goto LABEL_22;
    }
    v72 = *(void **)(v70 + 16);
    swift_retain();
    swift_retain();
    v73 = objc_msgSend(v72, "ckServerRecord");
    v74 = v283;
    v75 = v281;
    if (!v73)
    {
      v84 = v279;
      v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56))(v279, 1, 1, v305);
LABEL_26:
      static Date.distantPast.getter(v85);
      v91 = sub_1000EA320(v84);
      goto LABEL_28;
    }
    v76 = v73;
    v77 = objc_msgSend(v73, "creationDate");

    if (v77)
    {
      v78 = v277;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v77);

      v79 = 0;
    }
    else
    {
      v79 = 1;
      v78 = v277;
    }
    v87 = v304;
    v86 = v305;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v304 + 56))(v78, v79, 1, v305);
    v88 = (uint64_t)v78;
    v89 = v279;
    sub_1000CDA74(v88, v279);
    v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
    v84 = v89;
    v85 = v90(v89, 1, v86);
    v67 = v302;
    v74 = v283;
    v75 = v281;
    if ((_DWORD)v85 == 1)
      goto LABEL_26;
    v91 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v304 + 32))(v281, v84, v305);
LABEL_28:
    v81 = Date.timeIntervalSinceReferenceDate.getter(v91);
    v82 = (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v75, v305);
    *(double *)(v70 + 24) = v81;
    *(_BYTE *)(v70 + 32) = 0;
    if ((*(_BYTE *)(v71 + 32) & 1) != 0)
    {
LABEL_29:
      v92 = objc_msgSend(*(id *)(v71 + 16), "ckServerRecord");
      if (v92)
      {
        v93 = v92;
        v94 = objc_msgSend(v92, "creationDate");

        if (v94)
        {
          v95 = v278;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v94);

          v96 = 0;
        }
        else
        {
          v96 = 1;
          v95 = v278;
        }
        v100 = v304;
        v99 = v305;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v304 + 56))(v95, v96, 1, v305);
        v101 = (uint64_t)v95;
        v97 = v280;
        sub_1000CDA74(v101, v280);
        v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v97, 1, v99);
        v67 = v302;
        v74 = v283;
        if ((_DWORD)v98 != 1)
        {
          v102 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v304 + 32))(v283, v97, v305);
          goto LABEL_37;
        }
      }
      else
      {
        v97 = v280;
        v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56))(v280, 1, 1, v305);
      }
      static Date.distantPast.getter(v98);
      v102 = sub_1000EA320(v97);
LABEL_37:
      v83 = Date.timeIntervalSinceReferenceDate.getter(v102);
      v82 = (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v74, v305);
      *(double *)(v71 + 24) = v83;
      *(_BYTE *)(v71 + 32) = 0;
      goto LABEL_38;
    }
LABEL_22:
    v83 = *(double *)(v71 + 24);
LABEL_38:
    v80 = v284;
    if (v83 >= v81)
    {
      swift_release(v70);
      swift_release(v71);
      LODWORD(v290) = 0;
    }
    else
    {
      v103 = rem_isEqualNonces(v82, v81, v83);
      swift_release(v70);
      swift_release(v71);
      LODWORD(v290) = v103 ^ 1;
    }
    v69 = v289;
    v65 = v289 + 2;
    v66 = v303;
    if (v289 + 2 >= v57)
    {
      v60 = v296;
      if ((_DWORD)v290)
        goto LABEL_73;
      goto LABEL_82;
    }
    v104 = v275 + 8 * v289;
    do
    {
      v105 = *(_QWORD *)(v104 - 8);
      v106 = *(_QWORD *)v104;
      if ((*(_BYTE *)(*(_QWORD *)v104 + 32) & 1) == 0)
      {
        v113 = *(double *)(v106 + 24);
        swift_retain();
        v114 = swift_retain();
        if ((*(_BYTE *)(v105 + 32) & 1) == 0)
          goto LABEL_50;
        goto LABEL_58;
      }
      v107 = *(void **)(v106 + 16);
      swift_retain();
      swift_retain();
      v108 = objc_msgSend(v107, "ckServerRecord");
      if (!v108)
      {
        v116 = v286;
        v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56))(v286, 1, 1, v305);
LABEL_55:
        static Date.distantPast.getter(v117);
        v125 = sub_1000EA320(v116);
        goto LABEL_57;
      }
      v109 = v108;
      v110 = objc_msgSend(v108, "creationDate");

      if (v110)
      {
        v111 = v285;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v110);

        v112 = 0;
      }
      else
      {
        v112 = 1;
        v111 = v285;
      }
      v118 = v304;
      v119 = v111;
      v120 = (uint64_t)v111;
      v121 = v305;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v304 + 56))(v119, v112, 1, v305);
      v122 = v120;
      v123 = v286;
      sub_1000CDA74(v122, v286);
      v124 = v121;
      v116 = v123;
      v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v123, 1, v124);
      v57 = (Swift::Int)v293;
      v67 = v302;
      if ((_DWORD)v117 == 1)
        goto LABEL_55;
      v125 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v304 + 32))(v52, v116, v305);
LABEL_57:
      v113 = Date.timeIntervalSinceReferenceDate.getter(v125);
      v114 = (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v52, v305);
      *(double *)(v106 + 24) = v113;
      *(_BYTE *)(v106 + 32) = 0;
      if ((*(_BYTE *)(v105 + 32) & 1) == 0)
      {
LABEL_50:
        v115 = *(double *)(v105 + 24);
        if (v115 >= v113)
          goto LABEL_43;
        goto LABEL_67;
      }
LABEL_58:
      v126 = objc_msgSend(*(id *)(v105 + 16), "ckServerRecord");
      if (!v126)
      {
        v131 = v287;
        v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56))(v287, 1, 1, v305);
LABEL_64:
        static Date.distantPast.getter(v132);
        v137 = sub_1000EA320(v131);
        goto LABEL_66;
      }
      v127 = v126;
      v128 = objc_msgSend(v126, "creationDate");

      if (v128)
      {
        v129 = (uint64_t)v282;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v128);

        v130 = 0;
      }
      else
      {
        v130 = 1;
        v129 = (uint64_t)v282;
      }
      v134 = v304;
      v133 = v305;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56))(v129, v130, 1, v305);
      v135 = v287;
      sub_1000CDA74(v129, v287);
      v136 = v133;
      v131 = v135;
      v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v135, 1, v136);
      v57 = (Swift::Int)v293;
      v52 = v301;
      v67 = v302;
      if ((_DWORD)v132 == 1)
        goto LABEL_64;
      v137 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v304 + 32))(v59, v131, v305);
LABEL_66:
      v115 = Date.timeIntervalSinceReferenceDate.getter(v137);
      v114 = (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v59, v305);
      *(double *)(v105 + 24) = v115;
      *(_BYTE *)(v105 + 32) = 0;
      if (v115 >= v113)
      {
LABEL_43:
        swift_release(v106);
        swift_release(v105);
        if ((v290 & 1) != 0)
        {
          v80 = v284;
          v60 = v296;
          v66 = v303;
          v69 = v289;
          if (v65 < v289)
            goto LABEL_241;
          goto LABEL_74;
        }
        goto LABEL_44;
      }
LABEL_67:
      v138 = rem_isEqualNonces(v114, v113, v115);
      swift_release(v106);
      swift_release(v105);
      if ((_DWORD)v290 == v138)
      {
        v80 = v284;
        v60 = v296;
        v66 = v303;
        goto LABEL_72;
      }
LABEL_44:
      ++v65;
      v104 += 8;
      v66 = v303;
    }
    while (v57 != v65);
    v65 = v57;
    v80 = v284;
    v60 = v296;
LABEL_72:
    v69 = v289;
    if (!(_DWORD)v290)
      goto LABEL_82;
LABEL_73:
    if (v65 < v69)
      goto LABEL_241;
LABEL_74:
    if (v69 < v65)
    {
      v139 = &v276[8 * v65];
      v140 = v65;
      v141 = v69;
      v142 = &v66[8 * v69];
      do
      {
        if (v141 != --v140)
        {
          if (!v66)
            goto LABEL_247;
          v143 = *(_QWORD *)v142;
          *(_QWORD *)v142 = *(_QWORD *)v139;
          *(_QWORD *)v139 = v143;
        }
        ++v141;
        v139 -= 8;
        v142 += 8;
      }
      while (v141 < v140);
      v69 = v289;
    }
LABEL_82:
    if (v65 >= v57)
      goto LABEL_124;
    if (__OFSUB__(v65, v69))
      goto LABEL_239;
    if (v65 - v69 >= v80)
    {
LABEL_123:
      v69 = v289;
      goto LABEL_124;
    }
    v69 = v289;
    if (__OFADD__(v289, v80))
      goto LABEL_242;
    if (v289 + v80 >= v57)
      v144 = v57;
    else
      v144 = v289 + v80;
    if (v144 >= v289)
    {
      if (v65 != v144)
      {
        v145 = &v276[8 * v65];
        v146 = (uint64_t)v294;
        v288 = v144;
        while (1)
        {
          v147 = *(_QWORD *)&v66[8 * v65];
          v148 = v289;
          v290 = v145;
          while (1)
          {
            v149 = *(_QWORD *)v145;
            if ((*(_BYTE *)(v147 + 32) & 1) != 0)
              break;
            v155 = *(double *)(v147 + 24);
            swift_retain();
            v156 = swift_retain();
            if ((*(_BYTE *)(v149 + 32) & 1) != 0)
              goto LABEL_109;
LABEL_101:
            v157 = *(double *)(v149 + 24);
            if (v157 >= v155)
              goto LABEL_92;
LABEL_118:
            v177 = rem_isEqualNonces(v156, v155, v157);
            swift_release(v147);
            swift_release(v149);
            if ((v177 & 1) != 0)
              goto LABEL_93;
            v66 = v303;
            if (!v303)
              goto LABEL_245;
            v178 = *(_QWORD *)v145;
            v147 = *((_QWORD *)v145 + 1);
            *(_QWORD *)v145 = v147;
            *((_QWORD *)v145 + 1) = v178;
            v145 -= 8;
            if (v65 == ++v148)
              goto LABEL_94;
          }
          v150 = *(void **)(v147 + 16);
          swift_retain();
          swift_retain();
          v151 = objc_msgSend(v150, "ckServerRecord");
          if (!v151)
            break;
          v152 = v151;
          v153 = objc_msgSend(v151, "creationDate");

          if (v153)
          {
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v153);

            v154 = 0;
          }
          else
          {
            v154 = 1;
          }
          v160 = v304;
          v161 = v305;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v304 + 56))(v146, v154, 1, v305);
          v162 = (uint64_t)v299;
          sub_1000CDA74(v146, (uint64_t)v299);
          v163 = v161;
          v158 = v162;
          v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 48))(v162, 1, v163);
          v67 = v302;
          if ((_DWORD)v159 == 1)
            goto LABEL_106;
          v164 = v298;
          v165 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v304 + 32))(v298, v158, v305);
LABEL_108:
          v155 = Date.timeIntervalSinceReferenceDate.getter(v165);
          v156 = (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v164, v305);
          *(double *)(v147 + 24) = v155;
          *(_BYTE *)(v147 + 32) = 0;
          v52 = v301;
          if ((*(_BYTE *)(v149 + 32) & 1) == 0)
            goto LABEL_101;
LABEL_109:
          v166 = objc_msgSend(*(id *)(v149 + 16), "ckServerRecord");
          if (!v166)
          {
            v171 = (uint64_t)v300;
            v172 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v304 + 56))(v300, 1, 1, v305);
            goto LABEL_115;
          }
          v167 = v166;
          v168 = objc_msgSend(v166, "creationDate");

          if (v168)
          {
            v169 = v296;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v168);

            v170 = 0;
          }
          else
          {
            v170 = 1;
            v169 = v296;
          }
          v174 = v304;
          v173 = v305;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v304 + 56))(v169, v170, 1, v305);
          v175 = (uint64_t)v169;
          v171 = (uint64_t)v300;
          sub_1000CDA74(v175, (uint64_t)v300);
          v172 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v174 + 48))(v171, 1, v173);
          v146 = (uint64_t)v294;
          v67 = v302;
          if ((_DWORD)v172 == 1)
          {
LABEL_115:
            static Date.distantPast.getter(v172);
            v176 = sub_1000EA320(v171);
          }
          else
          {
            v176 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v304 + 32))(v302, v171, v305);
          }
          v157 = Date.timeIntervalSinceReferenceDate.getter(v176);
          v156 = (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v67, v305);
          *(double *)(v149 + 24) = v157;
          *(_BYTE *)(v149 + 32) = 0;
          if (v157 < v155)
            goto LABEL_118;
LABEL_92:
          swift_release(v147);
          swift_release(v149);
LABEL_93:
          v66 = v303;
LABEL_94:
          ++v65;
          v145 = v290 + 8;
          if (v65 == v288)
          {
            v65 = v288;
            v59 = v291;
            v60 = v296;
            goto LABEL_123;
          }
        }
        v158 = (uint64_t)v299;
        v159 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v304 + 56))(v299, 1, 1, v305);
LABEL_106:
        v164 = v298;
        static Date.distantPast.getter(v159);
        v165 = sub_1000EA320(v158);
        goto LABEL_108;
      }
LABEL_124:
      if (v65 < v69)
        goto LABEL_234;
      if ((swift_isUniquelyReferenced_nonNull_native(v295) & 1) == 0)
        v295 = sub_1001D4DF0(0, *((_QWORD *)v295 + 2) + 1, 1, v295);
      v180 = *((_QWORD *)v295 + 2);
      v179 = *((_QWORD *)v295 + 3);
      v68 = v180 + 1;
      v66 = v303;
      if (v180 >= v179 >> 1)
      {
        v233 = sub_1001D4DF0((char *)(v179 > 1), v180 + 1, 1, v295);
        v66 = v303;
        v295 = v233;
      }
      v181 = v295;
      *((_QWORD *)v295 + 2) = v68;
      v182 = v181 + 32;
      v183 = &v181[16 * v180 + 32];
      *(_QWORD *)v183 = v289;
      *((_QWORD *)v183 + 1) = v65;
      if (v180)
      {
        while (2)
        {
          v184 = v68 - 1;
          if (v68 >= 4)
          {
            v189 = &v182[16 * v68];
            v190 = *((_QWORD *)v189 - 8);
            v191 = *((_QWORD *)v189 - 7);
            v195 = __OFSUB__(v191, v190);
            v192 = v191 - v190;
            if (v195)
              goto LABEL_223;
            v194 = *((_QWORD *)v189 - 6);
            v193 = *((_QWORD *)v189 - 5);
            v195 = __OFSUB__(v193, v194);
            v187 = v193 - v194;
            v188 = v195;
            if (v195)
              goto LABEL_224;
            v196 = v68 - 2;
            v197 = &v182[16 * v68 - 32];
            v199 = *(_QWORD *)v197;
            v198 = *((_QWORD *)v197 + 1);
            v195 = __OFSUB__(v198, v199);
            v200 = v198 - v199;
            if (v195)
              goto LABEL_226;
            v195 = __OFADD__(v187, v200);
            v201 = v187 + v200;
            if (v195)
              goto LABEL_229;
            if (v201 >= v192)
            {
              v219 = &v182[16 * v184];
              v221 = *(_QWORD *)v219;
              v220 = *((_QWORD *)v219 + 1);
              v195 = __OFSUB__(v220, v221);
              v222 = v220 - v221;
              if (v195)
                goto LABEL_233;
              v212 = v187 < v222;
            }
            else
            {
LABEL_143:
              if ((v188 & 1) != 0)
                goto LABEL_225;
              v196 = v68 - 2;
              v202 = &v182[16 * v68 - 32];
              v204 = *(_QWORD *)v202;
              v203 = *((_QWORD *)v202 + 1);
              v205 = __OFSUB__(v203, v204);
              v206 = v203 - v204;
              v207 = v205;
              if (v205)
                goto LABEL_228;
              v208 = &v182[16 * v184];
              v210 = *(_QWORD *)v208;
              v209 = *((_QWORD *)v208 + 1);
              v195 = __OFSUB__(v209, v210);
              v211 = v209 - v210;
              if (v195)
                goto LABEL_231;
              if (__OFADD__(v206, v211))
                goto LABEL_232;
              if (v206 + v211 < v187)
                goto LABEL_155;
              v212 = v187 < v211;
            }
            if (v212)
              v184 = v196;
          }
          else
          {
            if (v68 == 3)
            {
              v186 = *((_QWORD *)v295 + 4);
              v185 = *((_QWORD *)v295 + 5);
              v195 = __OFSUB__(v185, v186);
              v187 = v185 - v186;
              v188 = v195;
              goto LABEL_143;
            }
            v213 = *((_QWORD *)v295 + 4);
            v214 = *((_QWORD *)v295 + 5);
            v195 = __OFSUB__(v214, v213);
            v206 = v214 - v213;
            v207 = v195;
LABEL_155:
            if ((v207 & 1) != 0)
              goto LABEL_227;
            v215 = &v182[16 * v184];
            v217 = *(_QWORD *)v215;
            v216 = *((_QWORD *)v215 + 1);
            v195 = __OFSUB__(v216, v217);
            v218 = v216 - v217;
            if (v195)
              goto LABEL_230;
            if (v218 < v206)
              goto LABEL_14;
          }
          v223 = v184 - 1;
          if (v184 - 1 >= v68)
          {
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
LABEL_242:
            __break(1u);
            goto LABEL_243;
          }
          if (!v66)
            goto LABEL_246;
          v224 = v60;
          v225 = &v182[16 * v223];
          v226 = *(_QWORD *)v225;
          v227 = &v182[16 * v184];
          v228 = *((_QWORD *)v227 + 1);
          v229 = v297;
          sub_100125BF4((uint64_t)&v66[8 * *(_QWORD *)v225], &v66[8 * *(_QWORD *)v227], (unint64_t)&v66[8 * v228], v292);
          v297 = v229;
          if (v229)
          {
            v64 = v295;
            goto LABEL_217;
          }
          if (v228 < v226)
            goto LABEL_220;
          v230 = v295;
          if (v184 > *((_QWORD *)v295 + 2))
            goto LABEL_221;
          *(_QWORD *)v225 = v226;
          *(_QWORD *)&v182[16 * v223 + 8] = v228;
          v231 = *((_QWORD *)v230 + 2);
          if (v184 >= v231)
            goto LABEL_222;
          v232 = v230;
          v68 = v231 - 1;
          memmove(&v182[16 * v184], v227 + 16, 16 * (v231 - 1 - v184));
          *((_QWORD *)v232 + 2) = v231 - 1;
          v60 = v224;
          v52 = v301;
          v67 = v302;
          v59 = v291;
          v66 = v303;
          if (v231 <= 2)
            goto LABEL_14;
          continue;
        }
      }
      v68 = 1;
LABEL_14:
      v57 = (Swift::Int)v293;
      if (v65 >= (uint64_t)v293)
      {
        v64 = v295;
        goto LABEL_206;
      }
      continue;
    }
    break;
  }
LABEL_243:
  __break(1u);
LABEL_244:
  __break(1u);
LABEL_245:
  __break(1u);
LABEL_246:
  __break(1u);
LABEL_247:
  __break(1u);
LABEL_248:
  __break(1u);
LABEL_249:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_1001252B0(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  char **v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  double v21;
  double v22;
  id v23;
  double v24;
  int isEqualNonces;
  int v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  double v32;
  double v33;
  id v34;
  double v35;
  int v36;
  uint64_t *v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t *v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t *v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  double v50;
  double v51;
  id v52;
  double v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  char v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char **v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  Swift::Int v121;
  Swift::Int v122;
  Swift::Int v123;
  Swift::Int v124;
  char *v125;
  Swift::Int v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_142;
    if (v3)
      sub_100125AD0(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = v4;
  v129 = v1;
  v118 = a1;
  if (v3 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    v130 = (uint64_t)_swiftEmptyArrayStorage;
    v125 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v15 = _swiftEmptyArrayStorage[2];
LABEL_108:
      if (v15 >= 2)
      {
        v110 = *v118;
        do
        {
          v111 = v15 - 2;
          if (v15 < 2)
            goto LABEL_137;
          if (!v110)
            goto LABEL_149;
          v112 = *(_QWORD *)&v10[16 * v111 + 32];
          v113 = *(_QWORD *)&v10[16 * v15 + 24];
          sub_1001265E8((char *)(v110 + 8 * v112), (char *)(v110 + 8 * *(_QWORD *)&v10[16 * v15 + 16]), v110 + 8 * v113, v125);
          if (v129)
            break;
          if (v113 < v112)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            v10 = sub_1001D52E4((uint64_t)v10);
          if (v111 >= *((_QWORD *)v10 + 2))
            goto LABEL_139;
          v114 = &v10[16 * v111 + 32];
          *(_QWORD *)v114 = v112;
          *((_QWORD *)v114 + 1) = v113;
          v115 = *((_QWORD *)v10 + 2);
          if (v15 > v115)
            goto LABEL_140;
          memmove(&v10[16 * v15 + 16], &v10[16 * v15 + 32], 16 * (v115 - v15));
          *((_QWORD *)v10 + 2) = v115 - 1;
          v15 = v115 - 1;
        }
        while (v115 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease(v10);
      *(_QWORD *)((v130 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v116);
      swift_bridgeObjectRelease(v130);
      return;
    }
  }
  else
  {
    v7 = v5 >> 1;
    v8 = type metadata accessor for DueDateVerifiableAlarm();
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    v125 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v130 = v9;
  }
  v11 = 0;
  v119 = *a1 + 16;
  v120 = *a1 - 8;
  v121 = v6;
  v10 = (char *)_swiftEmptyArrayStorage;
  v12 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
  v13 = v3;
  v14 = *a1;
  v124 = v13;
  while (1)
  {
    v16 = v11;
    v17 = v11 + 1;
    if (v11 + 1 < v13)
    {
      v18 = *(_QWORD *)(v14 + 8 * v17);
      v126 = v11;
      v19 = *(_QWORD *)(v14 + 8 * v11);
      v20 = *(void **)(v18 + 16);
      swift_retain();
      swift_retain();
      objc_msgSend(v20, v12[250]);
      v22 = v21;
      v23 = objc_msgSend(*(id *)(v19 + 16), v12[250]);
      if (v24 >= v22)
      {
        swift_release(v18);
        swift_release(v19);
        v26 = 0;
      }
      else
      {
        isEqualNonces = rem_isEqualNonces(v23, v22, v24);
        swift_release(v18);
        swift_release(v19);
        v26 = isEqualNonces ^ 1;
      }
      v16 = v126;
      v17 = v126 + 2;
      v13 = v124;
      if (v126 + 2 < v124)
      {
        v27 = v126 + 2;
        v28 = v119 + 8 * v126;
        while (1)
        {
          v29 = *(_QWORD *)(v28 - 8);
          v30 = *(_QWORD *)v28;
          v31 = *(void **)(*(_QWORD *)v28 + 16);
          swift_retain();
          swift_retain();
          objc_msgSend(v31, v12[250]);
          v33 = v32;
          v34 = objc_msgSend(*(id *)(v29 + 16), v12[250]);
          if (v35 >= v33)
          {
            swift_release(v30);
            swift_release(v29);
            if ((v26 & 1) != 0)
            {
              v13 = v124;
              v17 = v27;
              v16 = v126;
              if (v27 < v126)
                goto LABEL_143;
              goto LABEL_30;
            }
          }
          else
          {
            v36 = rem_isEqualNonces(v34, v33, v35);
            swift_release(v30);
            swift_release(v29);
            if (v26 == v36)
            {
              v13 = v124;
              v17 = v27;
LABEL_27:
              v16 = v126;
              break;
            }
          }
          v28 += 8;
          v13 = v124;
          if (v124 == ++v27)
          {
            v17 = v124;
            goto LABEL_27;
          }
        }
      }
      if (v26)
      {
        if (v17 < v16)
          goto LABEL_143;
LABEL_30:
        if (v16 < v17)
        {
          v37 = (uint64_t *)(v120 + 8 * v17);
          v38 = v17;
          v39 = v16;
          v40 = (uint64_t *)(v14 + 8 * v16);
          do
          {
            if (v39 != --v38)
            {
              if (!v14)
                goto LABEL_148;
              v41 = *v40;
              *v40 = *v37;
              *v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
    }
    if (v17 < v13)
    {
      if (__OFSUB__(v17, v16))
        goto LABEL_141;
      if (v17 - v16 < v121)
        break;
    }
LABEL_56:
    if (v17 < v16)
      goto LABEL_136;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_1001D4DF0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v57 = *((_QWORD *)v10 + 2);
    v56 = *((_QWORD *)v10 + 3);
    v15 = v57 + 1;
    if (v57 >= v56 >> 1)
      v10 = sub_1001D4DF0((char *)(v56 > 1), v57 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v15;
    v128 = v10 + 32;
    v58 = &v10[16 * v57 + 32];
    *(_QWORD *)v58 = v16;
    *((_QWORD *)v58 + 1) = v17;
    v123 = v17;
    if (v57)
    {
      v59 = v10 + 32;
      while (1)
      {
        v60 = v15 - 1;
        if (v15 >= 4)
        {
          v65 = &v59[16 * v15];
          v66 = *((_QWORD *)v65 - 8);
          v67 = *((_QWORD *)v65 - 7);
          v71 = __OFSUB__(v67, v66);
          v68 = v67 - v66;
          if (v71)
            goto LABEL_125;
          v70 = *((_QWORD *)v65 - 6);
          v69 = *((_QWORD *)v65 - 5);
          v71 = __OFSUB__(v69, v70);
          v63 = v69 - v70;
          v64 = v71;
          if (v71)
            goto LABEL_126;
          v72 = v15 - 2;
          v73 = &v59[16 * v15 - 32];
          v75 = *(_QWORD *)v73;
          v74 = *((_QWORD *)v73 + 1);
          v71 = __OFSUB__(v74, v75);
          v76 = v74 - v75;
          if (v71)
            goto LABEL_128;
          v71 = __OFADD__(v63, v76);
          v77 = v63 + v76;
          if (v71)
            goto LABEL_131;
          if (v77 >= v68)
          {
            v95 = &v59[16 * v60];
            v97 = *(_QWORD *)v95;
            v96 = *((_QWORD *)v95 + 1);
            v71 = __OFSUB__(v96, v97);
            v98 = v96 - v97;
            if (v71)
              goto LABEL_135;
            v88 = v63 < v98;
            goto LABEL_94;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v89 = *((_QWORD *)v10 + 4);
            v90 = *((_QWORD *)v10 + 5);
            v71 = __OFSUB__(v90, v89);
            v82 = v90 - v89;
            v83 = v71;
            goto LABEL_88;
          }
          v62 = *((_QWORD *)v10 + 4);
          v61 = *((_QWORD *)v10 + 5);
          v71 = __OFSUB__(v61, v62);
          v63 = v61 - v62;
          v64 = v71;
        }
        if ((v64 & 1) != 0)
          goto LABEL_127;
        v72 = v15 - 2;
        v78 = &v59[16 * v15 - 32];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v81 = __OFSUB__(v79, v80);
        v82 = v79 - v80;
        v83 = v81;
        if (v81)
          goto LABEL_130;
        v84 = &v59[16 * v60];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v71 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v71)
          goto LABEL_133;
        if (__OFADD__(v82, v87))
          goto LABEL_134;
        if (v82 + v87 >= v63)
        {
          v88 = v63 < v87;
LABEL_94:
          if (v88)
            v60 = v72;
          goto LABEL_96;
        }
LABEL_88:
        if ((v83 & 1) != 0)
          goto LABEL_129;
        v91 = &v59[16 * v60];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v71 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v71)
          goto LABEL_132;
        if (v94 < v82)
          goto LABEL_14;
LABEL_96:
        v99 = v60 - 1;
        if (v60 - 1 >= v15)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        v100 = v14;
        if (!v14)
          goto LABEL_147;
        v101 = v12;
        v102 = v10;
        v103 = v59;
        v104 = &v59[16 * v99];
        v105 = *(_QWORD *)v104;
        v106 = &v103[16 * v60];
        v107 = *((_QWORD *)v106 + 1);
        v108 = v100;
        sub_1001265E8((char *)(v100 + 8 * *(_QWORD *)v104), (char *)(v100 + 8 * *(_QWORD *)v106), v100 + 8 * v107, v125);
        if (v129)
        {
          v10 = v102;
          goto LABEL_119;
        }
        if (v107 < v105)
          goto LABEL_122;
        if (v60 > *((_QWORD *)v102 + 2))
          goto LABEL_123;
        *(_QWORD *)v104 = v105;
        v59 = v128;
        *(_QWORD *)&v128[16 * v99 + 8] = v107;
        v109 = *((_QWORD *)v102 + 2);
        if (v60 >= v109)
          goto LABEL_124;
        v10 = v102;
        v15 = v109 - 1;
        memmove(v106, v106 + 16, 16 * (v109 - 1 - v60));
        *((_QWORD *)v102 + 2) = v109 - 1;
        v14 = v108;
        v12 = v101;
        if (v109 <= 2)
          goto LABEL_14;
      }
    }
    v15 = 1;
LABEL_14:
    v11 = v123;
    v13 = v124;
    if (v123 >= v124)
      goto LABEL_108;
  }
  if (__OFADD__(v16, v121))
    goto LABEL_144;
  if (v16 + v121 >= v13)
    v42 = v13;
  else
    v42 = v16 + v121;
  if (v42 >= v16)
  {
    if (v17 != v42)
    {
      v127 = v16;
      v117 = v10;
      v43 = (uint64_t *)(v120 + 8 * v17);
      v122 = v42;
      do
      {
        v44 = v17;
        v45 = *(_QWORD *)(v14 + 8 * v17);
        v46 = v127;
        v47 = v43;
        while (1)
        {
          v48 = *v47;
          v49 = *(void **)(v45 + 16);
          swift_retain();
          swift_retain();
          objc_msgSend(v49, v12[250]);
          v51 = v50;
          v52 = objc_msgSend(*(id *)(v48 + 16), v12[250]);
          if (v53 >= v51)
            break;
          v54 = rem_isEqualNonces(v52, v51, v53);
          swift_release(v45);
          swift_release(v48);
          if ((v54 & 1) != 0)
            goto LABEL_48;
          if (!v14)
            goto LABEL_146;
          v55 = *v47;
          v45 = v47[1];
          *v47 = v45;
          v47[1] = v55;
          --v47;
          if (v44 == ++v46)
            goto LABEL_48;
        }
        swift_release(v45);
        swift_release(v48);
LABEL_48:
        v17 = v44 + 1;
        ++v43;
      }
      while (v44 + 1 != v122);
      v17 = v122;
      v10 = v117;
      v16 = v127;
    }
    goto LABEL_56;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_100125AD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  double v12;
  double v13;
  id v14;
  double v15;
  char isEqualNonces;
  uint64_t v17;
  uint64_t v19;

  v19 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
LABEL_6:
    v7 = *(_QWORD *)(v5 + 8 * v4);
    v8 = v19;
    v9 = (uint64_t *)v6;
    while (1)
    {
      v10 = *v9;
      v11 = *(void **)(v7 + 16);
      swift_retain(v7);
      swift_retain(v10);
      objc_msgSend(v11, "dueDateResolutionTokenAsNonce");
      v13 = v12;
      v14 = objc_msgSend(*(id *)(v10 + 16), "dueDateResolutionTokenAsNonce");
      if (v15 >= v13)
      {
        swift_release(v7);
        result = swift_release(v10);
LABEL_5:
        ++v4;
        v6 += 8;
        if (v4 == a2)
          return result;
        goto LABEL_6;
      }
      isEqualNonces = rem_isEqualNonces(v14, v13, v15);
      swift_release(v7);
      result = swift_release(v10);
      if ((isEqualNonces & 1) != 0)
        goto LABEL_5;
      if (!v5)
        break;
      v17 = *v9;
      v7 = v9[1];
      *v9 = v7;
      v9[1] = v17;
      --v9;
      if (v4 == ++v8)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100125BF4(uint64_t a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  void *v57;
  char *v58;
  uint64_t v59;
  id v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  char *v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  id v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char isEqualNonces;
  char *v109;
  uint64_t result;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;

  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v114 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v116 = (uint64_t)&v111 - v11;
  __chkstk_darwin(v12);
  v113 = (char *)&v111 - v13;
  __chkstk_darwin(v14);
  v117 = (uint64_t)&v111 - v15;
  __chkstk_darwin(v16);
  v112 = (char *)&v111 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v111 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v111 - v22;
  __chkstk_darwin(v24);
  v115 = (char *)&v111 - v25;
  v26 = type metadata accessor for Date(0);
  v124 = *(_QWORD *)(v26 - 8);
  v125 = v26;
  __chkstk_darwin(v26);
  v121 = (char *)&v111 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v120 = (char *)&v111 - v29;
  __chkstk_darwin(v30);
  v122 = (char *)&v111 - v31;
  __chkstk_darwin(v32);
  v35 = (uint64_t)&a2[-a1];
  v36 = v35 / 8;
  v119 = a3;
  v37 = a3 - (_QWORD)a2;
  v38 = v37 / 8;
  v128 = v34;
  v127 = a4;
  v123 = v34;
  if (v35 / 8 >= v37 / 8)
  {
    if (v37 < -7)
      goto LABEL_84;
    v71 = v117;
    if (a4 != a2 || &a2[8 * v38] <= a4)
    {
      memmove(a4, a2, 8 * v38);
      v34 = v123;
    }
    v72 = &a4[8 * v38];
    v126 = v72;
    v128 = a2;
    v73 = v121;
    if (v37 < 8 || v34 >= a2)
    {
LABEL_83:
      sub_1001D4FA4(&v128, &v127, &v126);
      return 1;
    }
    v74 = (char *)(v119 - 8);
    v75 = a2;
    v118 = a4;
    while (1)
    {
      v122 = v72;
      v77 = v72 - 8;
      v76 = *((_QWORD *)v72 - 1);
      v79 = *((_QWORD *)v75 - 1);
      v75 -= 8;
      v78 = v79;
      if ((*(_BYTE *)(v76 + 32) & 1) == 0)
      {
        v86 = *(double *)(v76 + 24);
        swift_retain();
        v87 = swift_retain();
        if ((*(_BYTE *)(v78 + 32) & 1) == 0)
          goto LABEL_53;
        goto LABEL_60;
      }
      v80 = *(void **)(v76 + 16);
      swift_retain();
      swift_retain();
      v81 = objc_msgSend(v80, "ckServerRecord");
      if (!v81)
        break;
      v82 = v81;
      v83 = objc_msgSend(v81, "creationDate");

      if (v83)
      {
        v84 = v113;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v83);

        v85 = 0;
      }
      else
      {
        v85 = 1;
        v84 = v113;
      }
      v91 = v124;
      v90 = v125;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v84, v85, 1, v125);
      v92 = (uint64_t)v84;
      v71 = v117;
      sub_1000CDA74(v92, v117);
      v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v71, 1, v90);
      v73 = v121;
      if ((_DWORD)v89 == 1)
        goto LABEL_57;
      v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 32))(v120, v71, v125);
LABEL_59:
      v86 = Date.timeIntervalSinceReferenceDate.getter(v93);
      v87 = (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v120, v125);
      *(double *)(v76 + 24) = v86;
      *(_BYTE *)(v76 + 32) = 0;
      if ((*(_BYTE *)(v78 + 32) & 1) == 0)
      {
LABEL_53:
        v88 = *(double *)(v78 + 24);
        goto LABEL_69;
      }
LABEL_60:
      v94 = objc_msgSend(*(id *)(v78 + 16), "ckServerRecord");
      if (v94)
      {
        v95 = v94;
        v96 = objc_msgSend(v94, "creationDate");

        if (v96)
        {
          v97 = v114;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

          v98 = 0;
        }
        else
        {
          v98 = 1;
          v97 = v114;
        }
        v102 = v124;
        v101 = v125;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v97, v98, 1, v125);
        v103 = (uint64_t)v97;
        v104 = v116;
        sub_1000CDA74(v103, v116);
        v105 = v101;
        v99 = v104;
        v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v104, 1, v105);
        v71 = v117;
        v73 = v121;
        if ((_DWORD)v100 != 1)
        {
          v106 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 32))(v121, v99, v125);
          goto LABEL_68;
        }
      }
      else
      {
        v99 = v116;
        v100 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56))(v116, 1, 1, v125);
      }
      static Date.distantPast.getter(v100);
      v106 = sub_1000EA320(v99);
LABEL_68:
      v88 = Date.timeIntervalSinceReferenceDate.getter(v106);
      v87 = (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v73, v125);
      *(double *)(v78 + 24) = v88;
      *(_BYTE *)(v78 + 32) = 0;
LABEL_69:
      v107 = v74 + 8;
      if (v88 >= v86)
      {
        swift_release(v76);
        swift_release(v78);
LABEL_76:
        v126 = v77;
        v109 = v123;
        if (v107 < v122 || v74 >= v122 || v107 != v122)
          *(_QWORD *)v74 = *(_QWORD *)v77;
        v75 = a2;
        v72 = v77;
        goto LABEL_81;
      }
      isEqualNonces = rem_isEqualNonces(v87, v86, v88);
      swift_release(v76);
      swift_release(v78);
      if ((isEqualNonces & 1) != 0)
        goto LABEL_76;
      v72 = v122;
      v109 = v123;
      if (v107 != a2 || v74 >= a2)
        *(_QWORD *)v74 = *(_QWORD *)v75;
      v128 = v75;
LABEL_81:
      v73 = v121;
      if (v72 > v118)
      {
        v74 -= 8;
        a2 = v75;
        if (v75 > v109)
          continue;
      }
      goto LABEL_83;
    }
    v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56))(v71, 1, 1, v125);
LABEL_57:
    static Date.distantPast.getter(v89);
    v93 = sub_1000EA320(v71);
    goto LABEL_59;
  }
  v120 = (char *)&v111 - v33;
  if (v35 >= -7)
  {
    v39 = (uint64_t)v115;
    if (a4 != v34 || &v34[8 * v36] <= a4)
    {
      memmove(a4, v123, 8 * v36);
      v34 = v123;
    }
    v121 = &a4[8 * v36];
    v126 = v121;
    if (v35 >= 8 && (unint64_t)a2 < v119)
    {
      while (1)
      {
        v123 = v34;
        v40 = *(_QWORD *)a2;
        v41 = a4;
        v42 = *(_QWORD *)a4;
        if ((*(_BYTE *)(*(_QWORD *)a2 + 32) & 1) == 0)
        {
          v48 = *(double *)(v40 + 24);
          swift_retain();
          v49 = swift_retain();
          if ((*(_BYTE *)(v42 + 32) & 1) == 0)
            goto LABEL_13;
          goto LABEL_21;
        }
        v43 = *(void **)(v40 + 16);
        swift_retain();
        swift_retain();
        v44 = objc_msgSend(v43, "ckServerRecord");
        if (!v44)
          break;
        v45 = v44;
        v46 = objc_msgSend(v44, "creationDate");

        if (v46)
        {
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

          v47 = 0;
        }
        else
        {
          v47 = 1;
        }
        v53 = v124;
        v52 = v125;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v23, v47, 1, v125);
        sub_1000CDA74((uint64_t)v23, v39);
        v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v39, 1, v52);
        if ((_DWORD)v51 == 1)
          goto LABEL_18;
        v54 = v120;
        v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 32))(v120, v39, v125);
LABEL_20:
        v48 = Date.timeIntervalSinceReferenceDate.getter(v55);
        v49 = (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v54, v125);
        *(double *)(v40 + 24) = v48;
        *(_BYTE *)(v40 + 32) = 0;
        if ((*(_BYTE *)(v42 + 32) & 1) == 0)
        {
LABEL_13:
          v50 = *(double *)(v42 + 24);
          if (v50 >= v48)
            goto LABEL_14;
          goto LABEL_30;
        }
LABEL_21:
        v56 = objc_msgSend(*(id *)(v42 + 16), "ckServerRecord");
        if (!v56)
        {
          v63 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v20, 1, 1, v125);
LABEL_27:
          static Date.distantPast.getter(v63);
          v67 = sub_1000EA320((uint64_t)v20);
          goto LABEL_29;
        }
        v57 = v56;
        v58 = v23;
        v59 = (uint64_t)v20;
        v60 = objc_msgSend(v56, "creationDate");

        if (v60)
        {
          v61 = v112;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v60);

          v62 = 0;
        }
        else
        {
          v62 = 1;
          v61 = v112;
        }
        v65 = v124;
        v64 = v125;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v61, v62, 1, v125);
        v66 = (uint64_t)v61;
        v20 = (char *)v59;
        sub_1000CDA74(v66, v59);
        v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v59, 1, v64);
        v23 = v58;
        v39 = (uint64_t)v115;
        if ((_DWORD)v63 == 1)
          goto LABEL_27;
        v67 = (*(uint64_t (**)(char *, char *, uint64_t))(v124 + 32))(v122, v20, v125);
LABEL_29:
        v50 = Date.timeIntervalSinceReferenceDate.getter(v67);
        v49 = (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v122, v125);
        *(double *)(v42 + 24) = v50;
        *(_BYTE *)(v42 + 32) = 0;
        if (v50 >= v48)
        {
LABEL_14:
          swift_release(v40);
          swift_release(v42);
          goto LABEL_31;
        }
LABEL_30:
        v68 = rem_isEqualNonces(v49, v48, v50);
        swift_release(v40);
        swift_release(v42);
        if ((v68 & 1) == 0)
        {
          v70 = (unint64_t)(a2 + 8);
          v69 = v123;
          a4 = v41;
          if (v123 < a2 || (unint64_t)v123 >= v70 || v123 != a2)
            *(_QWORD *)v123 = *(_QWORD *)a2;
          goto LABEL_38;
        }
LABEL_31:
        v69 = v123;
        if (v123 != v41)
          *(_QWORD *)v123 = *(_QWORD *)v41;
        a4 = v41 + 8;
        v127 = v41 + 8;
        v70 = (unint64_t)a2;
LABEL_38:
        v34 = v69 + 8;
        v128 = v34;
        if (a4 < v121)
        {
          a2 = (char *)v70;
          if (v70 < v119)
            continue;
        }
        goto LABEL_83;
      }
      v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56))(v39, 1, 1, v125);
LABEL_18:
      v54 = v120;
      static Date.distantPast.getter(v51);
      v55 = sub_1000EA320(v39);
      goto LABEL_20;
    }
    goto LABEL_83;
  }
LABEL_84:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001265E8(char *a1, char *__src, unint64_t a3, char *a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  id v19;
  double v20;
  char v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  double v31;
  double v32;
  id v33;
  double v34;
  char isEqualNonces;
  uint64_t result;
  char *v39;
  char *v40;
  char *v41;

  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 7;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 3;
  v9 = a3 - (_QWORD)__src;
  v10 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v10 = a3 - (_QWORD)__src;
  v11 = v10 >> 3;
  v40 = a4;
  v41 = a1;
  if (v8 >= v10 >> 3)
  {
    if (v9 < -7)
      goto LABEL_48;
    if (a4 != __src || &__src[8 * v11] <= a4)
      memmove(a4, __src, 8 * v11);
    v23 = &a4[8 * v11];
    v39 = v23;
    v41 = v5;
    if (a1 >= v5 || v9 < 8)
    {
LABEL_47:
      sub_1001D4FA4(&v41, &v40, &v39);
      return 1;
    }
    v24 = (char *)(a3 - 8);
    v25 = v5;
    while (1)
    {
      v26 = v24 + 8;
      v27 = *((_QWORD *)v23 - 1);
      v29 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      v28 = v29;
      v30 = *(void **)(v27 + 16);
      swift_retain(v27);
      swift_retain(v29);
      objc_msgSend(v30, "dueDateResolutionTokenAsNonce");
      v32 = v31;
      v33 = objc_msgSend(*(id *)(v29 + 16), "dueDateResolutionTokenAsNonce");
      if (v34 >= v32)
        break;
      isEqualNonces = rem_isEqualNonces(v33, v32, v34);
      swift_release(v27);
      swift_release(v28);
      if ((isEqualNonces & 1) != 0)
        goto LABEL_40;
      if (v26 != v5 || v24 >= v5)
        *(_QWORD *)v24 = *(_QWORD *)v25;
      v41 = v25;
LABEL_45:
      if (v25 > a1)
      {
        v24 -= 8;
        v5 = v25;
        if (v23 > a4)
          continue;
      }
      goto LABEL_47;
    }
    swift_release(v27);
    swift_release(v28);
LABEL_40:
    v39 = v23 - 8;
    if (v26 < v23 || v24 >= v23 || v26 != v23)
      *(_QWORD *)v24 = *((_QWORD *)v23 - 1);
    v25 = v5;
    v23 -= 8;
    goto LABEL_45;
  }
  if (v6 >= -7)
  {
    if (a4 != a1 || &a1[8 * v8] <= a4)
      memmove(a4, a1, 8 * v8);
    v39 = &a4[8 * v8];
    if ((unint64_t)v5 < a3 && v6 >= 8)
    {
      v12 = a4;
      v13 = a1;
      while (1)
      {
        v14 = *(_QWORD *)v5;
        v15 = *(_QWORD *)v12;
        v16 = *(void **)(*(_QWORD *)v5 + 16);
        swift_retain(*(_QWORD *)v5);
        swift_retain(v15);
        objc_msgSend(v16, "dueDateResolutionTokenAsNonce");
        v18 = v17;
        v19 = objc_msgSend(*(id *)(v15 + 16), "dueDateResolutionTokenAsNonce");
        if (v20 >= v18)
          break;
        v21 = rem_isEqualNonces(v19, v18, v20);
        swift_release(v14);
        swift_release(v15);
        if ((v21 & 1) != 0)
          goto LABEL_20;
        v22 = v5 + 8;
        if (v13 < v5 || v13 >= v22 || v13 != v5)
          *(_QWORD *)v13 = *(_QWORD *)v5;
LABEL_23:
        v13 += 8;
        if (v12 < &a4[8 * v8])
        {
          v5 = v22;
          if ((unint64_t)v22 < a3)
            continue;
        }
        v41 = v13;
        goto LABEL_47;
      }
      swift_release(v14);
      swift_release(v15);
LABEL_20:
      if (v13 != v12)
        *(_QWORD *)v13 = *(_QWORD *)v12;
      v12 += 8;
      v40 = v12;
      v22 = v5;
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_48:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void *sub_10012693C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t i;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  _QWORD v13[4];

  v3 = a3;
  v4 = a2;
  v13[0] = a2;
  v13[1] = a3;
  v13[2] = _swiftEmptyArrayStorage;
  v13[3] = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_11;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v10))
  {
    v3 = 0;
    for (i = 4; ; ++i)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
         : *(id *)(a1 + 8 * i);
      v4 = v8;
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v12 = v8;
      sub_1001226C8((uint64_t)v13, &v12);

      if (v9 == v6)
      {
        swift_bridgeObjectRelease(a1);
        return (void *)v13[0];
      }
    }
    __break(1u);
LABEL_11:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return v4;
}

Swift::Int sub_100126A9C()
{
  unsigned __int8 *v0;
  __int16 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(10 * v1 + 10);
  return Hasher._finalize()();
}

void sub_100126AE8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(10 * *v0 + 10);
}

Swift::Int sub_100126B1C(uint64_t a1)
{
  unsigned __int8 *v1;
  __int16 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(10 * v2 + 10);
  return Hasher._finalize()();
}

unsigned __int16 *sub_100126B64@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  int v2;
  char v3;
  char v4;
  char v5;

  v2 = *result;
  if (v2 == 10)
    v3 = 0;
  else
    v3 = 3;
  if (v2 == 20)
    v4 = 1;
  else
    v4 = v3;
  if (v2 == 30)
    v5 = 2;
  else
    v5 = v4;
  *a2 = v5;
  return result;
}

void sub_100126B94(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = 10 * *v1 + 10;
}

uint64_t sub_100126BAC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1751607656;
  if (*v0 != 1)
    v1 = 0x72656B636F6C62;
  if (*v0)
    return v1;
  else
    return 7827308;
}

unint64_t sub_100126BF8(char a1)
{
  unint64_t result;

  result = 0xD000000000000019;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000023;
    else
      return 0xD00000000000001DLL;
  }
  return result;
}

Swift::Int sub_100126C58()
{
  unsigned __int8 *v0;
  __int16 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_100126C9C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_100126CC8(uint64_t a1)
{
  unsigned __int8 *v1;
  __int16 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 + 1);
  return Hasher._finalize()();
}

unsigned __int16 *sub_100126D08@<X0>(unsigned __int16 *result@<X0>, char *a2@<X8>)
{
  unsigned int v2;
  char v3;

  v2 = *result;
  if (v2 >= 4)
    v3 = 3;
  else
    v3 = 0x2010003u >> (8 * v2);
  *a2 = v3;
  return result;
}

void sub_100126D30(_WORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

unint64_t sub_100126D40()
{
  char *v0;

  return sub_100126BF8(*v0);
}

id sub_100126D48()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  unint64_t v16;
  void *ObjCClassFromMetadata;
  Class isa;
  id v19;
  uint64_t v21;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v21 - v11;
  v13 = objc_msgSend(v1, "listIdentifier", v10);
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  v14 = v13;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v15(v4, v8, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_10011E85C((uint64_t)v4);
    return 0;
  }
  v15(v12, v4, v5);
  v16 = sub_1001276C0();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v16);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v19;
}

void sub_100126F00(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a2 = objc_msgSend(a1, "objectID", v5);
  v8 = objc_msgSend(a1, "operationTypeRawValue");
  v9 = 0x2010003u >> (8 * v8);
  if (v8 >= 4)
    LOBYTE(v9) = 3;
  *(_BYTE *)(a2 + 8) = v9;
  v10 = objc_msgSend(a1, "priorityRawValue");
  v11 = v10 == 20;
  if (v10 == 30)
    v11 = 2;
  *(_BYTE *)(a2 + 9) = v11;
  v12 = objc_msgSend(a1, "creationDate");
  if (v12)
  {
    v13 = v12;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v14 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 0, 1, v14);
  }
  else
  {
    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
  }
  v16 = (int *)type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(0);
  sub_1000CDA74((uint64_t)v7, a2 + v16[7]);
  *(_BYTE *)(a2 + v16[8]) = objc_msgSend(a1, "isCompleted");
  *(_QWORD *)(a2 + v16[9]) = sub_100126D48();
  v17 = objc_msgSend(a1, "configurationData");
  if (v17)
  {
    v18 = v17;
    v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

  }
  else
  {

    v19 = 0;
    v21 = 0xF000000000000000;
  }
  v22 = (uint64_t *)(a2 + v16[10]);
  *v22 = v19;
  v22[1] = v21;
}

void sub_1001270E0()
{
  id *v0;
  id *v1;
  Swift::String v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;

  v1 = v0;
  _StringGuts.grow(_:)(62);
  v2._countAndFlagsBits = 0xD000000000000039;
  v2._object = (void *)0x80000001006F92B0;
  String.append(_:)(v2);
  v3 = *v0;
  v4 = objc_msgSend(v3, "description");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 8069182;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  __asm { BR              X10 }
}

uint64_t sub_100127214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  Swift::String v28[7];

  v4._countAndFlagsBits = v1 + 10;
  v4._object = (void *)0x80000001006F9260;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(0x80000001006F9260);
  v5._countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain(v2);
  String.append(_:)(v28[0]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v28[0]._object);
  v6 = v2;
  v28[0]._countAndFlagsBits = 0x797469726F697270;
  v28[0]._object = (void *)0xEA0000000000203ALL;
  v7 = 1751607656;
  v8 = 0xE700000000000000;
  if (*(_BYTE *)(v0 + 9) == 1)
    v8 = 0xE400000000000000;
  else
    v7 = 0x72656B636F6C62;
  if (*(_BYTE *)(v0 + 9))
    v9 = v7;
  else
    v9 = 7827308;
  if (*(_BYTE *)(v0 + 9))
    v10 = v8;
  else
    v10 = 0xE300000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRetain(v6);
  String.append(_:)(v28[0]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v28[0]._object);
  v13 = v6;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v28, "creationDate: ");
  HIBYTE(v28[0]._object) = -18;
  v14 = type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(0);
  v15 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v16._countAndFlagsBits = Optional.descriptionOrNil.getter(v15);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._countAndFlagsBits = 8236;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRetain(v13);
  String.append(_:)(v28[0]);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v28[0]._object);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v28, "isCompleted: ");
  HIWORD(v28[0]._object) = -4864;
  if (*(_BYTE *)(v0 + *(int *)(v14 + 32)))
    v19 = 1702195828;
  else
    v19 = 0x65736C6166;
  if (*(_BYTE *)(v0 + *(int *)(v14 + 32)))
    v20 = 0xE400000000000000;
  else
    v20 = 0xE500000000000000;
  v21 = v20;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease(v20);
  v22._countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRetain(v13);
  String.append(_:)(v28[0]);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v28[0]._object);
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v28, "listObjectID: ");
  HIBYTE(v28[0]._object) = -18;
  v23 = sub_10001A630((uint64_t *)&unk_100844910);
  v24._countAndFlagsBits = Optional.descriptionOrNil.getter(v23);
  v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRetain(v13);
  String.append(_:)(v28[0]);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v28[0]._object);
  swift_bridgeObjectRetain(v13);
  v26._countAndFlagsBits = 125;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v13);
  return v3;
}

uint64_t type metadata accessor for REMCDGroceryOperationQueueItem()
{
  return objc_opt_self(REMCDGroceryOperationQueueItem);
}

ValueMetadata *type metadata accessor for REMCDGroceryOperationQueueItem.OperationType()
{
  return &type metadata for REMCDGroceryOperationQueueItem.OperationType;
}

unint64_t sub_10012767C()
{
  unint64_t result;

  result = qword_10083B988;
  if (!qword_10083B988)
  {
    result = swift_getWitnessTable(&unk_1006A94E8, &type metadata for REMCDGroceryOperationQueueItem.OperationType);
    atomic_store(result, (unint64_t *)&qword_10083B988);
  }
  return result;
}

unint64_t sub_1001276C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100839900;
  if (!qword_100839900)
  {
    v1 = objc_opt_self(REMCDList);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100839900);
  }
  return result;
}

uint64_t type metadata accessor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation(uint64_t a1)
{
  uint64_t result;

  result = qword_10083B9E8;
  if (!qword_10083B9E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for REMCDGroceryOperationQueueItem.ThreadSafeRepresentation);
  return result;
}

char *sub_100127738(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  unint64_t v21;
  id v22;
  uint64_t v23;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
    v8 = a3[7];
    v9 = &a1[v8];
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    v14 = v4;
    if (v13(v10, 1, v11))
    {
      v15 = sub_10001A630((uint64_t *)&unk_1008380D0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[9];
    v7[a3[8]] = *((_BYTE *)a2 + a3[8]);
    v17 = *(char **)((char *)a2 + v16);
    *(_QWORD *)&v7[v16] = v17;
    v18 = a3[10];
    v19 = &v7[v18];
    v20 = (_OWORD *)((char *)a2 + v18);
    v21 = *(unint64_t *)((char *)a2 + v18 + 8);
    v22 = v17;
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)v19 = *v20;
    }
    else
    {
      v23 = *(_QWORD *)v20;
      sub_1000A70E4(v23, v21);
      *(_QWORD *)v19 = v23;
      *((_QWORD *)v19 + 1) = v21;
    }
  }
  return v7;
}

void sub_100127894(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v4 = (char *)a1 + a2[7];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);

  v7 = (uint64_t *)((char *)a1 + a2[10]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_1000A71C8(*v7, v8);
}

uint64_t sub_100127948(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  id v21;
  uint64_t v22;

  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v6;
  if (v12(v9, 1, v10))
  {
    v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v16 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  v17 = a3[10];
  v18 = a1 + v17;
  v19 = (_OWORD *)(a2 + v17);
  v20 = *(_QWORD *)(a2 + v17 + 8);
  v21 = v16;
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *v19;
  }
  else
  {
    v22 = *(_QWORD *)v19;
    sub_1000A70E4(v22, v20);
    *(_QWORD *)v18 = v22;
    *(_QWORD *)(v18 + 8) = v20;
  }
  return a1;
}

uint64_t sub_100127A7C(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v9 = a3[7];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v18 = a3[9];
  v19 = *(void **)(a1 + v18);
  v20 = *(void **)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v20;
  v21 = v20;

  v22 = a3[10];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *(_QWORD *)(a2 + v22 + 8);
  if (*(_QWORD *)(a1 + v22 + 8) >> 60 != 15)
  {
    if (v25 >> 60 != 15)
    {
      v27 = *v24;
      sub_1000A70E4(v27, v25);
      v28 = *v23;
      v29 = v23[1];
      *v23 = v27;
      v23[1] = v25;
      sub_1000A71C8(v28, v29);
      return a1;
    }
    sub_1000EA68C((uint64_t)v23);
    goto LABEL_12;
  }
  if (v25 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v23 = *(_OWORD *)v24;
    return a1;
  }
  v26 = *v24;
  sub_1000A70E4(v26, v25);
  *v23 = v26;
  v23[1] = v25;
  return a1;
}

uint64_t sub_100127C54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100127D48(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = *(void **)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);

  v18 = a3[10];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *(_QWORD *)(a1 + v18 + 8);
  if (v21 >> 60 != 15)
  {
    v22 = v20[1];
    if (v22 >> 60 != 15)
    {
      v23 = *v19;
      *v19 = *v20;
      v19[1] = v22;
      sub_1000A71C8(v23, v21);
      return a1;
    }
    sub_1000EA68C((uint64_t)v19);
  }
  *(_OWORD *)v19 = *(_OWORD *)v20;
  return a1;
}

uint64_t sub_100127EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100127EE8);
}

uint64_t sub_100127EE8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_100127F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100127F74);
}

char *sub_100127F74(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

void sub_100127FEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_1006A9530;
  v4[2] = &unk_1006A9548;
  sub_1000D7B50(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1006A9560;
    v4[5] = &unk_1006A9578;
    v4[6] = &unk_1006A9590;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t _s7remindd30REMCDGroceryOperationQueueItemC13OperationTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001280E0 + 4 * byte_1006A9405[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100128114 + 4 * byte_1006A9400[v4]))();
}

uint64_t sub_100128114(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012811C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100128124);
  return result;
}

uint64_t sub_100128130(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100128138);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10012813C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100128144(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMCDGroceryOperationQueueItem.Priority()
{
  return &type metadata for REMCDGroceryOperationQueueItem.Priority;
}

unint64_t sub_100128164()
{
  unint64_t result;

  result = qword_10083BA38;
  if (!qword_10083BA38)
  {
    result = swift_getWitnessTable(&unk_1006A967C, &type metadata for REMCDGroceryOperationQueueItem.Priority);
    atomic_store(result, (unint64_t *)&qword_10083BA38);
  }
  return result;
}

uint64_t sub_1001281A8(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10083BA60, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlaggedInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlaggedInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1001281E4(void *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t Configuration;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  void (*v50)(char *, uint64_t);
  __n128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  __n128 v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  uint64_t v75;
  int v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  char *v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  char *v105;
  char *v106;
  id v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  id v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;

  v153 = a3;
  v147 = a2;
  v131 = a5;
  v125 = type metadata accessor for REMRemindersListDataView.FlaggedModel(0);
  v132 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v129 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v130 = (char *)&v116 - v10;
  v133 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v9);
  v135 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v128 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v134 = (char *)&v116 - v13;
  v14 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v138 = *(_QWORD *)(v14 - 8);
  v139 = v14;
  __chkstk_darwin(v14);
  v137 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v16);
  v124 = (uint64_t)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v144 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v141 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v146 = (char *)&v116 - v20;
  v21 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v142 = *(_QWORD *)(v21 - 8);
  v143 = v21;
  __chkstk_darwin(v21);
  v127 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v149 = (uint64_t)&v116 - v24;
  v148 = _s10PredicatesOMa(0);
  __chkstk_darwin(v148);
  v136 = (char *)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v145 = (char *)&v116 - v27;
  v28 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v28);
  v126 = (uint64_t)&v116 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)&v116 - v31;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v34 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v36 = (char *)&v116 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v39 = (char *)&v116 - v38;
  __chkstk_darwin(v40);
  v42 = (char *)&v116 - v41;
  v44 = __chkstk_darwin(v43);
  v46 = (char *)&v116 - v45;
  v151 = a4;
  REMRemindersListDataView.FlaggedInvocation.Parameters.configuration.getter(v44);
  v47 = v152;
  v48 = sub_100128C9C(a1, v153, v46);
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v46, Configuration);
    return;
  }
  v118 = v39;
  v119 = v36;
  v120 = v48;
  v121 = v49;
  v123 = (uint64_t)a1;
  v152 = 0;
  v122 = v32;
  v50 = *(void (**)(char *, uint64_t))(v34 + 8);
  v50(v46, Configuration);
  v52 = REMRemindersListDataView.FlaggedInvocation.Parameters.configuration.getter(v51);
  v53 = v42;
  v54 = Configuration;
  if ((REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v52) & 1) != 0)
  {
    v55 = (uint64_t)v145;
    swift_storeEnumTagMultiPayload(v145, v148, 48);
    sub_10000D2C0();
    v57 = v56;
    sub_10001C744(v55, _s10PredicatesOMa);
    v58 = (uint64_t)v122;
    v59 = v123;
    v60 = v152;
    sub_1004934D8(v123, (uint64_t)v57);
    v152 = v60;
    v61 = v150;
    if (v60)
    {

      v50(v53, v54);
      swift_bridgeObjectRelease();

      return;
    }
    v64 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v58, 0, 1, v64);

    v63 = v59;
  }
  else
  {
    v62 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    v58 = (uint64_t)v122;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v122, 1, 1, v62);
    v63 = v123;
    v61 = v150;
  }
  v50(v53, v54);
  v65 = objc_msgSend(v61, "fetchResultTokenToDiffAgainst");
  v66 = v149;
  v67 = v152;
  sub_100493C24(v65, v63, v149);
  if (v67)
  {
    sub_10000882C(v58, &qword_100839AA0);
    swift_bridgeObjectRelease();

    return;
  }
  v152 = 0;

  v68 = v118;
  v70 = REMRemindersListDataView.FlaggedInvocation.Parameters.configuration.getter(v69);
  v71 = v146;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v70);
  v150 = v50;
  v50(v68, v54);
  v72 = v144;
  v73 = (uint64_t *)v141;
  v74 = v71;
  v75 = v140;
  (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v141, v74, v140);
  v76 = (*(uint64_t (**)(uint64_t *, uint64_t))(v72 + 88))(v73, v75);
  v117 = v54;
  if (v76 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v72 + 96))(v73, v75);
    v78 = *v73;
    v79 = (uint64_t)v120;
    swift_bridgeObjectRetain(v120);
    v147 = sub_10049BB18(v78, v79, v123, v153, 0);
    v153 = _swiftEmptyArrayStorage;
    v81 = v138;
    v80 = v139;
LABEL_16:
    v77 = swift_bridgeObjectRelease();
    v91 = v146;
    goto LABEL_17;
  }
  v81 = v138;
  v80 = v139;
  v82 = v153;
  if (v76 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    v72 = v144;
    v83 = (uint64_t *)v141;
    (*(void (**)(char *, uint64_t))(v144 + 96))(v141, v75);
    v84 = *v83;
    v79 = (uint64_t)v120;
    swift_bridgeObjectRetain(v120);
    v147 = sub_10049C4C8(v84, v66, v123, v82, 0);
    v153 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  if (v76 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    v72 = v144;
    v85 = (uint64_t *)v141;
    (*(void (**)(char *, uint64_t))(v144 + 96))(v141, v75);
    v86 = *v85;
    v87 = sub_10001A630(&qword_100839AA8);
    v88 = v124;
    sub_100128FE0((uint64_t)v85 + *(int *)(v87 + 48), v124);
    v79 = (uint64_t)v120;
    swift_bridgeObjectRetain(v120);
    v89 = v86;
    v75 = v140;
    v90 = v123;
    v147 = sub_10049BB18(v89, v79, v123, v82, 0);
    v153 = sub_10049CB18(v88, v79, v90, v82, 0);
    sub_10000882C(v88, &qword_100839A98);
    goto LABEL_16;
  }
  if (v76 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)(v75, v75);
    __break(1u);
    return;
  }
  v153 = _swiftEmptyArrayStorage;
  v147 = _swiftEmptyArrayStorage;
  v72 = v144;
  v91 = v146;
  v79 = (uint64_t)v120;
LABEL_17:
  v92 = (uint64_t)v136;
  (*(void (**)(char *, uint64_t, __n128))(v72 + 8))(v91, v75, v77);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v81 + 104))(v92, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v80);
  swift_storeEnumTagMultiPayload(v92, v148, 12);
  v93 = v80;
  sub_10000D2C0();
  v95 = v94;
  sub_10001C744(v92, _s10PredicatesOMa);
  v96 = v119;
  v98 = REMRemindersListDataView.FlaggedInvocation.Parameters.configuration.getter(v97);
  v99 = (uint64_t)v137;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v98);
  v150(v96, v117);
  v100 = (uint64_t)v122;
  v101 = v152;
  v102 = sub_10049E524(v123, (uint64_t)v95, (uint64_t)v122, v99, v79);
  v152 = v101;
  if (v101)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v99, v80);
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v149, v143);
  }
  else
  {
    v103 = v102;
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v99, v93);

    v104 = v126;
    sub_100129028(v100, v126);
    v105 = v134;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v79, v104, v103 & 1, v147, v153);
    v106 = v128;
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v128, v105, v133);
    v107 = v121;
    v153 = v121;
    v108 = v130;
    REMRemindersListDataView.FlaggedModel.init(flatModel:flaggedSmartList:)(v106, v107);
    v109 = v132;
    v110 = v149;
    v111 = v129;
    v112 = v125;
    (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v129, v108, v125);
    v113 = v127;
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v127, v110, v143);
    v114 = sub_10009FC50(&qword_10083BA68, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlaggedModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlaggedModel);
    v115 = sub_10009FC50((unint64_t *)&unk_10083BA70, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlaggedModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlaggedModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v111, v113, v112, v114, v115);

    (*(void (**)(char *, uint64_t))(v109 + 8))(v108, v112);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v134, v133);
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v110, v143);
  }
  sub_10000882C(v100, &qword_100839AA0);
}

_QWORD *sub_100128C9C(void *a1, void *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  uint64_t v38;
  id v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t Subtasks;

  v41 = a1;
  v39 = a2;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v44 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v40 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - v14;
  v16 = _s10PredicatesOMa(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v19);
  swift_storeEnumTagMultiPayload(v18, v16, 12);
  sub_10000D2C0();
  v21 = v20;
  v22 = (uint64_t)v18;
  v23 = v40;
  v24 = sub_10001C744(v22, _s10PredicatesOMa);
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v24);
  v25 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v26 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v12, v25, v26);
  swift_storeEnumTagMultiPayload(v12, v10, 2);
  v27 = (uint64_t)v12;
  v28 = v41;
  v29 = sub_1004957D0((uint64_t)v9, v27, (uint64_t)v15);
  v30 = a3;
  v31 = REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v29);
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v31);
  v32 = (void *)REMSmartListTypeFlagged;
  v33 = v42;
  v34 = sub_100495AE4(v28, (uint64_t)v21, (uint64_t)v15, (uint64_t)v6, v23, REMSmartListTypeFlagged);
  if (v33)
  {

    (*(void (**)(_QWORD *, uint64_t))(v44 + 8))(v23, Subtasks);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v45);
    sub_10001C744((uint64_t)v15, _s9UtilitiesO12SortingStyleOMa);
  }
  else
  {
    v30 = v34;
    v36 = v35;
    (*(void (**)(_QWORD *, uint64_t))(v44 + 8))(v23, Subtasks);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v45);
    sub_10049E31C(v36, v32, (uint64_t)v28, v39);
    sub_10001C744((uint64_t)v15, _s9UtilitiesO12SortingStyleOMa);

  }
  return v30;
}

uint64_t sub_100128FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100839A98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100129028(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100839AA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100129070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083BA80);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083BA80);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_ResetReminderCountsCache.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  id v14;
  id v15;
  id v16;
  Class isa;
  uint64_t v18;
  id v19;
  _OWORD v20[2];
  _QWORD v21[4];

  v3 = v2;
  if (qword_100836D40 != -1)
    swift_once(&qword_100836D40, sub_100129070);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_10083BA80);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDStoreControllerMigrator_ResetReminderCountsCache: migrating if needed", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  *(_QWORD *)&v20[0] = 0xD000000000000032;
  *((_QWORD *)&v20[0] + 1) = 0x80000001006A96B0;
  v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v20, &type metadata for String);
  v12 = -[objc_class __swift_objectForKeyedSubscript:](metadata.super.super.isa, "__swift_objectForKeyedSubscript:", v11);
  swift_unknownObjectRelease(v11);
  if (v12)
  {
    _bridgeAnyObjectToAny(_:)(v20, v12);
    swift_unknownObjectRelease(v12);
  }
  else
  {
    memset(v20, 0, sizeof(v20));
  }
  sub_10001A5E8((uint64_t)v20, (uint64_t)v21);
  if (!v21[3])
  {
    sub_1000F4294((uint64_t)v21);
LABEL_13:
    v16 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    sub_100129668(v16, _.super.isa, v3);

    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v21[0] = 0xD000000000000032;
    v21[1] = 0x80000001006A96B0;
    v18 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v21, &type metadata for String);
    -[objc_class __swift_setObject:forKeyedSubscript:](metadata.super.super.isa, "__swift_setObject:forKeyedSubscript:", isa, v18);

    swift_unknownObjectRelease(v18);
    return;
  }
  v13 = sub_1000E6B70();
  if ((swift_dynamicCast(&v19, v21, (char *)&type metadata for Any + 8, v13, 6) & 1) == 0)
    goto LABEL_13;
  v14 = v19;
  v15 = objc_msgSend(v19, "integerValue");

  if ((uint64_t)v15 <= 0)
    goto LABEL_13;
}

void sub_1001293C4(void *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MetatypeMetadata;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_100836D40 != -1)
    swift_once(&qword_100836D40, sub_100129070);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_10083BA80);
  v16 = a1;
  v5 = Logger.logObject.getter(v16);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v17 = v8;
    v18 = a2;
    *(_DWORD *)v7 = 136315394;
    MetatypeMetadata = swift_getMetatypeMetadata(a2);
    v10 = String.init<A>(describing:)(&v18, MetatypeMetadata);
    v12 = v11;
    v18 = sub_10001A820(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v7 + 12) = 2082;
    v13 = sub_1002AEF14();
    v15 = v14;
    v18 = sub_10001A820((uint64_t)v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);

    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: END {store: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
}

id RDStoreControllerMigrator_ResetReminderCountsCache.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_ResetReminderCountsCache();
  return objc_msgSendSuper2(&v2, "init");
}

id RDStoreControllerMigrator_ResetReminderCountsCache.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_ResetReminderCountsCache();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100129668(void *a1, void *a2, uint64_t a3)
{
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t MetatypeMetadata;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  ObjectType = swift_getObjectType(a3);
  if (qword_100836D40 != -1)
    swift_once(&qword_100836D40, sub_100129070);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_10083BA80);
  v8 = a2;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v43 = v12;
    v44 = ObjectType;
    *(_DWORD *)v11 = 136315394;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v14 = String.init<A>(describing:)(&v44, MetatypeMetadata);
    v41 = v7;
    v42 = a1;
    v15 = ObjectType;
    v17 = v16;
    v44 = sub_10001A820(v14, v16, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v11 + 12) = 2082;
    v18 = sub_1002AEF14();
    v20 = v19;
    v44 = sub_10001A820((uint64_t)v18, v19, &v43);
    ObjectType = v15;
    a1 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s: BEGIN {store: %{public}s}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  v21 = objc_msgSend(a1, "accountsListCategorizedCountsCache", v41, v42, v43);
  if (v21)
  {
    v22 = v21;
    v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

    sub_1000A71C8(v23, v25);
    v26 = Logger.logObject.getter(objc_msgSend(a1, "setAccountsListCategorizedCountsCache:", 0));
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDStoreControllerMigrator_ResetReminderCountsCache did reset accountsListCategorizedCountsCache", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

  }
  else
  {
    v29 = v8;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(64, -1);
      v43 = v33;
      v44 = ObjectType;
      *(_DWORD *)v32 = 136315394;
      v34 = swift_getMetatypeMetadata(ObjectType);
      v35 = String.init<A>(describing:)(&v44, v34);
      v37 = v36;
      v44 = sub_10001A820(v35, v36, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v32 + 12) = 2082;
      v38 = sub_1002AEF14();
      v40 = v39;
      v44 = sub_10001A820((uint64_t)v38, v39, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s: NO NEED TO RESET CACHE {store: %{public}s}", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

    }
  }
  sub_1001293C4(v8, ObjectType);
}

uint64_t type metadata accessor for RDStoreControllerMigrator_ResetReminderCountsCache()
{
  return objc_opt_self(_TtC7remindd50RDStoreControllerMigrator_ResetReminderCountsCache);
}

id sub_100129AB8()
{
  id v0;
  double v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  objc_msgSend(v0, "iCloudIsOffTimeIntervalSinceLastPrompt");
  v2 = objc_msgSend(objc_allocWithZone((Class)REMICloudIsOffDataViewConfigurationsInvocationResult), "initWithTimeIntervalSinceLastPrompt:", v1);

  return v2;
}

uint64_t sub_100129B44(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10083BAE0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TodayNotificationInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TodayNotificationInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_100129B80(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v39 = a2;
  v37 = a3;
  v4 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v42 = (uint64_t)&v33 - v9;
  v10 = sub_10001A630(&qword_100839AA0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v11);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v40 = (char *)&v33 - v19;
  v41 = a1;
  v20 = v43;
  v21 = sub_100129E3C(a1);
  if (!v20)
  {
    v22 = v21;
    v33 = v17;
    v34 = v7;
    v43 = v15;
    v35 = v5;
    v36 = v14;
    v23 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 1, 1, v23);
    v24 = v40;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v22, v13, 2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    v25 = objc_msgSend(v38, "fetchResultTokenToDiffAgainst");
    v26 = v42;
    sub_100493C24(v25, v41, v42);

    v27 = v33;
    v28 = v36;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v33, v24, v36);
    v29 = v34;
    v30 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v26, v4);
    v31 = sub_10009FC50(&qword_10083BAE8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
    v32 = sub_10009FC50((unint64_t *)&unk_10083BAF0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v27, v29, v28, v31, v32);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v26, v4);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v28);
  }
}

uint64_t sub_100129E3C(uint64_t a1)
{
  uint64_t Subtasks;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a1;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v2 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v28 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s10PredicatesOMa(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v13, v14, 60);
  sub_10000D2C0();
  v16 = v15;
  sub_10001C744((uint64_t)v13, _s10PredicatesOMa);
  v17 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v18 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v19 = v17;
  v20 = Subtasks;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v10, v19, v18);
  swift_storeEnumTagMultiPayload(v10, v8, 0);
  v31 = v5;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for REMRemindersListDataView.ShowCompleted.off(_:), v4);
  v21 = v2;
  v22 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
  v23 = (uint64_t)v28;
  v22(v28, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), Subtasks);
  v24 = v30;
  v25 = sub_100496780(v29, (uint64_t)v16, (uint64_t)v10, 0, 0, (uint64_t)v7, v23, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (v24)
  {

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, Subtasks);
  }
  else
  {
    Subtasks = (uint64_t)v25;
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v4);
  sub_10001C744((uint64_t)v10, _s9UtilitiesO12SortingStyleOMa);
  return Subtasks;
}

uint64_t sub_10012A0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083BB00);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083BB00);
  if (qword_100837668 != -1)
    swift_once(&qword_100837668, sub_1004A1918);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872118);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10012A168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  v1 = v0;
  if (qword_100836D48 != -1)
    swift_once(&qword_100836D48, sub_10012A0D8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10083BB00);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: START ALL", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void **)(v1 + 16);
  v8 = swift_allocObject(&unk_1007E5788, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_100130F30;
  *(_QWORD *)(v8 + 24) = v1;
  v12[4] = sub_1000098E4;
  v13 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1000098C4;
  v12[3] = &unk_1007E57A0;
  v9 = _Block_copy(v12);
  v10 = v13;
  swift_retain();
  swift_retain();
  swift_release(v10);
  objc_msgSend(v7, "performBlockAndWait:", v9);
  _Block_release(v9);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v8, "", 140, 90, 47, 1);
  result = swift_release(v8);
  if ((v7 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess(v1 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics, v12, 33, 0);
    sub_10012E15C(0x1000000000000044, 0x80000001006F9510);
    swift_endAccess(v12);
    return swift_release(v1);
  }
  return result;
}

uint64_t sub_10012A36C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t *v20;
  unsigned int v21;
  id v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  _QWORD v39[3];
  char v40[16];
  id v41[3];

  if (qword_100836D48 != -1)
    swift_once(&qword_100836D48, sub_10012A0D8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10083BB00);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: START .userInitiated", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_10012AAF8(1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: FINISH .userInitiated", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: START .sharedToMe", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  sub_10012AAF8(0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: FINISH .sharedToMe", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(void **)(a1 + 16);
  if (!objc_msgSend(v19, "hasChanges"))
    goto LABEL_14;
  v20 = (uint64_t *)(a1 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics);
  swift_beginAccess(a1 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics, v41, 33, 0);
  sub_10012A800(v19);
  swift_endAccess(v41);
  v41[0] = 0;
  v21 = objc_msgSend(v19, "save:", v41);
  v22 = v41[0];
  if (v21)
  {
    v23 = v41[0];
LABEL_14:
    v24 = (uint64_t *)(a1 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics);
    swift_beginAccess(v24, v41, 1, 0);
    v25 = *v24;
    *v24 = 0;
    return swift_errorRelease(v25);
  }
  v26 = v41[0];
  v27 = _convertNSErrorToError(_:)(v22);

  swift_willThrow(v28);
  swift_errorRetain(v27);
  v29 = swift_errorRetain(v27);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = (void *)swift_slowAlloc(32, -1);
    v41[0] = v33;
    *(_DWORD *)v32 = 136446210;
    swift_getErrorValue(v27, v40, v39);
    v34 = Error.rem_errorDescription.getter(v39[1], v39[2]);
    v36 = v35;
    v38 = sub_10001A820(v34, v35, (uint64_t *)v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39);
    swift_bridgeObjectRelease(v36);
    swift_errorRelease(v27);
    swift_errorRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "#️⃣ RDSharedInlineTagAutoConvertStoreHandler.Batcher: Error saving at end of consumeJournalUpdates {error: %{public}s}", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    swift_errorRelease(v27);
    swift_errorRelease(v27);
  }

  v20[6] = 0;
  v20[7] = 0;
  v20[8] = 0;
  v25 = *v20;
  *v20 = v27;
  return swift_errorRelease(v25);
}

void sub_10012A800(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = objc_msgSend(a1, "insertedObjects");
  v5 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v6 = sub_1000EC524((unint64_t *)&qword_100846120, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v7 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

  v8 = objc_msgSend(a1, "updatedObjects");
  v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v5, v6);

  sub_10059DD04(v9, v7);
  v11 = v10;
  v12 = objc_msgSend(a1, "deletedObjects");
  v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v12, v5, v6);

  sub_10059DD04(v13, v11);
  v15 = v14;
  v16 = type metadata accessor for REMCKSharedEntitySyncActivity();
  v17 = sub_10001A630(&qword_10083BEB0);
  v18 = sub_1000A5F84((unint64_t *)&unk_10083BEB8, &qword_10083BEB0, (uint64_t)&protocol conformance descriptor for Set<A>);
  v19 = Sequence.elements<A>(ofExactType:)(v16, v17, v16, v18);
  v20 = v19;
  if ((unint64_t)v19 >> 62)
  {
    if (v19 >= 0)
      v19 &= 0xFFFFFFFFFFFFFF8uLL;
    v21 = _CocoaArrayWrapper.endIndex.getter(v19);
  }
  else
  {
    v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v20);
  v2[6] = v21;
  v22 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v23 = Sequence.elements<A>(ofExactType:)(v22, v17, v22, v18);
  swift_bridgeObjectRelease(v15);
  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v31 = v23;
    else
      v31 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v24 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v25 = swift_bridgeObjectRelease(v23).n128_u64[0];
  v2[7] = v24;
  v26 = objc_msgSend(a1, "insertedObjects", v25);
  v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v26, v5, v6);

  v28 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v29 = Sequence.elements<A>(ofExactType:)(v28, v17, v28, v18);
  swift_bridgeObjectRelease(v27);
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0)
      v32 = v29;
    else
      v32 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v30 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v29);
  v2[8] = v30;
}

double sub_10012AAF8(char a1)
{
  uint64_t v1;
  char v2;
  _UNKNOWN **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _UNKNOWN **v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  double result;
  void *v23;
  char v24;
  os_log_t oslog[2];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];

  v2 = a1;
  if ((a1 & 1) != 0)
    v3 = &off_1007DE380;
  else
    v3 = &off_1007DE358;
  v4 = sub_10012AEBC((uint64_t)v3, 100);
  swift_bridgeObjectRelease(v3);
  v29[0] = v4;
  v5 = sub_10001A630(&qword_10083BE90);
  v6 = sub_1000A5F84(&qword_10083BE98, &qword_10083BE90, (uint64_t)&protocol conformance descriptor for [A]);
  v7 = BidirectionalCollection<>.slices(by:)(100, v5, v6);
  swift_bridgeObjectRelease(v4);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 56);
    v23 = *(void **)(v1 + 16);
    v24 = v2;
    do
    {
      v17 = *(v9 - 1);
      v18 = *v9;
      *(_OWORD *)oslog = *(_OWORD *)(v9 - 3);
      v19 = *(v9 - 3);
      swift_unknownObjectRetain(v19);
      v20 = objc_autoreleasePoolPush();
      if ((v2 & 1) != 0)
      {
        v10 = type metadata accessor for RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner();
        v11 = swift_allocObject(v10, 25, 7);
        *(_BYTE *)(v11 + 24) = 1;
        v12 = &off_1007F9E10;
      }
      else
      {
        v10 = type metadata accessor for RDNewlySharedToMeTagAutoConvertRunner();
        v11 = swift_allocObject(v10, 24, 7);
        v12 = &off_1007F6350;
      }
      *(_QWORD *)(v11 + 16) = v23;
      v29[3] = v10;
      v29[4] = v12;
      v29[0] = v11;
      sub_10000A388(v29, v10);
      v26 = *(_OWORD *)oslog;
      v27 = v17;
      v28 = v18;
      v13 = (void (*)(uint64_t, uint64_t, uint64_t))v12[1];
      v14 = v23;
      v15 = sub_10001A630(&qword_10083BEA0);
      v16 = sub_1000A5F84(&qword_10083BEA8, &qword_10083BEA0, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
      v13((uint64_t)&v26, v15, v16);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v29);
      objc_autoreleasePoolPop(v20);
      swift_unknownObjectRelease(v19);
      v9 += 4;
      --v8;
      v2 = v24;
    }
    while (v8);
    v21 = v7;
  }
  else
  {
    v21 = v7;
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v21).n128_u64[0];
  return result;
}

uint64_t sub_10012AEBC(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  uint64_t KeyPath;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_1001C1F30(0, v3, 0);
    v5 = (char *)(a1 + 32);
    v6 = _swiftEmptyArrayStorage[2];
    do
    {
      v8 = *v5++;
      v7 = v8;
      v9 = _swiftEmptyArrayStorage[3];
      if (v6 >= v9 >> 1)
        sub_1001C1F30(v9 > 1, v6 + 1, 1);
      v10 = word_1006A9B7E[v7];
      _swiftEmptyArrayStorage[2] = v6 + 1;
      *((_WORD *)&_swiftEmptyArrayStorage[4] + v6++) = v10;
      --v3;
    }
    while (v3);
  }
  KeyPath = swift_getKeyPath(&unk_1006A9A08);
  v12 = (void *)sub_1003428DC(KeyPath, (uint64_t)_swiftEmptyArrayStorage);
  swift_release(KeyPath);
  v13 = type metadata accessor for REMCKSharedEntitySyncActivity();
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v14, "setEntity:", v15);

  objc_msgSend(v14, "setAffectedStores:", 0);
  objc_msgSend(v14, "setPredicate:", v12);
  v16 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v17 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1006A7330;
  v18 = objc_allocWithZone((Class)NSSortDescriptor);
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "initWithKey:ascending:", v19, 1);

  *(_QWORD *)(v17 + 32) = v20;
  specialized Array._endMutation()(v21);
  v22 = v17;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "setSortDescriptors:", isa, swift_bridgeObjectRelease(v22).n128_f64[0]);

  v24 = sub_10001A630((uint64_t *)&unk_100839E80);
  v25 = swift_allocObject(v24, 96, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1006A3C40;
  strcpy((char *)(v25 + 32), "ckIdentifier");
  *(_BYTE *)(v25 + 45) = 0;
  *(_WORD *)(v25 + 46) = -5120;
  *(_QWORD *)(v25 + 88) = &type metadata for String;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = 0xD000000000000014;
  *(_QWORD *)(v25 + 72) = 0x80000001006A99D0;
  v26 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "setPropertiesToFetch:", v26, swift_bridgeObjectRelease(v25).n128_f64[0]);

  objc_msgSend(v14, "setFetchBatchSize:", a2);
  v27 = NSManagedObjectContext.fetch<A>(_:)(v14, v13);

  return v27;
}

id sub_10012B208@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "activityTypeRawValue");
  *a2 = (_WORD)result;
  return result;
}

id sub_10012B238(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setActivityTypeRawValue:", *a1);
}

uint64_t sub_10012B24C()
{
  id *v0;

  sub_10001C744((uint64_t)v0 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_10012B28C()
{
  void *v0;
  uint64_t ObjectType;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  _QWORD *v15;

  ObjectType = swift_getObjectType(v0);
  v2 = sub_10012B434();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = swift_allocObject(&unk_1007E5710, 24, 7);
  *(_QWORD *)(v4 + 16) = _swiftEmptyArrayStorage;
  v5 = objc_msgSend(v3, "length");
  v6 = (_QWORD *)swift_allocObject(&unk_1007E5738, 48, 7);
  v6[2] = v3;
  v6[3] = v0;
  v6[4] = v4;
  v6[5] = ObjectType;
  v14[4] = sub_100130E90;
  v15 = v6;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10012BE60;
  v14[3] = &unk_1007E5750;
  v7 = _Block_copy(v14);
  v8 = v15;
  v9 = v3;
  v10 = v0;
  swift_retain();
  swift_release(v8);
  objc_msgSend(v9, "rem_enumerateHashtagInRange:options:usingBlock:", 0, v5, 0, v7);
  _Block_release(v7);
  swift_beginAccess(v4 + 16, v14, 0, 0);
  v11 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain(v11);
  swift_release(v4);
  v12 = sub_10012BED8(v11, *(void **)&v10[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder]);

  swift_bridgeObjectRelease(v11);
  return v12;
}

id sub_10012B434()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  NSData v19;
  id v20;
  id v21;
  id v22;
  NSString v23;
  id v24;

  v1 = *(void **)(v0
                + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder);
  v2 = objc_msgSend(v1, "account");
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(v2, "remObjectID");

  if (!v4)
    return 0;
  v5 = objc_msgSend(v1, "remObjectID");
  if (!v5)
  {

    return 0;
  }
  v6 = v5;
  v7 = *(_BYTE *)(v0 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_field);
  v8 = objc_allocWithZone((Class)REMReplicaIDSource);
  v9 = v4;
  v10 = v6;
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v8, "initWithAccountID:objectID:property:", v9, v10, v11, swift_bridgeObjectRelease(0xED0000746E656D75).n128_f64[0]);

  if ((v7 & 1) == 0)
  {
    v13 = objc_msgSend(v1, "titleDocument");
    if (v13)
      goto LABEL_6;
LABEL_10:
    v21 = v10;
    v22 = v12;
    v19.super.isa = 0;
    goto LABEL_11;
  }
  v13 = objc_msgSend(v1, "notesDocument");
  if (!v13)
    goto LABEL_10;
LABEL_6:
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = v10;
  v18 = v12;
  v19.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A71B4(v14, v16);
LABEL_11:
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xED0000746E656D75);
  v20 = objc_msgSend((id)objc_opt_self(REMCRMergeableStringDocument), "documentFromSerializedData:replicaIDSource:forKey:ofObjectID:", v19.super.isa, v12, v23, v10);

  if (v20)
  {
    v24 = v20;
    v20 = objc_msgSend(v24, "attributedString");

  }
  return v20;
}

double sub_10012B6DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  char *v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71[4];
  uint64_t v72;
  uint64_t v73;

  v68 = a7;
  v12 = sub_10001A630(&qword_10083BE78);
  __chkstk_darwin(v12);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v69 = (uint64_t)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v64 - v19;
  v21 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  *(_QWORD *)&result = __chkstk_darwin(v21).n128_u64[0];
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v66 = v20;
    v67 = v16;
    v70 = a1;
    v25 = objc_msgSend(a5, "string");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    v29 = sub_100130AD0(v26, v28, a2, a3);
    v31 = v30;
    v33 = v32;
    v35 = v34;
    swift_bridgeObjectRelease(v28);
    if (!v35)
    {

      return result;
    }
    v37 = *(_QWORD *)(a6
                    + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName
                    + 8);
    v38 = v31;
    if (v37)
    {
      v65 = *(_QWORD *)(a6
                      + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName);
      v71[0] = v29;
      v71[1] = v31;
      v71[2] = v33;
      v71[3] = v35;
      static Locale.current.getter(v36);
      v39 = type metadata accessor for Locale(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v24, 0, 1, v39);
      v40 = sub_100130E9C();
      v41 = StringProtocol.foldedStringForWriting(locale:)(v24, &type metadata for Substring, v40);
      v43 = v42;
      sub_10000882C((uint64_t)v24, (uint64_t *)&unk_10083FBE0);
      if (v41 == v65 && v37 == v43)
      {
        swift_bridgeObjectRelease(v43);
      }
      else
      {
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v65, v37, 0);
        swift_bridgeObjectRelease(v43);
        if ((v44 & 1) == 0)
        {

          *(_QWORD *)&result = swift_bridgeObjectRelease(v35).n128_u64[0];
          return result;
        }
      }
    }
    v45 = v70;
    sub_10012BC48(v45, v29, v38, v33, v35, (uint64_t)v14);
    v46 = v67;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v14, 1, v15) == 1)
    {
      sub_10000882C((uint64_t)v14, &qword_10083BE78);
      if (qword_100836D48 != -1)
        swift_once(&qword_100836D48, sub_10012A0D8);
      v47 = type metadata accessor for Logger(0);
      sub_10001AAA8(v47, (uint64_t)qword_10083BB00);
      v48 = v45;
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = swift_slowAlloc(32, -1);
        v71[0] = v52;
        *(_DWORD *)v51 = 136446210;
        v53 = objc_msgSend(v48, "objectIdentifier");
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v56 = v55;

        v72 = sub_10001A820(v54, v56, v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);

        swift_bridgeObjectRelease(v56);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "#️⃣ RDSharedInlineTagAutoConvertHandler.Runner: REMTTHashtag objectIdentifier[%{public}s] does not represent a valid UUID", v51, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v57 = (unint64_t *)(v68 + 16);
      v58 = (uint64_t)v66;
      sub_1000B8680((uint64_t)v14, (uint64_t)v66, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
      v59 = v69;
      sub_100130DF4(v58, v69);
      swift_beginAccess(v57, v71, 33, 0);
      v60 = *v57;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v57);
      *v57 = v60;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v60 = sub_1002C91A0(0, *(_QWORD *)(v60 + 16) + 1, 1, v60);
        *v57 = v60;
      }
      v63 = *(_QWORD *)(v60 + 16);
      v62 = *(_QWORD *)(v60 + 24);
      if (v63 >= v62 >> 1)
      {
        v60 = sub_1002C91A0(v62 > 1, v63 + 1, 1, v60);
        *v57 = v60;
      }
      *(_QWORD *)(v60 + 16) = v63 + 1;
      sub_1000B8680(v59, v60+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v63, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
      swift_endAccess(v71);

      sub_10001C744(v58, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    }
  }
  return result;
}

uint64_t sub_10012BC48@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  id v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a5;
  v39 = a6;
  v35 = a3;
  v36 = a4;
  v34 = a2;
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  v37 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(a1, "objectIdentifier", v15);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  UUID.init(uuidString:)(v19, v21);
  v22 = swift_bridgeObjectRelease(v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48))(v9, 1, v10, v22) == 1)
  {
    swift_bridgeObjectRelease(v38);

    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
    v23 = 1;
    v24 = v39;
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v25(v13, v9, v10);
    v25(&v17[*(int *)(v14 + 24)], v13, v10);
    *(_QWORD *)v17 = a1;
    v26 = a1;
    v27 = v38;
    v29 = static String._fromSubstring(_:)(v34, v35, v36, v38, v28);
    v31 = v30;
    swift_bridgeObjectRelease(v27);

    *((_QWORD *)v17 + 1) = v29;
    *((_QWORD *)v17 + 2) = v31;
    v32 = v39;
    sub_1000B8680((uint64_t)v17, v39, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    v23 = 0;
    v24 = v32;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v24, v23, 1, v14);
}

void sub_10012BE60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void (*v10)(void *, uint64_t, uint64_t, uint64_t);
  id v11;

  v10 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  swift_retain(v9);
  v11 = a2;
  v10(a2, a3, a4, a5);
  swift_release(v9);

}

uint64_t sub_10012BED8(uint64_t a1, void *a2)
{
  uint64_t v2;
  Swift::Int *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  Swift::Int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  NSObject *v30;
  id v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  Class isa;
  NSString v46;
  id v47;
  NSObject *v48;
  NSString v49;
  uint64_t v50;
  NSObject *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  NSObject *v57;
  char *v58;
  NSObject *v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  Swift::Int v67;
  Swift::Int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::Int v73;
  id v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  NSObject *v90;
  uint64_t v91;
  id v92;
  void *v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  Swift::Int *v101;
  _QWORD *v102;
  uint64_t v103;
  unsigned __int8 i;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  id v112;
  void *v113;
  id v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  Swift::Int v136;
  char *v137;
  id v138;
  char *v139;
  int64_t v140;
  _QWORD *v141;
  NSObject *v142;
  char *v143;
  NSObject *v144;
  unint64_t v145;
  id v146;
  uint64_t v147;
  Swift::Int *v148;
  _BYTE v149[24];
  _QWORD *v150;
  Swift::Int *v151;
  unsigned __int8 v152;
  _QWORD *v153;
  uint64_t v154[3];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v137 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  v144 = *(NSObject **)(v9 - 8);
  v145 = v9;
  __chkstk_darwin(v9);
  v11 = ((char *)&v134 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v143 = (char *)&v134 - v14;
  v15 = objc_msgSend(a2, "account", v13);
  if (!v15)
    return 0xD000000000000010;
  v16 = v15;
  v138 = a2;
  v17 = objc_msgSend(v15, "remObjectID");

  v146 = v17;
  if (!v17)
    return 0xD000000000000010;
  v142 = objc_msgSend(v138, "remObjectID");
  if (!v142)
  {

    return 0x7265646E696D6572;
  }
  v136 = v7;
  v18 = sub_10012DE44();
  sub_10012D648(a1);
  v20 = v19;
  swift_bridgeObjectRelease(v18);
  v135 = 0;
  v134 = v6;
  v23 = v20[8];
  v139 = (char *)(v20 + 8);
  v24 = 1 << *((_BYTE *)v20 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & v23;
  v140 = (unint64_t)(v24 + 63) >> 6;
  swift_bridgeObjectRetain(v20);
  v27 = 0;
  v28 = (uint64_t)&_swiftEmptyDictionarySingleton;
  v29 = (_QWORD **)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag;
  v141 = v20;
  while (1)
  {
    if (v26)
    {
      v18 = v28;
      v33 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v147 = v27;
      v34 = v33 | (v27 << 6);
      goto LABEL_31;
    }
    v35 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    if (v35 >= v140)
      goto LABEL_37;
    v36 = *(_QWORD *)&v139[8 * v35];
    v37 = v27 + 1;
    if (!v36)
    {
      v37 = v27 + 2;
      if (v27 + 2 >= v140)
        goto LABEL_37;
      v36 = *(_QWORD *)&v139[8 * v37];
      if (!v36)
      {
        v37 = v27 + 3;
        if (v27 + 3 >= v140)
          goto LABEL_37;
        v36 = *(_QWORD *)&v139[8 * v37];
        if (!v36)
        {
          v37 = v27 + 4;
          if (v27 + 4 >= v140)
            goto LABEL_37;
          v36 = *(_QWORD *)&v139[8 * v37];
          if (!v36)
            break;
        }
      }
    }
LABEL_30:
    v18 = v28;
    v26 = (v36 - 1) & v36;
    v147 = v37;
    v34 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_31:
    v39 = (uint64_t)v143;
    sub_100130DF4(v20[7] + (unint64_t)v144[9].isa * v34, (uint64_t)v143);
    sub_1000B8680(v39, (uint64_t)v11, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    v40 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v41 = objc_msgSend((id)swift_getObjCClassFromMetadata(v40), "cdEntityName");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v43 = v42;

    v44 = objc_allocWithZone((Class)REMObjectID);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v46 = String._bridgeToObjectiveC()();
    v47 = objc_msgSend(v44, "initWithUUID:entityName:", isa, v46, swift_bridgeObjectRelease(v43).n128_f64[0]);

    v2 = (uint64_t)v11[2].isa;
    v20 = objc_allocWithZone((Class)REMHashtag);
    v48 = v47;
    v3 = (Swift::Int *)v146;
    v28 = v142;
    swift_bridgeObjectRetain(v2);
    v49 = String._bridgeToObjectiveC()();
    v50 = (uint64_t)objc_msgSend(v20, "initWithObjectID:accountID:reminderID:type:name:", v48, v3, v28, 1, v49, swift_bridgeObjectRelease(v2).n128_f64[0]);

    if ((v18 & 0xC000000000000001) != 0)
    {
      if (v18 < 0)
        v29 = (_QWORD **)v18;
      else
        v29 = (_QWORD **)(v18 & 0xFFFFFFFFFFFFFF8);
      v51 = v48;
      v52 = (id)v50;
      v53 = __CocoaDictionary.count.getter(v29);
      if (__OFADD__(v53, 1))
      {
        __break(1u);
LABEL_84:
        v26 = v147;
        v102 = (_QWORD *)sub_100364E8C(v147);
        for (i = v105 & 1; ; i = 1)
        {
          v150 = v102;
          v151 = (Swift::Int *)v103;
          v152 = i;
          if ((v50 & 0x8000000000000000) == 0)
            goto LABEL_88;
          __break(1u);
LABEL_87:
          v106 = v147;
          v29 = (_QWORD **)sub_10036456C(v20, v3, v2, v147);
          v108 = v107;
          v28 = v109;
          sub_1000E515C((uint64_t)v20, (uint64_t)v3, v2);
          v150 = v29;
          v151 = (Swift::Int *)v108;
          v26 = v106;
          v152 = v28 & 1;
          v18 = (Swift::Int)&selRef_isConcealed;
          v11 = v48;
          if (!--v50)
            break;
LABEL_88:
          while (v50)
          {
            v48 = v11;
            v20 = v150;
            v3 = v151;
            v2 = v152;
            sub_100364B90((uint64_t)v150, (uint64_t)v151, v152, v26);
            v111 = v110;
            v112 = objc_msgSend(v110, *(SEL *)(v18 + 3456));
            if (v112)
            {
              v113 = v112;
              v114 = objc_msgSend(v112, "description");

              v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
              v116 = v115;

            }
            else
            {

              v116 = 0xE300000000000000;
              v28 = 7104878;
            }
            v117 = v153;
            if ((swift_isUniquelyReferenced_nonNull_native(v153) & 1) == 0)
            {
              sub_1001C1B0C(0, v117[2] + 1, 1);
              v117 = v153;
            }
            v119 = v117[2];
            v118 = v117[3];
            if (v119 >= v118 >> 1)
            {
              sub_1001C1B0C(v118 > 1, v119 + 1, 1);
              v117 = v153;
            }
            v117[2] = v119 + 1;
            v120 = &v117[2 * v119];
            v120[4] = v28;
            v120[5] = v116;
            if (!v145)
              goto LABEL_87;
            if ((v2 & 1) == 0)
            {
              result = swift_release(v147);
              __break(1u);
              return result;
            }
            v11 = v48;
            v121 = __CocoaSet.Index.handleBitPattern.getter(v20, v3);
            v18 = 0x100828000;
            if (v121)
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v121);
            else
              isUniquelyReferenced_nonNull_native = 1;
            v123 = sub_10001A630(&qword_10083BE70);
            v29 = (_QWORD **)Set.Index._asCocoa.modify(&v148, v123);
            v125 = v124;
            v126 = isUniquelyReferenced_nonNull_native;
            v26 = v147;
            __CocoaSet.formIndex(after:isUnique:)(v125, v126, v147);
            ((void (*)(Swift::Int **, _QWORD))v29)(&v148, 0);
            if (!--v50)
              goto LABEL_102;
          }
LABEL_108:
          __break(1u);
LABEL_109:
          swift_once(&qword_100836D48, sub_10012A0D8);
LABEL_68:
          v87 = sub_10001AAA8(v26, (uint64_t)qword_10083BB00);
          (*(void (**)(_QWORD **, uint64_t, uint64_t))(v18 + 16))(v29, v87, v26);
          v88 = v147;
          swift_retain_n(v147);
          v89 = v138;
          v11 = Logger.logObject.getter(v89);
          LODWORD(v141) = static os_log_type_t.fault.getter();
          if (!os_log_type_enabled(v11, (os_log_type_t)v141))
          {

            swift_release_n(v88);
            (*(void (**)(_QWORD **, uint64_t))(v18 + 8))(v29, v26);
            goto LABEL_104;
          }
          v90 = swift_slowAlloc(32, -1);
          v91 = swift_slowAlloc(64, -1);
          v154[0] = v91;
          v142 = v90;
          LODWORD(v90->isa) = 136446722;
          v92 = objc_msgSend(v89, "remObjectID");
          v140 = v91;
          if (v92)
          {
            v93 = v92;
            v94 = objc_msgSend(v92, "description");

            v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
            v97 = v96;

          }
          else
          {
            v97 = 0xE300000000000000;
            v95 = 7104878;
          }
          v98 = v142;
          v28 = (uint64_t)&v142->isa + 4;
          v148 = (Swift::Int *)sub_10001A820(v95, v97, v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149);

          swift_bridgeObjectRelease(v97);
          WORD2(v98[1].isa) = 2048;
          v99 = v147;
          if (v145)
            v100 = __CocoaSet.count.getter(v147);
          else
            v100 = *(_QWORD *)(v147 + 16);
          v18 = 0x100828000;
          swift_release(v99);
          v48 = v142;
          v148 = (Swift::Int *)v100;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149);
          swift_release(v99);
          HIWORD(v48[2].isa) = 2082;
          if (v145)
            v50 = __CocoaSet.count.getter(v99);
          else
            v50 = *(_QWORD *)(v99 + 16);
          v101 = _swiftEmptyArrayStorage;
          if (!v50)
            goto LABEL_103;
          v153 = _swiftEmptyArrayStorage;
          v29 = &v153;
          sub_1001C1B0C(0, v50 & ~(v50 >> 63), 0);
          if (!v145)
            goto LABEL_84;
          v26 = v147;
          v102 = (_QWORD *)__CocoaSet.startIndex.getter(v147);
        }
LABEL_102:
        sub_1000E515C((uint64_t)v150, (uint64_t)v151, v152);
        v101 = v153;
LABEL_103:
        v127 = (uint8_t *)v142;
        v148 = v101;
        v128 = sub_10001A630((uint64_t *)&unk_10083AE10);
        v129 = sub_1000A5F84((unint64_t *)&qword_10083B050, (uint64_t *)&unk_10083AE10, (uint64_t)&protocol conformance descriptor for [A]);
        v130 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v128, v129);
        v132 = v131;
        swift_bridgeObjectRelease(v101);
        v148 = (Swift::Int *)sub_10001A820(v130, v132, v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149);
        swift_release_n(v147);
        swift_bridgeObjectRelease(v132);
        _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v141, "#️⃣ RDSharedInlineTagAutoConvertHandler.Runner: Reminder[%{public}s] is missing %ld HashtagLabels[%{public}s]", v127, 0x20u);
        v133 = v140;
        swift_arrayDestroy(v140, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v133, -1, -1);
        swift_slowDealloc(v127, -1, -1);

        (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v134);
        v28 = (uint64_t)v146;
        goto LABEL_104;
      }
      v18 = sub_1001922C8((uint64_t)v29, v53 + 1);
    }
    else
    {
      v30 = v48;
      v31 = (id)v50;
    }
    v32 = swift_isUniquelyReferenced_nonNull_native(v18);
    v148 = (Swift::Int *)v18;
    sub_10028C894(v50, v48, v32);
    v28 = (uint64_t)v148;

    swift_bridgeObjectRelease(0x8000000000000000);
    v29 = (_QWORD **)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag;
    sub_10001C744((uint64_t)v11, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    v20 = v141;
    v27 = v147;
  }
  v38 = v27 + 5;
  if (v27 + 5 < v140)
  {
    v36 = *(_QWORD *)&v139[8 * v38];
    if (!v36)
    {
      while (1)
      {
        v37 = v38 + 1;
        if (__OFADD__(v38, 1))
          break;
        if (v37 >= v140)
          goto LABEL_37;
        v36 = *(_QWORD *)&v139[8 * v37];
        ++v38;
        if (v36)
          goto LABEL_30;
      }
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
    v37 = v27 + 5;
    goto LABEL_30;
  }
LABEL_37:
  swift_release(v20);
  v54 = type metadata accessor for REMHashtagCDIngestor();
  v55 = swift_allocObject(v54, 32, 7);
  v56 = v146;
  v57 = v142;
  *(_QWORD *)(v55 + 16) = v146;
  *(_QWORD *)(v55 + 24) = v57;
  v58 = (char *)v56;
  v59 = v57;
  swift_bridgeObjectRetain(v28);
  v21 = v135;
  sub_10012CD2C(v60, v55);
  if (v21)
  {
    swift_release(v55);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v20);

    swift_bridgeObjectRelease(v28);
  }
  else
  {
    swift_bridgeObjectRelease(v28);
    v61 = sub_1001E95AC((uint64_t)v20);
    v144 = v59;
    v62 = (unint64_t)v61;
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRetain(v28);
    v64 = sub_1001E9598(v63);
    v146 = (id)v28;
    v65 = (uint64_t)v64;
    swift_bridgeObjectRelease(v146);
    sub_10012CF98(v62, v65);
    swift_release(v55);
    swift_release(v62);
    v66 = v65;
    v28 = (uint64_t)v146;
    swift_release(v66);
    v67 = sub_10012DE44();
    v143 = v58;
    if ((v67 & 0xC000000000000001) != 0)
    {
      v68 = (Swift::Int *)&_swiftEmptySetSingleton;
      v148 = (Swift::Int *)&_swiftEmptySetSingleton;
      if (v67 >= 0)
        v67 &= 0xFFFFFFFFFFFFFF8uLL;
      v69 = __CocoaSet.makeIterator()(v67);
      v70 = __CocoaSet.Iterator.next()(v69);
      if (v70)
      {
        v71 = v70;
        v72 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
        v26 = (uint64_t)&type metadata for Swift.AnyObject + 8;
        v18 = (Swift::Int)&selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
        v28 = -1;
        v2 = 1;
        do
        {
          v154[0] = v71;
          swift_dynamicCast(&v150, v154, (char *)&type metadata for Swift.AnyObject + 8, v72, 7);
          v74 = objc_msgSend(v150, "hashtagLabel");

          v20 = v150;
          if (v74)
          {

          }
          else
          {
            v3 = v148;
            v75 = v148[2];
            if (v148[3] <= v75)
            {
              sub_1002DEAC0(v75 + 1);
              v3 = v148;
            }
            v29 = (_QWORD **)v20;
            v73 = NSObject._rawHashValue(seed:)(v3[5]);
            v76 = (char *)(v3 + 7);
            v77 = -1 << *((_BYTE *)v3 + 32);
            v78 = v73 & ~v77;
            v79 = v78 >> 6;
            if (((-1 << v78) & ~v3[(v78 >> 6) + 7]) != 0)
            {
              v80 = __clz(__rbit64((-1 << v78) & ~v3[(v78 >> 6) + 7])) | v78 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              v81 = 0;
              v82 = (unint64_t)(63 - v77) >> 6;
              do
              {
                if (++v79 == v82 && (v81 & 1) != 0)
                  goto LABEL_106;
                v83 = v79 == v82;
                if (v79 == v82)
                  v79 = 0;
                v81 |= v83;
                v84 = *(_QWORD *)&v76[8 * v79];
              }
              while (v84 == -1);
              v80 = __clz(__rbit64(~v84)) + (v79 << 6);
            }
            *(_QWORD *)&v76[(v80 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v80;
            *(_QWORD *)(v3[6] + 8 * v80) = v20;
            ++v3[2];
          }
          v71 = __CocoaSet.Iterator.next()(v73);
        }
        while (v71);
        v68 = v148;
        v28 = (uint64_t)v146;
      }
      swift_release(v69);
      v26 = v134;
      v18 = v136;
      v29 = (_QWORD **)v137;
      v85 = (uint64_t)v68;
    }
    else
    {
      v85 = sub_10012F89C(v67, (uint64_t (*)(char *, unint64_t, uint64_t))sub_10012FB9C);
      v26 = v134;
      v18 = v136;
      v29 = (_QWORD **)v137;
    }
    v145 = v85 & 0xC000000000000001;
    v147 = v85;
    if ((v85 & 0xC000000000000001) != 0)
      v86 = __CocoaSet.count.getter(v85);
    else
      v86 = *(_QWORD *)(v85 + 16);
    if (v86)
    {
      if (qword_100836D48 != -1)
        goto LABEL_109;
      goto LABEL_68;
    }
    swift_release(v147);

LABEL_104:
    swift_bridgeObjectRelease(v28);
    return 0;
  }
  return v21;
}

void sub_10012CD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD v24[4];
  _QWORD v25[2];

  v4 = v2;
  v24[0] = &off_1007DE308;
  v7 = sub_10001A630(&qword_10083BE58);
  v8 = sub_1000A5F84(&qword_10083BE60, &qword_10083BE58, (uint64_t)&protocol conformance descriptor for [A]);
  v9 = Sequence.mapToSet<A>(_:)(sub_10012CF1C, 0, v7, &type metadata for String, v8, &protocol witness table for String);
  v10 = v9;
  if ((a1 & 0xC000000000000001) == 0)
  {
    sub_1001306BC(a1, v9);
    v13 = v14;
    goto LABEL_8;
  }
  if (a1 < 0)
    v11 = a1;
  else
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v12 = sub_10013086C(v11, v10);
  if (!v3)
  {
    v13 = v12;
    swift_bridgeObjectRelease(v10);
LABEL_8:
    swift_bridgeObjectRelease(v10);
    v15 = *(_QWORD *)(v4
                    + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_persistentStoreLookup);
    v16 = *(void **)(v4
                   + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext);
    v24[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(RDSharedInlineTagAutoConvertAuthor);
    v24[1] = v17;
    v18 = type metadata accessor for CDIngestionCoordinator();
    v24[3] = 0;
    v25[0] = 0;
    v24[2] = 0;
    *(_QWORD *)((char *)v25 + 6) = 0;
    v19 = swift_allocObject(v18, 152, 7);
    swift_getObjectType(v15);
    swift_unknownObjectRetain(v15);
    sub_10033289C(v13, v15, v16, (uint64_t)v24, 0, 1, v19);
    v21 = v20;
    swift_bridgeObjectRetain(a1);
    v23 = sub_1001E9598(v22);
    swift_bridgeObjectRelease(a1);
    sub_1005D2C5C((uint64_t)v23, a2);
    swift_release(v23);
    sub_100331A50();
    swift_release(v21);
    return;
  }
  swift_bridgeObjectRelease(v10);
  __break(1u);
}

uint64_t sub_10012CF1C(unsigned __int8 *a1)
{
  return ((uint64_t (*)(void))((char *)sub_10012CF4C + 4 * byte_1006A97F0[*a1]))();
}

void sub_10012CF4C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "creationDate");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10012CF70(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

void sub_10012CF84(_QWORD *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

void sub_10012CF98(unint64_t a1, uint64_t a2)
{
  char **v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  unint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char *v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  char *v55;
  BOOL v56;
  char *v57;
  _QWORD *v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  unint64_t v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  NSObject *v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char **v87;

  v4 = v3;
  v5 = v2;
  v8 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v8);
  v79 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a2 >> 62)
    goto LABEL_70;
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v11 = _swiftEmptyArrayStorage;
  if (!v10)
  {
LABEL_13:
    a2 = (uint64_t)sub_1005CF570((uint64_t)v11, 0, 1, 0, 0);
    swift_bridgeObjectRelease(v11);
    if (v4)
      return;
    v85 = (_QWORD *)a1;
    KeyPath = swift_getKeyPath(&unk_1006A99A8);
    v20 = swift_getKeyPath(&unk_1006A99D8);
    v21 = sub_10001A630(&qword_10083BE20);
    v22 = sub_1000A5F84((unint64_t *)&qword_10083BE28, &qword_10083BE20, (uint64_t)&protocol conformance descriptor for [A]);
    v83 = Sequence.compactIndexBy<A, B>(key:value:)(KeyPath, v20, v21, v22, &protocol witness table for String);
    swift_release(KeyPath);
    swift_release(v20);
    v87 = (char **)&_swiftEmptyDictionarySingleton;
    if (!((unint64_t)a2 >> 62))
    {
      v23 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
      v5 = (char **)&_swiftEmptyDictionarySingleton;
      if (v23)
      {
        v82 = a2 & 0xC000000000000001;
        a1 = 4;
        v78 = xmmword_1006A7330;
        v80 = v23;
        v81 = a2;
        do
        {
          v29 = a1 - 4;
          if (v82)
          {
            v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1 - 4, a2);
            v31 = a1 - 3;
            if (__OFADD__(v29, 1))
              goto LABEL_65;
          }
          else
          {
            v30 = *(id *)(a2 + 8 * a1);
            v31 = a1 - 3;
            if (__OFADD__(v29, 1))
              goto LABEL_65;
          }
          v84 = (unint64_t)v30;
          v32 = objc_msgSend(v30, "name", v78);
          if (v32)
          {
            v33 = v32;
            v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
            v36 = v35;

            v85 = (_QWORD *)v34;
            v86 = v36;
            v37 = (uint64_t)v79;
            static Locale.current.getter(v38);
            v39 = type metadata accessor for Locale(0);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v37, 0, 1, v39);
            v40 = sub_1000E525C();
            a2 = StringProtocol.foldedStringForWriting(locale:)(v37, &type metadata for String, v40);
            v42 = v41;
            sub_10000882C(v37, (uint64_t *)&unk_10083FBE0);
            swift_bridgeObjectRelease(v86);
          }
          else
          {
            a2 = 0;
            v42 = 0xE000000000000000;
          }
          v44 = sub_10001A6DC(a2, v42);
          v45 = v5[2];
          v46 = (v43 & 1) == 0;
          v47 = (uint64_t)&v45[v46];
          if (__OFADD__(v45, v46))
            goto LABEL_66;
          v48 = v43;
          if ((uint64_t)v5[3] < v47)
          {
            sub_1002CF66C(v47, 1);
            v5 = v87;
            v49 = sub_10001A6DC(a2, v42);
            if ((v48 & 1) != (v50 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              __break(1u);
              return;
            }
            v44 = v49;
          }
          if ((v48 & 1) != 0)
          {
            swift_bridgeObjectRelease(v42);
            v24 = &v5[7][8 * v44];
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
            v27 = *(_QWORD *)((*(_QWORD *)v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v26 = *(_QWORD *)((*(_QWORD *)v24 & 0xFFFFFFFFFFFFFF8) + 0x18);
            a2 = v81;
            if (v27 >= v26 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1);
            v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v84);
            specialized Array._endMutation()(v28);
          }
          else
          {
            v51 = sub_10001A630((uint64_t *)&unk_10083AD90);
            v52 = swift_allocObject(v51, 40, 7);
            *(_OWORD *)(v52 + 16) = v78;
            *(_QWORD *)(v52 + 32) = v84;
            v85 = (_QWORD *)v52;
            specialized Array._endMutation()(v52);
            v53 = v85;
            v5[(v44 >> 6) + 8] = (char *)((unint64_t)v5[(v44 >> 6) + 8] | (1 << v44));
            v54 = (uint64_t *)&v5[6][16 * v44];
            *v54 = a2;
            v54[1] = v42;
            *(_QWORD *)&v5[7][8 * v44] = v53;
            v55 = v5[2];
            v56 = __OFADD__(v55, 1);
            v57 = v55 + 1;
            if (v56)
              goto LABEL_68;
            v5[2] = v57;
            a2 = v81;
          }
          ++a1;
        }
        while (v31 != v80);
      }
      swift_bridgeObjectRelease(a2);
      v59 = 0;
      a1 = v83 + 64;
      v60 = 1 << *(_BYTE *)(v83 + 32);
      v61 = -1;
      if (v60 < 64)
        v61 = ~(-1 << v60);
      v62 = v61 & *(_QWORD *)(v83 + 64);
      v63 = (unint64_t)(v60 + 63) >> 6;
      while (1)
      {
        while (v62)
        {
          v64 = __clz(__rbit64(v62));
          v62 &= v62 - 1;
          v65 = v64 | (v59 << 6);
          if (v5[2])
            goto LABEL_59;
        }
        v66 = v59 + 1;
        if (__OFADD__(v59, 1))
          goto LABEL_67;
        if (v66 >= v63)
        {
LABEL_61:
          swift_release(v5);
          v58 = (_QWORD *)v83;
          goto LABEL_62;
        }
        v67 = *(_QWORD *)(a1 + 8 * v66);
        ++v59;
        if (!v67)
        {
          v59 = v66 + 1;
          if (v66 + 1 >= v63)
            goto LABEL_61;
          v67 = *(_QWORD *)(a1 + 8 * v59);
          if (!v67)
          {
            v59 = v66 + 2;
            if (v66 + 2 >= v63)
              goto LABEL_61;
            v67 = *(_QWORD *)(a1 + 8 * v59);
            if (!v67)
            {
              v68 = v66 + 3;
              if (v68 >= v63)
                goto LABEL_61;
              v67 = *(_QWORD *)(a1 + 8 * v68);
              if (!v67)
              {
                while (1)
                {
                  v59 = v68 + 1;
                  if (__OFADD__(v68, 1))
                    break;
                  if (v59 >= v63)
                    goto LABEL_61;
                  v67 = *(_QWORD *)(a1 + 8 * v59);
                  ++v68;
                  if (v67)
                    goto LABEL_58;
                }
LABEL_69:
                __break(1u);
LABEL_70:
                if (a2 < 0)
                  v76 = a2;
                else
                  v76 = a2 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(a2);
                v10 = _CocoaArrayWrapper.endIndex.getter(v76);
                swift_bridgeObjectRelease(a2);
                goto LABEL_3;
              }
              v59 = v68;
            }
          }
        }
LABEL_58:
        v62 = (v67 - 1) & v67;
        v65 = __clz(__rbit64(v67)) + (v59 << 6);
        if (v5[2])
        {
LABEL_59:
          v69 = (uint64_t *)(*(_QWORD *)(v83 + 48) + 16 * v65);
          v70 = *(void **)(*(_QWORD *)(v83 + 56) + 8 * v65);
          v71 = *v69;
          a2 = v69[1];
          swift_bridgeObjectRetain(a2);
          v72 = v70;
          v73 = sub_10001A6DC(v71, a2);
          if ((v74 & 1) != 0)
          {
            v75 = *(_QWORD *)&v5[7][8 * v73];
            swift_bridgeObjectRetain(v75);
            swift_bridgeObjectRelease(a2);
            sub_100184C74(v72, v75, 0);
            swift_bridgeObjectRelease(v75);

          }
          else
          {

            swift_bridgeObjectRelease(a2);
          }
        }
      }
    }
LABEL_75:
    if (a2 < 0)
      v77 = a2;
    else
      v77 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v23 = _CocoaArrayWrapper.endIndex.getter(v77);
    swift_bridgeObjectRelease(a2);
    goto LABEL_16;
  }
  v85 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v10);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_75;
  }
  v83 = (uint64_t)v5;
  v84 = a1;
  v12 = 0;
  a1 = a2 & 0xC000000000000001;
  v5 = &selRef_isConcealed;
  while (1)
  {
    if (v10 == v12)
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    v13 = a1 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a2) : *(id *)(a2 + 8 * v12 + 32);
    v14 = v13;
    v15 = sub_1005CDB44(objc_msgSend(v13, "remObjectID", v78));

    if (v4)
      break;
    ++v12;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    v17 = v85[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
    v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
    specialized ContiguousArray._endMutation()(v18);
    if (v10 == v12)
    {
      a1 = v84;
      v11 = v85;
      goto LABEL_13;
    }
  }
  v58 = v85;
LABEL_62:
  swift_release(v58);
}

void sub_10012D648(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v3 = v1;
  v5 = sub_10001A630(&qword_10083BDF8);
  v6 = sub_1000A5F84(&qword_10083BE00, &qword_10083BDF8, (uint64_t)&protocol conformance descriptor for Set<A>);
  v7 = Sequence.compactMapToSet<A>(_:)(sub_10012D954, 0, v5, &type metadata for String, v6, &protocol witness table for String);
  swift_bridgeObjectRetain(a1);
  v9 = sub_10012FE00(v8, v7);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v7);
  v26 = v9;
  v10 = sub_10001A630(&qword_10083BE08);
  v11 = sub_1000A5F84((unint64_t *)&unk_10083BE10, &qword_10083BE08, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = Sequence.mapToSet<A>(_:)(sub_10012DAFC, 0, v10, &type metadata for String, v11, &protocol witness table for String);
  v13 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext);
  v14 = sub_10001A630((uint64_t *)&unk_100839E80);
  v15 = swift_allocObject(v14, 64, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  strcpy((char *)(v15 + 32), "canonicalName");
  *(_WORD *)(v15 + 46) = -4864;
  v16 = sub_10037E67C(v12, v13, (Class)v15, 0);
  if (v2)
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v17 = v16;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v15);
    v26 = (_QWORD *)v17;
    KeyPath = swift_getKeyPath(&unk_1006A99A8);
    v19 = swift_getKeyPath(&unk_1006A99D8);
    v20 = sub_10001A630(&qword_10083BE20);
    v21 = sub_1000A5F84((unint64_t *)&qword_10083BE28, &qword_10083BE20, (uint64_t)&protocol conformance descriptor for [A]);
    v22 = Sequence.compactIndexBy<A, B>(key:value:)(KeyPath, v19, v20, v21, &protocol witness table for String);
    swift_bridgeObjectRelease(v17);
    swift_release(KeyPath);
    swift_release(v19);
    swift_bridgeObjectRetain(v22);
    v23 = sub_10012FFDC((uint64_t)v9, v22);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease_n(v22, 2);
    v24 = v23[2];
    if (v24)
    {
      sub_10001A630((uint64_t *)&unk_10083BE30);
      v25 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v24);
    }
    else
    {
      v25 = &_swiftEmptyDictionarySingleton;
    }
    v26 = v25;
    sub_1001302D0((uint64_t)v23, 1, &v26);
    swift_bridgeObjectRelease(v23);
  }
}

uint64_t sub_10012D954@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (char *)&v23 - v13;
  v15 = objc_msgSend(*a1, "identifier", v12);
  if (v15)
  {
    v16 = v15;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, v17, 1, v4);
  sub_1000A5CA8((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
  {
    result = sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);
    v19 = 0;
    v20 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v14, v4);
    v21 = sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);
    v19 = UUID.uuidString.getter(v21);
    v20 = v22;
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *a2 = v19;
  a2[1] = v20;
  return result;
}

void sub_10012DAFC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = v7;
  swift_bridgeObjectRetain(v7);
  static Locale.current.getter(v8);
  v9 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 0, 1, v9);
  v10 = sub_1000E525C();
  v11 = StringProtocol.foldedStringForWriting(locale:)(v6, &type metadata for String, v10);
  v13 = v12;
  sub_10000882C((uint64_t)v6, (uint64_t *)&unk_10083FBE0);
  swift_bridgeObjectRelease(v15);
  *a2 = v11;
  a2[1] = v13;
}

BOOL sub_10012DBEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void sub_10012DC04(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DE3A8;
}

Swift::Int sub_10012DC14()
{
  id *v0;
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  v1 = v0;
  Hasher.init(_seed:)(v8, 0);
  v2 = *v0;
  NSObject.hash(into:)(v8);

  v3 = v1[1];
  v4 = v1[2];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v5, v6);
  return Hasher._finalize()();
}

uint64_t sub_10012DCD4(uint64_t a1)
{
  id *v1;
  id *v2;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v4 = *v1;
  NSObject.hash(into:)(a1);

  v5 = v2[1];
  v6 = v2[2];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
}

Swift::Int sub_10012DD84(uint64_t a1)
{
  id *v1;
  id *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, a1);
  v3 = *v1;
  NSObject.hash(into:)(v9);

  v4 = v2[1];
  v5 = v2[2];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v9, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = type metadata accessor for UUID(0);
  v7 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

Swift::Int sub_10012DE44()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  unsigned __int8 v11;
  id v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;

  v1 = objc_msgSend(*(id *)(v0+ OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder), "hashtags");
  v2 = &_swiftEmptySetSingleton;
  if (v1)
  {
    v3 = v1;
    v4 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v5 = sub_1000EC524((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v3, v4, v5);

    if ((v6 & 0xC000000000000001) != 0)
    {
      v26 = &_swiftEmptySetSingleton;
      if (v6 < 0)
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFFFFFFFF8;
      v8 = __CocoaSet.makeIterator()(v7);
      v9 = __CocoaSet.Iterator.next()(v8);
      if (v9)
      {
        do
        {
          v24 = v9;
          swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v4, 7);
          v11 = objc_msgSend(v25, "isConcealed");
          v12 = v25;
          if ((v11 & 1) != 0)
          {

          }
          else
          {
            v13 = v26;
            v14 = v26[2];
            if (v26[3] <= v14)
            {
              sub_1002DEAC0(v14 + 1);
              v13 = v26;
            }
            result = NSObject._rawHashValue(seed:)(v13[5]);
            v15 = v13 + 7;
            v16 = -1 << *((_BYTE *)v13 + 32);
            v17 = result & ~v16;
            v18 = v17 >> 6;
            if (((-1 << v17) & ~v13[(v17 >> 6) + 7]) != 0)
            {
              v19 = __clz(__rbit64((-1 << v17) & ~v13[(v17 >> 6) + 7])) | v17 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              v20 = 0;
              v21 = (unint64_t)(63 - v16) >> 6;
              do
              {
                if (++v18 == v21 && (v20 & 1) != 0)
                {
                  __break(1u);
                  return result;
                }
                v22 = v18 == v21;
                if (v18 == v21)
                  v18 = 0;
                v20 |= v22;
                v23 = v15[v18];
              }
              while (v23 == -1);
              v19 = __clz(__rbit64(~v23)) + (v18 << 6);
            }
            *(_QWORD *)((char *)v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
            *(_QWORD *)(v13[6] + 8 * v19) = v12;
            ++v13[2];
          }
          v9 = __CocoaSet.Iterator.next()(result);
        }
        while (v9);
        v2 = v26;
      }
      swift_release(v8);
    }
    else
    {
      return sub_10012F89C(v6, (uint64_t (*)(char *, unint64_t, uint64_t))sub_10012FA04);
    }
  }
  return (Swift::Int)v2;
}

id sub_10012E0D0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10012E15C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v9);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  v11 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(0);
  sub_100130F48((uint64_t)v8, v3 + *(int *)(v11 + 40));
  v12 = sub_10012E3F0();
  v14 = v13;
  if (qword_100836D48 != -1)
    swift_once(&qword_100836D48, sub_10012A0D8);
  v15 = type metadata accessor for Logger(0);
  sub_10001AAA8(v15, (uint64_t)qword_10083BB00);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_bridgeObjectRetain(v14);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v22 = v20;
    *(_DWORD *)v19 = 136315394;
    swift_bridgeObjectRetain(a2);
    v21 = sub_10001A820(a1, a2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain(v14);
    v21 = sub_10001A820(v12, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease_n(v14, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  sub_10012E640();
}

unint64_t sub_10012E3F0()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  _QWORD v22[3];
  _BYTE v23[8];
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v25 = 0;
  v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v1._countAndFlagsBits = 0xD000000000000020;
  v1._object = (void *)0x80000001006F95D0;
  String.append(_:)(v1);
  v24 = v0[6];
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0xD00000000000001FLL;
  v4._object = (void *)0x80000001006F9600;
  String.append(_:)(v4);
  v24 = v0[7];
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  v7._countAndFlagsBits = 8236;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease(0xE000000000000000);
  v25 = 0xD000000000000013;
  v26 = 0x80000001006F9620;
  v24 = v0[8];
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  v10._countAndFlagsBits = 0x20726F727265202CLL;
  v10._object = (void *)0xEA0000000000203DLL;
  String.append(_:)(v10);
  if (*v0)
  {
    swift_getErrorValue(*v0, v23, v22);
    v11 = Error.localizedDescription.getter(v22[1], v22[2]);
    v13 = v12;
  }
  else
  {
    v13 = 0xE600000000000000;
    v11 = 0x3E656E6F6E3CLL;
  }
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0x697461727564202CLL;
  v15._object = (void *)0xED0000203D206E6FLL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = sub_10012E7F8();
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18 = v25;
  v19 = (void *)v26;
  v25 = 0;
  v26 = 0xE000000000000000;
  swift_bridgeObjectRetain(0xE000000000000000);
  v20._countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v19);
  return v25;
}

void sub_10012E640()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  double v15;
  _QWORD v16[2];

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0[4];
  v10 = v0[5];
  v16[1] = sub_10000A388(v0 + 1, v9);
  v11 = sub_10012E9B8();
  v12 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(0);
  sub_100008868((uint64_t)v1 + *(int *)(v12 + 40), (uint64_t)v4, (uint64_t *)&unk_1008380D0);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (v13 == 1)
  {
    sub_10000882C((uint64_t)v4, (uint64_t *)&unk_1008380D0);
    v14 = 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v15 = Date.distance(to:)(v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v15;
  }
  dispatch thunk of AnalyticsType.postEvent(_:payload:duration:error:performAutoBugCaptureOnError:)(0xD00000000000002FLL, 0x80000001006F9560, v11, *(_QWORD *)&v14, v13 == 1, *v1, 1, v9, v10);
  swift_bridgeObjectRelease(v11);
}

uint64_t sub_10012E7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(0);
  sub_100008868(v0 + *(int *)(v8 + 40), (uint64_t)v3, (uint64_t *)&unk_1008380D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10000882C((uint64_t)v3, (uint64_t *)&unk_1008380D0);
    return 0x6E776F6E6B6E753CLL;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    v10 = Date.distance(to:)(v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v11 = sub_10001A630((uint64_t *)&unk_10083A270);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v12 + 56) = &type metadata for Double;
    *(_QWORD *)(v12 + 64) = &protocol witness table for Double;
    *(double *)(v12 + 32) = v10;
    v9 = String.init(format:arguments:)(0x7366332E3025, 0xE600000000000000, v12);
    swift_bridgeObjectRelease(v12);
  }
  return v9;
}

unint64_t sub_10012E9B8()
{
  uint64_t v0;
  uint64_t inited;
  _BYTE v3[104];

  v0 = sub_10001A630((uint64_t *)&unk_10083A260);
  inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C20;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x80000001006F9590;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0xD000000000000018;
  *(_QWORD *)(inited + 64) = 0x80000001006F95B0;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0x7367617468736168;
  *(_QWORD *)(inited + 88) = 0xEF64657461657243;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  return sub_1002AF09C(inited);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler()
{
  return objc_opt_self(_TtC7remindd40RDSharedInlineTagAutoConvertStoreHandler);
}

uint64_t sub_10012EAA8()
{
  return type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Batcher(0);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Batcher(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083BBF8, (uint64_t)&nominal type descriptor for RDSharedInlineTagAutoConvertStoreHandler.Batcher);
}

uint64_t sub_10012EAC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083BD70, (uint64_t)&nominal type descriptor for RDSharedInlineTagAutoConvertStoreHandler.Metrics);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter()
{
  return objc_opt_self(_TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter);
}

uint64_t getEnumTagSinglePayload for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.FieldToHandle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.FieldToHandle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10012EC5C + 4 * byte_1006A97F9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10012EC90 + 4 * byte_1006A97F4[v4]))();
}

uint64_t sub_10012EC90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012EC98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012ECA0);
  return result;
}

uint64_t sub_10012ECAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012ECB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10012ECB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012ECC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10012ECCC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.FieldToHandle()
{
  return &type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.FieldToHandle;
}

_QWORD *sub_10012ECE8(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  __int128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    v3 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    swift_errorRetain(*a2);
    *v3 = v5;
    v8 = *((_OWORD *)a2 + 2);
    *((_OWORD *)v3 + 2) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(v3 + 1), (uint64_t)(a2 + 1));
    *((_OWORD *)v3 + 3) = *((_OWORD *)a2 + 3);
    v3[8] = a2[8];
    v9 = *(int *)(a3 + 36);
    v10 = (char *)v3 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v14(v10, v11, v12);
    v15 = *(int *)(a3 + 40);
    v16 = (char *)v3 + v15;
    v17 = (char *)a2 + v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
    {
      v18 = sub_10001A630((uint64_t *)&unk_1008380D0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v14(v16, (uint64_t)v17, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
    }
  }
  return v3;
}

uint64_t sub_10012EE34(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  void (*v10)(char *, uint64_t);

  v4 = a1 + 1;
  swift_errorRelease(*a1);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v4);
  v5 = (char *)a1 + *(int *)(a2 + 36);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v10 = *(void (**)(char *, uint64_t))(v7 + 8);
  v10(v5, v6);
  v8 = (char *)a1 + *(int *)(a2 + 40);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v10)(v8, v6);
  return result;
}

uint64_t sub_10012EEF0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void *, const void *, uint64_t);
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  swift_errorRetain(*a2);
  *(_QWORD *)a1 = v6;
  v7 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = a2[8];
  v8 = *(int *)(a3 + 36);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(void *, const void *, uint64_t))(v12 + 16);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 40);
  v15 = (void *)(a1 + v14);
  v16 = (char *)a2 + v14;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
  {
    v17 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  return a1;
}

uint64_t *sub_10012F010(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  v6 = *a1;
  v7 = *a2;
  swift_errorRetain(*a2);
  *a1 = v7;
  swift_errorRelease(v6);
  sub_10012F174(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v8 = *(int *)(a3 + 36);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 24);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 40);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v9) = v17((char *)a1 + v14, 1, v11);
  v18 = v17(v16, 1, v11);
  if (!(_DWORD)v9)
  {
    if (!v18)
    {
      v13(v15, v16, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  return a1;
}

_QWORD *sub_10012F174(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t sub_10012F2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(int *)(a3 + 36);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 48) = v6;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 40);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
  {
    v16 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  return a1;
}

uint64_t *sub_10012F3EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(const void *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;

  v6 = *a1;
  *a1 = *a2;
  swift_errorRelease(v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  a1[8] = a2[8];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 40);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v16((char *)a1 + v13, 1, v10);
  v17 = v16(v15, 1, v10);
  if (!(_DWORD)v8)
  {
    if (!v17)
    {
      v12(v14, v15, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  return a1;
}

uint64_t sub_10012F550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012F55C);
}

uint64_t sub_10012F55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10012F600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012F60C);
}

uint64_t sub_10012F60C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10012F6AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = "\b";
  v6[1] = &unk_1006A98D0;
  v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000D7B50(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_10012F758()
{
  return sub_1000A5F84(&qword_10083BDC8, &qword_10083BDD0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10012F788()
{
  unint64_t result;

  result = qword_10083BDD8;
  if (!qword_10083BDD8)
  {
    result = swift_getWitnessTable(&unk_1006A9960, &type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.FieldToHandle);
    atomic_store(result, (unint64_t *)&qword_10083BDD8);
  }
  return result;
}

uint64_t sub_10012F7CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler();
  result = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t sub_10012F7FC(__n128 a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for Analytics(0, a1)), "init");
  v3 = objc_msgSend(*(id *)(v1 + 16), "newBackgroundContextWithAuthor:", RDSharedInlineTagAutoConvertAuthor);
  v4 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Batcher(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = v2;
  v7 = sub_100130BB8(v3, (uint64_t)v6, v5);
  sub_10012A168();

  return swift_release(v7);
}

uint64_t sub_10012F89C(uint64_t a1, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = a2((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1);
    v11 = swift_release(a1);
    if (v2)
      swift_willThrow(v11);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v9, -1);
    bzero(v12, v9);
    v10 = a2((char *)v12, v8, a1);
    swift_release(a1);
    swift_slowDealloc(v12, -1, -1);
  }
  return v10;
}

Swift::Int sub_10012FA04(Swift::Int result, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v4 = (unint64_t *)result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_24;
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_24;
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    result = (Swift::Int)objc_msgSend(*(id *)(*(_QWORD *)(a3 + 48) + 8 * v13), "isConcealed");
    if ((result & 1) == 0)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100218868(v4, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    goto LABEL_24;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_10012FB9C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  id v17;
  uint64_t v20;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (2)
  {
    v20 = v4;
    if (v9)
    {
LABEL_6:
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_21;
    }
    while (1)
    {
      v13 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v13 >= v10)
        goto LABEL_24;
      v14 = *(_QWORD *)(v6 + 8 * v13);
      ++v5;
      if (!v14)
      {
        v5 = v13 + 1;
        if (v13 + 1 >= v10)
          goto LABEL_24;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
        {
          v5 = v13 + 2;
          if (v13 + 2 >= v10)
            goto LABEL_24;
          v14 = *(_QWORD *)(v6 + 8 * v5);
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v10)
            {
LABEL_24:
              swift_retain();
              sub_100218868(a1, a2, v20, a3);
              return;
            }
            v14 = *(_QWORD *)(v6 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                v5 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_26;
                if (v5 >= v10)
                  goto LABEL_24;
                v14 = *(_QWORD *)(v6 + 8 * v5);
                ++v15;
                if (v14)
                  goto LABEL_20;
              }
            }
            v5 = v15;
          }
        }
      }
LABEL_20:
      v9 = (v14 - 1) & v14;
      v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_21:
      v16 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v12);
      v17 = objc_msgSend(v16, "hashtagLabel");

      if (!v17)
        break;

      if (v9)
        goto LABEL_6;
    }
    *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v4 = v20 + 1;
    if (!__OFADD__(v20, 1))
      continue;
    break;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_10012FD64(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(*a1) & 1) == 0)
    return 0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v4 == v6 && v5 == v7;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0) & 1) == 0)
    return 0;
  v9 = *(int *)(type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0)
              + 24);
  return static UUID.== infix(_:_:)((char *)a1 + v9, a2 + v9);
}

_QWORD *sub_10012FE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v5 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (id *)((char *)&v24 - v10);
  result = _swiftEmptyArrayStorage;
  v26 = _swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v9 + 80);
    v15 = *(_QWORD *)(v9 + 72);
    v24 = v2;
    v25 = (v14 + 32) & ~v14;
    v16 = a1 + v25;
    do
    {
      sub_100130DF4(v16, (uint64_t)v11);
      v17 = objc_msgSend(*v11, "objectIdentifier");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      LOBYTE(v17) = sub_1001B2278(v18, v20, a2);
      swift_bridgeObjectRelease(v20);
      if ((v17 & 1) != 0)
      {
        sub_10001C744((uint64_t)v11, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
      }
      else
      {
        sub_1000B8680((uint64_t)v11, (uint64_t)v7, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
        v21 = v26;
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
        {
          sub_1001C1FCC(0, v21[2] + 1, 1);
          v21 = v26;
        }
        v23 = v21[2];
        v22 = v21[3];
        if (v23 >= v22 >> 1)
        {
          sub_1001C1FCC(v22 > 1, v23 + 1, 1);
          v21 = v26;
        }
        v21[2] = v23 + 1;
        sub_1000B8680((uint64_t)v7, (uint64_t)v21 + v25 + v23 * v15, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
      }
      v16 += v15;
      --v13;
    }
    while (v13);
    return v26;
  }
  return result;
}

_QWORD *sub_10012FFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_1008442E0);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  __chkstk_darwin(v8);
  v43 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v35 - v11);
  __chkstk_darwin(v13);
  v38 = (uint64_t)&v35 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    return _swiftEmptyArrayStorage;
  v37 = v2;
  v16 = *(_QWORD *)(type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0)
                  - 8);
  v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v18 = *(_QWORD *)(v16 + 72);
  v36 = a1;
  swift_bridgeObjectRetain(a1);
  v19 = _swiftEmptyArrayStorage;
  do
  {
    v20 = *(_QWORD *)(v17 + 16);
    v41 = *(_QWORD *)(v17 + 8);
    v42 = v20;
    swift_bridgeObjectRetain(v20);
    static Locale.current.getter(v21);
    v22 = type metadata accessor for Locale(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 0, 1, v22);
    v23 = sub_1000E525C();
    v24 = StringProtocol.foldedStringForWriting(locale:)(v7, &type metadata for String, v23);
    v26 = v25;
    sub_10000882C((uint64_t)v7, (uint64_t *)&unk_10083FBE0);
    swift_bridgeObjectRelease(v42);
    if (*(_QWORD *)(a2 + 16) && (v27 = sub_10001A6DC(v24, v26), (v28 & 1) != 0))
    {
      v29 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v27);
      swift_bridgeObjectRelease(v26);
      v30 = (uint64_t)v12 + *(int *)(v40 + 48);
      *v12 = v29;
      sub_100130DF4(v17, v30);
      v31 = v38;
      sub_1000A5CA8((uint64_t)v12, v38, &qword_1008442E0);
      sub_1000A5CA8(v31, v43, &qword_1008442E0);
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        v19 = (_QWORD *)sub_1002C9164(0, v19[2] + 1, 1, (unint64_t)v19);
      v33 = v19[2];
      v32 = v19[3];
      if (v33 >= v32 >> 1)
        v19 = (_QWORD *)sub_1002C9164(v32 > 1, v33 + 1, 1, (unint64_t)v19);
      v19[2] = v33 + 1;
      sub_1000A5CA8(v43, (uint64_t)v19+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v33, &qword_1008442E0);
    }
    else
    {
      swift_bridgeObjectRelease(v26);
    }
    v17 += v18;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease(v36);
  return v19;
}

void sub_1001302D0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v7 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  v57 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v54 = (uint64_t)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v52 - v10;
  v12 = sub_10001A630(&qword_1008442E0);
  __chkstk_darwin(v12);
  v16 = (void **)((char *)v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v52[1] = v3;
    v53 = a1;
    v18 = (uint64_t)v16 + *(int *)(v13 + 48);
    v52[0] = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v19 = a1 + v52[0];
    v56 = *(_QWORD *)(v14 + 72);
    swift_bridgeObjectRetain(a1);
    sub_100008868(v19, (uint64_t)v16, &qword_1008442E0);
    v20 = *v16;
    v55 = v18;
    sub_1000B8680(v18, (uint64_t)v11, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    v21 = (_QWORD *)*a3;
    v23 = sub_1002C6BE8((uint64_t)v20);
    v24 = v21[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v27 = v22;
    if (v21[3] < v26)
    {
      sub_1002CF300(v26, a2 & 1);
      v28 = sub_1002C6BE8((uint64_t)v20);
      if ((v27 & 1) != (v29 & 1))
      {
LABEL_28:
        v51 = sub_1000151B0(0, (unint64_t *)&unk_10083BE40, off_1007D66D0);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v51);
        __break(1u);
        return;
      }
      v23 = v28;
      v30 = (_QWORD *)*a3;
      if ((v27 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v31 = v54;
      sub_1000B8680((uint64_t)v11, v54, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);

      sub_100130DB0(v31, v30[7] + *(_QWORD *)(v57 + 72) * v23);
      v32 = v17 - 1;
      if (v17 == 1)
      {
LABEL_14:
        swift_bridgeObjectRelease(v53);
        return;
      }
LABEL_16:
      v36 = v53 + v56 + v52[0];
      while (1)
      {
        sub_100008868(v36, (uint64_t)v16, &qword_1008442E0);
        v38 = *v16;
        sub_1000B8680(v55, (uint64_t)v11, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
        v39 = (_QWORD *)*a3;
        v41 = sub_1002C6BE8((uint64_t)v38);
        v42 = v39[2];
        v43 = (v40 & 1) == 0;
        v44 = v42 + v43;
        if (__OFADD__(v42, v43))
          goto LABEL_26;
        v45 = v40;
        if (v39[3] < v44)
        {
          sub_1002CF300(v44, 1);
          v46 = sub_1002C6BE8((uint64_t)v38);
          if ((v45 & 1) != (v47 & 1))
            goto LABEL_28;
          v41 = v46;
        }
        v48 = (_QWORD *)*a3;
        if ((v45 & 1) != 0)
        {
          v37 = v54;
          sub_1000B8680((uint64_t)v11, v54, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);

          sub_100130DB0(v37, v48[7] + *(_QWORD *)(v57 + 72) * v41);
        }
        else
        {
          v48[(v41 >> 6) + 8] |= 1 << v41;
          *(_QWORD *)(v48[6] + 8 * v41) = v38;
          sub_1000B8680((uint64_t)v11, v48[7] + *(_QWORD *)(v57 + 72) * v41, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
          v49 = v48[2];
          v34 = __OFADD__(v49, 1);
          v50 = v49 + 1;
          if (v34)
            goto LABEL_27;
          v48[2] = v50;
        }
        v36 += v56;
        if (!--v32)
          goto LABEL_14;
      }
    }
    if ((a2 & 1) != 0)
    {
      v30 = (_QWORD *)*a3;
      if ((v22 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1002D73C4();
      v30 = (_QWORD *)*a3;
      if ((v27 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v30[(v23 >> 6) + 8] |= 1 << v23;
    *(_QWORD *)(v30[6] + 8 * v23) = v20;
    sub_1000B8680((uint64_t)v11, v30[7] + *(_QWORD *)(v57 + 72) * v23, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    v33 = v30[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v30[2] = v35;
    v32 = v17 - 1;
    if (v17 == 1)
      goto LABEL_14;
    goto LABEL_16;
  }
}

void sub_1001306BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  sub_10001A630(&qword_10083BE68);
  v4 = static _DictionaryStorage.copy(original:)(a1);
  v5 = (_QWORD *)v4;
  v6 = 0;
  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v4 + 64;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v13 | (v6 << 6); ; i = __clz(__rbit64(v16)) + (v6 << 6))
  {
    v18 = 8 * i;
    v19 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * i);
    *(_QWORD *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v5[6] + v18) = v19;
    *(_QWORD *)(v5[7] + v18) = a2;
    v20 = v5[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v5[2] = v22;
    v23 = v19;
    swift_bridgeObjectRetain(a2);
    if (v10)
      goto LABEL_4;
LABEL_5:
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_24;
    if (v15 >= v11)
      return;
    v16 = *(_QWORD *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v11)
        return;
      v16 = *(_QWORD *)(v7 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v11)
          return;
        v16 = *(_QWORD *)(v7 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_18:
    v10 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v11)
    return;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v11)
      return;
    v16 = *(_QWORD *)(v7 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
}

Swift::Int sub_10013086C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int result;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;

  v4 = __CocoaDictionary.count.getter(a1);
  if (v4)
  {
    v5 = v4;
    sub_10001A630(&qword_10083BE68);
    v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v5);
  }
  else
  {
    v6 = &_swiftEmptyDictionarySingleton;
  }
  v33 = v6;
  v7 = __CocoaDictionary.makeIterator()(a1);
  swift_unknownObjectRetain(a1);
  v9 = __CocoaDictionary.Iterator.next()(v8);
  if (v9)
  {
    v11 = v9;
    v12 = v10;
    v13 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    do
    {
      v31 = (void *)v11;
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
      v30 = v12;
      v22 = sub_1000151B0(0, &qword_10083DAC0, REMHashtag_ptr);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
      v24 = v31;
      v23 = v32;
      swift_bridgeObjectRetain(a2);

      v6 = v33;
      v25 = v33[2];
      if (v33[3] <= v25)
      {
        sub_1002CF660(v25 + 1, 1);
        v6 = v33;
      }
      result = NSObject._rawHashValue(seed:)(v6[5]);
      v15 = (char *)(v6 + 8);
      v16 = -1 << *((_BYTE *)v6 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~v6[(v17 >> 6) + 8]) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~v6[(v17 >> 6) + 8])) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)&v15[8 * v18];
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)&v15[(v19 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(v6[6] + v20) = v23;
      *(_QWORD *)(v6[7] + v20) = a2;
      ++v6[2];
      v11 = __CocoaDictionary.Iterator.next()(result);
      v12 = v21;
    }
    while (v11);
  }
  swift_release(v7);
  return (Swift::Int)v6;
}

unint64_t sub_100130AD0(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char v12;

  if (a3 < 0)
    return 0;
  if (__OFADD__(a3, 1))
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v7 = result;
    v8 = 7;
    if (((a2 >> 60) & ((result & 0x800000000000000) == 0)) != 0)
      v8 = 11;
    v9 = v8 | (v7 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, a3 + 1, v9, result, a2);
    if ((v10 & 1) != 0)
      return 0;
    if (!__OFSUB__(a4, 1))
    {
      v11 = result;
      result = String.index(_:offsetBy:limitedBy:)(result, a4 - 1, v9, v6, a2);
      if ((v12 & 1) == 0)
      {
        if (result >> 14 >= v11 >> 14)
          return String.subscript.getter(v11, result, v6, a2);
        goto LABEL_15;
      }
      return 0;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_100130BB8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[5];
  _QWORD v19[5];

  v6 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics(0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v18 - v11;
  v19[3] = type metadata accessor for Analytics(0, v10);
  v19[4] = &protocol witness table for Analytics;
  v19[0] = a2;
  *(_QWORD *)(a3 + 16) = a1;
  *(_QWORD *)(a3 + 24) = 100;
  sub_100018618((uint64_t)v19, (uint64_t)v18);
  *v8 = 0;
  v8[7] = 0;
  v8[8] = 0;
  v8[6] = 0;
  v13 = (char *)v8 + *(int *)(v6 + 40);
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_100018618((uint64_t)v18, (uint64_t)(v8 + 1));
  Date.init()(a1);
  v15 = sub_100130D44();
  v16 = swift_allocError(&type metadata for RDSharedInlineTagAutoConvertStoreHandler.Metrics.UnfinishedMetrics, v15, 0, 0);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v18);
  swift_errorRelease(*v8);
  *v8 = v16;
  sub_1000B8680((uint64_t)v8, (uint64_t)v12, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v19);
  sub_1000B8680((uint64_t)v12, a3 + OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher_metrics, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics);
  return a3;
}

unint64_t sub_100130D44()
{
  unint64_t result;

  result = qword_10083BDE0;
  if (!qword_10083BDE0)
  {
    result = swift_getWitnessTable(&unk_1006A9B3C, &type metadata for RDSharedInlineTagAutoConvertStoreHandler.Metrics.UnfinishedMetrics);
    atomic_store(result, (unint64_t *)&qword_10083BDE0);
  }
  return result;
}

const char *sub_100130D88()
{
  return "canonicalName";
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(uint64_t a1)
{
  return sub_10001522C(a1, qword_10083BF20, (uint64_t)&nominal type descriptor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
}

uint64_t sub_100130DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100130DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100130E38()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100130E5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

double sub_100130E90(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10012B6DC(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

unint64_t sub_100130E9C()
{
  unint64_t result;

  result = qword_10083BE80;
  if (!qword_10083BE80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_10083BE80);
  }
  return result;
}

const char *sub_100130EE0()
{
  return "activityTypeRawValue";
}

id sub_100130EEC@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "activityTypeRawValue");
  *a2 = (_WORD)result;
  return result;
}

id sub_100130F1C(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setActivityTypeRawValue:", *a1);
}

uint64_t sub_100130F30()
{
  uint64_t v0;

  return sub_10012A36C(v0);
}

uint64_t sub_100130F38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100130F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

char *sub_100130F90(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v6;
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v12 = v4;
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t sub_10013103C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_10013108C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  id v12;

  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v6 = *(_QWORD *)(a2 + 16);
  a1[2] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v5;
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  return a1;
}

uint64_t sub_100131110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_1001311A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100131204(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = a2[2];
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_100131280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013128C);
}

uint64_t sub_10013128C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_100131308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100131314);
}

char *sub_100131314(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100131388(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_1006A9A48;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10013140C(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 3 || a3 == 2)
    return swift_errorRetain(result);
  if (a3 == 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t a1)
{
  return sub_100131448(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100131448(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 3 || a3 == 2)
    return swift_errorRelease(result);
  if (a3 == 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s7remindd40RDSharedInlineTagAutoConvertStoreHandlerC22ReminderFieldConverterC19AutoConversionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10013140C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10013140C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100131448(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100131448(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001315E0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1001315F8(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError()
{
  return &type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError;
}

ValueMetadata *type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.Metrics.UnfinishedMetrics()
{
  return &type metadata for RDSharedInlineTagAutoConvertStoreHandler.Metrics.UnfinishedMetrics;
}

uint64_t sub_100131630()
{
  return sub_10009FC50(&qword_10083BF60, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag, (uint64_t)&unk_1006A9A94);
}

uint64_t sub_100131664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083BF68);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083BF68);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001316F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10000A388(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

void sub_100131744(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t ObjCClassFromMetadata;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v3 = v2;
  v35 = a2;
  ObjectType = swift_getObjectType(v2);
  v6 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = 0;
  v10 = objc_msgSend(v2, "remObjectIDWithError:", &v36);
  v11 = v36;
  if (v10)
  {
    v12 = v10;
    v13 = v36;
    v14 = objc_msgSend(v3, "displayName");
    if (v14)
    {
      v15 = v14;
      v34 = a1;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v32 = v17;
      v33 = v16;

      v18 = REMObjectID.codable.getter();
      v19 = objc_msgSend(v3, "canonicalName");
      if (v19)
      {
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v23 = v22;

      }
      else
      {
        v21 = 0;
        v23 = 0;
      }
      v30 = v33;
      *v9 = v18;
      v9[1] = v30;
      v9[2] = v32;
      v9[3] = v21;
      v9[4] = v23;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:), v6);
      v31 = v34;
      swift_bridgeObjectRetain(v34);
      REMRemindersListDataView.SectionLite.init(type:reminders:)(v9, v31);
    }
    else
    {
      v26 = (void *)objc_opt_self(REMError);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
      v28 = String._bridgeToObjectiveC()();
      objc_msgSend(v26, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v28);

      swift_willThrow(v29);
    }

  }
  else
  {
    v24 = v36;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v25);
  }
}

id sub_100131994()
{
  return sub_1001319B4();
}

id sub_1001319B4()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  id v7;

  v7 = 0;
  v1 = objc_msgSend(v0, "remObjectIDWithError:", &v7);
  v2 = v7;
  if (v1)
  {
    v3 = v7;
  }
  else
  {
    v4 = v7;
    _convertNSErrorToError(_:)(v2);

    swift_willThrow(v5);
  }
  return v1;
}

id sub_100131A68()
{
  id *v0;

  return objc_msgSend(*v0, "list");
}

void sub_100131AA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100131744(a1, a2);
}

id sub_100131AC0()
{
  id *v0;

  return objc_msgSend(*v0, "smartList");
}

void sub_100131AF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t ObjCClassFromMetadata;
  NSString v23;
  uint64_t v24;
  _QWORD v25[2];
  id v26;

  v3 = v2;
  v25[1] = a2;
  ObjectType = swift_getObjectType(v2);
  v6 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (_QWORD *)((char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = 0;
  v10 = objc_msgSend(v2, "remObjectIDWithError:", &v26);
  v11 = v26;
  if (v10)
  {
    v12 = v10;
    v13 = v26;
    v14 = objc_msgSend(v3, "displayName");
    if (v14)
    {
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v18 = v17;

      *v9 = REMObjectID.codable.getter();
      v9[1] = v16;
      v9[3] = 0;
      v9[4] = 0;
      v9[2] = v18;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:), v6);
      swift_bridgeObjectRetain(a1);
      REMRemindersListDataView.SectionLite.init(type:reminders:)(v9, a1);
    }
    else
    {
      v21 = (void *)objc_opt_self(REMError);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
      v23 = String._bridgeToObjectiveC()();
      objc_msgSend(v21, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v23);

      swift_willThrow(v24);
    }

  }
  else
  {
    v19 = v26;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v20);
  }
}

id sub_100131CFC()
{
  id *v0;

  return objc_msgSend(*v0, "template");
}

void sub_100131D34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100131AF8(a1, a2);
}

_QWORD *sub_100131D54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  char *v36;
  _QWORD *v37;

  v5 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.SectionLite(0, v6);
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  __chkstk_darwin(v9);
  v36 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return _swiftEmptyArrayStorage;
  v37 = _swiftEmptyArrayStorage;
  sub_1001C1C64(0, v11, 0);
  v12 = (_QWORD *)(a1 + 32);
  while (1)
  {
    v13 = v12[3];
    v14 = v12[4];
    v15 = sub_10000A388(v12, v13);
    v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    if (v2)
      break;
    v17 = v16;
    v18 = objc_msgSend(v16, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v19 = *(_QWORD *)(a2 + 16);
    v35 = v11;
    if (v19)
    {
      v20 = sub_1002C65F8((uint64_t)v8);
      v21 = _swiftEmptyArrayStorage;
      if ((v22 & 1) != 0)
      {
        v21 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v20);
        swift_bridgeObjectRetain(v21);
      }
    }
    else
    {
      v21 = _swiftEmptyArrayStorage;
    }
    v23 = a2;
    v24 = v8;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v34);
    v25 = v12[3];
    v26 = v12[4];
    sub_10000A388(v12, v25);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v26 + 32))(v21, v25, v26);

    swift_bridgeObjectRelease(v21);
    v15 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
    {
      sub_1001C1C64(0, v15[2] + 1, 1);
      v15 = v37;
    }
    v8 = v24;
    v28 = v15[2];
    v27 = v15[3];
    v29 = v35;
    if (v28 >= v27 >> 1)
    {
      sub_1001C1C64(v27 > 1, v28 + 1, 1);
      v15 = v37;
    }
    v15[2] = v28 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))((unint64_t)v15+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v28, v36, v32);
    v37 = v15;
    v12 += 5;
    v11 = v29 - 1;
    a2 = v23;
    if (!v11)
      return v15;
  }
  swift_release(v37);
  return v15;
}

_QWORD *sub_100131FF4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  unint64_t v43;
  char v44;
  id v45;
  __n128 v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, __n128);
  id v49;
  void *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char v56;
  char *v57;
  unint64_t *v58;
  void (*v59)(_QWORD *);
  unint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  __n128 v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  char v79;
  uint64_t v80;
  __n128 v81;
  void (*v82)(uint64_t, uint64_t);
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  id v85;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  char *v106;
  char *v107;
  void (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  _QWORD v110[4];
  _QWORD *v111;

  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v98 = (char *)&v87 - v14;
  __chkstk_darwin(v15);
  v100 = (char *)&v87 - v16;
  __chkstk_darwin(v17);
  v109 = (uint64_t)&v87 - v18;
  v19 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v97 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v107 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  v106 = (char *)&v87 - v24;
  if (a3)
  {
    v94 = v12;
    v111 = &_swiftEmptyDictionarySingleton;
    v25 = *(_QWORD *)(a1 + 16);
    if (v25)
    {
      v89 = v23;
      v105 = v10;
      v99 = v8;
      v95 = a2;
      v26 = v97;
      v27 = *(unsigned __int8 *)(v97 + 80);
      v28 = (v27 + 32) & ~v27;
      v90 = a1;
      v29 = a1 + v28;
      v30 = *(_QWORD *)(v97 + 72);
      v108 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
      v102 = v28;
      v93 = v30 + v28;
      v92 = v27 | 7;
      v31 = a3;
      v32 = v26;
      v104 = v31;
      v33 = _swiftEmptyArrayStorage;
      v91 = xmmword_1006A3C00;
      v34 = v106;
      v103 = v30;
      while (1)
      {
        v35 = v33;
        v108(v34, v29, v19);
        v36 = objc_msgSend(v104, "membershipByMemberIdentifier");
        v37 = sub_100133150();
        v38 = sub_100133108();
        v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v36, v9, v37, v38);

        v41 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v40);
        v42 = objc_msgSend(v41, "uuid");

        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);
        if (!*(_QWORD *)(v39 + 16) || (v43 = sub_1002C65F8(v109), (v44 & 1) == 0))
        {
          v71 = swift_bridgeObjectRelease(v39);
          (*(void (**)(uint64_t, uint64_t, __n128))(v105 + 8))(v109, v9, v71);
          v34 = v106;
          v33 = v35;
          goto LABEL_21;
        }
        v45 = *(id *)(*(_QWORD *)(v39 + 56) + 8 * v43);
        v46 = swift_bridgeObjectRelease(v39);
        v47 = v105;
        v48 = *(void (**)(uint64_t, uint64_t, __n128))(v105 + 8);
        v48(v109, v9, v46);
        v101 = v45;
        v49 = objc_msgSend(v45, "groupIdentifier");
        if (!v49)
        {
          v53 = (uint64_t)v99;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v99, 1, 1, v9);
          v33 = v35;
LABEL_19:

          sub_10011E85C(v53);
LABEL_20:
          v34 = v106;
LABEL_21:
          v108(v107, (uint64_t)v34, v19);
          if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
            v33 = (_QWORD *)sub_1002C8478(0, v33[2] + 1, 1, (unint64_t)v33);
          v73 = v33[2];
          v72 = v33[3];
          if (v73 >= v72 >> 1)
            v33 = (_QWORD *)sub_1002C8478(v72 > 1, v73 + 1, 1, (unint64_t)v33);
          v33[2] = v73 + 1;
          v69 = v103;
          (*(void (**)(char *, char *, uint64_t))(v32 + 32))((char *)v33 + v102 + v73 * v103, v107, v19);
          goto LABEL_26;
        }
        v50 = v49;
        v96 = (void (*)(uint64_t, uint64_t))v48;
        v51 = v98;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

        v52 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
        v53 = (uint64_t)v99;
        v32 = v97;
        v52(v99, v51, v9);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v53, 0, 1, v9);
        v33 = v35;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v53, 1, v9) == 1)
          goto LABEL_19;
        v54 = (uint64_t)v100;
        v52(v100, (char *)v53, v9);
        if ((sub_1001B23C0(v54, v95) & 1) == 0)
        {
          v96((uint64_t)v100, v9);

          goto LABEL_20;
        }
        v34 = v106;
        if (v111[2])
        {
          sub_1002C65F8((uint64_t)v100);
          v55 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 16);
          if ((v56 & 1) != 0)
          {
            v57 = v94;
            v55(v94, (uint64_t)v100, v9);
            v59 = sub_1001CFDD4(v110);
            if (*v58)
            {
              v60 = v58;
              v108(v89, (uint64_t)v34, v19);
              v61 = v60;
              v62 = *v60;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v62);
              v64 = (uint64_t *)v61;
              *v61 = v62;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v62 = sub_1002C8478(0, *(_QWORD *)(v62 + 16) + 1, 1, v62);
                *v61 = v62;
              }
              v66 = *(_QWORD *)(v62 + 16);
              v65 = *(_QWORD *)(v62 + 24);
              v67 = v66 + 1;
              if (v66 >= v65 >> 1)
              {
                v88 = v66 + 1;
                v84 = sub_1002C8478(v65 > 1, v66 + 1, 1, v62);
                v67 = v88;
                v62 = v84;
                *v64 = v84;
              }
              *(_QWORD *)(v62 + 16) = v67;
              v68 = v62 + v102;
              v69 = v103;
              (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v68 + v66 * v103, v89, v19);
              ((void (*)(_QWORD *, _QWORD))v59)(v110, 0);

              v70 = v96;
              v96((uint64_t)v94, v9);
              v70((uint64_t)v100, v9);
              v34 = v106;
            }
            else
            {
              ((void (*)(_QWORD *, _QWORD))v59)(v110, 0);

              v83 = v96;
              v96((uint64_t)v57, v9);
              v83((uint64_t)v100, v9);
              v69 = v103;
            }
            goto LABEL_26;
          }
        }
        else
        {
          v55 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 16);
        }
        v74 = (uint64_t)v98;
        v55(v98, (uint64_t)v100, v9);
        v75 = sub_10001A630(&qword_10083BFA0);
        v76 = swift_allocObject(v75, v93, v92);
        *(_OWORD *)(v76 + 16) = v91;
        v77 = v106;
        v108((char *)(v76 + v102), (uint64_t)v106, v19);
        v78 = v111;
        v79 = swift_isUniquelyReferenced_nonNull_native(v111);
        v110[0] = v78;
        v80 = v76;
        v34 = v77;
        sub_10028B884(v80, v74, v79);
        v111 = (_QWORD *)v110[0];
        v81 = swift_bridgeObjectRelease(0x8000000000000000);
        v82 = v96;
        ((void (*)(uint64_t, uint64_t, __n128))v96)(v74, v9, v81);

        v82((uint64_t)v100, v9);
        v33 = v35;
        v69 = v103;
LABEL_26:
        (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v19);
        v29 += v69;
        if (!--v25)
        {
          swift_bridgeObjectRelease(v90);
          v85 = v104;

          swift_bridgeObjectRelease(v95);
          return v111;
        }
      }
    }
    swift_bridgeObjectRelease(a1);

    swift_bridgeObjectRelease(a2);
    return &_swiftEmptyDictionarySingleton;
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return (_QWORD *)sub_1002AF1D0((uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1001327A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject **v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  __n128 v82;
  _BYTE *v83;
  _BYTE *v84;
  unint64_t v85;
  unint64_t v86;
  _BYTE v88[4];
  int v89;
  os_log_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  char v102[8];
  ValueMetadata *v103;
  uint64_t v104;
  uint64_t v105;

  v4 = type metadata accessor for REMJSONDeserializationError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (NSObject **)&v88[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v88[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for REMRemindersListDataView.SectionLite(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  if (!a1[2])
  {
    v47 = sub_10001A630(&qword_100844030);
    v48 = swift_allocObject(v47, ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72), *(unsigned __int8 *)(v14 + 80) | 7);
    *(_OWORD *)(v48 + 16) = xmmword_1006A3C00;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v8);
    swift_bridgeObjectRetain(a2);
    REMRemindersListDataView.SectionLite.init(type:reminders:)(v12, a2);
    return v48;
  }
  v92 = v9;
  v93 = v8;
  v94 = v12;
  v95 = &v88[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v96 = v15;
  v97 = v14;
  v17 = a1[7];
  v18 = a1[8];
  v98 = a1;
  sub_10000A388(a1 + 4, v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
  v21 = v19;
  if (v19)
  {
    v22 = v20;
    ObjectType = swift_getObjectType(v19);
    swift_unknownObjectRetain(v21);
    v24 = ObjectType;
    v25 = v99;
    v26 = sub_10011D7E0(v24, v22);
    if (v25)
    {
      v99 = v22;
      v27 = 0;
      swift_unknownObjectRelease(v21);
      v105 = v25;
      swift_errorRetain(v25);
      v28 = sub_10001A630((uint64_t *)&unk_10083AA20);
      if (swift_dynamicCast(v7, &v105, v28, v4, 0))
      {
        if ((*(unsigned int (**)(NSObject **, uint64_t))(v5 + 88))(v7, v4) == enum case for REMJSONDeserializationError.notSupported(_:))
        {
          swift_errorRelease(v25);
          (*(void (**)(NSObject **, uint64_t))(v5 + 96))(v7, v4);
          v29 = *v7;
          if (qword_100836D50 != -1)
            swift_once(&qword_100836D50, sub_100131664);
          v30 = type metadata accessor for Logger(0);
          sub_10001AAA8(v30, (uint64_t)qword_10083BF68);
          v31 = swift_unknownObjectRetain_n(v21, 2);
          v32 = Logger.logObject.getter(v31);
          v33 = static os_log_type_t.default.getter(v32);
          v34 = v33;
          if (os_log_type_enabled(v32, v33))
          {
            v35 = swift_slowAlloc(32, -1);
            v36 = swift_slowAlloc(64, -1);
            v100 = v36;
            *(_DWORD *)v35 = 136446722;
            LODWORD(v91) = v34;
            v103 = &_s9UtilitiesON;
            v37 = sub_10001A630(&qword_10083BF90);
            v90 = v29;
            v38 = String.init<A>(describing:)(&v103, v37);
            v40 = v39;
            v103 = (ValueMetadata *)sub_10001A820(v38, v39, &v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
            swift_bridgeObjectRelease(v40);
            *(_WORD *)(v35 + 12) = 2082;
            v41 = swift_getObjectType(v21);
            v103 = (ValueMetadata *)(*(uint64_t (**)(uint64_t))(v99 + 8))(v41);
            v104 = v42;
            v43 = sub_10001A630((uint64_t *)&unk_10083A370);
            v44 = String.init<A>(describing:)(&v103, v43);
            v46 = v45;
            v103 = (ValueMetadata *)sub_10001A820(v44, v45, &v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
            swift_unknownObjectRelease_n(v21, 2);
            swift_bridgeObjectRelease(v46);
            *(_WORD *)(v35 + 22) = 2050;
            v103 = (ValueMetadata *)v90;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
            _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v91, "%{public}s: Failed to deserialize 'membershipsOfRemindersInSectionsAsData' because current runtime version is lower than minimumSupportedVersion. {parentID: %{public}s, minimumSupportedVersion: %{public}ld}", (uint8_t *)v35, 0x20u);
            swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v36, -1, -1);
            swift_slowDealloc(v35, -1, -1);

          }
          else
          {

            swift_unknownObjectRelease_n(v21, 2);
          }
          v71 = (uint64_t)v98;
          swift_errorRelease(v105);
          v49 = 0;
          goto LABEL_21;
        }
        (*(void (**)(NSObject **, uint64_t))(v5 + 8))(v7, v4);
      }
      swift_errorRelease(v105);
      if (qword_100836D50 != -1)
        swift_once(&qword_100836D50, sub_100131664);
      v50 = type metadata accessor for Logger(0);
      sub_10001AAA8(v50, (uint64_t)qword_10083BF68);
      swift_unknownObjectRetain(v21);
      swift_errorRetain(v25);
      swift_unknownObjectRetain(v21);
      v51 = swift_errorRetain(v25);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.fault.getter();
      v54 = v53;
      if (os_log_type_enabled(v52, v53))
      {
        v55 = swift_slowAlloc(32, -1);
        v91 = swift_slowAlloc(96, -1);
        v105 = v91;
        *(_DWORD *)v55 = 136446722;
        v90 = v52;
        v103 = &_s9UtilitiesON;
        v56 = sub_10001A630(&qword_10083BF90);
        v57 = String.init<A>(describing:)(&v103, v56);
        v89 = v54;
        v59 = v58;
        v103 = (ValueMetadata *)sub_10001A820(v57, v58, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
        swift_bridgeObjectRelease(v59);
        *(_WORD *)(v55 + 12) = 2082;
        v60 = swift_getObjectType(v21);
        v103 = (ValueMetadata *)(*(uint64_t (**)(uint64_t))(v99 + 8))(v60);
        v104 = v61;
        v62 = sub_10001A630((uint64_t *)&unk_10083A370);
        v63 = String.init<A>(describing:)(&v103, v62);
        v65 = v64;
        v103 = (ValueMetadata *)sub_10001A820(v63, v64, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
        swift_unknownObjectRelease_n(v21, 2);
        swift_bridgeObjectRelease(v65);
        *(_WORD *)(v55 + 22) = 2082;
        swift_getErrorValue(v25, v102, v101);
        v66 = Error.rem_errorDescription.getter(v101[1], v101[2]);
        v68 = v67;
        v103 = (ValueMetadata *)sub_10001A820(v66, v67, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
        swift_bridgeObjectRelease(v68);
        swift_errorRelease(v25);
        swift_errorRelease(v25);
        v69 = v90;
        _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v89, "%{public}s: Error upon fetching 'membershipsOfRemindersInSections' {parentID: %{public}s, error: %{public}s}", (uint8_t *)v55, 0x20u);
        v70 = v91;
        swift_arrayDestroy(v91, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v55, -1, -1);

        swift_errorRelease(v25);
      }
      else
      {
        swift_errorRelease(v25);
        swift_unknownObjectRelease_n(v21, 2);
        swift_errorRelease(v25);
        swift_errorRelease(v25);

      }
      v49 = 0;
    }
    else
    {
      v49 = (void *)v26;
      swift_unknownObjectRelease(v21);
      v27 = 0;
    }
  }
  else
  {
    v49 = 0;
    v27 = v99;
  }
  v71 = (uint64_t)v98;
LABEL_21:
  v103 = (ValueMetadata *)v71;
  v72 = sub_10001A630(&qword_10083BF80);
  v73 = type metadata accessor for UUID(0);
  v74 = sub_1001330BC();
  v75 = sub_100133108();
  v48 = Sequence.compactMapToSet<A>(_:)(sub_1001316F4, 0, v72, v73, v74, v75);
  v76 = v49;
  swift_bridgeObjectRetain(a2);
  v78 = sub_100131FF4(v77, v48, v49);
  v80 = v79;
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v80);
  v81 = sub_100131D54(v71, (uint64_t)v78);
  if (v27)
  {

    swift_bridgeObjectRelease_n(v80, 2);
    swift_bridgeObjectRelease_n(v78, 2);
    swift_unknownObjectRelease(v21);
  }
  else
  {
    v48 = (uint64_t)v81;
    swift_bridgeObjectRelease(v80);
    v82 = swift_bridgeObjectRelease(v78);
    v83 = v94;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, __n128))(v92 + 104))(v94, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v93, v82);
    swift_bridgeObjectRetain(v80);
    v84 = v95;
    REMRemindersListDataView.SectionLite.init(type:reminders:)(v83, v80);
    swift_bridgeObjectRelease(v80);
    swift_bridgeObjectRelease(v78);
    if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      v48 = sub_1002C848C(0, *(_QWORD *)(v48 + 16) + 1, 1, v48);
    v86 = *(_QWORD *)(v48 + 16);
    v85 = *(_QWORD *)(v48 + 24);
    if (v86 >= v85 >> 1)
      v48 = sub_1002C848C(v85 > 1, v86 + 1, 1, v48);
    *(_QWORD *)(v48 + 16) = v86 + 1;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v97 + 32))(v48+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(_QWORD *)(v97 + 72) * v86, v84, v96);

    swift_unknownObjectRelease(v21);
  }
  return v48;
}

unint64_t sub_1001330BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083BF88;
  if (!qword_10083BF88)
  {
    v1 = sub_1000A5A94(&qword_10083BF80);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083BF88);
  }
  return result;
}

unint64_t sub_100133108()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100843670;
  if (!qword_100843670)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100843670);
  }
  return result;
}

unint64_t sub_100133150()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083BF98;
  if (!qword_10083BF98)
  {
    v1 = objc_opt_self(REMMembership);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083BF98);
  }
  return result;
}

void sub_10013318C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100131D34(a1, a2);
}

id sub_1001331A0()
{
  return sub_100131994();
}

uint64_t sub_1001331B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083BFA8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083BFA8);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100133244(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v19;

  v8 = (void *)v4[2];
  v9 = (void *)v4[3];
  v10 = v4[4];
  v11 = v4[5];
  v13 = v4[6];
  v12 = v4[7];
  v14 = objc_allocWithZone((Class)type metadata accessor for RDXPCSyncInterfacePerformer());
  v15 = v8;
  v16 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10001BAE8(a3);
  v19 = a4;
  v17 = sub_10013CD2C(v15, v16, v11, v10, v13, v12, a1, a2, a3, (uint64_t)a4);

  swift_release(v11);
  swift_release(v10);
  swift_release(v13);
  swift_release(v12);
  swift_release(a2);

  return v17;
}

uint64_t sub_10013335C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_1001333A8(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t aBlock[5];
  uint64_t v47;

  v6 = v5;
  v43 = a5;
  v41 = a4;
  v42 = a3;
  LODWORD(v7) = a2;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = &v36[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v16 = type metadata accessor for Logger(0);
  sub_10001AAA8(v16, (uint64_t)qword_10083BFA8);
  v17 = a1;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(18, -1);
    v39 = v13;
    v21 = v20;
    v22 = swift_slowAlloc(32, -1);
    v40 = v10;
    v38 = v22;
    aBlock[0] = v22;
    *(_DWORD *)v21 = 67109378;
    v37 = v7;
    LODWORD(v45) = v7 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 4);
    *(_WORD *)(v21 + 8) = 2082;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v7 = v24;
    v45 = (_QWORD *)sub_10001A820(v23, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, aBlock);

    v25 = v7;
    LOBYTE(v7) = v37;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "XPCSyncInterface.SyncCloudKit: Requested Trigger CloudKit sync {discretionary: %{BOOL}d, reason: %{public}s}", (uint8_t *)v21, 0x12u);
    v26 = v38;
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    v10 = v40;
    swift_slowDealloc(v26, -1, -1);
    v27 = v21;
    v13 = v39;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

  }
  v28 = swift_allocObject(&unk_1007E6100, 57, 7);
  v29 = v41;
  *(_QWORD *)(v28 + 16) = v17;
  *(_QWORD *)(v28 + 24) = v29;
  *(_QWORD *)(v28 + 32) = v43;
  *(_BYTE *)(v28 + 40) = v7 & 1;
  *(_QWORD *)(v28 + 48) = v6;
  *(_BYTE *)(v28 + 56) = v42 & 1;
  aBlock[4] = (uint64_t)sub_10013D45C;
  v47 = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007E6118;
  v30 = _Block_copy(aBlock);
  v31 = v17;
  swift_retain();
  static DispatchQoS.unspecified.getter(v6);
  v45 = _swiftEmptyArrayStorage;
  v32 = sub_1000D3124();
  v33 = sub_10001A630((uint64_t *)&unk_100838000);
  v34 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v33, v34, v9, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v30);
  _Block_release(v30);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v15, v13);
  return swift_release(v47);
}

void sub_100133764(void *a1, void (*a2)(id), void *a3, char a4, char *a5, char a6)
{
  id v11;
  __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char *v17;
  __CFString *v18;
  id v19;
  char *v20;
  __CFString *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  id v42;
  char *v43;
  __CFString *v44;
  void *v45;
  Swift::String v46;
  void *object;
  unint64_t v48;
  NSString v49;
  id v50;
  void (*v51)(id);
  uint64_t v52;
  char *v53;
  char *v54;
  id v55;
  char *v56;
  __CFString *v57;
  id v58;
  char *v59;
  uint64_t v60;
  void (*v61)(id);
  uint64_t v62;
  id v63;
  __CFString *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v11 = a1;
  v12 = _sSo24ICCloudContextSyncReasona7reminddE03xpcc9InterfacecD0ABSgSo010REMXPCSyncgcD0a_tcfC_0(v11);
  if (!v12)
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_10083BFA8);
    v32 = v11;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v66 = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v39 = v38;
      v65 = sub_10001A820(v37, v38, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);

      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "XPCSyncInterface.SyncCloudKit: Unsupported sync reason - %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

    }
    v45 = (void *)objc_opt_self(REMError);
    v66 = 0;
    v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(v67);
    v66 = 0xD00000000000001ALL;
    v67 = 0x80000001006F9960;
    v46._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    object = v46._object;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(object);
    v48 = v67;
    v49 = String._bridgeToObjectiveC()();
    v50 = objc_msgSend(v45, "internalErrorWithDebugDescription:", v49, swift_bridgeObjectRelease(v48).n128_f64[0]);

    v21 = (__CFString *)v50;
    a2(v50);
    goto LABEL_17;
  }
  v13 = v12;
  v14 = swift_allocObject(&unk_1007E6150, 64, 7);
  *(_BYTE *)(v14 + 16) = a4 & 1;
  *(_QWORD *)(v14 + 24) = v11;
  *(_QWORD *)(v14 + 32) = a5;
  *(_QWORD *)(v14 + 40) = a2;
  *(_QWORD *)(v14 + 48) = a3;
  *(_QWORD *)(v14 + 56) = v13;
  if ((a6 & 1) != 0)
  {
    v15 = qword_100836D58;
    v16 = v11;
    v17 = a5;
    v63 = a3;
    swift_retain_n(a3);
    v18 = v13;
    v19 = v16;
    v20 = v17;
    v21 = v18;
    if (v15 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v22 = type metadata accessor for Logger(0);
    sub_10001AAA8(v22, (uint64_t)qword_10083BFA8);
    v23 = v19;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v61 = a2;
      v26 = swift_slowAlloc(18, -1);
      v60 = swift_slowAlloc(32, -1);
      v66 = v60;
      *(_DWORD *)v26 = 67109378;
      LODWORD(v65) = a4 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4);
      *(_WORD *)(v26 + 8) = 2082;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v29 = v28;
      v65 = sub_10001A820(v27, v28, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);

      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "XPCSyncInterface.SyncCloudKit: Bypassed throttler and run sync now {discretionary: %{BOOL}d, reason: %{public}s}", (uint8_t *)v26, 0x12u);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      v30 = v26;
      a2 = v61;
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

    }
    sub_100133F90(a4 & 1, v23, (uint64_t)v20, a2, (uint64_t)v63, (uint64_t)v21);
    swift_release(v63);

    swift_release(v14);
LABEL_17:

    return;
  }
  if ((a4 & 1) != 0)
  {
    v40 = *(_QWORD **)&a5[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_discretionaryCloudKitThrottler];
    v41 = a5;
    v42 = v11;
    swift_retain();
    v43 = v41;
    v44 = v13;
    sub_100424ECC(0, 0, v40, v43, (uint64_t)sub_10013D4B0, (uint64_t *)v14, (uint64_t)v44);

    swift_release(v14);
  }
  else
  {
    v62 = *(_QWORD *)&a5[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_cloudKitThrottler];
    v51 = a2;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v54 = v53;
    v55 = v11;
    v56 = a5;
    swift_retain_n(a3);
    v57 = v13;
    v58 = v55;
    v59 = v56;
    v64 = v57;
    swift_retain();
    sub_100425620(v52, v54, v62, 0, v58, v59, v51, a3, v64);
    swift_release(a3);

    swift_bridgeObjectRelease(v54);
    swift_release_n(v14);

  }
}

void sub_100133F90(char a1, void *a2, uint64_t a3, void (*a4)(id), uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  NSString v33;
  id v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t aBlock[5];
  uint64_t v39;

  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_10083BFA8);
  v13 = a2;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v36 = a1;
  if (os_log_type_enabled(v14, v15))
  {
    v35 = a6;
    v16 = swift_slowAlloc(18, -1);
    v17 = swift_slowAlloc(32, -1);
    aBlock[0] = v17;
    *(_DWORD *)v16 = 67109378;
    LODWORD(v37) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4);
    *(_WORD *)(v16 + 8) = 2082;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v20 = v19;
    v37 = sub_10001A820(v18, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, aBlock);

    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "XPCSyncInterface.SyncCloudKit: Trigger CloudKit sync {discretionary: %{BOOL}d, reason: %{public}s}", (uint8_t *)v16, 0x12u);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v21 = v16;
    a6 = v35;
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

  }
  v22 = objc_msgSend(*(id *)(a3 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController), "cloudContext", v35);
  if (v22)
  {
    v23 = v22;
    v24 = swift_allocObject(&unk_1007E6178, 48, 7);
    v25 = v36 & 1;
    *(_BYTE *)(v24 + 16) = v25;
    *(_QWORD *)(v24 + 24) = v13;
    *(_QWORD *)(v24 + 32) = a4;
    *(_QWORD *)(v24 + 40) = a5;
    aBlock[4] = (uint64_t)sub_10013D4F0;
    v39 = v24;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000E18E4;
    aBlock[3] = (uint64_t)&unk_1007E6190;
    v26 = _Block_copy(aBlock);
    v27 = v39;
    v28 = v13;
    swift_retain();
    swift_release(v27);
    objc_msgSend(v23, "syncWithReason:discretionary:completionHandler:", a6, v25, v26);
    _Block_release(v26);
  }
  else
  {
    v29 = Logger.logObject.getter(0);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "XPCSyncInterface.SyncCloudKit: CloudContext is nil -- can't sync to cloudKit", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v32 = (void *)objc_opt_self(REMError);
    v33 = String._bridgeToObjectiveC()();
    v34 = objc_msgSend(v32, "internalErrorWithDebugDescription:", v33);

    v23 = v34;
    a4(v34);

  }
}

uint64_t sub_100134334(uint64_t a1, char a2, void *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v27;
  _QWORD v28[3];
  _BYTE v29[8];
  uint64_t v30;

  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_10083BFA8);
  v8 = a3;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (!os_log_type_enabled(v9, v10))
  {

    if (!a1)
      goto LABEL_10;
LABEL_7:
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v30 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_getErrorValue(a1, v29, v28);
      v21 = Error.localizedDescription.getter(v28[1], v28[2]);
      v23 = v22;
      v27 = sub_10001A820(v21, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "XPCSyncInterface.SyncCloudKit: Sync interface cloudkit sync finished with error {error: %s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    goto LABEL_10;
  }
  v11 = swift_slowAlloc(18, -1);
  v12 = swift_slowAlloc(32, -1);
  v30 = v12;
  *(_DWORD *)v11 = 67109378;
  LODWORD(v27) = a2 & 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4);
  *(_WORD *)(v11 + 8) = 2082;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v15 = v14;
  v27 = sub_10001A820(v13, v14, &v30);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);

  swift_bridgeObjectRelease(v15);
  _os_log_impl((void *)&_mh_execute_header, v9, v10, "XPCSyncInterface.SyncCloudKit: CloudKit Sync did finish {discretionary: %{BOOL}d, reason: %{public}s}", (uint8_t *)v11, 0x12u);
  swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v12, -1, -1);
  swift_slowDealloc(v11, -1, -1);

  if (a1)
    goto LABEL_7;
LABEL_10:
  if ((sub_10013468C((uint64_t)v8) & 1) != 0)
    v24 = a1;
  else
    v24 = 0;
  return a4(v24);
}

uint64_t sub_10013468C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = REMXPCSyncInterfaceSyncReasonRemindtoolCloudKitDeleteAll;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonRemindtoolCloudKitDeleteAll);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v3 == v6 && v5 == v7)
    goto LABEL_14;
  v9 = v7;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  if ((v10 & 1) == 0)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v13;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v12 != v14 || v5 != v15)
    {
      v17 = v15;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v5, v14, v15, 0);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v17);
      if ((v18 & 1) != 0)
        goto LABEL_6;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonRemindtoolCloudKitSync);
      v5 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v23 = v21;
      if (v19 != v22 || v5 != v21)
      {
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v5, v22, v21, 0);
        goto LABEL_15;
      }
    }
LABEL_14:
    v11 = 1;
    v23 = v5;
LABEL_15:
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v23);
    return v11 & 1;
  }
LABEL_6:
  v11 = 1;
  return v11 & 1;
}

uint64_t sub_100134824(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD aBlock[5];
  uint64_t v44;

  v5 = v4;
  v39 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_10083BFA8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v38 = v14;
    v20 = v11;
    v21 = v9;
    v22 = v5;
    v23 = a1;
    v24 = a4;
    v25 = v12;
    v26 = a2;
    v27 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "XPCSyncInterface.RestartCloudKitSync: Requested Restart CloudKit sync", v19, 2u);
    v28 = v27;
    a2 = v26;
    v12 = v25;
    a4 = v24;
    a1 = v23;
    v5 = v22;
    v9 = v21;
    v11 = v20;
    v14 = v38;
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = swift_allocObject(&unk_1007E5FE8, 49, 7);
  v30 = v39;
  *(_QWORD *)(v29 + 16) = a1;
  *(_QWORD *)(v29 + 24) = v30;
  *(_QWORD *)(v29 + 32) = a4;
  *(_QWORD *)(v29 + 40) = v5;
  *(_BYTE *)(v29 + 48) = a2 & 1;
  aBlock[4] = sub_10013D3AC;
  v44 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E6000;
  v31 = _Block_copy(aBlock);
  v32 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter(v5);
  v42 = _swiftEmptyArrayStorage;
  v33 = sub_1000D3124();
  v34 = sub_10001A630((uint64_t *)&unk_100838000);
  v35 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v34, v35, v9, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v40);
  return swift_release(v44);
}

void sub_100134AFC(void *a1, void (*a2)(id), void *a3, char *a4, char a5)
{
  id v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  id v13;
  char *v14;
  __CFString *v15;
  id v16;
  char *v17;
  __CFString *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char *v43;
  __CFString *v44;
  id v45;
  char *v46;
  void *v47;
  Swift::String v48;
  void *object;
  unint64_t v50;
  NSString v51;
  id v52;
  id v53;
  __CFString *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v9 = a1;
  v10 = _sSo24ICCloudContextSyncReasona7reminddE03xpcc9InterfacecD0ABSgSo010REMXPCSyncgcD0a_tcfC_0(v9);
  if (v10)
  {
    v11 = v10;
    if ((a5 & 1) == 0)
    {
      v38 = *(_QWORD **)&a4[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_cloudKitThrottler];
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v41 = v40;
      v42 = v9;
      v43 = a4;
      swift_retain_n(a3);
      v44 = v11;
      v45 = v42;
      v46 = v43;
      v54 = v44;
      sub_100425DDC(v39, v41, v38, v45, v46, a2, a3, v54);
      swift_release_n(a3);

      swift_bridgeObjectRelease(v41);
      return;
    }
    v12 = qword_100836D58;
    v13 = v9;
    v14 = a4;
    swift_retain_n(a3);
    v15 = v11;
    v16 = v13;
    v17 = v14;
    v18 = v15;
    if (v12 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10083BFA8);
    v20 = v16;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = a3;
      v24 = swift_slowAlloc(32, -1);
      v56 = v24;
      *(_DWORD *)v23 = 136446210;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v27 = v26;
      v55 = sub_10001A820(v25, v26, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "XPCSyncInterface.RestartCloudKitSync: Bypassed throttler and restart CloudKit sync now {reason: %{public}s}", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      v28 = v24;
      a3 = v53;
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

    }
    sub_1001350B4(v20, (uint64_t)v17, a2, (uint64_t)a3, v18);
    swift_release_n(a3);

  }
  else
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_10083BFA8);
    v30 = v9;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v56 = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v37 = v36;
      v55 = sub_10001A820(v35, v36, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "XPCSyncInterface.RestartCloudKitSync: Unsupported sync reason - %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

    }
    v47 = (void *)objc_opt_self(REMError);
    v56 = 0;
    v57 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(v57);
    v56 = 0xD00000000000001ALL;
    v57 = 0x80000001006F9960;
    v48._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    object = v48._object;
    String.append(_:)(v48);
    swift_bridgeObjectRelease(object);
    v50 = v57;
    v51 = String._bridgeToObjectiveC()();
    v52 = objc_msgSend(v47, "internalErrorWithDebugDescription:", v51, swift_bridgeObjectRelease(v50).n128_f64[0]);

    v18 = (__CFString *)v52;
    a2(v52);
  }

}

void sub_1001350B4(void *a1, uint64_t a2, void (*a3)(id), uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  id v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  id v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  NSString v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t aBlock[5];
  _QWORD *v41;

  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001AAA8(v10, (uint64_t)qword_10083BFA8);
  v12 = a1;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v38 = a4;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = v11;
    v16 = swift_slowAlloc(32, -1);
    aBlock[0] = v16;
    *(_DWORD *)v15 = 136446210;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v18 = a5;
    v20 = v19;
    v39 = sub_10001A820(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, aBlock);

    v21 = v20;
    a5 = v18;
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "XPCSyncInterface.RestartCloudKitSync: Restart CloudKit sync {reason: %{public}s}", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v22 = v15;
    a4 = v38;
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

  }
  v23 = objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController), "cloudContext", v37);
  if (v23)
  {
    v24 = v23;
    v25 = (_QWORD *)swift_allocObject(&unk_1007E6038, 56, 7);
    v25[2] = v12;
    v25[3] = v24;
    v25[4] = a5;
    v25[5] = a3;
    v25[6] = a4;
    aBlock[4] = (uint64_t)sub_10013D3F8;
    v41 = v25;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000094C8;
    aBlock[3] = (uint64_t)&unk_1007E6050;
    v26 = _Block_copy(aBlock);
    v27 = v41;
    v28 = v12;
    v29 = v24;
    v30 = a5;
    swift_retain();
    swift_release(v27);
    objc_msgSend(v29, "cancelEverythingWithCompletionHandler:", v26);
    _Block_release(v26);
  }
  else
  {
    v31 = Logger.logObject.getter(0);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "XPCSyncInterface.RestartCloudKitSync: CloudContext is nil -- can't restart cloudkit sync", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    v34 = (void *)objc_opt_self(REMError);
    v35 = String._bridgeToObjectiveC()();
    v36 = objc_msgSend(v34, "internalErrorWithDebugDescription:", v35);

    v29 = v36;
    a3(v36);

  }
}

void sub_100135434(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[5];
  uint64_t v28;

  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_10083BFA8);
  v11 = a1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    aBlock[0] = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v25 = a5;
    v17 = a2;
    v18 = a3;
    v20 = v19;
    v26 = sub_10001A820(v16, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, aBlock);

    v21 = v20;
    a3 = v18;
    a2 = v17;
    a5 = v25;
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "XPCSyncInterface.RestartCloudKitSync: Done cancelling works in ICCC and now calls updateCloudContextStateWithSyncOption {reason: %{public}s}", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  v22 = swift_allocObject(&unk_1007E6088, 32, 7);
  *(_QWORD *)(v22 + 16) = a4;
  *(_QWORD *)(v22 + 24) = a5;
  aBlock[4] = (uint64_t)sub_10013D404;
  v28 = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100135698;
  aBlock[3] = (uint64_t)&unk_1007E60A0;
  v23 = _Block_copy(aBlock);
  v24 = v28;
  swift_retain();
  swift_release(v24);
  objc_msgSend(a2, "updateCloudContextStateWithSyncOption:syncReason:withCompletionHandler:", 1, a3, v23);
  _Block_release(v23);
}

void sub_100135698(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, id);
  id v7;

  v6 = *(void (**)(uint64_t, id))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, v7);
  swift_release(v5);

}

uint64_t sub_100135788(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t aBlock[5];
  uint64_t v52;

  v5 = v4;
  v46 = a2;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  __chkstk_darwin(v13);
  v47 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v15 = type metadata accessor for Logger(0);
  sub_10001AAA8(v15, (uint64_t)qword_10083BFA8);
  v16 = swift_bridgeObjectRetain_n(a1, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v41 = a3;
    v19 = swift_slowAlloc(12, -1);
    v44 = v10;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v45 = v9;
    v22 = v21;
    aBlock[0] = v21;
    *(_DWORD *)v20 = 136315138;
    v43 = v12;
    swift_bridgeObjectRetain(a1);
    v24 = Array.description.getter(v23, &type metadata for String);
    v42 = v5;
    v25 = a4;
    v27 = v26;
    swift_bridgeObjectRelease(a1);
    v28 = v24;
    a3 = v41;
    v50 = (_QWORD *)sub_10001A820(v28, v27, aBlock);
    v12 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, aBlock);
    swift_bridgeObjectRelease_n(a1, 2);
    v29 = v27;
    a4 = v25;
    v5 = v42;
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "(daemon) Requested trigger DataAccess sync {accountIDs: %s}", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v30 = v22;
    v9 = v45;
    swift_slowDealloc(v30, -1, -1);
    v31 = v20;
    v10 = v44;
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v32 = swift_allocObject(&unk_1007E5F70, 56, 7);
  *(_BYTE *)(v32 + 16) = v46 & 1;
  *(_QWORD *)(v32 + 24) = a1;
  *(_QWORD *)(v32 + 32) = v5;
  *(_QWORD *)(v32 + 40) = a3;
  *(_QWORD *)(v32 + 48) = a4;
  aBlock[4] = (uint64_t)sub_10013D368;
  v52 = v32;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007E5F88;
  v33 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  v34 = v5;
  v35 = swift_retain();
  v36 = v47;
  static DispatchQoS.unspecified.getter(v35);
  v50 = _swiftEmptyArrayStorage;
  v37 = sub_1000D3124();
  v38 = sub_10001A630((uint64_t *)&unk_100838000);
  v39 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v38, v39, v9, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v12, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v49);
  return swift_release(v52);
}

double sub_100135B28(char a1, uint64_t a2, char *a3, void (*a4)(_QWORD), void (**a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  _QWORD *v20;
  char *v21;
  double result;
  void (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _BYTE v28[25];

  if ((a1 & 1) != 0)
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10083BFA8);
    v10 = swift_bridgeObjectRetain_n(a2, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v23 = a4;
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v26 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_bridgeObjectRetain(a2);
      v16 = Array.description.getter(v15, &type metadata for String);
      v18 = v17;
      swift_bridgeObjectRelease(a2);
      v24 = sub_10001A820(v16, v18, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "(daemon) Trigger DataAccess sync {accountIDs: %s}", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      v19 = v13;
      a4 = v23;
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v26 = a2;
    v27 = 0u;
    memset(v28, 0, sizeof(v28));
    swift_bridgeObjectRetain(a2);
    sub_1004BB81C((uint64_t)&v26);
    a4(0);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  }
  else
  {
    v20 = *(_QWORD **)&a3[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_dataAccessThrottler];
    swift_bridgeObjectRetain(a2);
    v21 = a3;
    swift_retain();
    sub_100426598(0, 0, v20, a2, (uint64_t)v21, a4, a5);

    swift_release(a5);
  }
  return result;
}

void sub_100135DE0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  _BYTE v17[25];
  uint64_t v18;
  uint64_t v19;

  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v5 = type metadata accessor for Logger(0);
  sub_10001AAA8(v5, (uint64_t)qword_10083BFA8);
  v6 = swift_bridgeObjectRetain_n(a1, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(a1);
    v12 = Array.description.getter(v11, &type metadata for String);
    v14 = v13;
    swift_bridgeObjectRelease(a1);
    v18 = sub_10001A820(v12, v14, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "(daemon) Trigger DataAccess sync {accountIDs: %s}", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v15 = a1;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  swift_bridgeObjectRetain(a1);
  sub_1004BB81C((uint64_t)&v15);
  a3(0);
  swift_bridgeObjectRelease(a1);
}

uint64_t sub_1001360BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[5];
  _QWORD *v45;

  v5 = v4;
  v40 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_10083BFA8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v39 = v14;
    v20 = v11;
    v21 = v9;
    v22 = v5;
    v23 = a4;
    v24 = a2;
    v25 = v12;
    v26 = a1;
    v27 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Delete Application data from CloudKit", v19, 2u);
    v28 = v27;
    a1 = v26;
    v12 = v25;
    a2 = v24;
    a4 = v23;
    v5 = v22;
    v9 = v21;
    v11 = v20;
    v14 = v39;
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = (_QWORD *)swift_allocObject(&unk_1007E5E80, 56, 7);
  v30 = v40;
  v29[2] = v5;
  v29[3] = v30;
  v29[4] = a4;
  v29[5] = a1;
  v29[6] = a2;
  aBlock[4] = sub_10013D2B4;
  v45 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E5E98;
  v31 = _Block_copy(aBlock);
  v32 = v5;
  swift_retain();
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v33);
  v43 = _swiftEmptyArrayStorage;
  v34 = sub_1000D3124();
  v35 = sub_10001A630((uint64_t *)&unk_100838000);
  v36 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v35, v36, v9, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v41);
  return swift_release(v45);
}

void sub_100136394(uint64_t a1, void (*a2)(id), uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  NSString v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void *v30;
  NSString v31;
  id v32;
  id v33;
  _QWORD aBlock[5];
  _QWORD *v35;

  v9 = *(void **)(a1 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController);
  v10 = objc_msgSend(v9, "cloudContext");
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v9, "accountUtils");
    if (v12)
    {
      v13 = v12;
      v14 = String._bridgeToObjectiveC()();
      v15 = (_QWORD *)swift_allocObject(&unk_1007E5ED0, 56, 7);
      v15[2] = a2;
      v15[3] = a3;
      v15[4] = v13;
      v15[5] = a4;
      v15[6] = a5;
      aBlock[4] = sub_10013D2F4;
      v35 = v15;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000E18E4;
      aBlock[3] = &unk_1007E5EE8;
      v16 = _Block_copy(aBlock);
      v17 = v35;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(a5);
      swift_release(v17);
      objc_msgSend(v11, "deleteAllApplicationDataFromServerWithAccountID:completion:", v14, v16);
      _Block_release(v16);

      swift_release(v13);
      return;
    }
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001AAA8(v25, (uint64_t)qword_10083BFA8);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Missing account utils -- can't purge migration state cache", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v30 = (void *)objc_opt_self(REMError);
    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v30, "internalErrorWithDebugDescription:", v31);

    v33 = v32;
    a2(v32);

  }
  else
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001AAA8(v18, (uint64_t)qword_10083BFA8);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "CloudContext is nil -- can't delete server data", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = (void *)objc_opt_self(REMError);
    v24 = String._bridgeToObjectiveC()();
    v33 = objc_msgSend(v23, "internalErrorWithDebugDescription:", v24);

    a2(v33);
  }

}

uint64_t sub_100136740(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  if (a1)
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10083BFA8);
    swift_errorRetain(a1);
    v10 = swift_errorRetain(a1);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v23 = a1;
      v24 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_errorRetain(a1);
      v15 = sub_10001A630(&qword_10083C158);
      v16 = String.init<A>(describing:)(&v23, v15);
      v18 = v17;
      v23 = sub_10001A820(v16, v17, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      swift_bridgeObjectRelease(v18);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to delete application data from server {error: %s}", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    return a2(a1);
  }
  else
  {
    v21 = (_QWORD *)swift_allocObject(&unk_1007E5F20, 32, 7);
    v21[2] = a2;
    v21[3] = a3;
    swift_retain();
    sub_100553C2C(a5, a6, (uint64_t)sub_10013D328, v21);
    return swift_release(v21);
  }
}

uint64_t sub_100136984(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v4 = type metadata accessor for Logger(0);
    sub_10001AAA8(v4, (uint64_t)qword_10083BFA8);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v15 = a1;
      v16 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_errorRetain(a1);
      v10 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v11 = String.init<A>(describing:)(&v15, v10);
      v13 = v12;
      v15 = sub_10001A820(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to purge migration state cache {error: %s}", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  return a2(a1);
}

uint64_t sub_100136B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD aBlock[5];
  _QWORD *v43;

  v5 = v4;
  v38 = a1;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_10083BFA8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v37 = v14;
    v20 = v11;
    v21 = v9;
    v22 = v5;
    v23 = a2;
    v24 = a4;
    v25 = v12;
    v26 = a3;
    v27 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Reset migration state", v19, 2u);
    v28 = v27;
    a3 = v26;
    v12 = v25;
    a4 = v24;
    a2 = v23;
    v5 = v22;
    v9 = v21;
    v11 = v20;
    v14 = v37;
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = (_QWORD *)swift_allocObject(&unk_1007E5E08, 56, 7);
  v30 = v38;
  v29[2] = v5;
  v29[3] = v30;
  v29[4] = a2;
  v29[5] = a3;
  v29[6] = a4;
  aBlock[4] = sub_10013D200;
  v43 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E5E20;
  v31 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  static DispatchQoS.unspecified.getter(v5);
  v41 = _swiftEmptyArrayStorage;
  v32 = sub_1000D3124();
  v33 = sub_10001A630((uint64_t *)&unk_100838000);
  v34 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v33, v34, v9, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v39);
  return swift_release(v43);
}

void sub_100136E54(char *a1, uint64_t a2, unint64_t a3, void (*a4)(id), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  unint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t *v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  Class isa;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  NSString v51;
  void *v52;
  NSString v53;
  id v54;
  uint64_t v55;
  id v56;
  void (*v57)(id);
  uint64_t v58;
  uint64_t v59;

  v57 = a4;
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100279E94();
  v12 = *(void **)&a1[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController];
  sub_10027A2C4(v12);
  if (a3)
  {
    v13 = a3;
  }
  else
  {
    v14 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
    v15 = objc_msgSend(v14, "unsafeUntilSystemReady_primaryICloudACAccount");

    if (!v15)
    {
      if (qword_100836D58 != -1)
        swift_once(&qword_100836D58, sub_1001331B4);
      v45 = type metadata accessor for Logger(0);
      v46 = sub_10001AAA8(v45, (uint64_t)qword_10083BFA8);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "deleteApplicationDataFromCloudKit: accountIdentifier is nil", v49, 2u);
        swift_slowDealloc(v49, -1, -1);
      }

      v50 = (void *)objc_opt_self(REMError);
      v51 = String._bridgeToObjectiveC()();
      v56 = objc_msgSend(v50, "internalErrorWithDebugDescription:", v51);

      v57(v56);
      return;
    }
    v16 = objc_msgSend(v15, "identifier");
    if (!v16)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return;
    }
    v17 = v16;
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v13 = v18;

    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001AAA8(v19, (uint64_t)qword_10083BFA8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = a5;
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Primary account found - calling unmigration service for the account", v24, 2u);
      v25 = v24;
      a5 = v23;
      swift_slowDealloc(v25, -1, -1);
    }

  }
  swift_bridgeObjectRetain(a3);
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v12, "newBackgroundContextWithAuthor:", v26);

  __chkstk_darwin(v28);
  *(&v55 - 4) = a2;
  *(&v55 - 3) = v13;
  *(&v55 - 2) = (uint64_t)v27;
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&v59, sub_10013CF3C, &v55 - 6, &type metadata for Bool);
  v56 = v27;
  if (v59 == 1)
  {
    UUID.init(uuidString:)(a2, v13);
    swift_bridgeObjectRelease(v13);
    v29 = type metadata accessor for UUID(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v11, 1, v29) != 1)
    {
      v31 = (void *)objc_opt_self(REMAccount);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v29);
      v33 = objc_msgSend(v31, "objectIDWithUUID:", isa);

      sub_10027A4DC(v33, v12);
      v35 = v34;
      v36 = (_QWORD *)swift_allocObject(&unk_1007E5E58, 48, 7);
      v36[2] = v57;
      v36[3] = a5;
      v36[4] = a1;
      v36[5] = v33;
      swift_retain();
      v37 = a1;
      v38 = v33;
      sub_100270C30((uint64_t)sub_10013D240, (uint64_t)v36);

      swift_release(v35);
      swift_release(v36);
      return;
    }
    goto LABEL_25;
  }
  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v39 = type metadata accessor for Logger(0);
  sub_10001AAA8(v39, (uint64_t)qword_10083BFA8);
  swift_bridgeObjectRetain(v13);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v59 = v44;
    *(_DWORD *)v43 = 136315138;
    swift_bridgeObjectRetain(v13);
    v58 = sub_10001A820(a2, v13, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease_n(v13, 3);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "deleteApplicationDataFromCloudKit: accountIdentifier { %s } is not from CloudKit account", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v13, 2);
  }
  v52 = (void *)objc_opt_self(REMError);
  v53 = String._bridgeToObjectiveC()();
  v54 = objc_msgSend(v52, "internalErrorWithDebugDescription:", v53);

  v57(v54);
}

void sub_1001377A0(char a1, void *a2, void (*a3)(id), uint64_t a4, double a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  id v32;
  void *v33;
  NSString v34;
  uint64_t v35;
  double v36;
  uint64_t v37;

  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001AAA8(v17, (uint64_t)qword_10083BFA8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v21 = 134217984;
      v36 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Server unmigration succeed {timeElapsed: %f}", v21, 0xCu);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = objc_msgSend(a7, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    sub_1001360BC(v24, v26, (uint64_t)a3, a4);
    swift_bridgeObjectRelease(v26);
  }
  else
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10001AAA8(v27, (uint64_t)qword_10083BFA8);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to unmigrate account - server returned error", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    if (a2)
    {
      v32 = a2;
    }
    else
    {
      v33 = (void *)objc_opt_self(REMError);
      v34 = String._bridgeToObjectiveC()();
      v32 = objc_msgSend(v33, "internalErrorWithDebugDescription:", v34);

    }
    swift_errorRetain(a2);
    a3(v32);
    swift_errorRelease(v32);
  }
}

uint64_t sub_100137AD4(void *a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)&v5[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue];
  v17 = swift_allocObject(&unk_1007E5C78, 56, 7);
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = v5;
  *(_BYTE *)(v17 + 32) = a2;
  *(_BYTE *)(v17 + 33) = a3;
  *(_QWORD *)(v17 + 40) = a4;
  *(_QWORD *)(v17 + 48) = a5;
  aBlock[4] = sub_10013D0C8;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E5C90;
  v18 = _Block_copy(aBlock);
  v19 = a1;
  v20 = v5;
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_1000D3124();
  v23 = sub_10001A630((uint64_t *)&unk_100838000);
  v24 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v11, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v27);
  return swift_release(v31);
}

uint64_t sub_100137CC0(void *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  NSString v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  void **v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void ***v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  dispatch_group_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  void *ObjCClassFromMetadata;
  Class isa;
  id v83;
  id v84;
  id v85;
  void **v86;
  void **v87;
  uint64_t v88;
  id v89;
  void *v90;
  void **v91;
  void **v92;
  NSObject *v93;
  os_log_type_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  void **v98;
  _QWORD *v99;
  void **v100;
  uint64_t v101;
  void **v102;
  void *v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  dispatch_group_t v107;
  _QWORD *v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  id v112;
  id v113;
  NSObject *v114;
  _QWORD *v115;
  id v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  void **v120;
  uint64_t v121;
  id v122;
  NSObject *v123;
  id v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  dispatch_group_t v137;
  uint64_t v138;
  void *v139;
  _QWORD v140[3];
  char v141[16];
  _QWORD *v142;
  void **aBlock;
  uint64_t v144;
  void *v145;
  void *v146;
  void *v147;
  _QWORD *v148;

  v130 = a6;
  v128 = a5;
  v126 = a4;
  v125 = a3;
  v138 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v135 = *(_QWORD *)(v7 - 8);
  v136 = v7;
  __chkstk_darwin(v7);
  v134 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v132 = *(_QWORD *)(v9 - 8);
  v133 = v9;
  __chkstk_darwin(v9);
  v131 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v13 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v117 - v19;
  v127 = swift_allocObject(&unk_1007E5CC8, 24, 7);
  *(_QWORD *)(v127 + 16) = 0;
  v129 = swift_allocObject(&unk_1007E5CF0, 24, 7);
  *(_QWORD *)(v129 + 16) = 0;
  v137 = dispatch_group_create();
  v21 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v22 = objc_msgSend(v21, "accountStore");

  v139 = a1;
  v23 = objc_msgSend(a1, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

  UUID.uuidString.getter(v24);
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t))(v15 + 8);
  v27(v20, v14);
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v22, "accountWithIdentifier:", v28, swift_bridgeObjectRelease(v26).n128_f64[0]);

  if (!v29)
  {
    __break(1u);
LABEL_30:
    __break(1u);
  }
  v30 = objc_msgSend(v29, "displayAccount");

  if (!v30)
    goto LABEL_30;
  v31 = objc_msgSend(v30, "identifier");

  if (!v31)
  {
LABEL_6:
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v36 = type metadata accessor for Logger(0);
    sub_10001AAA8(v36, (uint64_t)qword_10083BFA8);
    v37 = v139;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v40 = 138543362;
      aBlock = v37;
      v42 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v144);
      *v41 = v37;

      _os_log_impl((void *)&_mh_execute_header, v38, v39, "migrateICloudCalDavToCloudKit: Couldn't determine the display account ID for setting flag didChooseToMigrateLocally {accountID: %{public}@}", v40, 0xCu);
      v43 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v41, 1, v43);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

    }
    v44 = v138;
    goto LABEL_12;
  }
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;
  UUID.init(uuidString:)(v32, v33);
  v35 = swift_bridgeObjectRelease(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v15 + 48))(v13, 1, v14, v35) == 1)
  {

    sub_10011E85C((uint64_t)v13);
    goto LABEL_6;
  }
  v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
  v44 = v138;
  v79 = (void *)(*(uint64_t (**)(uint64_t))(v138
                                                   + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeProvider))(v64);
  v80 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v80);
  v124 = v79;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v83 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

  v84 = v124;
  aBlock = 0;
  v85 = objc_msgSend(v124, "fetchAccountWithObjectID:error:", v83, &aBlock);

  v86 = aBlock;
  if (v85)
  {
    v87 = aBlock;
    if ((objc_msgSend(v85, "didChooseToMigrateLocally") & 1) != 0)
    {
      v122 = v85;
      if (qword_100836D58 != -1)
        swift_once(&qword_100836D58, sub_1001331B4);
      v88 = type metadata accessor for Logger(0);
      sub_10001AAA8(v88, (uint64_t)qword_10083BFA8);
      v89 = v31;
      v90 = v139;
      v91 = (void **)v89;
      v92 = v90;
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.default.getter(v93);
      v95 = v94;
      if (os_log_type_enabled(v93, v94))
      {
        v96 = swift_slowAlloc(22, -1);
        LODWORD(v121) = v95;
        v97 = v96;
        v118 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v97 = 138543618;
        v123 = v93;
        v117 = v97 + 12;
        aBlock = v91;
        v119 = &v144;
        v98 = v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v144);
        v99 = v118;
        *v118 = v31;
        v120 = v98;

        *(_WORD *)(v97 + 12) = 2114;
        aBlock = v92;
        v100 = v92;
        v93 = v123;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v119);
        v99[1] = v92;

        _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v121, "migrateICloudCalDavToCloudKit: Account flag didChooseToMigrateLocally is already true {displayACAccountID: %{public}@, accountID: %{public}@}", (uint8_t *)v97, 0x16u);
        v101 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v99, 2, v101);
        swift_slowDealloc(v99, -1, -1);
        swift_slowDealloc(v97, -1, -1);
        v92 = v120;
        v102 = (void **)v124;
      }
      else
      {

        v102 = v92;
      }
    }
    else
    {
      v123 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", v84);
      v122 = -[NSObject updateAccount:](v123, "updateAccount:", v85);
      objc_msgSend(v122, "setDidChooseToMigrateLocally:", 1);
      v107 = v137;
      dispatch_group_enter(v137);
      v121 = *(_QWORD *)(v44 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue);
      v108 = (_QWORD *)swift_allocObject(&unk_1007E5D90, 40, 7);
      v109 = v139;
      v108[2] = v31;
      v108[3] = v109;
      v108[4] = v107;
      v147 = sub_10013D1DC;
      v148 = v108;
      aBlock = _NSConcreteStackBlock;
      v144 = 1107296256;
      v145 = sub_1000E18E4;
      v146 = &unk_1007E5DA8;
      v102 = (void **)v85;
      v110 = _Block_copy(&aBlock);
      v111 = v148;
      v112 = v31;
      v113 = v109;
      v114 = v107;
      v115 = v111;
      v93 = v123;
      swift_release(v115);
      -[NSObject saveWithQueue:completion:](v93, "saveWithQueue:completion:", v121, v110);
      _Block_release(v110);

      v92 = (void **)v124;
    }
    v116 = v122;

    v27(v17, v14);
  }
  else
  {
    v103 = v84;
    v104 = aBlock;
    v105 = _convertNSErrorToError(_:)(v86);

    swift_willThrow(v106);
    v27(v17, v14);
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v65 = type metadata accessor for Logger(0);
    sub_10001AAA8(v65, (uint64_t)qword_10083BFA8);
    v66 = v139;
    swift_errorRetain(v105);
    v67 = v66;
    v68 = swift_errorRetain(v105);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = swift_slowAlloc(22, -1);
      v72 = (_QWORD *)swift_slowAlloc(8, -1);
      v124 = (id)swift_slowAlloc(32, -1);
      v142 = v67;
      aBlock = (void **)v124;
      *(_DWORD *)v71 = 138543618;
      v73 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &aBlock);
      *v72 = v67;

      v44 = v138;
      *(_WORD *)(v71 + 12) = 2082;
      swift_getErrorValue(v105, v141, v140);
      v74 = Error.rem_errorDescription.getter(v140[1], v140[2]);
      v76 = v75;
      v142 = (_QWORD *)sub_10001A820(v74, v75, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &aBlock);
      swift_bridgeObjectRelease(v76);
      swift_errorRelease(v105);
      swift_errorRelease(v105);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "migrateICloudCalDavToCloudKit: Failed to set flag didChooseToMigrateLocally before migration {accountID: %{public}@, error: %{public}s}", (uint8_t *)v71, 0x16u);
      v77 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v72, 1, v77);
      swift_slowDealloc(v72, -1, -1);
      v78 = v124;
      swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v71, -1, -1);

      swift_errorRelease(v105);
    }
    else
    {
      swift_errorRelease(v105);

      swift_errorRelease(v105);
      swift_errorRelease(v105);

    }
  }
LABEL_12:
  sub_10027A4DC(v139, *(void **)(v44 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController));
  v139 = v45;
  v46 = v137;
  dispatch_group_enter(v137);
  v47 = (_QWORD *)swift_allocObject(&unk_1007E5D18, 40, 7);
  v48 = v127;
  v49 = v129;
  v47[2] = v127;
  v47[3] = v49;
  v47[4] = v46;
  v50 = v46;
  swift_retain();
  swift_retain();
  sub_100271138(v125 & 1, v126 & 1, (uint64_t)sub_10013D158, (uint64_t)v47);
  swift_release(v47);
  v51 = *(_QWORD *)(v44 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue);
  v52 = (_QWORD *)swift_allocObject(&unk_1007E5D40, 48, 7);
  v53 = v130;
  v52[2] = v128;
  v52[3] = v53;
  v52[4] = v48;
  v52[5] = v49;
  v147 = sub_10013D19C;
  v148 = v52;
  aBlock = _NSConcreteStackBlock;
  v144 = 1107296256;
  v145 = sub_1000094C8;
  v146 = &unk_1007E5D58;
  v54 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  v55 = swift_retain();
  v56 = v131;
  static DispatchQoS.unspecified.getter(v55);
  v142 = _swiftEmptyArrayStorage;
  v57 = sub_1000D3124();
  v58 = sub_10001A630((uint64_t *)&unk_100838000);
  v59 = sub_1000D316C();
  v60 = v134;
  v61 = v136;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v142, v58, v59, v136, v57);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v56, v60, v51, v54);
  _Block_release(v54);

  swift_release(v139);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v60, v61);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v56, v133);
  v62 = v148;
  swift_release(v48);
  swift_release(v49);
  return swift_release(v62);
}

void sub_100138A20(uint64_t a1, void *a2, void *a3, NSObject *a4)
{
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  id v35;
  uint64_t v36;
  NSObject *log;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v8 = type metadata accessor for Logger(0);
    sub_10001AAA8(v8, (uint64_t)qword_10083BFA8);
    v9 = a2;
    v10 = a3;
    swift_errorRetain(a1);
    v11 = v9;
    v12 = v10;
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(32, -1);
      v17 = (_QWORD *)swift_slowAlloc(16, -1);
      v38 = swift_slowAlloc(32, -1);
      v39 = (uint64_t)v11;
      v40 = v38;
      *(_DWORD *)v16 = 138543874;
      log = v14;
      v18 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *v17 = v11;

      *(_WORD *)(v16 + 12) = 2114;
      v39 = (uint64_t)v12;
      v19 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      v17[1] = v12;

      *(_WORD *)(v16 + 22) = 2082;
      v39 = a1;
      swift_errorRetain(a1);
      v20 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v21 = String.init<A>(describing:)(&v39, v20);
      v23 = v22;
      v39 = sub_10001A820(v21, v22, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, log, v15, "migrateICloudCalDavToCloudKit: Failed to save flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@, error: %{public}s}", (uint8_t *)v16, 0x20u);
      v24 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v17, 2, v24);
      swift_slowDealloc(v17, -1, -1);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);

      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_10083BFA8);
    v26 = a2;
    v27 = a3;
    v28 = v26;
    v29 = v27;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v32 = 138543618;
      v40 = (uint64_t)v28;
      v34 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
      *v33 = v28;

      *(_WORD *)(v32 + 12) = 2114;
      v40 = (uint64_t)v29;
      v35 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
      v33[1] = v29;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "migrateICloudCalDavToCloudKit: Saved flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@}", (uint8_t *)v32, 0x16u);
      v36 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v33, 2, v36);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

    }
  }
  dispatch_group_leave(a4);
}

void sub_100138EC0(void *a1, char a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  void *v8;
  id v9;
  uint64_t v11;
  _BYTE v12[24];

  if ((a2 & 1) != 0)
  {
    swift_beginAccess(a4 + 16, v12, 1, 0);
    v11 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = a1;
    swift_errorRetain(a1);
    swift_errorRelease(v11);
  }
  else
  {
    swift_beginAccess(a3 + 16, v12, 1, 0);
    v8 = *(void **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = a1;
    v9 = a1;

  }
  dispatch_group_leave(a5);
}

void sub_100138F58(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _BYTE v12[24];

  v7 = a4 + 16;
  swift_beginAccess(a3 + 16, v12, 0, 0);
  v8 = *(void **)(a3 + 16);
  swift_beginAccess(v7, &v11, 0, 0);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = v8;
  swift_errorRetain(v9);
  a1(v8, v9);
  swift_errorRelease(v9);

}

uint64_t sub_100139030(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, void *aBlock, uint64_t a7, uint64_t a8, void (*a9)(id, uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v15;
  uint64_t v16;
  id v17;
  id v18;

  v15 = _Block_copy(aBlock);
  v16 = swift_allocObject(a7, 24, 7);
  *(_QWORD *)(v16 + 16) = v15;
  v17 = a3;
  v18 = a1;
  a9(v17, a4, a5, a8, v16);

  return swift_release(v16);
}

uint64_t sub_1001390DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)&v4[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue];
  v16 = (_QWORD *)swift_allocObject(&unk_1007E5BD8, 56, 7);
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = v4;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = sub_10013CFEC;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E5BF0;
  v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  v18 = v4;
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_1000D3124();
  v21 = sub_10001A630((uint64_t *)&unk_100838000);
  v22 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release(v28);
}

void sub_1001392C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, id), uint64_t a5)
{
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  NSString v20;
  id v21;
  id v22;
  NSPredicate *v23;
  Swift::String v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  NSString v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void *v41;
  NSString v42;
  id v43;

  if (a2)
  {
    v8 = a2;
LABEL_10:
    v19 = (void *)objc_opt_self(REMCloudContainer);
    swift_bridgeObjectRetain(a2);
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v19, "newCloudContainerForAccountID:", v20, swift_bridgeObjectRelease(v8).n128_f64[0]);

    v22 = objc_msgSend(v21, "privateCloudDatabase");
    sub_1000151B0(0, &qword_10083C160, CKQuery_ptr);
    v23 = (NSPredicate *)objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithValue:", 1);
    v24._countAndFlagsBits = 0x6F6974617267694DLL;
    v24._object = (void *)0xEE0065686361436ELL;
    isa = CKQuery.init(recordType:predicate:)(v24, v23).super.isa;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RemindersMigration"));
    v27 = v26;
    static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v29 = v28;
    v30 = objc_allocWithZone((Class)CKRecordZoneID);
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    v32 = String._bridgeToObjectiveC()();
    v33 = objc_msgSend(v30, "initWithZoneName:ownerName:databaseScope:", v31, v32, 2, swift_bridgeObjectRelease(v29).n128_f64[0]);

    v34 = swift_allocObject(&unk_1007E5C28, 32, 7);
    *(_QWORD *)(v34 + 16) = a4;
    *(_QWORD *)(v34 + 24) = a5;
    v35 = v33;
    swift_retain();
    CKDatabase.fetch(withQuery:inZoneWith:desiredKeys:resultsLimit:completionHandler:)(isa, v33, 0, CKQueryOperationMaximumResults, sub_10013CFF8, v34);

    swift_release(v34);
    return;
  }
  v9 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v10 = objc_msgSend(v9, "unsafeUntilSystemReady_primaryICloudACAccount");

  if (v10)
  {
    v11 = objc_msgSend(v10, "identifier");
    if (v11)
    {
      v12 = v11;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v8 = v13;

      if (qword_100836D58 != -1)
        swift_once(&qword_100836D58, sub_1001331B4);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10001AAA8(v14, (uint64_t)qword_10083BFA8);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Use primary account as default for debug downloading migration cache", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_10001AAA8(v36, (uint64_t)qword_10083BFA8);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "debugDownloadMigrationCache: accountIdentifier is nil", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    v41 = (void *)objc_opt_self(REMError);
    v42 = String._bridgeToObjectiveC()();
    v43 = objc_msgSend(v41, "internalErrorWithDebugDescription:", v42);

    a4(0, v43);
  }
}

void sub_10013975C(uint64_t a1, void *a2, char a3, void (*a4)(_QWORD, id))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void *v63;
  Swift::String v64;
  void *object;
  unint64_t v66;
  NSString v67;
  id v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  Swift::String v75;
  unint64_t v76;
  NSString v77;
  id v78;
  __n128 v79;
  uint64_t v80;
  void (*v81)(_QWORD, id);
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  id v86;
  _QWORD v87[3];
  char v88[8];
  _QWORD v89[3];
  char v90[8];
  unint64_t v91;
  unint64_t v92;

  v5 = a1;
  if ((a3 & 1) != 0)
  {
    v63 = (void *)objc_opt_self(REMError);
    swift_errorRetain(v5);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(0xE000000000000000);
    v91 = 0xD000000000000025;
    v92 = 0x80000001006F98B0;
    swift_getErrorValue(v5, v90, v89);
    v64._countAndFlagsBits = Error.localizedDescription.getter(v89[1], v89[2]);
    object = v64._object;
    String.append(_:)(v64);
    swift_bridgeObjectRelease(object);
    v66 = v92;
    v67 = String._bridgeToObjectiveC()();
    v68 = objc_msgSend(v63, "internalErrorWithDebugDescription:", v67, swift_bridgeObjectRelease(v66).n128_f64[0]);

    a4(0, v68);
    sub_10013D004(v5, a2, 1);
    return;
  }
  swift_bridgeObjectRetain(a1);
  v85 = (_QWORD *)sub_1002B06C8((uint64_t)_swiftEmptyArrayStorage);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease(v5);
    v7 = &_swiftEmptyDictionarySingleton;
LABEL_40:
    if (v7[2])
    {
      swift_bridgeObjectRelease(v85);
      v69 = (void *)objc_opt_self(REMError);
      v91 = 0;
      v92 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease(v92);
      v91 = 0xD000000000000025;
      v92 = 0x80000001006F98B0;
      v70 = sub_1000151B0(0, &qword_100844060, CKRecordID_ptr);
      v71 = sub_10013D03C();
      v72 = Dictionary.description.getter(v7, v70, &type metadata for String, v71);
      v74 = v73;
      swift_bridgeObjectRelease(v7);
      v75._countAndFlagsBits = v72;
      v75._object = v74;
      String.append(_:)(v75);
      swift_bridgeObjectRelease(v74);
      v76 = v92;
      v77 = String._bridgeToObjectiveC()();
      v78 = objc_msgSend(v69, "internalErrorWithDebugDescription:", v77, swift_bridgeObjectRelease(v76).n128_f64[0]);

      a4(0, v78);
    }
    else
    {
      v79 = swift_bridgeObjectRelease(v7);
      ((void (*)(_QWORD *, _QWORD, __n128))a4)(v85, 0, v79);
      swift_bridgeObjectRelease(v85);
    }
    return;
  }
  v81 = a4;
  v7 = &_swiftEmptyDictionarySingleton;
  v8 = (_BYTE *)(v5 + 48);
  v84 = v5;
  while (1)
  {
    v11 = (void *)*((_QWORD *)v8 - 2);
    v10 = (void *)*((_QWORD *)v8 - 1);
    if ((*v8 & 1) != 0)
      break;
    sub_10013D030(*((void **)v8 - 1), 0);
    sub_10013D030(v10, 0);
    v86 = v11;
    v30 = objc_msgSend(v10, "recordID");
    v31 = objc_msgSend(v30, "recordName");

    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

    v35 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.getter(1635017028, 0xE400000000000000, v35, &type metadata for Data, &protocol witness table for Data);
    v36 = v92;
    if (v92 >> 60 == 15)
    {
      swift_bridgeObjectRetain(v85);
      v37 = sub_10001A6DC(v32, v34);
      v39 = v38;
      swift_bridgeObjectRelease(v85);
      if ((v39 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
          sub_1002D79FC();
        swift_bridgeObjectRelease(*(_QWORD *)(v85[6] + 16 * v37 + 8));
        v40 = (uint64_t *)(v85[7] + 16 * v37);
        v41 = *v40;
        v42 = v40[1];
        sub_100289B9C(v37, (uint64_t)v85);
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(0x8000000000000000);
        sub_1000A71C8(v41, v42);
      }
      else
      {
        swift_bridgeObjectRelease(v34);
      }
      sub_1001172E0(v10, 0);

      sub_1001172E0(v10, 0);
    }
    else
    {
      v82 = v7;
      v83 = v91;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v85);
      v45 = sub_10001A6DC(v32, v34);
      v46 = v85[2];
      v47 = (v44 & 1) == 0;
      v48 = v46 + v47;
      if (__OFADD__(v46, v47))
        goto LABEL_44;
      v49 = v44;
      if (v85[3] >= v48)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1002D79FC();
      }
      else
      {
        sub_1002CFD0C(v48, isUniquelyReferenced_nonNull_native);
        v50 = sub_10001A6DC(v32, v34);
        if ((v49 & 1) != (v51 & 1))
          goto LABEL_48;
        v45 = v50;
      }
      if ((v49 & 1) != 0)
      {
        v57 = v85[7] + 16 * v45;
        sub_1000A71C8(*(_QWORD *)v57, *(_QWORD *)(v57 + 8));
        *(_QWORD *)v57 = v83;
        *(_QWORD *)(v57 + 8) = v36;
      }
      else
      {
        v85[(v45 >> 6) + 8] |= 1 << v45;
        v58 = (uint64_t *)(v85[6] + 16 * v45);
        *v58 = v32;
        v58[1] = v34;
        v59 = (unint64_t *)(v85[7] + 16 * v45);
        *v59 = v83;
        v59[1] = v36;
        v60 = v85[2];
        v54 = __OFADD__(v60, 1);
        v61 = v60 + 1;
        if (v54)
          goto LABEL_46;
        v85[2] = v61;
        swift_bridgeObjectRetain(v34);
      }
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_1001172E0(v10, 0);

      sub_1001172E0(v10, 0);
      v5 = v84;
      v7 = v82;
    }
LABEL_6:
    v8 += 24;
    if (!--v6)
    {
      swift_bridgeObjectRelease(v5);
      a4 = v81;
      goto LABEL_40;
    }
  }
  swift_getErrorValue(*((_QWORD *)v8 - 1), v88, v87);
  v12 = v87[1];
  v13 = v87[2];
  v14 = v11;
  sub_10013D030(v10, 1);
  sub_10013D030(v10, 1);
  v15 = v14;
  v16 = Error.localizedDescription.getter(v12, v13);
  v18 = v17;
  v19 = swift_isUniquelyReferenced_nonNull_native(v7);
  v91 = (unint64_t)v7;
  v21 = sub_1002C6C34((uint64_t)v15);
  v22 = v7;
  v23 = v7[2];
  v24 = (v20 & 1) == 0;
  v25 = v23 + v24;
  if (!__OFADD__(v23, v24))
  {
    v26 = v20;
    if (v22[3] < v25)
    {
      sub_1002CFA28(v25, v19);
      v27 = sub_1002C6C34((uint64_t)v15);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_47;
      v21 = v27;
      v29 = (_QWORD *)v91;
      if ((v26 & 1) == 0)
        goto LABEL_24;
LABEL_4:
      v9 = (uint64_t *)(v29[7] + 16 * v21);
      swift_bridgeObjectRelease(v9[1]);
      *v9 = v16;
      v9[1] = v18;
      v7 = v29;
LABEL_5:

      swift_bridgeObjectRelease(0x8000000000000000);
      sub_1001172E0(v10, 1);
      sub_1001172E0(v10, 1);
      v5 = v84;
      goto LABEL_6;
    }
    if ((v19 & 1) != 0)
    {
      v29 = (_QWORD *)v91;
      if ((v20 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_1002D7848();
      v29 = (_QWORD *)v91;
      if ((v26 & 1) != 0)
        goto LABEL_4;
    }
LABEL_24:
    v29[(v21 >> 6) + 8] |= 1 << v21;
    *(_QWORD *)(v29[6] + 8 * v21) = v15;
    v52 = (uint64_t *)(v29[7] + 16 * v21);
    *v52 = v16;
    v52[1] = v18;
    v53 = v29[2];
    v54 = __OFADD__(v53, 1);
    v55 = v53 + 1;
    if (v54)
      goto LABEL_45;
    v7 = v29;
    v29[2] = v55;
    v56 = v15;
    goto LABEL_5;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  v80 = sub_1000151B0(0, &qword_100844060, CKRecordID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v80);
  __break(1u);
LABEL_48:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100139EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSDictionary v5;
  uint64_t v6;
  id v7;

  if (!a1)
  {
    v5.super.isa = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

uint64_t sub_100139F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[5];
  _QWORD *v45;

  v5 = v4;
  v40 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_10083BFA8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v39 = v14;
    v20 = v11;
    v21 = v9;
    v22 = v5;
    v23 = a2;
    v24 = a4;
    v25 = v12;
    v26 = a1;
    v27 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Manual fetch user record", v19, 2u);
    v28 = v27;
    a1 = v26;
    v12 = v25;
    a4 = v24;
    a2 = v23;
    v5 = v22;
    v9 = v21;
    v11 = v20;
    v14 = v39;
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = (_QWORD *)swift_allocObject(&unk_1007E5B10, 56, 7);
  v30 = v40;
  v29[2] = v5;
  v29[3] = v30;
  v29[4] = a4;
  v29[5] = a1;
  v29[6] = a2;
  aBlock[4] = sub_10013CFD4;
  v45 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E5B28;
  v31 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  v32 = v5;
  v33 = swift_retain();
  static DispatchQoS.unspecified.getter(v33);
  v43 = _swiftEmptyArrayStorage;
  v34 = sub_1000D3124();
  v35 = sub_10001A630((uint64_t *)&unk_100838000);
  v36 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v35, v36, v9, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v41);
  return swift_release(v45);
}

void sub_10013A25C(uint64_t a1, void (*a2)(_QWORD, id), uint64_t a3, uint64_t a4, unint64_t a5)
{
  void *v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  NSString v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSString v29;
  id v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  void *v47;
  NSString v48;
  id v49;
  void *v50;
  Swift::String v51;
  unint64_t v52;
  NSString v53;
  id v54;
  _QWORD v55[6];
  id v56;
  id v57;
  void **aBlock;
  unint64_t v59;
  void (*v60)(uint64_t, void *, void *);
  void *v61;
  uint64_t (*v62)();
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v9 = *(void **)(a1 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController);
  v10 = objc_msgSend(v9, "cloudContext");
  if (!v10)
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_10083BFA8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "CloudContext is nil -- can't fetch user record", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = (void *)objc_opt_self(REMError);
    v18 = String._bridgeToObjectiveC()();
    v57 = objc_msgSend(v17, "internalErrorWithDebugDescription:", v18);

    a2(0, v57);
    goto LABEL_9;
  }
  v57 = v10;
  if (a5)
  {
    v11 = a5;
    goto LABEL_17;
  }
  v19 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v20 = objc_msgSend(v19, "unsafeUntilSystemReady_primaryICloudACAccount");

  if (!v20)
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_10001AAA8(v42, (uint64_t)qword_10083BFA8);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "fetchUserRecord: accountIdentifier is nil", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    v47 = (void *)objc_opt_self(REMError);
    v48 = String._bridgeToObjectiveC()();
    v49 = objc_msgSend(v47, "internalErrorWithDebugDescription:", v48);

    a2(0, v49);
LABEL_9:

    return;
  }
  v21 = objc_msgSend(v20, "identifier");
  if (!v21)
  {
    __break(1u);
    return;
  }
  v22 = v21;
  a4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v11 = v23;

  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001AAA8(v24, (uint64_t)qword_10083BFA8);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Use primary account as default for fetching user record", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

LABEL_17:
  swift_bridgeObjectRetain(a5);
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v9, "newBackgroundContextWithAuthor:", v29);

  __chkstk_darwin(v31);
  v55[2] = a4;
  v55[3] = v11;
  v55[4] = v30;
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&aBlock, sub_10013CF3C, v55, &type metadata for Bool);
  if (aBlock == 1)
  {
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v33 = swift_allocObject(&unk_1007E5B60, 32, 7);
    *(_QWORD *)(v33 + 16) = a2;
    *(_QWORD *)(v33 + 24) = a3;
    v62 = sub_1000098EC;
    v63 = v33;
    aBlock = _NSConcreteStackBlock;
    v59 = 1107296256;
    v60 = sub_1000FF8C4;
    v61 = &unk_1007E5B78;
    v34 = _Block_copy(&aBlock);
    v35 = v63;
    swift_retain();
    swift_release(v35);
    objc_msgSend(v57, "fetchUserRecordWithAccountID:completionHandler:", v32, v34);

    _Block_release(v34);
  }
  else
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v36 = type metadata accessor for Logger(0);
    sub_10001AAA8(v36, (uint64_t)qword_10083BFA8);
    v37 = swift_bridgeObjectRetain_n(v11, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (void **)swift_slowAlloc(32, -1);
      aBlock = v41;
      v56 = v30;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain(v11);
      v64 = sub_10001A820(a4, v11, (uint64_t *)&aBlock);
      v30 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease_n(v11, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "fetchUserRecord: accountIdentifier { %s } is not from CloudKit account", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v11, 2);
    }
    v50 = (void *)objc_opt_self(REMError);
    aBlock = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(v59);
    aBlock = (void **)a4;
    v59 = v11;
    v51._countAndFlagsBits = 0xD00000000000001FLL;
    v51._object = (void *)0x80000001006F8350;
    String.append(_:)(v51);
    v52 = v59;
    v53 = String._bridgeToObjectiveC()();
    v54 = objc_msgSend(v50, "internalErrorWithDebugDescription:", v53, swift_bridgeObjectRelease(v52).n128_f64[0]);

    a2(0, v54);
  }
}

uint64_t sub_10013ACC8(void *a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v12 = _Block_copy(aBlock);
  if (a3)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    a3 = v14;
  }
  else
  {
    v13 = 0;
  }
  v15 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v15 + 16) = v12;
  v16 = a1;
  a7(v13, a3, a6, v15);

  swift_release(v15);
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_10013AD7C(int a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD aBlock[5];
  uint64_t v51;

  v8 = v7;
  v44 = a6;
  v45 = a4;
  v46 = a2;
  v43 = a1;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001AAA8(v18, (uint64_t)qword_10083BFA8);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    v42 = v17;
    v23 = v14;
    v24 = v12;
    v25 = v8;
    v26 = a5;
    v27 = a7;
    v28 = v15;
    v29 = a3;
    v30 = v22;
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Force set migration state", v22, 2u);
    v31 = v30;
    a3 = v29;
    v15 = v28;
    a7 = v27;
    a5 = v26;
    v8 = v25;
    v12 = v24;
    v14 = v23;
    v17 = v42;
    swift_slowDealloc(v31, -1, -1);
  }

  v32 = swift_allocObject(&unk_1007E5A20, 59, 7);
  v33 = v44;
  *(_QWORD *)(v32 + 16) = v8;
  *(_QWORD *)(v32 + 24) = v33;
  v34 = v45;
  *(_QWORD *)(v32 + 32) = a7;
  *(_QWORD *)(v32 + 40) = v34;
  *(_QWORD *)(v32 + 48) = a5;
  *(_BYTE *)(v32 + 56) = v43 & 1;
  *(_BYTE *)(v32 + 57) = v46 & 1;
  *(_BYTE *)(v32 + 58) = a3 & 1;
  aBlock[4] = sub_10013CF20;
  v51 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E5A38;
  v35 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a5);
  v36 = v8;
  v37 = swift_retain();
  static DispatchQoS.unspecified.getter(v37);
  v49 = _swiftEmptyArrayStorage;
  v38 = sub_1000D3124();
  v39 = sub_10001A630((uint64_t *)&unk_100838000);
  v40 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v39, v40, v12, v38);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v35);
  _Block_release(v35);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v47);
  return swift_release(v51);
}

void sub_10013B080(uint64_t a1, void (*a2)(id), uint64_t a3, uint64_t a4, unint64_t a5, char a6, char a7, char a8)
{
  void *v15;
  id v16;
  void *v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  NSString v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  NSString v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  NSString v44;
  id v45;
  uint64_t v46;
  NSString v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  void *v68;
  NSString v69;
  id v70;
  void (*v71)(id);
  void *v72;
  NSString v73;
  id v74;
  id v75;
  _QWORD v76[7];
  uint64_t v77;
  void (*v78)(id);
  id v79;
  id v80;
  uint64_t aBlock[5];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v15 = *(void **)(a1 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController);
  v16 = objc_msgSend(v15, "cloudContext");
  if (!v16)
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001AAA8(v20, (uint64_t)qword_10083BFA8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "CloudContext is nil -- can't set migration state", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = (void *)objc_opt_self(REMError);
    v26 = String._bridgeToObjectiveC()();
    v80 = objc_msgSend(v25, "internalErrorWithDebugDescription:", v26);

    a2(v80);
    goto LABEL_15;
  }
  v17 = v16;
  v18 = objc_msgSend(v15, "accountUtils");
  if (!v18)
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10001AAA8(v27, (uint64_t)qword_10083BFA8);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "AccountUtils is nil -- can't clear migration state cache", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v32 = (void *)objc_opt_self(REMError);
    v33 = String._bridgeToObjectiveC()();
    v80 = objc_msgSend(v32, "internalErrorWithDebugDescription:", v33);

    a2(v80);
LABEL_15:

    return;
  }
  v80 = v18;
  if (a5)
  {
    v78 = a2;
    v79 = v17;
    v19 = a5;
LABEL_23:
    swift_bridgeObjectRetain(a5);
    v44 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v15, "newBackgroundContextWithAuthor:", v44);

    __chkstk_darwin(v46);
    v76[2] = a4;
    v76[3] = v19;
    v76[4] = v45;
    NSManagedObjectContext.rem_performAndWait<A>(_:)(aBlock, sub_10013CF3C, v76, &type metadata for Bool);
    if (LOBYTE(aBlock[0]) == 1)
    {
      v47 = String._bridgeToObjectiveC()();
      v48 = swift_allocObject(&unk_1007E5A70, 64, 7);
      v49 = a6 & 1;
      *(_BYTE *)(v48 + 16) = v49;
      v50 = a7 & 1;
      *(_BYTE *)(v48 + 17) = a7 & 1;
      v51 = a8 & 1;
      *(_BYTE *)(v48 + 18) = a8 & 1;
      *(_QWORD *)(v48 + 24) = v78;
      *(_QWORD *)(v48 + 32) = a3;
      v52 = v45;
      v53 = v80;
      *(_QWORD *)(v48 + 40) = v80;
      *(_QWORD *)(v48 + 48) = a4;
      *(_QWORD *)(v48 + 56) = v19;
      aBlock[4] = (uint64_t)sub_10013CF84;
      v82 = v48;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000E18E4;
      aBlock[3] = (uint64_t)&unk_1007E5A88;
      v54 = _Block_copy(aBlock);
      v55 = v82;
      swift_retain();
      swift_retain();
      swift_release(v55);
      v56 = v79;
      objc_msgSend(v79, "setMigrationStateToDidChooseToMigrate:didFinishMigration:createZoneAccountIfFinishMigration:accountID:completionHandler:", v49, v50, v51, v47, v54);

      swift_release(v53);
      _Block_release(v54);

    }
    else
    {
      if (qword_100836D58 != -1)
        swift_once(&qword_100836D58, sub_1001331B4);
      v57 = type metadata accessor for Logger(0);
      sub_10001AAA8(v57, (uint64_t)qword_10083BFA8);
      swift_bridgeObjectRetain(v19);
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc(12, -1);
        v62 = swift_slowAlloc(32, -1);
        aBlock[0] = v62;
        *(_DWORD *)v61 = 136315138;
        swift_bridgeObjectRetain(v19);
        v83 = sub_10001A820(a4, v19, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
        swift_bridgeObjectRelease_n(v19, 3);
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "setMigrationStateToDidChooseToMigrate: accountIdentifier { %s } is not from CloudKit account", v61, 0xCu);
        swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v61, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v19, 2);
      }
      v71 = v78;
      v72 = (void *)objc_opt_self(REMError);
      v73 = String._bridgeToObjectiveC()();
      v74 = objc_msgSend(v72, "internalErrorWithDebugDescription:", v73);

      v75 = v74;
      v71(v74);

      swift_release(v80);
    }
    return;
  }
  v77 = a3;
  v34 = objc_msgSend((id)objc_opt_self(REMAppleAccountUtilities), "sharedInstance");
  v35 = objc_msgSend(v34, "unsafeUntilSystemReady_primaryICloudACAccount");

  if (v35)
  {
    v79 = v17;
    v36 = objc_msgSend(v35, "identifier");
    if (!v36)
    {
      __break(1u);
      return;
    }
    v37 = v36;
    a4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v19 = v38;

    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v78 = a2;
    v39 = type metadata accessor for Logger(0);
    v40 = sub_10001AAA8(v39, (uint64_t)qword_10083BFA8);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Use primary account as default for calling set migration state", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    a3 = v77;
    goto LABEL_23;
  }
  if (qword_100836D58 != -1)
    swift_once(&qword_100836D58, sub_1001331B4);
  v63 = type metadata accessor for Logger(0);
  v64 = sub_10001AAA8(v63, (uint64_t)qword_10083BFA8);
  v65 = Logger.logObject.getter(v64);
  v66 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v67 = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "setMigrationStateToDidChooseToMigrate: accountIdentifier is nil", v67, 2u);
    swift_slowDealloc(v67, -1, -1);
  }

  v68 = (void *)objc_opt_self(REMError);
  v69 = String._bridgeToObjectiveC()();
  v70 = objc_msgSend(v68, "internalErrorWithDebugDescription:", v69);

  a2(v70);
  swift_release(v80);
}

uint64_t sub_10013BC58(uint64_t a1, char a2, char a3, char a4, uint64_t (*a5)(_QWORD), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;

  if (a1)
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_10083BFA8);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(30, -1);
      v20 = swift_slowAlloc(32, -1);
      v29 = a1;
      v30 = v20;
      *(_DWORD *)v19 = 136315906;
      swift_errorRetain(a1);
      v21 = sub_10001A630(&qword_10083C158);
      v22 = String.init<A>(describing:)(&v29, v21);
      v28 = a5;
      v24 = v23;
      v29 = sub_10001A820(v22, v23, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v19 + 12) = 1024;
      LODWORD(v29) = a2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4);
      *(_WORD *)(v19 + 18) = 1024;
      LODWORD(v29) = a3 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4);
      *(_WORD *)(v19 + 24) = 1024;
      LODWORD(v29) = a4 & 1;
      a5 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to set migration state {error: %s, didChooseToMigrate: %{BOOL}d, didFinishMigration: %{BOOL}d, createZoneAccountIfFinishMigration: %{BOOL}d", (uint8_t *)v19, 0x1Eu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    return a5(a1);
  }
  else
  {
    v26 = (_QWORD *)swift_allocObject(&unk_1007E5AC0, 32, 7);
    v26[2] = a5;
    v26[3] = a6;
    swift_retain();
    sub_100553C2C(a8, a9, (uint64_t)sub_1000098EC, v26);
    return swift_release(v26);
  }
}

uint64_t sub_10013BFE4(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)&v3[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue];
  v15 = (_QWORD *)swift_allocObject(&unk_1007E59A8, 48, 7);
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = sub_10013CEE0;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007E59C0;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  v18 = a1;
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v25 = _swiftEmptyArrayStorage;
  v20 = sub_1000D3124();
  v21 = sub_10001A630((uint64_t *)&unk_100838000);
  v22 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v7, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release(v27);
}

void sub_10013C1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_clientIdentity, (uint64_t)v11);
  v8 = a2;
  v9 = a3;
  v10 = a4;
  sub_10035288C((uint64_t)v11, (uint64_t)sub_10013CEEC, (uint64_t)v7);
}

void sub_10013C494(uint64_t a1, void *a2, void (*a3)(void))
{
  uint64_t v3;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;

  v5 = a2;
  v6 = (void *)sub_1005CDB04((uint64_t)v5);
  if (!v3)
  {
    v7 = v6;
    sub_1004BB178(v6, 0);
    v9 = v8;

    if (v9)
    {
      v10 = objc_msgSend(v9, "ckServerRecord");
      a3();

    }
    else
    {
      if (qword_100836D58 != -1)
        swift_once(&qword_100836D58, sub_1001331B4);
      v11 = type metadata accessor for Logger(0);
      sub_10001AAA8(v11, (uint64_t)qword_10083BFA8);
      v12 = v5;
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v16 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v15 = 138543362;
        v20 = v12;
        v17 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
        *v16 = v12;

        _os_log_impl((void *)&_mh_execute_header, v13, v14, "fetchServerRecord: Tried to fetch non-existent object {remObjectID: %{public}@}", v15, 0xCu);
        v18 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v16, 1, v18);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);

      }
      else
      {

      }
      v19 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v12);
      swift_willThrow(v19);
    }
  }
}

void sub_10013C74C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  objc_class *v19;
  char *v20;
  uint64_t v21;
  id v22;
  os_log_t osloga;
  NSObject *oslog;
  id v25;
  objc_super v26;

  v3 = v2;
  Strong = swift_unknownObjectWeakLoadStrong((char *)v2 + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_clientConnection, a2);
  if (Strong)
  {
    v5 = (void *)Strong;
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_10083BFA8);
    v7 = v5;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      osloga = v3;
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138412290;
      v25 = v7;
      v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      *v11 = v5;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received request to observe CloudKit traffic {clientConnection: %@}", v10, 0xCu);
      v13 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v11, 1, v13);
      swift_slowDealloc(v11, -1, -1);
      v14 = v10;
      v3 = osloga;
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
    v19 = (objc_class *)type metadata accessor for RDStoreControllerCloudKitNetworkActivityObserver();
    v20 = (char *)objc_allocWithZone(v19);
    v21 = swift_unknownObjectWeakInit(&v20[OBJC_IVAR____TtC7remindd48RDStoreControllerCloudKitNetworkActivityObserver_clientConnection], 0);
    swift_unknownObjectWeakAssign(v21, v7);
    v26.receiver = v20;
    v26.super_class = v19;
    v22 = objc_msgSendSuper2(&v26, "init");
    objc_msgSend(*(id *)((char *)&v3->isa + OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController), "startObservingCloudKitNetworkActivityWithObserver:", v22);

  }
  else
  {
    if (qword_100836D58 != -1)
      swift_once(&qword_100836D58, sub_1001331B4);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001AAA8(v15, (uint64_t)qword_10083BFA8);
    oslog = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v17, "Perform has no clientConnection. Is this really an XPC call? Without a real XPC call, I cannot ask the storeController to actively notify anything.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
}

uint64_t sub_10013CB54()
{
  _QWORD *v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
}

uint64_t type metadata accessor for RDXPCSyncInterfacePerformerFactory()
{
  return objc_opt_self(_TtC7remindd34RDXPCSyncInterfacePerformerFactory);
}

uint64_t type metadata accessor for RDXPCSyncInterfacePerformer()
{
  return objc_opt_self(_TtC7remindd27RDXPCSyncInterfacePerformer);
}

_QWORD *sub_10013CB9C(void *a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  id v11;
  _QWORD *v12;

  v3[2] = a3;
  v3[3] = a1;
  v7 = type metadata accessor for RDThrottler(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_QWORD *)(v8 + 16) = 1;
  *(_QWORD *)(v8 + 24) = 0x403E000000000000;
  strcpy((char *)(v8 + 32), "CloudKit Sync");
  *(_WORD *)(v8 + 46) = -4864;
  *(_QWORD *)(v8 + 48) = a3;
  v9 = a3;
  Date.init(timeIntervalSinceNow:)(a1, 30.0);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount) = 1;
  v3[5] = v8;
  v10 = (_QWORD *)swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v10[2] = 1;
  v10[3] = 0x403E000000000000;
  v10[4] = 0xD00000000000001DLL;
  v10[5] = 0x80000001006F9980;
  v10[6] = v9;
  v11 = v9;
  Date.init(timeIntervalSinceNow:)(v11, 30.0);
  *(_QWORD *)((char *)v10 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount) = 1;
  v3[4] = v10;
  v12 = (_QWORD *)swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v12[2] = 1;
  v12[3] = 0x403E000000000000;
  v12[4] = 0x6563634161746144;
  v12[5] = 0xEF636E7953207373;
  v12[6] = v11;
  Date.init(timeIntervalSinceNow:)(v12, 30.0);
  *(_QWORD *)((char *)v12 + OBJC_IVAR____TtC7remindd11RDThrottler_currentIntervalAllowedOperationsCount) = 1;
  v3[6] = v12;
  v3[7] = a2;
  return v3;
}

id sub_10013CD2C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v10;
  char *v11;
  char *v19;
  char *v20;
  id v21;
  id v22;
  objc_class *ObjectType;
  objc_super v26;

  v11 = v10;
  ObjectType = (objc_class *)swift_getObjectType();
  v19 = &v10[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_clientConnection];
  swift_unknownObjectWeakInit(v19, 0);
  *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_queue] = a1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeController] = a2;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_cloudKitThrottler] = a3;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_discretionaryCloudKitThrottler] = a4;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_dataAccessThrottler] = a5;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_dataAccessRequestsWriter] = a6;
  v20 = &v11[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_storeProvider];
  *(_QWORD *)v20 = a7;
  *((_QWORD *)v20 + 1) = a8;
  sub_1000184A8(a9, (uint64_t)&v11[OBJC_IVAR____TtC7remindd27RDXPCSyncInterfacePerformer_clientIdentity]);
  swift_unknownObjectWeakAssign(v19, a10);
  v26.receiver = v11;
  v26.super_class = ObjectType;
  v21 = a1;
  v22 = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return objc_msgSendSuper2(&v26, "init");
}

uint64_t sub_10013CE88()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013CEAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10013CEE0()
{
  uint64_t *v0;

  sub_10013C1B8(v0[2], v0[3], v0[4], v0[5]);
}

void sub_10013CEEC(uint64_t a1)
{
  uint64_t v1;

  sub_10013C494(a1, *(void **)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_10013CF08()
{
  return sub_10013D264((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 59);
}

void sub_10013CF20()
{
  uint64_t v0;

  sub_10013B080(*(_QWORD *)(v0 + 16), *(void (**)(id))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), *(_BYTE *)(v0 + 57), *(_BYTE *)(v0 + 58));
}

uint64_t sub_10013CF3C@<X0>(_BYTE *a1@<X8>)
{
  return sub_1001181F4(a1);
}

uint64_t sub_10013CF50()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10013CF84(uint64_t a1)
{
  uint64_t v1;

  return sub_10013BC58(a1, *(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 17), *(_BYTE *)(v1 + 18), *(uint64_t (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10013CFBC()
{
  return sub_10013D264((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 56);
}

uint64_t sub_10013CFD4()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10013A25C);
}

void sub_10013CFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100139EF4(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10013CFEC()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001392C4);
}

void sub_10013CFF8(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;

  sub_10013975C(a1, a2, a3 & 1, *(void (**)(_QWORD, id))(v3 + 16));
}

void sub_10013D004(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    swift_errorRelease(a1);
  }
  else
  {
    swift_bridgeObjectRelease(a1);

  }
}

id sub_10013D030(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

unint64_t sub_10013D03C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083C168;
  if (!qword_10083C168)
  {
    v1 = sub_1000151B0(255, &qword_100844060, CKRecordID_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10083C168);
  }
  return result;
}

uint64_t sub_10013D094()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013D0C8()
{
  uint64_t v0;

  return sub_100137CC0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10013D0DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013D100()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013D124()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10013D158(void *a1, char a2)
{
  uint64_t v2;

  sub_100138EC0(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(NSObject **)(v2 + 32));
}

uint64_t sub_10013D168()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10013D19C()
{
  uint64_t v0;

  sub_100138F58(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10013D1A8()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10013D1DC(uint64_t a1)
{
  uint64_t v1;

  sub_100138A20(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_10013D1E8()
{
  return sub_10013D264((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release, 56);
}

uint64_t sub_10013D200()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100136E54);
}

uint64_t sub_10013D20C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10013D240(char a1, void *a2, double a3)
{
  uint64_t v3;

  sub_1001377A0(a1, a2, *(void (**)(id))(v3 + 16), *(_QWORD *)(v3 + 24), a3, *(_QWORD *)(v3 + 32), *(void **)(v3 + 40));
}

uint64_t sub_10013D24C()
{
  return sub_10013D264((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 56);
}

uint64_t sub_10013D264(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 32));
  a2(*(_QWORD *)(v3 + 48));
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_10013D2B4()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100136394);
}

uint64_t sub_10013D2C0()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013D2F4(uint64_t a1)
{
  uint64_t v1;

  return sub_100136740(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10013D304()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013D328(uint64_t a1)
{
  uint64_t v1;

  return sub_100136984(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10013D334()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

double sub_10013D368()
{
  uint64_t v0;

  return sub_100135B28(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32), *(void (**)(_QWORD))(v0 + 40), *(void (***)(_QWORD))(v0 + 48));
}

uint64_t sub_10013D378()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 49, 7);
}

void sub_10013D3AC()
{
  uint64_t v0;

  sub_100134AFC(*(void **)(v0 + 16), *(void (**)(id))(v0 + 24), *(void **)(v0 + 32), *(char **)(v0 + 40), *(_BYTE *)(v0 + 48));
}

uint64_t sub_10013D3BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10013D3F8()
{
  return sub_10000A020((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100135434);
}

uint64_t sub_10013D404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t sub_10013D428()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 57, 7);
}

void sub_10013D45C()
{
  uint64_t v0;

  sub_100133764(*(void **)(v0 + 16), *(void (**)(id))(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40), *(char **)(v0 + 48), *(_BYTE *)(v0 + 56));
}

uint64_t sub_10013D474()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10013D4B0()
{
  uint64_t v0;

  sub_100133F90(*(_BYTE *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(id))(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_10013D4C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10013D4F0(uint64_t a1)
{
  uint64_t v1;

  return sub_100134334(a1, *(_BYTE *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

uint64_t sub_10013D5B0()
{
  uint64_t v0;

  sub_10013DC38((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 57, 7);
}

uint64_t type metadata accessor for RDPublicCloudDatabaseControllerMock()
{
  return objc_opt_self(_TtC7remindd35RDPublicCloudDatabaseControllerMock);
}

uint64_t destroy for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(_QWORD *a1)
{
  unsigned int v1;

  v1 = *((unsigned __int8 *)a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return swift_errorRelease(*a1);
  else
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
}

uint64_t initializeWithCopy for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  char v5;
  __int128 v6;

  v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *a2;
    swift_errorRetain(*a2);
    *(_QWORD *)a1 = v4;
    v5 = 1;
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t))(v6 - 8))(a1);
    v5 = 0;
  }
  *(_BYTE *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_errorRelease(*(_QWORD *)a1);
    else
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *a2;
      swift_errorRetain(v6);
      *(_QWORD *)a1 = v6;
      v7 = 1;
    }
    else
    {
      v8 = a2[3];
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
      v7 = 0;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

__n128 initializeWithTake for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_errorRelease(*(_QWORD *)a1);
    else
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_10013D88C(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_10013D8A8(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock()
{
  return &type metadata for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock;
}

uint64_t sub_10013D8E0(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  return a2(0, 0);
}

uint64_t sub_10013D90C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(0, 0);
}

uint64_t sub_10013D934(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5)
{
  return sub_10013D964(a3, a4, a5);
}

uint64_t sub_10013D964(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v23[2];
  void (*v24)(_QWORD *);
  _BYTE v25[40];
  _QWORD v26[5];
  __int128 v27[2];
  char v28;

  v23[1] = a2;
  v24 = a1;
  v5 = sub_1000A5A94((uint64_t *)&unk_10083AA20);
  v6 = type metadata accessor for Result(0, a3, v5, &protocol self-conformance witness table for Error);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v23 - v8);
  v10 = type metadata accessor for Optional(0, a3);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v23 - v12;
  v14 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10013DC04((uint64_t *)(v3 + 16), (uint64_t)v27);
  if ((v28 & 1) != 0)
  {
    v18 = *(_QWORD *)&v27[0];
    *v9 = *(_QWORD *)&v27[0];
    swift_storeEnumTagMultiPayload(v9, v6, 1);
    swift_errorRetain(v18);
    v24(v9);
    swift_errorRelease(v18);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v23[0] = v7;
    sub_10001BCA8(v27, (uint64_t)v26);
    sub_100018618((uint64_t)v26, (uint64_t)v25);
    v20 = sub_10001A630(&qword_10083C240);
    v21 = swift_dynamicCast(v13, v25, v20, a3, 6);
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    if (v21)
    {
      v22(v13, 0, 1, a3);
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, a3);
      (*(void (**)(_QWORD *, char *, uint64_t))(v14 + 16))(v9, v17, a3);
      swift_storeEnumTagMultiPayload(v9, v6, 0);
      v24(v9);
      (*(void (**)(_QWORD *, uint64_t))(v23[0] + 8))(v9, v6);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, a3);
    }
    else
    {
      v22(v13, 1, 1, a3);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      *v9 = objc_msgSend((id)objc_opt_self(REMError), "cancelledError");
      swift_storeEnumTagMultiPayload(v9, v6, 1);
      v24(v9);
      (*(void (**)(_QWORD *, uint64_t))(v23[0] + 8))(v9, v6);
    }
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);
  }
}

uint64_t sub_10013DC04(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(a2, a1);
  return a2;
}

_QWORD *sub_10013DC38(_QWORD *a1)
{
  destroy for RDPublicCloudDatabaseControllerMock.FetchPublicCloudObjectResultMock(a1);
  return a1;
}

uint64_t sub_10013DC64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083C248);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083C248);
  if (qword_1008376A0 != -1)
    swift_once(&qword_1008376A0, sub_1004A19DC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008721C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10013DCF4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  NSObject.hash(into:)(a1);

}

uint64_t sub_10013DD34(uint64_t a1)
{
  sub_100017004();
  return static NSObject.== infix(_:_:)(a1) & 1;
}

Swift::Int sub_10013DD74(void *a1)
{
  id v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  v2 = a1;
  NSObject.hash(into:)(v4);

  return Hasher._finalize()();
}

Swift::Int sub_10013DDC0()
{
  void **v0;

  return sub_10013DD74(*v0);
}

void sub_10013DDC8(uint64_t a1)
{
  void **v1;

  sub_10013DCF4(a1, *v1);
}

Swift::Int sub_10013DDD0(uint64_t a1)
{
  void **v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_10013DCF4((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_10013DE0C(uint64_t *a1)
{
  return sub_10013DD34(*a1);
}

uint64_t sub_10013DE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for CDObjectID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CDObjectID);
}

uint64_t sub_10013DE2C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1006A9D58, a1);
}

id sub_10013DE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Class isa;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  NSArray v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v1 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimeZone(0);
  v54 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v44 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar.Identifier(0, v5);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar(0);
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DateComponents(0);
  v55 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v17 - 8);
  v51 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for RDSavedReminder(0);
  v56 = *(_QWORD *)(v0 + *(int *)(v20 + 20));
  if (v56)
  {
    v47 = v4;
    v21 = _swiftEmptyArrayStorage;
    v49 = *(_QWORD *)(v56 + 16);
    if (v49)
    {
      v41 = v20;
      v42 = v0;
      v43 = v3;
      v57 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v56);
      specialized ContiguousArray.reserveCapacity(_:)(v49);
      v22 = 0;
      v46 = enum case for Calendar.Identifier.gregorian(_:);
      v48 = v14;
      v45 = v8;
      v23 = v7;
      v24 = v44;
      do
      {
        v25 = v22 + 1;
        Date.init(timeIntervalSinceReferenceDate:)(*(double *)(v56 + 8 * v22 + 32));
        v26 = v45;
        (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v10, v46, v23);
        Calendar.init(identifier:)(v10);
        v27 = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v10, v23);
        static TimeZone.current.getter(v27);
        Calendar.dateComponents(in:from:)(v24, v19);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v47);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v13, v53);
        v28 = objc_allocWithZone((Class)REMAlarmDateTrigger);
        isa = DateComponents._bridgeToObjectiveC()().super.isa;
        v30 = objc_msgSend(v28, "initWithDateComponents:", isa);

        (*(void (**)(char *, uint64_t))(v55 + 8))(v16, v48);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v19, v51);
        v31 = objc_msgSend(objc_allocWithZone((Class)REMAlarm), "initWithTrigger:", v30);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
        v33 = v57[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
        v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
        specialized ContiguousArray._endMutation()(v34);
        v22 = v25;
      }
      while (v49 != v25);
      v21 = v57;
      swift_bridgeObjectRelease();
      v0 = v42;
      v3 = v43;
      v14 = v48;
      v20 = v41;
    }
  }
  else
  {
    v21 = 0;
  }
  v35 = v55;
  sub_100008868(v0 + *(int *)(v20 + 28), (uint64_t)v3, (uint64_t *)&unk_100841610);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v3, 1, v14) != 1)
  {
    v36 = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v3, v14);
    if (v21)
      goto LABEL_9;
LABEL_11:
    v37.super.isa = 0;
    goto LABEL_12;
  }
  v36 = 0;
  if (!v21)
    goto LABEL_11;
LABEL_9:
  sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
  v37.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_12:
  v38 = objc_msgSend((id)objc_opt_self(REMDisplayDateUtils), "displayDateWithDueDateComponents:alarms:", v36, v37.super.isa);

  return v38;
}

uint64_t sub_10013E28C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013E2C8 + 4 * byte_1006A9DC0[a1]))(0x6E6F697461657263, 0xEC00000065746144);
}

uint64_t sub_10013E2C8()
{
  return 0x6972546D72616C61;
}

unint64_t sub_10013E2EC()
{
  return 0xD000000000000012;
}

uint64_t sub_10013E3F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _OWORD *v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  _OWORD v36[2];
  char v37;

  v3 = v1;
  v5 = sub_10001A630(&qword_10083C3D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_100143BFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedReminder.CodingKeys, &type metadata for RDSavedReminder.CodingKeys, v11, v9, v10);
  LOBYTE(v36[0]) = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_10009FC50(&qword_10083C3E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, v36, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for RDSavedReminder(0);
    v15 = (_OWORD *)(v3 + v14[5]);
    v16 = v15[1];
    v36[0] = *v15;
    v36[1] = v16;
    v37 = 1;
    v17 = sub_100143C40();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, &v37, v5, &type metadata for RDSavedAlarmTriggers, v17);
    *(_QWORD *)&v36[0] = *(_QWORD *)(v3 + v14[6]);
    v37 = 2;
    v18 = sub_10001A630(&qword_10083C3F0);
    v19 = sub_1000EAEE8(&qword_10083C3F8, &qword_10083C3F0, (void (*)(void))sub_100143C84, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, &v37, v5, v18, v19);
    v20 = v3 + v14[7];
    LOBYTE(v36[0]) = 3;
    v21 = type metadata accessor for DateComponents(0);
    v22 = sub_10009FC50(&qword_10083C408, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, v36, v5, v21, v22);
    v23 = *(_QWORD *)(v3 + v14[8]);
    LOBYTE(v36[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v36, v5);
    *(_QWORD *)&v36[0] = *(_QWORD *)(v3 + v14[9]);
    v37 = 5;
    v24 = sub_10001A630(&qword_10083C410);
    v25 = sub_1000EAEE8(&qword_10083C418, &qword_10083C410, (void (*)(void))sub_100143CC8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, &v37, v5, v24, v25);
    v36[0] = *(_OWORD *)(v3 + v14[10]);
    v37 = 6;
    v35 = sub_1000EAC40();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, &v37, v5, &type metadata for Data, v35);
    v26 = *(_QWORD *)(v3 + v14[11]);
    LOBYTE(v36[0]) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v36, v5);
    *(_QWORD *)&v36[0] = *(_QWORD *)(v3 + v14[12]);
    v37 = 8;
    v27 = sub_10001A630(&qword_10083C428);
    v28 = sub_1000EAEE8(&qword_10083C430, &qword_10083C428, (void (*)(void))sub_100143D0C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, &v37, v5, v27, v28);
    v29 = v3 + v14[13];
    LOBYTE(v36[0]) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, v36, v5, v21, v22);
    v30 = (uint64_t *)(v3 + v14[14]);
    v31 = *v30;
    v32 = v30[1];
    LOBYTE(v36[0]) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v31, v32, v36, v5);
    v36[0] = *(_OWORD *)(v3 + v14[15]);
    v37 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v36, &v37, v5, &type metadata for Data, v35);
    v36[0] = *(_OWORD *)(v3 + v14[16]);
    v37 = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, &v37, v5, &type metadata for Data, v35);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10013E8A0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int *v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  _OWORD v65[2];
  char v66;

  v57 = a2;
  v4 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v9 = (char *)&v55 - v8;
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = sub_10001A630(&qword_10083C440);
  v13 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = (int *)type metadata accessor for RDSavedReminder(0);
  __chkstk_darwin(v64);
  v63 = (uint64_t)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  v61 = a1;
  sub_10000A388(a1, v18);
  v19 = sub_100143BFC();
  v58 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedReminder.CodingKeys, &type metadata for RDSavedReminder.CodingKeys, v19, v18, v17);
  if (v2)
  {
    v25 = v63;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v61);
    v62 = v2;
    LODWORD(v60) = 0;
    v26 = 0;
    v27 = 0;
    v28 = v64;
    goto LABEL_5;
  }
  v20 = v9;
  v56 = v6;
  v21 = v57;
  v22 = type metadata accessor for Date(0);
  LOBYTE(v65[0]) = 0;
  v23 = sub_10009FC50(&qword_10083C448, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v24 = v59;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v12, v22, v65, v59, v22, v23);
  v29 = v63;
  sub_1000A5CA8((uint64_t)v12, v63, (uint64_t *)&unk_1008380D0);
  v66 = 1;
  v30 = sub_100143D50();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, &type metadata for RDSavedAlarmTriggers, &v66, v24, &type metadata for RDSavedAlarmTriggers, v30);
  v31 = (_OWORD *)(v29 + v64[5]);
  v32 = v65[1];
  *v31 = v65[0];
  v31[1] = v32;
  v33 = v24;
  v34 = sub_10001A630(&qword_10083C3F0);
  v66 = 2;
  v35 = sub_1000EAEE8(&qword_10083C458, &qword_10083C3F0, (void (*)(void))sub_100143D94, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, v34, &v66, v33, v34, v35);
  *(_QWORD *)(v29 + v64[6]) = *(_QWORD *)&v65[0];
  v36 = type metadata accessor for DateComponents(0);
  LOBYTE(v65[0]) = 3;
  v37 = sub_10009FC50(&qword_10083C468, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
  v38 = v59;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v20, v36, v65, v59, v36, v37);
  v62 = v13;
  v60 = v37;
  sub_1000A5CA8((uint64_t)v20, v29 + v64[7], (uint64_t *)&unk_100841610);
  LOBYTE(v65[0]) = 4;
  v39 = KeyedDecodingContainer.decode(_:forKey:)(v65, v38);
  v55 = v36;
  *(_QWORD *)(v29 + v64[8]) = v39;
  v40 = v38;
  v41 = sub_10001A630(&qword_10083C410);
  v66 = 5;
  v42 = sub_1000EAEE8(&qword_10083C470, &qword_10083C410, (void (*)(void))sub_100143DD8, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, v41, &v66, v40, v41, v42);
  *(_QWORD *)(v29 + v64[9]) = *(_QWORD *)&v65[0];
  v66 = 6;
  v43 = sub_1000EABB4();
  v44 = v59;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, &type metadata for Data, &v66, v59, &type metadata for Data, v43);
  *(_OWORD *)(v29 + v64[10]) = v65[0];
  LOBYTE(v65[0]) = 7;
  v45 = KeyedDecodingContainer.decode(_:forKey:)(v65, v44);
  *(_QWORD *)(v29 + v64[11]) = v45;
  v46 = sub_10001A630(&qword_10083C428);
  v66 = 8;
  v47 = sub_1000EAEE8(&qword_10083C480, &qword_10083C428, (void (*)(void))sub_100143E1C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, v46, &v66, v44, v46, v47);
  *(_QWORD *)(v29 + v64[12]) = *(_QWORD *)&v65[0];
  LOBYTE(v65[0]) = 9;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v56, v55, v65, v59, v55, v60);
  LODWORD(v60) = 1;
  v62 = 0;
  sub_1000A5CA8((uint64_t)v56, v63 + v64[13], (uint64_t *)&unk_100841610);
  LOBYTE(v65[0]) = 10;
  v48 = v62;
  v49 = KeyedDecodingContainer.decode(_:forKey:)(v65, v59);
  v62 = v48;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v58, v59);
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v51 = (uint64_t *)(v63 + v64[14]);
    *v51 = v49;
    v51[1] = v50;
    v66 = 11;
    v52 = v62;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v65, &type metadata for Data, &v66, v59, &type metadata for Data, v43);
    v62 = v52;
    if (v52)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v58, v59);
      v27 = 0;
      v26 = 1;
    }
    else
    {
      *(_OWORD *)(v63 + v64[15]) = v65[0];
      v66 = 12;
      v53 = v62;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, &type metadata for Data, &v66, v59, &type metadata for Data, v43);
      v62 = v53;
      if (!v53)
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v58, v59);
        v54 = v63;
        *(_OWORD *)(v63 + v64[16]) = v65[0];
        sub_1000D6E9C(v54, v21);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v61);
        sub_1000D6E60(v54);
        return;
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v58, v59);
      v26 = 1;
      v27 = 1;
    }
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v61);
  v25 = v63;
  sub_10000882C(v63, (uint64_t *)&unk_1008380D0);
  sub_1001425F0(*(_QWORD *)(v25 + v64[5]), *(_QWORD *)(v25 + v64[5] + 8), *(_QWORD *)(v25 + v64[5] + 16), *(_QWORD *)(v25 + v64[5] + 24));
  v28 = v64;
  swift_bridgeObjectRelease(*(_QWORD *)(v25 + v64[6]));
  sub_10000882C(v25 + v28[7], (uint64_t *)&unk_100841610);
  swift_bridgeObjectRelease(*(_QWORD *)(v25 + v28[9]));
  sub_1000A71B4(*(_QWORD *)(v25 + v28[10]), *(_QWORD *)(v25 + v28[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v25 + v28[12]));
  if ((v60 & 1) == 0)
  {
LABEL_5:
    if (v26)
      goto LABEL_6;
LABEL_9:
    if (!v27)
      return;
    goto LABEL_10;
  }
  sub_10000882C(v25 + v28[13], (uint64_t *)&unk_100841610);
  if ((v26 & 1) == 0)
    goto LABEL_9;
LABEL_6:
  swift_bridgeObjectRelease(*(_QWORD *)(v25 + v28[14] + 8));
  if ((v27 & 1) == 0)
    return;
LABEL_10:
  sub_1000A71C8(*(_QWORD *)(v25 + v28[15]), *(_QWORD *)(v25 + v28[15] + 8));
}

uint64_t sub_10013F178()
{
  unsigned __int8 *v0;

  return sub_10013E28C(*v0);
}

uint64_t sub_10013F180@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100144094(a1, a2);
  *a3 = result;
  return result;
}

void sub_10013F1A4(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_10013F1B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100143BFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013F1D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100143BFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10013F200(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10013E8A0(a1, a2);
}

uint64_t sub_10013F214(_QWORD *a1)
{
  return sub_10013E3F0(a1);
}

void sub_10013F22C(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  Swift::String v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  NSString v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  _QWORD *v73;
  void *v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  id v81;
  void *v82;
  id v83;
  uint64_t v84;
  id v85;
  char *v86;
  uint64_t v87;
  double v88;
  id v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  double *v93;
  double v94;
  id v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  id v112;
  void *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  _QWORD *v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  id v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v151;
  void (*v152)(_QWORD *, _QWORD);
  uint64_t v153;
  int *v154;
  uint64_t v155;
  id v156;
  double v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  id v163;
  unint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  id v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  void *v178;
  id v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  id v184;
  id v185;
  id v186;
  id v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  int *v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t v194;
  id v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[4];
  uint64_t v200;
  char *v201;
  unsigned __int8 v202;
  _QWORD *v203;
  _OWORD v204[5];
  uint64_t v205;

  v7 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v7);
  v188 = (char *)&v183 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v183 - v10;
  v12 = type metadata accessor for Date(0);
  v197 = *(_QWORD *)(v12 - 8);
  v198 = v12;
  __chkstk_darwin(v12);
  v196 = (char *)&v183 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(a1, "titleDocument", v15);
  if (!v18)
  {
    v23 = (void *)objc_opt_self(REMError);
    v199[0] = 0;
    v199[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(137);
    v24._object = (void *)0x80000001006F9A10;
    v24._countAndFlagsBits = 0xD000000000000086;
    String.append(_:)(v24);
    v25 = objc_msgSend(a1, "objectID");
    v26 = objc_msgSend(v25, "description");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v30._countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);

    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 125;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "invalidParameterErrorWithDescription:", v32, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v33);
    return;
  }
  v195 = a1;
  v189 = v3;
  v187 = v18;
  v194 = (unint64_t)v11;
  if ((a2 & 1) != 0)
  {
    v19 = v18;
    v20 = objc_msgSend(v18, "replicaIDSource");
    v21 = objc_msgSend(v19, "attributedString");
    v22 = objc_msgSend(objc_allocWithZone((Class)REMCRMergeableStringDocument), "initWithReplicaIDSource:attributedString:", v20, v21);

  }
  else
  {
    v22 = v18;
  }
  v34 = objc_msgSend(v22, "string");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v38 = type metadata accessor for RDSavedReminder(0);
  v39 = (uint64_t *)(a3 + *(int *)(v38 + 56));
  *v39 = v35;
  v39[1] = v37;
  v192 = v39;
  v186 = v22;
  v40 = objc_msgSend(v22, "serializedData");
  v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  v191 = (int *)v38;
  v44 = *(int *)(v38 + 60);
  v193 = a3;
  v45 = a3 + v44;
  *(_QWORD *)v45 = v41;
  *(_QWORD *)(v45 + 8) = v43;
  v46 = objc_msgSend(v195, "notesDocument");
  v185 = v46;
  if ((a2 & 1) != 0)
  {
    if (v46)
    {
      v47 = v46;
      v48 = objc_msgSend(v47, "replicaIDSource");
      v49 = objc_msgSend(v47, "attributedString");
      v50 = objc_msgSend(objc_allocWithZone((Class)REMCRMergeableStringDocument), "initWithReplicaIDSource:attributedString:", v48, v49);

LABEL_11:
      v51 = v50;
      v52 = objc_msgSend(v51, "serializedData");
      v184 = v51;

      v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v55 = v54;

      goto LABEL_13;
    }
  }
  else if (v46)
  {
    v50 = v46;
    goto LABEL_11;
  }
  v53 = 0;
  v184 = 0;
  v55 = 0xF000000000000000;
LABEL_13:
  v56 = v193 + v191[10];
  *(_QWORD *)v56 = v53;
  *(_QWORD *)(v56 + 8) = v55;
  v57 = v195;
  v58 = objc_msgSend(v195, "creationDate");
  if (v58)
  {
    v59 = v58;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

    v60 = 0;
  }
  else
  {
    v60 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v197 + 56))(v17, v60, 1, v198);
  v61 = (uint64_t)v17;
  v62 = v193;
  sub_1000A5CA8(v61, v193, (uint64_t *)&unk_1008380D0);
  v63 = objc_msgSend(v57, "alarms");
  if (v63)
  {
    v64 = v63;
    v65 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
    v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v64, v65);

    v67 = v189;
    sub_1000EA1A8(v66);
    if (v67)
    {

      sub_10000882C(v193, (uint64_t *)&unk_1008380D0);
LABEL_19:
      sub_1000A71B4(*(_QWORD *)v56, *(_QWORD *)(v56 + 8));
      swift_bridgeObjectRelease();
      sub_1000A71C8(*(_QWORD *)v45, *(_QWORD *)(v45 + 8));
      return;
    }
    v189 = 0;
    v73 = (_QWORD *)(v193 + v191[5]);
    *v73 = v68;
    v73[1] = v69;
    v73[2] = v70;
    v73[3] = v71;
  }
  else
  {
    v72 = (_OWORD *)(v62 + v191[5]);
    *v72 = 0u;
    v72[1] = 0u;
  }
  v74 = objc_autoreleasePoolPush();
  v75 = objc_msgSend(v57, "fetchedDueDateDeltaAlerts");
  if (v75)
  {
    v76 = v75;
    v77 = sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
    v78 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v76, v77);

  }
  else
  {
    v95 = objc_msgSend(v57, "dueDateDeltaAlertsData");
    if (v95)
    {
      v96 = v95;
      v97 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v95);
      v99 = v98;

      type metadata accessor for RDDueDateDeltaAlerts();
      sub_10009FC50(&qword_10083C300, (uint64_t (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts, (uint64_t)&unk_1006A7398);
      v100 = v189;
      static REMJSONRepresentable.fromJSONData(_:)(v199, v97, v99);
      v189 = v100;
      if (v100)
      {
        sub_1000A71C8(v97, v99);
        objc_autoreleasePoolPop(v74);

        v101 = v193;
        sub_10000882C(v193, (uint64_t *)&unk_1008380D0);
        sub_1001425F0(*(_QWORD *)(v101 + v191[5]), *(_QWORD *)(v101 + v191[5] + 8), *(_QWORD *)(v101 + v191[5] + 16), *(_QWORD *)(v101 + v191[5] + 24));
        goto LABEL_19;
      }
      sub_1000A71C8(v97, v99);
      v102 = (void *)v199[0];
      v78 = *(_QWORD *)(v199[0] + OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects);
      swift_bridgeObjectRetain(v78);

    }
    else
    {
      v78 = (uint64_t)_swiftEmptyArrayStorage;
    }
  }
  objc_autoreleasePoolPop(v74);
  if ((unint64_t)v78 >> 62)
  {
    if (v78 < 0)
      v103 = v78;
    else
      v103 = v78 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v78);
    v104 = _CocoaArrayWrapper.endIndex.getter(v103);
    swift_bridgeObjectRelease();
    if (v104)
    {
      swift_bridgeObjectRetain(v78);
      v79 = _CocoaArrayWrapper.endIndex.getter(v103);
      swift_bridgeObjectRelease();
      if (!v79)
      {
        *(_QWORD *)&v94 = swift_bridgeObjectRelease().n128_u64[0];
        v90 = _swiftEmptyArrayStorage;
        goto LABEL_49;
      }
      goto LABEL_26;
    }
LABEL_48:
    *(_QWORD *)&v94 = swift_bridgeObjectRelease().n128_u64[0];
    v90 = 0;
    goto LABEL_49;
  }
  v79 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v79)
    goto LABEL_48;
LABEL_26:
  v199[0] = _swiftEmptyArrayStorage;
  sub_1001C1FB0(0, v79 & ~(v79 >> 63), 0);
  if (v79 < 0)
  {
    __break(1u);
    goto LABEL_98;
  }
  for (i = 0; i != v79; ++i)
  {
    if ((v78 & 0xC000000000000001) != 0)
      v81 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v78);
    else
      v81 = *(id *)(v78 + 8 * i + 32);
    v82 = v81;
    v83 = objc_msgSend(v81, "dueDateDelta");
    v84 = REMDueDateDeltaInterval.codable.getter();

    v85 = objc_msgSend(v82, "creationDate");
    v86 = v196;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v85);

    v88 = Date.timeIntervalSinceReferenceDate.getter(v87);
    (*(void (**)(char *, uint64_t))(v197 + 8))(v86, v198);
    v89 = objc_msgSend(v82, "minimumSupportedAppVersion");

    v90 = (_QWORD *)v199[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v199[0]) & 1) == 0)
    {
      sub_1001C1FB0(0, v90[2] + 1, 1);
      v90 = (_QWORD *)v199[0];
    }
    v92 = v90[2];
    v91 = v90[3];
    if (v92 >= v91 >> 1)
    {
      sub_1001C1FB0(v91 > 1, v92 + 1, 1);
      v90 = (_QWORD *)v199[0];
    }
    v90[2] = v92 + 1;
    v93 = (double *)&v90[3 * v92];
    *((_QWORD *)v93 + 4) = v84;
    v93[5] = v88;
    *((_QWORD *)v93 + 6) = v89;
  }
  *(_QWORD *)&v94 = swift_bridgeObjectRelease().n128_u64[0];
  v57 = v195;
LABEL_49:
  *(_QWORD *)(v193 + v191[6]) = v90;
  v105 = objc_msgSend(v57, "dueDateComponents", v94);
  v106 = v194;
  if (v105)
  {
    v107 = v105;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v105);

    v108 = type metadata accessor for DateComponents(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 56))(v106, 0, 1, v108);
  }
  else
  {
    v109 = type metadata accessor for DateComponents(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v106, 1, 1, v109);
  }
  v110 = v191;
  v111 = v193;
  sub_1000A5CA8(v106, v193 + v191[7], (uint64_t *)&unk_100841610);
  *(_QWORD *)(v111 + v110[8]) = objc_msgSend(v57, "flagged");
  v112 = objc_msgSend(v57, "hashtags");
  if (!v112)
  {
    v123 = 0;
    goto LABEL_84;
  }
  v113 = v112;
  v114 = sub_1000151B0(0, &qword_10083DAC0, REMHashtag_ptr);
  v115 = sub_10014263C();
  v116 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v113, v114, v115);

  v194 = v116 & 0xC000000000000001;
  if ((v116 & 0xC000000000000001) != 0)
  {
    if (v116 < 0)
      v117 = v116;
    else
      v117 = v116 & 0xFFFFFFFFFFFFFF8;
    v118 = __CocoaSet.count.getter(v117);
    if (v118)
    {
LABEL_58:
      v203 = _swiftEmptyArrayStorage;
      sub_1001C1F94(0, v118 & ~(v118 >> 63), 0);
      if (v194)
      {
        if (v116 < 0)
          v119 = v116;
        else
          v119 = v116 & 0xFFFFFFFFFFFFFF8;
        v120 = __CocoaSet.startIndex.getter(v119);
        v122 = 1;
      }
      else
      {
        v120 = sub_100364E8C(v116);
        v122 = v124 & 1;
      }
      v200 = v120;
      v201 = (char *)v121;
      v202 = v122;
      if (v118 < 0)
      {
        __break(1u);
        goto LABEL_111;
      }
      v125 = v116 & 0xFFFFFFFFFFFFFF8;
      if (v116 < 0)
        v125 = v116;
      v190 = v125;
      v192 = (_QWORD *)v116;
      do
      {
        while (1)
        {
          v132 = v200;
          v133 = v202;
          v196 = v201;
          sub_100364B7C(v200, (uint64_t)v201, v202, v116);
          v135 = v134;
          v136 = objc_msgSend(v134, "type");
          v137 = objc_msgSend(v135, "name");
          v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
          v197 = v139;
          v198 = v138;

          v140 = objc_msgSend(v135, "objectIdentifier");
          v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
          v143 = v142;

          v144 = v203;
          if ((swift_isUniquelyReferenced_nonNull_native(v203) & 1) == 0)
          {
            sub_1001C1F94(0, v144[2] + 1, 1);
            v144 = v203;
          }
          v146 = v144[2];
          v145 = v144[3];
          if (v146 >= v145 >> 1)
          {
            sub_1001C1F94(v145 > 1, v146 + 1, 1);
            v144 = v203;
          }
          v144[2] = v146 + 1;
          v147 = &v144[5 * v146];
          v148 = v198;
          v147[4] = v136;
          v147[5] = v148;
          v147[6] = v197;
          v147[7] = v141;
          v147[8] = v143;
          if (v194)
            break;
          v126 = (uint64_t)v196;
          v116 = (uint64_t)v192;
          v127 = sub_10036456C(v132, v196, v133, v192);
          v129 = v128;
          v131 = v130;
          sub_1000E515C(v132, v126, v133);
          v200 = v127;
          v201 = (char *)v129;
          v202 = v131 & 1;
          if (!--v118)
            goto LABEL_82;
        }
        v116 = (uint64_t)v192;
        if ((v133 & 1) == 0)
          goto LABEL_112;
        v149 = __CocoaSet.Index.handleBitPattern.getter(v132, v196);
        if (v149)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v149);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v151 = sub_10001A630(&qword_10083C2F8);
        v152 = (void (*)(_QWORD *, _QWORD))Set.Index._asCocoa.modify(v199, v151);
        __CocoaSet.formIndex(after:isUnique:)(v153, isUniquelyReferenced_nonNull_native, v190);
        v152(v199, 0);
        --v118;
      }
      while (v118);
LABEL_82:
      sub_1000E515C(v200, (uint64_t)v201, v202);
      swift_bridgeObjectRelease();
      v123 = v203;
      goto LABEL_83;
    }
  }
  else
  {
    v118 = *(_QWORD *)(v116 + 16);
    if (v118)
      goto LABEL_58;
  }
  swift_bridgeObjectRelease();
  v123 = _swiftEmptyArrayStorage;
LABEL_83:
  v57 = v195;
LABEL_84:
  v154 = v191;
  v155 = v193;
  *(_QWORD *)(v193 + v191[9]) = v123;
  *(_QWORD *)(v155 + v154[11]) = objc_msgSend(v57, "priority");
  v156 = objc_msgSend(v57, "recurrenceRules");
  if (!v156)
  {
    v162 = 0;
LABEL_103:
    *(_QWORD *)(v193 + v191[12]) = v162;
    v172 = objc_msgSend(v57, "startDateComponents", v157);
    if (v172)
    {
      v173 = v172;
      v174 = (uint64_t)v188;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v172);

      v175 = type metadata accessor for DateComponents(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 56))(v174, 0, 1, v175);
    }
    else
    {
      v176 = type metadata accessor for DateComponents(0);
      v174 = (uint64_t)v188;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 56))(v188, 1, 1, v176);
    }
    sub_1000A5CA8(v174, v193 + v191[13], (uint64_t *)&unk_100841610);
    v177 = objc_msgSend(v57, "contactHandles");
    v178 = v177;
    if (v177)
    {
      v179 = objc_msgSend(v177, "archivedData");

      v178 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v179);
      v181 = v180;

    }
    else
    {

      v181 = 0xF000000000000000;
    }
    v182 = (_QWORD *)(v193 + v191[16]);
    *v182 = v178;
    v182[1] = v181;
    return;
  }
  v158 = v156;
  v159 = sub_1000151B0(0, (unint64_t *)&qword_100841640, REMRecurrenceRule_ptr);
  v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v158, v159);

  if (!((unint64_t)v79 >> 62))
  {
    v160 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v160)
      goto LABEL_87;
    goto LABEL_102;
  }
LABEL_98:
  if (v79 < 0)
    v171 = v79;
  else
    v171 = v79 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v79);
  v160 = _CocoaArrayWrapper.endIndex.getter(v171);
  swift_bridgeObjectRelease();
  if (!v160)
  {
LABEL_102:
    *(_QWORD *)&v157 = swift_bridgeObjectRelease().n128_u64[0];
    v162 = _swiftEmptyArrayStorage;
    goto LABEL_103;
  }
LABEL_87:
  v199[0] = _swiftEmptyArrayStorage;
  sub_1001C1F78(0, v160 & ~(v160 >> 63), 0);
  if ((v160 & 0x8000000000000000) == 0)
  {
    v161 = 0;
    v162 = (_QWORD *)v199[0];
    do
    {
      if ((v79 & 0xC000000000000001) != 0)
        v163 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v161, v79);
      else
        v163 = *(id *)(v79 + 8 * v161 + 32);
      sub_1004103E0(v163, (double *)v204);
      v199[0] = v162;
      v165 = v162[2];
      v164 = v162[3];
      if (v165 >= v164 >> 1)
      {
        sub_1001C1F78(v164 > 1, v165 + 1, 1);
        v162 = (_QWORD *)v199[0];
      }
      ++v161;
      v162[2] = v165 + 1;
      v166 = &v162[11 * v165];
      v167 = v204[1];
      *((_OWORD *)v166 + 2) = v204[0];
      *((_OWORD *)v166 + 3) = v167;
      v168 = v204[2];
      v169 = v204[3];
      v170 = v204[4];
      v166[14] = v205;
      *((_OWORD *)v166 + 5) = v169;
      *((_OWORD *)v166 + 6) = v170;
      *((_OWORD *)v166 + 4) = v168;
      v57 = v195;
    }
    while (v160 != v161);
    *(_QWORD *)&v157 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_103;
  }
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
}

uint64_t sub_10014032C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  double v29;
  _QWORD *v30;
  double v31;
  _QWORD *v32;
  double v33;
  _QWORD *v34;
  int *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t result;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;

  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v15 = (char *)&v58 - v14;
  if (objc_msgSend(a2, "shouldIncludeHashtags", v13))
  {
    v17 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for RDSavedReminder(0) + 36));
    *(_QWORD *)&v16 = swift_bridgeObjectRetain(v17).n128_u64[0];
  }
  else
  {
    v17 = 0;
  }
  if (objc_msgSend(a2, "shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval", v16))
  {
    v18 = (int *)type metadata accessor for RDSavedReminder(0);
    sub_100008868(a1 + v18[13], (uint64_t)v15, (uint64_t *)&unk_100841610);
    sub_100008868(a1 + v18[7], (uint64_t)v11, (uint64_t *)&unk_100841610);
    v19 = *(_QWORD *)(a1 + v18[12]);
    *(_QWORD *)&v20 = swift_bridgeObjectRetain(v19).n128_u64[0];
  }
  else
  {
    v21 = type metadata accessor for DateComponents(0);
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
    v22(v15, 1, 1, v21);
    v22(v11, 1, 1, v21);
    v19 = 0;
  }
  v23 = objc_msgSend(a2, "shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval", v20);
  v70 = v11;
  v71 = v15;
  v68 = v19;
  v69 = v17;
  if (((v23 & 1) != 0 || objc_msgSend(a2, "shouldIncludeAlarmTriggersBasedOnLocationOrVehicle"))
    && (v24 = (_QWORD *)(a1 + *(int *)(type metadata accessor for RDSavedReminder(0) + 20)),
        (v25 = (_QWORD *)*v24) != 0))
  {
    v27 = (_QWORD *)v24[2];
    v26 = (_QWORD *)v24[3];
    v28 = (_QWORD *)v24[1];
    swift_bridgeObjectRetain(*v24);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v27);
    if (objc_msgSend(a2, "shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval", swift_bridgeObjectRetain(v26).n128_f64[0]))
    {
      *(_QWORD *)&v29 = swift_bridgeObjectRetain(v25).n128_u64[0];
      v30 = v25;
    }
    else
    {
      v30 = _swiftEmptyArrayStorage;
    }
    v61 = v30;
    if (objc_msgSend(a2, "shouldIncludeAlarmTriggersBasedOnLocationOrVehicle", v29))
    {
      *(_QWORD *)&v31 = swift_bridgeObjectRetain(v28).n128_u64[0];
      v32 = v28;
    }
    else
    {
      v32 = _swiftEmptyArrayStorage;
    }
    v60 = v32;
    if (objc_msgSend(a2, "shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval", v31))
    {
      *(_QWORD *)&v33 = swift_bridgeObjectRetain(v27).n128_u64[0];
      v34 = v27;
    }
    else
    {
      v34 = _swiftEmptyArrayStorage;
    }
    v59 = v34;
    if ((objc_msgSend(a2, "shouldIncludeAlarmTriggersBasedOnLocationOrVehicle", v33) & 1) == 0)
    {
      swift_bridgeObjectRelease(v26);
      v26 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    v60 = 0;
    v61 = 0;
    v59 = 0;
    v26 = 0;
  }
  v35 = (int *)type metadata accessor for RDSavedReminder(0);
  v36 = *(_QWORD *)(a1 + v35[6]);
  v37 = objc_msgSend(a2, "shouldIncludeContactsHandleData", swift_bridgeObjectRetain(v36).n128_f64[0]);

  v67 = v26;
  if (v37)
  {
    v38 = (uint64_t *)(a1 + v35[16]);
    v39 = *v38;
    v65 = v38[1];
    v66 = v39;
    sub_1000A70D0(v39, v65);
  }
  else
  {
    v65 = 0xF000000000000000;
    v66 = 0;
  }
  sub_100008868(a1, (uint64_t)v8, (uint64_t *)&unk_1008380D0);
  v40 = (uint64_t *)(a1 + v35[10]);
  v42 = *v40;
  v41 = v40[1];
  v43 = *(_QWORD *)(a1 + v35[11]);
  v62 = *(_QWORD *)(a1 + v35[8]);
  v63 = v43;
  v44 = v35[15];
  v45 = (uint64_t *)(a1 + v35[14]);
  v46 = v45[1];
  v64 = *v45;
  v48 = *(_QWORD *)(a1 + v44);
  v47 = *(_QWORD *)(a1 + v44 + 8);
  sub_1000A70D0(v42, v41);
  swift_bridgeObjectRetain(v46);
  sub_1000A70E4(v48, v47);
  sub_1000D6E60(a1);
  sub_1000A5CA8((uint64_t)v8, a3, (uint64_t *)&unk_1008380D0);
  v49 = (_QWORD *)(a3 + v35[5]);
  v50 = v60;
  *v49 = v61;
  v49[1] = v50;
  v51 = v67;
  v49[2] = v59;
  v49[3] = v51;
  *(_QWORD *)(a3 + v35[6]) = v36;
  sub_1000A5CA8((uint64_t)v70, a3 + v35[7], (uint64_t *)&unk_100841610);
  *(_QWORD *)(a3 + v35[8]) = v62;
  *(_QWORD *)(a3 + v35[9]) = v69;
  v52 = (uint64_t *)(a3 + v35[10]);
  *v52 = v42;
  v52[1] = v41;
  *(_QWORD *)(a3 + v35[11]) = v63;
  *(_QWORD *)(a3 + v35[12]) = v68;
  result = sub_1000A5CA8((uint64_t)v71, a3 + v35[13], (uint64_t *)&unk_100841610);
  v54 = (_QWORD *)(a3 + v35[14]);
  *v54 = v64;
  v54[1] = v46;
  v55 = (uint64_t *)(a3 + v35[15]);
  *v55 = v48;
  v55[1] = v47;
  v56 = (uint64_t *)(a3 + v35[16]);
  v57 = v65;
  *v56 = v66;
  v56[1] = v57;
  return result;
}

void sub_1001407BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10014081C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100140A00);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_100140A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1001407BC((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_100140AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1001407BC(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_100140BAC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100140BF8()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_100140C2C + dword_100140E04[v0 >> 62]))();
}

uint64_t sub_100140C3C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_100140E24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  void (*v88)(char *, uint64_t);
  int *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char v146;
  int *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  BOOL v168;
  _QWORD *v169;
  uint64_t v170;
  BOOL v171;
  _QWORD *v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  char v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  char v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;

  v232 = a2;
  v204 = type metadata accessor for DateComponents(0);
  v206 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v200 = (char *)&v199 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v4);
  v199 = (uint64_t)&v199 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v201 = (uint64_t)&v199 - v7;
  v205 = sub_10001A630(&qword_10083C2E0);
  __chkstk_darwin(v205);
  v202 = (uint64_t)&v199 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v203 = (uint64_t)&v199 - v10;
  v207 = (int *)type metadata accessor for RDSavedReminder(0);
  __chkstk_darwin(v207);
  v214 = (uint64_t)&v199 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v215 = (uint64_t)&v199 - v13;
  __chkstk_darwin(v14);
  v217 = (uint64_t)&v199 - v15;
  __chkstk_darwin(v16);
  v216 = (uint64_t)&v199 - v17;
  __chkstk_darwin(v18);
  v218 = (uint64_t)&v199 - v19;
  __chkstk_darwin(v20);
  v231 = (uint64_t)&v199 - v21;
  __chkstk_darwin(v22);
  v220 = (uint64_t)&v199 - v23;
  __chkstk_darwin(v24);
  v233 = (uint64_t)&v199 - v25;
  __chkstk_darwin(v26);
  v223 = (uint64_t)&v199 - v27;
  __chkstk_darwin(v28);
  v219 = (uint64_t)&v199 - v29;
  __chkstk_darwin(v30);
  v222 = (uint64_t)&v199 - v31;
  __chkstk_darwin(v32);
  v229 = (uint64_t)&v199 - v33;
  __chkstk_darwin(v34);
  v224 = (uint64_t)&v199 - v35;
  __chkstk_darwin(v36);
  v230 = (uint64_t *)((char *)&v199 - v37);
  __chkstk_darwin(v38);
  v211 = (uint64_t)&v199 - v39;
  __chkstk_darwin(v40);
  v213 = (uint64_t)&v199 - v41;
  __chkstk_darwin(v42);
  v225 = (uint64_t)&v199 - v43;
  __chkstk_darwin(v44);
  v226 = (uint64_t)&v199 - v45;
  __chkstk_darwin(v46);
  v227 = (uint64_t)&v199 - v47;
  __chkstk_darwin(v48);
  v228 = (uint64_t)&v199 - v49;
  __chkstk_darwin(v50);
  v212 = (char *)&v199 - v51;
  __chkstk_darwin(v52);
  v210 = (char *)&v199 - v53;
  __chkstk_darwin(v54);
  v209 = (uint64_t)&v199 - v55;
  __chkstk_darwin(v56);
  v208 = (uint64_t)&v199 - v57;
  v58 = type metadata accessor for Date(0);
  v59 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v61 = (char *)&v199 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v62);
  v64 = (char *)&v199 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v65);
  v67 = (char *)&v199 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68);
  v70 = (char *)&v199 - v69;
  __chkstk_darwin(v71);
  v73 = (char *)&v199 - v72;
  v221 = a1;
  sub_100008868(a1, (uint64_t)&v199 - v72, (uint64_t *)&unk_1008380D0);
  sub_100008868(v232, (uint64_t)v70, (uint64_t *)&unk_1008380D0);
  v74 = (uint64_t)&v64[*(int *)(v62 + 48)];
  sub_100008868((uint64_t)v73, (uint64_t)v64, (uint64_t *)&unk_1008380D0);
  sub_100008868((uint64_t)v70, v74, (uint64_t *)&unk_1008380D0);
  v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
  if (v75((uint64_t)v64, 1, v58) == 1)
  {
    sub_10000882C((uint64_t)v70, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v73, (uint64_t *)&unk_1008380D0);
    if (v75(v74, 1, v58) == 1)
    {
      sub_10000882C((uint64_t)v64, (uint64_t *)&unk_1008380D0);
      v76 = v221;
      v77 = v208;
      sub_1000D6E9C(v221, v208);
      v78 = v232;
      v79 = v209;
      sub_1000D6E9C(v232, v209);
      v80 = v220;
      v81 = v226;
      v82 = (uint64_t)v210;
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  sub_100008868((uint64_t)v64, (uint64_t)v67, (uint64_t *)&unk_1008380D0);
  if (v75(v74, 1, v58) == 1)
  {
    sub_10000882C((uint64_t)v70, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v73, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v67, v58);
LABEL_6:
    sub_10000882C((uint64_t)v64, (uint64_t *)&unk_10084C100);
    v76 = v221;
    v77 = v208;
    sub_1000D6E9C(v221, v208);
    v78 = v232;
    v79 = v209;
    sub_1000D6E9C(v232, v209);
    v80 = v220;
    v81 = v226;
    v82 = (uint64_t)v210;
LABEL_7:
    sub_1000D6E60(v79);
    sub_1000D6E60(v77);
    sub_1000D6E9C(v76, v82);
    v83 = v212;
    sub_1000D6E9C(v78, (uint64_t)v212);
    v85 = v229;
    v84 = v230;
LABEL_16:
    sub_1000D6E60((uint64_t)v83);
    sub_1000D6E60(v82);
    v95 = v228;
    sub_1000D6E9C(v76, v228);
    v96 = v227;
    sub_1000D6E9C(v78, v227);
LABEL_17:
    sub_1000D6E60(v96);
    sub_1000D6E60(v95);
LABEL_18:
    v106 = v225;
    sub_1000D6E9C(v76, v81);
    sub_1000D6E9C(v78, v106);
LABEL_19:
    sub_1000D6E60(v106);
    sub_1000D6E60(v81);
    v107 = v219;
LABEL_20:
    v108 = v211;
    v109 = v213;
    sub_1000D6E9C(v76, v213);
    sub_1000D6E9C(v78, v108);
LABEL_21:
    sub_1000D6E60(v109);
    sub_1000D6E60(v108);
    sub_1000D6E9C(v76, (uint64_t)v84);
    v110 = v224;
    sub_1000D6E9C(v78, v224);
LABEL_22:
    sub_1000D6E60(v110);
    sub_1000D6E60((uint64_t)v84);
LABEL_23:
    v111 = v223;
    sub_1000D6E9C(v76, v85);
    v112 = v222;
    sub_1000D6E9C(v78, v222);
LABEL_24:
    sub_1000D6E60(v112);
    sub_1000D6E60(v85);
LABEL_25:
    sub_1000D6E9C(v76, v107);
    sub_1000D6E9C(v78, v111);
LABEL_26:
    sub_1000D6E60(v111);
    sub_1000D6E60(v107);
LABEL_27:
    sub_1000D6E9C(v76, v233);
    sub_1000D6E9C(v78, v80);
    v113 = v218;
LABEL_28:
    sub_1000D6E60(v80);
    sub_1000D6E60(v233);
    v114 = v216;
LABEL_29:
    sub_1000D6E9C(v76, v231);
    sub_1000D6E9C(v78, v113);
LABEL_30:
    sub_1000D6E60(v231);
    sub_1000D6E60(v113);
    sub_1000D6E9C(v76, v114);
    v115 = v217;
    sub_1000D6E9C(v78, v217);
LABEL_31:
    sub_1000D6E60(v115);
    sub_1000D6E60(v114);
LABEL_32:
    v116 = v215;
    sub_1000D6E9C(v76, v215);
    v117 = v214;
    sub_1000D6E9C(v78, v214);
LABEL_33:
    sub_1000D6E60(v117);
    sub_1000D6E60(v116);
    goto LABEL_34;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v61, v74, v58);
  v86 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v87 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v61, v58, v86);
  v88 = *(void (**)(char *, uint64_t))(v59 + 8);
  v88(v61, v58);
  sub_10000882C((uint64_t)v70, (uint64_t *)&unk_1008380D0);
  sub_10000882C((uint64_t)v73, (uint64_t *)&unk_1008380D0);
  v88(v67, v58);
  sub_10000882C((uint64_t)v64, (uint64_t *)&unk_1008380D0);
  v76 = v221;
  v77 = v208;
  sub_1000D6E9C(v221, v208);
  v78 = v232;
  v79 = v209;
  sub_1000D6E9C(v232, v209);
  v80 = v220;
  v81 = v226;
  v82 = (uint64_t)v210;
  if ((v87 & 1) == 0)
    goto LABEL_7;
LABEL_9:
  v89 = v207;
  v90 = *(_QWORD *)(v77 + v207[8]);
  sub_1000D6E60(v77);
  v91 = *(_QWORD *)(v79 + v89[8]);
  sub_1000D6E60(v79);
  sub_1000D6E9C(v76, v82);
  v83 = v212;
  sub_1000D6E9C(v78, (uint64_t)v212);
  v92 = v90 == v91;
  v85 = v229;
  v84 = v230;
  if (!v92)
    goto LABEL_16;
  v93 = *(_QWORD *)(v82 + v89[11]);
  sub_1000D6E60(v82);
  v94 = *(_QWORD *)&v83[v89[11]];
  sub_1000D6E60((uint64_t)v83);
  v95 = v228;
  sub_1000D6E9C(v76, v228);
  v96 = v227;
  sub_1000D6E9C(v78, v227);
  v92 = v93 == v94;
  v85 = v229;
  v84 = v230;
  if (!v92)
    goto LABEL_17;
  v97 = v89[7];
  v98 = v95 + v97;
  v99 = v96 + v97;
  v100 = v203;
  v101 = v203 + *(int *)(v205 + 48);
  sub_100008868(v98, v203, (uint64_t *)&unk_100841610);
  sub_100008868(v99, v101, (uint64_t *)&unk_100841610);
  v102 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v206 + 48);
  v103 = v204;
  v104 = v102(v100, 1, v204);
  v212 = (char *)v102;
  if (v104 == 1)
  {
    sub_1000D6E60(v96);
    sub_1000D6E60(v228);
    v105 = v102(v101, 1, v103);
    v85 = v229;
    v84 = v230;
    if (v105 == 1)
    {
      sub_10000882C(v100, (uint64_t *)&unk_100841610);
      sub_1000D6E9C(v76, v81);
      v106 = v225;
      sub_1000D6E9C(v78, v225);
      goto LABEL_40;
    }
LABEL_38:
    sub_10000882C(v100, &qword_10083C2E0);
    goto LABEL_18;
  }
  v120 = v201;
  sub_100008868(v100, v201, (uint64_t *)&unk_100841610);
  v121 = v102(v101, 1, v103);
  v85 = v229;
  if (v121 == 1)
  {
    sub_1000D6E60(v227);
    sub_1000D6E60(v228);
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v120, v103);
    v84 = v230;
    goto LABEL_38;
  }
  v122 = v206;
  v123 = v200;
  (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v200, v101, v103);
  v124 = sub_10009FC50(&qword_10083C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
  v125 = v120;
  LODWORD(v210) = dispatch thunk of static Equatable.== infix(_:_:)(v120, v123, v103, v124);
  v126 = *(void (**)(char *, uint64_t))(v122 + 8);
  v127 = v123;
  v81 = v226;
  v126(v127, v103);
  sub_1000D6E60(v227);
  sub_1000D6E60(v228);
  v126((char *)v125, v103);
  sub_10000882C(v100, (uint64_t *)&unk_100841610);
  sub_1000D6E9C(v76, v81);
  v106 = v225;
  sub_1000D6E9C(v78, v225);
  v84 = v230;
  if ((v210 & 1) == 0)
    goto LABEL_19;
LABEL_40:
  v128 = v207[13];
  v129 = v106 + v128;
  v130 = v202;
  v131 = v202 + *(int *)(v205 + 48);
  sub_100008868(v81 + v128, v202, (uint64_t *)&unk_100841610);
  sub_100008868(v129, v131, (uint64_t *)&unk_100841610);
  v132 = v212;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v212)(v130, 1, v103) == 1)
  {
    sub_1000D6E60(v106);
    sub_1000D6E60(v81);
    v133 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v132)(v131, 1, v103);
    v107 = v219;
    v85 = v229;
    v84 = v230;
    if (v133 == 1)
    {
      sub_10000882C(v202, (uint64_t *)&unk_100841610);
      v109 = v213;
      sub_1000D6E9C(v76, v213);
      v108 = v211;
      sub_1000D6E9C(v78, v211);
      goto LABEL_47;
    }
LABEL_45:
    sub_10000882C(v202, &qword_10083C2E0);
    goto LABEL_20;
  }
  v134 = v199;
  sub_100008868(v130, v199, (uint64_t *)&unk_100841610);
  v135 = v131;
  v136 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v132)(v131, 1, v103);
  v85 = v229;
  if (v136 == 1)
  {
    sub_1000D6E60(v225);
    sub_1000D6E60(v81);
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v134, v103);
    v107 = v219;
    v84 = v230;
    goto LABEL_45;
  }
  v137 = v130;
  v138 = v200;
  (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v200, v135, v103);
  v139 = sub_10009FC50(&qword_10083C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
  LODWORD(v228) = dispatch thunk of static Equatable.== infix(_:_:)(v134, v138, v103, v139);
  v140 = *(void (**)(char *, uint64_t))(v206 + 8);
  v140(v138, v103);
  sub_1000D6E60(v225);
  sub_1000D6E60(v226);
  v140((char *)v134, v103);
  sub_10000882C(v137, (uint64_t *)&unk_100841610);
  v109 = v213;
  sub_1000D6E9C(v76, v213);
  v108 = v211;
  sub_1000D6E9C(v78, v211);
  v107 = v219;
  v84 = v230;
  if ((v228 & 1) == 0)
    goto LABEL_21;
LABEL_47:
  v141 = v207[14];
  v142 = *(_QWORD *)(v109 + v141);
  v143 = *(_QWORD *)(v109 + v141 + 8);
  v144 = (_QWORD *)(v108 + v141);
  v145 = v144[1];
  if (v142 == *v144 && v143 == v145)
  {
    sub_1000D6E60(v109);
    sub_1000D6E60(v108);
    sub_1000D6E9C(v76, (uint64_t)v84);
    v110 = v224;
    sub_1000D6E9C(v78, v224);
  }
  else
  {
    v146 = _stringCompareWithSmolCheck(_:_:expecting:)(v142, v143, *v144, v145, 0);
    sub_1000D6E60(v109);
    sub_1000D6E60(v108);
    sub_1000D6E9C(v76, (uint64_t)v84);
    v110 = v224;
    sub_1000D6E9C(v78, v224);
    if ((v146 & 1) == 0)
      goto LABEL_22;
  }
  v147 = v207;
  v148 = v207[9];
  v149 = *(_QWORD *)((char *)v84 + v148);
  v150 = (uint64_t)v84;
  v151 = *(_QWORD *)(v110 + v148);
  if (v149)
  {
    if (!v151)
    {
      swift_bridgeObjectRetain(v149);
      sub_1000D6E60(v224);
      sub_1000D6E60((uint64_t)v230);
      swift_bridgeObjectRelease(v149);
      goto LABEL_23;
    }
    v152 = sub_1003077C4(v149, *(_QWORD *)(v110 + v148));
    swift_bridgeObjectRetain(v149);
    sub_1000D6E60(v224);
    sub_1000D6E60((uint64_t)v230);
    swift_bridgeObjectRelease(v149);
    sub_1000D6E9C(v76, v85);
    v112 = v222;
    sub_1000D6E9C(v78, v222);
    v111 = v223;
    if ((v152 & 1) == 0)
      goto LABEL_24;
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v110 + v148));
    sub_1000D6E60(v110);
    sub_1000D6E60(v150);
    if (v151)
    {
      swift_bridgeObjectRelease(v151);
      goto LABEL_23;
    }
    sub_1000D6E9C(v76, v85);
    v112 = v222;
    sub_1000D6E9C(v78, v222);
  }
  v153 = v147[12];
  v154 = *(_QWORD *)(v85 + v153);
  v155 = *(_QWORD *)(v112 + v153);
  if (!v154)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v112 + v153));
    sub_1000D6E60(v112);
    sub_1000D6E60(v85);
    if (!v155)
    {
      sub_1000D6E9C(v76, v107);
      v111 = v223;
      sub_1000D6E9C(v78, v223);
      goto LABEL_68;
    }
    v158 = v155;
LABEL_66:
    swift_bridgeObjectRelease(v158);
    v111 = v223;
    goto LABEL_25;
  }
  v156 = *(_QWORD *)(v85 + v153);
  if (!v155)
  {
    swift_bridgeObjectRetain(v156);
    sub_1000D6E60(v222);
    sub_1000D6E60(v85);
    v158 = v154;
    goto LABEL_66;
  }
  v157 = sub_100307898(v156, *(_QWORD *)(v112 + v153));
  swift_bridgeObjectRetain(v154);
  sub_1000D6E60(v222);
  sub_1000D6E60(v85);
  swift_bridgeObjectRelease(v154);
  sub_1000D6E9C(v76, v107);
  v111 = v223;
  sub_1000D6E9C(v78, v223);
  if ((v157 & 1) == 0)
    goto LABEL_26;
LABEL_68:
  v159 = v147[5];
  v161 = *(_QWORD *)(v107 + v159);
  v160 = *(_QWORD *)(v107 + v159 + 8);
  v162 = *(_QWORD *)(v107 + v159 + 16);
  v230 = *(_QWORD **)(v107 + v159 + 24);
  v163 = (uint64_t *)(v111 + v159);
  v165 = *v163;
  v164 = v163[1];
  v167 = v163[2];
  v166 = (_QWORD *)v163[3];
  if (!v161)
  {
    sub_1001425A4(*v163, v163[1], v163[2], v163[3]);
    sub_1000D6E60(v111);
    sub_1000D6E60(v107);
    if (!v165)
    {
      sub_1001425F0(0, v160, v162, (uint64_t)v230);
      v76 = v221;
      sub_1000D6E9C(v221, v233);
      v80 = v220;
      sub_1000D6E9C(v78, v220);
      goto LABEL_78;
    }
LABEL_83:
    sub_1001425F0(v161, v160, v162, (uint64_t)v230);
    sub_1001425F0(v165, v164, v167, (uint64_t)v166);
    v80 = v220;
    v76 = v221;
    goto LABEL_27;
  }
  v229 = v163[1];
  if (!v165)
  {
    v179 = v230;
    sub_1001425A4(v161, v160, v162, (uint64_t)v230);
    swift_bridgeObjectRetain(v161);
    swift_bridgeObjectRetain(v160);
    swift_bridgeObjectRetain(v162);
    swift_bridgeObjectRetain(v179);
    sub_1000D6E60(v223);
    sub_1000D6E60(v107);
    sub_1001425F0(v161, v160, v162, (uint64_t)v179);
    v164 = v229;
    goto LABEL_83;
  }
  v168 = sub_10030681C(v161, v165);
  v169 = v230;
  sub_1001425A4(v161, v160, v162, (uint64_t)v230);
  v170 = v229;
  sub_1001425A4(v165, v229, v167, (uint64_t)v166);
  sub_1001425A4(v161, v160, v162, (uint64_t)v169);
  v171 = v168 && (sub_100306820(v160, v170) & 1) != 0 && sub_10030681C(v162, v167) && sub_100306730(v230, v166);
  swift_bridgeObjectRelease(v165);
  v172 = v230;
  swift_bridgeObjectRelease(v230);
  swift_bridgeObjectRelease(v162);
  swift_bridgeObjectRelease(v160);
  swift_bridgeObjectRelease(v161);
  swift_bridgeObjectRelease(v166);
  swift_bridgeObjectRelease(v167);
  swift_bridgeObjectRelease(v229);
  sub_1000D6E60(v223);
  sub_1000D6E60(v219);
  sub_1001425F0(v161, v160, v162, (uint64_t)v172);
  v76 = v221;
  sub_1000D6E9C(v221, v233);
  v80 = v220;
  sub_1000D6E9C(v78, v220);
  v113 = v218;
  if (!v171)
    goto LABEL_28;
LABEL_78:
  v173 = v207;
  v174 = v207[6];
  v175 = *(_QWORD *)(v233 + v174);
  v176 = *(_QWORD *)(v80 + v174);
  if (!v175)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v80 + v174));
    sub_1000D6E60(v80);
    sub_1000D6E60(v233);
    v114 = v216;
    if (!v176)
    {
      sub_1000D6E9C(v76, v231);
      v113 = v218;
      sub_1000D6E9C(v78, v218);
      goto LABEL_89;
    }
    v180 = v176;
LABEL_87:
    swift_bridgeObjectRelease(v180);
    v113 = v218;
    goto LABEL_29;
  }
  v114 = v216;
  if (!v176)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v233 + v174));
    sub_1000D6E60(v80);
    sub_1000D6E60(v233);
    v180 = v175;
    goto LABEL_87;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v80 + v174));
  swift_bridgeObjectRetain(v175);
  v178 = sub_100307C00(v177, v176);
  swift_bridgeObjectRelease(v176);
  sub_1000D6E60(v80);
  sub_1000D6E60(v233);
  swift_bridgeObjectRelease(v175);
  sub_1000D6E9C(v76, v231);
  v113 = v218;
  sub_1000D6E9C(v78, v218);
  if ((v178 & 1) == 0)
    goto LABEL_30;
LABEL_89:
  v181 = v231;
  sub_100140BAC(*(_QWORD *)(v231 + v173[15]), *(_QWORD *)(v231 + v173[15] + 8));
  v183 = v182;
  sub_1000D6E60(v181);
  sub_1000D6E60(v113);
  sub_1000D6E9C(v76, v114);
  v115 = v217;
  sub_1000D6E9C(v78, v217);
  if ((v183 & 1) == 0)
    goto LABEL_31;
  v184 = v173[10];
  v186 = *(_QWORD *)(v114 + v184);
  v185 = *(_QWORD *)(v114 + v184 + 8);
  v187 = (uint64_t *)(v115 + v184);
  v188 = *v187;
  v189 = v187[1];
  if (v185 >> 60 == 15)
  {
    sub_1000A70D0(v188, v189);
    sub_1000D6E60(v217);
    sub_1000D6E60(v216);
    if (v189 >> 60 == 15)
    {
      sub_1000A71B4(v186, v185);
      v116 = v215;
      sub_1000D6E9C(v221, v215);
      v117 = v214;
      sub_1000D6E9C(v232, v214);
      goto LABEL_97;
    }
LABEL_95:
    sub_1000A71B4(v186, v185);
    sub_1000A71B4(v188, v189);
    v78 = v232;
    v76 = v221;
    goto LABEL_32;
  }
  if (v189 >> 60 == 15)
  {
    sub_1000A70E4(v186, v185);
    sub_1000A70E4(v186, v185);
    sub_1000D6E60(v217);
    sub_1000D6E60(v216);
    sub_1000A71B4(v186, v185);
    goto LABEL_95;
  }
  sub_1000A70D0(v186, v185);
  sub_1000A70D0(v188, v189);
  sub_1000A70D0(v186, v185);
  sub_100140BAC(v186, v185);
  v191 = v190;
  sub_1000A71B4(v188, v189);
  sub_1000A71B4(v186, v185);
  sub_1000D6E60(v217);
  sub_1000D6E60(v216);
  sub_1000A71B4(v186, v185);
  v116 = v215;
  sub_1000D6E9C(v221, v215);
  v117 = v214;
  sub_1000D6E9C(v232, v214);
  if ((v191 & 1) == 0)
    goto LABEL_33;
LABEL_97:
  v192 = v207[16];
  v194 = *(_QWORD *)(v116 + v192);
  v193 = *(_QWORD *)(v116 + v192 + 8);
  v195 = (uint64_t *)(v117 + v192);
  v196 = *v195;
  v197 = v195[1];
  if (v193 >> 60 == 15)
  {
    sub_1000A70D0(v196, v197);
    sub_1000D6E60(v214);
    sub_1000D6E60(v215);
    if (v197 >> 60 == 15)
    {
      sub_1000A71B4(v194, v193);
      v118 = 1;
      return v118 & 1;
    }
  }
  else
  {
    if (v197 >> 60 != 15)
    {
      sub_1000A70D0(v194, v193);
      sub_1000A70D0(v196, v197);
      sub_1000A70D0(v194, v193);
      sub_100140BAC(v194, v193);
      v118 = v198;
      sub_1000A71B4(v196, v197);
      sub_1000A71B4(v194, v193);
      sub_1000D6E60(v214);
      sub_1000D6E60(v215);
      sub_1000A71B4(v194, v193);
      return v118 & 1;
    }
    sub_1000A70E4(v194, v193);
    sub_1000A70E4(v194, v193);
    sub_1000D6E60(v214);
    sub_1000D6E60(v215);
    sub_1000A71B4(v194, v193);
  }
  sub_1000A71B4(v194, v193);
  sub_1000A71B4(v196, v197);
LABEL_34:
  v118 = 0;
  return v118 & 1;
}

uint64_t type metadata accessor for RDSavedReminder(uint64_t a1)
{
  uint64_t result;

  result = qword_10083C360;
  if (!qword_10083C360)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDSavedReminder);
  return result;
}

uint64_t sub_1001425A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1001425F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

unint64_t sub_10014263C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083B670;
  if (!qword_10083B670)
  {
    v1 = sub_1000151B0(255, &qword_10083DAC0, REMHashtag_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10083B670);
  }
  return result;
}

uint64_t *sub_100142694(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = *v13;
    if (*v13)
    {
      v15 = v13[1];
      v16 = v13[2];
      *v12 = v14;
      v12[1] = v15;
      v17 = v13[3];
      v12[2] = v16;
      v12[3] = v17;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
    }
    else
    {
      v18 = *((_OWORD *)v13 + 1);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *((_OWORD *)v12 + 1) = v18;
    }
    v19 = a3[6];
    v20 = a3[7];
    v21 = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)a1 + v19) = v21;
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    v24 = type metadata accessor for DateComponents(0);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v25 + 48);
    v27 = swift_bridgeObjectRetain(v21);
    if (v26(v23, 1, v24, v27))
    {
      v28 = sub_10001A630((uint64_t *)&unk_100841610);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v29 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v30 = *(uint64_t *)((char *)a2 + v29);
    *(uint64_t *)((char *)a1 + v29) = v30;
    v31 = a3[10];
    v32 = (char *)a1 + v31;
    v33 = (_OWORD *)((char *)a2 + v31);
    v34 = *(uint64_t *)((char *)a2 + v31 + 8);
    swift_bridgeObjectRetain(v30);
    if (v34 >> 60 == 15)
    {
      *(_OWORD *)v32 = *v33;
    }
    else
    {
      v35 = *(_QWORD *)v33;
      sub_1000A70E4(v35, v34);
      *(_QWORD *)v32 = v35;
      *((_QWORD *)v32 + 1) = v34;
    }
    v36 = a3[12];
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v37 = *(uint64_t *)((char *)a2 + v36);
    *(uint64_t *)((char *)a1 + v36) = v37;
    v38 = a3[13];
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    v41 = swift_bridgeObjectRetain(v37);
    if (v26(v40, 1, v24, v41))
    {
      v42 = sub_10001A630((uint64_t *)&unk_100841610);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v39, v40, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v39, 0, 1, v24);
    }
    v43 = a3[14];
    v44 = a3[15];
    v45 = (uint64_t *)((char *)a1 + v43);
    v46 = (uint64_t *)((char *)a2 + v43);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = (uint64_t *)((char *)a1 + v44);
    v49 = *(uint64_t *)((char *)a2 + v44);
    v50 = *(uint64_t *)((char *)a2 + v44 + 8);
    swift_bridgeObjectRetain(v47);
    sub_1000A70E4(v49, v50);
    *v48 = v49;
    v48[1] = v50;
    v51 = a3[16];
    v52 = (char *)a1 + v51;
    v53 = (char *)a2 + v51;
    v54 = *((_QWORD *)v53 + 1);
    if (v54 >> 60 == 15)
    {
      *(_OWORD *)v52 = *(_OWORD *)v53;
    }
    else
    {
      v55 = *(_QWORD *)v53;
      sub_1000A70E4(*(_QWORD *)v53, *((_QWORD *)v53 + 1));
      *(_QWORD *)v52 = v55;
      *((_QWORD *)v52 + 1) = v54;
    }
  }
  return a1;
}

uint64_t sub_1001429AC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t *v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  unint64_t v17;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = (_QWORD *)(a1 + a2[5]);
  if (*v6)
  {
    swift_bridgeObjectRelease(*v6);
    swift_bridgeObjectRelease(v6[1]);
    swift_bridgeObjectRelease(v6[2]);
    swift_bridgeObjectRelease(v6[3]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  v7 = a1 + a2[7];
  v8 = type metadata accessor for DateComponents(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
  v11 = (uint64_t *)(a1 + a2[10]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_1000A71C8(*v11, v12);
  v13 = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
  v14 = a1 + a2[13];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v10)(v14, 1, v8, v13))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
  result = sub_1000A71C8(*(_QWORD *)(a1 + a2[15]), *(_QWORD *)(a1 + a2[15] + 8));
  v16 = (uint64_t *)(a1 + a2[16]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    return sub_1000A71C8(*v16, v17);
  return result;
}

char *sub_100142B40(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(_QWORD *)v11;
  if (*(_QWORD *)v11)
  {
    v13 = *((_QWORD *)v11 + 1);
    v14 = *((_QWORD *)v11 + 2);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v13;
    v15 = *((_QWORD *)v11 + 3);
    *((_QWORD *)v10 + 2) = v14;
    *((_QWORD *)v10 + 3) = v15;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
  }
  else
  {
    v16 = *((_OWORD *)v11 + 1);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v16;
  }
  v17 = a3[6];
  v18 = a3[7];
  v19 = *(_QWORD *)&a2[v17];
  *(_QWORD *)&a1[v17] = v19;
  v20 = &a1[v18];
  v21 = &a2[v18];
  v22 = type metadata accessor for DateComponents(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v23 + 48);
  v25 = swift_bridgeObjectRetain(v19);
  if (v24(v21, 1, v22, v25))
  {
    v26 = sub_10001A630((uint64_t *)&unk_100841610);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v27 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v28 = *(_QWORD *)&a2[v27];
  *(_QWORD *)&a1[v27] = v28;
  v29 = a3[10];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *(_QWORD *)&a2[v29 + 8];
  swift_bridgeObjectRetain(v28);
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  else
  {
    v33 = *(_QWORD *)v31;
    sub_1000A70E4(v33, v32);
    *(_QWORD *)v30 = v33;
    *((_QWORD *)v30 + 1) = v32;
  }
  v34 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  v35 = *(_QWORD *)&a2[v34];
  *(_QWORD *)&a1[v34] = v35;
  v36 = a3[13];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = swift_bridgeObjectRetain(v35);
  if (v24(v38, 1, v22, v39))
  {
    v40 = sub_10001A630((uint64_t *)&unk_100841610);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v37, v38, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v37, 0, 1, v22);
  }
  v41 = a3[14];
  v42 = a3[15];
  v43 = &a1[v41];
  v44 = &a2[v41];
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = v45;
  v46 = (uint64_t *)&a1[v42];
  v47 = *(_QWORD *)&a2[v42];
  v48 = *(_QWORD *)&a2[v42 + 8];
  swift_bridgeObjectRetain(v45);
  sub_1000A70E4(v47, v48);
  *v46 = v47;
  v46[1] = v48;
  v49 = a3[16];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v52 = *((_QWORD *)v51 + 1);
  if (v52 >> 60 == 15)
  {
    *(_OWORD *)v50 = *(_OWORD *)v51;
  }
  else
  {
    v53 = *(_QWORD *)v51;
    sub_1000A70E4(*(_QWORD *)v51, *((_QWORD *)v51 + 1));
    *(_QWORD *)v50 = v53;
    *((_QWORD *)v50 + 1) = v52;
  }
  return a1;
}

char *sub_100142E2C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)&a1[v12];
  v16 = *(_QWORD *)&a2[v12];
  if (v15)
  {
    if (v16)
    {
      *(_QWORD *)v13 = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v15);
      v17 = *((_QWORD *)v14 + 1);
      v18 = *((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
      v19 = *((_QWORD *)v14 + 2);
      v20 = *((_QWORD *)v13 + 2);
      *((_QWORD *)v13 + 2) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
      v21 = *((_QWORD *)v14 + 3);
      v22 = *((_QWORD *)v13 + 3);
      *((_QWORD *)v13 + 3) = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      sub_100143340(&a1[v12]);
      v26 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v26;
    }
  }
  else if (v16)
  {
    *(_QWORD *)v13 = v16;
    v23 = *((_QWORD *)v14 + 1);
    *((_QWORD *)v13 + 1) = v23;
    v24 = *((_QWORD *)v14 + 2);
    *((_QWORD *)v13 + 2) = v24;
    v25 = *((_QWORD *)v14 + 3);
    *((_QWORD *)v13 + 3) = v25;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
  }
  else
  {
    v27 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v27;
  }
  v28 = a3[6];
  v29 = *(_QWORD *)&a1[v28];
  v30 = *(_QWORD *)&a2[v28];
  *(_QWORD *)&a1[v28] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v29);
  v31 = a3[7];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = type metadata accessor for DateComponents(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
LABEL_20:
    v39 = sub_10001A630((uint64_t *)&unk_100841610);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v32, v33, v34);
LABEL_21:
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v40 = a3[9];
  v41 = *(_QWORD *)&a1[v40];
  v42 = *(_QWORD *)&a2[v40];
  *(_QWORD *)&a1[v40] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v41);
  v43 = a3[10];
  v44 = (uint64_t *)&a1[v43];
  v45 = (uint64_t *)&a2[v43];
  v46 = *(_QWORD *)&a2[v43 + 8];
  if (*(_QWORD *)&a1[v43 + 8] >> 60 == 15)
  {
    if (v46 >> 60 != 15)
    {
      v47 = *v45;
      sub_1000A70E4(v47, v46);
      *v44 = v47;
      v44[1] = v46;
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (v46 >> 60 == 15)
  {
    sub_1000EA68C((uint64_t)v44);
LABEL_26:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_28;
  }
  v48 = *v45;
  sub_1000A70E4(v48, v46);
  v49 = *v44;
  v50 = v44[1];
  *v44 = v48;
  v44[1] = v46;
  sub_1000A71C8(v49, v50);
LABEL_28:
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  v51 = a3[12];
  v52 = *(_QWORD *)&a1[v51];
  v53 = *(_QWORD *)&a2[v51];
  *(_QWORD *)&a1[v51] = v53;
  swift_bridgeObjectRetain(v53);
  v54 = swift_bridgeObjectRelease(v52);
  v55 = a3[13];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v36)(&a1[v55], 1, v34, v54);
  v59 = v36(v57, 1, v34);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v56, v57, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v56, 0, 1, v34);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v56, v34);
LABEL_33:
    v60 = sub_10001A630((uint64_t *)&unk_100841610);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v56, v57, v34);
LABEL_34:
  v61 = a3[14];
  v62 = &a1[v61];
  v63 = &a2[v61];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v64 = *((_QWORD *)v63 + 1);
  v65 = *((_QWORD *)v62 + 1);
  *((_QWORD *)v62 + 1) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  v66 = a3[15];
  v67 = (uint64_t *)&a1[v66];
  v68 = (uint64_t *)&a2[v66];
  v69 = *v68;
  v70 = v68[1];
  sub_1000A70E4(*v68, v70);
  v71 = *v67;
  v72 = v67[1];
  *v67 = v69;
  v67[1] = v70;
  sub_1000A71C8(v71, v72);
  v73 = a3[16];
  v74 = (uint64_t *)&a1[v73];
  v75 = (uint64_t *)&a2[v73];
  v76 = *(_QWORD *)&a2[v73 + 8];
  if (*(_QWORD *)&a1[v73 + 8] >> 60 != 15)
  {
    if (v76 >> 60 != 15)
    {
      v78 = *v75;
      sub_1000A70E4(v78, v76);
      v79 = *v74;
      v80 = v74[1];
      *v74 = v78;
      v74[1] = v76;
      sub_1000A71C8(v79, v80);
      return a1;
    }
    sub_1000EA68C((uint64_t)v74);
    goto LABEL_39;
  }
  if (v76 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)v74 = *(_OWORD *)v75;
    return a1;
  }
  v77 = *v75;
  sub_1000A70E4(v77, v76);
  *v74 = v77;
  v74[1] = v76;
  return a1;
}

_QWORD *sub_100143340(_QWORD *a1)
{
  destroy for RDSavedAlarmTriggers(a1);
  return a1;
}

char *sub_100143374(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *(_OWORD *)v12;
  v14 = *((_OWORD *)v12 + 1);
  v15 = *(_QWORD *)&a2[v10];
  *(_OWORD *)v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *(_QWORD *)&a1[v10] = v15;
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for DateComponents(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v18, 1, v19))
  {
    v22 = sub_10001A630((uint64_t *)&unk_100841610);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v23 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  v24 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  v25 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  v26 = &a1[v25];
  v27 = &a2[v25];
  if (v21(&a2[v25], 1, v19))
  {
    v28 = sub_10001A630((uint64_t *)&unk_100841610);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v26, v27, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  }
  v29 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v29] = *(_OWORD *)&a2[v29];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  return a1;
}

char *sub_10014358C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)&a1[v12];
  if (v15)
  {
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_bridgeObjectRelease(v15);
      v16 = *((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRelease(v16);
      v17 = *((_QWORD *)v13 + 2);
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      swift_bridgeObjectRelease(v17);
      v18 = *((_QWORD *)v13 + 3);
      *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRelease(v18);
      goto LABEL_12;
    }
    sub_100143340(v13);
  }
  v19 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v19;
LABEL_12:
  v20 = a3[6];
  v21 = *(_QWORD *)&a1[v20];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  swift_bridgeObjectRelease(v21);
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for DateComponents(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_17:
    v30 = sub_10001A630((uint64_t *)&unk_100841610);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v23, v24, v25);
LABEL_18:
  v31 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v32 = *(_QWORD *)&a1[v31];
  *(_QWORD *)&a1[v31] = *(_QWORD *)&a2[v31];
  swift_bridgeObjectRelease(v32);
  v33 = a3[10];
  v34 = (uint64_t)&a1[v33];
  v35 = &a2[v33];
  v36 = *(_QWORD *)&a1[v33 + 8];
  if (v36 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_23;
  }
  v37 = *((_QWORD *)v35 + 1);
  if (v37 >> 60 == 15)
  {
    sub_1000EA68C(v34);
    goto LABEL_21;
  }
  v38 = *(_QWORD *)v34;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v37;
  sub_1000A71C8(v38, v36);
LABEL_23:
  v39 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  v40 = *(_QWORD *)&a1[v39];
  *(_QWORD *)&a1[v39] = *(_QWORD *)&a2[v39];
  v41 = swift_bridgeObjectRelease(v40);
  v42 = a3[13];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v27)(&a1[v42], 1, v25, v41);
  v46 = v27(v44, 1, v25);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v43, v44, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v43, 0, 1, v25);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v43, v25);
LABEL_28:
    v47 = sub_10001A630((uint64_t *)&unk_100841610);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_29;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v43, v44, v25);
LABEL_29:
  v48 = a3[14];
  v49 = &a1[v48];
  v50 = &a2[v48];
  v52 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  v53 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease(v53);
  v54 = a3[15];
  v55 = *(_QWORD *)&a1[v54];
  v56 = *(_QWORD *)&a1[v54 + 8];
  *(_OWORD *)&a1[v54] = *(_OWORD *)&a2[v54];
  sub_1000A71C8(v55, v56);
  v57 = a3[16];
  v58 = (uint64_t *)&a1[v57];
  v59 = (uint64_t *)&a2[v57];
  v60 = *(_QWORD *)&a1[v57 + 8];
  if (v60 >> 60 != 15)
  {
    v61 = v59[1];
    if (v61 >> 60 != 15)
    {
      v62 = *v58;
      *v58 = *v59;
      v58[1] = v61;
      sub_1000A71C8(v62, v60);
      return a1;
    }
    sub_1000EA68C((uint64_t)v58);
  }
  *(_OWORD *)v58 = *(_OWORD *)v59;
  return a1;
}

uint64_t sub_100143994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001439A0);
}

uint64_t sub_1001439A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_10001A630((uint64_t *)&unk_100841610);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 56) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100143A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100143A60);
}

uint64_t sub_100143A60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_10001A630((uint64_t *)&unk_100841610);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 56) + 8) = (a2 - 1);
  return result;
}

void sub_100143B10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  char *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;

  sub_1000BE2FC(319, (unint64_t *)&qword_100839D60, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = " ";
    v6[2] = &unk_1006A9E28;
    sub_1000BE2FC(319, (unint64_t *)&unk_10083C370, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = (char *)&value witness table for Builtin.Int64 + 64;
      v9 = &unk_1006A9E28;
      v10 = &unk_1006A9E40;
      v11 = (char *)&value witness table for Builtin.Int64 + 64;
      v12 = &unk_1006A9E28;
      v13 = v7;
      v14 = &unk_1006A9E58;
      v15 = &unk_1006A9E70;
      v16 = &unk_1006A9E40;
      swift_initStructMetadata(a1, 256, 13, v6, a1 + 16);
    }
  }
}

unint64_t sub_100143BFC()
{
  unint64_t result;

  result = qword_10083C3D8;
  if (!qword_10083C3D8)
  {
    result = swift_getWitnessTable(&unk_1006A9F9C, &type metadata for RDSavedReminder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083C3D8);
  }
  return result;
}

unint64_t sub_100143C40()
{
  unint64_t result;

  result = qword_10083C3E8;
  if (!qword_10083C3E8)
  {
    result = swift_getWitnessTable(&unk_1006A7CD0, &type metadata for RDSavedAlarmTriggers);
    atomic_store(result, (unint64_t *)&qword_10083C3E8);
  }
  return result;
}

unint64_t sub_100143C84()
{
  unint64_t result;

  result = qword_10083C400;
  if (!qword_10083C400)
  {
    result = swift_getWitnessTable(&unk_1006B48EC, &type metadata for RDSavedDueDateDeltaAlert);
    atomic_store(result, (unint64_t *)&qword_10083C400);
  }
  return result;
}

unint64_t sub_100143CC8()
{
  unint64_t result;

  result = qword_10083C420;
  if (!qword_10083C420)
  {
    result = swift_getWitnessTable(&unk_1006BD178, &type metadata for RDSavedHashtag);
    atomic_store(result, (unint64_t *)&qword_10083C420);
  }
  return result;
}

unint64_t sub_100143D0C()
{
  unint64_t result;

  result = qword_10083C438;
  if (!qword_10083C438)
  {
    result = swift_getWitnessTable(&unk_1006BB444, &type metadata for RDSavedRecurrenceRule);
    atomic_store(result, (unint64_t *)&qword_10083C438);
  }
  return result;
}

unint64_t sub_100143D50()
{
  unint64_t result;

  result = qword_10083C450;
  if (!qword_10083C450)
  {
    result = swift_getWitnessTable(&unk_1006A7CF8, &type metadata for RDSavedAlarmTriggers);
    atomic_store(result, (unint64_t *)&qword_10083C450);
  }
  return result;
}

unint64_t sub_100143D94()
{
  unint64_t result;

  result = qword_10083C460;
  if (!qword_10083C460)
  {
    result = swift_getWitnessTable(&unk_1006B4914, &type metadata for RDSavedDueDateDeltaAlert);
    atomic_store(result, (unint64_t *)&qword_10083C460);
  }
  return result;
}

unint64_t sub_100143DD8()
{
  unint64_t result;

  result = qword_10083C478;
  if (!qword_10083C478)
  {
    result = swift_getWitnessTable(&unk_1006BD1A0, &type metadata for RDSavedHashtag);
    atomic_store(result, (unint64_t *)&qword_10083C478);
  }
  return result;
}

unint64_t sub_100143E1C()
{
  unint64_t result;

  result = qword_10083C488;
  if (!qword_10083C488)
  {
    result = swift_getWitnessTable(&unk_1006BB46C, &type metadata for RDSavedRecurrenceRule);
    atomic_store(result, (unint64_t *)&qword_10083C488);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RDSavedReminder.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedReminder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_100143F3C + 4 * byte_1006A9DD2[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_100143F70 + 4 * byte_1006A9DCD[v4]))();
}

uint64_t sub_100143F70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100143F78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100143F80);
  return result;
}

uint64_t sub_100143F8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100143F94);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_100143F98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100143FA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedReminder.CodingKeys()
{
  return &type metadata for RDSavedReminder.CodingKeys;
}

unint64_t sub_100143FC0()
{
  unint64_t result;

  result = qword_10083C490;
  if (!qword_10083C490)
  {
    result = swift_getWitnessTable(&unk_1006A9F74, &type metadata for RDSavedReminder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083C490);
  }
  return result;
}

unint64_t sub_100144008()
{
  unint64_t result;

  result = qword_10083C498;
  if (!qword_10083C498)
  {
    result = swift_getWitnessTable(&unk_1006A9EE4, &type metadata for RDSavedReminder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083C498);
  }
  return result;
}

unint64_t sub_100144050()
{
  unint64_t result;

  result = qword_10083C4A0;
  if (!qword_10083C4A0)
  {
    result = swift_getWitnessTable(&unk_1006A9F0C, &type metadata for RDSavedReminder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10083C4A0);
  }
  return result;
}

uint64_t sub_100144094(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  if (a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144)
  {
    v5 = 0xEC00000065746144;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC00000065746144, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6972546D72616C61 && a2 == 0xED00007372656767)
  {
    v7 = 0xED00007372656767;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6972546D72616C61, 0xED00007372656767, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000012)
  {
    v8 = 0x80000001006F63A0;
    if (a2 == 0x80000001006F63A0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001006F63A0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x80000001006F45B0;
    if (a2 == 0x80000001006F45B0)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001006F45B0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x64656767616C66 && a2 == 0xE700000000000000)
  {
    v10 = 0xE700000000000000;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656767616C66, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x7367617468736168 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7367617468736168, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0xD000000000000011)
  {
    v12 = 0x80000001006F45D0;
    if (a2 == 0x80000001006F45D0)
      goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001006F45D0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    v13 = 0xE800000000000000;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_47;
  }
  if (a1 == 0x6E65727275636572 && a2 == 0xEF73656C75526563)
  {
    v14 = 0xEF73656C75526563;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65727275636572, 0xEF73656C75526563, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_53;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001006F4590)
  {
    v15 = 0x80000001006F4590;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001006F4590, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_59;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v16 = 0xE500000000000000;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_65;
  }
  if (a1 == 0xD000000000000011)
  {
    v17 = 0x80000001006F4520;
    if (a2 == 0x80000001006F4520)
      goto LABEL_70;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001006F4520, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_70:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001006F9AA0)
  {
    swift_bridgeObjectRelease(0x80000001006F9AA0);
    return 12;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001006F9AA0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

_QWORD *sub_1001445DC(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = sub_100146380(a1, (uint64_t)a2, a3);

  return v4;
}

uint64_t sub_100144618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083C4A8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083C4A8);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001446A8()
{
  uint64_t result;

  result = sub_1000153F4(0);
  qword_100871C48 = result;
  return result;
}

uint64_t sub_1001446C8()
{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t result;

  KeyPath = swift_getKeyPath(&unk_1006AA068);
  v1 = sub_10033DCC4(KeyPath);
  result = swift_release(KeyPath);
  qword_100871C50 = v1;
  return result;
}

uint64_t sub_100144708(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  char *v60;
  uint64_t v61;
  void (**v62)(char *, char *, uint64_t);
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  id v74;
  id v75;
  void *v76;
  char *v77;
  uint64_t v78;
  void (**v79)(char *, char *, uint64_t);
  void (*v80)(char *, char *, uint64_t);
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  _QWORD *v89;
  id v90;
  void *v91;
  id v92;
  void *v93;
  char *v94;
  uint64_t v95;
  void (**v96)(char *, char *, uint64_t);
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v100)(uint64_t, uint64_t, uint64_t);
  char *v101;
  id v102;
  void *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void *v115;
  _QWORD *v116;
  id v117;
  void (*v118)(char *, uint64_t);
  char *v119;
  id v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  id v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  void (**v129)(char *, char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  void *v136;
  id v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  id v141;
  void *v142;
  char *v143;
  uint64_t v144;
  void (**v145)(char *, char *, uint64_t);
  void (*v146)(char *, char *, uint64_t);
  void (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  _QWORD *v154;
  id v155;
  id v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  id v166;
  uint64_t v167;
  void *v168;
  void *v169;
  id v170;
  void *v171;
  char *v172;
  void (**v173)(char *, char *, uint64_t);
  void (*v174)(char *, char *, uint64_t);
  void (*v175)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v176)(char *, uint64_t, uint64_t);
  id v177;
  void *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  void *v189;
  _QWORD *v190;
  id v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  id v196;
  void *v197;
  char *v198;
  uint64_t v199;
  void (**v200)(char *, char *, uint64_t);
  void (*v201)(char *, char *, uint64_t);
  void (*v202)(char *, char *, uint64_t);
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  _QWORD *v210;
  id v211;
  id v212;
  void *v213;
  uint64_t v214;
  id v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  id v221;
  NSString v222;
  id v223;
  _QWORD *v224;
  void *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  id v236;
  uint64_t v237;
  uint64_t KeyPath;
  id v240;
  void *v241;
  uint64_t v242;
  uint64_t inited;
  void *v244;
  _QWORD *v245;
  id v246;
  id v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  _QWORD *v251;
  id v252;
  uint64_t v253;
  id v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  _QWORD *v259;
  id v260;
  id v261;
  id v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  _QWORD *v268;
  id v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  const char *v274;
  uint64_t i;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  uint64_t v294;
  char *v295;
  id v296;
  uint64_t v297;
  char *v298;
  void (**v299)(char *, char *, uint64_t);
  __int128 v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314[48];
  char v315[48];
  char v316[64];
  _QWORD *v317;

  v3 = v2;
  v294 = a2;
  v296 = a1;
  v4 = type metadata accessor for Logger(0);
  v280 = *(_QWORD *)(v4 - 8);
  v281 = v4;
  __chkstk_darwin(v4);
  v278 = (char *)&v278 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v279 = (char *)&v278 - v7;
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v288 = (char *)&v278 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v293 = (char *)&v278 - v11;
  __chkstk_darwin(v12);
  v292 = (char *)&v278 - v13;
  __chkstk_darwin(v14);
  v291 = (char *)&v278 - v15;
  __chkstk_darwin(v16);
  v287 = (char *)&v278 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v278 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v278 - v22;
  __chkstk_darwin(v24);
  v295 = (char *)&v278 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v278 - v27;
  v29 = type metadata accessor for Date(0);
  v299 = *(void (***)(char *, char *, uint64_t))(v29 - 8);
  *(_QWORD *)&v300 = v29;
  __chkstk_darwin(v29);
  v283 = (char *)&v278 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v289 = (char *)&v278 - v32;
  __chkstk_darwin(v33);
  v286 = (char *)&v278 - v34;
  __chkstk_darwin(v35);
  v285 = (char *)&v278 - v36;
  __chkstk_darwin(v37);
  v282 = (char *)&v278 - v38;
  __chkstk_darwin(v39);
  v290 = (char *)&v278 - v40;
  __chkstk_darwin(v41);
  v284 = (char *)&v278 - v42;
  __chkstk_darwin(v43);
  v298 = (char *)&v278 - v44;
  __chkstk_darwin(v45);
  v47 = (char *)&v278 - v46;
  v48 = sub_10001A630((uint64_t *)&unk_100839C80);
  v49 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v51 = (char *)&v278 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836D70 != -1)
    swift_once(&qword_100836D70, sub_1001446A8);
  v297 = qword_100871C48;
  switch((unint64_t)objc_msgSend(v2, "type"))
  {
    case 0uLL:
      v52 = objc_msgSend(v2, "listID");
      if (!v52)
        goto LABEL_68;
      v53 = v52;
      v54 = v301;
      v55 = sub_1005CCB64(v53);
      if (v54)
        goto LABEL_77;
      v56 = v55;
      sub_1004BB19C(v55, 0);
      v2 = v57;
      if (v57)
      {
        v301 = 0;
        KeyPath = swift_getKeyPath(&unk_1006AA138);
        v240 = v2;
        v241 = (void *)sub_1002E7220(KeyPath, v2);
        swift_release(KeyPath);

        v242 = sub_10001A630(&qword_10083C4C0);
        inited = swift_initStackObject(v242, &v303);
        v300 = xmmword_1006A3C40;
        *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
        v244 = (void *)v297;
        *(_QWORD *)(inited + 32) = v297;
        *(_QWORD *)(inited + 40) = v241;
        v317 = (_QWORD *)inited;
        specialized Array._endMutation()(inited);
        v245 = v317;
        v246 = v241;
        v247 = v244;
        v2 = (void *)sub_10000D2BC(v245);
        if ((v294 & 1) != 0)
        {

        }
        else
        {
          v248 = swift_getKeyPath(&unk_1006AA0D0);
          v299 = v2;
          v249 = (void *)sub_10033DA6C(v248);
          swift_release(v248);
          v250 = swift_initStackObject(v242, &v302);
          *(_OWORD *)(v250 + 16) = v300;
          *(_QWORD *)(v250 + 32) = v2;
          *(_QWORD *)(v250 + 40) = v249;
          v317 = (_QWORD *)v250;
          specialized Array._endMutation()(v250);
          v251 = v317;
          v252 = v249;
          v2 = (void *)sub_10000D2BC(v251);

        }
      }
      else
      {
        v261 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v53);
        swift_willThrow(v261);

LABEL_41:
      }
      return (uint64_t)v2;
    case 1uLL:
      v166 = objc_msgSend(v2, "parentReminderID");
      if (!v166)
        goto LABEL_68;
      v56 = v166;
      v167 = v301;
      v168 = sub_1005CBC20(v56);
      if (v167)
        goto LABEL_41;
      v53 = v168;
      sub_1004BB130(v168, 0);
      v2 = v225;
      if (v225)
      {
        v253 = swift_getKeyPath(&unk_1006AA0D0);
        v254 = v2;
        v255 = sub_1002E7234(v253, v2);
        swift_release(v253);

        v256 = sub_10001A630(&qword_10083C4C0);
        v257 = swift_initStackObject(v256, &v305);
        *(_OWORD *)(v257 + 16) = xmmword_1006A3C40;
        v258 = (void *)v297;
        *(_QWORD *)(v257 + 32) = v297;
        *(_QWORD *)(v257 + 40) = v255;
        v317 = (_QWORD *)v257;
        specialized Array._endMutation()(v257);
        v259 = v317;
        v260 = v258;
        v2 = (void *)sub_10000D2BC(v259);

        return (uint64_t)v2;
      }
      v262 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v56);
      swift_willThrow(v262);

      goto LABEL_77;
    case 2uLL:
      v125 = objc_msgSend(v2, "objectIDs");
      if (!v125)
        goto LABEL_68;
      v126 = v125;
      v127 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v128 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v126, v127);

      v129 = (void (**)(char *, char *, uint64_t))swift_getKeyPath(&unk_1006AA108);
      if ((unint64_t)v128 >> 62)
      {
        if (v128 < 0)
          v263 = v128;
        else
          v263 = v128 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v128);
        v130 = _CocoaArrayWrapper.endIndex.getter(v263);
        swift_bridgeObjectRelease();
        if (v130)
        {
LABEL_24:
          v299 = v129;
          v317 = _swiftEmptyArrayStorage;
          sub_1001C1BB8(0, v130 & ~(v130 >> 63), 0);
          if (v130 < 0)
          {
            __break(1u);
LABEL_108:
            if (qword_100836D68 != -1)
              swift_once(&qword_100836D68, sub_100144618);
            v270 = v281;
            v271 = sub_10001AAA8(v281, (uint64_t)qword_10083C4A8);
            (*(void (**)(char *, uint64_t, uint64_t))(v280 + 16))(v278, v271, v270);
            v272 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
            v273 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
            v274 = "unknown type";
            for (i = 12; ; i = 20)
            {
              sub_1004A14D8((uint64_t)v274, i, 2uLL, v272, v273);
              __break(1u);
LABEL_112:
              if (qword_100836D68 != -1)
                swift_once(&qword_100836D68, sub_100144618);
              v276 = v281;
              v277 = sub_10001AAA8(v281, (uint64_t)qword_10083C4A8);
              (*(void (**)(char *, uint64_t, uint64_t))(v280 + 16))(v279, v277, v276);
              v272 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
              v273 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
              v274 = "unknown textMatching";
            }
          }
          v131 = 0;
          v132 = v317;
          *(_QWORD *)&v300 = v128 & 0xC000000000000001;
          v133 = v128;
          v134 = v130;
          do
          {
            if ((_QWORD)v300)
              v135 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v131, v128);
            else
              v135 = *(id *)(v128 + 8 * v131 + 32);
            v136 = v135;
            v137 = objc_msgSend(v135, "uuid");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v137);

            v138 = type metadata accessor for UUID(0);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v51, 0, 1, v138);

            v317 = v132;
            v140 = v132[2];
            v139 = v132[3];
            if (v140 >= v139 >> 1)
            {
              sub_1001C1BB8(v139 > 1, v140 + 1, 1);
              v132 = v317;
            }
            ++v131;
            v132[2] = v140 + 1;
            sub_1000F2CE4((uint64_t)v51, (uint64_t)v132+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v140);
            v128 = v133;
          }
          while (v134 != v131);
          swift_bridgeObjectRelease();
          v129 = v299;
LABEL_106:
          v264 = sub_10033DA90((uint64_t)v129, (uint64_t)v132);
          swift_release(v129);
          v265 = sub_10001A630(&qword_10083C4C0);
          v266 = swift_initStackObject(v265, &v304);
          *(_OWORD *)(v266 + 16) = xmmword_1006A3C40;
          v267 = (void *)v297;
          *(_QWORD *)(v266 + 32) = v297;
          *(_QWORD *)(v266 + 40) = v264;
          v317 = (_QWORD *)v266;
          specialized Array._endMutation()(v266);
          v268 = v317;
          v269 = v267;
          return sub_10000D2BC(v268);
        }
      }
      else
      {
        v130 = *(_QWORD *)((v128 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v130)
          goto LABEL_24;
      }
      swift_bridgeObjectRelease();
      v132 = _swiftEmptyArrayStorage;
      goto LABEL_106;
    case 3uLL:
      v141 = objc_msgSend(v2, "startingDueDate");
      if (v141)
      {
        v142 = v141;
        v143 = v298;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v141);

        v145 = v299;
        v144 = v300;
        v146 = v299[4];
        v146(v28, v143, v300);
        v147 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v145[7];
        v147(v28, 0, 1, v144);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v145[6])(v28, 1, v144) != 1)
        {
          v146(v47, v28, v144);
          v148 = swift_getKeyPath(&unk_1006AA098);
          v149 = (uint64_t)v295;
          v145[2](v295, v47, v144);
          v147((char *)v149, 0, 1, v144);
          v150 = sub_10033DAA4(v148, v149);
          swift_release(v148);
          v151 = sub_10001A630(&qword_10083C4C0);
          v152 = swift_initStackObject(v151, &v306);
          *(_OWORD *)(v152 + 16) = xmmword_1006A3C40;
          v153 = (void *)v297;
          *(_QWORD *)(v152 + 32) = v297;
          *(_QWORD *)(v152 + 40) = v150;
          v317 = (_QWORD *)v152;
          specialized Array._endMutation()(v152);
          v154 = v317;
          v155 = v153;
          v2 = (void *)sub_10000D2BC(v154);
          ((void (*)(char *, uint64_t))v145[1])(v47, v144);
          return (uint64_t)v2;
        }
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t, _QWORD))v299[7])(v28, 1, 1, v300);
      }
      sub_1000EA320((uint64_t)v28);
      v2 = (void *)objc_opt_self(REMError);
      v222 = String._bridgeToObjectiveC()();
      v223 = objc_msgSend(v2, "internalErrorWithDebugDescription:", v222);
      goto LABEL_91;
    case 4uLL:
      v75 = objc_msgSend(v2, "endingDueDate");
      if (v75)
      {
        v76 = v75;
        v77 = v298;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v75);

        v79 = v299;
        v78 = v300;
        v80 = v299[4];
        v80(v23, v77, v300);
        v81 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v79[7];
        v81(v23, 0, 1, v78);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v79[6])(v23, 1, v78) != 1)
        {
          v82 = v284;
          v80(v284, v23, v78);
          v83 = swift_getKeyPath(&unk_1006AA098);
          v84 = (uint64_t)v295;
          v79[2](v295, v82, v78);
          v81((char *)v84, 0, 1, v78);
          v85 = sub_10033DACC(v83, v84);
          swift_release(v83);
          v86 = sub_10001A630(&qword_10083C4C0);
          v87 = swift_initStackObject(v86, &v307);
          *(_OWORD *)(v87 + 16) = xmmword_1006A3C40;
          v88 = (void *)v297;
          *(_QWORD *)(v87 + 32) = v297;
          *(_QWORD *)(v87 + 40) = v85;
          v317 = (_QWORD *)v87;
          specialized Array._endMutation()(v87);
          v89 = v317;
          v90 = v88;
          v2 = (void *)sub_10000D2BC(v89);
          ((void (*)(char *, uint64_t))v79[1])(v82, v78);
          return (uint64_t)v2;
        }
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t, _QWORD))v299[7])(v23, 1, 1, v300);
      }
      sub_1000EA320((uint64_t)v23);
      v2 = (void *)objc_opt_self(REMError);
      v222 = String._bridgeToObjectiveC()();
      v223 = objc_msgSend(v2, "internalErrorWithDebugDescription:", v222);
      goto LABEL_91;
    case 5uLL:
      v169 = v2;
      v170 = objc_msgSend(v2, "startingDueDate");
      if (!v170)
      {
        ((void (*)(char *, uint64_t, uint64_t, _QWORD))v299[7])(v20, 1, 1, v300);
        goto LABEL_71;
      }
      v171 = v170;
      v172 = v298;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v170);

      v173 = v299;
      v95 = v300;
      v174 = v299[4];
      v174(v20, v172, v300);
      v175 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v173[7];
      v175(v20, 0, 1, v95);
      v176 = (unsigned int (*)(char *, uint64_t, uint64_t))v173[6];
      if (v176(v20, 1, v95) == 1)
      {
LABEL_71:
        v98 = (uint64_t)v20;
        goto LABEL_90;
      }
      v174(v290, v20, v95);
      v177 = objc_msgSend(v169, "endingDueDate");
      if (v177)
      {
        v178 = v177;
        v179 = v298;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v177);

        v98 = (uint64_t)v287;
        v174(v287, v179, v95);
        v175((char *)v98, 0, 1, v95);
        if (v176((char *)v98, 1, v95) != 1)
        {
          v180 = v282;
          v174(v282, (char *)v98, v95);
          v181 = swift_getKeyPath(&unk_1006AA098);
          v182 = v173[2];
          v183 = (uint64_t)v295;
          v182(v295, v290, v95);
          v175((char *)v183, 0, 1, v95);
          v298 = (char *)sub_10033DACC(v181, v183);
          swift_release(v181);
          v184 = swift_getKeyPath(&unk_1006AA098);
          v182((char *)v183, v180, v95);
          v175((char *)v183, 0, 1, v95);
          v185 = sub_10033DAA4(v184, v183);
          swift_release(v184);
          v186 = sub_10001A630(&qword_10083C4C0);
          v187 = swift_initStackObject(v186, &v308);
          *(_OWORD *)(v187 + 16) = xmmword_1006A3C20;
          v189 = (void *)v297;
          v188 = v298;
          *(_QWORD *)(v187 + 32) = v297;
          *(_QWORD *)(v187 + 40) = v188;
          *(_QWORD *)(v187 + 48) = v185;
          v317 = (_QWORD *)v187;
          specialized Array._endMutation()(v187);
          v190 = v317;
          v191 = v189;
          v2 = (void *)sub_10000D2BC(v190);
          v118 = (void (*)(char *, uint64_t))v173[1];
          v118(v180, v95);
          v119 = v290;
          goto LABEL_47;
        }
      }
      else
      {
        v98 = (uint64_t)v287;
        v175(v287, 1, 1, v95);
      }
      ((void (*)(char *, uint64_t))v173[1])(v290, v95);
LABEL_90:
      sub_1000EA320(v98);
      v2 = (void *)objc_opt_self(REMError);
      v222 = String._bridgeToObjectiveC()();
      v223 = objc_msgSend(v2, "internalErrorWithDebugDescription:", v222);
LABEL_91:
      v223;

      swift_willThrow(v237);
      return (uint64_t)v2;
    case 6uLL:
      v192 = objc_msgSend(v2, "completed");
      v193 = swift_getKeyPath(&unk_1006AA068);
      v194 = v193;
      if (v192)
        v195 = sub_1002E7248(v193, 1);
      else
        v195 = sub_10033DCC4(v193);
      v218 = v195;
      v165 = (void *)v297;
      swift_release(v194);
      v219 = sub_10001A630(&qword_10083C4C0);
      v164 = swift_initStackObject(v219, &v309);
      *(_OWORD *)(v164 + 16) = xmmword_1006A3C40;
      *(_QWORD *)(v164 + 32) = v165;
      *(_QWORD *)(v164 + 40) = v218;
LABEL_58:
      v317 = (_QWORD *)v164;
      specialized Array._endMutation()(v164);
      v220 = v317;
      v221 = v165;
LABEL_83:
      v227 = v220;
      return sub_10000D2BC(v227);
    case 7uLL:
      v156 = objc_msgSend(v2, "text");
      if (v156)
      {
        v157 = v156;
        v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v156);
        v160 = v159;

        switch((unint64_t)objc_msgSend(v3, "textMatching"))
        {
          case 0uLL:
            v161 = swift_getKeyPath(&unk_1006AA030);
            v162 = sub_1002E7254(v161, v158, v160);
            swift_release(v161);
            swift_bridgeObjectRelease();
            v163 = sub_10001A630(&qword_10083C4C0);
            v164 = swift_initStackObject(v163, &v310);
            *(_OWORD *)(v164 + 16) = xmmword_1006A3C40;
            v165 = (void *)v297;
            *(_QWORD *)(v164 + 32) = v297;
            *(_QWORD *)(v164 + 40) = v162;
            goto LABEL_58;
          case 1uLL:
            v233 = swift_getKeyPath(&unk_1006AA030);
            v229 = sub_10033DCE4(v233, v158, v160, 6);
            swift_release(v233);
            v230 = sub_10001A630(&qword_10083C4C0);
            v231 = &v311;
            goto LABEL_82;
          case 2uLL:
            v228 = swift_getKeyPath(&unk_1006AA030);
            v229 = (uint64_t)sub_1004A238C(v228, v158, v160, 6);
            swift_release(v228);
            v230 = sub_10001A630(&qword_10083C4C0);
            v231 = &v312;
            goto LABEL_82;
          case 3uLL:
            v232 = swift_getKeyPath(&unk_1006AA030);
            v229 = (uint64_t)sub_1004A23BC(v232, v158, v160, 6);
            swift_release(v232);
            v230 = sub_10001A630(&qword_10083C4C0);
            v231 = &v313;
LABEL_82:
            v234 = swift_initStackObject(v230, v231);
            *(_OWORD *)(v234 + 16) = xmmword_1006A3C40;
            v235 = (void *)v297;
            *(_QWORD *)(v234 + 32) = v297;
            *(_QWORD *)(v234 + 40) = v229;
            v317 = (_QWORD *)v234;
            specialized Array._endMutation()(v234);
            v220 = v317;
            v236 = v235;
            goto LABEL_83;
          default:
            goto LABEL_112;
        }
      }
      goto LABEL_68;
    case 8uLL:
      v212 = objc_msgSend(v2, "descriptors");
      if (!v212)
        goto LABEL_68;
      v213 = v212;
      v214 = sub_1000151B0(0, &qword_10083C4C8, REMReminderPredicateDescriptor_ptr);
      v2 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v213, v214);

      v215 = v296;
      v216 = v301;
      v217 = sub_1001445DC((uint64_t)v2, v215, v294);
      if (v216)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v226 = v217;
        swift_bridgeObjectRelease();
        v227 = v226;
        return sub_10000D2BC(v227);
      }
      return (uint64_t)v2;
    case 9uLL:
      v120 = objc_msgSend(v2, "descriptors");
      if (!v120)
      {
LABEL_68:
        v2 = (void *)objc_opt_self(REMError);
        v222 = String._bridgeToObjectiveC()();
        v223 = objc_msgSend(v2, "internalErrorWithDebugDescription:", v222);
        goto LABEL_91;
      }
      v121 = v120;
      v122 = sub_1000151B0(0, &qword_10083C4C8, REMReminderPredicateDescriptor_ptr);
      v2 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v121, v122);

      v53 = v296;
      v123 = v301;
      v124 = sub_100146380((uint64_t)v2, (uint64_t)v53, v294);
      if (v123)
      {
        swift_bridgeObjectRelease();
LABEL_77:

      }
      else
      {
        v224 = v124;
        swift_bridgeObjectRelease();

        return sub_10001CC54(v224);
      }
      return (uint64_t)v2;
    case 0xAuLL:
      v196 = objc_msgSend(v2, "startingDueDate");
      if (!v196)
      {
        v64 = (uint64_t)v291;
        ((void (*)(char *, uint64_t, uint64_t, _QWORD))v299[7])(v291, 1, 1, v300);
        goto LABEL_60;
      }
      v197 = v196;
      v198 = v298;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v196);

      v200 = v299;
      v199 = v300;
      v201 = v299[4];
      v64 = (uint64_t)v291;
      v201(v291, v198, v300);
      v202 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v200[7];
      v202(v64, 0, 1, v199);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v200[6])(v64, 1, v199) == 1)
        goto LABEL_60;
      v203 = v285;
      v201(v285, (char *)v64, v199);
      v204 = swift_getKeyPath(&unk_1006AA000);
      v205 = (uint64_t)v295;
      v200[2](v295, v203, v199);
      v202(v205, 0, 1, v199);
      v206 = sub_10033DAA4(v204, v205);
      swift_release(v204);
      v207 = sub_10001A630(&qword_10083C4C0);
      v208 = swift_initStackObject(v207, v314);
      *(_OWORD *)(v208 + 16) = xmmword_1006A3C40;
      v209 = (void *)v297;
      *(_QWORD *)(v208 + 32) = v297;
      *(_QWORD *)(v208 + 40) = v206;
      v317 = (_QWORD *)v208;
      specialized Array._endMutation()(v208);
      v210 = v317;
      v211 = v209;
      v2 = (void *)sub_10000D2BC(v210);
      ((void (*)(char *, uint64_t))v200[1])(v203, v199);
      return (uint64_t)v2;
    case 0xBuLL:
      v58 = objc_msgSend(v2, "endingDueDate");
      if (v58)
      {
        v59 = v58;
        v60 = v298;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

        v62 = v299;
        v61 = v300;
        v63 = v299[4];
        v64 = (uint64_t)v292;
        v63(v292, v60, v300);
        v65 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v62[7];
        v65(v64, 0, 1, v61);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v62[6])(v64, 1, v61) != 1)
        {
          v66 = v286;
          v63(v286, (char *)v64, v61);
          v67 = swift_getKeyPath(&unk_1006AA000);
          v68 = (uint64_t)v295;
          v62[2](v295, v66, v61);
          v65(v68, 0, 1, v61);
          v69 = sub_10033DACC(v67, v68);
          swift_release(v67);
          v70 = sub_10001A630(&qword_10083C4C0);
          v71 = swift_initStackObject(v70, v315);
          *(_OWORD *)(v71 + 16) = xmmword_1006A3C40;
          v72 = (void *)v297;
          *(_QWORD *)(v71 + 32) = v297;
          *(_QWORD *)(v71 + 40) = v69;
          v317 = (_QWORD *)v71;
          specialized Array._endMutation()(v71);
          v73 = v317;
          v74 = v72;
          v2 = (void *)sub_10000D2BC(v73);
          ((void (*)(char *, uint64_t))v62[1])(v66, v61);
          return (uint64_t)v2;
        }
      }
      else
      {
        v64 = (uint64_t)v292;
        ((void (*)(char *, uint64_t, uint64_t, _QWORD))v299[7])(v292, 1, 1, v300);
      }
LABEL_60:
      sub_1000EA320(v64);
      v2 = (void *)objc_opt_self(REMError);
      v222 = String._bridgeToObjectiveC()();
      v223 = objc_msgSend(v2, "internalErrorWithDebugDescription:", v222);
      goto LABEL_91;
    case 0xCuLL:
      v91 = v2;
      v92 = objc_msgSend(v2, "startingDueDate");
      if (!v92)
      {
        v98 = (uint64_t)v293;
        ((void (*)(char *, uint64_t, uint64_t, _QWORD))v299[7])(v293, 1, 1, v300);
        goto LABEL_90;
      }
      v93 = v92;
      v94 = v298;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v92);

      v96 = v299;
      v95 = v300;
      v97 = v299[4];
      v98 = (uint64_t)v293;
      v97(v293, v94, v300);
      v99 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v96[7];
      v99(v98, 0, 1, v95);
      v100 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v96[6];
      if (v100(v98, 1, v95) == 1)
        goto LABEL_90;
      v101 = v289;
      v97(v289, (char *)v98, v95);
      v102 = objc_msgSend(v91, "endingDueDate");
      if (v102)
      {
        v103 = v102;
        v104 = v298;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v102);

        v98 = (uint64_t)v288;
        v97(v288, v104, v95);
        v99(v98, 0, 1, v95);
        if (v100(v98, 1, v95) != 1)
        {
          v105 = v283;
          v97(v283, (char *)v98, v95);
          v106 = swift_getKeyPath(&unk_1006AA000);
          v107 = v96[2];
          v108 = v101;
          v109 = (uint64_t)v295;
          v107(v295, v108, v95);
          v99(v109, 0, 1, v95);
          v298 = (char *)sub_10033DACC(v106, v109);
          swift_release(v106);
          v110 = swift_getKeyPath(&unk_1006AA000);
          v107((char *)v109, v105, v95);
          v99(v109, 0, 1, v95);
          v111 = sub_10033DAA4(v110, v109);
          swift_release(v110);
          v112 = sub_10001A630(&qword_10083C4C0);
          v113 = swift_initStackObject(v112, v316);
          *(_OWORD *)(v113 + 16) = xmmword_1006A3C20;
          v115 = (void *)v297;
          v114 = v298;
          *(_QWORD *)(v113 + 32) = v297;
          *(_QWORD *)(v113 + 40) = v114;
          *(_QWORD *)(v113 + 48) = v111;
          v317 = (_QWORD *)v113;
          specialized Array._endMutation()(v113);
          v116 = v317;
          v117 = v115;
          v2 = (void *)sub_10000D2BC(v116);
          v118 = (void (*)(char *, uint64_t))v96[1];
          v118(v105, v95);
          v119 = v289;
LABEL_47:
          v118(v119, v95);
          return (uint64_t)v2;
        }
      }
      else
      {
        v98 = (uint64_t)v288;
        v99((uint64_t)v288, 1, 1, v95);
      }
      ((void (*)(char *, uint64_t))v96[1])(v101, v95);
      goto LABEL_90;
    default:
      goto LABEL_108;
  }
}

const char *sub_100146318()
{
  return "displayDateDate";
}

const char *sub_10014632C()
{
  return "title";
}

const char *sub_100146340()
{
  return "completed";
}

const char *sub_100146354()
{
  return "dueDate";
}

_QWORD *sub_100146380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v7)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v7);
    if (v7 < 0)
    {
      __break(1u);
      return result;
    }
    v9 = 0;
    while (v7 != v9)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
      else
        v10 = *(id *)(a1 + 8 * v9 + 32);
      v11 = v10;
      v12 = sub_100144708(a2, a3);

      if (v4)
        return (_QWORD *)swift_release(_swiftEmptyArrayStorage);
      ++v9;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
      if (v7 == v9)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001464D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083C4D0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083C4D0);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100146568()
{
  sub_1000DAAD8();
}

uint64_t sub_100146588()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for RDAssignmentNotificationEngineAssembly()
{
  return objc_opt_self(_TtC7remindd38RDAssignmentNotificationEngineAssembly);
}

uint64_t sub_1001465B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083C580);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083C580);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_UNKNOWN **static REMCDAlarm.recordTypes()()
{
  return &off_1007DE3D0;
}

uint64_t static REMCDAlarm.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)objc_opt_self(REMCDAlarm), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastUnknownClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDAlarm.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t MetatypeMetadata;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v11 = v10;
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
  }
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v12)
  {
    v13 = objc_msgSend(a2, "ckIdentifier");
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v12, "mergeDataFromRecord:accountID:", a1, v13);

      objc_msgSend(v12, "setCkServerRecord:", a1);
      objc_msgSend(v12, "setInCloud:", 1);
      objc_msgSend(v12, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_100836D88 != -1)
        swift_once(&qword_100836D88, sub_1001465B8);
      v15 = type metadata accessor for Logger(0);
      sub_10001AAA8(v15, (uint64_t)qword_10083C580);
      v16 = a2;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc(22, -1);
        v20 = swift_slowAlloc(64, -1);
        v33 = v20;
        v34 = v4;
        *(_DWORD *)v19 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v22 = String.init<A>(describing:)(&v34, MetatypeMetadata);
        v24 = v23;
        v34 = sub_10001A820(v22, v23, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
        *(_QWORD *)&v25 = swift_bridgeObjectRelease(v24).n128_u64[0];
        *(_WORD *)(v19 + 12) = 2082;
        v26 = objc_msgSend(v16, "remObjectID", v25, v33);
        if (v26)
        {
          v27 = v26;
          v28 = objc_msgSend(v26, "description");

          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          v31 = v30;

        }
        else
        {
          v31 = 0xE300000000000000;
          v29 = 7104878;
        }
        v34 = sub_10001A820(v29, v31, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);

        swift_bridgeObjectRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v12;
}

Swift::String __swiftcall REMCDAlarm.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x6D72616C41;
  v1 = (void *)0xE500000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall REMCDAlarmTrigger.supportsDeletionByTTL()()
{
  void *v0;

  return objc_msgSend(v0, "isExtraneous") ^ 1;
}

Swift::Void __swiftcall REMCDAlarm.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  uint64_t v5;
  NSString v6;
  id v7;
  NSString v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  v3 = v2;
  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v6 = String._bridgeToObjectiveC()();
  v16.receiver = v3;
  v16.super_class = (Class)REMCDAlarm;
  objc_msgSendSuper2(&v16, "mergeDataFromRecord:accountID:", from.super.isa, v6);

  v7 = -[objc_class recordID](from.super.isa, "recordID");
  v8 = objc_msgSend(v7, "recordName");

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v11 = v10;
    v8 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v9 = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  v12 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v8, v9);

  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v15 = v14;
    v12 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v13 = swift_bridgeObjectRelease(v15).n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v12, v13);

  JUMPOUT(0x100146E5CLL);
}

void sub_100146E5C()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1000151B0(0, v2, v1);
  v5 = type metadata accessor for Date(0);
  CKRecordKeyValueSetting.subscript.getter(0xD000000000000010, *(_QWORD *)(v3 - 136), v4, v5, &protocol witness table for Date);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0, 1, v5) != 1)
  {
    Date._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
  }
  JUMPOUT(0x100146E18);
}

void sub_100146EE8()
{
  void *v0;
  _QWORD *v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  NSString v7;

  v4 = sub_1000151B0(0, v2, v1);
  CKRecordKeyValueSetting.subscript.getter(0x4449556D72616C41, 0xE800000000000000, v4, &type metadata for String, &protocol witness table for String);
  v6 = *(_QWORD *)(v3 - 120);
  if (v6)
  {
    v7 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v5 = swift_bridgeObjectRelease(v6).n128_u64[0];
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v0, "setAlarmUID:", v7, v5);

  JUMPOUT(0x100146E38);
}

CKRecord_optional __swiftcall REMCDAlarm.newlyCreatedRecord()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  Swift::Bool v4;
  objc_class *v5;
  objc_super v6;
  CKRecord_optional result;

  v1 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v1);
  *(_QWORD *)&v3 = __chkstk_darwin(v2).n128_u64[0];
  v6.receiver = v0;
  v6.super_class = (Class)REMCDAlarm;
  if (objc_msgSendSuper2(&v6, "newlyCreatedRecord", v3))
    JUMPOUT(0x100147314);
  v5 = 0;
  result.value.super.isa = v5;
  result.is_nil = v4;
  return result;
}

Swift::Void __swiftcall REMCDAlarm.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100836D88 != -1)
    swift_once(&qword_100836D88, sub_1001465B8);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083C580);
  v10 = v0;
  v2 = Logger.logObject.getter(v10);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v12 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType(v10);
    v6 = sub_10001A630(&qword_10083C598);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    v9 = v8;
    ObjectType = sub_10001A820(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

_QWORD *REMCDAlarm.objectsToBeDeletedBeforeThisObject()()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, "trigger");
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = v1;
  v3 = sub_10001A630((uint64_t *)&unk_100839E80);
  v4 = swift_allocObject(v3, 64, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v4 + 56) = sub_1000151B0(0, (unint64_t *)&unk_100840BD0, off_1007D6680);
  *(_QWORD *)(v4 + 32) = v2;
  return (_QWORD *)v4;
}

Swift::Void __swiftcall REMCDAlarm.fixBrokenReferences()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_100836D88 != -1)
    swift_once(&qword_100836D88, sub_1001465B8);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083C580);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = &selRef_isConcealed;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  v6 = swift_slowAlloc(22, -1);
  v7 = swift_slowAlloc(64, -1);
  v50 = v7;
  *(_DWORD *)v6 = 136446466;
  v8 = objc_msgSend(v2, "remObjectID");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "description");

    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

  }
  else
  {
    v13 = 0xE300000000000000;
    v11 = 7104878;
  }
  v49 = sub_10001A820(v11, v13, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  *(_QWORD *)&v14 = swift_bridgeObjectRelease(v13).n128_u64[0];
  *(_WORD *)(v6 + 12) = 2082;
  v15 = objc_msgSend(v2, "reminder", v14);
  if (!v15)
    goto LABEL_12;
  v16 = v15;
  v17 = objc_msgSend(v15, "remObjectID");
  if (!v17)
  {

LABEL_12:
    v24 = 0xE300000000000000;
    v5 = &selRef_isConcealed;
    v25 = 7104878;
    goto LABEL_13;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "description");

  v20 = v4;
  v21 = v7;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v24 = v23;

  v25 = v22;
  v7 = v21;
  v4 = v20;
  v5 = &selRef_isConcealed;
LABEL_13:
  v49 = sub_10001A820(v25, v24, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

  swift_bridgeObjectRelease(v24);
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for alarm {alarmID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

LABEL_14:
  v26 = objc_msgSend(v2, v5[453]);
  if (v26)
  {
    v27 = v26;
    if (objc_msgSend(v26, "markedForDeletion")
      && (objc_msgSend(v2, "markedForDeletion") & 1) == 0)
    {
      v28 = v2;
      v29 = v27;
      v30 = v28;
      v31 = v29;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(22, -1);
        v48 = swift_slowAlloc(64, -1);
        v50 = v48;
        *(_DWORD *)v34 = 136446466;
        v35 = objc_msgSend(v30, "remObjectID");
        if (v35)
        {
          v36 = v35;
          v37 = objc_msgSend(v35, "description");

          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

        }
        else
        {
          v40 = 0xE300000000000000;
          v38 = 7104878;
        }
        v49 = sub_10001A820(v38, v40, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        *(_QWORD *)&v41 = swift_bridgeObjectRelease(v40).n128_u64[0];
        *(_WORD *)(v34 + 12) = 2082;
        v42 = objc_msgSend(v31, "remObjectID", v41);
        if (v42)
        {
          v43 = v42;
          v44 = objc_msgSend(v42, "description");

          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v47 = v46;

        }
        else
        {
          v47 = 0xE300000000000000;
          v45 = 7104878;
        }
        v49 = sub_10001A820(v45, v47, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        swift_bridgeObjectRelease(v47);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Reminder is marked for deletion but alarm is not {alarmID: %{public}s, reminderID: %{public}s}", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v30, "markForDeletion");
    }
    objc_msgSend(v27, "forcePushToCloud");

  }
}

uint64_t sub_100148104(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 2 * a2;
  sub_10001A630((uint64_t *)&unk_100839C80);
  return a1;
}

uint64_t _sSo10REMCDAlarmC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;

  if (qword_100836D88 != -1)
    swift_once(&qword_100836D88, sub_1001465B8);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083C580);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_10083C598);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    v10 = v9;
    ObjectType = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v13);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _sSo10REMCDAlarmC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;

  if (qword_100836D88 != -1)
    swift_once(&qword_100836D88, sub_1001465B8);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083C580);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_10083C598);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    v10 = v9;
    ObjectType = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v13);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

void REMCDBaseSection.parentCDObject.getter()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002ELL, 0x80000001006F9E30, "remindd/REMCDBaseSection+CoreDataClass.swift", 44, 2, 19, 0);
  __break(1u);
}

uint64_t static REMCDBaseSection.cdEntityName.getter()
{
  id v0;
  uint64_t v1;

  v0 = objc_msgSend((id)objc_opt_self(REMBaseSection), "cdEntityName");
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);

  return v1;
}

Swift::Bool __swiftcall REMCDBaseSection.isConnected(toAccountObject:)(NSMutableDictionary toAccountObject)
{
  _QWORD *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  unsigned int v7;
  id v8;
  Class isa;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v17;
  _OWORD v18[2];
  _QWORD v19[4];

  v3 = objc_msgSend(v1, "remObjectID");
  if (!v3)
    goto LABEL_12;
  v4 = v3;
  v5 = -[objc_class objectForKeyedSubscript:](toAccountObject.super.super.isa, "objectForKeyedSubscript:", v3);
  if (v5)
  {
    v6 = v5;
    _bridgeAnyObjectToAny(_:)(v18, v5);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_10001A5E8((uint64_t)v18, (uint64_t)v19);
  if (!v19[3])
  {
    sub_1000F4294((uint64_t)v19);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(&v17, v19, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_9:
    v8 = v4;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    -[objc_class setObject:forKeyedSubscript:](toAccountObject.super.super.isa, "setObject:forKeyedSubscript:", isa, v8);

    v10 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x50))();
    if (v10)
    {
      v11 = v10;
      v7 = objc_msgSend(v10, "isConnectedToAccountObject:", toAccountObject.super.super.isa);

      v19[0] = v7;
      type metadata accessor for REMObjectIsConnectedState(0);
      v13 = v12;
      v14 = v8;
      v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v19, v13);
      -[objc_class setObject:forKeyedSubscript:](toAccountObject.super.super.isa, "setObject:forKeyedSubscript:", v15, v14);

      swift_unknownObjectRelease(v15);
      return v7;
    }

LABEL_12:
    LOBYTE(v7) = 0;
    return v7;
  }

  LOBYTE(v7) = v17 == 1;
  return v7;
}

id REMCDBaseSection.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDBaseSection();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id REMCDBaseSection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDBaseSection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for REMCDBaseSection()
{
  return objc_opt_self(REMCDBaseSection);
}

uint64_t sub_10014895C(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10083C5C8, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_100148980(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10083C5E0, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_1001489A4(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = type metadata accessor for Logger(0);
  sub_10009EF3C(v9, a2);
  v10 = sub_10001AAA8(v9, (uint64_t)a2);
  if (*a3 != -1)
    swift_once(a3, a5);
  v11 = sub_10001AAA8(v9, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v10, v11, v9);
}

uint64_t sub_100148A3C(char *a1, char *a2)
{
  return sub_1002B444C(*a1, *a2);
}

Swift::Int sub_100148A48()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x44496D72616C61;
  else
    v2 = 0x49746E756F636361;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE900000000000044;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100148ACC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x44496D72616C61;
  else
    v2 = 0x49746E756F636361;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE900000000000044;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100148B2C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x44496D72616C61;
  else
    v3 = 0x49746E756F636361;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE900000000000044;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100148BAC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DE480;
  return sub_1001496D8(v2, a1, a2);
}

void sub_100148BB8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x49746E756F636361;
  if (*v1)
    v2 = 0x44496D72616C61;
  v3 = 0xE900000000000044;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_100148BFC(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DE4D0;
}

uint64_t sub_100148C0C@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DE480;
  return sub_100149788(a1, v2, a2);
}

uint64_t sub_100148C18()
{
  _BYTE *v0;

  if (*v0)
    return 0x44496D72616C61;
  else
    return 0x49746E756F636361;
}

uint64_t sub_100148C58()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for REMAlarmTriggerCDIngestor()
{
  return objc_opt_self(_TtC7remindd25REMAlarmTriggerCDIngestor);
}

uint64_t sub_100148CA4(char *a1, char *a2)
{
  return sub_1002B2CC0(*a1, *a2);
}

Swift::Int sub_100148CB0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x65746E49656D6974;
  else
    v2 = 0x44497463656A626FLL;
  if (v1)
    v3 = 0xEC0000006C617672;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100148D38(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x65746E49656D6974;
  else
    v2 = 0x44497463656A626FLL;
  if (*v1)
    v3 = 0xEC0000006C617672;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100148D9C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x65746E49656D6974;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xEC0000006C617672;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100148E20@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DE4F8;
  return sub_1001496D8(v2, a1, a2);
}

void sub_100148E2C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x44497463656A626FLL;
  if (*v1)
    v2 = 0x65746E49656D6974;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xEC0000006C617672;
  *a1 = v2;
  a1[1] = v3;
}

void sub_100148E74(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DE548;
}

uint64_t sub_100148E84@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DE4F8;
  return sub_100149788(a1, v2, a2);
}

uint64_t sub_100148E90()
{
  _BYTE *v0;

  if (*v0)
    return 0x65746E49656D6974;
  else
    return 0x44497463656A626FLL;
}

uint64_t type metadata accessor for REMAlarmTimeIntervalTriggerCDIngestor()
{
  return objc_opt_self(_TtC7remindd37REMAlarmTimeIntervalTriggerCDIngestor);
}

id sub_100148F98()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMAlarmDateTriggerCDIngestor_ObjC();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for REMAlarmDateTriggerCDIngestor_ObjC()
{
  return objc_opt_self(_TtC7remindd34REMAlarmDateTriggerCDIngestor_ObjC);
}

uint64_t sub_100148FE8(char *a1, char *a2)
{
  return sub_1002B3998(*a1, *a2);
}

Swift::Int sub_100148FF4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x706D6F4365746164;
  else
    v2 = 0x44497463656A626FLL;
  if (v1)
    v3 = 0xEE0073746E656E6FLL;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100149080(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x706D6F4365746164;
  else
    v2 = 0x44497463656A626FLL;
  if (*v1)
    v3 = 0xEE0073746E656E6FLL;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001490E8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x706D6F4365746164;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xEE0073746E656E6FLL;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100149170@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEB38;
  return sub_1001496D8(v2, a1, a2);
}

void sub_10014917C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x44497463656A626FLL;
  if (*v1)
    v2 = 0x706D6F4365746164;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xEE0073746E656E6FLL;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1001491C8(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF8E0;
}

uint64_t sub_1001491D8@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEB38;
  return sub_100149788(a1, v2, a2);
}

uint64_t sub_1001491E4()
{
  _BYTE *v0;

  if (*v0)
    return 0x706D6F4365746164;
  else
    return 0x44497463656A626FLL;
}

uint64_t type metadata accessor for REMAlarmDateTriggerCDIngestor()
{
  return objc_opt_self(_TtC7remindd29REMAlarmDateTriggerCDIngestor);
}

uint64_t sub_10014924C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002B2FA0(*a1, *a2);
}

Swift::Int sub_100149258()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0x80000001006F4D50;
  v3 = 0xD000000000000012;
  if (v1 != 1)
  {
    v3 = 0x74696D69786F7270;
    v2 = 0xE900000000000079;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x44497463656A626FLL;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100149300(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x80000001006F4D50;
  v3 = 0xD000000000000012;
  if (*v1 != 1)
  {
    v3 = 0x74696D69786F7270;
    v2 = 0xE900000000000079;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x44497463656A626FLL;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100149384(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0x80000001006F4D50;
  v4 = 0xD000000000000012;
  if (v2 != 1)
  {
    v4 = 0x74696D69786F7270;
    v3 = 0xE900000000000079;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x44497463656A626FLL;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE800000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100149428@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10014A31C(*a1);
  *a2 = result;
  return result;
}

void sub_100149454(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0x80000001006F4D50;
  v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    v5 = 0x74696D69786F7270;
    v4 = 0xE900000000000079;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x44497463656A626FLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_1001494BC(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF908;
}

unint64_t sub_1001494CC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10014A31C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001494F0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0x74696D69786F7270;
  if (*v0)
    return v1;
  else
    return 0x44497463656A626FLL;
}

uint64_t type metadata accessor for REMAlarmLocationTriggerCDIngestor()
{
  return objc_opt_self(_TtC7remindd33REMAlarmLocationTriggerCDIngestor);
}

uint64_t sub_100149574(char *a1, char *a2)
{
  return sub_1002B30C0(*a1, *a2);
}

Swift::Int sub_100149580()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x746E657665;
  else
    v2 = 0x44497463656A626FLL;
  if (v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001495FC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x746E657665;
  else
    v2 = 0x44497463656A626FLL;
  if (*v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100149654(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x746E657665;
  else
    v3 = 0x44497463656A626FLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001496CC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEC50;
  return sub_1001496D8(v2, a1, a2);
}

uint64_t sub_1001496D8@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_100149730(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x44497463656A626FLL;
  if (*v1)
    v2 = 0x746E657665;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10014976C(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF930;
}

uint64_t sub_10014977C@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DEC50;
  return sub_100149788(a1, v2, a2);
}

uint64_t sub_100149788@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;
  char v8;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t sub_1001497E4()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E657665;
  else
    return 0x44497463656A626FLL;
}

uint64_t type metadata accessor for REMAlarmVehicleTriggerCDIngestor()
{
  return objc_opt_self(_TtC7remindd32REMAlarmVehicleTriggerCDIngestor);
}

_UNKNOWN **sub_10014983C()
{
  return &off_1007F0B48;
}

_UNKNOWN **sub_100149848()
{
  return &off_1007F0B98;
}

_UNKNOWN **sub_100149854()
{
  return &off_1007E6438;
}

_UNKNOWN **sub_100149860()
{
  return &off_1007F0B68;
}

_UNKNOWN **sub_10014986C()
{
  return &off_1007E6408;
}

_UNKNOWN **sub_100149878()
{
  return &off_1007E6468;
}

_UNKNOWN **sub_100149884()
{
  return &off_1007E6498;
}

_UNKNOWN **sub_100149890()
{
  return &off_1007E64C8;
}

id sub_10014989C(id ObjCClassFromMetadata)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  _QWORD *v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  NSString v38;
  uint64_t v39;
  Class isa;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  uint64_t v45;

  v3 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateComponents(0);
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = 0;
  v11 = objc_msgSend(ObjCClassFromMetadata, "remObjectIDWithError:", &v44, v8);
  v12 = v44;
  if (v11)
  {
    v13 = v11;
    v14 = v44;
    v15 = objc_msgSend(ObjCClassFromMetadata, "dateComponentsData");
    if (v15)
    {
      v16 = v15;
      v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;

      v20 = type metadata accessor for JSONDecoder(0);
      v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
      v22 = JSONDecoder.init()(v21);
      v23 = sub_10014AE98(&qword_10083C468, (uint64_t)&protocol conformance descriptor for DateComponents);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v6, v17, v19, v6, v23);
      if (v1)
      {
        swift_errorRelease(v1);
        swift_release(v22);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
      }
      else
      {
        swift_release(v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
          v43 = objc_allocWithZone((Class)REMAlarmDateTrigger);
          isa = DateComponents._bridgeToObjectiveC()().super.isa;
          ObjCClassFromMetadata = objc_msgSend(v43, "initWithObjectID:dateComponents:", v13, isa);

          sub_1000A71C8(v17, v19);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
          return ObjCClassFromMetadata;
        }
      }
      sub_10014AED8((uint64_t)v5);
      ObjCClassFromMetadata = (id)objc_opt_self(REMError);
      v34 = String._bridgeToObjectiveC()();
      objc_msgSend(ObjCClassFromMetadata, "internalErrorWithDebugDescription:", v34);

      swift_willThrow(v35);
      sub_1000A71C8(v17, v19);

    }
    else
    {
      if (qword_100836D98 != -1)
        swift_once(&qword_100836D98, sub_100148980);
      v26 = type metadata accessor for Logger(0);
      sub_10001AAA8(v26, (uint64_t)qword_10083C5E0);
      v27 = v13;
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = (_QWORD *)swift_slowAlloc(8, -1);
        v44 = v27;
        *(_DWORD *)v30 = 138412290;
        v31 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
        v32 = v43;
        *v43 = v13;

        _os_log_impl((void *)&_mh_execute_header, v28, v29, "REMAlarmDateTriggerCDIngestor: cdAlarmDateTrigger.dateComponentsData is nil {cdAlarmDateTrigger.remObjectID: %@}", v30, 0xCu);
        v33 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v32, 1, v33);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {

        v28 = v27;
      }

      v36 = (void *)objc_opt_self(REMError);
      v37 = sub_10014AE5C();
      ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata(v37);
      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v36, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v38);

      swift_willThrow(v39);
    }
  }
  else
  {
    v24 = v44;
    _convertNSErrorToError(_:)(v12);

    swift_willThrow(v25);
  }
  return ObjCClassFromMetadata;
}

id sub_100149D84(void *a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v11;

  v2 = objc_msgSend(a1, "event");
  v11 = 0;
  v3 = objc_msgSend(a1, "remObjectIDWithError:", &v11);
  v4 = v11;
  if (v3)
  {
    v5 = v3;
    v6 = objc_allocWithZone((Class)REMAlarmVehicleTrigger);
    v7 = v4;
    v2 = objc_msgSend(v6, "initWithObjectID:event:", v5, (int)v2);

  }
  else
  {
    v8 = v11;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v9);
  }
  return v2;
}

id sub_100149E88(void *a1)
{
  signed int v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  NSString v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  objc_class *v18;
  Class isa;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  id v31;

  v2 = objc_msgSend(a1, "proximity");
  v3 = objc_msgSend(a1, "title");
  if (v3)
  {
    v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(a1, "locationUID");
  if (v7)
  {
    v8 = v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    if (v6)
      goto LABEL_6;
LABEL_9:
    v11 = 0;
    if (v10)
      goto LABEL_7;
    goto LABEL_10;
  }
  v10 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_6:
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_7:
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_10:
  v12 = 0;
LABEL_11:
  v13 = objc_msgSend(objc_allocWithZone((Class)REMStructuredLocation), "initWithTitle:locationUID:", v11, v12);

  objc_msgSend(a1, "latitude");
  objc_msgSend(v13, "setLatitude:");
  objc_msgSend(a1, "longitude");
  objc_msgSend(v13, "setLongitude:");
  objc_msgSend(a1, "radius");
  objc_msgSend(v13, "setRadius:");
  v14 = objc_msgSend(a1, "address");
  objc_msgSend(v13, "setAddress:", v14);

  v15 = objc_msgSend(a1, "routing");
  objc_msgSend(v13, "setRouting:", v15);

  v16 = objc_msgSend(a1, "referenceFrameString");
  objc_msgSend(v13, "setReferenceFrameString:", v16);

  v17 = objc_msgSend(a1, "contactLabel");
  objc_msgSend(v13, "setContactLabel:", v17);

  v18 = (objc_class *)objc_msgSend(a1, "mapKitHandle");
  isa = v18;
  if (v18)
  {
    v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v20, v22);
  }
  objc_msgSend(v13, "setMapKitHandle:", isa);

  v31 = 0;
  v23 = objc_msgSend(a1, "remObjectIDWithError:", &v31);
  v24 = v31;
  if (v23)
  {
    v25 = v23;
    v26 = objc_allocWithZone((Class)REMAlarmLocationTrigger);
    v27 = v24;
    v28 = objc_msgSend(v26, "initWithObjectID:structuredLocation:proximity:", v25, v13, v2);

  }
  else
  {
    v28 = v31;
    _convertNSErrorToError(_:)(v24);

    swift_willThrow(v29);
  }

  return v28;
}

id sub_10014A224(void *a1)
{
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  double v6;
  id v7;
  uint64_t v8;
  id v10;

  v1 = a1;
  v10 = 0;
  v2 = objc_msgSend(a1, "remObjectIDWithError:", &v10);
  v3 = v10;
  if (v2)
  {
    v4 = v2;
    v5 = v10;
    objc_msgSend(v1, "timeInterval");
    v1 = objc_msgSend(objc_allocWithZone((Class)REMAlarmTimeIntervalTrigger), "initWithObjectID:timeInterval:", v4, v6);

  }
  else
  {
    v7 = v10;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v8);
  }
  return v1;
}

unint64_t sub_10014A31C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DECA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

id sub_10014A364(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t inited;
  id v8;
  id v9;
  id v10;
  _BYTE v12[32];

  v6 = type metadata accessor for REMAlarmDateTriggerCDIngestor();
  inited = swift_initStackObject(v6, v12);
  *(_QWORD *)(inited + 16) = a2;
  *(_QWORD *)(inited + 24) = a3;
  v8 = a2;
  v9 = a3;
  v10 = sub_10014989C(a1);
  swift_release(inited);
  return v10;
}

void sub_10014A598(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  char *v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  Class v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;

  v33 = a2;
  v34 = a1;
  v5 = type metadata accessor for DateComponents(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  __chkstk_darwin(v8);
  v29 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  if (!v10)
    return;
  v28 = v7;
  swift_bridgeObjectRetain(a3);
  v11 = 0;
  v12 = v28;
  while ((*(_BYTE *)(a3 + v11 + 32) & 1) == 0)
  {
    v13 = objc_msgSend(v34, "remObjectID");
    v14 = objc_msgSend(v13, "uuid");

    v15 = v29;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
    objc_msgSend(v33, "setIdentifier:", isa);

LABEL_4:
    if (v10 == ++v11)
      goto LABEL_10;
  }
  v17 = a3;
  v18 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = JSONEncoder.init()();
  v20 = objc_msgSend(v34, "dateComponents");
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v21 = sub_10014AE98(&qword_10083C408, (uint64_t)&protocol conformance descriptor for DateComponents);
  v22 = dispatch thunk of JSONEncoder.encode<A>(_:)(v12, v5, v21);
  v24 = v5;
  if (!v3)
  {
    v25 = v22;
    v26 = v23;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v24);
    swift_release(v19);
    v27 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v33, "setDateComponentsData:", v27);

    sub_1000A71C8(v25, v26);
    v5 = v24;
    a3 = v17;
    goto LABEL_4;
  }
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v5);
LABEL_10:
  swift_bridgeObjectRelease();
}

void sub_10014A82C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  id v12;
  id v13;
  char *v14;
  NSUUID v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  double v21;
  double v22;
  id v23;
  double v24;
  double v25;
  id v26;
  double v27;
  double v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v7 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin(v7);
  v45 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  if (!v9)
    return;
  v44 = v3;
  *(_QWORD *)&v10 = swift_bridgeObjectRetain(a3).n128_u64[0];
  v11 = 0;
  while (1)
  {
    if (!*(_BYTE *)(a3 + v11 + 32))
    {
      v12 = objc_msgSend(a1, "remObjectID");
      v13 = objc_msgSend(v12, "uuid");

      v14 = v45;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

      v15.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v47);
      objc_msgSend(a2, "setIdentifier:", v15.super.isa);
LABEL_4:

      goto LABEL_5;
    }
    if (*(_BYTE *)(a3 + v11 + 32) == 1)
    {
      v16 = objc_msgSend(a1, "structuredLocation", v10);
      v17 = objc_msgSend(v16, "locationUID");

      objc_msgSend(a2, "setLocationUID:", v17);
      v18 = objc_msgSend(a1, "structuredLocation");
      v19 = objc_msgSend(v18, "title");

      objc_msgSend(a2, "setTitle:", v19);
      v20 = objc_msgSend(a1, "structuredLocation");
      objc_msgSend(v20, "latitude");
      v22 = v21;

      objc_msgSend(a2, "setLatitude:", v22);
      v23 = objc_msgSend(a1, "structuredLocation");
      objc_msgSend(v23, "longitude");
      v25 = v24;

      objc_msgSend(a2, "setLongitude:", v25);
      v26 = objc_msgSend(a1, "structuredLocation");
      objc_msgSend(v26, "radius");
      v28 = v27;

      objc_msgSend(a2, "setRadius:", v28);
      v29 = objc_msgSend(a1, "structuredLocation");
      v30 = objc_msgSend(v29, "address");

      objc_msgSend(a2, "setAddress:", v30);
      v31 = objc_msgSend(a1, "structuredLocation");
      v32 = objc_msgSend(v31, "routing");

      objc_msgSend(a2, "setRouting:", v32);
      v33 = objc_msgSend(a1, "structuredLocation");
      v34 = objc_msgSend(v33, "referenceFrameString");

      objc_msgSend(a2, "setReferenceFrameString:", v34);
      v35 = objc_msgSend(a1, "structuredLocation");
      v36 = objc_msgSend(v35, "contactLabel");

      objc_msgSend(a2, "setContactLabel:", v36);
      v37 = objc_msgSend(a1, "structuredLocation");
      v15.super.isa = (Class)objc_msgSend(v37, "mapKitHandle");

      if (v15.super.isa)
      {
        v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15.super.isa);
        v39 = v9;
        v41 = v40;

        v15.super.isa = Data._bridgeToObjectiveC()().super.isa;
        v42 = v41;
        v9 = v39;
        sub_1000A71C8(v38, v42);
      }
      objc_msgSend(a2, "setMapKitHandle:", v15.super.isa);
      goto LABEL_4;
    }
    v43 = (uint64_t)objc_msgSend(a1, "proximity", v10);
    if (v43 < -32768)
      break;
    if (v43 >= 0x8000)
      goto LABEL_17;
    objc_msgSend(a2, "setProximity:", (__int16)v43);
LABEL_5:
    if (v9 == ++v11)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
}

uint64_t sub_10014ACD0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  Class isa;
  _QWORD v16[2];
  uint64_t v17;

  v7 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin();
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a3 + 16);
  if (!v11)
    return result;
  v16[1] = v3;
  swift_bridgeObjectRetain(a3);
  v12 = 0;
  while (1)
  {
    if ((*(_BYTE *)(a3 + v12 + 32) & 1) == 0)
    {
      v13 = objc_msgSend(a1, "remObjectID");
      v14 = objc_msgSend(v13, "uuid");

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v7);
      objc_msgSend(a2, "setIdentifier:", isa);

      goto LABEL_4;
    }
    result = (uint64_t)objc_msgSend(a1, "event");
    if (result < -32768)
      break;
    if (result >= 0x8000)
      goto LABEL_12;
    objc_msgSend(a2, "setEvent:", (__int16)result);
LABEL_4:
    if (v11 == ++v12)
      return swift_bridgeObjectRelease(a3);
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10014AE5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100840C40;
  if (!qword_100840C40)
  {
    v1 = objc_opt_self(REMCDAlarmDateTrigger);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100840C40);
  }
  return result;
}

uint64_t sub_10014AE98(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DateComponents(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10014AED8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_100841610);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for REMAlarmTimeIntervalTriggerCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmTimeIntervalTriggerCDIngestor.ValueKey;
}

ValueMetadata *type metadata accessor for REMAlarmDateTriggerCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmDateTriggerCDIngestor.ValueKey;
}

uint64_t storeEnumTagSinglePayload for REMAlarmLocationTriggerCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10014AF8C + 4 * byte_1006AA1C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10014AFC0 + 4 * asc_1006AA1C0[v4]))();
}

uint64_t sub_10014AFC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014AFC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014AFD0);
  return result;
}

uint64_t sub_10014AFDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014AFE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10014AFE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014AFF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMAlarmLocationTriggerCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmLocationTriggerCDIngestor.ValueKey;
}

ValueMetadata *type metadata accessor for REMAlarmTriggerCDIngestor.RelationshipKey()
{
  return &type metadata for REMAlarmTriggerCDIngestor.RelationshipKey;
}

uint64_t _s7remindd37REMAlarmTimeIntervalTriggerCDIngestorC8ValueKeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10014B068 + 4 * byte_1006AA1CF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014B09C + 4 * byte_1006AA1CA[v4]))();
}

uint64_t sub_10014B09C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B0A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014B0ACLL);
  return result;
}

uint64_t sub_10014B0B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014B0C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10014B0C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B0CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMAlarmVehicleTriggerCDIngestor.ValueKey()
{
  return &type metadata for REMAlarmVehicleTriggerCDIngestor.ValueKey;
}

uint64_t sub_10014B0E8()
{
  return sub_1000BAEEC(&qword_10083CE70, &qword_10083CE78);
}

unint64_t sub_10014B110()
{
  unint64_t result;

  result = qword_10083CE80;
  if (!qword_10083CE80)
  {
    result = swift_getWitnessTable(&unk_1006AA440, &type metadata for REMAlarmVehicleTriggerCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10083CE80);
  }
  return result;
}

uint64_t sub_10014B154()
{
  return sub_1000BAEEC(&qword_10083CE88, &qword_10083CE90);
}

unint64_t sub_10014B17C()
{
  unint64_t result;

  result = qword_10083CE98;
  if (!qword_10083CE98)
  {
    result = swift_getWitnessTable(&unk_1006AA518, &type metadata for REMAlarmTriggerCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10083CE98);
  }
  return result;
}

uint64_t sub_10014B1C0()
{
  return sub_1000BAEEC(&qword_10083CEA0, &qword_10083CEA8);
}

unint64_t sub_10014B1E8()
{
  unint64_t result;

  result = qword_10083CEB0;
  if (!qword_10083CEB0)
  {
    result = swift_getWitnessTable(&unk_1006AA5F0, &type metadata for REMAlarmLocationTriggerCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10083CEB0);
  }
  return result;
}

uint64_t sub_10014B22C()
{
  return sub_1000BAEEC(&qword_10083CEB8, &qword_10083CEC0);
}

unint64_t sub_10014B254()
{
  unint64_t result;

  result = qword_10083CEC8;
  if (!qword_10083CEC8)
  {
    result = swift_getWitnessTable(&unk_1006AA6C8, &type metadata for REMAlarmDateTriggerCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10083CEC8);
  }
  return result;
}

uint64_t sub_10014B298()
{
  return sub_1000BAEEC(&qword_10083CED0, &qword_10083CED8);
}

unint64_t sub_10014B2C0()
{
  unint64_t result;

  result = qword_10083CEE0;
  if (!qword_10083CEE0)
  {
    result = swift_getWitnessTable(&unk_1006AA7A0, &type metadata for REMAlarmTimeIntervalTriggerCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10083CEE0);
  }
  return result;
}

uint64_t sub_10014B308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083CEE8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083CEE8);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10014B398(uint64_t a1, NSString a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  char v16;
  uint64_t v17;
  char v18;
  id v19;
  NSString v20;
  uint64_t v21;

  v3 = v2;
  v6 = type metadata accessor for REMFeatureFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(v3, "secondaryGroceryLocalesInfoChecksum");
  if (!v10)
  {
    if (!a2)
      return;
    goto LABEL_10;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

  if (!a2)
  {
    swift_bridgeObjectRelease(v14);
LABEL_12:
    objc_msgSend(v3, "setSecondaryGroceryLocalesInfoChecksum:", a2);

    v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for REMFeatureFlags.groceryMultilingual(_:), v6);
    v18 = REMFeatureFlags.isEnabled.getter(v17);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if ((v18 & 1) != 0)
    {
      v19 = objc_msgSend(v3, "createResolutionTokenMapIfNecessary");
      v20 = String._bridgeToObjectiveC()();
      objc_msgSend(v19, "updateForKey:", v20);

    }
    return;
  }
  if (v12 == a1 && v14 == a2)
  {
    swift_bridgeObjectRelease(v14);
    return;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a1, a2, 0);
  swift_bridgeObjectRelease(v14);
  if ((v16 & 1) == 0)
  {
LABEL_10:
    a2 = String._bridgeToObjectiveC()();
    goto LABEL_12;
  }
}

uint64_t assignWithCopy for RDClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(unsigned __int16 *)(a2 + 44);
  v9 = *(unsigned int *)(a2 + 40);
  sub_10001BB24(*(_QWORD *)a2, v4, v5, v6, v7, v9 | (v8 << 32));
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 40) = v9;
  *(_WORD *)(a1 + 44) = v8;
  sub_1000178E8(v10, v11, v12, v13, v14, v15);
  return a1;
}

__n128 initializeWithTake for RDClientIdentity.XPCClientIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 30) = *(_OWORD *)(a2 + 30);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_WORD *)(a2 + 44);
  v5 = *(_DWORD *)(a2 + 40);
  v6 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int16 *)(a1 + 44) << 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 44) = v4;
  sub_1000178E8(v6, v8, v7, v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDClientIdentity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFD && *(_BYTE *)(a1 + 46))
    return (*(_DWORD *)a1 + 16381);
  v3 = ((*(unsigned __int16 *)(a1 + 44) >> 14) | (4
                                                * ((*(unsigned __int16 *)(a1 + 44) >> 2) & 0xF80 | (*(_WORD *)(a1 + 44) >> 1)))) ^ 0x3FFF;
  if (v3 >> 2 >= 0xFFF)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RDClientIdentity(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x3FFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 16381;
    if (a3 >= 0x3FFD)
      *(_BYTE *)(result + 46) = 1;
  }
  else
  {
    if (a3 >= 0x3FFD)
      *(_BYTE *)(result + 46) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_DWORD *)(result + 40) = 0;
      *(_WORD *)(result + 44) = ((v3 << 34) & 0xFE0000000000 | ((unint64_t)(v3 & 0x7F) << 33)) >> 32;
    }
  }
  return result;
}

uint64_t sub_10014B77C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int16 *)(a1 + 44) >> 14;
  if (v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_10014B798(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;
  unint64_t v3;

  v2 = *(_DWORD *)(a1 + 40);
  result = a1 + 40;
  v3 = v2 | ((unint64_t)*(unsigned __int16 *)(result + 4) << 32);
  *(_DWORD *)result = v2;
  *(_WORD *)(result + 4) = WORD2(v3) & 0x3FFF;
  return result;
}

uint64_t sub_10014B7B4(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;

  if (a2 < 3)
  {
    v2 = *(_DWORD *)(result + 40);
    result += 40;
    v3 = (v2 | ((unint64_t)*(unsigned __int16 *)(result + 4) << 32)) & 0x101FFFFFFFFLL | (a2 << 46);
    *(_DWORD *)result = v2;
    *(_WORD *)(result + 4) = WORD2(v3);
  }
  else
  {
    *(_QWORD *)result = (a2 - 3);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_WORD *)(result + 44) = -16384;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDClientIdentity()
{
  return &type metadata for RDClientIdentity;
}

uint64_t destroy for RDSavedHashtag(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for RDClientIdentity.XPCClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for RDClientIdentity.XPCClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  return a1;
}

uint64_t assignWithTake for RDClientIdentity.XPCClientIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDClientIdentity.XPCClientIdentity(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 46))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDClientIdentity.XPCClientIdentity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 46) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 46) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDClientIdentity.XPCClientIdentity()
{
  return &type metadata for RDClientIdentity.XPCClientIdentity;
}

id static REMCDSavedReminder.fetchRequest()()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSFetchRequest);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithEntityName:", v1);

  return v2;
}

void sub_10014BAB8(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  NSObject **v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  os_log_t v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  int v57;
  os_log_t v58;
  void *v59;
  os_log_t v60;
  _QWORD v61[3];
  char v62[8];
  uint64_t v63;
  uint64_t v64;
  id v65;

  v3 = v1;
  v5 = type metadata accessor for REMJSONDeserializationError(0);
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)&v7 = __chkstk_darwin(v5).n128_u64[0];
  v9 = (NSObject **)((char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = objc_msgSend(v1, "membershipsOfRemindersInSectionsAsData", v7);
  if (!v10)
  {
LABEL_25:
    v33 = a1;
    v32 = 0;
    goto LABEL_26;
  }
  v11 = v10;
  v59 = a1;
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

  sub_1000151B0(0, (unint64_t *)&qword_100840030, REMMemberships_ptr);
  static REMJSONRepresentable.fromJSONData(_:)(&v65, v12, v14);
  if (v2)
  {
    sub_1000A71C8(v12, v14);
    v65 = v2;
    swift_errorRetain(v2);
    v15 = sub_10001A630((uint64_t *)&unk_10083AA20);
    if ((swift_dynamicCast(v9, &v65, v15, v5, 0) & 1) != 0)
    {
      if ((*(unsigned int (**)(NSObject **, uint64_t))(v6 + 88))(v9, v5) == enum case for REMJSONDeserializationError.notSupported(_:))
      {
        swift_errorRelease(v2);
        (*(void (**)(NSObject **, uint64_t))(v6 + 96))(v9, v5);
        v16 = *v9;
        if (qword_100836D20 != -1)
          swift_once(&qword_100836D20, sub_10011D87C);
        v17 = type metadata accessor for Logger(0);
        sub_10001AAA8(v17, (uint64_t)qword_10083B4A8);
        v18 = v3;
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.default.getter(v19);
        if (os_log_type_enabled(v19, (os_log_type_t)v20))
        {
          v57 = v20;
          v58 = v16;
          v21 = swift_slowAlloc(32, -1);
          v56 = (void *)swift_slowAlloc(64, -1);
          v63 = (uint64_t)v56;
          *(_DWORD *)v21 = 136446722;
          v60 = (os_log_t)type metadata accessor for REMCDTemplate();
          v22 = sub_10001A630((uint64_t *)&unk_10083FC70);
          v23 = String.init<A>(describing:)(&v60, v22);
          v60 = (os_log_t)sub_10001A820(v23, v24, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);
          *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v21 + 12) = 2082;
          v26 = objc_msgSend(v18, "remObjectID", v25);
          if (v26)
          {
            v27 = v26;
            v28 = objc_msgSend(v26, "description");

            v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
            v31 = v30;

          }
          else
          {
            v29 = 7104878;
            v31 = 0xE300000000000000;
          }
          v60 = (os_log_t)sub_10001A820(v29, v31, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);

          swift_bridgeObjectRelease();
          *(_WORD *)(v21 + 22) = 2050;
          v60 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);
          _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v57, "%{public}s#mergeMembershipsOfRemindersInSections(_:): Failed to deserialize 'membershipsOfRemindersInSectionsAsData' because current runtime version is lower than minimumSupportedVersion. It will be overwritten. {objectID: %{public}s, minimumSupportedVersion: %{public}ld}", (uint8_t *)v21, 0x20u);
          v54 = v56;
          swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1, -1);
          swift_slowDealloc(v21, -1, -1);

        }
        else
        {

        }
        a1 = v59;
        swift_errorRelease(v65);
        goto LABEL_25;
      }
      (*(void (**)(NSObject **, uint64_t))(v6 + 8))(v9, v5);
    }
    swift_errorRelease(v65);
    if (qword_100836D20 != -1)
      swift_once(&qword_100836D20, sub_10011D87C);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_10083B4A8);
    swift_errorRetain(v2);
    v35 = v3;
    swift_errorRetain(v2);
    v36 = v35;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, (os_log_type_t)v38))
    {
      v57 = v38;
      v58 = v37;
      v39 = swift_slowAlloc(32, -1);
      v56 = (void *)swift_slowAlloc(96, -1);
      v65 = v56;
      *(_DWORD *)v39 = 136446722;
      v63 = type metadata accessor for REMCDTemplate();
      v40 = sub_10001A630((uint64_t *)&unk_10083FC70);
      v41 = String.init<A>(describing:)(&v63, v40);
      v63 = sub_10001A820(v41, v42, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
      *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v39 + 12) = 2082;
      v44 = objc_msgSend(v36, "remObjectID", v43);
      if (v44)
      {
        v45 = v44;
        v46 = objc_msgSend(v44, "description");

        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v49 = v48;

      }
      else
      {
        v47 = 7104878;
        v49 = 0xE300000000000000;
      }
      v63 = sub_10001A820(v47, v49, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);

      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 22) = 2082;
      swift_getErrorValue(v2, v62, v61);
      v50 = Error.rem_errorDescription.getter(v61[1], v61[2]);
      v63 = sub_10001A820(v50, v51, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
      swift_bridgeObjectRelease();
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      v52 = v58;
      _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v57, "%{public}s#mergeMembershipsOfRemindersInSections(_:): Failed to deserialize 'membershipsOfRemindersInSectionsAsData' due to unexpected error. It will be overwritten. {objectID: %{public}s, error: %{public}s}", (uint8_t *)v39, 0x20u);
      v53 = v56;
      swift_arrayDestroy(v56, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      swift_errorRelease(v2);
    }
    else
    {
      swift_errorRelease(v2);

      swift_errorRelease(v2);
      swift_errorRelease(v2);

    }
    a1 = v59;
    goto LABEL_25;
  }
  sub_1000A71C8(v12, v14);
  v32 = v65;
  v33 = objc_msgSend(v65, "mergingWith:mergePolicy:", v59, 0);
LABEL_26:
  v55 = v33;
  sub_10027C15C(v33, 1);

}

void sub_10014C1D4(void *a1)
{
  sub_10014C208(a1, (void (*)(_QWORD, _QWORD))sub_10027C500, (unint64_t *)&unk_100840000, off_1007D6720, &qword_10083D420);
}

void sub_10014C208(void *a1, void (*a2)(_QWORD, _QWORD), unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  void *v5;
  void *v6;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  NSObject **v15;
  id v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  NSObject *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  os_log_t v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  int v70;
  os_log_t v71;
  unint64_t *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  void (*v76)(_QWORD, _QWORD);
  os_log_t v77;
  _QWORD v78[3];
  char v79[8];
  uint64_t v80;
  uint64_t v81;
  id v82;

  v72 = a3;
  v73 = a4;
  v9 = v5;
  v11 = type metadata accessor for REMJSONDeserializationError(0);
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)&v13 = __chkstk_darwin(v11).n128_u64[0];
  v15 = (NSObject **)((char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = objc_msgSend(v5, "membershipsOfRemindersInSectionsAsData", v13);
  if (!v16)
  {
LABEL_25:
    v44 = a1;
    v43 = 0;
    goto LABEL_26;
  }
  v17 = v16;
  v74 = v9;
  v75 = a1;
  v18 = a5;
  v76 = a2;
  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v21 = v20;

  sub_1000151B0(0, (unint64_t *)&qword_100840030, REMMemberships_ptr);
  static REMJSONRepresentable.fromJSONData(_:)(&v82, v19, v21);
  if (v6)
  {
    sub_1000A71C8(v19, v21);
    v82 = v6;
    swift_errorRetain(v6);
    v22 = sub_10001A630((uint64_t *)&unk_10083AA20);
    v23 = swift_dynamicCast(v15, &v82, v22, v11, 0);
    v24 = v18;
    v25 = v74;
    if ((v23 & 1) != 0)
    {
      if ((*(unsigned int (**)(NSObject **, uint64_t))(v12 + 88))(v15, v11) == enum case for REMJSONDeserializationError.notSupported(_:))
      {
        swift_errorRelease(v6);
        (*(void (**)(NSObject **, uint64_t))(v12 + 96))(v15, v11);
        v26 = *v15;
        if (qword_100836D20 != -1)
          swift_once(&qword_100836D20, sub_10011D87C);
        v27 = type metadata accessor for Logger(0);
        sub_10001AAA8(v27, (uint64_t)qword_10083B4A8);
        v28 = v25;
        v29 = Logger.logObject.getter(v28);
        v30 = static os_log_type_t.default.getter(v29);
        if (os_log_type_enabled(v29, (os_log_type_t)v30))
        {
          v70 = v30;
          v71 = v26;
          v31 = swift_slowAlloc(32, -1);
          v69 = (void *)swift_slowAlloc(64, -1);
          v80 = (uint64_t)v69;
          *(_DWORD *)v31 = 136446722;
          v77 = (os_log_t)sub_1000151B0(0, v72, v73);
          v32 = sub_10001A630(v24);
          v33 = String.init<A>(describing:)(&v77, v32);
          v35 = v34;
          v77 = (os_log_t)sub_10001A820(v33, v34, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78);
          *(_QWORD *)&v36 = swift_bridgeObjectRelease(v35).n128_u64[0];
          *(_WORD *)(v31 + 12) = 2082;
          v37 = objc_msgSend(v28, "remObjectID", v36);
          if (v37)
          {
            v38 = v37;
            v39 = objc_msgSend(v37, "description");

            v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
            v42 = v41;

          }
          else
          {
            v40 = 7104878;
            v42 = 0xE300000000000000;
          }
          v77 = (os_log_t)sub_10001A820(v40, v42, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78);

          swift_bridgeObjectRelease(v42);
          *(_WORD *)(v31 + 22) = 2050;
          v77 = v71;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78);
          _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v70, "%{public}s#mergeMembershipsOfRemindersInSections(_:): Failed to deserialize 'membershipsOfRemindersInSectionsAsData' because current runtime version is lower than minimumSupportedVersion. It will be overwritten. {objectID: %{public}s, minimumSupportedVersion: %{public}ld}", (uint8_t *)v31, 0x20u);
          v67 = v69;
          swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v67, -1, -1);
          swift_slowDealloc(v31, -1, -1);

        }
        else
        {

        }
        a1 = v75;
        a2 = v76;
        swift_errorRelease(v82);
        goto LABEL_25;
      }
      (*(void (**)(NSObject **, uint64_t))(v12 + 8))(v15, v11);
    }
    swift_errorRelease(v82);
    if (qword_100836D20 != -1)
      swift_once(&qword_100836D20, sub_10011D87C);
    v45 = type metadata accessor for Logger(0);
    sub_10001AAA8(v45, (uint64_t)qword_10083B4A8);
    swift_errorRetain(v6);
    v46 = v25;
    swift_errorRetain(v6);
    v47 = v46;
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      v70 = v49;
      v71 = v48;
      v50 = swift_slowAlloc(32, -1);
      v69 = (void *)swift_slowAlloc(96, -1);
      v82 = v69;
      *(_DWORD *)v50 = 136446722;
      v80 = sub_1000151B0(0, v72, v73);
      v51 = sub_10001A630(v24);
      v52 = String.init<A>(describing:)(&v80, v51);
      v54 = v53;
      v80 = sub_10001A820(v52, v53, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
      *(_QWORD *)&v55 = swift_bridgeObjectRelease(v54).n128_u64[0];
      *(_WORD *)(v50 + 12) = 2082;
      v56 = objc_msgSend(v47, "remObjectID", v55);
      if (v56)
      {
        v57 = v56;
        v58 = objc_msgSend(v56, "description");

        v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v61 = v60;

      }
      else
      {
        v59 = 7104878;
        v61 = 0xE300000000000000;
      }
      v80 = sub_10001A820(v59, v61, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);

      swift_bridgeObjectRelease(v61);
      *(_WORD *)(v50 + 22) = 2082;
      swift_getErrorValue(v6, v79, v78);
      v62 = Error.rem_errorDescription.getter(v78[1], v78[2]);
      v64 = v63;
      v80 = sub_10001A820(v62, v63, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
      swift_bridgeObjectRelease(v64);
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      v65 = v71;
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v70, "%{public}s#mergeMembershipsOfRemindersInSections(_:): Failed to deserialize 'membershipsOfRemindersInSectionsAsData' due to unexpected error. It will be overwritten. {objectID: %{public}s, error: %{public}s}", (uint8_t *)v50, 0x20u);
      v66 = v69;
      swift_arrayDestroy(v69, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);

      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
    a1 = v75;
    a2 = v76;
    goto LABEL_25;
  }
  sub_1000A71C8(v19, v21);
  v43 = v82;
  v44 = objc_msgSend(v82, "mergingWith:mergePolicy:", v75, 0);
  a2 = v76;
LABEL_26:
  v68 = v44;
  a2(v44, 1);

}

void sub_10014C948(void *a1)
{
  sub_10014C208(a1, (void (*)(_QWORD, _QWORD))sub_10027C500, (unint64_t *)&qword_100839900, off_1007D66E0, &qword_10083D128);
}

uint64_t sub_10014C97C(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10083CF00, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10014C9A0(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10083CF18, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_10014C9C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014C9F8 + 4 * aE[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

unint64_t sub_10014C9F8()
{
  return 0xD000000000000017;
}

uint64_t sub_10014CA88()
{
  return 0x53676E6974726F73;
}

unint64_t sub_10014CAA8()
{
  return 0xD000000000000015;
}

uint64_t sub_10014CB10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_10014C9C4(*a1);
  v5 = v4;
  v6 = sub_10014C9C4(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10014CB98()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_10014C9C4(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_10014CBF8(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_10014C9C4(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_10014CC38(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_10014C9C4(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10014CC94@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001574E4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014CCC0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10014C9C4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10014CCE8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001574E4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014CD0C()
{
  unsigned __int8 *v0;

  return sub_10014C9C4(*v0);
}

void sub_10014CD14(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF690;
}

uint64_t sub_10014CD24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002B3A48(*a1, *a2);
}

Swift::Int sub_10014CD30()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEF4449746E756F63;
  v3 = 0x6341746E65726170;
  if (v1 != 1)
  {
    v3 = 0xD000000000000014;
    v2 = 0x80000001006F3EE0;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x49746E756F636361;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE900000000000044;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10014CDE4(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEF4449746E756F63;
  v3 = 0x6341746E65726170;
  if (*v1 != 1)
  {
    v3 = 0xD000000000000014;
    v2 = 0x80000001006F3EE0;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x49746E756F636361;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE900000000000044;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10014CE74(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEF4449746E756F63;
  v4 = 0x6341746E65726170;
  if (v2 != 1)
  {
    v4 = 0xD000000000000014;
    v3 = 0x80000001006F3EE0;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x49746E756F636361;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE900000000000044;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10014CF24@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015749C(*a1);
  *a2 = result;
  return result;
}

void sub_10014CF50(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000044;
  v4 = 0xEF4449746E756F63;
  v5 = 0x6341746E65726170;
  if (v2 != 1)
  {
    v5 = 0xD000000000000014;
    v4 = 0x80000001006F3EE0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x49746E756F636361;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_10014CFC4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015749C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014CFE8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6341746E65726170;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x49746E756F636361;
}

void sub_10014D058(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF958;
}

Swift::Int sub_10014D068(uint64_t a1, uint64_t a2)
{
  return sub_10014D128(a1, a2, 0x736E6F6974636573, 0xE800000000000000);
}

uint64_t sub_10014D080(uint64_t a1)
{
  return String.hash(into:)(a1, 0x736E6F6974636573, 0xE800000000000000);
}

Swift::Int sub_10014D098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014D1AC(a1, a2, a3, 0x736E6F6974636573, 0xE800000000000000);
}

uint64_t sub_10014D0B0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DF980;
  return sub_10014D200(v2, a1, a2);
}

void sub_10014D0BC(_QWORD *a1@<X8>)
{
  *a1 = 0x736E6F6974636573;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_10014D0D8@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DF028;
  return sub_10014D278(a1, v2, a2);
}

uint64_t sub_10014D0E4()
{
  return 0x736E6F6974636573;
}

void sub_10014D0FC(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DF9B8;
}

Swift::Int sub_10014D10C(uint64_t a1, uint64_t a2)
{
  return sub_10014D128(a1, a2, 0xD00000000000001CLL, 0x80000001006F3F50);
}

Swift::Int sub_10014D128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  String.hash(into:)(v7, a3, a4);
  return Hasher._finalize()();
}

uint64_t sub_10014D174(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000001CLL, 0x80000001006F3F50);
}

Swift::Int sub_10014D190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10014D1AC(a1, a2, a3, 0xD00000000000001CLL, 0x80000001006F3F50);
}

Swift::Int sub_10014D1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, a4, a5);
  return Hasher._finalize()();
}

uint64_t sub_10014D1F4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DF9E0;
  return sub_10014D200(v2, a1, a2);
}

uint64_t sub_10014D200@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  *a3 = v6 != 0;
  return result;
}

void sub_10014D24C(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x80000001006F3F50;
}

uint64_t sub_10014D26C@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1007DF060;
  return sub_10014D278(a1, v2, a2);
}

uint64_t sub_10014D278@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  *a3 = v6 != 0;
  return result;
}

unint64_t sub_10014D2C8()
{
  return 0xD00000000000001CLL;
}

void sub_10014D2E4(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DFA18;
}

void sub_10014D2F4()
{
  uint64_t v0;

  sub_10014D310();
  qword_100871C58 = v0;
}

void sub_10014D310()
{
  JUMPOUT(0x10014D4A0);
}

void sub_10014D7F8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t ObjCClassFromMetadata;
  NSString v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t MetatypeMetadata;
  uint64_t v51;
  unint64_t v52;
  double v53;
  id v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD v62[4];
  __n128 v63;
  const char *v64;
  const char *v65;
  char *v66;
  char *v67;
  const char *v68;
  __n128 v69;
  uint64_t *v70;
  const char *v71;
  id v72;
  int v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  id v78;
  void *v79;
  void *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  char *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD v91[2];
  _QWORD *v92;
  uint64_t v93;

  v6 = v5;
  v76 = a4;
  v74 = *v4;
  v10 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v10);
  v12 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v13);
  v77 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v88 = *(_QWORD **)(v15 - 8);
  v89 = (_QWORD *)v15;
  *(_QWORD *)&v16 = __chkstk_darwin(v15).n128_u64[0];
  v87 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v16);
  v19 = objc_msgSend(a1, "resolutionTokenMap");
  v82 = v18;
  if (v19)
  {
    v75 = v12;
    v72 = v19;
    v20 = sub_100404ED4((uint64_t)v19, a3);
    v21 = *(_QWORD *)(a3 + 16);
    v78 = v20;
    if (v21)
    {
      v86 = (a3 + 32);
      v70 = &v93;
      v84 = a3;
      v22 = swift_bridgeObjectRetain(a3);
      LODWORD(v83) = 0;
      v73 = 0;
      v22.n128_u64[0] = 138543618;
      v63 = v22;
      v68 = "daIsNotificationsCollection";
      v67 = "DsToCategorizeAsGroceryItems";
      v66 = "lendar";
      v65 = "remindersICSDisplayOrderChanged";
      v64 = "calDAVNotifications";
      v71 = "unsavedSectionIDsOrdering";
      v22.n128_u64[0] = 136446722;
      v69 = v22;
      v62[2] = 0x80000001006F48D0;
      v62[3] = (char *)&type metadata for Any + 8;
      v80 = a1;
      v79 = a2;
      v85 = v21;
      __asm { BR              X9 }
    }
    v42 = objc_msgSend(a2, "name");
    if (v42)
    {
      v43 = v42;

    }
    else
    {
      if (qword_100836DA8 != -1)
        swift_once(&qword_100836DA8, sub_10014C97C);
      v44 = type metadata accessor for Logger(0);
      sub_10001AAA8(v44, (uint64_t)qword_10083CF00);
      v45 = a1;
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc(32, -1);
        v49 = (_QWORD *)swift_slowAlloc(8, -1);
        v88 = v49;
        v89 = (_QWORD *)swift_slowAlloc(64, -1);
        v92 = v89;
        *(_DWORD *)v48 = 136446722;
        v81 = v6;
        v90 = v74;
        MetatypeMetadata = swift_getMetatypeMetadata(v74);
        v51 = String.init<A>(describing:)(&v90, MetatypeMetadata);
        v90 = sub_10001A820(v51, v52, (uint64_t *)&v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
        *(_QWORD *)&v53 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v48 + 12) = 2114;
        v54 = objc_msgSend(v45, "objectID", v53);
        v90 = (uint64_t)v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
        *v49 = v54;

        *(_WORD *)(v48 + 22) = 2080;
        v55 = objc_msgSend(v45, "name");
        v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
        v58 = v57;

        v90 = sub_10001A820(v56, v58, (uint64_t *)&v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "%{public}s: '\\REMCDTemplate.name' should not be nil at the end of 'merge(storage:into:changedValueKeys:optionalCoordinator:)' {storage.objectID: %{public}@, storage.name: %s}", (uint8_t *)v48, 0x20u);
        v59 = sub_10001A630((uint64_t *)&unk_100839E70);
        v60 = v88;
        swift_arrayDestroy(v88, 1, v59);
        swift_slowDealloc(v60, -1, -1);
        v61 = v89;
        swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v48, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    if (qword_100836DA8 != -1)
      swift_once(&qword_100836DA8, sub_10014C97C);
    v23 = type metadata accessor for Logger(0);
    sub_10001AAA8(v23, (uint64_t)qword_10083CF00);
    swift_bridgeObjectRetain_n(a3, 2);
    v24 = a1;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      LODWORD(v88) = v26;
      v27 = swift_slowAlloc(22, -1);
      v28 = (_QWORD *)swift_slowAlloc(8, -1);
      v29 = swift_slowAlloc(32, -1);
      v90 = v29;
      *(_DWORD *)v27 = 138543618;
      v30 = objc_msgSend(v24, "objectID");
      v92 = v30;
      v87 = (char *)&v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
      v89 = v28;
      *v28 = v30;

      *(_WORD *)(v27 + 12) = 2082;
      v31 = *(_QWORD *)(a3 + 16);
      if (v31)
      {
        v85 = v29;
        v86 = v25;
        v92 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v31, 0);
        v84 = a3;
        __asm { BR              X9 }
      }
      v32 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v34 = v33;
      swift_bridgeObjectRelease();
      v92 = (_QWORD *)sub_10001A820(v32, v34, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v87);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v88, "REMTemplateStorageCDIngestor: merge(storage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v27, 0x16u);
      v35 = sub_10001A630((uint64_t *)&unk_100839E70);
      v36 = v89;
      swift_arrayDestroy(v89, 1, v35);
      swift_slowDealloc(v36, -1, -1);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v37 = (void *)objc_opt_self(REMError);
    v38 = sub_1000151B0(0, &qword_10083D0D8, REMTemplateStorage_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v38);
    v40 = String._bridgeToObjectiveC()();
    objc_msgSend(v37, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v40);

    swift_willThrow(v41);
  }
}

void sub_10014FC18(uint64_t a1, int a2)
{
  sub_10014FC2C(a1, a2);
}

void sub_10014FC2C(uint64_t a1, int a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  Class isa;
  id v29;
  uint64_t v30;
  id v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  Class v37;
  id v38;
  NSString v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;

  v4 = v3;
  v5 = v2;
  v8 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    objc_msgSend(v5, "setSectionIDsOrderingAsData:", 0, v9);
    return;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      v26 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v26 = a1;
    swift_bridgeObjectRetain(a1);
    v12 = _CocoaArrayWrapper.endIndex.getter(v26);
    if (v12)
      goto LABEL_4;
LABEL_20:
    swift_bridgeObjectRelease();
    v14 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v12)
    goto LABEL_20;
LABEL_4:
  if (v12 < 1)
  {
    __break(1u);
    return;
  }
  HIDWORD(v40) = a2;
  v41 = v5;
  v42 = v4;
  v13 = 0;
  v43 = a1 & 0xC000000000000001;
  v14 = _swiftEmptyArrayStorage;
  v15 = a1;
  do
  {
    if (v43)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
    else
      v16 = *(id *)(a1 + 8 * v13 + 32);
    v17 = v16;
    v18 = objc_msgSend(v16, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v20 = UUID.uuidString.getter(v19);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v45);

    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_1002C8224(0, v14[2] + 1, 1, v14);
    v24 = v14[2];
    v23 = v14[3];
    if (v24 >= v23 >> 1)
      v14 = sub_1002C8224((_QWORD *)(v23 > 1), v24 + 1, 1, v14);
    ++v13;
    v14[2] = v24 + 1;
    v25 = &v14[2 * v24];
    v25[4] = v20;
    v25[5] = v22;
    a1 = v15;
  }
  while (v12 != v13);
  swift_bridgeObjectRelease();
  v5 = v41;
  v4 = v42;
  LOBYTE(a2) = BYTE4(v40);
LABEL_21:
  v27 = objc_allocWithZone((Class)REMOrderedIdentifierMap);
  swift_bridgeObjectRetain(v14);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v29 = objc_msgSend(v27, "initWithOrderedIdentifiers:", isa, swift_bridgeObjectRelease().n128_f64[0]);
  swift_bridgeObjectRelease();

  v46 = v29;
  v30 = sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
  v31 = v29;
  v33 = REMJSONRepresentable.toJSONData()(v30, &protocol witness table for REMOrderedIdentifierMap, v32);
  if (!v4)
  {
    v35 = v33;
    v36 = v34;
    sub_1000A70E4(v33, v34);
    v37 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v35, v36);
    objc_msgSend(v5, "setSectionIDsOrderingAsData:", v37);

    if ((a2 & 1) != 0)
    {
      v38 = objc_msgSend(v5, "createResolutionTokenMapIfNecessary");
      v39 = String._bridgeToObjectiveC()();
      objc_msgSend(v38, "updateForKey:", v39);

    }
    sub_1000A71C8(v35, v36);
  }

}

uint64_t sub_10014FF94(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _BYTE *v16;
  id v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t MetatypeMetadata;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  void (*v37)(_BYTE *, uint64_t);
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __n128 v70;
  uint64_t v71;
  _BYTE v72[12];
  int v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;

  v78 = (_BYTE *)*v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v72[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v77 = &v72[-v9];
  __chkstk_darwin(v10);
  v12 = &v72[-v11];
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = &v72[-v15];
  v17 = objc_msgSend(a1, "uuid", v14);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

  sub_100158A98((uint64_t)v16);
  if (v2)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v16, v4);
  v76 = v16;
  v20 = v4;
  if (!v18)
  {
    sub_100158DD8((uint64_t)v76);
    v75 = 0;
    if (v41 < 1)
    {
      v24 = v4;
      v57 = v5;
      if (qword_100836DA8 != -1)
        swift_once(&qword_100836DA8, sub_10014C97C);
      v58 = type metadata accessor for Logger(0);
      sub_10001AAA8(v58, (uint64_t)qword_10083CF00);
      v23 = (uint64_t)v76;
      v59 = v77;
      v60 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v77, v76, v20);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.default.getter(v61);
      v63 = v62;
      if (!os_log_type_enabled(v61, v62))
      {

        v37 = *(void (**)(_BYTE *, uint64_t))(v57 + 8);
        v37(v59, v20);
        goto LABEL_14;
      }
      v64 = swift_slowAlloc(22, -1);
      v74 = swift_slowAlloc(64, -1);
      v81 = (_BYTE *)v74;
      *(_DWORD *)v64 = 136446466;
      v73 = v63;
      v65 = sub_1000D92EC((uint64_t)v78);
      v79 = (_BYTE *)sub_10001A820(v65, v66, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      swift_bridgeObjectRelease();
      *(_WORD *)(v64 + 12) = 2082;
      v68 = UUID.uuidString.getter(v67);
      v79 = (_BYTE *)sub_10001A820(v68, v69, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      v70 = swift_bridgeObjectRelease();
      v37 = *(void (**)(_BYTE *, uint64_t))(v57 + 8);
      v55 = v20;
      ((void (*)(_BYTE *, uint64_t, __n128))v37)(v59, v20, v70);
      _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v73, "%{public}s: Did not find REMCDList and REMCDSmartList with matching 'mostRecentTargetTemplateIdentifier' {mostRecentTargetTemplateIdentifier: %{public}s}", (uint8_t *)v64, 0x16u);
      v71 = v74;
      swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v64, -1, -1);

    }
    else
    {
      v24 = v4;
      v42 = v5;
      if (qword_100836DA8 != -1)
        swift_once(&qword_100836DA8, sub_10014C97C);
      v43 = type metadata accessor for Logger(0);
      sub_10001AAA8(v43, (uint64_t)qword_10083CF00);
      v23 = (uint64_t)v76;
      v44 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v12, v76, v20);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.default.getter(v45);
      v47 = v46;
      if (!os_log_type_enabled(v45, v46))
      {

        v37 = *(void (**)(_BYTE *, uint64_t))(v42 + 8);
        v37(v12, v20);
        goto LABEL_14;
      }
      v48 = swift_slowAlloc(22, -1);
      v77 = (_BYTE *)swift_slowAlloc(64, -1);
      v81 = v77;
      *(_DWORD *)v48 = 136446466;
      LODWORD(v74) = v47;
      v49 = sub_1000D92EC((uint64_t)v78);
      v79 = (_BYTE *)sub_10001A820(v49, v50, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2082;
      v52 = UUID.uuidString.getter(v51);
      v79 = (_BYTE *)sub_10001A820(v52, v53, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      v54 = swift_bridgeObjectRelease();
      v37 = *(void (**)(_BYTE *, uint64_t))(v42 + 8);
      v55 = v20;
      ((void (*)(_BYTE *, uint64_t, __n128))v37)(v12, v20, v54);
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v74, "%{public}s: Did reset '\\REMCDSmartList.mostRecentTargetTemplateIdentifier' to nil {mostRecentTargetTemplateIdentifier: %{public}s}", (uint8_t *)v48, 0x16u);
      v56 = v77;
      swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    v39 = v23;
    v40 = v55;
    return ((uint64_t (*)(uint64_t, uint64_t))v37)(v39, v40);
  }
  v75 = 0;
  if (qword_100836DA8 != -1)
    swift_once(&qword_100836DA8, sub_10014C97C);
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_10083CF00);
  v22 = v5;
  v23 = (uint64_t)v76;
  v24 = v20;
  v25 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v7, v76, v20);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  v28 = v27;
  if (!os_log_type_enabled(v26, v27))
  {

    v37 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
    v37(v7, v20);
LABEL_14:
    v39 = v23;
    v40 = v24;
    return ((uint64_t (*)(uint64_t, uint64_t))v37)(v39, v40);
  }
  v29 = swift_slowAlloc(22, -1);
  v77 = (_BYTE *)swift_slowAlloc(64, -1);
  v79 = v77;
  *(_DWORD *)v29 = 136446466;
  LODWORD(v74) = v28;
  v81 = v78;
  MetatypeMetadata = swift_getMetatypeMetadata(v78);
  v31 = String.init<A>(describing:)(&v81, MetatypeMetadata);
  v81 = (_BYTE *)sub_10001A820(v31, v32, (uint64_t *)&v79);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
  swift_bridgeObjectRelease();
  *(_WORD *)(v29 + 12) = 2082;
  v34 = UUID.uuidString.getter(v33);
  v81 = (_BYTE *)sub_10001A820(v34, v35, (uint64_t *)&v79);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
  v36 = swift_bridgeObjectRelease();
  v37 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
  ((void (*)(_BYTE *, uint64_t, __n128))v37)(v7, v20, v36);
  _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v74, "%{public}s: Did reset '\\REMCDList.mostRecentTargetTemplateIdentifier' to nil {mostRecentTargetTemplateIdentifier: %{public}s}", (uint8_t *)v29, 0x16u);
  v38 = v77;
  swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v38, -1, -1);
  swift_slowDealloc(v29, -1, -1);

  v39 = v23;
  v40 = v20;
  return ((uint64_t (*)(_QWORD, _QWORD))v37)(v39, v40);
}

uint64_t sub_100150688()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for REMTemplateStorageCDIngestor()
{
  return objc_opt_self(_TtC7remindd28REMTemplateStorageCDIngestor);
}

_UNKNOWN **sub_1001506B8()
{
  return &off_1007E6A40;
}

_UNKNOWN **sub_1001506C4()
{
  return &off_1007E6A10;
}

_UNKNOWN **sub_1001506D0()
{
  return &off_1007E69E0;
}

_UNKNOWN **sub_1001506DC()
{
  return &off_1007E69B0;
}

uint64_t sub_1001506E8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015070C(a1, (SEL *)&selRef_creationDate, a2);
}

void sub_1001506F4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100150798(a1, a2, a3, a4, (SEL *)&selRef_setCreationDate_);
}

uint64_t sub_100150700@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015070C(a1, (SEL *)&selRef_lastModifiedDate, a2);
}

uint64_t sub_10015070C@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v6 = type metadata accessor for Date(0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a3;
    v9 = 0;
  }
  else
  {
    v6 = type metadata accessor for Date(0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a3;
    v9 = 1;
  }
  return v7(v8, v9, 1, v6);
}

void sub_10015078C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100150798(a1, a2, a3, a4, (SEL *)&selRef_setLastModifiedDate_);
}

void sub_100150798(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;

  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008868(a1, (uint64_t)v10, (uint64_t *)&unk_1008380D0);
  v11 = *a2;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  }
  objc_msgSend(v11, *a5, isa);

}

uint64_t sub_10015087C(NSURL *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int (*v94)(uint64_t, uint64_t, uint64_t);
  void *clients;
  uint64_t *v96;
  double v97;
  id v98;
  void *v99;
  uint64_t v100;
  NSString *urlString;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  NSURL *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  Class isa;
  uint64_t v114;
  Class v115;
  void *v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  NSString v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  double v125;
  id v126;
  void *v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char v134;
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  Class v141;
  double v142;
  id v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  id v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  id v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  Class v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  id v164;
  NSObject *v165;
  os_log_type_t v166;
  uint64_t v167;
  NSURL *v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t *v178;
  void **p_baseURL;
  uint64_t v180;
  char v181;
  void (*v182)(char *, uint64_t, uint64_t, uint64_t);
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  Class v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  char v195;
  uint64_t v196;
  char v197;
  void (*v198)(char *, uint64_t, uint64_t, uint64_t);
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  void *v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  id v213;
  NSObject *v214;
  os_log_type_t v215;
  uint64_t v216;
  NSURL *v217;
  id v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  Swift::String v227;
  Swift::String v228;
  uint64_t v229;
  NSURL **i;
  NSURL *v231;
  Swift::String v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  objc_class *v254;
  uint64_t v255;
  objc_class *v256;
  uint64_t v257;
  uint64_t v258;
  objc_class *v259;
  char *v260;
  uint64_t v261;
  objc_class *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  NSURL v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  NSURL *v274;
  NSURL *baseURL;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;

  v268 = a2;
  v241 = type metadata accessor for Logger(0);
  v240 = *(_QWORD *)(v241 - 8);
  __chkstk_darwin(v241);
  v239 = (char *)&v233 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v234 = (char *)&v233 - v5;
  v6 = sub_10001A630(&qword_10083D100);
  __chkstk_darwin(v6);
  v243 = (char *)&v233 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = sub_10001A630((uint64_t *)&unk_100839C70);
  v237 = *(_QWORD *)(v242 - 8);
  __chkstk_darwin(v242);
  v235 = (uint64_t)&v233 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v238 = (uint64_t)&v233 - v10;
  v11 = sub_10001A630(&qword_10083D0E8);
  __chkstk_darwin(v11);
  v249 = (char *)&v233 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = sub_10001A630((uint64_t *)&unk_100839C80);
  v246 = *(_QWORD *)(v248 - 8);
  __chkstk_darwin(v248);
  v244 = (uint64_t)&v233 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v247 = (uint64_t)&v233 - v15;
  v269 = type metadata accessor for Date(0);
  v272 = *(_QWORD *)(v269 - 8);
  __chkstk_darwin(v269);
  v260 = (char *)&v233 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v264 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v264);
  v265 = (uint64_t)&v233 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v267._reserved = (void *)sub_10001A630(&qword_10083D120);
  __chkstk_darwin(v267._reserved);
  v19 = (char *)&v233 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v20 = *(_QWORD *)(v271 - 8);
  __chkstk_darwin(v271);
  v251 = (char *)&v233 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v233 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v233 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v233 - v29;
  __chkstk_darwin(v31);
  v33 = (char *)&v233 - v32;
  __chkstk_darwin(v34);
  v236 = (uint64_t)&v233 - v35;
  __chkstk_darwin(v36);
  v245 = (uint64_t)&v233 - v37;
  __chkstk_darwin(v38);
  v250 = (uint64_t)&v233 - v39;
  __chkstk_darwin(v40);
  v252 = (uint64_t)&v233 - v41;
  __chkstk_darwin(v42);
  v253 = (uint64_t)&v233 - v43;
  __chkstk_darwin(v44);
  v254 = (objc_class *)((char *)&v233 - v45);
  __chkstk_darwin(v46);
  v255 = (uint64_t)&v233 - v47;
  __chkstk_darwin(v48);
  v256 = (objc_class *)((char *)&v233 - v49);
  __chkstk_darwin(v50);
  v257 = (uint64_t)&v233 - v51;
  __chkstk_darwin(v52);
  v258 = (uint64_t)&v233 - v53;
  __chkstk_darwin(v54);
  v259 = (objc_class *)((char *)&v233 - v55);
  __chkstk_darwin(v56);
  v261 = (uint64_t)&v233 - v57;
  __chkstk_darwin(v58);
  v262 = (objc_class *)((char *)&v233 - v59);
  __chkstk_darwin(v60);
  v266 = (uint64_t)&v233 - v61;
  __chkstk_darwin(v62);
  v267.super.isa = (Class)((char *)&v233 - v63);
  __chkstk_darwin(v64);
  v263 = (uint64_t)&v233 - v65;
  __chkstk_darwin(v66);
  v267._urlString = (NSString *)((char *)&v233 - v67);
  __chkstk_darwin(v68);
  v70 = (char *)&v233 - v69;
  v71 = sub_10001A630(&qword_10083D0F0);
  __chkstk_darwin(v71);
  v267._clients = (char *)&v233 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v73);
  v75 = (char *)&v233 - v74;
  __chkstk_darwin(v76);
  v270 = (uint64_t)&v233 - v77;
  v267._baseURL = a1;
  v79 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v78);
  if (!v80)
  {
    v276 = 0;
    v277 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v228._object = (void *)0x80000001006F8C10;
    v228._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v228);
    baseURL = v267._baseURL;
    goto LABEL_163;
  }
  v81 = v79;
  v82 = v80;
  if (v79 == 0x6E6F697461657263 && v80 == 0xEC00000065746144
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC00000065746144, v79, v80, 0) & 1) != 0)
  {
    *(_QWORD *)&v83 = swift_bridgeObjectRelease(v82).n128_u64[0];
    v84 = objc_msgSend(v273, "creationDate", v83);
    if (v84)
    {
      v85 = v84;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v84);

      v86 = 0;
    }
    else
    {
      v86 = 1;
    }
    v87 = v269;
    v88 = v272;
    goto LABEL_9;
  }
  if (v81 == 0xD000000000000010 && v82 == 0x80000001006AA8F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006AA8F0, v81, v82, 0) & 1) != 0)
  {
    *(_QWORD *)&v97 = swift_bridgeObjectRelease(v82).n128_u64[0];
    v98 = objc_msgSend(v273, "lastModifiedDate", v97);
    if (v98)
    {
      v99 = v98;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v98);

      v100 = 0;
    }
    else
    {
      v100 = 1;
    }
    v87 = v269;
    v124 = v272;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v272 + 56))(v33, v100, 1, v269);
    v70 = v33;
    v88 = v124;
    goto LABEL_10;
  }
  v88 = v272;
  if (v81 == 0xD000000000000025 && v82 == 0x80000001006F48F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000001006F48F0, v81, v82, 0) & 1) != 0)
  {
    *(_QWORD *)&v125 = swift_bridgeObjectRelease(v82).n128_u64[0];
    v126 = objc_msgSend(v273, "mostRecentPublicLinkUpdateRequestDate", v125);
    if (v126)
    {
      v127 = v126;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v126);

      v128 = 0;
    }
    else
    {
      v128 = 1;
    }
    v87 = v269;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v30, v128, 1, v269);
    v70 = v30;
    goto LABEL_10;
  }
  if (v81 == 0xD00000000000001BLL && v82 == 0x80000001006F4920
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001006F4920, v81, v82, 0) & 1) != 0)
  {
    goto LABEL_68;
  }
  if (v81 == 0xD000000000000016 && v82 == 0x80000001006F4940
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001006F4940, v81, v82, 0) & 1) != 0)
  {
    *(_QWORD *)&v142 = swift_bridgeObjectRelease(v82).n128_u64[0];
    v143 = objc_msgSend(v273, "publicLinkCreationDate", v142);
    if (v143)
    {
      v144 = v143;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v143);

      v145 = 0;
    }
    else
    {
      v145 = 1;
    }
    v147 = v269;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v27, v145, 1, v269);
    v70 = v27;
    v87 = v147;
    goto LABEL_10;
  }
  if (v81 == 0xD000000000000018 && v82 == 0x80000001006F3E40
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001006F3E40, v81, v82, 0) & 1) != 0)
  {
    *(_QWORD *)&v148 = swift_bridgeObjectRelease(v82).n128_u64[0];
    v149 = objc_msgSend(v273, "publicLinkExpirationDate", v148);
    v87 = v269;
    if (v149)
    {
      v150 = v149;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v149);

      v151 = 0;
    }
    else
    {
      v151 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v24, v151, 1, v87);
    v70 = v24;
LABEL_10:
    v89 = v270;
    sub_1000A5CA8((uint64_t)v70, v270, (uint64_t *)&unk_1008380D0);
    v90 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56);
    v91 = v271;
    v90(v89, 0, 1, v271);
    v92 = v268;
    sub_100008868(v268, (uint64_t)v75, (uint64_t *)&unk_1008380D0);
    v90((uint64_t)v75, 0, 1, v91);
    v93 = (uint64_t)&v19[*((int *)v267._reserved + 12)];
    sub_100008868(v89, (uint64_t)v19, &qword_10083D0F0);
    sub_100008868((uint64_t)v75, v93, &qword_10083D0F0);
    v94 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
    if (v94((uint64_t)v19, 1, v91) == 1)
    {
      sub_10000882C((uint64_t)v75, &qword_10083D0F0);
      if (v94(v93, 1, v91) == 1)
      {
LABEL_12:
        sub_10000882C((uint64_t)v19, &qword_10083D0F0);
LABEL_40:
        v121 = v89;
        return sub_10000882C(v121, &qword_10083D0F0);
      }
      v96 = &qword_10083D120;
    }
    else
    {
      clients = v267._clients;
      sub_100008868((uint64_t)v19, (uint64_t)v267._clients, &qword_10083D0F0);
      if (v94(v93, 1, v91) == 1)
      {
        v96 = &qword_10083D120;
      }
      else
      {
        urlString = v267._urlString;
        sub_1000A5CA8(v93, (uint64_t)v267._urlString, (uint64_t *)&unk_1008380D0);
        v102 = (uint64_t)clients;
        v103 = v265;
        v104 = v265 + *(int *)(v264 + 48);
        sub_100008868(v102, v265, (uint64_t *)&unk_1008380D0);
        sub_100008868((uint64_t)urlString, v104, (uint64_t *)&unk_1008380D0);
        v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
        if (v105(v103, 1, v87) == 1)
        {
          if (v105(v104, 1, v87) == 1)
          {
            sub_10000882C(v103, (uint64_t *)&unk_1008380D0);
            sub_10000882C((uint64_t)v267._urlString, (uint64_t *)&unk_1008380D0);
            sub_10000882C((uint64_t)v75, &qword_10083D0F0);
            sub_10000882C((uint64_t)v267._clients, (uint64_t *)&unk_1008380D0);
            goto LABEL_12;
          }
        }
        else
        {
          v106 = v263;
          sub_100008868(v103, v263, (uint64_t *)&unk_1008380D0);
          if (v105(v104, 1, v87) != 1)
          {
            v129 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 32);
            v130 = v88;
            v131 = v106;
            v132 = v260;
            v129(v260, v104, v87);
            v133 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v134 = dispatch thunk of static Equatable.== infix(_:_:)(v131, v132, v87, v133);
            v135 = *(void (**)(char *, uint64_t))(v130 + 8);
            v135(v132, v87);
            v135((char *)v131, v87);
            sub_10000882C(v103, (uint64_t *)&unk_1008380D0);
            sub_10000882C((uint64_t)v267._urlString, (uint64_t *)&unk_1008380D0);
            sub_10000882C((uint64_t)v75, &qword_10083D0F0);
            sub_10000882C((uint64_t)v267._clients, (uint64_t *)&unk_1008380D0);
            v88 = v272;
            v107 = sub_10000882C((uint64_t)v19, &qword_10083D0F0);
            v108 = v267._baseURL;
            if ((v134 & 1) != 0)
              goto LABEL_40;
LABEL_29:
            v109 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v107);
            if (!v110)
            {
LABEL_161:
              v276 = 0;
              v277 = 0xE000000000000000;
              _StringGuts.grow(_:)(46);
              v227._object = (void *)0x80000001006F8C10;
              v227._countAndFlagsBits = 0xD00000000000002CLL;
              String.append(_:)(v227);
              baseURL = v108;
LABEL_163:
              v229 = sub_10001A630(&qword_10083FD70);
              for (i = &baseURL; ; i = &v274)
              {
                _print_unlocked<A, B>(_:_:)(i, &v276, v229, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
                _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v276, v277, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
                __break(1u);
LABEL_165:
                v231 = v267._baseURL;
                swift_release(v267._baseURL);
                v276 = 0;
                v277 = 0xE000000000000000;
                _StringGuts.grow(_:)(46);
                v232._object = (void *)0x80000001006F8C10;
                v232._countAndFlagsBits = 0xD00000000000002CLL;
                String.append(_:)(v232);
                v274 = v231;
                v229 = sub_10001A630(&qword_10083FD70);
              }
            }
            v111 = v109;
            v112 = v110;
            if (v109 == 0x6E6F697461657263 && v110 == 0xEC00000065746144
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC00000065746144, v109, v110, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v112);
              isa = v267.super.isa;
              sub_100008868(v92, (uint64_t)v267.super.isa, (uint64_t *)&unk_1008380D0);
              v114 = v266;
              sub_100008868((uint64_t)isa, v266, (uint64_t *)&unk_1008380D0);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v114, 1, v87) == 1)
              {
                v115 = 0;
              }
              else
              {
                v115 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v114, v87);
              }
              v116 = v273;
              objc_msgSend(v273, "setCreationDate:", v115);
LABEL_37:

              sub_10000882C((uint64_t)isa, (uint64_t *)&unk_1008380D0);
              goto LABEL_38;
            }
            if (v111 == 0xD000000000000010 && v112 == 0x80000001006AA8F0
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006AA8F0, v111, v112, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v112);
              isa = v262;
              sub_100008868(v92, (uint64_t)v262, (uint64_t *)&unk_1008380D0);
              v123 = v261;
              sub_100008868((uint64_t)isa, v261, (uint64_t *)&unk_1008380D0);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v123, 1, v87) == 1)
              {
                v115 = 0;
              }
              else
              {
                v115 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v123, v87);
              }
              v116 = v273;
              objc_msgSend(v273, "setLastModifiedDate:", v115);
              goto LABEL_37;
            }
            if (v111 == 0xD000000000000025 && v112 == 0x80000001006F48F0
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000001006F48F0, v111, v112, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v112);
              isa = v259;
              sub_100008868(v92, (uint64_t)v259, (uint64_t *)&unk_1008380D0);
              v136 = v258;
              sub_100008868((uint64_t)isa, v258, (uint64_t *)&unk_1008380D0);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v136, 1, v87) == 1)
              {
                v115 = 0;
              }
              else
              {
                v115 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v136, v87);
              }
              v116 = v273;
              objc_msgSend(v273, "setMostRecentPublicLinkUpdateRequestDate:", v115);
              goto LABEL_37;
            }
            if (v111 == 0xD00000000000001BLL && v112 == 0x80000001006F4920
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001006F4920, v111, v112, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v112);
              v137 = v257;
              sub_100008868(v92, v257, (uint64_t *)&unk_1008380D0);
              v138 = sub_10001A630(&qword_10083A6E0);
              if ((swift_dynamicCast(&v276, v137, v271, v138, 6) & 1) != 0)
              {
                v139 = v276;
                v140 = v277;
                v116 = v273;
                if (v277 >> 60 == 15)
                {
                  v141 = 0;
                }
                else
                {
                  sub_1000A70E4(v276, v277);
                  v141 = Data._bridgeToObjectiveC()().super.isa;
                  sub_1000A71B4(v139, v140);
                }
                objc_msgSend(v116, "setPublicLinkConfigurationData:", v141);

                sub_1000A71B4(v139, v140);
              }
              else
              {
                v116 = v273;
              }
LABEL_38:
              v117 = objc_msgSend(v116, "createResolutionTokenMapIfNecessary");
              dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v117);
              if (v118)
              {
                v119 = v118;
                v120 = String._bridgeToObjectiveC()();
                objc_msgSend(v117, "updateForKey:", v120, swift_bridgeObjectRelease(v119).n128_f64[0]);

                goto LABEL_40;
              }
              goto LABEL_161;
            }
            if (v111 == 0xD000000000000016 && v112 == 0x80000001006F4940
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001006F4940, v111, v112, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v112);
              isa = v256;
              sub_100008868(v92, (uint64_t)v256, (uint64_t *)&unk_1008380D0);
              v146 = v255;
              sub_100008868((uint64_t)isa, v255, (uint64_t *)&unk_1008380D0);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v146, 1, v87) == 1)
              {
                v115 = 0;
              }
              else
              {
                v115 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v146, v87);
              }
              v116 = v273;
              objc_msgSend(v273, "setPublicLinkCreationDate:", v115);
              goto LABEL_37;
            }
            if (v111 == 0xD000000000000018 && v112 == 0x80000001006F3E40
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001006F3E40, v111, v112, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v112);
              isa = v254;
              sub_100008868(v92, (uint64_t)v254, (uint64_t *)&unk_1008380D0);
              v152 = v253;
              sub_100008868((uint64_t)isa, v253, (uint64_t *)&unk_1008380D0);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v152, 1, v87) == 1)
              {
                v115 = 0;
              }
              else
              {
                v115 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v152, v87);
              }
              v116 = v273;
              objc_msgSend(v273, "setPublicLinkExpirationDate:", v115);
              goto LABEL_37;
            }
            if (v111 == 0xD00000000000001ALL && v112 == 0x80000001006F4960
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001006F4960, v111, v112, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v112);
              v156 = v252;
              sub_100008868(v92, v252, (uint64_t *)&unk_1008380D0);
              v157 = v156;
              v158 = v250;
              sub_100008868(v157, v250, (uint64_t *)&unk_1008380D0);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v158, 1, v87) == 1)
              {
                v159 = 0;
              }
              else
              {
                v159 = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v158, v87);
              }
              v116 = v273;
              objc_msgSend(v273, "setPublicLinkLastModifiedDate:", v159);

              v178 = (uint64_t *)&unk_1008380D0;
              p_baseURL = (void **)&v278;
LABEL_133:
              sub_10000882C((uint64_t)*(p_baseURL - 32), v178);
              v108 = v267._baseURL;
              v89 = v270;
              goto LABEL_38;
            }
            if (v111 == 0xD000000000000011 && v112 == 0x80000001006F3E10
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001006F3E10, v111, v112, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v112);
              v180 = v245;
              sub_100008868(v268, v245, (uint64_t *)&unk_1008380D0);
              v181 = swift_dynamicCast(v249, v180, v271, v248, 6);
              v182 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v246 + 56);
              if ((v181 & 1) != 0)
              {
                v183 = v249;
                v182(v249, 0, 1, v248);
                v184 = (uint64_t)v183;
                v185 = v247;
                sub_1000A5CA8(v184, v247, (uint64_t *)&unk_100839C80);
                v186 = v185;
                v187 = v244;
                sub_100008868(v186, v244, (uint64_t *)&unk_100839C80);
                v188 = type metadata accessor for UUID(0);
                v189 = *(_QWORD *)(v188 - 8);
                v190 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v189 + 48))(v187, 1, v188);
                v191 = 0;
                if (v190 != 1)
                {
                  v192 = v244;
                  v191 = UUID._bridgeToObjectiveC()().super.isa;
                  (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v192, v188);
                }
                v116 = v273;
                objc_msgSend(v273, "setPublicLinkURLUUID:", v191);

                v178 = (uint64_t *)&unk_100839C80;
                p_baseURL = (void **)&baseURL;
                goto LABEL_133;
              }
              v193 = (uint64_t)v249;
              v182(v249, 1, 1, v248);
              v194 = &qword_10083D0E8;
            }
            else
            {
              if (v111 == 0x694C656372756F73 && v112 == 0xEF4C525544497473)
              {
                swift_bridgeObjectRelease(0xEF4C525544497473);
              }
              else
              {
                v195 = _stringCompareWithSmolCheck(_:_:expecting:)(0x694C656372756F73, 0xEF4C525544497473, v111, v112, 0);
                swift_bridgeObjectRelease(v112);
                if ((v195 & 1) == 0)
                {
                  if (qword_100837328 != -1)
                    swift_once(&qword_100837328, sub_10038CFC0);
                  v210 = v241;
                  v211 = sub_10001AAA8(v241, (uint64_t)qword_100847700);
                  (*(void (**)(char *, uint64_t, uint64_t))(v240 + 16))(v234, v211, v210);
                  v212 = v273;
                  swift_retain_n(v267._baseURL, 2);
                  v213 = v212;
                  v214 = Logger.logObject.getter(v213);
                  v215 = static os_log_type_t.fault.getter();
                  if (os_log_type_enabled(v214, v215))
                  {
                    v216 = swift_slowAlloc(22, -1);
                    v217 = (NSURL *)swift_slowAlloc(64, -1);
                    baseURL = v217;
                    *(_DWORD *)v216 = 136446466;
                    v218 = objc_msgSend(v213, "remObjectID");
                    v276 = (uint64_t)v218;
                    v219 = sub_10001A630((uint64_t *)&unk_100844910);
                    v220 = Optional.descriptionOrNil.getter(v219);
                    v222 = v221;

                    v276 = sub_10001A820(v220, v222, (uint64_t *)&baseURL);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, &v277);

                    swift_bridgeObjectRelease(v222);
                    *(_WORD *)(v216 + 12) = 2082;
                    v224 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v223);
                    if (!v225)
                      goto LABEL_165;
                    v226 = v225;
                    v276 = sub_10001A820(v224, v225, (uint64_t *)&baseURL);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, &v277);
                    swift_release_n(v267._baseURL, 2);
                    swift_bridgeObjectRelease(v226);
                    _os_log_impl((void *)&_mh_execute_header, v214, v215, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported propertyKeyPath {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v216, 0x16u);
                    swift_arrayDestroy(v217, 2, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v217, -1, -1);
                    swift_slowDealloc(v216, -1, -1);
                  }
                  else
                  {

                    swift_release_n(v267._baseURL, 2);
                  }

                  (*(void (**)(char *, uint64_t))(v240 + 8))(v234, v241);
                  v121 = v270;
                  return sub_10000882C(v121, &qword_10083D0F0);
                }
              }
              v196 = v236;
              sub_100008868(v268, v236, (uint64_t *)&unk_1008380D0);
              v197 = swift_dynamicCast(v243, v196, v271, v242, 6);
              v198 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v237 + 56);
              if ((v197 & 1) != 0)
              {
                v199 = v243;
                v198(v243, 0, 1, v242);
                v200 = (uint64_t)v199;
                v201 = v238;
                sub_1000A5CA8(v200, v238, (uint64_t *)&unk_100839C70);
                v202 = v201;
                v203 = v235;
                sub_100008868(v202, v235, (uint64_t *)&unk_100839C70);
                v204 = type metadata accessor for URL(0);
                v205 = *(_QWORD *)(v204 - 8);
                v206 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v205 + 48))(v203, 1, v204);
                v207 = 0;
                if (v206 != 1)
                {
                  v208 = v235;
                  URL._bridgeToObjectiveC()(&v267);
                  v207 = v209;
                  (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v208, v204);
                }
                v116 = v273;
                objc_msgSend(v273, "setSourceListIDURL:", v207);

                v178 = (uint64_t *)&unk_100839C70;
                p_baseURL = &v267._clients;
                goto LABEL_133;
              }
              v193 = (uint64_t)v243;
              v198(v243, 1, 1, v242);
              v194 = &qword_10083D100;
            }
            sub_10000882C(v193, v194);
            v108 = v267._baseURL;
            v116 = v273;
            v89 = v270;
            goto LABEL_38;
          }
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v106, v87);
        }
        sub_10000882C(v103, (uint64_t *)&unk_10084C100);
        sub_10000882C((uint64_t)v267._urlString, (uint64_t *)&unk_1008380D0);
        v96 = &qword_10083D0F0;
        clients = v267._clients;
      }
      sub_10000882C((uint64_t)v75, &qword_10083D0F0);
      sub_10000882C((uint64_t)clients, (uint64_t *)&unk_1008380D0);
    }
    v107 = sub_10000882C((uint64_t)v19, v96);
    v108 = v267._baseURL;
    goto LABEL_29;
  }
  v87 = v269;
  if (v81 == 0xD00000000000001ALL && v82 == 0x80000001006F4960
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001006F4960, v81, v82, 0) & 1) != 0)
  {
    *(_QWORD *)&v153 = swift_bridgeObjectRelease(v82).n128_u64[0];
    v154 = objc_msgSend(v273, "publicLinkLastModifiedDate", v153);
    if (v154)
    {
      v155 = v154;
      v70 = v251;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v154);

      v86 = 0;
    }
    else
    {
      v86 = 1;
      v70 = v251;
    }
LABEL_9:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v70, v86, 1, v87);
    goto LABEL_10;
  }
  if (v81 == 0xD000000000000011 && v82 == 0x80000001006F3E10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001006F3E10, v81, v82, 0) & 1) != 0
    || v81 == 0x694C656372756F73 && v82 == 0xEF4C525544497473)
  {
LABEL_68:
    swift_bridgeObjectRelease(v82);
    return sub_10038F04C(v273, (uint64_t)v267._baseURL);
  }
  v160 = _stringCompareWithSmolCheck(_:_:expecting:)(0x694C656372756F73, 0xEF4C525544497473, v81, v82, 0);
  swift_bridgeObjectRelease(v82);
  if ((v160 & 1) != 0)
    return sub_10038F04C(v273, (uint64_t)v267._baseURL);
  if (qword_100837328 != -1)
    swift_once(&qword_100837328, sub_10038CFC0);
  v161 = v241;
  v162 = sub_10001AAA8(v241, (uint64_t)qword_100847700);
  (*(void (**)(char *, uint64_t, uint64_t))(v240 + 16))(v239, v162, v161);
  v163 = v273;
  swift_retain_n(v267._baseURL, 2);
  v164 = v163;
  v165 = Logger.logObject.getter(v164);
  v166 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v165, v166))
  {
    v167 = swift_slowAlloc(22, -1);
    v168 = (NSURL *)swift_slowAlloc(64, -1);
    baseURL = v168;
    *(_DWORD *)v167 = 136446466;
    v169 = objc_msgSend(v164, "remObjectID");
    v276 = (uint64_t)v169;
    v170 = sub_10001A630((uint64_t *)&unk_100844910);
    v171 = Optional.descriptionOrNil.getter(v170);
    v173 = v172;

    v276 = sub_10001A820(v171, v173, (uint64_t *)&baseURL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, &v277);

    swift_bridgeObjectRelease(v173);
    *(_WORD *)(v167 + 12) = 2082;
    v175 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v174);
    if (!v176)
      goto LABEL_165;
    v177 = v176;
    v276 = sub_10001A820(v175, v176, (uint64_t *)&baseURL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v276, &v277);
    swift_release_n(v267._baseURL, 2);
    swift_bridgeObjectRelease(v177);
    _os_log_impl((void *)&_mh_execute_header, v165, v166, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported key path {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v167, 0x16u);
    swift_arrayDestroy(v168, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v168, -1, -1);
    swift_slowDealloc(v167, -1, -1);

  }
  else
  {

    swift_release_n(v267._baseURL, 2);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v240 + 8))(v239, v241);
}

uint64_t sub_1001527B0(NSURL *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v95;
  id v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  char v106;
  uint64_t v107;
  uint64_t v108;
  objc_class *v109;
  objc_class *v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  NSURL *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void **p_clients;
  uint64_t v131;
  char v132;
  void (*v133)(char *, uint64_t, uint64_t, uint64_t);
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  Class isa;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  NSString v149;
  uint64_t v150;
  char v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  Class v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  void (*v166)(char *, uint64_t);
  uint64_t v167;
  char v168;
  void **p_reserved;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  Class v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *clients;
  void *reserved;
  Class v184;
  uint64_t v185;
  char v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  Class v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  Class v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  Class v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  Class v224;
  uint64_t v225;
  Swift::String v226;
  uint64_t v227;
  void *i;
  char v229;
  uint64_t v230;
  char v231;
  void (*v232)(char *, uint64_t, uint64_t, uint64_t);
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  void *v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  objc_class *v246;
  objc_class *v247;
  NSObject *v248;
  os_log_type_t v249;
  uint64_t v250;
  NSURL *v251;
  id v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  Swift::String v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  NSURL *v323;
  NSURL v324;
  uint64_t v325;

  v319 = a2;
  v308 = type metadata accessor for Logger(0);
  v307 = *(_QWORD *)(v308 - 8);
  __chkstk_darwin(v308);
  v306 = (uint64_t)&v262 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v294 = (char *)&v262 - v5;
  v6 = sub_10001A630(&qword_10083D100);
  __chkstk_darwin(v6);
  v291 = (char *)&v262 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v290 = sub_10001A630((uint64_t *)&unk_100839C70);
  v289 = *(_QWORD *)(v290 - 8);
  __chkstk_darwin(v290);
  v292 = (uint64_t)&v262 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v293 = (uint64_t)&v262 - v10;
  v11 = sub_10001A630(&qword_10083D0F0);
  __chkstk_darwin(v11);
  v288 = (char *)&v262 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v285 = (char *)&v262 - v14;
  __chkstk_darwin(v15);
  v296 = (char *)&v262 - v16;
  __chkstk_darwin(v17);
  v302 = (char *)&v262 - v18;
  __chkstk_darwin(v19);
  v309 = (char *)&v262 - v20;
  __chkstk_darwin(v21);
  v315 = (char *)&v262 - v22;
  v316 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v314 = *(_QWORD *)(v316 - 8);
  __chkstk_darwin(v316);
  v286 = (uint64_t)&v262 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v287 = (uint64_t)&v262 - v25;
  __chkstk_darwin(v26);
  v283 = (uint64_t)&v262 - v27;
  __chkstk_darwin(v28);
  v284 = (uint64_t)&v262 - v29;
  __chkstk_darwin(v30);
  v281 = (uint64_t)&v262 - v31;
  __chkstk_darwin(v32);
  v282 = (uint64_t)&v262 - v33;
  __chkstk_darwin(v34);
  v298 = (uint64_t)&v262 - v35;
  __chkstk_darwin(v36);
  v300 = (uint64_t)&v262 - v37;
  __chkstk_darwin(v38);
  v303 = (uint64_t)&v262 - v39;
  __chkstk_darwin(v40);
  v305 = (uint64_t)&v262 - v41;
  __chkstk_darwin(v42);
  v310 = (uint64_t)&v262 - v43;
  __chkstk_darwin(v44);
  v311 = (uint64_t)&v262 - v45;
  v46 = type metadata accessor for UUID(0);
  v317 = *(_QWORD *)(v46 - 8);
  v318 = v46;
  __chkstk_darwin(v46);
  v301 = (char *)&v262 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v48);
  v313 = (uint64_t)&v262 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v322 = sub_10001A630((uint64_t *)&unk_100839C80);
  v50 = *(_QWORD *)(v322 - 8);
  __chkstk_darwin(v322);
  v52 = (char *)&v262 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v279 = (uint64_t)&v262 - v54;
  __chkstk_darwin(v55);
  v278 = (uint64_t)&v262 - v56;
  __chkstk_darwin(v57);
  v280 = (uint64_t)&v262 - v58;
  __chkstk_darwin(v59);
  v277 = (uint64_t)&v262 - v60;
  __chkstk_darwin(v61);
  v276 = (uint64_t)&v262 - v62;
  __chkstk_darwin(v63);
  v295 = (uint64_t)&v262 - v64;
  __chkstk_darwin(v65);
  v297 = (uint64_t)&v262 - v66;
  __chkstk_darwin(v67);
  v299 = (uint64_t)&v262 - v68;
  __chkstk_darwin(v69);
  v304 = (uint64_t)&v262 - v70;
  __chkstk_darwin(v71);
  v312 = (uint64_t)&v262 - v72;
  __chkstk_darwin(v73);
  v75 = (char *)&v262 - v74;
  __chkstk_darwin(v76);
  v78 = (char *)&v262 - v77;
  v79 = sub_10001A630(&qword_10083D130);
  __chkstk_darwin(v79);
  v321 = (uint64_t)&v262 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_10001A630(&qword_10083D0E8);
  __chkstk_darwin(v81);
  v83 = (char *)&v262 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v84);
  v86 = (char *)&v262 - v85;
  __chkstk_darwin(v87);
  v320 = (uint64_t)&v262 - v88;
  v323 = a1;
  v90 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v89);
  if (!v91)
    goto LABEL_124;
  v92 = v90;
  v93 = v91;
  if (v90 == 0x6E6F697461657263 && v91 == 0xEC00000065746144)
    goto LABEL_23;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC00000065746144, v90, v91, 0) & 1) != 0
    || v92 == 0xD000000000000010 && v93 == 0x80000001006AA8F0)
  {
    goto LABEL_23;
  }
  v274 = (unint64_t)&unk_1006AA8F0;
  v275 = 0xD000000000000010;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006AA8F0, v92, v93, 0) & 1) != 0
    || v92 == 0xD000000000000025 && v93 == 0x80000001006F48F0)
  {
    goto LABEL_23;
  }
  v272 = (unint64_t)"sectionIDsOrderingAsData";
  v273 = 0xD000000000000025;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000001006F48F0, v92, v93, 0) & 1) != 0
    || v92 == 0xD00000000000001BLL && v93 == 0x80000001006F4920)
  {
    goto LABEL_23;
  }
  v270 = (unint64_t)"LinkUpdateRequestDate";
  v271 = 0xD00000000000001BLL;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001006F4920, v92, v93, 0) & 1) != 0
    || v92 == 0xD000000000000016 && v93 == 0x80000001006F4940)
  {
    goto LABEL_23;
  }
  v268 = (unint64_t)"publicLinkConfigurationData";
  v269 = 0xD000000000000016;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001006F4940, v92, v93, 0) & 1) != 0
    || v92 == 0xD000000000000018 && v93 == 0x80000001006F3E40)
  {
    goto LABEL_23;
  }
  v266 = (unint64_t)"D";
  v267 = 0xD000000000000018;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001006F3E40, v92, v93, 0) & 1) != 0
    || v92 == 0xD00000000000001ALL && v93 == 0x80000001006F4960)
  {
    goto LABEL_23;
  }
  v264 = (unint64_t)"publicLinkCreationDate";
  v265 = 0xD00000000000001ALL;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001006F4960, v92, v93, 0) & 1) != 0)
    goto LABEL_23;
  v263 = 0xD000000000000011;
  if (v92 == 0xD000000000000011 && v93 == 0x80000001006F3E10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v263, 0x80000001006F3E10, v92, v93, 0) & 1) != 0)
  {
    *(_QWORD *)&v95 = swift_bridgeObjectRelease(v93).n128_u64[0];
    v96 = -[objc_class publicLinkURLUUID](v324.super.isa, "publicLinkURLUUID", v95);
    if (v96)
    {
      v97 = v96;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v96);

      v98 = 0;
    }
    else
    {
      v98 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v317 + 56))(v52, v98, 1, v318);
    v99 = v320;
    sub_1000A5CA8((uint64_t)v52, v320, (uint64_t *)&unk_100839C80);
    v100 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56);
    v101 = v322;
    v100(v99, 0, 1, v322);
    sub_100008868(v319, (uint64_t)v86, (uint64_t *)&unk_100839C80);
    v100((uint64_t)v86, 0, 1, v101);
    v102 = *(int *)(v79 + 48);
    v103 = v321;
    v104 = v321 + v102;
    sub_100008868(v99, v321, &qword_10083D0E8);
    v306 = v104;
    sub_100008868((uint64_t)v86, v104, &qword_10083D0E8);
    v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
    if (v105(v103, 1, v322) == 1)
    {
      sub_10000882C((uint64_t)v86, &qword_10083D0E8);
      if (v105(v306, 1, v322) == 1)
      {
LABEL_33:
        sub_10000882C(v321, &qword_10083D0E8);
        return sub_10000882C(v320, &qword_10083D0E8);
      }
      v48 = (uint64_t)&qword_10083D130;
    }
    else
    {
      sub_100008868(v321, (uint64_t)v83, &qword_10083D0E8);
      if (v105(v306, 1, v322) == 1)
      {
        v48 = (uint64_t)&qword_10083D130;
      }
      else
      {
        sub_1000A5CA8(v306, (uint64_t)v78, (uint64_t *)&unk_100839C80);
        v124 = v313;
        v125 = v313 + *(int *)(v48 + 48);
        sub_100008868((uint64_t)v83, v313, (uint64_t *)&unk_100839C80);
        sub_100008868((uint64_t)v78, v125, (uint64_t *)&unk_100839C80);
        v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v317 + 48);
        if (v126(v124, 1, v318) == 1)
        {
          if (v126(v125, 1, v318) == 1)
          {
            sub_10000882C(v313, (uint64_t *)&unk_100839C80);
            sub_10000882C((uint64_t)v78, (uint64_t *)&unk_100839C80);
            sub_10000882C((uint64_t)v86, &qword_10083D0E8);
            sub_10000882C((uint64_t)v83, (uint64_t *)&unk_100839C80);
            goto LABEL_33;
          }
        }
        else
        {
          sub_100008868(v313, (uint64_t)v75, (uint64_t *)&unk_100839C80);
          if (v126(v125, 1, v318) != 1)
          {
            v163 = v317;
            v162 = v318;
            v164 = v301;
            (*(void (**)(char *, uint64_t, uint64_t))(v317 + 32))(v301, v125, v318);
            v165 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v48 = dispatch thunk of static Equatable.== infix(_:_:)(v75, v164, v162, v165);
            v166 = *(void (**)(char *, uint64_t))(v163 + 8);
            v166(v164, v162);
            v166(v75, v162);
            sub_10000882C(v313, (uint64_t *)&unk_100839C80);
            sub_10000882C((uint64_t)v78, (uint64_t *)&unk_100839C80);
            sub_10000882C((uint64_t)v86, &qword_10083D0E8);
            sub_10000882C((uint64_t)v83, (uint64_t *)&unk_100839C80);
            v127 = sub_10000882C(v321, &qword_10083D0E8);
            if ((v48 & 1) != 0)
              return sub_10000882C(v320, &qword_10083D0E8);
LABEL_53:
            v128 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v127);
            if (!v129)
              goto LABEL_124;
            p_clients = (void **)v128;
            v48 = v129;
            if (v128 == 0x6E6F697461657263 && v129 == 0xEC00000065746144
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC00000065746144, v128, v129, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v48);
              v131 = v312;
              sub_100008868(v319, v312, (uint64_t *)&unk_100839C80);
              v132 = swift_dynamicCast(v315, v131, v322, v316, 6);
              v133 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v314 + 56);
              if ((v132 & 1) != 0)
              {
                v134 = v315;
                v133(v315, 0, 1, v316);
                v135 = (uint64_t)v134;
                v136 = v311;
                sub_1000A5CA8(v135, v311, (uint64_t *)&unk_1008380D0);
                v137 = v136;
                v138 = v310;
                sub_100008868(v137, v310, (uint64_t *)&unk_1008380D0);
                v139 = type metadata accessor for Date(0);
                v140 = *(_QWORD *)(v139 - 8);
                v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139);
                isa = 0;
                if (v141 != 1)
                {
                  v143 = v310;
                  isa = Date._bridgeToObjectiveC()().super.isa;
                  (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v143, v139);
                }
                -[objc_class setCreationDate:](v324.super.isa, "setCreationDate:", isa);

                v144 = (uint64_t *)&unk_1008380D0;
                v145 = v311;
                goto LABEL_64;
              }
              v146 = v315;
            }
            else if (p_clients == (void **)v275 && v48 == (v274 | 0x8000000000000000)
                   || (_stringCompareWithSmolCheck(_:_:expecting:)(v275, v274 | 0x8000000000000000, p_clients, v48, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease(v48);
              v150 = v304;
              sub_100008868(v319, v304, (uint64_t *)&unk_100839C80);
              v151 = swift_dynamicCast(v309, v150, v322, v316, 6);
              v133 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v314 + 56);
              if ((v151 & 1) != 0)
              {
                v152 = v309;
                v133(v309, 0, 1, v316);
                v153 = (uint64_t)v152;
                v154 = v305;
                sub_1000A5CA8(v153, v305, (uint64_t *)&unk_1008380D0);
                v155 = v154;
                v156 = v303;
                sub_100008868(v155, v303, (uint64_t *)&unk_1008380D0);
                v157 = type metadata accessor for Date(0);
                v158 = *(_QWORD *)(v157 - 8);
                v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157);
                v160 = 0;
                if (v159 != 1)
                {
                  v161 = v303;
                  v160 = Date._bridgeToObjectiveC()().super.isa;
                  (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v161, v157);
                }
                -[objc_class setLastModifiedDate:](v324.super.isa, "setLastModifiedDate:", v160);

                v144 = (uint64_t *)&unk_1008380D0;
                v145 = v305;
                goto LABEL_64;
              }
              v146 = v309;
            }
            else
            {
              if (p_clients == (void **)v273 && v48 == (v272 | 0x8000000000000000)
                || (_stringCompareWithSmolCheck(_:_:expecting:)(v273, v272 | 0x8000000000000000, p_clients, v48, 0) & 1) != 0)
              {
                swift_bridgeObjectRelease(v48);
                v167 = v299;
                sub_100008868(v319, v299, (uint64_t *)&unk_100839C80);
                v168 = swift_dynamicCast(v302, v167, v322, v316, 6);
                v133 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v314 + 56);
                p_reserved = (void **)&v325;
                if ((v168 & 1) != 0)
                {
                  v170 = v302;
                  v133(v302, 0, 1, v316);
                  v171 = (uint64_t)v170;
                  v172 = v300;
                  sub_1000A5CA8(v171, v300, (uint64_t *)&unk_1008380D0);
                  v173 = v172;
                  v174 = v298;
                  sub_100008868(v173, v298, (uint64_t *)&unk_1008380D0);
                  v175 = type metadata accessor for Date(0);
                  v176 = *(_QWORD *)(v175 - 8);
                  v177 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175);
                  v178 = 0;
                  if (v177 != 1)
                  {
                    v179 = v298;
                    v178 = Date._bridgeToObjectiveC()().super.isa;
                    (*(void (**)(uint64_t, uint64_t))(v176 + 8))(v179, v175);
                  }
                  -[objc_class setMostRecentPublicLinkUpdateRequestDate:](v324.super.isa, "setMostRecentPublicLinkUpdateRequestDate:", v178);

                  v144 = (uint64_t *)&unk_1008380D0;
                  v145 = v300;
                  goto LABEL_64;
                }
              }
              else
              {
                if (p_clients == (void **)v271 && v48 == (v270 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)(v271, v270 | 0x8000000000000000, p_clients, v48, 0) & 1) != 0)
                {
                  swift_bridgeObjectRelease(v48);
                  v180 = v297;
                  sub_100008868(v319, v297, (uint64_t *)&unk_100839C80);
                  v181 = sub_10001A630(&qword_10083A6E0);
                  if ((swift_dynamicCast(&v324._clients, v180, v322, v181, 6) & 1) != 0)
                  {
                    clients = v324._clients;
                    reserved = v324._reserved;
                    if ((unint64_t)v324._reserved >> 60 == 15)
                    {
                      v184 = 0;
                    }
                    else
                    {
                      sub_1000A70E4((uint64_t)v324._clients, (unint64_t)v324._reserved);
                      v184 = Data._bridgeToObjectiveC()().super.isa;
                      sub_1000A71B4((uint64_t)clients, (unint64_t)reserved);
                    }
                    -[objc_class setPublicLinkConfigurationData:](v324.super.isa, "setPublicLinkConfigurationData:", v184);

                    sub_1000A71B4((uint64_t)clients, (unint64_t)reserved);
                  }
                  goto LABEL_65;
                }
                if (p_clients == (void **)v269 && v48 == (v268 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)(v269, v268 | 0x8000000000000000, p_clients, v48, 0) & 1) != 0)
                {
                  swift_bridgeObjectRelease(v48);
                  v185 = v295;
                  sub_100008868(v319, v295, (uint64_t *)&unk_100839C80);
                  v186 = swift_dynamicCast(v296, v185, v322, v316, 6);
                  v133 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v314 + 56);
                  p_reserved = &v324._reserved;
                  if ((v186 & 1) != 0)
                  {
                    v187 = v296;
                    v133(v296, 0, 1, v316);
                    v188 = (uint64_t)v187;
                    v189 = v282;
                    sub_1000A5CA8(v188, v282, (uint64_t *)&unk_1008380D0);
                    v190 = v189;
                    v191 = v281;
                    sub_100008868(v190, v281, (uint64_t *)&unk_1008380D0);
                    v192 = type metadata accessor for Date(0);
                    v193 = *(_QWORD *)(v192 - 8);
                    v194 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192);
                    v195 = 0;
                    if (v194 != 1)
                    {
                      v196 = v281;
                      v195 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v196, v192);
                    }
                    -[objc_class setPublicLinkCreationDate:](v324.super.isa, "setPublicLinkCreationDate:", v195);

                    v144 = (uint64_t *)&unk_1008380D0;
                    v145 = v282;
                    goto LABEL_64;
                  }
                }
                else if (p_clients == (void **)v267 && v48 == (v266 | 0x8000000000000000)
                       || (_stringCompareWithSmolCheck(_:_:expecting:)(v267, v266 | 0x8000000000000000, p_clients, v48, 0) & 1) != 0)
                {
                  swift_bridgeObjectRelease(v48);
                  v197 = v276;
                  sub_100008868(v319, v276, (uint64_t *)&unk_100839C80);
                  v198 = swift_dynamicCast(v285, v197, v322, v316, 6);
                  v133 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v314 + 56);
                  p_reserved = (void **)&v317;
                  if ((v198 & 1) != 0)
                  {
                    v199 = v285;
                    v133(v285, 0, 1, v316);
                    v200 = (uint64_t)v199;
                    v201 = v284;
                    sub_1000A5CA8(v200, v284, (uint64_t *)&unk_1008380D0);
                    v202 = v201;
                    v203 = v283;
                    sub_100008868(v202, v283, (uint64_t *)&unk_1008380D0);
                    v204 = type metadata accessor for Date(0);
                    v205 = *(_QWORD *)(v204 - 8);
                    v206 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v205 + 48))(v203, 1, v204);
                    v207 = 0;
                    if (v206 != 1)
                    {
                      v208 = v283;
                      v207 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v208, v204);
                    }
                    -[objc_class setPublicLinkExpirationDate:](v324.super.isa, "setPublicLinkExpirationDate:", v207);

                    v144 = (uint64_t *)&unk_1008380D0;
                    v145 = v284;
                    goto LABEL_64;
                  }
                }
                else
                {
                  if ((p_clients != (void **)v265 || v48 != (v264 | 0x8000000000000000))
                    && (_stringCompareWithSmolCheck(_:_:expecting:)(v265, v264 | 0x8000000000000000, p_clients, v48, 0) & 1) == 0)
                  {
                    if ((p_clients != (void **)v263 || v48 != 0x80000001006F3E10)
                      && (_stringCompareWithSmolCheck(_:_:expecting:)(v263, 0x80000001006F3E10, p_clients, v48, 0) & 1) == 0)
                    {
                      goto LABEL_126;
                    }
                    swift_bridgeObjectRelease(v48);
                    v221 = v280;
                    sub_100008868(v319, v280, (uint64_t *)&unk_100839C80);
                    v222 = v221;
                    v223 = v278;
                    sub_100008868(v222, v278, (uint64_t *)&unk_100839C80);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v317 + 48))(v223, 1, v318) == 1)
                    {
                      v224 = 0;
                    }
                    else
                    {
                      v225 = v278;
                      v224 = UUID._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v317 + 8))(v225, v318);
                    }
                    -[objc_class setPublicLinkURLUUID:](v324.super.isa, "setPublicLinkURLUUID:", v224);

                    v144 = (uint64_t *)&unk_100839C80;
                    v145 = v280;
                    goto LABEL_64;
                  }
                  swift_bridgeObjectRelease(v48);
                  v209 = v277;
                  sub_100008868(v319, v277, (uint64_t *)&unk_100839C80);
                  v210 = swift_dynamicCast(v288, v209, v322, v316, 6);
                  v133 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v314 + 56);
                  p_reserved = (void **)&v320;
                  if ((v210 & 1) != 0)
                  {
                    v211 = v288;
                    v133(v288, 0, 1, v316);
                    v212 = (uint64_t)v211;
                    v213 = v287;
                    sub_1000A5CA8(v212, v287, (uint64_t *)&unk_1008380D0);
                    v214 = v213;
                    v215 = v286;
                    sub_100008868(v214, v286, (uint64_t *)&unk_1008380D0);
                    v216 = type metadata accessor for Date(0);
                    v217 = *(_QWORD *)(v216 - 8);
                    v218 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v217 + 48))(v215, 1, v216);
                    v219 = 0;
                    if (v218 != 1)
                    {
                      v220 = v286;
                      v219 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v220, v216);
                    }
                    -[objc_class setPublicLinkLastModifiedDate:](v324.super.isa, "setPublicLinkLastModifiedDate:", v219);

                    v144 = (uint64_t *)&unk_1008380D0;
                    v145 = v287;
                    goto LABEL_64;
                  }
                }
              }
              v146 = (char *)*(p_reserved - 32);
            }
            v133(v146, 1, 1, v316);
            v144 = &qword_10083D0F0;
LABEL_63:
            v145 = (uint64_t)v146;
LABEL_64:
            while (1)
            {
              sub_10000882C(v145, v144);
LABEL_65:
              v48 = (uint64_t)-[objc_class createResolutionTokenMapIfNecessary](v324.super.isa, "createResolutionTokenMapIfNecessary");
              dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v48);
              if (v147)
                break;
LABEL_124:
              v324._clients = 0;
              v324._reserved = (void *)0xE000000000000000;
              p_clients = &v324._clients;
              _StringGuts.grow(_:)(46);
              v226._object = (void *)0x80000001006F8C10;
              v226._countAndFlagsBits = 0xD00000000000002CLL;
              String.append(_:)(v226);
              v324._baseURL = v323;
              v227 = sub_10001A630(&qword_10083FD70);
              for (i = &v324._baseURL; ; i = &v324._urlString)
              {
                _print_unlocked<A, B>(_:_:)(i, &v324._clients, v227, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
                _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v324._clients, v324._reserved, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
                __break(1u);
LABEL_126:
                if (p_clients == (void **)0x694C656372756F73 && v48 == 0xEF4C525544497473)
                  break;
                v229 = _stringCompareWithSmolCheck(_:_:expecting:)(0x694C656372756F73, 0xEF4C525544497473, p_clients, v48, 0);
                swift_bridgeObjectRelease(v48);
                if ((v229 & 1) != 0)
                  goto LABEL_130;
                if (qword_100837328 != -1)
                  swift_once(&qword_100837328, sub_10038CFC0);
                v244 = v308;
                v245 = sub_10001AAA8(v308, (uint64_t)qword_100847700);
                (*(void (**)(char *, uint64_t, uint64_t))(v307 + 16))(v294, v245, v244);
                v246 = v324.super.isa;
                swift_retain_n(v323, 2);
                v247 = v246;
                v248 = Logger.logObject.getter(v247);
                v249 = static os_log_type_t.fault.getter();
                if (!os_log_type_enabled(v248, v249))
                {

                  swift_release_n(v323, 2);
                  goto LABEL_141;
                }
                v250 = swift_slowAlloc(22, -1);
                v251 = (NSURL *)swift_slowAlloc(64, -1);
                v324._baseURL = v251;
                *(_DWORD *)v250 = 136446466;
                v252 = -[objc_class remObjectID](v247, "remObjectID");
                v324._clients = v252;
                v253 = sub_10001A630((uint64_t *)&unk_100844910);
                v254 = Optional.descriptionOrNil.getter(v253);
                v256 = v255;

                v324._clients = (void *)sub_10001A820(v254, v256, (uint64_t *)&v324._baseURL);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324._clients, &v324._reserved);

                swift_bridgeObjectRelease(v256);
                *(_WORD *)(v250 + 12) = 2082;
                v258 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v257);
                if (v259)
                {
                  v260 = v259;
                  v324._clients = (void *)sub_10001A820(v258, v259, (uint64_t *)&v324._baseURL);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324._clients, &v324._reserved);
                  swift_release_n(v323, 2);
                  swift_bridgeObjectRelease(v260);
                  _os_log_impl((void *)&_mh_execute_header, v248, v249, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported propertyKeyPath {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v250, 0x16u);
                  swift_arrayDestroy(v251, 2, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v251, -1, -1);
                  swift_slowDealloc(v250, -1, -1);
LABEL_141:

                  (*(void (**)(char *, uint64_t))(v307 + 8))(v294, v308);
                  return sub_10000882C(v320, &qword_10083D0E8);
                }
LABEL_142:
                v48 = (uint64_t)v323;
                swift_release(v323);
                v324._clients = 0;
                v324._reserved = (void *)0xE000000000000000;
                p_clients = &v324._clients;
                _StringGuts.grow(_:)(46);
                v261._object = (void *)0x80000001006F8C10;
                v261._countAndFlagsBits = 0xD00000000000002CLL;
                String.append(_:)(v261);
                v324._urlString = (NSString *)v48;
                v227 = sub_10001A630(&qword_10083FD70);
              }
              swift_bridgeObjectRelease(0xEF4C525544497473);
LABEL_130:
              v230 = v279;
              sub_100008868(v319, v279, (uint64_t *)&unk_100839C80);
              v231 = swift_dynamicCast(v291, v230, v322, v290, 6);
              v232 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v289 + 56);
              if ((v231 & 1) == 0)
              {
                v146 = v291;
                v232(v291, 1, 1, v290);
                v144 = &qword_10083D100;
                goto LABEL_63;
              }
              v233 = v291;
              v232(v291, 0, 1, v290);
              v234 = (uint64_t)v233;
              v235 = v293;
              sub_1000A5CA8(v234, v293, (uint64_t *)&unk_100839C70);
              v236 = v235;
              v237 = v292;
              sub_100008868(v236, v292, (uint64_t *)&unk_100839C70);
              v238 = type metadata accessor for URL(0);
              v239 = *(_QWORD *)(v238 - 8);
              v240 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v239 + 48))(v237, 1, v238);
              v241 = 0;
              if (v240 != 1)
              {
                v242 = v292;
                URL._bridgeToObjectiveC()(&v324);
                v241 = v243;
                (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v242, v238);
              }
              -[objc_class setSourceListIDURL:](v324.super.isa, "setSourceListIDURL:", v241);

              v144 = (uint64_t *)&unk_100839C70;
              v145 = v293;
            }
            v148 = v147;
            v149 = String._bridgeToObjectiveC()();
            objc_msgSend((id)v48, "updateForKey:", v149, swift_bridgeObjectRelease(v148).n128_f64[0]);

            return sub_10000882C(v320, &qword_10083D0E8);
          }
          (*(void (**)(char *, uint64_t))(v317 + 8))(v75, v318);
        }
        sub_10000882C(v313, (uint64_t *)&unk_10083B370);
        sub_10000882C((uint64_t)v78, (uint64_t *)&unk_100839C80);
        v48 = (uint64_t)&qword_10083D0E8;
      }
      sub_10000882C((uint64_t)v86, &qword_10083D0E8);
      sub_10000882C((uint64_t)v83, (uint64_t *)&unk_100839C80);
    }
    v127 = sub_10000882C(v321, (uint64_t *)v48);
    goto LABEL_53;
  }
  if (v92 == 0x694C656372756F73 && v93 == 0xEF4C525544497473)
  {
LABEL_23:
    swift_bridgeObjectRelease(v93);
    return sub_10038F04C(v324.super.isa, (uint64_t)v323);
  }
  v106 = _stringCompareWithSmolCheck(_:_:expecting:)(0x694C656372756F73, 0xEF4C525544497473, v92, v93, 0);
  swift_bridgeObjectRelease(v93);
  if ((v106 & 1) != 0)
    return sub_10038F04C(v324.super.isa, (uint64_t)v323);
  if (qword_100837328 != -1)
    swift_once(&qword_100837328, sub_10038CFC0);
  v107 = v308;
  v108 = sub_10001AAA8(v308, (uint64_t)qword_100847700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v307 + 16))(v306, v108, v107);
  v109 = v324.super.isa;
  swift_retain_n(v323, 2);
  v110 = v109;
  v111 = Logger.logObject.getter(v110);
  v112 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v111, v112))
  {
    v113 = swift_slowAlloc(22, -1);
    v114 = (NSURL *)swift_slowAlloc(64, -1);
    v324._baseURL = v114;
    *(_DWORD *)v113 = 136446466;
    v115 = -[objc_class remObjectID](v110, "remObjectID");
    v324._clients = v115;
    v116 = sub_10001A630((uint64_t *)&unk_100844910);
    v117 = Optional.descriptionOrNil.getter(v116);
    v119 = v118;

    v324._clients = (void *)sub_10001A820(v117, v119, (uint64_t *)&v324._baseURL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324._clients, &v324._reserved);

    swift_bridgeObjectRelease(v119);
    *(_WORD *)(v113 + 12) = 2082;
    v121 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v120);
    if (!v122)
      goto LABEL_142;
    v123 = v122;
    v324._clients = (void *)sub_10001A820(v121, v122, (uint64_t *)&v324._baseURL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v324._clients, &v324._reserved);
    swift_release_n(v323, 2);
    swift_bridgeObjectRelease(v123);
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported key path {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v113, 0x16u);
    swift_arrayDestroy(v114, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v114, -1, -1);
    swift_slowDealloc(v113, -1, -1);

  }
  else
  {

    swift_release_n(v323, 2);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v307 + 8))(v306, v308);
}

uint64_t sub_10015487C(uint64_t a1, uint64_t a2)
{
  NSURL *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v96;
  char v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  objc_class *v106;
  unsigned int (*v107)(Class, uint64_t, uint64_t);
  NSURL *v108;
  uint64_t v109;
  void *v110;
  id v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char v132;
  void (*v133)(void *, uint64_t, uint64_t, void *);
  void *clients;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  Class isa;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  char v148;
  uint64_t *p_reserved;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  Class v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  char v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  Class v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  Class v181;
  uint64_t v182;
  char v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  Class v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  Class v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  Class v216;
  uint64_t v217;
  uint64_t v218;
  NSString v219;
  Swift::String v220;
  uint64_t v221;
  uint64_t *i;
  uint64_t v223;
  char v224;
  void (*v225)(char *, uint64_t, uint64_t, uint64_t);
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  Class v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  void *v242;
  NSURL *baseURL;
  uint64_t v244;
  void *v245;
  id v246;
  NSObject *v247;
  os_log_type_t v248;
  uint64_t v249;
  uint64_t v250;
  id v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  Swift::String v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  NSURL v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;

  v313 = a2;
  v3 = (NSURL *)type metadata accessor for Logger(0);
  v310._urlString = (NSString *)v3[-1]._reserved;
  v310._baseURL = v3;
  __chkstk_darwin(v3);
  v310.super.isa = (Class)((char *)&v260 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v294 = (char *)&v260 - v6;
  v7 = sub_10001A630(&qword_10083D0E8);
  __chkstk_darwin(v7);
  v291 = (char *)&v260 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v290 = sub_10001A630((uint64_t *)&unk_100839C80);
  v289 = *(_QWORD *)(v290 - 8);
  __chkstk_darwin(v290);
  v292 = (uint64_t)&v260 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v293 = (uint64_t)&v260 - v11;
  v12 = sub_10001A630(&qword_10083D0F0);
  __chkstk_darwin(v12);
  v288 = (char *)&v260 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v285 = (char *)&v260 - v15;
  __chkstk_darwin(v16);
  v282 = (char *)&v260 - v17;
  __chkstk_darwin(v18);
  v299 = (char *)&v260 - v19;
  __chkstk_darwin(v20);
  v304 = (char *)&v260 - v21;
  __chkstk_darwin(v22);
  v310._clients = (char *)&v260 - v23;
  v310._reserved = (void *)sub_10001A630((uint64_t *)&unk_1008380D0);
  v309 = *((_QWORD *)v310._reserved - 1);
  __chkstk_darwin(v310._reserved);
  v286 = (uint64_t)&v260 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v287 = (uint64_t)&v260 - v26;
  __chkstk_darwin(v27);
  v283 = (uint64_t)&v260 - v28;
  __chkstk_darwin(v29);
  v284 = (uint64_t)&v260 - v30;
  __chkstk_darwin(v31);
  v280 = (uint64_t)&v260 - v32;
  __chkstk_darwin(v33);
  v281 = (uint64_t)&v260 - v34;
  __chkstk_darwin(v35);
  v296 = (uint64_t)&v260 - v36;
  __chkstk_darwin(v37);
  v297 = (uint64_t)&v260 - v38;
  __chkstk_darwin(v39);
  v301 = (uint64_t)&v260 - v40;
  __chkstk_darwin(v41);
  v303 = (uint64_t)&v260 - v42;
  __chkstk_darwin(v43);
  v305 = (uint64_t)&v260 - v44;
  __chkstk_darwin(v45);
  v307 = (uint64_t)&v260 - v46;
  v47 = type metadata accessor for URL(0);
  v311 = *(_QWORD *)(v47 - 8);
  v312 = v47;
  __chkstk_darwin(v47);
  v300 = (char *)&v260 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10001A630((uint64_t *)&unk_100844920);
  __chkstk_darwin(v49);
  v308 = (uint64_t)&v260 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v316 = sub_10001A630((uint64_t *)&unk_100839C70);
  v51 = *(_QWORD *)(v316 - 8);
  __chkstk_darwin(v316);
  v53 = (char *)&v260 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v278 = (uint64_t)&v260 - v55;
  __chkstk_darwin(v56);
  v279 = (uint64_t)&v260 - v57;
  __chkstk_darwin(v58);
  v277 = (uint64_t)&v260 - v59;
  __chkstk_darwin(v60);
  v276 = (uint64_t)&v260 - v61;
  __chkstk_darwin(v62);
  v275 = (uint64_t)&v260 - v63;
  __chkstk_darwin(v64);
  v274 = (uint64_t)&v260 - v65;
  __chkstk_darwin(v66);
  v295 = (uint64_t)&v260 - v67;
  __chkstk_darwin(v68);
  v298 = (uint64_t)&v260 - v69;
  __chkstk_darwin(v70);
  v302 = (uint64_t)&v260 - v71;
  __chkstk_darwin(v72);
  v306 = (uint64_t)&v260 - v73;
  __chkstk_darwin(v74);
  v76 = (char *)&v260 - v75;
  __chkstk_darwin(v77);
  v79 = (char *)&v260 - v78;
  v80 = sub_10001A630(&qword_10083D0F8);
  __chkstk_darwin(v80);
  v315 = (uint64_t)&v260 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10001A630(&qword_10083D100);
  __chkstk_darwin(v82);
  v84 = (char *)&v260 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v85);
  v87 = (char *)&v260 - v86;
  __chkstk_darwin(v88);
  v314 = (uint64_t)&v260 - v89;
  v317 = a1;
  v91 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v90);
  if (!v92)
    goto LABEL_116;
  v93 = v91;
  v94 = v92;
  if (v91 == 0x6E6F697461657263 && v92 == 0xEC00000065746144)
    goto LABEL_26;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC00000065746144, v91, v92, 0) & 1) != 0
    || v93 == 0xD000000000000010 && v94 == 0x80000001006AA8F0)
  {
    goto LABEL_26;
  }
  v272 = (unint64_t)&unk_1006AA8F0;
  v273 = 0xD000000000000010;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001006AA8F0, v93, v94, 0) & 1) != 0
    || v93 == 0xD000000000000025 && v94 == 0x80000001006F48F0)
  {
    goto LABEL_26;
  }
  v270 = (unint64_t)"sectionIDsOrderingAsData";
  v271 = 0xD000000000000025;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000001006F48F0, v93, v94, 0) & 1) != 0
    || v93 == 0xD00000000000001BLL && v94 == 0x80000001006F4920)
  {
    goto LABEL_26;
  }
  v268 = (unint64_t)"LinkUpdateRequestDate";
  v269 = 0xD00000000000001BLL;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000001006F4920, v93, v94, 0) & 1) != 0
    || v93 == 0xD000000000000016 && v94 == 0x80000001006F4940)
  {
    goto LABEL_26;
  }
  v266 = (unint64_t)"publicLinkConfigurationData";
  v267 = 0xD000000000000016;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000001006F4940, v93, v94, 0) & 1) != 0
    || v93 == 0xD000000000000018 && v94 == 0x80000001006F3E40)
  {
    goto LABEL_26;
  }
  if ((v264 = (unint64_t)"D",
        v265 = 0xD000000000000018,
        (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000001006F3E40, v93, v94, 0) & 1) != 0)
    || v93 == 0xD00000000000001ALL && v94 == 0x80000001006F4960
    || (v262 = (unint64_t)"publicLinkCreationDate",
        v263 = 0xD00000000000001ALL,
        (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001006F4960, v93, v94, 0) & 1) != 0)
    || (v261 = 0xD000000000000011, v93 == 0xD000000000000011) && v94 == 0x80000001006F3E10
    || (v260 = (unint64_t)"entifier",
        (_stringCompareWithSmolCheck(_:_:expecting:)(v261, 0x80000001006F3E10, v93, v94, 0) & 1) != 0))
  {
LABEL_26:
    swift_bridgeObjectRelease();
    return sub_10038F04C(v318, v317);
  }
  if (v93 == 0x694C656372756F73 && v94 == 0xEF4C525544497473)
  {
    *(_QWORD *)&v96 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_31;
  }
  v97 = _stringCompareWithSmolCheck(_:_:expecting:)(0x694C656372756F73, 0xEF4C525544497473, v93, v94, 0);
  *(_QWORD *)&v96 = swift_bridgeObjectRelease().n128_u64[0];
  if ((v97 & 1) != 0)
  {
LABEL_31:
    v98 = objc_msgSend(v318, "sourceListIDURL", v96);
    if (v98)
    {
      v99 = v98;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v98);

      v100 = 0;
    }
    else
    {
      v100 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v311 + 56))(v53, v100, 1, v312);
    v101 = v314;
    sub_1000A5CA8((uint64_t)v53, v314, (uint64_t *)&unk_100839C70);
    v102 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56);
    v103 = v316;
    v102(v101, 0, 1, v316);
    sub_100008868(v313, (uint64_t)v87, (uint64_t *)&unk_100839C70);
    v102((uint64_t)v87, 0, 1, v103);
    v104 = *(int *)(v80 + 48);
    v105 = v315;
    v106 = (objc_class *)(v315 + v104);
    sub_100008868(v101, v315, &qword_10083D100);
    v310.super.isa = v106;
    sub_100008868((uint64_t)v87, (uint64_t)v106, &qword_10083D100);
    v107 = *(unsigned int (**)(Class, uint64_t, uint64_t))(v51 + 48);
    if (v107((Class)v105, 1, v316) == 1)
    {
      sub_10000882C((uint64_t)v87, &qword_10083D100);
      if (v107(v310.super.isa, 1, v316) == 1)
      {
LABEL_36:
        sub_10000882C(v315, &qword_10083D100);
        return sub_10000882C(v314, &qword_10083D100);
      }
      v49 = (uint64_t)&qword_10083D0F8;
    }
    else
    {
      sub_100008868(v315, (uint64_t)v84, &qword_10083D100);
      if (v107(v310.super.isa, 1, v316) == 1)
      {
        v49 = (uint64_t)&qword_10083D0F8;
      }
      else
      {
        sub_1000A5CA8((uint64_t)v310.super.isa, (uint64_t)v79, (uint64_t *)&unk_100839C70);
        v124 = v308;
        v125 = v308 + *(int *)(v49 + 48);
        sub_100008868((uint64_t)v84, v308, (uint64_t *)&unk_100839C70);
        sub_100008868((uint64_t)v79, v125, (uint64_t *)&unk_100839C70);
        v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v311 + 48);
        if (v126(v124, 1, v312) == 1)
        {
          if (v126(v125, 1, v312) == 1)
          {
            sub_10000882C(v308, (uint64_t *)&unk_100839C70);
            sub_10000882C((uint64_t)v79, (uint64_t *)&unk_100839C70);
            sub_10000882C((uint64_t)v87, &qword_10083D100);
            sub_10000882C((uint64_t)v84, (uint64_t *)&unk_100839C70);
            goto LABEL_36;
          }
        }
        else
        {
          sub_100008868(v308, (uint64_t)v76, (uint64_t *)&unk_100839C70);
          if (v126(v125, 1, v312) != 1)
          {
            v161 = v311;
            v160 = v312;
            v162 = v300;
            (*(void (**)(char *, uint64_t, uint64_t))(v311 + 32))(v300, v125, v312);
            v163 = sub_10009FC50(&qword_100844730, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
            v49 = dispatch thunk of static Equatable.== infix(_:_:)(v76, v162, v160, v163);
            v164 = *(void (**)(char *, uint64_t))(v161 + 8);
            v164(v162, v160);
            v164(v76, v160);
            sub_10000882C(v308, (uint64_t *)&unk_100839C70);
            sub_10000882C((uint64_t)v79, (uint64_t *)&unk_100839C70);
            sub_10000882C((uint64_t)v87, &qword_10083D100);
            sub_10000882C((uint64_t)v84, (uint64_t *)&unk_100839C70);
            v127 = sub_10000882C(v315, &qword_10083D100);
            if ((v49 & 1) != 0)
              return sub_10000882C(v314, &qword_10083D100);
LABEL_55:
            v128 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v127);
            if (!v129)
              goto LABEL_116;
            v130 = (uint64_t *)v128;
            v49 = v129;
            if (v128 == 0x6E6F697461657263 && v129 == 0xEC00000065746144
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461657263, 0xEC00000065746144, v128, v129, 0) & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v131 = v306;
              sub_100008868(v313, v306, (uint64_t *)&unk_100839C70);
              v132 = swift_dynamicCast(v310._clients, v131, v316, v310._reserved, 6);
              v133 = *(void (**)(void *, uint64_t, uint64_t, void *))(v309 + 56);
              if ((v132 & 1) != 0)
              {
                clients = v310._clients;
                v133(v310._clients, 0, 1, v310._reserved);
                v135 = (uint64_t)clients;
                v136 = v307;
                sub_1000A5CA8(v135, v307, (uint64_t *)&unk_1008380D0);
                v137 = v136;
                v138 = v305;
                sub_100008868(v137, v305, (uint64_t *)&unk_1008380D0);
                v139 = type metadata accessor for Date(0);
                v140 = *(_QWORD *)(v139 - 8);
                v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139);
                isa = 0;
                if (v141 != 1)
                {
                  v143 = v305;
                  isa = Date._bridgeToObjectiveC()().super.isa;
                  (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v143, v139);
                }
                objc_msgSend(v318, "setCreationDate:", isa);

                v144 = (uint64_t *)&unk_1008380D0;
                v145 = v307;
                goto LABEL_112;
              }
              v146 = v310._clients;
            }
            else
            {
              if (v130 == (uint64_t *)v273 && v49 == (v272 | 0x8000000000000000)
                || (_stringCompareWithSmolCheck(_:_:expecting:)(v273, v272 | 0x8000000000000000, v130, v49, 0) & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v147 = v302;
                sub_100008868(v313, v302, (uint64_t *)&unk_100839C70);
                v148 = swift_dynamicCast(v304, v147, v316, v310._reserved, 6);
                v133 = *(void (**)(void *, uint64_t, uint64_t, void *))(v309 + 56);
                p_reserved = &v324;
                if ((v148 & 1) != 0)
                {
                  v150 = v304;
                  v133(v304, 0, 1, v310._reserved);
                  v151 = (uint64_t)v150;
                  v152 = v303;
                  sub_1000A5CA8(v151, v303, (uint64_t *)&unk_1008380D0);
                  v153 = v152;
                  v154 = v301;
                  sub_100008868(v153, v301, (uint64_t *)&unk_1008380D0);
                  v155 = type metadata accessor for Date(0);
                  v156 = *(_QWORD *)(v155 - 8);
                  v157 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155);
                  v158 = 0;
                  if (v157 != 1)
                  {
                    v159 = v301;
                    v158 = Date._bridgeToObjectiveC()().super.isa;
                    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v159, v155);
                  }
                  objc_msgSend(v318, "setLastModifiedDate:", v158);

                  v144 = (uint64_t *)&unk_1008380D0;
                  v145 = v303;
                  goto LABEL_112;
                }
              }
              else if (v130 == (uint64_t *)v271 && v49 == (v270 | 0x8000000000000000)
                     || (_stringCompareWithSmolCheck(_:_:expecting:)(v271, v270 | 0x8000000000000000, v130, v49, 0) & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v165 = v298;
                sub_100008868(v313, v298, (uint64_t *)&unk_100839C70);
                v166 = swift_dynamicCast(v299, v165, v316, v310._reserved, 6);
                v133 = *(void (**)(void *, uint64_t, uint64_t, void *))(v309 + 56);
                p_reserved = &v323;
                if ((v166 & 1) != 0)
                {
                  v167 = v299;
                  v133(v299, 0, 1, v310._reserved);
                  v168 = (uint64_t)v167;
                  v169 = v297;
                  sub_1000A5CA8(v168, v297, (uint64_t *)&unk_1008380D0);
                  v170 = v169;
                  v171 = v296;
                  sub_100008868(v170, v296, (uint64_t *)&unk_1008380D0);
                  v172 = type metadata accessor for Date(0);
                  v173 = *(_QWORD *)(v172 - 8);
                  v174 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v173 + 48))(v171, 1, v172);
                  v175 = 0;
                  if (v174 != 1)
                  {
                    v176 = v296;
                    v175 = Date._bridgeToObjectiveC()().super.isa;
                    (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v176, v172);
                  }
                  objc_msgSend(v318, "setMostRecentPublicLinkUpdateRequestDate:", v175);

                  v144 = (uint64_t *)&unk_1008380D0;
                  v145 = v297;
                  goto LABEL_112;
                }
              }
              else
              {
                if (v130 == (uint64_t *)v269 && v49 == (v268 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)(v269, v268 | 0x8000000000000000, v130, v49, 0) & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  v177 = v295;
                  sub_100008868(v313, v295, (uint64_t *)&unk_100839C70);
                  v178 = sub_10001A630(&qword_10083A6E0);
                  if ((swift_dynamicCast(&v321, v177, v316, v178, 6) & 1) != 0)
                  {
                    v179 = v321;
                    v180 = v322;
                    if (v322 >> 60 == 15)
                    {
                      v181 = 0;
                    }
                    else
                    {
                      sub_1000A70E4(v321, v322);
                      v181 = Data._bridgeToObjectiveC()().super.isa;
                      sub_1000A71B4(v179, v180);
                    }
                    objc_msgSend(v318, "setPublicLinkConfigurationData:", v181);

                    sub_1000A71B4(v179, v180);
                  }
                  goto LABEL_113;
                }
                if (v130 == (uint64_t *)v267 && v49 == (v266 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)(v267, v266 | 0x8000000000000000, v130, v49, 0) & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  v182 = v274;
                  sub_100008868(v313, v274, (uint64_t *)&unk_100839C70);
                  v183 = swift_dynamicCast(v282, v182, v316, v310._reserved, 6);
                  v133 = *(void (**)(void *, uint64_t, uint64_t, void *))(v309 + 56);
                  p_reserved = (uint64_t *)&v310._reserved;
                  if ((v183 & 1) != 0)
                  {
                    v184 = v282;
                    v133(v282, 0, 1, v310._reserved);
                    v185 = (uint64_t)v184;
                    v186 = v281;
                    sub_1000A5CA8(v185, v281, (uint64_t *)&unk_1008380D0);
                    v187 = v186;
                    v188 = v280;
                    sub_100008868(v187, v280, (uint64_t *)&unk_1008380D0);
                    v189 = type metadata accessor for Date(0);
                    v190 = *(_QWORD *)(v189 - 8);
                    v191 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v188, 1, v189);
                    v192 = 0;
                    if (v191 != 1)
                    {
                      v193 = v280;
                      v192 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v193, v189);
                    }
                    objc_msgSend(v318, "setPublicLinkCreationDate:", v192);

                    v144 = (uint64_t *)&unk_1008380D0;
                    v145 = v281;
                    goto LABEL_112;
                  }
                }
                else if (v130 == (uint64_t *)v265 && v49 == (v264 | 0x8000000000000000)
                       || (_stringCompareWithSmolCheck(_:_:expecting:)(v265, v264 | 0x8000000000000000, v130, v49, 0) & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  v194 = v275;
                  sub_100008868(v313, v275, (uint64_t *)&unk_100839C70);
                  v195 = swift_dynamicCast(v285, v194, v316, v310._reserved, 6);
                  v133 = *(void (**)(void *, uint64_t, uint64_t, void *))(v309 + 56);
                  p_reserved = &v313;
                  if ((v195 & 1) != 0)
                  {
                    v196 = v285;
                    v133(v285, 0, 1, v310._reserved);
                    v197 = (uint64_t)v196;
                    v198 = v284;
                    sub_1000A5CA8(v197, v284, (uint64_t *)&unk_1008380D0);
                    v199 = v198;
                    v200 = v283;
                    sub_100008868(v199, v283, (uint64_t *)&unk_1008380D0);
                    v201 = type metadata accessor for Date(0);
                    v202 = *(_QWORD *)(v201 - 8);
                    v203 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v202 + 48))(v200, 1, v201);
                    v204 = 0;
                    if (v203 != 1)
                    {
                      v205 = v283;
                      v204 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v205, v201);
                    }
                    objc_msgSend(v318, "setPublicLinkExpirationDate:", v204);

                    v144 = (uint64_t *)&unk_1008380D0;
                    v145 = v284;
                    goto LABEL_112;
                  }
                }
                else
                {
                  if ((v130 != (uint64_t *)v263 || v49 != (v262 | 0x8000000000000000))
                    && (_stringCompareWithSmolCheck(_:_:expecting:)(v263, v262 | 0x8000000000000000, v130, v49, 0) & 1) == 0)
                  {
                    goto LABEL_118;
                  }
                  swift_bridgeObjectRelease();
                  v206 = v276;
                  sub_100008868(v313, v276, (uint64_t *)&unk_100839C70);
                  v207 = swift_dynamicCast(v288, v206, v316, v310._reserved, 6);
                  v133 = *(void (**)(void *, uint64_t, uint64_t, void *))(v309 + 56);
                  p_reserved = &v316;
                  if ((v207 & 1) != 0)
                  {
                    v208 = v288;
                    v133(v288, 0, 1, v310._reserved);
                    v209 = (uint64_t)v208;
                    v210 = v287;
                    sub_1000A5CA8(v209, v287, (uint64_t *)&unk_1008380D0);
                    v211 = v210;
                    v212 = v286;
                    sub_100008868(v211, v286, (uint64_t *)&unk_1008380D0);
                    v213 = type metadata accessor for Date(0);
                    v214 = *(_QWORD *)(v213 - 8);
                    v215 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v214 + 48))(v212, 1, v213);
                    v216 = 0;
                    if (v215 != 1)
                    {
                      v217 = v286;
                      v216 = Date._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v217, v213);
                    }
                    objc_msgSend(v318, "setPublicLinkLastModifiedDate:", v216);

                    v144 = (uint64_t *)&unk_1008380D0;
                    v145 = v287;
                    goto LABEL_112;
                  }
                }
              }
              v146 = (void *)*(p_reserved - 32);
            }
            v133(v146, 1, 1, v310._reserved);
            v144 = &qword_10083D0F0;
LABEL_111:
            v145 = (uint64_t)v146;
LABEL_112:
            while (1)
            {
              sub_10000882C(v145, v144);
LABEL_113:
              v49 = (uint64_t)objc_msgSend(v318, "createResolutionTokenMapIfNecessary");
              dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v49);
              if (v218)
                break;
LABEL_116:
              v321 = 0;
              v322 = 0xE000000000000000;
              v130 = &v321;
              _StringGuts.grow(_:)(46);
              v220._object = (void *)0x80000001006F8C10;
              v220._countAndFlagsBits = 0xD00000000000002CLL;
              String.append(_:)(v220);
              v320 = v317;
              v221 = sub_10001A630(&qword_10083FD70);
              for (i = &v320; ; i = &v319)
              {
                _print_unlocked<A, B>(_:_:)(i, &v321, v221, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
                _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v321, v322, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
                __break(1u);
LABEL_118:
                if (v130 == (uint64_t *)v261 && v49 == (v260 | 0x8000000000000000)
                  || (_stringCompareWithSmolCheck(_:_:expecting:)(v261, v260 | 0x8000000000000000, v130, v49, 0) & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  v223 = v277;
                  sub_100008868(v313, v277, (uint64_t *)&unk_100839C70);
                  v224 = swift_dynamicCast(v291, v223, v316, v290, 6);
                  v225 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v289 + 56);
                  if ((v224 & 1) == 0)
                  {
                    v146 = v291;
                    v225(v291, 1, 1, v290);
                    v144 = &qword_10083D0E8;
                    goto LABEL_111;
                  }
                  v226 = v291;
                  v225(v291, 0, 1, v290);
                  v227 = (uint64_t)v226;
                  v228 = v293;
                  sub_1000A5CA8(v227, v293, (uint64_t *)&unk_100839C80);
                  v229 = v228;
                  v230 = v292;
                  sub_100008868(v229, v292, (uint64_t *)&unk_100839C80);
                  v231 = type metadata accessor for UUID(0);
                  v232 = *(_QWORD *)(v231 - 8);
                  v233 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v232 + 48))(v230, 1, v231);
                  v234 = 0;
                  if (v233 != 1)
                  {
                    v235 = v292;
                    v234 = UUID._bridgeToObjectiveC()().super.isa;
                    (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v235, v231);
                  }
                  objc_msgSend(v318, "setPublicLinkURLUUID:", v234);

                  v144 = (uint64_t *)&unk_100839C80;
                  v145 = v293;
                  goto LABEL_112;
                }
                if (v130 == (uint64_t *)0x694C656372756F73 && v49 == 0xEF4C525544497473)
                  break;
                v236 = _stringCompareWithSmolCheck(_:_:expecting:)(0x694C656372756F73, 0xEF4C525544497473, v130, v49, 0);
                swift_bridgeObjectRelease();
                if ((v236 & 1) != 0)
                  goto LABEL_130;
                if (qword_100837328 != -1)
                  swift_once(&qword_100837328, sub_10038CFC0);
                baseURL = v310._baseURL;
                v244 = sub_10001AAA8((uint64_t)v310._baseURL, (uint64_t)qword_100847700);
                (*((void (**)(char *, uint64_t, NSURL *))v310._urlString + 2))(v294, v244, baseURL);
                v245 = v318;
                swift_retain_n(v317);
                v246 = v245;
                v247 = Logger.logObject.getter(v246);
                v248 = static os_log_type_t.fault.getter();
                if (!os_log_type_enabled(v247, v248))
                {

                  swift_release_n(v317);
                  goto LABEL_140;
                }
                v249 = swift_slowAlloc(22, -1);
                v250 = swift_slowAlloc(64, -1);
                v320 = v250;
                *(_DWORD *)v249 = 136446466;
                v251 = objc_msgSend(v246, "remObjectID");
                v321 = (uint64_t)v251;
                v252 = sub_10001A630((uint64_t *)&unk_100844910);
                v253 = Optional.descriptionOrNil.getter(v252);
                v255 = v254;

                v321 = sub_10001A820(v253, v255, &v320);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, &v322);

                swift_bridgeObjectRelease();
                *(_WORD *)(v249 + 12) = 2082;
                v257 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v256);
                if (v258)
                {
                  v321 = sub_10001A820(v257, v258, &v320);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, &v322);
                  swift_release_n(v317);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v247, v248, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported propertyKeyPath {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v249, 0x16u);
                  swift_arrayDestroy(v250, 2, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v250, -1, -1);
                  swift_slowDealloc(v249, -1, -1);
LABEL_140:

                  (*((void (**)(char *, NSURL *))v310._urlString + 1))(v294, v310._baseURL);
                  return sub_10000882C(v314, &qword_10083D100);
                }
LABEL_141:
                v49 = v317;
                swift_release(v317);
                v321 = 0;
                v322 = 0xE000000000000000;
                v130 = &v321;
                _StringGuts.grow(_:)(46);
                v259._object = (void *)0x80000001006F8C10;
                v259._countAndFlagsBits = 0xD00000000000002CLL;
                String.append(_:)(v259);
                v319 = v49;
                v221 = sub_10001A630(&qword_10083FD70);
              }
              swift_bridgeObjectRelease();
LABEL_130:
              v237 = v279;
              sub_100008868(v313, v279, (uint64_t *)&unk_100839C70);
              v238 = v237;
              v239 = v278;
              sub_100008868(v238, v278, (uint64_t *)&unk_100839C70);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v311 + 48))(v239, 1, v312) == 1)
              {
                v240 = 0;
              }
              else
              {
                v241 = v278;
                URL._bridgeToObjectiveC()(&v310);
                v240 = v242;
                (*(void (**)(uint64_t, uint64_t))(v311 + 8))(v241, v312);
              }
              objc_msgSend(v318, "setSourceListIDURL:", v240);

              v144 = (uint64_t *)&unk_100839C70;
              v145 = v279;
            }
            v219 = String._bridgeToObjectiveC()();
            objc_msgSend((id)v49, "updateForKey:", v219, swift_bridgeObjectRelease().n128_f64[0]);

            return sub_10000882C(v314, &qword_10083D100);
          }
          (*(void (**)(char *, uint64_t))(v311 + 8))(v76, v312);
        }
        sub_10000882C(v308, (uint64_t *)&unk_100844920);
        sub_10000882C((uint64_t)v79, (uint64_t *)&unk_100839C70);
        v49 = (uint64_t)&qword_10083D100;
      }
      sub_10000882C((uint64_t)v87, &qword_10083D100);
      sub_10000882C((uint64_t)v84, (uint64_t *)&unk_100839C70);
    }
    v127 = sub_10000882C(v315, (uint64_t *)v49);
    goto LABEL_55;
  }
  if (qword_100837328 != -1)
    swift_once(&qword_100837328, sub_10038CFC0);
  v108 = v310._baseURL;
  v109 = sub_10001AAA8((uint64_t)v310._baseURL, (uint64_t)qword_100847700);
  (*((void (**)(Class, uint64_t, NSURL *))v310._urlString + 2))(v310.super.isa, v109, v108);
  v110 = v318;
  swift_retain_n(v317);
  v111 = v110;
  v112 = Logger.logObject.getter(v111);
  v113 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v112, v113))
  {
    v114 = swift_slowAlloc(22, -1);
    v115 = swift_slowAlloc(64, -1);
    v320 = v115;
    *(_DWORD *)v114 = 136446466;
    v116 = objc_msgSend(v111, "remObjectID");
    v321 = (uint64_t)v116;
    v117 = sub_10001A630((uint64_t *)&unk_100844910);
    v118 = Optional.descriptionOrNil.getter(v117);
    v120 = v119;

    v321 = sub_10001A820(v118, v120, &v320);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, &v322);

    swift_bridgeObjectRelease();
    *(_WORD *)(v114 + 12) = 2082;
    v122 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v121);
    if (!v123)
      goto LABEL_141;
    v321 = sub_10001A820(v122, v123, &v320);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, &v322);
    swift_release_n(v317);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v112, v113, "REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported key path {objectID: %{public}s, propertyKeyPath: %{public}s}}", (uint8_t *)v114, 0x16u);
    swift_arrayDestroy(v115, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1, -1);
    swift_slowDealloc(v114, -1, -1);

  }
  else
  {

    swift_release_n(v317);
  }
  return (*((uint64_t (**)(Class, NSURL *))v310._urlString + 1))(v310.super.isa, v310._baseURL);
}

void *sub_10015691C(void *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  NSString v25;
  double v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  Class isa;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  uint64_t v47;
  uint64_t v49;
  NSObject *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  NSObject *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  objc_class *v66;
  Class v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t ObjCClassFromMetadata;
  NSString v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  _QWORD *v81;
  _QWORD *v82;
  NSObject *v83;
  uint64_t v84;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = 0;
  v12 = objc_msgSend(a1, "remObjectIDWithError:", &v83, v9);
  v13 = v83;
  if (v12)
  {
    v2 = v12;
    v14 = v83;
    v15 = objc_msgSend(a1, "account");
    if (v15
      && (v16 = v15, v17 = objc_msgSend(v15, "remObjectID"), v16, v17))
    {
      v18 = objc_msgSend(a1, "name");
      if (v18)
      {
        v19 = v18;
        v82 = v1;
        v81 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v20 = v17;
        v22 = v21;

        v80 = objc_allocWithZone((Class)REMTemplateStorage);
        v23 = v20;
        v24 = v2;
        v25 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v26 = swift_bridgeObjectRelease(v22).n128_u64[0];
        v27 = objc_msgSend(v80, "initWithObjectID:accountID:name:", v24, v23, v25, v26);

        v80 = v24;
        v2 = v27;
        v81 = v23;

        v28 = objc_msgSend(a1, "color");
        objc_msgSend(v2, "setColor:", v28);

        v29 = objc_msgSend(a1, "badgeEmblem");
        objc_msgSend(v2, "setBadgeEmblem:", v29);

        objc_msgSend(v2, "setShowingLargeAttachments:", objc_msgSend(a1, "showingLargeAttachments"));
        v30 = objc_msgSend(a1, "mostRecentPublicLinkUpdateRequestDate");
        if (v30)
        {
          v31 = v30;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v30);

          (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v7, v4);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
          {
            isa = 0;
          }
          else
          {
            isa = Date._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
          isa = 0;
        }
        objc_msgSend(v2, "setMostRecentPublicLinkUpdateRequestDate:", isa);

        v58 = REMCDTemplate.publicLink.getter();
        objc_msgSend(v2, "setPublicLink:", v58);

        objc_msgSend(v2, "setIsPersisted:", 1);
        v59 = objc_msgSend(a1, "sortingStyle");
        if (v59)
        {
          v60 = v59;
          v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          v63 = v62;

          v64 = (id)REMSortingStyle.init(stringValue:)(v61, v63);
          if (!v64)
            v64 = REMSortingStyleDefault;
          v65 = v64;
          objc_msgSend(v2, "setSortingStyle:", v64);

        }
        else
        {
          objc_msgSend(v2, "setSortingStyle:", REMSortingStyleDefault);
        }
        objc_msgSend(v2, "setShouldUpdateSectionsOrdering:", 0);
        objc_msgSend(v2, "setUnsavedSectionIDsOrdering:", 0);
        objc_msgSend(v2, "setUnsavedMembershipsOfRemindersInSections:", 0);
        objc_msgSend(v2, "setResolutionTokenMap:", 0);
        v66 = (objc_class *)objc_msgSend(a1, "resolutionTokenMapData");
        v67 = v66;
        if (v66)
        {
          v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v66);
          v70 = v69;

          v67 = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A71C8(v68, v70);
        }
        objc_msgSend(v2, "setResolutionTokenMapData:", v67);

        v71 = objc_msgSend(a1, "parentAccount");
        if (v71)
        {
          v72 = v71;
          v73 = objc_msgSend(v71, "remObjectID");

        }
        else
        {
          v73 = 0;
        }
        objc_msgSend(v2, "setParentAccountID:", v73);

        objc_msgSend(v2, "setMinimumSupportedVersion:", objc_msgSend(a1, "minimumSupportedVersion"));
        objc_msgSend(v2, "setEffectiveMinimumSupportedVersion:", objc_msgSend(a1, "effectiveMinimumSupportedVersion"));

      }
      else
      {
        if (qword_100836DB0 != -1)
          swift_once(&qword_100836DB0, sub_10014C9A0);
        v49 = type metadata accessor for Logger(0);
        sub_10001AAA8(v49, (uint64_t)qword_10083CF18);
        v50 = v2;
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc(12, -1);
          v81 = (_QWORD *)swift_slowAlloc(8, -1);
          v82 = v17;
          *(_DWORD *)v53 = 138543362;
          v83 = v50;
          v54 = v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
          v55 = v81;
          *v81 = v2;

          _os_log_impl((void *)&_mh_execute_header, v51, v52, "REMTemplateStorageCDIngestor: cdTemplate.name is nil {cdTemplate.remObjectID: %{public}@}", v53, 0xCu);
          v56 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v55, 1, v56);
          v57 = v55;
          v17 = v82;
          swift_slowDealloc(v57, -1, -1);
          swift_slowDealloc(v53, -1, -1);
        }
        else
        {

          v51 = v50;
        }

        v74 = (void *)objc_opt_self(REMError);
        v75 = type metadata accessor for REMCDTemplate();
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v75);
        v77 = String._bridgeToObjectiveC()();
        objc_msgSend(v74, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v77);

        swift_willThrow(v78);
      }
    }
    else
    {
      if (qword_100836DB0 != -1)
        swift_once(&qword_100836DB0, sub_10014C9A0);
      v33 = type metadata accessor for Logger(0);
      sub_10001AAA8(v33, (uint64_t)qword_10083CF18);
      v34 = v2;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v82 = (_QWORD *)swift_slowAlloc(8, -1);
        v83 = v34;
        *(_DWORD *)v37 = 138543362;
        v38 = v2;
        v39 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
        v2 = v82;
        *v82 = v38;

        _os_log_impl((void *)&_mh_execute_header, v35, v36, "REMTemplateStorageCDIngestor: cdTemplate.account is nil {cdTemplate.remObjectID: %{public}@}", v37, 0xCu);
        v40 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v2, 1, v40);
        swift_slowDealloc(v2, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {

        v35 = v34;
      }

      v43 = (void *)objc_opt_self(REMError);
      v44 = type metadata accessor for REMCDTemplate();
      v45 = swift_getObjCClassFromMetadata(v44);
      v46 = String._bridgeToObjectiveC()();
      objc_msgSend(v43, "unexpectedNilPropertyWithClass:property:", v45, v46);

      swift_willThrow(v47);
    }
  }
  else
  {
    v41 = v83;
    _convertNSErrorToError(_:)(v13);

    swift_willThrow(v42);
  }
  return v2;
}

id sub_100157260(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = sub_10015691C(a1);
  if (!v1)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "objectID");
    v6 = objc_msgSend(v4, "accountID");
    v7 = objc_msgSend(v4, "name");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v9 = v8;

    v10 = objc_allocWithZone((Class)REMListStorage);
    v11 = String._bridgeToObjectiveC()();
    v2 = objc_msgSend(v10, "initWithObjectID:accountID:name:", v5, v6, v11, swift_bridgeObjectRelease(v9).n128_f64[0]);

    v12 = objc_msgSend(v4, "color");
    objc_msgSend(v2, "setColor:", v12);

    v13 = objc_msgSend(v4, "badgeEmblem");
    objc_msgSend(v2, "setBadgeEmblem:", v13);

    objc_msgSend(v2, "setShowingLargeAttachments:", objc_msgSend(v4, "showingLargeAttachments"));
    v14 = objc_msgSend(v4, "sortingStyle");
    objc_msgSend(v2, "setSortingStyle:", v14);

    v15 = objc_msgSend(v4, "parentAccountID");
    objc_msgSend(v2, "setParentAccountID:", v15);

    objc_msgSend(v2, "setMinimumSupportedVersion:", objc_msgSend(v4, "minimumSupportedVersion"));
    objc_msgSend(v2, "setEffectiveMinimumSupportedVersion:", objc_msgSend(v4, "effectiveMinimumSupportedVersion"));

  }
  return v2;
}

unint64_t sub_10015749C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC278, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1001574E4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC318, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

void sub_10015752C(void *a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  os_log_type_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;

  v2 = objc_msgSend(a1, "remObjectID");
  v3 = objc_msgSend(a1, "unsavedManualOrdering");
  if (v3)
  {
    v4 = v3;
    if (qword_100836DA8 != -1)
      swift_once(&qword_100836DA8, sub_10014C97C);
    v5 = type metadata accessor for Logger(0);
    sub_10001AAA8(v5, (uint64_t)qword_10083CF00);
    v6 = v2;
    v7 = v4;
    v8 = v6;
    v9 = v7;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v36 = v11;
      v12 = swift_slowAlloc(22, -1);
      v13 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138543618;
      v38 = (uint64_t)v8;
      v14 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      *v13 = v8;

      *(_WORD *)(v12 + 12) = 2048;
      v15 = objc_msgSend(v9, "topLevelElementIDs");
      v16 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

      if ((unint64_t)v17 >> 62)
      {
        if (v17 < 0)
          v35 = v17;
        else
          v35 = v17 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v17);
        v18 = _CocoaArrayWrapper.endIndex.getter(v35);

        swift_bridgeObjectRelease();
      }
      else
      {
        v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);

      }
      swift_bridgeObjectRelease();
      v38 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

      _os_log_impl((void *)&_mh_execute_header, v10, v36, "REMTemplateStorageCDIngestor: ingesting manual ordering {templateObjectID: %{public}@, top-level elements count: %ld}", (uint8_t *)v12, 0x16u);
      v19 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v13, 1, v19);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

    }
    v27 = objc_msgSend(a1, "accountID");
    v28 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v29 = type metadata accessor for REMManualOrderingCDIngestor();
    v30 = swift_allocObject(v29, 32, 7);
    *(_QWORD *)(v30 + 16) = v27;
    *(_QWORD *)(v30 + 24) = v28;
    v31 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v32 = swift_allocObject(v31, 40, 7);
    *(_OWORD *)(v32 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v32 + 32) = v9;
    v38 = v32;
    specialized Array._endMutation()(v32);
    v33 = v38;
    v34 = v9;
    sub_1005D3458(v33, v30);
    swift_release(v30);
    swift_bridgeObjectRelease();

  }
  else
  {
    if (qword_100836DA8 != -1)
      swift_once(&qword_100836DA8, sub_10014C97C);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_10083CF00);
    v37 = v2;
    v21 = Logger.logObject.getter(v37);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 138543362;
      v38 = (uint64_t)v37;
      v25 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      *v24 = v37;

      v26 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v24, 1, v26);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100157A30(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  id v41;
  Class isa;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void *v46;
  Swift::String v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  NSString v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char *v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;

  v68 = a3;
  v72 = a2;
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v66 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v67 - 8);
  *(_QWORD *)&v7 = __chkstk_darwin(v67).n128_u64[0];
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, "entityName", v7);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = objc_msgSend((id)objc_opt_self(REMList), "cdEntityName");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  if (v15 == v11 && v17 == v13)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    v24 = a1;
    v25 = sub_1005CCB64(v24);
    if (v3)
      return;
    v26 = v25;
    v27 = sub_10001A630(&qword_10083D118);
    v28 = swift_allocObject(v27, 40, 7);
    *(_OWORD *)(v28 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v28 + 32) = v26;
    v70 = v28;
    specialized Array._endMutation()(v28);
    v29 = v70;
    v30 = v26;
    v37 = (uint64_t)sub_1005CEADC(v29, 0, 1, 0, 0);
    swift_bridgeObjectRelease();
    if ((unint64_t)v37 >> 62)
    {
      if (v37 < 0)
        v62 = v37;
      else
        v62 = v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v37);
      v63 = _CocoaArrayWrapper.endIndex.getter(v62);
      swift_bridgeObjectRelease();
      if (v63)
      {
LABEL_17:
        if ((v37 & 0xC000000000000001) != 0)
        {
          v40 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v37);
          v39 = v68;
          v38 = v69;
        }
        else
        {
          v39 = v68;
          v38 = v69;
          if (!*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_42;
          }
          v40 = (char *)*(id *)(v37 + 32);
        }
        v41 = objc_msgSend(v39, "uuid", swift_bridgeObjectRelease().n128_f64[0]);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

        isa = UUID._bridgeToObjectiveC()().super.isa;
        v43 = v67;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v67);
        objc_msgSend(v40, "setMostRecentTargetTemplateIdentifierByCurrentUser:", isa);

        if (objc_msgSend(v40, "sharingStatus") > 1)
        {
LABEL_31:

LABEL_38:
          return;
        }
        v44 = objc_msgSend(v39, "uuid");
        v45 = (uint64_t)v66;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v45, 0, 1, v43);
        sub_10039DAE0(v45);
        v9 = v40;
LABEL_30:
        sub_10000882C(v45, (uint64_t *)&unk_100839C80);
        objc_msgSend(v40, "updateChangeCount");
        v40 = v9;
        goto LABEL_31;
      }
    }
    else if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    v64 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v24);
    swift_willThrow(v64);
    goto LABEL_38;
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v11, v13, 0);
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    goto LABEL_10;
  v20 = objc_msgSend((id)objc_opt_self(REMSmartList), "cdEntityName");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  if (v21 == v11 && v23 == v13)
  {
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v11, v13, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
      v46 = (void *)objc_opt_self(REMError);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(160);
      v47._object = (void *)0x80000001006FA470;
      v47._countAndFlagsBits = 0xD00000000000009DLL;
      String.append(_:)(v47);
      v48 = objc_msgSend(a1, "description");
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v51 = v50;

      v52._countAndFlagsBits = v49;
      v52._object = v51;
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v53._countAndFlagsBits = 125;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      v54 = String._bridgeToObjectiveC()();
      objc_msgSend(v46, "invalidParameterErrorWithDescription:", v54, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v55);
      return;
    }
  }
  v30 = a1;
  v32 = sub_1005CEA58(v30);
  if (!v3)
  {
    v33 = v32;
    v34 = sub_10001A630(&qword_10083D110);
    v35 = swift_allocObject(v34, 40, 7);
    *(_OWORD *)(v35 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v35 + 32) = v33;
    v70 = v35;
    specialized Array._endMutation()(v35);
    v36 = v70;
    v9 = v33;
    v37 = (uint64_t)sub_1005CF5B0(v36, 0, 1, 0, 0);
    swift_bridgeObjectRelease();
    if (!((unint64_t)v37 >> 62))
    {
      v56 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_25:
      v45 = (uint64_t)v66;
      v58 = v68;
      v57 = v69;
      if (!v56)
      {
        swift_bridgeObjectRelease();
        v61 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v30);
        swift_willThrow(v61);

        return;
      }
      if ((v37 & 0xC000000000000001) != 0)
      {
        v59 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v37);
      }
      else
      {
        if (!*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v59 = (char *)*(id *)(v37 + 32);
      }
      v40 = v59;
      v60 = objc_msgSend(v58, "uuid", swift_bridgeObjectRelease().n128_f64[0]);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v60);

      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v45, 0, 1, v67);
      sub_10039DAE0(v45);
      v30 = v40;
      goto LABEL_30;
    }
LABEL_42:
    if (v37 < 0)
      v65 = v37;
    else
      v65 = v37 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v37);
    v56 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
}

void sub_100158108(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  id v30;
  _BYTE *v31;
  void *v32;
  Swift::String v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  char v40;
  double v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  NSString v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  id v65;
  Class isa;
  id v67;
  id v68;
  _BYTE *v69;
  uint64_t v70;
  void (*v71)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v72;
  void (*v73)(_BYTE *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v74)(_BYTE *, uint64_t, uint64_t);
  Class v75;
  id v76;
  id v77;
  _BYTE *v78;
  _BYTE *v79;
  _BYTE *v80;
  Class v81;
  unint64_t v82;
  uint64_t v83;
  Class v84;
  void *v85;
  Swift::String v86;
  id v87;
  id v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  NSString v94;
  uint64_t v95;
  _BYTE v96[4];
  unsigned int v97;
  id v98;
  _BYTE *v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  _BYTE *v106;
  id v107;
  id v108;
  void *v109;
  unint64_t v110;
  uint64_t v111;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v96[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = &v96[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v15 = &v96[-v14];
  v16 = type metadata accessor for Date(0);
  v103 = *(_QWORD *)(v16 - 8);
  v104 = v16;
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = &v96[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = objc_msgSend(a1, "storeControllerManagedObjectContext", v17);
  if (!v20)
  {
    v109 = 0;
    v110 = 0xE000000000000000;
    _StringGuts.grow(_:)(127);
    v33._object = (void *)0x80000001006FA340;
    v33._countAndFlagsBits = 0xD00000000000007CLL;
    String.append(_:)(v33);
    v34 = objc_msgSend(a1, "remObjectID");
    if (v34)
    {
      v35 = v34;
      v36 = objc_msgSend(v34, "description");

      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

    }
    else
    {
      v39 = (void *)0xE300000000000000;
      v37 = 7104878;
    }
    v49 = (void *)objc_opt_self(REMError);
    v50._countAndFlagsBits = v37;
    v50._object = v39;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._countAndFlagsBits = 125;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    v52 = String._bridgeToObjectiveC()();
    objc_msgSend(v49, "invalidParameterErrorWithDescription:", v52, swift_bridgeObjectRelease().n128_f64[0]);

    swift_willThrow(v53);
    return;
  }
  v105 = a1;
  v106 = v15;
  v98 = a2;
  v99 = v12;
  v101 = v9;
  v102 = v7;
  v100 = v6;
  v108 = v20;
  v107 = objc_msgSend(a3, "sourceListID");
  v21 = objc_msgSend(v107, "entityName");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v25 = objc_msgSend((id)objc_opt_self(REMList), "cdEntityName");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  if (v22 == v26 && v24 == v28)
  {
    v29 = 3;
LABEL_5:
    v97 = v29;
    v30 = v108;
    v32 = v105;
    v31 = v106;
    swift_bridgeObjectRelease_n(v24, 2);
    goto LABEL_17;
  }
  v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v28, 0);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v41 = swift_bridgeObjectRelease().n128_u64[0];
  if ((v40 & 1) == 0)
  {
    v42 = objc_msgSend(v107, "entityName", v41);
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v24 = v44;

    v45 = objc_msgSend((id)objc_opt_self(REMSmartList), "cdEntityName");
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    if (v43 != v46 || v24 != v48)
    {
      v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v24, v46, v48, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = v108;
      v32 = v105;
      v31 = v106;
      if ((v54 & 1) == 0)
      {
        v85 = (void *)objc_opt_self(REMError);
        v109 = 0;
        v110 = 0xE000000000000000;
        _StringGuts.grow(_:)(172);
        v86._countAndFlagsBits = 0xD0000000000000A9;
        v86._object = (void *)0x80000001006FA3C0;
        String.append(_:)(v86);
        v87 = v107;
        v88 = objc_msgSend(v107, "description");
        v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
        v91 = v90;

        v92._countAndFlagsBits = v89;
        v92._object = v91;
        String.append(_:)(v92);
        swift_bridgeObjectRelease();
        v93._countAndFlagsBits = 125;
        v93._object = (void *)0xE100000000000000;
        String.append(_:)(v93);
        v94 = String._bridgeToObjectiveC()();
        objc_msgSend(v85, "invalidParameterErrorWithDescription:", v94, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v95);
        return;
      }
      v97 = 4;
      goto LABEL_17;
    }
    v29 = 4;
    goto LABEL_5;
  }
  v97 = 3;
  v30 = v108;
  v32 = v105;
  v31 = v106;
LABEL_17:
  v55 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  v56 = JSONEncoder.init()();
  v57 = (void *)REMTemplateConfiguration.codable.getter();
  v109 = v57;
  v58 = type metadata accessor for REMTemplateConfiguration_Codable(0);
  v59 = sub_10009FC50(&qword_10083D108, (uint64_t (*)(uint64_t))&type metadata accessor for REMTemplateConfiguration_Codable, (uint64_t)&protocol conformance descriptor for REMTemplateConfiguration_Codable);
  v60 = v111;
  v61 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v109, v58, v59);
  v63 = v62;
  swift_release(v56);
  if (v60)
  {

  }
  else
  {
    v106 = v63;
    v111 = v61;

    v64 = type metadata accessor for REMCDTemplateOperationQueueItem();
    v65 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v64)), "initWithContext:", v30);
    objc_msgSend(v65, "setAccount:", v32);
    objc_msgSend(v65, "setOperationTypeRawValue:", v97);
    Date.init()(objc_msgSend(v65, "setPriorityRawValue:", 10));
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v103 + 8))(v19, v104);
    objc_msgSend(v65, "setCreationDate:", isa);

    v67 = v98;
    v68 = objc_msgSend(v67, "uuid");
    v69 = v101;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v68);

    v70 = v102;
    v71 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v102 + 32);
    v72 = v100;
    v71(v31, v69, v100);
    v73 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v70 + 56);
    v73(v31, 0, 1, v72);
    v74 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48);
    v75 = 0;
    if (v74(v31, 1, v72) != 1)
    {
      v75 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(_BYTE *, uint64_t))(v102 + 8))(v31, v72);
    }
    objc_msgSend(v65, "setTemplateIdentifier:", v75);

    v76 = v107;
    v77 = objc_msgSend(v76, "uuid");
    v78 = v101;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v77);

    v79 = v99;
    v71(v99, v78, v72);
    v80 = v79;
    v73(v79, 0, 1, v72);
    if (v74(v79, 1, v72) == 1)
    {
      v81 = 0;
    }
    else
    {
      v81 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(_BYTE *, uint64_t))(v102 + 8))(v80, v72);
    }
    v82 = (unint64_t)v106;
    objc_msgSend(v65, "setListIdentifier:", v81);

    v83 = v111;
    v84 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v65, "setConfigurationData:", v84);

    sub_1000A71C8(v83, v82);
  }
}

uint64_t **sub_1001588FC(id a1, char a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  unint64_t v18;

  if (!a2)
  {
    v10 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v5 = (_QWORD *)swift_allocObject(v10, 40, 7);
    *((_OWORD *)v5 + 1) = xmmword_1006A7330;
    v11 = objc_msgSend(a1, "accountID");
    v5[4] = v11;
    specialized Array._endMutation()(v11);
    return (uint64_t **)v5;
  }
  if (a2 == 1)
  {
    v3 = objc_msgSend(a1, "parentAccountID");
    v4 = v3;
    v5 = _swiftEmptyArrayStorage;
    if (v3)
    {
      v6 = v3;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      v7 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v7 >= v8 >> 1)
      {
        v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1);
        v7 = v18;
      }
      v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
      specialized Array._endMutation()(v9);
      v5 = _swiftEmptyArrayStorage;
    }

    return (uint64_t **)v5;
  }
  v13 = objc_msgSend(a1, "sectionIDsToUndelete");
  v14 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v15 = sub_10011A5DC();
  v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v13, v14, v15);

  v17 = sub_1001E9108(v16);
  swift_bridgeObjectRelease();
  return v17;
}

void sub_100158A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;

  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  swift_storeEnumTagMultiPayload(v8, v6, 7);
  sub_10000A3AC();
  v12 = v11;
  sub_10001C744((uint64_t)v8, _s10PredicatesOMa_1);
  v13 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v14, "setEntity:", v15);

  objc_msgSend(v14, "setAffectedStores:", 0);
  objc_msgSend(v14, "setPredicate:", v12);

  v16 = NSManagedObjectContext.fetch<A>(_:)(v14, v13);
  if (v1)
  {

    return;
  }
  v17 = v16;
  v25 = (unint64_t)v16 >> 62;
  v26 = 0;
  v28 = v9;
  v27 = v14;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v22 = v16;
    else
      v22 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v18 = _CocoaArrayWrapper.endIndex.getter(v22);
    if (!v18)
      goto LABEL_17;
  }
  else
  {
    v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v16);
    if (!v18)
      goto LABEL_17;
  }
  if (v18 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v18; ++i)
  {
    if ((v17 & 0xC000000000000001) != 0)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v17);
    else
      v20 = *(id *)(v17 + 8 * i + 32);
    v21 = v20;
    objc_msgSend(v20, "setMostRecentTargetTemplateIdentifierByCurrentUser:", 0);
    if (objc_msgSend(v21, "sharingStatus") <= 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v28);
      sub_10039DAE0((uint64_t)v5);
      sub_10000882C((uint64_t)v5, (uint64_t *)&unk_100839C80);
      objc_msgSend(v21, "updateChangeCount");
    }

  }
LABEL_17:
  swift_bridgeObjectRelease();
  if (v25)
  {
    if (v17 < 0)
      v23 = v17;
    else
      v23 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    _CocoaArrayWrapper.endIndex.getter(v23);

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  swift_bridgeObjectRelease();
}

void sub_100158DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  id v25;

  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  swift_storeEnumTagMultiPayload(v8, v6, 6);
  sub_1000069D8();
  v12 = v11;
  sub_10001C744((uint64_t)v8, _s10PredicatesOMa_3);
  v13 = sub_1000151B0(0, (unint64_t *)&unk_100840000, off_1007D6720);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v14, "setEntity:", v15);

  objc_msgSend(v14, "setAffectedStores:", 0);
  objc_msgSend(v14, "setPredicate:", v12);

  v16 = NSManagedObjectContext.fetch<A>(_:)(v14, v13);
  if (v1)
  {

    return;
  }
  v17 = v16;
  v24[0] = (unint64_t)v16 >> 62;
  v24[1] = 0;
  v25 = v14;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v22 = v16;
    else
      v22 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v18 = _CocoaArrayWrapper.endIndex.getter(v22);
    if (!v18)
      goto LABEL_15;
  }
  else
  {
    v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v16);
    if (!v18)
      goto LABEL_15;
  }
  if (v18 < 1)
  {
    __break(1u);
    return;
  }
  v19 = 0;
  do
  {
    if ((v17 & 0xC000000000000001) != 0)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
    else
      v20 = *(id *)(v17 + 8 * v19 + 32);
    v21 = v20;
    ++v19;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v9);
    sub_10039DAE0((uint64_t)v5);
    sub_10000882C((uint64_t)v5, (uint64_t *)&unk_100839C80);
    objc_msgSend(v21, "updateChangeCount");

  }
  while (v18 != v19);
LABEL_15:
  swift_bridgeObjectRelease();
  if (v24[0])
  {
    if (v17 < 0)
      v23 = v17;
    else
      v23 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    _CocoaArrayWrapper.endIndex.getter(v23);

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  swift_bridgeObjectRelease();
}

void sub_1001590EC(id a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t inited;
  id v11;
  NSString v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  double v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  NSObject *v70;
  id v71;
  NSString v72;
  int64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  NSString v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  id v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  double v92;
  void *v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  id v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  uint64_t v103;
  uint64_t ObjCClassFromMetadata;
  void *v105;
  NSString v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  os_log_type_t v111;
  os_log_t v112;
  NSObject *v113;
  int64_t v114;
  void *v115;
  os_log_type_t type[8];
  os_log_type_t typec;
  os_log_type_t typea[8];
  void *typeb;
  uint64_t log;
  os_log_t loga;
  NSObject *v124;
  id v125;
  NSObject *v126;
  char v127[40];
  uint64_t v128;
  _QWORD v129[6];
  id v130;

  v5 = (unint64_t)a1;
  if (a3)
  {
    if (a3 == 1)
    {
      v6 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary");
      v7 = objc_msgSend((id)v5, "resolutionTokenMap");
      if (v7)
      {
        v8 = v7;
        v9 = sub_10001A630(&qword_10083D0E0);
        inited = swift_initStackObject(v9, v127);
        *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
        *(_BYTE *)(inited + 32) = 1;
        v11 = sub_100405200(v8, inited);
        swift_setDeallocating(inited);
        sub_100402C60(1);
        v12 = String._bridgeToObjectiveC()();
        LODWORD(inited) = -[NSObject mergeWithMap:forKey:](v6, "mergeWithMap:forKey:", v11, v12, swift_bridgeObjectRelease().n128_f64[0]);

        if ((_DWORD)inited)
        {
          v13 = objc_msgSend((id)v5, "parentAccountID");
          v14 = v13;
          if (v13)
          {
            v15 = v13;
            sub_1003F817C(1, v15, a4);
            if (v4)
            {

              return;
            }
            v79 = v16;

          }
          else
          {
            v79 = 0;
          }
          loga = v14;
          if (qword_100836DA8 != -1)
            swift_once(&qword_100836DA8, sub_10014C97C);
          v80 = type metadata accessor for Logger(0);
          sub_10001AAA8(v80, (uint64_t)qword_10083CF00);
          v81 = v79;
          v82 = a2;
          v83 = v81;
          v115 = v79;
          v84 = v82;
          v85 = Logger.logObject.getter(v84);
          v86 = static os_log_type_t.info.getter(v85);
          if (os_log_type_enabled(v85, v86))
          {
            v111 = v86;
            v113 = v85;
            v108 = v83;
            *(_QWORD *)typea = v11;
            v126 = v6;
            v87 = swift_slowAlloc(22, -1);
            v110 = swift_slowAlloc(64, -1);
            v130 = (id)v110;
            *(_DWORD *)v87 = 136446466;
            v88 = objc_msgSend(v84, "remObjectID");
            v128 = (uint64_t)v88;
            v109 = sub_10001A630((uint64_t *)&unk_100844910);
            v89 = Optional.descriptionOrNil.getter(v109);
            v91 = v90;

            v128 = sub_10001A820(v89, v91, (uint64_t *)&v130);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);

            *(_QWORD *)&v92 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v87 + 12) = 2082;
            if (v115)
            {
              v93 = v108;
              v94 = objc_msgSend(v108, "remObjectID", v92);
            }
            else
            {
              v94 = 0;
              v93 = v108;
            }
            v128 = (uint64_t)v94;
            v95 = Optional.descriptionOrNil.getter(v109);
            v97 = v96;

            v128 = sub_10001A820(v95, v97, (uint64_t *)&v130);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
            v83 = v93;

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v113, v111, "Updating cdTemplate.parentAccount {cdTemplate: %{public}s, parentAccount: %{public}s}", (uint8_t *)v87, 0x16u);
            swift_arrayDestroy(v110, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v110, -1, -1);
            swift_slowDealloc(v87, -1, -1);

            v6 = v126;
            v11 = *(id *)typea;
          }
          else
          {

          }
          objc_msgSend(v84, "setParentAccount:", v83);
          v98 = objc_msgSend(v84, "parentAccount");

          if (v98)
          {

          }
          else
          {
            typeb = v11;
            v99 = objc_msgSend(v84, "storeControllerManagedObjectContext");
            if (v99)
            {
              v100 = v99;
              v101 = objc_msgSend((id)v5, "objectID");
              sub_10014FF94(v101);
              if (v4)
              {

              }
              else
              {

              }
            }
            else
            {
              v102 = (void *)objc_opt_self(REMError);
              v103 = type metadata accessor for REMCDTemplate();
              ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v103);
              v105 = v83;
              v106 = String._bridgeToObjectiveC()();
              objc_msgSend(v102, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v106);

              swift_willThrow(v107);
            }
          }
        }
        else
        {

        }
      }
      else
      {
        if (qword_100836DA8 != -1)
LABEL_77:
          swift_once(&qword_100836DA8, sub_10014C97C);
        v29 = type metadata accessor for Logger(0);
        sub_10001AAA8(v29, (uint64_t)qword_10083CF00);
        v30 = (id)v5;
        v31 = Logger.logObject.getter(v30);
        v32 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = swift_slowAlloc(22, -1);
          v124 = v6;
          v34 = (_QWORD *)swift_slowAlloc(8, -1);
          v35 = swift_slowAlloc(32, -1);
          v130 = (id)v35;
          *(_DWORD *)v33 = 138543618;
          v36 = objc_msgSend(v30, "objectID");
          v128 = (uint64_t)v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
          *v34 = v36;

          *(_WORD *)(v33 + 12) = 2082;
          v128 = sub_10001A820(0x6341746E65726170, 0xEF4449746E756F63, (uint64_t *)&v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "REMTemplateStorageCDIngestor: establishRelationship(onStorage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v33, 0x16u);
          v37 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v34, 1, v37);
          v38 = v34;
          v6 = v124;
          swift_slowDealloc(v38, -1, -1);
          swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1, -1);
          swift_slowDealloc(v33, -1, -1);

        }
        else
        {

        }
        v74 = (void *)objc_opt_self(REMError);
        v75 = sub_1000151B0(0, &qword_10083D0D8, REMTemplateStorage_ptr);
        v76 = swift_getObjCClassFromMetadata(v75);
        v77 = String._bridgeToObjectiveC()();
        objc_msgSend(v74, "unexpectedNilPropertyWithClass:property:", v76, v77);

        swift_willThrow(v78);
      }
    }
    else
    {
      v19 = objc_msgSend(a1, "sectionIDsToUndelete");
      v6 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v20 = sub_10011A5DC();
      v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v19, v6, v20);

      v23 = v21;
      v112 = v6;
      v24 = v4;
      if ((v21 & 0xC000000000000001) != 0)
      {
        if (v21 < 0)
          v25 = v21;
        else
          v25 = v21 & 0xFFFFFFFFFFFFFF8;
        v26 = __CocoaSet.makeIterator()(v25);
        v22 = Set.Iterator.init(_cocoa:)(v129, v26, v6, v20);
        v23 = v129[0];
        *(_QWORD *)type = v129[1];
        v27 = v129[2];
        v28 = v129[3];
        v5 = v129[4];
      }
      else
      {
        v28 = 0;
        v58 = -1 << *(_BYTE *)(v21 + 32);
        *(_QWORD *)type = v21 + 56;
        v27 = ~v58;
        v59 = -v58;
        if (v59 < 64)
          v60 = ~(-1 << v59);
        else
          v60 = -1;
        v5 = v60 & *(_QWORD *)(v21 + 56);
      }
      v114 = (unint64_t)(v27 + 64) >> 6;
      log = v23;
      if ((v23 & 0x8000000000000000) == 0)
        goto LABEL_30;
LABEL_27:
      v61 = __CocoaSet.Iterator.next()(v22);
      v62 = v24;
      if (v61)
      {
        v63 = v61;
        v128 = v61;
        swift_unknownObjectRetain(v61);
        swift_dynamicCast(&v130, &v128, (char *)&type metadata for Swift.AnyObject + 8, v112, 7);
        v64 = v130;
        swift_unknownObjectRelease(v63);
        v65 = v28;
        v66 = v5;
        if (!v64)
        {
LABEL_51:
          v23 = log;
          goto LABEL_58;
        }
        while (1)
        {
          sub_1003F89E0(2, v64, a4);
          if (v62)
          {
            sub_1000C6560(log);

            return;
          }
          v6 = v70;
          v24 = 0;
          -[NSObject setTemplate:](v70, "setTemplate:", a2);
          v71 = -[NSObject createResolutionTokenMapIfNecessary](v6, "createResolutionTokenMapIfNecessary");
          sub_100402F98(1);
          v72 = String._bridgeToObjectiveC()();
          objc_msgSend(v71, "updateForKey:", v72, swift_bridgeObjectRelease().n128_f64[0]);

          v28 = v65;
          v5 = v66;
          v23 = log;
          if (log < 0)
            goto LABEL_27;
LABEL_30:
          v62 = v24;
          if (v5)
          {
            v66 = (v5 - 1) & v5;
            v67 = __clz(__rbit64(v5)) | (v28 << 6);
            v65 = v28;
          }
          else
          {
            v65 = v28 + 1;
            if (__OFADD__(v28, 1))
            {
              __break(1u);
              goto LABEL_77;
            }
            if (v65 >= v114)
              break;
            v68 = *(_QWORD *)(*(_QWORD *)type + 8 * v65);
            if (!v68)
            {
              v69 = v28 + 2;
              if (v28 + 2 >= v114)
                break;
              v68 = *(_QWORD *)(*(_QWORD *)type + 8 * v69);
              if (v68)
                goto LABEL_39;
              v69 = v28 + 3;
              if (v28 + 3 >= v114)
                break;
              v68 = *(_QWORD *)(*(_QWORD *)type + 8 * v69);
              if (v68)
              {
LABEL_39:
                v65 = v69;
              }
              else
              {
                v65 = v28 + 4;
                if (v28 + 4 >= v114)
                  break;
                v68 = *(_QWORD *)(*(_QWORD *)type + 8 * v65);
                if (!v68)
                {
                  v73 = v28 + 5;
                  while (v114 != v73)
                  {
                    v68 = *(_QWORD *)(*(_QWORD *)type + 8 * v73++);
                    if (v68)
                    {
                      v65 = v73 - 1;
                      goto LABEL_40;
                    }
                  }
                  break;
                }
              }
            }
LABEL_40:
            v66 = (v68 - 1) & v68;
            v67 = __clz(__rbit64(v68)) + (v65 << 6);
          }
          v64 = *(id *)(*(_QWORD *)(v23 + 48) + 8 * v67);
          if (!v64)
            goto LABEL_51;
        }
      }
LABEL_58:
      sub_1000C6560(v23);
    }
  }
  else
  {
    v17 = objc_msgSend(a1, "accountID");
    sub_1003F817C(0, v17, a4);
    if (v4)
    {

    }
    else
    {
      v39 = v18;
      if (qword_100836DA8 != -1)
        swift_once(&qword_100836DA8, sub_10014C97C);
      v40 = type metadata accessor for Logger(0);
      sub_10001AAA8(v40, (uint64_t)qword_10083CF00);
      v41 = a2;
      v42 = v39;
      v43 = v41;
      v44 = v42;
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.info.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = swift_slowAlloc(22, -1);
        v125 = (id)swift_slowAlloc(64, -1);
        v130 = v125;
        *(_DWORD *)v47 = 136446466;
        v48 = objc_msgSend(v43, "remObjectID");
        v49 = sub_10001A630((uint64_t *)&unk_100844910);
        typec = v46;
        v50 = Optional.descriptionOrNil.getter(v49);
        v52 = v51;

        v128 = sub_10001A820(v50, v52, (uint64_t *)&v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);

        *(_QWORD *)&v53 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v47 + 12) = 2082;
        v54 = objc_msgSend(v44, "remObjectID", v53);
        v128 = (uint64_t)v54;
        v55 = Optional.descriptionOrNil.getter(v49);
        v57 = v56;

        v128 = sub_10001A820(v55, v57, (uint64_t *)&v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, typec, "Updating cdTemplate.account {cdTemplate: %{public}s, account: %{public}s}", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy(v125, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v125, -1, -1);
        swift_slowDealloc(v47, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v43, "setAccount:", v44);

    }
  }
}

void sub_100159EE4(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;

  v5 = type metadata accessor for REMJSONDeserializationError(0);
  if (objc_msgSend(a2, "shouldUpdateSectionsOrdering", __chkstk_darwin(v5).n128_f64[0]))
  {
    v6 = objc_msgSend(a1, "storeControllerManagedObjectContext");
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(a2, "objectID");
      if (qword_1008372C8 != -1)
        swift_once(&qword_1008372C8, sub_100374614);
      v9 = sub_100374DD8((uint64_t)v8, 0, (uint64_t)v7, (Class)qword_100871E78, 0, 0);
      if (v2)
      {

      }
      else
      {
        v24 = v7;
        v25 = v9;
        v22 = a1;
        v23 = v8;
        v10 = objc_msgSend(a1, "sectionIDsOrderingAsData");
        if (v10)
        {
          v11 = v10;
          v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
          static REMJSONRepresentable.fromJSONData(_:)(&v26, v12, v14);
          sub_1000A71C8(v12, v14);
          v21 = v26;
          v15 = type metadata accessor for REMCDTemplateSection();
          v16 = REMOrderedIdentifierMap.reorder<A>(objects:)(v25, v15);

          swift_bridgeObjectRelease();
          v17 = v16;
        }
        else
        {
          v17 = v25;
        }
        sub_1001E015C(v17);
        swift_bridgeObjectRelease();
        v18 = objc_allocWithZone((Class)NSMutableOrderedSet);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v20 = objc_msgSend(v18, "initWithArray:", isa, swift_bridgeObjectRelease().n128_f64[0]);

        objc_msgSend(v22, "setSections:", v20);
      }
    }
  }
}

const char *sub_10015A6B4()
{
  return "lastModifiedDate";
}

uint64_t sub_10015A6C0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015070C(a1, (SEL *)&selRef_lastModifiedDate, a2);
}

void sub_10015A6DC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100150798(a1, a2, a3, a4, (SEL *)&selRef_setLastModifiedDate_);
}

const char *sub_10015A6F8()
{
  return "sourceListIDURL";
}

const char *sub_10015A70C()
{
  return "creationDate";
}

uint64_t sub_10015A718@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015070C(a1, (SEL *)&selRef_creationDate, a2);
}

void sub_10015A734(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100150798(a1, a2, a3, a4, (SEL *)&selRef_setCreationDate_);
}

ValueMetadata *type metadata accessor for REMTemplateStorageCDIngestor.RelationshipOrderingValueKey()
{
  return &type metadata for REMTemplateStorageCDIngestor.RelationshipOrderingValueKey;
}

uint64_t _s7remindd28REMTemplateStorageCDIngestorC28RelationshipOrderingValueKeyOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10015A7A4 + 4 * byte_1006AA86C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10015A7C4 + 4 * byte_1006AA871[v4]))();
}

_BYTE *sub_10015A7A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10015A7C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10015A7CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10015A7D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10015A7DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10015A7E4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateStorageCDIngestor.OrderableRelationshipKey()
{
  return &type metadata for REMTemplateStorageCDIngestor.OrderableRelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMTemplateStorageCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10015A84C + 4 * byte_1006AA87B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10015A880 + 4 * byte_1006AA876[v4]))();
}

uint64_t sub_10015A880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015A890);
  return result;
}

uint64_t sub_10015A89C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015A8A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10015A8A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A8B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMTemplateStorageCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMTemplateStorageCDIngestor.ValueKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for REMTemplateStorageCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_10015A9A8 + 4 * byte_1006AA885[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_10015A9DC + 4 * byte_1006AA880[v4]))();
}

uint64_t sub_10015A9DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A9E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015A9ECLL);
  return result;
}

uint64_t sub_10015A9F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015AA00);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_10015AA04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015AA0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMTemplateStorageCDIngestor.ValueKey()
{
  return &type metadata for REMTemplateStorageCDIngestor.ValueKey;
}

uint64_t sub_10015AA28()
{
  return sub_1000BAEEC(&qword_10083D138, &qword_10083D140);
}

unint64_t sub_10015AA50()
{
  unint64_t result;

  result = qword_10083D148;
  if (!qword_10083D148)
  {
    result = swift_getWitnessTable(&unk_1006AAAC4, &type metadata for REMTemplateStorageCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10083D148);
  }
  return result;
}

uint64_t sub_10015AA94()
{
  return sub_1000BAEEC(&qword_10083D150, &qword_10083D158);
}

unint64_t sub_10015AABC()
{
  unint64_t result;

  result = qword_10083D160;
  if (!qword_10083D160)
  {
    result = swift_getWitnessTable(&unk_1006AAB9C, &type metadata for REMTemplateStorageCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10083D160);
  }
  return result;
}

uint64_t sub_10015AB00()
{
  return sub_1000BAEEC(&qword_10083D168, &qword_10083D170);
}

unint64_t sub_10015AB28()
{
  unint64_t result;

  result = qword_10083D178;
  if (!qword_10083D178)
  {
    result = swift_getWitnessTable(&unk_1006AAC74, &type metadata for REMTemplateStorageCDIngestor.OrderableRelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10083D178);
  }
  return result;
}

uint64_t sub_10015AB6C()
{
  return sub_1000BAEEC(&qword_10083D180, &qword_10083D188);
}

unint64_t sub_10015AB94()
{
  unint64_t result;

  result = qword_10083D190;
  if (!qword_10083D190)
  {
    result = swift_getWitnessTable(&unk_1006AAD4C, &type metadata for REMTemplateStorageCDIngestor.RelationshipOrderingValueKey);
    atomic_store(result, (unint64_t *)&qword_10083D190);
  }
  return result;
}

_QWORD *sub_10015ABD8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  unsigned int v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  v4 = swift_allocObject(&unk_1007E6EC0, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_24;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = a2;
  if (v5)
  {
    while (1)
    {
      v25 = v4;
      v7 = 0;
      v26 = a2;
      v27 = v5;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
LABEL_9:
        v9 = v8;
        v4 = v7 + 1;
        if (__OFADD__(v7, 1))
          goto LABEL_23;
        v10 = objc_msgSend(v8, "account");
        if (v10)
        {
          v11 = v10;
          v12 = objc_msgSend(v10, "accountTypeHost");
          v13 = objc_msgSend(v12, "isCloudKit");

          if (v13)
          {
            if (!a2)
            {

LABEL_18:
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
              v20 = _swiftEmptyArrayStorage[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
              v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v9);
              specialized ContiguousArray._endMutation()(v21);
              v5 = v27;
              goto LABEL_5;
            }
            v14 = a2;
            v15 = objc_msgSend(v11, "remObjectID");
            if (!v15)
            {

              goto LABEL_5;
            }
            v16 = v15;
            sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
            v17 = v14;
            a2 = v26;
            v18 = static NSObject.== infix(_:_:)(v17);

            if ((v18 & 1) != 0)
              goto LABEL_18;

            v5 = v27;
          }
          else
          {

          }
        }
        else
        {

        }
LABEL_5:
        ++v7;
        if (v4 == v5)
        {
          v4 = v25;
          goto LABEL_28;
        }
      }
      if (v7 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      if (a1 < 0)
        v22 = a1;
      else
        v22 = a1 & 0xFFFFFFFFFFFFFF8;
      v23 = a2;
      v5 = _CocoaArrayWrapper.endIndex.getter(v22);
      if (!v5)
        goto LABEL_28;
    }
    v8 = *(id *)(a1 + 8 * v7 + 32);
    goto LABEL_9;
  }
LABEL_28:

  swift_release(v4);
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void *sub_10015AE6C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  unsigned int v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;

  v4 = swift_allocObject(&unk_1007E6E98, 24, 7);
  v26 = a2;
  *(_QWORD *)(v4 + 16) = a2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_24;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = a2;
  swift_bridgeObjectRetain(a1);
  while (v5)
  {
    v23 = v4;
    v7 = a1 & 0xC000000000000001;
    v4 = 4;
    v24 = a1 & 0xC000000000000001;
    v25 = a1;
    while (1)
    {
      v9 = v7 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      v10 = v9;
      v11 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v12 = objc_msgSend(v9, "account");
      if (v12)
      {
        v8 = v12;
        v13 = objc_msgSend(v12, "accountTypeHost");
        v14 = objc_msgSend(v13, "isCloudKit");

        if (v14)
        {
          if (!v26)
          {
            swift_bridgeObjectRelease(a1);

            goto LABEL_22;
          }
          v15 = v26;
          v16 = objc_msgSend(v8, "remObjectID");
          if (v16)
          {
            v17 = v16;
            sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
            v18 = v15;
            v19 = static NSObject.== infix(_:_:)(v18);

            if ((v19 & 1) != 0)
            {
              swift_bridgeObjectRelease(v25);
              goto LABEL_22;
            }
            v8 = v10;
            v7 = v24;
            a1 = v25;
            goto LABEL_5;
          }

        }
        else
        {
          v15 = v10;
        }

      }
      else
      {
        v8 = v10;
      }
LABEL_5:

      ++v4;
      if (v11 == v5)
      {
        swift_bridgeObjectRelease(a1);
        v10 = 0;
LABEL_22:
        v4 = v23;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_24:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    v21 = v26;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v20);
  }
  swift_bridgeObjectRelease(a1);
  v10 = 0;
LABEL_29:

  swift_release(v4);
  return v10;
}

uint64_t sub_10015B0D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083D198);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083D198);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10015B164(void *a1)
{
  return sub_10015B188(a1, 0);
}

uint64_t sub_10015B188(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  NSArray v20;
  Class isa;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v6 = _s10PredicatesOMa_1(0);
  *(_QWORD *)&v7 = __chkstk_darwin(v6).n128_u64[0];
  v9 = (uint64_t *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = objc_msgSend(v2, "accountObjectID", v7);
  swift_storeEnumTagMultiPayload(v9, v6, a2);
  v10 = objc_msgSend(v2, "accountObjectID");
  v11 = objc_msgSend(a1, "persistentStoreOfAccountWithAccountID:", v10);

  if (v11)
  {
    v12 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v13 = swift_allocObject(v12, 40, 7);
    *(_OWORD *)(v13 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v13 + 32) = v11;
    v30 = v13;
    specialized Array._endMutation()(v13);
    v14 = v30;
  }
  else
  {
    v14 = 0;
  }
  sub_10000A3AC();
  v16 = v15;
  v17 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v18 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(v17), "entity");
  objc_msgSend(v18, "setEntity:", v19);

  if (v14)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    v20.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v20.super.isa = 0;
  }
  objc_msgSend(v18, "setAffectedStores:", v20.super.isa);

  objc_msgSend(v18, "setPredicate:", v16);
  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v18, "setSortDescriptors:", isa);

  v22 = (uint64_t)a1;
  v23 = NSManagedObjectContext.fetch<A>(_:)(v18, v17);
  if (v3)
  {

    sub_1000EC49C((uint64_t)v9);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v24 = v23;
    v30 = v23;
    v25 = sub_10001A630(&qword_10083FF50);
    v26 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v27 = Sequence.elements<A>(ofType:)(v17, v25, v17, v26);
    swift_bridgeObjectRelease(v24);

    swift_bridgeObjectRelease(v14);
    v22 = sub_10015E568(v27);
    sub_1000EC49C((uint64_t)v9);
    swift_bridgeObjectRelease(v27);
  }
  return v22;
}

uint64_t sub_10015B4C0(void *a1)
{
  return sub_10015B188(a1, 2);
}

uint64_t sub_10015B4E4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v4 = _s10PredicatesOMa_1(0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = objc_msgSend(v1, "groupObjectID", v5);
  v7[8] = 1;
  swift_storeEnumTagMultiPayload(v7, v4, 3);
  sub_10000A3AC();
  v9 = v8;
  v10 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "setSortDescriptors:", isa);

  v14 = a1;
  v15 = NSManagedObjectContext.fetch<A>(_:)(v11, v10);
  if (v2)
  {

    sub_1000EC49C((uint64_t)v7);
  }
  else
  {
    v16 = v15;
    v21[1] = v15;
    v17 = sub_10001A630(&qword_10083FF50);
    v18 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v19 = Sequence.elements<A>(ofType:)(v10, v17, v10, v18);
    swift_bridgeObjectRelease(v16);

    v14 = sub_10015E568(v19);
    sub_1000EC49C((uint64_t)v7);
    swift_bridgeObjectRelease(v19);
  }
  return v14;
}

uint64_t sub_10015B754(uint64_t a1)
{
  return sub_10015B4E4(a1);
}

uint64_t sub_10015B774(uint64_t a1)
{
  return sub_10015BB94(a1, 4);
}

uint64_t sub_10015B78C(uint64_t a1)
{
  return sub_10015BB94(a1, 4);
}

uint64_t sub_10015B7B0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10015B888(a1, a2, a3, (void *)2);
}

void *sub_10015B7C8(void *a1)
{
  void **v1;
  uint64_t v2;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v1;
  v5 = objc_msgSend(v4, "accountObjectID");
  sub_10015E1F0(a1, v5, (char)objc_msgSend(v4, "debug_useInMemoryPreferredDefaultListStorage"), 0);
  v7 = v6;

  if (!v2)
  {
    a1 = (void *)sub_10015E568(v7);
    swift_bridgeObjectRelease(v7);
  }
  return a1;
}

uint64_t sub_10015B870(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10015B888(a1, a2, a3, (void *)1);
}

uint64_t sub_10015B888(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = v5;
  sub_10015E1F0(a1, a4, (char)objc_msgSend(*v4, "debug_useInMemoryPreferredDefaultListStorage"), 0);
  if (!v5)
  {
    v8 = v7;
    v6 = sub_10015E568(v7);
    swift_bridgeObjectRelease(v8);
  }
  return v6;
}

uint64_t sub_10015B90C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v4 = _s10PredicatesOMa_1(0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (_QWORD *)((char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = objc_msgSend(v1, "accountObjectID", v5);
  swift_storeEnumTagMultiPayload(v7, v4, 8);
  sub_10000A3AC();
  v9 = v8;
  v10 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v11, "setEntity:", v12);

  objc_msgSend(v11, "setAffectedStores:", 0);
  objc_msgSend(v11, "setPredicate:", v9);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "setSortDescriptors:", isa);

  v14 = a1;
  v15 = NSManagedObjectContext.fetch<A>(_:)(v11, v10);
  if (v2)
  {

    sub_1000EC49C((uint64_t)v7);
  }
  else
  {
    v16 = v15;
    v21[1] = v15;
    v17 = sub_10001A630(&qword_10083FF50);
    v18 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v19 = Sequence.elements<A>(ofType:)(v10, v17, v10, v18);
    swift_bridgeObjectRelease(v16);

    v14 = sub_10015E568(v19);
    sub_1000EC49C((uint64_t)v7);
    swift_bridgeObjectRelease(v19);
  }
  return v14;
}

uint64_t sub_10015BB74(uint64_t a1)
{
  return sub_10015B90C(a1);
}

uint64_t sub_10015BB94(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];

  v6 = _s10PredicatesOMa_1(0);
  *(_QWORD *)&v7 = __chkstk_darwin(v6).n128_u64[0];
  v9 = (_QWORD *)((char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = objc_msgSend(v2, "objectIDs", v7);
  v11 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  *v9 = v12;
  swift_storeEnumTagMultiPayload(v9, v6, a2);
  sub_10000A3AC();
  v14 = v13;
  v15 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "entity");
  objc_msgSend(v16, "setEntity:", v17);

  objc_msgSend(v16, "setAffectedStores:", 0);
  objc_msgSend(v16, "setPredicate:", v14);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setSortDescriptors:", isa);

  v19 = a1;
  v20 = NSManagedObjectContext.fetch<A>(_:)(v16, v15);
  if (v3)
  {

    sub_1000EC49C((uint64_t)v9);
  }
  else
  {
    v21 = v20;
    v26[1] = v20;
    v22 = sub_10001A630(&qword_10083FF50);
    v23 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v24 = Sequence.elements<A>(ofType:)(v15, v22, v15, v23);
    swift_bridgeObjectRelease(v21);

    v19 = sub_10015E568(v24);
    sub_1000EC49C((uint64_t)v9);
    swift_bridgeObjectRelease(v24);
  }
  return v19;
}

uint64_t sub_10015BE30(uint64_t a1)
{
  return sub_10015BB94(a1, 10);
}

uint64_t sub_10015BE54(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v4 = _s10PredicatesOMa_1(0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (_QWORD *)((char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = objc_msgSend(v1, "accountObjectID", v5);
  v9 = objc_msgSend(v1, "externalIdentifiers");
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String);

  *v7 = v8;
  v7[1] = v10;
  swift_storeEnumTagMultiPayload(v7, v4, 9);
  sub_10000A3AC();
  v12 = v11;
  v13 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v14, "setEntity:", v15);

  objc_msgSend(v14, "setAffectedStores:", 0);
  objc_msgSend(v14, "setPredicate:", v12);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "setSortDescriptors:", isa);

  v17 = a1;
  v18 = NSManagedObjectContext.fetch<A>(_:)(v14, v13);
  if (v2)
  {

    sub_1000EC49C((uint64_t)v7);
  }
  else
  {
    v19 = v18;
    v24[1] = v18;
    v20 = sub_10001A630(&qword_10083FF50);
    v21 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v22 = Sequence.elements<A>(ofType:)(v13, v20, v13, v21);
    swift_bridgeObjectRelease(v19);

    v17 = sub_10015E568(v22);
    sub_1000EC49C((uint64_t)v7);
    swift_bridgeObjectRelease(v22);
  }
  return v17;
}

uint64_t sub_10015C0F0(uint64_t a1)
{
  return sub_10015BE54(a1);
}

uint64_t sub_10015C110(uint64_t a1)
{
  return sub_10015BB94(a1, 11);
}

uint64_t sub_10015C134(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];

  v4 = _s10PredicatesOMa_1(0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (_QWORD *)((char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = objc_msgSend(v1, "externalIdentifier", v5);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = objc_msgSend(v1, "accountObjectID");
  *v7 = v9;
  v7[1] = v11;
  v7[2] = (uint64_t)v12;
  swift_storeEnumTagMultiPayload(v7, v4, 12);
  sub_10000A3AC();
  v14 = v13;
  v15 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v17 = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "entity");
  objc_msgSend(v16, "setEntity:", v17);

  objc_msgSend(v16, "setAffectedStores:", 0);
  objc_msgSend(v16, "setPredicate:", v14);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setSortDescriptors:", isa);

  v19 = a1;
  v20 = NSManagedObjectContext.fetch<A>(_:)(v16, v15);
  if (v2)
  {

    sub_1000EC49C((uint64_t)v7);
  }
  else
  {
    v21 = v20;
    v26[1] = v20;
    v22 = sub_10001A630(&qword_10083FF50);
    v23 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v24 = Sequence.elements<A>(ofType:)(v15, v22, v15, v23);
    swift_bridgeObjectRelease(v21);

    v19 = sub_10015E568(v24);
    sub_1000EC49C((uint64_t)v7);
    swift_bridgeObjectRelease(v24);
  }
  return v19;
}

uint64_t sub_10015C3D0(uint64_t a1)
{
  return sub_10015C134(a1);
}

uint64_t sub_10015C3F0(uint64_t a1)
{
  return sub_10015E8F4(a1);
}

void sub_10015C404(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  NSString v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  Class isa;
  Class v30;
  Class v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v1;
  v5 = objc_msgSend(v3, "templateObjectID");
  v6 = sub_1002A6E28(v5, a1, 0, 0);

  if (!v2)
  {
    v7 = objc_msgSend(v6, "account");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
      objc_msgSend(v9, "templatePublicLinkTTL");

      v19 = sub_100157260(v6);
      v20 = sub_100259474(v8);
      v21 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v22 = swift_allocObject(v21, 40, 7);
      *(_OWORD *)(v22 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v22 + 32) = v20;
      v34 = v22;
      specialized Array._endMutation()(v22);
      v32 = v34;
      v23 = swift_allocObject(v21, 40, 7);
      *(_OWORD *)(v23 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v23 + 32) = v19;
      v35 = v23;
      specialized Array._endMutation()(v23);
      v24 = swift_allocObject(v21, 40, 7);
      *(_OWORD *)(v24 + 16) = xmmword_1006A7330;
      v33 = v20;
      v25 = v19;
      v26 = objc_msgSend(v3, "templateObjectID");
      *(_QWORD *)(v24 + 32) = v26;
      specialized Array._endMutation()(v26);
      v27 = v24;
      v28 = objc_allocWithZone((Class)REMListsDataViewInvocationResult);
      sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v32);
      sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
      v30 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v35);
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v31 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v28, "initWithAccountStorages:listStorages:objectIDs:", isa, v30, v31, swift_bridgeObjectRelease(v27).n128_f64[0]);

    }
    else
    {
      v10 = (void *)objc_opt_self(REMError);
      _StringGuts.grow(_:)(36);
      v11 = objc_msgSend(v6, "description", swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v15._countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v14);
      v16._countAndFlagsBits = 125;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17 = String._bridgeToObjectiveC()();
      objc_msgSend(v10, "internalErrorWithDebugDescription:", v17, swift_bridgeObjectRelease(0x80000001006FA600).n128_f64[0]);

      swift_willThrow(v18);
    }
  }
}

void sub_10015C7D0(uint64_t a1)
{
  sub_10015C404(a1);
}

uint64_t sub_10015C7F0()
{
  id v0;
  uint64_t v1;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v1 = type metadata accessor for REMDaemonUserDefaultsPreferredListStorageAdapter();
  result = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(result + 16) = v0;
  qword_100871C60 = result;
  return result;
}

uint64_t type metadata accessor for REMDaemonUserDefaultsPreferredListStorageAdapter()
{
  return objc_opt_self(_TtC7remindd48REMDaemonUserDefaultsPreferredListStorageAdapter);
}

uint64_t sub_10015C868@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), "preferredDefaultListObjectIDUrl");
  if (v3)
  {
    v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t sub_10015C8F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSURL *v9;
  void *v10;
  void *v11;
  uint64_t v13;

  v3 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(*(_QWORD *)v1 + 16);
  sub_10015CF8C(a1, (uint64_t)v5);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  }
  objc_msgSend(v6, "setPreferredDefaultListObjectIDUrl:", v10);

  return sub_10015CFD4(a1);
}

id sub_10015C9E0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), "preferredDefaultListID");
}

void sub_10015CA08(void *a1)
{
  uint64_t v1;

  objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), "setPreferredDefaultListID:", a1);

}

uint64_t sub_10015CA40()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  v0 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MockInMemoryPreferredDefaultListStorage(0);
  v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v5 = v4 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListObjectIDUrl;
  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListID) = 0;
  v13 = _swiftEmptyArrayStorage;
  v7 = sub_10015EB64();
  v8 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v9 = sub_1000C4C0C((unint64_t *)&qword_100838130, (uint64_t *)&unk_10083DBB0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v13, v8, v9, v0, v7);
  v10 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  result = UnfairLock.init(options:)(v2);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_lock) = result;
  qword_100871C68 = v4;
  return result;
}

uint64_t sub_10015CB84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListObjectIDUrl;
  swift_beginAccess(a1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListObjectIDUrl, v5, 33, 0);
  sub_10015D068(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_10015CBDC()
{
  uint64_t v0;

  sub_10015CFD4(v0 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListObjectIDUrl);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_lock));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10015CC2C()
{
  return type metadata accessor for MockInMemoryPreferredDefaultListStorage(0);
}

uint64_t type metadata accessor for MockInMemoryPreferredDefaultListStorage(uint64_t a1)
{
  uint64_t result;

  result = qword_10083D2C0;
  if (!qword_10083D2C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MockInMemoryPreferredDefaultListStorage);
  return result;
}

void sub_10015CC70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10015CCF4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_10015CCF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10083D2D0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10083D2D0);
  }
}

uint64_t sub_10015CD48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v5 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_lock);
  v2 = type metadata accessor for UnfairLock(0);
  swift_retain();
  v3 = sub_10001A630((uint64_t *)&unk_100839C70);
  Lock.sync<A>(_:)(sub_10015D0B0, v1, v2, v3, &protocol witness table for UnfairLock);
  return swift_release(v5);
}

uint64_t sub_10015CDD8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v3 = *v1;
  v7 = *(_QWORD *)(*v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_lock);
  v6[2] = v3;
  v6[3] = a1;
  v4 = type metadata accessor for UnfairLock(0);
  swift_retain();
  Lock.sync<A>(_:)(sub_10015D060, v6, v4, &type metadata for () + 1, &protocol witness table for UnfairLock);
  swift_release(v7);
  return sub_10015CFD4(a1);
}

uint64_t sub_10015CE6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v5 = *(_QWORD *)(*v0 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_lock);
  v2 = type metadata accessor for UnfairLock(0);
  swift_retain();
  v3 = sub_10001A630((uint64_t *)&unk_100844910);
  Lock.sync<A>(_:)(sub_10015D04C, v1, v2, v3, &protocol witness table for UnfairLock);
  swift_release(v5);
  return v6;
}

void sub_10015CEFC(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;

  v3 = *v1;
  v6 = *(_QWORD *)(*v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_lock);
  v5[2] = v3;
  v5[3] = a1;
  v4 = type metadata accessor for UnfairLock(0);
  swift_retain();
  Lock.sync<A>(_:)(sub_10015D014, v5, v4, &type metadata for () + 1, &protocol witness table for UnfairLock);
  swift_release(v6);

}

uint64_t sub_10015CF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100839C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015CFD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630((uint64_t *)&unk_100839C70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10015D014()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v4 = *(id *)(v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListID);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListID) = v2;
  v3 = v2;

}

id sub_10015D04C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListID);
  *a1 = v2;
  return v2;
}

uint64_t sub_10015D060()
{
  uint64_t v0;

  return sub_10015CB84(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10015D068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100839C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015D0B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC7remindd39MockInMemoryPreferredDefaultListStorage_l_preferredDefaultListObjectIDUrl;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10015CF8C(v3, a1);
}

uint64_t sub_10015D100(uint64_t a1, uint64_t a2)
{
  return sub_10037EFB8(a2);
}

uint32_t *sub_10015D10C(void *a1, char a2, int a3, int a4, char **a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint32_t *p_ivar_base_size;
  uint64_t v26;
  uint32_t *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void *v33;
  id v34;
  NSURL *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  _QWORD *v64;
  id v65;
  id v66;
  id v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t inited;
  id v78;
  _QWORD *v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t KeyPath;
  uint32_t *v84;
  void *v85;
  Class isa;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char **v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  unint64_t v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  id v107;
  id v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  id *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  id v121;
  void *v122;
  id v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  NSString v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint32_t *v135;
  BOOL v136;
  id v137;
  id v138;
  void *v139;
  id v140;
  id v141;
  id v142;
  void *v143;
  id v144;
  id v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t (*v149)(uint64_t, char *);
  id v150;
  void *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  id v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint32_t *v165;
  id v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  char **v172;
  id v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  char v178[48];
  char v179[48];
  char v180[48];
  char v181;
  uint64_t v182;

  v176 = a6;
  LODWORD(v175) = a3;
  v10 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v10);
  v167 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v163 - v13;
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v168 = (char *)&v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (void *)_s10PredicatesOMa_1(0);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) != 0)
    v21 = 21;
  else
    v21 = 19;
  swift_storeEnumTagMultiPayload(v20, v18, v21);
  sub_10000A3AC();
  v23 = v22;
  sub_1000EC49C((uint64_t)v20);
  v172 = a5;
  LODWORD(v173) = a4;
  v170 = v15;
  v169 = v16;
  if ((a4 & 1) != 0)
  {
    v24 = v23;
    p_ivar_base_size = (uint32_t *)v23;
    v26 = v174;
    v27 = (uint32_t *)v23;
  }
  else
  {
    v166 = v18;
    v28 = a1;
    v171 = v23;
    v29 = (uint64_t)a5[3];
    v30 = a5[4];
    sub_10000A388(a5, v29);
    (*((void (**)(uint64_t, char *))v30 + 1))(v29, v30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      sub_10015CFD4((uint64_t)v14);
    }
    else
    {
      v31 = v15;
      v32 = v168;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v168, v14, v31);
      v33 = v28;
      v34 = objc_msgSend(v28, "persistentStoreCoordinator");
      if (v34)
      {
        v36 = v34;
        URL._bridgeToObjectiveC()(v35);
        v38 = v37;
        v39 = objc_msgSend(v36, "managedObjectIDForURIRepresentation:", v37);

        if (v39)
        {
          v40 = v166;
          swift_storeEnumTagMultiPayload(v20, v166, 18);
          sub_10000A3AC();
          v42 = v41;
          sub_1000EC49C((uint64_t)v20);
          if ((v175 & 1) != 0)
          {
            v177 = 0;
            v43 = objc_msgSend(v33, "existingObjectWithID:error:", v39, &v177);
            v44 = v177;
            if (v43)
            {
              v45 = v43;
              v46 = objc_opt_self(REMCDList);
              v47 = swift_dynamicCastObjCClass(v45, v46);
              v48 = v44;
              if (v47 && (sub_100169544(v47, v42) & 1) != 0)
              {
                v49 = sub_10001A630((uint64_t *)&unk_10083AD90);
                v50 = swift_allocObject(v49, 40, 7);
                *(_OWORD *)(v50 + 16) = xmmword_1006A7330;
                *(_QWORD *)(v50 + 32) = v47;
                v177 = (_QWORD *)v50;
                specialized Array._endMutation()(v50);
                v27 = (uint32_t *)v177;

                (*(void (**)(char *, uint64_t))(v169 + 8))(v32, v170);
                return v27;
              }

            }
            else
            {
              v68 = v177;
              v69 = _convertNSErrorToError(_:)(v44);

              swift_willThrow(v70);
              swift_errorRelease(v69);
              v174 = 0;
            }
          }
          v71 = sub_10001A630((uint64_t *)&unk_10083AD90);
          v72 = swift_allocObject(v71, 40, 7);
          *(_OWORD *)(v72 + 16) = xmmword_1006A7330;
          *(_QWORD *)(v72 + 32) = v39;
          v177 = (_QWORD *)v72;
          specialized Array._endMutation()(v72);
          *v20 = v177;
          swift_storeEnumTagMultiPayload(v20, v40, 5);
          v73 = v39;
          sub_10000A3AC();
          v75 = v74;
          sub_1000EC49C((uint64_t)v20);
          v76 = sub_10001A630(&qword_10083D3D8);
          inited = swift_initStackObject(v76, v178);
          *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
          v78 = v171;
          *(_QWORD *)(inited + 32) = v171;
          *(_QWORD *)(inited + 40) = v75;
          v177 = (_QWORD *)inited;
          specialized Array._endMutation()(inited);
          v79 = v177;
          v80 = v75;
          v81 = v78;
          p_ivar_base_size = (uint32_t *)sub_10001CC54(v79);

          v27 = (uint32_t *)v78;
          (*(void (**)(char *, uint64_t))(v169 + 8))(v32, v170);
          v26 = v174;
          goto LABEL_22;
        }
      }
      (*(void (**)(char *, uint64_t))(v169 + 8))(v32, v170);
    }
    v51 = v166;
    v52 = (uint64_t)v172[3];
    v53 = v172[4];
    sub_10000A388(v172, v52);
    v54 = (*((uint64_t (**)(uint64_t, char *))v53 + 4))(v52, v53);
    v26 = v174;
    if (v54)
    {
      v55 = (void *)v54;
      v56 = sub_10001A630((uint64_t *)&unk_10083AD90);
      v57 = swift_allocObject(v56, 40, 7);
      *(_OWORD *)(v57 + 16) = xmmword_1006A7330;
      *(_QWORD *)(v57 + 32) = v55;
      v177 = (_QWORD *)v57;
      specialized Array._endMutation()(v57);
      *v20 = v177;
      swift_storeEnumTagMultiPayload(v20, v51, 4);
      v58 = v55;
      sub_10000A3AC();
      v60 = v59;
      sub_1000EC49C((uint64_t)v20);
      v61 = sub_10001A630(&qword_10083D3D8);
      v62 = swift_initStackObject(v61, v179);
      *(_OWORD *)(v62 + 16) = xmmword_1006A3C40;
      v63 = v171;
      *(_QWORD *)(v62 + 32) = v171;
      *(_QWORD *)(v62 + 40) = v60;
      v177 = (_QWORD *)v62;
      specialized Array._endMutation()(v62);
      v64 = v177;
      v65 = v60;
      v66 = v63;
      p_ivar_base_size = (uint32_t *)sub_10001CC54(v64);

      v27 = (uint32_t *)v63;
    }
    else
    {
      v27 = (uint32_t *)v171;
      v67 = v171;
      p_ivar_base_size = v27;
    }
  }
LABEL_22:
  v168 = (char *)sub_10001A630((uint64_t *)&unk_10083AD90);
  v82 = swift_initStackObject(v168, v180);
  *(_OWORD *)(v82 + 16) = xmmword_1006AAD80;
  *(_QWORD *)(v82 + 32) = swift_getKeyPath(&unk_1006AB2B0);
  *(_QWORD *)(v82 + 40) = swift_getKeyPath(&unk_1006AB2E0);
  KeyPath = swift_getKeyPath(&unk_1006AB318);
  *(_QWORD *)(v82 + 48) = KeyPath;
  v177 = (_QWORD *)v82;
  specialized Array._endMutation()(KeyPath);
  v84 = (uint32_t *)v177;
  if (qword_1008376D8 != -1)
    goto LABEL_49;
LABEL_23:
  v85 = (void *)sub_100358F8C((uint64_t)v84, qword_1008721E0, v176, (uint64_t)p_ivar_base_size);
  swift_bridgeObjectRelease(v84);
  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v85, "setSortDescriptors:", isa);

  v87 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v88 = NSManagedObjectContext.fetch<A>(_:)(v85, v87);
  if (v26)
  {

    return v27;
  }
  v89 = v88;
  v166 = v85;
  if ((v173 & 1) != 0 || (v175 & 1) == 0)
  {

    return (uint32_t *)v89;
  }
  v171 = v27;
  v90 = v172;
  v91 = (uint64_t)v172[3];
  v27 = (uint32_t *)v172[4];
  sub_10000A388(v172, v91);
  v92 = (void *)(*((uint64_t (**)(uint64_t, uint32_t *))v27 + 4))(v91, v27);
  v93 = (unint64_t)v89 >> 62;
  v174 = 0;
  v165 = p_ivar_base_size;
  v176 = v89;
  v173 = v92;
  if (!v92)
    goto LABEL_68;
  v177 = _swiftEmptyArrayStorage;
  v164 = (unint64_t)v89 >> 62;
  if (v93)
  {
    if (v89 < 0)
      v104 = v89;
    else
      v104 = v89 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v89);
    v84 = (uint32_t *)_CocoaArrayWrapper.endIndex.getter(v104);
    if (!v84)
    {
LABEL_54:
      v27 = (uint32_t *)_swiftEmptyArrayStorage;
      goto LABEL_55;
    }
  }
  else
  {
    v84 = *(uint32_t **)((v89 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v89);
    if (!v84)
      goto LABEL_54;
  }
  v94 = 0;
  v175 = v89 & 0xC000000000000001;
  v26 = v89 & 0xFFFFFFFFFFFFFF8;
  do
  {
    if (v175)
    {
      v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v94, v89);
    }
    else
    {
      if (v94 >= *(_QWORD *)(v26 + 16))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        swift_once(&qword_1008376D8, sub_1004A7104);
        goto LABEL_23;
      }
      v95 = *(id *)(v89 + 8 * v94 + 32);
    }
    v96 = v95;
    v27 = (uint32_t *)(v94 + 1);
    if (__OFADD__(v94, 1))
      goto LABEL_48;
    v97 = objc_msgSend(v95, "remObjectID");
    if (v97)
    {
      v98 = v97;
      p_ivar_base_size = v84;
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v99 = v173;
      v100 = v98;
      LOBYTE(v98) = static NSObject.== infix(_:_:)(v100);

      if ((v98 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v101);
        v102 = v177[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v102);
        v103 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v102, v96);
        specialized ContiguousArray._endMutation()(v103);
      }
      else
      {

      }
      v89 = v176;
      v84 = p_ivar_base_size;
    }
    else
    {

    }
    ++v94;
  }
  while (v27 != v84);
  v27 = (uint32_t *)v177;
  v90 = v172;
  p_ivar_base_size = v165;
LABEL_55:
  swift_bridgeObjectRelease(v89);
  if (((unint64_t)v27 & 0x8000000000000000) != 0 || ((unint64_t)v27 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v27);
    v115 = _CocoaArrayWrapper.endIndex.getter(v114);
    swift_release(v27);
    if (v115 != 1)
      goto LABEL_66;
    swift_bridgeObjectRetain(v27);
    if (!_CocoaArrayWrapper.endIndex.getter(v116))
    {

      swift_release_n(v27);
      goto LABEL_67;
    }
LABEL_59:
    if (((unint64_t)v27 & 0xC000000000000001) != 0)
    {
      v105 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27);
    }
    else
    {
      if (!*((_QWORD *)v27 + 2))
      {
        __break(1u);
        goto LABEL_121;
      }
      v105 = *((id *)v27 + 4);
    }
    v106 = v105;
    swift_bridgeObjectRelease(v89);
    swift_release(v27);
    v107 = objc_msgSend(v106, "objectID");
    v108 = objc_msgSend(v107, "URIRepresentation");

    v109 = v167;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v108);

    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v109, 0, 1, v170);
    v110 = (uint64_t)v90;
    v111 = (uint64_t)v90[3];
    v112 = v90[4];
    sub_10001BA38(v110, v111);
    (*((void (**)(char *, uint64_t, char *))v112 + 2))(v109, v111, v112);

    v113 = (id *)&v182;
    goto LABEL_110;
  }
  if (*((_QWORD *)v27 + 2) == 1)
  {
    swift_bridgeObjectRetain(v27);
    goto LABEL_59;
  }
LABEL_66:
  swift_release(v27);

LABEL_67:
  v93 = v164;
LABEL_68:
  v117 = v171;
  v118 = (uint64_t)v166;
  if (v93)
  {
LABEL_115:
    if (v89 < 0)
      v162 = v89;
    else
      v162 = v89 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v89);
    v175 = _CocoaArrayWrapper.endIndex.getter(v162);
  }
  else
  {
    v175 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v89);
  }
  if (!v175)
  {

    swift_bridgeObjectRelease_n(v89, 2);
    return (uint32_t *)_swiftEmptyArrayStorage;
  }
  v173 = (id)(v89 & 0xC000000000000001);
  v119 = 4;
  do
  {
    v117 = (id)(v119 - 4);
    if (v173)
      v121 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v119 - 4, v89);
    else
      v121 = *(id *)(v89 + 8 * v119);
    v122 = v121;
    v118 = v119 - 3;
    if (__OFADD__(v117, 1))
    {
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
    v123 = objc_msgSend(v121, "name");
    if (v123)
    {
      v124 = v123;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
      v126 = v125;

      v127 = (void *)objc_opt_self(REMDisplayNameUtils);
      v128 = String._bridgeToObjectiveC()();
      v129 = objc_msgSend(v127, "displayNameFromListName:isPlaceholder:", v128, objc_msgSend(v122, "isPlaceholder", swift_bridgeObjectRelease(v126).n128_f64[0]));

      v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
      v132 = v131;

      v133 = (id)_REMGetLocalizedString(11);
      v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
      p_ivar_base_size = v135;

      if (v130 == v134 && (uint32_t *)v132 == p_ivar_base_size)
      {
        swift_bridgeObjectRelease_n(v176, 2);
        swift_bridgeObjectRelease(v132);
        goto LABEL_107;
      }
      v120 = _stringCompareWithSmolCheck(_:_:expecting:)(v130, v132, v134, p_ivar_base_size, 0);
      swift_bridgeObjectRelease(v132);
      swift_bridgeObjectRelease(p_ivar_base_size);
      v89 = v176;
      if ((v120 & 1) != 0)
      {
        swift_bridgeObjectRelease(v176);
        v132 = v89;
        goto LABEL_107;
      }
    }

    ++v119;
  }
  while (v118 != v175);
  v118 = 4;
  p_ivar_base_size = &RDDataAccess.ivar_base_size;
  v90 = &selRef_isConcealed;
  do
  {
    v117 = (id)(v118 - 4);
    if (v173)
      v137 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v118 - 4, v89);
    else
      v137 = *(id *)(v89 + 8 * v118);
    v122 = v137;
    v89 = v118 - 3;
    if (__OFADD__(v117, 1))
      goto LABEL_113;
    v138 = objc_msgSend(v137, "account");
    if (v138)
    {
      v139 = v138;
      v140 = objc_msgSend(v138, "accountTypeHost");

      LODWORD(v139) = objc_msgSend(v140, "isPrimaryCloudKit");
      if ((_DWORD)v139)
      {
LABEL_101:
        v132 = v176;
        swift_bridgeObjectRelease(v176);
        v90 = v172;
        goto LABEL_107;
      }
    }

    ++v118;
    v136 = v89 == v175;
    v89 = v176;
  }
  while (!v136);
  v118 = 4;
  v90 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
  do
  {
    v117 = (id)(v118 - 4);
    if (v173)
      v141 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v118 - 4, v89);
    else
      v141 = *(id *)(v89 + 8 * v118);
    v122 = v141;
    v89 = v118 - 3;
    if (__OFADD__(v117, 1))
      goto LABEL_114;
    v142 = objc_msgSend(v141, "account");
    if (v142)
    {
      v143 = v142;
      v144 = objc_msgSend(v142, "accountTypeHost");

      LODWORD(v143) = objc_msgSend(v144, "isCloudKit");
      if ((_DWORD)v143)
        goto LABEL_101;
    }

    ++v118;
    v136 = v89 == v175;
    v89 = v176;
  }
  while (!v136);
  swift_bridgeObjectRelease(v176);
  v90 = v172;
  if (v173)
  {
    v145 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v89);
    goto LABEL_106;
  }
  if (!*(_QWORD *)((v89 & 0xFFFFFFFFFFFFF8) + 0x10))
LABEL_121:
    __break(1u);
  v145 = *(id *)(v89 + 32);
LABEL_106:
  v122 = v145;
  v132 = v89;
LABEL_107:
  swift_bridgeObjectRelease(v132);
  v146 = (uint64_t)v90[3];
  v147 = v90[4];
  sub_10000A388(v90, v146);
  v148 = (uint64_t)v90;
  v149 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)v147 + 4);
  v150 = v122;
  v151 = (void *)v149(v146, v147);

  if (!v151)
  {
    v152 = objc_msgSend(v150, "remObjectID");
    v153 = *(_QWORD *)(v148 + 24);
    v154 = *(_QWORD *)(v148 + 32);
    sub_10001BA38(v148, v153);
    (*(void (**)(id, uint64_t, uint64_t))(v154 + 40))(v152, v153, v154);
    v155 = objc_msgSend(v150, "objectID");
    v156 = objc_msgSend(v155, "URIRepresentation");

    v157 = v167;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v156);

    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v157, 0, 1, v170);
    v158 = *(_QWORD *)(v148 + 24);
    v159 = *(_QWORD *)(v148 + 32);
    sub_10001BA38(v148, v158);
    (*(void (**)(char *, uint64_t, uint64_t))(v159 + 16))(v157, v158, v159);
  }
  v160 = swift_allocObject(v168, 40, 7);
  *(_OWORD *)(v160 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v160 + 32) = v150;
  v177 = (_QWORD *)v160;
  specialized Array._endMutation()(v160);
  v27 = (uint32_t *)v177;

  v113 = (id *)&v181;
LABEL_110:

  return v27;
}

void sub_10015E1F0(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v4;
  char *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  uint32_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint32_t *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37[5];

  if ((a3 & 1) != 0)
  {
    if (qword_100836DD0 != -1)
      swift_once(&qword_100836DD0, sub_10015CA40);
    v8 = (char *)type metadata accessor for MockInMemoryPreferredDefaultListStorage(0);
    v9 = &qword_100871C68;
    v10 = (char *)&off_1007E6E18;
  }
  else
  {
    if (qword_100836DC8 != -1)
      swift_once(&qword_100836DC8, sub_10015C7F0);
    v8 = (char *)type metadata accessor for REMDaemonUserDefaultsPreferredListStorageAdapter();
    v9 = &qword_100871C60;
    v10 = (char *)&off_1007E6E50;
  }
  v11 = (char *)*v9;
  v37[3] = v8;
  v37[4] = v10;
  v37[0] = v11;
  swift_retain();
  if (a2 == (void *)2)
    v12 = 0;
  else
    v12 = a2;
  if (a2 == (void *)1)
    v13 = 0;
  else
    v13 = v12;
  v14 = a2 != (void *)1 && a2 != (void *)2;
  sub_10015EB3C(a2);
  v15 = sub_10015D10C(a1, a2 == (void *)1, a2 != (void *)1, 0, v37, a4);
  if (v4)
    goto LABEL_21;
  v16 = (uint64_t)v15;
  if (!v14)
    goto LABEL_21;
  v17 = v13;
  v18 = (uint64_t)sub_10015ABD8(v16, v13);
  v19 = v18;
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v20 = v18;
    else
      v20 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v21 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v19);
    if (v21)
      goto LABEL_21;
  }
  else if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_21:
    sub_10015EB50(a2);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v37);
    return;
  }
  v22 = sub_10015D10C(a1, 0, 0, 1, v37, a4);
  v23 = v17;
  v24 = sub_10015AE6C((uint64_t)v22, v13);
  v25 = v24;
  if (v24)
  {
    v26 = v24;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
    v27 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v28 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v27 >= v28 >> 1)
    {
      v36 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1);
      v27 = v36;
    }
    v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v26);
    specialized Array._endMutation()(v29);
  }
  swift_bridgeObjectRelease(v22);

  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    if (*(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_32;
LABEL_40:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    goto LABEL_21;
  }
  if ((uint64_t)_swiftEmptyArrayStorage < 0)
    v34 = _swiftEmptyArrayStorage;
  else
    v34 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  if (!v35)
    goto LABEL_40;
LABEL_32:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
    v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, _swiftEmptyArrayStorage);
    goto LABEL_35;
  }
  if (*(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v30 = (id)_swiftEmptyArrayStorage[4];
LABEL_35:
    v31 = v30;
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v32 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v33 = swift_allocObject(v32, 40, 7);
    *(_OWORD *)(v33 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v33 + 32) = v31;
    specialized Array._endMutation()(v33);
    goto LABEL_21;
  }
  __break(1u);
}

uint64_t sub_10015E568(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  id v27;
  Class isa;
  Class v29;
  Class v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836DC0 != -1)
    swift_once(&qword_100836DC0, sub_10015B0D4);
  v6 = sub_10001AAA8(v2, (uint64_t)qword_10083D198);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v35 = (_QWORD *)a1;
  __chkstk_darwin(v7);
  *(&v33 - 2) = (uint64_t)v5;
  v8 = sub_10001A630(&qword_10083FF50);
  v9 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  v10 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
  v33 = v9;
  v11 = v34;
  v12 = Sequence.map<A>(skippingError:_:)(sub_10015E8E8, &v33 - 4, sub_1000F4B44, 0, v8, v9, v10);
  if (v11)
  {
    swift_errorRelease(v11);
    v13 = (uint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    v13 = v12;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v32 = v13;
    else
      v32 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v14 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v15 = _swiftEmptyArrayStorage;
  if (!v14)
    goto LABEL_16;
  v35 = _swiftEmptyArrayStorage;
  result = specialized ContiguousArray.reserveCapacity(_:)(v14);
  if ((v14 & 0x8000000000000000) == 0)
  {
    v34 = a1;
    v17 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v13);
      else
        v18 = *(id *)(v13 + 8 * v17 + 32);
      v19 = v18;
      ++v17;
      v20 = objc_msgSend(v18, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      v22 = v35[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
      v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      specialized ContiguousArray._endMutation()(v23);
    }
    while (v14 != v17);
    v15 = v35;
    a1 = v34;
LABEL_16:
    v24 = sub_1004A8268(a1);
    v35 = v25;
    sub_1001E1A5C(v13);
    v26 = v35;
    v27 = objc_allocWithZone((Class)REMListsDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v24);
    v29 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v30 = Array._bridgeToObjectiveC()().super.isa;
    v31 = objc_msgSend(v27, "initWithAccountStorages:listStorages:objectIDs:", isa, v29, v30, swift_bridgeObjectRelease(v15).n128_f64[0]);

    return (uint64_t)v31;
  }
  __break(1u);
  return result;
}

uint64_t sub_10015E8E8(uint64_t a1, uint64_t a2)
{
  return sub_10037EFB8(a2);
}

uint64_t sub_10015E8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  Class isa;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v3 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v3);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v5, v6, 31);
  sub_10000A3AC();
  v8 = v7;
  v9 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v10, "setEntity:", v11);

  objc_msgSend(v10, "setAffectedStores:", 0);
  objc_msgSend(v10, "setPredicate:", v8);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "setSortDescriptors:", isa);

  v13 = a1;
  v14 = NSManagedObjectContext.fetch<A>(_:)(v10, v9);
  if (v1)
  {

    sub_1000EC49C((uint64_t)v5);
  }
  else
  {
    v15 = v14;
    v20[1] = v14;
    v16 = sub_10001A630(&qword_10083FF50);
    v17 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v18 = Sequence.elements<A>(ofType:)(v9, v16, v9, v17);
    swift_bridgeObjectRelease(v15);

    v13 = sub_10015E568(v18);
    sub_1000EC49C((uint64_t)v5);
    swift_bridgeObjectRelease(v18);
  }
  return v13;
}

id sub_10015EB3C(id result)
{
  if ((char *)result - 1 >= (char *)2)
    return result;
  return result;
}

void sub_10015EB50(id a1)
{
  if ((char *)a1 - 1 >= (char *)2)

}

unint64_t sub_10015EB64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100838120;
  if (!qword_100838120)
  {
    v1 = type metadata accessor for UnfairLock.Options(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnfairLock.Options, v1);
    atomic_store(result, (unint64_t *)&qword_100838120);
  }
  return result;
}

uint64_t sub_10015EBAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

const char *sub_10015EBE0()
{
  return "parentAccount";
}

uint64_t sub_10015EBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083D3E0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083D3E0);
  if (qword_100837638 != -1)
    swift_once(&qword_100837638, sub_1004A1870);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872088);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_10015EC88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  __n128 v45;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  __n128 v52;
  uint64_t v53;
  int v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v2 = v1;
  v4 = type metadata accessor for REMGroceryModelError(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = &_swiftEmptySetSingleton;
  v59 = *(_QWORD *)(a1 + 16);
  if (!v59)
  {
    v56 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    return v56;
  }
  v55 = v7;
  v8 = type metadata accessor for REMGroceryDummyModel(0);
  v57 = a1 + 32;
  v58 = v8;
  v54 = enum case for REMGroceryModelError.unsupportedLanguage(_:);
  v47[1] = a1;
  v9 = swift_bridgeObjectRetain(a1);
  v10 = 0;
  v56 = _swiftEmptyArrayStorage;
  v9.n128_u64[0] = 136315138;
  v52 = v9;
  v51 = (char *)&type metadata for Any + 8;
  v49 = v4;
  v53 = v5;
  while (1)
  {
    v11 = (uint64_t *)(v57 + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    swift_bridgeObjectRetain(v12);
    v14 = static REMGroceryDummyModel.modelBaseLocale(for:)(v13, v12);
    if (v2)
      break;
    v26 = v15;
    if (v15)
    {
      v27 = v14;
      v28 = v62;
      if (!v62[2])
        goto LABEL_31;
      Hasher.init(_seed:)(&v60, v62[5]);
      swift_bridgeObjectRetain(v28);
      String.hash(into:)(&v60, v27, v26);
      v29 = Hasher._finalize()();
      v30 = -1 << *((_BYTE *)v28 + 32);
      v31 = v29 & ~v30;
      v50 = v28 + 7;
      if (((*(_QWORD *)((char *)v28 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v31) & 1) == 0)
      {
LABEL_30:
        swift_bridgeObjectRelease();
LABEL_31:
        if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0)
          v56 = sub_1002C8224(0, v56[2] + 1, 1, v56);
        v5 = v53;
        v42 = v56[2];
        v41 = v56[3];
        if (v42 >= v41 >> 1)
          v56 = sub_1002C8224((_QWORD *)(v41 > 1), v42 + 1, 1, v56);
        v43 = v56;
        v56[2] = v42 + 1;
        v44 = &v43[2 * v42];
        v44[4] = v13;
        v44[5] = v12;
        sub_1002DB0E4(&v60, v27, v26);
        swift_bridgeObjectRelease();
        v4 = v49;
        goto LABEL_5;
      }
      v32 = (uint64_t *)(v28[6] + 16 * v31);
      v33 = *v32;
      v34 = v32[1];
      if (*v32 != v27 || v26 != v34)
      {
        v47[0] = v28[6];
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v27, v26, 0) & 1) == 0)
        {
          v48 = ~v30;
          v36 = (v31 + 1) & ~v30;
          v37 = v47[0];
          if (((*(_QWORD *)((char *)v50 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
            goto LABEL_30;
          while (1)
          {
            v38 = (_QWORD *)(v37 + 16 * v36);
            v39 = v38[1];
            v40 = *v38 == v27 && v26 == v39;
            if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v38, v39, v27, v26, 0) & 1) != 0)
              break;
            v36 = (v36 + 1) & v48;
            if (((*(_QWORD *)((char *)v50 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
              goto LABEL_30;
          }
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v49;
      v5 = v53;
    }
    swift_bridgeObjectRelease();
LABEL_5:
    if (++v10 == v59)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v56;
    }
  }
  v60 = v2;
  swift_errorRetain(v2);
  v16 = sub_10001A630((uint64_t *)&unk_10083AA20);
  v17 = v55;
  if ((swift_dynamicCast(v55, &v60, v16, v4, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  v18 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v17, v4);
  if (v18 == v54)
  {
    swift_errorRelease(v2);
    (*(void (**)(char *, uint64_t))(v5 + 96))(v17, v4);
    swift_bridgeObjectRelease();
    if (qword_100836DD8 != -1)
      swift_once(&qword_100836DD8, sub_10015EBF8);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10083D3E0);
    swift_bridgeObjectRetain(v12);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v61 = v24;
      *(_DWORD *)v23 = v52.n128_u32[0];
      swift_bridgeObjectRetain(v12);
      *(_QWORD *)(v23 + 4) = sub_10001A820(v13, v12, &v61);
      swift_bridgeObjectRelease_n(v12, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "remRemovingThoseWithTheSameBaseLocaleIDAndDroppingGroceryUnsupportedLocaleID, unsupportedLanguage: %s", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy(v24, 1, v51);
      v25 = v24;
      v5 = v53;
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v12, 2);
    }
    swift_errorRelease(v60);
    v2 = 0;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v17, v4, v45);
LABEL_40:
  swift_errorRelease(v60);
  return v56;
}

uint64_t sub_10015F210()
{
  return sub_10015F2B8(&qword_100839C98, REMColor_ptr);
}

uint64_t sub_10015F264()
{
  return sub_10015F2B8((unint64_t *)&unk_10083D430, REMContactRepresentation_ptr);
}

uint64_t sub_10015F2B8(unint64_t *a1, _QWORD *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  id v9;
  char *v10;
  uint64_t v11;
  Class isa;
  double v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v45[3];
  char v46[8];
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50[24];

  v5 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v45[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RDJSONCoder()), "init");
  objc_msgSend(v2, "encodeWithCoder:", v8);
  v9 = (id)objc_opt_self(NSJSONSerialization);
  v10 = &v8[OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts];
  swift_beginAccess(&v8[OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts], v50, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)v10 + 16))
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_100836DF0, sub_1001671F0);
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v10 + 32);
  swift_bridgeObjectRetain(v11);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v13 = swift_bridgeObjectRelease(v11).n128_u64[0];
  v49 = 0;
  v14 = objc_msgSend(v9, "dataWithJSONObject:options:error:", isa, 0, &v49, v13);

  v15 = v49;
  if (v14)
  {
    v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

    static String.Encoding.utf8.getter();
    v19 = String.init(data:encoding:)(v16, v18, v7);
    if (v20)
    {
      v21 = v19;
      sub_1000A71C8(v16, v18);

      return v21;
    }
    v24 = (void *)objc_opt_self(REMError);
    v25 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v24, "internalErrorWithDebugDescription:", v25);

    swift_willThrow(v26);
    sub_1000A71C8(v16, v18);
  }
  else
  {
    v22 = v15;
    v9 = (id)_convertNSErrorToError(_:)(v15);

    swift_willThrow(v23);
  }
  if (qword_100836DF0 != -1)
    goto LABEL_14;
LABEL_8:
  v27 = type metadata accessor for Logger(0);
  sub_10001AAA8(v27, (uint64_t)qword_10083D5C0);
  v28 = v2;
  swift_errorRetain(v9);
  v29 = v28;
  v30 = swift_errorRetain(v9);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(22, -1);
    v34 = (void *)swift_slowAlloc(64, -1);
    v49 = v34;
    *(_DWORD *)v33 = 136315394;
    v47 = (uint64_t)v29;
    v35 = sub_1000151B0(0, a1, a2);
    v36 = v29;
    v37 = String.init<A>(describing:)(&v47, v35);
    v39 = v38;
    v47 = sub_10001A820(v37, v38, (uint64_t *)&v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v33 + 12) = 2080;
    swift_getErrorValue(v9, v46, v45);
    v40 = Error.localizedDescription.getter(v45[1], v45[2]);
    v42 = v41;
    v47 = sub_10001A820(v40, v41, (uint64_t *)&v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease(v42);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDJSONCoder failed to encode object as JSON {class: %s, error: %s}", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {

    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  return 0;
}

uint64_t sub_10015F740()
{
  return sub_10015F2B8(&qword_10083D428, REMResolutionTokenMap_ptr);
}

uint64_t sub_10015F794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083D400);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083D400);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10015F82C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10015F868 + 4 * byte_1006AB346[a1]))(0x626D456567646162, 0xEB000000006D656CLL);
}

uint64_t sub_10015F868()
{
  return 0x726F6C6F63;
}

uint64_t sub_10015F87C()
{
  return 0x61447265746C6966;
}

unint64_t sub_10015F898()
{
  return 0xD000000000000026;
}

unint64_t sub_10015F950()
{
  return 0xD000000000000017;
}

uint64_t sub_10015F96C()
{
  return 0x73694C7472616D73;
}

uint64_t sub_10015F990()
{
  return 0x53676E6974726F73;
}

uint64_t sub_10015F9B0()
{
  return 0x614464656E6E6970;
}

uint64_t sub_10015F9D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_10015F82C(*a1);
  v5 = v4;
  v6 = sub_10015F82C(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10015FA58()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_10015F82C(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_10015FAB8(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_10015F82C(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_10015FAF8(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_10015F82C(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10015FB54@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10016428C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10015FB80@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10015F82C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10015FBA8(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DD1D8;
}

void _sSo14REMCDSmartListC7reminddE19sortChildrenObjectsyyF_0()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  Class isa;
  id v30;
  uint64_t v31;
  os_log_type_t log;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36[2];

  v1 = v0;
  if ((sub_10016048C() & 1) == 0)
  {
    v2 = objc_msgSend(v0, "remObjectID");
    if (v2)
    {
      v33 = v2;
      v3 = objc_msgSend(v0, "storeControllerManagedObjectContext");
      if (v3)
      {
        v4 = v3;
        v5 = qword_100836F50;
        v6 = v33;
        if (v5 != -1)
          swift_once(&qword_100836F50, sub_1001BB774);
        v7 = sub_1001BBE78((uint64_t)v33, 0, (uint64_t)v4, (Class)qword_100871D08, 0, 0);

        v8 = objc_msgSend(v1, "sectionIDsOrderingAsData");
        if (v8)
        {
          v9 = v8;
          v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
          v12 = v11;

          sub_1000151B0(0, (unint64_t *)&qword_10083D440, REMOrderedIdentifierMap_ptr);
          static REMJSONRepresentable.fromJSONData(_:)(v36, v10, v12);
          sub_1000A71C8(v10, v12);
          v13 = (void *)v36[0];
          v14 = type metadata accessor for REMCDSmartListSection();
          v15 = REMOrderedIdentifierMap.reorder<A>(objects:)(v7, v14);
          swift_bridgeObjectRelease(v7);
          if (qword_100836DE0 != -1)
            swift_once(&qword_100836DE0, sub_10015F794);
          v16 = type metadata accessor for Logger(0);
          sub_10001AAA8(v16, (uint64_t)qword_10083D400);
          v17 = v1;
          v18 = Logger.logObject.getter(v17);
          v19 = static os_log_type_t.default.getter(v18);
          if (os_log_type_enabled(v18, v19))
          {
            log = v19;
            v34 = v13;
            v20 = (uint8_t *)swift_slowAlloc(12, -1);
            v31 = swift_slowAlloc(32, -1);
            v36[0] = v31;
            *(_DWORD *)v20 = 136315138;
            v21 = objc_msgSend(v17, "remObjectID");
            if (v21)
            {
              v22 = v21;
              v23 = objc_msgSend(v21, "description");

              v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
              v26 = v25;

            }
            else
            {
              v24 = 7104878;
              v26 = 0xE300000000000000;
            }
            v35 = sub_10001A820(v24, v26, v36);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);

            swift_bridgeObjectRelease(v26);
            _os_log_impl((void *)&_mh_execute_header, v18, log, "REMCDSmartList+CloudKit#sortChildSections(): Sorted child sections {cdSmartList: %s}", v20, 0xCu);
            swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v31, -1, -1);
            swift_slowDealloc(v20, -1, -1);

          }
          else
          {

          }
        }
        else
        {
          v15 = v7;
        }
        v27 = sub_1001E039C(v15);
        swift_bridgeObjectRelease(v15);
        v28 = objc_allocWithZone((Class)NSMutableOrderedSet);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v30 = objc_msgSend(v28, "initWithArray:", isa, swift_bridgeObjectRelease(v27).n128_f64[0]);

        objc_msgSend(v1, "setSections:", v30);
      }
      else
      {

      }
    }
  }
}

uint64_t sub_10016048C()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  id v13;
  uint64_t v14;
  id v16;
  uint64_t v17;

  v1 = objc_msgSend(v0, "managedObjectContext");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_opt_self(RDStoreControllerManagedObjectContext);
  v4 = swift_dynamicCastObjCClass(v2, v3);
  if (!v4)
  {
LABEL_11:

    return 0;
  }
  v5 = (void *)v4;
  v6 = (uint64_t)objc_msgSend(v0, "recordID");
  if (v6)
  {
    if ((objc_msgSend(v5, "containerShouldSortChildrenAfterFetchingWithRecordID:", v6) & 1) != 0)
    {
      if (qword_100836DE0 != -1)
        swift_once(&qword_100836DE0, sub_10015F794);
      v7 = type metadata accessor for Logger(0);
      sub_10001AAA8(v7, (uint64_t)qword_10083D400);
      v8 = (id)v6;
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.info.getter(v9);
      if (!os_log_type_enabled(v9, v10))
      {

        return 1;
      }
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      v16 = v8;
      v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      *v12 = v6;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Sorting children (reminders and/or sections) deferred {smartListRecordID: %{public}@}", v11, 0xCu);
      v14 = sub_10001A630((uint64_t *)&unk_100839E70);
      v6 = 1;
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      goto LABEL_9;
    }

    goto LABEL_11;
  }
LABEL_9:

  return v6;
}

_UNKNOWN **static REMCDSmartList.recordTypes()()
{
  return &off_1007DFA40;
}

uint64_t static REMCDSmartList.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t result;

  v7 = a1;
  swift_bridgeObjectRetain(a3);
  v8 = a4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v10 = objc_msgSend((id)objc_opt_self(REMCDSmartList), "objectWithRecordID:accountID:context:", v7, v9, v8);

  if (v10)
  {
    result = swift_dynamicCastUnknownClass(v10, v4);
    if (result)
      return result;

  }
  return 0;
}

id static REMCDSmartList.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t MetatypeMetadata;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v11 = v10;
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
  }
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v12)
  {
    v13 = objc_msgSend(a2, "ckIdentifier");
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v12, "setAccount:", a2);
      objc_msgSend(v12, "mergeDataFromRecord:accountID:", a1, v14);

      objc_msgSend(v12, "setCkServerRecord:", a1);
      objc_msgSend(v12, "setInCloud:", 1);
      objc_msgSend(v12, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_100836DE0 != -1)
        swift_once(&qword_100836DE0, sub_10015F794);
      v15 = type metadata accessor for Logger(0);
      sub_10001AAA8(v15, (uint64_t)qword_10083D400);
      v16 = a2;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc(22, -1);
        v20 = swift_slowAlloc(64, -1);
        v33 = v20;
        v34 = v4;
        *(_DWORD *)v19 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v22 = String.init<A>(describing:)(&v34, MetatypeMetadata);
        v24 = v23;
        v34 = sub_10001A820(v22, v23, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
        *(_QWORD *)&v25 = swift_bridgeObjectRelease(v24).n128_u64[0];
        *(_WORD *)(v19 + 12) = 2082;
        v26 = objc_msgSend(v16, "remObjectID", v25, v33);
        if (v26)
        {
          v27 = v26;
          v28 = objc_msgSend(v26, "description");

          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          v31 = v30;

        }
        else
        {
          v31 = 0xE300000000000000;
          v29 = 7104878;
        }
        v34 = sub_10001A820(v29, v31, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);

        swift_bridgeObjectRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v12;
}

Swift::String __swiftcall REMCDSmartList.recordType()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0x73694C7472616D53;
  v1 = (void *)0xE900000000000074;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDSmartList.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  NSString v6;
  id v7;
  NSString v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  id v18;
  objc_class *v19;
  id v20;
  void *v21;
  char v22;
  objc_super v23;

  v3 = v2;
  ObjectType = swift_getObjectType(v3);
  v6 = String._bridgeToObjectiveC()();
  v23.receiver = v3;
  v23.super_class = (Class)REMCDSmartList;
  objc_msgSendSuper2(&v23, "mergeDataFromRecord:accountID:", from.super.isa, v6);

  v7 = -[objc_class recordID](from.super.isa, "recordID");
  v8 = objc_msgSend(v7, "recordName");

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v11 = v10;
    v8 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v9 = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  v12 = objc_msgSend(v3, "ckIdentifierFromRecordName:", v8, v9);

  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v15 = v14;
    v12 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v13 = swift_bridgeObjectRelease(v15).n128_u64[0];
  }
  objc_msgSend(v3, "setCkIdentifier:", v12, v13);

  v22 = 0;
  v16 = objc_msgSend(v3, "mergeDataRevertedLocallyMarkedForDeletion");
  v17 = objc_msgSend(v3, "mergeDataRefusedToMergeMarkedForDeletion");
  v18 = v3;
  v19 = from.super.isa;
  sub_100437BF0(v19, v16, v17, v18, v18, v19, (uint64_t)&v22, ObjectType);
  if (v22 == 1)
  {
    v20 = objc_msgSend(v18, "parentAccount");
    if (v20)
    {
      v21 = v20;
      if ((objc_msgSend(v20, "ckNeedsInitialFetchFromCloud") & 1) == 0)
        sub_10058FB90();

    }
  }
}

void sub_100160EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26[2] = a5;
  v31 = a4;
  v32 = a3;
  v33 = a2;
  v28 = 0;
  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v6);
  v27 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v27);
  v26[3] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v26[0] = (char *)v26 - v9;
  v10 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v10 - 8);
  v30 = v10;
  __chkstk_darwin(v10);
  v26[1] = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v13 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  __chkstk_darwin(v21);
  __chkstk_darwin((char *)v26 - v22);
  __chkstk_darwin(v23);
  __chkstk_darwin(v24);
  __chkstk_darwin(v25);
  __asm { BR              X10 }
}

void sub_10016118C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  NSString v4;

  v1 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(0x626D456567646142, 0xEB000000006D656CLL, v1, &type metadata for String, &protocol witness table for String);
  v3 = *(_QWORD *)(v0 - 104);
  if (v3)
  {
    v4 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v2 = swift_bridgeObjectRelease(v3).n128_u64[0];
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(*(id *)(v0 - 160), "setBadgeEmblem:", v4, v2);

}

CKRecord_optional __swiftcall REMCDSmartList.newlyCreatedRecord()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  Swift::Bool v16;
  __int128 v17;
  objc_class *v18;
  _QWORD v19[6];
  __int128 v20;
  unint64_t v21;
  const char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  objc_super v33;
  CKRecord_optional result;

  v1 = v0;
  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v2);
  v32 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)v19 - v5;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v30 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v31 = (char *)v19 - v15;
  v33.receiver = v1;
  v33.super_class = (Class)REMCDSmartList;
  if (objc_msgSendSuper2(&v33, "newlyCreatedRecord", v14))
  {
    v19[5] = v10;
    v27 = v8;
    v28 = v7;
    v29 = v6;
    v23 = "indersInSectionsChecksum";
    v19[4] = 0x80000001006FA6F0;
    v25 = 0x80000001006FA690;
    v26 = 0x80000001006FA6C0;
    v21 = 0x80000001006FA670;
    *(_QWORD *)&v17 = 136446210;
    v20 = v17;
    v24 = 0x80000001006FA630;
    v19[2] = (char *)&type metadata for Any + 8;
    v22 = "ShowingLargeAttachments";
    v19[3] = 0x80000001006FA650;
    JUMPOUT(0x100162E04);
  }
  v18 = 0;
  result.value.super.isa = v18;
  result.is_nil = v16;
  return result;
}

void __swiftcall REMCDSmartList.parentCloud()(REMCDObject_optional *__return_ptr retstr)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v2 = objc_msgSend(v1, "smartListType");
  if (!v2)
    return;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  v8 = (unint64_t)REMSmartListType.init(stringValue:)(v7);
  if (!v8)
    return;
  v9 = (void *)v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeToday);
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  if (v10 == v13 && v12 == v14)
    goto LABEL_10;
  v16 = v14;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0)
  {
LABEL_11:
    objc_msgSend(v1, "account");

    return;
  }
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeFlagged);
  v12 = v19;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v22 = v20;
  if (v18 == v21 && v12 == v20)
    goto LABEL_10;
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v12, v21, v20, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v22);
  if ((v23 & 1) != 0)
    goto LABEL_11;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeScheduled);
  v12 = v25;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v28 = v26;
  if (v24 == v27 && v12 == v26)
    goto LABEL_10;
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v12, v27, v26, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v28);
  if ((v29 & 1) != 0)
    goto LABEL_11;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeAll);
  v12 = v31;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v34 = v32;
  if (v30 == v33 && v12 == v32)
    goto LABEL_10;
  v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v12, v33, v32, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v34);
  if ((v35 & 1) != 0)
    goto LABEL_11;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeAssigned);
  v12 = v37;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v40 = v38;
  if (v36 == v39 && v12 == v38)
    goto LABEL_10;
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v12, v39, v38, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v40);
  if ((v41 & 1) != 0)
    goto LABEL_11;
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMSmartListTypeSiriFoundInApps);
  v12 = v43;
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v46 = v44;
  if (v42 == v45 && v12 == v44)
  {
LABEL_10:
    swift_bridgeObjectRelease_n(v12, 2);
    goto LABEL_11;
  }
  v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v12, v45, v44, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v46);
  if ((v47 & 1) != 0)
    goto LABEL_11;

}

Swift::Void __swiftcall REMCDSmartList.cleanUpAfterLocalObjectMerge()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_100836DE0 != -1)
    swift_once(&qword_100836DE0, sub_10015F794);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083D400);
  v10 = v0;
  v2 = Logger.logObject.getter(v10);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v12 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType(v10);
    v6 = sub_10001A630(&qword_10083D420);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    v9 = v8;
    ObjectType = sub_10001A820(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

unint64_t sub_10016428C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DD208, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

uint64_t _sSo14REMCDSmartListC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;

  if (qword_100836DE0 != -1)
    swift_once(&qword_100836DE0, sub_10015F794);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083D400);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_10083D420);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    v10 = v9;
    ObjectType = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v13);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _sSo14REMCDSmartListC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;

  if (qword_100836DE0 != -1)
    swift_once(&qword_100836DE0, sub_10015F794);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10083D400);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType(v2);
    v7 = sub_10001A630(&qword_10083D420);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    v10 = v9;
    ObjectType = sub_10001A820(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v13);

    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t _s6FieldsOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6FieldsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_100164728 + 4 * byte_1006AB359[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10016475C + 4 * byte_1006AB354[v4]))();
}

uint64_t sub_10016475C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100164764(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016476CLL);
  return result;
}

uint64_t sub_100164778(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100164780);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_100164784(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016478C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s6FieldsOMa_0()
{
  return &_s6FieldsON_0;
}

unint64_t sub_1001647A8(uint64_t a1)
{
  unint64_t result;

  result = sub_1001647CC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001647CC()
{
  unint64_t result;

  result = qword_10083D450;
  if (!qword_10083D450)
  {
    result = swift_getWitnessTable(&unk_1006AB3A8, &_s6FieldsON_0);
    atomic_store(result, (unint64_t *)&qword_10083D450);
  }
  return result;
}

unint64_t sub_100164810(uint64_t a1)
{
  unint64_t result;

  result = sub_100164834();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100164834()
{
  unint64_t result;

  result = qword_10083D458;
  if (!qword_10083D458)
  {
    result = swift_getWitnessTable(&unk_1006AB370, &_s6FieldsON_0);
    atomic_store(result, (unint64_t *)&qword_10083D458);
  }
  return result;
}

unint64_t sub_10016487C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083D460;
  if (!qword_10083D460)
  {
    v1 = sub_1000A5A94(&qword_10083D468);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083D460);
  }
  return result;
}

unint64_t sub_1001648CC()
{
  unint64_t result;

  result = qword_10083D470;
  if (!qword_10083D470)
  {
    result = swift_getWitnessTable(&unk_1006AB458, &_s6FieldsON_0);
    atomic_store(result, (unint64_t *)&qword_10083D470);
  }
  return result;
}

uint64_t sub_100164910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083D480);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083D480);
  if (qword_100837678 != -1)
    swift_once(&qword_100837678, sub_1004A1950);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100164A00()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t aBlock[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = *v0;
  if (qword_100836DE8 != -1)
    swift_once(&qword_100836DE8, sub_100164910);
  v3 = type metadata accessor for Logger(0);
  sub_10001AAA8(v3, (uint64_t)qword_10083D480);
  v4 = swift_retain_n(v0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    aBlock[0] = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = sub_1002AEF14();
    v11 = v10;
    v26 = sub_10001A820((uint64_t)v9, v10, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner BEGIN {persistentStore: %{public}s}", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v0);
  }
  v32 = 0;
  v31 = 0;
  v12 = (void *)v1[3];
  v13 = (_QWORD *)swift_allocObject(&unk_1007E7060, 48, 7);
  v13[2] = v1;
  v13[3] = &v32;
  v13[4] = &v31;
  v13[5] = v2;
  v14 = swift_allocObject(&unk_1007E7088, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100166408;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = (uint64_t)sub_1000098E4;
  v30 = v14;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000098C4;
  aBlock[3] = (uint64_t)&unk_1007E70A0;
  v15 = _Block_copy(aBlock);
  v16 = v30;
  swift_retain();
  swift_retain();
  swift_release(v16);
  objc_msgSend(v12, "performBlockAndWait:", v15);
  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation(v14, "", 125, 92, 49, 1);
  swift_release(v14);
  if ((v12 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v17 = swift_retain_n(v1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(32, -1);
      v21 = swift_slowAlloc(32, -1);
      v28 = v21;
      *(_DWORD *)v20 = 134218498;
      swift_beginAccess(&v32, aBlock, 0, 0);
      v26 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27);
      *(_WORD *)(v20 + 12) = 2048;
      swift_beginAccess(&v31, &v26, 0, 0);
      v25 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      *(_WORD *)(v20 + 22) = 2082;
      v22 = sub_1002AEF14();
      v24 = v23;
      v25 = sub_10001A820((uint64_t)v22, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_release_n(v1);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner FINISH {successfulMigrationCount: %ld, failedMigrationCount: %ld, persistentStore: %{public}s}", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
      swift_release(v13);

    }
    else
    {
      swift_release(v13);

      swift_release_n(v1);
    }
  }
}

double sub_100164E60(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t v29;
  _QWORD v30[3];
  _BYTE v31[8];
  uint64_t v32;

  v32 = sub_100165DD8();
  v14 = sub_10001A630(&qword_10083D590);
  v15 = sub_100166424();
  v16 = BidirectionalCollection<>.slices(by:)(50, v14, v15);
  swift_bridgeObjectRelease(v32);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    osloga = (os_log_t)v16;
    v18 = (unint64_t *)(v16 + 56);
    while (1)
    {
      v20 = *(v18 - 3);
      v19 = *(v18 - 2);
      v21 = *(v18 - 1);
      v22 = *v18;
      swift_unknownObjectRetain(v20);
      v23 = objc_autoreleasePoolPush();
      v24 = sub_100165140(v20, v19, v21, v22);
      if (__OFADD__(*a2, v24))
        break;
      *a2 += v24;
      if (__OFADD__(*a3, v25))
        goto LABEL_15;
      *a3 += v25;
      objc_autoreleasePoolPop(v23);
      swift_unknownObjectRelease(v20);
      v18 += 4;
      if (!--v17)
      {
        v26 = (uint64_t)osloga;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    swift_once(&qword_100836DE8, sub_100164910);
    v5 = type metadata accessor for Logger(0);
    sub_10001AAA8(v5, (uint64_t)qword_10083D480);
    swift_errorRetain(v18);
    v6 = swift_errorRetain(v18);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v32 = v9;
      *(_DWORD *)v8 = 136446210;
      swift_getErrorValue(v18, v31, v30);
      v10 = Error.rem_errorDescription.getter(v30[1], v30[2]);
      v12 = v11;
      v29 = sub_10001A820(v10, v11, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner failed to fetch Reminders {error: %{public}s}", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v18);
    }
    else
    {
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      swift_errorRelease(v18);

    }
  }
  else
  {
    v26 = v16;
LABEL_12:
    *(_QWORD *)&result = swift_bridgeObjectRelease(v26).n128_u64[0];
  }
  return result;
}

uint64_t sub_100165140(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  _QWORD *v37;
  BOOL v38;
  int v39;
  objc_class *v40;
  _BYTE *v41;
  void *v42;
  _QWORD *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  char *v49;
  id v50;
  id v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  int v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  void *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  os_log_t v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  unsigned int v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  __n128 v113;
  char *v114;
  __n128 v115;
  _QWORD *v116;
  int v117;
  os_log_t v118;
  uint64_t v119;
  id v120;
  _QWORD *v121;
  int v122;
  Class v123;
  void *v124;
  uint64_t v125;
  id v126;
  int v127;
  id v128;
  objc_super v129;
  _QWORD v130[3];
  char v131[8];
  id v132;
  uint64_t v133;
  char v134;
  _QWORD *v135;
  uint64_t v136;

  v6 = v4;
  v111 = type metadata accessor for CharacterSet(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v119 = 0;
  if (a4 >> 1 != a3)
  {
    v112 = a4 >> 1;
    v13 = swift_unknownObjectRetain(a1);
    v12 = 0;
    v119 = 0;
    v13.n128_u64[0] = 136446722;
    v115 = v13;
    v114 = (char *)&type metadata for Any + 8;
    v13.n128_u64[0] = 136446466;
    v113 = v13;
    v14 = v112;
    v107 = v4;
    v106 = a1;
    v105 = a2;
    do
    {
      if (a3 >= v14)
        goto LABEL_67;
      v15 = *(id *)(a2 + 8 * a3);
      if ((objc_msgSend(v15, "isSharedViaICloud") & 1) != 0)
      {
        v135 = _swiftEmptyArrayStorage;
        v120 = v15;
        v16 = objc_msgSend(v15, "title");
        if (v16)
        {
          v17 = v16;
          v18 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          v20 = v19;

          v132 = v18;
          v133 = v20;
          v5 = v109;
          static CharacterSet.hashtagTokenPrefixCharacters.getter();
          v21 = sub_1000E525C();
          StringProtocol.rangeOfCharacter(from:options:range:)(v5, 0, 0, 0, 1, &type metadata for String, v21);
          LOBYTE(v17) = v22;
          (*(void (**)(_BYTE *, uint64_t))(v110 + 8))(v5, v111);
          swift_bridgeObjectRelease(v20);
          if ((v17 & 1) == 0)
          {
            v23 = v135;
            if ((swift_isUniquelyReferenced_nonNull_native(v135) & 1) == 0)
            {
              sub_1001C1FF8(0, v23[2] + 1, 1);
              v23 = v135;
            }
            v5 = (_BYTE *)v23[2];
            v24 = v23[3];
            if ((unint64_t)v5 >= v24 >> 1)
            {
              sub_1001C1FF8(v24 > 1, (int64_t)(v5 + 1), 1);
              v23 = v135;
            }
            v23[2] = v5 + 1;
            v5[(_QWORD)v23 + 32] = 0;
          }
        }
        v25 = objc_msgSend(v120, "notes", v105, v106, v107);
        if (v25)
        {
          v26 = v25;
          v27 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v29 = v28;

          v132 = v27;
          v133 = v29;
          v5 = v109;
          static CharacterSet.hashtagTokenPrefixCharacters.getter();
          v30 = sub_1000E525C();
          StringProtocol.rangeOfCharacter(from:options:range:)(v5, 0, 0, 0, 1, &type metadata for String, v30);
          LOBYTE(v26) = v31;
          (*(void (**)(_BYTE *, uint64_t))(v110 + 8))(v5, v111);
          swift_bridgeObjectRelease(v29);
          if ((v26 & 1) == 0)
          {
            v32 = v135;
            if ((swift_isUniquelyReferenced_nonNull_native(v135) & 1) == 0)
            {
              sub_1001C1FF8(0, v32[2] + 1, 1);
              v32 = v135;
            }
            v5 = (_BYTE *)v32[2];
            v33 = v32[3];
            if ((unint64_t)v5 >= v33 >> 1)
            {
              sub_1001C1FF8(v33 > 1, (int64_t)(v5 + 1), 1);
              v32 = v135;
            }
            v32[2] = v5 + 1;
            v5[(_QWORD)v32 + 32] = 1;
          }
        }
        v34 = v135;
        v125 = v135[2];
        if (v125)
        {
          v108 = a3;
          v124 = *(void **)(v6 + 24);
          v123 = (Class)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter();
          v35 = 0;
          v36 = v120;
          v37 = v34;
          v121 = v34;
          while (1)
          {
            v39 = *((unsigned __int8 *)v37 + v35 + 32);
            v40 = v123;
            v41 = objc_allocWithZone(v123);
            *(_QWORD *)&v41[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder] = v36;
            v127 = v39;
            v41[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_field] = v39;
            v42 = v124;
            *(_QWORD *)&v41[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext] = v124;
            v43 = &v41[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName];
            *v43 = 0;
            v43[1] = 0;
            v44 = objc_allocWithZone((Class)RDPersistentStoreLookupForREMCDObject);
            v45 = v36;
            v46 = v42;
            v47 = v45;
            v48 = v46;
            v49 = v41;
            v50 = objc_msgSend(v44, "init:", v47);
            *(_QWORD *)&v49[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_persistentStoreLookup] = v50;

            v129.receiver = v49;
            v129.super_class = v40;
            v51 = objc_msgSendSuper2(&v129, "init");
            v128 = v47;

            v5 = (_BYTE *)sub_10012B28C();
            v54 = v53;
            v55 = v52;
            v56 = v52;
            if (v52 >> 6)
            {
              if (v52 >> 6 != 1)
              {
                v126 = v51;
                if (qword_100836DE8 != -1)
                  swift_once(&qword_100836DE8, sub_100164910);
                v69 = type metadata accessor for Logger(0);
                sub_10001AAA8(v69, (uint64_t)qword_10083D480);
                v5 = v128;
                v70 = Logger.logObject.getter(v5);
                v71 = static os_log_type_t.default.getter(v70);
                if (os_log_type_enabled(v70, v71))
                {
                  v72 = swift_slowAlloc(22, -1);
                  v73 = (void *)swift_slowAlloc(64, -1);
                  v132 = v73;
                  *(_DWORD *)v72 = v113.n128_u32[0];
                  v74 = objc_msgSend(v5, "remObjectID");
                  if (v74)
                  {
                    v75 = v74;
                    v76 = v12;
                    v77 = objc_msgSend(v74, "description");

                    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
                    v80 = v79;

                    v12 = v76;
                  }
                  else
                  {
                    v80 = 0xE300000000000000;
                    v78 = 7104878;
                  }
                  *(_QWORD *)(v72 + 4) = sub_10001A820(v78, v80, (uint64_t *)&v132);

                  swift_bridgeObjectRelease(v80);
                  *(_WORD *)(v72 + 12) = 2082;
                  if (v127)
                    v88 = 0x636F447365746F6ELL;
                  else
                    v88 = 0x636F44656C746974;
                  *(_QWORD *)(v72 + 14) = sub_10001A820(v88, 0xED0000746E656D75, (uint64_t *)&v132);
                  swift_bridgeObjectRelease(0xED0000746E656D75);
                  _os_log_impl((void *)&_mh_execute_header, v70, v71, "Reminder[%{public}s] conversion succeeded for field %{public}s", (uint8_t *)v72, 0x16u);
                  swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v73, -1, -1);
                  swift_slowDealloc(v72, -1, -1);

                  v37 = v121;
                }
                else
                {

                }
                v36 = v120;
                if (__OFADD__(v119, 1))
                  goto LABEL_66;
                ++v119;
                goto LABEL_25;
              }
              v56 = v52 & 0x3F;
            }
            if (qword_100836DE8 != -1)
              swift_once(&qword_100836DE8, sub_100164910);
            v57 = type metadata accessor for Logger(0);
            sub_10001AAA8(v57, (uint64_t)qword_10083D480);
            v58 = v128;
            v59 = sub_100166470((uint64_t)v5, v54, v55);
            v60 = Logger.logObject.getter(v59);
            v122 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v60, (os_log_type_t)v122))
            {
              v117 = v56;
              v118 = v60;
              v126 = v51;
              v61 = swift_slowAlloc(32, -1);
              v116 = (_QWORD *)swift_slowAlloc(96, -1);
              v135 = v116;
              *(_DWORD *)v61 = v115.n128_u32[0];
              v62 = objc_msgSend(v58, "remObjectID");
              if (v62)
              {
                v63 = v62;
                v64 = v12;
                v65 = objc_msgSend(v62, "description");

                v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
                v68 = v67;

                v12 = v64;
              }
              else
              {
                v68 = 0xE300000000000000;
                v66 = 7104878;
              }
              *(_QWORD *)(v61 + 4) = sub_10001A820(v66, v68, (uint64_t *)&v135);

              swift_bridgeObjectRelease(v68);
              *(_WORD *)(v61 + 12) = 2082;
              if (v127)
                v81 = 0x636F447365746F6ELL;
              else
                v81 = 0x636F44656C746974;
              *(_QWORD *)(v61 + 14) = sub_10001A820(v81, 0xED0000746E656D75, (uint64_t *)&v135);
              swift_bridgeObjectRelease(0xED0000746E656D75);
              *(_WORD *)(v61 + 22) = 2082;
              v132 = v5;
              v133 = v54;
              v134 = v117;
              v82 = sub_1001664A8();
              v83 = Error.rem_errorDescription.getter(&type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError, v82);
              v85 = v84;
              *(_QWORD *)(v61 + 24) = sub_10001A820(v83, v84, (uint64_t *)&v135);
              swift_bridgeObjectRelease(v85);
              sub_10016648C((uint64_t)v5, v54, v55);
              sub_10016648C((uint64_t)v5, v54, v55);
              v86 = v118;
              _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v122, "Reminder[%{public}s] conversion failed for field %{public}s {error: %{public}s}", (uint8_t *)v61, 0x20u);
              v87 = v116;
              swift_arrayDestroy(v116, 3, v114);
              swift_slowDealloc(v87, -1, -1);
              swift_slowDealloc(v61, -1, -1);

              v36 = v120;
            }
            else
            {

              sub_10016648C((uint64_t)v5, v54, v55);
              sub_10016648C((uint64_t)v5, v54, v55);

            }
            v38 = __OFADD__(v12++, 1);
            v37 = v121;
            if (v38)
            {
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              swift_once(&qword_100836DE8, sub_100164910);
LABEL_59:
              v95 = type metadata accessor for Logger(0);
              sub_10001AAA8(v95, (uint64_t)qword_10083D480);
              swift_errorRetain(v5);
              v96 = swift_errorRetain(v5);
              v97 = Logger.logObject.getter(v96);
              v98 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v97, v98))
              {
                v99 = (uint8_t *)swift_slowAlloc(12, -1);
                v100 = (void *)swift_slowAlloc(32, -1);
                v132 = v100;
                *(_DWORD *)v99 = 136446210;
                swift_getErrorValue(v5, v131, v130);
                v101 = Error.rem_errorDescription.getter(v130[1], v130[2]);
                v103 = v102;
                v135 = (_QWORD *)sub_10001A820(v101, v102, (uint64_t *)&v132);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);
                swift_bridgeObjectRelease(v103);
                swift_errorRelease(v5);
                swift_errorRelease(v5);
                _os_log_impl((void *)&_mh_execute_header, v97, v98, "RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner failed to save {error: %{public}s}", v99, 0xCu);
                swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v100, -1, -1);
                swift_slowDealloc(v99, -1, -1);

                swift_errorRelease(v5);
              }
              else
              {
                swift_errorRelease(v5);
                swift_errorRelease(v5);
                swift_errorRelease(v5);

              }
              if (__OFADD__(v12, v119))
                __break(1u);
              return 0;
            }
LABEL_25:
            if (v125 == ++v35)
            {

              swift_release(v37);
              v6 = v107;
              a1 = v106;
              a3 = v108;
              a2 = v105;
              goto LABEL_4;
            }
          }
        }

        swift_release(v34);
      }
      else
      {

      }
LABEL_4:
      ++a3;
      v14 = v112;
    }
    while (a3 != v112);
    swift_unknownObjectRelease(a1);
  }
  v89 = *(void **)(v6 + 24);
  if ((objc_msgSend(v89, "hasChanges", v105, v106, v107) & 1) != 0)
  {
    v132 = 0;
    v90 = objc_msgSend(v89, "save:", &v132);
    v91 = v132;
    if (!v90)
    {
      v93 = v132;
      v5 = (_BYTE *)_convertNSErrorToError(_:)(v91);

      swift_willThrow(v94);
      if (qword_100836DE8 != -1)
        goto LABEL_68;
      goto LABEL_59;
    }
    v92 = v132;
  }
  return v119;
}

uint64_t sub_100165DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v19[48];
  _BYTE v20[104];
  uint64_t v21;

  v1 = v0;
  v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v5, v20);
  *(_OWORD *)(inited + 16) = xmmword_1006A89A0;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006AB4E0);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006AB518);
  *(_QWORD *)(inited + 48) = swift_getKeyPath(&unk_1006AB548);
  *(_QWORD *)(inited + 56) = swift_getKeyPath(&unk_1006AB580);
  *(_QWORD *)(inited + 64) = swift_getKeyPath(&unk_1006AB5C8);
  *(_QWORD *)(inited + 72) = swift_getKeyPath(&unk_1006AB608);
  *(_QWORD *)(inited + 80) = swift_getKeyPath(&unk_1006AB640);
  *(_QWORD *)(inited + 88) = swift_getKeyPath(&unk_1006AB678);
  KeyPath = swift_getKeyPath(&unk_1006AB6B0);
  *(_QWORD *)(inited + 96) = KeyPath;
  v21 = inited;
  specialized Array._endMutation()(KeyPath);
  v8 = v21;
  v9 = swift_initStackObject(v5, v19);
  *(_OWORD *)(v9 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v9 + 32) = swift_getKeyPath(&unk_1006AB6E0);
  v10 = swift_getKeyPath(&unk_1006AB710);
  *(_QWORD *)(v9 + 40) = v10;
  v21 = v9;
  specialized Array._endMutation()(v10);
  v11 = v21;
  *v4 = *(_BYTE *)(v1 + 16);
  swift_storeEnumTagMultiPayload(v4, v2, 43);
  sub_10000D2C0();
  v13 = v12;
  sub_1000CACA8((uint64_t)v4);
  v14 = (void *)sub_100358798(v8, v11, 0, (uint64_t)v13);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v11);

  objc_msgSend(v14, "setFetchBatchSize:", 50);
  objc_msgSend(v14, "setReturnsObjectsAsFaults:", 0);
  v15 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v16 = NSManagedObjectContext.fetch<A>(_:)(v14, v15);

  return v16;
}

void sub_100166024(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0xF000000000000000;
  }
  *a3 = v6;
  a3[1] = v8;
}

void sub_100166084(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v6;
  Class isa;
  Class v8;

  v6 = *a2;
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v8 = isa;
  objc_msgSend(v6, *a5);

}

void sub_1001660E8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "ckZoneOwnerName");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10016614C(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setCkZoneOwnerName:");

}

uint64_t sub_1001661A8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 40, 7);
}

id sub_100166210()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_AutoConvertSharedInlineTags();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDStoreControllerMigrator_AutoConvertSharedInlineTags()
{
  return objc_opt_self(_TtC7remindd53RDStoreControllerMigrator_AutoConvertSharedInlineTags);
}

uint64_t type metadata accessor for RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner()
{
  return objc_opt_self(_TtCC7remindd53RDStoreControllerMigrator_AutoConvertSharedInlineTagsP33_6756D8040FA0DE7AE12E7CF0AECBEDFA6Runner);
}

const char *sub_10016628C()
{
  return "titleDocument";
}

void sub_100166298(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_titleDocument, a2);
}

void sub_1001662B4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setTitleDocument_);
}

const char *sub_1001662D0()
{
  return "notes";
}

const char *sub_1001662E4()
{
  return "notesDocument";
}

void sub_1001662F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_notesDocument, a2);
}

void sub_10016630C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setNotesDocument_);
}

const char *sub_100166328()
{
  return "ckServerShareData";
}

void sub_100166334(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_ckServerShareData, a2);
}

void sub_100166350(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setCkServerShareData_);
}

const char *sub_10016636C()
{
  return "ckServerRecordData";
}

void sub_100166378(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100166024(a1, (SEL *)&selRef_ckServerRecordData, a2);
}

void sub_100166394(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_100166084(a1, a2, a3, a4, (SEL *)&selRef_setCkServerRecordData_);
}

const char *sub_1001663B0()
{
  return "ckZoneOwnerName";
}

uint64_t sub_1001663E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

double sub_100166408()
{
  uint64_t v0;

  return sub_100164E60(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t sub_100166414()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100166424()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083D598;
  if (!qword_10083D598)
  {
    v1 = sub_1000A5A94(&qword_10083D590);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10083D598);
  }
  return result;
}

uint64_t sub_100166470(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >> 6)
  {
    if (a3 >> 6 != 1)
      return result;
    a3 &= 0x3Fu;
  }
  return sub_10013140C(result, a2, a3);
}

uint64_t sub_10016648C(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >> 6)
  {
    if (a3 >> 6 != 1)
      return result;
    a3 &= 0x3Fu;
  }
  return sub_100131448(result, a2, a3);
}

unint64_t sub_1001664A8()
{
  unint64_t result;

  result = qword_10083D5A0;
  if (!qword_10083D5A0)
  {
    result = swift_getWitnessTable(&unk_1006A9AFC, &type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError);
    atomic_store(result, (unint64_t *)&qword_10083D5A0);
  }
  return result;
}

uint64_t sub_1001664EC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];
  uint64_t v4;

  v3[2] = a1;
  v3[3] = a2;
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&v4, sub_1000D9BBC, v3, &type metadata for Bool);
  return v4;
}

void sub_1001666EC(char a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v17 = objc_msgSend(objc_allocWithZone((Class)NSManagedObjectContext), "initWithConcurrencyType:", 1);
  v4 = objc_msgSend(a2, "persistentStoreCoordinator");
  objc_msgSend(v17, "setPersistentStoreCoordinator:", v4);

  objc_msgSend(v17, "setTransactionAuthor:", RDStoreControllerAutoConvertSharedInlineTagsMigrationAuthor);
  objc_msgSend(v17, "setUndoManager:", 0);
  objc_msgSend(v17, "setRetainsRegisteredObjects:", 1);
  if ((sub_1001664EC((uint64_t)a2, (uint64_t)v17) & 1) != 0)
  {
    v5 = type metadata accessor for RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner();
    v6 = swift_allocObject(v5, 40, 7);
    *(_BYTE *)(v6 + 16) = a1 & 1;
    *(_QWORD *)(v6 + 24) = v17;
    *(_QWORD *)(v6 + 32) = a2;
    v17 = v17;
    v7 = a2;
    sub_100164A00();
    swift_release(v6);
  }
  else
  {
    if (qword_100836DE8 != -1)
      swift_once(&qword_100836DE8, sub_100164910);
    v8 = type metadata accessor for Logger(0);
    sub_10001AAA8(v8, (uint64_t)qword_10083D480);
    v9 = a2;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136446210;
      v14 = sub_1002AEF14();
      v16 = v15;
      v18 = sub_10001A820((uint64_t)v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);

      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDStoreControllerMigrator_AutoConvertSharedInlineTags: Skipping persistentStore since its account is not a CK account {persistentStore: %{public}s}", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      return;
    }

  }
}

void sub_100166998(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  Class isa;
  uint64_t v10;
  id v11;
  _OWORD v12[2];
  _QWORD v13[4];

  *(_QWORD *)&v12[0] = 0xD000000000000035;
  *((_QWORD *)&v12[0] + 1) = 0x80000001006AB460;
  v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v12, &type metadata for String);
  v5 = objc_msgSend(a2, "__swift_objectForKeyedSubscript:", v4);
  swift_unknownObjectRelease(v4);
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_10001A5E8((uint64_t)v12, (uint64_t)v13);
  if (!v13[3])
  {
    sub_1000F4294((uint64_t)v13);
LABEL_9:
    sub_1001666EC(1, a1);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v13[0] = 0xD000000000000035;
    v13[1] = 0x80000001006AB460;
    v10 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v13, &type metadata for String);
    objc_msgSend(a2, "__swift_setObject:forKeyedSubscript:", isa, v10);

    swift_unknownObjectRelease(v10);
    return;
  }
  v6 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, v6, 6) & 1) == 0)
    goto LABEL_9;
  v7 = v11;
  v8 = objc_msgSend(v11, "integerValue");

  if ((uint64_t)v8 <= 0)
    goto LABEL_9;
}

uint64_t sub_100166B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t MetatypeMetadata;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  Class isa;
  id v31;
  id v32;
  uint64_t v33;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  _BYTE v63[16];
  id v64;
  _BYTE v65[24];
  uint64_t v66[4];

  v6 = v5;
  v12 = type metadata accessor for String.Encoding(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v14);
  v17 = String.data(using:allowLossyConversion:)(v16, 0, a1, a2);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (v19 >> 60 == 15)
  {
    if (qword_100836DF0 != -1)
      swift_once(&qword_100836DF0, sub_1001671F0);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001AAA8(v20, (uint64_t)qword_10083D5C0);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v66[0] = v25;
      *(_DWORD *)v24 = 136315138;
      v64 = v6;
      MetatypeMetadata = swift_getMetatypeMetadata(a3);
      v27 = String.init<A>(describing:)(&v64, MetatypeMetadata);
      v64 = (id)sub_10001A820(v27, v28, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "RDJSONDecoding can't encode input string as utf8 data {class: %s}", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, 1, 1, a3);
  }
  v29 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v64 = 0;
  v31 = objc_msgSend(v29, "JSONObjectWithData:options:error:", isa, 0, &v64);

  v32 = v64;
  if (v31)
  {
    _bridgeAnyObjectToAny(_:)(v66, v31);
    swift_unknownObjectRelease(v31);
    sub_10001A670((uint64_t)v66, (uint64_t)&v64);
    v33 = sub_10001A630((uint64_t *)&unk_1008473E0);
    if (swift_dynamicCast(&v61, &v64, (char *)&type metadata for Any + 8, v33, 6))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 8))(v61, a3, a4);
      sub_1000A71B4(v17, v19);
      swift_bridgeObjectRelease();
      return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v66);
    }
    if (qword_100836DF0 != -1)
      swift_once(&qword_100836DF0, sub_1001671F0);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10001AAA8(v49, (uint64_t)qword_10083D5C0);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = (void *)swift_slowAlloc(32, -1);
      v64 = v54;
      v60 = a5;
      v61 = (uint64_t)v6;
      *(_DWORD *)v53 = 136315138;
      v55 = swift_getMetatypeMetadata(a3);
      v56 = String.init<A>(describing:)(&v61, v55);
      v61 = sub_10001A820(v56, v57, (uint64_t *)&v64);
      a5 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Invalid JSONSerialization.jsonObject return value {class: %s}", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    sub_1000A71B4(v17, v19);

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v66);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, 1, 1, a3);
  }
  v35 = v32;
  v60 = a5;
  v36 = _convertNSErrorToError(_:)(v32);

  swift_willThrow(v37);
  if (qword_100836DF0 != -1)
    swift_once(&qword_100836DF0, sub_1001671F0);
  v38 = type metadata accessor for Logger(0);
  sub_10001AAA8(v38, (uint64_t)qword_10083D5C0);
  swift_errorRetain(v36);
  v39 = swift_errorRetain(v36);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = swift_slowAlloc(22, -1);
    v59 = swift_slowAlloc(64, -1);
    v66[0] = v59;
    *(_DWORD *)v42 = 136315394;
    v64 = v6;
    v43 = swift_getMetatypeMetadata(a3);
    v44 = String.init<A>(describing:)(&v64, v43);
    v64 = (id)sub_10001A820(v44, v45, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2080;
    swift_getErrorValue(v36, v63, v62);
    v46 = Error.localizedDescription.getter(v62[1], v62[2]);
    v64 = (id)sub_10001A820(v46, v47, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
    swift_bridgeObjectRelease();
    swift_errorRelease(v36);
    swift_errorRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "RDJSONDecoding can't decode JSON {class: %s, error: %s}", (uint8_t *)v42, 0x16u);
    v48 = v59;
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v42, -1, -1);
    sub_1000A71B4(v17, v19);

    swift_errorRelease(v36);
  }
  else
  {
    sub_1000A71B4(v17, v19);
    swift_errorRelease(v36);
    swift_errorRelease(v36);
    swift_errorRelease(v36);

  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v60, 1, 1, a3);
}

uint64_t sub_1001671F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083D5C0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083D5C0);
  if (qword_1008376A0 != -1)
    swift_once(&qword_1008376A0, sub_1004A19DC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008721C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100167340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  Class isa;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _BYTE v11[24];
  _BYTE v12[32];
  _BYTE v13[24];
  _QWORD v14[4];

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v14[3] = sub_1000E6B70();
  v14[0] = isa;
  v7 = v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
  swift_beginAccess(v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts, v13, 0, 0);
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 16);
  sub_10001A670((uint64_t)v14, (uint64_t)v12);
  swift_beginAccess(v7, v11, 33, 0);
  v9 = *(_QWORD **)v7;
  swift_bridgeObjectRetain(a3);
  result = swift_isUniquelyReferenced_nonNull_native(v9);
  *(_QWORD *)v7 = v9;
  if ((result & 1) != 0)
  {
    if (v8)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_1001CEC2C(v9);
  v9 = (_QWORD *)result;
  *(_QWORD *)v7 = result;
  if (!v8)
    goto LABEL_6;
LABEL_3:
  if (v8 <= v9[2])
  {
    sub_100312168((uint64_t)v12, a2, a3);
    swift_endAccess(v11);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v14);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1001674A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  Class isa;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _BYTE v11[24];
  _BYTE v12[32];
  _BYTE v13[24];
  _QWORD v14[4];

  isa = Int32._bridgeToObjectiveC()().super.super.isa;
  v14[3] = sub_1000E6B70();
  v14[0] = isa;
  v7 = v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
  swift_beginAccess(v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts, v13, 0, 0);
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 16);
  sub_10001A670((uint64_t)v14, (uint64_t)v12);
  swift_beginAccess(v7, v11, 33, 0);
  v9 = *(_QWORD **)v7;
  swift_bridgeObjectRetain(a3);
  result = swift_isUniquelyReferenced_nonNull_native(v9);
  *(_QWORD *)v7 = v9;
  if ((result & 1) != 0)
  {
    if (v8)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_1001CEC2C(v9);
  v9 = (_QWORD *)result;
  *(_QWORD *)v7 = result;
  if (!v8)
    goto LABEL_6;
LABEL_3:
  if (v8 <= v9[2])
  {
    sub_100312168((uint64_t)v12, a2, a3);
    swift_endAccess(v11);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v14);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100167600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  Class isa;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _BYTE v11[24];
  _BYTE v12[32];
  _BYTE v13[24];
  _QWORD v14[4];

  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v14[3] = sub_1000E6B70();
  v14[0] = isa;
  v7 = v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
  swift_beginAccess(v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts, v13, 0, 0);
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 16);
  sub_10001A670((uint64_t)v14, (uint64_t)v12);
  swift_beginAccess(v7, v11, 33, 0);
  v9 = *(_QWORD **)v7;
  swift_bridgeObjectRetain(a3);
  result = swift_isUniquelyReferenced_nonNull_native(v9);
  *(_QWORD *)v7 = v9;
  if ((result & 1) != 0)
  {
    if (v8)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_1001CEC2C(v9);
  v9 = (_QWORD *)result;
  *(_QWORD *)v7 = result;
  if (!v8)
    goto LABEL_6;
LABEL_3:
  if (v8 <= v9[2])
  {
    sub_100312168((uint64_t)v12, a2, a3);
    swift_endAccess(v11);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v14);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100167760(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Class isa;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _BYTE v10[24];
  _BYTE v11[32];
  _BYTE v12[24];
  _QWORD v13[4];

  isa = Double._bridgeToObjectiveC()().super.super.isa;
  v13[3] = sub_1000E6B70();
  v13[0] = isa;
  v6 = v2 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
  swift_beginAccess(v2 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts, v12, 0, 0);
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  sub_10001A670((uint64_t)v13, (uint64_t)v11);
  swift_beginAccess(v6, v10, 33, 0);
  v8 = *(_QWORD **)v6;
  swift_bridgeObjectRetain(a2);
  result = swift_isUniquelyReferenced_nonNull_native(v8);
  *(_QWORD *)v6 = v8;
  if ((result & 1) != 0)
  {
    if (v7)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_1001CEC2C(v8);
  v8 = (_QWORD *)result;
  *(_QWORD *)v6 = result;
  if (!v7)
    goto LABEL_6;
LABEL_3:
  if (v7 <= v8[2])
  {
    sub_100312168((uint64_t)v11, a1, a2);
    swift_endAccess(v10);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v13);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100167978(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v5;
  unint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[24];
  _OWORD v16[2];
  _BYTE v17[24];

  if (a3)
  {
    v5 = a3;
    v7 = v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts;
    swift_beginAccess(v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts, v17, 0, 0);
    v8 = *(_QWORD **)(*(_QWORD *)v7 + 16);
    sub_10001A670((uint64_t)a1, (uint64_t)v16);
    swift_beginAccess(v7, v15, 33, 0);
    a1 = *(_QWORD **)v7;
    swift_bridgeObjectRetain(v5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    *(_QWORD *)v7 = a1;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if (v8)
        goto LABEL_4;
    }
    else
    {
      a1 = sub_1001CEC2C(a1);
      *(_QWORD *)v7 = a1;
      if (v8)
      {
LABEL_4:
        if ((unint64_t)v8 <= a1[2])
        {
          sub_100312168((uint64_t)v16, a2, (uint64_t)v5);
          return swift_endAccess(v15);
        }
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    v8 = sub_1001CEC18(v8);
    *v5 = v8;
    if (!v7)
      goto LABEL_18;
    goto LABEL_8;
  }
  v5 = (_QWORD *)(v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_arrays);
  swift_beginAccess(v3 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_arrays, v17, 0, 0);
  v7 = *(_QWORD *)(*v5 + 16);
  sub_10001A670((uint64_t)a1, (uint64_t)v16);
  swift_beginAccess(v5, v15, 33, 0);
  v8 = (_QWORD *)*v5;
  v10 = swift_isUniquelyReferenced_nonNull_native(*v5);
  *v5 = v8;
  if ((v10 & 1) == 0)
    goto LABEL_17;
  if (!v7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_8:
  if (v7 > v8[2])
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  --v7;
  a1 = v8 + 4;
  v5 = (_QWORD *)v8[v7 + 4];
  v11 = swift_isUniquelyReferenced_nonNull_native(v5);
  v8[v7 + 4] = v5;
  if ((v11 & 1) == 0)
  {
LABEL_20:
    v5 = sub_1002C8358(0, v5[2] + 1, 1, v5);
    a1[v7] = v5;
  }
  v13 = v5[2];
  v12 = v5[3];
  if (v13 >= v12 >> 1)
  {
    v5 = sub_1002C8358((_QWORD *)(v12 > 1), v13 + 1, 1, v5);
    a1[v7] = v5;
  }
  v5[2] = v13 + 1;
  sub_10001A6CC(v16, &v5[4 * v13 + 4]);
  return swift_endAccess(v15);
}

void sub_100167B80(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 **v22;
  __int128 *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 *v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  int64_t v96;
  char *v97;
  uint64_t v98;
  __int128 **v99;
  int64_t v100;
  _BYTE *v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  __int128 *v108;
  _OWORD v109[2];
  _BYTE v110[24];
  __int128 v111;
  uint64_t v112;
  _OWORD v113[2];
  __int128 v114;
  _BYTE v115[32];
  __int128 v116;
  char v117;
  void *v118;

  v4 = v3;
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E6B28(a1, (uint64_t)&v116);
  v15 = (uint64_t)&type metadata for Any;
  if (v118)
  {
    if ((swift_dynamicCast(&v114, &v116, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v118 = &type metadata for String;
      v116 = v114;
LABEL_104:
      sub_100167978(&v116, a2, (_QWORD *)a3);
      goto LABEL_105;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v116, (uint64_t *)&unk_10083D5B0);
  }
  sub_1000E6B28(a1, (uint64_t)&v116);
  if (v118)
  {
    v16 = swift_dynamicCast(v10, &v116, (char *)&type metadata for Any + 8, v11, 6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, v16 ^ 1u, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
      v18 = UUID.uuidString.getter(v17);
      v118 = &type metadata for String;
      *(_QWORD *)&v116 = v18;
      *((_QWORD *)&v116 + 1) = v19;
      sub_100167978(&v116, a2, (_QWORD *)a3);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      goto LABEL_105;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v116, (uint64_t *)&unk_10083D5B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
  sub_1000E6B28(a1, (uint64_t)&v116);
  v106 = a3;
  v105 = a2;
  if (v118)
  {
    v20 = sub_10001A630(&qword_1008442B0);
    if ((swift_dynamicCast(&v114, &v116, (char *)&type metadata for Any + 8, v20, 6) & 1) != 0)
    {
      v21 = v114;
      v22 = (__int128 **)((char *)v4 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_arrays);
      swift_beginAccess((char *)v4 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_arrays, &v116, 33, 0);
      v23 = *v22;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v22);
      *v22 = v23;
      v107 = (void *)v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_131;
      goto LABEL_12;
    }
  }
  else
  {
    sub_10000882C((uint64_t)&v116, (uint64_t *)&unk_10083D5B0);
  }
  sub_1000E6B28(a1, (uint64_t)&v116);
  if (!v118)
  {
    sub_10000882C((uint64_t)&v116, (uint64_t *)&unk_10083D5B0);
    return;
  }
  v36 = sub_10001A630((uint64_t *)&unk_10083D620);
  if ((swift_dynamicCast(&v114, &v116, (char *)&type metadata for Any + 8, v36, 6) & 1) != 0)
  {
    v97 = (char *)v114;
    v37 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v22 = (__int128 **)((char *)v4 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts);
    swift_beginAccess((char *)v4 + OBJC_IVAR____TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder_dicts, &v116, 33, 0);
    v38 = *v22;
    v39 = swift_isUniquelyReferenced_nonNull_native(*v22);
    *v22 = v38;
    if ((v39 & 1) == 0)
    {
      v38 = (__int128 *)sub_1002C8EEC(0, *((_QWORD *)v38 + 2) + 1, 1, v38);
      *v22 = v38;
    }
    v41 = *((_QWORD *)v38 + 2);
    v40 = *((_QWORD *)v38 + 3);
    v10 = (char *)(v41 + 1);
    if (v41 >= v40 >> 1)
    {
      v38 = (__int128 *)sub_1002C8EEC((_QWORD *)(v40 > 1), v41 + 1, 1, v38);
      *v22 = v38;
    }
    *((_QWORD *)v38 + 2) = v10;
    *((_QWORD *)v38 + v41 + 4) = v37;
    swift_endAccess(&v116);
    sub_1000E6B28(a1, (uint64_t)&v116);
    if (v118)
    {
      v42 = sub_10001A630((uint64_t *)&unk_1008473E0);
      v23 = &v116;
      if ((swift_dynamicCast(&v114, &v116, (char *)&type metadata for Any + 8, v42, 6) & 1) != 0)
      {
        v104 = 0;
        v43 = *(_QWORD *)(v114 + 64);
        v98 = v114 + 64;
        v102 = v114;
        v44 = 1 << *(_BYTE *)(v114 + 32);
        v45 = -1;
        if (v44 < 64)
          v45 = ~(-1 << v44);
        v21 = v45 & v43;
        v101 = v115;
        v103 = &v117;
        v100 = (unint64_t)(v44 + 63) >> 6;
        v96 = v100 - 1;
        v99 = v22;
        while (1)
        {
          if (v21)
          {
            v47 = __clz(__rbit64(v21));
            v21 &= v21 - 1;
            v48 = v47 | (v104 << 6);
            goto LABEL_50;
          }
          v52 = v104 + 1;
          if (__OFADD__(v104, 1))
            goto LABEL_129;
          if (v52 >= v100)
            goto LABEL_68;
          v53 = *(_QWORD *)(v98 + 8 * v52);
          if (v53)
            goto LABEL_54;
          v54 = v104 + 2;
          ++v104;
          if (v52 + 1 >= v100)
            goto LABEL_68;
          v53 = *(_QWORD *)(v98 + 8 * v54);
          if (v53)
            goto LABEL_57;
          v104 = v52 + 1;
          if (v52 + 2 >= v100)
            goto LABEL_68;
          v53 = *(_QWORD *)(v98 + 8 * (v52 + 2));
          if (v53)
          {
            v52 += 2;
LABEL_54:
            v21 = (v53 - 1) & v53;
            v48 = __clz(__rbit64(v53)) + (v52 << 6);
            v104 = v52;
LABEL_50:
            v49 = *(_QWORD *)(v102 + 56);
            v50 = (_QWORD *)(*(_QWORD *)(v102 + 48) + 16 * v48);
            v51 = v50[1];
            *(_QWORD *)&v114 = *v50;
            *((_QWORD *)&v114 + 1) = v51;
            sub_10001A670(v49 + 32 * v48, (uint64_t)v101);
            swift_bridgeObjectRetain(v51);
            goto LABEL_69;
          }
          v54 = v52 + 3;
          v104 = v52 + 2;
          if (v52 + 3 >= v100)
            goto LABEL_68;
          v53 = *(_QWORD *)(v98 + 8 * v54);
          if (v53)
          {
LABEL_57:
            v52 = v54;
            goto LABEL_54;
          }
          while (1)
          {
            v52 = v54 + 1;
            if (__OFADD__(v54, 1))
            {
              __break(1u);
              goto LABEL_140;
            }
            if (v52 >= v100)
              break;
            v53 = *(_QWORD *)(v98 + 8 * v52);
            ++v54;
            if (v53)
              goto LABEL_54;
          }
          v104 = v96;
LABEL_68:
          v21 = 0;
          memset(v115, 0, sizeof(v115));
          v114 = 0u;
LABEL_69:
          sub_100168C48((uint64_t)&v114, (uint64_t)&v116);
          v10 = (char *)*((_QWORD *)&v116 + 1);
          if (!*((_QWORD *)&v116 + 1))
          {
            swift_release(v102);
            v10 = v97;
LABEL_114:
            v86 = *((_QWORD *)*v22 + 2);
            if (!v86)
            {
              if (qword_100836DF0 != -1)
                swift_once(&qword_100836DF0, sub_1001671F0);
              v90 = type metadata accessor for Logger(0);
              v91 = sub_10001AAA8(v90, (uint64_t)qword_10083D5C0);
              v92 = Logger.logObject.getter(v91);
              v93 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v92, v93))
              {
                v94 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v94 = 0;
                _os_log_impl((void *)&_mh_execute_header, v92, v93, "JSON encode error: expected at least one dict", v94, 2u);
                swift_slowDealloc(v94, -1, -1);
                swift_unknownObjectRelease(v10);

              }
              else
              {

                swift_unknownObjectRelease(v10);
              }
              return;
            }
            v76 = *((_QWORD *)*v22 + v86 + 3);
            swift_beginAccess(v22, &v116, 33, 0);
            v77 = *v22;
            if (*((_QWORD *)*v22 + 2))
            {
              swift_bridgeObjectRetain(v76);
              if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) != 0)
              {
                v87 = *((_QWORD *)v77 + 2);
                if (v87)
                  goto LABEL_118;
LABEL_137:
                __break(1u);
LABEL_138:
                swift_once(&qword_100836DF0, sub_1001671F0);
LABEL_108:
                v81 = type metadata accessor for Logger(0);
                v82 = sub_10001AAA8(v81, (uint64_t)qword_10083D5C0);
                v83 = Logger.logObject.getter(v82);
                v84 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v83, v84))
                {
                  v85 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v85 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v83, v84, "JSON encode error: expected at least one array", v85, 2u);
                  swift_slowDealloc(v85, -1, -1);
                }

                return;
              }
LABEL_136:
              v77 = (__int128 *)sub_1001CEC2C(v77);
              v87 = *((_QWORD *)v77 + 2);
              if (!v87)
                goto LABEL_137;
LABEL_118:
              v88 = v87 - 1;
              v89 = *((_QWORD *)v77 + v88 + 4);
              *((_QWORD *)v77 + 2) = v88;
              *v22 = v77;
              swift_endAccess(&v116);
              swift_bridgeObjectRelease(v89);
              v118 = (void *)sub_10001A630((uint64_t *)&unk_1008473E0);
              *(_QWORD *)&v116 = v76;
              sub_100167978(&v116, a2, (_QWORD *)a3);
              swift_unknownObjectRelease(v10);
LABEL_105:
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v116);
              return;
            }
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
          v55 = v116;
          sub_10001A6CC(v103, &v114);
          sub_10001A670((uint64_t)&v114, (uint64_t)v113);
          v56 = sub_1000E6B70();
          if (swift_dynamicCast(&v111, v113, (char *)&type metadata for Any + 8, v56, 6))
          {
            v107 = (void *)v21;

            sub_10001A670((uint64_t)&v114, (uint64_t)v113);
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v113);
            goto LABEL_74;
          }
          sub_10001A670((uint64_t)&v114, (uint64_t)v113);
          sub_10001A6CC(v113, &v111);
          if (!swift_dynamicCast(v109, &v111, (char *)&type metadata for Any + 8, &type metadata for String, 6))
          {
            sub_10001A670((uint64_t)&v114, (uint64_t)&v111);
            v23 = v4;
            sub_100167B80(&v111, v55, v10);
            swift_bridgeObjectRelease(v10);
            sub_10000882C((uint64_t)&v111, (uint64_t *)&unk_10083D5B0);
            goto LABEL_47;
          }
          v107 = (void *)v21;
          swift_bridgeObjectRelease(*((_QWORD *)&v109[0] + 1));
LABEL_74:
          v21 = *((_QWORD *)*v22 + 2);
          sub_10001A670((uint64_t)&v114, (uint64_t)&v111);
          swift_beginAccess(v22, v110, 33, 0);
          v23 = *v22;
          swift_bridgeObjectRetain(v10);
          v57 = swift_isUniquelyReferenced_nonNull_native(v23);
          *v22 = v23;
          if ((v57 & 1) != 0)
          {
            if (!v21)
              goto LABEL_126;
          }
          else
          {
            v23 = (__int128 *)sub_1001CEC2C(v23);
            *v22 = v23;
            if (!v21)
              goto LABEL_126;
          }
          if (v21 > *((_QWORD *)v23 + 2))
            break;
          v58 = v21 - 1;
          a3 = (unint64_t)(v23 + 2);
          if (v112)
          {
            v22 = (__int128 **)v4;
            sub_10001A6CC(&v111, v109);
            a2 = 8 * v58;
            v15 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a3 + a2));
            v108 = *(__int128 **)(a3 + a2);
            v23 = v108;
            *(_QWORD *)(a3 + a2) = 0x8000000000000000;
            v21 = sub_10001A6DC(v55, (uint64_t)v10);
            v60 = *((_QWORD *)v23 + 2);
            v61 = (v59 & 1) == 0;
            v62 = v60 + v61;
            if (__OFADD__(v60, v61))
              goto LABEL_128;
            v63 = v59;
            if (*((_QWORD *)v23 + 3) < v62)
            {
              sub_1002D0024(v62, v15);
              v23 = v108;
              v64 = sub_10001A6DC(v55, (uint64_t)v10);
              if ((v63 & 1) == (v65 & 1))
              {
                v21 = v64;
                goto LABEL_89;
              }
LABEL_140:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              __break(1u);
              return;
            }
            if ((v15 & 1) == 0)
            {
              v23 = (__int128 *)&v108;
              sub_1002D7BCC();
            }
LABEL_89:
            v15 = (uint64_t)v108;
            if ((v63 & 1) != 0)
            {
              v46 = (_QWORD *)(*((_QWORD *)v108 + 7) + 32 * v21);
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v46);
              sub_10001A6CC(v109, v46);
            }
            else
            {
              *((_QWORD *)v108 + (v21 >> 6) + 8) |= 1 << v21;
              v71 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * v21);
              *v71 = v55;
              v71[1] = (uint64_t)v10;
              sub_10001A6CC(v109, (_OWORD *)(*(_QWORD *)(v15 + 56) + 32 * v21));
              v72 = *(_QWORD *)(v15 + 16);
              v73 = __OFADD__(v72, 1);
              v74 = v72 + 1;
              if (v73)
                goto LABEL_130;
              *(_QWORD *)(v15 + 16) = v74;
              swift_bridgeObjectRetain(v10);
            }
            v4 = (__int128 *)v22;
            v21 = (unint64_t)v107;
            v23 = *(__int128 **)(a3 + a2);
            *(_QWORD *)(a3 + a2) = v15;
            swift_bridgeObjectRelease(v10);
            swift_bridgeObjectRelease(v23);
            a3 = v106;
            a2 = v105;
            v15 = (uint64_t)&type metadata for Any;
            v22 = v99;
          }
          else
          {
            sub_10000882C((uint64_t)&v111, (uint64_t *)&unk_10083D5B0);
            v23 = *(__int128 **)(a3 + 8 * v58);
            swift_bridgeObjectRetain(v23);
            v66 = sub_10001A6DC(v55, (uint64_t)v10);
            v68 = v67;
            swift_bridgeObjectRelease(v23);
            if ((v68 & 1) != 0)
            {
              v69 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a3 + 8 * v58));
              v23 = *(__int128 **)(a3 + 8 * v58);
              v108 = v23;
              *(_QWORD *)(a3 + 8 * v58) = 0x8000000000000000;
              if ((v69 & 1) == 0)
              {
                sub_1002D7BCC();
                v23 = v108;
              }
              swift_bridgeObjectRelease(*(_QWORD *)(*((_QWORD *)v23 + 6) + 16 * v66 + 8));
              sub_10001A6CC((_OWORD *)(*((_QWORD *)v23 + 7) + 32 * v66), v109);
              sub_10028A480(v66, (uint64_t)v23);
              v70 = *(_QWORD *)(a3 + 8 * v58);
              *(_QWORD *)(a3 + 8 * v58) = v23;
              swift_bridgeObjectRelease(v70);
            }
            else
            {
              memset(v109, 0, sizeof(v109));
            }
            a3 = v106;
            a2 = v105;
            swift_bridgeObjectRelease(v10);
            sub_10000882C((uint64_t)v109, (uint64_t *)&unk_10083D5B0);
            v21 = (unint64_t)v107;
          }
          swift_endAccess(v110);
          swift_bridgeObjectRelease(v10);
LABEL_47:
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v114);
        }
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        v23 = (__int128 *)sub_1002C91F0(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
        *v22 = v23;
LABEL_12:
        v26 = *((_QWORD *)v23 + 2);
        v25 = *((_QWORD *)v23 + 3);
        if (v26 >= v25 >> 1)
        {
          v23 = (__int128 *)sub_1002C91F0((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
          *v22 = v23;
        }
        *((_QWORD *)v23 + 2) = v26 + 1;
        *((_QWORD *)v23 + v26 + 4) = _swiftEmptyArrayStorage;
        swift_endAccess(&v116);
        v27 = *(_QWORD *)(v21 + 16);
        if (v27)
        {
          v104 = v21;
          a2 = v21 + 32;
          v28 = v15 + 8;
          while (1)
          {
            sub_10001A670(a2, (uint64_t)&v116);
            sub_10001A670((uint64_t)&v116, (uint64_t)&v114);
            v29 = sub_1000E6B70();
            if (swift_dynamicCast(v113, &v114, v28, v29, 6))
            {

              sub_10001A670((uint64_t)&v116, (uint64_t)&v114);
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v114);
            }
            else
            {
              sub_10001A670((uint64_t)&v116, (uint64_t)&v114);
              sub_10001A6CC(&v114, v113);
              if (!swift_dynamicCast(&v111, v113, v15 + 8, &type metadata for String, 6))
              {
                sub_10001A670((uint64_t)&v116, (uint64_t)v113);
                sub_100167B80(v113, 0, 0);
                sub_10000882C((uint64_t)v113, (uint64_t *)&unk_10083D5B0);
                _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v116);
                goto LABEL_17;
              }
              swift_bridgeObjectRelease(*((_QWORD *)&v111 + 1));
            }
            v21 = *((_QWORD *)*v22 + 2);
            sub_10001A670((uint64_t)&v116, (uint64_t)v113);
            swift_beginAccess(v22, &v111, 33, 0);
            v23 = *v22;
            v30 = swift_isUniquelyReferenced_nonNull_native(*v22);
            *v22 = v23;
            if ((v30 & 1) != 0)
            {
              if (!v21)
                goto LABEL_124;
            }
            else
            {
              v23 = (__int128 *)sub_1001CEC18(v23);
              *v22 = v23;
              if (!v21)
              {
LABEL_124:
                __break(1u);
LABEL_125:
                __break(1u);
LABEL_126:
                __break(1u);
                goto LABEL_127;
              }
            }
            if (v21 > *((_QWORD *)v23 + 2))
              goto LABEL_125;
            a3 = v21 - 1;
            v10 = (char *)(v23 + 2);
            v31 = 8 * (v21 - 1);
            v32 = *(_QWORD **)((char *)v23 + v31 + 32);
            v33 = swift_isUniquelyReferenced_nonNull_native(v32);
            *(_QWORD *)&v10[v31] = v32;
            if ((v33 & 1) == 0)
            {
              v32 = sub_1002C8358(0, v32[2] + 1, 1, v32);
              *(_QWORD *)&v10[8 * a3] = v32;
            }
            v35 = v32[2];
            v34 = v32[3];
            if (v35 >= v34 >> 1)
            {
              v32 = sub_1002C8358((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
              *(_QWORD *)&v10[8 * a3] = v32;
            }
            v32[2] = v35 + 1;
            sub_10001A6CC(v113, &v32[4 * v35 + 4]);
            swift_endAccess(&v111);
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v116);
            v15 = (uint64_t)&type metadata for Any;
LABEL_17:
            a2 += 32;
            if (!--v27)
            {
              swift_bridgeObjectRelease(v104);
              a3 = v106;
              a2 = v105;
              goto LABEL_99;
            }
          }
        }
        swift_bridgeObjectRelease(v21);
LABEL_99:
        v75 = *((_QWORD *)*v22 + 2);
        if (!v75)
        {
          if (qword_100836DF0 != -1)
            goto LABEL_138;
          goto LABEL_108;
        }
        v76 = *((_QWORD *)*v22 + v75 + 3);
        swift_beginAccess(v22, &v116, 33, 0);
        v77 = *v22;
        if (*((_QWORD *)*v22 + 2))
        {
          swift_bridgeObjectRetain(v76);
          if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) != 0)
          {
            v78 = *((_QWORD *)v77 + 2);
            if (v78)
            {
LABEL_103:
              v79 = v78 - 1;
              v80 = *((_QWORD *)v77 + v79 + 4);
              *((_QWORD *)v77 + 2) = v79;
              *v22 = v77;
              swift_endAccess(&v116);
              swift_bridgeObjectRelease(v80);
              v118 = v107;
              *(_QWORD *)&v116 = v76;
              goto LABEL_104;
            }
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
        }
        else
        {
          __break(1u);
        }
        v77 = (__int128 *)sub_1001CEC18(v77);
        v78 = *((_QWORD *)v77 + 2);
        if (v78)
          goto LABEL_103;
        goto LABEL_134;
      }
    }
    else
    {
      sub_10000882C((uint64_t)&v116, (uint64_t *)&unk_10083D5B0);
    }
    v10 = v97;
    objc_msgSend(v97, "encodeWithCoder:", v4);
    goto LABEL_114;
  }
}

id sub_100168BA8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDJSONCoder();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDJSONCoder()
{
  return objc_opt_self(_TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder);
}

uint64_t sub_100168C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10083AE98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100168C90(uint64_t a1)
{
  unint64_t result;

  result = sub_100168CB4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100168CB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083D660;
  if (!qword_10083D660)
  {
    v1 = type metadata accessor for REMRemindersListDataView.DEBUG_AssignedCountInvocation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMRemindersListDataView.DEBUG_AssignedCountInvocation, v1);
    atomic_store(result, (unint64_t *)&qword_10083D660);
  }
  return result;
}

void sub_100168CFC(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  id v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  id v21;
  uint64_t v22;

  v19[1] = a3;
  v20 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v6 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v19 - v11;
  v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for REMRemindersListDataView.AssignedInvocation(0, v10)), "initWithFetchResultTokenToDiffAgainst:", a2);
  v14 = REMRemindersListDataView.DEBUG_AssignedCountInvocation.Parameters.currentUserShareParticipantIDsOverride.getter();
  v15 = sub_1005C79A8(a1, v14);

  *(_QWORD *)&v16 = swift_bridgeObjectRelease().n128_u64[0];
  if (!v3)
  {
    v17 = objc_msgSend(v21, "fetchResultTokenToDiffAgainst", v16);
    sub_100493C24(v17, (uint64_t)a1, (uint64_t)v12);

    v22 = v15;
    v18 = v20;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v20);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(&v22, v8, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v18);
  }
}

void sub_100168E90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  id v31;

  v2 = v1;
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v7 = sub_1000EC524((unint64_t *)&unk_1008448C0, &qword_100840020, off_1007D6690);
    v8 = Set.Iterator.init(_cocoa:)(v30, v5, v6, v7);
    v3 = v30[0];
    v28 = v30[1];
    v9 = v30[2];
    v10 = v30[3];
    v11 = v30[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v28 = a1 + 56;
    v13 = ~v12;
    v14 = -v12;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v11 = v15 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v9 = v13;
    v10 = 0;
  }
  v27 = (unint64_t)(v9 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v16 = __CocoaSet.Iterator.next()(v8);
  if (v16)
  {
    v17 = v16;
    v29 = v16;
    v18 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    swift_unknownObjectRetain(v17);
    swift_dynamicCast(&v31, &v29, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
    v19 = v31;
    swift_unknownObjectRelease(v17);
    v20 = v10;
    v21 = v11;
    while (v19)
    {
      v31 = v19;
      sub_10016C574(&v31);

      if (v2)
      {
        v26 = v3;
        goto LABEL_39;
      }
      v10 = v20;
      v11 = v21;
      if (v3 < 0)
        goto LABEL_11;
LABEL_14:
      if (v11)
      {
        v21 = (v11 - 1) & v11;
        v22 = __clz(__rbit64(v11)) | (v10 << 6);
        v20 = v10;
      }
      else
      {
        v20 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          return;
        }
        if (v20 >= v27)
          break;
        v23 = *(_QWORD *)(v28 + 8 * v20);
        if (!v23)
        {
          v24 = v10 + 2;
          if (v10 + 2 >= v27)
            break;
          v23 = *(_QWORD *)(v28 + 8 * v24);
          if (v23)
            goto LABEL_25;
          v24 = v10 + 3;
          if (v10 + 3 >= v27)
            break;
          v23 = *(_QWORD *)(v28 + 8 * v24);
          if (v23)
            goto LABEL_25;
          v24 = v10 + 4;
          if (v10 + 4 >= v27)
            break;
          v23 = *(_QWORD *)(v28 + 8 * v24);
          if (v23)
          {
LABEL_25:
            v20 = v24;
          }
          else
          {
            v20 = v10 + 5;
            if (v10 + 5 >= v27)
              break;
            v23 = *(_QWORD *)(v28 + 8 * v20);
            if (!v23)
            {
              v25 = v10 + 6;
              while (v27 != v25)
              {
                v23 = *(_QWORD *)(v28 + 8 * v25++);
                if (v23)
                {
                  v20 = v25 - 1;
                  goto LABEL_26;
                }
              }
              break;
            }
          }
        }
LABEL_26:
        v21 = (v23 - 1) & v23;
        v22 = __clz(__rbit64(v23)) + (v20 << 6);
      }
      v19 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v22);
    }
  }
  v26 = v3;
LABEL_39:
  sub_1000C6560(v26);
}

void sub_10016919C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  void *v38;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v5 = sub_1000EC524((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v37, v3, v4, v5);
    v1 = v37[0];
    v35 = v37[1];
    v7 = v37[2];
    v8 = v37[3];
    v9 = v37[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v35 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v32 = v7;
  v34 = (unint64_t)(v7 + 64) >> 6;
  v33 = _swiftEmptyArrayStorage;
  while (1)
  {
    v13 = v8;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    v16 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v16)
      goto LABEL_42;
    v17 = v16;
    v36 = v16;
    v18 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    swift_unknownObjectRetain(v17);
    swift_dynamicCast(&v38, &v36, (char *)&type metadata for Swift.AnyObject + 8, v18, 7);
    v19 = v38;
    swift_unknownObjectRelease(v17);
    if (!v19)
      goto LABEL_42;
LABEL_35:
    v23 = objc_msgSend(v19, "hashtagLabel", v32);
    if (v23 && (v24 = v23, v25 = objc_msgSend(v23, "name"), v24, v25))
    {
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002C8224(0, v33[2] + 1, 1, v33);
        v33 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v30 = v33[2];
      v29 = v33[3];
      if (v30 >= v29 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002C8224((_QWORD *)(v29 > 1), v30 + 1, 1, v33);
        v33 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v33[2] = v30 + 1;
      v31 = &v33[2 * v30];
      v31[4] = v26;
      v31[5] = v28;
    }
    else
    {

    }
  }
  if (v9)
  {
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v15 = v14 | (v8 << 6);
LABEL_34:
    v19 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v19)
      goto LABEL_42;
    goto LABEL_35;
  }
  v20 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v20 >= v34)
      goto LABEL_42;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    ++v8;
    if (!v21)
    {
      v8 = v13 + 2;
      if (v13 + 2 >= v34)
        goto LABEL_42;
      v21 = *(_QWORD *)(v35 + 8 * v8);
      if (!v21)
      {
        v8 = v13 + 3;
        if (v13 + 3 >= v34)
          goto LABEL_42;
        v21 = *(_QWORD *)(v35 + 8 * v8);
        if (!v21)
        {
          v8 = v13 + 4;
          if (v13 + 4 >= v34)
            goto LABEL_42;
          v21 = *(_QWORD *)(v35 + 8 * v8);
          if (!v21)
          {
            v8 = v13 + 5;
            if (v13 + 5 >= v34)
              goto LABEL_42;
            v21 = *(_QWORD *)(v35 + 8 * v8);
            if (!v21)
            {
              v22 = v13 + 6;
              while (v34 != v22)
              {
                v21 = *(_QWORD *)(v35 + 8 * v22++);
                if (v21)
                {
                  v8 = v22 - 1;
                  goto LABEL_33;
                }
              }
LABEL_42:
              sub_1000C6560(v1);
              return;
            }
          }
        }
      }
    }
LABEL_33:
    v9 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v8 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

id sub_100169548(void *a1, id a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  if (a2)
    return objc_msgSend(a2, "evaluateWithObject:", a1);
  if (qword_100837130 != -1)
    swift_once(&qword_100837130, sub_100303A74);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_100844980);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v12 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Evaluating TypedPredicate with nil NSPredicate against object {object: %@}", v8, 0xCu);
    v11 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_1001696FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083D668);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083D668);
  if (qword_100837698 != -1)
    swift_once(&qword_100837698, sub_1004A19C0);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008721A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1001697A4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;

  static String._unconditionallyBridgeFromObjectiveC(_:)(*a3);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

id sub_10016984C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7remindd31RDCoreDataCoreSpotlightDelegate____lazy_storage___contactStore;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd31RDCoreDataCoreSpotlightDelegate____lazy_storage___contactStore);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7remindd31RDCoreDataCoreSpotlightDelegate____lazy_storage___contactStore);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

unint64_t sub_1001698BC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;

  v2 = objc_opt_self(REMCDObject);
  v3 = swift_dynamicCastObjCClass(a1, v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = objc_opt_self(REMCDReminder);
  v6 = swift_dynamicCastObjCClass(v4, v5);
  if (!v6)
  {
    v10 = objc_opt_self(REMCDList);
    v11 = swift_dynamicCastObjCClass(v4, v10);
    if (v11)
    {
      v12 = (void *)v11;
      v8 = a1;
      v9 = sub_10016C7C8(v12);
      goto LABEL_6;
    }
    return 0;
  }
  v7 = (void *)v6;
  v8 = a1;
  v9 = (unint64_t)sub_10016A230(v7);
LABEL_6:
  v13 = v9;

  return v13;
}

char *sub_10016A230(void *a1)
{
  void *v1;
  void *v2;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  double v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  objc_class *v83;
  id v84;
  void *v85;
  double v86;
  id v87;
  id v88;
  Class isa;
  id v90;
  char *v91;
  id v92;
  void *v93;
  Class v94;
  id v95;
  char *v96;
  Class v97;
  id v98;
  objc_class *v99;
  Class v100;
  char *v101;
  char *v102;
  void (**v103)(_QWORD, _QWORD);
  char *v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  unint64_t v112;
  NSDate v113;
  objc_class *v114;
  Class v115;
  char *v116;
  void (**v117)(_QWORD, _QWORD);
  char *v118;
  NSDate v119;
  char *v120;
  char *v121;
  objc_class *v122;
  Class v123;
  char *v124;
  void (**v125)(_QWORD, _QWORD);
  NSDate v126;
  void (**v127)(_QWORD, _QWORD);
  uint64_t v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  NSString v133;
  id v134;
  id v135;
  char *v136;
  NSString v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  Class v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  id v171;
  void *v172;
  uint64_t v173;
  id v174;
  uint64_t v175;
  id v176;
  uint64_t v177;
  void *v178;
  void *v179;
  id v180;
  Class v181;
  char *v182;
  Class v183;
  id v184;
  id v185;
  id v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  id v191;
  void *v192;
  uint64_t v193;
  id v194;
  uint64_t v195;
  id v196;
  uint64_t v197;
  void *v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  void (*v204)(char *, uint64_t, uint64_t);
  id v205;
  id v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  __n128 v222;
  Class v223;
  Class v224;
  char *v225;
  Class v226;
  id v227;
  id v228;
  double v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  id v234;
  void *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  id v241;
  id v242;
  id v243;
  char *v244;
  char *v245;
  uint64_t v246;
  _QWORD *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  NSObject *v252;
  os_log_type_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  double v259;
  id v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  id v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  void *v274;
  void *v275;
  uint64_t v276;
  void *v277;
  void *v278;
  Swift::String v279;
  Swift::String v280;
  char *v281;
  NSObject *v282;
  os_log_type_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  double v289;
  id v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  Swift::String_optional v299;
  unint64_t propertyDictionary;
  uint64_t v301;
  void *v302;
  Swift::String v303;
  id v304;
  char *v305;
  void *v306;
  char *v307;
  uint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void (*v319)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  char *v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  char *v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  void (**v338)(_QWORD, _QWORD);
  char *v339;
  uint64_t v340;
  id v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD v345[5];
  objc_super v346;
  _QWORD v347[3];
  char v348[8];

  v2 = v1;
  v318 = type metadata accessor for DisplayRepresentation(0);
  v317 = *(_QWORD *)(v318 - 8);
  v4 = __chkstk_darwin(v318);
  v332 = (char *)&v301 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for REMSpotlightReminderViewProxy(0, v4);
  v334 = *(_QWORD *)(v6 - 8);
  v335 = v6;
  __chkstk_darwin(v6);
  v333 = (char *)&v301 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_10083D6E0);
  v9 = __chkstk_darwin(v8);
  v309 = (char *)&v301 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v311 = type metadata accessor for REMSpotlightAlarmVehicleTriggerEvent(0, v9);
  v308 = *(_QWORD *)(v311 - 8);
  __chkstk_darwin(v311);
  v310 = (char *)&v301 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(&qword_10083D6E8);
  v13 = __chkstk_darwin(v12);
  v312 = (char *)&v301 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v316 = type metadata accessor for REMSpotlightAlarmProximity(0, v13);
  v315 = *(_QWORD *)(v316 - 8);
  __chkstk_darwin(v316);
  v314 = (char *)&v301 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630(&qword_10083D6F0);
  __chkstk_darwin(v16);
  v320 = (uint64_t)&v301 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v313 = (uint64_t *)((char *)&v301 - v19);
  __chkstk_darwin(v20);
  v339 = (char *)&v301 - v21;
  v22 = sub_10001A630(&qword_10083D6B8);
  __chkstk_darwin(v22);
  v331 = (char *)&v301 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v327 = type metadata accessor for URL(0);
  v326 = *(_QWORD *)(v327 - 8);
  v24 = __chkstk_darwin(v327);
  v325 = (char *)&v301 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v330 = type metadata accessor for UTType(0, v24);
  v323 = *(_QWORD *)(v330 - 8);
  __chkstk_darwin(v330);
  v329 = (char *)&v301 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v328 = (char *)&v301 - v28;
  v29 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v29);
  v322 = (char *)&v301 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v321 = (char *)&v301 - v32;
  __chkstk_darwin(v33);
  v324 = (char *)&v301 - v34;
  v336 = type metadata accessor for Date(0);
  v338 = *(void (***)(_QWORD, _QWORD))(v336 - 8);
  __chkstk_darwin(v336);
  v337 = (char *)&v301 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v341 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v341);
  v37 = (char *)&v301 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v342 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v342 - 8);
  __chkstk_darwin(v342);
  v40 = (char *)&v301 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v41);
  v43 = (char *)&v301 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v46 = (char *)&v301 - v45;
  __chkstk_darwin(v47);
  v49 = (char *)&v301 - v48;
  v344 = 0;
  v345[0] = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  *(_QWORD *)&v50 = swift_bridgeObjectRelease().n128_u64[0];
  v344 = 0xD000000000000017;
  v345[0] = 0x80000001006FA9E0;
  v51 = objc_msgSend(a1, "identifier", v50);
  if (v51)
  {
    v52 = v51;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

    v53 = 0;
  }
  else
  {
    v53 = 1;
  }
  v54 = v342;
  v319 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
  v319(v46, v53, 1, v342);
  sub_1000A5CA8((uint64_t)v46, (uint64_t)v49, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v49, 1, v54))
  {
    sub_10000882C((uint64_t)v49, (uint64_t *)&unk_100839C80);
    v55 = (void *)0xE300000000000000;
    v56 = 7104878;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v40, v49, v54);
    v57 = sub_10000882C((uint64_t)v49, (uint64_t *)&unk_100839C80);
    v307 = v43;
    v56 = UUID.uuidString.getter(v57);
    v55 = v58;
    v43 = v307;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v54);
  }
  v59._countAndFlagsBits = v56;
  v59._object = v55;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60 = v344;
  v61 = v345[0];
  swift_storeEnumTagMultiPayload(v37, v341, 55);
  sub_10000D2C0();
  v63 = v62;
  sub_10001C744((uint64_t)v37, _s10PredicatesOMa);
  if ((sub_100169548(a1, v63) & 1) == 0)
  {
    v71 = sub_10016E7A0();
    v72 = swift_allocError(&type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError, v71, 0, 0);
    *(_QWORD *)v73 = v60;
    *(_QWORD *)(v73 + 8) = v61;
    *(_QWORD *)(v73 + 16) = 0;
    *(_QWORD *)(v73 + 24) = 0;
    *(_BYTE *)(v73 + 32) = 0;
    swift_willThrow(v72);
LABEL_24:

    return v43;
  }
  v64 = v340;
  v65 = sub_100223CB4(a1);
  if (v64)
  {
    swift_getErrorValue(v64, v348, v347);
    v43 = (char *)Error.localizedDescription.getter(v347[1], v347[2]);
    v67 = v66;
    v68 = sub_10016E7A0();
    v69 = swift_allocError(&type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError, v68, 0, 0);
    *(_QWORD *)v70 = v60;
    *(_QWORD *)(v70 + 8) = v61;
    *(_QWORD *)(v70 + 16) = v43;
    *(_QWORD *)(v70 + 24) = v67;
    *(_BYTE *)(v70 + 32) = 1;
    swift_willThrow(v69);

    swift_errorRelease(v64);
    return v43;
  }
  v74 = v65;
  v75 = (char *)objc_msgSend(v74, "titleAsString");
  v76 = v74;
  if (!v75)
    goto LABEL_22;
  v340 = 0;
  v306 = v2;
  v77 = v75;
  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
  v80 = (void *)v79;
  v81 = HIBYTE(v79) & 0xF;
  if ((v79 & 0x2000000000000000) == 0)
    v81 = v78 & 0xFFFFFFFFFFFFLL;
  if (!v81)
  {
    swift_bridgeObjectRelease();

    v76 = v77;
LABEL_22:

    v107 = sub_10016E7A0();
    v108 = swift_allocError(&type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError, v107, 0, 0);
    *(_QWORD *)v109 = v60;
    *(_QWORD *)(v109 + 8) = v61;
    *(_QWORD *)(v109 + 16) = 0;
    *(_QWORD *)(v109 + 24) = 0;
    v110 = 3;
LABEL_23:
    *(_BYTE *)(v109 + 32) = v110;
    swift_willThrow(v108);

    goto LABEL_24;
  }
  v82 = v78;
  v305 = v77;
  v307 = v43;
  v83 = (objc_class *)type metadata accessor for RDCoreDataCoreSpotlightDelegate();
  v346.receiver = v306;
  v346.super_class = v83;
  v84 = objc_msgSendSuper2(&v346, "attributeSetForObject:", a1);
  if (!v84)
  {

    swift_bridgeObjectRelease();
    v112 = sub_10016E7A0();
    v108 = swift_allocError(&type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError, v112, 0, 0);
    *(_QWORD *)v109 = v60;
    *(_QWORD *)(v109 + 8) = v61;
    *(_QWORD *)(v109 + 16) = 0;
    *(_QWORD *)(v109 + 24) = 0;
    v110 = 4;
    goto LABEL_23;
  }
  v85 = v84;
  v303._countAndFlagsBits = v82;
  v303._object = v80;
  *(_QWORD *)&v86 = swift_bridgeObjectRelease().n128_u64[0];
  v304 = v85;
  v87 = objc_msgSend(v85, "attributeDictionary", v86);
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v87, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v341 = v74;

  v88 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v90 = v341;
  v91 = (char *)objc_msgSend(v88, "initWithAttributes:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v92 = objc_msgSend(v90, "displayDate");
  if (v92)
  {
    v93 = v92;
    objc_msgSend(v92, "isAllDay");
    v94 = Bool._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v91, "setAllDay:", v94);

    v95 = objc_msgSend(v93, "date");
    v96 = v337;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v95);

    v97 = Date._bridgeToObjectiveC()().super.isa;
    ((void (**)(char *, uint64_t))v338)[1](v96, v336);
    objc_msgSend(v91, "setDueDate:", v97);

  }
  v98 = objc_msgSend(v90, "notesAsString");
  objc_msgSend(v91, "setComment:", v98);

  v99 = (objc_class *)objc_msgSend(v90, "completionDate");
  v100 = v99;
  v101 = v324;
  if (v99)
  {
    v102 = v337;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v99);

    v103 = v338;
    v104 = v102;
    v105 = v336;
    ((void (*)(char *, char *, uint64_t))v338[4])(v101, v104, v336);
    v106 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v103[7];
    v106(v101, 0, 1, v105);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v103[6])(v101, 1, v105) == 1)
    {
      v100 = 0;
    }
    else
    {
      v113.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v105 = v336;
      v100 = v113.super.isa;
      ((void (**)(char *, uint64_t))v103)[1](v101, v336);
    }
  }
  else
  {
    v106 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v338[7];
    v105 = v336;
    v106(v324, 1, 1, v336);
  }
  objc_msgSend(v91, "setCompletionDate:", v100);

  v114 = (objc_class *)objc_msgSend(v90, "creationDate");
  v115 = v114;
  if (v114)
  {
    v116 = v337;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v114);

    v117 = v338;
    v118 = v321;
    ((void (*)(char *, char *, uint64_t))v338[4])(v321, v116, v105);
    v106(v118, 0, 1, v105);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v117[6])(v118, 1, v105) == 1)
    {
      v115 = 0;
    }
    else
    {
      v119.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v105 = v336;
      v120 = v118;
      v115 = v119.super.isa;
      ((void (**)(char *, uint64_t))v117)[1](v120, v336);
    }
  }
  else
  {
    v106(v321, 1, 1, v105);
  }
  v121 = v322;
  objc_msgSend(v91, "setContentCreationDate:", v115);

  v122 = (objc_class *)objc_msgSend(v90, "lastModifiedDate");
  v123 = v122;
  if (v122)
  {
    v124 = v337;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v122);

    v125 = v338;
    ((void (*)(char *, char *, uint64_t))v338[4])(v121, v124, v105);
    v106(v121, 0, 1, v105);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v125[6])(v121, 1, v105) == 1)
    {
      v123 = 0;
    }
    else
    {
      v126.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v127 = v125;
      v123 = v126.super.isa;
      ((void (**)(char *, uint64_t))v127)[1](v121, v105);
    }
  }
  else
  {
    v106(v121, 1, 1, v105);
  }
  v128 = v323;
  objc_msgSend(v91, "setContentModificationDate:", v123);

  v129 = v328;
  v130 = static UTType.toDoItem.getter();
  UTType.identifier.getter(v130);
  v131 = *(void (**)(char *, uint64_t))(v128 + 8);
  v132 = v330;
  v131(v129, v330);
  v133 = String._bridgeToObjectiveC()();
  objc_msgSend(v91, "setContentType:", v133, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v91, "setDisplayName:", v305);
  v134 = objc_msgSend(a1, "objectID");
  v135 = objc_msgSend(v134, "URIRepresentation");

  v136 = v325;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v135);

  URL.description.getter();
  (*(void (**)(char *, uint64_t))(v326 + 8))(v136, v327);
  v137 = String._bridgeToObjectiveC()();
  objc_msgSend(v91, "setIdentifier:", v137, swift_bridgeObjectRelease().n128_f64[0]);

  v138 = sub_10001A630((uint64_t *)&unk_10083A340);
  v139 = swift_allocObject(v138, 80, 7);
  *(_OWORD *)(v139 + 16) = xmmword_1006A3C20;
  *(_QWORD *)(v139 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(REMReminderICSObjectTypeIdentifier);
  *(_QWORD *)(v139 + 40) = v140;
  v141 = static UTType.utf8PlainText.getter();
  v142 = UTType.identifier.getter(v141);
  v144 = v143;
  v145 = ((uint64_t (*)(char *, uint64_t))v131)(v129, v132);
  *(_QWORD *)(v139 + 48) = v142;
  *(_QWORD *)(v139 + 56) = v144;
  v146 = v329;
  v147 = static UTType.utf16PlainText.getter(v145);
  v148 = v91;
  v149 = UTType.identifier.getter(v147);
  v151 = v150;
  v131(v146, v132);
  *(_QWORD *)(v139 + 64) = v149;
  *(_QWORD *)(v139 + 72) = v151;
  v152 = v148;
  v153 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v148, "setProviderDataTypeIdentifiers:", v153, swift_bridgeObjectRelease().n128_f64[0]);

  v154 = v341;
  CSSearchableItemAttributeSet.rem_accountID.setter(objc_msgSend(v341, "accountID"));
  CSSearchableItemAttributeSet.rem_flagged.setter(objc_msgSend(v154, "flagged"), 0);
  CSSearchableItemAttributeSet.rem_isRecurrent.setter(objc_msgSend(v154, "isRecurrent"));
  v155 = enum case for REMSearchableItemType.reminder(_:);
  v156 = type metadata accessor for REMSearchableItemType(0);
  v157 = *(_QWORD *)(v156 - 8);
  v158 = v331;
  (*(void (**)(char *, uint64_t, uint64_t))(v157 + 104))(v331, v155, v156);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v158, 0, 1, v156);
  CSSearchableItemAttributeSet.rem_itemType.setter(v158);
  CSSearchableItemAttributeSet.rem_listID.setter(objc_msgSend(v154, "listID"));
  CSSearchableItemAttributeSet.rem_objectID.setter(objc_msgSend(v154, "objectID"));
  v159 = v305;
  objc_msgSend(v152, "setTitle:", v305);

  v160 = type metadata accessor for REMSpotlightLocationType(0);
  v161 = *(_QWORD *)(v160 - 8);
  v162 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v161 + 56);
  v162((uint64_t)v339, 1, 1, v160);
  v163 = objc_msgSend(v154, "alarms");
  v337 = v152;
  v338 = (void (**)(_QWORD, _QWORD))v63;
  v164 = v340;
  if (v163)
  {
    v165 = v163;
    v330 = v161;
    v331 = (char *)v162;
    v336 = v160;
    v166 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
    v167 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v165, v166);

    v302 = a1;
    if ((unint64_t)v167 >> 62)
    {
LABEL_76:
      if (v167 < 0)
        v216 = v167;
      else
        v216 = v167 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v167);
      v168 = _CocoaArrayWrapper.endIndex.getter(v216);
      swift_bridgeObjectRelease();
      if (v168)
      {
LABEL_42:
        v169 = v167 & 0xC000000000000001;
        swift_bridgeObjectRetain(v167);
        v170 = 4;
        while (1)
        {
          v154 = (id)(v170 - 4);
          if (v169)
            v171 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v170 - 4, v167);
          else
            v171 = *(id *)(v167 + 8 * v170);
          v172 = v171;
          v173 = v170 - 3;
          if (__OFADD__(v154, 1))
          {
            __break(1u);
            goto LABEL_75;
          }
          v174 = objc_msgSend(v171, "trigger");
          v175 = objc_opt_self(REMAlarmLocationTrigger);
          if (swift_dynamicCastObjCClass(v174, v175))
            break;

          ++v170;
          if (v173 == v168)
          {
            swift_bridgeObjectRelease();
LABEL_54:
            swift_bridgeObjectRetain(v167);
            v190 = 4;
            while (1)
            {
              v154 = (id)(v190 - 4);
              v191 = v169
                   ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v190 - 4, v167)
                   : *(id *)(v167 + 8 * v190);
              v192 = v191;
              v193 = v190 - 3;
              if (__OFADD__(v154, 1))
                break;
              v194 = objc_msgSend(v191, "trigger");
              v195 = objc_opt_self(REMAlarmVehicleTrigger);
              if (swift_dynamicCastObjCClass(v194, v195))
              {
                swift_bridgeObjectRelease_n(v167, 2);

                v196 = objc_msgSend(v192, "trigger");
                v197 = objc_opt_self(REMAlarmVehicleTrigger);
                v198 = (void *)swift_dynamicCastObjCClass(v196, v197);
                v152 = v337;
                v63 = v338;
                if (!v198)
                {

                  v164 = v340;
                  goto LABEL_71;
                }
                v199 = objc_msgSend(v198, "event");
                v200 = (uint64_t)v309;
                REMSpotlightAlarmVehicleTriggerEvent.init(rawValue:)(v199);

                sub_10000882C((uint64_t)v339, &qword_10083D6F0);
                v201 = v308;
                v202 = v311;
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v308 + 48))(v200, 1, v311) == 1)
                {
                  v203 = v310;
                  (*(void (**)(char *, _QWORD, uint64_t))(v201 + 104))(v310, enum case for REMSpotlightAlarmVehicleTriggerEvent.none(_:), v202);
                  sub_10000882C(v200, &qword_10083D6E0);
                  v204 = *(void (**)(char *, uint64_t, uint64_t))(v201 + 32);
                }
                else
                {
                  v204 = *(void (**)(char *, uint64_t, uint64_t))(v201 + 32);
                  v203 = v310;
                  v204(v310, v200, v202);
                }
                v164 = v340;
                v154 = v341;
                a1 = v302;
                v214 = (uint64_t)v339;
                v204(v339, (uint64_t)v203, v202);
                v215 = v336;
                (*(void (**)(uint64_t, _QWORD, uint64_t))(v330 + 104))(v214, enum case for REMSpotlightLocationType.vehicle(_:), v336);
                ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v331)(v214, 0, 1, v215);
                goto LABEL_82;
              }

              ++v190;
              if (v193 == v168)
              {
                swift_bridgeObjectRelease_n(v167, 2);
                v63 = v338;
                v164 = v340;
                v154 = v341;
                goto LABEL_81;
              }
            }
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
        }
        swift_bridgeObjectRelease();

        v176 = objc_msgSend(v172, "trigger");
        v177 = objc_opt_self(REMAlarmLocationTrigger);
        v178 = (void *)swift_dynamicCastObjCClass(v176, v177);
        if (!v178)
        {

          goto LABEL_54;
        }
        v179 = v178;
        v180 = objc_msgSend(v178, "structuredLocation", swift_bridgeObjectRelease().n128_f64[0]);
        objc_msgSend(v180, "latitude");
        v181 = Double._bridgeToObjectiveC()().super.super.isa;
        v182 = v337;
        objc_msgSend(v337, "setLatitude:", v181);

        objc_msgSend(v180, "longitude");
        v183 = Double._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v182, "setLongitude:", v183);

        v184 = objc_msgSend(v180, "displayName");
        objc_msgSend(v182, "setNamedLocation:", v184);

        v185 = objc_msgSend(v180, "address");
        objc_msgSend(v182, "setFullyFormattedAddress:", v185);

        v186 = objc_msgSend(v179, "proximity");
        v187 = (uint64_t)v312;
        REMSpotlightAlarmProximity.init(rawValue:)(v186);
        v188 = v315;
        v189 = v316;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v315 + 48))(v187, 1, v316) == 1)
        {
          (*(void (**)(char *, _QWORD, uint64_t))(v188 + 104))(v314, enum case for REMSpotlightAlarmProximity.none(_:), v189);
          sub_10000882C(v187, &qword_10083D6E8);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v188 + 32))(v314, v187, v189);
        }
        v63 = v338;
        v205 = objc_msgSend(v179, "structuredLocation");
        v206 = objc_msgSend(v205, "displayName");

        if (v206)
        {
          v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v206);
          v209 = v208;

        }
        else
        {

          v207 = 0;
          v209 = 0xE000000000000000;
        }
        v210 = (uint64_t)v339;
        v164 = v340;
        v152 = v337;
        sub_10000882C((uint64_t)v339, &qword_10083D6F0);
        v211 = (uint64_t)v313;
        *v313 = v207;
        *(_QWORD *)(v211 + 8) = v209;
        v212 = sub_10001A630(&qword_10083D708);
        (*(void (**)(uint64_t, char *, uint64_t))(v315 + 32))(v211 + *(int *)(v212 + 48), v314, v316);
        v213 = v336;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v330 + 104))(v211, enum case for REMSpotlightLocationType.location(_:), v336);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v331)(v211, 0, 1, v213);
        sub_1000A5CA8(v211, v210, &qword_10083D6F0);
LABEL_71:
        v154 = v341;
        a1 = v302;
        goto LABEL_82;
      }
    }
    else
    {
      v168 = *(_QWORD *)((v167 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v168)
        goto LABEL_42;
    }
    swift_bridgeObjectRelease();
    v63 = v338;
    v164 = v340;
LABEL_81:
    a1 = v302;
    v152 = v337;
  }
LABEL_82:
  v217 = objc_msgSend(a1, "hashtags");
  if (v217)
  {
    v218 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v219 = sub_1000EC524((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v220 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v217, v218, v219);

    sub_10016919C(v220);
    v217 = v221;
    swift_bridgeObjectRelease();
    if (v217[2])
    {
      v222 = swift_bridgeObjectRetain(v217);
      Array<A>.removingDuplicates()(v222);
      swift_bridgeObjectRelease();
      v223 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v152, "setHashtags:", v223, swift_bridgeObjectRelease().n128_f64[0]);

    }
  }
  sub_10016C264(a1, v154);
  v224 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v152, "setContactKeywords:", v224, swift_bridgeObjectRelease().n128_f64[0]);

  v225 = (char *)objc_msgSend(v154, "priority");
  if ((unint64_t)(v225 - 10) >= 0xFFFFFFFFFFFFFFF7)
  {
    v226 = UInt._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v152, "setRankingHint:", v226);

  }
  v227 = objc_msgSend(v154, "flagged");
  v228 = objc_msgSend(v154, "attachments");
  v340 = v164;
  if (v228)
  {
    v230 = v228;
    v231 = sub_1000151B0(0, (unint64_t *)&unk_100839CE0, REMAttachment_ptr);
    v232 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v230, v231);

    if ((unint64_t)v232 >> 62)
    {
      if (v232 < 0)
        v298 = v232;
      else
        v298 = v232 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v232);
      v233 = _CocoaArrayWrapper.endIndex.getter(v298);
      swift_bridgeObjectRelease();
    }
    else
    {
      v233 = *(_QWORD *)((v232 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)&v229 = swift_bridgeObjectRelease().n128_u64[0];
    LODWORD(v331) = v233 != 0;
  }
  else
  {
    LODWORD(v331) = 0;
  }
  v336 = (uint64_t)v225;
  v234 = objc_msgSend(v341, "notesAsString", v229);
  if (v234)
  {
    v235 = v234;
    v236 = v217;
    v237 = static String._unconditionallyBridgeFromObjectiveC(_:)(v234);
    v239 = v238;

  }
  else
  {
    v236 = v217;
    v237 = 0;
    v239 = 0;
  }
  v240 = v320;
  sub_100008868((uint64_t)v339, v320, &qword_10083D6F0);
  v241 = v341;
  v242 = objc_msgSend(v341, "objectID");

  v243 = objc_msgSend(v242, "uuid");
  v244 = v307;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v243);

  v319(v244, 0, 1, v342);
  v245 = v333;
  REMSpotlightReminderViewProxy.init(priority:flagged:hasAttachment:notes:hashtags:locationType:reminderID:)(v336, (uint64_t)v227 > 0, v331, v237, v239, v236, v240, v244);
  v246 = v335;
  v345[2] = v335;
  v345[3] = sub_10009FC50(&qword_10083D6F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMSpotlightReminderViewProxy, (uint64_t)&protocol conformance descriptor for REMSpotlightReminderViewProxy);
  v345[4] = sub_10009FC50(&qword_10083D700, (uint64_t (*)(uint64_t))&type metadata accessor for REMSpotlightReminderViewProxy, (uint64_t)&protocol conformance descriptor for REMSpotlightReminderViewProxy);
  v247 = sub_1000087F0(&v344);
  (*(void (**)(_QWORD *, char *, uint64_t))(v334 + 16))(v247, v245, v246);
  v248 = v332;
  DisplayRepresentation.init(mangledViewName:viewCodableProxy:)(0xD00000000000002CLL, 0x80000001006FAA00, &v344);
  v249 = v337;
  CSSearchableItemAttributeSet.displayRepresentation(displayRepresentation:)(v248);
  if (qword_100836DF8 != -1)
    swift_once(&qword_100836DF8, sub_1001696FC);
  v250 = type metadata accessor for Logger(0);
  v251 = sub_10001AAA8(v250, (uint64_t)qword_10083D668);
  v43 = v249;
  v342 = v251;
  v252 = Logger.logObject.getter(v43);
  v253 = static os_log_type_t.info.getter(v252);
  if (os_log_type_enabled(v252, v253))
  {
    v254 = swift_slowAlloc(22, -1);
    v255 = swift_slowAlloc(64, -1);
    v343 = v255;
    *(_DWORD *)v254 = 136446466;
    v344 = CSSearchableItemAttributeSet.rem_objectID.getter();
    v256 = sub_10001A630((uint64_t *)&unk_100844910);
    v257 = String.init<A>(describing:)(&v344, v256);
    v344 = sub_10001A820(v257, v258, &v343);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345);

    *(_QWORD *)&v259 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v254 + 12) = 2082;
    v260 = objc_msgSend(v43, "identifier", v259);
    if (v260)
    {
      v261 = v260;
      v262 = static String._unconditionallyBridgeFromObjectiveC(_:)(v260);
      v264 = v263;

    }
    else
    {
      v262 = 0;
      v264 = 0;
    }
    v344 = v262;
    v345[0] = v264;
    v265 = sub_10001A630((uint64_t *)&unk_10083A370);
    v266 = String.init<A>(describing:)(&v344, v265);
    v344 = sub_10001A820(v266, v267, &v343);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v252, v253, "Successfully indexed reminder {reminder: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s}", (uint8_t *)v254, 0x16u);
    swift_arrayDestroy(v255, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v255, -1, -1);
    swift_slowDealloc(v254, -1, -1);

    v63 = v338;
  }
  else
  {

  }
  v268 = v341;
  v269 = CSSearchableItemAttributeSet.rem_objectIDString.getter();
  if (v270)
  {
    v271 = v269;
    v272 = v270;
    v273 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppIntentsReminderEntityName);
    v275 = v274;
    v276 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppIntentsReminderTypeDisplayName);
    v278 = v277;
    propertyDictionary = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v299.value._object = v278;
    v299.value._countAndFlagsBits = v276;
    v279._countAndFlagsBits = v271;
    v279._object = v272;
    v280._countAndFlagsBits = v273;
    v280._object = v275;
    CSSearchableItemAttributeSet.associate(entityInstanceIdentifier:entityTypeIdentifier:displayTitle:displaySubtitle:displaySynonyms:typeDisplayName:typeDisplaySynonyms:propertyDictionary:priority:)(v279, v280, v303, (Swift::String_optional)0, (Swift::OpaquePointer)_swiftEmptyArrayStorage, v299, (Swift::OpaquePointer)_swiftEmptyArrayStorage, (Swift::OpaquePointer)propertyDictionary, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v281 = v43;
    v282 = Logger.logObject.getter(v281);
    v283 = static os_log_type_t.info.getter(v282);
    if (os_log_type_enabled(v282, v283))
    {
      v284 = swift_slowAlloc(22, -1);
      v285 = swift_slowAlloc(64, -1);
      v343 = v285;
      *(_DWORD *)v284 = 136446466;
      v344 = CSSearchableItemAttributeSet.rem_objectID.getter();
      v286 = sub_10001A630((uint64_t *)&unk_100844910);
      v287 = String.init<A>(describing:)(&v344, v286);
      v344 = sub_10001A820(v287, v288, &v343);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345);

      *(_QWORD *)&v289 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v284 + 12) = 2082;
      v290 = objc_msgSend(v281, "identifier", v289);
      if (v290)
      {
        v291 = v290;
        v292 = static String._unconditionallyBridgeFromObjectiveC(_:)(v290);
        v294 = v293;

      }
      else
      {
        v292 = 0;
        v294 = 0;
      }
      v344 = v292;
      v345[0] = v294;
      v295 = sub_10001A630((uint64_t *)&unk_10083A370);
      v296 = String.init<A>(describing:)(&v344, v295);
      v344 = sub_10001A820(v296, v297, &v343);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v282, v283, "Associating reminder entity with attributes {reminder: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s}", (uint8_t *)v284, 0x16u);
      swift_arrayDestroy(v285, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v285, -1, -1);
      swift_slowDealloc(v284, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v317 + 8))(v332, v318);
    (*(void (**)(char *, uint64_t))(v334 + 8))(v333, v335);
    sub_10000882C((uint64_t)v339, &qword_10083D6F0);
  }
  else
  {
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v317 + 8))(v332, v318);
    (*(void (**)(char *, uint64_t))(v334 + 8))(v333, v335);
    sub_10000882C((uint64_t)v339, &qword_10083D6F0);
  }
  return v43;
}

_QWORD *sub_10016C264(void *a1, id a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Swift::OpaquePointer v8;
  NSString *v9;
  NSString *v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35[3];
  void *v36;

  v36 = &_swiftEmptySetSingleton;
  v3 = objc_msgSend(a2, "contactHandles");
  if (v3)
  {
    v4 = v3;
    v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v6 = swift_allocObject(v5, 56, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1006AAD80;
    v7 = objc_msgSend((id)objc_opt_self(CNContactFormatter), "descriptorForRequiredKeysForStyle:", 0);
    *(_QWORD *)(v6 + 32) = v7;
    *(_QWORD *)(v6 + 40) = CNContactPhoneNumbersKey;
    *(_QWORD *)(v6 + 48) = CNContactEmailAddressesKey;
    v35[0] = v6;
    specialized Array._endMutation()(v7);
    v8._rawValue = (void *)v6;
    v9 = CNContactPhoneNumbersKey;
    v10 = CNContactEmailAddressesKey;
    v11 = sub_10016984C();
    v12 = objc_msgSend(v4, "emails");
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for String);

    v14 = sub_1001DFA94(v13);
    v15 = objc_msgSend(v4, "phones", swift_bridgeObjectRelease(v13).n128_f64[0]);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String);

    v17 = sub_1001DFA94(v16);
    swift_bridgeObjectRelease(v16);
    v18 = (void *)CNContactStore.contactFrom(emailAddresses:phoneNumbers:keysToFetch:)((Swift::OpaquePointer)v14, (Swift::OpaquePointer)v17, v8);

    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v8._rawValue);
    if (v18)
    {
      v19 = objc_allocWithZone((Class)CNContactFormatter);
      v20 = v18;
      v21 = objc_msgSend(v19, "init");
      v22 = objc_msgSend(v21, "stringFromContact:", v20);

      if (v22)
      {
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        sub_1002DB0E4(v35, v23, v25);
        swift_bridgeObjectRelease(v35[1]);
      }
      else
      {

      }
    }
    else
    {

    }
  }
  v26 = objc_msgSend(a1, "assignments", v35[0]);
  if (v26)
  {
    v27 = v26;
    v28 = sub_1000151B0(0, &qword_100840020, off_1007D6690);
    v29 = sub_1000EC524((unint64_t *)&unk_1008448C0, &qword_100840020, off_1007D6690);
    v30 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v27, v28, v29);

    sub_100168E90(v30);
    swift_bridgeObjectRelease(v30);
  }
  v31 = v36;
  swift_bridgeObjectRetain(v36);
  v33 = sub_1001E8BAC(v32);
  swift_bridgeObjectRelease_n(v31, 2);
  return v33;
}

double sub_10016C574(id *a1)
{
  id v1;
  id v2;
  double v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  double v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  double v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  double result;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *a1;
  v2 = objc_msgSend(*a1, "assignee");
  if (v2)
  {
    v4 = v2;
    v5 = objc_msgSend(v2, "firstName");

    if (v5)
    {
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      sub_1002DB0E4(&v37, v6, v8);
      *(_QWORD *)&v3 = swift_bridgeObjectRelease(v38).n128_u64[0];
    }
  }
  v9 = objc_msgSend(v1, "assignee", v3);
  if (v9)
  {
    v11 = v9;
    v12 = objc_msgSend(v9, "lastName");

    if (v12)
    {
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      sub_1002DB0E4(&v37, v13, v15);
      *(_QWORD *)&v10 = swift_bridgeObjectRelease(v38).n128_u64[0];
    }
  }
  v16 = objc_msgSend(v1, "assignee", v10);
  if (v16)
  {
    v18 = v16;
    v19 = objc_msgSend(v16, "middleName");

    if (v19)
    {
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      sub_1002DB0E4(&v37, v20, v22);
      *(_QWORD *)&v17 = swift_bridgeObjectRelease(v38).n128_u64[0];
    }
  }
  v23 = objc_msgSend(v1, "assignee", v17);
  if (v23)
  {
    v25 = v23;
    v26 = objc_msgSend(v23, "displayName");

    if (v26)
    {
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      sub_1002DB0E4(&v37, v27, v29);
      *(_QWORD *)&v24 = swift_bridgeObjectRelease(v38).n128_u64[0];
    }
  }
  v30 = objc_msgSend(v1, "assignee", v24);
  if (v30)
  {
    v32 = v30;
    v33 = objc_msgSend(v30, "nickname");

    if (v33)
    {
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

      sub_1002DB0E4(&v37, v34, v36);
      *(_QWORD *)&result = swift_bridgeObjectRelease(v38).n128_u64[0];
    }
  }
  return result;
}

unint64_t sub_10016C7C8(void *a1)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  double v37;
  void *v38;
  id v39;
  void *v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  unsigned int v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  objc_class *v60;
  id v61;
  void *v62;
  id v63;
  NSString v64;
  NSString v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  Class isa;
  id v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  NSString v77;
  id v78;
  id v79;
  char *v80;
  NSString v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  Class v94;
  id v95;
  void *v96;
  char *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void *v115;
  Class v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  void *v122;
  id v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  double v143;
  id v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  void *v157;
  void *v158;
  uint64_t v159;
  void *v160;
  void *v161;
  Swift::String v162;
  Swift::String v163;
  Swift::String v164;
  id v165;
  NSObject *v166;
  os_log_type_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  double v173;
  id v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  Swift::String_optional v182;
  unint64_t propertyDictionary;
  uint64_t v184;
  id v185;
  id v186;
  char *v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int (*v193)(uint64_t, uint64_t, uint64_t);
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  void *v206;
  uint64_t *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD v217[5];
  objc_super v218;
  uint64_t v219;

  v191 = type metadata accessor for DisplayRepresentation(0);
  v190 = *(_QWORD *)(v191 - 8);
  v2 = __chkstk_darwin(v191);
  v208 = (char *)&v184 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = type metadata accessor for REMSpotlightListViewProxy(0, v2);
  v210 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v209 = (char *)&v184 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for REMSpotlightBadgeType(0);
  v211 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v204 = (char *)&v184 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v207 = (uint64_t *)((char *)&v184 - v7);
  v8 = sub_10001A630(&qword_10083D6B8);
  __chkstk_darwin(v8);
  v202 = (char *)&v184 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for URL(0);
  v195 = *(_QWORD *)(v196 - 8);
  v10 = __chkstk_darwin(v196);
  v194 = (char *)&v184 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for UTType(0, v10);
  v192 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v198 = (char *)&v184 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v197 = (char *)&v184 - v14;
  v215 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v215);
  v16 = (char *)&v184 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v187 = (char *)&v184 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v184 - v21;
  v23 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v23);
  v203 = (uint64_t)&v184 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v200 = (uint64_t)&v184 - v26;
  __chkstk_darwin(v27);
  v205 = (char *)&v184 - v28;
  __chkstk_darwin(v29);
  v214 = (uint64_t)&v184 - v30;
  __chkstk_darwin(v31);
  v33 = (char *)&v184 - v32;
  __chkstk_darwin(v34);
  v36 = (char *)&v184 - v35;
  v216 = 0;
  v217[0] = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
  v216 = 0xD000000000000013;
  v217[0] = 0x80000001006FA990;
  v38 = a1;
  v39 = objc_msgSend(a1, "identifier", v37);
  if (v39)
  {
    v40 = v39;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v42 = v33;
    v43 = 0;
  }
  else
  {
    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v42 = v33;
    v43 = 1;
  }
  v189 = v41;
  v41(v42, v43, 1, v17);
  sub_1000A5CA8((uint64_t)v33, (uint64_t)v36, (uint64_t *)&unk_100839C80);
  v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v45 = v44(v36, 1, v17);
  v188 = v18;
  v201 = v17;
  v193 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v44;
  if (v45)
  {
    sub_10000882C((uint64_t)v36, (uint64_t *)&unk_100839C80);
    v46 = (void *)0xE300000000000000;
    v47 = 7104878;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v22, v36, v17);
    v48 = sub_10000882C((uint64_t)v36, (uint64_t *)&unk_100839C80);
    v47 = UUID.uuidString.getter(v48);
    v46 = v49;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
  }
  v50._countAndFlagsBits = v47;
  v50._object = v46;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51 = v216;
  v52 = v217[0];
  swift_storeEnumTagMultiPayload(v16, v215, 30);
  sub_10000A3AC();
  v54 = v53;
  sub_10001C744((uint64_t)v16, _s10PredicatesOMa_1);
  if ((sub_100169548(v38, v54) & 1) == 0)
  {
    v100 = sub_10016E7A0();
    v101 = swift_allocError(&type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError, v100, 0, 0);
    *(_QWORD *)v102 = v51;
    *(_QWORD *)(v102 + 8) = v52;
    *(_QWORD *)(v102 + 16) = 0;
    *(_QWORD *)(v102 + 24) = 0;
    *(_BYTE *)(v102 + 32) = 0;
LABEL_21:
    swift_willThrow(v101);

    return v47;
  }
  v55 = objc_msgSend(v38, "name");
  if (!v55)
    goto LABEL_19;
  v56 = v55;
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  v47 = v58;
  swift_bridgeObjectRelease();
  v59 = HIBYTE(v47) & 0xF;
  if ((v47 & 0x2000000000000000) == 0)
    v59 = v57 & 0xFFFFFFFFFFFFLL;
  if (!v59)
  {

LABEL_19:
    v103 = sub_10016E7A0();
    v101 = swift_allocError(&type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError, v103, 0, 0);
    *(_QWORD *)v104 = v51;
    *(_QWORD *)(v104 + 8) = v52;
    *(_QWORD *)(v104 + 16) = 0;
    *(_QWORD *)(v104 + 24) = 0;
    v105 = 3;
LABEL_20:
    *(_BYTE *)(v104 + 32) = v105;
    goto LABEL_21;
  }
  v60 = (objc_class *)type metadata accessor for RDCoreDataCoreSpotlightDelegate();
  v218.receiver = v206;
  v218.super_class = v60;
  v61 = objc_msgSendSuper2(&v218, "attributeSetForObject:", v38);
  if (!v61)
  {

    v107 = sub_10016E7A0();
    v101 = swift_allocError(&type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError, v107, 0, 0);
    *(_QWORD *)v104 = v51;
    *(_QWORD *)(v104 + 8) = v52;
    *(_QWORD *)(v104 + 16) = 0;
    *(_QWORD *)(v104 + 24) = 0;
    v105 = 4;
    goto LABEL_20;
  }
  v62 = v61;
  v186 = v54;
  swift_bridgeObjectRelease();
  v63 = objc_msgSend((id)objc_opt_self(REMDisplayNameUtils), "displayNameFromListName:isPlaceholder:", v56, objc_msgSend(v38, "isPlaceholder"));

  v64 = v63;
  v65 = v63;
  v66 = v38;
  if (!v63)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v65 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v215 = (uint64_t)v64;
  v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  v206 = v67;
  v68 = v63;
  v185 = v62;
  v69 = objc_msgSend(v62, "attributeDictionary");
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v69, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v70 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v72 = objc_msgSend(v70, "initWithAttributes:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v73 = v197;
  v74 = static UTType.toDoItem.getter();
  UTType.identifier.getter(v74);
  v75 = *(void (**)(char *, uint64_t))(v192 + 8);
  v76 = v199;
  v75(v73, v199);
  v77 = String._bridgeToObjectiveC()();
  objc_msgSend(v72, "setContentType:", v77, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v72, "setDisplayName:", v65);
  v78 = objc_msgSend(v66, "objectID");
  v79 = objc_msgSend(v78, "URIRepresentation");

  v80 = v194;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v79);

  URL.description.getter();
  (*(void (**)(char *, uint64_t))(v195 + 8))(v80, v196);
  v81 = String._bridgeToObjectiveC()();
  objc_msgSend(v72, "setIdentifier:", v81, swift_bridgeObjectRelease().n128_f64[0]);

  v82 = sub_10001A630((uint64_t *)&unk_10083A340);
  v83 = swift_allocObject(v82, 64, 7);
  *(_OWORD *)(v83 + 16) = xmmword_1006A3C40;
  v84 = static UTType.utf8PlainText.getter();
  v85 = UTType.identifier.getter(v84);
  v87 = v86;
  v88 = ((uint64_t (*)(char *, uint64_t))v75)(v73, v76);
  *(_QWORD *)(v83 + 32) = v85;
  *(_QWORD *)(v83 + 40) = v87;
  v89 = v198;
  v90 = static UTType.utf16PlainText.getter(v88);
  v91 = UTType.identifier.getter(v90);
  v93 = v92;
  v75(v89, v76);
  *(_QWORD *)(v83 + 48) = v91;
  *(_QWORD *)(v83 + 56) = v93;
  v94 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v72, "setProviderDataTypeIdentifiers:", v94, swift_bridgeObjectRelease().n128_f64[0]);

  v95 = objc_msgSend(v66, "identifier");
  if (v95)
  {
    v96 = v95;
    v97 = v205;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v95);

    v98 = 0;
    v99 = v207;
  }
  else
  {
    v98 = 1;
    v99 = v207;
    v97 = v205;
  }
  v108 = v201;
  v189(v97, v98, 1, v201);
  v109 = (uint64_t)v97;
  v110 = v214;
  sub_1000A5CA8(v109, v214, (uint64_t *)&unk_100839C80);
  v111 = v110;
  v112 = v200;
  sub_100008868(v111, v200, (uint64_t *)&unk_100839C80);
  if (v193(v112, 1, v108) == 1)
  {
    sub_10000882C(v112, (uint64_t *)&unk_100839C80);
  }
  else
  {
    v113 = v188;
    v114 = v187;
    (*(void (**)(char *, uint64_t, uint64_t))(v188 + 32))(v187, v112, v108);
    v115 = (void *)objc_opt_self(REMList);
    v116 = UUID._bridgeToObjectiveC()().super.isa;
    v117 = objc_msgSend(v115, "objectIDWithUUID:", v116);

    CSSearchableItemAttributeSet.rem_objectID.setter(v117);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v114, v108);
  }
  v118 = enum case for REMSearchableItemType.list(_:);
  v119 = type metadata accessor for REMSearchableItemType(0);
  v120 = *(_QWORD *)(v119 - 8);
  v121 = v202;
  (*(void (**)(char *, uint64_t, uint64_t))(v120 + 104))(v202, v118, v119);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v121, 0, 1, v119);
  CSSearchableItemAttributeSet.rem_itemType.setter(v121);
  v122 = (void *)v215;
  objc_msgSend(v72, "setTitle:", v215);

  CSSearchableItemAttributeSet.rem_shouldCategorizeGroceryItems.setter(objc_msgSend(v66, "shouldCategorizeGroceryItems"));
  sub_10016E4C4(v66, v99);
  v123 = objc_msgSend(v66, "color");
  if (v123)
  {
    v124 = v123;
    v125 = (void *)REMColor.codable.getter();

  }
  else
  {
    v125 = 0;
  }
  v126 = type metadata accessor for REMSpotlightColor(0);
  swift_allocObject(v126, *(unsigned int *)(v126 + 48), *(unsigned __int16 *)(v126 + 52));
  v205 = v125;
  v127 = REMSpotlightColor.init(remColor:)(v125);
  v128 = v204;
  (*(void (**)(char *, uint64_t *, uint64_t))(v211 + 16))(v204, v99, v213);
  v129 = v203;
  sub_100008868(v214, v203, (uint64_t *)&unk_100839C80);
  swift_retain();
  v130 = v209;
  v215 = v127;
  REMSpotlightListViewProxy.init(badgeType:color:listID:)(v128, v127, v129);
  v131 = v212;
  v217[2] = v212;
  v217[3] = sub_10009FC50(&qword_10083D6C8, (uint64_t (*)(uint64_t))&type metadata accessor for REMSpotlightListViewProxy, (uint64_t)&protocol conformance descriptor for REMSpotlightListViewProxy);
  v217[4] = sub_10009FC50(&qword_10083D6D0, (uint64_t (*)(uint64_t))&type metadata accessor for REMSpotlightListViewProxy, (uint64_t)&protocol conformance descriptor for REMSpotlightListViewProxy);
  v132 = sub_1000087F0(&v216);
  (*(void (**)(_QWORD *, char *, uint64_t))(v210 + 16))(v132, v130, v131);
  v133 = v208;
  DisplayRepresentation.init(mangledViewName:viewCodableProxy:)(0xD000000000000028, 0x80000001006FA9B0, &v216);
  CSSearchableItemAttributeSet.displayRepresentation(displayRepresentation:)(v133);
  if (qword_100836DF8 != -1)
    swift_once(&qword_100836DF8, sub_1001696FC);
  v134 = type metadata accessor for Logger(0);
  v135 = sub_10001AAA8(v134, (uint64_t)qword_10083D668);
  v47 = (unint64_t)v72;
  v204 = (char *)v135;
  v136 = Logger.logObject.getter(v47);
  v137 = static os_log_type_t.info.getter(v136);
  if (os_log_type_enabled(v136, v137))
  {
    v138 = swift_slowAlloc(22, -1);
    v139 = swift_slowAlloc(64, -1);
    v219 = v139;
    *(_DWORD *)v138 = 136446466;
    v216 = CSSearchableItemAttributeSet.rem_objectID.getter();
    v140 = sub_10001A630((uint64_t *)&unk_100844910);
    v141 = String.init<A>(describing:)(&v216, v140);
    v216 = sub_10001A820(v141, v142, &v219);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217);

    *(_QWORD *)&v143 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v138 + 12) = 2082;
    v144 = objc_msgSend((id)v47, "identifier", v143);
    if (v144)
    {
      v145 = v144;
      v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
      v148 = v147;

    }
    else
    {
      v146 = 0;
      v148 = 0;
    }
    v216 = v146;
    v217[0] = v148;
    v149 = sub_10001A630((uint64_t *)&unk_10083A370);
    v150 = String.init<A>(describing:)(&v216, v149);
    v216 = sub_10001A820(v150, v151, &v219);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v136, v137, "Successfully indexed list {list: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s}", (uint8_t *)v138, 0x16u);
    swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v139, -1, -1);
    swift_slowDealloc(v138, -1, -1);

  }
  else
  {

  }
  v152 = CSSearchableItemAttributeSet.rem_objectIDString.getter();
  if (v153)
  {
    v154 = v152;
    v155 = v153;
    v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppIntentsListEntityName);
    v158 = v157;
    v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppIntentsListTypeDisplayName);
    v161 = v160;
    propertyDictionary = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v182.value._object = v161;
    v182.value._countAndFlagsBits = v159;
    v162._countAndFlagsBits = v154;
    v162._object = v155;
    v163._countAndFlagsBits = v156;
    v163._object = v158;
    v164._countAndFlagsBits = v184;
    v164._object = v206;
    CSSearchableItemAttributeSet.associate(entityInstanceIdentifier:entityTypeIdentifier:displayTitle:displaySubtitle:displaySynonyms:typeDisplayName:typeDisplaySynonyms:propertyDictionary:priority:)(v162, v163, v164, (Swift::String_optional)0, (Swift::OpaquePointer)_swiftEmptyArrayStorage, v182, (Swift::OpaquePointer)_swiftEmptyArrayStorage, (Swift::OpaquePointer)propertyDictionary, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v165 = (id)v47;
    v166 = Logger.logObject.getter(v165);
    v167 = static os_log_type_t.info.getter(v166);
    if (os_log_type_enabled(v166, v167))
    {
      v168 = swift_slowAlloc(22, -1);
      v169 = swift_slowAlloc(64, -1);
      v219 = v169;
      *(_DWORD *)v168 = 136446466;
      v216 = CSSearchableItemAttributeSet.rem_objectID.getter();
      v170 = sub_10001A630((uint64_t *)&unk_100844910);
      v171 = String.init<A>(describing:)(&v216, v170);
      v216 = sub_10001A820(v171, v172, &v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217);

      *(_QWORD *)&v173 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v168 + 12) = 2082;
      v174 = objc_msgSend(v165, "identifier", v173);
      if (v174)
      {
        v175 = v174;
        v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v174);
        v178 = v177;

      }
      else
      {
        v176 = 0;
        v178 = 0;
      }
      v216 = v176;
      v217[0] = v178;
      v179 = sub_10001A630((uint64_t *)&unk_10083A370);
      v180 = String.init<A>(describing:)(&v216, v179);
      v216 = sub_10001A820(v180, v181, &v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v166, v167, "Associating list entity with attributes {list: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s}", (uint8_t *)v168, 0x16u);
      swift_arrayDestroy(v169, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v169, -1, -1);
      swift_slowDealloc(v168, -1, -1);

      swift_release(v215);
    }
    else
    {

      swift_release(v215);
    }

    (*(void (**)(char *, uint64_t))(v190 + 8))(v208, v191);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v209, v212);
    (*(void (**)(uint64_t *, uint64_t))(v211 + 8))(v207, v213);
  }
  else
  {

    swift_release(v215);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v190 + 8))(v208, v191);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v209, v212);
    (*(void (**)(uint64_t *, uint64_t))(v211 + 8))(v99, v213);
  }
  sub_10000882C(v214, (uint64_t *)&unk_100839C80);
  return v47;
}

void sub_10016DA60(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;

  if (!a1)
  {
    if (qword_100836DF8 != -1)
      swift_once(&qword_100836DF8, sub_1001696FC);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001AAA8(v14, (uint64_t)qword_10083D668);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v18 = 134217984;
      v23 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "CoreSpotlight deleteAllSearchableItems done, upgrading spotlightIndexVersion to %ld", v18, 0xCu);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
    v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a2);
    objc_msgSend(v19, "setSpotlightIndexVersion:", v7);

LABEL_13:
    if (!a3)
      return;
    goto LABEL_14;
  }
  swift_errorRetain(a1);
  if (qword_100836DF8 != -1)
    swift_once(&qword_100836DF8, sub_1001696FC);
  v5 = type metadata accessor for Logger(0);
  sub_10001AAA8(v5, (uint64_t)qword_10083D668);
  swift_errorRetain(a1);
  v6 = swift_errorRetain(a1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v7, v8))
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    goto LABEL_13;
  }
  v9 = (uint8_t *)swift_slowAlloc(12, -1);
  v10 = swift_slowAlloc(32, -1);
  v23 = v10;
  *(_DWORD *)v9 = 136315138;
  swift_getErrorValue(a1, v22, v21);
  v11 = Error.localizedDescription.getter(v21[1], v21[2]);
  v20 = sub_10001A820(v11, v12, &v23);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21);
  swift_bridgeObjectRelease();
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error occured trying to deleteAllSearchableItems {error: %s}", v9, 0xCu);
  swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v10, -1, -1);
  swift_slowDealloc(v9, -1, -1);

  swift_errorRelease(a1);
  if (a3)
LABEL_14:
    a3(a1);
}

void sub_10016DDFC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;

  v5 = sub_10016E368();
  v6 = sub_10001A630((uint64_t *)&unk_10083A340);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C00;
  v8 = objc_msgSend(v2, "domainIdentifier");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15[4] = a1;
  v16 = a2;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_1000E18E4;
  v15[3] = &unk_1007E71D8;
  v13 = _Block_copy(v15);
  v14 = v16;
  swift_retain();
  swift_release(v14);
  objc_msgSend(v5, "deleteSearchableItemsWithDomainIdentifiers:completionHandler:", isa, v13);
  _Block_release(v13);

}

void sub_10016DF9C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  if (a1)
  {
    v5 = swift_allocObject(&unk_1007E71C0, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_100119B20;
  }
  else
  {
    v5 = 0;
    v6 = REMCDList.cleanUpAfterLocalObjectMerge();
  }
  v7 = swift_allocObject(&unk_1007E7170, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  sub_1000E51CC(a1, a2);
  v8 = sub_10016E368();
  v11[4] = sub_100119B20;
  v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1000094C8;
  v11[3] = &unk_1007E7188;
  v9 = _Block_copy(v11);
  v10 = v12;
  swift_retain();
  swift_release(v10);
  objc_msgSend(v2, "searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:", v8, v9);
  _Block_release(v9);
  swift_release(v7);

}

void sub_10016E158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  Class isa;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  if (a2)
  {
    v6 = swift_allocObject(&unk_1007E7148, 32, 7);
    *(_QWORD *)(v6 + 16) = a2;
    *(_QWORD *)(v6 + 24) = a3;
    v7 = sub_1000098EC;
  }
  else
  {
    v6 = 0;
    v7 = REMCDList.cleanUpAfterLocalObjectMerge();
  }
  v8 = swift_allocObject(&unk_1007E70F8, 32, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  sub_1000E51CC(a2, a3);
  v9 = sub_10016E368();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v13[4] = sub_1000098EC;
  v14 = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_1000094C8;
  v13[3] = &unk_1007E7110;
  v11 = _Block_copy(v13);
  v12 = v14;
  swift_retain();
  swift_release(v12);
  objc_msgSend(v3, "searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:", v9, isa, v11);
  _Block_release(v11);
  swift_release(v8);

}

id sub_10016E368()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  NSString v12;
  id v13;
  NSString v14;
  id v15;

  v1 = objc_msgSend(v0, "indexName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v3 = v2;

  v4 = objc_msgSend(v0, "protectionClass");
  if (v4)
  {
    v5 = v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(v0, "bundleIdentifier");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v10 = v9;

  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  if (v7)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_allocWithZone((Class)CSSearchableIndex);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v15 = objc_msgSend(v13, "initWithName:protectionClass:bundleIdentifier:", v11, v12, v14);

  return v15;
}

uint64_t sub_10016E4C4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for REMSpotlightBadgeType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (void *)REMListBadgeEmblemDefault;
  v9 = objc_msgSend(a1, "badgeEmblem");
  if (v9)
  {
    v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v13;
  }
  v14 = objc_allocWithZone((Class)REMListBadge);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v16 = objc_msgSend(v14, "initWithRawValue:", v15);

  v17 = objc_msgSend(v16, "emoji");
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

    *a2 = v19;
    a2[1] = v21;
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(a2, enum case for REMSpotlightBadgeType.emoji(_:), v4);
  }
  else
  {
    v23 = objc_msgSend(v16, "emblem");
    if (!v23)
      v23 = v8;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    *v7 = v24;
    v7[1] = v26;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for REMSpotlightBadgeType.emblem(_:), v4);
    return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 32))(a2, v7, v4);
  }
}

id sub_10016E71C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDCoreDataCoreSpotlightDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDCoreDataCoreSpotlightDelegate()
{
  return objc_opt_self(_TtC7remindd31RDCoreDataCoreSpotlightDelegate);
}

uint64_t sub_10016E77C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10016E7A0()
{
  unint64_t result;

  result = qword_10083D6C0;
  if (!qword_10083D6C0)
  {
    result = swift_getWitnessTable(&unk_1006AB7DC, &type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError);
    atomic_store(result, (unint64_t *)&qword_10083D6C0);
  }
  return result;
}

unint64_t sub_10016E7E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A630(&qword_1008438B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100008868(v7, (uint64_t)&v16, &qword_10083D6D8);
    v8 = v16;
    v9 = v17;
    result = sub_10001A6DC(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10001A6CC(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10016E918()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10016E93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 < 3 || a5 == 0)
    return swift_bridgeObjectRelease(a2);
  if (a5 == 1)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

void sub_10016E994(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  NSString v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  uint64_t aBlock;
  _QWORD v25[4];
  _QWORD *v26;

  static String._unconditionallyBridgeFromObjectiveC(_:)(REMDaemonCoreSpotlightIndexName);
  v4 = static NSFileProtectionType.rem_spotlightIndexFileProtection.getter();
  if (v4)
  {
    v5 = (void *)v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppBundleIdentifier);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v7)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  v10 = objc_allocWithZone((Class)CSSearchableIndex);
  v11 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v10, "initWithName:protectionClass:bundleIdentifier:", v8, v9, v11, swift_bridgeObjectRelease().n128_f64[0]);

  v12 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v13 = objc_msgSend(v12, "spotlightIndexVersion");

  if (v13)
  {
    v14 = (uint64_t)objc_msgSend(v13, "integerValue");

    if (v14 >= 6)
    {
      if (a1)
        a1(0);

      return;
    }
  }
  else
  {
    v14 = -1;
  }
  if (qword_100836DF8 != -1)
    swift_once(&qword_100836DF8, sub_1001696FC);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001AAA8(v15, (uint64_t)qword_10083D668);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    *(_DWORD *)v19 = 134218240;
    aBlock = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v25);
    *(_WORD *)(v19 + 12) = 2048;
    aBlock = 6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Device spotlight index is outdated, removing the index. {device: %ld, required: %ld}", (uint8_t *)v19, 0x16u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = (_QWORD *)swift_allocObject(&unk_1007E72B0, 40, 7);
  v20[2] = 6;
  v20[3] = a1;
  v20[4] = a2;
  v25[3] = sub_10016ED18;
  v26 = v20;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v25[0] = 1107296256;
  v25[1] = sub_1000E18E4;
  v25[2] = &unk_1007E72C8;
  v21 = _Block_copy(&aBlock);
  v22 = v26;
  sub_1000E51CC((uint64_t)a1, a2);
  swift_release(v22);
  objc_msgSend(v23, "deleteAllSearchableItemsWithCompletionHandler:", v21);
  _Block_release(v21);

}

uint64_t sub_10016ECEC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10016ED18(uint64_t a1)
{
  uint64_t v1;

  sub_10016DA60(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_10016ED24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 < 3 || a5 == 0)
    return swift_bridgeObjectRetain(a2);
  if (a5 == 1)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t destroy for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1)
{
  return sub_10016E93C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10016ED24(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10016ED24(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_10016E93C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_10016E93C(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_10016EF38(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError()
{
  return &type metadata for RDCoreDataCoreSpotlightDelegate.AttributeSetCreationError;
}

void sub_10016EF80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (void *)v0[2];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100836E00, sub_10016F110);
    goto LABEL_4;
  }
  if ((*((_BYTE *)v0 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_started) & 1) == 0)
  {
    v12 = objc_autoreleasePoolPush();
    sub_10016F3E4(v0);
    objc_autoreleasePoolPop(v12);
    return;
  }
  if (qword_100836E00 != -1)
    goto LABEL_9;
LABEL_4:
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001AAA8(v7, (uint64_t)qword_10083D710);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDHashtagLabelUpdater.start() must be called exactly once", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

}

uint64_t sub_10016F110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10083D710);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10083D710);
  if (qword_100837640 != -1)
    swift_once(&qword_100837640, sub_1004A188C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008720A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10016F1A0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v0 = sub_10001A630((uint64_t *)&unk_100838030);
  sub_10009EF3C(v0, qword_100871C70);
  v1 = (char *)sub_10001AAA8(v0, (uint64_t)qword_100871C70);
  v2 = sub_10001A630((uint64_t *)&unk_10083DBC0);
  v3 = *(int *)(v2 + 48);
  v4 = *(int *)(v2 + 64);
  if (qword_100836E20 != -1)
    swift_once(&qword_100836E20, sub_100172050);
  v5 = (void *)qword_10083D730;
  *(_QWORD *)v1 = qword_10083D730;
  v6 = qword_100836E10;
  v7 = v5;
  if (v6 != -1)
    swift_once(&qword_100836E10, sub_10016F2C4);
  v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v9 = sub_10001AAA8(v8, (uint64_t)qword_100871C88);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(&v1[v3], v9, v8);
  *(_QWORD *)&v1[v4] = 50;
  return (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for Publishers.TimeGroupingStrategy.byTimeOrCount<A>(_:), v0);
}

uint64_t sub_10016F2C4()
{
  uint64_t v0;

  v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  sub_10009EF3C(v0, qword_100871C88);
  sub_10001AAA8(v0, (uint64_t)qword_100871C88);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(2);
}

void sub_10016F310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_10001A630((uint64_t *)&unk_10083A340);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A3C40;
  v2 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "cdEntityName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *(_QWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 40) = v6;
  v7 = objc_msgSend((id)objc_opt_self(REMSharedToMeReminderPlaceholder), "cdEntityName");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  *(_QWORD *)(v1 + 48) = v8;
  *(_QWORD *)(v1 + 56) = v10;
  qword_10083D728 = v1;
}

double sub_10016F3E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t Strong;
  uint64_t v51;
  uint64_t v52;
  uint64_t ObjectType;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  id v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  id v105;
  uint64_t v106;
  id v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint8_t *v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(_QWORD, _QWORD);
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint8_t *v133;
  void *v134;
  _QWORD *v135;
  _QWORD *v136;
  void *v137;
  id v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  double result;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(_QWORD, _QWORD, _QWORD);
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t aBlock;
  _QWORD v202[4];
  _QWORD *v203;
  _QWORD *v204;

  v200 = *a1;
  v162 = type metadata accessor for DispatchWorkItemFlags(0);
  v161 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v160 = (char *)&v149 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for DispatchQoS(0);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v157 = (char *)&v149 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for DispatchTimeInterval(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v154 = (uint64_t *)((char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v185 = type metadata accessor for DispatchTime(0);
  v153 = *(_QWORD *)(v185 - 8);
  v5 = __chkstk_darwin(v185);
  v152 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v184 = (char *)&v149 - v7;
  v177 = sub_10001A630((uint64_t *)&unk_10083DB18);
  v176 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v175 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_10001A630((uint64_t *)&unk_10083DB20);
  v179 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v178 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_10001A630((uint64_t *)&unk_10083DB28);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v181 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_10001A630((uint64_t *)&unk_10083DB30);
  v167 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v172 = (char *)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_10001A630((uint64_t *)&unk_10083DB38);
  v168 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v174 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_10001A630((uint64_t *)&unk_10083DB40);
  v170 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v169 = (char *)&v149 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_10001A630((uint64_t *)&unk_10084D060);
  v165 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v164 = (char *)&v149 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_10001A630((uint64_t *)&unk_10083DB50);
  v163 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v197 = (char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v16);
  v195 = (char *)&v149 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630((uint64_t *)&unk_100838070);
  v199 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v149 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A630((uint64_t *)&unk_10083A960);
  v187 = *(_QWORD *)(v21 - 8);
  v188 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v149 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A630((uint64_t *)&unk_100838080);
  v190 = *(_QWORD *)(v24 - 8);
  v191 = v24;
  __chkstk_darwin(v24);
  v189 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v26 = type metadata accessor for Logger(0);
  v151 = sub_10001AAA8(v26, (uint64_t)qword_10083D710);
  v27 = Logger.logObject.getter(v151);
  v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting RDHashtagLabelUpdater", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

  v186 = sub_10017084C();
  v30 = sub_100399C74((void *)0xD000000000000015, 0x80000001006AB820, 0);
  aBlock = v30;
  v31 = sub_10001A630((uint64_t *)&unk_10084D080);
  v32 = sub_10001A630((uint64_t *)&unk_100838090);
  v33 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_1004A4448, 0, v31, v32, v33);
  v34 = sub_1000A5F84((unint64_t *)&unk_1008380A0, (uint64_t *)&unk_100838070, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher.filter(_:)(sub_1000F27FC, 0, v18, v34);
  (*(void (**)(char *, uint64_t))(v199 + 8))(v20, v18);
  swift_release(v30);
  aBlock = a1[2];
  v35 = (id)aBlock;
  v36 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v37 = (uint64_t)v195;
  v192 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v36 - 8) + 56);
  v193 = v36;
  v192(v195, 1, 1);
  v38 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v39 = sub_1000A5F84(&qword_10083EEE0, (uint64_t *)&unk_10083A960, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v40 = sub_1000E51DC((unint64_t *)&qword_1008380B0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v41 = v35;
  v42 = a1;
  v43 = v188;
  v44 = v189;
  v199 = v40;
  Publisher.receive<A>(on:options:)(&aBlock, v37, v188, v38, v39, v40);
  sub_10000882C(v37, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v187 + 8))(v23, v43);
  sub_1000A5F84((unint64_t *)&unk_10083AA00, (uint64_t *)&unk_100838080, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v45 = v191;
  v46 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v42, sub_100170BF0, 0, 0, 0, v191, v200);
  (*(void (**)(char *, uint64_t))(v190 + 8))(v44, v45);
  v47 = *(_QWORD *)((char *)v42 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_cloudAccountsDidChangeCancellable);
  *(_QWORD *)((char *)v42 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_cloudAccountsDidChangeCancellable) = v46;
  swift_release(v47);
  *((_BYTE *)v42 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_started) = 1;
  v48 = (char *)v42 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
  Strong = swift_unknownObjectWeakLoadStrong((char *)v42 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate, v49);
  if (Strong)
  {
    v51 = Strong;
    v52 = *((_QWORD *)v48 + 1);
    ObjectType = swift_getObjectType(Strong);
    LOBYTE(v52) = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 16))(ObjectType, v52);
    swift_unknownObjectRelease(v51);
    if ((v52 & 1) == 0)
      goto LABEL_17;
  }
  v196 = v38;
  v191 = (uint64_t)v48;
  v54 = sub_10001A630((uint64_t *)&unk_10083A340);
  v55 = swift_allocObject(v54, 96, 7);
  *(_OWORD *)(v55 + 16) = xmmword_1006A5130;
  *(_QWORD *)(v55 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDHashtagLabelUpdaterAuthor);
  *(_QWORD *)(v55 + 40) = v56;
  *(_QWORD *)(v55 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerDiacriticsInsensitiveHashtagLabelsMigrationAuthor);
  *(_QWORD *)(v55 + 56) = v57;
  *(_QWORD *)(v55 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDSharedInlineTagAutoConvertAuthor);
  *(_QWORD *)(v55 + 72) = v58;
  *(_QWORD *)(v55 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerAutoConvertSharedInlineTagsMigrationAuthor);
  *(_QWORD *)(v55 + 88) = v59;
  v60 = sub_100399F04((void *)v42[3], 0xD000000000000027, 0x80000001006FAD30, v55);
  swift_bridgeObjectRelease(v55);
  v61 = v42;
  if (qword_100836E18 != -1)
    swift_once(&qword_100836E18, sub_10016F310);
  v62 = qword_10083D728;
  swift_bridgeObjectRetain(qword_10083D728);
  v64 = sub_10011EE40(v63);
  swift_bridgeObjectRelease(v62);
  aBlock = v60;
  v65 = swift_allocObject(&unk_1007E73E0, 24, 7);
  *(_QWORD *)(v65 + 16) = v64;
  swift_bridgeObjectRetain(v64);
  v66 = sub_10001A630((uint64_t *)&unk_10083EF50);
  v67 = sub_10001A630((uint64_t *)&unk_10083DB60);
  v68 = sub_1000A5F84((unint64_t *)&unk_10083EF60, (uint64_t *)&unk_10083EF50, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v69 = v164;
  Publisher.map<A>(_:)(sub_100188E48, v65, v66, v67, v68);
  swift_release(v65);
  v70 = sub_1000A5F84((unint64_t *)&unk_10083DB70, (uint64_t *)&unk_10084D060, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v71 = v166;
  Publisher.filter(_:)(sub_1000F27FC, 0, v166, v70);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v69, v71);
  swift_release(v60);
  swift_bridgeObjectRelease(v64);
  v187 = sub_1000A5F84((unint64_t *)&unk_10083EF70, (uint64_t *)&unk_10083DB50, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v72 = v172;
  Publisher.filter(_:)(sub_1001844E0, 0, v198, v187);
  v73 = *(_QWORD *)((char *)v61
                  + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_highPrioritySubscriptionTransactionRegistrar);
  v74 = swift_allocObject(&unk_1007E7408, 32, 7);
  *(_QWORD *)(v74 + 16) = v73;
  *(_QWORD *)(v74 + 24) = 1;
  v75 = sub_1000A5F84((unint64_t *)&unk_10083DB80, (uint64_t *)&unk_10083DB30, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v166 = v75;
  swift_retain(v73);
  v76 = v173;
  v77 = v61;
  v78 = v174;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_100188E74, v74, 0, 0, 0, 0, 0, 0, v173, v75);
  swift_release(v74);
  v167 = *(_QWORD *)(v167 + 8);
  ((void (*)(char *, uint64_t))v167)(v72, v76);
  v80 = v77;
  aBlock = v77[2];
  v79 = (id)aBlock;
  v81 = (uint64_t)v195;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v192)(v195, 1, 1, v193);
  v82 = sub_1000A5F84((unint64_t *)&unk_10083DB88, (uint64_t *)&unk_10083DB38, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v165 = v82;
  v83 = v79;
  v84 = v169;
  v85 = v194;
  Publisher.receive<A>(on:options:)(&aBlock, v81, v194, v196, v82, v199);
  sub_10000882C(v81, &qword_10083A970);

  v168 = *(_QWORD *)(v168 + 8);
  ((void (*)(char *, uint64_t))v168)(v78, v85);
  v86 = (_QWORD *)swift_allocObject(&unk_1007E7430, 40, 7);
  v86[2] = sub_100170EFC;
  v86[3] = 0;
  v86[4] = v73;
  sub_1000A5F84((unint64_t *)&unk_10083DB90, (uint64_t *)&unk_10083DB40, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v73);
  v87 = (char *)v80;
  v88 = v80;
  v89 = v171;
  v90 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v88, sub_100188EA8, v86, 0, 0, v171, v200);
  swift_release(v86);
  (*(void (**)(char *, uint64_t))(v170 + 8))(v84, v89);
  v91 = v87;
  v92 = (uint64_t)&v87[OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_hashtagInsertEventCancellables];
  v188 = v92;
  swift_beginAccess(v92, &aBlock, 33, 0);
  v93 = sub_10001A630((uint64_t *)&unk_1008380C0);
  v190 = v93;
  v189 = (char *)sub_1000A5F84((unint64_t *)&unk_10083A9F0, (uint64_t *)&unk_1008380C0, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v92, v93, v189);
  swift_endAccess(&aBlock);
  swift_release(v90);
  Publisher.filter(_:)(sub_1001843CC, 0, v198, v187);
  v150 = v91;
  v94 = *(_QWORD *)&v91[OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_lowPrioritySubscriptionTransactionRegistrar];
  v95 = swift_allocObject(&unk_1007E7458, 32, 7);
  v187 = v94;
  *(_QWORD *)(v95 + 16) = v94;
  *(_QWORD *)(v95 + 24) = 1;
  swift_retain(v94);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_10018936C, v95, 0, 0, 0, 0, 0, 0, v76, v166);
  swift_release(v95);
  ((void (*)(char *, uint64_t))v167)(v72, v76);
  v96 = &v91[OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_timeGroupingStrategy];
  v97 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v192;
  v98 = v193;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v192)(v81, 1, 1, v193);
  v99 = v175;
  v100 = v194;
  Publisher.collect<A>(_:options:)(v96, v81, v194, v196, v165, v199);
  v101 = sub_1000A5F84((unint64_t *)&unk_10083DB98, (uint64_t *)&unk_10083DB18, (uint64_t)&protocol conformance descriptor for Publishers.CollectByTime<A, B>);
  v102 = v178;
  v103 = v177;
  Publisher.map<A>(_:)(sub_100397AE8, 0, v177, &type metadata for RDStoreControllerNotificationCenter.CollectAndCoalescedChangedEntitiesWithInputCount, v101);
  (*(void (**)(char *, uint64_t))(v176 + 8))(v99, v103);
  sub_10000882C(v81, &qword_10083A970);
  ((void (*)(char *, uint64_t))v168)(v78, v100);
  v104 = v150;
  aBlock = *((_QWORD *)v150 + 2);
  v105 = (id)aBlock;
  v97(v81, 1, 1, v98);
  v106 = sub_1000A5F84((unint64_t *)&unk_10083DBA0, (uint64_t *)&unk_10083DB20, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v107 = v105;
  v108 = v181;
  v109 = v180;
  Publisher.receive<A>(on:options:)(&aBlock, v81, v180, v196, v106, v199);
  sub_10000882C(v81, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v179 + 8))(v102, v109);
  v110 = (_QWORD *)swift_allocObject(&unk_1007E7480, 40, 7);
  v111 = v187;
  v110[2] = v187;
  v110[3] = sub_100170EFC;
  v110[4] = 0;
  sub_1000A5F84((unint64_t *)&unk_10083DBA8, (uint64_t *)&unk_10083DB28, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v111);
  v112 = v183;
  v113 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)(v104, sub_100188EE0, v110, 0, 0, v183, v200);
  swift_release(v110);
  (*(void (**)(char *, uint64_t))(v182 + 8))(v108, v112);
  v114 = v188;
  swift_beginAccess(v188, &aBlock, 33, 0);
  AnyCancellable.store<A>(in:)(v114, v190, v189);
  swift_endAccess(&aBlock);
  swift_release(v113);
  v115 = v191;
  v117 = swift_unknownObjectWeakLoadStrong(v191, v116);
  if (v117)
  {
    v118 = v117;
    v119 = *(_QWORD *)(v115 + 8);
    v120 = swift_getObjectType(v117);
    LOBYTE(v119) = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 24))(v120, v119);
    v117 = swift_unknownObjectRelease(v118);
    if ((v119 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v163 + 8))(v197, v198);
LABEL_17:
      *(_QWORD *)&result = swift_bridgeObjectRelease(v186).n128_u64[0];
      return result;
    }
  }
  v121 = Logger.logObject.getter(v117);
  v122 = static os_log_type_t.default.getter(v121);
  if (os_log_type_enabled(v121, v122))
  {
    v123 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v123 = 0;
    _os_log_impl((void *)&_mh_execute_header, v121, v122, "os_transaction INIT {name: com.apple.remindd.RDHashtagLabelUpdater.start}", v123, 2u);
    swift_slowDealloc(v123, -1, -1);
  }

  v124 = os_transaction_create("com.apple.remindd.RDHashtagLabelUpdater.start");
  v125 = v152;
  static DispatchTime.now()(v124);
  v126 = v154;
  *v154 = 5;
  v127 = v155;
  v128 = v156;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v155 + 104))(v126, enum case for DispatchTimeInterval.seconds(_:), v156);
  + infix(_:_:)(v125, v126);
  (*(void (**)(_QWORD *, uint64_t))(v127 + 8))(v126, v128);
  v129 = *(uint64_t (**)(_QWORD, _QWORD))(v153 + 8);
  v130 = v129(v125, v185);
  v131 = Logger.logObject.getter(v130);
  v132 = static os_log_type_t.default.getter(v131);
  if (os_log_type_enabled(v131, v132))
  {
    v133 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v133 = 134217984;
    aBlock = 5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v202);
    _os_log_impl((void *)&_mh_execute_header, v131, v132, "RDHashtagLabelUpdater: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %ld}", v133, 0xCu);
    swift_slowDealloc(v133, -1, -1);
  }

  v134 = (void *)*((_QWORD *)v104 + 2);
  v135 = (_QWORD *)swift_allocObject(&unk_1007E74A8, 40, 7);
  v136 = v186;
  v135[2] = v104;
  v135[3] = v136;
  v135[4] = v124;
  v202[3] = sub_100188F40;
  v203 = v135;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v202[0] = 1107296256;
  v202[1] = sub_1000094C8;
  v202[2] = &unk_1007E74C0;
  v137 = _Block_copy(&aBlock);
  v138 = v134;
  swift_retain(v104);
  v139 = swift_unknownObjectRetain(v124);
  v140 = v157;
  static DispatchQoS.unspecified.getter(v139);
  v204 = _swiftEmptyArrayStorage;
  v141 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v142 = sub_10001A630((uint64_t *)&unk_100838000);
  v143 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v144 = v160;
  v145 = v142;
  v146 = v162;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v204, v145, v143, v162, v141);
  v147 = v184;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v184, v140, v144, v137);
  _Block_release(v137);
  swift_unknownObjectRelease(v124);

  (*(void (**)(char *, uint64_t))(v161 + 8))(v144, v146);
  (*(void (**)(char *, uint64_t))(v158 + 8))(v140, v159);
  v129(v147, v185);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v197, v198);
  swift_release(v203);
  return result;
}

_QWORD *sub_10017084C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  id v31;
  uint64_t v32;
  _BYTE v33[16];
  id v34;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)REMStore), "initWithDaemonController:", *(_QWORD *)(v0 + 32));
  v34 = 0;
  v3 = objc_msgSend(v2, "fetchActiveCloudKitAccountObjectIDsWithFetchOption:error:", 2, &v34);
  v4 = v34;
  if (v3)
  {
    v5 = v3;
    v6 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
    v8 = v4;

    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10083D710);
    v10 = swift_bridgeObjectRetain_n(v7, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = v2;
      v14 = (void *)swift_slowAlloc(32, -1);
      v34 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = swift_bridgeObjectRetain(v7);
      v16 = Array.description.getter(v15, v6);
      v18 = v17;
      swift_bridgeObjectRelease(v7);
      v32 = sub_10001A820(v16, v18, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33);
      swift_bridgeObjectRelease_n(v7, 2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDHashtagLabelUpdater: active accounts supporting hashtags: %{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      v19 = v14;
      v2 = v31;
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v7, 2);
    }
    swift_retain(v1);
    v29 = v2;
    v28 = sub_100184978(v7, v1, v29);
    swift_bridgeObjectRelease(v7);
    swift_release(v1);

  }
  else
  {
    v20 = v34;
    v21 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v22);
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001AAA8(v23, (uint64_t)qword_10083D710);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDHashtagLabelUpdater: Not tracking changes since there's no active cloudkit account logged in or enabled", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    swift_errorRelease(v21);
    return _swiftEmptyArrayStorage;
  }
  return v28;
}

void sub_100170BF0()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_100170C34();
  objc_autoreleasePoolPop(v0);
}

void sub_100170C34()
{
  id v0;
  void *v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v0 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v0)
  {
    v1 = v0;
    v2 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "giveAccountWithIDAnotherChance:", v2);

    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001AAA8(v3, (uint64_t)qword_10083D710);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      *(_DWORD *)v7 = 136446210;
      v21 = v8;
      v20 = 0x80000001006FACF0;
      v9 = sub_10001A630((uint64_t *)&unk_10083A370);
      v10 = Optional.descriptionOrNil.getter(v9);
      v12 = v11;
      v19 = sub_10001A820(v10, v11, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_bridgeObjectRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDHashtagLabelUpdater: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

  }
  v13 = sub_10017084C();
  swift_bridgeObjectRelease(v13);
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_10083D710);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDHashtagLabelUpdater: (Re-)initialized changeTrackingHelpers upon enabled/disabled CloudKit account(s).", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

}

void sub_100170F00(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSString v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  NSString v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  _BYTE v71[56];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + 16);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_33:
    if (a1 < 0)
      v58 = a1;
    else
      v58 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v12 = _CocoaArrayWrapper.endIndex.getter(v58);
    swift_bridgeObjectRelease(a1);
    if (v12)
      goto LABEL_4;
LABEL_37:
    if (qword_100836E00 == -1)
      goto LABEL_38;
    goto LABEL_45;
  }
  if ((unint64_t)a1 >> 62)
    goto LABEL_33;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
    goto LABEL_37;
LABEL_4:
  v13 = &OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitterOperationRefreshFromLastConsumedOnLaunch;
  if ((a2 & 1) == 0)
    v13 = &OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitterOperationRefreshFromLastConsumed;
  v14 = *(_QWORD *)(v3 + *v13 + 8);
  swift_bridgeObjectRetain(v14);
  v15 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitTarget);
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v16, "tokenByRegisteringAccount:forOperationWithName:", v17, v18, swift_bridgeObjectRelease(v14).n128_f64[0]);

    if (v19)
    {
      if (v12 < 1)
      {
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRetain(a1);
        v20 = 0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0)
            v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, a1);
          else
            v21 = *(id *)(a1 + 8 * v20 + 32);
          v22 = v21;
          ++v20;
          v70 = v21;
          sub_100172848(&v70, v3);

        }
        while (v12 != v20);
        swift_bridgeObjectRelease(a1);
        v23 = v3 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
        Strong = swift_unknownObjectWeakLoadStrong(v23, v24);
        if (Strong)
        {
          v26 = Strong;
          v27 = *(_QWORD *)(v23 + 8);

          ObjectType = swift_getObjectType(v26);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(1, ObjectType, v27);
          swift_unknownObjectRelease(v26);
        }
        else
        {

        }
      }
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v14);
  }
  v29 = (void *)objc_opt_self(REMError);
  v30 = v3 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitterOperationRefreshFromLastConsumed;
  v31 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_babysitterOperationRefreshFromLastConsumed + 8);
  swift_bridgeObjectRetain(v31);
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v29, "babySatErrorWithOperationName:", v32, swift_bridgeObjectRelease(v31).n128_f64[0]);

  v34 = sub_10001A630((uint64_t *)&unk_10083DAB0);
  inited = swift_initStackObject(v34, v71);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = 0x696669746E656469;
  *(_QWORD *)(inited + 40) = 0xEA00000000007265;
  v36 = *(_QWORD *)(v30 + 8);
  swift_bridgeObjectRetain(v36);
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  *(_QWORD *)(inited + 48) = v37;
  v38 = sub_1002AFCB4(inited);
  type metadata accessor for Analytics(0, v39);
  v40 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_analyticsCrashDetected);
  v41 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_analyticsCrashDetected + 8);
  swift_bridgeObjectRetain(v41);
  v42 = sub_1003B0B84(v38);
  swift_bridgeObjectRelease(v38);
  v43 = v33;
  static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)(v40, v41, v42, v33, 1);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v42);

  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v44 = type metadata accessor for Logger(0);
  sub_10001AAA8(v44, (uint64_t)qword_10083D710);
  v45 = swift_retain(v3);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = (void *)swift_slowAlloc(32, -1);
    v70 = v49;
    *(_DWORD *)v48 = 136446210;
    v68 = sub_10001A820(0xD000000000000032, 0x80000001006FACF0, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
    swift_release(v3);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Babysitting RDHashtagLabelUpdater because it failed too many times {waiterID: %{public}s}.", v48, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);

  }
  else
  {

    swift_release(v3);
  }
  if (v12 >= 1)
  {
    swift_bridgeObjectRetain(a1);
    v50 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, a1);
      else
        v51 = *(id *)(a1 + 8 * v50 + 32);
      v52 = v51;
      ++v50;
      v70 = v51;
      sub_1001725B8(&v70);

    }
    while (v12 != v50);
    swift_bridgeObjectRelease(a1);
    v53 = v3 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
    v55 = swift_unknownObjectWeakLoadStrong(v53, v54);
    if (!v55)
    {

      return;
    }
    v56 = v55;
    v57 = *(_QWORD *)(v53 + 8);

    goto LABEL_42;
  }
  __break(1u);
LABEL_45:
  swift_once(&qword_100836E00, sub_10016F110);
LABEL_38:
  v59 = type metadata accessor for Logger(0);
  v60 = sub_10001AAA8(v59, (uint64_t)qword_10083D710);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "RDHashtagLabelUpdater: No account eligible for hashtag change tracking", v63, 2u);
    swift_slowDealloc(v63, -1, -1);
  }

  v64 = v3 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate;
  v66 = swift_unknownObjectWeakLoadStrong(v64, v65);
  if (v66)
  {
    v56 = v66;
    v57 = *(_QWORD *)(v64 + 8);
LABEL_42:
    v67 = swift_getObjectType(v56);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v57 + 32))(0, v67, v57);
    swift_unknownObjectRelease(v56);
  }
}

void sub_1001715C4()
{
  void *v0;
  _QWORD *v1;

  v0 = objc_autoreleasePoolPush();
  v1 = sub_10017084C();
  sub_100170F00((uint64_t)v1, 0);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v0);
}

void sub_10017160C(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = objc_autoreleasePoolPush();
  sub_100171660(a1, a2);
  objc_autoreleasePoolPop(v4);
}

void sub_100171660(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = sub_100171878(a2);
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_10083D710);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136315138;
    v17 = v8;
    if ((v2 & 1) != 0)
      v9 = 1702195828;
    else
      v9 = 0x65736C6166;
    if ((v2 & 1) != 0)
      v10 = 0xE400000000000000;
    else
      v10 = 0xE500000000000000;
    v15 = sub_10001A820(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDHashtagLabelUpdater: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %s}", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "os_transaction RELEASE {name: com.apple.remindd.RDHashtagLabelUpdater.start}", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

}

uint64_t sub_100171878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint32_t *p_ivar_base_size;
  uint64_t v6;
  id v7;
  id i;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  uint64_t v40;

  v1 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v32 = a1;
    else
      v32 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v32);
    if (v2)
      goto LABEL_3;
LABEL_28:
    swift_bridgeObjectRelease(v1);
    v31 = 0;
    return v31 & 1;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v2)
    goto LABEL_28;
LABEL_3:
  v34 = v2 - 1;
  if (v2 < 1)
    __break(1u);
  v3 = 0;
  v38 = 0;
  v4 = v1 & 0xC000000000000001;
  v35 = v1 + 32;
  p_ivar_base_size = &RDDataAccess.ivar_base_size;
  v36 = v1 & 0xC000000000000001;
  v37 = v2;
  if ((v1 & 0xC000000000000001) != 0)
    goto LABEL_9;
LABEL_10:
  while (2)
  {
    for (i = *(id *)(v35 + 8 * v3); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1))
    {
      v9 = i;
      if ((v38 & 1) != 0)
        break;
      v10 = objc_msgSend(i, *((SEL *)p_ivar_base_size + 321));
      v11 = objc_msgSend(v10, "loggingDescription");
      swift_unknownObjectRelease(v10);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v40 = 0;
      v39 = 0;
      v15 = objc_msgSend(v9, "compareCurrentChangeTokenToLastConsumedWithResult:error:", &v40, &v39);
      v16 = v39;
      if (v15)
      {
        v6 = v40;
        v7 = v39;

        swift_bridgeObjectRelease(v14);
        if (v6 == 4)
          goto LABEL_20;
      }
      else
      {
        v17 = v1;
        v18 = v39;
        v19 = (void *)_convertNSErrorToError(_:)(v16);

        swift_willThrow(v20);
        if (qword_100836E00 != -1)
          swift_once(&qword_100836E00, sub_10016F110);
        v21 = type metadata accessor for Logger(0);
        sub_10001AAA8(v21, (uint64_t)qword_10083D710);
        swift_errorRetain(v19);
        swift_errorRetain(v19);
        swift_bridgeObjectRetain(v14);
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          v25 = swift_slowAlloc(22, -1);
          v26 = swift_slowAlloc(64, -1);
          v40 = v26;
          *(_DWORD *)v25 = 136446466;
          swift_bridgeObjectRetain(v14);
          *(_QWORD *)(v25 + 4) = sub_10001A820(v12, v14, &v40);
          swift_bridgeObjectRelease_n(v14, 3);
          *(_WORD *)(v25 + 12) = 2080;
          v39 = v19;
          swift_errorRetain(v19);
          v27 = sub_10001A630((uint64_t *)&unk_10083AA20);
          v28 = String.init<A>(describing:)(&v39, v27);
          v30 = v29;
          *(_QWORD *)(v25 + 14) = sub_10001A820(v28, v29, &v40);
          swift_bridgeObjectRelease(v30);
          swift_errorRelease(v19);
          swift_errorRelease(v19);
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDHashtagLabelUpdater: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}s, error: %s}", (uint8_t *)v25, 0x16u);
          swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v26, -1, -1);
          swift_slowDealloc(v25, -1, -1);

          swift_errorRelease(v19);
        }
        else
        {
          swift_errorRelease(v19);
          swift_bridgeObjectRelease_n(v14, 2);
          swift_errorRelease(v19);
          swift_errorRelease(v19);

        }
        v1 = v17;
        v4 = v36;
        v2 = v37;
        p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
      }
      if (v2 == ++v3)
        goto LABEL_28;
      if (!v4)
        goto LABEL_10;
LABEL_9:
      ;
    }

LABEL_20:
    if (v34 != v3)
    {
      ++v3;
      v38 = 1;
      if (!v4)
        continue;
      goto LABEL_9;
    }
    break;
  }
  swift_bridgeObjectRelease(v1);
  sub_100170F00(v1, 1);
  return v31 & 1;
}

void sub_100171C80(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  _QWORD v36[3];
  _BYTE v37[8];
  _BYTE v38[40];
  uint64_t v39;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  KeyPath = swift_getKeyPath(&unk_1006AB9B0);
  if ((v4 & 1) == 0)
  {
    v6 = (v4 >> 1) - v3;
    v7 = __OFSUB__(v4 >> 1, v3);
    swift_unknownObjectRetain(v1);
    goto LABEL_6;
  }
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain_n(v1, 3);
  v11 = (_QWORD *)swift_dynamicCastClass(v10, v9);
  if (!v11)
  {
    swift_unknownObjectRelease(v1);
    v11 = _swiftEmptyArrayStorage;
  }
  v12 = v11[2];
  v13 = swift_release(v11);
  v6 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v13 = v1;
  if (v12 != v6)
  {
LABEL_24:
    swift_unknownObjectRelease(v13);
    v7 = 0;
LABEL_6:
    v8 = sub_1001E96A0(v1, v2, v3, v4);
    goto LABEL_14;
  }
  v14 = swift_dynamicCastClass(v1, v9);
  if (v14)
  {
    v8 = (_QWORD *)v14;
    v7 = 0;
  }
  else
  {
    swift_unknownObjectRelease(v1);
    v7 = 0;
    v8 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  swift_unknownObjectRelease(v1);
  v15 = sub_1001DF8D0((uint64_t)v8);
  swift_release(v8);
  v16 = (void *)sub_10033DA90(KeyPath, (uint64_t)v15);
  swift_release(KeyPath);
  v17 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v17, v38);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  v19 = swift_getKeyPath(&unk_1006AB9B0);
  *(_QWORD *)(inited + 32) = v19;
  v39 = inited;
  specialized Array._endMutation()(v19);
  v20 = v39;
  v21 = (void *)sub_100358798(v39, 0, 0, (uint64_t)v16);
  *(_QWORD *)&v22 = swift_bridgeObjectRelease(v20).n128_u64[0];
  if (v7)
  {
    __break(1u);
LABEL_22:
    swift_once(&qword_100836E00, sub_10016F110);
    goto LABEL_17;
  }
  objc_msgSend(v21, "setFetchLimit:", v6, v22);
  v23 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v24 = NSManagedObjectContext.fetch<A>(_:)(v21, v23);
  v7 = v34;
  if (!v34)
  {
    sub_1001E1178(v24);

    return;
  }
  if (qword_100836E00 != -1)
    goto LABEL_22;
LABEL_17:
  v25 = type metadata accessor for Logger(0);
  sub_10001AAA8(v25, (uint64_t)qword_10083D710);
  swift_errorRetain(v7);
  v26 = swift_errorRetain(v7);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v39 = v30;
    *(_DWORD *)v29 = 136315138;
    swift_getErrorValue(v7, v37, v36);
    v31 = Error.rem_errorDescription.getter(v36[1], v36[2]);
    v33 = v32;
    v35 = sub_10001A820(v31, v32, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);
    swift_bridgeObjectRelease(v33);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDHashtagLabelUpdater: failed to fetch reminders from database {error: %s}", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
}

uint64_t sub_100172050()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v20 = *(_QWORD *)(v0 - 8);
  v21 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.utility(_:), v9);
  v13 = static OS_dispatch_queue.global(qos:)(v12);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v17 = sub_1000A5F84((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v3, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v21);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000043, 0x80000001006FAE80, v8, v5, v2, v13);
  qword_10083D730 = result;
  return result;
}

id sub_100172304()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDHashtagLabelUpdater.BabysitTarget();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100172338(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  NSString v34;
  Class isa;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  objc_super v41;

  v38 = a2;
  v39 = a3;
  v40 = a4;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v37 - v10;
  v12 = *a1;
  v13 = objc_msgSend(*a1, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v11, v5);
  v19 = objc_msgSend(v12, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v21 = UUID.uuidString.getter(v20);
  v23 = v22;
  v18(v9, v5);
  v24 = (objc_class *)_s7remindd29ChangeTrackingAccountProviderCMa_0();
  v25 = (char *)objc_allocWithZone(v24);
  v26 = (uint64_t *)&v25[OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountID];
  *v26 = v15;
  v26[1] = v17;
  *(_QWORD *)&v25[OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_rem_accountObjectID] = v12;
  v27 = (uint64_t *)&v25[OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountDescription];
  *v27 = v21;
  v27[1] = v23;
  v41.receiver = v25;
  v41.super_class = v24;
  v28 = objc_msgSendSuper2(&v41, "init");
  v29 = *(_QWORD *)(v38 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_changeTrackingClientName + 8);
  v30 = qword_100836E18;
  swift_bridgeObjectRetain(v29);
  v31 = v39;
  if (v30 != -1)
    swift_once(&qword_100836E18, sub_10016F310);
  v32 = qword_10083D728;
  v33 = objc_allocWithZone((Class)REMDAChangeTrackingHelper);
  swift_bridgeObjectRetain(v32);
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v36 = objc_msgSend(v33, "initWithREMDAAccount:clientName:withREMStore:entityNames:", v28, v34, v31, isa, swift_bridgeObjectRelease(v32).n128_f64[0]);

  *v40 = v36;
}

void sub_1001725B8(id *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *a1;
  v2 = objc_msgSend(*a1, "account");
  v3 = objc_msgSend(v2, "loggingDescription");
  swift_unknownObjectRelease(v2);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  objc_msgSend(v1, "markChangesConsumed:", 1);
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v7 = type metadata accessor for Logger(0);
  sub_10001AAA8(v7, (uint64_t)qword_10083D710);
  v8 = v1;
  swift_bridgeObjectRetain(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v20 = v13;
    *(_DWORD *)v12 = 136446466;
    swift_bridgeObjectRetain(v6);
    v18 = (id)sub_10001A820(v4, v6, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v12 + 12) = 2082;
    v18 = objc_msgSend(v8, "upToToken");
    v14 = sub_10001A630(&qword_10083A358);
    v15 = String.init<A>(describing:)(&v18, v14);
    v17 = v16;
    v18 = (id)sub_10001A820(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDHashtagLabelUpdater: Mark to current token as consumed due to Babysitting {account: %{public}s, token: %{public}s}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v6, 2);
  }
}

void sub_100172848(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  _QWORD *v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  NSObject *v39;
  unint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjCClassFromMetadata;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Class isa;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  id v84;
  double v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  Class v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  id v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  double v121;
  void *v122;
  void *v123;
  id v124;
  id v125;
  id v126;
  id v127;
  NSObject *v128;
  os_log_type_t v129;
  int v130;
  uint64_t v131;
  _QWORD *v132;
  id v133;
  id v134;
  NSObject *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD v139[11];
  NSObject *v140;
  _QWORD *v141;
  void *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  NSObject *v151;
  uint64_t v152;
  uint64_t v153[4];
  _QWORD v154[2];
  uint64_t v155;
  uint64_t v156;

  v3 = v2;
  v148 = a2;
  v4 = (uint64_t)*a1;
  v5 = objc_msgSend(*a1, "account");
  v6 = objc_msgSend(v5, "loggingDescription");
  swift_unknownObjectRelease(v5);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = objc_msgSend((id)v4, "sinceToken");
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend((id)v4, "upToToken");
    if (v12)
    {
      v13 = v12;
      v145 = v7;
      if (qword_100836E00 != -1)
        goto LABEL_31;
      while (1)
      {
        v14 = type metadata accessor for Logger(0);
        v15 = sub_10001AAA8(v14, (uint64_t)qword_10083D710);
        swift_bridgeObjectRetain_n(v9, 2);
        v16 = v11;
        v17 = v13;
        v18 = v13;
        v19 = v16;
        v20 = v18;
        v150 = (_QWORD *)v15;
        v21 = Logger.logObject.getter(v20);
        v22 = static os_log_type_t.default.getter(v21);
        v23 = v22;
        v151 = v9;
        v149 = v4;
        v142 = v17;
        v143 = v11;
        v146 = v20;
        v147 = v19;
        if (os_log_type_enabled(v21, v22))
        {
          v24 = swift_slowAlloc(32, -1);
          v25 = (_QWORD *)swift_slowAlloc(16, -1);
          v144 = swift_slowAlloc(32, -1);
          v153[0] = v144;
          *(_DWORD *)v24 = 136446722;
          LODWORD(v141) = v23;
          swift_bridgeObjectRetain(v9);
          v155 = sub_10001A820(v145, (unint64_t)v9, v153);
          v140 = v21;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
          swift_bridgeObjectRelease_n(v9, 3);
          *(_WORD *)(v24 + 12) = 2114;
          v155 = (uint64_t)v19;
          v26 = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
          *v25 = v11;

          *(_WORD *)(v24 + 22) = 2114;
          v155 = (uint64_t)v20;
          v27 = v20;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
          v25[1] = v142;

          v9 = v151;
          _os_log_impl((void *)&_mh_execute_header, v140, (os_log_type_t)v141, "RDHashtagLabelUpdater: Processing change set {account: %{public}s, since: %{public}@, upTo: %{public}@}", (uint8_t *)v24, 0x20u);
          v28 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v25, 2, v28);
          swift_slowDealloc(v25, -1, -1);
          swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v144, -1, -1);
          v29 = v24;
          v4 = v149;
          swift_slowDealloc(v29, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v9, 2);
        }
        v46 = sub_1000151B0(0, &qword_10083DAC0, REMHashtag_ptr);
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v46);
        v48 = objc_msgSend((id)v4, "changedIdentifiersOfModelClass:ofChangeType:", ObjCClassFromMetadata, 0);
        v11 = _swiftEmptyArrayStorage;
        v144 = ObjCClassFromMetadata;
        if (!v48)
        {
          v141 = 0;
          goto LABEL_38;
        }
        v49 = v48;
        v50 = sub_10001A630(&qword_10083DAD8);
        v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

        v153[0] = (uint64_t)_swiftEmptyArrayStorage;
        if (!((unint64_t)v51 >> 62))
        {
          v13 = *(void **)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v51);
          if (!v13)
            break;
          goto LABEL_18;
        }
        v56 = v51 < 0 ? v51 : v51 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v51);
        v13 = (void *)_CocoaArrayWrapper.endIndex.getter(v56);
        if (!v13)
          break;
LABEL_18:
        v9 = (v51 & 0xC000000000000001);
        v4 = 4;
        while (1)
        {
          v52 = v4 - 4;
          if (!v9)
            break;
          v53 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v51);
          v54 = __OFADD__(v52, 1);
          v55 = (void *)(v4 - 3);
          if (v54)
            goto LABEL_30;
LABEL_24:
          v155 = v53;
          sub_100173C9C((unint64_t *)v153, (void **)&v155, "RDHashtagLabelUpdater: Tracked insertion is not an REMObjectID, huh? {inserted: %s}");
          if (v3)
          {
LABEL_87:
            v138 = v153[0];
            swift_bridgeObjectRelease(v51);
            swift_unknownObjectRelease(v53);
            swift_bridgeObjectRelease(v138);
            __break(1u);
            return;
          }
          v3 = 0;
          swift_unknownObjectRelease(v53);
          ++v4;
          if (v55 == v13)
          {
            swift_bridgeObjectRelease_n(v51, 2);
            v141 = (_QWORD *)v153[0];
            v9 = v151;
            goto LABEL_37;
          }
        }
        v53 = *(_QWORD *)(v51 + 8 * v4);
        swift_unknownObjectRetain(v53);
        v54 = __OFADD__(v52, 1);
        v55 = (void *)(v4 - 3);
        if (!v54)
          goto LABEL_24;
LABEL_30:
        __break(1u);
LABEL_31:
        swift_once(&qword_100836E00, sub_10016F110);
      }
      swift_bridgeObjectRelease_n(v51, 2);
      v141 = _swiftEmptyArrayStorage;
LABEL_37:
      v4 = v149;
LABEL_38:
      v57 = sub_1000151B0(0, (unint64_t *)&unk_10083DAC8, REMSharedToMeReminderPlaceholder_ptr);
      v58 = objc_msgSend((id)v4, "changedIdentifiersOfModelClass:ofChangeType:", swift_getObjCClassFromMetadata(v57), 0);
      if (v58)
      {
        v59 = v58;
        v60 = sub_10001A630(&qword_10083DAD8);
        v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, v60);

        v153[0] = (uint64_t)_swiftEmptyArrayStorage;
        if ((unint64_t)v51 >> 62)
          goto LABEL_52;
        v61 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v51);
        while (v61)
        {
          v62 = 4;
          while (1)
          {
            v63 = v62 - 4;
            if ((v51 & 0xC000000000000001) == 0)
              break;
            v53 = specialized _ArrayBuffer._getElementSlowPath(_:)(v62 - 4, v51);
            v9 = (v62 - 3);
            if (__OFADD__(v63, 1))
              goto LABEL_51;
LABEL_47:
            v155 = v53;
            sub_100173C9C((unint64_t *)v153, (void **)&v155, "RDHashtagLabelUpdater: Tracked insertion is not an REMSharedToMeReminderPlaceholder, huh? {inserted: %s}");
            if (v3)
              goto LABEL_87;
            v3 = 0;
            swift_unknownObjectRelease(v53);
            ++v62;
            if (v9 == v61)
            {
              swift_bridgeObjectRelease_n(v51, 2);
              v140 = v153[0];
              v9 = v151;
              goto LABEL_57;
            }
          }
          v53 = *(_QWORD *)(v51 + 8 * v62);
          swift_unknownObjectRetain(v53);
          v9 = (v62 - 3);
          if (!__OFADD__(v63, 1))
            goto LABEL_47;
LABEL_51:
          __break(1u);
LABEL_52:
          if (v51 < 0)
            v64 = v51;
          else
            v64 = v51 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v51);
          v61 = _CocoaArrayWrapper.endIndex.getter(v64);
        }
        swift_bridgeObjectRelease_n(v51, 2);
        v140 = _swiftEmptyArrayStorage;
LABEL_57:
        v4 = v149;
      }
      else
      {
        v140 = 0;
      }
      v65 = objc_msgSend((id)v4, "changeSet");
      if (v65)
      {
        v66 = v65;
        v67 = sub_10001A630((uint64_t *)&unk_10083A340);
        v68 = swift_allocObject(v67, 80, 7);
        *(_OWORD *)(v68 + 16) = xmmword_1006A3C20;
        *(_QWORD *)(v68 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextAuthor);
        *(_QWORD *)(v68 + 40) = v69;
        *(_QWORD *)(v68 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextInternalAuthor);
        *(_QWORD *)(v68 + 56) = v70;
        *(_QWORD *)(v68 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextServerChangeTokenAuthor);
        *(_QWORD *)(v68 + 72) = v71;
        isa = Array._bridgeToObjectiveC()().super.isa;
        LOBYTE(v68) = objc_msgSend(v66, "applyFilterByTransactionAuthors:isExclusion:", isa, 1, swift_bridgeObjectRelease(v68).n128_f64[0]);

        if ((v68 & 1) != 0)
        {

LABEL_66:
          v78 = v144;
          goto LABEL_68;
        }
        v79 = swift_bridgeObjectRetain_n(v9, 2);
        v80 = Logger.logObject.getter(v79);
        v81 = static os_log_type_t.error.getter();
        v78 = v144;
        if (os_log_type_enabled(v80, v81))
        {
          v82 = (uint8_t *)swift_slowAlloc(12, -1);
          v83 = swift_slowAlloc(32, -1);
          v153[0] = v83;
          *(_DWORD *)v82 = 136446210;
          v4 = v149;
          swift_bridgeObjectRetain(v151);
          v155 = sub_10001A820(v145, (unint64_t)v151, v153);
          v78 = v144;
          v9 = v151;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
          swift_bridgeObjectRelease_n(v151, 3);
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "RDHashtagLabelUpdater: Unexpected nil change set when trying to filter in ICCC authors {account: %{public}s}", v82, 0xCu);
          swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v83, -1, -1);
          swift_slowDealloc(v82, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v9, 2);
        }
      }
      else
      {
        v73 = swift_bridgeObjectRetain_n(v9, 2);
        v74 = Logger.logObject.getter(v73);
        v75 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v74, v75))
        {

          swift_bridgeObjectRelease_n(v9, 2);
          goto LABEL_66;
        }
        v76 = (uint8_t *)swift_slowAlloc(12, -1);
        v77 = swift_slowAlloc(32, -1);
        v153[0] = v77;
        *(_DWORD *)v76 = 136446210;
        v4 = v149;
        swift_bridgeObjectRetain(v151);
        v155 = sub_10001A820(v145, (unint64_t)v151, v153);
        v78 = v144;
        v9 = v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
        swift_bridgeObjectRelease_n(v151, 3);
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "RDHashtagLabelUpdater: Unexpected nil change set when trying to filter in ICCC authors {account: %{public}s}", v76, 0xCu);
        swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v77, -1, -1);
        swift_slowDealloc(v76, -1, -1);

      }
LABEL_68:
      v84 = objc_msgSend((id)v4, "changedIdentifiersOfModelClass:ofChangeType:", v78, 2);
      if (v84)
      {
        v86 = v84;
        v87 = sub_10001A630(&qword_10083DAD8);
        v88 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v86, v87);

        v89 = sub_100173FB0(v88);
        *(_QWORD *)&v85 = swift_bridgeObjectRelease(v88).n128_u64[0];
      }
      else
      {
        v89 = 0;
      }
      v90 = objc_msgSend((id)v4, "changeSet", v85);
      if (v90)
      {
        v91 = v90;
        v92 = sub_10001A630((uint64_t *)&unk_10083A340);
        v93 = swift_allocObject(v92, 80, 7);
        *(_OWORD *)(v93 + 16) = xmmword_1006A3C20;
        *(_QWORD *)(v93 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextAuthor);
        *(_QWORD *)(v93 + 40) = v94;
        *(_QWORD *)(v93 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextInternalAuthor);
        *(_QWORD *)(v93 + 56) = v95;
        *(_QWORD *)(v93 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(RDStoreControllerICCloudContextServerChangeTokenAuthor);
        *(_QWORD *)(v93 + 72) = v96;
        v97 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v91, "applyFilterByTransactionAuthors:isExclusion:", v97, 0, swift_bridgeObjectRelease(v93).n128_f64[0]);

      }
      else
      {
        v98 = swift_bridgeObjectRetain_n(v9, 2);
        v99 = Logger.logObject.getter(v98);
        v100 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v99, v100))
        {
          v101 = (uint8_t *)swift_slowAlloc(12, -1);
          v102 = swift_slowAlloc(32, -1);
          v153[0] = v102;
          *(_DWORD *)v101 = 136446210;
          v4 = v149;
          swift_bridgeObjectRetain(v151);
          v155 = sub_10001A820(v145, (unint64_t)v151, v153);
          v78 = v144;
          v9 = v151;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
          swift_bridgeObjectRelease_n(v151, 3);
          _os_log_impl((void *)&_mh_execute_header, v99, v100, "RDHashtagLabelUpdater: Unexpected nil change set when trying to filter in ICCC authors {account: %{public}s}", v101, 0xCu);
          swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v102, -1, -1);
          swift_slowDealloc(v101, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v9, 2);
        }
      }
      v103 = objc_msgSend((id)v4, "changedIdentifiersOfModelClass:ofChangeType:", v78, 2);
      if (v103)
      {
        v104 = v103;
        v105 = sub_10001A630(&qword_10083DAD8);
        v106 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v104, v105);

        v107 = sub_100173FB0(v106);
        swift_bridgeObjectRelease(v106);
      }
      else
      {
        v107 = 0;
      }
      v109 = v140;
      v108 = v141;
      v153[0] = 0xD000000000000015;
      v153[1] = 0x80000001006AB820;
      v153[3] = 0;
      v154[0] = 0;
      v153[2] = 0;
      *(_QWORD *)((char *)v154 + 6) = 0;
      __chkstk_darwin(v103);
      v139[2] = v141;
      v139[3] = v110;
      v139[4] = v147;
      v139[5] = v146;
      v139[6] = v89;
      v139[7] = v107;
      v139[8] = v140;
      sub_10035288C((uint64_t)v153, (uint64_t)sub_100188BD8, (uint64_t)v139);
      if (v3)
      {
        swift_bridgeObjectRelease(v108);
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v107);
        swift_bridgeObjectRelease(v109);
        swift_errorRetain(v3);
        v111 = swift_errorRetain(v3);
        v112 = Logger.logObject.getter(v111);
        v113 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v112, v113))
        {
          v114 = (uint8_t *)swift_slowAlloc(12, -1);
          v115 = swift_slowAlloc(32, -1);
          v155 = v115;
          *(_DWORD *)v114 = 136315138;
          v152 = v3;
          swift_errorRetain(v3);
          v116 = sub_10001A630((uint64_t *)&unk_10083AA20);
          v117 = String.init<A>(describing:)(&v152, v116);
          v119 = v118;
          v152 = sub_10001A820(v117, v118, &v155);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);
          v9 = v151;
          swift_bridgeObjectRelease(v119);
          swift_errorRelease(v3);
          swift_errorRelease(v3);
          _os_log_impl((void *)&_mh_execute_header, v112, v113, "RDHashtagLabelUpdater: Failed to save hashtage label for %s", v114, 0xCu);
          swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
          v120 = v115;
          v4 = v149;
          swift_slowDealloc(v120, -1, -1);
          swift_slowDealloc(v114, -1, -1);

          swift_errorRelease(v3);
        }
        else
        {
          swift_errorRelease(v3);
          swift_errorRelease(v3);
          swift_errorRelease(v3);

        }
      }
      else
      {
        swift_bridgeObjectRelease(v108);
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v107);
        *(_QWORD *)&v121 = swift_bridgeObjectRelease(v109).n128_u64[0];
      }
      v123 = v146;
      v122 = v147;
      objc_msgSend((id)v4, "markChangesConsumed", v121);
      v124 = v122;
      v125 = v123;
      swift_bridgeObjectRetain(v9);
      v126 = v124;
      v127 = v125;
      v128 = Logger.logObject.getter(v127);
      v129 = static os_log_type_t.default.getter(v128);
      v130 = v129;
      v151 = v128;
      if (os_log_type_enabled(v128, v129))
      {
        v131 = swift_slowAlloc(32, -1);
        v132 = (_QWORD *)swift_slowAlloc(16, -1);
        v150 = (_QWORD *)swift_slowAlloc(32, -1);
        v155 = (uint64_t)v150;
        *(_DWORD *)v131 = 136446722;
        LODWORD(v149) = v130;
        swift_bridgeObjectRetain(v9);
        v152 = sub_10001A820(v145, (unint64_t)v9, &v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);
        swift_bridgeObjectRelease_n(v9, 3);
        *(_WORD *)(v131 + 12) = 2114;
        v152 = (uint64_t)v126;
        v133 = v126;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);
        *v132 = v143;

        *(_WORD *)(v131 + 22) = 2114;
        v152 = (uint64_t)v127;
        v134 = v127;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153);
        v132[1] = v142;

        v135 = v151;
        _os_log_impl((void *)&_mh_execute_header, v151, (os_log_type_t)v149, "RDHashtagLabelUpdater: Marked change set consumed {account: %{public}s, since: %{public}@, upTo: %{public}@}", (uint8_t *)v131, 0x20u);
        v136 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v132, 2, v136);
        swift_slowDealloc(v132, -1, -1);
        v137 = v150;
        swift_arrayDestroy(v150, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1, -1);
        swift_slowDealloc(v131, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v9, 2);
      }
      return;
    }
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v36 = type metadata accessor for Logger(0);
    sub_10001AAA8(v36, (uint64_t)qword_10083D710);
    v37 = v11;
    swift_bridgeObjectRetain(v9);
    v38 = v37;
    v39 = Logger.logObject.getter(v38);
    v40 = (unint64_t)v9;
    v41 = static os_log_type_t.info.getter(v39);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = swift_slowAlloc(22, -1);
      v150 = (_QWORD *)swift_slowAlloc(8, -1);
      v151 = swift_slowAlloc(32, -1);
      v153[0] = (uint64_t)v151;
      *(_DWORD *)v42 = 136446466;
      v143 = v11;
      swift_bridgeObjectRetain(v40);
      v155 = sub_10001A820(v7, v40, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
      swift_bridgeObjectRelease_n(v40, 3);
      *(_WORD *)(v42 + 12) = 2114;
      v155 = (uint64_t)v38;
      v43 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
      v44 = v150;
      *v150 = v143;

      _os_log_impl((void *)&_mh_execute_header, v39, v41, "RDHashtagLabelUpdater: No updated change token from change tracking (no changes) {account: %{public}s, since: %{public}@}", (uint8_t *)v42, 0x16u);
      v45 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v44, 1, v45);
      swift_slowDealloc(v44, -1, -1);
      swift_arrayDestroy(v151, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v151, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v40, 2);
    }
  }
  else
  {
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_10083D710);
    swift_bridgeObjectRetain(v9);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v153[0] = v35;
      *(_DWORD *)v34 = 136446210;
      swift_bridgeObjectRetain(v9);
      v155 = sub_10001A820(v7, (unint64_t)v9, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
      swift_bridgeObjectRelease_n(v9, 3);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDHashtagLabelUpdater: No since-token from change tracking {account: %{public}s}", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v9, 2);
    }
  }
}

void sub_100173C9C(unint64_t *a1, void **a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  v11 = objc_opt_self(REMObjectID);
  v12 = swift_dynamicCastObjCClass(v10, v11);
  if (v12)
  {
    v13 = (void *)v12;
    swift_unknownObjectRetain(v10);
    v14 = objc_msgSend(v13, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

    v15 = *a1;
    if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
      v15 = sub_1002C8EC4(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    v17 = *(_QWORD *)(v15 + 16);
    v16 = *(_QWORD *)(v15 + 24);
    if (v17 >= v16 >> 1)
      v15 = sub_1002C8EC4(v16 > 1, v17 + 1, 1, v15);
    *(_QWORD *)(v15 + 16) = v17 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17, v9, v6);
    swift_unknownObjectRelease(v10);
    *a1 = v15;
  }
  else
  {
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_10083D710);
    v19 = swift_unknownObjectRetain_n(v10, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v32 = v29;
      *(_DWORD *)v22 = 136315138;
      v28[1] = (const char *)(v22 + 4);
      v23 = objc_msgSend(v10, "description");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v28[0] = a3;
      v26 = v25;

      v30 = sub_10001A820(v24, v26, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      swift_unknownObjectRelease_n(v10, 2);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, v28[0], (uint8_t *)v22, 0xCu);
      v27 = v29;
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(v10, 2);
    }
  }
}

_QWORD *sub_100173FB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  _QWORD *v11;

  v11 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    for (i = 4; ; ++i)
    {
      v4 = i - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      v6 = __OFADD__(v4, 1);
      v7 = i - 3;
      if (v6)
        goto LABEL_11;
LABEL_9:
      v10 = v5;
      sub_10017E4C8((unint64_t *)&v11, &v10);
      swift_unknownObjectRelease(v5);
      if (v7 == v2)
      {
        swift_bridgeObjectRelease(a1);
        return v11;
      }
    }
    v5 = *(void **)(a1 + 8 * i);
    swift_unknownObjectRetain(v5);
    v6 = __OFADD__(v4, 1);
    v7 = i - 3;
    if (!v6)
      goto LABEL_9;
LABEL_11:
    __break(1u);
LABEL_12:
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void sub_1001740E8(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, os_log_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  os_log_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  id v42;
  id v43;
  _QWORD *v44;
  id v45;
  os_log_t v46;
  uint64_t v47;
  char *v48;
  int64_t isa;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  int v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  uint64_t v71;
  id v72;
  id v73;
  uint8_t *v74;
  id v75;
  os_log_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint8_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint8_t *v84;
  void *v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  int v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  id v103;
  id v104;
  NSObject *v105;
  os_log_type_t v106;
  int v107;
  uint64_t v108;
  _QWORD *v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint8_t *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  os_log_t v119;
  os_log_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  void *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  id v131;
  id v132;
  id v133;
  id v134;
  NSObject *v135;
  os_log_type_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  id v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  NSObject *v147;
  NSObject *v148;
  os_log_type_t v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  unsigned int v165;
  id v166;
  id v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  _QWORD *v172;
  os_log_t v173;
  uint8_t *v174;
  uint64_t v175;
  os_log_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  id v182;
  id v183;
  uint64_t v184;
  os_log_t v185;
  char *v186;
  _QWORD *v187;
  id v188;
  uint64_t v189;

  v178 = a7;
  v179 = a3;
  v180 = a8;
  v182 = a4;
  v183 = a5;
  v11 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  v175 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v170 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v184 - 8);
  v15 = __chkstk_darwin(v184);
  v186 = (char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = ((char *)&v170 - v17);
  objc_msgSend(a1, "setTransactionAuthor:", RDHashtagLabelUpdaterAuthor);
  v181 = a1;
  v185 = v18;
  if (a2 && *(_QWORD *)(a2 + 16))
  {
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10083D710);
    v20 = swift_bridgeObjectRetain_n(a2, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = a6;
      v24 = swift_slowAlloc(12, -1);
      v176 = (os_log_t)swift_slowAlloc(32, -1);
      v188 = v176;
      *(_DWORD *)v24 = 136315138;
      v173 = (os_log_t)(v24 + 4);
      v174 = (uint8_t *)v24;
      swift_bridgeObjectRetain(a2);
      v26 = Array.description.getter(v25, v184);
      v28 = v27;
      swift_bridgeObjectRelease(a2);
      v187 = (_QWORD *)sub_10001A820(v26, v28, (uint64_t *)&v188);
      a1 = v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188);
      swift_bridgeObjectRelease_n(a2, 2);
      v29 = v28;
      a6 = v23;
      v18 = v185;
      swift_bridgeObjectRelease(v29);
      v30 = v22;
      v31 = v174;
      _os_log_impl((void *)&_mh_execute_header, v21, v30, "RDHashtagLabelUpdater: inserted hashtag IDs: %s", v174, 0xCu);
      v32 = v176;
      swift_arrayDestroy(v176, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    sub_10017558C(a1, a2);
    v48 = v186;
    if (a6)
      goto LABEL_16;
LABEL_27:
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v63 = type metadata accessor for Logger(0);
    sub_10001AAA8(v63, (uint64_t)qword_10083D710);
    v64 = v182;
    v65 = v183;
    v66 = v64;
    v67 = v65;
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.info.getter(v68);
    v70 = v69;
    if (os_log_type_enabled(v68, v69))
    {
      v71 = swift_slowAlloc(22, -1);
      v174 = (uint8_t *)swift_slowAlloc(16, -1);
      *(_DWORD *)v71 = 138543618;
      v188 = v66;
      LODWORD(v185) = v70;
      v72 = v66;
      v176 = v68;
      v73 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);
      v74 = v174;
      *(_QWORD *)v174 = v66;

      *(_WORD *)(v71 + 12) = 2114;
      v188 = v67;
      v75 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);
      *((_QWORD *)v74 + 1) = v67;

      v76 = v176;
      _os_log_impl((void *)&_mh_execute_header, v176, (os_log_type_t)v185, "RDHashtagLabelUpdater: No user initiated deleted hashtags found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v71, 0x16u);
      v77 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v74, 2, v77);
      swift_slowDealloc(v74, -1, -1);
      v78 = v71;
      v48 = v186;
      swift_slowDealloc(v78, -1, -1);

    }
    else
    {

    }
    v79 = v181;
    v86 = v178;
    if (!v178)
      goto LABEL_47;
    goto LABEL_36;
  }
  v176 = a6;
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v33 = type metadata accessor for Logger(0);
  sub_10001AAA8(v33, (uint64_t)qword_10083D710);
  v34 = v182;
  v35 = v183;
  v36 = v34;
  v37 = v35;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter(v38);
  v40 = v39;
  if (os_log_type_enabled(v38, v39))
  {
    v41 = swift_slowAlloc(22, -1);
    v172 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v41 = 138543618;
    v171 = (void *)(v41 + 12);
    v188 = v36;
    v42 = v36;
    v173 = v38;
    LODWORD(v174) = v40;
    v43 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);
    v44 = v172;
    *v172 = v36;

    *(_WORD *)(v41 + 12) = 2114;
    v188 = v37;
    v45 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);
    v44[1] = v37;

    v46 = v173;
    _os_log_impl((void *)&_mh_execute_header, v173, (os_log_type_t)v174, "RDHashtagLabelUpdater: No inserted hashtags found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v41, 0x16u);
    v47 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v44, 2, v47);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

  }
  v18 = v185;
  v48 = v186;
  a6 = v176;
  if (!v176)
    goto LABEL_27;
LABEL_16:
  isa = (int64_t)a6[2].isa;
  if (!isa)
    goto LABEL_27;
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v50 = type metadata accessor for Logger(0);
  sub_10001AAA8(v50, (uint64_t)qword_10083D710);
  v51 = swift_bridgeObjectRetain_n(a6, 2);
  v52 = (uint8_t *)Logger.logObject.getter(v51);
  v53 = static os_log_type_t.info.getter(v52);
  if (os_log_type_enabled((os_log_t)v52, (os_log_type_t)v53))
  {
    LODWORD(v172) = v53;
    v174 = v52;
    v54 = swift_slowAlloc(12, -1);
    v171 = (void *)swift_slowAlloc(32, -1);
    v188 = v171;
    v173 = v54;
    LODWORD(v54->isa) = 136446210;
    v187 = _swiftEmptyArrayStorage;
    sub_1001C1BE4(0, isa, 0);
    v55 = *(unsigned __int8 *)(v175 + 80);
    v176 = a6;
    v56 = (uint64_t)a6 + ((v55 + 32) & ~v55);
    v57 = *(_QWORD *)(v175 + 72);
    v58 = v184;
    do
    {
      sub_100188C54(v56, (uint64_t)v13);
      (*(void (**)(NSObject *, char *, uint64_t))(v14 + 16))(v18, v13, v58);
      sub_100188C98((uint64_t)v13);
      v59 = v187;
      if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
      {
        sub_1001C1BE4(0, v59[2] + 1, 1);
        v58 = v184;
        v59 = v187;
      }
      v61 = v59[2];
      v60 = v59[3];
      if (v61 >= v60 >> 1)
      {
        sub_1001C1BE4(v60 > 1, v61 + 1, 1);
        v58 = v184;
        v59 = v187;
      }
      v59[2] = v61 + 1;
      v62 = (unint64_t)v59
          + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
          + *(_QWORD *)(v14 + 72) * v61;
      v18 = v185;
      (*(void (**)(unint64_t, os_log_t, uint64_t))(v14 + 32))(v62, v185, v58);
      v187 = v59;
      v56 += v57;
      --isa;
    }
    while (isa);
    v80 = (uint8_t *)v173;
    v81 = Array.description.getter(v59, v58);
    v83 = v82;
    swift_release(v59);
    v187 = (_QWORD *)sub_10001A820(v81, v83, (uint64_t *)&v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188);
    a6 = v176;
    swift_bridgeObjectRelease_n(v176, 2);
    swift_bridgeObjectRelease(v83);
    v84 = v174;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v174, (os_log_type_t)v172, "RDHashtagLabelUpdater: deleted hashtag IDs initiated by user: %{public}s", v80, 0xCu);
    v85 = v171;
    swift_arrayDestroy(v171, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    swift_slowDealloc(v80, -1, -1);

    v86 = v178;
    v48 = v186;
  }
  else
  {

    swift_bridgeObjectRelease_n(a6, 2);
    v86 = v178;
  }
  v79 = v181;
  sub_1001755EC(v181, (unint64_t)a6, 1);
  if (!v86)
    goto LABEL_47;
LABEL_36:
  v87 = *(_QWORD *)(v86 + 16);
  if (v87)
  {
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v88 = type metadata accessor for Logger(0);
    sub_10001AAA8(v88, (uint64_t)qword_10083D710);
    v89 = swift_bridgeObjectRetain_n(v86, 2);
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.info.getter(v90);
    if (os_log_type_enabled(v90, (os_log_type_t)v91))
    {
      LODWORD(v174) = v91;
      v185 = v90;
      v92 = swift_slowAlloc(12, -1);
      v173 = (os_log_t)swift_slowAlloc(32, -1);
      v188 = v173;
      v176 = v92;
      LODWORD(v92->isa) = 136446210;
      v187 = _swiftEmptyArrayStorage;
      sub_1001C1BE4(0, v87, 0);
      v93 = v86 + ((*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80));
      v94 = *(_QWORD *)(v175 + 72);
      v95 = v184;
      do
      {
        sub_100188C54(v93, (uint64_t)v13);
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v48, v13, v95);
        sub_100188C98((uint64_t)v13);
        v96 = v187;
        if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
        {
          sub_1001C1BE4(0, v96[2] + 1, 1);
          v95 = v184;
          v96 = v187;
        }
        v98 = v96[2];
        v97 = v96[3];
        if (v98 >= v97 >> 1)
        {
          sub_1001C1BE4(v97 > 1, v98 + 1, 1);
          v95 = v184;
          v96 = v187;
        }
        v96[2] = v98 + 1;
        v99 = (unint64_t)v96
            + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
            + *(_QWORD *)(v14 + 72) * v98;
        v48 = v186;
        (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v99, v186, v95);
        v187 = v96;
        v93 += v94;
        --v87;
      }
      while (v87);
      v115 = (uint8_t *)v176;
      v116 = Array.description.getter(v96, v95);
      v118 = v117;
      swift_release(v96);
      v187 = (_QWORD *)sub_10001A820(v116, v118, (uint64_t *)&v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188);
      v86 = v178;
      swift_bridgeObjectRelease_n(v178, 2);
      swift_bridgeObjectRelease(v118);
      v119 = v185;
      _os_log_impl((void *)&_mh_execute_header, v185, (os_log_type_t)v174, "RDHashtagLabelUpdater: deleted hashtag IDs by ICCC: %{public}s", v115, 0xCu);
      v120 = v173;
      swift_arrayDestroy(v173, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v120, -1, -1);
      swift_slowDealloc(v115, -1, -1);

      v79 = v181;
    }
    else
    {

      swift_bridgeObjectRelease_n(v86, 2);
    }
    sub_1001755EC(v79, v86, 0);
    v114 = v180;
    if (!v180)
      goto LABEL_61;
    goto LABEL_56;
  }
LABEL_47:
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v100 = type metadata accessor for Logger(0);
  sub_10001AAA8(v100, (uint64_t)qword_10083D710);
  v101 = v182;
  v102 = v183;
  v103 = v101;
  v104 = v102;
  v105 = Logger.logObject.getter(v104);
  v106 = static os_log_type_t.info.getter(v105);
  v107 = v106;
  if (os_log_type_enabled(v105, v106))
  {
    v108 = swift_slowAlloc(22, -1);
    v109 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v108 = 138543618;
    v188 = v103;
    v110 = v103;
    LODWORD(v186) = v107;
    v111 = v110;
    v79 = v181;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);
    *v109 = v103;

    *(_WORD *)(v108 + 12) = 2114;
    v188 = v104;
    v112 = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);
    v109[1] = v104;

    _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v186, "RDHashtagLabelUpdater: No ICCC deleted hashtags found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v108, 0x16u);
    v113 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v109, 2, v113);
    swift_slowDealloc(v109, -1, -1);
    swift_slowDealloc(v108, -1, -1);

    v114 = v180;
    if (!v180)
      goto LABEL_61;
  }
  else
  {

    v114 = v180;
    if (!v180)
      goto LABEL_61;
  }
LABEL_56:
  if (!*(_QWORD *)(v114 + 16))
  {
LABEL_61:
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v130 = type metadata accessor for Logger(0);
    sub_10001AAA8(v130, (uint64_t)qword_10083D710);
    v131 = v182;
    v132 = v183;
    v133 = v131;
    v134 = v132;
    v135 = Logger.logObject.getter(v134);
    v136 = static os_log_type_t.info.getter(v135);
    v137 = v136;
    if (os_log_type_enabled(v135, v136))
    {
      v138 = swift_slowAlloc(22, -1);
      LODWORD(v186) = v137;
      v139 = v138;
      v140 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v139 = 138543618;
      v188 = v133;
      v141 = v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);
      *v140 = v133;

      *(_WORD *)(v139 + 12) = 2114;
      v188 = v134;
      v142 = v134;
      v79 = v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);
      v140[1] = v134;

      _os_log_impl((void *)&_mh_execute_header, v135, (os_log_type_t)v186, "RDHashtagLabelUpdater: No shared reminder placeholders found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v139, 0x16u);
      v143 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v140, 2, v143);
      swift_slowDealloc(v140, -1, -1);
      swift_slowDealloc(v139, -1, -1);

    }
    else
    {

    }
    goto LABEL_69;
  }
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v121 = type metadata accessor for Logger(0);
  sub_10001AAA8(v121, (uint64_t)qword_10083D710);
  v122 = swift_bridgeObjectRetain_n(v114, 2);
  v123 = Logger.logObject.getter(v122);
  v124 = static os_log_type_t.info.getter(v123);
  if (os_log_type_enabled(v123, v124))
  {
    v125 = (uint8_t *)swift_slowAlloc(12, -1);
    v126 = (void *)swift_slowAlloc(32, -1);
    v188 = v126;
    *(_DWORD *)v125 = 136446210;
    swift_bridgeObjectRetain(v180);
    v127 = Array.description.getter(v180, v184);
    v129 = v128;
    swift_bridgeObjectRelease(v180);
    v187 = (_QWORD *)sub_10001A820(v127, v129, (uint64_t *)&v188);
    v114 = v180;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188);
    swift_bridgeObjectRelease_n(v114, 2);
    swift_bridgeObjectRelease(v129);
    _os_log_impl((void *)&_mh_execute_header, v123, v124, "RDHashtagLabelUpdater: inserted sharedToMeReminderPlaceHolder IDs: %{public}s", v125, 0xCu);
    swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1, -1);
    swift_slowDealloc(v125, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v114, 2);
  }
  v144 = v177;
  v145 = objc_autoreleasePoolPush();
  sub_10017B790(v179, v79, v114);
  if (v144)
  {
    objc_autoreleasePoolPop(v145);
    __break(1u);
    return;
  }
  objc_autoreleasePoolPop(v145);
LABEL_69:
  if (objc_msgSend(v79, "hasChanges"))
  {
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v146 = type metadata accessor for Logger(0);
    sub_10001AAA8(v146, (uint64_t)qword_10083D710);
    v147 = v79;
    v148 = Logger.logObject.getter(v147);
    v149 = static os_log_type_t.default.getter(v148);
    if (os_log_type_enabled(v148, v149))
    {
      v150 = swift_slowAlloc(32, -1);
      *(_DWORD *)v150 = 134218496;
      v151 = -[NSObject insertedObjects](v147, "insertedObjects");
      v152 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
      v153 = sub_1000E51DC((unint64_t *)&qword_100846120, (unint64_t *)&qword_100839930, NSManagedObject_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      v154 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v151, v152, v153);

      if ((v154 & 0xC000000000000001) != 0)
      {
        if (v154 < 0)
          v155 = v154;
        else
          v155 = v154 & 0xFFFFFFFFFFFFFF8;
        v156 = (void *)__CocoaSet.count.getter(v155);
      }
      else
      {
        v156 = *(void **)(v154 + 16);
      }

      swift_bridgeObjectRelease(v154);
      v188 = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);

      *(_WORD *)(v150 + 12) = 2048;
      v157 = -[NSObject updatedObjects](v147, "updatedObjects");
      v158 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v157, v152, v153);

      if ((v158 & 0xC000000000000001) != 0)
      {
        if (v158 < 0)
          v159 = v158;
        else
          v159 = v158 & 0xFFFFFFFFFFFFFF8;
        v160 = (void *)__CocoaSet.count.getter(v159);
      }
      else
      {
        v160 = *(void **)(v158 + 16);
      }

      swift_bridgeObjectRelease(v158);
      v188 = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);

      *(_WORD *)(v150 + 22) = 2048;
      v161 = -[NSObject deletedObjects](v147, "deletedObjects");
      v162 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v161, v152, v153);

      if ((v162 & 0xC000000000000001) != 0)
      {
        if (v162 < 0)
          v163 = v162;
        else
          v163 = v162 & 0xFFFFFFFFFFFFFF8;
        v164 = (void *)__CocoaSet.count.getter(v163);
      }
      else
      {
        v164 = *(void **)(v162 + 16);
      }

      swift_bridgeObjectRelease(v162);
      v188 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189);

      _os_log_impl((void *)&_mh_execute_header, v148, v149, "RDHashtagLabelUpdater: Saving changes - insert: %ld, update: %ld, delete: %ld", (uint8_t *)v150, 0x20u);
      swift_slowDealloc(v150, -1, -1);
    }
    else
    {

      v148 = v147;
    }

    v188 = 0;
    v165 = -[NSObject save:](v147, "save:", &v188);
    v166 = v188;
    if (v165)
    {
      v167 = v188;
    }
    else
    {
      v168 = v188;
      _convertNSErrorToError(_:)(v166);

      swift_willThrow(v169);
    }
  }
}

void sub_10017558C(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v5 = objc_autoreleasePoolPush();
  sub_100175654(v2, a1, a2);
  objc_autoreleasePoolPop(v5);
}

void sub_1001755EC(void *a1, unint64_t a2, int a3)
{
  uint64_t v3;
  void *v7;

  v7 = objc_autoreleasePoolPush();
  sub_100178844(a2, v3, a1, a3);
  objc_autoreleasePoolPop(v7);
}

void sub_100175654(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Class isa;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  int64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  int64_t v95;
  unint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  int v103;
  _BOOL4 v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  id v108;
  void *v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint8_t *v128;
  unint64_t v129;
  NSObject *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  unint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  id v146;
  unint64_t v147;
  id v148;
  void *v149;
  id v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  _BOOL8 v166;
  uint64_t v167;
  char v168;
  char *v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  int64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char v195;
  char *v196;
  char *v197;
  NSObject *v198;
  os_log_type_t v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  void *v203;
  id v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  NSObject *v208;
  NSObject *v209;
  id v210;
  NSObject *v211;
  os_log_type_t v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  void *v216;
  id v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  NSObject *v221;
  NSObject *v222;
  uint64_t v223;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v225;
  unint64_t v226;
  uint64_t v227;
  _BOOL8 v228;
  uint64_t v229;
  char v230;
  unint64_t v231;
  char v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  NSObject **v236;
  uint64_t v237;
  uint64_t v238;
  NSObject *v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  id v243;
  void *v244;
  id v245;
  id v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __n128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  id v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  NSObject *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  id v274;
  id v275;
  void *v276;
  id v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  NSObject *v285;
  os_log_type_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  __n128 v293;
  uint64_t *v294;
  NSObject *v295;
  char *v296;
  char *v297;
  char *v298;
  uint64_t v299;
  _QWORD *v300;
  __int128 v301;
  uint64_t v302;
  char *v303;
  __n128 v304;
  __n128 v305;
  char *v306;
  __n128 v307;
  char *v308;
  int64_t v309;
  char *v310;
  char *v311;
  void *v312;
  uint64_t v313;
  int64_t v314;
  uint64_t v315;
  uint64_t v316;
  int64_t v317;
  char *v318;
  NSObject *v319;
  int64_t v320;
  __int128 v321;
  _QWORD *v322;
  uint64_t v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  NSObject *v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _OWORD v335[2];
  uint64_t v336;

  v312 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v327 = v4;
  v328 = v5;
  v6 = __chkstk_darwin(v4);
  v298 = (char *)&v293 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v297 = (char *)&v293 - v9;
  __chkstk_darwin(v8);
  v325 = (char *)&v293 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  v12 = __chkstk_darwin(v11);
  v296 = (char *)&v293 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v303 = (char *)&v293 - v15;
  v16 = __chkstk_darwin(v14);
  v302 = (uint64_t)&v293 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v293 - v19;
  __chkstk_darwin(v18);
  v329 = (uint64_t)&v293 - v21;
  v22 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v22);
  v323 = (uint64_t)&v293 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Logger(0);
  v331 = *(NSObject **)(v24 - 8);
  __chkstk_darwin(v24);
  v26 = (uint64_t)&v293 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a3);
  v28 = sub_10011EF34(v27);
  swift_bridgeObjectRelease(a3);
  v332 = (unint64_t)_swiftEmptyArrayStorage;
  v29 = sub_1001E987C(v28);
  *(_QWORD *)&v335[0] = v29;
  v30 = sub_10001A630(&qword_10083DA88);
  v31 = sub_1000A5F84((unint64_t *)&qword_10083DA90, &qword_10083DA88, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = BidirectionalCollection<>.slices(by:)(100, v30, v31);
  swift_release(v29);
  v33 = *(_QWORD *)(v32 + 16);
  v326 = v20;
  if (!v33)
  {
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v32);
    v38 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      goto LABEL_5;
LABEL_10:
    if (v38 < 0)
      v47 = v38;
    else
      v47 = v38 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v38);
    v48 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v38);
    if (v48)
      goto LABEL_6;
LABEL_14:
    v49 = v38;
LABEL_241:
    swift_bridgeObjectRelease(v49);
    return;
  }
  swift_bridgeObjectRetain(v32);
  v34 = (__int128 *)(v32 + 48);
  v35 = v299;
  do
  {
    v335[0] = *(v34 - 1);
    v36 = *v34;
    v34 += 2;
    v335[1] = v36;
    v37 = *(_QWORD *)&v335[0];
    swift_unknownObjectRetain(*(_QWORD *)&v335[0]);
    sub_10017C030((uint64_t *)v335, 0);
    swift_unknownObjectRelease(v37);
    --v33;
  }
  while (v33);
  v299 = v35;
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease_n(v32, 2);
  v38 = v332;
  v20 = v326;
  if (v332 >> 62)
    goto LABEL_10;
LABEL_5:
  if (!*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_6:
  if (qword_100836E00 == -1)
    goto LABEL_7;
LABEL_255:
  swift_once(&qword_100836E00, sub_10016F110);
LABEL_7:
  v39 = sub_10001AAA8(v24, (uint64_t)qword_10083D710);
  isa = v331[2].isa;
  v315 = v39;
  v324 = (char *)v24;
  v41 = ((uint64_t (*)(uint64_t))isa)(v26);
  *(_QWORD *)&v335[0] = v38;
  __chkstk_darwin(v41);
  *((_QWORD *)&v293 - 2) = v26;
  v42 = sub_10001A630(&qword_10083DAE0);
  v43 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v44 = sub_1000A5F84((unint64_t *)&unk_10083DAE8, &qword_10083DAE0, (uint64_t)&protocol conformance descriptor for [A]);
  v45 = v299;
  v46 = Sequence.map<A>(skippingError:_:)(sub_100188CD4, &v293 - 2, sub_10017753C, 0, v42, v43, v44);
  if (v45)
  {
    swift_errorRelease(v45);
    v299 = 0;
    v24 = (uint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    v24 = v46;
    v299 = 0;
  }
  v50 = v328;
  ((void (*)(uint64_t, char *))v331[1].isa)(v26, v324);
  swift_bridgeObjectRelease(v38);
  v332 = (unint64_t)&_swiftEmptyDictionarySingleton;
  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v292 = v24;
    else
      v292 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v51 = _CocoaArrayWrapper.endIndex.getter(v292);
    swift_bridgeObjectRelease(v24);
  }
  else
  {
    v51 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v51)
  {
    v331 = (v24 & 0xC000000000000001);
    v322 = &_swiftEmptyDictionarySingleton;
    v52 = 4;
    v321 = xmmword_1006A7330;
    v330 = v24;
    v324 = (char *)v51;
    while (1)
    {
      v59 = v331
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52 - 4, v24)
          : *(id *)(v24 + 8 * v52);
      v38 = (uint64_t)v59;
      v20 = (char *)(v52 - 3);
      if (__OFADD__(v52 - 4, 1))
        goto LABEL_245;
      v60 = objc_msgSend(v59, "name");
      if (v60)
      {
        v61 = v60;
        v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v64 = v63;

        *(_QWORD *)&v335[0] = v62;
        *((_QWORD *)&v335[0] + 1) = v64;
        v24 = v323;
        static Locale.current.getter(v65);
        v66 = type metadata accessor for Locale(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v24, 0, 1, v66);
        v67 = sub_1000E525C();
        v26 = StringProtocol.foldedStringForWriting(locale:)(v24, &type metadata for String, v67);
        v69 = v68;
        sub_10000882C(v24, (uint64_t *)&unk_10083FBE0);
        swift_bridgeObjectRelease(*((_QWORD *)&v335[0] + 1));
      }
      else
      {
        v26 = 0;
        v69 = 0xE000000000000000;
      }
      v70 = v322;
      v72 = sub_10001A6DC(v26, v69);
      v73 = v70[2];
      v74 = (v71 & 1) == 0;
      v75 = v73 + v74;
      if (__OFADD__(v73, v74))
        goto LABEL_246;
      v76 = v71;
      if (v70[3] < v75)
      {
        sub_1002CF66C(v75, 1);
        v24 = v332;
        v77 = sub_10001A6DC(v26, v69);
        if ((v76 & 1) != (v78 & 1))
          goto LABEL_262;
        v72 = v77;
        v70 = (_QWORD *)v24;
      }
      v322 = v70;
      if ((v76 & 1) != 0)
      {
        swift_bridgeObjectRelease(v69);
        v53 = (_QWORD *)(v70[7] + 8 * v72);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
        v56 = *(_QWORD *)((*v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v55 = *(_QWORD *)((*v53 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v56 >= v55 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1);
        v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v38);
        specialized Array._endMutation()(v57);
      }
      else
      {
        v79 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v80 = swift_allocObject(v79, 40, 7);
        *(_OWORD *)(v80 + 16) = v321;
        *(_QWORD *)(v80 + 32) = v38;
        *(_QWORD *)&v335[0] = v80;
        specialized Array._endMutation()(v80);
        v81 = v322;
        v82 = *(_QWORD *)&v335[0];
        v322[(v72 >> 6) + 8] |= 1 << v72;
        v83 = (uint64_t *)(v81[6] + 16 * v72);
        *v83 = v26;
        v83[1] = v69;
        *(_QWORD *)(v81[7] + 8 * v72) = v82;
        v84 = v81[2];
        v85 = __OFADD__(v84, 1);
        v86 = v84 + 1;
        if (v85)
          goto LABEL_250;
        v81[2] = v86;
      }
      v50 = v328;
      ++v52;
      v58 = v20 == v324;
      v20 = v326;
      v24 = v330;
      if (v58)
        goto LABEL_39;
    }
  }
  v322 = &_swiftEmptyDictionarySingleton;
LABEL_39:
  swift_bridgeObjectRelease(v24);
  v336 = (uint64_t)_swiftEmptyArrayStorage;
  v87 = v322[8];
  v308 = (char *)(v322 + 8);
  v88 = 1 << *((_BYTE *)v322 + 32);
  if (v88 < 64)
    v89 = ~(-1 << v88);
  else
    v89 = -1;
  *(_QWORD *)&v321 = v89 & v87;
  v90 = swift_beginAccess(&v336, v335, 0, 0);
  v91 = 0;
  v309 = (unint64_t)(v88 + 63) >> 6;
  v294 = &v333;
  v90.n128_u64[0] = 136315138;
  v307 = v90;
  v306 = (char *)&type metadata for Any + 8;
  v90.n128_u64[0] = 134218240;
  v293 = v90;
  v90.n128_u64[0] = 136315394;
  v305 = v90;
  v90.n128_u64[0] = 136446210;
  v304 = v90;
  v301 = xmmword_1006A7330;
  v300 = _swiftEmptyArrayStorage;
  v24 = v327;
  while (1)
  {
    if ((_QWORD)v321)
    {
      v92 = __clz(__rbit64(v321));
      *(_QWORD *)&v321 = (v321 - 1) & v321;
      v320 = v91;
      v93 = v92 | (v91 << 6);
      v94 = v322;
      goto LABEL_58;
    }
    v85 = __OFADD__(v91, 1);
    v95 = v91 + 1;
    v94 = v322;
    if (v85)
      goto LABEL_247;
    if (v95 >= v309)
    {
LABEL_240:
      swift_bridgeObjectRelease(v300);
      swift_release(v94);
      v49 = v336;
      goto LABEL_241;
    }
    v96 = *(_QWORD *)&v308[8 * v95];
    if (!v96)
    {
      v97 = v95 + 1;
      if (v95 + 1 >= v309)
        goto LABEL_240;
      v96 = *(_QWORD *)&v308[8 * v97];
      if (!v96)
      {
        v97 = v95 + 2;
        if (v95 + 2 >= v309)
          goto LABEL_240;
        v96 = *(_QWORD *)&v308[8 * v97];
        if (!v96)
        {
          v97 = v95 + 3;
          if (v95 + 3 >= v309)
            goto LABEL_240;
          v96 = *(_QWORD *)&v308[8 * v97];
          if (!v96)
          {
            while (1)
            {
              v95 = v97 + 1;
              if (__OFADD__(v97, 1))
                break;
              if (v95 >= v309)
                goto LABEL_240;
              v96 = *(_QWORD *)&v308[8 * v95];
              ++v97;
              if (v96)
                goto LABEL_57;
            }
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
            goto LABEL_255;
          }
        }
      }
      v95 = v97;
    }
LABEL_57:
    *(_QWORD *)&v321 = (v96 - 1) & v96;
    v320 = v95;
    v93 = __clz(__rbit64(v96)) + (v95 << 6);
LABEL_58:
    v98 = v94[7];
    v99 = (uint64_t *)(v94[6] + 16 * v93);
    v26 = v99[1];
    v323 = *v99;
    v100 = *(_QWORD *)(v98 + 8 * v93);
    swift_bridgeObjectRetain_n(v100, 3);
    swift_bridgeObjectRetain(v26);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.info.getter(v102);
    v104 = os_log_type_enabled(v102, (os_log_type_t)v103);
    v324 = (char *)v26;
    v331 = v100;
    if (v104)
    {
      LODWORD(v317) = v103;
      v105 = (char *)swift_slowAlloc(12, -1);
      v316 = swift_slowAlloc(32, -1);
      v332 = v316;
      *(_DWORD *)v105 = v307.n128_u32[0];
      if ((unint64_t)v100 >> 62)
      {
        v178 = v100 < 0 ? v100 : v100 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v100);
        v38 = _CocoaArrayWrapper.endIndex.getter(v178);
      }
      else
      {
        v38 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v100);
      }
      v319 = v102;
      v318 = v105;
      if (v38)
      {
        if (v38 < 1)
          goto LABEL_248;
        v106 = 0;
        v330 = v100 & 0xC000000000000001;
        v107 = _swiftEmptyArrayStorage;
        do
        {
          if (v330)
            v108 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v106, v100);
          else
            v108 = *(id *)(v100 + 8 * v106 + 32);
          v109 = v108;
          v110 = objc_msgSend(v108, "identifier", v293.n128_u64[0], v293.n128_u64[1]);
          if (v110)
          {
            v111 = v110;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v110);

            v112 = 0;
          }
          else
          {
            v112 = 1;
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v20, v112, 1, v24);
          v113 = v329;
          v114 = v50;
          sub_1000A5CA8((uint64_t)v20, v329, (uint64_t *)&unk_100839C80);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v113, 1, v24))
          {
            sub_10000882C(v113, (uint64_t *)&unk_100839C80);

          }
          else
          {
            v115 = v113;
            v116 = v325;
            (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v325, v115, v24);
            v117 = sub_10000882C(v115, (uint64_t *)&unk_100839C80);
            v118 = UUID.uuidString.getter(v117);
            v120 = v119;
            (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v24);

            if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
              v107 = sub_1002C8224(0, v107[2] + 1, 1, v107);
            v122 = v107[2];
            v121 = v107[3];
            if (v122 >= v121 >> 1)
              v107 = sub_1002C8224((_QWORD *)(v121 > 1), v122 + 1, 1, v107);
            v107[2] = v122 + 1;
            v123 = &v107[2 * v122];
            v123[4] = v118;
            v123[5] = v120;
            v24 = v327;
            v50 = v328;
            v20 = v326;
          }
          ++v106;
          v100 = (uint64_t)v331;
        }
        while (v38 != v106);
      }
      else
      {
        v107 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease(v100);
      v124 = Array.description.getter(v107, &type metadata for String);
      v126 = v125;
      swift_bridgeObjectRelease(v107);
      v127 = sub_10001A820(v124, v126, (uint64_t *)&v332);
      v128 = (uint8_t *)v318;
      *(_QWORD *)(v318 + 4) = v127;
      swift_bridgeObjectRelease_n(v100, 2);
      v129 = v126;
      v50 = v328;
      swift_bridgeObjectRelease(v129);
      v130 = v319;
      _os_log_impl((void *)&_mh_execute_header, v319, (os_log_type_t)v317, "RDHashtagLabelUpdater processing inserted hashtags: %s", v128, 0xCu);
      v131 = v316;
      swift_arrayDestroy(v316, 1, v306);
      swift_slowDealloc(v131, -1, -1);
      swift_slowDealloc(v128, -1, -1);

      v26 = (uint64_t)v324;
    }
    else
    {

      swift_bridgeObjectRelease_n(v100, 2);
    }
    v132 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0)
      v132 = v323 & 0xFFFFFFFFFFFFLL;
    if (v132)
      break;
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v26);
    v134 = Logger.logObject.getter(v133);
    v135 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v134, v135))
    {
      v136 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v136 = 0;
      _os_log_impl((void *)&_mh_execute_header, v134, v135, "RDHashtagLabelUpdater: Impossible to get here, nil canonical name should have been filtered", v136, 2u);
      swift_slowDealloc(v136, -1, -1);
    }

    v24 = v327;
LABEL_44:
    v91 = v320;
  }
  v137 = sub_100185A8C((uint64_t)v312, v323, v26);
  v313 = sub_10017788C(v137);
  swift_bridgeObjectRelease(v137);
  v138 = (char *)&_swiftEmptyDictionarySingleton;
  v332 = (unint64_t)&_swiftEmptyDictionarySingleton;
  if ((unint64_t)v100 >> 62)
  {
    if (v100 < 0)
      v179 = v100;
    else
      v179 = v100 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v100);
    v139 = (char *)_CocoaArrayWrapper.endIndex.getter(v179);
    swift_bridgeObjectRelease(v100);
    v24 = v327;
    if (v139)
    {
LABEL_92:
      v319 = (v100 & 0xC000000000000001);
      v140 = 4;
      v318 = v139;
      while (1)
      {
        v146 = v319
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v140 - 4, v100)
             : *(id *)(v100 + 8 * v140);
        v147 = (unint64_t)v146;
        v24 = v140 - 3;
        if (__OFADD__(v140 - 4, 1))
          break;
        v148 = objc_msgSend(v146, "account");
        v330 = v147;
        if (v148)
        {
          v149 = v148;
          v150 = objc_msgSend(v148, "identifier");

          v151 = v138;
          if (v150)
          {
            v152 = v303;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v150);

            v153 = 0;
          }
          else
          {
            v153 = 1;
            v152 = v303;
          }
          v155 = v327;
          v156 = v328;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v328 + 56))(v152, v153, 1, v327);
          v157 = (uint64_t)v152;
          v158 = v302;
          sub_1000A5CA8(v157, v302, (uint64_t *)&unk_100839C80);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v158, 1, v155))
          {
            sub_10000882C(v158, (uint64_t *)&unk_100839C80);
            v26 = 0;
            v154 = 0xE000000000000000;
          }
          else
          {
            v159 = v158;
            v160 = v325;
            (*(void (**)(char *, uint64_t, uint64_t))(v156 + 16))(v325, v159, v155);
            v161 = v159;
            v20 = v326;
            v162 = sub_10000882C(v161, (uint64_t *)&unk_100839C80);
            v26 = UUID.uuidString.getter(v162);
            v154 = v163;
            (*(void (**)(char *, uint64_t))(v156 + 8))(v160, v155);
          }
          v138 = v151;
        }
        else
        {
          v26 = 0;
          v154 = 0xE000000000000000;
        }
        v38 = sub_10001A6DC(v26, v154);
        v165 = *((_QWORD *)v138 + 2);
        v166 = (v164 & 1) == 0;
        v167 = v165 + v166;
        if (__OFADD__(v165, v166))
          goto LABEL_243;
        v168 = v164;
        v169 = v138;
        if (*((_QWORD *)v138 + 3) < v167)
        {
          sub_1002CF66C(v167, 1);
          v169 = (char *)v332;
          v170 = sub_10001A6DC(v26, v154);
          if ((v168 & 1) != (v171 & 1))
            goto LABEL_262;
          v38 = v170;
        }
        if ((v168 & 1) != 0)
        {
          swift_bridgeObjectRelease(v154);
          v141 = (_QWORD *)(*((_QWORD *)v169 + 7) + 8 * v38);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v142);
          v144 = *(_QWORD *)((*v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v143 = *(_QWORD *)((*v141 & 0xFFFFFFFFFFFFFF8) + 0x18);
          v26 = (uint64_t)v324;
          if (v144 >= v143 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v143 > 1);
          v145 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v144, v330);
          specialized Array._endMutation()(v145);
          v138 = v169;
        }
        else
        {
          v172 = sub_10001A630((uint64_t *)&unk_10083AD90);
          v173 = swift_allocObject(v172, 40, 7);
          *(_OWORD *)(v173 + 16) = v301;
          *(_QWORD *)(v173 + 32) = v330;
          v334 = v173;
          specialized Array._endMutation()(v173);
          v174 = v334;
          *(_QWORD *)&v169[8 * ((unint64_t)v38 >> 6) + 64] |= 1 << v38;
          v175 = (uint64_t *)(*((_QWORD *)v169 + 6) + 16 * v38);
          *v175 = v26;
          v175[1] = v154;
          *(_QWORD *)(*((_QWORD *)v169 + 7) + 8 * v38) = v174;
          v176 = *((_QWORD *)v169 + 2);
          v85 = __OFADD__(v176, 1);
          v177 = v176 + 1;
          if (v85)
            goto LABEL_249;
          v138 = v169;
          *((_QWORD *)v169 + 2) = v177;
          v26 = (uint64_t)v324;
        }
        v100 = (uint64_t)v331;
        ++v140;
        v58 = v24 == (_QWORD)v318;
        v24 = v327;
        v50 = v328;
        if (v58)
          goto LABEL_125;
      }
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      __break(1u);
LABEL_246:
      __break(1u);
LABEL_247:
      __break(1u);
LABEL_248:
      __break(1u);
LABEL_249:
      __break(1u);
LABEL_250:
      __break(1u);
      goto LABEL_251;
    }
  }
  else
  {
    v139 = *(char **)((v100 & 0xFFFFFFFFFFFFF8) + 0x10);
    v24 = v327;
    if (v139)
      goto LABEL_92;
  }
LABEL_125:
  swift_bridgeObjectRelease(v100);
  v180 = 0;
  v181 = *((_QWORD *)v138 + 8);
  v311 = v138 + 64;
  v182 = 1 << v138[32];
  if (v182 < 64)
    v183 = ~(-1 << v182);
  else
    v183 = -1;
  v38 = v183 & v181;
  v314 = (unint64_t)(v182 + 63) >> 6;
  v310 = v138;
  if ((v183 & v181) == 0)
  {
LABEL_132:
    v85 = __OFADD__(v180++, 1);
    if (v85)
      goto LABEL_244;
    if (v180 < v314)
    {
      v186 = *(_QWORD *)&v311[8 * v180];
      if (v186)
        goto LABEL_142;
      v187 = v180 + 1;
      if (v180 + 1 < v314)
      {
        v186 = *(_QWORD *)&v311[8 * v187];
        if (v186)
          goto LABEL_141;
        v187 = v180 + 2;
        if (v180 + 2 < v314)
        {
          v186 = *(_QWORD *)&v311[8 * v187];
          if (v186)
            goto LABEL_141;
          v187 = v180 + 3;
          if (v180 + 3 < v314)
          {
            v186 = *(_QWORD *)&v311[8 * v187];
            if (v186)
            {
LABEL_141:
              v180 = v187;
LABEL_142:
              v38 = (v186 - 1) & v186;
              v185 = __clz(__rbit64(v186)) + (v180 << 6);
              goto LABEL_143;
            }
            while (1)
            {
              v180 = v187 + 1;
              if (__OFADD__(v187, 1))
                break;
              if (v180 >= v314)
                goto LABEL_209;
              v186 = *(_QWORD *)&v311[8 * v180];
              ++v187;
              if (v186)
                goto LABEL_142;
            }
LABEL_251:
            __break(1u);
            goto LABEL_252;
          }
        }
      }
    }
LABEL_209:
    swift_bridgeObjectRelease(v26);
    swift_release(v138);
    v269 = (uint64_t)v300;
    if (!v300[2])
      goto LABEL_235;
    swift_bridgeObjectRetain(v300);
    v270 = sub_10018616C((uint64_t)v312, v269);
    swift_bridgeObjectRelease(v269);
    v271 = sub_100178494((uint64_t)v270);
    swift_bridgeObjectRelease(v270);
    v272 = v336;
    if (!((unint64_t)v336 >> 62))
    {
      v273 = *(_QWORD *)((v336 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v336, 2);
      if (v273)
        goto LABEL_212;
LABEL_229:
      swift_bridgeObjectRelease_n(v272, 2);
      swift_bridgeObjectRetain(v271);
      v285 = Logger.logObject.getter(v284);
      v286 = static os_log_type_t.info.getter(v285);
      if (os_log_type_enabled(v285, v286))
      {
        v287 = swift_slowAlloc(22, -1);
        *(_DWORD *)v287 = v293.n128_u32[0];
        v288 = v336;
        if ((unint64_t)v336 >> 62)
        {
          if (v336 < 0)
            v291 = v336;
          else
            v291 = v336 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v336);
          v289 = _CocoaArrayWrapper.endIndex.getter(v291);
          swift_bridgeObjectRelease(v288);
        }
        else
        {
          v289 = *(_QWORD *)((v336 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v332 = v289;
        v26 = (uint64_t)v294;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v332, v294);
        *(_WORD *)(v287 + 12) = 2048;
        v290 = v271[2];
        swift_bridgeObjectRelease(v271);
        v332 = v290;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v332, v26);
        swift_bridgeObjectRelease(v271);
        _os_log_impl((void *)&_mh_execute_header, v285, v286, "RDHashtagLabelUpdater updated hashtags that need to be associated to shared-to-me-reminders {hashtagsNeedAssociatingToReminder.count: %ld, shared-to-me-reminders.count: %ld}", (uint8_t *)v287, 0x16u);
        swift_slowDealloc(v287, -1, -1);

        v24 = v327;
        v50 = v328;
      }
      else
      {

        swift_bridgeObjectRelease_n(v271, 2);
        v24 = v327;
      }
      v20 = v326;
LABEL_235:
      swift_bridgeObjectRelease(v313);
      goto LABEL_44;
    }
    if (v336 < 0)
      v283 = v336;
    else
      v283 = v336 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v336, 2);
    v273 = _CocoaArrayWrapper.endIndex.getter(v283);
    if (!v273)
      goto LABEL_229;
LABEL_212:
    if (v273 < 1)
      goto LABEL_261;
    v26 = 0;
    while (2)
    {
      if ((v272 & 0xC000000000000001) != 0)
        v275 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v272);
      else
        v275 = *(id *)(v272 + 8 * v26 + 32);
      v276 = v275;
      v277 = objc_msgSend(v275, "sharedToMeReminderCKIdentifier", v293.n128_u64[0]);
      if (v277)
      {
        v38 = (uint64_t)v277;
        v278 = static String._unconditionallyBridgeFromObjectiveC(_:)(v277);
        v280 = v279;

        if (!v271[2])
        {
LABEL_214:
          v274 = 0;
          goto LABEL_215;
        }
      }
      else
      {
        v280 = 0xE300000000000000;
        v278 = 7104878;
        if (!v271[2])
          goto LABEL_214;
      }
      v281 = sub_10001A6DC(v278, v280);
      if ((v282 & 1) == 0)
        goto LABEL_214;
      v274 = *(id *)(v271[7] + 8 * v281);
LABEL_215:
      ++v26;
      objc_msgSend(v276, "setReminder:", v274, swift_bridgeObjectRelease(v280).n128_f64[0]);

      v50 = v328;
      if (v273 == v26)
        goto LABEL_229;
      continue;
    }
  }
  while (2)
  {
    while (1)
    {
      v184 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v185 = v184 | (v180 << 6);
LABEL_143:
      v188 = *((_QWORD *)v138 + 7);
      v189 = *((_QWORD *)v138 + 6) + 16 * v185;
      v24 = *(_QWORD *)(v189 + 8);
      v319 = *(NSObject **)v189;
      v190 = *(_QWORD *)(v188 + 8 * v185);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v190);
      v331 = sub_100177C6C(v191);
      if (v331)
        break;
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v190);
      v24 = v327;
      if (!v38)
        goto LABEL_132;
    }
    v192 = v313;
    v193 = *(_QWORD *)(v313 + 16);
    v330 = v190;
    v317 = v180;
    v316 = v38;
    if (v193)
    {
      swift_bridgeObjectRetain(v24);
      v194 = sub_10001A6DC((uint64_t)v319, v24);
      if ((v195 & 1) != 0)
      {
        v196 = *(char **)(*(_QWORD *)(v192 + 56) + 8 * v194);
        v197 = v196;
      }
      else
      {
        v196 = 0;
      }
      v318 = v196;
      swift_bridgeObjectRelease(v24);
      v190 = v330;
    }
    else
    {
      v318 = 0;
    }
    swift_bridgeObjectRetain_n(v26, 2);
    v38 = v331;
    v198 = Logger.logObject.getter(v38);
    v199 = static os_log_type_t.info.getter(v198);
    if (os_log_type_enabled(v198, v199))
    {
      v200 = swift_slowAlloc(22, -1);
      v201 = swift_slowAlloc(64, -1);
      v332 = v201;
      *(_DWORD *)v200 = v305.n128_u32[0];
      swift_bridgeObjectRetain(v26);
      *(_QWORD *)(v200 + 4) = sub_10001A820(v323, v26, (uint64_t *)&v332);
      swift_bridgeObjectRelease_n(v26, 3);
      *(_WORD *)(v200 + 12) = 2082;
      v202 = objc_msgSend((id)v38, "remObjectID");
      if (v202)
      {
        v203 = v202;
        v204 = objc_msgSend(v202, "description");

        v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v204);
        v207 = v206;

      }
      else
      {
        v207 = 0xE300000000000000;
        v205 = 7104878;
      }
      *(_QWORD *)(v200 + 14) = sub_10001A820(v205, v207, (uint64_t *)&v332);

      swift_bridgeObjectRelease(v207);
      _os_log_impl((void *)&_mh_execute_header, v198, v199, "RDHashtagLabelUpdater created new hashtag label {canonicalName: %s, firstHashtag.objectID: %{public}s}", (uint8_t *)v200, 0x16u);
      swift_arrayDestroy(v201, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v201, -1, -1);
      swift_slowDealloc(v200, -1, -1);

      v50 = v328;
      v20 = v326;
      v26 = (uint64_t)v324;
      v190 = v330;
    }
    else
    {

      swift_bridgeObjectRelease_n(v26, 2);
    }
    v208 = v318;
    if (v318)
    {
      swift_bridgeObjectRelease(v24);
      v221 = v208;
      v295 = v208;
      goto LABEL_183;
    }
    v209 = sub_100185EC8(v312, (void *)v38);
    if (!v209)
    {
      swift_bridgeObjectRelease(v190);
      swift_bridgeObjectRelease(v24);
      v210 = (id)v38;
      v211 = Logger.logObject.getter(v210);
      v212 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v211, v212))
      {
        v213 = swift_slowAlloc(12, -1);
        v214 = swift_slowAlloc(32, -1);
        v332 = v214;
        *(_DWORD *)v213 = v304.n128_u32[0];
        v215 = objc_msgSend(v210, "remObjectID");
        v138 = v310;
        if (v215)
        {
          v216 = v215;
          v217 = objc_msgSend(v215, "description");

          v218 = static String._unconditionallyBridgeFromObjectiveC(_:)(v217);
          v220 = v219;

        }
        else
        {
          v220 = 0xE300000000000000;
          v218 = 7104878;
        }
        *(_QWORD *)(v213 + 4) = sub_10001A820(v218, v220, (uint64_t *)&v332);

        swift_bridgeObjectRelease(v220);
        _os_log_impl((void *)&_mh_execute_header, v211, v212, "RDHashtagLabelUpdater: Cannot create hashtag label for hashtag: %{public}s", (uint8_t *)v213, 0xCu);
        swift_arrayDestroy(v214, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v214, -1, -1);
        swift_slowDealloc(v213, -1, -1);

        v24 = v327;
        v50 = v328;
        v20 = v326;
        v26 = (uint64_t)v324;
LABEL_165:
        v180 = v317;
        v38 = v316;
        if (!v316)
          goto LABEL_132;
        continue;
      }

      v20 = v326;
      v24 = v327;
LABEL_162:
      v138 = v310;
      goto LABEL_165;
    }
    break;
  }
  v295 = v209;
  v222 = v209;
  v223 = v313;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v313);
  v332 = v223;
  v226 = sub_10001A6DC((uint64_t)v319, v24);
  v227 = *(_QWORD *)(v223 + 16);
  v228 = (v225 & 1) == 0;
  v229 = v227 + v228;
  if (__OFADD__(v227, v228))
    goto LABEL_254;
  v230 = v225;
  if (*(_QWORD *)(v223 + 24) >= v229)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1002D6568();
  }
  else
  {
    sub_1002CCF08(v229, isUniquelyReferenced_nonNull_native);
    v231 = sub_10001A6DC((uint64_t)v319, v24);
    if ((v230 & 1) != (v232 & 1))
      goto LABEL_262;
    v226 = v231;
  }
  v233 = (_QWORD *)v332;
  v313 = v332;
  if ((v230 & 1) != 0)
  {
    v234 = *(_QWORD *)(v332 + 56);
    v235 = 8 * v226;

    *(_QWORD *)(v234 + v235) = v222;
    goto LABEL_182;
  }
  *(_QWORD *)(v332 + 8 * (v226 >> 6) + 64) |= 1 << v226;
  v236 = (NSObject **)(v233[6] + 16 * v226);
  *v236 = v319;
  v236[1] = v24;
  *(_QWORD *)(v233[7] + 8 * v226) = v222;
  v237 = v233[2];
  v85 = __OFADD__(v237, 1);
  v238 = v237 + 1;
  if (!v85)
  {
    v233[2] = v238;
    swift_bridgeObjectRetain(v24);
LABEL_182:
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(0x8000000000000000);
    v221 = v222;
    v50 = v328;
    v20 = v326;
    v190 = v330;
    v208 = v318;
LABEL_183:
    v239 = v208;
    v240 = (char *)(id)v38;
    v319 = v221;
    sub_100184C74(v221, v190, v331);
    v318 = v240;

    v24 = (uint64_t)v296;
    if ((unint64_t)v190 >> 62)
    {
      if (v190 < 0)
        v268 = v190;
      else
        v268 = v190 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v190);
      v26 = _CocoaArrayWrapper.endIndex.getter(v268);
      swift_bridgeObjectRelease(v190);
      if (v26)
      {
LABEL_185:
        if (v26 < 1)
          goto LABEL_253;
        v241 = 0;
        v242 = v190 & 0xC000000000000001;
        do
        {
          if (v242)
            v243 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v241, v190);
          else
            v243 = *(id *)(v190 + 8 * v241 + 32);
          v244 = v243;
          v245 = objc_msgSend(v243, "reminder", v293.n128_u64[0]);

          if (v245
            || (objc_msgSend(v244, "isConcealed") & 1) != 0
            || (v246 = objc_msgSend(v244, "sharedToMeReminderCKIdentifier")) == 0)
          {

            v50 = v328;
          }
          else
          {
            v247 = v246;
            v248 = static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
            v250 = v249;

            UUID.init(uuidString:)(v248, v250);
            v251 = swift_bridgeObjectRelease(v250);
            v50 = v328;
            v252 = v24;
            v253 = v24;
            v254 = v327;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v328 + 48))(v252, 1, v327, v251) == 1)
            {

              sub_10000882C(v253, (uint64_t *)&unk_100839C80);
              v24 = v253;
              v20 = v326;
              v190 = v330;
            }
            else
            {
              v255 = v297;
              v331 = *(NSObject **)(v50 + 32);
              ((void (*)(char *, uint64_t, uint64_t))v331)(v297, v253, v254);
              swift_beginAccess(&v336, &v332, 33, 0);
              v256 = v244;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v256);
              v257 = v50;
              v259 = *(_QWORD *)((v336 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v258 = *(_QWORD *)((v336 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v259 >= v258 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v258 > 1);
              v260 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v259, v256);
              specialized Array._endMutation()(v260);
              swift_endAccess(&v332);
              (*(void (**)(char *, char *, uint64_t))(v257 + 16))(v298, v255, v254);
              v261 = (unint64_t)v300;
              if ((swift_isUniquelyReferenced_nonNull_native(v300) & 1) == 0)
                v261 = sub_1002C8EC4(0, *(_QWORD *)(v261 + 16) + 1, 1, v261);
              v190 = v330;
              v262 = v331;
              v264 = *(_QWORD *)(v261 + 16);
              v263 = *(_QWORD *)(v261 + 24);
              if (v264 >= v263 >> 1)
                v261 = sub_1002C8EC4(v263 > 1, v264 + 1, 1, v261);
              *(_QWORD *)(v261 + 16) = v264 + 1;
              v265 = (*(unsigned __int8 *)(v328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v328 + 80);
              v300 = (_QWORD *)v261;
              v266 = v261 + v265 + *(_QWORD *)(v328 + 72) * v264;
              v50 = v328;
              v267 = v327;
              ((void (*)(unint64_t, char *, uint64_t))v262)(v266, v298, v327);

              (*(void (**)(char *, uint64_t))(v50 + 8))(v297, v267);
              v24 = (uint64_t)v296;
              v20 = v326;
            }
          }
          ++v241;
        }
        while (v26 != v241);
      }
    }
    else
    {
      v26 = *(_QWORD *)((v190 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v26)
        goto LABEL_185;
    }

    swift_bridgeObjectRelease(v190);
    v24 = v327;
    v26 = (uint64_t)v324;
    goto LABEL_162;
  }
  __break(1u);
LABEL_261:
  __break(1u);
LABEL_262:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10017753C(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t ObjCClassFromMetadata;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v34 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = objc_msgSend(*a1, "name");
  if (!v11)
    goto LABEL_9;
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v15 = v14;

  *(_QWORD *)&v16 = swift_bridgeObjectRelease(v15).n128_u64[0];
  v17 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v17 = v13 & 0xFFFFFFFFFFFFLL;
  if (v17 && (v18 = objc_msgSend(v10, "account", v16)) != 0)
  {
    v19 = v18;
    v20 = objc_msgSend(v18, "identifier");
    if (v20)
    {
      v21 = v20;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) != 1)
      {

        sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
        *v34 = v10;
        v22 = v10;
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
    }
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
    v28 = (void *)objc_opt_self(REMError);
    v29 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v29);
    v31 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v31);

    swift_willThrow(v32);
  }
  else
  {
LABEL_9:
    v23 = (void *)objc_opt_self(REMError);
    v24 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v25 = swift_getObjCClassFromMetadata(v24);
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "unexpectedNilPropertyWithClass:property:", v25, v26);

    swift_willThrow(v27);
  }
}

uint64_t sub_10017788C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;

  v1 = a1;
  if (a1 >> 62)
  {
LABEL_29:
    if (v1 < 0)
      v40 = v1;
    else
      v40 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v40);
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2)
    {
LABEL_3:
      v44 = v1 & 0xC000000000000001;
      v45 = &_swiftEmptyDictionarySingleton;
      v3 = 4;
      v42 = v2;
      v43 = v1;
      while (1)
      {
        if (v44)
          v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1);
        else
          v5 = *(id *)(v1 + 8 * v3);
        v6 = v5;
        v7 = v3 - 3;
        if (__OFADD__(v3 - 4, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        v8 = objc_msgSend(v5, "accountIdentifier");
        if (v8)
        {
          v9 = v8;
          v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
          v12 = v11;

          v13 = v6;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
          v46 = v45;
          v16 = sub_10001A6DC(v10, v12);
          v17 = v45[2];
          v18 = (v15 & 1) == 0;
          v19 = v17 + v18;
          if (__OFADD__(v17, v18))
            goto LABEL_27;
          v20 = v15;
          if (v45[3] >= v19)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1002D6568();
          }
          else
          {
            sub_1002CCF08(v19, isUniquelyReferenced_nonNull_native);
            v21 = sub_10001A6DC(v10, v12);
            if ((v20 & 1) != (v22 & 1))
            {
              result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              __break(1u);
              return result;
            }
            v16 = v21;
          }
          v35 = v46;
          v45 = v46;
          if ((v20 & 1) != 0)
          {
            v4 = v46[7];

            *(_QWORD *)(v4 + 8 * v16) = v13;
          }
          else
          {
            v46[(v16 >> 6) + 8] |= 1 << v16;
            v36 = (uint64_t *)(v35[6] + 16 * v16);
            *v36 = v10;
            v36[1] = v12;
            *(_QWORD *)(v35[7] + 8 * v16) = v13;
            v37 = v35[2];
            v38 = __OFADD__(v37, 1);
            v39 = v37 + 1;
            if (v38)
              goto LABEL_28;
            v35[2] = v39;
            swift_bridgeObjectRetain(v12);
          }

          swift_bridgeObjectRelease(v12);
          swift_bridgeObjectRelease(0x8000000000000000);
          v2 = v42;
          v1 = v43;
        }
        else
        {
          if (qword_100836E00 != -1)
            swift_once(&qword_100836E00, sub_10016F110);
          v23 = type metadata accessor for Logger(0);
          sub_10001AAA8(v23, (uint64_t)qword_10083D710);
          v24 = v6;
          v25 = Logger.logObject.getter(v24);
          v26 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v25, v26))
          {
            v27 = swift_slowAlloc(12, -1);
            v28 = swift_slowAlloc(32, -1);
            v46 = (_QWORD *)v28;
            *(_DWORD *)v27 = 136446210;
            v29 = objc_msgSend(v24, "ic_loggingDescription");
            v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
            v32 = v31;

            *(_QWORD *)(v27 + 4) = sub_10001A820(v30, v32, (uint64_t *)&v46);
            v33 = v32;
            v1 = v43;
            swift_bridgeObjectRelease(v33);
            _os_log_impl((void *)&_mh_execute_header, v25, v26, "RDHashtagLabelUpdater: REMCDHashtagLabel with nil accountIdentifier: %{public}s", (uint8_t *)v27, 0xCu);
            swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v28, -1, -1);
            v34 = v27;
            v2 = v42;
            swift_slowDealloc(v34, -1, -1);

          }
          else
          {

          }
        }
        ++v3;
        if (v7 == v2)
          goto LABEL_34;
      }
    }
  }
  v45 = &_swiftEmptyDictionarySingleton;
LABEL_34:
  swift_bridgeObjectRelease(v1);
  return (uint64_t)v45;
}

id sub_100177C6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  id result;
  void *v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  id v47;
  void *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  void (*v58)(char *, uint64_t);
  id v59;
  void *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  char *v67;
  void (*v68)(uint64_t, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char v74;
  char *v75;
  char v76;
  id v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  id v105;
  char *v106;
  _QWORD v107[2];
  unint64_t v108;
  unint64_t v109;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v3 = __chkstk_darwin(v2);
  v5 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v93 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v93 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v93 - v12;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v94 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v99 = (char *)&v93 - v19;
  v20 = __chkstk_darwin(v18);
  v100 = (char *)&v93 - v21;
  v22 = __chkstk_darwin(v20);
  v103 = (char *)&v93 - v23;
  __chkstk_darwin(v22);
  v104 = (char *)&v93 - v24;
  v108 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    v89 = v5;
    if (a1 < 0)
      v90 = a1;
    else
      v90 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v91 = v90;
    v5 = v89;
    v25 = _CocoaArrayWrapper.endIndex.getter(v91);
  }
  else
  {
    v25 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
  }
  v95 = v8;
  v96 = v5;
  v101 = v11;
  v102 = v15;
  v106 = v13;
  if (v25)
  {
    if (v25 < 1)
    {
      __break(1u);
      goto LABEL_77;
    }
    for (i = 0; i != v25; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v30 = *(id *)(a1 + 8 * i + 32);
      v31 = v30;
      v32 = objc_msgSend(v30, "name");
      if (v32)
      {

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v28 = *(_QWORD *)(v108 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
        v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v31);
        specialized ContiguousArray._endMutation()(v29);
      }
      else
      {

      }
      v13 = v106;
    }
    swift_bridgeObjectRelease(a1);
    v25 = v108;
    v11 = v101;
    v15 = v102;
    if ((v108 & 0x8000000000000000) != 0)
      goto LABEL_73;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v25 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_73;
  }
  if ((v25 & 0x4000000000000000) != 0)
  {
LABEL_73:
    v92 = swift_retain(v25);
    result = (id)_CocoaArrayWrapper.endIndex.getter(v92);
    v5 = (uint64_t)result;
    if (!result)
      goto LABEL_74;
    goto LABEL_18;
  }
  v5 = *(_QWORD *)(v25 + 16);
  result = (id)swift_retain(v25);
  if (!v5)
  {
LABEL_74:
    swift_release_n(v25, 2);
    return 0;
  }
LABEL_18:
  v98 = v25 & 0xC000000000000001;
  if ((v25 & 0xC000000000000001) != 0)
  {
LABEL_77:
    result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
    goto LABEL_21;
  }
  if (!*(_QWORD *)(v25 + 16))
  {
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  result = *(id *)(v25 + 32);
LABEL_21:
  v34 = result;
  v97 = v5 - 1;
  if (v5 == 1)
  {
    v35 = result;
LABEL_23:
    swift_release_n(v25, 2);
    return v35;
  }
  if (v5 < 2)
    goto LABEL_79;
  if (v98 || (v36 = *(_QWORD *)(v25 + 16), v36 >= 2) && v97 < v36)
  {
    v37 = 0;
    v93 = v25;
    while (1)
    {
      if (v98)
        v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37 + 1, v25);
      else
        v39 = *(id *)(v25 + 8 * v37 + 40);
      v40 = v39;
      v41 = objc_msgSend(v39, "creationDate", v93);
      if (v41)
      {
        v42 = v41;
        v43 = v103;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v41);

        v44 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
        v44(v13, v43, v14);
        v45 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v45(v13, 0, 1, v14);
        v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
        if ((_DWORD)v46 != 1)
        {
          v44(v104, v13, v14);
          goto LABEL_39;
        }
      }
      else
      {
        v45 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v46 = v45(v13, 1, 1, v14);
      }
      static Date.distantFuture.getter(v46);
      sub_10000882C((uint64_t)v13, (uint64_t *)&unk_1008380D0);
LABEL_39:
      v105 = v40;
      v47 = objc_msgSend(v34, "creationDate");
      if (v47)
      {
        v48 = v47;
        v49 = v103;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v47);

        v50 = v15;
        v51 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
        v51(v11, v49, v14);
        v45(v11, 0, 1, v14);
        v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v11, 1, v14);
        if ((_DWORD)v52 != 1)
        {
          v53 = v100;
          v51(v100, v11, v14);
          goto LABEL_44;
        }
      }
      else
      {
        v52 = v45(v11, 1, 1, v14);
      }
      v53 = v100;
      static Date.distantFuture.getter(v52);
      sub_10000882C((uint64_t)v11, (uint64_t *)&unk_1008380D0);
LABEL_44:
      v54 = v104;
      v55 = static Date.< infix(_:_:)(v104, v53);
      v56 = v53;
      v57 = v55;
      v15 = v102;
      v58 = *(void (**)(char *, uint64_t))(v102 + 8);
      v58(v56, v14);
      v58(v54, v14);
      if ((v57 & 1) == 0)
      {
        v59 = objc_msgSend(v105, "creationDate");
        if (v59)
        {
          v60 = v59;
          v61 = v103;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v59);

          v62 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
          v63 = (uint64_t)v95;
          v62(v95, v61, v14);
          v45((char *)v63, 0, 1, v14);
          v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v63, 1, v14);
          if ((_DWORD)v64 != 1)
          {
            v62(v99, (char *)v63, v14);
            goto LABEL_50;
          }
        }
        else
        {
          v63 = (uint64_t)v95;
          v64 = v45(v95, 1, 1, v14);
        }
        static Date.distantFuture.getter(v64);
        sub_10000882C(v63, (uint64_t *)&unk_1008380D0);
LABEL_50:
        v65 = objc_msgSend(v34, "creationDate");
        v13 = v106;
        if (v65)
        {
          v66 = v65;
          v67 = v103;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v65);

          v68 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
          v69 = v96;
          v68(v96, v67, v14);
          v45((char *)v69, 0, 1, v14);
          v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v69, 1, v14);
          v35 = v105;
          if ((_DWORD)v70 != 1)
          {
            v71 = v94;
            v68((uint64_t)v94, (char *)v69, v14);
            v72 = v71;
            goto LABEL_55;
          }
        }
        else
        {
          v69 = v96;
          v70 = v45((char *)v96, 1, 1, v14);
          v35 = v105;
        }
        v72 = v94;
        static Date.distantFuture.getter(v70);
        sub_10000882C(v69, (uint64_t *)&unk_1008380D0);
LABEL_55:
        v73 = v99;
        v74 = static Date.== infix(_:_:)(v99, v72);
        v75 = v72;
        v76 = v74;
        v58(v75, v14);
        v58(v73, v14);
        v25 = v93;
        if ((v76 & 1) != 0)
        {
          v77 = objc_msgSend(v35, "name");
          if (v77)
          {
            v78 = v77;
            v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
            v81 = v80;

          }
          else
          {
            v79 = 0;
            v81 = 0xE000000000000000;
          }
          v108 = v79;
          v109 = v81;
          v82 = objc_msgSend(v34, "name");
          if (v82)
          {
            v83 = v82;
            v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
            v86 = v85;

          }
          else
          {
            v84 = 0;
            v86 = 0xE000000000000000;
          }
          v107[0] = v84;
          v107[1] = v86;
          v87 = sub_1000E525C();
          v88 = StringProtocol.localizedStandardCompare<A>(_:)(v107, &type metadata for String, &type metadata for String, v87, v87);
          swift_bridgeObjectRelease(v81);
          swift_bridgeObjectRelease(v86);
          if (v88 == -1)
            v38 = v34;
          else
            v38 = v35;
          if (v88 != -1)
            v35 = v34;
          v11 = v101;
          v13 = v106;
        }
        else
        {
          v38 = v35;
          v35 = v34;
          v11 = v101;
        }
        goto LABEL_30;
      }
      v38 = v34;
      v11 = v101;
      v35 = v105;
LABEL_30:

      ++v37;
      v34 = v35;
      if (v97 == v37)
        goto LABEL_23;
    }
  }
LABEL_80:
  __break(1u);
  return result;
}

_QWORD *sub_100178494(uint64_t isUniquelyReferenced_nonNull_native)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *result;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v43 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v37 - v9;
  if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_30:
    if (isUniquelyReferenced_nonNull_native < 0)
      v35 = isUniquelyReferenced_nonNull_native;
    else
      v35 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
    v11 = _CocoaArrayWrapper.endIndex.getter(v35);
    if (v11)
      goto LABEL_3;
  }
  else
  {
    v11 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
    if (v11)
    {
LABEL_3:
      v12 = &_swiftEmptyDictionarySingleton;
      v44 = v11;
      v45 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      v13 = 4;
      v41 = v2;
      v42 = isUniquelyReferenced_nonNull_native;
      v39 = v8;
      v40 = v3;
      v38 = v10;
      while (1)
      {
        if (v45)
          v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, isUniquelyReferenced_nonNull_native);
        else
          v14 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v13);
        v15 = v14;
        v16 = v13 - 3;
        if (__OFADD__(v13 - 4, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        v17 = objc_msgSend(v14, "identifier");
        if (v17)
        {
          v18 = v17;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

          v19 = 0;
        }
        else
        {
          v19 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v3 + 56))(v8, v19, 1, v2);
        sub_1000A5CA8((uint64_t)v8, (uint64_t)v10, (uint64_t *)&unk_100839C80);
        if (!(*(unsigned int (**)(char *, uint64_t, unint64_t))(v3 + 48))(v10, 1, v2))
          break;

        sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
LABEL_5:
        ++v13;
        if (v16 == v44)
        {
          swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
          return v12;
        }
      }
      v20 = v43;
      (*(void (**)(char *, char *, unint64_t))(v3 + 16))(v43, v10, v2);
      v21 = sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C80);
      v8 = (char *)UUID.uuidString.getter(v21);
      v10 = v22;
      (*(void (**)(char *, unint64_t))(v3 + 8))(v20, v2);
      v23 = v15;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
      v46 = v12;
      v2 = sub_10001A6DC((uint64_t)v8, (uint64_t)v10);
      v25 = v12[2];
      v26 = (v24 & 1) == 0;
      v27 = v25 + v26;
      if (__OFADD__(v25, v26))
        goto LABEL_28;
      v3 = v24;
      if (v12[3] < v27)
      {
        sub_1002CC560(v27, isUniquelyReferenced_nonNull_native);
        v28 = sub_10001A6DC((uint64_t)v8, (uint64_t)v10);
        if ((v3 & 1) != (v29 & 1))
        {
          result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          return result;
        }
        v2 = v28;
        v12 = v46;
        if ((v3 & 1) == 0)
          goto LABEL_23;
LABEL_21:
        v30 = v12[7];

        *(_QWORD *)(v30 + 8 * v2) = v23;
LABEL_25:

        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(0x8000000000000000);
        v2 = v41;
        isUniquelyReferenced_nonNull_native = v42;
        v8 = v39;
        v3 = v40;
        v10 = v38;
        goto LABEL_5;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v12 = v46;
        if ((v24 & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        sub_1002D614C();
        v12 = v46;
        if ((v3 & 1) != 0)
          goto LABEL_21;
      }
LABEL_23:
      v12[(v2 >> 6) + 8] |= 1 << v2;
      v31 = (char **)(v12[6] + 16 * v2);
      *v31 = v8;
      v31[1] = v10;
      *(_QWORD *)(v12[7] + 8 * v2) = v23;
      v32 = v12[2];
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
        goto LABEL_29;
      v12[2] = v34;
      swift_bridgeObjectRetain(v10);
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  return &_swiftEmptyDictionarySingleton;
}

void sub_100178844(unint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t isa;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int64_t v97;
  unint64_t v98;
  int64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  int v107;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  id v146;
  void *v147;
  id v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char v159;
  unint64_t v160;
  uint64_t v161;
  _BOOL8 v162;
  uint64_t v163;
  char v164;
  unint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  os_log_type_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  int64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  int64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  int64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t i;
  void *v199;
  uint64_t j;
  void *v201;
  _QWORD *v202;
  double v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t k;
  uint64_t v208;
  uint64_t v209;
  id v210;
  void *v211;
  id v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  void *v224;
  id v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  id v234;
  id v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  id v243;
  id v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  id v258;
  void *v259;
  uint64_t v260;
  NSObject *v261;
  os_log_type_t v262;
  uint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  id v269;
  void *v270;
  id v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  char v282;
  id v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  Swift::Int v288;
  unint64_t v289;
  unint64_t v290;
  NSString v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  NSObject *v296;
  os_log_type_t v297;
  uint64_t v298;
  unint64_t *v299;
  _QWORD *v300;
  os_log_type_t v301;
  id v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  Class v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  id v315;
  os_log_type_t v316;
  _QWORD *v317;
  id v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  char *v333;
  unint64_t *v334;
  char *v335;
  char *v336;
  _QWORD *v337;
  _QWORD *v338;
  int64_t v339;
  _QWORD *v340;
  char *v341;
  _QWORD *v342;
  Swift::Int v343;
  __int128 v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  int64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  __n128 v357;
  __int128 v358;
  uint64_t v359;
  int v360;
  unint64_t v361;
  uint64_t v362;
  id v363;
  unint64_t v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  id v375;
  unint64_t v376;
  unint64_t v377;
  _QWORD *v378;

  v360 = a4;
  v363 = a3;
  v354 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v5 = __chkstk_darwin(v354);
  v355 = (char *)&v332 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v362 = (uint64_t)&v332 - v7;
  v8 = type metadata accessor for Logger(0);
  v369 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v366 = (char *)&v332 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v341 = (char *)&v332 - v12;
  __chkstk_darwin(v11);
  v333 = (char *)&v332 - v13;
  v14 = sub_10001A630((uint64_t *)&unk_100839C80);
  v15 = __chkstk_darwin(v14);
  v346 = (char *)&v332 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v345 = (uint64_t)&v332 - v17;
  v18 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v18);
  v371 = (char *)&v332 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v374 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  v20 = *(_QWORD *)(v374 - 8);
  v21 = __chkstk_darwin(v374);
  v373 = (uint64_t)&v332 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v367 = (uint64_t)&v332 - v24;
  v25 = __chkstk_darwin(v23);
  v368 = (uint64_t)&v332 - v26;
  v27 = __chkstk_darwin(v25);
  v364 = (unint64_t)&v332 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v332 - v29;
  v350 = type metadata accessor for UUID(0);
  v351 = *(_QWORD *)(v350 - 8);
  v31 = __chkstk_darwin(v350);
  v336 = (char *)&v332 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (char *)&v332 - v33;
  v35 = *(_QWORD *)(a1 + 16);
  v36 = _swiftEmptyArrayStorage;
  v370 = v8;
  v356 = v20;
  v357.n128_u64[0] = a1;
  if (v35)
  {
    v376 = (unint64_t)_swiftEmptyArrayStorage;
    sub_1001C1BE4(0, v35, 0);
    v37 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v38 = *(_QWORD *)(v20 + 72);
    v39 = v35;
    v40 = v350;
    v41 = v351;
    do
    {
      sub_100188C54(v37, (uint64_t)v30);
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v34, v30, v40);
      sub_100188C98((uint64_t)v30);
      v36 = (_QWORD *)v376;
      if ((swift_isUniquelyReferenced_nonNull_native(v376) & 1) == 0)
      {
        sub_1001C1BE4(0, v36[2] + 1, 1);
        v36 = (_QWORD *)v376;
      }
      v43 = v36[2];
      v42 = v36[3];
      v44 = v351;
      if (v43 >= v42 >> 1)
      {
        sub_1001C1BE4(v42 > 1, v43 + 1, 1);
        v44 = v351;
        v36 = (_QWORD *)v376;
      }
      v36[2] = v43 + 1;
      v45 = (unint64_t)v36
          + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))
          + *(_QWORD *)(v44 + 72) * v43;
      v41 = v44;
      v40 = v350;
      (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v45, v34, v350);
      v376 = (unint64_t)v36;
      v37 += v38;
      --v39;
    }
    while (v39);
    v46 = v370;
  }
  else
  {
    v46 = v8;
  }
  v47 = sub_10011EF34((uint64_t)v36);
  swift_bridgeObjectRelease(v36);
  isa = (uint64_t)sub_100186260((uint64_t)v363, v47, 1);
  swift_bridgeObjectRelease(v47);
  v376 = (unint64_t)&_swiftEmptyDictionarySingleton;
  v49 = (char *)v364;
  if ((unint64_t)isa >> 62)
    goto LABEL_21;
  v50 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(isa);
  for (; v50; v50 = _CocoaArrayWrapper.endIndex.getter(v57))
  {
    v51 = 4;
    while (1)
    {
      v52 = (isa & 0xC000000000000001) != 0
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v51 - 4, isa)
          : *(id *)(isa + 8 * v51);
      v47 = (uint64_t)v52;
      v53 = v51 - 3;
      if (__OFADD__(v51 - 4, 1))
        break;
      v378 = v52;
      v54 = v347;
      sub_10017AE9C((uint64_t)&v376, (id *)&v378);
      v347 = v54;
      if (v54)
        goto LABEL_378;

      ++v51;
      if (v53 == v50)
      {
        swift_bridgeObjectRelease_n(isa, 2);
        v56 = (_QWORD *)v376;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_21:
    if (isa < 0)
      v57 = isa;
    else
      v57 = isa & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(isa);
  }
  swift_bridgeObjectRelease_n(isa, 2);
  v56 = &_swiftEmptyDictionarySingleton;
LABEL_26:
  v337 = v56;
  v378 = &_swiftEmptyDictionarySingleton;
  if (v35)
  {
    v372 = v35;
    v58 = *(unsigned __int8 *)(v356 + 80);
    v59 = (v58 + 32) & ~v58;
    v60 = v357.n128_u64[0] + v59;
    v61 = *(_QWORD *)(v356 + 72);
    v365 = v59;
    v361 = v61 + v59;
    v359 = v58 | 7;
    swift_bridgeObjectRetain(v357.n128_u64[0]);
    v62 = &_swiftEmptyDictionarySingleton;
    v358 = xmmword_1006A3C00;
    do
    {
      sub_100188C54(v60, (uint64_t)v49);
      v63 = (unint64_t *)&v49[*(int *)(v374 + 20)];
      v64 = v63[1];
      v376 = *v63;
      v377 = v64;
      swift_bridgeObjectRetain(v64);
      v65 = (uint64_t)v371;
      static Locale.current.getter(v66);
      v67 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v65, 0, 1, v67);
      v68 = sub_1000E525C();
      v69 = StringProtocol.foldedStringForWriting(locale:)(v65, &type metadata for String, v68);
      v47 = v70;
      sub_10000882C(v65, (uint64_t *)&unk_10083FBE0);
      swift_bridgeObjectRelease(v377);
      isa = sub_10001A6DC(v69, v47);
      v72 = v62[2];
      v73 = (v71 & 1) == 0;
      v74 = v72 + v73;
      if (__OFADD__(v72, v73))
        goto LABEL_362;
      v75 = v71;
      if (v62[3] < v74)
      {
        sub_1002D0320(v74, 1);
        v62 = v378;
        v76 = sub_10001A6DC(v69, v47);
        if ((v75 & 1) != (v77 & 1))
          goto LABEL_377;
        isa = v76;
      }
      if ((v75 & 1) != 0)
      {
        swift_bridgeObjectRelease(v47);
        v78 = v62[7];
        sub_100188C10((uint64_t)v49, v368);
        v79 = *(_QWORD *)(v78 + 8 * isa);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v79);
        *(_QWORD *)(v78 + 8 * isa) = v79;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v79 = sub_1002C931C(0, *(_QWORD *)(v79 + 16) + 1, 1, v79);
          *(_QWORD *)(v78 + 8 * isa) = v79;
        }
        v82 = *(_QWORD *)(v79 + 16);
        v81 = *(_QWORD *)(v79 + 24);
        v47 = v82 + 1;
        v46 = v370;
        if (v82 >= v81 >> 1)
        {
          v79 = sub_1002C931C(v81 > 1, v82 + 1, 1, v79);
          *(_QWORD *)(v78 + 8 * isa) = v79;
        }
        *(_QWORD *)(v79 + 16) = v47;
        sub_100188C10(v368, v79 + v365 + v82 * v61);
        v49 = (char *)v364;
      }
      else
      {
        v83 = sub_10001A630(&qword_10083DAF8);
        v84 = swift_allocObject(v83, v361, v359);
        *(_OWORD *)(v84 + 16) = v358;
        sub_100188C10((uint64_t)v49, v84 + v365);
        v62[((unint64_t)isa >> 6) + 8] |= 1 << isa;
        v85 = (uint64_t *)(v62[6] + 16 * isa);
        *v85 = v69;
        v85[1] = v47;
        *(_QWORD *)(v62[7] + 8 * isa) = v84;
        v86 = v62[2];
        v87 = __OFADD__(v86, 1);
        v88 = v86 + 1;
        if (v87)
          goto LABEL_370;
        v62[2] = v88;
        v46 = v370;
      }
      v60 += v61;
      --v372;
    }
    while (v372);
    v55 = swift_bridgeObjectRelease(v357.n128_u64[0]);
  }
  else
  {
    v62 = &_swiftEmptyDictionarySingleton;
  }
  v89 = 0;
  v342 = v62;
  v90 = v62[8];
  v338 = v62 + 8;
  v91 = 1 << *((_BYTE *)v62 + 32);
  if (v91 < 64)
    v92 = ~(-1 << v91);
  else
    v92 = -1;
  v93 = v92 & v90;
  v339 = (unint64_t)(v91 + 63) >> 6;
  v334 = &v376;
  v55.n128_u64[0] = 136315394;
  v358 = (__int128)v55;
  v335 = (char *)&type metadata for Any + 8;
  v55.n128_u64[0] = 136315138;
  v357 = v55;
  v344 = xmmword_1006A7330;
  v94 = v46;
  while (1)
  {
    if (v93)
    {
      v348 = (v93 - 1) & v93;
      v349 = v89;
      v96 = __clz(__rbit64(v93)) | (v89 << 6);
    }
    else
    {
      v87 = __OFADD__(v89, 1);
      v97 = v89 + 1;
      if (v87)
        goto LABEL_371;
      if (v97 >= v339)
        goto LABEL_349;
      v98 = v338[v97];
      if (!v98)
      {
        v99 = v97 + 1;
        if (v97 + 1 >= v339)
          goto LABEL_349;
        v98 = v338[v99];
        if (!v98)
        {
          v99 = v97 + 2;
          if (v97 + 2 >= v339)
            goto LABEL_349;
          v98 = v338[v99];
          if (!v98)
          {
            v99 = v97 + 3;
            if (v97 + 3 >= v339)
              goto LABEL_349;
            v98 = v338[v99];
            if (!v98)
            {
              while (1)
              {
                v97 = v99 + 1;
                if (__OFADD__(v99, 1))
                  goto LABEL_376;
                if (v97 >= v339)
                  break;
                v98 = v338[v97];
                ++v99;
                if (v98)
                  goto LABEL_62;
              }
LABEL_349:
              swift_bridgeObjectRelease(v337);
              swift_release(v342);
              return;
            }
          }
        }
        v97 = v99;
      }
LABEL_62:
      v348 = (v98 - 1) & v98;
      v349 = v97;
      v96 = __clz(__rbit64(v98)) + (v97 << 6);
    }
    v100 = (uint64_t *)(v342[6] + 16 * v96);
    v101 = *v100;
    v102 = v100[1];
    v47 = *(_QWORD *)(v342[7] + 8 * v96);
    v103 = qword_100836E00;
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v47);
    if (v103 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v104 = sub_10001AAA8(v94, (uint64_t)qword_10083D710);
    swift_bridgeObjectRetain_n(v102, 2);
    v105 = swift_bridgeObjectRetain_n(v47, 2);
    v371 = (char *)v104;
    v106 = Logger.logObject.getter(v105);
    v107 = static os_log_type_t.info.getter(v106);
    v108 = os_log_type_enabled(v106, (os_log_type_t)v107);
    v372 = v102;
    v365 = v101;
    v368 = v47;
    if (v108)
    {
      v109 = swift_slowAlloc(22, -1);
      v364 = swift_slowAlloc(64, -1);
      v376 = v364;
      *(_DWORD *)v109 = v358;
      swift_bridgeObjectRetain(v102);
      *(_QWORD *)(v109 + 4) = sub_10001A820(v101, v102, (uint64_t *)&v376);
      swift_bridgeObjectRelease_n(v102, 3);
      *(_WORD *)(v109 + 12) = 2082;
      v110 = *(_QWORD *)(v47 + 16);
      v111 = v47;
      if (v110)
      {
        LODWORD(v359) = v107;
        v361 = (unint64_t)v106;
        v112 = v356;
        v113 = v47 + ((*(unsigned __int8 *)(v356 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v356 + 80));
        swift_bridgeObjectRetain(v111);
        v114 = *(_QWORD *)(v112 + 72);
        v115 = _swiftEmptyArrayStorage;
        do
        {
          v116 = v367;
          v117 = sub_100188C54(v113, v367);
          v118 = UUID.uuidString.getter(v117);
          v120 = v119;
          sub_100188C98(v116);
          if ((swift_isUniquelyReferenced_nonNull_native(v115) & 1) == 0)
            v115 = sub_1002C8224(0, v115[2] + 1, 1, v115);
          v122 = v115[2];
          v121 = v115[3];
          if (v122 >= v121 >> 1)
            v115 = sub_1002C8224((_QWORD *)(v121 > 1), v122 + 1, 1, v115);
          v115[2] = v122 + 1;
          v123 = &v115[2 * v122];
          v123[4] = v118;
          v123[5] = v120;
          v113 += v114;
          --v110;
        }
        while (v110);
        v124 = v368;
        swift_bridgeObjectRelease(v368);
        v94 = v370;
        v102 = v372;
        v106 = v361;
        LOBYTE(v107) = v359;
      }
      else
      {
        v115 = _swiftEmptyArrayStorage;
        v124 = v47;
      }
      v125 = Array.description.getter(v115, &type metadata for String);
      v47 = v126;
      swift_bridgeObjectRelease(v115);
      *(_QWORD *)(v109 + 14) = sub_10001A820(v125, v47, (uint64_t *)&v376);
      swift_bridgeObjectRelease_n(v124, 2);
      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v107, "RDHashtagLabelUpdater processing hashtag tombstones {canonicalName: %s, deletedIDs: %{public}s}", (uint8_t *)v109, 0x16u);
      v127 = v364;
      swift_arrayDestroy(v364, 2, v335);
      swift_slowDealloc(v127, -1, -1);
      swift_slowDealloc(v109, -1, -1);

      v101 = v365;
    }
    else
    {

      swift_bridgeObjectRelease_n(v47, 2);
      swift_bridgeObjectRelease_n(v102, 2);
    }
    v128 = HIBYTE(v102) & 0xF;
    if ((v102 & 0x2000000000000000) == 0)
      v128 = v101 & 0xFFFFFFFFFFFFLL;
    if (v128)
      break;
    swift_bridgeObjectRelease(v368);
    swift_bridgeObjectRetain(v102);
    isa = Logger.logObject.getter(v173);
    v174 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled((os_log_t)isa, v174))
    {
      v47 = swift_slowAlloc(12, -1);
      v175 = swift_slowAlloc(32, -1);
      v376 = v175;
      *(_DWORD *)v47 = v357.n128_u32[0];
      swift_bridgeObjectRetain(v102);
      *(_QWORD *)(v47 + 4) = sub_10001A820(v365, v102, (uint64_t *)&v376);
      swift_bridgeObjectRelease_n(v102, 3);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)isa, v174, "RDHashtagLabelUpdater: Impossible to get here, concealed hashtag[%s] with nil name should have been filtered", (uint8_t *)v47, 0xCu);
      swift_arrayDestroy(v175, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v175, -1, -1);
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v102, 2);
    }
LABEL_49:
    v89 = v349;
    v93 = v348;
  }
  v129 = sub_100185A8C((uint64_t)v363, v101, v102);
  isa = v129;
  v376 = v129;
  if ((unint64_t)v129 >> 62)
  {
    if (v129 < 0)
      v176 = v129;
    else
      v176 = v129 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v129);
    v130 = _CocoaArrayWrapper.endIndex.getter(v176);
    swift_bridgeObjectRelease(isa);
  }
  else
  {
    v130 = *(_QWORD *)((v129 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v130)
  {
    swift_bridgeObjectRelease(v368);
    v95 = v102;
LABEL_48:
    swift_bridgeObjectRelease(v95);
    swift_bridgeObjectRelease(isa);
    goto LABEL_49;
  }
  v131 = v337;
  if (!v337[2])
    goto LABEL_175;
  swift_bridgeObjectRetain(v102);
  v132 = sub_10001A6DC(v365, v102);
  if ((v133 & 1) == 0)
  {
    swift_bridgeObjectRelease(v102);
    goto LABEL_175;
  }
  v134 = *(_QWORD *)(v131[7] + 8 * v132);
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRelease(v102);
  v135 = &_swiftEmptyDictionarySingleton;
  v378 = &_swiftEmptyDictionarySingleton;
  if (!((unint64_t)v134 >> 62))
  {
    v136 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v136)
      goto LABEL_87;
    goto LABEL_128;
  }
  if (v134 < 0)
    v177 = v134;
  else
    v177 = v134 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v134);
  v136 = _CocoaArrayWrapper.endIndex.getter(v177);
  swift_bridgeObjectRelease(v134);
  if (v136)
  {
LABEL_87:
    v361 = v134 & 0xC000000000000001;
    v137 = 4;
    v359 = v136;
    v353 = v134;
    while (1)
    {
      isa = v137 - 4;
      if (v361)
        v144 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v137 - 4, v134);
      else
        v144 = *(id *)(v134 + 8 * v137);
      v47 = (uint64_t)v144;
      v145 = v137 - 3;
      if (__OFADD__(isa, 1))
        goto LABEL_356;
      v146 = objc_msgSend(v144, "account");
      v364 = v47;
      if (v146)
      {
        v147 = v146;
        v148 = objc_msgSend(v146, "identifier");

        if (v148)
        {
          v149 = v346;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v148);

          v150 = 0;
        }
        else
        {
          v150 = 1;
          v149 = v346;
        }
        v151 = v351;
        v152 = v350;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v351 + 56))(v149, v150, 1, v350);
        v153 = (uint64_t)v149;
        v154 = v345;
        sub_1000A5CA8(v153, v345, (uint64_t *)&unk_100839C80);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v154, 1, v152))
        {
          v155 = v336;
          (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(v336, v154, v152);
          v156 = sub_10000882C(v154, (uint64_t *)&unk_100839C80);
          v47 = UUID.uuidString.getter(v156);
          isa = v157;
          v158 = v155;
          v134 = v353;
          (*(void (**)(char *, uint64_t))(v151 + 8))(v158, v152);
          goto LABEL_104;
        }
        sub_10000882C(v154, (uint64_t *)&unk_100839C80);
      }
      v47 = 0;
      isa = 0xE000000000000000;
LABEL_104:
      v160 = sub_10001A6DC(v47, isa);
      v161 = v135[2];
      v162 = (v159 & 1) == 0;
      v163 = v161 + v162;
      if (__OFADD__(v161, v162))
        goto LABEL_357;
      v164 = v159;
      if (v135[3] < v163)
      {
        sub_1002CF66C(v163, 1);
        v135 = v378;
        v165 = sub_10001A6DC(v47, isa);
        if ((v164 & 1) != (v166 & 1))
          goto LABEL_377;
        v160 = v165;
      }
      if ((v164 & 1) != 0)
      {
        swift_bridgeObjectRelease(isa);
        v138 = (_QWORD *)(v135[7] + 8 * v160);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v139);
        v141 = *(_QWORD *)((*v138 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v140 = *(_QWORD *)((*v138 & 0xFFFFFFFFFFFFFF8) + 0x18);
        v142 = v359;
        if (v141 >= v140 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v140 > 1);
        v143 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v141, v364);
        specialized Array._endMutation()(v143);
      }
      else
      {
        v167 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v168 = swift_allocObject(v167, 40, 7);
        *(_OWORD *)(v168 + 16) = v344;
        *(_QWORD *)(v168 + 32) = v364;
        v375 = (id)v168;
        specialized Array._endMutation()(v168);
        v169 = v375;
        v135[(v160 >> 6) + 8] |= 1 << v160;
        v170 = (uint64_t *)(v135[6] + 16 * v160);
        *v170 = v47;
        v170[1] = isa;
        *(_QWORD *)(v135[7] + 8 * v160) = v169;
        v171 = v135[2];
        v87 = __OFADD__(v171, 1);
        v172 = v171 + 1;
        if (v87)
          goto LABEL_359;
        v135[2] = v172;
        v142 = v359;
      }
      ++v137;
      if (v145 == v142)
      {
        swift_bridgeObjectRelease(v134);
        isa = v376;
        goto LABEL_129;
      }
    }
  }
LABEL_128:
  swift_bridgeObjectRelease(v134);
LABEL_129:
  swift_bridgeObjectRetain(isa);
  v179 = sub_10017788C(v178);
  swift_bridgeObjectRelease(isa);
  v180 = 0;
  v47 = (uint64_t)(v135 + 8);
  v181 = 1 << *((_BYTE *)v135 + 32);
  if (v181 < 64)
    v182 = ~(-1 << v181);
  else
    v182 = -1;
  v183 = v182 & v135[8];
  v184 = (unint64_t)(v181 + 63) >> 6;
  v361 = v179;
  v359 = (uint64_t)(v135 + 8);
  v353 = v184;
  while (1)
  {
    while (v183)
    {
      v185 = __clz(__rbit64(v183));
      v183 &= v183 - 1;
      v186 = v185 | (v180 << 6);
      if (*(_QWORD *)(v179 + 16))
      {
LABEL_148:
        v189 = (uint64_t *)(v135[6] + 16 * v186);
        v190 = *(_QWORD *)(v135[7] + 8 * v186);
        v191 = *v189;
        isa = v189[1];
        swift_bridgeObjectRetain(isa);
        swift_bridgeObjectRetain(v190);
        v192 = sub_10001A6DC(v191, isa);
        if ((v193 & 1) != 0)
        {
          v194 = *(id *)(*(_QWORD *)(v179 + 56) + 8 * v192);
          swift_bridgeObjectRelease(isa);
          v364 = (unint64_t)v194;
          if ((unint64_t)v190 >> 62)
          {
            if (v190 < 0)
              v205 = v190;
            else
              v205 = v190 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v190);
            v195 = _CocoaArrayWrapper.endIndex.getter(v205);
            swift_bridgeObjectRelease(v190);
          }
          else
          {
            v195 = *(_QWORD *)((v190 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          v47 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
          isa = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
          v378 = (_QWORD *)Set.init(minimumCapacity:)(v195, v47, isa);
          if ((unint64_t)v190 >> 62)
          {
            if (v190 < 0)
              v197 = v190;
            else
              v197 = v190 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v190);
            v196 = _CocoaArrayWrapper.endIndex.getter(v197);
            swift_bridgeObjectRelease(v190);
            if (!v196)
              goto LABEL_169;
          }
          else
          {
            v196 = *(_QWORD *)((v190 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v196)
              goto LABEL_169;
          }
          if (v196 < 1)
            goto LABEL_360;
          if ((v190 & 0xC000000000000001) != 0)
          {
            for (i = 0; i != v196; ++i)
            {
              v199 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v190);
              sub_1002DBDD4((Swift::Int *)&v375, v199);

            }
          }
          else
          {
            for (j = 0; j != v196; ++j)
            {
              v201 = *(void **)(v190 + 8 * j + 32);
              sub_1002DBDD4((Swift::Int *)&v375, v201);

            }
          }
LABEL_169:
          swift_bridgeObjectRelease(v190);
          v202 = v378;
          isa = (uint64_t)Set._bridgeToObjectiveC()().super.isa;
          *(_QWORD *)&v203 = swift_bridgeObjectRelease(v202).n128_u64[0];
          v204 = (id)v364;
          objc_msgSend((id)v364, "removeHashtags:", isa, v203);

          v179 = v361;
          v47 = v359;
          v184 = v353;
        }
        else
        {
          swift_bridgeObjectRelease(v190);
          swift_bridgeObjectRelease(isa);
        }
      }
    }
    v87 = __OFADD__(v180++, 1);
    if (v87)
      goto LABEL_358;
    if (v180 >= v184)
      goto LABEL_174;
    v187 = *(_QWORD *)(v47 + 8 * v180);
    if (!v187)
      break;
LABEL_147:
    v183 = (v187 - 1) & v187;
    v186 = __clz(__rbit64(v187)) + (v180 << 6);
    if (*(_QWORD *)(v179 + 16))
      goto LABEL_148;
  }
  v188 = v180 + 1;
  if (v180 + 1 >= v184)
    goto LABEL_174;
  v187 = *(_QWORD *)(v47 + 8 * v188);
  if (v187)
    goto LABEL_146;
  v188 = v180 + 2;
  if (v180 + 2 >= v184)
    goto LABEL_174;
  v187 = *(_QWORD *)(v47 + 8 * v188);
  if (v187)
    goto LABEL_146;
  v188 = v180 + 3;
  if (v180 + 3 >= v184)
    goto LABEL_174;
  v187 = *(_QWORD *)(v47 + 8 * v188);
  if (v187)
  {
LABEL_146:
    v180 = v188;
    goto LABEL_147;
  }
  while (1)
  {
    v180 = v188 + 1;
    if (__OFADD__(v188, 1))
      goto LABEL_363;
    if (v180 >= v184)
      break;
    v187 = *(_QWORD *)(v47 + 8 * v180);
    ++v188;
    if (v187)
      goto LABEL_147;
  }
LABEL_174:
  swift_bridgeObjectRelease(v179);
  swift_release(v135);
LABEL_175:
  v206 = v376;
  v378 = _swiftEmptyArrayStorage;
  if (v376 >> 62)
  {
    if ((v376 & 0x8000000000000000) != 0)
      v220 = v376;
    else
      v220 = v376 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v376);
    v47 = _CocoaArrayWrapper.endIndex.getter(v220);
    if (!v47)
      goto LABEL_198;
LABEL_177:
    if (v47 < 1)
      goto LABEL_373;
    for (k = 0; k != v47; ++k)
    {
      if ((v206 & 0xC000000000000001) != 0)
        v210 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(k, v206);
      else
        v210 = *(id *)(v206 + 8 * k + 32);
      v211 = v210;
      v212 = objc_msgSend(v210, "hashtags");
      if (!v212)
        goto LABEL_179;
      v213 = v212;
      v214 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
      v215 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
      v216 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v213, v214, v215);

      if ((v216 & 0xC000000000000001) != 0)
      {
        v217 = v216 < 0 ? v216 : v216 & 0xFFFFFFFFFFFFFF8;
        v218 = __CocoaSet.count.getter(v217);
      }
      else
      {
        v218 = *(_QWORD *)(v216 + 16);
      }
      swift_bridgeObjectRelease(v216);
      if (v218)
      {

      }
      else
      {
LABEL_179:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v212);
        v208 = v378[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v208);
        v209 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v208, v211);
        specialized ContiguousArray._endMutation()(v209);
      }
    }
    swift_bridgeObjectRelease(v206);
    v219 = v378;
    v206 = v376;
  }
  else
  {
    v47 = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v376);
    if (v47)
      goto LABEL_177;
LABEL_198:
    swift_bridgeObjectRelease(v206);
    v219 = _swiftEmptyArrayStorage;
  }
  v364 = (unint64_t)v219;
  if ((unint64_t)v206 >> 62)
  {
    if (v206 < 0)
      v252 = v206;
    else
      v252 = v206 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v206);
    isa = _CocoaArrayWrapper.endIndex.getter(v252);
    if (isa)
      goto LABEL_201;
LABEL_268:
    swift_bridgeObjectRelease(v206);
LABEL_269:
    if ((unint64_t)v206 >> 62)
    {
      if (v206 < 0)
        v328 = v206;
      else
        v328 = v206 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v206);
      v221 = _CocoaArrayWrapper.endIndex.getter(v328);
      swift_bridgeObjectRelease(v206);
      v206 = v376;
      if (!(v376 >> 62))
      {
LABEL_272:
        isa = *(_QWORD *)((v206 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_273:
        v94 = v370;
        v253 = v372;
        if (isa < v221)
          goto LABEL_372;
        sub_1001CF3D0(v221, isa);
        isa = v364;
        if ((v364 & 0x8000000000000000) != 0 || (v364 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain(v364);
          v254 = _CocoaArrayWrapper.endIndex.getter(v326);
          swift_release(isa);
        }
        else
        {
          v254 = *(_QWORD *)(v364 + 16);
        }
        v255 = v369;
        v256 = v333;
        if (v254)
        {
          if (v254 < 1)
            goto LABEL_374;
          v257 = 0;
          v361 = isa & 0xC000000000000001;
          do
          {
            if (v361)
              v258 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v257, isa);
            else
              v258 = *(id *)(isa + 8 * v257 + 32);
            v259 = v258;
            if ((v360 & 1) != 0)
              objc_msgSend(v258, "setWasDeletedDueToUserInitiatedChanges:", 1);
            objc_msgSend(v363, "deleteObject:", v259);
            (*(void (**)(char *, char *, uint64_t))(v255 + 16))(v256, v371, v94);
            v260 = swift_bridgeObjectRetain_n(v253, 2);
            v261 = Logger.logObject.getter(v260);
            v262 = static os_log_type_t.info.getter(v261);
            v47 = v262;
            if (os_log_type_enabled(v261, v262))
            {
              v263 = swift_slowAlloc(12, -1);
              v264 = (_QWORD *)swift_slowAlloc(32, -1);
              v378 = v264;
              *(_DWORD *)v263 = v357.n128_u32[0];
              swift_bridgeObjectRetain(v372);
              *(_QWORD *)(v263 + 4) = sub_10001A820(v365, v372, (uint64_t *)&v378);
              swift_bridgeObjectRelease_n(v372, 3);
              _os_log_impl((void *)&_mh_execute_header, v261, (os_log_type_t)v47, "RDHashtagLabelUpdater deleted hashtag label {canonicalName: %s}", (uint8_t *)v263, 0xCu);
              swift_arrayDestroy(v264, 1, (char *)&type metadata for Any + 8);
              v265 = v264;
              v253 = v372;
              v47 = v370;
              swift_slowDealloc(v265, -1, -1);
              v266 = v263;
              v94 = v47;
              swift_slowDealloc(v266, -1, -1);

              (*(void (**)(char *, uint64_t))(v255 + 8))(v256, v47);
            }
            else
            {

              swift_bridgeObjectRelease_n(v253, 2);
              (*(void (**)(char *, uint64_t))(v255 + 8))(v256, v94);
            }
            ++v257;
            isa = v364;
          }
          while (v254 != v257);
        }
        swift_release(isa);
        isa = v376;
        if (!(v376 >> 62))
        {
          v267 = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v376);
          if (v267)
            goto LABEL_291;
          goto LABEL_336;
        }
        if ((v376 & 0x8000000000000000) != 0)
          v327 = v376;
        else
          v327 = v376 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v376);
        v267 = _CocoaArrayWrapper.endIndex.getter(v327);
        if (!v267)
        {
LABEL_336:
          swift_bridgeObjectRelease(v253);
          swift_bridgeObjectRelease(v368);
          v95 = isa;
          goto LABEL_48;
        }
LABEL_291:
        v268 = 0;
        v364 = isa & 0xC000000000000001;
        v353 = isa & 0xFFFFFFFFFFFFFF8;
        v359 = isa;
        v352 = isa + 32;
        v361 = v267;
        while (1)
        {
          if (v364)
          {
            v269 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v268, v359);
          }
          else
          {
            if (v268 >= *(_QWORD *)(v353 + 16))
              goto LABEL_351;
            v269 = *(id *)(v352 + 8 * v268);
          }
          v270 = v269;
          v87 = __OFADD__(v268++, 1);
          if (v87)
          {
            __break(1u);
LABEL_351:
            __break(1u);
LABEL_352:
            __break(1u);
LABEL_353:
            __break(1u);
            goto LABEL_354;
          }
          v271 = objc_msgSend(v269, "name");
          if (v271)
          {
            v272 = v271;
            v273 = static String._unconditionallyBridgeFromObjectiveC(_:)(v271);
            v275 = v274;

            v276 = *(_QWORD *)(v368 + 16);
            if (v276)
            {
              v47 = v368
                  + ((*(unsigned __int8 *)(v356 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v356 + 80));
              v277 = *(_QWORD *)(v356 + 72);
              swift_bridgeObjectRetain(v368);
              while (1)
              {
                v278 = v373;
                sub_100188C54(v47, v373);
                v279 = (_QWORD *)(v278 + *(int *)(v374 + 20));
                v280 = v279[1];
                if (*v279 == v273 && v280 == v275)
                  break;
                v282 = _stringCompareWithSmolCheck(_:_:expecting:)(*v279, v280, v273, v275, 0);
                sub_100188C98(v278);
                if ((v282 & 1) != 0)
                  goto LABEL_310;
                v47 += v277;
                if (!--v276)
                {
                  swift_bridgeObjectRelease(v275);
                  swift_bridgeObjectRelease(v368);
                  v253 = v372;
LABEL_319:
                  v267 = v361;
                  goto LABEL_320;
                }
              }
              sub_100188C98(v278);
LABEL_310:
              swift_bridgeObjectRelease(v275);
              v283 = objc_msgSend(v270, "hashtags", swift_bridgeObjectRelease(v368).n128_f64[0]);
              v253 = v372;
              if (v283)
              {
                v284 = v283;
                v47 = (uint64_t)off_1007D66C8;
                v285 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
                v286 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
                v287 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v284, v285, v286);

                v288 = sub_10017B1E4(v287);
                v290 = v289;
                swift_bridgeObjectRelease(v287);
                if (v290)
                {
                  v343 = v288;
                  v291 = String._bridgeToObjectiveC()();
                  objc_msgSend(v270, "setName:", v291);

                  v293 = v369;
                  v292 = v370;
                  v294 = v341;
                  (*(void (**)(char *, char *, uint64_t))(v369 + 16))(v341, v371, v370);
                  swift_bridgeObjectRetain_n(v253, 2);
                  swift_bridgeObjectRetain(v290);
                  v296 = Logger.logObject.getter(v295);
                  v297 = static os_log_type_t.info.getter(v296);
                  if (os_log_type_enabled(v296, v297))
                  {
                    v298 = swift_slowAlloc(22, -1);
                    v340 = (_QWORD *)swift_slowAlloc(64, -1);
                    v378 = v340;
                    *(_DWORD *)v298 = v358;
                    swift_bridgeObjectRetain(v372);
                    v375 = (id)sub_10001A820(v365, v372, (uint64_t *)&v378);
                    v299 = v334;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v375, v334);
                    swift_bridgeObjectRelease_n(v372, 3);
                    *(_WORD *)(v298 + 12) = 2080;
                    swift_bridgeObjectRetain(v290);
                    v375 = (id)sub_10001A820(v343, v290, (uint64_t *)&v378);
                    v253 = v372;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v375, v299);
                    swift_bridgeObjectRelease_n(v290, 3);
                    _os_log_impl((void *)&_mh_execute_header, v296, v297, "RDHashtagLabelUpdater updated hashtag label name to next occurrence {canonicalName: %s, nextOccurrenceHashtagName: %s}", (uint8_t *)v298, 0x16u);
                    v300 = v340;
                    swift_arrayDestroy(v340, 2, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v300, -1, -1);
                    swift_slowDealloc(v298, -1, -1);

                    (*(void (**)(char *, uint64_t))(v369 + 8))(v294, v370);
                  }
                  else
                  {

                    swift_bridgeObjectRelease_n(v290, 2);
                    swift_bridgeObjectRelease_n(v253, 2);
                    (*(void (**)(char *, uint64_t))(v293 + 8))(v294, v292);
                  }
                  goto LABEL_319;
                }
              }
              isa = Logger.logObject.getter(v283);
              v301 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled((os_log_t)isa, v301))
              {
                v47 = swift_slowAlloc(2, -1);
                *(_WORD *)v47 = 0;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)isa, v301, "RDHashtagLabelUpdater: Cannot find a non-nil next occurrence hashtag name. We have non empty hashtagLabel.hashtags but we can't find one with non-nil name.", (uint8_t *)v47, 2u);
                swift_slowDealloc(v47, -1, -1);

              }
              else
              {

              }
              v94 = v370;
              goto LABEL_329;
            }
            swift_bridgeObjectRelease(v275);
          }
LABEL_320:
          v302 = objc_msgSend(v270, "hashtags");
          if (v302)
          {
            v303 = v302;
            v304 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
            v305 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
            v306 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v303, v304, v305);

            v307 = v362;
            sub_10017B45C(v306, v362);
            swift_bridgeObjectRelease(v306);
            v308 = type metadata accessor for Date(0);
            v309 = *(_QWORD *)(v308 - 8);
            v310 = 0;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v309 + 48))(v307, 1, v308) != 1)
            {
              v311 = v362;
              v310 = Date._bridgeToObjectiveC()().super.isa;
              (*(void (**)(uint64_t, uint64_t))(v309 + 8))(v311, v308);
            }
          }
          else
          {
            v312 = type metadata accessor for Date(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v312 - 8) + 56))(v362, 1, 1, v312);
            v310 = 0;
          }
          objc_msgSend(v270, "setRecencyDate:", v310);

          isa = v369;
          v313 = v370;
          v314 = v366;
          (*(void (**)(char *, char *, uint64_t))(v369 + 16))(v366, v371, v370);
          swift_bridgeObjectRetain_n(v253, 2);
          v315 = v270;
          v47 = Logger.logObject.getter(v315);
          v316 = static os_log_type_t.info.getter(v47);
          if (os_log_type_enabled((os_log_t)v47, v316))
          {
            isa = swift_slowAlloc(22, -1);
            v317 = (_QWORD *)swift_slowAlloc(64, -1);
            v378 = v317;
            *(_DWORD *)isa = v358;
            swift_bridgeObjectRetain(v253);
            *(_QWORD *)(isa + 4) = sub_10001A820(v365, v253, (uint64_t *)&v378);
            swift_bridgeObjectRelease_n(v253, 3);
            *(_WORD *)(isa + 12) = 2080;
            v318 = objc_msgSend(v315, "recencyDate");
            if (v318)
            {
              v319 = v318;
              v320 = (uint64_t)v355;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v318);

              v321 = type metadata accessor for Date(0);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v321 - 8) + 56))(v320, 0, 1, v321);
            }
            else
            {
              v322 = type metadata accessor for Date(0);
              v320 = (uint64_t)v355;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v322 - 8) + 56))(v355, 1, 1, v322);
            }
            v323 = Optional.descriptionOrNil.getter(v354);
            v325 = v324;
            sub_10000882C(v320, (uint64_t *)&unk_1008380D0);
            *(_QWORD *)(isa + 14) = sub_10001A820(v323, v325, (uint64_t *)&v378);

            swift_bridgeObjectRelease(v325);
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v47, v316, "RDHashtagLabelUpdater updated hashtag label recency date {canonicalName: %s, new-recencyDate: %s}", (uint8_t *)isa, 0x16u);
            swift_arrayDestroy(v317, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v317, -1, -1);
            swift_slowDealloc(isa, -1, -1);

            v94 = v370;
            (*(void (**)(char *, uint64_t))(v369 + 8))(v366, v370);
            v253 = v372;
LABEL_329:
            v267 = v361;
            if (v268 == v361)
            {
LABEL_330:
              swift_bridgeObjectRelease(v253);
              swift_bridgeObjectRelease(v368);
              v95 = v376;
              isa = v359;
              goto LABEL_48;
            }
          }
          else
          {

            swift_bridgeObjectRelease_n(v253, 2);
            (*(void (**)(char *, uint64_t))(isa + 8))(v314, v313);
            v94 = v313;
            if (v268 == v267)
              goto LABEL_330;
          }
        }
      }
    }
    else
    {
      v221 = *(_QWORD *)((v206 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_271:
      if (!((unint64_t)v206 >> 62))
        goto LABEL_272;
    }
    if (v206 < 0)
      v329 = v206;
    else
      v329 = v206 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v206);
    isa = _CocoaArrayWrapper.endIndex.getter(v329);
    swift_bridgeObjectRelease(v206);
    goto LABEL_273;
  }
  isa = *(_QWORD *)((v206 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v206);
  if (!isa)
    goto LABEL_268;
LABEL_201:
  v221 = 0;
  v361 = v206 & 0xC000000000000001;
  v222 = 5;
  while (1)
  {
    v223 = v361
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v221, v206)
         : *(id *)(v206 + 8 * v221 + 32);
    v224 = v223;
    v225 = objc_msgSend(v223, "hashtags");
    if (!v225)
      break;
    v226 = v225;
    v227 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v228 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
    v47 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v226, v227, v228);

    if ((v47 & 0xC000000000000001) != 0)
    {
      if (v47 < 0)
        v229 = v47;
      else
        v229 = v47 & 0xFFFFFFFFFFFFFF8;
      v230 = __CocoaSet.count.getter(v229);
    }
    else
    {
      v230 = *(_QWORD *)(v47 + 16);
    }

    swift_bridgeObjectRelease(v47);
    if (!v230)
    {
      swift_bridgeObjectRelease(v206);
      v232 = v221 + 1;
      if (__OFADD__(v221, 1))
        goto LABEL_375;
      goto LABEL_220;
    }
    v231 = v221 + 1;
    if (__OFADD__(v221, 1))
      goto LABEL_352;
    ++v221;
    ++v222;
    if (v231 == isa)
    {
      swift_bridgeObjectRelease(v206);
      v206 = v376;
      goto LABEL_269;
    }
  }
  swift_bridgeObjectRelease(v206);

  v232 = v221 + 1;
  if (__OFADD__(v221, 1))
    goto LABEL_375;
LABEL_220:
  v206 = v376;
  if (v376 >> 62)
  {
    if ((v376 & 0x8000000000000000) != 0)
      v330 = v376;
    else
      v330 = v376 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v376);
    isa = _CocoaArrayWrapper.endIndex.getter(v330);
    swift_bridgeObjectRelease(v206);
  }
  else
  {
    isa = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  while (2)
  {
    if (v232 == isa)
      goto LABEL_271;
    v233 = v222 - 4;
    if ((v206 & 0xC000000000000001) != 0)
    {
      v234 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v222 - 4, v206);
      goto LABEL_227;
    }
    if ((v233 & 0x8000000000000000) != 0)
      goto LABEL_353;
    if (v233 < *(_QWORD *)((v206 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v234 = *(id *)(v206 + 8 * v222);
LABEL_227:
      isa = (uint64_t)v234;
      v235 = objc_msgSend(v234, "hashtags");
      if (v235)
      {
        v236 = v235;
        v237 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
        v238 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
        v239 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v236, v237, v238);

        if ((v239 & 0xC000000000000001) != 0)
        {
          if (v239 < 0)
            v240 = v239;
          else
            v240 = v239 & 0xFFFFFFFFFFFFFF8;
          v47 = __CocoaSet.count.getter(v240);
        }
        else
        {
          v47 = *(_QWORD *)(v239 + 16);
        }

        swift_bridgeObjectRelease(v239);
        if (v47)
        {
          if (v233 != v221)
          {
            v241 = v376;
            if ((v376 & 0xC000000000000001) != 0)
            {
              isa = specialized _ArrayBuffer._getElementSlowPath(_:)(v221, v376);
              v244 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v222 - 4, v241);
            }
            else
            {
              if (v221 < 0)
                goto LABEL_364;
              v242 = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v221 >= v242)
                goto LABEL_365;
              v243 = *(id *)(v376 + 8 * v221 + 32);
              if ((v233 & 0x8000000000000000) != 0)
                goto LABEL_366;
              if (v233 >= v242)
                goto LABEL_368;
              isa = (uint64_t)v243;
              v244 = *(id *)(v241 + 8 * v222);
            }
            v47 = (uint64_t)v244;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v241)
              || v241 < 0
              || (v241 & 0x4000000000000000) != 0)
            {
              v241 = sub_1001CEBEC(v241);
              v376 = v241;
            }
            v245 = *(void **)((v241 & 0xFFFFFFFFFFFFFF8) + 8 * v221 + 0x20);
            *(_QWORD *)((v241 & 0xFFFFFFFFFFFFFF8) + 8 * v221 + 0x20) = v47;

            specialized Array._endMutation()(v246);
            v247 = v376;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v376)
              || v247 < 0
              || (v247 & 0x4000000000000000) != 0)
            {
              v247 = sub_1001CEBEC(v247);
              v376 = v247;
            }
            if ((v233 & 0x8000000000000000) != 0)
              goto LABEL_367;
            v248 = v247 & 0xFFFFFFFFFFFFFF8;
            if (v233 >= *(_QWORD *)((v247 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_369;
            v249 = *(void **)(v248 + 8 * v222);
            *(_QWORD *)(v248 + 8 * v222) = isa;

            specialized Array._endMutation()(v250);
          }
          v87 = __OFADD__(v221++, 1);
          if (v87)
            goto LABEL_361;
        }
      }
      else
      {

      }
      v232 = v222 - 3;
      if (__OFADD__(v233, 1))
        goto LABEL_355;
      v206 = v376;
      if (v376 >> 62)
      {
        if ((v376 & 0x8000000000000000) != 0)
          v251 = v376;
        else
          v251 = v376 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v376);
        isa = _CocoaArrayWrapper.endIndex.getter(v251);
        swift_bridgeObjectRelease(v206);
        ++v222;
      }
      else
      {
        isa = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFF8) + 0x10);
        ++v222;
      }
      continue;
    }
    break;
  }
LABEL_354:
  __break(1u);
LABEL_355:
  __break(1u);
LABEL_356:
  __break(1u);
LABEL_357:
  __break(1u);
LABEL_358:
  __break(1u);
LABEL_359:
  __break(1u);
LABEL_360:
  __break(1u);
LABEL_361:
  __break(1u);
LABEL_362:
  __break(1u);
LABEL_363:
  __break(1u);
LABEL_364:
  __break(1u);
LABEL_365:
  __break(1u);
LABEL_366:
  __break(1u);
LABEL_367:
  __break(1u);
LABEL_368:
  __break(1u);
LABEL_369:
  __break(1u);
LABEL_370:
  __break(1u);
LABEL_371:
  __break(1u);
LABEL_372:
  __break(1u);
LABEL_373:
  __break(1u);
LABEL_374:
  __break(1u);
LABEL_375:
  __break(1u);
LABEL_376:
  __break(1u);
LABEL_377:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_378:
  v331 = v376;
  swift_bridgeObjectRelease(isa);

  swift_bridgeObjectRelease(v331);
  __break(1u);
}

void sub_10017AE9C(uint64_t a1, id *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a2;
  v7 = objc_msgSend(*a2, "name");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    v13 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v13 = v9 & 0xFFFFFFFFFFFFLL;
    if (v13)
    {
      v33 = v9;
      v34 = v11;
      static Locale.current.getter(v12);
      v14 = type metadata accessor for Locale(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 0, 1, v14);
      v15 = sub_1000E525C();
      v16 = StringProtocol.foldedStringForWriting(locale:)(v5, &type metadata for String, v15);
      v18 = v17;
      sub_10000882C((uint64_t)v5, (uint64_t *)&unk_10083FBE0);
      swift_bridgeObjectRelease(v11);
      v35 = (uint64_t)v6;
      v33 = v16;
      v34 = v18;
      v19 = sub_10001A630(&qword_10083DB00);
      v20 = sub_1000A5F84(&qword_10083DB08, &qword_10083DAE0, (uint64_t)&protocol conformance descriptor for [A]);
      Dictionary<>.append(_:toCollectionUnderKey:)(&v35, &v33, v19, v20);
      swift_bridgeObjectRelease(v18);
      return;
    }
    swift_bridgeObjectRelease(v11);
  }
  if (qword_100836E00 != -1)
    swift_once(&qword_100836E00, sub_10016F110);
  v21 = type metadata accessor for Logger(0);
  sub_10001AAA8(v21, (uint64_t)qword_10083D710);
  v22 = v6;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v33 = v26;
    *(_DWORD *)v25 = 136446210;
    v27 = objc_msgSend(v22, "remObjectID", v33);
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(v27, "description");

      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

    }
    else
    {
      v32 = 0xE300000000000000;
      v30 = 7104878;
    }
    v35 = sub_10001A820(v30, v32, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);

    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "RDHashtagLabelUpdater: Unexpected hashtag with nil or empty name %{public}s", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

  }
}

Swift::Int sub_10017B1E4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  id v8;
  id v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  id v25[2];
  _QWORD *v26;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v1 = &_swiftEmptySetSingleton;
    v26 = &_swiftEmptySetSingleton;
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = __CocoaSet.Iterator.next()(v3);
    if (v4)
    {
      v5 = v4;
      v6 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
      do
      {
        v24 = v5;
        swift_dynamicCast(v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v6, 7);
        v8 = objc_msgSend(v25[0], "name");
        if (v8)
        {

          v9 = v25[0];
          v10 = v26;
          v11 = v26[2];
          if (v26[3] <= v11)
          {
            sub_1002DEAC0(v11 + 1);
            v10 = v26;
          }
          result = NSObject._rawHashValue(seed:)(v10[5]);
          v12 = v10 + 7;
          v13 = -1 << *((_BYTE *)v10 + 32);
          v14 = result & ~v13;
          v15 = v14 >> 6;
          if (((-1 << v14) & ~v10[(v14 >> 6) + 7]) != 0)
          {
            v16 = __clz(__rbit64((-1 << v14) & ~v10[(v14 >> 6) + 7])) | v14 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v17 = 0;
            v18 = (unint64_t)(63 - v13) >> 6;
            do
            {
              if (++v15 == v18 && (v17 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v19 = v15 == v18;
              if (v15 == v18)
                v15 = 0;
              v17 |= v19;
              v20 = v12[v15];
            }
            while (v20 == -1);
            v16 = __clz(__rbit64(~v20)) + (v15 << 6);
          }
          *(_QWORD *)((char *)v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
          *(_QWORD *)(v10[6] + 8 * v16) = v9;
          ++v10[2];
        }
        else
        {

        }
        v5 = __CocoaSet.Iterator.next()(result);
      }
      while (v5);
      v1 = v26;
    }
    swift_release(v3);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v1 = (void *)sub_1001840B0(v21);
  }
  v22 = sub_10017D2B0((uint64_t)v1);
  swift_release(v1);
  if (v22)
  {
    v23 = objc_msgSend(v22, "name");

    if (v23)
    {
      v22 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v23);

    }
    else
    {
      return 0;
    }
  }
  return (Swift::Int)v22;
}

Swift::Int sub_10017B45C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  id v14;
  id v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37[2];
  _QWORD *v38;

  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    v7 = &_swiftEmptySetSingleton;
    v38 = &_swiftEmptySetSingleton;
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = __CocoaSet.makeIterator()(v8);
    v10 = __CocoaSet.Iterator.next()(v9);
    if (v10)
    {
      v11 = v10;
      v34 = v6;
      v35 = a2;
      v12 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
      do
      {
        v36 = v11;
        swift_dynamicCast(v37, &v36, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v14 = objc_msgSend(v37[0], "name");
        if (v14)
        {

          v15 = v37[0];
          v16 = v38;
          v17 = v38[2];
          if (v38[3] <= v17)
          {
            sub_1002DEAC0(v17 + 1);
            v16 = v38;
          }
          result = NSObject._rawHashValue(seed:)(v16[5]);
          v18 = v16 + 7;
          v19 = -1 << *((_BYTE *)v16 + 32);
          v20 = result & ~v19;
          v21 = v20 >> 6;
          if (((-1 << v20) & ~v16[(v20 >> 6) + 7]) != 0)
          {
            v22 = __clz(__rbit64((-1 << v20) & ~v16[(v20 >> 6) + 7])) | v20 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v23 = 0;
            v24 = (unint64_t)(63 - v19) >> 6;
            do
            {
              if (++v21 == v24 && (v23 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v25 = v21 == v24;
              if (v21 == v24)
                v21 = 0;
              v23 |= v25;
              v26 = v18[v21];
            }
            while (v26 == -1);
            v22 = __clz(__rbit64(~v26)) + (v21 << 6);
          }
          *(_QWORD *)((char *)v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
          *(_QWORD *)(v16[6] + 8 * v22) = v15;
          ++v16[2];
        }
        else
        {

        }
        v11 = __CocoaSet.Iterator.next()(result);
      }
      while (v11);
      v7 = v38;
      v6 = v34;
      a2 = v35;
    }
    swift_release(v9);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v7 = (void *)sub_1001840B0(v27);
  }
  sub_10017DD68((uint64_t)v7);
  v29 = v28;
  swift_release(v7);
  if (v29)
  {
    v30 = objc_msgSend(v29, "creationDate");

    if (v30)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v30);

      v31 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v6, 0, 1, v31);
    }
    else
    {
      v33 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v6, 1, 1, v33);
    }
    return sub_1000A5CA8((uint64_t)v6, a2, (uint64_t *)&unk_1008380D0);
  }
  else
  {
    v32 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a2, 1, 1, v32);
  }
}

void sub_10017B790(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  void *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  void *v96;
  char *v97;
  uint64_t v98;
  uint8_t *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  _OWORD v103[2];
  unint64_t v104;
  uint64_t v105;

  v4 = v3;
  v7 = type metadata accessor for UUID(0);
  v98 = *(_QWORD *)(v7 - 8);
  v99 = (uint8_t *)v7;
  __chkstk_darwin(v7);
  v95 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C80);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v93 - v13;
  swift_bridgeObjectRetain(a3);
  v16 = sub_10011EF34(v15);
  swift_bridgeObjectRelease(a3);
  v104 = (unint64_t)_swiftEmptyArrayStorage;
  v17 = sub_1001E987C(v16);
  *(_QWORD *)&v103[0] = v17;
  v18 = sub_10001A630(&qword_10083DA88);
  v19 = sub_1000A5F84((unint64_t *)&qword_10083DA90, &qword_10083DA88, (uint64_t)&protocol conformance descriptor for [A]);
  v20 = BidirectionalCollection<>.slices(by:)(100, v18, v19);
  swift_release(v17);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain(v20);
    v22 = (__int128 *)(v20 + 48);
    do
    {
      v103[0] = *(v22 - 1);
      v23 = *v22;
      v22 += 2;
      v103[1] = v23;
      v24 = *(_QWORD *)&v103[0];
      swift_unknownObjectRetain(*(_QWORD *)&v103[0]);
      sub_10017CC10((uint64_t *)v103);
      swift_unknownObjectRelease(v24);
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease_n(v20, 2);
    v25 = v104;
    if (!(v104 >> 62))
    {
LABEL_5:
      v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v26)
        goto LABEL_72;
      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v20);
    v25 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      goto LABEL_5;
  }
  if (v25 < 0)
    v63 = v25;
  else
    v63 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v25);
  v26 = _CocoaArrayWrapper.endIndex.getter(v63);
  swift_bridgeObjectRelease(v25);
  if (!v26)
    goto LABEL_72;
LABEL_6:
  v101 = v26;
  if (v26 < 1)
  {
    __break(1u);
LABEL_60:
    swift_once(&qword_100836E00, sub_10016F110);
    goto LABEL_25;
  }
  v97 = v14;
  v93 = v4;
  v102 = v25 & 0xC000000000000001;
  swift_bridgeObjectRetain(v25);
  v27 = 0;
  v100 = _swiftEmptyArrayStorage;
  v96 = a2;
  v28 = (uint64_t)v12;
  v94 = v12;
  do
  {
    if (v102)
      v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v25);
    else
      v29 = *(id *)(v25 + 8 * v27 + 32);
    v30 = v29;
    v31 = objc_msgSend(v29, "reminder");
    if (v31)
    {
      v32 = v31;
      v33 = objc_msgSend(v31, "identifier");

      v34 = v25;
      v35 = a2;
      if (v33)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

        v36 = 0;
      }
      else
      {
        v36 = 1;
      }
      v37 = v98;
      v38 = v99;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(v98 + 56))(v28, v36, 1, v99);
      v39 = (uint64_t)v97;
      sub_1000A5CA8(v28, (uint64_t)v97, (uint64_t *)&unk_100839C80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint8_t *))(v37 + 48))(v39, 1, v38))
      {
        sub_10000882C(v39, (uint64_t *)&unk_100839C80);

        a2 = v35;
        v25 = v34;
      }
      else
      {
        v40 = v95;
        (*(void (**)(char *, uint64_t, uint8_t *))(v37 + 16))(v95, v39, v38);
        v41 = sub_10000882C(v39, (uint64_t *)&unk_100839C80);
        v42 = UUID.uuidString.getter(v41);
        v43 = v37;
        v45 = v44;
        (*(void (**)(char *, uint8_t *))(v43 + 8))(v40, v38);

        v46 = v100;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v46 = sub_1002C8224(0, v46[2] + 1, 1, v46);
        v48 = v46[2];
        v47 = v46[3];
        v100 = v46;
        if (v48 >= v47 >> 1)
          v100 = sub_1002C8224((_QWORD *)(v47 > 1), v48 + 1, 1, v100);
        v49 = v100;
        v100[2] = v48 + 1;
        v50 = &v49[2 * v48];
        v50[4] = v42;
        v50[5] = v45;
        a2 = v96;
        v25 = v34;
        v28 = (uint64_t)v94;
      }
    }
    else
    {

    }
    ++v27;
  }
  while (v101 != v27);
  swift_bridgeObjectRelease(v25);
  if (qword_100836E00 != -1)
    goto LABEL_60;
LABEL_25:
  v51 = type metadata accessor for Logger(0);
  sub_10001AAA8(v51, (uint64_t)qword_10083D710);
  v52 = v100;
  v53 = swift_bridgeObjectRetain_n(v100, 2);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.info.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v103[0] = v57;
    *(_DWORD *)v56 = 136446210;
    v99 = v56 + 4;
    swift_bridgeObjectRetain(v52);
    v59 = Array.description.getter(v58, &type metadata for String);
    v61 = v60;
    swift_bridgeObjectRelease(v52);
    v104 = sub_10001A820(v59, v61, (uint64_t *)v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
    swift_bridgeObjectRelease_n(v52, 2);
    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "RDHashtagLabelUpdater process shared to me reminders: %{public}s", v56, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    v62 = v57;
    a2 = v96;
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v56, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v52, 2);
  }
  v64 = v101;
  *(_QWORD *)&v103[0] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v25);
  v65 = 0;
  do
  {
    if (v102)
      v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, v25);
    else
      v67 = *(id *)(v25 + 8 * v65 + 32);
    v68 = v67;
    v69 = objc_msgSend(v67, "reminder");

    if (v69)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v70);
      v72 = *(_QWORD *)((*(_QWORD *)&v103[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v71 = *(_QWORD *)((*(_QWORD *)&v103[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v72 >= v71 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1);
      v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v69);
      specialized Array._endMutation()(v66);
    }
    ++v65;
  }
  while (v64 != v65);
  swift_bridgeObjectRelease(v25);
  v73 = *(_QWORD *)&v103[0];
  v74 = sub_100178494(*(uint64_t *)&v103[0]);
  swift_bridgeObjectRelease(v73);
  v75 = v100;
  v76 = (uint64_t)sub_10018639C((uint64_t)v100);
  swift_bridgeObjectRelease(v75);
  if ((unint64_t)v76 >> 62)
  {
    if (v76 < 0)
      v89 = v76;
    else
      v89 = v76 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v76);
    v77 = _CocoaArrayWrapper.endIndex.getter(v89);
    if (v77)
      goto LABEL_45;
LABEL_65:
    swift_bridgeObjectRelease(v74);
    goto LABEL_66;
  }
  v77 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v76);
  if (!v77)
    goto LABEL_65;
LABEL_45:
  if (v77 < 1)
  {
    __break(1u);
    return;
  }
  v78 = 0;
  v100 = (_QWORD *)(v76 & 0xC000000000000001);
  do
  {
    if (v100)
      v80 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, v76);
    else
      v80 = *(id *)(v76 + 8 * v78 + 32);
    v81 = v80;
    v82 = objc_msgSend(v80, "sharedToMeReminderCKIdentifier");
    if (v82)
    {
      v83 = v82;
      v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
      v86 = v85;

      if (!v74[2])
        goto LABEL_47;
    }
    else
    {
      v86 = 0xE300000000000000;
      v84 = 7104878;
      if (!v74[2])
        goto LABEL_47;
    }
    v87 = sub_10001A6DC(v84, v86);
    if ((v88 & 1) == 0)
    {
LABEL_47:
      v79 = 0;
      goto LABEL_48;
    }
    v79 = *(id *)(v74[7] + 8 * v87);
LABEL_48:
    ++v78;
    objc_msgSend(v81, "setReminder:", v79, swift_bridgeObjectRelease(v86).n128_f64[0]);

  }
  while (v77 != v78);
  swift_bridgeObjectRelease(v74);
  a2 = v96;
  v64 = v101;
LABEL_66:
  swift_bridgeObjectRelease_n(v76, 2);
  swift_bridgeObjectRetain(v25);
  v90 = 0;
  do
  {
    if (v102)
      v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v90, v25);
    else
      v91 = *(id *)(v25 + 8 * v90 + 32);
    v92 = v91;
    ++v90;
    objc_msgSend(a2, "deleteObject:", v91);

  }
  while (v64 != v90);
  swift_bridgeObjectRelease(v25);
LABEL_72:
  swift_bridgeObjectRelease(v25);
}

void sub_10017C030(uint64_t *a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  Class isa;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Swift::String v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  char v64[8];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _BYTE v69[40];
  char v70[40];
  char v71[64];
  _QWORD *v72;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[3];
  v62 = a1[2];
  v72 = _swiftEmptyArrayStorage;
  v6 = sub_1000153F4((a2 & 1) != 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
  v8 = _swiftEmptyArrayStorage[2];
  v7 = _swiftEmptyArrayStorage[3];
  if (v8 >= v7 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1);
  v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
  specialized Array._endMutation()(v9);
  KeyPath = swift_getKeyPath(&unk_1006ABAF8);
  v61 = v5 >> 1;
  if ((v5 & 1) == 0)
  {
    swift_unknownObjectRetain(v3);
LABEL_5:
    v11 = sub_1001E96A0(v3, v4, v62, v5);
    goto LABEL_12;
  }
  v12 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v13 = swift_unknownObjectRetain_n(v3, 3);
  v14 = (_QWORD *)swift_dynamicCastClass(v13, v12);
  if (!v14)
  {
    swift_unknownObjectRelease(v3);
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = v14[2];
  v16 = swift_release(v14);
  if (__OFSUB__(v61, v62))
  {
    __break(1u);
    goto LABEL_30;
  }
  v16 = v3;
  if (v15 != v61 - v62)
  {
LABEL_30:
    swift_unknownObjectRelease(v16);
    goto LABEL_5;
  }
  v11 = (_QWORD *)swift_dynamicCastClass(v3, v12);
  if (!v11)
  {
    swift_unknownObjectRelease(v3);
    v11 = _swiftEmptyArrayStorage;
  }
LABEL_12:
  swift_unknownObjectRelease(v3);
  v17 = sub_1001DF8D0((uint64_t)v11);
  swift_release(v11);
  v18 = sub_100341B90(KeyPath, (uint64_t)v17);
  v19 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
  v21 = v72[2];
  v20 = v72[3];
  if (v21 >= v20 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1);
  v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
  specialized Array._endMutation()(v22);
  v23 = v72;
  swift_bridgeObjectRetain(v72);
  v25 = sub_10000D2BC(v24);
  v26 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v26, v71);
  *(_OWORD *)(inited + 16) = xmmword_1006AAD80;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006ABB28);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006ABB60);
  v28 = swift_getKeyPath(&unk_1006ABAF8);
  *(_QWORD *)(inited + 48) = v28;
  specialized Array._endMutation()(v28);
  v29 = swift_initStackObject(v26, v70);
  *(_OWORD *)(v29 + 16) = xmmword_1006A7330;
  v30 = swift_getKeyPath(&unk_1006ABAC8);
  *(_QWORD *)(v29 + 32) = v30;
  specialized Array._endMutation()(v30);
  v60 = (void *)v25;
  v31 = (void *)sub_100358FF8(inited, v29, 0, v25);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(inited);
  v32 = swift_initStackObject(v26, v69);
  *(_OWORD *)(v32 + 16) = xmmword_1006A7330;
  v33 = swift_getKeyPath(&unk_1006ABBA8);
  *(_QWORD *)(v32 + 32) = v33;
  v66 = v32;
  specialized Array._endMutation()(v33);
  v34 = v32;
  v68 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v35 = _swiftEmptyArrayStorage;
  if ((v34 & 0xC000000000000001) != 0)
  {
    v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v34);
    v37 = v36;
  }
  else
  {
    v37 = *(_QWORD *)(v34 + 32);
    v36 = swift_retain(v37);
  }
  v38 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v36);
  if (!v39)
  {
    v66 = 0;
    v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v58._object = (void *)0x80000001006F8C10;
    v58._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v58);
    v65 = v37;
    v59 = sub_10001A630(&qword_10083DAA0);
    _print_unlocked<A, B>(_:_:)(&v65, &v66, v59, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v66, v67, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
    return;
  }
  v40 = v38;
  v41 = v39;
  swift_release(v37);
  v43 = _swiftEmptyArrayStorage[2];
  v42 = _swiftEmptyArrayStorage[3];
  v44 = v43 + 1;
  if (v43 >= v42 >> 1)
  {
    sub_1001C1B0C(v42 > 1, v43 + 1, 1);
    v35 = v68;
  }
  v35[2] = v44;
  v45 = &v35[2 * v43];
  v45[4] = v40;
  v45[5] = v41;
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v23);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v35);
  objc_msgSend(v31, "setRelationshipKeyPathsForPrefetching:", isa);

  if (__OFSUB__(v61, v62))
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v31, "setFetchLimit:", v61 - v62);
    v47 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v48 = NSManagedObjectContext.fetch<A>(_:)(v31, v47);
    v44 = v2;
    if (!v2)
    {
      sub_1001E2B40(v48);

      return;
    }
    if (qword_100836E00 == -1)
      goto LABEL_23;
  }
  swift_once(&qword_100836E00, sub_10016F110);
LABEL_23:
  v49 = type metadata accessor for Logger(0);
  sub_10001AAA8(v49, (uint64_t)qword_10083D710);
  swift_errorRetain(v44);
  v50 = swift_errorRetain(v44);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v66 = v54;
    *(_DWORD *)v53 = 136315138;
    swift_getErrorValue(v44, v64, v63);
    v55 = Error.rem_errorDescription.getter(v63[1], v63[2]);
    v57 = v56;
    v68 = (_QWORD *)sub_10001A820(v55, v56, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);
    swift_bridgeObjectRelease(v57);
    swift_errorRelease(v44);
    swift_errorRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "RDHashtagLabelUpdater: failed to fetch hashtag from database {error: %s}", v53, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);

    swift_errorRelease(v44);
  }
  else
  {

    swift_errorRelease(v44);
    swift_errorRelease(v44);
    swift_errorRelease(v44);

  }
}

uint64_t sub_10017C6E4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_10017C700(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setIdentifier_);
}

void sub_10017C724(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "name");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10017C788(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setName:");

}

void sub_10017C7E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _BYTE v40[8];
  _BYTE v41[40];
  _BYTE v42[56];
  uint64_t v43;

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = sub_10001A630(&qword_10083DB10);
  inited = swift_initStackObject(v7, v42);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C20;
  *(_QWORD *)(inited + 32) = sub_1000153F4(0);
  KeyPath = swift_getKeyPath(&unk_1006ABA28);
  v10 = sub_100341B48(KeyPath);
  swift_release(KeyPath);
  *(_QWORD *)(inited + 40) = v10;
  v11 = swift_getKeyPath(&unk_1006ABA00);
  if ((v6 & 1) == 0)
  {
    swift_unknownObjectRetain(v3);
LABEL_3:
    v12 = sub_1001E9898(v3, v4, v5, v6);
    goto LABEL_10;
  }
  v13 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v14 = swift_unknownObjectRetain_n(v3, 3);
  v15 = (_QWORD *)swift_dynamicCastClass(v14, v13);
  if (!v15)
  {
    swift_unknownObjectRelease(v3);
    v15 = _swiftEmptyArrayStorage;
  }
  v16 = v15[2];
  v17 = swift_release(v15);
  if (__OFSUB__(v6 >> 1, v5))
  {
    __break(1u);
    goto LABEL_18;
  }
  v17 = v3;
  if (v16 != (v6 >> 1) - v5)
  {
LABEL_18:
    swift_unknownObjectRelease(v17);
    v2 = v1;
    goto LABEL_3;
  }
  v12 = (_QWORD *)swift_dynamicCastClass(v3, v13);
  v2 = v1;
  if (!v12)
  {
    swift_unknownObjectRelease(v3);
    v12 = _swiftEmptyArrayStorage;
  }
LABEL_10:
  swift_unknownObjectRelease(v3);
  v18 = sub_1001DFA94((uint64_t)v12);
  swift_release(v12);
  v19 = sub_1003428F0(v11, (uint64_t)v18);
  v20 = swift_release(v11);
  *(_QWORD *)(inited + 48) = v19;
  v43 = inited;
  specialized Array._endMutation()(v20);
  v21 = (void *)sub_10000D2BC(v43);
  v22 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v23 = swift_initStackObject(v22, v41);
  *(_OWORD *)(v23 + 16) = xmmword_1006A7330;
  v24 = swift_getKeyPath(&unk_1006ABA00);
  *(_QWORD *)(v23 + 32) = v24;
  v43 = v23;
  specialized Array._endMutation()(v24);
  v25 = v43;
  v26 = (void *)sub_100358FF8(v43, 0, 0, (uint64_t)v21);
  swift_bridgeObjectRelease(v25);
  v27 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v28 = NSManagedObjectContext.fetch<A>(_:)(v26, v27);
  if (v2)
  {
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v29 = type metadata accessor for Logger(0);
    sub_10001AAA8(v29, (uint64_t)qword_10083D710);
    swift_errorRetain(v2);
    v30 = swift_errorRetain(v2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v43 = v34;
      *(_DWORD *)v33 = 136315138;
      swift_getErrorValue(v2, v40, v39);
      v35 = Error.rem_errorDescription.getter(v39[1], v39[2]);
      v37 = v36;
      v38 = sub_10001A820(v35, v36, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39);
      swift_bridgeObjectRelease(v37);
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "RDHashtagLabelUpdater: failed to fetch unassociated hashtags with sharedToMEReminderCkIdentifier from database {error: %s}", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      swift_errorRelease(v2);
    }
    else
    {

      swift_errorRelease(v2);
      swift_errorRelease(v2);
      swift_errorRelease(v2);

    }
  }
  else
  {
    sub_1001E2B40(v28);

  }
}

void sub_10017CC10(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  _QWORD v36[3];
  _BYTE v37[8];
  _BYTE v38[40];
  uint64_t v39;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  KeyPath = swift_getKeyPath(&unk_1006ABBF0);
  if ((v4 & 1) == 0)
  {
    v6 = (v4 >> 1) - v3;
    v7 = __OFSUB__(v4 >> 1, v3);
    swift_unknownObjectRetain(v1);
    goto LABEL_6;
  }
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain_n(v1, 3);
  v11 = (_QWORD *)swift_dynamicCastClass(v10, v9);
  if (!v11)
  {
    swift_unknownObjectRelease(v1);
    v11 = _swiftEmptyArrayStorage;
  }
  v12 = v11[2];
  v13 = swift_release(v11);
  v6 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v13 = v1;
  if (v12 != v6)
  {
LABEL_24:
    swift_unknownObjectRelease(v13);
    v7 = 0;
LABEL_6:
    v8 = sub_1001E96A0(v1, v2, v3, v4);
    goto LABEL_14;
  }
  v14 = swift_dynamicCastClass(v1, v9);
  if (v14)
  {
    v8 = (_QWORD *)v14;
    v7 = 0;
  }
  else
  {
    swift_unknownObjectRelease(v1);
    v7 = 0;
    v8 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  swift_unknownObjectRelease(v1);
  v15 = sub_1001DF8D0((uint64_t)v8);
  swift_release(v8);
  v16 = (void *)sub_100342904(KeyPath, (uint64_t)v15);
  swift_release(KeyPath);
  v17 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v17, v38);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  v19 = swift_getKeyPath(&unk_1006AB978);
  *(_QWORD *)(inited + 32) = v19;
  v39 = inited;
  specialized Array._endMutation()(v19);
  v20 = v39;
  v21 = (void *)sub_100359040(0, v39, 0, (uint64_t)v16);
  *(_QWORD *)&v22 = swift_bridgeObjectRelease(v20).n128_u64[0];
  if (v7)
  {
    __break(1u);
LABEL_22:
    swift_once(&qword_100836E00, sub_10016F110);
    goto LABEL_17;
  }
  objc_msgSend(v21, "setFetchLimit:", v6, v22);
  v23 = sub_1000151B0(0, &qword_100844930, off_1007D6710);
  v24 = NSManagedObjectContext.fetch<A>(_:)(v21, v23);
  v7 = v34;
  if (!v34)
  {
    sub_1001E2B4C(v24);

    return;
  }
  if (qword_100836E00 != -1)
    goto LABEL_22;
LABEL_17:
  v25 = type metadata accessor for Logger(0);
  sub_10001AAA8(v25, (uint64_t)qword_10083D710);
  swift_errorRetain(v7);
  v26 = swift_errorRetain(v7);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v39 = v30;
    *(_DWORD *)v29 = 136315138;
    swift_getErrorValue(v7, v37, v36);
    v31 = Error.rem_errorDescription.getter(v36[1], v36[2]);
    v33 = v32;
    v35 = sub_10001A820(v31, v32, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);
    swift_bridgeObjectRelease(v33);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDHashtagLabelUpdater: failed to fetch sharedToMeReminderPlaceholder from database {error: %s}", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {

    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
}

id *sub_10017CFE0()
{
  id *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_timeGroupingStrategy;
  v2 = sub_10001A630((uint64_t *)&unk_100838030);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100008EFC((uint64_t)v0 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_delegate);
  swift_release(*(id *)((char *)v0 + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_cloudAccountsDidChangeCancellable));
  swift_bridgeObjectRelease();
  swift_release(*(id *)((char *)v0
                      + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_highPrioritySubscriptionTransactionRegistrar));
  swift_release(*(id *)((char *)v0
                      + OBJC_IVAR____TtC7remindd21RDHashtagLabelUpdater_lowPrioritySubscriptionTransactionRegistrar));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10017D0F0()
{
  uint64_t v0;

  sub_10017CFE0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10017D114()
{
  return type metadata accessor for RDHashtagLabelUpdater(0);
}

uint64_t type metadata accessor for RDHashtagLabelUpdater(uint64_t a1)
{
  return sub_10001522C(a1, (uint64_t *)&unk_10083D7C0, (uint64_t)&nominal type descriptor for RDHashtagLabelUpdater);
}

void sub_10017D130(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10017D1F8(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1006AB858;
    v4[5] = &unk_1006AB870;
    v4[6] = &unk_1006AB888;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = &unk_1006AB8A0;
    v4[11] = &unk_1006AB8A0;
    v4[12] = &unk_1006AB8A0;
    v4[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[14] = &unk_1006AB8A0;
    swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
}

void sub_10017D1F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_10083D7D0)
  {
    v2 = sub_1000151B0(255, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v3 = sub_1000E51DC((unint64_t *)&qword_1008380B0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v4 = type metadata accessor for Publishers.TimeGroupingStrategy(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_10083D7D0);
  }
}

uint64_t type metadata accessor for RDHashtagLabelUpdater.BabysitTarget()
{
  return objc_opt_self(_TtCC7remindd21RDHashtagLabelUpdaterP33_45435200B10504FC9CF3E682DD4A9AA213BabysitTarget);
}

char *sub_10017D2B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  id v48;
  void *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  void (*v58)(uint64_t, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char v63;
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  id v67;
  void *v68;
  void (*v69)(uint64_t, char *, uint64_t);
  uint64_t v70;
  id v71;
  void *v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  id v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  id v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  int v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  _QWORD v120[2];
  _QWORD v121[2];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;

  v2 = v1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v5 = __chkstk_darwin(v4);
  v110 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v114 = (char *)&v102 - v8;
  v9 = __chkstk_darwin(v7);
  v113 = (char *)&v102 - v10;
  __chkstk_darwin(v9);
  v112 = (char *)&v102 - v11;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v118 = (char *)&v102 - v18;
  v19 = __chkstk_darwin(v17);
  v111 = (char *)&v102 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v102 - v22;
  __chkstk_darwin(v21);
  v119 = (char *)&v102 - v24;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v91 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v32 = ~v91;
    v92 = -v91;
    if (v92 < 64)
      v93 = ~(-1 << v92);
    else
      v93 = -1;
    v33 = v93 & *(_QWORD *)(a1 + 56);
    v108 = a1;
    swift_bridgeObjectRetain(a1);
    v31 = 0;
    if (v33)
      goto LABEL_7;
    goto LABEL_69;
  }
  if (a1 < 0)
    v25 = a1;
  else
    v25 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v26 = __CocoaSet.makeIterator()(v25);
  v27 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
  v28 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
  v29 = Set.Iterator.init(_cocoa:)(&v122, v26, v27, v28);
  v30 = v123;
  v32 = v124;
  v31 = v125;
  v33 = v126;
  v108 = v122;
  if ((v122 & 0x8000000000000000) == 0)
  {
    if (v126)
    {
LABEL_7:
      v103 = v32;
      v105 = v30;
      v102 = v2;
      v34 = (v33 - 1) & v33;
      v35 = __clz(__rbit64(v33)) | ((_QWORD)v31 << 6);
      v36 = v31;
      goto LABEL_8;
    }
LABEL_69:
    v94 = (int64_t)(v31 + 1);
    if (__OFADD__(v31, 1))
    {
LABEL_91:
      __break(1u);
      goto LABEL_75;
    }
    v95 = (unint64_t)(v32 + 64) >> 6;
    if (v94 >= v95)
      goto LABEL_75;
    v103 = v32;
    v96 = *(_QWORD *)(v30 + 8 * v94);
    v36 = v31 + 1;
    if (!v96)
    {
      v36 = v31 + 2;
      if ((uint64_t)(v31 + 2) >= v95)
        goto LABEL_75;
      v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v36);
      if (!v96)
      {
        v36 = v31 + 3;
        if ((uint64_t)(v31 + 3) >= v95)
          goto LABEL_75;
        v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v36);
        if (!v96)
        {
          v36 = v31 + 4;
          if ((uint64_t)(v31 + 4) >= v95)
            goto LABEL_75;
          v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v36);
          if (!v96)
          {
            v36 = v31 + 5;
            if ((uint64_t)(v31 + 5) >= v95)
              goto LABEL_75;
            v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v36);
            if (!v96)
            {
              v101 = v31 + 6;
              do
              {
                if ((char *)v95 == v101)
                  goto LABEL_75;
                v96 = *(_QWORD *)(v30 + 8 * (_QWORD)v101++);
              }
              while (!v96);
              v36 = v101 - 1;
            }
          }
        }
      }
    }
    v105 = v30;
    v102 = v2;
    v34 = (v96 - 1) & v96;
    v35 = __clz(__rbit64(v96)) + ((_QWORD)v36 << 6);
LABEL_8:
    v37 = (char *)*(id *)(*(_QWORD *)(v108 + 48) + 8 * v35);
    v115 = 1;
    v127 = v37;
    if (v37)
      goto LABEL_9;
LABEL_75:
    sub_1000C6560(v108);
    return 0;
  }
  v127 = v125;
  v105 = v123;
  v97 = __CocoaSet.Iterator.next()(v29);
  if (!v97)
    goto LABEL_75;
  v98 = v97;
  v103 = v32;
  v102 = v2;
  v120[0] = v97;
  swift_unknownObjectRetain(v97);
  swift_dynamicCast(v121, v120, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
  v99 = (char *)v121[0];
  v37 = (char *)swift_unknownObjectRelease(v98);
  v115 = 0;
  v36 = v127;
  v34 = v33;
  v127 = v99;
  if (!v99)
    goto LABEL_75;
LABEL_9:
  v109 = v16;
  v107 = v108 & 0x7FFFFFFFFFFFFFFFLL;
  v104 = (unint64_t)(v103 + 64) >> 6;
  v106 = (char *)&type metadata for Swift.AnyObject + 8;
  if (!v115)
    goto LABEL_12;
LABEL_10:
  if (v34)
  {
    v38 = (v34 - 1) & v34;
    v39 = __clz(__rbit64(v34)) | ((_QWORD)v36 << 6);
    v40 = v36;
    goto LABEL_31;
  }
  v45 = (int64_t)(v36 + 1);
  if (__OFADD__(v36, 1))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v45 < v104)
  {
    v46 = *(_QWORD *)(v105 + 8 * v45);
    v40 = v36 + 1;
    if (v46)
      goto LABEL_30;
    v40 = v36 + 2;
    if ((uint64_t)(v36 + 2) >= v104)
      goto LABEL_76;
    v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v40);
    if (v46)
      goto LABEL_30;
    v40 = v36 + 3;
    if ((uint64_t)(v36 + 3) >= v104)
      goto LABEL_76;
    v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v40);
    if (v46)
      goto LABEL_30;
    v40 = v36 + 4;
    if ((uint64_t)(v36 + 4) >= v104)
      goto LABEL_76;
    v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v40);
    if (v46)
    {
LABEL_30:
      v38 = (v46 - 1) & v46;
      v39 = __clz(__rbit64(v46)) + ((_QWORD)v40 << 6);
LABEL_31:
      v44 = (char *)*(id *)(*(_QWORD *)(v108 + 48) + 8 * v39);
      if (v44)
      {
        while (1)
        {
          v116 = v38;
          v117 = v40;
          v48 = objc_msgSend(v44, "creationDate", v102);
          if (v48)
          {
            v49 = v48;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v48);

            v50 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
            v51 = (uint64_t)v112;
            v50(v112, v23, v12);
            v52 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
            v52((char *)v51, 0, 1, v12);
            v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v51, 1, v12);
            v55 = (uint64_t)v113;
            v54 = (uint64_t)v114;
            if ((_DWORD)v53 != 1)
            {
              v50(v119, (char *)v51, v12);
              goto LABEL_37;
            }
          }
          else
          {
            v52 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
            v51 = (uint64_t)v112;
            v53 = v52(v112, 1, 1, v12);
            v55 = (uint64_t)v113;
            v54 = (uint64_t)v114;
          }
          static Date.distantFuture.getter(v53);
          sub_10000882C(v51, (uint64_t *)&unk_1008380D0);
LABEL_37:
          v56 = objc_msgSend(v127, "creationDate");
          if (v56)
          {
            v57 = v56;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v56);

            v58 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
            v58(v55, v23, v12);
            v52((char *)v55, 0, 1, v12);
            v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v55, 1, v12);
            if ((_DWORD)v59 != 1)
            {
              v60 = v111;
              v58((uint64_t)v111, (char *)v55, v12);
              v61 = v60;
              goto LABEL_42;
            }
          }
          else
          {
            v59 = v52((char *)v55, 1, 1, v12);
          }
          v61 = v111;
          static Date.distantFuture.getter(v59);
          sub_10000882C(v55, (uint64_t *)&unk_1008380D0);
LABEL_42:
          v62 = v119;
          v63 = static Date.< infix(_:_:)(v119, v61);
          v64 = v61;
          v65 = v63;
          v66 = *(void (**)(char *, uint64_t))(v13 + 8);
          v66(v64, v12);
          v66(v62, v12);
          if ((v65 & 1) != 0)
            goto LABEL_64;
          v67 = objc_msgSend(v44, "creationDate");
          if (v67)
          {
            v68 = v67;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v67);

            v69 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
            v69(v54, v23, v12);
            v52((char *)v54, 0, 1, v12);
            v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v54, 1, v12);
            if ((_DWORD)v70 != 1)
            {
              v69((uint64_t)v118, (char *)v54, v12);
              goto LABEL_48;
            }
          }
          else
          {
            v70 = v52((char *)v54, 1, 1, v12);
          }
          static Date.distantFuture.getter(v70);
          sub_10000882C(v54, (uint64_t *)&unk_1008380D0);
LABEL_48:
          v71 = objc_msgSend(v127, "creationDate");
          if (!v71)
          {
            v74 = (uint64_t)v110;
            v75 = v52(v110, 1, 1, v12);
LABEL_52:
            v76 = v109;
            static Date.distantFuture.getter(v75);
            sub_10000882C(v74, (uint64_t *)&unk_1008380D0);
            goto LABEL_53;
          }
          v72 = v71;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

          v73 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
          v74 = (uint64_t)v110;
          v73(v110, v23, v12);
          v52((char *)v74, 0, 1, v12);
          v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v74, 1, v12);
          if ((_DWORD)v75 == 1)
            goto LABEL_52;
          v76 = v109;
          v73(v109, (char *)v74, v12);
LABEL_53:
          v77 = v118;
          v78 = static Date.== infix(_:_:)(v118, v76);
          v66(v76, v12);
          v66(v77, v12);
          if ((v78 & 1) != 0)
          {
            v79 = objc_msgSend(v44, "name");
            if (v79)
            {
              v80 = v79;
              v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
              v83 = v82;

            }
            else
            {
              v81 = 0;
              v83 = 0xE000000000000000;
            }
            v121[0] = v81;
            v121[1] = v83;
            v84 = objc_msgSend(v127, "name");
            if (v84)
            {
              v85 = v84;
              v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
              v88 = v87;

            }
            else
            {
              v86 = 0;
              v88 = 0xE000000000000000;
            }
            v120[0] = v86;
            v120[1] = v88;
            v89 = sub_1000E525C();
            v90 = StringProtocol.localizedStandardCompare<A>(_:)(v120, &type metadata for String, &type metadata for String, v89, v89);
            swift_bridgeObjectRelease(v83);
            swift_bridgeObjectRelease(v88);
            if (v90 == -1)
            {
LABEL_64:

              v127 = v44;
              goto LABEL_62;
            }
          }

LABEL_62:
          v34 = v116;
          v36 = v117;
          if (v115)
            goto LABEL_10;
LABEL_12:
          v41 = __CocoaSet.Iterator.next()(v37);
          if (v41)
          {
            v42 = v41;
            v120[0] = v41;
            v43 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
            swift_unknownObjectRetain(v42);
            swift_dynamicCast(v121, v120, v106, v43, 7);
            v44 = (char *)v121[0];
            swift_unknownObjectRelease(v42);
            v40 = v36;
            v38 = v34;
            if (v44)
              continue;
          }
          goto LABEL_76;
        }
      }
      goto LABEL_76;
    }
    v40 = v36 + 5;
    if ((uint64_t)(v36 + 5) < v104)
    {
      v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v40);
      if (!v46)
      {
        v47 = v36 + 6;
        do
        {
          if ((char *)v104 == v47)
            goto LABEL_76;
          v46 = *(_QWORD *)(v105 + 8 * (_QWORD)v47++);
        }
        while (!v46);
        v40 = v47 - 1;
      }
      goto LABEL_30;
    }
  }
LABEL_76:
  sub_1000C6560(v108);
  return v127;
}

void sub_10017DD68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  int v82;
  char *v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;

  v2 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v3 = __chkstk_darwin(v2);
  v81 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v80 = (char *)&v72 - v5;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v79 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v83 = (char *)&v72 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v72 - v12;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v15 = __CocoaSet.makeIterator()(v14);
    v16 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    v17 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
    v18 = Set.Iterator.init(_cocoa:)(&v87, v15, v16, v17);
    a1 = v87;
    v19 = v88;
    v20 = v89;
    v21 = v90;
    v22 = v91;
    if (v87 < 0)
    {
      v66 = v13;
      v75 = v88;
      v67 = v87;
      v68 = __CocoaSet.Iterator.next()(v18);
      if (v68)
      {
        v69 = v68;
        v73 = v20;
        v86 = v68;
        swift_unknownObjectRetain(v68);
        swift_dynamicCast(&v92, &v86, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v70 = v92;
        v26 = (id)swift_unknownObjectRelease(v69);
        v82 = 0;
        v23 = v22;
        v25 = v21;
        v85 = (id)v23;
        a1 = v67;
        v13 = v66;
        v27 = v70;
        if (v70)
          goto LABEL_9;
      }
      else
      {
        a1 = v67;
      }
      goto LABEL_71;
    }
    if (v91)
    {
LABEL_7:
      v73 = v20;
      v75 = v19;
      v85 = (id)v22;
      v23 = (v22 - 1) & v22;
      v24 = __clz(__rbit64(v22)) | (v21 << 6);
      v25 = v21;
      goto LABEL_8;
    }
  }
  else
  {
    v60 = -1 << *(_BYTE *)(a1 + 32);
    v19 = a1 + 56;
    v20 = ~v60;
    v61 = -v60;
    if (v61 < 64)
      v62 = ~(-1 << v61);
    else
      v62 = -1;
    v22 = v62 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v21 = 0;
    if (v22)
      goto LABEL_7;
  }
  v63 = v21 + 1;
  if (__OFADD__(v21, 1))
    goto LABEL_73;
  v64 = (unint64_t)(v20 + 64) >> 6;
  if (v63 >= v64)
    goto LABEL_71;
  v85 = (id)v22;
  v65 = *(_QWORD *)(v19 + 8 * v63);
  v25 = v21 + 1;
  if (v65)
    goto LABEL_53;
  v25 = v21 + 2;
  if (v21 + 2 >= v64)
  {
LABEL_71:
    sub_1000C6560(a1);
    return;
  }
  v65 = *(_QWORD *)(v19 + 8 * v25);
  if (!v65)
  {
    v25 = v21 + 3;
    if (v21 + 3 >= v64)
      goto LABEL_71;
    v65 = *(_QWORD *)(v19 + 8 * v25);
    if (!v65)
    {
      v25 = v21 + 4;
      if (v21 + 4 >= v64)
        goto LABEL_71;
      v65 = *(_QWORD *)(v19 + 8 * v25);
      if (!v65)
      {
        v25 = v21 + 5;
        if (v21 + 5 < v64)
        {
          v65 = *(_QWORD *)(v19 + 8 * v25);
          if (!v65)
          {
            v71 = v21 + 6;
            do
            {
              if (v64 == v71)
                goto LABEL_71;
              v65 = *(_QWORD *)(v19 + 8 * v71++);
            }
            while (!v65);
            v25 = v71 - 1;
          }
          goto LABEL_53;
        }
        goto LABEL_71;
      }
    }
  }
LABEL_53:
  v73 = v20;
  v75 = v19;
  v23 = (v65 - 1) & v65;
  v24 = __clz(__rbit64(v65)) + (v25 << 6);
LABEL_8:
  v26 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v24);
  v27 = v26;
  v82 = 1;
  if (!v26)
    goto LABEL_71;
LABEL_9:
  v77 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v78 = a1;
  v74 = (unint64_t)(v73 + 64) >> 6;
  v76 = (char *)&type metadata for Swift.AnyObject + 8;
  while (!v82)
  {
    v31 = __CocoaSet.Iterator.next()(v26);
    if (!v31)
      goto LABEL_58;
    v32 = v31;
    v86 = v31;
    v33 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
    swift_unknownObjectRetain(v32);
    swift_dynamicCast(&v92, &v86, v76, v33, 7);
    v34 = v92;
    swift_unknownObjectRelease(v32);
    v30 = v25;
    v28 = v23;
    if (!v34)
      goto LABEL_58;
LABEL_33:
    v85 = v27;
    v38 = objc_msgSend(v27, "creationDate");
    if (v38)
    {
      v39 = v38;
      v40 = v83;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

      v41 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v42 = (uint64_t)v80;
      v41(v80, v40, v6);
      v43 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v43((char *)v42, 0, 1, v6);
      v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v42, 1, v6);
      if ((_DWORD)v44 != 1)
      {
        v41(v13, (char *)v42, v6);
        goto LABEL_38;
      }
    }
    else
    {
      v43 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v42 = (uint64_t)v80;
      v44 = v43(v80, 1, 1, v6);
    }
    static Date.distantPast.getter(v44);
    sub_10000882C(v42, (uint64_t *)&unk_1008380D0);
LABEL_38:
    v84 = v34;
    v45 = objc_msgSend(v34, "creationDate");
    if (!v45)
    {
      v54 = (uint64_t)v81;
      v56 = v43(v81, 1, 1, v6);
LABEL_42:
      v57 = v79;
      static Date.distantPast.getter(v56);
      sub_10000882C(v54, (uint64_t *)&unk_1008380D0);
      goto LABEL_43;
    }
    v46 = v45;
    v47 = v6;
    v48 = v28;
    v49 = v30;
    v50 = v13;
    v51 = v7;
    v52 = v83;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v45);

    v53 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    v54 = (uint64_t)v81;
    v55 = v52;
    v7 = v51;
    v13 = v50;
    v30 = v49;
    v28 = v48;
    v6 = v47;
    v53(v81, v55, v47);
    v43((char *)v54, 0, 1, v47);
    v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v54, 1, v47);
    if ((_DWORD)v56 == 1)
      goto LABEL_42;
    v57 = v79;
    v53(v79, (char *)v54, v47);
LABEL_43:
    v58 = static Date.< infix(_:_:)(v13, v57);
    v59 = *(void (**)(char *, uint64_t))(v7 + 8);
    v59(v57, v6);
    v59(v13, v6);
    v27 = v84;
    if ((v58 & 1) != 0)
    {

      v25 = v30;
      v23 = v28;
    }
    else
    {

      v25 = v30;
      v23 = v28;
      v27 = v85;
    }
  }
  if (v23)
  {
    v28 = (v23 - 1) & v23;
    v29 = __clz(__rbit64(v23)) | (v25 << 6);
    v30 = v25;
LABEL_32:
    v34 = *(id *)(*(_QWORD *)(v78 + 48) + 8 * v29);
    if (!v34)
      goto LABEL_58;
    goto LABEL_33;
  }
  v35 = v25 + 1;
  if (!__OFADD__(v25, 1))
  {
    if (v35 >= v74)
      goto LABEL_58;
    v36 = *(_QWORD *)(v75 + 8 * v35);
    v30 = v25 + 1;
    if (!v36)
    {
      v30 = v25 + 2;
      if (v25 + 2 >= v74)
        goto LABEL_58;
      v36 = *(_QWORD *)(v75 + 8 * v30);
      if (!v36)
      {
        v30 = v25 + 3;
        if (v25 + 3 >= v74)
          goto LABEL_58;
        v36 = *(_QWORD *)(v75 + 8 * v30);
        if (!v36)
        {
          v30 = v25 + 4;
          if (v25 + 4 >= v74)
            goto LABEL_58;
          v36 = *(_QWORD *)(v75 + 8 * v30);
          if (!v36)
          {
            v30 = v25 + 5;
            if (v25 + 5 >= v74)
              goto LABEL_58;
            v36 = *(_QWORD *)(v75 + 8 * v30);
            if (!v36)
            {
              v37 = v25 + 6;
              while (v74 != v37)
              {
                v36 = *(_QWORD *)(v75 + 8 * v37++);
                if (v36)
                {
                  v30 = v37 - 1;
                  goto LABEL_31;
                }
              }
LABEL_58:
              sub_1000C6560(v78);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v28 = (v36 - 1) & v36;
    v29 = __clz(__rbit64(v36)) + (v30 << 6);
    goto LABEL_32;
  }
  __break(1u);
LABEL_73:
  __break(1u);
}

void sub_10017E4C8(unint64_t *a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint8_t *v67;
  unint64_t *v68;
  _QWORD v69[2];
  void *v70;
  char *v71;
  uint8_t *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;

  v73 = a1;
  v3 = type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone(0);
  v72 = *(uint8_t **)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v69 - v14;
  v16 = *a2;
  v17 = objc_opt_self(REMDAHashtagTombstone);
  v18 = swift_dynamicCastObjCClass(v16, v17);
  if (!v18)
  {
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v35 = type metadata accessor for Logger(0);
    sub_10001AAA8(v35, (uint64_t)qword_10083D710);
    v36 = swift_unknownObjectRetain_n(v16, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v76 = (_QWORD *)v40;
      *(_DWORD *)v39 = 136315138;
      v73 = (unint64_t *)(v39 + 4);
      v41 = objc_msgSend(v16, "description");
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

      v74 = sub_10001A820(v42, v44, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      swift_unknownObjectRelease_n(v16, 2);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "RDHashtagLabelUpdater: Tracked deletion is not an REMDAHashtagTombstone (or nil) huh? {deleted: %s}", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      return;
    }

    v55 = v16;
    v56 = 2;
LABEL_21:
    swift_unknownObjectRelease_n(v55, v56);
    return;
  }
  v19 = (void *)v18;
  v71 = v15;
  swift_unknownObjectRetain(v16);
  v20 = objc_msgSend(v19, "objectIdentifier");
  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_15;
  }
  v21 = v20;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v22 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v22(v8, v13, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_15:
    sub_10000882C((uint64_t)v8, (uint64_t *)&unk_100839C80);
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v45 = type metadata accessor for Logger(0);
    sub_10001AAA8(v45, (uint64_t)qword_10083D710);
    v46 = swift_unknownObjectRetain_n(v16, 2);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v76 = (_QWORD *)v50;
      *(_DWORD *)v49 = 136315138;
      v73 = (unint64_t *)(v49 + 4);
      v51 = objc_msgSend(v16, "description");
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v74 = sub_10001A820(v52, v54, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      swift_unknownObjectRelease_n(v16, 2);
      swift_bridgeObjectRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "RDHashtagLabelUpdater: Tracked deletion tombstone does not contain an objectIdentifier, huh? {deleted: %s}", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      swift_unknownObjectRelease(v16);
      return;
    }

    v55 = v16;
    v56 = 3;
    goto LABEL_21;
  }
  v70 = v16;
  v23 = v71;
  v22(v71, v8, v9);
  v24 = objc_msgSend(v19, "name");
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;

    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v5, v23, v9);
    v29 = (uint64_t *)&v5[*(int *)(v3 + 20)];
    *v29 = v26;
    v29[1] = v28;
    v30 = v73;
    v31 = *v73;
    if ((swift_isUniquelyReferenced_nonNull_native(*v73) & 1) == 0)
      v31 = sub_1002C931C(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
    v33 = *(_QWORD *)(v31 + 16);
    v32 = *(_QWORD *)(v31 + 24);
    v34 = v70;
    if (v33 >= v32 >> 1)
      v31 = sub_1002C931C(v32 > 1, v33 + 1, 1, v31);
    *(_QWORD *)(v31 + 16) = v33 + 1;
    sub_100188C10((uint64_t)v5, v31 + ((v72[80] + 32) & ~(unint64_t)v72[80]) + *((_QWORD *)v72 + 9) * v33);
    swift_unknownObjectRelease(v34);
    *v30 = v31;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
  }
  else
  {
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v57 = type metadata accessor for Logger(0);
    sub_10001AAA8(v57, (uint64_t)qword_10083D710);
    v58 = v70;
    v59 = swift_unknownObjectRetain_n(v70, 2);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = (unint64_t *)swift_slowAlloc(32, -1);
      v76 = v73;
      v72 = v62;
      *(_DWORD *)v62 = 136315138;
      v69[1] = v62 + 4;
      v63 = objc_msgSend(v58, "description");
      v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v66 = v65;

      v74 = sub_10001A820(v64, v66, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      swift_unknownObjectRelease_n(v58, 2);
      swift_bridgeObjectRelease(v66);
      v67 = v72;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "RDHashtagLabelUpdater: Tracked deletion tombstone does not contain the hashtag name, huh? {deleted: %s}", v72, 0xCu);
      v68 = v73;
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);

      swift_unknownObjectRelease(v58);
    }
    else
    {

      swift_unknownObjectRelease_n(v58, 3);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
  }
}

uint64_t sub_10017ED58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_10001A630((uint64_t *)&unk_10083A270);
  v2 = swift_allocObject(v1, 112, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1006A3C40;
  v4 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountDescription);
  v3 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountDescription
                 + 8);
  *(_QWORD *)(v2 + 56) = &type metadata for String;
  v5 = sub_1000184F8();
  v6 = 7104878;
  if (v3)
    v6 = v4;
  v7 = 0xE300000000000000;
  if (v3)
    v7 = v3;
  *(_QWORD *)(v2 + 32) = v6;
  *(_QWORD *)(v2 + 40) = v7;
  v8 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountID);
  v9 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider_accountID
                 + 8);
  *(_QWORD *)(v2 + 96) = &type metadata for String;
  *(_QWORD *)(v2 + 104) = v5;
  *(_QWORD *)(v2 + 64) = v5;
  *(_QWORD *)(v2 + 72) = v8;
  *(_QWORD *)(v2 + 80) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v9);
  return String.init(format:_:)(0x3E40253C3A4025, 0xE700000000000000, v2);
}

uint64_t _s7remindd29ChangeTrackingAccountProviderCMa_0()
{
  return objc_opt_self(_TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider);
}

uint64_t type metadata accessor for ManualHashtagLabelUpdaterDelegate()
{
  return objc_opt_self(_TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA233ManualHashtagLabelUpdaterDelegate);
}

id sub_10017EF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v6;
  char *v7;
  char *v8;
  objc_super v10;

  v6 = (objc_class *)type metadata accessor for RDDaemonController();
  v7 = (char *)objc_allocWithZone(v6);
  v8 = &v7[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  sub_1000184A8(a3, (uint64_t)&v7[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
  *(_QWORD *)&v7[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = 0;
  swift_unknownObjectRetain(a1);
  sub_10001BAE8(a3);
  v10.receiver = v7;
  v10.super_class = v6;
  return objc_msgSendSuper2(&v10, "init");
}

void sub_10017EFE8(void *a1@<X0>, char a2@<W2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  unsigned __int8 v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;

  v4 = v3;
  v8 = sub_100186490();
  v9 = sub_100186874(v8);
  if ((a2 & 1) == 0)
    goto LABEL_25;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v32 = v8;
    else
      v32 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v10 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v8);
    if (v10)
      goto LABEL_4;
LABEL_25:
    swift_bridgeObjectRelease(v8);
    *a3 = v9;
    return;
  }
  v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
    goto LABEL_25;
LABEL_4:
  if (v10 < 1)
    __break(1u);
  v34 = v4;
  v35 = v9;
  v33 = a3;
  v11 = v8 & 0xC000000000000001;
  swift_bridgeObjectRetain(v8);
  v12 = 0;
  v38 = v8;
  v39 = a1;
  v36 = v8 & 0xC000000000000001;
  v37 = v10;
  do
  {
    if (v11)
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v8);
    else
      v13 = *(id *)(v8 + 8 * v12 + 32);
    v14 = v13;
    if (qword_100836E00 != -1)
      swift_once(&qword_100836E00, sub_10016F110);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_10083D710);
    v16 = v14;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(12, -1);
      v20 = (void *)swift_slowAlloc(32, -1);
      v40 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = objc_msgSend(v16, "name");
      if (v21)
      {
        v22 = v21;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v25 = v24;

      }
      else
      {
        v25 = 0xE300000000000000;
        v23 = 7104878;
      }
      a1 = v39;
      *(_QWORD *)(v19 + 4) = sub_10001A820(v23, v25, (uint64_t *)&v40);

      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "RDHashtagLabelRepairer: removes hashtag label without hashtag: %s", (uint8_t *)v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      v10 = v37;
      v8 = v38;
      v11 = v36;
    }
    else
    {

    }
    ++v12;
    objc_msgSend(a1, "deleteObject:", v16, v33, v34);

  }
  while (v10 != v12);
  *(_QWORD *)&v26 = swift_bridgeObjectRelease_n(v8, 2).n128_u64[0];
  v40 = 0;
  v27 = objc_msgSend(a1, "save:", &v40, v26);
  v28 = v40;
  if ((v27 & 1) != 0)
  {
    v29 = v40;
    *v33 = v35;
  }
  else
  {
    v30 = v40;
    swift_bridgeObjectRelease(v35);
    _convertNSErrorToError(_:)(v28);

    swift_willThrow(v31);
  }
}

void sub_10017F338(void *a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  BOOL v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  id v44;
  void *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 v64;
  _QWORD *v65;
  char v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v94;
  void (*v95)(id *, _QWORD);
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  os_log_t v101;
  uint64_t v102;
  uint64_t v103;
  Class isa;
  unint64_t v105;
  double v106;
  unsigned __int8 v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint8_t *v122;
  os_log_t v123;
  char *v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  unint64_t v138;
  id v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  uint64_t v146;
  id v147;
  char v148;
  id v149;
  uint64_t v150;
  unsigned __int8 v151;
  char v152[8];
  uint64_t v153;
  char v154[8];
  _QWORD v155[5];

  v6 = type metadata accessor for UUID(0);
  v143 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v137 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = (uint64_t)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v142 = (uint64_t)&v115 - v12;
  v13 = type metadata accessor for Logger(0);
  v132 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v131 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = a1;
  v15 = sub_1001869B8();
  v16 = (int64_t)sub_100186874(v15);
  if ((a2 & 1) == 0)
  {
    v105 = v15;
    goto LABEL_109;
  }
  v18 = v15;
  if (v15 >> 62)
    goto LABEL_104;
  v133 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v133)
  {
LABEL_108:
    v105 = v18;
LABEL_109:
    swift_bridgeObjectRelease(v105);
LABEL_110:
    *(_QWORD *)a3 = v16;
    return;
  }
LABEL_4:
  v19 = 0;
  v130 = v18 & 0xC000000000000001;
  v119 = v18 & 0xFFFFFFFFFFFFFF8;
  v118 = v18 + 32;
  v124 = &v148;
  v17.n128_u64[0] = 136315394;
  v117 = v17;
  v116 = (char *)&type metadata for Any + 8;
  v140 = (char *)&type metadata for Swift.AnyObject + 8;
  v126 = a3;
  v138 = v6;
  v125 = v16;
  v144 = (char *)v10;
  v129 = v13;
  v127 = v18;
  do
  {
    if (v130)
    {
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v18);
    }
    else
    {
      if (v19 >= *(_QWORD *)(v119 + 16))
        goto LABEL_102;
      v20 = *(id *)(v118 + 8 * v19);
    }
    v6 = (unint64_t)v20;
    v21 = __OFADD__(v19, 1);
    v22 = v19 + 1;
    if (v21)
    {
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    v136 = v22;
    v23 = objc_msgSend(v20, "hashtags");
    if (v23)
    {
      v24 = v23;
      v139 = (id)v6;
      v25 = sub_1000151B0(0, (unint64_t *)&qword_10083DA60, off_1007D66C8);
      v26 = sub_1000E51DC((unint64_t *)&qword_10083BDF0, (unint64_t *)&qword_10083DA60, off_1007D66C8, (uint64_t)&protocol conformance descriptor for NSObject);
      v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v24, v25, v26);

      v146 = (uint64_t)&_swiftEmptySetSingleton;
      v141 = v25;
      v134 = v26;
      if ((v18 & 0xC000000000000001) != 0)
      {
        if (v18 < 0)
          v28 = v18;
        else
          v28 = v18 & 0xFFFFFFFFFFFFFF8;
        v29 = __CocoaSet.makeIterator()(v28);
        v27 = Set.Iterator.init(_cocoa:)(v155, v29, v25, v26);
        v18 = v155[0];
        v13 = v155[1];
        v30 = v155[2];
        v10 = v155[3];
        v6 = v155[4];
      }
      else
      {
        v10 = 0;
        v31 = -1 << *(_BYTE *)(v18 + 32);
        v13 = v18 + 56;
        v30 = ~v31;
        v32 = -v31;
        if (v32 < 64)
          v33 = ~(-1 << v32);
        else
          v33 = -1;
        v6 = v33 & *(_QWORD *)(v18 + 56);
      }
      a3 = v18 & 0x7FFFFFFFFFFFFFFFLL;
      v135 = v30;
      v16 = (unint64_t)(v30 + 64) >> 6;
      while (1)
      {
        if (v18 < 0)
        {
          v38 = (void *)__CocoaSet.Iterator.next()(v27);
          if (!v38)
            goto LABEL_51;
          v39 = v38;
          v149 = v38;
          swift_unknownObjectRetain(v38);
          swift_dynamicCast(&v147, &v149, v140, v141, 7);
          v40 = v147;
          swift_unknownObjectRelease(v39);
          v37 = v10;
          v35 = v6;
          if (!v40)
            goto LABEL_51;
        }
        else
        {
          if (v6)
          {
            v35 = (v6 - 1) & v6;
            v36 = __clz(__rbit64(v6)) | (v10 << 6);
            v37 = v10;
          }
          else
          {
            v41 = v10 + 1;
            if (__OFADD__(v10, 1))
            {
              __break(1u);
              goto LABEL_101;
            }
            if (v41 >= v16)
              goto LABEL_51;
            v42 = *(_QWORD *)(v13 + 8 * v41);
            v37 = v10 + 1;
            if (!v42)
            {
              v37 = v10 + 2;
              if (v10 + 2 >= v16)
                goto LABEL_51;
              v42 = *(_QWORD *)(v13 + 8 * v37);
              if (!v42)
              {
                v37 = v10 + 3;
                if (v10 + 3 >= v16)
                  goto LABEL_51;
                v42 = *(_QWORD *)(v13 + 8 * v37);
                if (!v42)
                {
                  v37 = v10 + 4;
                  if (v10 + 4 >= v16)
                    goto LABEL_51;
                  v42 = *(_QWORD *)(v13 + 8 * v37);
                  if (!v42)
                  {
                    v43 = (char *)(v10 + 5);
                    while ((char *)v16 != v43)
                    {
                      v42 = *(_QWORD *)(v13 + 8 * (_QWORD)v43++);
                      if (v42)
                      {
                        v37 = (uint64_t)(v43 - 1);
                        goto LABEL_45;
                      }
                    }
LABEL_51:
                    sub_1000C6560(v18);
                    if (qword_100836E00 != -1)
                      swift_once(&qword_100836E00, sub_10016F110);
                    v13 = v129;
                    v47 = sub_10001AAA8(v129, (uint64_t)qword_10083D710);
                    v48 = v132;
                    v49 = v131;
                    (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v131, v47, v13);
                    v6 = (unint64_t)v139;
                    v50 = Logger.logObject.getter(v6);
                    v51 = static os_log_type_t.default.getter(v50);
                    v52 = os_log_type_enabled(v50, (os_log_type_t)v51);
                    v16 = v138;
                    v10 = (uint64_t)v144;
                    if (!v52)
                    {

                      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v13);
                      a3 = v126;
                      v16 = v125;
                      goto LABEL_95;
                    }
                    v53 = swift_slowAlloc(22, -1);
                    v120 = swift_slowAlloc(64, -1);
                    v153 = v120;
                    *(_DWORD *)v53 = v117.n128_u32[0];
                    v54 = objc_msgSend((id)v6, "name");
                    v123 = v50;
                    v121 = v51;
                    if (v54)
                    {
                      v55 = v54;
                      v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
                      v58 = v57;

                    }
                    else
                    {
                      v58 = 0xE300000000000000;
                      v56 = 7104878;
                    }
                    v147 = (id)sub_10001A820(v56, v58, &v153);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v124);

                    v135 = v6;
                    swift_bridgeObjectRelease(v58);
                    v122 = (uint8_t *)v53;
                    *(_WORD *)(v53 + 12) = 2080;
                    swift_beginAccess(&v146, v152, 0, 0);
                    v18 = v146;
                    v59 = v146 & 0xC000000000000001;
                    if ((v146 & 0xC000000000000001) != 0)
                    {
                      if (v146 < 0)
                        v60 = v146;
                      else
                        v60 = v146 & 0xFFFFFFFFFFFFFF8;
                      swift_bridgeObjectRetain(v146);
                      v13 = __CocoaSet.count.getter(v60);
                    }
                    else
                    {
                      v13 = *(_QWORD *)(v146 + 16);
                      swift_bridgeObjectRetain(v146);
                    }
                    a3 = v143;
                    if (!v13)
                    {
                      swift_bridgeObjectRelease(v18);
                      v65 = _swiftEmptyArrayStorage;
                      goto LABEL_94;
                    }
                    v145 = _swiftEmptyArrayStorage;
                    sub_1001C1B0C(0, v13 & ~(v13 >> 63), 0);
                    if (v59)
                    {
                      if (v18 < 0)
                        v61 = v18;
                      else
                        v61 = v18 & 0xFFFFFFFFFFFFFF8;
                      v62 = (void *)__CocoaSet.startIndex.getter(v61);
                      v64 = 1;
                    }
                    else
                    {
                      v62 = (void *)sub_100364E8C(v18);
                      v64 = v66 & 1;
                    }
                    v149 = v62;
                    v150 = v63;
                    v151 = v64;
                    if ((v13 & 0x8000000000000000) == 0)
                    {
                      v67 = (void *)(v18 & 0xFFFFFFFFFFFFFF8);
                      if (v18 < 0)
                        v67 = (void *)v18;
                      v139 = v67;
                      do
                      {
                        while (1)
                        {
                          sub_100364B90((uint64_t)v149, v150, v151, v18);
                          v77 = v76;
                          v78 = objc_msgSend(v76, "identifier");
                          if (v78)
                          {
                            v79 = v78;
                            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v78);

                            v80 = 0;
                          }
                          else
                          {
                            v80 = 1;
                          }
                          (*(void (**)(uint64_t, uint64_t, uint64_t, int64_t))(a3 + 56))(v10, v80, 1, v16);
                          v81 = v10;
                          v82 = v142;
                          sub_1000A5CA8(v81, v142, (uint64_t *)&unk_100839C80);
                          if ((*(unsigned int (**)(uint64_t, uint64_t, int64_t))(a3 + 48))(v82, 1, v16))
                          {
                            sub_10000882C(v82, (uint64_t *)&unk_100839C80);
                            v83 = 0xE300000000000000;
                            v84 = 7104878;
                          }
                          else
                          {
                            v85 = v137;
                            (*(void (**)(char *, uint64_t, int64_t))(a3 + 16))(v137, v82, v16);
                            v86 = sub_10000882C(v82, (uint64_t *)&unk_100839C80);
                            v84 = UUID.uuidString.getter(v86);
                            v83 = v87;
                            (*(void (**)(char *, int64_t))(a3 + 8))(v85, v16);
                          }

                          v88 = v145;
                          if ((swift_isUniquelyReferenced_nonNull_native(v145) & 1) == 0)
                          {
                            sub_1001C1B0C(0, v88[2] + 1, 1);
                            v88 = v145;
                          }
                          v90 = v88[2];
                          v89 = v88[3];
                          if (v90 >= v89 >> 1)
                          {
                            sub_1001C1B0C(v89 > 1, v90 + 1, 1);
                            v88 = v145;
                          }
                          v88[2] = v90 + 1;
                          v91 = &v88[2 * v90];
                          v91[4] = v84;
                          v91[5] = v83;
                          if (v59)
                            break;
                          v68 = (uint64_t)v149;
                          v69 = v150;
                          v70 = v151;
                          v71 = (void *)sub_10036456C(v149, v150, v151, v18);
                          v73 = v72;
                          v75 = v74;
                          sub_1000E515C(v68, v69, v70);
                          v149 = v71;
                          v150 = v73;
                          v16 = v138;
                          v151 = v75 & 1;
                          a3 = v143;
                          v10 = (uint64_t)v144;
                          if (!--v13)
                            goto LABEL_93;
                        }
                        if ((v151 & 1) == 0)
                        {
                          swift_bridgeObjectRelease(v146);
                          __break(1u);
                        }
                        v92 = __CocoaSet.Index.handleBitPattern.getter(v149, v150);
                        a3 = v143;
                        v10 = (uint64_t)v144;
                        if (v92)
                          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v92);
                        else
                          isUniquelyReferenced_nonNull_native = 1;
                        v94 = sub_10001A630(&qword_10083BE70);
                        v95 = (void (*)(id *, _QWORD))Set.Index._asCocoa.modify(&v147, v94);
                        __CocoaSet.formIndex(after:isUnique:)(v96, isUniquelyReferenced_nonNull_native, v139);
                        v95(&v147, 0);
                        --v13;
                      }
                      while (v13);
LABEL_93:
                      sub_1000E515C((uint64_t)v149, v150, v151);
                      swift_bridgeObjectRelease(v18);
                      v65 = v145;
LABEL_94:
                      v97 = v122;
                      v98 = Array.description.getter(v65, &type metadata for String);
                      v100 = v99;
                      swift_bridgeObjectRelease(v65);
                      v147 = (id)sub_10001A820(v98, v100, &v153);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v124);
                      swift_bridgeObjectRelease(v100);
                      v101 = v123;
                      _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v121, "RDHashtagLabelRepairer: removes hashtags with isConcealed for hashtag label [%s]: %s", v97, 0x16u);
                      v102 = v120;
                      swift_arrayDestroy(v120, 2, v116);
                      swift_slowDealloc(v102, -1, -1);
                      swift_slowDealloc(v97, -1, -1);

                      (*(void (**)(char *, uint64_t))(v132 + 8))(v131, v129);
                      a3 = v126;
                      v16 = v125;
                      v6 = v135;
LABEL_95:
                      swift_beginAccess(&v146, v154, 0, 0);
                      v103 = v146;
                      swift_bridgeObjectRetain(v146);
                      isa = Set._bridgeToObjectiveC()().super.isa;
                      objc_msgSend((id)v6, "removeHashtags:", isa, swift_bridgeObjectRelease(v103).n128_f64[0]);

                      sub_100186D9C(v128, (void *)v6);
                      swift_bridgeObjectRelease(v103);

                      v18 = v127;
                      goto LABEL_6;
                    }
LABEL_103:
                    __break(1u);
LABEL_104:
                    if (v18 < 0)
                      v113 = v18;
                    else
                      v113 = v18 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain(v18);
                    v114 = _CocoaArrayWrapper.endIndex.getter(v113);
                    v17 = swift_bridgeObjectRelease(v18);
                    v133 = v114;
                    if (!v114)
                      goto LABEL_108;
                    goto LABEL_4;
                  }
                }
              }
            }
LABEL_45:
            v35 = (v42 - 1) & v42;
            v36 = __clz(__rbit64(v42)) + (v37 << 6);
          }
          v40 = *(id *)(*(_QWORD *)(v18 + 48) + 8 * v36);
          if (!v40)
            goto LABEL_51;
        }
        if ((objc_msgSend(v40, "isConcealed") & 1) != 0)
          goto LABEL_24;
        v44 = objc_msgSend(v40, "reminder");
        if (!v44)
          break;
        v45 = v44;
        v46 = objc_msgSend(v44, "markedForDeletion");

        if (v46)
          break;

LABEL_25:
        v10 = v37;
        v6 = v35;
      }
      objc_msgSend(v40, "markForDeletion");
LABEL_24:
      swift_beginAccess(&v146, &v147, 33, 0);
      v34 = v40;
      sub_1002DBDD4((Swift::Int *)&v149, v34);
      swift_endAccess(&v147);

      goto LABEL_25;
    }

LABEL_6:
    v19 = v136;
  }
  while (v136 != v133);
  *(_QWORD *)&v106 = swift_bridgeObjectRelease(v18).n128_u64[0];
  v147 = 0;
  v107 = objc_msgSend(v128, "save:", &v147, v106);
  v108 = v147;
  if ((v107 & 1) != 0)
  {
    v109 = v147;
    goto LABEL_110;
  }
  v110 = v147;
  swift_bridgeObjectRelease(v16);
  v111 = _convertNSErrorToError(_:)(v108);

  v115 = v111;
  swift_willThrow(v112);
}

