uint64_t sub_100435D50(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000A5A94(&qword_10084A950);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RDCoreBehaviorModel.Feedback.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100435DFC + 4 * byte_1006BC35D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100435E30 + 4 * byte_1006BC358[v4]))();
}

uint64_t sub_100435E30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435E38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100435E40);
  return result;
}

uint64_t sub_100435E4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100435E54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100435E58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435E60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDCoreBehaviorModel.Feedback.CodingKeys()
{
  return &type metadata for RDCoreBehaviorModel.Feedback.CodingKeys;
}

unint64_t sub_100435E80()
{
  unint64_t result;

  result = qword_10084A970;
  if (!qword_10084A970)
  {
    result = swift_getWitnessTable(&unk_1006BC518, &type metadata for RDCoreBehaviorModel.Feedback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084A970);
  }
  return result;
}

unint64_t sub_100435EC8()
{
  unint64_t result;

  result = qword_10084A978;
  if (!qword_10084A978)
  {
    result = swift_getWitnessTable(&unk_1006BC488, &type metadata for RDCoreBehaviorModel.Feedback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084A978);
  }
  return result;
}

unint64_t sub_100435F10()
{
  unint64_t result;

  result = qword_10084A980;
  if (!qword_10084A980)
  {
    result = swift_getWitnessTable(&unk_1006BC4B0, &type metadata for RDCoreBehaviorModel.Feedback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084A980);
  }
  return result;
}

uint64_t sub_100435F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_100435F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084A9F0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084A9F0);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100436028()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_connectedToken;
  if (notify_is_valid_token(*(_DWORD *)&v0[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_connectedToken]))
  {
    notify_cancel(*(_DWORD *)&v0[v2]);
    *(_DWORD *)&v0[v2] = -1;
  }
  v3 = OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_disconnectedToken;
  if (notify_is_valid_token(*(_DWORD *)&v0[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_disconnectedToken]))
  {
    notify_cancel(*(_DWORD *)&v0[v3]);
    *(_DWORD *)&v0[v3] = -1;
  }
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "dealloc");
}

void sub_1004361A8(void *a1)
{
  id v1;

  v1 = a1;
  sub_100437578(0x657463656E6E6F63, (void *)0xE900000000000064, (uint64_t)v1, (void (*)(uint64_t))sub_1004361F4);

}

uint64_t sub_1004361F4(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  __n128 v35;
  uint64_t Strong;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1008374E0 != -1)
    swift_once(&qword_1008374E0, sub_100435F98);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_10084A9F0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Did receive vehicle connected notification", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(void **)&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue];
  *v5 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v13 & 1) != 0)
  {
    v15 = *sub_10000A388(&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource], *(_QWORD *)&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource + 24]);
    v16 = swift_retain();
    v17 = sub_100366330(v16);
    swift_release(v15);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v39 = a1;
      v41 = _swiftEmptyArrayStorage;
      sub_1001C2124(0, v18, 0);
      v19 = v41;
      v38 = v17;
      v20 = (uint64_t *)(v17 + 48);
      do
      {
        v21 = (void *)*(v20 - 2);
        v22 = (void *)*(v20 - 1);
        v40 = *v20;
        v23 = v21;
        v24 = sub_1005BB458(v22);
        v26 = v25;
        v28 = v27;
        v30 = v29;
        v41 = v19;
        v32 = v19[2];
        v31 = v19[3];
        if (v32 >= v31 >> 1)
        {
          sub_1001C2124(v31 > 1, v32 + 1, 1);
          v19 = v41;
        }
        v20 += 3;
        v33 = v40 != 1;
        v19[2] = v32 + 1;
        v34 = &v19[5 * v32];
        v34[4] = v23;
        v34[5] = v24;
        v34[6] = v26;
        v34[7] = v28;
        *((_BYTE *)v34 + 64) = v30;
        *((_BYTE *)v34 + 65) = v33;
        *((_BYTE *)v34 + 66) = 0;
        --v18;
      }
      while (v18);
      v35 = swift_bridgeObjectRelease();
      a1 = v39;
    }
    else
    {
      v35 = swift_bridgeObjectRelease();
      v19 = _swiftEmptyArrayStorage;
    }
    Strong = swift_unknownObjectUnownedLoadStrong(&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_delegate], v35);
    v37 = a1;
    sub_1002039CC(v37, (uint64_t)v19, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease(Strong);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004364D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD v23[5];
  _QWORD *v24;
  int out_token;

  v5 = v4;
  out_token = -1;
  v10 = *(NSObject **)(v5 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue);
  v11 = swift_allocObject(&unk_1007F43E8, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v5);
  v12 = (_QWORD *)swift_allocObject(&unk_1007F4410, 56, 7);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v11;
  v12[5] = a3;
  v12[6] = a4;
  v23[4] = sub_100437A40;
  v24 = v12;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_100435F5C;
  v23[3] = &unk_1007F4428;
  v13 = _Block_copy(v23);
  v14 = v24;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  swift_release(v14);
  v15 = String.utf8CString.getter(a1, a2);
  v16 = notify_register_dispatch((const char *)(v15 + 32), &out_token, v10, v13);
  swift_release(v15);
  _Block_release(v13);
  if (v16)
  {
    if (qword_1008374E0 != -1)
      swift_once(&qword_1008374E0, sub_100435F98);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001AAA8(v17, (uint64_t)qword_10084A9F0);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 67109120;
      LODWORD(v23[0]) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, (char *)v23 + 4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to register notify handler. {status: %u}", v21, 8u);
      swift_slowDealloc(v21, -1, -1);
    }

  }
  return out_token;
}

void sub_100436714(void *a1)
{
  id v1;

  v1 = a1;
  sub_100437578(0x656E6E6F63736964, (void *)0xEC00000064657463, (uint64_t)v1, (void (*)(uint64_t))sub_100436764);

}

uint64_t sub_100436764(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  __n128 v35;
  uint64_t Strong;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1008374E0 != -1)
    swift_once(&qword_1008374E0, sub_100435F98);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_10084A9F0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Did receive vehicle disconnected notification", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(void **)&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue];
  *v5 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v13 & 1) != 0)
  {
    v15 = *sub_10000A388(&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource], *(_QWORD *)&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource + 24]);
    v16 = swift_retain();
    v17 = sub_100366330(v16);
    swift_release(v15);
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v39 = a1;
      v41 = _swiftEmptyArrayStorage;
      sub_1001C2124(0, v18, 0);
      v19 = v41;
      v38 = v17;
      v20 = (uint64_t *)(v17 + 48);
      do
      {
        v21 = (void *)*(v20 - 2);
        v22 = (void *)*(v20 - 1);
        v40 = *v20;
        v23 = v21;
        v24 = sub_1005BB458(v22);
        v26 = v25;
        v28 = v27;
        v30 = v29;
        v41 = v19;
        v32 = v19[2];
        v31 = v19[3];
        if (v32 >= v31 >> 1)
        {
          sub_1001C2124(v31 > 1, v32 + 1, 1);
          v19 = v41;
        }
        v20 += 3;
        v33 = v40 != 2;
        v19[2] = v32 + 1;
        v34 = &v19[5 * v32];
        v34[4] = v23;
        v34[5] = v24;
        v34[6] = v26;
        v34[7] = v28;
        *((_BYTE *)v34 + 64) = v30;
        *((_BYTE *)v34 + 65) = v33;
        *((_BYTE *)v34 + 66) = 0;
        --v18;
      }
      while (v18);
      v35 = swift_bridgeObjectRelease();
      a1 = v39;
    }
    else
    {
      v35 = swift_bridgeObjectRelease();
      v19 = _swiftEmptyArrayStorage;
    }
    Strong = swift_unknownObjectUnownedLoadStrong(&a1[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_delegate], v35);
    v37 = a1;
    sub_1002039CC(v37, (uint64_t)v19, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease(Strong);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100436A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v26 = a5;
  v27 = a6;
  v9 = type metadata accessor for REM_os_activity.Options(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REM_os_activity(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_1002040FC((unint64_t *)&qword_1008406C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for REM_os_activity.Options, (uint64_t)&protocol conformance descriptor for REM_os_activity.Options);
  v17 = sub_10001A630((uint64_t *)&unk_10084DBA0);
  v18 = sub_100200264();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v9, v16);
  REM_os_activity.init(_:dso:options:)("VehicleConnectionDidChange", 26, 2, &_mh_execute_header, v11);
  v19 = (_QWORD *)swift_allocObject(&unk_1007F4460, 56, 7);
  v19[2] = a2;
  v19[3] = a3;
  v20 = v26;
  v21 = v27;
  v19[4] = a4;
  v19[5] = v20;
  v19[6] = v21;
  v22 = swift_allocObject(&unk_1007F4488, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_100437A88;
  *(_QWORD *)(v22 + 24) = v19;
  aBlock[4] = sub_1000098E4;
  v29 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000098C4;
  aBlock[3] = &unk_1007F44A0;
  v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  swift_retain();
  swift_retain();
  swift_retain();
  REM_os_activity.apply(execute:)(v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v24 = v29;
  swift_release(v19);
  swift_release(v24);
  LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v22, "", 116, 72, 28, 1);
  result = swift_release(v22);
  if ((v24 & 1) != 0)
    __break(1u);
  return result;
}

void sub_100436CA4(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t Strong;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22[3];

  v7 = a3 + 16;
  if (qword_1008374E0 != -1)
    swift_once(&qword_1008374E0, sub_100435F98);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_10084A9F0);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v20 = a4;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v22[0] = v13;
    *(_DWORD *)v12 = 136446210;
    swift_bridgeObjectRetain(a2);
    v21 = sub_10001A820(a1, a2, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Did receive vehicle notification {name: %{public}s}", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    v14 = v12;
    a4 = v20;
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_beginAccess(v7, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7, v15);
  if (Strong)
  {
    v17 = Strong;
    a4();
  }
  else
  {
    v17 = Logger.logObject.getter(0);
    v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received vehicle change notification with nil producer", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
  }

}

uint64_t sub_100436F00(uint64_t a1, int a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  __n128 v30;
  void *v31;
  uint64_t Strong;
  id v33;
  _QWORD v34[2];
  char *v35;
  uint64_t v36;
  int v37;
  _BOOL4 v38;
  _QWORD *v39;

  v37 = a2;
  v36 = a1;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (_QWORD *)((char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v2[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v9 = v8;
  v10 = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v10 & 1) != 0)
  {
    v35 = v2;
    v12 = *sub_10000A388(&v2[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource], *(_QWORD *)&v2[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource + 24]);
    v13 = swift_retain();
    v14 = sub_100366330(v13);
    swift_release(v12);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v39 = _swiftEmptyArrayStorage;
      sub_1001C2124(0, v15, 0);
      v16 = v39;
      v34[1] = v14;
      v17 = (_QWORD *)(v14 + 48);
      do
      {
        v38 = (v37 & 1) != 0 || *v17 != v36;
        v18 = (void *)*(v17 - 1);
        v19 = (id)*(v17 - 2);
        v20 = sub_1005BB458(v18);
        v22 = v21;
        v24 = v23;
        v26 = v25;
        v39 = v16;
        v28 = v16[2];
        v27 = v16[3];
        if (v28 >= v27 >> 1)
        {
          sub_1001C2124(v27 > 1, v28 + 1, 1);
          v16 = v39;
        }
        v16[2] = v28 + 1;
        v29 = &v16[5 * v28];
        v29[4] = v19;
        v29[5] = v20;
        v29[6] = v22;
        v29[7] = v24;
        *((_BYTE *)v29 + 64) = v26;
        *(_WORD *)((char *)v29 + 65) = v38;
        v17 += 3;
        --v15;
      }
      while (v15);
      v30 = swift_bridgeObjectRelease();
    }
    else
    {
      v30 = swift_bridgeObjectRelease();
      v16 = _swiftEmptyArrayStorage;
    }
    v31 = v35;
    Strong = swift_unknownObjectUnownedLoadStrong(&v35[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_delegate], v30);
    v33 = v31;
    sub_1002039CC(v33, (uint64_t)v16, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease(Strong);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for RDVehicleAlarmProducer()
{
  return objc_opt_self(_TtC7remindd22RDVehicleAlarmProducer);
}

void sub_100437198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_started) & 1) != 0)
  {
    if (qword_1008374E0 == -1)
    {
LABEL_4:
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10001AAA8(v9, (uint64_t)qword_10084A9F0);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDVehicleAlarmProducer.start() must be called exactly once", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }

      return;
    }
LABEL_13:
    swift_once(&qword_1008374E0, sub_100435F98);
    goto LABEL_4;
  }
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_started) = 1;
  if (qword_1008374E0 != -1)
    swift_once(&qword_1008374E0, sub_100435F98);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001AAA8(v14, (uint64_t)qword_10084A9F0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting RDVehicleAlarmProducer", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  *(_DWORD *)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_connectedToken) = sub_1004364D0(0xD000000000000025, 0x8000000100704250, (uint64_t)sub_1004361A8, 0);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_disconnectedToken) = sub_1004364D0(0xD000000000000028, 0x8000000100704280, (uint64_t)sub_100436714, 0);
}

unint64_t sub_100437438()
{
  return 0xD000000000000016;
}

void sub_100437454()
{
  sub_100437198();
}

uint64_t sub_100437474()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t result;
  uint64_t v9;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(*v0 + OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) != 0)
    return sub_100436F00(0, 1);
  __break(1u);
  return result;
}

uint64_t sub_10043753C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1002040FC((unint64_t *)&unk_10084AA60, a2, (uint64_t (*)(uint64_t))type metadata accessor for RDVehicleAlarmProducer, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_100437578(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  if (qword_1008374E0 != -1)
    swift_once(&qword_1008374E0, sub_100435F98);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_10084A9F0);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v30 = v13;
    *(_DWORD *)v12 = 136446210;
    swift_bridgeObjectRetain(a2);
    v29 = sub_10001A820(a1, (unint64_t)a2, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "os_transaction INIT {name: com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.%{public}s}", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(67);
  v14._object = (void *)0x80000001007042B0;
  v14._countAndFlagsBits = 0xD000000000000041;
  String.append(_:)(v14);
  v15._countAndFlagsBits = a1;
  v15._object = a2;
  String.append(_:)(v15);
  v16 = String.utf8CString.getter(v30, v31);
  swift_bridgeObjectRelease();
  v17 = os_transaction_create(v16 + 32);
  swift_release(v16);
  if (v17)
  {
    a4(a3);
    v18 = swift_bridgeObjectRetain_n(a2, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v30 = v22;
      *(_DWORD *)v21 = 136446210;
      swift_bridgeObjectRetain(a2);
      v29 = sub_10001A820(a1, (unint64_t)a2, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "os_transaction RELEASE {name: com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.%{public}s}", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      swift_unknownObjectRelease(v17);
    }
    else
    {

      swift_unknownObjectRelease(v17);
      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  else
  {
    v23 = swift_bridgeObjectRetain_n(a2, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v30 = v27;
      *(_DWORD *)v26 = 136446210;
      swift_bridgeObjectRetain(a2);
      v29 = sub_10001A820(a1, (unint64_t)a2, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v25, "RDVehicleAarmProducer: Couldn't create os_transaction_t for %{public}s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      v28 = swift_bridgeObjectRelease_n(a2, 2);
    }
    ((void (*)(uint64_t, __n128))a4)(a3, v28);
  }
}

uint64_t sub_100437A18()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100437A40(uint64_t a1)
{
  uint64_t *v1;

  return sub_100436A40(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100437A54()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_100437A88()
{
  uint64_t v0;

  sub_100436CA4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(void))(v0 + 40));
}

uint64_t sub_100437A98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

ValueMetadata *_s34PersistentHistoryTruncationHandlerOMa_0()
{
  return &_s34PersistentHistoryTruncationHandlerON_0;
}

uint64_t sub_100437AC0()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, "remObjectID");
  if (!v1)
    return 7104878;
  v2 = v1;
  v3 = objc_msgSend(v1, "description");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

uint64_t sub_100437B48()
{
  return sub_100437AC0();
}

uint64_t sub_100437B68()
{
  id *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = objc_msgSend(*v0, "remObjectID");
  if (!v1)
    return 7104878;
  v2 = v1;
  v3 = objc_msgSend(v1, "description");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

void sub_100437BF0(void *a1, char a2, char a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  sub_1004446B8(a1, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);

}

void sub_100437C24(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  sub_100445D94(a1, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);

}

void sub_100437C6C(void *a1, char a2, char a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  sub_1004472F4(a1, a2, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);

}

void sub_100437CA0(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  sub_10044D340(a1, a4);

}

unint64_t sub_100437CE8(char a1)
{
  return 0x4000200010000uLL >> (16 * a1);
}

void *sub_100437D04(void *a1, void *a2)
{
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  id v9;
  id v10;
  id v11;

  v4 = sub_1000C92E4(a1);
  if (v4)
  {
    v5 = v4;
    v6 = objc_opt_self(REMCDList);
    v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
    if (!v7)

  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(a2, "markedForDeletion");
  if (v7 && (v8 & 1) == 0)
  {
    v9 = v7;
    v10 = objc_msgSend(v9, "parentAccount");

    if (!v10)
    {
      v11 = objc_msgSend(v2, "account");
      objc_msgSend(v9, "setParentAccount:", v11);

      v9 = v11;
    }

  }
  return v7;
}

uint64_t sub_100437DE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  __int128 v7;

  sub_10043F934(a1, a2, a3, a4, a5, a6, &v7);
  return v7;
}

id sub_100437E08(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  NSString v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  id v30;
  uint64_t v31;

  v4 = objc_msgSend(v2, "remObjectID");
  if (!v4)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084AA70);
    v10 = v2;
    v5 = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      v30 = v10;
      v14 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      *v13 = v10;

      _os_log_impl((void *)&_mh_execute_header, v5, v11, "remObjectID is not defined for cdObject {cdObject: %@}", v12, 0xCu);
      v15 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v13, 1, v15);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      return 0;
    }
LABEL_17:

    return 0;
  }
  v5 = v4;
  v6 = objc_opt_self(REMCDAccount);
  v7 = (void *)swift_dynamicCastObjCClass(v2, v6);
  if (v7)
  {
    v8 = objc_msgSend(v7, "remObjectID");
    if (!v8)
    {
LABEL_12:
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v22 = type metadata accessor for Logger(0);
      sub_10001AAA8(v22, (uint64_t)qword_10084AA70);
      v10 = v2;
      v23 = Logger.logObject.getter(v10);
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v25 = 138412290;
        v30 = v10;
        v27 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
        *v26 = v10;

        _os_log_impl((void *)&_mh_execute_header, v23, v24, "accountID is not defined for cdObject {cdObject: %@}", v25, 0xCu);
        v28 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v26, 1, v28);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);

        return 0;
      }

      goto LABEL_17;
    }
  }
  else
  {
    v16 = objc_msgSend(v2, "account");
    if (!v16)
      goto LABEL_12;
    v17 = v16;
    v8 = objc_msgSend(v16, "remObjectID");

    if (!v8)
      goto LABEL_12;
  }
  v18 = objc_allocWithZone((Class)REMReplicaIDSource);
  v19 = v8;
  swift_bridgeObjectRetain(a2);
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v18, "initWithAccountID:objectID:property:", v19, v5, v20, swift_bridgeObjectRelease(a2).n128_f64[0]);

  return v21;
}

unint64_t sub_1004381F4()
{
  void *v0;
  unsigned int v1;
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  _StringGuts.grow(_:)(49);
  v1 = objc_msgSend(v0, "markedForDeletion", swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);
  v2 = v1 == 0;
  if (v1)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 0x707075736E75202CLL;
  v6._object = (void *)0xEE003D646574726FLL;
  String.append(_:)(v6);
  v7 = objc_msgSend(v0, "isUnsupported");
  v8 = v7 == 0;
  if (v7)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (v8)
    v10 = 0xE500000000000000;
  else
    v10 = 0xE400000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  return 0xD00000000000001FLL;
}

uint64_t sub_100438310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084AA70);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084AA70);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1004383A0(void *a1, char a2)
{
  void *v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSString v37;
  id v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSString v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  NSString v52;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = (uint64_t)v2;
  if ((a2 & 1) == 0)
  {
    v20 = objc_msgSend(v2, "getResolutionTokenMapFromRecord:", a1);
    v21 = v20;
    if (!v20)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v22 = type metadata accessor for Logger(0);
      sub_10001AAA8(v22, (uint64_t)qword_10084AA70);
      v23 = a1;
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc(22, -1);
        v56 = swift_slowAlloc(64, -1);
        v59 = v56;
        *(_DWORD *)v26 = 136446466;
        v27 = CKRecord.recordType.getter(v56);
        v29 = v28;
        v58 = sub_10001A820(v27, v28, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);

        *(_QWORD *)&v30 = swift_bridgeObjectRelease(v29).n128_u64[0];
        *(_WORD *)(v26 + 12) = 2082;
        v31 = objc_msgSend(v23, "recordID", v30);
        v32 = objc_msgSend(v31, "ckShortDescription");

        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        v35 = v34;

        v58 = sub_10001A820(v33, v35, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);

        swift_bridgeObjectRelease(v35);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v26, -1, -1);

      }
      else
      {

      }
      v21 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v54 = v20;
    v36 = 0;
LABEL_17:
    v3 = v36;
    while (v3 < 3)
    {
      v39 = *((unsigned __int8 *)&off_1007DD110 + v3 + 32);
      if (*((_BYTE *)&off_1007DD110 + v3 + 32))
      {
        if (v39 == 1)
          v40 = 0x4E79616C70736944;
        else
          v40 = 0x6574616C706D6554;
        if (v39 == 1)
          v41 = 0xEB00000000656D61;
        else
          v41 = 0xE800000000000000;
        if (v39 == 1)
          v42 = 0x4E79616C70736964;
        else
          v42 = 0x6574616C706D6574;
      }
      else
      {
        v42 = 0x6E6F697461657263;
        v41 = 0xEC00000065746144;
        v40 = 0x6E6F697461657243;
      }
      v43 = CKRecord.subscript.getter(v40, v41);
      swift_unknownObjectRelease(v43);
      if (v43
        || (v44 = objc_msgSend(a1, "encryptedValues"),
            v45 = String._bridgeToObjectiveC()(),
            v46 = objc_msgSend(v44, "objectForKeyedSubscript:", v45),
            swift_unknownObjectRelease(v46),
            swift_unknownObjectRelease(v44),
            v45,
            v46))
      {
        v37 = String._bridgeToObjectiveC()();
        v38 = objc_msgSend(v21, "getTokenForKey:", v37);

        if (!v38)
        {
          if (qword_1008374E8 != -1)
            swift_once(&qword_1008374E8, sub_100438310);
          v47 = type metadata accessor for Logger(0);
          sub_10001AAA8(v47, (uint64_t)qword_10084AA70);
          v48 = swift_bridgeObjectRetain_n(v41, 3);
          v49 = Logger.logObject.getter(v48);
          v50 = static os_log_type_t.default.getter(v49);
          if (os_log_type_enabled(v49, v50))
          {
            v51 = swift_slowAlloc(32, -1);
            v57 = swift_slowAlloc(96, -1);
            v59 = v57;
            *(_DWORD *)v51 = 136446722;
            swift_bridgeObjectRetain(v41);
            *(_QWORD *)(v51 + 4) = sub_10001A820(v42, v41, &v59);
            swift_bridgeObjectRelease_n(v41, 3);
            *(_WORD *)(v51 + 12) = 2082;
            swift_bridgeObjectRetain(v41);
            *(_QWORD *)(v51 + 14) = sub_10001A820(v40, v41, &v59);
            swift_bridgeObjectRelease_n(v41, 3);
            *(_WORD *)(v51 + 22) = 2082;
            *(_QWORD *)(v51 + 24) = sub_10001A820(7104878, 0xE300000000000000, &v59);
            _os_log_impl((void *)&_mh_execute_header, v49, v50, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v51, 0x20u);
            swift_arrayDestroy(v57, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v57, -1, -1);
            swift_slowDealloc(v51, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v41, 4);
          }
          v36 = v3 + 1;
          v52 = String._bridgeToObjectiveC()();
          objc_msgSend(v21, "initTokenWithDefaultValueIfNecessaryForKey:", v52, swift_bridgeObjectRelease(v41).n128_f64[0]);

          if (v3 == 2)
          {
LABEL_41:

            return v21;
          }
          goto LABEL_17;
        }
      }
      ++v3;
      swift_bridgeObjectRelease_n(v41, 2);
      if (v3 == 3)
        goto LABEL_41;
    }
    __break(1u);
    goto LABEL_44;
  }
  sub_10043FF44(a1);
  v5 = objc_msgSend(v2, "resolutionTokenMap");
  if (!v5)
  {
    if (qword_1008374E8 == -1)
    {
LABEL_4:
      v6 = type metadata accessor for Logger(0);
      sub_10001AAA8(v6, (uint64_t)qword_10084AA70);
      v7 = a1;
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = swift_slowAlloc(22, -1);
        v55 = swift_slowAlloc(64, -1);
        v59 = v55;
        *(_DWORD *)v10 = 136446466;
        v11 = CKRecord.recordType.getter(v55);
        v13 = v12;
        v58 = sub_10001A820(v11, v12, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);

        *(_QWORD *)&v14 = swift_bridgeObjectRelease(v13).n128_u64[0];
        *(_WORD *)(v10 + 12) = 2082;
        v15 = objc_msgSend(v7, "recordID", v14);
        v16 = objc_msgSend(v15, "ckShortDescription");

        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v19 = v18;

        v58 = sub_10001A820(v17, v19, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);

        swift_bridgeObjectRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v10, -1, -1);

      }
      else
      {

      }
      return objc_msgSend((id)v3, "createResolutionTokenMapIfNecessary");
    }
LABEL_44:
    swift_once(&qword_1008374E8, sub_100438310);
    goto LABEL_4;
  }
  return v5;
}

id sub_100438C04(void *a1, char a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  id v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];

  if ((a2 & 1) == 0)
  {
    v31 = objc_msgSend(v15, "getResolutionTokenMapFromRecord:", a1);
    if (!v31)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v32 = type metadata accessor for Logger(0);
      sub_10001AAA8(v32, (uint64_t)qword_10084AA70);
      v33 = a1;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc(22, -1);
        v49 = swift_slowAlloc(64, -1);
        v51[0] = v49;
        *(_DWORD *)v36 = 136446466;
        v37 = CKRecord.recordType.getter(v49);
        v39 = v38;
        v50 = sub_10001A820(v37, v38, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);

        *(_QWORD *)&v40 = swift_bridgeObjectRelease(v39).n128_u64[0];
        *(_WORD *)(v36 + 12) = 2082;
        v41 = objc_msgSend(v33, "recordID", v40);
        v42 = objc_msgSend(v41, "ckShortDescription");

        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

        v50 = sub_10001A820(v43, v45, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);

        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v36, 0x16u);
        swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

      }
      objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v31;
    JUMPOUT(0x1004393F0);
  }
  v47 = objc_msgSend(v15, "resolutionTokenMap", sub_1004403A0(a1));
  if (!v47)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10084AA70);
    v18 = a1;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v48 = swift_slowAlloc(64, -1);
      v51[0] = v48;
      *(_DWORD *)v21 = 136446466;
      v22 = CKRecord.recordType.getter(v48);
      v24 = v23;
      v50 = sub_10001A820(v22, v23, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);

      *(_QWORD *)&v25 = swift_bridgeObjectRelease(v24).n128_u64[0];
      *(_WORD *)(v21 + 12) = 2082;
      v26 = objc_msgSend(v18, "recordID", v25);
      v27 = objc_msgSend(v26, "ckShortDescription");

      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      v50 = sub_10001A820(v28, v30, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);

      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

    }
    return objc_msgSend(v15, "createResolutionTokenMapIfNecessary");
  }
  return v47;
}

id sub_100439758(void *a1, char a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[2];

  if ((a2 & 1) == 0)
  {
    v30 = objc_msgSend(v15, "getResolutionTokenMapFromRecord:", a1);
    if (!v30)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v31 = type metadata accessor for Logger(0);
      sub_10001AAA8(v31, (uint64_t)qword_10084AA70);
      v32 = a1;
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc(22, -1);
        v47 = swift_slowAlloc(64, -1);
        v49[0] = v47;
        *(_DWORD *)v35 = 136446466;
        v36 = CKRecord.recordType.getter(v47);
        v48 = sub_10001A820(v36, v37, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);

        *(_QWORD *)&v38 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v35 + 12) = 2082;
        v39 = objc_msgSend(v32, "recordID", v38);
        v40 = objc_msgSend(v39, "ckShortDescription");

        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v43 = v42;

        v48 = sub_10001A820(v41, v43, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

      }
      objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v30;
    JUMPOUT(0x100439FE8);
  }
  v45 = objc_msgSend(v15, "resolutionTokenMap", sub_100440978(a1));
  if (!v45)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10084AA70);
    v18 = a1;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v46 = swift_slowAlloc(64, -1);
      v49[0] = v46;
      *(_DWORD *)v21 = 136446466;
      v22 = CKRecord.recordType.getter(v46);
      v48 = sub_10001A820(v22, v23, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);

      *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v21 + 12) = 2082;
      v25 = objc_msgSend(v18, "recordID", v24);
      v26 = objc_msgSend(v25, "ckShortDescription");

      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      v48 = sub_10001A820(v27, v29, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

    }
    return objc_msgSend(v15, "createResolutionTokenMapIfNecessary");
  }
  return v45;
}

id sub_10043A35C(void *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  __int128 v40;
  _QWORD v42[2];
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  id v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  char *v54;
  char *v55;
  const char *v56;
  int v57;
  char *v58;
  char *v59;
  char *v60;
  const char *v61;
  char *v62;
  char *v63;
  char *v64;
  const char *v65;
  const char *v66;
  char *v67;
  const char *v68;
  uint64_t v69;
  id v70;
  id v71;
  const char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = a1;
  if ((a2 & 1) == 0)
  {
    v47 = v10;
    v48 = v7;
    v25 = objc_msgSend(v3, "getResolutionTokenMapFromRecord:", a1, v8);
    v70 = v25;
    v49 = v6;
    if (!v25)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      sub_10001AAA8(v6, (uint64_t)qword_10084AA70);
      v26 = v71;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc(22, -1);
        v30 = swift_slowAlloc(64, -1);
        v73 = (char *)v30;
        v75 = v30;
        *(_DWORD *)v29 = 136446466;
        v31 = CKRecord.recordType.getter(v30);
        v74 = sub_10001A820(v31, v32, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);

        *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v29 + 12) = 2082;
        v34 = objc_msgSend(v26, "recordID", v33);
        v35 = objc_msgSend(v34, "ckShortDescription");

        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v38 = v37;

        v74 = sub_10001A820(v36, v38, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v29, 0x16u);
        v39 = v73;
        swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

      }
      v70 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v45 = &v75;
    v46 = v25;
    v57 = 0;
    v44 = 20;
    v72 = "SectionIDsOrderingAsData";
    v73 = "lete";
    v67 = "ableOrderingAsset";
    v68 = "groceryLocalCorrectionsChecksum";
    v65 = "minimumSupportedVersion";
    v66 = "groceryLocalCorrectionsAsData";
    v59 = "l";
    v60 = "difiedDate";
    v63 = "indersInSectionsChecksum";
    v64 = "indersInSectionsAsData";
    v58 = "ableOrderingAsset";
    v61 = "lastUserAccessDate";
    v62 = "TemplateIdentifier";
    *(_QWORD *)&v40 = 136446722;
    v43 = v40;
    v42[1] = (char *)&type metadata for Any + 8;
    v56 = "GroceryLocalCorrectionsAsData";
    v55 = "hould never happen";
    v54 = "TemplateIdentifier";
    v53 = "IsLinkedToAccount";
    v52 = "LastUserAccessDate";
    v51 = "ShowingLargeAttachments";
    v50 = "ReminderIDsAsset";
    v69 = 21;
    JUMPOUT(0x10043AACCLL);
  }
  v70 = objc_msgSend(v3, "resolutionTokenMap", sub_100440FD4(a1));
  if (!v70)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    sub_10001AAA8(v6, (uint64_t)qword_10084AA70);
    v11 = v71;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v73 = (char *)v15;
      v75 = v15;
      *(_DWORD *)v14 = 136446466;
      v16 = CKRecord.recordType.getter(v15);
      v74 = sub_10001A820(v16, v17, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);

      *(_QWORD *)&v18 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v14 + 12) = 2082;
      v19 = objc_msgSend(v11, "recordID", v18);
      v20 = objc_msgSend(v19, "ckShortDescription");

      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      v74 = sub_10001A820(v21, v23, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v14, 0x16u);
      v24 = v73;
      swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
    return objc_msgSend(v3, "createResolutionTokenMapIfNecessary");
  }
  return v70;
}

id sub_10043B8BC(char *a1, char a2)
{
  void *v2;
  NSString v3;
  char *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  NSString v46;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v3 = v2;
  v4 = a1;
  if ((a2 & 1) == 0)
  {
    v3 = objc_msgSend(v2, "getResolutionTokenMapFromRecord:", a1);
    v50 = v3;
    if (!v3)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v18 = type metadata accessor for Logger(0);
      sub_10001AAA8(v18, (uint64_t)qword_10084AA70);
      v19 = v4;
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(22, -1);
        v52 = (id)swift_slowAlloc(64, -1);
        v55 = (uint64_t)v52;
        *(_DWORD *)v22 = 136446466;
        v23 = CKRecord.recordType.getter(v52);
        v54 = sub_10001A820(v23, v24, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

        *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v22 + 12) = 2082;
        v26 = objc_msgSend(v19, "recordID", v25);
        v27 = objc_msgSend(v26, "ckShortDescription");

        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v30 = v29;

        v54 = sub_10001A820(v28, v30, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v22, -1, -1);

      }
      else
      {

      }
      v50 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v53 = v4;
    v31 = 0;
    v48 = v3;
LABEL_17:
    v4 = v31;
    while ((unint64_t)v4 < 0x1B)
    {
      v32 = *((unsigned __int8 *)&off_1007DD8B0 + (_QWORD)v4 + 32);
      v33 = v4 + 1;
      if (((1 << v32) & 0x5DBEBE6) != 0)
      {
        sub_1002ED498(*((_BYTE *)&off_1007DD8B0 + (_QWORD)v4 + 32));
        __asm { BR              X9 }
      }
      if (((1 << v32) & 0x2241019) == 0)
      {
        v34 = sub_1002ED498(0xAu);
        v36 = v35;
        v37 = CKRecord.subscript.getter(0xD000000000000016, 0x80000001006FF830);
        swift_unknownObjectRelease(v37);
        if (v37
          || (v38 = objc_msgSend(v53, "encryptedValues"),
              v3 = String._bridgeToObjectiveC()(),
              v39 = objc_msgSend(v38, "objectForKeyedSubscript:", v3),
              swift_unknownObjectRelease(v39),
              swift_unknownObjectRelease(v38),
              v3,
              v39))
        {
          v40 = String._bridgeToObjectiveC()();
          v3 = objc_msgSend(v50, "getTokenForKey:", v40);

          if (!v3)
          {
            if (qword_1008374E8 != -1)
              swift_once(&qword_1008374E8, sub_100438310);
            v41 = type metadata accessor for Logger(0);
            sub_10001AAA8(v41, (uint64_t)qword_10084AA70);
            swift_bridgeObjectRetain_n(v36, 2);
            swift_bridgeObjectRetain(0x80000001006FF830);
            v43 = Logger.logObject.getter(v42);
            v44 = static os_log_type_t.default.getter(v43);
            v3 = (NSString)v44;
            if (os_log_type_enabled(v43, v44))
            {
              v45 = swift_slowAlloc(32, -1);
              v49 = swift_slowAlloc(96, -1);
              v55 = v49;
              *(_DWORD *)v45 = 136446722;
              swift_bridgeObjectRetain(v36);
              *(_QWORD *)(v45 + 4) = sub_10001A820(v34, v36, &v55);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n(v36, 2);
              *(_WORD *)(v45 + 12) = 2082;
              swift_bridgeObjectRetain(0x80000001006FF830);
              *(_QWORD *)(v45 + 14) = sub_10001A820(0xD000000000000016, 0x80000001006FF830, &v55);
              swift_bridgeObjectRelease_n(0x80000001006FF830, 3);
              *(_WORD *)(v45 + 22) = 2082;
              *(_QWORD *)(v45 + 24) = sub_10001A820(7104878, 0xE300000000000000, &v55);
              _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v3, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v45, 0x20u);
              swift_arrayDestroy(v49, 3, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v49, -1, -1);
              swift_slowDealloc(v45, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(0x80000001006FF830, 2);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v31 = v4 + 1;
            v46 = String._bridgeToObjectiveC()();
            objc_msgSend(v50, "initTokenWithDefaultValueIfNecessaryForKey:", v46, swift_bridgeObjectRelease().n128_f64[0]);

            if (v4 == (char *)26)
            {
LABEL_33:

              return v50;
            }
            goto LABEL_17;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      ++v4;
      if (v33 == (char *)27)
        goto LABEL_33;
    }
    __break(1u);
LABEL_36:
    swift_once(&qword_1008374E8, sub_100438310);
    goto LABEL_4;
  }
  sub_100441614(a1);
  v50 = objc_msgSend(v2, "resolutionTokenMap");
  if (v50)
    return v50;
  if (qword_1008374E8 != -1)
    goto LABEL_36;
LABEL_4:
  v5 = type metadata accessor for Logger(0);
  sub_10001AAA8(v5, (uint64_t)qword_10084AA70);
  v6 = v4;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v51 = (id)swift_slowAlloc(64, -1);
    v55 = (uint64_t)v51;
    *(_DWORD *)v9 = 136446466;
    v10 = CKRecord.recordType.getter(v51);
    v54 = sub_10001A820(v10, v11, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

    *(_QWORD *)&v12 = swift_bridgeObjectRelease().n128_u64[0];
    *(_WORD *)(v9 + 12) = 2082;
    v13 = objc_msgSend(v6, "recordID", v12);
    v14 = objc_msgSend(v13, "ckShortDescription");

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v54 = sub_10001A820(v15, v17, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
  return objc_msgSend(v3, "createResolutionTokenMapIfNecessary");
}

id sub_10043C46C(void *a1, char a2)
{
  void *v2;
  NSString v3;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSString v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  NSString v49;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  if ((a2 & 1) == 0)
  {
    v19 = objc_msgSend(v2, "getResolutionTokenMapFromRecord:", a1);
    v20 = v19;
    if (!v19)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v21 = type metadata accessor for Logger(0);
      sub_10001AAA8(v21, (uint64_t)qword_10084AA70);
      v22 = a1;
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc(22, -1);
        v54 = swift_slowAlloc(64, -1);
        v56 = v54;
        *(_DWORD *)v25 = 136446466;
        v26 = CKRecord.recordType.getter(v54);
        v55 = sub_10001A820(v26, v27, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

        *(_QWORD *)&v28 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v25 + 12) = 2082;
        v29 = objc_msgSend(v22, "recordID", v28);
        v30 = objc_msgSend(v29, "ckShortDescription");

        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

        v55 = sub_10001A820(v31, v33, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v25, -1, -1);

      }
      else
      {

      }
      v20 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v51 = v19;
    v3 = 0;
LABEL_17:
    v34 = (uint64_t)v3;
    while (v34 < 3)
    {
      v36 = *((unsigned __int8 *)&off_1007DDC48 + v34 + 32);
      if (*((_BYTE *)&off_1007DDC48 + v34 + 32))
      {
        if (v36 == 1)
          v37 = 0xD00000000000001DLL;
        else
          v37 = 0x6574616C706D6554;
        if (v36 == 1)
          v38 = 0x80000001006FFD10;
        else
          v38 = 0xE800000000000000;
        if (v36 == 1)
          v39 = 0xD00000000000001DLL;
        else
          v39 = 0x6574616C706D6574;
        if (v36 == 1)
          v40 = 0x80000001006F4AB0;
        else
          v40 = 0xE800000000000000;
      }
      else
      {
        v39 = 0x617461646174656DLL;
        v38 = 0xE800000000000000;
        v37 = 0x617461646174654DLL;
        v40 = 0xE800000000000000;
      }
      v41 = CKRecord.subscript.getter(v37, v38);
      swift_unknownObjectRelease(v41);
      if (v41
        || (v42 = objc_msgSend(a1, "encryptedValues"),
            v3 = String._bridgeToObjectiveC()(),
            v43 = objc_msgSend(v42, "objectForKeyedSubscript:", v3),
            swift_unknownObjectRelease(v43),
            swift_unknownObjectRelease(v42),
            v3,
            v43))
      {
        v35 = String._bridgeToObjectiveC()();
        v3 = objc_msgSend(v20, "getTokenForKey:", v35);

        if (!v3)
        {
          if (qword_1008374E8 != -1)
            swift_once(&qword_1008374E8, sub_100438310);
          v44 = type metadata accessor for Logger(0);
          sub_10001AAA8(v44, (uint64_t)qword_10084AA70);
          swift_bridgeObjectRetain_n(v40, 2);
          swift_bridgeObjectRetain(v38);
          v46 = Logger.logObject.getter(v45);
          v47 = static os_log_type_t.default.getter(v46);
          if (os_log_type_enabled(v46, v47))
          {
            v48 = swift_slowAlloc(32, -1);
            v52 = swift_slowAlloc(96, -1);
            v56 = v52;
            *(_DWORD *)v48 = 136446722;
            swift_bridgeObjectRetain(v40);
            *(_QWORD *)(v48 + 4) = sub_10001A820(v39, v40, &v56);
            swift_bridgeObjectRelease_n(v40, 3);
            *(_WORD *)(v48 + 12) = 2082;
            swift_bridgeObjectRetain(v38);
            *(_QWORD *)(v48 + 14) = sub_10001A820(v37, v38, &v56);
            swift_bridgeObjectRelease_n(v38, 3);
            *(_WORD *)(v48 + 22) = 2082;
            *(_QWORD *)(v48 + 24) = sub_10001A820(7104878, 0xE300000000000000, &v56);
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v48, 0x20u);
            swift_arrayDestroy(v52, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v52, -1, -1);
            swift_slowDealloc(v48, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v38, 2);
            swift_bridgeObjectRelease_n(v40, 2);
          }
          v3 = (NSString)(v34 + 1);
          v49 = String._bridgeToObjectiveC()();
          objc_msgSend(v20, "initTokenWithDefaultValueIfNecessaryForKey:", v49, swift_bridgeObjectRelease().n128_f64[0]);

          if (v34 == 2)
          {
LABEL_44:

            return v20;
          }
          goto LABEL_17;
        }
      }
      ++v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v34 == 3)
        goto LABEL_44;
    }
    __break(1u);
    goto LABEL_47;
  }
  sub_100441A1C(a1);
  v5 = objc_msgSend(v2, "resolutionTokenMap");
  if (!v5)
  {
    if (qword_1008374E8 == -1)
    {
LABEL_4:
      v6 = type metadata accessor for Logger(0);
      sub_10001AAA8(v6, (uint64_t)qword_10084AA70);
      v7 = a1;
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = swift_slowAlloc(22, -1);
        v53 = swift_slowAlloc(64, -1);
        v56 = v53;
        *(_DWORD *)v10 = 136446466;
        v11 = CKRecord.recordType.getter(v53);
        v55 = sub_10001A820(v11, v12, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

        *(_QWORD *)&v13 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v10 + 12) = 2082;
        v14 = objc_msgSend(v7, "recordID", v13);
        v15 = objc_msgSend(v14, "ckShortDescription");

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        v55 = sub_10001A820(v16, v18, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v10, -1, -1);

      }
      else
      {

      }
      return objc_msgSend(v3, "createResolutionTokenMapIfNecessary");
    }
LABEL_47:
    swift_once(&qword_1008374E8, sub_100438310);
    goto LABEL_4;
  }
  return v5;
}

id sub_10043CCFC(void *a1, char a2)
{
  void *v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSString v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  NSString v50;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = (uint64_t)v2;
  if ((a2 & 1) == 0)
  {
    v19 = objc_msgSend(v2, "getResolutionTokenMapFromRecord:", a1);
    v20 = v19;
    if (!v19)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v21 = type metadata accessor for Logger(0);
      sub_10001AAA8(v21, (uint64_t)qword_10084AA70);
      v22 = a1;
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.error.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc(22, -1);
        v54 = swift_slowAlloc(64, -1);
        v57 = v54;
        *(_DWORD *)v25 = 136446466;
        v26 = CKRecord.recordType.getter(v54);
        v56 = sub_10001A820(v26, v27, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);

        *(_QWORD *)&v28 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v25 + 12) = 2082;
        v29 = objc_msgSend(v22, "recordID", v28);
        v30 = objc_msgSend(v29, "ckShortDescription");

        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

        v56 = sub_10001A820(v31, v33, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v25, -1, -1);

      }
      else
      {

      }
      v20 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v52 = v19;
    v34 = 0;
LABEL_17:
    v3 = v34;
    while (v3 < 3)
    {
      v37 = *((unsigned __int8 *)&off_1007DDD38 + v3 + 32);
      if (*((_BYTE *)&off_1007DDD38 + v3 + 32))
      {
        if (v37 == 1)
          v38 = 0x4E79616C70736944;
        else
          v38 = 0x73694C7472616D53;
        if (v37 == 1)
          v39 = 0xEB00000000656D61;
        else
          v39 = 0xE900000000000074;
        if (v37 == 1)
          v40 = 0x4E79616C70736964;
        else
          v40 = 0x73694C7472616D73;
      }
      else
      {
        v40 = 0x6E6F697461657263;
        v39 = 0xEC00000065746144;
        v38 = 0x6E6F697461657243;
      }
      v41 = CKRecord.subscript.getter(v38, v39);
      swift_unknownObjectRelease(v41);
      if (v41
        || (v42 = objc_msgSend(a1, "encryptedValues"),
            v43 = String._bridgeToObjectiveC()(),
            v44 = objc_msgSend(v42, "objectForKeyedSubscript:", v43),
            swift_unknownObjectRelease(v44),
            swift_unknownObjectRelease(v42),
            v43,
            v44))
      {
        v35 = String._bridgeToObjectiveC()();
        v36 = objc_msgSend(v20, "getTokenForKey:", v35);

        if (!v36)
        {
          if (qword_1008374E8 != -1)
            swift_once(&qword_1008374E8, sub_100438310);
          v45 = type metadata accessor for Logger(0);
          sub_10001AAA8(v45, (uint64_t)qword_10084AA70);
          v46 = swift_bridgeObjectRetain_n(v39, 3);
          v47 = Logger.logObject.getter(v46);
          v48 = static os_log_type_t.default.getter(v47);
          if (os_log_type_enabled(v47, v48))
          {
            v49 = swift_slowAlloc(32, -1);
            v55 = swift_slowAlloc(96, -1);
            v57 = v55;
            *(_DWORD *)v49 = 136446722;
            swift_bridgeObjectRetain(v39);
            *(_QWORD *)(v49 + 4) = sub_10001A820(v40, v39, &v57);
            swift_bridgeObjectRelease_n(v39, 3);
            *(_WORD *)(v49 + 12) = 2082;
            swift_bridgeObjectRetain(v39);
            *(_QWORD *)(v49 + 14) = sub_10001A820(v38, v39, &v57);
            swift_bridgeObjectRelease_n(v39, 3);
            *(_WORD *)(v49 + 22) = 2082;
            *(_QWORD *)(v49 + 24) = sub_10001A820(7104878, 0xE300000000000000, &v57);
            _os_log_impl((void *)&_mh_execute_header, v47, v48, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v49, 0x20u);
            swift_arrayDestroy(v55, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v55, -1, -1);
            swift_slowDealloc(v49, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v39, 4);
          }
          v34 = v3 + 1;
          v50 = String._bridgeToObjectiveC()();
          objc_msgSend(v20, "initTokenWithDefaultValueIfNecessaryForKey:", v50, swift_bridgeObjectRelease().n128_f64[0]);

          if (v3 == 2)
          {
LABEL_41:

            return v20;
          }
          goto LABEL_17;
        }
      }
      ++v3;
      swift_bridgeObjectRelease_n(v39, 2);
      if (v3 == 3)
        goto LABEL_41;
    }
    __break(1u);
    goto LABEL_44;
  }
  sub_100441E74(a1);
  v5 = objc_msgSend(v2, "resolutionTokenMap");
  if (!v5)
  {
    if (qword_1008374E8 == -1)
    {
LABEL_4:
      v6 = type metadata accessor for Logger(0);
      sub_10001AAA8(v6, (uint64_t)qword_10084AA70);
      v7 = a1;
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = swift_slowAlloc(22, -1);
        v53 = swift_slowAlloc(64, -1);
        v57 = v53;
        *(_DWORD *)v10 = 136446466;
        v11 = CKRecord.recordType.getter(v53);
        v56 = sub_10001A820(v11, v12, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);

        *(_QWORD *)&v13 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v10 + 12) = 2082;
        v14 = objc_msgSend(v7, "recordID", v13);
        v15 = objc_msgSend(v14, "ckShortDescription");

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        v56 = sub_10001A820(v16, v18, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v10, -1, -1);

      }
      else
      {

      }
      return objc_msgSend((id)v3, "createResolutionTokenMapIfNecessary");
    }
LABEL_44:
    swift_once(&qword_1008374E8, sub_100438310);
    goto LABEL_4;
  }
  return v5;
}

id sub_10043D564(void *a1, char a2)
{
  void *v2;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  NSString v41;
  id v42;
  NSString v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if ((a2 & 1) != 0)
  {
    sub_1004422D4(a1);
    v4 = objc_msgSend(v2, "resolutionTokenMap");
    if (v4)
    {
      return v4;
    }
    else
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v20 = type metadata accessor for Logger(0);
      sub_10001AAA8(v20, (uint64_t)qword_10084AA70);
      v21 = a1;
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc(22, -1);
        v54 = swift_slowAlloc(64, -1);
        v56 = v54;
        *(_DWORD *)v24 = 136446466;
        v25 = CKRecord.recordType.getter(v54);
        v55 = sub_10001A820(v25, v26, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

        *(_QWORD *)&v27 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v24 + 12) = 2082;
        v28 = objc_msgSend(v21, "recordID", v27);
        v29 = objc_msgSend(v28, "ckShortDescription");

        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v32 = v31;

        v55 = sub_10001A820(v30, v32, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v24, -1, -1);

      }
      else
      {

      }
      return objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    }
  }
  else
  {
    v6 = objc_msgSend(v2, "getResolutionTokenMapFromRecord:", a1);
    v5 = v6;
    if (!v6)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v7 = type metadata accessor for Logger(0);
      sub_10001AAA8(v7, (uint64_t)qword_10084AA70);
      v8 = a1;
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.error.getter(v9);
      if (os_log_type_enabled(v9, v10))
      {
        v11 = swift_slowAlloc(22, -1);
        v53 = swift_slowAlloc(64, -1);
        v56 = v53;
        *(_DWORD *)v11 = 136446466;
        v12 = CKRecord.recordType.getter(v53);
        v55 = sub_10001A820(v12, v13, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

        *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v11 + 12) = 2082;
        v15 = objc_msgSend(v8, "recordID", v14);
        v16 = objc_msgSend(v15, "ckShortDescription");

        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v19 = v18;

        v55 = sub_10001A820(v17, v19, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v11, -1, -1);

      }
      else
      {

      }
      v5 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v33 = (void *)objc_opt_self(REMCDObject);
    v34 = v6;
    v35 = objc_msgSend(v33, "ckRecordKeyForMinimumSupportedVersion");
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v39 = CKRecord.subscript.getter(v36, v38);
    swift_unknownObjectRelease(v39);
    if (!v39)
    {
      v40 = objc_msgSend(a1, "encryptedValues");
      v41 = String._bridgeToObjectiveC()();
      v42 = objc_msgSend(v40, "objectForKeyedSubscript:", v41);
      swift_unknownObjectRelease(v42);
      swift_unknownObjectRelease(v40);

      if (!v42)
        goto LABEL_18;
    }
    v43 = String._bridgeToObjectiveC()();
    v44 = objc_msgSend(v5, "getTokenForKey:", v43);

    if (!v44)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v45 = type metadata accessor for Logger(0);
      sub_10001AAA8(v45, (uint64_t)qword_10084AA70);
      swift_bridgeObjectRetain(v38);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = swift_slowAlloc(32, -1);
        v50 = swift_slowAlloc(96, -1);
        v56 = v50;
        *(_DWORD *)v49 = 136446722;
        *(_QWORD *)(v49 + 4) = sub_10001A820(0xD000000000000017, 0x80000001006F4060, &v56);
        *(_WORD *)(v49 + 12) = 2082;
        swift_bridgeObjectRetain(v38);
        *(_QWORD *)(v49 + 14) = sub_10001A820(v36, v38, &v56);
        swift_bridgeObjectRelease_n(v38, 3);
        *(_WORD *)(v49 + 22) = 2082;
        *(_QWORD *)(v49 + 24) = sub_10001A820(7104878, 0xE300000000000000, &v56);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}", (uint8_t *)v49, 0x20u);
        swift_arrayDestroy(v50, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v38, 2);
      }
      v51 = String._bridgeToObjectiveC()();
      objc_msgSend(v5, "initTokenWithDefaultValueIfNecessaryForKey:", v51);

    }
    else
    {
LABEL_18:
      swift_bridgeObjectRelease();

    }
  }
  return v5;
}

id sub_10043DD10(void *a1, char a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  id result;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if ((a2 & 1) == 0)
  {
    v29 = objc_msgSend(v13, "getResolutionTokenMapFromRecord:", a1);
    if (!v29)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v30 = type metadata accessor for Logger(0);
      sub_10001AAA8(v30, (uint64_t)qword_10084AA70);
      v31 = a1;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(22, -1);
        v44 = swift_slowAlloc(64, -1);
        v46 = v44;
        *(_DWORD *)v34 = 136446466;
        v35 = CKRecord.recordType.getter(v44);
        v45 = sub_10001A820(v35, v36, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

        *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v34 + 12) = 2082;
        v38 = objc_msgSend(v31, "recordID", v37);
        v39 = objc_msgSend(v38, "ckShortDescription");

        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

        v45 = sub_10001A820(v40, v42, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

      }
      objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v29;
    JUMPOUT(0x10043E308);
  }
  result = objc_msgSend(v13, "resolutionTokenMap", sub_100442660(a1));
  if (!result)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_10084AA70);
    v17 = a1;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v43 = swift_slowAlloc(64, -1);
      v46 = v43;
      *(_DWORD *)v20 = 136446466;
      v21 = CKRecord.recordType.getter(v43);
      v45 = sub_10001A820(v21, v22, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

      *(_QWORD *)&v23 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v20 + 12) = 2082;
      v24 = objc_msgSend(v17, "recordID", v23);
      v25 = objc_msgSend(v24, "ckShortDescription");

      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v45 = sub_10001A820(v26, v28, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

    }
    return objc_msgSend(v13, "createResolutionTokenMapIfNecessary");
  }
  return result;
}

id sub_10043E5D0(void *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  id v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  __int128 v41;
  _QWORD v43[2];
  __int128 v44;
  uint64_t v45;
  id v46;
  void *v47;
  char *v48;
  const char *v49;
  const char *v50;
  char *v51;
  const char *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  int v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66[2];

  v3 = v2;
  v6 = type metadata accessor for REMFeatureFlags(0);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  *(_QWORD *)&v7 = __chkstk_darwin(v6).n128_u64[0];
  v58 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    v24 = objc_msgSend(v3, "getResolutionTokenMapFromRecord:", a1, v7);
    v61 = v24;
    if (!v24)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v25 = type metadata accessor for Logger(0);
      sub_10001AAA8(v25, (uint64_t)qword_10084AA70);
      v26 = a1;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc(22, -1);
        v47 = a1;
        v30 = v29;
        v31 = swift_slowAlloc(64, -1);
        v66[0] = v31;
        *(_DWORD *)v30 = 136446466;
        v32 = CKRecord.recordType.getter(v31);
        v65 = sub_10001A820(v32, v33, v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);

        *(_QWORD *)&v34 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v30 + 12) = 2082;
        v64 = (char *)(v30 + 14);
        v35 = objc_msgSend(v26, "recordID", v34);
        v36 = objc_msgSend(v35, "ckShortDescription");

        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v39 = v38;

        v65 = sub_10001A820(v37, v39, v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

      }
      else
      {

      }
      v61 = objc_msgSend(objc_allocWithZone((Class)REMResolutionTokenMap), "init");
    }
    v57 = enum case for REMFeatureFlags.groceryMultilingual(_:);
    v56 = enum case for REMFeatureFlags.recentlyDeletedList(_:);
    v40 = v24;
    LODWORD(v47) = 0;
    v45 = 9;
    v46 = v40;
    v63 = "DidFinishMigration";
    v64 = "";
    *(_QWORD *)&v41 = 136446722;
    v44 = v41;
    v43[1] = (char *)&type metadata for Any + 8;
    v54 = "RecentlyDeletedInfoChecksum";
    v55 = "didChooseToMigrateLocally";
    v52 = "ListIDsMergeableOrderingAsset";
    v53 = "smartListIDsToUndelete";
    v50 = "remindd.RDVehicleAlarmProducer";
    v51 = "LocalesInfoAsData";
    v48 = "LocalesInfoChecksum";
    v49 = "recentlyDeletedInfoAsData";
    v62 = 10;
    JUMPOUT(0x10043ED78);
  }
  v61 = objc_msgSend(v3, "resolutionTokenMap", sub_100442AF0(a1));
  if (!v61)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084AA70);
    v10 = a1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(64, -1);
      v64 = (char *)v14;
      v66[0] = v14;
      *(_DWORD *)v13 = 136446466;
      v15 = CKRecord.recordType.getter(v14);
      v65 = sub_10001A820(v15, v16, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);

      *(_QWORD *)&v17 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v13 + 12) = 2082;
      v18 = objc_msgSend(v10, "recordID", v17);
      v19 = objc_msgSend(v18, "ckShortDescription");

      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      v65 = sub_10001A820(v20, v22, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v13, 0x16u);
      v23 = v64;
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    return objc_msgSend(v3, "createResolutionTokenMapIfNecessary");
  }
  return v61;
}

uint64_t sub_10043F0AC(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8)
{
  return sub_10043F17C(a1, a2, a3, a4, a5, a6, a7, a8, (Class *)REMCRMergeableStringDocument_ptr, (uint64_t (*)(void))sub_100259BE8, (SEL *)&selRef_mergedWithDocument_error_);
}

uint64_t sub_10043F114(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8)
{
  return sub_10043F17C(a1, a2, a3, a4, a5, a6, a7, a8, (Class *)REMCRMergeableOrderedSet_ptr, (uint64_t (*)(void))sub_100259BE8, (SEL *)&selRef_mergedOrderedSetWithOrderedSet_error_);
}

uint64_t sub_10043F17C(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8, Class *a9, uint64_t (*a10)(void), SEL *a11)
{
  uint64_t v12;
  id v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  NSObject *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  id v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  os_log_type_t type;
  _QWORD *v60;
  void *v61;
  void *v62;
  NSObject *v63;
  NSObject *loga;
  os_log_t log;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD v69[3];
  char v70[16];
  uint64_t v71;
  id v72;

  v12 = a2;
  if (a5 >> 60 == 15)
  {
    *a1 = 0;
    sub_1000A70D0(a2, a3);
  }
  else if (a3 >> 60 == 15)
  {
    *a1 = 0;
    sub_1000A70E4(a4, a5);
    return a4;
  }
  else
  {
    sub_1000A70D0(a2, a3);
    sub_1000A70D0(a4, a5);
    v66 = a6;
    v19 = sub_100437E08(a6, a7);
    if (v19)
    {
      v20 = v19;
      v67 = a1;
      v21 = objc_allocWithZone(*a9);
      sub_1000A70D0(v12, a3);
      v22 = v20;
      log = (os_log_t)a10();
      sub_1000A71B4(v12, a3);

      v30 = objc_allocWithZone(*a9);
      sub_1000A70D0(a4, a5);
      v63 = v22;
      v31 = v22;
      v45 = (void *)a10();
      sub_1000A71B4(a4, a5);
      v46 = v31;

      v72 = 0;
      v47 = objc_msgSend(log, *a11, v45, &v72);
      v48 = v72;
      if (v47)
      {
        v49 = v47;
        *v67 = v47;
        v50 = v48;
        v51 = v49;
        v52 = objc_msgSend(v51, "serializedData");
        v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v52);

        sub_1000A71B4(a4, a5);
        sub_1000A71B4(v12, a3);

        return v53;
      }
      else
      {
        v55 = v72;
        v56 = _convertNSErrorToError(_:)(v48);

        swift_willThrow(v57);
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v32 = type metadata accessor for Logger(0);
        sub_10001AAA8(v32, (uint64_t)qword_10084AA70);
        swift_bridgeObjectRetain(a7);
        v33 = a8;
        swift_errorRetain(v56);
        swift_bridgeObjectRetain(a7);
        v34 = v33;
        v35 = swift_errorRetain(v56);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          type = v37;
          v38 = swift_slowAlloc(32, -1);
          v58 = (_QWORD *)swift_slowAlloc(8, -1);
          v61 = (void *)swift_slowAlloc(64, -1);
          v72 = v61;
          *(_DWORD *)v38 = 136446722;
          swift_bridgeObjectRetain(a7);
          v71 = sub_10001A820(v66, a7, (uint64_t *)&v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
          swift_bridgeObjectRelease_n(a7, 3);
          *(_WORD *)(v38 + 12) = 2112;
          v71 = (uint64_t)v34;
          v39 = v56;
          v40 = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
          *v58 = v34;

          *(_WORD *)(v38 + 22) = 2082;
          swift_getErrorValue(v39, v70, v69);
          v41 = Error.localizedDescription.getter(v69[1], v69[2]);
          v71 = sub_10001A820(v41, v42, (uint64_t *)&v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
          swift_bridgeObjectRelease();
          swift_errorRelease(v39);
          swift_errorRelease(v39);
          _os_log_impl((void *)&_mh_execute_header, v36, type, "Unable to merge CR property from CKRecord into coredata object {key: %{public}s, cdObject: %@, error: %{public}s}", (uint8_t *)v38, 0x20u);
          v43 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v58, 1, v43);
          swift_slowDealloc(v58, -1, -1);
          swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v61, -1, -1);
          swift_slowDealloc(v38, -1, -1);

          sub_1000A71B4(a4, a5);
          swift_errorRelease(v39);
          v44 = v63;
        }
        else
        {

          sub_1000A71B4(a4, a5);
          swift_errorRelease(v56);

          swift_bridgeObjectRelease_n(a7, 2);
          swift_errorRelease(v56);
          swift_errorRelease(v56);
          v44 = v36;
        }

        *v67 = 0;
      }
    }
    else
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v23 = type metadata accessor for Logger(0);
      sub_10001AAA8(v23, (uint64_t)qword_10084AA70);
      swift_bridgeObjectRetain_n(a7, 2);
      v24 = a8;
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter();
      loga = v25;
      if (os_log_type_enabled(v25, v26))
      {
        v68 = a1;
        v27 = swift_slowAlloc(22, -1);
        v60 = (_QWORD *)swift_slowAlloc(8, -1);
        v62 = (void *)swift_slowAlloc(32, -1);
        v72 = v62;
        *(_DWORD *)v27 = 136446466;
        swift_bridgeObjectRetain(a7);
        v71 = sub_10001A820(v66, a7, (uint64_t *)&v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
        swift_bridgeObjectRelease_n(a7, 3);
        *(_WORD *)(v27 + 12) = 2112;
        v71 = (uint64_t)v24;
        v28 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
        *v60 = v24;

        _os_log_impl((void *)&_mh_execute_header, loga, v26, "Unable to merge CR property from CKRecord into coredata object because replicaIDSource isn't available {key: %{public}s, cdObject: %@}", (uint8_t *)v27, 0x16u);
        v29 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v60, 1, v29);
        swift_slowDealloc(v60, -1, -1);
        swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v27, -1, -1);

        sub_1000A71B4(a4, a5);
        *v68 = 0;
      }
      else
      {
        sub_1000A71B4(a4, a5);

        swift_bridgeObjectRelease_n(a7, 2);
        *a1 = 0;
      }
    }
  }
  return v12;
}

uint64_t sub_10043F934@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, _OWORD *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  NSString v37;
  unsigned int v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;

  v43 = a4;
  v44 = a7;
  v12 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v12);
  v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)v42 - v16;
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v42[2] = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v22 = __chkstk_darwin(v21).n128_u64[0];
  v24 = (char *)v42 - v23;
  if ((a6 & 1) != 0)
  {
    v25 = objc_msgSend(a1, "encryptedValues", v22);
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v25, "objectForKeyedSubscript:", v26);
    swift_unknownObjectRelease(v25);

    v46 = (uint64_t)v27;
  }
  else
  {
    v46 = CKRecord.subscript.getter(a2, a3);
  }
  v28 = sub_10001A630((uint64_t *)&unk_10084AB08);
  result = swift_dynamicCast(&v45, &v46, v28, &type metadata for Data, 6);
  if ((result & 1) != 0)
  {
    *v44 = v45;
    return result;
  }
  v30 = CKRecord.subscript.getter(v43, a5);
  if (!v30)
    goto LABEL_11;
  v31 = v30;
  v32 = objc_opt_self(CKAsset);
  v33 = (void *)swift_dynamicCastObjCClass(v31, v32);
  if (!v33)
  {
    swift_unknownObjectRelease(v31);
LABEL_11:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_14:
    result = sub_10000882C((uint64_t)v17, (uint64_t *)&unk_100839C70);
LABEL_15:
    *v44 = xmmword_1006BC630;
    return result;
  }
  v34 = objc_msgSend(v33, "fileURL");
  swift_unknownObjectRelease(v31);
  if (v34)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v34);

    v35 = 0;
  }
  else
  {
    v35 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v14, v35, 1, v18);
  sub_1000A5CA8((uint64_t)v14, (uint64_t)v17, (uint64_t *)&unk_100839C70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    goto LABEL_14;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v17, v18);
  v36 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v36);
  v37 = String._bridgeToObjectiveC()();
  v38 = objc_msgSend(v36, "fileExistsAtPath:", v37, swift_bridgeObjectRelease().n128_f64[0]);

  if (!v38)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v24, v18);
    goto LABEL_15;
  }
  v39 = Data.init(contentsOf:options:)(v24, 0);
  v40 = v44;
  *(_QWORD *)v44 = v39;
  *((_QWORD *)v40 + 1) = v41;
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v24, v18);
}

void sub_10043FF44(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  double (*__ptr32 *v12)();
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  _UNKNOWN **v22;
  char **v23;
  id v24;
  char **v25;
  _UNKNOWN **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease(v6);
  if ((v40 & 1) == 0 && v39 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v8 = type metadata accessor for Logger(0);
    sub_10001AAA8(v8, (uint64_t)qword_10084AA70);
    v9 = a1;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    v12 = &off_1006A3000;
    if (os_log_type_enabled(v10, v11))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v39 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = objc_msgSend(v9, "recordID");
      v16 = objc_msgSend(v15, "ckShortDescription");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v38 = sub_10001A820(v17, v19, &v39);
      v12 = &off_1006A3000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    v20 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    v21 = 0;
    v22 = &off_1007DD0E8;
    v37 = *((_QWORD *)v12 + 320);
    v23 = &selRef_showRemindersAsOverdue;
    do
    {
      v31 = *((unsigned __int8 *)v22 + v21 + 32);
      if (*((_BYTE *)v22 + v21 + 32))
      {
        if (v31 == 1)
          v32 = 0x4E79616C70736964;
        else
          v32 = 0x6574616C706D6574;
        if (v31 == 1)
          v33 = 0xEB00000000656D61;
        else
          v33 = 0xE800000000000000;
      }
      else
      {
        v33 = 0xEC00000065746144;
        v32 = 0x6E6F697461657263;
      }
      v34 = swift_bridgeObjectRetain_n(v33, 2);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v24 = v20;
        v25 = v23;
        v26 = v22;
        v27 = swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v39 = v28;
        *(_DWORD *)v27 = v37;
        swift_bridgeObjectRetain(v33);
        *(_QWORD *)(v27 + 4) = sub_10001A820(v32, v33, &v39);
        swift_bridgeObjectRelease_n(v33, 3);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        v29 = v27;
        v22 = v26;
        v23 = v25;
        v20 = v24;
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v33, 2);
      }
      ++v21;
      v30 = String._bridgeToObjectiveC()();
      objc_msgSend(v20, v23[60], v30, swift_bridgeObjectRelease(v33).n128_f64[0]);

    }
    while (v21 != 3);

  }
}

double sub_1004403A0(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  if ((v23 & 1) == 0 && v22 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084AA70);
    v10 = a1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v22 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = objc_msgSend(v10, "recordID");
      v16 = objc_msgSend(v15, "ckShortDescription");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v21 = sub_10001A820(v17, v19, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);

      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    v20 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    JUMPOUT(0x1004407C4);
  }
  return result;
}

double sub_100440978(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  if ((v23 & 1) == 0 && v22 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084AA70);
    v10 = a1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v22 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = objc_msgSend(v10, "recordID");
      v16 = objc_msgSend(v15, "ckShortDescription");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v21 = sub_10001A820(v17, v19, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    v20 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    JUMPOUT(0x100440E14);
  }
  return result;
}

double sub_100440FD4(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  if ((v23 & 1) == 0 && v22 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084AA70);
    v10 = a1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v22 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = objc_msgSend(v10, "recordID");
      v16 = objc_msgSend(v15, "ckShortDescription");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v21 = sub_10001A820(v17, v19, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    v20 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    JUMPOUT(0x100441540);
  }
  return result;
}

void sub_100441614(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0 && v34 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v8 = type metadata accessor for Logger(0);
    sub_10001AAA8(v8, (uint64_t)qword_10084AA70);
    v9 = a1;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v34 = v32;
      *(_DWORD *)v12 = 136446210;
      v13 = objc_msgSend(v9, "recordID");
      v14 = objc_msgSend(v13, "ckShortDescription");

      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v33 = sub_10001A820(v15, v17, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v12, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

    }
    v18 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    v19 = 27;
    v20 = &byte_1007DD8D0;
    do
    {
      v25 = *v20++;
      v24 = v25;
      if (((1 << v25) & 0x5DBEFE6) != 0)
      {
        v26 = sub_1002ED498(v24);
        v28 = v27;
        v29 = swift_bridgeObjectRetain_n(v27, 2);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.default.getter(v30);
        if (os_log_type_enabled(v30, v31))
        {
          v21 = swift_slowAlloc(12, -1);
          v22 = swift_slowAlloc(32, -1);
          v34 = v22;
          *(_DWORD *)v21 = 136446210;
          swift_bridgeObjectRetain(v28);
          *(_QWORD *)(v21 + 4) = sub_10001A820(v26, v28, &v34);
          swift_bridgeObjectRelease_n(v28, 3);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v21, 0xCu);
          swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v22, -1, -1);
          swift_slowDealloc(v21, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v28, 2);
        }
        v23 = String._bridgeToObjectiveC()();
        objc_msgSend(v18, "initTokenWithDefaultValueIfNecessaryForKey:", v23, swift_bridgeObjectRelease().n128_f64[0]);

      }
      --v19;
    }
    while (v19);

  }
}

void sub_100441A1C(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  double (*__ptr32 *v12)();
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  _UNKNOWN **v22;
  char **v23;
  id v24;
  char **v25;
  _UNKNOWN **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0 && v39 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v8 = type metadata accessor for Logger(0);
    sub_10001AAA8(v8, (uint64_t)qword_10084AA70);
    v9 = a1;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    v12 = &off_1006A3000;
    if (os_log_type_enabled(v10, v11))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v39 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = objc_msgSend(v9, "recordID");
      v16 = objc_msgSend(v15, "ckShortDescription");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v38 = sub_10001A820(v17, v19, &v39);
      v12 = &off_1006A3000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    v20 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    v21 = 0;
    v22 = &off_1007DDC20;
    v37 = *((_QWORD *)v12 + 320);
    v23 = &selRef_showRemindersAsOverdue;
    do
    {
      v31 = *((unsigned __int8 *)v22 + v21 + 32);
      if (*((_BYTE *)v22 + v21 + 32))
      {
        if (v31 == 1)
          v32 = 0xD00000000000001DLL;
        else
          v32 = 0x6574616C706D6574;
        if (v31 == 1)
          v33 = 0x80000001006F4AB0;
        else
          v33 = 0xE800000000000000;
      }
      else
      {
        v33 = 0xE800000000000000;
        v32 = 0x617461646174656DLL;
      }
      v34 = swift_bridgeObjectRetain_n(v33, 2);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v24 = v20;
        v25 = v23;
        v26 = v22;
        v27 = swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v39 = v28;
        *(_DWORD *)v27 = v37;
        swift_bridgeObjectRetain(v33);
        *(_QWORD *)(v27 + 4) = sub_10001A820(v32, v33, &v39);
        swift_bridgeObjectRelease_n(v33, 3);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        v29 = v27;
        v22 = v26;
        v23 = v25;
        v20 = v24;
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v33, 2);
      }
      ++v21;
      v30 = String._bridgeToObjectiveC()();
      objc_msgSend(v20, v23[60], v30, swift_bridgeObjectRelease().n128_f64[0]);

    }
    while (v21 != 3);

  }
}

void sub_100441E74(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  double (*__ptr32 *v12)();
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  _UNKNOWN **v22;
  char **v23;
  id v24;
  char **v25;
  _UNKNOWN **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0 && v39 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v8 = type metadata accessor for Logger(0);
    sub_10001AAA8(v8, (uint64_t)qword_10084AA70);
    v9 = a1;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    v12 = &off_1006A3000;
    if (os_log_type_enabled(v10, v11))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v39 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = objc_msgSend(v9, "recordID");
      v16 = objc_msgSend(v15, "ckShortDescription");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v38 = sub_10001A820(v17, v19, &v39);
      v12 = &off_1006A3000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    v20 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    v21 = 0;
    v22 = &off_1007DDD10;
    v37 = *((_QWORD *)v12 + 320);
    v23 = &selRef_showRemindersAsOverdue;
    do
    {
      v31 = *((unsigned __int8 *)v22 + v21 + 32);
      if (*((_BYTE *)v22 + v21 + 32))
      {
        if (v31 == 1)
          v32 = 0x4E79616C70736964;
        else
          v32 = 0x73694C7472616D73;
        if (v31 == 1)
          v33 = 0xEB00000000656D61;
        else
          v33 = 0xE900000000000074;
      }
      else
      {
        v33 = 0xEC00000065746144;
        v32 = 0x6E6F697461657263;
      }
      v34 = swift_bridgeObjectRetain_n(v33, 2);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v24 = v20;
        v25 = v23;
        v26 = v22;
        v27 = swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v39 = v28;
        *(_DWORD *)v27 = v37;
        swift_bridgeObjectRetain(v33);
        *(_QWORD *)(v27 + 4) = sub_10001A820(v32, v33, &v39);
        swift_bridgeObjectRelease_n(v33, 3);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        v29 = v27;
        v22 = v26;
        v23 = v25;
        v20 = v24;
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v33, 2);
      }
      ++v21;
      v30 = String._bridgeToObjectiveC()();
      objc_msgSend(v20, v23[60], v30, swift_bridgeObjectRelease().n128_f64[0]);

    }
    while (v21 != 3);

  }
}

void sub_1004422D4(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v27 & 1) == 0 && v26 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v8 = type metadata accessor for Logger(0);
    sub_10001AAA8(v8, (uint64_t)qword_10084AA70);
    v9 = a1;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v26 = v13;
      *(_DWORD *)v12 = 136446210;
      v14 = objc_msgSend(v9, "recordID");
      v15 = objc_msgSend(v14, "ckShortDescription");

      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      v25 = sub_10001A820(v16, v18, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

    }
    v19 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v26 = v23;
      *(_DWORD *)v22 = 136446210;
      *(_QWORD *)(v22 + 4) = sub_10001A820(0xD000000000000017, 0x80000001006F4060, &v26);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }

    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "initTokenWithDefaultValueIfNecessaryForKey:", v24);

  }
}

double sub_100442660(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  if ((v23 & 1) == 0 && v22 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084AA70);
    v10 = a1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v22 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = objc_msgSend(v10, "recordID");
      v16 = objc_msgSend(v15, "ckShortDescription");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v21 = sub_10001A820(v17, v19, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    v20 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    JUMPOUT(0x100442A60);
  }
  return result;
}

double sub_100442AF0(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint8_t *v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  __int128 v25;
  _QWORD v26[5];
  int v27;
  int v28;
  __int128 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v2 = v1;
  v4 = type metadata accessor for REMFeatureFlags(0);
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  __chkstk_darwin(v4);
  v31 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v8 = v7;
  v9 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v6, v8, v9, &type metadata for Int, &protocol witness table for Int);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  if ((v38 & 1) == 0 && v37 == 1)
  {
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001AAA8(v11, (uint64_t)qword_10084AA70);
    v13 = a1;
    v35 = v12;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v37 = v17;
      *(_DWORD *)v16 = 136446210;
      v34 = v16 + 4;
      v18 = v16;
      v19 = objc_msgSend(v13, "recordID");
      v20 = objc_msgSend(v19, "ckShortDescription");

      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      v36 = sub_10001A820(v21, v23, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "repairResolutionTokenMapForImportedRecord - recordID=%{public}s", v18, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

    }
    v24 = objc_msgSend(v2, "createResolutionTokenMapIfNecessary");
    v27 = enum case for REMFeatureFlags.recentlyDeletedList(_:);
    v28 = enum case for REMFeatureFlags.groceryMultilingual(_:);
    v30 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v25 = 136446210;
    v29 = v25;
    v26[3] = "smartListIDsToUndelete";
    v26[4] = "didChooseToMigrateLocally";
    v26[1] = "recentlyDeletedInfoAsData";
    v26[2] = "LocalesInfoAsData";
    JUMPOUT(0x100443020);
  }
  return result;
}

void static REMCDObject.mergeSystemProperties(into:from:)(void *a1, void *a2)
{
  id v4;
  id v5;

  if (objc_msgSend(a1, "respondsToSelector:", "shouldUseResolutionTokenMapForMergingData"))
  {
    objc_msgSend(a1, "mergeDataRevertedLocallyMarkedForDeletion");
    objc_msgSend(a1, "mergeDataRefusedToMergeMarkedForDeletion");
    v4 = a1;
    v5 = a2;
    sub_10044B798(v5, v4, v4, v5);

  }
  else
  {
    sub_10044AE80(a1, a2);
  }
}

void sub_10044322C(void *a1, int a2, int a3, void *a4, void *a5, void *a6, _BYTE *a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  void *v19;
  void *v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  double v52;
  id v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  id v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  Swift::String v82;
  unint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  Swift::Int v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  id v108;
  NSObject *v109;
  int v110;
  uint64_t v111;
  double v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  NSString v119;
  double v120;
  id v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  NSString v129;
  double v130;
  uint64_t v131;
  char *v132;
  __int128 v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  __int128 v137;
  void *v138;
  int v139;
  void *v140;
  _BYTE *v141;
  void *v142;
  void *v143;
  int v144;
  void *v145;
  id v146;
  id v147;
  ValueMetadata *v148;
  uint64_t v149;
  char v150;

  v140 = a5;
  v141 = a7;
  v143 = a6;
  v144 = a3;
  v139 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v14 = v13;
  v15 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v145 = a1;
  CKRecordKeyValueSetting.subscript.getter(v12, v14, v15, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease(v14);
  if ((v150 & 1) != 0 || v149 != 1)
  {
    v147 = sub_1004383A0(v145, 0);
    v138 = a4;
    if ((v22 & 1) != 0)
    {
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
      v25 = v24;
      CKRecordKeyValueSetting.subscript.getter(v23, v24, v15, &type metadata for Int, &protocol witness table for Int);
      *(_QWORD *)&v26 = swift_bridgeObjectRelease(v25).n128_u64[0];
      if ((v150 & 1) == 0 && v149 == 1 && objc_msgSend(a4, "markedForDeletion", v26))
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v27 = type metadata accessor for Logger(0);
        sub_10001AAA8(v27, (uint64_t)qword_10084AA70);
        v28 = v145;
        v29 = Logger.logObject.getter(v28);
        v30 = static os_log_type_t.default.getter(v29);
        if (os_log_type_enabled(v29, v30))
        {
          v31 = swift_slowAlloc(22, -1);
          v32 = swift_slowAlloc(64, -1);
          v149 = v32;
          *(_DWORD *)v31 = 136446466;
          v33 = CKRecord.recordType.getter(v32);
          v35 = v34;
          v148 = (ValueMetadata *)sub_10001A820(v33, v34, &v149);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);

          *(_QWORD *)&v36 = swift_bridgeObjectRelease(v35).n128_u64[0];
          *(_WORD *)(v31 + 12) = 2082;
          v37 = objc_msgSend(v28, "recordID", v36);
          v38 = objc_msgSend(v37, "ckShortDescription");

          v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
          v41 = v40;

          v148 = (ValueMetadata *)sub_10001A820(v39, v41, &v149);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);

          v42 = v41;
          a4 = v138;
          swift_bridgeObjectRelease(v42);
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v31, 0x16u);
          swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v32, -1, -1);
          swift_slowDealloc(v31, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v43 = type metadata accessor for Logger(0);
        sub_10001AAA8(v43, (uint64_t)qword_10084AA70);
        v44 = v145;
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.default.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          v47 = swift_slowAlloc(22, -1);
          v48 = swift_slowAlloc(64, -1);
          v149 = v48;
          *(_DWORD *)v47 = 136446466;
          v49 = CKRecord.recordType.getter(v48);
          v51 = v50;
          v148 = (ValueMetadata *)sub_10001A820(v49, v50, &v149);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);

          *(_QWORD *)&v52 = swift_bridgeObjectRelease(v51).n128_u64[0];
          *(_WORD *)(v47 + 12) = 2082;
          v53 = objc_msgSend(v44, "recordID", v52);
          v54 = objc_msgSend(v53, "ckShortDescription");

          v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v57 = v56;

          v148 = (ValueMetadata *)sub_10001A820(v55, v57, &v149);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);

          v58 = v57;
          a4 = v138;
          swift_bridgeObjectRelease(v58);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v47, 0x16u);
          swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1, -1);
          swift_slowDealloc(v47, -1, -1);

        }
        else
        {

        }
        objc_msgSend(a4, "updateChangeCount");
      }
    }
    if (objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync"))
    {
      v60 = objc_msgSend(a4, "storeControllerManagedObjectContext");
      if (v60)
      {
        v61 = v60;
        v62 = objc_msgSend(a4, "accountCKIdentifier");
        if (v62)
        {
          v63 = v62;
          v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
          v66 = v65;

          v67 = objc_msgSend(v61, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
          v68 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
          v69 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v67, &type metadata for String, v68, &protocol witness table for String);

          if (*(_QWORD *)(v69 + 16))
          {
            v70 = sub_10001A6DC(v64, v66);
            if ((v71 & 1) != 0)
            {
              v72 = *(id *)(*(_QWORD *)(v69 + 56) + 8 * v70);
              swift_bridgeObjectRelease(v66);
              swift_bridgeObjectRelease(v69);
              v73 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", a4, objc_msgSend(v72, "persistenceCloudSchemaVersion"));
              v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v73, &type metadata for String);

              v142 = (void *)sub_10011EE40(v74);
              v59 = swift_bridgeObjectRelease(v74).n128_u64[0];
LABEL_29:
              v146 = objc_msgSend(a4, "createResolutionTokenMapIfNecessary", *(double *)&v59);
              v75 = objc_msgSend(v147, "getTokenKeys");
              v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v75, &type metadata for String);

              v136 = v76;
              v78 = *(_QWORD *)(v76 + 16);
              if (!v78)
              {
LABEL_77:
                swift_bridgeObjectRelease(v142);
                swift_bridgeObjectRelease(v136);

                goto LABEL_78;
              }
              v79 = (_QWORD *)(v136 + 40);
              *(_QWORD *)&v77 = 136446466;
              v133 = v77;
              v132 = (char *)&type metadata for Any + 8;
              *(_QWORD *)&v77 = 136446722;
              v137 = v77;
              while (1)
              {
                v80 = *(v79 - 1);
                v81 = (void *)*v79;
                swift_bridgeObjectRetain_n(*v79, 2);
                v82._countAndFlagsBits = v80;
                v82._object = v81;
                v83 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DD138, v82);
                *(_QWORD *)&v84 = swift_bridgeObjectRelease(v81).n128_u64[0];
                if (v83 > 2)
                  break;
                LOBYTE(v148) = v83;
                if (objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync", v84))
                {
                  if ((_BYTE)v83)
                  {
                    v85 = v83 == 1 ? 0x4E79616C70736964 : 0x6574616C706D6574;
                    v86 = v83 == 1 ? 0xEB00000000656D61 : 0xE800000000000000;
                  }
                  else
                  {
                    v85 = 0x6E6F697461657263;
                    v86 = 0xEC00000065746144;
                  }
                  v106 = sub_1001B2278(v85, v86, (uint64_t)v142);
                  swift_bridgeObjectRelease(v86);
                  if ((v106 & 1) != 0)
                  {
                    if (qword_1008374E8 != -1)
                      swift_once(&qword_1008374E8, sub_100438310);
                    v107 = type metadata accessor for Logger(0);
                    sub_10001AAA8(v107, (uint64_t)qword_10084AA70);
                    swift_bridgeObjectRetain_n(v81, 2);
                    v108 = a4;
                    v109 = Logger.logObject.getter(v108);
                    v110 = static os_log_type_t.default.getter(v109);
                    if (os_log_type_enabled(v109, (os_log_type_t)v110))
                    {
                      v135 = v110;
                      v111 = swift_slowAlloc(22, -1);
                      v134 = swift_slowAlloc(64, -1);
                      v149 = v134;
                      *(_DWORD *)v111 = v133;
                      swift_bridgeObjectRetain(v81);
                      *(_QWORD *)(v111 + 4) = sub_10001A820(v80, (unint64_t)v81, &v149);
                      *(_QWORD *)&v112 = swift_bridgeObjectRelease_n(v81, 3).n128_u64[0];
                      *(_WORD *)(v111 + 12) = 2082;
                      v113 = objc_msgSend(v108, "remObjectID", v112);
                      if (v113)
                      {
                        v114 = v113;
                        v115 = objc_msgSend(v113, "description");

                        v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
                        v118 = v117;

                      }
                      else
                      {
                        v118 = 0xE300000000000000;
                        v116 = 7104878;
                      }
                      *(_QWORD *)(v111 + 14) = sub_10001A820(v116, v118, &v149);

                      swift_bridgeObjectRelease(v118);
                      _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v135, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v111, 0x16u);
                      v128 = v134;
                      swift_arrayDestroy(v134, 2, v132);
                      swift_slowDealloc(v128, -1, -1);
                      swift_slowDealloc(v111, -1, -1);

                      a4 = v138;
                    }
                    else
                    {

                      swift_bridgeObjectRelease_n(v81, 2);
                    }
                    sub_10011BC20(&v148, v140, v143, v141);
                    v129 = String._bridgeToObjectiveC()();
                    *(_QWORD *)&v130 = swift_bridgeObjectRelease(v81).n128_u64[0];
                    objc_msgSend(v146, "forceMergeFromMap:forKey:", v147, v129, v130);

                    goto LABEL_32;
                  }
                }
                v119 = String._bridgeToObjectiveC()();
                *(_QWORD *)&v120 = swift_bridgeObjectRelease(v81).n128_u64[0];
                v121 = objc_msgSend(v146, "compareAndMergeWithMap:forKey:", v147, v119, v120);

                if ((v144 & 1) == 0)
                  goto LABEL_62;
                if ((_BYTE)v83)
                {
                  if (v83 != 1)
                  {
                    v105 = 0xE800000000000000;
LABEL_67:
                    swift_bridgeObjectRelease(v105);
                    goto LABEL_32;
                  }
                  v122 = 0x4E79616C70736964;
                  v123 = 0xEB00000000656D61;
                }
                else
                {
                  v122 = 0x6E6F697461657263;
                  v123 = 0xEC00000065746144;
                }
                v124 = _stringCompareWithSmolCheck(_:_:expecting:)(v122, v123, 0x6574616C706D6574, 0xE800000000000000, 0);
                swift_bridgeObjectRelease(v123);
                if ((v124 & 1) == 0)
                {
LABEL_62:
                  if ((v139 & 1) != 0)
                  {
                    if ((_BYTE)v83)
                    {
                      if (v83 != 1)
                      {
                        swift_bridgeObjectRelease(0xE800000000000000);
LABEL_73:
                        sub_10011BC20(&v148, v140, v143, v141);
                        goto LABEL_32;
                      }
                      v125 = 0x4E79616C70736964;
                      v126 = 0xEB00000000656D61;
                    }
                    else
                    {
                      v125 = 0x6E6F697461657263;
                      v126 = 0xEC00000065746144;
                    }
                    v127 = _stringCompareWithSmolCheck(_:_:expecting:)(v125, v126, 0x6574616C706D6574, 0xE800000000000000, 0);
                    swift_bridgeObjectRelease(v126);
                    if ((v127 & 1) != 0)
                      goto LABEL_73;
                  }
                  if (v121 == (id)-1)
                    goto LABEL_73;
                }
LABEL_32:
                v79 += 2;
                if (!--v78)
                  goto LABEL_77;
              }
              swift_bridgeObjectRetain(v81);
              v87._countAndFlagsBits = v80;
              v87._object = v81;
              v88 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DD1A0, v87);
              swift_bridgeObjectRelease(v81);
              if (v88)
              {
                if (qword_1008374E8 != -1)
                  swift_once(&qword_1008374E8, sub_100438310);
                v89 = type metadata accessor for Logger(0);
                sub_10001AAA8(v89, (uint64_t)qword_10084AA70);
                v90 = v145;
                swift_bridgeObjectRetain(v81);
                v92 = Logger.logObject.getter(v91);
                v93 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v92, v93))
                {
                  v94 = swift_slowAlloc(32, -1);
                  v95 = swift_slowAlloc(96, -1);
                  v149 = v95;
                  *(_DWORD *)v94 = v137;
                  swift_bridgeObjectRetain(v81);
                  *(_QWORD *)(v94 + 4) = sub_10001A820(v80, (unint64_t)v81, &v149);
                  swift_bridgeObjectRelease_n(v81, 3);
                  *(_WORD *)(v94 + 12) = 2082;
                  v97 = CKRecord.recordType.getter(v96);
                  v99 = v98;
                  *(_QWORD *)(v94 + 14) = sub_10001A820(v97, v98, &v149);

                  swift_bridgeObjectRelease(v99);
                  *(_WORD *)(v94 + 22) = 2082;
                  v148 = &_s6FieldsON;
                  v100 = sub_10001A630((uint64_t *)&unk_10084AB60);
                  v101 = String.init<A>(reflecting:)(&v148, v100);
                  v103 = v102;
                  *(_QWORD *)(v94 + 24) = sub_10001A820(v101, v102, &v149);
                  swift_bridgeObjectRelease(v103);
                  _os_log_impl((void *)&_mh_execute_header, v92, v93, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v94, 0x20u);
                  swift_arrayDestroy(v95, 3, (char *)&type metadata for Any + 8);
                  v104 = v95;
                  a4 = v138;
                  swift_slowDealloc(v104, -1, -1);
                  swift_slowDealloc(v94, -1, -1);

                }
                else
                {

                  swift_bridgeObjectRelease_n(v81, 2);
                }
                goto LABEL_32;
              }
              v105 = (unint64_t)v81;
              goto LABEL_67;
            }
          }

          swift_bridgeObjectRelease(v66);
          v59 = swift_bridgeObjectRelease(v69).n128_u64[0];
        }
        else
        {

        }
      }
    }
    v142 = &_swiftEmptySetSingleton;
    goto LABEL_29;
  }
  v16 = type metadata accessor for Date(0);
  CKRecordKeyValueSetting.subscript.getter(0x6E6F697461657243, 0xEC00000065746144, v15, v16, &protocol witness table for Date);
  v17 = *(_QWORD *)(v16 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v16) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v16);
  }
  v19 = v140;
  objc_msgSend(v140, "setCreationDate:", isa);

  LOBYTE(v149) = 1;
  v20 = v143;
  v21 = v141;
  sub_10011BC20(&v149, v19, v143, v141);
  LOBYTE(v149) = 2;
  sub_10011BC20(&v149, v19, v20, v21);
  v146 = sub_1004383A0(v145, 1);
LABEL_78:

}

uint64_t sub_10044417C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  _BYTE v28[12];

  v5 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v5);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v10 = &v28[-v9];
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  __chkstk_darwin(v13);
  v15 = &v28[-v14];
  v16 = CKRecord.subscript.getter(a2, a3);
  if (!v16)
    goto LABEL_6;
  v17 = v16;
  v18 = objc_opt_self(CKAsset);
  v19 = (void *)swift_dynamicCastObjCClass(v17, v18);
  if (!v19)
  {
    swift_unknownObjectRelease(v17);
LABEL_6:
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
LABEL_9:
    sub_10000882C((uint64_t)v10, (uint64_t *)&unk_100839C70);
    return 0;
  }
  v20 = objc_msgSend(v19, "fileURL");
  swift_unknownObjectRelease(v17);
  if (v20)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, v21, 1, v11);
  sub_1000A5CA8((uint64_t)v7, (uint64_t)v10, (uint64_t *)&unk_100839C70);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    goto LABEL_9;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v15, v10, v11);
  v24 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v24);
  v26 = v25;
  v27 = String._bridgeToObjectiveC()();
  LODWORD(v26) = objc_msgSend(v24, "fileExistsAtPath:", v27, swift_bridgeObjectRelease(v26).n128_f64[0]);

  if ((_DWORD)v26)
  {
    v22 = Data.init(contentsOf:options:)(v15, 0);
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
    return v22;
  }
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
  return 0;
}

void sub_1004446B8(void *a1, char a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  double v47;
  id v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  double v64;
  id v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  id v73;
  void *v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  id v85;
  id v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  void *v92;
  uint64_t v93;
  char v94;
  Swift::String v95;
  Swift::Int v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  NSString v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v133;
  id v134;
  id v135;
  uint64_t v136;
  ValueMetadata *v137;
  uint64_t v138;
  char v139;
  Swift::String v140;

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v15 = v14;
  v16 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v133 = a1;
  CKRecordKeyValueSetting.subscript.getter(v13, v15, v16, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease(v15);
  if ((v139 & 1) == 0 && v138 == 1)
  {
    v23 = 14;
    v24 = &byte_1007DD1F8;
    do
    {
      v25 = *v24++;
      LOBYTE(v138) = v25;
      sub_100160EC4((uint64_t)&v138, a5, a6, a7, a8);
      --v23;
    }
    while (v23);

    return;
  }
  v135 = sub_100438C04(a1, 0, v17, v18, v19, v20, v21, v22, v117, v118, v119, v120, v121, v122, v123);
  v125 = a4;
  v32 = a5;
  v128 = a7;
  v129 = a8;
  v127 = a6;
  if ((v33 & 1) != 0)
  {
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
    v36 = v35;
    CKRecordKeyValueSetting.subscript.getter(v34, v35, v16, &type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)&v37 = swift_bridgeObjectRelease(v36).n128_u64[0];
    if ((v139 & 1) == 0 && v138 == 1 && objc_msgSend(a4, "markedForDeletion", v37))
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v38 = type metadata accessor for Logger(0);
      sub_10001AAA8(v38, (uint64_t)qword_10084AA70);
      v39 = a1;
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.default.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = swift_slowAlloc(22, -1);
        v43 = swift_slowAlloc(64, -1);
        v138 = v43;
        *(_DWORD *)v42 = 136446466;
        v44 = CKRecord.recordType.getter(v43);
        v46 = v45;
        v137 = (ValueMetadata *)sub_10001A820(v44, v45, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

        *(_QWORD *)&v47 = swift_bridgeObjectRelease(v46).n128_u64[0];
        *(_WORD *)(v42 + 12) = 2082;
        v48 = objc_msgSend(v39, "recordID", v47);
        v49 = objc_msgSend(v48, "ckShortDescription");

        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        v52 = v51;

        v53 = v50;
        v32 = a5;
        v137 = (ValueMetadata *)sub_10001A820(v53, v52, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

        v54 = v52;
        a4 = v125;
        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v55 = type metadata accessor for Logger(0);
      sub_10001AAA8(v55, (uint64_t)qword_10084AA70);
      v56 = a1;
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc(22, -1);
        v60 = swift_slowAlloc(64, -1);
        v138 = v60;
        *(_DWORD *)v59 = 136446466;
        v61 = CKRecord.recordType.getter(v60);
        v63 = v62;
        v137 = (ValueMetadata *)sub_10001A820(v61, v62, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

        *(_QWORD *)&v64 = swift_bridgeObjectRelease(v63).n128_u64[0];
        *(_WORD *)(v59 + 12) = 2082;
        v65 = objc_msgSend(v56, "recordID", v64);
        v66 = objc_msgSend(v65, "ckShortDescription");

        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

        v70 = v67;
        v32 = a5;
        v137 = (ValueMetadata *)sub_10001A820(v70, v69, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138);

        v71 = v69;
        a4 = v125;
        swift_bridgeObjectRelease(v71);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v59, -1, -1);

      }
      else
      {

      }
      objc_msgSend(a4, "updateChangeCount");
    }
  }
  if (objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync"))
  {
    v73 = objc_msgSend(a4, "storeControllerManagedObjectContext");
    if (v73)
    {
      v74 = v73;
      v75 = objc_msgSend(a4, "accountCKIdentifier");
      if (v75)
      {
        v76 = v75;
        v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v79 = v78;

        v80 = objc_msgSend(v74, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
        v81 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
        v82 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v80, &type metadata for String, v81, &protocol witness table for String);

        if (*(_QWORD *)(v82 + 16) && (v83 = sub_10001A6DC(v77, v79), (v84 & 1) != 0))
        {
          v85 = *(id *)(*(_QWORD *)(v82 + 56) + 8 * v83);
          swift_bridgeObjectRelease(v79);
          swift_bridgeObjectRelease(v82);
          v86 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", a4, objc_msgSend(v85, "persistenceCloudSchemaVersion"));
          v87 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v86, &type metadata for String);

          v130 = (void *)sub_10011EE40(v87);
          v72 = swift_bridgeObjectRelease(v87).n128_u64[0];
        }
        else
        {

          swift_bridgeObjectRelease(v79);
          v72 = swift_bridgeObjectRelease(v82).n128_u64[0];
          v130 = &_swiftEmptySetSingleton;
        }
        v32 = a5;
        goto LABEL_30;
      }

    }
  }
  v130 = &_swiftEmptySetSingleton;
LABEL_30:
  v134 = objc_msgSend(a4, "createResolutionTokenMapIfNecessary", *(double *)&v72);
  v88 = objc_msgSend(v135, "getTokenKeys");
  v89 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v88, &type metadata for String);

  v124 = v89;
  v90 = *(_QWORD *)(v89 + 16);
  if (v90)
  {
    v91 = (_QWORD *)(v89 + 40);
    do
    {
      v93 = *(v91 - 1);
      v92 = (void *)*v91;
      swift_bridgeObjectRetain_n(*v91, 2);
      v140._countAndFlagsBits = v93;
      v140._object = v92;
      v94 = sub_10016428C(v140);
      if (v94 == 14)
      {
        swift_bridgeObjectRetain(v92);
        v95._countAndFlagsBits = v93;
        v95._object = v92;
        v96 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DD378, v95);
        swift_bridgeObjectRelease(v92);
        if (v96)
        {
          v136 = v90;
          if (qword_1008374E8 != -1)
            swift_once(&qword_1008374E8, sub_100438310);
          v97 = type metadata accessor for Logger(0);
          sub_10001AAA8(v97, (uint64_t)qword_10084AA70);
          v98 = v133;
          swift_bridgeObjectRetain(v92);
          v100 = Logger.logObject.getter(v99);
          v101 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v100, v101))
          {
            v102 = swift_slowAlloc(32, -1);
            v103 = swift_slowAlloc(96, -1);
            v138 = v103;
            *(_DWORD *)v102 = 136446722;
            swift_bridgeObjectRetain(v92);
            *(_QWORD *)(v102 + 4) = sub_10001A820(v93, (unint64_t)v92, &v138);
            swift_bridgeObjectRelease_n(v92, 3);
            *(_WORD *)(v102 + 12) = 2082;
            v105 = CKRecord.recordType.getter(v104);
            v107 = v106;
            *(_QWORD *)(v102 + 14) = sub_10001A820(v105, v106, &v138);

            swift_bridgeObjectRelease(v107);
            *(_WORD *)(v102 + 22) = 2082;
            v137 = &_s6FieldsON_0;
            v108 = sub_10001A630(&qword_10084AB58);
            v109 = String.init<A>(reflecting:)(&v137, v108);
            v111 = v110;
            *(_QWORD *)(v102 + 24) = sub_10001A820(v109, v110, &v138);
            swift_bridgeObjectRelease(v111);
            _os_log_impl((void *)&_mh_execute_header, v100, v101, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v102, 0x20u);
            swift_arrayDestroy(v103, 3, (char *)&type metadata for Any + 8);
            v112 = v103;
            a4 = v125;
            swift_slowDealloc(v112, -1, -1);
            v113 = v102;
            v32 = a5;
            swift_slowDealloc(v113, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v92, 2);
          }
          v90 = v136;
        }
        else
        {
          swift_bridgeObjectRelease(v92);
        }
      }
      else
      {
        v114 = v94;
        LOBYTE(v137) = v94;
        if ((objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync") & 1) != 0)
          __asm { BR              X9 }
        v115 = String._bridgeToObjectiveC()();
        v116 = objc_msgSend(v134, "compareAndMergeWithMap:forKey:", v135, v115, swift_bridgeObjectRelease(v92).n128_f64[0]);

        if ((a3 & 1) != 0)
          __asm { BR              X10 }
        if ((a2 & 1) != 0)
          __asm { BR              X10 }
        if (v116 == (id)-1)
          sub_100160EC4((uint64_t)&v137, v32, v127, v128, v129);
      }
      v91 += 2;
      --v90;
    }
    while (v90);
  }
  swift_bridgeObjectRelease(v130);
  swift_bridgeObjectRelease(v124);

}

void sub_100445D94(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  double v57;
  id v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  double v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  id v77;
  id v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  char v86;
  Swift::String v87;
  Swift::Int v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  NSString v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v118;
  id v119;
  id v120;
  ValueMetadata *v121;
  uint64_t v122;
  char v123;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v13 = v12;
  v14 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v118 = a1;
  CKRecordKeyValueSetting.subscript.getter(v11, v13, v14, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v123 & 1) != 0 || v122 != 1)
  {
    v120 = sub_100439758(a1, 0, v15, v16, v17, v18, v19, v20, v105, v106, v107, v108, v109, v110, v111);
    v112 = a2;
    v116 = a6;
    v114 = a4;
    v115 = a5;
    if ((v30 & 1) != 0)
    {
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
      CKRecordKeyValueSetting.subscript.getter(v31, v32, v14, &type metadata for Int, &protocol witness table for Int);
      *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
      if ((v123 & 1) == 0 && v122 == 1 && objc_msgSend(a2, "markedForDeletion", v33))
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v34 = type metadata accessor for Logger(0);
        sub_10001AAA8(v34, (uint64_t)qword_10084AA70);
        v35 = a1;
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.default.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc(22, -1);
          v39 = swift_slowAlloc(64, -1);
          v122 = v39;
          *(_DWORD *)v38 = 136446466;
          v40 = CKRecord.recordType.getter(v39);
          v121 = (ValueMetadata *)sub_10001A820(v40, v41, &v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);

          *(_QWORD *)&v42 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v38 + 12) = 2082;
          v43 = objc_msgSend(v35, "recordID", v42);
          v44 = objc_msgSend(v43, "ckShortDescription");

          v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
          v47 = v46;

          v48 = v45;
          a2 = v112;
          v121 = (ValueMetadata *)sub_10001A820(v48, v47, &v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v38, 0x16u);
          swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v38, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v49 = type metadata accessor for Logger(0);
        sub_10001AAA8(v49, (uint64_t)qword_10084AA70);
        v50 = a1;
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.default.getter(v51);
        if (os_log_type_enabled(v51, v52))
        {
          v53 = swift_slowAlloc(22, -1);
          v54 = swift_slowAlloc(64, -1);
          v122 = v54;
          *(_DWORD *)v53 = 136446466;
          v55 = CKRecord.recordType.getter(v54);
          v121 = (ValueMetadata *)sub_10001A820(v55, v56, &v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);

          *(_QWORD *)&v57 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v53 + 12) = 2082;
          v58 = objc_msgSend(v50, "recordID", v57);
          v59 = objc_msgSend(v58, "ckShortDescription");

          v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
          v62 = v61;

          v63 = v60;
          a2 = v112;
          v121 = (ValueMetadata *)sub_10001A820(v63, v62, &v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v53, 0x16u);
          swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1, -1);
          swift_slowDealloc(v53, -1, -1);

        }
        else
        {

        }
        objc_msgSend(a2, "updateChangeCount");
      }
    }
    if (objc_msgSend(a2, "shouldPerformCloudSchemaCatchUpSync"))
    {
      v65 = objc_msgSend(a2, "storeControllerManagedObjectContext");
      if (v65)
      {
        v66 = v65;
        v67 = objc_msgSend(a2, "accountCKIdentifier");
        if (v67)
        {
          v68 = v67;
          v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
          v71 = v70;

          v72 = objc_msgSend(v66, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
          v73 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
          v74 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v72, &type metadata for String, v73, &protocol witness table for String);

          if (*(_QWORD *)(v74 + 16) && (v75 = sub_10001A6DC(v69, v71), (v76 & 1) != 0))
          {
            v77 = *(id *)(*(_QWORD *)(v74 + 56) + 8 * v75);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v78 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", a2, objc_msgSend(v77, "persistenceCloudSchemaVersion"));
            v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v78, &type metadata for String);

            sub_10011EE40(v79);
            *(_QWORD *)&v64 = swift_bridgeObjectRelease().n128_u64[0];
          }
          else
          {

            swift_bridgeObjectRelease();
            *(_QWORD *)&v64 = swift_bridgeObjectRelease().n128_u64[0];
          }
        }
        else
        {

        }
      }
    }
    v119 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v64);
    v80 = objc_msgSend(v120, "getTokenKeys");
    v81 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v80, &type metadata for String);

    v82 = *(_QWORD *)(v81 + 16);
    if (v82)
    {
      v83 = (_QWORD *)(v81 + 40);
      do
      {
        v84 = *(v83 - 1);
        v85 = (void *)*v83;
        swift_bridgeObjectRetain_n(*v83, 2);
        v86 = sub_1001EF6B4(v84, (uint64_t)v85);
        if (v86 == 17)
        {
          swift_bridgeObjectRetain(v85);
          v87._countAndFlagsBits = v84;
          v87._object = v85;
          v88 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DD5A0, v87);
          swift_bridgeObjectRelease();
          if (v88)
          {
            if (qword_1008374E8 != -1)
              swift_once(&qword_1008374E8, sub_100438310);
            v89 = type metadata accessor for Logger(0);
            sub_10001AAA8(v89, (uint64_t)qword_10084AA70);
            v90 = v118;
            swift_bridgeObjectRetain(v85);
            v92 = Logger.logObject.getter(v91);
            v93 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v92, v93))
            {
              v94 = swift_slowAlloc(32, -1);
              v113 = swift_slowAlloc(96, -1);
              v122 = v113;
              *(_DWORD *)v94 = 136446722;
              swift_bridgeObjectRetain(v85);
              *(_QWORD *)(v94 + 4) = sub_10001A820(v84, (unint64_t)v85, &v122);
              swift_bridgeObjectRelease_n(v85, 3);
              *(_WORD *)(v94 + 12) = 2082;
              v96 = CKRecord.recordType.getter(v95);
              *(_QWORD *)(v94 + 14) = sub_10001A820(v96, v97, &v122);

              swift_bridgeObjectRelease();
              *(_WORD *)(v94 + 22) = 2082;
              v121 = &_s14descr1007E95F9V6FieldsON;
              v98 = sub_10001A630(&qword_10084AB50);
              v99 = String.init<A>(reflecting:)(&v121, v98);
              *(_QWORD *)(v94 + 24) = sub_10001A820(v99, v100, &v122);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v92, v93, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v94, 0x20u);
              swift_arrayDestroy(v113, 3, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v113, -1, -1);
              v101 = v94;
              a2 = v112;
              swift_slowDealloc(v101, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v85, 2);
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          v102 = v86;
          LOBYTE(v121) = v86;
          if ((objc_msgSend(a2, "shouldPerformCloudSchemaCatchUpSync") & 1) != 0)
            __asm { BR              X9 }
          v103 = String._bridgeToObjectiveC()();
          v104 = objc_msgSend(v119, "compareAndMergeWithMap:forKey:", v120, v103, swift_bridgeObjectRelease().n128_f64[0]);

          if (v104 == (id)-1)
            sub_1001E5324((uint64_t)&v121, a3, v114, v115, v116);
        }
        v83 += 2;
        --v82;
      }
      while (v82);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    v21 = 17;
    v22 = &byte_1007DD3D0;
    do
    {
      v23 = *v22++;
      LOBYTE(v122) = v23;
      sub_1001E5324((uint64_t)&v122, a3, a4, a5, a6);
      --v21;
    }
    while (v21);

  }
}

uint64_t sub_100446CF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v36;
  NSString v37;
  unsigned int v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a4;
  v11 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v11);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v39 - v15;
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v39[2] = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v21 = __chkstk_darwin(v20).n128_u64[0];
  v23 = (char *)v39 - v22;
  if ((a6 & 1) != 0)
  {
    v24 = objc_msgSend(a1, "encryptedValues", v21);
    v25 = String._bridgeToObjectiveC()();
    v26 = objc_msgSend(v24, "objectForKeyedSubscript:", v25);
    swift_unknownObjectRelease(v24);

    v42 = (uint64_t)v26;
  }
  else
  {
    v42 = CKRecord.subscript.getter(a2, a3);
  }
  v27 = sub_10001A630((uint64_t *)&unk_10084AB08);
  if ((swift_dynamicCast(&v41, &v42, v27, &type metadata for String, 6) & 1) == 0)
  {
    v29 = CKRecord.subscript.getter(v40, a5);
    if (v29)
    {
      v30 = v29;
      v31 = objc_opt_self(CKAsset);
      v32 = (void *)swift_dynamicCastObjCClass(v30, v31);
      if (v32)
      {
        v33 = objc_msgSend(v32, "fileURL");
        swift_unknownObjectRelease(v30);
        if (v33)
        {
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v33);

          v34 = 0;
        }
        else
        {
          v34 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v13, v34, 1, v17);
        sub_1000A5CA8((uint64_t)v13, (uint64_t)v16, (uint64_t *)&unk_100839C70);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
          v36 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
          URL.path.getter(v36);
          v37 = String._bridgeToObjectiveC()();
          v38 = objc_msgSend(v36, "fileExistsAtPath:", v37, swift_bridgeObjectRelease().n128_f64[0]);

          if (v38)
          {
            v28 = String.init(contentsOf:)(v23);
            (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
            return v28;
          }
          (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
          return 0;
        }
LABEL_14:
        sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C70);
        return 0;
      }
      swift_unknownObjectRelease(v30);
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    goto LABEL_14;
  }
  return v41;
}

void sub_1004472F4(void *a1, char a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  double v48;
  id v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  double v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  id v68;
  id v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  unsigned __int8 v77;
  Swift::String v78;
  Swift::Int v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  id v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  double v102;
  id v103;
  void *v104;
  id v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  NSString v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  NSString v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  os_log_type_t v124;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v135;
  id v136;
  id v137;
  ValueMetadata *v138;
  uint64_t v139;
  char v140;

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v16 = v15;
  v17 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v135 = a1;
  CKRecordKeyValueSetting.subscript.getter(v14, v16, v17, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v140 & 1) != 0 || v139 != 1)
  {
    v137 = sub_10043A35C(a1, 0);
    v126 = a4;
    v127 = a5;
    v129 = a7;
    v130 = a8;
    v128 = a6;
    if ((v21 & 1) != 0)
    {
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
      CKRecordKeyValueSetting.subscript.getter(v22, v23, v17, &type metadata for Int, &protocol witness table for Int);
      *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
      if ((v140 & 1) == 0 && v139 == 1 && objc_msgSend(a4, "markedForDeletion", v24))
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v25 = type metadata accessor for Logger(0);
        sub_10001AAA8(v25, (uint64_t)qword_10084AA70);
        v26 = a1;
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.default.getter(v27);
        if (os_log_type_enabled(v27, v28))
        {
          v29 = swift_slowAlloc(22, -1);
          v30 = swift_slowAlloc(64, -1);
          v139 = v30;
          *(_DWORD *)v29 = 136446466;
          v31 = CKRecord.recordType.getter(v30);
          v138 = (ValueMetadata *)sub_10001A820(v31, v32, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);

          *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v29 + 12) = 2082;
          v34 = objc_msgSend(v26, "recordID", v33);
          v35 = objc_msgSend(v34, "ckShortDescription");

          v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
          v38 = v37;

          v39 = v36;
          a4 = v126;
          v138 = (ValueMetadata *)sub_10001A820(v39, v38, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v29, 0x16u);
          swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v30, -1, -1);
          swift_slowDealloc(v29, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v40 = type metadata accessor for Logger(0);
        sub_10001AAA8(v40, (uint64_t)qword_10084AA70);
        v41 = a1;
        v42 = Logger.logObject.getter(v41);
        v43 = static os_log_type_t.default.getter(v42);
        if (os_log_type_enabled(v42, v43))
        {
          v44 = swift_slowAlloc(22, -1);
          v45 = swift_slowAlloc(64, -1);
          v139 = v45;
          *(_DWORD *)v44 = 136446466;
          v46 = CKRecord.recordType.getter(v45);
          v138 = (ValueMetadata *)sub_10001A820(v46, v47, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);

          *(_QWORD *)&v48 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v44 + 12) = 2082;
          v49 = objc_msgSend(v41, "recordID", v48);
          v50 = objc_msgSend(v49, "ckShortDescription");

          v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          v53 = v52;

          v54 = v51;
          a4 = v126;
          v138 = (ValueMetadata *)sub_10001A820(v54, v53, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1, -1);
          swift_slowDealloc(v44, -1, -1);

        }
        else
        {

        }
        objc_msgSend(a4, "updateChangeCount");
      }
    }
    if (objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync"))
    {
      v56 = objc_msgSend(a4, "storeControllerManagedObjectContext");
      if (v56)
      {
        v57 = v56;
        v58 = objc_msgSend(a4, "accountCKIdentifier");
        if (v58)
        {
          v59 = v58;
          v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
          v62 = v61;

          v63 = objc_msgSend(v57, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
          v64 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
          v65 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v63, &type metadata for String, v64, &protocol witness table for String);

          if (*(_QWORD *)(v65 + 16) && (v66 = sub_10001A6DC(v60, v62), (v67 & 1) != 0))
          {
            v68 = *(id *)(*(_QWORD *)(v65 + 56) + 8 * v66);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a4 = v126;
            v69 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", v126, objc_msgSend(v68, "persistenceCloudSchemaVersion"));
            v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v69, &type metadata for String);

            v133 = (void *)sub_10011EE40(v70);
            *(_QWORD *)&v55 = swift_bridgeObjectRelease().n128_u64[0];
          }
          else
          {

            swift_bridgeObjectRelease();
            *(_QWORD *)&v55 = swift_bridgeObjectRelease().n128_u64[0];
            v133 = &_swiftEmptySetSingleton;
            a4 = v126;
          }
          goto LABEL_29;
        }

      }
    }
    v133 = &_swiftEmptySetSingleton;
LABEL_29:
    v136 = objc_msgSend(a4, "createResolutionTokenMapIfNecessary", v55);
    v71 = objc_msgSend(v137, "getTokenKeys");
    v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v71, &type metadata for String);

    v73 = *(_QWORD *)(v72 + 16);
    if (!v73)
    {
LABEL_68:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v74 = (_QWORD *)(v72 + 40);
    while (1)
    {
      v75 = *(v74 - 1);
      v76 = (void *)*v74;
      swift_bridgeObjectRetain_n(*v74, 2);
      v77 = sub_1002E9FA4(v75, (uint64_t)v76);
      if (v77 == 21)
      {
        swift_bridgeObjectRetain(v76);
        v78._countAndFlagsBits = v75;
        v78._object = v76;
        v79 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DD878, v78);
        swift_bridgeObjectRelease();
        if (v79)
        {
          if (qword_1008374E8 != -1)
            swift_once(&qword_1008374E8, sub_100438310);
          v80 = type metadata accessor for Logger(0);
          sub_10001AAA8(v80, (uint64_t)qword_10084AA70);
          v81 = v135;
          swift_bridgeObjectRetain(v76);
          v83 = Logger.logObject.getter(v82);
          v84 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v83, v84))
          {
            v85 = swift_slowAlloc(32, -1);
            v131 = swift_slowAlloc(96, -1);
            v139 = v131;
            *(_DWORD *)v85 = 136446722;
            swift_bridgeObjectRetain(v76);
            *(_QWORD *)(v85 + 4) = sub_10001A820(v75, (unint64_t)v76, &v139);
            swift_bridgeObjectRelease_n(v76, 3);
            *(_WORD *)(v85 + 12) = 2082;
            v87 = CKRecord.recordType.getter(v86);
            *(_QWORD *)(v85 + 14) = sub_10001A820(v87, v88, &v139);

            swift_bridgeObjectRelease();
            *(_WORD *)(v85 + 22) = 2082;
            v138 = &_s6FieldsON_1;
            v89 = sub_10001A630(&qword_10084AB48);
            v90 = String.init<A>(reflecting:)(&v138, v89);
            *(_QWORD *)(v85 + 24) = sub_10001A820(v90, v91, &v139);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v85, 0x20u);
            swift_arrayDestroy(v131, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v131, -1, -1);
            v92 = v85;
            a4 = v126;
            swift_slowDealloc(v92, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v76, 2);
          }
          goto LABEL_32;
        }
LABEL_52:
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
      v93 = v77;
      LOBYTE(v138) = v77;
      if ((objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync") & 1) != 0)
      {
        v94 = sub_1002B7954(v93);
        v96 = sub_1001B2278(v94, v95, (uint64_t)v133);
        swift_bridgeObjectRelease();
        if ((v96 & 1) != 0)
        {
          if (qword_1008374E8 != -1)
            swift_once(&qword_1008374E8, sub_100438310);
          v97 = type metadata accessor for Logger(0);
          sub_10001AAA8(v97, (uint64_t)qword_10084AA70);
          swift_bridgeObjectRetain_n(v76, 2);
          v98 = a4;
          v99 = Logger.logObject.getter(v98);
          v100 = static os_log_type_t.default.getter(v99);
          if (os_log_type_enabled(v99, v100))
          {
            v101 = swift_slowAlloc(22, -1);
            v132 = swift_slowAlloc(64, -1);
            v139 = v132;
            *(_DWORD *)v101 = 136446466;
            swift_bridgeObjectRetain(v76);
            *(_QWORD *)(v101 + 4) = sub_10001A820(v75, (unint64_t)v76, &v139);
            *(_QWORD *)&v102 = swift_bridgeObjectRelease_n(v76, 3).n128_u64[0];
            *(_WORD *)(v101 + 12) = 2082;
            v103 = objc_msgSend(v98, "remObjectID", v102);
            if (v103)
            {
              v104 = v103;
              v124 = v100;
              v105 = objc_msgSend(v103, "description");

              v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
              v108 = v107;

              v100 = v124;
            }
            else
            {
              v108 = 0xE300000000000000;
              v106 = 7104878;
            }
            *(_QWORD *)(v101 + 14) = sub_10001A820(v106, v108, &v139);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v101, 0x16u);
            swift_arrayDestroy(v132, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v132, -1, -1);
            swift_slowDealloc(v101, -1, -1);

            a4 = v126;
          }
          else
          {

            swift_bridgeObjectRelease_n(v76, 2);
          }
          sub_1002B9DD4((unsigned __int8 *)&v138, v127, v128, v129, v130);
          v116 = String._bridgeToObjectiveC()();
          objc_msgSend(v136, "forceMergeFromMap:forKey:", v137, v116, swift_bridgeObjectRelease().n128_f64[0]);

          goto LABEL_32;
        }
      }
      v109 = String._bridgeToObjectiveC()();
      v110 = objc_msgSend(v136, "compareAndMergeWithMap:forKey:", v137, v109, swift_bridgeObjectRelease().n128_f64[0]);

      if ((a3 & 1) == 0)
        goto LABEL_58;
      v111 = sub_1002B7954(v93);
      if (v111 == 0x6341746E65726170 && v112 == 0xED0000746E756F63)
        goto LABEL_52;
      v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v112, 0x6341746E65726170, 0xED0000746E756F63, 0);
      swift_bridgeObjectRelease();
      if ((v113 & 1) == 0)
        break;
LABEL_32:
      v74 += 2;
      if (!--v73)
        goto LABEL_68;
    }
    v114 = sub_1002B7954(v93);
    if (v114 == 0x694C746E65726170 && v115 == 0xEA00000000007473)
      goto LABEL_52;
    v117 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v115, 0x694C746E65726170, 0xEA00000000007473, 0);
    swift_bridgeObjectRelease();
    if ((v117 & 1) != 0)
      goto LABEL_32;
LABEL_58:
    if ((a2 & 1) != 0)
    {
      v118 = sub_1002B7954(v93);
      if (v118 == 0x6341746E65726170 && v119 == 0xED0000746E756F63)
        goto LABEL_61;
      v120 = _stringCompareWithSmolCheck(_:_:expecting:)(v118, v119, 0x6341746E65726170, 0xED0000746E756F63, 0);
      swift_bridgeObjectRelease();
      if ((v120 & 1) != 0)
        goto LABEL_67;
      v121 = sub_1002B7954(v93);
      if (v121 == 0x694C746E65726170 && v122 == 0xEA00000000007473)
      {
LABEL_61:
        swift_bridgeObjectRelease();
LABEL_67:
        sub_1002B9DD4((unsigned __int8 *)&v138, v127, v128, v129, v130);
        goto LABEL_32;
      }
      v123 = _stringCompareWithSmolCheck(_:_:expecting:)(v121, v122, 0x694C746E65726170, 0xEA00000000007473, 0);
      swift_bridgeObjectRelease();
      if ((v123 & 1) != 0)
        goto LABEL_67;
    }
    if (v110 == (id)-1)
      goto LABEL_67;
    goto LABEL_32;
  }
  v18 = 21;
  v19 = &byte_1007DD5F8;
  do
  {
    v20 = *v19++;
    LOBYTE(v139) = v20;
    sub_1002B9DD4((unsigned __int8 *)&v139, a5, a6, a7, a8);
    --v18;
  }
  while (v18);

}

void sub_1004481FC(char *a1, char a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  id v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  id v64;
  id v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  Swift::Int v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  id v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  double v97;
  id v98;
  void *v99;
  id v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  NSString v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  NSString v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v121;
  os_log_type_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  char *v129;
  uint64_t v131;
  uint64_t v132;
  id v133;
  id v134;
  ValueMetadata *v135;
  uint64_t v136;
  char v137;

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v15 = v14;
  v16 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v129 = a1;
  CKRecordKeyValueSetting.subscript.getter(v13, v15, v16, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v137 & 1) != 0 || v136 != 1)
  {
    v134 = sub_10043B8BC(a1, 0);
    v124 = a7;
    v125 = a8;
    v20 = a5;
    v123 = a6;
    if ((v21 & 1) != 0)
    {
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
      CKRecordKeyValueSetting.subscript.getter(v22, v23, v16, &type metadata for Int, &protocol witness table for Int);
      *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
      if ((v137 & 1) == 0 && v136 == 1 && objc_msgSend(a4, "markedForDeletion", v24))
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v25 = type metadata accessor for Logger(0);
        sub_10001AAA8(v25, (uint64_t)qword_10084AA70);
        v26 = a1;
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.default.getter(v27);
        if (os_log_type_enabled(v27, v28))
        {
          v29 = swift_slowAlloc(22, -1);
          v131 = swift_slowAlloc(64, -1);
          v136 = v131;
          *(_DWORD *)v29 = 136446466;
          v30 = CKRecord.recordType.getter(v131);
          v135 = (ValueMetadata *)sub_10001A820(v30, v31, &v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);

          *(_QWORD *)&v32 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v29 + 12) = 2082;
          v33 = objc_msgSend(v26, "recordID", v32);
          v34 = objc_msgSend(v33, "ckShortDescription");

          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v37 = v36;

          v20 = a5;
          v135 = (ValueMetadata *)sub_10001A820(v35, v37, &v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v29, 0x16u);
          swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v131, -1, -1);
          swift_slowDealloc(v29, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v38 = type metadata accessor for Logger(0);
        sub_10001AAA8(v38, (uint64_t)qword_10084AA70);
        v39 = a1;
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.default.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          v42 = swift_slowAlloc(22, -1);
          v132 = swift_slowAlloc(64, -1);
          v136 = v132;
          *(_DWORD *)v42 = 136446466;
          v43 = CKRecord.recordType.getter(v132);
          v135 = (ValueMetadata *)sub_10001A820(v43, v44, &v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);

          *(_QWORD *)&v45 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v42 + 12) = 2082;
          v46 = objc_msgSend(v39, "recordID", v45);
          v47 = objc_msgSend(v46, "ckShortDescription");

          v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          v50 = v49;

          v20 = a5;
          v135 = (ValueMetadata *)sub_10001A820(v48, v50, &v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v42, 0x16u);
          swift_arrayDestroy(v132, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v132, -1, -1);
          swift_slowDealloc(v42, -1, -1);

        }
        else
        {

        }
        objc_msgSend(a4, "updateChangeCount");
      }
    }
    if (objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync"))
    {
      v52 = objc_msgSend(a4, "storeControllerManagedObjectContext");
      if (v52)
      {
        v53 = v52;
        v54 = objc_msgSend(a4, "accountCKIdentifier");
        if (v54)
        {
          v55 = v54;
          v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v58 = v57;

          v59 = objc_msgSend(v53, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
          v60 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
          v61 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v59, &type metadata for String, v60, &protocol witness table for String);

          if (*(_QWORD *)(v61 + 16) && (v62 = sub_10001A6DC(v56, v58), (v63 & 1) != 0))
          {
            v64 = *(id *)(*(_QWORD *)(v61 + 56) + 8 * v62);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v65 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", a4, objc_msgSend(v64, "persistenceCloudSchemaVersion"));
            v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, &type metadata for String);

            v126 = (void *)sub_10011EE40(v66);
            *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
          }
          else
          {

            swift_bridgeObjectRelease();
            *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
            v126 = &_swiftEmptySetSingleton;
          }
          v20 = a5;
          goto LABEL_30;
        }

      }
    }
    v126 = &_swiftEmptySetSingleton;
LABEL_30:
    v133 = objc_msgSend(a4, "createResolutionTokenMapIfNecessary", v51);
    v67 = objc_msgSend(v134, "getTokenKeys");
    v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, &type metadata for String);

    v69 = *(_QWORD *)(v68 + 16);
    if (!v69)
    {
LABEL_73:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    v70 = (_QWORD *)(v68 + 40);
    v127 = a4;
    while (1)
    {
      v72 = *(v70 - 1);
      v71 = (void *)*v70;
      swift_bridgeObjectRetain_n(*v70, 2);
      v73 = sub_100300328(v72, (uint64_t)v71);
      if (v73 == 27)
        break;
      v88 = v73;
      LOBYTE(v135) = v73;
      if ((objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync") & 1) != 0)
      {
        v89 = sub_1002ED498(v88);
        v91 = sub_1001B2278(v89, v90, (uint64_t)v126);
        swift_bridgeObjectRelease();
        if ((v91 & 1) != 0)
        {
          if (qword_1008374E8 != -1)
            swift_once(&qword_1008374E8, sub_100438310);
          v92 = type metadata accessor for Logger(0);
          sub_10001AAA8(v92, (uint64_t)qword_10084AA70);
          swift_bridgeObjectRetain_n(v71, 2);
          v93 = a4;
          v94 = Logger.logObject.getter(v93);
          v95 = static os_log_type_t.default.getter(v94);
          if (os_log_type_enabled(v94, v95))
          {
            v122 = v95;
            v96 = swift_slowAlloc(22, -1);
            v119 = swift_slowAlloc(64, -1);
            v136 = v119;
            *(_DWORD *)v96 = 136446466;
            swift_bridgeObjectRetain(v71);
            *(_QWORD *)(v96 + 4) = sub_10001A820(v72, (unint64_t)v71, &v136);
            *(_QWORD *)&v97 = swift_bridgeObjectRelease_n(v71, 3).n128_u64[0];
            *(_WORD *)(v96 + 12) = 2082;
            v98 = objc_msgSend(v93, "remObjectID", v97);
            if (v98)
            {
              v99 = v98;
              v100 = objc_msgSend(v98, "description");

              v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
              v103 = v102;

              v20 = a5;
            }
            else
            {
              v103 = 0xE300000000000000;
              v101 = 7104878;
            }
            *(_QWORD *)(v96 + 14) = sub_10001A820(v101, v103, &v136);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v94, v122, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v96, 0x16u);
            swift_arrayDestroy(v119, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v119, -1, -1);
            swift_slowDealloc(v96, -1, -1);

            a4 = v127;
          }
          else
          {

            swift_bridgeObjectRelease_n(v71, 2);
          }
          sub_1002EFAC4((unsigned __int8 *)&v135, v20, v123, v124, v125);
          v111 = String._bridgeToObjectiveC()();
          objc_msgSend(v133, "forceMergeFromMap:forKey:", v134, v111, swift_bridgeObjectRelease().n128_f64[0]);

          goto LABEL_34;
        }
      }
      v104 = String._bridgeToObjectiveC()();
      v105 = objc_msgSend(v133, "compareAndMergeWithMap:forKey:", v134, v104, swift_bridgeObjectRelease().n128_f64[0]);

      if ((a3 & 1) == 0)
      {
LABEL_60:
        if ((a2 & 1) != 0)
        {
          v113 = sub_1002ED498(v88);
          if (v113 == 1953720684 && v114 == 0xE400000000000000)
          {
LABEL_63:
            swift_bridgeObjectRelease();
            goto LABEL_72;
          }
          v115 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v114, 1953720684, 0xE400000000000000, 0);
          swift_bridgeObjectRelease();
          if ((v115 & 1) != 0)
            goto LABEL_72;
          v116 = sub_1002ED498(v88);
          if (v116 == 0x6552746E65726170 && v117 == 0xEE007265646E696DLL)
            goto LABEL_63;
          v118 = _stringCompareWithSmolCheck(_:_:expecting:)(v116, v117, 0x6552746E65726170, 0xEE007265646E696DLL, 0);
          swift_bridgeObjectRelease();
          if ((v118 & 1) != 0)
          {
LABEL_72:
            sub_1002EFAC4((unsigned __int8 *)&v135, v20, v123, v124, v125);
            goto LABEL_34;
          }
        }
        if (((sub_1001A597C(v88, (uint64_t)&off_1007DDBD0) & 1) == 0 || !v105)
          && ((sub_1001A597C(v88, (uint64_t)&off_1007DDBF8) & 1) != 0 || v105 != (id)-1))
        {
          goto LABEL_34;
        }
        goto LABEL_72;
      }
      v106 = sub_1002ED498(v88);
      if (v106 == 1953720684 && v107 == 0xE400000000000000)
        goto LABEL_54;
      v108 = _stringCompareWithSmolCheck(_:_:expecting:)(v106, v107, 1953720684, 0xE400000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v108 & 1) == 0)
      {
        v109 = sub_1002ED498(v88);
        if (v109 == 0x6552746E65726170 && v110 == 0xEE007265646E696DLL)
          goto LABEL_54;
        v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, v110, 0x6552746E65726170, 0xEE007265646E696DLL, 0);
        swift_bridgeObjectRelease();
        if ((v112 & 1) == 0)
          goto LABEL_60;
      }
LABEL_34:
      v70 += 2;
      if (!--v69)
        goto LABEL_73;
    }
    swift_bridgeObjectRetain(v71);
    v74._countAndFlagsBits = v72;
    v74._object = v71;
    v75 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDB98, v74);
    swift_bridgeObjectRelease();
    if (v75)
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v76 = type metadata accessor for Logger(0);
      sub_10001AAA8(v76, (uint64_t)qword_10084AA70);
      v77 = v129;
      swift_bridgeObjectRetain(v71);
      v79 = Logger.logObject.getter(v78);
      v80 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v79, v80))
      {
        v81 = swift_slowAlloc(32, -1);
        v121 = swift_slowAlloc(96, -1);
        v136 = v121;
        *(_DWORD *)v81 = 136446722;
        swift_bridgeObjectRetain(v71);
        *(_QWORD *)(v81 + 4) = sub_10001A820(v72, (unint64_t)v71, &v136);
        swift_bridgeObjectRelease_n(v71, 3);
        *(_WORD *)(v81 + 12) = 2082;
        v83 = CKRecord.recordType.getter(v82);
        *(_QWORD *)(v81 + 14) = sub_10001A820(v83, v84, &v136);

        swift_bridgeObjectRelease();
        *(_WORD *)(v81 + 22) = 2082;
        v135 = &_s6FieldsON_2;
        v85 = sub_10001A630(&qword_10084AB40);
        v86 = String.init<A>(reflecting:)(&v135, v85);
        *(_QWORD *)(v81 + 24) = sub_10001A820(v86, v87, &v136);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v81, 0x20u);
        swift_arrayDestroy(v121, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v121, -1, -1);
        swift_slowDealloc(v81, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v71, 2);
      }
      a4 = v127;
      v20 = a5;
      goto LABEL_34;
    }
LABEL_54:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v17 = 27;
  v18 = &byte_1007DD8D0;
  do
  {
    v19 = *v18++;
    LOBYTE(v136) = v19;
    sub_1002EFAC4((unsigned __int8 *)&v136, a5, a6, a7, a8);
    --v17;
  }
  while (v17);

}

void sub_10044910C(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  id v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  id v61;
  id v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  Swift::String v73;
  unint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  Swift::Int v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  id v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  double v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  NSString v108;
  id v109;
  NSString v110;
  uint64_t v111;
  os_log_type_t v112;
  void *v113;
  void *v114;
  void *v116;
  id v118;
  id v119;
  ValueMetadata *v120;
  uint64_t v121;
  char v122;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v8 = v7;
  v9 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v6, v8, v9, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v122 & 1) == 0 && v121 == 1)
  {
    LOBYTE(v121) = 0;
    sub_100309E24(&v121, a3, a4);
    LOBYTE(v121) = 1;
    sub_100309E24(&v121, a3, a4);
    v10 = CKRecord.subscript.getter(0x6574616C706D6554, 0xE800000000000000);
    if (v10)
    {
      v11 = v10;
      v12 = objc_opt_self(CKReference);
      v13 = (void *)swift_dynamicCastObjCClass(v11, v12);
      if (!v13)
        swift_unknownObjectRelease(v11);
    }
    else
    {
      v13 = 0;
    }
    v64 = sub_1000C8F60(v13);

    if (v64)
    {
      v65 = type metadata accessor for REMCDTemplate();
      v66 = (void *)swift_dynamicCastClass(v64, v65);
      if (!v66)

    }
    else
    {
      v66 = 0;
    }
    objc_msgSend(a3, "setTemplate:", v66);

    return;
  }
  v119 = sub_10043C46C(a1, 0);
  v113 = a2;
  v114 = a1;
  if ((v14 & 1) != 0)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
    CKRecordKeyValueSetting.subscript.getter(v15, v16, v9, &type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)&v17 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v122 & 1) == 0 && v121 == 1 && objc_msgSend(a2, "markedForDeletion", v17))
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v18 = type metadata accessor for Logger(0);
      sub_10001AAA8(v18, (uint64_t)qword_10084AA70);
      v19 = a1;
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(22, -1);
        v23 = swift_slowAlloc(64, -1);
        v121 = v23;
        *(_DWORD *)v22 = 136446466;
        v24 = CKRecord.recordType.getter(v23);
        v120 = (ValueMetadata *)sub_10001A820(v24, v25, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);

        *(_QWORD *)&v26 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v22 + 12) = 2082;
        v27 = objc_msgSend(v19, "recordID", v26);
        v28 = objc_msgSend(v27, "ckShortDescription");

        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v31 = v30;

        v120 = (ValueMetadata *)sub_10001A820(v29, v31, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        v32 = v22;
        a2 = v113;
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v33 = type metadata accessor for Logger(0);
      sub_10001AAA8(v33, (uint64_t)qword_10084AA70);
      v34 = a1;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = swift_slowAlloc(22, -1);
        v38 = swift_slowAlloc(64, -1);
        v121 = v38;
        *(_DWORD *)v37 = 136446466;
        v39 = CKRecord.recordType.getter(v38);
        v120 = (ValueMetadata *)sub_10001A820(v39, v40, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);

        *(_QWORD *)&v41 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v37 + 12) = 2082;
        v42 = objc_msgSend(v34, "recordID", v41);
        v43 = objc_msgSend(v42, "ckShortDescription");

        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v46 = v45;

        v120 = (ValueMetadata *)sub_10001A820(v44, v46, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        v47 = v37;
        a2 = v113;
        swift_slowDealloc(v47, -1, -1);

      }
      else
      {

      }
      objc_msgSend(a2, "updateChangeCount");
    }
    a1 = v114;
  }
  if (!objc_msgSend(a2, "shouldPerformCloudSchemaCatchUpSync"))
    goto LABEL_36;
  v49 = objc_msgSend(a2, "storeControllerManagedObjectContext");
  if (!v49)
    goto LABEL_36;
  v50 = v49;
  v51 = objc_msgSend(a2, "accountCKIdentifier");
  if (!v51)
  {

LABEL_36:
    v116 = &_swiftEmptySetSingleton;
    goto LABEL_37;
  }
  v52 = v51;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  v55 = v54;

  v56 = objc_msgSend(v50, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
  v57 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
  v58 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v56, &type metadata for String, v57, &protocol witness table for String);

  if (!*(_QWORD *)(v58 + 16))
  {

    swift_bridgeObjectRelease();
    *(_QWORD *)&v48 = swift_bridgeObjectRelease().n128_u64[0];
    v116 = &_swiftEmptySetSingleton;
    a2 = v113;
    goto LABEL_37;
  }
  v59 = sub_10001A6DC(v53, v55);
  a2 = v113;
  if ((v60 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    *(_QWORD *)&v48 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_36;
  }
  v61 = *(id *)(*(_QWORD *)(v58 + 56) + 8 * v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v62 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", v113, objc_msgSend(v61, "persistenceCloudSchemaVersion"));
  v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v62, &type metadata for String);

  v116 = (void *)sub_10011EE40(v63);
  *(_QWORD *)&v48 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_37:
  v118 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v48);
  v67 = objc_msgSend(v119, "getTokenKeys");
  v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, &type metadata for String);

  v69 = *(_QWORD *)(v68 + 16);
  if (v69)
  {
    v70 = (_QWORD *)(v68 + 40);
    do
    {
      v71 = *(v70 - 1);
      v72 = (void *)*v70;
      swift_bridgeObjectRetain_n(*v70, 2);
      v73._countAndFlagsBits = v71;
      v73._object = v72;
      v74 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDC70, v73);
      *(_QWORD *)&v75 = swift_bridgeObjectRelease().n128_u64[0];
      if (v74 > 2)
      {
        swift_bridgeObjectRetain(v72);
        v78._countAndFlagsBits = v71;
        v78._object = v72;
        v79 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDCD8, v78);
        swift_bridgeObjectRelease();
        if (v79)
        {
          if (qword_1008374E8 != -1)
            swift_once(&qword_1008374E8, sub_100438310);
          v80 = type metadata accessor for Logger(0);
          sub_10001AAA8(v80, (uint64_t)qword_10084AA70);
          v81 = a1;
          swift_bridgeObjectRetain(v72);
          v83 = Logger.logObject.getter(v82);
          v84 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v83, v84))
          {
            v85 = swift_slowAlloc(32, -1);
            v86 = swift_slowAlloc(96, -1);
            v121 = v86;
            *(_DWORD *)v85 = 136446722;
            swift_bridgeObjectRetain(v72);
            *(_QWORD *)(v85 + 4) = sub_10001A820(v71, (unint64_t)v72, &v121);
            swift_bridgeObjectRelease_n(v72, 3);
            *(_WORD *)(v85 + 12) = 2082;
            v88 = CKRecord.recordType.getter(v87);
            *(_QWORD *)(v85 + 14) = sub_10001A820(v88, v89, &v121);

            swift_bridgeObjectRelease();
            *(_WORD *)(v85 + 22) = 2082;
            v120 = &_s6FieldsON_3;
            v90 = sub_10001A630((uint64_t *)&unk_10084AB30);
            v91 = String.init<A>(reflecting:)(&v120, v90);
            *(_QWORD *)(v85 + 24) = sub_10001A820(v91, v92, &v121);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v85, 0x20u);
            swift_arrayDestroy(v86, 3, (char *)&type metadata for Any + 8);
            v93 = v86;
            a1 = v114;
            swift_slowDealloc(v93, -1, -1);
            v94 = v85;
            a2 = v113;
            swift_slowDealloc(v94, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v72, 2);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        LOBYTE(v120) = v74;
        if (objc_msgSend(a2, "shouldPerformCloudSchemaCatchUpSync", v75)
          && (!(_BYTE)v74
            ? (v77 = 0xE800000000000000, v76 = 0x617461646174656DLL)
            : (v74 != 1 ? (v76 = 0x6574616C706D6574) : (v76 = 0xD00000000000001DLL),
               v74 != 1 ? (v77 = 0xE800000000000000) : (v77 = 0x80000001006F4AB0)),
              v95 = sub_1001B2278(v76, v77, (uint64_t)v116),
              swift_bridgeObjectRelease(),
              (v95 & 1) != 0))
        {
          if (qword_1008374E8 != -1)
            swift_once(&qword_1008374E8, sub_100438310);
          v96 = type metadata accessor for Logger(0);
          sub_10001AAA8(v96, (uint64_t)qword_10084AA70);
          swift_bridgeObjectRetain_n(v72, 2);
          v97 = a2;
          v98 = Logger.logObject.getter(v97);
          v99 = static os_log_type_t.default.getter(v98);
          if (os_log_type_enabled(v98, v99))
          {
            v112 = v99;
            v100 = swift_slowAlloc(22, -1);
            v111 = swift_slowAlloc(64, -1);
            v121 = v111;
            *(_DWORD *)v100 = 136446466;
            swift_bridgeObjectRetain(v72);
            *(_QWORD *)(v100 + 4) = sub_10001A820(v71, (unint64_t)v72, &v121);
            *(_QWORD *)&v101 = swift_bridgeObjectRelease_n(v72, 3).n128_u64[0];
            *(_WORD *)(v100 + 12) = 2082;
            v102 = objc_msgSend(v97, "remObjectID", v101);
            if (v102)
            {
              v103 = v102;
              v104 = objc_msgSend(v102, "description");

              v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
              v107 = v106;

              a2 = v113;
            }
            else
            {
              v107 = 0xE300000000000000;
              v105 = 7104878;
            }
            *(_QWORD *)(v100 + 14) = sub_10001A820(v105, v107, &v121);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v98, v112, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v100, 0x16u);
            swift_arrayDestroy(v111, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v111, -1, -1);
            swift_slowDealloc(v100, -1, -1);

            a1 = v114;
          }
          else
          {

            swift_bridgeObjectRelease_n(v72, 2);
          }
          sub_100309E24(&v120, a3, a4);
          v110 = String._bridgeToObjectiveC()();
          objc_msgSend(v118, "forceMergeFromMap:forKey:", v119, v110, swift_bridgeObjectRelease().n128_f64[0]);

        }
        else
        {
          v108 = String._bridgeToObjectiveC()();
          v109 = objc_msgSend(v118, "compareAndMergeWithMap:forKey:", v119, v108, swift_bridgeObjectRelease().n128_f64[0]);

          if (v109 == (id)-1)
            sub_100309E24(&v120, a3, a4);
        }
      }
      v70 += 2;
      --v69;
    }
    while (v69);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void sub_100449F1C(void *a1, int a2, int a3, void *a4, void *a5, void *a6, _BYTE *a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  void *v19;
  void *v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  double v48;
  id v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  id v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  Swift::String v77;
  unint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  Swift::Int v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  id v100;
  NSObject *v101;
  int v102;
  uint64_t v103;
  double v104;
  id v105;
  void *v106;
  id v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  NSString v111;
  id v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  NSString v120;
  uint64_t v121;
  char *v122;
  __int128 v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  __int128 v127;
  void *v128;
  int v129;
  void *v130;
  _BYTE *v131;
  void *v132;
  void *v133;
  int v134;
  void *v135;
  id v136;
  id v137;
  ValueMetadata *v138;
  uint64_t v139;
  char v140;

  v130 = a5;
  v131 = a7;
  v133 = a6;
  v134 = a3;
  v129 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v14 = v13;
  v15 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v135 = a1;
  CKRecordKeyValueSetting.subscript.getter(v12, v14, v15, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v140 & 1) != 0 || v139 != 1)
  {
    v137 = sub_10043CCFC(v135, 0);
    v128 = a4;
    if ((v22 & 1) != 0)
    {
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
      CKRecordKeyValueSetting.subscript.getter(v23, v24, v15, &type metadata for Int, &protocol witness table for Int);
      *(_QWORD *)&v25 = swift_bridgeObjectRelease().n128_u64[0];
      if ((v140 & 1) == 0 && v139 == 1 && objc_msgSend(a4, "markedForDeletion", v25))
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v26 = type metadata accessor for Logger(0);
        sub_10001AAA8(v26, (uint64_t)qword_10084AA70);
        v27 = v135;
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.default.getter(v28);
        if (os_log_type_enabled(v28, v29))
        {
          v30 = swift_slowAlloc(22, -1);
          v31 = swift_slowAlloc(64, -1);
          v139 = v31;
          *(_DWORD *)v30 = 136446466;
          v32 = CKRecord.recordType.getter(v31);
          v138 = (ValueMetadata *)sub_10001A820(v32, v33, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);

          *(_QWORD *)&v34 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v30 + 12) = 2082;
          v35 = objc_msgSend(v27, "recordID", v34);
          v36 = objc_msgSend(v35, "ckShortDescription");

          v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
          v39 = v38;

          v138 = (ValueMetadata *)sub_10001A820(v37, v39, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);

          a4 = v128;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v31, -1, -1);
          swift_slowDealloc(v30, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v40 = type metadata accessor for Logger(0);
        sub_10001AAA8(v40, (uint64_t)qword_10084AA70);
        v41 = v135;
        v42 = Logger.logObject.getter(v41);
        v43 = static os_log_type_t.default.getter(v42);
        if (os_log_type_enabled(v42, v43))
        {
          v44 = swift_slowAlloc(22, -1);
          v45 = swift_slowAlloc(64, -1);
          v139 = v45;
          *(_DWORD *)v44 = 136446466;
          v46 = CKRecord.recordType.getter(v45);
          v138 = (ValueMetadata *)sub_10001A820(v46, v47, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);

          *(_QWORD *)&v48 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v44 + 12) = 2082;
          v49 = objc_msgSend(v41, "recordID", v48);
          v50 = objc_msgSend(v49, "ckShortDescription");

          v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          v53 = v52;

          v138 = (ValueMetadata *)sub_10001A820(v51, v53, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);

          a4 = v128;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1, -1);
          swift_slowDealloc(v44, -1, -1);

        }
        else
        {

        }
        objc_msgSend(a4, "updateChangeCount");
      }
    }
    if (objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync"))
    {
      v55 = objc_msgSend(a4, "storeControllerManagedObjectContext");
      if (v55)
      {
        v56 = v55;
        v57 = objc_msgSend(a4, "accountCKIdentifier");
        if (v57)
        {
          v58 = v57;
          v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
          v61 = v60;

          v62 = objc_msgSend(v56, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
          v63 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
          v64 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v62, &type metadata for String, v63, &protocol witness table for String);

          if (*(_QWORD *)(v64 + 16))
          {
            v65 = sub_10001A6DC(v59, v61);
            if ((v66 & 1) != 0)
            {
              v67 = *(id *)(*(_QWORD *)(v64 + 56) + 8 * v65);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v68 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", a4, objc_msgSend(v67, "persistenceCloudSchemaVersion"));
              v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, &type metadata for String);

              v132 = (void *)sub_10011EE40(v69);
              *(_QWORD *)&v54 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_29:
              v136 = objc_msgSend(a4, "createResolutionTokenMapIfNecessary", v54);
              v70 = objc_msgSend(v137, "getTokenKeys");
              v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v70, &type metadata for String);

              v126 = v71;
              v73 = *(_QWORD *)(v71 + 16);
              if (!v73)
              {
LABEL_76:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                goto LABEL_77;
              }
              v74 = (_QWORD *)(v126 + 40);
              *(_QWORD *)&v72 = 136446466;
              v123 = v72;
              v122 = (char *)&type metadata for Any + 8;
              *(_QWORD *)&v72 = 136446722;
              v127 = v72;
              while (1)
              {
                v75 = *(v74 - 1);
                v76 = (void *)*v74;
                swift_bridgeObjectRetain_n(*v74, 2);
                v77._countAndFlagsBits = v75;
                v77._object = v76;
                v78 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDD60, v77);
                *(_QWORD *)&v79 = swift_bridgeObjectRelease().n128_u64[0];
                if (v78 > 2)
                  break;
                LOBYTE(v138) = v78;
                if (objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync", v79))
                {
                  if ((_BYTE)v78)
                  {
                    v80 = v78 == 1 ? 0x4E79616C70736964 : 0x73694C7472616D73;
                    v81 = v78 == 1 ? 0xEB00000000656D61 : 0xE900000000000074;
                  }
                  else
                  {
                    v80 = 0x6E6F697461657263;
                    v81 = 0xEC00000065746144;
                  }
                  v98 = sub_1001B2278(v80, v81, (uint64_t)v132);
                  swift_bridgeObjectRelease();
                  if ((v98 & 1) != 0)
                  {
                    if (qword_1008374E8 != -1)
                      swift_once(&qword_1008374E8, sub_100438310);
                    v99 = type metadata accessor for Logger(0);
                    sub_10001AAA8(v99, (uint64_t)qword_10084AA70);
                    swift_bridgeObjectRetain_n(v76, 2);
                    v100 = a4;
                    v101 = Logger.logObject.getter(v100);
                    v102 = static os_log_type_t.default.getter(v101);
                    if (os_log_type_enabled(v101, (os_log_type_t)v102))
                    {
                      v125 = v102;
                      v103 = swift_slowAlloc(22, -1);
                      v124 = swift_slowAlloc(64, -1);
                      v139 = v124;
                      *(_DWORD *)v103 = v123;
                      swift_bridgeObjectRetain(v76);
                      *(_QWORD *)(v103 + 4) = sub_10001A820(v75, (unint64_t)v76, &v139);
                      *(_QWORD *)&v104 = swift_bridgeObjectRelease_n(v76, 3).n128_u64[0];
                      *(_WORD *)(v103 + 12) = 2082;
                      v105 = objc_msgSend(v100, "remObjectID", v104);
                      if (v105)
                      {
                        v106 = v105;
                        v107 = objc_msgSend(v105, "description");

                        v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
                        v110 = v109;

                      }
                      else
                      {
                        v110 = 0xE300000000000000;
                        v108 = 7104878;
                      }
                      *(_QWORD *)(v103 + 14) = sub_10001A820(v108, v110, &v139);

                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v125, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v103, 0x16u);
                      v119 = v124;
                      swift_arrayDestroy(v124, 2, v122);
                      swift_slowDealloc(v119, -1, -1);
                      swift_slowDealloc(v103, -1, -1);

                      a4 = v128;
                    }
                    else
                    {

                      swift_bridgeObjectRelease_n(v76, 2);
                    }
                    sub_1003CAE38(&v138, v130, v133, v131);
                    v120 = String._bridgeToObjectiveC()();
                    objc_msgSend(v136, "forceMergeFromMap:forKey:", v137, v120, swift_bridgeObjectRelease().n128_f64[0]);

                    goto LABEL_32;
                  }
                }
                v111 = String._bridgeToObjectiveC()();
                v112 = objc_msgSend(v136, "compareAndMergeWithMap:forKey:", v137, v111, swift_bridgeObjectRelease().n128_f64[0]);

                if ((v134 & 1) == 0)
                  goto LABEL_62;
                if ((_BYTE)v78)
                {
                  if (v78 != 1)
                    goto LABEL_66;
                  v113 = 0x4E79616C70736964;
                  v114 = 0xEB00000000656D61;
                }
                else
                {
                  v113 = 0x6E6F697461657263;
                  v114 = 0xEC00000065746144;
                }
                v115 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v114, 0x73694C7472616D73, 0xE900000000000074, 0);
                swift_bridgeObjectRelease();
                if ((v115 & 1) == 0)
                {
LABEL_62:
                  if ((v129 & 1) != 0)
                  {
                    if ((_BYTE)v78)
                    {
                      if (v78 != 1)
                      {
                        swift_bridgeObjectRelease();
LABEL_72:
                        sub_1003CAE38(&v138, v130, v133, v131);
                        goto LABEL_32;
                      }
                      v116 = 0x4E79616C70736964;
                      v117 = 0xEB00000000656D61;
                    }
                    else
                    {
                      v116 = 0x6E6F697461657263;
                      v117 = 0xEC00000065746144;
                    }
                    v118 = _stringCompareWithSmolCheck(_:_:expecting:)(v116, v117, 0x73694C7472616D73, 0xE900000000000074, 0);
                    swift_bridgeObjectRelease();
                    if ((v118 & 1) != 0)
                      goto LABEL_72;
                  }
                  if (v112 == (id)-1)
                    goto LABEL_72;
                }
LABEL_32:
                v74 += 2;
                if (!--v73)
                  goto LABEL_76;
              }
              swift_bridgeObjectRetain(v76);
              v82._countAndFlagsBits = v75;
              v82._object = v76;
              v83 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDDC8, v82);
              swift_bridgeObjectRelease();
              if (v83)
              {
                if (qword_1008374E8 != -1)
                  swift_once(&qword_1008374E8, sub_100438310);
                v84 = type metadata accessor for Logger(0);
                sub_10001AAA8(v84, (uint64_t)qword_10084AA70);
                v85 = v135;
                swift_bridgeObjectRetain(v76);
                v87 = Logger.logObject.getter(v86);
                v88 = static os_log_type_t.error.getter(v87);
                if (os_log_type_enabled(v87, v88))
                {
                  v89 = swift_slowAlloc(32, -1);
                  v90 = swift_slowAlloc(96, -1);
                  v139 = v90;
                  *(_DWORD *)v89 = v127;
                  swift_bridgeObjectRetain(v76);
                  *(_QWORD *)(v89 + 4) = sub_10001A820(v75, (unint64_t)v76, &v139);
                  swift_bridgeObjectRelease_n(v76, 3);
                  *(_WORD *)(v89 + 12) = 2082;
                  v92 = CKRecord.recordType.getter(v91);
                  *(_QWORD *)(v89 + 14) = sub_10001A820(v92, v93, &v139);

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v89 + 22) = 2082;
                  v138 = &_s6FieldsON_4;
                  v94 = sub_10001A630(&qword_10084AB28);
                  v95 = String.init<A>(reflecting:)(&v138, v94);
                  *(_QWORD *)(v89 + 24) = sub_10001A820(v95, v96, &v139);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v87, v88, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v89, 0x20u);
                  swift_arrayDestroy(v90, 3, (char *)&type metadata for Any + 8);
                  v97 = v90;
                  a4 = v128;
                  swift_slowDealloc(v97, -1, -1);
                  swift_slowDealloc(v89, -1, -1);

                }
                else
                {

                  swift_bridgeObjectRelease_n(v76, 2);
                }
                goto LABEL_32;
              }
LABEL_66:
              swift_bridgeObjectRelease();
              goto LABEL_32;
            }
          }

          swift_bridgeObjectRelease();
          *(_QWORD *)&v54 = swift_bridgeObjectRelease().n128_u64[0];
        }
        else
        {

        }
      }
    }
    v132 = &_swiftEmptySetSingleton;
    goto LABEL_29;
  }
  v16 = type metadata accessor for Date(0);
  CKRecordKeyValueSetting.subscript.getter(0x6E6F697461657243, 0xEC00000065746144, v15, v16, &protocol witness table for Date);
  v17 = *(_QWORD *)(v16 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v16) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v16);
  }
  v19 = v130;
  objc_msgSend(v130, "setCreationDate:", isa);

  LOBYTE(v139) = 1;
  v20 = v133;
  v21 = v131;
  sub_1003CAE38(&v139, v19, v133, v131);
  LOBYTE(v139) = 2;
  sub_1003CAE38(&v139, v19, v20, v21);
  v136 = sub_10043CCFC(v135, 1);
LABEL_77:

}

void sub_10044AE80(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  id v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE v65[4];
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v65[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v8);
  v10 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v11);
  v14 = &v65[-v13];
  v15 = objc_msgSend((id)swift_getObjCClassFromObject(a1, v12), "cdEntityName");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = objc_msgSend(a1, "identifier");
  if (v19)
  {
    v20 = v19;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, v21, 1, v4);
  sub_1000A5CA8((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_100839C80);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
  {
    sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);
    v22 = 0xE300000000000000;
    v23 = 7104878;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v7, v14, v4);
    v24 = sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);
    v23 = UUID.uuidString.getter(v24);
    v22 = v25;
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  v26 = objc_msgSend((id)objc_opt_self(REMCDObject), "ckRecordKeyForMinimumSupportedVersion");
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = CKRecord.subscript.getter(v27, v29);
  swift_unknownObjectRelease(v30);
  if (v30)
  {
    v69 = v16;
    v31 = CKRecord.subscript.getter(v27, v29);
    if (v31)
    {
      v32 = v31;
      v33 = objc_opt_self(NSNumber);
      v34 = swift_dynamicCastObjCClass(v32, v33);
      if (v34)
      {
        v35 = (void *)v34;
        swift_bridgeObjectRelease();
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v36 = type metadata accessor for Logger(0);
        sub_10001AAA8(v36, (uint64_t)qword_10084AA70);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v22);
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.default.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          v40 = swift_slowAlloc(22, -1);
          v68 = v23;
          v41 = v40;
          v67 = swift_slowAlloc(64, -1);
          v71 = v67;
          *(_DWORD *)v41 = 136446466;
          swift_bridgeObjectRetain(v18);
          v70 = sub_10001A820(v69, v18, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
          swift_bridgeObjectRelease_n(v18, 3);
          *(_WORD *)(v41 + 12) = 2082;
          swift_bridgeObjectRetain(v22);
          v70 = sub_10001A820(v68, v22, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
          swift_bridgeObjectRelease_n(v22, 3);
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "REMCDObjectSystemFieldsMerging: Merged updated minimumSupportedVersion as NSNumber from CK record {entity: %{public}s, identifier: %{public}s}", (uint8_t *)v41, 0x16u);
          v42 = v67;
          swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v42, -1, -1);
          swift_slowDealloc(v41, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v22, 2);
          *(_QWORD *)&v43 = swift_bridgeObjectRelease_n(v18, 2).n128_u64[0];
        }
        objc_msgSend(a1, "setMinimumSupportedVersion:", objc_msgSend(v35, "integerValue", v43));
        swift_unknownObjectRelease(v32);
        return;
      }
      swift_unknownObjectRelease(v32);
    }
    if (qword_1008374E8 != -1)
      swift_once(&qword_1008374E8, sub_100438310);
    v54 = type metadata accessor for Logger(0);
    sub_10001AAA8(v54, (uint64_t)qword_10084AA70);
    swift_bridgeObjectRetain_n(v29, 3);
    v55 = a2;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
    v56 = v55;
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.fault.getter();
    v59 = v58;
    if (os_log_type_enabled(v57, v58))
    {
      v60 = swift_slowAlloc(42, -1);
      v67 = swift_slowAlloc(128, -1);
      v71 = v67;
      *(_DWORD *)v60 = 136446978;
      v68 = v23;
      swift_bridgeObjectRetain(v29);
      v70 = sub_10001A820(v27, v29, &v71);
      v66 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease_n(v29, 3);
      *(_WORD *)(v60 + 12) = 2082;
      swift_bridgeObjectRetain(v18);
      v70 = sub_10001A820(v69, v18, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease_n(v18, 3);
      *(_WORD *)(v60 + 22) = 2082;
      swift_bridgeObjectRetain(v22);
      v70 = sub_10001A820(v68, v22, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease_n(v22, 3);
      *(_WORD *)(v60 + 32) = 2080;
      v70 = CKRecord.subscript.getter(v27, v29);
      v61 = sub_10001A630((uint64_t *)&unk_10084AB08);
      v62 = String.init<A>(describing:)(&v70, v61);
      v70 = sub_10001A820(v62, v63, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease_n(v29, 2);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v66, "REMCDObjectSystemFieldsMerging: Unknown kind of value in ckRecord[%{public}s] {entity: %{public}s, identifier: %{public}s, value: %s}", (uint8_t *)v60, 0x2Au);
      v64 = v67;
      swift_arrayDestroy(v67, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v60, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v22, 2);
      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease_n(v29, 4);
    }
  }
  else
  {
    v44 = objc_msgSend(a1, "minimumSupportedVersion", swift_bridgeObjectRelease().n128_f64[0]);
    v45 = kREMSupportedVersionUnset;
    if (v44 == (id)kREMSupportedVersionUnset)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v46 = type metadata accessor for Logger(0);
      sub_10001AAA8(v46, (uint64_t)qword_10084AA70);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v22);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc(22, -1);
        v68 = v23;
        v51 = v50;
        v52 = swift_slowAlloc(64, -1);
        v71 = v52;
        *(_DWORD *)v51 = 136446466;
        swift_bridgeObjectRetain(v18);
        v70 = sub_10001A820(v16, v18, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        swift_bridgeObjectRelease_n(v18, 3);
        *(_WORD *)(v51 + 12) = 2082;
        swift_bridgeObjectRetain(v22);
        v70 = sub_10001A820(v68, v22, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        swift_bridgeObjectRelease_n(v22, 3);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "REMCDObjectSystemFieldsMerging: Found a case we are merging down a Unset version number from CK while local object version isn't unset {entity: %{public}s, identifier: %{public}s}", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v22, 2);
        *(_QWORD *)&v53 = swift_bridgeObjectRelease_n(v18, 2).n128_u64[0];
      }
      objc_msgSend(a1, "setMinimumSupportedVersion:", v45, v53);
    }
  }
}

void sub_10044B798(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  id v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  Swift::String v71;
  Swift::Int v72;
  double v73;
  uint64_t v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  double v79;
  id v80;
  void *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  NSString v86;
  id v87;
  NSString v88;
  void *v89;
  uint64_t v90;
  os_log_type_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  id v98;
  void *v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;
  id v104;
  char v105;

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v10 = v9;
  v11 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.getter(v8, v10, v11, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v105 & 1) == 0 && v104 == (id)1)
  {
    sub_10044AE80(a3, a4);

    return;
  }
  v12 = sub_10043D564(a1, 0);
  v98 = v12;
  if ((v13 & 1) != 0)
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
    CKRecordKeyValueSetting.subscript.getter(v14, v15, v11, &type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)&v16 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v105 & 1) == 0 && v104 == (id)1 && objc_msgSend(a2, "markedForDeletion", v16))
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v17 = type metadata accessor for Logger(0);
      sub_10001AAA8(v17, (uint64_t)qword_10084AA70);
      v18 = a1;
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        v95 = a4;
        v21 = swift_slowAlloc(22, -1);
        v100 = (id)swift_slowAlloc(64, -1);
        v104 = v100;
        *(_DWORD *)v21 = 136446466;
        v92 = a3;
        v22 = CKRecord.recordType.getter(v100);
        v103 = sub_10001A820(v22, v23, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);

        *(_QWORD *)&v24 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v21 + 12) = 2082;
        v25 = objc_msgSend(v18, "recordID", v24);
        v26 = a2;
        v27 = objc_msgSend(v25, "ckShortDescription");

        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        v30 = v29;

        a2 = v26;
        v12 = v98;
        v31 = v28;
        a3 = v92;
        v103 = sub_10001A820(v31, v30, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy(v100, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1, -1);
        v32 = v21;
        a4 = v95;
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v33 = type metadata accessor for Logger(0);
      sub_10001AAA8(v33, (uint64_t)qword_10084AA70);
      v34 = a1;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v96 = a4;
        v37 = swift_slowAlloc(22, -1);
        v101 = (id)swift_slowAlloc(64, -1);
        v104 = v101;
        *(_DWORD *)v37 = 136446466;
        v93 = a3;
        v38 = CKRecord.recordType.getter(v101);
        v103 = sub_10001A820(v38, v39, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);

        *(_QWORD *)&v40 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v37 + 12) = 2082;
        v41 = objc_msgSend(v34, "recordID", v40);
        v42 = a2;
        v43 = objc_msgSend(v41, "ckShortDescription");

        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v46 = v45;

        a2 = v42;
        v12 = v98;
        v47 = v44;
        a3 = v93;
        v103 = sub_10001A820(v47, v46, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy(v101, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1, -1);
        v48 = v37;
        a4 = v96;
        swift_slowDealloc(v48, -1, -1);

      }
      else
      {

      }
      objc_msgSend(a2, "updateChangeCount");
    }
  }
  if (!objc_msgSend(a2, "shouldPerformCloudSchemaCatchUpSync"))
    goto LABEL_27;
  v50 = objc_msgSend(a2, "storeControllerManagedObjectContext");
  if (!v50)
    goto LABEL_27;
  v51 = v50;
  v52 = objc_msgSend(a2, "accountCKIdentifier");
  if (!v52)
  {

LABEL_27:
    v99 = &_swiftEmptySetSingleton;
    goto LABEL_28;
  }
  v53 = v52;
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  v56 = v55;

  v57 = objc_msgSend(v51, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
  v58 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
  v59 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v57, &type metadata for String, v58, &protocol witness table for String);

  if (!*(_QWORD *)(v59 + 16))
  {

    swift_bridgeObjectRelease();
    *(_QWORD *)&v49 = swift_bridgeObjectRelease().n128_u64[0];
    v99 = &_swiftEmptySetSingleton;
    v12 = v98;
    goto LABEL_28;
  }
  v60 = sub_10001A6DC(v54, v56);
  v12 = v98;
  if ((v61 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    *(_QWORD *)&v49 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_27;
  }
  v62 = *(id *)(*(_QWORD *)(v59 + 56) + 8 * v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v63 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", a2, objc_msgSend(v62, "persistenceCloudSchemaVersion"));
  v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v63, &type metadata for String);

  v99 = (void *)sub_10011EE40(v64);
  *(_QWORD *)&v49 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_28:
  v102 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v49);
  v65 = objc_msgSend(v12, "getTokenKeys");
  v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, &type metadata for String);

  v67 = *(_QWORD *)(v66 + 16);
  if (v67)
  {
    v68 = (_QWORD *)(v66 + 40);
    v94 = a3;
    v97 = a4;
    do
    {
      v70 = *(v68 - 1);
      v69 = (void *)*v68;
      swift_bridgeObjectRetain_n(*v68, 2);
      v71._countAndFlagsBits = v70;
      v71._object = v69;
      v72 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDE28, v71);
      *(_QWORD *)&v73 = swift_bridgeObjectRelease().n128_u64[0];
      if (v72)
      {
        swift_bridgeObjectRelease();
      }
      else if ((objc_msgSend(a2, "shouldPerformCloudSchemaCatchUpSync", v73) & 1) != 0
             && (sub_1001B2278(0xD000000000000017, 0x80000001006F4060, (uint64_t)v99) & 1) != 0)
      {
        if (qword_1008374E8 != -1)
          swift_once(&qword_1008374E8, sub_100438310);
        v74 = type metadata accessor for Logger(0);
        sub_10001AAA8(v74, (uint64_t)qword_10084AA70);
        swift_bridgeObjectRetain_n(v69, 2);
        v75 = a2;
        v76 = Logger.logObject.getter(v75);
        v77 = static os_log_type_t.default.getter(v76);
        if (os_log_type_enabled(v76, v77))
        {
          v91 = v77;
          v78 = swift_slowAlloc(22, -1);
          v90 = swift_slowAlloc(64, -1);
          v104 = (id)v90;
          *(_DWORD *)v78 = 136446466;
          swift_bridgeObjectRetain(v69);
          *(_QWORD *)(v78 + 4) = sub_10001A820(v70, (unint64_t)v69, (uint64_t *)&v104);
          *(_QWORD *)&v79 = swift_bridgeObjectRelease_n(v69, 3).n128_u64[0];
          *(_WORD *)(v78 + 12) = 2082;
          v80 = objc_msgSend(v75, "remObjectID", v79);
          if (v80)
          {
            v81 = v80;
            v89 = a2;
            v82 = objc_msgSend(v80, "description");

            v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
            v85 = v84;

            a2 = v89;
          }
          else
          {
            v85 = 0xE300000000000000;
            v83 = 7104878;
          }
          *(_QWORD *)(v78 + 14) = sub_10001A820(v83, v85, (uint64_t *)&v104);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v76, v91, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v78, 0x16u);
          swift_arrayDestroy(v90, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v90, -1, -1);
          swift_slowDealloc(v78, -1, -1);

          a3 = v94;
          a4 = v97;
        }
        else
        {

          swift_bridgeObjectRelease_n(v69, 2);
        }
        sub_10044AE80(a3, a4);
        v88 = String._bridgeToObjectiveC()();
        v12 = v98;
        objc_msgSend(v102, "forceMergeFromMap:forKey:", v98, v88, swift_bridgeObjectRelease().n128_f64[0]);

      }
      else
      {
        v86 = String._bridgeToObjectiveC()();
        v87 = objc_msgSend(v102, "compareAndMergeWithMap:forKey:", v12, v86, swift_bridgeObjectRelease().n128_f64[0]);

        if (v87 == (id)-1)
          sub_10044AE80(a3, a4);
      }
      v68 += 2;
      --v67;
    }
    while (v67);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void sub_10044C2B8(void *a1, int a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  Class isa;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t ObjectType;
  double v29;
  NSString v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  id v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  double v58;
  id v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  double v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  id v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  id v93;
  void *v94;
  Swift::String v95;
  Swift::Int v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  Swift::Int v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  id v118;
  NSObject *v119;
  id v120;
  uint64_t v121;
  double v122;
  id v123;
  void *v124;
  id v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  NSString v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  NSString v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  void *v144;
  int v145;
  void *v146;
  id v147;
  uint64_t v148;
  void *v149;
  int v150;
  void *v151;
  id v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  ValueMetadata *v156;
  uint64_t v157;

  v148 = a7;
  v149 = (void *)a6;
  v147 = a5;
  v150 = a3;
  v145 = a2;
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v14 = v13;
  v15 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v151 = a1;
  CKRecordKeyValueSetting.subscript.getter(v12, v14, v15, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v155 & 1) == 0 && v154 == 1)
  {
    v22 = type metadata accessor for Date(0);
    CKRecordKeyValueSetting.subscript.getter(0x6E6F697461657243, 0xEC00000065746144, v15, v22, &protocol witness table for Date);
    v23 = *(_QWORD *)(v22 - 8);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v22) != 1)
    {
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v22);
    }
    v25 = (uint64_t)v147;
    objc_msgSend(v147, "setCreationDate:", isa);

    LOBYTE(v154) = 1;
    v26 = v149;
    sub_1004F0874((uint64_t)&v154, v25, (uint64_t)v149, v148);
    v27 = objc_msgSend(v26, "encryptedValues");
    ObjectType = swift_getObjectType();
    CKRecordKeyValueSetting.subscript.getter(0x6163696E6F6E6143, 0xED0000656D614E6CLL, ObjectType, &type metadata for String, &protocol witness table for String);
    swift_unknownObjectRelease(v27);
    if (v155)
    {
      v30 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v29 = swift_bridgeObjectRelease().n128_u64[0];
    }
    else
    {
      v30 = 0;
    }
    v81 = (uint64_t)v147;
    objc_msgSend(v147, "setCanonicalName:", v30, v29);

    LOBYTE(v154) = 3;
    sub_1004F0874((uint64_t)&v154, v81, (uint64_t)v149, v148);
    v152 = sub_10043DD10(v151, 1, v82, v83, v84, v85, v86, v87, v138, v139, v140, *((uint64_t *)&v140 + 1), v141);
    goto LABEL_72;
  }
  v153 = sub_10043DD10(v151, 0, v16, v17, v18, v19, v20, v21, v138, v139, v140, *((uint64_t *)&v140 + 1), v141);
  v144 = a4;
  if ((v31 & 1) != 0)
  {
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
    CKRecordKeyValueSetting.subscript.getter(v32, v33, v15, &type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)&v34 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v155 & 1) == 0 && v154 == 1 && objc_msgSend(a4, "markedForDeletion", v34))
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v35 = type metadata accessor for Logger(0);
      sub_10001AAA8(v35, (uint64_t)qword_10084AA70);
      v36 = v151;
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(22, -1);
        v40 = swift_slowAlloc(64, -1);
        v154 = v40;
        *(_DWORD *)v39 = 136446466;
        v41 = CKRecord.recordType.getter(v40);
        v156 = (ValueMetadata *)sub_10001A820(v41, v42, &v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);

        *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v39 + 12) = 2082;
        v44 = objc_msgSend(v36, "recordID", v43);
        v45 = objc_msgSend(v44, "ckShortDescription");

        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v48 = v47;

        v49 = v46;
        a4 = v144;
        v156 = (ValueMetadata *)sub_10001A820(v49, v48, &v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v50 = type metadata accessor for Logger(0);
      sub_10001AAA8(v50, (uint64_t)qword_10084AA70);
      v51 = v151;
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc(22, -1);
        v55 = swift_slowAlloc(64, -1);
        v154 = v55;
        *(_DWORD *)v54 = 136446466;
        v56 = CKRecord.recordType.getter(v55);
        v156 = (ValueMetadata *)sub_10001A820(v56, v57, &v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);

        *(_QWORD *)&v58 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v54 + 12) = 2082;
        v59 = objc_msgSend(v51, "recordID", v58);
        v60 = objc_msgSend(v59, "ckShortDescription");

        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v64 = v61;
        a4 = v144;
        v156 = (ValueMetadata *)sub_10001A820(v64, v63, &v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v54, -1, -1);

      }
      else
      {

      }
      objc_msgSend(a4, "updateChangeCount");
    }
  }
  if (!objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync"))
    goto LABEL_31;
  v66 = objc_msgSend(a4, "storeControllerManagedObjectContext");
  if (!v66)
    goto LABEL_31;
  v67 = v66;
  v68 = objc_msgSend(a4, "accountCKIdentifier");
  if (!v68)
  {

    goto LABEL_31;
  }
  v69 = v68;
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  v72 = v71;

  v73 = objc_msgSend(v67, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
  v74 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
  v75 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v73, &type metadata for String, v74, &protocol witness table for String);

  if (!*(_QWORD *)(v75 + 16) || (v76 = sub_10001A6DC(v70, v72), (v77 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    *(_QWORD *)&v65 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_31:
    v146 = &_swiftEmptySetSingleton;
    goto LABEL_32;
  }
  v78 = *(id *)(*(_QWORD *)(v75 + 56) + 8 * v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v79 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", a4, objc_msgSend(v78, "persistenceCloudSchemaVersion"));
  v80 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v79, &type metadata for String);

  v146 = (void *)sub_10011EE40(v80);
  *(_QWORD *)&v65 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_32:
  v152 = objc_msgSend(a4, "createResolutionTokenMapIfNecessary", v65);
  v88 = objc_msgSend(v153, "getTokenKeys");
  v89 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v88, &type metadata for String);

  v142 = v89;
  v91 = *(_QWORD *)(v89 + 16);
  if (v91)
  {
    v92 = (_QWORD *)(v142 + 40);
    *(_QWORD *)&v90 = 136446466;
    v140 = v90;
    v139 = (uint64_t)&type metadata for Any + 8;
    *(_QWORD *)&v90 = 136446722;
    v143 = v90;
    do
    {
      v93 = (id)*(v92 - 1);
      v94 = (void *)*v92;
      swift_bridgeObjectRetain_n(*v92, 2);
      v95._countAndFlagsBits = (uint64_t)v93;
      v95._object = v94;
      v96 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDEB0, v95);
      *(_QWORD *)&v97 = swift_bridgeObjectRelease().n128_u64[0];
      LOBYTE(v156) = v96;
      if (objc_msgSend(a4, "shouldPerformCloudSchemaCatchUpSync", v97))
      {
        v98 = 0xEC00000065746144;
        v99 = 0x6E6F697461657263;
        switch(v96)
        {
          case 0:
            goto LABEL_47;
          case 1:
            v99 = 0x4E79616C70736964;
            v98 = 0xEB00000000656D61;
            goto LABEL_47;
          case 2:
            v99 = 0x6163696E6F6E6163;
            v98 = 0xED0000656D614E6CLL;
            goto LABEL_47;
          case 3:
            v98 = 0xE400000000000000;
            v99 = 1953720684;
LABEL_47:
            v116 = sub_1001B2278(v99, v98, (uint64_t)v146);
            swift_bridgeObjectRelease();
            if ((v116 & 1) == 0)
              goto LABEL_53;
            if (qword_1008374E8 != -1)
              swift_once(&qword_1008374E8, sub_100438310);
            v117 = type metadata accessor for Logger(0);
            sub_10001AAA8(v117, (uint64_t)qword_10084AA70);
            swift_bridgeObjectRetain_n(v94, 2);
            v118 = a4;
            v119 = Logger.logObject.getter(v118);
            LODWORD(v120) = static os_log_type_t.default.getter(v119);
            if (os_log_type_enabled(v119, (os_log_type_t)v120))
            {
              v121 = swift_slowAlloc(22, -1);
              v141 = swift_slowAlloc(64, -1);
              v154 = v141;
              *(_DWORD *)v121 = v140;
              swift_bridgeObjectRetain(v94);
              *(_QWORD *)(v121 + 4) = sub_10001A820((uint64_t)v93, (unint64_t)v94, &v154);
              *(_QWORD *)&v122 = swift_bridgeObjectRelease_n(v94, 3).n128_u64[0];
              *(_WORD *)(v121 + 12) = 2082;
              v123 = objc_msgSend(v118, "remObjectID", v122);
              if (v123)
              {
                v124 = v123;
                v125 = objc_msgSend(v123, "description");
                HIDWORD(v138) = (_DWORD)v120;
                v120 = v125;

                v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
                v128 = v127;

                LOBYTE(v120) = BYTE4(v138);
              }
              else
              {
                v128 = 0xE300000000000000;
                v126 = 7104878;
              }
              *(_QWORD *)(v121 + 14) = sub_10001A820(v126, v128, &v154);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v119, (os_log_type_t)v120, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v121, 0x16u);
              v136 = v141;
              swift_arrayDestroy(v141, 2, v139);
              swift_slowDealloc(v136, -1, -1);
              swift_slowDealloc(v121, -1, -1);

              a4 = v144;
            }
            else
            {

              swift_bridgeObjectRelease_n(v94, 2);
            }
            sub_1004F0874((uint64_t)&v156, (uint64_t)v147, (uint64_t)v149, v148);
            v137 = String._bridgeToObjectiveC()();
            objc_msgSend(v152, "forceMergeFromMap:forKey:", v153, v137, swift_bridgeObjectRelease().n128_f64[0]);

            break;
          default:
LABEL_39:
            swift_bridgeObjectRetain(v94);
            v100._countAndFlagsBits = (uint64_t)v93;
            v100._object = v94;
            v101 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDF30, v100);
            swift_bridgeObjectRelease();
            if (v101)
            {
              if (qword_1008374E8 != -1)
                swift_once(&qword_1008374E8, sub_100438310);
              v102 = type metadata accessor for Logger(0);
              sub_10001AAA8(v102, (uint64_t)qword_10084AA70);
              v103 = v151;
              swift_bridgeObjectRetain(v94);
              v105 = Logger.logObject.getter(v104);
              v106 = static os_log_type_t.error.getter(v105);
              if (os_log_type_enabled(v105, v106))
              {
                v107 = swift_slowAlloc(32, -1);
                v108 = swift_slowAlloc(96, -1);
                v154 = v108;
                *(_DWORD *)v107 = v143;
                swift_bridgeObjectRetain(v94);
                *(_QWORD *)(v107 + 4) = sub_10001A820((uint64_t)v93, (unint64_t)v94, &v154);
                swift_bridgeObjectRelease_n(v94, 3);
                *(_WORD *)(v107 + 12) = 2082;
                v110 = CKRecord.recordType.getter(v109);
                *(_QWORD *)(v107 + 14) = sub_10001A820(v110, v111, &v154);

                swift_bridgeObjectRelease();
                *(_WORD *)(v107 + 22) = 2082;
                v156 = &_s6FieldsON_5;
                v112 = sub_10001A630((uint64_t *)&unk_10084AB18);
                v113 = String.init<A>(reflecting:)(&v156, v112);
                *(_QWORD *)(v107 + 24) = sub_10001A820(v113, v114, &v154);
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v105, v106, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v107, 0x20u);
                swift_arrayDestroy(v108, 3, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v108, -1, -1);
                v115 = v107;
                a4 = v144;
                swift_slowDealloc(v115, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v94, 2);
              }
            }
            else
            {
LABEL_44:
              swift_bridgeObjectRelease();
            }
            break;
        }
      }
      else
      {
LABEL_53:
        v129 = String._bridgeToObjectiveC()();
        v93 = objc_msgSend(v152, "compareAndMergeWithMap:forKey:", v153, v129, swift_bridgeObjectRelease().n128_f64[0]);

        if ((v150 & 1) == 0)
          goto LABEL_64;
        v130 = 0xEC00000065746144;
        v131 = 0x6E6F697461657263;
        switch(v96)
        {
          case 0:
            break;
          case 1:
            v131 = 0x4E79616C70736964;
            v130 = 0xEB00000000656D61;
            break;
          case 2:
            v131 = 0x6163696E6F6E6163;
            v130 = 0xED0000656D614E6CLL;
            break;
          case 3:
            goto LABEL_44;
          default:
            goto LABEL_39;
        }
        v132 = _stringCompareWithSmolCheck(_:_:expecting:)(v131, v130, 1953720684, 0xE400000000000000, 0);
        swift_bridgeObjectRelease();
        if ((v132 & 1) == 0)
        {
LABEL_64:
          if ((v145 & 1) != 0)
          {
            v133 = 0xEC00000065746144;
            v134 = 0x6E6F697461657263;
            switch(v96)
            {
              case 0:
                break;
              case 1:
                v134 = 0x4E79616C70736964;
                v133 = 0xEB00000000656D61;
                break;
              case 2:
                v134 = 0x6163696E6F6E6163;
                v133 = 0xED0000656D614E6CLL;
                break;
              case 3:
                swift_bridgeObjectRelease();
                goto LABEL_67;
              default:
                goto LABEL_39;
            }
            v135 = _stringCompareWithSmolCheck(_:_:expecting:)(v134, v133, 1953720684, 0xE400000000000000, 0);
            swift_bridgeObjectRelease();
            if ((v135 & 1) != 0)
              goto LABEL_67;
          }
          if (v93 == (id)-1)
LABEL_67:
            sub_1004F0874((uint64_t)&v156, (uint64_t)v147, (uint64_t)v149, v148);
        }
      }
      v92 += 2;
      --v91;
    }
    while (v91);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_72:
}

void sub_10044D340(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  id v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  Swift::String v65;
  Swift::Int v66;
  double v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  Swift::String v71;
  Swift::Int v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  id v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  double v93;
  id v94;
  void *v95;
  id v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  NSString v100;
  id v101;
  NSString v102;
  uint64_t v103;
  os_log_type_t v104;
  void *v105;
  void *v106;
  void *v107;
  id v108;
  id v109;
  ValueMetadata *v110;
  uint64_t v111;
  char v112;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Imported"));
  v6 = v5;
  v7 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
  v107 = a1;
  CKRecordKeyValueSetting.subscript.getter(v4, v6, v7, &type metadata for Int, &protocol witness table for Int);
  swift_bridgeObjectRelease();
  if ((v112 & 1) == 0 && v111 == 1)
  {
    v8 = 10;
    v9 = &byte_1007DDF88;
    do
    {
      v10 = *v9++;
      LOBYTE(v111) = v10;
      sub_100594128((uint64_t)&v111);
      --v8;
    }
    while (v8);

    return;
  }
  v109 = sub_10043E5D0(a1, 0);
  v105 = a2;
  if ((v11 & 1) != 0)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Deleted"));
    CKRecordKeyValueSetting.subscript.getter(v12, v13, v7, &type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)&v14 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v112 & 1) == 0 && v111 == 1 && objc_msgSend(a2, "markedForDeletion", v14))
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v15 = type metadata accessor for Logger(0);
      sub_10001AAA8(v15, (uint64_t)qword_10084AA70);
      v16 = a1;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc(22, -1);
        v20 = swift_slowAlloc(64, -1);
        v111 = v20;
        *(_DWORD *)v19 = 136446466;
        v21 = CKRecord.recordType.getter(v20);
        v110 = (ValueMetadata *)sub_10001A820(v21, v22, &v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);

        *(_QWORD *)&v23 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v19 + 12) = 2082;
        v24 = objc_msgSend(v16, "recordID", v23);
        v25 = objc_msgSend(v24, "ckShortDescription");

        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v28 = v27;

        v110 = (ValueMetadata *)sub_10001A820(v26, v28, &v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);

        a2 = v105;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_1008374E8 != -1)
        swift_once(&qword_1008374E8, sub_100438310);
      v29 = type metadata accessor for Logger(0);
      sub_10001AAA8(v29, (uint64_t)qword_10084AA70);
      v30 = a1;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc(22, -1);
        v34 = swift_slowAlloc(64, -1);
        v111 = v34;
        *(_DWORD *)v33 = 136446466;
        v35 = CKRecord.recordType.getter(v34);
        v110 = (ValueMetadata *)sub_10001A820(v35, v36, &v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);

        *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v33 + 12) = 2082;
        v38 = objc_msgSend(v30, "recordID", v37);
        v39 = objc_msgSend(v38, "ckShortDescription");

        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

        v110 = (ValueMetadata *)sub_10001A820(v40, v42, &v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);

        a2 = v105;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

      }
      else
      {

      }
      objc_msgSend(a2, "updateChangeCount");
    }
  }
  if (!objc_msgSend(a2, "shouldPerformCloudSchemaCatchUpSync"))
    goto LABEL_29;
  v44 = objc_msgSend(a2, "storeControllerManagedObjectContext");
  if (!v44)
    goto LABEL_29;
  v45 = v44;
  v46 = objc_msgSend(a2, "accountCKIdentifier");
  if (!v46)
  {

LABEL_29:
    v106 = &_swiftEmptySetSingleton;
    goto LABEL_30;
  }
  v47 = v46;
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  v50 = v49;

  v51 = objc_msgSend(v45, "cloudSchemaCatchUpSyncContextsByAccountIdentifier");
  v52 = sub_1000151B0(0, (unint64_t *)&unk_10084AAF8, &off_1007D6268);
  v53 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v51, &type metadata for String, v52, &protocol witness table for String);

  if (!*(_QWORD *)(v53 + 16))
  {

    swift_bridgeObjectRelease();
    *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
    v106 = &_swiftEmptySetSingleton;
    goto LABEL_30;
  }
  v54 = sub_10001A6DC(v48, v50);
  if ((v55 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
    goto LABEL_29;
  }
  v56 = *(id *)(*(_QWORD *)(v53 + 56) + 8 * v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v57 = objc_msgSend((id)objc_opt_self(ICCloudSchemaCompatibilityUtils), "incompatiblePropertyKeysForCloudObject:persistenceCloudSchemaVersion:", a2, objc_msgSend(v56, "persistenceCloudSchemaVersion"));
  v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, &type metadata for String);

  v106 = (void *)sub_10011EE40(v58);
  *(_QWORD *)&v43 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_30:
  v108 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v43);
  v59 = objc_msgSend(v109, "getTokenKeys");
  v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, &type metadata for String);

  v61 = *(_QWORD *)(v60 + 16);
  if (v61)
  {
    v62 = (_QWORD *)(v60 + 40);
    do
    {
      v64 = *(v62 - 1);
      v63 = (void *)*v62;
      swift_bridgeObjectRetain_n(*v62, 2);
      v65._countAndFlagsBits = v64;
      v65._object = v63;
      v66 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DDF98, v65);
      *(_QWORD *)&v67 = swift_bridgeObjectRelease().n128_u64[0];
      LOBYTE(v110) = v66;
      if ((objc_msgSend(a2, "shouldPerformCloudSchemaCatchUpSync", v67) & 1) != 0)
      {
        v68 = 0x80000001006F4360;
        v69 = 0xD000000000000012;
        switch(v66)
        {
          case 0:
            goto LABEL_53;
          case 1:
            v70 = "didChooseToMigrateLocally";
            goto LABEL_52;
          case 2:
            v69 = 0xD000000000000018;
            v70 = "smartListIDsToUndelete";
            goto LABEL_52;
          case 3:
            v69 = 0xD00000000000001DLL;
            v70 = "derIdentifier";
            goto LABEL_52;
          case 4:
            v68 = 0xEC000000746C6153;
            v69 = 0x44496E6F73726570;
            goto LABEL_53;
          case 5:
            v69 = 0xD000000000000021;
            v70 = "listIDsMergeableOrderingAsset";
            goto LABEL_52;
          case 6:
            v69 = 0xD000000000000023;
            v70 = "LocalesInfoAsData";
            goto LABEL_52;
          case 7:
            v69 = 0xD000000000000019;
            v70 = "LocalesInfoChecksum";
            goto LABEL_52;
          case 8:
            v69 = 0xD000000000000019;
            v70 = "sharedListIDsToOwnerNames";
            goto LABEL_52;
          case 9:
            v69 = 0xD00000000000001BLL;
            v70 = "recentlyDeletedInfoAsData";
LABEL_52:
            v68 = (unint64_t)v70 | 0x8000000000000000;
LABEL_53:
            v87 = sub_1001B2278(v69, v68, (uint64_t)v106);
            swift_bridgeObjectRelease();
            if ((v87 & 1) == 0)
              goto LABEL_59;
            if (qword_1008374E8 != -1)
              swift_once(&qword_1008374E8, sub_100438310);
            v88 = type metadata accessor for Logger(0);
            sub_10001AAA8(v88, (uint64_t)qword_10084AA70);
            swift_bridgeObjectRetain_n(v63, 2);
            v89 = a2;
            v90 = Logger.logObject.getter(v89);
            v91 = static os_log_type_t.default.getter(v90);
            if (os_log_type_enabled(v90, v91))
            {
              v104 = v91;
              v92 = swift_slowAlloc(22, -1);
              v103 = swift_slowAlloc(64, -1);
              v111 = v103;
              *(_DWORD *)v92 = 136446466;
              swift_bridgeObjectRetain(v63);
              *(_QWORD *)(v92 + 4) = sub_10001A820(v64, (unint64_t)v63, &v111);
              *(_QWORD *)&v93 = swift_bridgeObjectRelease_n(v63, 3).n128_u64[0];
              *(_WORD *)(v92 + 12) = 2082;
              v94 = objc_msgSend(v89, "remObjectID", v93);
              if (v94)
              {
                v95 = v94;
                v96 = objc_msgSend(v94, "description");

                v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
                v99 = v98;

              }
              else
              {
                v99 = 0xE300000000000000;
                v97 = 7104878;
              }
              *(_QWORD *)(v92 + 14) = sub_10001A820(v97, v99, &v111);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v90, v104, "merge() is forced because we are in CloudSchemaCatchUpSync and this property key is incompatible with the runtime schema {key: %{public}s, objectID: %{public}s}", (uint8_t *)v92, 0x16u);
              swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v103, -1, -1);
              swift_slowDealloc(v92, -1, -1);

              a2 = v105;
            }
            else
            {

              swift_bridgeObjectRelease_n(v63, 2);
            }
            sub_100594128((uint64_t)&v110);
            v102 = String._bridgeToObjectiveC()();
            objc_msgSend(v108, "forceMergeFromMap:forKey:", v109, v102, swift_bridgeObjectRelease().n128_f64[0]);

            break;
          default:
            swift_bridgeObjectRetain(v63);
            v71._countAndFlagsBits = v64;
            v71._object = v63;
            v72 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DE0A8, v71);
            swift_bridgeObjectRelease();
            if (v72)
            {
              if (qword_1008374E8 != -1)
                swift_once(&qword_1008374E8, sub_100438310);
              v73 = type metadata accessor for Logger(0);
              sub_10001AAA8(v73, (uint64_t)qword_10084AA70);
              v74 = v107;
              swift_bridgeObjectRetain(v63);
              v76 = Logger.logObject.getter(v75);
              v77 = static os_log_type_t.error.getter(v76);
              if (os_log_type_enabled(v76, v77))
              {
                v78 = swift_slowAlloc(32, -1);
                v79 = swift_slowAlloc(96, -1);
                v111 = v79;
                *(_DWORD *)v78 = 136446722;
                swift_bridgeObjectRetain(v63);
                *(_QWORD *)(v78 + 4) = sub_10001A820(v64, (unint64_t)v63, &v111);
                swift_bridgeObjectRelease_n(v63, 3);
                *(_WORD *)(v78 + 12) = 2082;
                v81 = CKRecord.recordType.getter(v80);
                *(_QWORD *)(v78 + 14) = sub_10001A820(v81, v82, &v111);

                swift_bridgeObjectRelease();
                *(_WORD *)(v78 + 22) = 2082;
                v110 = &_s6FieldsON_6;
                v83 = sub_10001A630(&qword_10084AAF0);
                v84 = String.init<A>(reflecting:)(&v110, v83);
                *(_QWORD *)(v78 + 24) = sub_10001A820(v84, v85, &v111);
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v76, v77, "Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}", (uint8_t *)v78, 0x20u);
                swift_arrayDestroy(v79, 3, (char *)&type metadata for Any + 8);
                v86 = v79;
                a2 = v105;
                swift_slowDealloc(v86, -1, -1);
                swift_slowDealloc(v78, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v63, 2);
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            break;
        }
      }
      else
      {
LABEL_59:
        v100 = String._bridgeToObjectiveC()();
        v101 = objc_msgSend(v108, "compareAndMergeWithMap:forKey:", v109, v100, swift_bridgeObjectRelease().n128_f64[0]);

        if ((sub_1001A56D0(v66, (uint64_t)&off_1007DE0E0) & 1) != 0 && v101
          || (sub_1001A56D0(v66, (uint64_t)&off_1007DE108) & 1) == 0 && v101 == (id)-1)
        {
          sub_100594128((uint64_t)&v110);
        }
      }
      v62 += 2;
      --v61;
    }
    while (v61);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

double sub_10044E218(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t ObjectType;
  double result;
  uint64_t v39;
  void *v40;
  Class isa;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  void *v53;

  v49 = a1;
  v17 = type metadata accessor for String.Encoding(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v45 = a7;
    v46 = a4;
    v47 = a6;
    v48 = a5;
    v21 = a10;
    v22 = (void *)objc_opt_self(ICCloudConfiguration);
    v23 = objc_msgSend(v22, "sharedConfiguration", swift_bridgeObjectRetain(a2).n128_f64[0]);
    v24 = (unint64_t)objc_msgSend(v23, "maxInlineAssetSizeBytes");

    if (!a10)
    {
      __break(1u);
      goto LABEL_24;
    }
    if (a3 >= 1 && v24 / a10 < a3)
    {
      static String.Encoding.utf8.getter();
      v25 = String.data(using:allowLossyConversion:)(v20, 0, v49, a2);
      v27 = v26;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      if (v27 >> 60 != 15)
      {
        v40 = (void *)objc_opt_self(REMCDObject);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v42 = objc_msgSend(v40, "assetForData:", isa);

        swift_bridgeObjectRetain(a8);
        CKRecord.subscript.setter(v42, v45, a8);
        sub_1000A71B4(v25, v27);
        v21 = v47;
        v43 = v48;
LABEL_22:
        swift_bridgeObjectRetain(v21);
        CKRecord.subscript.setter(0, v43, v21);
        *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
        return result;
      }
      v21 = v47;
      if (qword_1008374E8 == -1)
      {
LABEL_7:
        v28 = type metadata accessor for Logger(0);
        sub_10001AAA8(v28, (uint64_t)qword_10084AA70);
        v29 = swift_bridgeObjectRetain_n(a2, 2);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(12, -1);
          v33 = swift_slowAlloc(32, -1);
          *(_DWORD *)v32 = 136315138;
          v50 = v33;
          *(_QWORD *)&v51 = v49;
          *((_QWORD *)&v51 + 1) = a2;
          swift_bridgeObjectRetain(a2);
          v34 = String.init<A>(describing:)(&v51, &type metadata for String);
          *(_QWORD *)&v51 = sub_10001A820(v34, v35, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, (char *)&v51 + 8);
          swift_bridgeObjectRelease_n(a2, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Can't create data from object and not able to save it as asset {object: %s}", v32, 0xCu);
          swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v32, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a2, 2);
        }
        v43 = v48;
        v44 = v45;
        swift_bridgeObjectRetain(a8);
        CKRecord.subscript.setter(0, v44, a8);
        goto LABEL_22;
      }
LABEL_24:
      swift_once(&qword_1008374E8, sub_100438310);
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    a6 = v47;
    a5 = v48;
    a7 = v45;
    a4 = v46;
  }
  swift_bridgeObjectRetain(a8);
  CKRecord.subscript.setter(0, a7, a8);
  if ((a9 & 1) != 0)
  {
    v36 = objc_msgSend(a4, "encryptedValues");
    if (a2)
    {
      *((_QWORD *)&v52 + 1) = &type metadata for String;
      v53 = &protocol witness table for String;
      *(_QWORD *)&v51 = v49;
      *((_QWORD *)&v51 + 1) = a2;
    }
    else
    {
      v53 = 0;
      v51 = 0u;
      v52 = 0u;
    }
    ObjectType = swift_getObjectType();
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a6);
    CKRecordKeyValueSetting.subscript.setter(&v51, a5, a6, ObjectType);
    swift_unknownObjectRelease(v36);
  }
  else
  {
    if (a2)
    {
      *((_QWORD *)&v52 + 1) = &type metadata for String;
      v53 = &protocol witness table for String;
      *(_QWORD *)&v51 = v49;
      *((_QWORD *)&v51 + 1) = a2;
    }
    else
    {
      v53 = 0;
      v51 = 0u;
      v52 = 0u;
    }
    v39 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a6);
    CKRecordKeyValueSetting.subscript.setter(&v51, a5, a6, v39);
  }
  return result;
}

void sub_10044E6BC(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v17;
  void *v19;
  id v20;
  unint64_t v21;
  void *v22;
  Class isa;
  id v24;
  id v25;
  uint64_t ObjectType;
  uint64_t v27;
  __int128 v31;
  __int128 v32;
  void *v33;

  v11 = a7;
  v12 = a6;
  v13 = a5;
  v17 = a2 >> 60;
  if (a2 >> 60 != 15)
  {
    v19 = (void *)objc_opt_self(ICCloudConfiguration);
    sub_1000A70E4(a1, a2);
    v20 = objc_msgSend(v19, "sharedConfiguration");
    v21 = (unint64_t)objc_msgSend(v20, "maxInlineAssetSizeBytes");

    if (!a10)
    {
      __break(1u);
      return;
    }
    if (a3 >= 1 && v21 / a10 < a3)
    {
      v22 = (void *)objc_opt_self(REMCDObject);
      sub_1000A70E4(a1, a2);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v24 = objc_msgSend(v22, "assetForData:", isa);

      swift_bridgeObjectRetain(a8);
      CKRecord.subscript.setter(v24, a7, a8);
      sub_1000A71B4(a1, a2);
      swift_bridgeObjectRetain(a6);
      CKRecord.subscript.setter(0, a5, a6);
      sub_1000A71B4(a1, a2);
      return;
    }
    sub_1000A71B4(a1, a2);
    v13 = a5;
    v12 = a6;
    v11 = a7;
  }
  swift_bridgeObjectRetain(a8);
  CKRecord.subscript.setter(0, v11, a8);
  if ((a9 & 1) != 0)
  {
    v25 = objc_msgSend(a4, "encryptedValues");
    if (v17 <= 0xE)
    {
      *((_QWORD *)&v32 + 1) = &type metadata for Data;
      v33 = &protocol witness table for Data;
      *(_QWORD *)&v31 = a1;
      *((_QWORD *)&v31 + 1) = a2;
    }
    else
    {
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
    }
    ObjectType = swift_getObjectType();
    sub_1000A70D0(a1, a2);
    swift_bridgeObjectRetain(v12);
    CKRecordKeyValueSetting.subscript.setter(&v31, v13, v12, ObjectType);
    swift_unknownObjectRelease(v25);
  }
  else
  {
    if (v17 <= 0xE)
    {
      *((_QWORD *)&v32 + 1) = &type metadata for Data;
      v33 = &protocol witness table for Data;
      *(_QWORD *)&v31 = a1;
      *((_QWORD *)&v31 + 1) = a2;
    }
    else
    {
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
    }
    sub_1000A70D0(a1, a2);
    v27 = sub_1000151B0(0, (unint64_t *)&qword_100839CB0, CKRecord_ptr);
    swift_bridgeObjectRetain(v12);
    CKRecordKeyValueSetting.subscript.setter(&v31, v13, v12, v27);
  }
}

void sub_10044E988(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  void *v22;

  if (!a1)
    return;
  v22 = a1;
  v2 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  v3 = sub_1000151B0(0, (unint64_t *)&unk_10083AE60, NSOrderedSet_ptr);
  v4 = sub_100123BE0();
  v21 = a1;
  v5 = Sequence.elements<A>(ofType:)(v2, v3, v2, v4);
  v6 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v20 = v5;
    else
      v20 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v7 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (v7)
      goto LABEL_4;
LABEL_22:

    swift_bridgeObjectRelease_n(v6, 2);
    return;
  }
  v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v5);
  if (!v7)
    goto LABEL_22;
LABEL_4:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = _swiftEmptyArrayStorage;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      else
        v10 = *(id *)(v6 + 8 * v8 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, "ckIdentifier", v21, v22);
      if (v12)
      {
        v13 = v12;
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v16 = v15;

        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = sub_1002C8224(0, v9[2] + 1, 1, v9);
        v18 = v9[2];
        v17 = v9[3];
        if (v18 >= v17 >> 1)
          v9 = sub_1002C8224((_QWORD *)(v17 > 1), v18 + 1, 1, v9);
        v9[2] = v18 + 1;
        v19 = &v9[2 * v18];
        v19[4] = v14;
        v19[5] = v16;
      }
      else
      {

      }
      ++v8;
    }
    while (v7 != v8);
    goto LABEL_22;
  }
  __break(1u);
}

uint64_t sub_10044EB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084AB70);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084AB70);
  if (qword_100837640 != -1)
    swift_once(&qword_100837640, sub_1004A188C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008720A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10044EC24()
{
  uint64_t v0;

  v0 = sub_10001A630(&qword_10084AC30);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return PassthroughSubject.init()();
}

void sub_10044EC5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v12;
  id v13;
  void (*v14)(uint64_t);
  uint64_t v15;

  v12 = *a2;
  sub_10044F328(a3, a4, a5);
  swift_retain();
  swift_bridgeObjectRetain(a7);
  v13 = a8;
  sub_10044F170(v12, a6, a7, v13);
  swift_release(a1);
  swift_bridgeObjectRelease(a7);

  v14 = *(void (**)(uint64_t))(a1 + 16);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 24);
    swift_retain();
    v14(v12);
    sub_1000A5C24((uint64_t)v14, v15);
  }
}

uint64_t sub_10044ED30@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  v9 = UUID.uuidString.getter();
  v11 = v10;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_10044EDF8()
{
  uint64_t v0;

  sub_1000A5C24(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for RDDisabledAccountsEventHandler()
{
  return objc_opt_self(_TtC7remindd30RDDisabledAccountsEventHandler);
}

double sub_10044EE44(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  double result;
  unint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v10 = swift_allocObject(&unk_1007F4540, 24, 7);
  *(_QWORD *)(v10 + 16) = a2;
  v11 = swift_allocObject(&unk_1007F4568, 32, 7);
  *(_QWORD *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = a4;
  v12 = a2;
  swift_bridgeObjectRetain(a4);
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(&v31, 0, 0, 0, 0, sub_10044F464, v10, 0, 0, 0, 0, 0, 0, sub_10044F4A0, v11, 0, 0, &type metadata for String);
  swift_release(v10);
  swift_release(v11);
  v14 = v32;
  if (v32)
  {
    v15 = v31;
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(a5, "giveAccountWithIDAnotherChance:", v16);

    if (qword_1008374F0 != -1)
      swift_once(&qword_1008374F0, sub_10044EB94);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10084AB70);
    v18 = a1;
    swift_bridgeObjectRetain(v14);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(64, -1);
      v31 = v23;
      *(_DWORD *)v22 = 136446466;
      swift_bridgeObjectRetain(v14);
      v29 = sub_10001A820(v15, v14, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      *(_QWORD *)&v24 = swift_bridgeObjectRelease_n(v14, 3).n128_u64[0];
      *(_WORD *)(v22 + 12) = 2082;
      v25 = objc_msgSend(v18, "internalDescription", v24);
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29 = sub_10001A820(v26, v28, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);

      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDDisabledAccountsEventHandler did reset babysitter for {babysittableWaiterID: %{public}s, accountTypeHost: %{public}s}", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      *(_QWORD *)&result = swift_bridgeObjectRelease_n(v14, 2).n128_u64[0];
    }
  }
  return result;
}

void sub_10044F170(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;

  v22 = a1 + 56;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v11)
      goto LABEL_23;
    v20 = *(_QWORD *)(v22 + 8 * v19);
    ++v12;
    if (!v20)
    {
      v12 = v19 + 1;
      if (v19 + 1 >= v11)
        goto LABEL_23;
      v20 = *(_QWORD *)(v22 + 8 * v12);
      if (!v20)
      {
        v12 = v19 + 2;
        if (v19 + 2 >= v11)
          goto LABEL_23;
        v20 = *(_QWORD *)(v22 + 8 * v12);
        if (!v20)
        {
          v12 = v19 + 3;
          if (v19 + 3 >= v11)
            goto LABEL_23;
          v20 = *(_QWORD *)(v22 + 8 * v12);
          if (!v20)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v20 - 1) & v20;
    v14 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_5:
    v15 = *(_QWORD *)(a1 + 48) + 24 * v14;
    v16 = *(void **)(v15 + 16);
    v17 = *(id *)(v15 + 8);
    v18 = v16;
    sub_10044EE44(v17, v18, a2, a3, a4);

  }
  v21 = v19 + 4;
  if (v21 >= v11)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v20 = *(_QWORD *)(v22 + 8 * v21);
  if (v20)
  {
    v12 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v11)
      goto LABEL_23;
    v20 = *(_QWORD *)(v22 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_10044F328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *oslog;

  ObjectType = swift_getObjectType(a1);
  (*(void (**)(_QWORD, unint64_t, uint64_t, uint64_t))(a2 + 16))(0, 0xF000000000000000, ObjectType, a2);
  (*(void (**)(_QWORD, unint64_t, uint64_t, uint64_t))(a3 + 16))(0, 0xF000000000000000, ObjectType, a3);
  if (qword_1008374F0 != -1)
    swift_once(&qword_1008374F0, sub_10044EB94);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001AAA8(v6, (uint64_t)qword_10084AB70);
  oslog = Logger.logObject.getter(v7);
  v8 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v8, "RDDisabledAccountsEventHandler did reset accountsListCategorizedCountsCache and hashtagLabelsInCustomSmartListFilterCache", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

}

uint64_t sub_10044F440()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10044F464@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10044ED30(*(void **)(v1 + 16), a1);
}

uint64_t sub_10044F47C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10044F4A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10044F4BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084AC38);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084AC38);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10044F748()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDXPCIndexingPerformer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDXPCIndexingPerformer()
{
  return objc_opt_self(_TtC7remindd22RDXPCIndexingPerformer);
}

uint64_t sub_10044F7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  NSString v14;
  NSString v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  id v18;
  NSString v19;
  id v20;
  NSString v21;
  char *v22;
  uint64_t v23;
  void *v24;
  Class isa;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Class v43;
  id v44;
  id v45;
  NSString v46;
  NSString v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  Class v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  char *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void **aBlock;
  unint64_t v66;
  void (*v67)(uint64_t, void *);
  void *v68;
  uint64_t (*v69)();
  uint64_t v70;

  v61 = a1;
  v62 = a2;
  v2 = type metadata accessor for Date(0);
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v3 = __chkstk_darwin(v2);
  v59 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UTType(0, v3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - v10;
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSFileProtectionCompleteUntilFirstUserAuthentication);
  static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppBundleIdentifier);
  v12 = objc_allocWithZone((Class)CSSearchableIndex);
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v15 = String._bridgeToObjectiveC()();
  v60 = objc_msgSend(v12, "initWithName:protectionClass:bundleIdentifier:", v13, v14, v15, swift_bridgeObjectRelease().n128_f64[0]);

  v16 = static UTType.image.getter();
  UTType.identifier.getter(v16);
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v11, v5);
  v18 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "initWithItemContentType:", v19, swift_bridgeObjectRelease().n128_f64[0]);

  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "setTitle:", v21);

  v22 = v59;
  Date.init()(v23);
  v24 = (void *)objc_opt_self(NSDateFormatter);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v26 = objc_msgSend(v24, "localizedStringFromDate:dateStyle:timeStyle:", isa, 1, 1);

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  aBlock = 0;
  v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD000000000000016;
  v66 = 0x8000000100704480;
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "setContentDescription:", v31, swift_bridgeObjectRelease().n128_f64[0]);

  v32 = sub_10001A630((uint64_t *)&unk_10083A340);
  v33 = swift_allocObject(v32, 64, 7);
  *(_OWORD *)(v33 + 16) = xmmword_1006A3C40;
  v34 = static UTType.utf8PlainText.getter();
  v35 = UTType.identifier.getter(v34);
  v37 = v36;
  v38 = ((uint64_t (*)(char *, uint64_t))v17)(v11, v5);
  *(_QWORD *)(v33 + 32) = v35;
  *(_QWORD *)(v33 + 40) = v37;
  v39 = static UTType.utf16PlainText.getter(v38);
  v40 = UTType.identifier.getter(v39);
  v42 = v41;
  v17(v8, v5);
  *(_QWORD *)(v33 + 48) = v40;
  *(_QWORD *)(v33 + 56) = v42;
  v43 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "setProviderDataTypeIdentifiers:", v43, swift_bridgeObjectRelease().n128_f64[0]);

  v44 = objc_allocWithZone((Class)CSSearchableItem);
  v45 = v20;
  v46 = String._bridgeToObjectiveC()();
  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v44, "initWithUniqueIdentifier:domainIdentifier:attributeSet:", v46, v47, v45);

  v49 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v50 = swift_allocObject(v49, 40, 7);
  *(_OWORD *)(v50 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v50 + 32) = v48;
  aBlock = (void **)v50;
  specialized Array._endMutation()(v50);
  sub_1004501E4();
  v51 = v48;
  v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v53 = swift_allocObject(&unk_1007F4608, 32, 7);
  v54 = v62;
  *(_QWORD *)(v53 + 16) = v61;
  *(_QWORD *)(v53 + 24) = v54;
  v69 = sub_1000098EC;
  v70 = v53;
  aBlock = _NSConcreteStackBlock;
  v66 = 1107296256;
  v67 = sub_1000E18E4;
  v68 = &unk_1007F4620;
  v55 = _Block_copy(&aBlock);
  v56 = v70;
  swift_retain();
  swift_release(v56);
  v57 = v60;
  objc_msgSend(v60, "indexSearchableItems:completionHandler:", v52, v55);
  _Block_release(v55);

  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v22, v64);
}

uint64_t sub_10044FD10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (qword_1008374F8 != -1)
    swift_once(&qword_1008374F8, sub_10044F4BC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_10084AC38);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Daemon receives reindexAllSearchableItems", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC7remindd22RDXPCIndexingPerformer_storeController), "reindexAllSearchableItems");
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10044FE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1008374F8 != -1)
    swift_once(&qword_1008374F8, sub_10044F4BC);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_10084AC38);
  v7 = swift_bridgeObjectRetain_n(a1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v19 = a2;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v21 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(a1);
    v13 = Array.description.getter(v12, &type metadata for String);
    v15 = v14;
    swift_bridgeObjectRelease();
    v20 = sub_10001A820(v13, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    swift_bridgeObjectRelease_n(a1, 2);
    a2 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Daemon receives reindexSearchableItems {identifiers: %s}", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v16 = *(void **)(a2 + OBJC_IVAR____TtC7remindd22RDXPCIndexingPerformer_storeController);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "reindexSearchableItemsWithIdentifiers:", isa);

  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

void sub_100450024(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  NSString v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  static String._unconditionallyBridgeFromObjectiveC(_:)(REMDaemonCoreSpotlightIndexName);
  v4 = static NSFileProtectionType.rem_spotlightIndexFileProtection.getter();
  if (v4)
  {
    v5 = (void *)v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(REMAppBundleIdentifier);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v7)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  v10 = objc_allocWithZone((Class)CSSearchableIndex);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "initWithName:protectionClass:bundleIdentifier:", v8, v9, v11, swift_bridgeObjectRelease().n128_f64[0]);

  if (a1)
  {
    v14[4] = a1;
    v15 = a2;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_1000E18E4;
    v14[3] = &unk_1007F45A8;
    a1 = _Block_copy(v14);
    v13 = v15;
    swift_retain();
    swift_release(v13);
  }
  objc_msgSend(v12, "deleteAllSearchableItemsWithCompletionHandler:", a1);
  _Block_release(a1);

}

uint64_t sub_1004501C0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1004501E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084AC80;
  if (!qword_10084AC80)
  {
    v1 = objc_opt_self(CSSearchableItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10084AC80);
  }
  return result;
}

uint64_t sub_100450220()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id REMCDDueDateDeltaAlert.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType(v2);
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t static REMCDDueDateDeltaAlert.cdEntityName.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_10001A630((uint64_t *)&unk_100850A90);
  return String.init<A>(describing:)(&v2, v0);
}

id REMCDDueDateDeltaAlert.remChangedObjectID()()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  id v10;
  Class isa;
  NSString v12;
  id v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)&v5 = __chkstk_darwin(v3).n128_u64[0];
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v1, "identifier", v5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  v16 = ObjectType;
  v9 = sub_10001A630((uint64_t *)&unk_100850A90);
  String.init<A>(describing:)(&v16, v9);
  v10 = objc_allocWithZone((Class)REMObjectID);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v10, "initWithUUID:entityName:", isa, v12, swift_bridgeObjectRelease().n128_f64[0]);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v13;
}

uint64_t type metadata accessor for REMCDDueDateDeltaAlert()
{
  return objc_opt_self(REMCDDueDateDeltaAlert);
}

uint64_t sub_100450520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084ACB0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084ACB0);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004505B0()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;

  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 0x646E696D6572202CLL;
  v2._object = (void *)0xED0000203A737265;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v5._countAndFlagsBits = 125;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x203A737473696C7BLL;
}

uint64_t sub_1004506B8(void *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = 1;
  *(_OWORD *)(v1 + 16) = xmmword_1006BC790;
  *(_QWORD *)(v1 + 72) = _swiftEmptyArrayStorage;
  *(_WORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 32) = 0x80000001007046B0;
  *(_QWORD *)(v1 + 40) = a1;
  objc_msgSend(a1, "setMode:", 4);
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  return v1;
}

void sub_10045071C(id a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t inited;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  _BYTE v35[80];
  _BYTE v36[80];
  _BYTE v37[88];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char **)&v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = __chkstk_darwin(v8);
  v13 = &v35[-v12 - 8];
  __chkstk_darwin(v11);
  v15 = &v35[-v14 - 8];
  if (!objc_msgSend(a1, "inactive"))
  {
LABEL_10:
    if (qword_100837500 != -1)
      swift_once(&qword_100837500, sub_100450520);
    v22 = sub_10001AAA8(v6, (uint64_t)qword_10084ACB0);
    (*(void (**)(char **, uint64_t, uint64_t))(v7 + 16))(v10, v22, v6);
    v23 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v24 = sub_10001A630((uint64_t *)&unk_10083A280);
    inited = swift_initStackObject(v24, v37);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = 48;
    *(_QWORD *)(inited + 40) = 0xE100000000000000;
    a1 = objc_msgSend(a1, "objectID");
    *(_QWORD *)(inited + 72) = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    *(_QWORD *)(inited + 48) = a1;
    v26 = sub_10016E7E4(inited);
    v27 = v23;
    v6 = (uint64_t)v10;
    sub_1004A14D8((uint64_t)"RDAccountDataMover: The copy-from account is an inactivated account {%{public}@}.", 81, 2uLL, v27, v26);
    __break(1u);
    goto LABEL_13;
  }
  v10 = &selRef_subscriptionOwnerUserRecordID;
  if (objc_msgSend(a1, "type") == (id)3)
  {
    if (objc_msgSend(a2, "type") != (id)1 && objc_msgSend(a2, "type") != (id)5 && objc_msgSend(a2, "type"))
    {
      v16 = objc_autoreleasePoolPush();
      sub_100450B3C(v3, a1, a2);
      objc_autoreleasePoolPop(v16);
      return;
    }
    if (qword_100837500 != -1)
      swift_once(&qword_100837500, sub_100450520);
    v17 = sub_10001AAA8(v6, (uint64_t)qword_10084ACB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v15, v17, v6);
    a1 = (id)sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v18 = sub_10001A630((uint64_t *)&unk_10083A280);
    v19 = swift_initStackObject(v18, v35);
    *(_OWORD *)(v19 + 16) = xmmword_1006A3C00;
    *(_QWORD *)(v19 + 32) = 48;
    *(_QWORD *)(v19 + 40) = 0xE100000000000000;
    v20 = objc_msgSend(a2, "objectID");
    *(_QWORD *)(v19 + 72) = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    *(_QWORD *)(v19 + 48) = v20;
    v21 = sub_10016E7E4(v19);
    v6 = (uint64_t)v15;
    sub_1004A14D8((uint64_t)"RDAccountDataMover: The copy-to account is not a cloud account type {%{public}@}.", 81, 2uLL, (uint64_t)a1, v21);
    __break(1u);
    goto LABEL_10;
  }
LABEL_13:
  if (qword_100837500 != -1)
    swift_once(&qword_100837500, sub_100450520);
  v28 = sub_10001AAA8(v6, (uint64_t)qword_10084ACB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v28, v6);
  v29 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v30 = sub_10001A630((uint64_t *)&unk_10083A280);
  v31 = swift_initStackObject(v30, v36);
  *(_OWORD *)(v31 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v31 + 32) = 48;
  *(_QWORD *)(v31 + 40) = 0xE100000000000000;
  v32 = objc_msgSend(a1, "objectID");
  *(_QWORD *)(v31 + 72) = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  *(_QWORD *)(v31 + 48) = v32;
  v33 = sub_10016E7E4(v31);
  sub_1004A14D8((uint64_t)"RDAccountDataMover: The copy-from account is not a CalDAV account {%{public}@}.", 79, 2uLL, v29, v33);
  __break(1u);
}

void sub_100450B3C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  os_log_type_t type;
  NSObject *v21;
  id v22;
  uint64_t v23;

  v6 = (void *)sub_1004543D8();
  if (!v3)
  {
    v7 = v6;
    sub_100451310(a2, a3, v7);
    v8 = objc_msgSend(v7, "updateAccount:", a3);
    objc_msgSend(v8, "setDaWasMigrated:", 1);
    sub_1004540E0();
    if (qword_100837500 != -1)
      swift_once(&qword_100837500, sub_100450520);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084ACB0);
    v10 = a2;
    v11 = a3;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      type = v13;
      v14 = swift_slowAlloc(22, -1);
      v15 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v14 = 138543618;
      v21 = v12;
      v16 = objc_msgSend(v10, "objectID");
      v22 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      *v15 = v16;

      *(_WORD *)(v14 + 12) = 2114;
      v17 = v11;
      v18 = objc_msgSend(v11, "objectID");
      v22 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      v15[1] = v18;

      _os_log_impl((void *)&_mh_execute_header, v21, type, "RDAccountDataMover: Copied data from inactivated account, saved all changes and set .daWasMigrated=YES to cloud account {inactivatedAccount: %{public}@, cloudAccount: %{public}@}", (uint8_t *)v14, 0x16u);
      v19 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v15, 2, v19);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100450DD4(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  _BYTE v24[80];
  _BYTE v25[80];

  v3 = v2;
  inited = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(inited - 8);
  v8 = __chkstk_darwin(inited);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v24[-v11];
  if (objc_msgSend(a1, "type") == (id)1)
  {
    if (objc_msgSend(a2, "type") != (id)1 && objc_msgSend(a2, "type") != (id)5 && objc_msgSend(a2, "type"))
    {
      v13 = objc_autoreleasePoolPush();
      sub_1004510D0(v3, a1, a2);
      objc_autoreleasePoolPop(v13);
      return;
    }
    if (qword_100837500 != -1)
      swift_once(&qword_100837500, sub_100450520);
    v14 = sub_10001AAA8(inited, (uint64_t)qword_10084ACB0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v12, v14, inited);
    a1 = (void *)sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v15 = sub_10001A630((uint64_t *)&unk_10083A280);
    inited = swift_initStackObject(v15, v24);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    *(_QWORD *)(inited + 32) = 48;
    *(_QWORD *)(inited + 40) = 0xE100000000000000;
    v16 = objc_msgSend(a2, "objectID");
    *(_QWORD *)(inited + 72) = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    *(_QWORD *)(inited + 48) = v16;
    v17 = sub_10016E7E4(inited);
    sub_1004A14D8((uint64_t)"RDAccountDataMover: The copy-to account is not a cloud account type {%{public}@}.", 81, 2uLL, (uint64_t)a1, v17);
    __break(1u);
  }
  if (qword_100837500 != -1)
    swift_once(&qword_100837500, sub_100450520);
  v18 = sub_10001AAA8(inited, (uint64_t)qword_10084ACB0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, v18, inited);
  v19 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v20 = sub_10001A630((uint64_t *)&unk_10083A280);
  v21 = swift_initStackObject(v20, v25);
  *(_OWORD *)(v21 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v21 + 32) = 48;
  *(_QWORD *)(v21 + 40) = 0xE100000000000000;
  v22 = objc_msgSend(a1, "objectID");
  *(_QWORD *)(v21 + 72) = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  *(_QWORD *)(v21 + 48) = v22;
  v23 = sub_10016E7E4(v21);
  sub_1004A14D8((uint64_t)"RDAccountDataMover: The copy-from account is not a local account {%{public}@}.", 78, 2uLL, v19, v23);
  __break(1u);
}

void sub_1004510D0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  uint64_t v19;

  v6 = (void *)sub_1004543D8();
  if (!v3)
  {
    v7 = v6;
    sub_100451310(a2, a3, v7);
    v8 = objc_msgSend(v7, "updateAccount:", a3);
    objc_msgSend(v8, "setDaWasMigrated:", 1);
    sub_1004540E0();
    if (qword_100837500 != -1)
      swift_once(&qword_100837500, sub_100450520);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084ACB0);
    v10 = a3;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v17 = v11;
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 138543362;
      v15 = objc_msgSend(v10, "objectID");
      v18 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      *v14 = v15;

      _os_log_impl((void *)&_mh_execute_header, v17, v12, "RDAccountDataMover: Saved all changes and set .daWasMigrated=YES to cloud account {cloudAccount: %{public}@}", v13, 0xCu);
      v16 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v14, 1, v16);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100451310(void *a1, id a2, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  char **v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  char v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  id v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  Swift::Int v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  id v48;
  unsigned __int8 v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  id v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  NSString v79;
  id v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  NSObject *v84;
  char isUniquelyReferenced_nonNull_native;
  NSObject *v86;
  id v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  NSObject **v91;
  NSObject *v92;
  _QWORD *v93;
  NSObject *v94;
  _QWORD *v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  NSObject *v102;
  os_log_type_t v103;
  _BOOL4 v104;
  char **v105;
  uint8_t *v106;
  id v107;
  Swift::Int v108;
  NSObject *v109;
  uint8_t *v110;
  id v111;
  id v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  char **v117;
  char **v118;
  char **v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  id v123;
  NSObject *v124;
  NSObject *v125;
  os_log_type_t v126;
  uint64_t v127;
  _QWORD *v128;
  id v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  char **v135;
  os_log_type_t v136;
  uint64_t v137;
  char ***v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  id v144;
  char v145;
  NSObject *v146;
  os_log_type_t v147;
  uint64_t v148;
  _QWORD *v149;
  id v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  __n128 v155;
  _QWORD *v156;
  Swift::Int v157;
  uint64_t v158;
  __n128 v159;
  __n128 v160;
  NSObject *v161;
  _QWORD *v162;
  NSObject *v163;
  id v164;
  Swift::Int v165;
  uint64_t v166;
  id v167;
  __n128 v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  NSObject *v175;
  _QWORD v176[2];

  v164 = a3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v160.n128_u64[0] = (unint64_t)v155.n128_u64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = v3;
  v3[6] = 0;
  v3[7] = 0;
  v162 = v3 + 6;
  v9 = (void *)v3[5];
  v10 = objc_msgSend((id)objc_opt_self(REMList), "localAccountDefaultListID");
  v175 = 0;
  v11 = objc_msgSend(v9, "fetchListWithObjectID:error:", v10, &v175);

  v12 = v175;
  v13 = &selRef_isConcealed;
  if (v11)
  {
    v14 = v175;
    v15 = -[NSObject account](v11, "account");
    v16 = objc_msgSend(v15, "objectID");

    v17 = objc_msgSend(a2, "objectID");
    v18 = v17;
    if (v16)
    {
      if (v17)
      {
        v167 = a2;
        sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        v19 = v16;
        v20 = static NSObject.== infix(_:_:)(v19);

        if ((v20 & 1) == 0)
        {

          v11 = 0;
        }
        a2 = v167;
      }
      else
      {

        v11 = 0;
      }
    }
    else if (v17)
    {

      v11 = 0;
    }
  }
  else
  {
    v21 = v175;
    v22 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v23);
    swift_errorRelease(v22);
    v169 = 0;
  }
  v175 = 0;
  v24 = objc_msgSend(a1, "fetchListsWithError:", &v175);
  v25 = v175;
  if (!v24)
  {
    v97 = v175;
    v98 = _convertNSErrorToError(_:)(v25);

    v169 = v98;
    swift_willThrow(v99);

    return;
  }
  v26 = v24;
  v166 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v166);
  v28 = v25;

  if ((unint64_t)v27 >> 62)
    goto LABEL_112;
  v30 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  v161 = v11;
  if (v30)
  {
    v172 = v30;
    if (v30 < 1)
      goto LABEL_119;
    v157 = v7;
    v158 = v6;
    v167 = a2;
    v31 = 0;
    v173 = v27 & 0xC000000000000001;
    v156 = v176;
    v7 = (Swift::Int)&_swiftEmptyDictionarySingleton;
    v29.n128_u64[0] = 138543362;
    v168 = v29;
    v29.n128_u64[0] = 138543618;
    v155 = v29;
    v171 = v27;
    v32 = v172;
    while (1)
    {
      if (v173)
        v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v27);
      else
        v36 = *(id *)(v27 + 8 * v31 + 32);
      v37 = v36;
      if (qword_100837500 != -1)
        swift_once(&qword_100837500, sub_100450520);
      v38 = type metadata accessor for Logger(0);
      sub_10001AAA8(v38, (uint64_t)qword_10084ACB0);
      v35 = v37;
      v39 = Logger.logObject.getter(v35);
      v40 = static os_log_type_t.info.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(12, -1);
        v42 = v7;
        v43 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v41 = v168.n128_u32[0];
        v44 = objc_msgSend(v35, v13[247]);
        *(_QWORD *)(v41 + 4) = v44;
        *v43 = v44;

        _os_log_impl((void *)&_mh_execute_header, v39, v40, "RDAccountDataMover: Processing source list to consider... {objectID: %{public}@}", (uint8_t *)v41, 0xCu);
        v45 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v43, 1, v45);
        v46 = v43;
        v7 = v42;
        v32 = v172;
        swift_slowDealloc(v46, -1, -1);
        v47 = v41;
        v27 = v171;
        swift_slowDealloc(v47, -1, -1);
      }
      else
      {

        v39 = v35;
      }

      if ((-[NSObject daIsEventOnlyContainer](v35, "daIsEventOnlyContainer") & 1) != 0)
        goto LABEL_20;
      if ((-[NSObject daIsNotificationsCollection](v35, "daIsNotificationsCollection") & 1) != 0)
        goto LABEL_20;
      v48 = objc_msgSend(v167, "capabilities");
      v49 = objc_msgSend(v48, "supportsGroups");

      if ((v49 & 1) == 0 && (-[NSObject isGroup](v35, "isGroup") & 1) != 0)
        goto LABEL_20;
      if (-[NSObject sharingStatus](v35, "sharingStatus", v155.n128_u64[0], v155.n128_u64[1]) == (id)3)
        goto LABEL_20;
      if (*((_BYTE *)v170 + 64) != 1 || !-[NSObject isSharedToMe](v35, "isSharedToMe"))
        break;
      v33 = v35;
      v50 = Logger.logObject.getter(v33);
      v51 = static os_log_type_t.info.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = swift_slowAlloc(12, -1);
        v163 = v50;
        v53 = v52;
        v54 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v53 = v168.n128_u32[0];
        v55 = objc_msgSend(v33, v13[247]);
        *(_QWORD *)(v53 + 4) = v55;
        *v54 = v55;

        _os_log_impl((void *)&_mh_execute_header, v163, v51, "RDAccountDataMover: we chose to exclude this source list since someone else owns it {objectID: %{public}@}", (uint8_t *)v53, 0xCu);
        v56 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v54, 1, v56);
        swift_slowDealloc(v54, -1, -1);
        v34 = v163;
        swift_slowDealloc(v53, -1, -1);
      }
      else
      {

        v34 = v33;
      }
LABEL_19:

      v35 = v34;
LABEL_20:
      ++v31;

      if (v32 == v31)
        goto LABEL_64;
    }
    v163 = objc_msgSend(v164, "updateAccount:", v167);
    if (v161)
    {
      v165 = v7;
      v57 = v161;
      v58 = -[NSObject name](v35, "name");
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      v61 = v60;

      v62 = -[NSObject name](v57, "name");
      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v65 = v64;

      if (v59 == v63 && v61 == v65)
      {
        swift_bridgeObjectRelease_n(v61, 2);
        v13 = &selRef_isConcealed;
        v7 = v165;
LABEL_43:
        v67 = objc_msgSend(v164, "updateList:", v57);
        v32 = v172;
LABEL_49:
        v71 = v67;

        objc_msgSend(v71, "copyListDataFrom:", v35);
        if (*((_BYTE *)v170 + 80) == 1)
        {
          v72 = objc_msgSend(v35, v13[247]);
          v73 = objc_msgSend(v72, "uuid");

          v74 = v160.n128_u64[0];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v73);

          UUID.uuidString.getter(v75);
          v77 = v76;
          v78 = v74;
          v32 = v172;
          (*(void (**)(unint64_t, uint64_t))(v157 + 8))(v78, v158);
          v79 = String._bridgeToObjectiveC()();
          objc_msgSend(v71, "setExternalIdentifier:", v79, swift_bridgeObjectRelease(v77).n128_f64[0]);

        }
        if (*((_BYTE *)v170 + 81) == 1)
          objc_msgSend(v71, "setSharingStatus:", -[NSObject sharingStatus](v35, "sharingStatus"));
        v80 = objc_msgSend(v71, v13[247]);
        if ((v7 & 0xC000000000000001) != 0)
        {
          if (v7 < 0)
            v81 = v7;
          else
            v81 = v7 & 0xFFFFFFFFFFFFFF8;
          v82 = v35;
          v83 = __CocoaDictionary.count.getter(v81);
          if (__OFADD__(v83, 1))
          {
            __break(1u);
LABEL_119:
            __break(1u);
          }
          v7 = sub_100192E60(v81, v83 + 1);
        }
        else
        {
          v84 = v35;
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
        v175 = v7;
        sub_10028DC0C((uint64_t)v35, v80, isUniquelyReferenced_nonNull_native);
        v165 = (Swift::Int)v175;

        swift_bridgeObjectRelease(0x8000000000000000);
        v86 = v35;
        v87 = v71;
        v88 = Logger.logObject.getter(v87);
        v89 = static os_log_type_t.info.getter(v88);
        if (os_log_type_enabled(v88, v89))
        {
          v90 = swift_slowAlloc(22, -1);
          v91 = (NSObject **)swift_slowAlloc(16, -1);
          *(_DWORD *)v90 = v155.n128_u32[0];
          v92 = objc_msgSend(v86, v13[247]);
          v175 = v92;
          v159.n128_u64[0] = (unint64_t)v88;
          v93 = v156;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v156);
          *v91 = v92;

          *(_WORD *)(v90 + 12) = 2114;
          v94 = objc_msgSend(v87, "objectID");
          v175 = v94;
          v95 = v93;
          v33 = v159.n128_u64[0];
          v32 = v172;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v95);
          v91[1] = v94;
          v13 = &selRef_isConcealed;

          _os_log_impl((void *)&_mh_execute_header, v33, v89, "RDAccountDataMover: Done copying source list {sourceList: %{public}@, targetList: %{public}@}", (uint8_t *)v90, 0x16u);
          v96 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v91, 2, v96);
          swift_slowDealloc(v91, -1, -1);
          swift_slowDealloc(v90, -1, -1);

          v7 = v165;
          v27 = v171;
          v34 = v163;
        }
        else
        {

          v33 = v86;
          v34 = v86;
          v7 = v165;
          v27 = v171;
        }
        goto LABEL_19;
      }
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v61, v63, v65, 0);
      swift_bridgeObjectRelease(v61);
      swift_bridgeObjectRelease(v65);
      v13 = &selRef_isConcealed;
      v7 = v165;
      if ((v66 & 1) != 0)
        goto LABEL_43;

      v32 = v172;
    }
    v57 = -[NSObject name](v35, "name");
    if (!v57)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v70 = v69;
      v57 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v68 = swift_bridgeObjectRelease(v70).n128_u64[0];
    }
    v67 = objc_msgSend(v164, "addListWithName:toAccountChangeItem:", v57, v163, v68);
    goto LABEL_49;
  }
  v7 = (Swift::Int)&_swiftEmptyDictionarySingleton;
LABEL_64:
  swift_bridgeObjectRelease(v27);
  if (qword_100837500 != -1)
    swift_once(&qword_100837500, sub_100450520);
  v100 = type metadata accessor for Logger(0);
  v101 = (void *)sub_10001AAA8(v100, (uint64_t)qword_10084ACB0);
  v11 = v164;
  v164 = v101;
  v102 = Logger.logObject.getter(v11);
  v103 = static os_log_type_t.info.getter(v102);
  v104 = os_log_type_enabled(v102, v103);
  v105 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
  v163 = v11;
  if (v104)
  {
    v106 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v106 = 134217984;
    v27 = (uint64_t)(v106 + 4);
    v107 = -[NSObject trackedListChangeItems](v11, "trackedListChangeItems");
    v108 = v7;
    v109 = objc_msgSend(v107, "count");

    v175 = v109;
    v7 = v108;
    v11 = v163;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176);

    _os_log_impl((void *)&_mh_execute_header, v102, v103, "RDAccountDataMover: Source lists processed {count: %ld}", v106, 0xCu);
    v110 = v106;
    v105 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
    swift_slowDealloc(v110, -1, -1);
  }
  else
  {

    v102 = v11;
  }

  v111 = -[NSObject trackedListChangeItems](v11, "trackedListChangeItems");
  v112 = objc_msgSend(v111, v105[66]);

  if (__OFADD__(*v162, v112))
  {
    __break(1u);
LABEL_117:
    swift_bridgeObjectRetain(v27);
    v115 = _CocoaArrayWrapper.endIndex.getter(v154);
    swift_release(v27);
    goto LABEL_73;
  }
  *v162 += v112;
  swift_bridgeObjectRetain(v7);
  v27 = (uint64_t)sub_1001EA558(v113);
  v114 = swift_bridgeObjectRelease(v7);
  if (v27 < 0 || (v27 & 0x4000000000000000) != 0)
    goto LABEL_117;
  v115 = *(_QWORD *)(v27 + 16);
LABEL_73:
  if (!v115)
  {
LABEL_109:
    swift_release(v27);
    swift_bridgeObjectRelease(v7);

    return;
  }
  v172 = v7 & 0xC000000000000001;
  v173 = v27 & 0xC000000000000001;
  v116 = v7 & 0xFFFFFFFFFFFFFF8;
  if (v7 < 0)
    v116 = v7;
  v171 = v116;
  v6 = 4;
  v114.n128_u64[0] = 138543362;
  v160 = v114;
  v114.n128_u64[0] = 138543618;
  v159 = v114;
  v167 = (char *)&type metadata for Swift.AnyObject + 8;
  v168.n128_u64[0] = v115;
  v162 = (_QWORD *)v27;
  v165 = v7;
  while (1)
  {
    if (v173)
      v118 = (char **)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v27);
    else
      v118 = (char **)*(id *)(v27 + 8 * v6);
    v13 = v118;
    a2 = (id)(v6 - 3);
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
LABEL_112:
      if (v27 < 0)
        v153 = v27;
      else
        v153 = v27 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v27);
      v30 = _CocoaArrayWrapper.endIndex.getter(v153);
      v29 = swift_bridgeObjectRelease(v27);
      goto LABEL_15;
    }
    if (!v172)
      break;
    v119 = v118;
    v120 = __CocoaDictionary.lookup(_:)(v119, v171);
    if (v120)
    {
      v121 = v120;
      v174 = v120;
      swift_unknownObjectRetain(v120);
      swift_dynamicCast(&v175, &v174, v167, v166, 7);
      v122 = v175;
      swift_unknownObjectRelease(v121);

      if (!v122)
        goto LABEL_93;
      goto LABEL_87;
    }
LABEL_77:
    v117 = v13;
LABEL_78:

    v13 = v117;
LABEL_79:

    ++v6;
    if (a2 == (id)v115)
      goto LABEL_109;
  }
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_79;
  v133 = sub_1002C66DC((uint64_t)v118);
  if ((v134 & 1) == 0)
    goto LABEL_77;
  v122 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v133);

  if (!v122)
  {
LABEL_93:
    v115 = v168.n128_u64[0];
    goto LABEL_79;
  }
LABEL_87:
  v123 = -[NSObject _trackedListChangeItemForObjectID:](v11, "_trackedListChangeItemForObjectID:", v13, v155.n128_u64[0], v155.n128_u64[1]);
  if (!v123)
  {
    v135 = v13;
    v13 = (char **)Logger.logObject.getter(v135);
    v136 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v13, v136))
    {
      v137 = swift_slowAlloc(12, -1);
      v138 = (char ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v137 = v160.n128_u32[0];
      *(_QWORD *)(v137 + 4) = v135;
      *v138 = v135;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v13, v136, "RDAccountDataMover: Can't find target list change item with {objectID: %{public}@}", (uint8_t *)v137, 0xCu);
      v139 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v138, 1, v139);
      swift_slowDealloc(v138, -1, -1);
      v140 = v137;
      v11 = v163;
      swift_slowDealloc(v140, -1, -1);
      v124 = v122;
    }
    else
    {

      v124 = v135;
      v13 = (char **)v122;
    }
    v115 = v168.n128_u64[0];
    goto LABEL_108;
  }
  v124 = v123;
  v125 = Logger.logObject.getter(v124);
  v126 = static os_log_type_t.info.getter(v125);
  if (os_log_type_enabled(v125, v126))
  {
    v127 = swift_slowAlloc(12, -1);
    v128 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v127 = v160.n128_u32[0];
    v129 = -[NSObject objectID](v124, "objectID");
    *(_QWORD *)(v127 + 4) = v129;
    *v128 = v129;

    _os_log_impl((void *)&_mh_execute_header, v125, v126, "RDAccountDataMover: Processing target list to copy reminders into {objectID: %{public}@}", (uint8_t *)v127, 0xCu);
    v130 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v128, 1, v130);
    v131 = v128;
    v7 = v165;
    swift_slowDealloc(v131, -1, -1);
    v132 = v127;
    v11 = v163;
    swift_slowDealloc(v132, -1, -1);
  }
  else
  {

    v125 = v124;
  }

  v141 = v169;
  v142 = sub_10045301C(v122, v124, v11);
  v169 = v141;
  if (!v141)
  {
    if ((v142 & 1) != 0)
    {
      v135 = (char **)v122;
      v115 = v168.n128_u64[0];
    }
    else
    {
      v143 = v170[9];
      v144 = -[NSObject objectID](v122, "objectID", swift_bridgeObjectRetain(v143).n128_f64[0]);
      v145 = sub_1001A602C((uint64_t)v144, v143);
      swift_bridgeObjectRelease(v143);

      if ((v145 & 1) != 0)
      {
        v13 = v13;
        v135 = v122;
        v146 = Logger.logObject.getter(v135);
        v147 = static os_log_type_t.default.getter(v146);
        if (os_log_type_enabled(v146, v147))
        {
          v148 = swift_slowAlloc(22, -1);
          v149 = (_QWORD *)swift_slowAlloc(16, -1);
          *(_DWORD *)v148 = v159.n128_u32[0];
          v150 = objc_msgSend(v135, "objectID");
          *(_QWORD *)(v148 + 4) = v150;
          *v149 = v150;

          *(_WORD *)(v148 + 12) = 2114;
          *(_QWORD *)(v148 + 14) = v13;
          v149[1] = v13;
          _os_log_impl((void *)&_mh_execute_header, v146, v147, "RDAccountDataMover: Source list is denylisted to copy to the target and it does not contain any non-denylisted child reminder {sourceList: %{public}@, targetList: %{public}@}", (uint8_t *)v148, 0x16u);
          v151 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v149, 2, v151);
          v152 = v149;
          v7 = v165;
          swift_slowDealloc(v152, -1, -1);
          swift_slowDealloc(v148, -1, -1);
        }
        else
        {

          v146 = v135;
        }
        v11 = v163;
        v115 = v168.n128_u64[0];

        -[NSObject removeFromParent](v124, "removeFromParent");
      }
      else
      {
        v135 = (char **)v122;
        v11 = v163;
        v115 = v168.n128_u64[0];
      }
    }
LABEL_108:
    v117 = v13;

    v13 = (char **)v124;
    v27 = (uint64_t)v162;
    goto LABEL_78;
  }
  swift_bridgeObjectRelease(v7);

  swift_release(v162);
}

void sub_100452528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Bool v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  char v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  id v77;
  char *v78;
  id v79;
  char *v80;
  uint64_t v81;
  BOOL v82;
  char *v83;
  id v84;
  uint64_t v85;
  id v86;
  unint64_t v87;
  _QWORD *v88;
  void *v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103[8];
  id v104;
  _BYTE v105[16];
  uint64_t v106;
  uint64_t v107;
  char v108;

  v2 = v1;
  v4 = REMAccount.isConsideredEmpty()();
  if (!v5)
  {
    if (v4)
    {
      if (qword_100837500 == -1)
        goto LABEL_4;
    }
    else
    {
      if (qword_100837500 != -1)
        swift_once(&qword_100837500, sub_100450520);
      v14 = type metadata accessor for Logger(0);
      sub_10001AAA8(v14, (uint64_t)qword_10084ACB0);
      v15 = (id)a1;
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.info.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v93 = v2;
        v19 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v18 = 138543362;
        v20 = v15;
        v21 = objc_msgSend(v15, "objectID");
        v104 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
        *v19 = v21;
        v15 = v20;

        _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDAccountDataMover: removeData: given account is not empty, now remove its lists and reminders {objectID: %{public}@}", v18, 0xCu);
        v22 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v19, 1, v22);
        v23 = v19;
        v2 = v93;
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

      }
      *(_QWORD *)(v2 + 48) = 0;
      *(_QWORD *)(v2 + 56) = 0;
      v104 = 0;
      v24 = objc_msgSend(v15, "fetchListsWithError:", &v104);
      v25 = v104;
      if (!v24)
      {
        v31 = v104;
        _convertNSErrorToError(_:)(v25);

        swift_willThrow(v32);
        return;
      }
      v26 = v24;
      v27 = sub_1000151B0(0, &qword_10083DFC8, REMList_ptr);
      v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);
      v29 = v25;

      a1 = v2;
      v30 = (void *)sub_1004543D8();
      v33 = v30;
      v107 = 0;
      v108 = 1;
      v101 = v28;
      v87 = (unint64_t)v28 >> 62;
      v88 = (_QWORD *)(v2 + 48);
      v94 = v2;
      v89 = v15;
      if ((unint64_t)v28 >> 62)
      {
        if (v28 < 0)
          a1 = v28;
        else
          a1 = v28 & 0xFFFFFFFFFFFFFF8;
        v86 = v30;
        swift_bridgeObjectRetain(v28);
        v34 = _CocoaArrayWrapper.endIndex.getter(a1);
        v95 = v33;
        if (!v34)
          goto LABEL_51;
      }
      else
      {
        v34 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        v35 = v30;
        swift_bridgeObjectRetain(v28);
        v95 = v33;
        if (!v34)
          goto LABEL_51;
      }
      v98 = sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
      v96 = 0;
      v97 = (id)objc_opt_self(REMList);
      v36 = 0;
      v99 = v28 & 0xC000000000000001;
      v90 = 1;
      while (1)
      {
        v37 = v36;
        while (1)
        {
          if (v99)
            v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v101);
          else
            v38 = *(id *)(v101 + 8 * v37 + 32);
          v39 = v38;
          v36 = v37 + 1;
          if (__OFADD__(v37, 1))
          {
            __break(1u);
            goto LABEL_68;
          }
          v40 = objc_msgSend(v38, "objectID");
          v41 = objc_msgSend(v97, "localAccountDefaultListID");
          a1 = v98;
          v42 = static NSObject.== infix(_:_:)(v40);

          if ((v42 & 1) != 0)
            break;
          v43 = objc_msgSend(v33, "updateList:", v39);
          objc_msgSend(v43, "removeFromParent");

          ++v37;
          if (v36 == v34)
            goto LABEL_51;
        }
        v104 = 0;
        v44 = objc_msgSend(v39, "fetchRemindersWithError:", &v104);
        v45 = v104;
        if (!v44)
        {
          v84 = v104;
          _convertNSErrorToError(_:)(v45);

          swift_willThrow(v85);
          swift_bridgeObjectRelease_n(v101, 2);

          return;
        }
        v46 = v44;
        v47 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
        v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);
        v49 = v45;

        if ((unint64_t)v48 >> 62)
          break;
        a1 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v48);
        if (a1)
          goto LABEL_29;
LABEL_49:
        swift_bridgeObjectRelease(v48);
LABEL_50:
        swift_bridgeObjectRelease(v48);

        if (v36 == v34)
        {
LABEL_51:
          swift_bridgeObjectRelease(v101);
          v60 = v94;
          sub_1004540E0();
          v61 = v89;
          swift_bridgeObjectRetain(v101);
          v63 = Logger.logObject.getter(v62);
          v64 = static os_log_type_t.info.getter(v63);
          if (os_log_type_enabled(v63, v64))
          {
            v65 = swift_slowAlloc(32, -1);
            v66 = (_QWORD *)swift_slowAlloc(8, -1);
            v100 = swift_slowAlloc(32, -1);
            v106 = v100;
            *(_DWORD *)v65 = 138543874;
            v67 = objc_msgSend(v61, "objectID");
            v104 = v67;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
            *v66 = v67;

            *(_WORD *)(v65 + 12) = 2048;
            if (v87)
            {
              v68 = v101;
              if (v101 < 0)
                v71 = v101;
              else
                v71 = v101 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v101);
              v69 = (void *)_CocoaArrayWrapper.endIndex.getter(v71);
              swift_bridgeObjectRelease(v101);
            }
            else
            {
              v68 = v101;
              v69 = *(void **)((v101 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            v70 = v88;
            swift_bridgeObjectRelease(v68);
            v104 = v69;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
            swift_bridgeObjectRelease(v68);
            *(_WORD *)(v65 + 22) = 2080;
            swift_beginAccess(&v107, &v104, 0, 0);
            if ((v108 & 1) != 0)
            {
              v72 = 0x80000001007047C0;
              v73 = 0xD000000000000013;
            }
            else
            {
              v102 = v107;
              v103[0] = 0;
              v74 = sub_10001A630(&qword_10083F360);
              v73 = String.init<A>(describing:)(&v102, v74);
              v72 = v75;
            }
            v102 = sub_10001A820(v73, v72, &v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103);
            swift_bridgeObjectRelease(v72);
            _os_log_impl((void *)&_mh_execute_header, v63, v64, "RDAccountDataMover: removeData: done removing data from account {objectID: %{public}@, lists.count: %ld, remindersFromDefaultList: %s}", (uint8_t *)v65, 0x20u);
            v76 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v66, 1, v76);
            swift_slowDealloc(v66, -1, -1);
            swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v100, -1, -1);
            swift_slowDealloc(v65, -1, -1);

            v60 = v94;
          }
          else
          {

            swift_bridgeObjectRelease_n(v101, 2);
            v70 = v88;
          }
          v77 = objc_msgSend(v95, "trackedListChangeItems", v87);
          v78 = (char *)objc_msgSend(v77, "count");

          if (__OFADD__(*v70, v78))
          {
            __break(1u);
          }
          else
          {
            *(_QWORD *)(v60 + 48) = &v78[*v70];
            v79 = objc_msgSend(v95, "trackedReminderChangeItems");
            v80 = (char *)objc_msgSend(v79, "count");

            v81 = *(_QWORD *)(v60 + 56);
            v82 = __OFADD__(v81, v80);
            v83 = &v80[v81];
            if (!v82)
            {
              *(_QWORD *)(v60 + 56) = v83;
              return;
            }
          }
          __break(1u);
LABEL_77:
          __break(1u);
        }
      }
      if (v48 < 0)
        v59 = v48;
      else
        v59 = v48 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v48);
      a1 = _CocoaArrayWrapper.endIndex.getter(v59);
      if (!a1)
        goto LABEL_49;
LABEL_29:
      if (a1 < 1)
        goto LABEL_77;
      v92 = v48 & 0xC000000000000001;
      if ((v48 & 0xC000000000000001) != 0)
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v48);
      else
        v50 = *(id *)(v48 + 32);
      v51 = v50;
      v52 = objc_msgSend(v33, "updateReminder:", v50, v87);
      objc_msgSend(v52, "removeFromList");

      v53 = v96;
      if ((v90 & 1) != 0)
        v53 = 0;
      v96 = v53 + 1;
      if (!__OFADD__(v53, 1))
      {
        v91 = a1 - 1;
        if (a1 != 1)
        {
          v54 = 0;
          a1 = v48;
          do
          {
            if (v92)
              v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54 + 1, v48);
            else
              v55 = *(id *)(v48 + 8 * v54 + 40);
            v56 = v55;
            v33 = v95;
            v57 = objc_msgSend(v95, "updateReminder:", v55);
            objc_msgSend(v57, "removeFromList");

            v58 = v96 + v54 + 1;
            if (__OFADD__(v96 + v54, 1))
              goto LABEL_68;
            v48 = a1;
            ++v54;
          }
          while (v91 != v54);
          v96 = v58;
        }
        swift_bridgeObjectRelease(v48);
        v90 = 0;
        v107 = v96;
        v108 = 0;
        goto LABEL_50;
      }
LABEL_68:
      __break(1u);
    }
    swift_once(&qword_100837500, sub_100450520);
LABEL_4:
    v6 = type metadata accessor for Logger(0);
    sub_10001AAA8(v6, (uint64_t)qword_10084ACB0);
    v7 = (id)a1;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138543362;
      v12 = objc_msgSend(v7, "objectID");
      v104 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
      *v11 = v12;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDAccountDataMover: removeData: given account is already empty (no reminder or list count < 2) so we stopped {objectID: %{public}@}", v10, 0xCu);
      v13 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v11, 1, v13);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_10045301C(void *a1, void *a2, void *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *i;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  char v23;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v31;
  id v32;

  v5 = v3;
  v32 = 0;
  v6 = objc_msgSend(a1, "fetchRemindersWithError:", &v32);
  v7 = v32;
  if (v6)
  {
    v8 = v6;
    v9 = sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
    v10 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);
    v11 = v7;

    v32 = v10;
    v12 = sub_10001A630((uint64_t *)&unk_10083A330);
    v13 = sub_100454C0C();
    v14 = BidirectionalCollection<>.slices(by:)(200, v12, v13);
    swift_bridgeObjectRelease(v10);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v4 = 0;
      v28 = v14;
      for (i = (unint64_t *)(v14 + 56); ; i += 4)
      {
        v31 = v5;
        v18 = (char *)*(i - 1);
        v17 = *i;
        v20 = *(i - 3);
        v19 = *(i - 2);
        swift_unknownObjectRetain(v20);
        v21 = objc_autoreleasePoolPush();
        v22 = objc_msgSend(a2, "objectID");
        v23 = sub_100453228(v20, v19, v18, v17, v22, a3);
        v5 = v31;
        if (v31)
          break;
        v24 = v23;

        v4 |= v24;
        objc_autoreleasePoolPop(v21);
        swift_unknownObjectRelease(v20);
        if (!--v15)
        {
          swift_bridgeObjectRelease(v28);
          return v4 & 1;
        }
      }

      objc_autoreleasePoolPop(v21);
      swift_unknownObjectRelease(v20);
      swift_bridgeObjectRelease(v28);
    }
    else
    {
      swift_bridgeObjectRelease(v14);
      v4 = 0;
    }
  }
  else
  {
    v25 = v32;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v26);
  }
  return v4 & 1;
}

uint64_t sub_100453228(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, id a5, void *a6)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  __n128 v27;
  NSObject *v28;
  char *v29;
  id v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  NSString v45;
  double v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSString v62;
  uint64_t v63;
  NSObject *v64;
  NSObject *v65;
  os_log_type_t v66;
  char **v67;
  uint8_t *v68;
  id v69;
  id v70;
  char *v71;
  uint64_t v72;
  BOOL v73;
  char *v74;
  char v75;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  id v83;
  uint64_t v84;
  id v85;
  char *v86;
  __n128 v87;
  char *v88;
  uint64_t v89;
  id v90;
  _BYTE v91[16];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v8 = v7;
  v9 = v6;
  v94 = a2;
  v84 = a1;
  v14 = type metadata accessor for UUID(0);
  v80 = *(_QWORD *)(v14 - 8);
  v81 = v14;
  __chkstk_darwin(v14);
  v79 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = a6;
  v16 = objc_msgSend(a6, "_trackedListChangeItemForObjectID:", a5);
  if (v16)
  {
    v17 = (uint64_t)v16;
    v18 = a4 >> 1;
    v89 = v9;
    v83 = v16;
    if ((char *)(a4 >> 1) == a3)
    {
      v82 = 0;
LABEL_26:
      objc_msgSend((id)v17, "setRemindersICSDisplayOrderChanged:", 0);
      if (qword_100837500 == -1)
        goto LABEL_27;
    }
    else
    {
      v86 = v7;
      v27 = swift_unknownObjectRetain(v84);
      v82 = 0;
      v78 = (void *)(v18 - 1);
      v27.n128_u64[0] = 138543362;
      v87 = v27;
      v8 = a3;
      v88 = a3;
LABEL_8:
      v17 = (uint64_t)v8;
      while ((uint64_t)v8 >= (uint64_t)a3 && v17 < v18)
      {
        v29 = (char *)(v17 + 1);
        v30 = *(id *)(v94 + 8 * v17);
        if ((sub_100453D18(v30) & 1) == 0)
        {
          v40 = objc_msgSend(v30, "titleAsString");
          if (v40)
          {
            v41 = v40;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
            v43 = v42;

          }
          else
          {
            v43 = 0xE000000000000000;
          }
          v44 = v86;
          v45 = String._bridgeToObjectiveC()();
          *(_QWORD *)&v46 = swift_bridgeObjectRelease(v43).n128_u64[0];
          v47 = objc_msgSend(v85, "addReminderWithTitle:toListChangeItem:", v45, v83, v46);

          sub_1004539E8((uint64_t)&v90);
          v48 = v92;
          v49 = v93;
          sub_10000A388(&v90, v92);
          v50 = (*(uint64_t (**)(id, id, uint64_t, uint64_t))(v49 + 8))(v30, v47, v48, v49);
          if (v44)
          {

            swift_unknownObjectRelease(v84);
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v90);
            return v75 & 1;
          }
          v86 = 0;
          v9 = v89;
          if (*(_BYTE *)(v89 + 80) == 1)
          {
            v51 = objc_msgSend(v30, "objectID");
            v52 = objc_msgSend(v51, "uuid");

            v53 = v79;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v52);

            UUID.uuidString.getter(v54);
            v56 = v55;
            (*(void (**)(char *, uint64_t))(v80 + 8))(v53, v81);
            v57 = String._bridgeToObjectiveC()();
            objc_msgSend(v47, "setExternalIdentifier:", v57, swift_bridgeObjectRelease(v56).n128_f64[0]);

          }
          v58 = v79;
          v59 = UUID.init()(v50);
          UUID.uuidString.getter(v59);
          v61 = v60;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v58, v81);
          v62 = String._bridgeToObjectiveC()();
          objc_msgSend(v47, "setDaCalendarItemUniqueIdentifier:", v62, swift_bridgeObjectRelease(v61).n128_f64[0]);

          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v90);
          v82 = 1;
          v8 = (char *)(v17 + 1);
          a3 = v88;
          if (v78 == (void *)v17)
          {
LABEL_25:
            swift_unknownObjectRelease(v84);
            v8 = v86;
            v17 = (uint64_t)v83;
            goto LABEL_26;
          }
          goto LABEL_8;
        }
        if (qword_100837500 != -1)
          swift_once(&qword_100837500, sub_100450520);
        v31 = type metadata accessor for Logger(0);
        sub_10001AAA8(v31, (uint64_t)qword_10084ACB0);
        v32 = v30;
        v28 = Logger.logObject.getter(v32);
        v33 = static os_log_type_t.default.getter(v28);
        if (os_log_type_enabled(v28, v33))
        {
          v34 = swift_slowAlloc(12, -1);
          v35 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v34 = v87.n128_u32[0];
          v36 = -[NSObject objectID](v32, "objectID");
          *(_QWORD *)(v34 + 4) = v36;
          *v35 = v36;

          _os_log_impl((void *)&_mh_execute_header, v28, v33, "RDAccountDataMover: _copySliceOfReminders: Source reminder is denylisted to copy to the target list {sourceReminder: %{public}@}", (uint8_t *)v34, 0xCu);
          v37 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v35, 1, v37);
          v38 = v35;
          v9 = v89;
          swift_slowDealloc(v38, -1, -1);
          v39 = v34;
          a3 = v88;
          swift_slowDealloc(v39, -1, -1);
        }
        else
        {

          v28 = v32;
        }

        ++v17;
        if ((char *)v18 == v29)
          goto LABEL_25;
      }
      __break(1u);
    }
    swift_once(&qword_100837500, sub_100450520);
LABEL_27:
    v63 = type metadata accessor for Logger(0);
    sub_10001AAA8(v63, (uint64_t)qword_10084ACB0);
    v64 = v85;
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.info.getter(v65);
    v67 = &selRef_showRemindersAsOverdue;
    if (os_log_type_enabled(v65, v66))
    {
      v86 = v8;
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v68 = 134217984;
      v69 = -[NSObject trackedReminderChangeItems](v64, "trackedReminderChangeItems");
      v70 = objc_msgSend(v69, "count");

      v67 = &selRef_showRemindersAsOverdue;
      v90 = v70;
      v8 = v86;
      v17 = (uint64_t)v83;
      v9 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);

      _os_log_impl((void *)&_mh_execute_header, v65, v66, "RDAccountDataMover: Processed copying source reminders {count: %ld}", v68, 0xCu);
      swift_slowDealloc(v68, -1, -1);
    }
    else
    {

      v65 = v64;
    }

    a5 = objc_msgSend(v64, v67[73]);
    v71 = (char *)objc_msgSend(a5, "count");

    v72 = *(_QWORD *)(v9 + 56);
    v73 = __OFADD__(v72, v71);
    v74 = &v71[v72];
    if (!v73)
    {
      *(_QWORD *)(v9 + 56) = v74;
      v75 = v82;
      return v75 & 1;
    }
    __break(1u);
    goto LABEL_39;
  }
  if (qword_100837500 != -1)
LABEL_39:
    swift_once(&qword_100837500, sub_100450520);
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_10084ACB0);
  v20 = a5;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v86 = v8;
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v23 = 138543362;
    v90 = v20;
    v25 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
    *v24 = v20;

    _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAccountDataMover: _copySliceOfReminders: Cannot copy reminders because list change item is not tracked and is nil {targetListID: %{public}@}", v23, 0xCu);
    v26 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v24, 1, v26);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
  v75 = 0;
  return v75 & 1;
}

void sub_1004539E8(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t inited;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[136];
  _QWORD v30[5];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v1, "account");
  v9 = objc_msgSend(v8, "accountTypeHost");

  v10 = sub_10001A630(&qword_10084B090);
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(v30, 0, 0, 0, 0, sub_100454334, 0, sub_100454350, 0, sub_100454334, 0, sub_100454334, 0, sub_10045436C, 0, 0, 0, v10);
  sub_100454BC4((uint64_t)v30, (uint64_t)&v27);
  if (v28)
  {
    sub_10000882C((uint64_t)v30, &qword_10084B098);

    sub_10001BCA8(&v27, a1);
  }
  else
  {
    v11 = v5;
    sub_10000882C((uint64_t)&v27, &qword_10084B098);
    v12 = (void *)objc_opt_self(REMError);
    v13 = String._bridgeToObjectiveC()();
    v14 = objc_msgSend(v12, "internalErrorWithDebugDescription:", v13);

    swift_willThrow(v15);
    sub_10000882C((uint64_t)v30, &qword_10084B098);
    if (qword_100837500 != -1)
      swift_once(&qword_100837500, sub_100450520);
    v16 = sub_10001AAA8(v4, (uint64_t)qword_10084ACB0);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, v16, v4);
    v17 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v18 = sub_10001A630((uint64_t *)&unk_10083A280);
    inited = swift_initStackObject(v18, v29);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    *(_QWORD *)(inited + 32) = 48;
    *(_QWORD *)(inited + 40) = 0xE100000000000000;
    v20 = objc_msgSend(v9, "internalDescription");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    *(_QWORD *)(inited + 48) = v21;
    *(_QWORD *)(inited + 56) = v23;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = 49;
    *(_QWORD *)(inited + 88) = 0xE100000000000000;
    v24 = objc_msgSend(v2, "remObjectID");
    *(_QWORD *)(inited + 120) = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    *(_QWORD *)(inited + 96) = v24;
    v25 = sub_10016E7E4(inited);
    sub_1004A14D8((uint64_t)"REMReminder.dataCopierFactory: Could not create data copier for account data move because account type is not supported for now {accountTypeHost: %{public}@, reminderID: %{public}@}.", 182, 2uLL, v17, v25);
    __break(1u);
  }
}

id sub_100453D18(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = type metadata accessor for DateComponents(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = objc_msgSend(a1, "objectID", swift_bridgeObjectRetain(v10).n128_f64[0]);
  v12 = sub_1001A602C((uint64_t)v11, v10);
  swift_bridgeObjectRelease(v10);

  if ((v12 & 1) == 0)
    return 0;
  v13 = *(_QWORD *)(v1 + 72);
  v14 = objc_msgSend(a1, "list", swift_bridgeObjectRetain(v13).n128_f64[0]);
  v15 = objc_msgSend(v14, "objectID");

  LOBYTE(v14) = sub_1001A602C((uint64_t)v15, v13);
  swift_bridgeObjectRelease(v13);

  if ((v14 & 1) == 0)
    return 0;
  v16 = objc_msgSend(a1, "dueDateComponents");
  if (v16)
  {
    v17 = v16;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v16);

    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) != 1)
    {
      sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100841610);
      return 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
  }
  sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100841610);
  result = objc_msgSend(a1, "alarms");
  if (!result)
    return result;
  v19 = result;
  v20 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0)
      v33 = v21;
    else
      v33 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v21);
    v22 = _CocoaArrayWrapper.endIndex.getter(v33);
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v23 = swift_bridgeObjectRelease(v21).n128_u64[0];
  if (v22)
    return 0;
  result = objc_msgSend(a1, "recurrenceRules", v23);
  if (result)
  {
    v24 = result;
    v25 = sub_1000151B0(0, (unint64_t *)&qword_100841640, REMRecurrenceRule_ptr);
    v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);

    if ((unint64_t)v26 >> 62)
    {
      if (v26 < 0)
        v34 = v26;
      else
        v34 = v26 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v26);
      v27 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(v26);
    }
    else
    {
      v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)&v28 = swift_bridgeObjectRelease(v26).n128_u64[0];
    if (v27)
      return 0;
    v29 = objc_msgSend(a1, "attachments", v28);
    v30 = sub_1000151B0(0, (unint64_t *)&unk_100839CE0, REMAttachment_ptr);
    v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

    if ((unint64_t)v31 >> 62)
    {
      if (v31 < 0)
        v35 = v31;
      else
        v35 = v31 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v31);
      v32 = _CocoaArrayWrapper.endIndex.getter(v35);
      swift_bridgeObjectRelease(v31);
    }
    else
    {
      v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v31);
    return (id)(v32 == 0);
  }
  return result;
}

void sub_1004540E0()
{
  uint64_t v0;
  void *v1;
  id v2;
  unsigned int v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  id v14;

  v1 = *(void **)(v0 + 88);
  if (v1)
  {
    v14 = 0;
    v2 = v1;
    v3 = objc_msgSend(v2, "saveSynchronouslyWithError:", &v14);
    v4 = v14;
    if (v3)
    {
      v5 = v14;

      v6 = *(void **)(v0 + 88);
      *(_QWORD *)(v0 + 88) = 0;

    }
    else
    {
      v12 = v14;
      _convertNSErrorToError(_:)(v4);

      swift_willThrow(v13);
    }
  }
  else
  {
    if (qword_100837500 != -1)
      swift_once(&qword_100837500, sub_100450520);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001AAA8(v7, (uint64_t)qword_10084ACB0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDAccountDataMover: Attempted to save with a current save request.", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

  }
}

uint64_t sub_100454254()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for RDAccountDataMover()
{
  return objc_opt_self(_TtC7remindd18RDAccountDataMover);
}

uint64_t type metadata accessor for RDReminderDataICSCopier()
{
  return objc_opt_self(_TtC7remindd23RDReminderDataICSCopier);
}

void sub_1004542D0(void *a1, void *a2)
{
  sub_1004547C4(a1, a2);
}

uint64_t type metadata accessor for RDReminderDataCloudKitCopier()
{
  return objc_opt_self(_TtC7remindd28RDReminderDataCloudKitCopier);
}

uint64_t type metadata accessor for RDReminderDataExchangeCopier()
{
  return objc_opt_self(_TtC7remindd28RDReminderDataExchangeCopier);
}

ValueMetadata *type metadata accessor for RDAccountDataMover.Statistics()
{
  return &type metadata for RDAccountDataMover.Statistics;
}

uint64_t sub_100454334@<X0>(uint64_t *a1@<X8>)
{
  return sub_100454388(type metadata accessor for RDReminderDataICSCopier, a1);
}

uint64_t sub_100454350@<X0>(uint64_t *a1@<X8>)
{
  return sub_100454388(type metadata accessor for RDReminderDataExchangeCopier, a1);
}

uint64_t sub_10045436C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100454388(type metadata accessor for RDReminderDataCloudKitCopier, a1);
}

uint64_t sub_100454388@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1();
  result = swift_allocObject(v3, 16, 7);
  a2[3] = v3;
  a2[4] = (uint64_t)&off_1007F46C8;
  *a2 = result;
  return result;
}

uint64_t sub_1004543D8()
{
  uint64_t v0;
  uint64_t result;
  id v2;
  NSString v3;
  void *v4;
  void *v5;
  NSString v6;
  uint64_t v7;

  result = *(_QWORD *)(v0 + 88);
  if (!result)
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)REMSaveRequest), "initWithStore:", *(_QWORD *)(v0 + 40));
    v3 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setAuthor:", v3);

    v4 = *(void **)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v2;

    result = *(_QWORD *)(v0 + 88);
    if (!result)
    {
      v5 = (void *)objc_opt_self(REMError);
      v6 = String._bridgeToObjectiveC()();
      objc_msgSend(v5, "internalErrorWithDebugDescription:", v6);

      return swift_willThrow(v7);
    }
  }
  return result;
}

id sub_1004544C0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  id v10;
  id result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _OWORD v29[2];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)objc_opt_self(REMExporting);
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)&v30 = v8;
  specialized Array._endMutation()(v8);
  sub_1000151B0(0, &qword_100846630, REMReminder_ptr);
  v28 = a1;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v6, "exportICSCalendarFromReminders:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  result = objc_msgSend(v10, "components");
  if (result)
  {
    v12 = result;
    NSArray.makeIterator()();

    NSFastEnumerationIterator.next()(v13);
    if (v31)
    {
      while (1)
      {
        sub_10001A6CC(&v30, v29);
        v14 = sub_1000151B0(0, &qword_100849840, ICSTodo_ptr);
        v15 = swift_dynamicCast(&v32, v29, (char *)&type metadata for Any + 8, v14, 6);
        if ((v15 & 1) != 0)
          break;
        NSFastEnumerationIterator.next()(v15);
        if (!v31)
          goto LABEL_5;
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
LABEL_5:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v16 = (void *)objc_opt_self(REMError);
      *(_QWORD *)&v30 = 0;
      *((_QWORD *)&v30 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      v17._object = (void *)0x8000000100704660;
      v17._countAndFlagsBits = 0xD000000000000042;
      String.append(_:)(v17);
      v18 = objc_msgSend(v28, "objectID");
      v19 = objc_msgSend(v18, "description");
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      v23._countAndFlagsBits = v20;
      v23._object = v22;
      String.append(_:)(v23);

      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 125;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      v25 = String._bridgeToObjectiveC()();
      objc_msgSend(v16, "internalErrorWithDebugDescription:", v25, swift_bridgeObjectRelease().n128_f64[0]);

      swift_willThrow(v26);
    }
    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1004547C4(void *a1, void *a2)
{
  uint64_t v2;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  NSObject **v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  NSObject **v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;

  v5 = sub_1004544C0(a1);
  if (!v2)
  {
    v7 = v5;
    v8 = v6;
    if (qword_100837500 != -1)
      swift_once(&qword_100837500, sub_100450520);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001AAA8(v9, (uint64_t)qword_10084ACB0);
    v11 = a1;
    v12 = v8;
    v13 = v11;
    v14 = v12;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    v33 = v7;
    if (os_log_type_enabled(v15, v16))
    {
      v32 = v10;
      v17 = swift_slowAlloc(22, -1);
      v18 = (NSObject **)swift_slowAlloc(16, -1);
      *(_DWORD *)v17 = 138543618;
      v19 = objc_msgSend(v13, "objectID");
      v34 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      *v18 = v19;

      *(_WORD *)(v17 + 12) = 2112;
      v34 = v14;
      v20 = v14;
      v7 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      v18[1] = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDAccountDataMover: RDReminderDataICSCopier: source reminder exported as ICS {objectID: %{public}@, icsTodo: %@}", (uint8_t *)v17, 0x16u);
      v21 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v18, 2, v21);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

    }
    v22 = objc_msgSend(a2, "saveRequest", v32);
    -[NSObject updateReminderChangeItem:fromICSTodo:icsCalendar:isNew:withOptions:](v22, "updateReminderChangeItem:fromICSTodo:icsCalendar:isNew:withOptions:", a2, v14, v7, 1, 0);
    v23 = a2;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = (NSObject **)swift_slowAlloc(16, -1);
      *(_DWORD *)v26 = 138543618;
      v28 = -[NSObject objectID](v23, "objectID");
      v34 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      *v27 = v28;

      *(_WORD *)(v26 + 12) = 2112;
      v29 = -[NSObject storage](v23, "storage");
      v34 = v29;
      v30 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      v27[1] = v29;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "RDAccountDataMover: RDReminderDataICSCopier: imported ICS into as reminder {objectID: %{public}@, storage: %@}", (uint8_t *)v26, 0x16u);
      v31 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v27, 2, v31);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
      v23 = v14;
    }
    else
    {

      v24 = v23;
      v30 = v23;
      v22 = v14;
    }

  }
}

uint64_t sub_100454BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10084B098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100454C0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B0A0;
  if (!qword_10084B0A0)
  {
    v1 = sub_1000A5A94((uint64_t *)&unk_10083A330);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10084B0A0);
  }
  return result;
}

uint64_t sub_100454C58@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  id v27;
  void *v28;
  Class v29;
  Class v30;
  Class v31;
  Class v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;

  v42 = a2;
  v43 = a1;
  v46 = a4;
  v5 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v45 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v16 = __chkstk_darwin(v15);
  v44 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v39 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v39 - v21;
  sub_1004556F0((uint64_t)&v39 - v21);
  sub_1004558A8(a3, (uint64_t)v22, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1, v11) == 1)
  {
    sub_10000882C((uint64_t)v22, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v20, (uint64_t *)&unk_1008380D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v46, 1, 1, v11);
  }
  else
  {
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v20, v11);
    DateComponents.timeZone.getter(v24);
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
    v40 = v9;
    v41 = v8;
    if ((_DWORD)v25 == 1)
    {
      static TimeZone.current.getter(v25);
      sub_10000882C((uint64_t)v7, &qword_1008401F8);
    }
    else
    {
      (*(void (**)(void))(v9 + 32))();
    }
    isa = DateComponents._bridgeToObjectiveC()().super.isa;
    v27 = -[objc_class rem_isAllDayDateComponents](isa, "rem_isAllDayDateComponents");

    v28 = (void *)objc_opt_self(REMRecurrenceRule);
    v29 = Date._bridgeToObjectiveC()().super.isa;
    v30 = Date._bridgeToObjectiveC()().super.isa;
    v31 = TimeZone._bridgeToObjectiveC()().super.isa;
    sub_100456D88();
    v32 = Array._bridgeToObjectiveC()().super.isa;
    v33 = objc_msgSend(v28, "nextRecurrentDueDateAfter:dueDate:timeZone:allDay:recurrenceRules:", v29, v30, v31, v27, v32);

    if (v33)
    {
      v34 = (uint64_t)v44;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

      v35 = 0;
      v36 = v46;
      v38 = v40;
      v37 = v41;
    }
    else
    {
      v35 = 1;
      v36 = v46;
      v38 = v40;
      v37 = v41;
      v34 = (uint64_t)v44;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v37);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    sub_10000882C((uint64_t)v22, (uint64_t *)&unk_1008380D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v34, v35, 1, v11);
    return sub_1000A5CA8(v34, v36, (uint64_t *)&unk_1008380D0);
  }
}

uint64_t sub_100454FEC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100455300(a1, a2, a3, (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_100455A70, a4);
}

uint64_t sub_100454FF8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(void);
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a2;
  v36 = a3;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v34 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - v8;
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v33 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v33 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v33 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v33 - v23;
  sub_100455538(a1, (uint64_t)v22);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v25(v22, 1, v4) == 1)
  {
    sub_10000882C((uint64_t)v22, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v24, 1, 1, v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v22, v4);
    sub_10045698C((uint64_t)v9, (uint64_t)v24);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
  v26 = v35;
  sub_100455300(a1, v35, (uint64_t)v24, (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_100454C58, (uint64_t)v19);
  sub_1004558A8((uint64_t)v19, (uint64_t)v24, v16);
  sub_1000CDA2C((uint64_t)v16, (uint64_t)v13);
  if (v25(v13, 1, v4) == 1)
  {
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v19, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v24, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_1008380D0);
LABEL_9:
    v31 = 1;
    v30 = v36;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v30, v31, 1, v4);
  }
  v27 = *(void (**)(void))(v5 + 32);
  v28 = v34;
  v27();
  v29 = static Date.> infix(_:_:)(v28, v26);
  sub_10000882C((uint64_t)v16, (uint64_t *)&unk_1008380D0);
  sub_10000882C((uint64_t)v19, (uint64_t *)&unk_1008380D0);
  sub_10000882C((uint64_t)v24, (uint64_t *)&unk_1008380D0);
  if ((v29 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v28, v4);
    goto LABEL_9;
  }
  v30 = v36;
  ((void (*)(uint64_t, char *, uint64_t))v27)(v36, v28, v4);
  v31 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v30, v31, 1, v4);
}

uint64_t sub_1004552F4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100455300(a1, a2, a3, (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_100454C58, a4);
}

uint64_t sub_100455300@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  void (*v21)(char *, char *, uint64_t);
  id v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);

  v30 = a4;
  v9 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateComponents(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v29 - v17;
  v19 = objc_msgSend(a1, "dueDateComponents");
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_6;
  }
  v20 = v19;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v21 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v21(v11, v16, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_6:
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_100841610);
    goto LABEL_7;
  }
  v21(v18, v11, v12);
  v22 = objc_msgSend(a1, "recurrenceRules");
  if (v22)
  {
    v23 = v22;
    v24 = sub_100456D88();
    v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

    v30(v18, v25, a2, a3);
    v26 = swift_bridgeObjectRelease(v25);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v13 + 8))(v18, v12, v26);
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
LABEL_7:
  v28 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a5, 1, 1, v28);
}

uint64_t sub_100455538@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v4 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DateComponents(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  v14 = objc_msgSend(a1, "dueDateComponents");
  if (v14)
  {
    v15 = v14;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v14);

    v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v16(v6, v11, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v16(v13, v6, v7);
      sub_1004556F0(a2);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100841610);
  v18 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
}

uint64_t sub_1004556F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSDateComponents v9;
  void *v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimeZone(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9.super.isa = DateComponents._bridgeToObjectiveC()().super.isa;
  DateComponents.timeZone.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    static TimeZone.current.getter();
    sub_10000882C((uint64_t)v4, &qword_1008401F8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  v10 = (void *)objc_opt_self(NSDateComponents);
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = objc_msgSend(v10, "rem_dateWithDateComponents:timeZone:", v9.super.isa, isa);

  if (v12)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v13 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 0, 1, v13);
  }
  else
  {
    v15 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
}

uint64_t sub_1004558A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  uint64_t v24;

  v6 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v24 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v24 - v17;
  sub_1000CDA2C(a1, (uint64_t)v11);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v19(v11, 1, v12) != 1)
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v21(v18, v11, v12);
    v21(a3, v18, v12);
LABEL_6:
    v20 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, v20, 1, v12);
  }
  sub_10000882C((uint64_t)v11, (uint64_t *)&unk_1008380D0);
  sub_1000CDA2C(a2, (uint64_t)v9);
  if (v19(v9, 1, v12) != 1)
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v22(v16, v9, v12);
    v22(a3, v16, v12);
    goto LABEL_6;
  }
  sub_10000882C((uint64_t)v9, (uint64_t *)&unk_1008380D0);
  v20 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, v20, 1, v12);
}

uint64_t sub_100455A70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  NSDateComponents v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  void *v67;
  Class isa;
  void (*v69)(char *, uint64_t);
  id v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v81)(uint64_t, char *, uint64_t);
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  Class v89;
  id v90;
  void *v91;
  Class v92;
  Class v93;
  Class v94;
  Class v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  char *v106;
  char *v107;
  void (*v108)(char *, uint64_t);
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  void (*v123)(char *, uint64_t);
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  void (*v133)(uint64_t, char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  unsigned int (*v136)(char *, uint64_t, uint64_t);
  char *v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v141;

  v140 = a4;
  v115 = a3;
  v113 = a2;
  v139 = a1;
  v110 = a5;
  v5 = sub_10001A630(&qword_1008401F8);
  v6 = __chkstk_darwin(v5);
  v117 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v109 - v8;
  v10 = type metadata accessor for TimeZone(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v116 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v130 = (char *)&v109 - v14;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v111 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v114 = (char *)&v109 - v20;
  v21 = __chkstk_darwin(v19);
  v132 = (char *)&v109 - v22;
  v23 = __chkstk_darwin(v21);
  v129 = (char *)&v109 - v24;
  v25 = __chkstk_darwin(v23);
  v137 = (char *)&v109 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v109 - v27;
  v29 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v30 = __chkstk_darwin(v29);
  v112 = (char *)&v109 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v128 = (char *)&v109 - v33;
  v34 = __chkstk_darwin(v32);
  v127 = (char *)&v109 - v35;
  v36 = __chkstk_darwin(v34);
  v124 = (char *)&v109 - v37;
  v38 = __chkstk_darwin(v36);
  v126 = (char *)&v109 - v39;
  v40 = __chkstk_darwin(v38);
  v135 = (uint64_t)&v109 - v41;
  v42 = __chkstk_darwin(v40);
  v141 = (char *)&v109 - v43;
  v44 = __chkstk_darwin(v42);
  v125 = (uint64_t)&v109 - v45;
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v109 - v47;
  v49 = __chkstk_darwin(v46);
  v51 = (char *)&v109 - v50;
  v52 = __chkstk_darwin(v49);
  v54 = (char *)&v109 - v53;
  __chkstk_darwin(v52);
  v56 = (char *)&v109 - v55;
  sub_1004556F0((uint64_t)&v109 - v55);
  sub_1004558A8((uint64_t)v140, (uint64_t)v56, v54);
  v136 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v136(v54, 1, v15) == 1)
  {
    sub_10000882C((uint64_t)v56, (uint64_t *)&unk_1008380D0);
    sub_10000882C((uint64_t)v54, (uint64_t *)&unk_1008380D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v110, 1, 1, v15);
  }
  v109 = v56;
  v58 = v16;
  v59 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v59(v28, v54, v15);
  v138 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v138(v137, v28, v15);
  v118 = v58;
  v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v60(v51, 1, 1, v15);
  sub_1000CDA2C((uint64_t)v51, (uint64_t)v48);
  if (v136(v48, 1, v15) == 1)
  {
    v122 = v9;
    v119 = v51;
    v133 = (void (*)(uint64_t, char *, uint64_t))v59;
    v140 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60;
    v131 = v11;
    v120 = v28;
    v121 = v48;
    v134 = v10;
    do
    {
      sub_10000882C((uint64_t)v48, (uint64_t *)&unk_1008380D0);
      v63 = (uint64_t)v141;
      v138(v141, v28, v15);
      v60((char *)v63, 0, 1, v15);
      v64.super.isa = DateComponents._bridgeToObjectiveC()().super.isa;
      ((void (*)(void))DateComponents.timeZone.getter)();
      v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v65(v9, 1, v10) == 1)
      {
        v66 = v130;
        static TimeZone.current.getter();
        sub_10000882C((uint64_t)v9, &qword_1008401F8);
      }
      else
      {
        v66 = v130;
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v130, v9, v10);
      }
      v67 = (void *)objc_opt_self(NSDateComponents);
      isa = TimeZone._bridgeToObjectiveC()().super.isa;
      v69 = *(void (**)(char *, uint64_t))(v11 + 8);
      v69(v66, v10);
      v70 = objc_msgSend(v67, "rem_dateWithDateComponents:timeZone:", v64.super.isa, isa);

      if (v70)
      {
        v71 = v126;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v70);

        v72 = 0;
        v10 = v134;
        v74 = (uint64_t)v127;
        v73 = (uint64_t)v128;
      }
      else
      {
        v72 = 1;
        v10 = v134;
        v74 = (uint64_t)v127;
        v73 = (uint64_t)v128;
        v71 = v126;
      }
      v60(v71, v72, 1, v15);
      v75 = (uint64_t)v71;
      v76 = v135;
      sub_1000A5CA8(v75, v135, (uint64_t *)&unk_1008380D0);
      sub_1000CDA2C((uint64_t)v141, v74);
      v77 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v136;
      if (v136((char *)v74, 1, v15) == 1)
      {
        sub_10000882C(v74, (uint64_t *)&unk_1008380D0);
        sub_1000CDA2C(v76, v73);
        v78 = v77;
        if (v77(v73, 1, v15) == 1)
        {
          sub_10000882C(v73, (uint64_t *)&unk_1008380D0);
          v79 = (uint64_t)v124;
          v60(v124, 1, 1, v15);
          v80 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60;
          v81 = v133;
LABEL_20:
          sub_10000882C(v76, (uint64_t *)&unk_1008380D0);
          sub_10000882C(v79, (uint64_t *)&unk_1008380D0);
          v86 = v125;
          v80(v125, 1, 1, v15);
          v9 = v122;
          v11 = v131;
          v87 = v129;
          v51 = v119;
          goto LABEL_28;
        }
        v123 = v69;
        v85 = v111;
        v81 = v133;
        v133((uint64_t)v111, (char *)v73, v15);
        v83 = v85;
        v84 = (uint64_t)v117;
        v79 = (uint64_t)v124;
      }
      else
      {
        v123 = v69;
        v82 = v114;
        v81 = v133;
        v133((uint64_t)v114, (char *)v74, v15);
        v83 = v82;
        v84 = (uint64_t)v117;
        v79 = (uint64_t)v124;
        v78 = v77;
      }
      v81(v79, v83, v15);
      v80 = v140;
      v140(v79, 0, 1, v15);
      if (v78(v79, 1, v15) == 1)
        goto LABEL_20;
      v88 = ((uint64_t (*)(char *, uint64_t, uint64_t))v81)(v132, v79, v15);
      DateComponents.timeZone.getter(v88);
      if (v65((char *)v84, 1, v10) == 1)
      {
        static TimeZone.current.getter();
        sub_10000882C(v84, &qword_1008401F8);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v131 + 32))(v116, v84, v10);
      }
      v89 = DateComponents._bridgeToObjectiveC()().super.isa;
      v90 = -[objc_class rem_isAllDayDateComponents](v89, "rem_isAllDayDateComponents");

      v91 = (void *)objc_opt_self(REMRecurrenceRule);
      v92 = Date._bridgeToObjectiveC()().super.isa;
      v93 = Date._bridgeToObjectiveC()().super.isa;
      v94 = TimeZone._bridgeToObjectiveC()().super.isa;
      sub_100456D88();
      v95 = Array._bridgeToObjectiveC()().super.isa;
      v96 = objc_msgSend(v91, "nextRecurrentDueDateAfter:dueDate:timeZone:allDay:recurrenceRules:", v92, v93, v94, v90, v95);

      if (v96)
      {
        v97 = (uint64_t)v112;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

        v98 = 0;
        v10 = v134;
        v11 = v131;
        v99 = v118;
        v100 = v116;
      }
      else
      {
        v98 = 1;
        v10 = v134;
        v11 = v131;
        v99 = v118;
        v100 = v116;
        v97 = (uint64_t)v112;
      }
      v101 = v135;
      v51 = v119;
      v81 = v133;
      v123(v100, v10);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v132, v15);
      sub_10000882C(v101, (uint64_t *)&unk_1008380D0);
      v140(v97, v98, 1, v15);
      v86 = v125;
      sub_1000A5CA8(v97, v125, (uint64_t *)&unk_1008380D0);
      v9 = v122;
      v87 = v129;
      v78 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v136;
LABEL_28:
      sub_10000882C((uint64_t)v141, (uint64_t *)&unk_1008380D0);
      if (v78(v86, 1, v15) == 1)
      {
        sub_10000882C((uint64_t)v51, (uint64_t *)&unk_1008380D0);
        v61 = v86;
      }
      else
      {
        v81((uint64_t)v87, (char *)v86, v15);
        v102 = sub_100238EA8();
        v103 = dispatch thunk of static Comparable.< infix(_:_:)(v115, v87, v15, v102);
        v104 = *(void (**)(char *, uint64_t))(v118 + 8);
        if ((v103 & 1) == 0)
        {
          v105 = v87;
          v106 = v137;
          v104(v137, v15);
          v81((uint64_t)v106, v105, v15);
          v28 = v120;
          v48 = v121;
          v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v140;
          goto LABEL_7;
        }
        v104(v87, v15);
        v61 = (uint64_t)v51;
      }
      v62 = v137;
      v28 = v120;
      v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v140;
      sub_10000882C(v61, (uint64_t *)&unk_1008380D0);
      v138(v51, v62, v15);
      v60(v51, 0, 1, v15);
      v48 = v121;
LABEL_7:
      sub_1000CDA2C((uint64_t)v51, (uint64_t)v48);
    }
    while (v78((uint64_t)v48, 1, v15) == 1);
  }
  sub_10000882C((uint64_t)v48, (uint64_t *)&unk_1008380D0);
  v107 = v28;
  v108 = *(void (**)(char *, uint64_t))(v118 + 8);
  v108(v137, v15);
  v108(v107, v15);
  sub_10000882C((uint64_t)v109, (uint64_t *)&unk_1008380D0);
  return sub_1000A5CA8((uint64_t)v51, v110, (uint64_t *)&unk_1008380D0);
}

uint64_t sub_100456590@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  unint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;

  v48 = a3;
  v49 = a2;
  v4 = type metadata accessor for Calendar(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v44 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v47 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v50 = (char *)&v43 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v43 - v12;
  v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v43 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v43 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v43 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v43 - v27;
  sub_100455538(a1, (uint64_t)v26);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v29(v26, 1, v6) == 1)
  {
    sub_10000882C((uint64_t)v26, (uint64_t *)&unk_1008380D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v28, 1, 1, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v26, v6);
    sub_10045698C((uint64_t)v13, (uint64_t)v28);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  v30 = v49;
  sub_100455300(a1, v49, (uint64_t)v28, (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_100455A70, (uint64_t)v23);
  sub_1004558A8((uint64_t)v23, (uint64_t)v28, v20);
  sub_1000CDA2C((uint64_t)v20, (uint64_t)v17);
  if (v29(v17, 1, v6) != 1)
  {
    v33 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v34 = v50;
    v33(v50, v17, v6);
    v35 = sub_100238EA8();
    v36 = dispatch thunk of static Comparable.< infix(_:_:)(v30, v34, v6, v35);
    v37 = v47;
    v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v47, v34, v6);
    if ((v36 & 1) != 0)
    {
      v39 = v44;
      static Calendar.current.getter(v38);
      v40 = Calendar.isDateInToday(_:)(v37);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v39, v46);
      v41 = *(void (**)(char *, uint64_t))(v7 + 8);
      v41(v37, v6);
      sub_10000882C((uint64_t)v20, (uint64_t *)&unk_1008380D0);
      sub_10000882C((uint64_t)v23, (uint64_t *)&unk_1008380D0);
      sub_10000882C((uint64_t)v28, (uint64_t *)&unk_1008380D0);
      v32 = v48;
      if ((v40 & 1) == 0)
      {
        v41(v50, v6);
        v31 = 1;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v32, v31, 1, v6);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
      sub_10000882C((uint64_t)v20, (uint64_t *)&unk_1008380D0);
      sub_10000882C((uint64_t)v23, (uint64_t *)&unk_1008380D0);
      sub_10000882C((uint64_t)v28, (uint64_t *)&unk_1008380D0);
      v32 = v48;
    }
    v33(v32, v50, v6);
    v31 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v32, v31, 1, v6);
  }
  sub_10000882C((uint64_t)v20, (uint64_t *)&unk_1008380D0);
  sub_10000882C((uint64_t)v23, (uint64_t *)&unk_1008380D0);
  sub_10000882C((uint64_t)v28, (uint64_t *)&unk_1008380D0);
  sub_10000882C((uint64_t)v17, (uint64_t *)&unk_1008380D0);
  v31 = 1;
  v32 = v48;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v32, v31, 1, v6);
}

uint64_t sub_10045698C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, _QWORD, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v44 = a1;
  v53 = a2;
  v2 = type metadata accessor for Calendar.SearchDirection(0);
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v2;
  __chkstk_darwin(v2);
  v47 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Calendar.MatchingPolicy(0);
  v50 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v41 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v51 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v40 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar(0);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_100841610);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v38 - v17;
  v19 = type metadata accessor for DateComponents(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend((id)objc_opt_self(REMUserDefaults), "daemonUserDefaults");
  v24 = objc_msgSend(v23, "todayNotificationFireTime");

  if (v24)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  v26 = v19;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v16, v25, 1, v19);
  sub_1000A5CA8((uint64_t)v16, (uint64_t)v18, (uint64_t *)&unk_100841610);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_10000882C((uint64_t)v18, (uint64_t *)&unk_100841610);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v53, 1, 1, v8);
  }
  else
  {
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v20 + 32);
    v39 = v22;
    v29 = v28(v22, v18, v19);
    static Calendar.current.getter(v29);
    v30 = v40;
    Calendar.startOfDay(for:)(v44);
    v31 = v41;
    (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v41, enum case for Calendar.MatchingPolicy.nextTime(_:), v52);
    v44 = v8;
    v33 = v45;
    v32 = v46;
    (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v6, enum case for Calendar.RepeatedTimePolicy.first(_:), v46);
    v35 = v47;
    v34 = v48;
    v36 = *(void (**)(char *, _QWORD, uint64_t))(v48 + 104);
    v38 = v26;
    v37 = v49;
    v36(v47, enum case for Calendar.SearchDirection.forward(_:), v49);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v30, v39, v31, v6, v35);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v37);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v32);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v52);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v44);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v39, v38);
  }
}

unint64_t sub_100456D88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100841640;
  if (!qword_100841640)
  {
    v1 = objc_opt_self(REMRecurrenceRule);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100841640);
  }
  return result;
}

uint64_t sub_100456DC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t), void (*a5)(void), void (*a6)(void))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  char isUniquelyReferenced_nonNull_native;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  id v51;
  uint64_t result;
  uint64_t v53;
  char *v57;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;

  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v8 = a2;
    else
      v8 = a2 & 0xFFFFFFFFFFFFFF8;
    v60 = 0;
    v9 = 0;
    v10 = 0;
    v11 = __CocoaDictionary.makeIterator()(v8) | 0x8000000000000000;
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a2 + 32);
    v9 = ~v12;
    v60 = a2 + 64;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a2 + 64);
    v11 = a2;
  }
  swift_bridgeObjectRetain(a2);
  v16 = 0;
  v59 = (unint64_t)(v9 + 64) >> 6;
  v57 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    v17 = v16;
    if ((v11 & 0x8000000000000000) != 0)
    {
      v20 = __CocoaDictionary.Iterator.next()(v15);
      if (!v20)
        goto LABEL_55;
      v22 = v20;
      v23 = v21;
      v61 = v20;
      v24 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_unknownObjectRetain(v22);
      swift_dynamicCast(&v62, &v61, v57, v24, 7);
      v25 = v62;
      swift_unknownObjectRelease(v22);
      v61 = v23;
      v26 = a3(0);
      swift_unknownObjectRetain(v23);
      swift_dynamicCast(&v62, &v61, v57, v26, 7);
      v27 = v62;
      swift_unknownObjectRelease(v23);
      if (!v25)
        goto LABEL_55;
      goto LABEL_34;
    }
    if (!v10)
      break;
    v18 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v19 = v18 | (v16 << 6);
LABEL_33:
    v31 = 8 * v19;
    v27 = *(_QWORD **)(*(_QWORD *)(v11 + 56) + v31);
    v25 = *(id *)(*(_QWORD *)(v11 + 48) + v31);
    swift_retain(v27);
    if (!v25)
      goto LABEL_55;
LABEL_34:
    if (v27[3])
    {
      v32 = a1;
      if ((a1 & 0xC000000000000001) != 0)
      {
        if (a1 < 0)
          v33 = a1;
        else
          v33 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_retain_n(v27, 2);
        v34 = v25;
        v35 = __CocoaDictionary.count.getter(v33);
        if (__OFADD__(v35, 1))
          goto LABEL_58;
        v32 = a4(v33, v35 + 1);
      }
      else
      {
        swift_retain_n(v27, 2);
        v36 = v25;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
      v62 = (void *)v32;
      v39 = sub_1002C66DC((uint64_t)v25);
      v40 = *(_QWORD *)(v32 + 16);
      v41 = (v38 & 1) == 0;
      if (__OFADD__(v40, v41))
        goto LABEL_57;
      v42 = v38;
      if (*(_QWORD *)(v32 + 24) >= v40 + v41)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v45 = v62;
          if ((v38 & 1) != 0)
            goto LABEL_50;
        }
        else
        {
          a6();
          v45 = v62;
          if ((v42 & 1) != 0)
            goto LABEL_50;
        }
      }
      else
      {
        a5();
        v43 = sub_1002C66DC((uint64_t)v25);
        if ((v42 & 1) != (v44 & 1))
          goto LABEL_60;
        v39 = v43;
        v45 = v62;
        if ((v42 & 1) != 0)
        {
LABEL_50:
          a1 = (uint64_t)v45;
          v46 = v45[7];
          swift_release(*(_QWORD *)(v46 + 8 * v39));
          *(_QWORD *)(v46 + 8 * v39) = v27;
          goto LABEL_54;
        }
      }
      v45[(v39 >> 6) + 8] |= 1 << v39;
      v47 = 8 * v39;
      *(_QWORD *)(v45[6] + v47) = v25;
      *(_QWORD *)(v45[7] + v47) = v27;
      v48 = v45[2];
      v49 = __OFADD__(v48, 1);
      v50 = v48 + 1;
      if (v49)
        goto LABEL_59;
      a1 = (uint64_t)v45;
      v45[2] = v50;
      v51 = v25;
LABEL_54:
      swift_release(v27);

      swift_bridgeObjectRelease(0x8000000000000000);
      v15 = swift_release(v27);
    }
    else
    {
      swift_release(v27);

    }
  }
  v28 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v28 >= v59)
      goto LABEL_55;
    v29 = *(_QWORD *)(v60 + 8 * v28);
    ++v16;
    if (!v29)
    {
      v16 = v17 + 2;
      if (v17 + 2 >= v59)
        goto LABEL_55;
      v29 = *(_QWORD *)(v60 + 8 * v16);
      if (!v29)
      {
        v16 = v17 + 3;
        if (v17 + 3 >= v59)
          goto LABEL_55;
        v29 = *(_QWORD *)(v60 + 8 * v16);
        if (!v29)
        {
          v16 = v17 + 4;
          if (v17 + 4 >= v59)
            goto LABEL_55;
          v29 = *(_QWORD *)(v60 + 8 * v16);
          if (!v29)
          {
            v16 = v17 + 5;
            if (v17 + 5 >= v59)
              goto LABEL_55;
            v29 = *(_QWORD *)(v60 + 8 * v16);
            if (!v29)
            {
              v30 = v17 + 6;
              while (v59 != v30)
              {
                v29 = *(_QWORD *)(v60 + 8 * v30++);
                if (v29)
                {
                  v16 = v30 - 1;
                  goto LABEL_32;
                }
              }
LABEL_55:
              sub_1000C6560(v11);
              return a1;
            }
          }
        }
      }
    }
LABEL_32:
    v10 = (v29 - 1) & v29;
    v19 = __clz(__rbit64(v29)) + (v16 << 6);
    goto LABEL_33;
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  v53 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v53);
  __break(1u);
  return result;
}

uint64_t sub_100457268(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  void *object;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  unint64_t v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t result;
  char *v66;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;

  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v5 = a2;
    else
      v5 = a2 & 0xFFFFFFFFFFFFFF8;
    v69 = 0;
    v6 = 0;
    v7 = 0;
    v8 = __CocoaDictionary.makeIterator()(v5) | 0x8000000000000000;
  }
  else
  {
    v9 = -1 << *(_BYTE *)(a2 + 32);
    v6 = ~v9;
    v69 = a2 + 64;
    v10 = -v9;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v7 = v11 & *(_QWORD *)(a2 + 64);
    v8 = a2;
  }
  swift_bridgeObjectRetain(a2);
  v13 = 0;
  v68 = (unint64_t)(v6 + 64) >> 6;
  v66 = (char *)&type metadata for Swift.AnyObject + 8;
  v70 = v8;
  v71 = v6;
  if ((v8 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_34:
  v24 = __CocoaDictionary.Iterator.next()(v12);
  if (!v24)
    goto LABEL_55;
  v26 = v24;
  v27 = v25;
  v77 = v24;
  v28 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  swift_unknownObjectRetain(v26);
  swift_dynamicCast(&v75, &v77, v66, v28, 7);
  v73 = a1;
  v29 = v7;
  v30 = v13;
  v31 = v8;
  v32 = v6;
  v33 = (void *)v75;
  swift_unknownObjectRelease(v26);
  v77 = v27;
  v34 = a3(0);
  swift_unknownObjectRetain(v27);
  swift_dynamicCast(&v75, &v77, v66, v34, 7);
  v22 = v75;
  swift_unknownObjectRelease(v27);
  v23 = v33;
  v6 = v32;
  v8 = v31;
  v35 = v30;
  v36 = v29;
  a1 = v73;
  v17 = v35;
  v15 = v36;
  if (!v23)
    goto LABEL_55;
  while (1)
  {
    v74 = v15;
    v37 = swift_retain(v22);
    v38._countAndFlagsBits = UUID.uuidString.getter(v37);
    object = v38._object;
    v75 = 0x7C6C61636F6CLL;
    v76 = 0xE600000000000000;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(object);
    v40 = v75;
    v41 = v76;
    v42 = *(_QWORD *)(v22 + 24);
    if (v42)
    {
      v72 = v17;
      v43 = *(_QWORD *)(v22 + 16);
      swift_bridgeObjectRetain(v42);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
      v75 = (uint64_t)a1;
      v46 = sub_10001A6DC(v40, v41);
      v47 = a1;
      v48 = a1[2];
      v49 = (v45 & 1) == 0;
      v50 = v48 + v49;
      if (__OFADD__(v48, v49))
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v51 = v45;
      if (v47[3] < v50)
      {
        sub_1002CCF14(v50, isUniquelyReferenced_nonNull_native);
        v52 = sub_10001A6DC(v40, v41);
        if ((v51 & 1) != (v53 & 1))
          goto LABEL_59;
        v46 = v52;
        v54 = (_QWORD *)v75;
        if ((v51 & 1) == 0)
          goto LABEL_48;
LABEL_12:
        v14 = (_QWORD *)(v54[7] + 16 * v46);
        swift_bridgeObjectRelease(v14[1]);
        *v14 = v43;
        v14[1] = v42;
        a1 = v54;
LABEL_13:

        swift_release_n(v22, 2);
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(0x8000000000000000);
        v13 = v72;
        v7 = v74;
        v8 = v70;
        v6 = v71;
        if ((v70 & 0x8000000000000000) != 0)
          goto LABEL_34;
        goto LABEL_14;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v54 = (_QWORD *)v75;
        if ((v45 & 1) != 0)
          goto LABEL_12;
      }
      else
      {
        sub_1002D6574();
        v54 = (_QWORD *)v75;
        if ((v51 & 1) != 0)
          goto LABEL_12;
      }
LABEL_48:
      v54[(v46 >> 6) + 8] |= 1 << v46;
      v60 = (uint64_t *)(v54[6] + 16 * v46);
      *v60 = v40;
      v60[1] = v41;
      v61 = (_QWORD *)(v54[7] + 16 * v46);
      *v61 = v43;
      v61[1] = v42;
      v62 = v54[2];
      v63 = __OFADD__(v62, 1);
      v64 = v62 + 1;
      if (v63)
        goto LABEL_57;
      a1 = v54;
      v54[2] = v64;
      swift_bridgeObjectRetain(v41);
      goto LABEL_13;
    }
    swift_bridgeObjectRetain(a1);
    v55 = sub_10001A6DC(v40, v41);
    v57 = v56;
    swift_bridgeObjectRelease(a1);
    if ((v57 & 1) != 0)
    {
      v58 = swift_isUniquelyReferenced_nonNull_native(a1);
      v75 = (uint64_t)a1;
      if ((v58 & 1) == 0)
      {
        sub_1002D6574();
        a1 = (_QWORD *)v75;
      }
      swift_bridgeObjectRelease(*(_QWORD *)(a1[6] + 16 * v55 + 8));
      v59 = *(_QWORD *)(a1[7] + 16 * v55 + 8);
      sub_100289B9C(v55, (uint64_t)a1);
      swift_release(v22);
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(0x8000000000000000);

    }
    else
    {

      swift_release(v22);
      swift_bridgeObjectRelease(v41);
    }
    v12 = swift_release(v22);
    v13 = v17;
    v7 = v74;
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_34;
LABEL_14:
    if (!v7)
      break;
    v15 = (v7 - 1) & v7;
    v16 = __clz(__rbit64(v7)) | (v13 << 6);
    v17 = v13;
LABEL_32:
    v21 = 8 * v16;
    v22 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21);
    v23 = *(id *)(*(_QWORD *)(v8 + 48) + v21);
    swift_retain(v22);
    if (!v23)
      goto LABEL_55;
  }
  v18 = v13 + 1;
  if (__OFADD__(v13, 1))
    goto LABEL_58;
  if (v18 >= v68)
    goto LABEL_55;
  v19 = *(_QWORD *)(v69 + 8 * v18);
  v17 = v13 + 1;
  if (v19)
    goto LABEL_31;
  v17 = v13 + 2;
  if (v13 + 2 >= v68)
    goto LABEL_55;
  v19 = *(_QWORD *)(v69 + 8 * v17);
  if (v19)
    goto LABEL_31;
  v17 = v13 + 3;
  if (v13 + 3 >= v68)
    goto LABEL_55;
  v19 = *(_QWORD *)(v69 + 8 * v17);
  if (v19)
    goto LABEL_31;
  v17 = v13 + 4;
  if (v13 + 4 >= v68)
    goto LABEL_55;
  v19 = *(_QWORD *)(v69 + 8 * v17);
  if (v19)
    goto LABEL_31;
  v17 = v13 + 5;
  if (v13 + 5 >= v68)
    goto LABEL_55;
  v19 = *(_QWORD *)(v69 + 8 * v17);
  if (v19)
  {
LABEL_31:
    v15 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v17 << 6);
    goto LABEL_32;
  }
  v20 = v13 + 6;
  while (v68 != v20)
  {
    v19 = *(_QWORD *)(v69 + 8 * v20++);
    if (v19)
    {
      v17 = v20 - 1;
      goto LABEL_31;
    }
  }
LABEL_55:
  sub_1000C6560(v8);
  return (uint64_t)a1;
}

void sub_100457808(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *ObjCClassFromMetadata;
  Class isa;
  id v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;

  v51 = a2;
  v52 = a3;
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v50 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = (unint64_t)_swiftEmptyArrayStorage;
  v10 = *(_QWORD *)(a1 + 56);
  v53 = a1 + 56;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v54 = (unint64_t)(v11 + 63) >> 6;
  v56 = a1;
  swift_bridgeObjectRetain(a1);
  v14 = 0;
  while (v13)
  {
    v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v16 = v15 | (v14 << 6);
LABEL_20:
    v20 = (uint64_t *)(*(_QWORD *)(v56 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    swift_bridgeObjectRetain(v21);
    v23 = String.count.getter(0x7C6C61636F6CLL, 0xE600000000000000);
    v24 = sub_1003D5CAC(v23, v22, v21);
    v26 = v25;
    v30 = static String._fromSubstring(_:)(v24, v27, v28, v25, v29);
    v32 = v31;
    swift_bridgeObjectRelease(v26);
    UUID.init(uuidString:)(v30, v32);
    v33 = swift_bridgeObjectRelease(v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v33) == 1)
    {
      sub_10000882C((uint64_t)v6, (uint64_t *)&unk_100839C80);
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      v34 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v55 = v14;
      v35 = v6;
      v36 = v7;
      v37 = v8;
      v38 = v50;
      v34(v50, v35, v36);
      v39 = sub_1000151B0(0, v51, v52);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v39);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v42 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

      v43 = *(void (**)(char *, uint64_t))(v37 + 8);
      v44 = v38;
      v8 = v37;
      v7 = v36;
      v6 = v35;
      v14 = v55;
      v43(v44, v7);
      swift_bridgeObjectRelease(v21);
      if (v42)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v45);
        v47 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v46 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v47 >= v46 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1);
        v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v42);
        specialized Array._endMutation()(v48);
      }
    }
  }
  if (__OFADD__(v14++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v14 >= v54)
    goto LABEL_29;
  v18 = *(_QWORD *)(v53 + 8 * v14);
  if (v18)
  {
LABEL_19:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_20;
  }
  v19 = v14 + 1;
  if (v14 + 1 >= v54)
    goto LABEL_29;
  v18 = *(_QWORD *)(v53 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v14 + 2;
  if (v14 + 2 >= v54)
    goto LABEL_29;
  v18 = *(_QWORD *)(v53 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v14 + 3;
  if (v14 + 3 >= v54)
    goto LABEL_29;
  v18 = *(_QWORD *)(v53 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v14 + 4;
  if (v14 + 4 >= v54)
  {
LABEL_29:
    swift_release(v56);
    return;
  }
  v18 = *(_QWORD *)(v53 + 8 * v19);
  if (v18)
  {
LABEL_18:
    v14 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v54)
      goto LABEL_29;
    v18 = *(_QWORD *)(v53 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_19;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_100457BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084B0A8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084B0A8);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_100457C34(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD aBlock[5];
  uint64_t v72;

  v6 = v5;
  v56 = a5;
  v69 = a4;
  v10 = *v5;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v11 - 8);
  v68 = v11;
  __chkstk_darwin(v11);
  v66 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v63 = *(_QWORD *)(v13 - 8);
  v64 = v13;
  __chkstk_darwin(v13);
  v62 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v15);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v57 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_10001A630((uint64_t *)&unk_10084A290);
  v58 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
  *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_manualSortHintChangesSubscription) = 0;
  v23 = (_QWORD *)((char *)v5 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity);
  aBlock[0] = v10;
  v24 = sub_10001A630(&qword_10084B1D0);
  *v23 = String.init<A>(reflecting:)(aBlock, v24);
  v23[1] = v25;
  v23[3] = 0;
  v23[4] = 0;
  *(_QWORD *)((char *)v23 + 38) = 0;
  v23[2] = 0;
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v26 = (char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_debounceInterval;
  v27 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v60 = *(_QWORD *)(v27 - 8);
  v61 = v27;
  (*(void (**)(char *, uint64_t))(v60 + 16))(v26, v69);
  v28 = v56;
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_notificationCenter) = v56;
  v29 = qword_100837478;
  v59 = a1;
  v65 = a2;
  swift_retain(a2);
  v30 = a3;
  v31 = v28;
  if (v29 != -1)
    swift_once(&qword_100837478, sub_10040DBBC);
  NSNotificationCenter.publisher(for:object:)(qword_100871ED0, 0);
  aBlock[0] = v30;
  v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v17, 1, 1, v32);
  v33 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v34 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v56 = v31;
  v35 = v34;
  v36 = sub_1000A5E70();
  Publisher.receive<A>(on:options:)(aBlock, v17, v18, v33, v35, v36);
  sub_10000882C((uint64_t)v17, &qword_10083A970);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v20, v18);
  v37 = swift_allocObject(&unk_1007F46E8, 24, 7);
  swift_weakInit(v37 + 16, v6);
  v38 = sub_1000A5F84((unint64_t *)&qword_10083AA10, (uint64_t *)&unk_10084A290, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v39 = v55;
  v40 = Publisher<>.sink(receiveValue:)(sub_10045A4AC, v37, v55, v38);
  swift_release(v37);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v22, v39);
  v41 = *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_manualSortHintChangesSubscription);
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_manualSortHintChangesSubscription) = v40;
  swift_release(v41);
  v42 = swift_allocObject(&unk_1007F46E8, 24, 7);
  swift_weakInit(v42 + 16, v6);
  aBlock[4] = sub_10045A4B4;
  v72 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F4700;
  v43 = _Block_copy(aBlock);
  v44 = swift_retain(v42);
  v45 = v62;
  static DispatchQoS.unspecified.getter(v44);
  v70 = _swiftEmptyArrayStorage;
  v46 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v47 = sub_10001A630((uint64_t *)&unk_100838000);
  v48 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
  v49 = v66;
  v50 = v47;
  v51 = v68;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v50, v48, v68, v46);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v49, v43);
  _Block_release(v43);

  swift_release(v65);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v69, v61);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v51);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v64);
  v52 = v72;
  swift_release(v42);
  swift_release(v52);
  return v6;
}

uint64_t sub_10045818C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1004581E0();
    return swift_release(v4);
  }
  return result;
}

void sub_1004581E0()
{
  void **v0;
  void **v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t inited;
  _QWORD *v22;
  uint64_t v23;
  void *ObjCClassFromMetadata;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  char *v55;
  char *v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  id v87;
  char v88[72];

  v1 = v0;
  v2 = *v0;
  v3 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v3);
  v5 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_10084D060);
  v84 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_10083DB50);
  v86 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v85 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_10084D070);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630(&qword_10084B1D8);
  v16 = __chkstk_darwin(v15);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void **)((char *)v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription))
  {
    v81 = v16;
    v82 = v17;
    v83 = OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription;
    v20 = sub_10001A630((uint64_t *)&unk_10083A340);
    inited = swift_initStackObject(v20, v88);
    v80 = v19;
    v22 = (_QWORD *)inited;
    *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
    v23 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v23);
    v77 = v9;
    v25 = objc_msgSend(ObjCClassFromMetadata, "cdEntityName");
    v78 = v11;
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v79 = v12;
    v28 = v27;
    v76 = v14;
    v30 = v29;

    v22[4] = v28;
    v22[5] = v30;
    v31 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v32 = objc_msgSend((id)swift_getObjCClassFromMetadata(v31), "cdEntityName");
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v22[6] = v33;
    v22[7] = v35;
    v36 = v1[2];
    v87 = v2;
    v37 = sub_10001A630(&qword_10084B1D0);
    v38 = String.init<A>(reflecting:)(&v87, v37);
    v40 = v39;
    v41 = (void *)sub_100399F04(v36, v38, v39, 0);
    swift_bridgeObjectRelease(v40);
    v42 = sub_10011EE40((uint64_t)v22);
    swift_bridgeObjectRelease(v22);
    v87 = v41;
    v43 = swift_allocObject(&unk_1007F4738, 24, 7);
    *(_QWORD *)(v43 + 16) = v42;
    swift_bridgeObjectRetain(v42);
    v44 = sub_10001A630((uint64_t *)&unk_10083EF50);
    v45 = sub_10001A630((uint64_t *)&unk_10083DB60);
    v46 = sub_1000A5F84((unint64_t *)&unk_10083EF60, (uint64_t *)&unk_10083EF50, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_100188E48, v43, v44, v45, v46);
    swift_release(v43);
    v47 = sub_1000A5F84((unint64_t *)&unk_10083DB70, (uint64_t *)&unk_10084D060, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v48 = v85;
    Publisher.filter(_:)(sub_1000F27FC, 0, v6, v47);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v8, v6);
    swift_release(v41);
    swift_bridgeObjectRelease(v42);
    v87 = v1[4];
    v49 = v87;
    v50 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v84 = *(_QWORD *)(*(_QWORD *)(v50 - 8) + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v84)(v5, 1, 1, v50);
    v51 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v75 = v51;
    v52 = sub_1000A5F84(&qword_10083EF70, (uint64_t *)&unk_10083DB50, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v53 = sub_1000A5E70();
    v54 = v49;
    v55 = v76;
    v56 = v5;
    v57 = v1;
    v58 = (uint64_t)v5;
    v59 = v77;
    Publisher.receive<A>(on:options:)(&v87, v56, v77, v51, v52, v53);
    sub_10000882C(v58, &qword_10083A970);

    (*(void (**)(char *, uint64_t))(v86 + 8))(v48, v59);
    v60 = (uint64_t)v57 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_debounceInterval;
    v87 = v54;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v84)(v58, 1, 1, v50);
    v61 = sub_1000A5F84(&qword_10084F6F0, (uint64_t *)&unk_10084D070, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v62 = v54;
    v63 = v80;
    v64 = v78;
    Publisher.debounce<A>(for:scheduler:options:)(v60, &v87, v58, v78, v75, v61, v53);
    sub_10000882C(v58, &qword_10083A970);

    (*(void (**)(char *, uint64_t))(v79 + 8))(v55, v64);
    v65 = swift_allocObject(&unk_1007F46E8, 24, 7);
    swift_weakInit(v65 + 16, v57);
    v66 = sub_1000A5F84(&qword_10084B1E0, &qword_10084B1D8, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
    v67 = v81;
    v68 = Publisher<>.sink(receiveValue:)(sub_10045AD50, v65, v81, v66);
    swift_release(v65);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v63, v67);
    v69 = *(uint64_t *)((char *)v57 + v83);
    *(void **)((char *)v57 + v83) = (void *)v68;
    swift_release(v69);
    if (qword_100837508 != -1)
      swift_once(&qword_100837508, sub_100457BA4);
    v70 = type metadata accessor for Logger(0);
    v71 = sub_10001AAA8(v70, (uint64_t)qword_10084B0A8);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.default.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "RDManualSortHintUpdater starts.", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

  }
}

uint64_t sub_10045884C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_1004581E0();
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_1004588A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_manualSortHintChangesSubscription;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_manualSortHintChangesSubscription);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_manualSortHintChangesSubscription) = 0;
  swift_release(v3);
  v4 = OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription;
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription);
  if (v5)
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
    swift_release(v5);
    if (qword_100837508 != -1)
      swift_once(&qword_100837508, sub_100457BA4);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001AAA8(v6, (uint64_t)qword_10084B0A8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDManualSortHintUpdater stops.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  swift_release(*(_QWORD *)(v1 + 24));

  v11 = v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_debounceInterval;
  v12 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);

  swift_release(*(_QWORD *)(v1 + v4));
  swift_release(*(_QWORD *)(v1 + v2));
  sub_1000178E8(*(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity), *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 8), *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 16), *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 24), *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 32), *(unsigned int *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 40) | ((unint64_t)*(unsigned __int16 *)(v1 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity + 44) << 32));
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_100458A3C()
{
  return type metadata accessor for RDManualSortHintUpdater(0);
}

uint64_t type metadata accessor for RDManualSortHintUpdater(uint64_t a1)
{
  uint64_t result;

  result = qword_10084B110;
  if (!qword_10084B110)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDManualSortHintUpdater);
  return result;
}

uint64_t sub_100458A80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = "\b";
    v4[6] = "\b";
    v4[7] = &unk_1006BC900;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100458B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_100458B78();
    return swift_release(v4);
  }
  return result;
}

void sub_100458B78()
{
  uint64_t v0;
  _BYTE v1[48];

  sub_1000184A8(v0 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_clientIdentity, (uint64_t)v1);
  sub_10035288C((uint64_t)v1, (uint64_t)sub_10045AD58, v0);
}

void sub_100458E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  char *v57;
  unint64_t v58;
  char v59;
  void *v60;
  uint64_t v61;
  double v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  unsigned int v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  NSObject *v104;
  NSObject *v105;
  id v106;
  uint64_t v107;
  char v108;
  char v109;
  id v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[3];
  char v116[8];
  uint64_t v117;
  _QWORD v118[3];
  char v119[8];
  id v120[3];
  uint64_t v121;
  _BYTE v122[48];

  v3 = v2;
  v5 = sub_10001A630(&qword_100839C30);
  inited = swift_initStackObject(v5, v122);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  KeyPath = swift_getKeyPath(&unk_1006BC958);
  v8 = sub_100341778(KeyPath);
  swift_release(KeyPath);
  *(_QWORD *)(inited + 32) = v8;
  v9 = swift_getKeyPath(&unk_1006BC9B0);
  v10 = sub_100341778(v9);
  v11 = swift_release(v9);
  *(_QWORD *)(inited + 40) = v10;
  specialized Array._endMutation()(v11);
  v12 = (void *)sub_10001CC54(inited);
  v13 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1006A3C00;
  v14 = sub_1000153F4(0);
  *(_QWORD *)(v13 + 32) = v14;
  v120[0] = (id)v13;
  specialized Array._endMutation()(v14);
  v15 = v12;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
  v17 = *((_QWORD *)v120[0] + 2);
  v16 = *((_QWORD *)v120[0] + 3);
  if (v17 >= v16 >> 1)
LABEL_71:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
  v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
  specialized Array._endMutation()(v18);

  v19 = (void *)sub_10000D2BC(v120[0]);
  v20 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v21 = type metadata accessor for REMCDManualSortHint();
  v22 = objc_msgSend((id)swift_getObjCClassFromMetadata(v21), "entity");
  -[NSObject setEntity:](v20, "setEntity:", v22);

  -[NSObject setPredicate:](v20, "setPredicate:", v19);
  -[NSObject setResultType:](v20, "setResultType:", 1);

  v23 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  v24 = NSManagedObjectContext.fetch<A>(_:)(v20, v23);
  if (v3)
  {
    if (qword_100837508 != -1)
      swift_once(&qword_100837508, sub_100457BA4);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_10084B0A8);
    swift_errorRetain(v3);
    v26 = swift_errorRetain(v3);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (void *)swift_slowAlloc(32, -1);
      v120[0] = v30;
      *(_DWORD *)v29 = 136315138;
      swift_getErrorValue(v3, v119, v118);
      v31 = Error.rem_errorDescription.getter(v118[1], v118[2]);
      v33 = v32;
      v117 = sub_10001A820(v31, v32, (uint64_t *)v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118);
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDManualSortHintUpdater failed to fetch REMCDManualSortHint with local IDs {error: %s}", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);
    }

    v42 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription);
    if (v42)
    {
      *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
      v43 = swift_release(v42);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "RDManualSortHintUpdater stops.", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

    }
    swift_errorRelease(v3);

    return;
  }
  v34 = v24;
  v35 = (unint64_t)v24 >> 62;
  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v95 = v24;
    else
      v95 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v36 = _CocoaArrayWrapper.endIndex.getter(v95);
    swift_bridgeObjectRelease(v34);
    if (v36)
      goto LABEL_9;
LABEL_76:
    swift_bridgeObjectRelease(v34);
    if (qword_100837508 != -1)
      swift_once(&qword_100837508, sub_100457BA4);
    v96 = type metadata accessor for Logger(0);
    v97 = sub_10001AAA8(v96, (uint64_t)qword_10084B0A8);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.default.getter(v98);
    if (os_log_type_enabled(v98, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "RDManualSortHintUpdater did not fetch any REMCDManualSortHint with local IDs.", v100, 2u);
      swift_slowDealloc(v100, -1, -1);
    }

    v101 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription);
    if (!v101)
    {

      return;
    }
    *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
    v102 = swift_release(v101);
    v93 = Logger.logObject.getter(v102);
    v94 = static os_log_type_t.default.getter(v93);
    if (os_log_type_enabled(v93, v94))
    {
LABEL_82:
      v103 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "RDManualSortHintUpdater stops.", v103, 2u);
      swift_slowDealloc(v103, -1, -1);
    }
    goto LABEL_83;
  }
  v36 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v36)
    goto LABEL_76;
LABEL_9:
  v104 = v20;
  if (qword_100837508 != -1)
    swift_once(&qword_100837508, sub_100457BA4);
  v37 = type metadata accessor for Logger(0);
  sub_10001AAA8(v37, (uint64_t)qword_10084B0A8);
  v38 = swift_bridgeObjectRetain_n(v34, 2);
  v39 = Logger.logObject.getter(v38);
  v17 = static os_log_type_t.default.getter(v39);
  v111 = (id)a1;
  if (os_log_type_enabled(v39, (os_log_type_t)v17))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v112 = (void *)swift_slowAlloc(32, -1);
    v120[0] = v112;
    *(_DWORD *)v40 = 136315138;
    if (v35)
    {
      if (v34 < 0)
        v47 = v34;
      else
        v47 = v34 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v34);
      v41 = _CocoaArrayWrapper.endIndex.getter(v47);
      swift_bridgeObjectRelease(v34);
    }
    else
    {
      v41 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v117 = v41;
    v48 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v50 = v49;
    v117 = sub_10001A820(v48, v49, (uint64_t *)v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118);
    swift_bridgeObjectRelease_n(v34, 2);
    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v17, "RDManualSortHintUpdater fetched %s REMCDManualSortHint with local IDs.", v40, 0xCu);
    swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v34, 2);
  }
  v51 = v34 & 0xC000000000000001;
  v113 = v34;
  swift_bridgeObjectRetain(v34);
  v15 = 0;
  v52 = 0;
  v53 = 0;
  v108 = 1;
  v54 = v36;
  while (2)
  {
    while (2)
    {
      v106 = v15;
      v107 = v52;
      a1 = v52;
      while (1)
      {
        if (v51)
          v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v113);
        else
          v55 = *(id *)(v113 + 8 * (_QWORD)v15 + 32);
        v56 = v55;
        v57 = (char *)v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
        sub_10045AFDC((uint64_t)v55, v111);
        v17 = v58;

        v16 = v17;
        if (v17 != 2)
          break;
        v53 = a1 + 1;
        if (__OFADD__(a1, 1))
          goto LABEL_70;
        v15 = (char *)v15 + 1;
        ++a1;
        if (v57 == (char *)v54)
        {
          swift_bridgeObjectRelease(v113);
          v61 = v54 + v107 - (_QWORD)v106;
          v117 = v61;
          *(_QWORD *)&v62 = swift_bridgeObjectRelease(v113).n128_u64[0];
          v20 = v104;
          v60 = v111;
          v59 = v108;
          if (v61 <= 0)
            goto LABEL_44;
LABEL_47:
          v120[0] = 0;
          v66 = objc_msgSend(v60, "save:", v120, v62, v104);
          v67 = v120[0];
          if (v66)
          {
            v68 = Logger.logObject.getter(v120[0]);
            v69 = static os_log_type_t.default.getter(v68);
            if (os_log_type_enabled(v68, v69))
            {
              v70 = (uint8_t *)swift_slowAlloc(12, -1);
              v71 = swift_slowAlloc(32, -1);
              v121 = v71;
              *(_DWORD *)v70 = 136315138;
              swift_beginAccess(&v117, v120, 0, 0);
              v114 = v117;
              v72 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
              v74 = v73;
              v114 = sub_10001A820(v72, v73, &v121);
              v20 = v105;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
              swift_bridgeObjectRelease(v74);
              _os_log_impl((void *)&_mh_execute_header, v68, v69, "RDManualSortHintUpdater replaced local IDs in %s REMCDManualSortHint.", v70, 0xCu);
              swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v71, -1, -1);
              swift_slowDealloc(v70, -1, -1);

              if ((v59 & 1) != 0)
                goto LABEL_63;
LABEL_66:
              v93 = v20;
              goto LABEL_84;
            }

            if ((v59 & 1) == 0)
              goto LABEL_66;
          }
          else
          {
            v109 = v59;
            v75 = v120[0];
            v76 = _convertNSErrorToError(_:)(v67);

            swift_willThrow(v77);
            swift_errorRetain(v76);
            v78 = swift_errorRetain(v76);
            v79 = Logger.logObject.getter(v78);
            v80 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v79, v80))
            {
              v81 = (uint8_t *)swift_slowAlloc(12, -1);
              v82 = (void *)swift_slowAlloc(32, -1);
              v120[0] = v82;
              *(_DWORD *)v81 = 136315138;
              swift_getErrorValue(v76, v116, v115);
              v83 = Error.rem_errorDescription.getter(v115[1], v115[2]);
              v85 = v84;
              v121 = sub_10001A820(v83, v84, (uint64_t *)v120);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
              swift_bridgeObjectRelease(v85);
              swift_errorRelease(v76);
              swift_errorRelease(v76);
              _os_log_impl((void *)&_mh_execute_header, v79, v80, "RDManualSortHintUpdater failed to save changes {error: %s}", v81, 0xCu);
              swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v82, -1, -1);
              swift_slowDealloc(v81, -1, -1);
            }
            else
            {
              swift_errorRelease(v76);
              swift_errorRelease(v76);
            }

            v86 = *(_QWORD *)(a2
                            + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription);
            if (v86)
            {
              *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
              v87 = swift_release(v86);
              v88 = Logger.logObject.getter(v87);
              v89 = static os_log_type_t.default.getter(v88);
              if (os_log_type_enabled(v88, v89))
              {
                v90 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v90 = 0;
                _os_log_impl((void *)&_mh_execute_header, v88, v89, "RDManualSortHintUpdater stops.", v90, 2u);
                swift_slowDealloc(v90, -1, -1);
              }

            }
            swift_errorRelease(v76);
            if ((v109 & 1) == 0)
              goto LABEL_66;
          }
          goto LABEL_63;
        }
      }
      if ((_BYTE)v17)
      {
        v52 = a1 + 1;
        if (__OFADD__(a1, 1))
          __break(1u);
        v108 = 0;
        v15 = (char *)v15 + 1;
        v53 = a1 + 1;
        if (v57 == (char *)v54)
        {
          swift_bridgeObjectRelease(v113);
          v117 = a1 + 1;
          *(_QWORD *)&v62 = swift_bridgeObjectRelease(v113).n128_u64[0];
          v59 = 0;
          v20 = v104;
          v60 = v111;
          if (v52 <= 0)
            goto LABEL_44;
          goto LABEL_47;
        }
        continue;
      }
      break;
    }
    v108 = 0;
    v15 = (char *)v15 + 1;
    v52 = a1;
    if (v57 != (char *)v54)
      continue;
    break;
  }
  swift_bridgeObjectRelease(v113);
  v117 = v53;
  *(_QWORD *)&v62 = swift_bridgeObjectRelease(v113).n128_u64[0];
  v59 = 0;
  v20 = v104;
  v60 = v111;
  if (a1 >= 1)
    goto LABEL_47;
LABEL_44:
  v63 = Logger.logObject.getter(v60);
  v64 = static os_log_type_t.default.getter(v63);
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "RDManualSortHintUpdater did not replace local IDs in any REMCDManualSortHint.", v65, 2u);
    swift_slowDealloc(v65, -1, -1);

    if ((v59 & 1) != 0)
      goto LABEL_63;
    goto LABEL_66;
  }

  if ((v59 & 1) == 0)
    goto LABEL_66;
LABEL_63:
  v91 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription);
  if (!v91)
    goto LABEL_66;
  *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd23RDManualSortHintUpdater_accountsAndRemindersChangesSubscription) = 0;
  v92 = swift_release(v91);
  v93 = Logger.logObject.getter(v92);
  v94 = static os_log_type_t.default.getter(v93);
  if (os_log_type_enabled(v93, v94))
    goto LABEL_82;
LABEL_83:

LABEL_84:
}

void sub_100459D10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];
  uint64_t v46;

  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v9);
  v43 = v8;
  if (v12)
  {
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    v13 = sub_10001A6DC(v8, v9);
    if ((v14 & 1) != 0)
    {
      v15 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v13);
      v16 = v15[1];
      v44 = *v15;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v9);
      if (!*(_QWORD *)(a3 + 16))
        goto LABEL_12;
      goto LABEL_8;
    }
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    swift_bridgeObjectRetain(v11);
  }
  swift_bridgeObjectRetain(v9);
  v44 = v8;
  v16 = v9;
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_12;
LABEL_8:
  swift_bridgeObjectRetain(v11);
  v17 = sub_10001A6DC(v10, v11);
  if ((v18 & 1) != 0)
  {
    v19 = a5;
    v20 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v17);
    v21 = *v20;
    v46 = v20[1];
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRelease(v11);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_20;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease(v11);
LABEL_12:
  v19 = a5;
  swift_bridgeObjectRetain(v11);
  v21 = v10;
  v46 = v11;
  if (!*(_QWORD *)(a3 + 16))
  {
LABEL_20:
    swift_bridgeObjectRelease(v11);
    v30 = v44;
    v27 = v21;
    v31 = v19;
    v32 = v16;
    goto LABEL_21;
  }
LABEL_13:
  v22 = sub_10001A6DC(v10, v11);
  if ((v23 & 1) == 0)
    goto LABEL_20;
  v24 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v22);
  v26 = *v24;
  v25 = v24[1];
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v11);
  v27 = v21;
  if (v26 == v21 && v25 == v46)
  {
    swift_bridgeObjectRelease(v9);
    v9 = v46;
    v30 = v44;
    v31 = v19;
    v32 = v16;
    v33 = v46;
    goto LABEL_31;
  }
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v21, v46, 0);
  swift_bridgeObjectRelease(v25);
  v30 = v44;
  v31 = v19;
  v32 = v16;
  if ((v29 & 1) != 0)
  {
    v33 = v46;
    goto LABEL_31;
  }
LABEL_21:
  if (*(_QWORD *)(a2 + 16))
  {
    v34 = sub_10001A6DC(v43, v9);
    if ((v35 & 1) != 0)
    {
      v36 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v34);
      v38 = *v36;
      v37 = v36[1];
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRelease(v9);
      v39 = v38 == v30 && v37 == v32;
      v9 = v32;
      v33 = v46;
      if (!v39)
      {
        v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v37, v30, v32, 0);
        swift_bridgeObjectRelease(v37);
        if ((v40 & 1) == 0)
          goto LABEL_33;
        goto LABEL_32;
      }
LABEL_31:
      swift_bridgeObjectRelease(v9);
LABEL_32:
      swift_bridgeObjectRetain(v33);
      sub_1002DB0E4(v45, v27, v33);
      swift_bridgeObjectRelease(v45[1]);
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease(v9);
  v33 = v46;
LABEL_33:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
  v45[0] = *v31;
  *v31 = 0x8000000000000000;
  sub_10028B8BC(v27, v33, v30, v32, isUniquelyReferenced_nonNull_native);
  v42 = *v31;
  *v31 = v45[0];
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v42);
}

double sub_10045A02C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t *v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  double result;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36[2];

  v8 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v10 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v7);
  if (v10)
  {
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v11 = sub_10001A6DC(v8, v7);
    if ((v12 & 1) != 0)
    {
      v13 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v11);
      v15 = *v13;
      v14 = v13[1];
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v7);
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_15;
      goto LABEL_8;
    }
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    swift_bridgeObjectRetain(v9);
  }
  swift_bridgeObjectRetain(v7);
  v15 = v8;
  v14 = v7;
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_15:
    swift_bridgeObjectRelease(v7);
    v23 = a3;
    goto LABEL_16;
  }
LABEL_8:
  v16 = sub_10001A6DC(v8, v7);
  if ((v17 & 1) == 0)
    goto LABEL_15;
  v18 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v16);
  v20 = *v18;
  v19 = v18[1];
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v7);
  if (v20 == v15 && v19 == v14)
  {
    swift_bridgeObjectRelease(v14);
    v23 = a3;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v19, v15, v14, 0);
    swift_bridgeObjectRelease(v19);
    v23 = a3;
    if ((v22 & 1) == 0)
      goto LABEL_16;
  }
  v28 = *v23;
  if (*(_QWORD *)(*v23 + 16))
  {
    swift_bridgeObjectRetain(v14);
    v29 = sub_10001A6DC(v15, v14);
    if ((v30 & 1) != 0)
    {
      v31 = (uint64_t *)(*(_QWORD *)(v28 + 56) + 16 * v29);
      v32 = *v31;
      v33 = v31[1];
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRelease(v14);
      sub_1002DB0E4(v36, v32, v33);
      v34 = v36[1];
    }
    else
    {
      v34 = v14;
    }
    swift_bridgeObjectRelease(v34);
  }
LABEL_16:
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(a2);
  v24 = sub_10045A6DC(v9, a2, v23, v15, v14);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v14);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a5);
  v36[0] = *a5;
  *a5 = 0x8000000000000000;
  sub_10028C2A4((uint64_t)v24, v15, v14, isUniquelyReferenced_nonNull_native);
  v26 = *a5;
  *a5 = v36[0];
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v26).n128_u64[0];
  return result;
}

void sub_10045A2A0(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28[2];

  v8 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(double *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v7);
  if (v10)
  {
    swift_bridgeObjectRetain(v7);
    v11 = sub_10001A6DC(v8, v7);
    if ((v12 & 1) != 0)
    {
      v13 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v11);
      v15 = *v13;
      v14 = v13[1];
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v7);
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_14;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease(v7);
  }
  swift_bridgeObjectRetain(v7);
  v15 = v8;
  v14 = v7;
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_14:
    v23 = v7;
LABEL_17:
    swift_bridgeObjectRelease(v23);
    goto LABEL_18;
  }
LABEL_7:
  v16 = sub_10001A6DC(v8, v7);
  if ((v17 & 1) == 0)
    goto LABEL_14;
  v18 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v16);
  v20 = *v18;
  v19 = v18[1];
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v7);
  if (v20 == v15 && v19 == v14)
  {
    swift_bridgeObjectRelease(v14);
    goto LABEL_16;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v19, v15, v14, 0);
  swift_bridgeObjectRelease(v19);
  if ((v22 & 1) != 0)
  {
LABEL_16:
    swift_bridgeObjectRetain(v14);
    sub_1002DB0E4(v28, v15, v14);
    v23 = v28[1];
    goto LABEL_17;
  }
LABEL_18:
  v24 = *a3;
  swift_bridgeObjectRetain(*a3);
  v25 = sub_1001B2278(v15, v14, v24);
  swift_bridgeObjectRelease(v24);
  if ((v25 & 1) != 0)
    v9 = v9 + 1.0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  v28[0] = *a4;
  *a4 = 0x8000000000000000;
  sub_10028B71C(v15, v14, isUniquelyReferenced_nonNull_native, v9);
  v27 = *a4;
  *a4 = v28[0];
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v27);
}

uint64_t sub_10045A488()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10045A4AC(uint64_t a1)
{
  uint64_t v1;

  return sub_10045818C(a1, v1);
}

uint64_t sub_10045A4B4()
{
  uint64_t v0;

  return sub_10045884C(v0);
}

void sub_10045A4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29[4];
  _QWORD *v30;

  v30 = a5;
  v27 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = 16 * i;
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v19);
    v21 = *v20;
    v22 = v20[1];
    v23 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v19);
    v24 = *v23;
    v25 = v23[1];
    v29[0] = v21;
    v29[1] = v22;
    v29[2] = v24;
    v29[3] = v25;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v25);
    sub_100459D10(v29, a2, a3, a4, v30);
    if (v5)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v22);
      return;
    }
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v22);
    if (v12)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v28)
      goto LABEL_26;
    v17 = *(_QWORD *)(v27 + 8 * v13);
    if (!v17)
    {
      v18 = v13 + 1;
      if (v13 + 1 >= v28)
        goto LABEL_26;
      v17 = *(_QWORD *)(v27 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 2;
      if (v13 + 2 >= v28)
        goto LABEL_26;
      v17 = *(_QWORD *)(v27 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 3;
      if (v13 + 3 >= v28)
        goto LABEL_26;
      v17 = *(_QWORD *)(v27 + 8 * v18);
      if (v17)
      {
LABEL_14:
        v13 = v18;
        goto LABEL_15;
      }
      v26 = v13 + 4;
      if (v13 + 4 >= v28)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v17 = *(_QWORD *)(v27 + 8 * v26);
      v13 += 4;
      if (!v17)
        break;
    }
LABEL_15:
    v12 = (v17 - 1) & v17;
  }
  while (1)
  {
    v13 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v17 = *(_QWORD *)(v27 + 8 * v13);
    ++v26;
    if (v17)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

_QWORD *sub_10045A6DC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  _QWORD *v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v40[2];
  _QWORD *v41;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v41 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v9 = (uint64_t *)(a1 + 40);
    do
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      v12 = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain(*v9);
      if (v12)
      {
        swift_bridgeObjectRetain(v11);
        v13 = sub_10001A6DC(v10, v11);
        if ((v14 & 1) != 0)
        {
          v15 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v13);
          v17 = *v15;
          v16 = v15[1];
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRelease(v11);
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_22;
          goto LABEL_9;
        }
        swift_bridgeObjectRelease(v11);
      }
      swift_bridgeObjectRetain(v11);
      v17 = v10;
      v16 = v11;
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_22;
LABEL_9:
      swift_bridgeObjectRetain(v11);
      v18 = sub_10001A6DC(v10, v11);
      if ((v19 & 1) != 0)
      {
        v20 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v18);
        v22 = *v20;
        v21 = v20[1];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRelease(v11);
        if (v22 == v17 && v21 == v16)
        {
          swift_bridgeObjectRelease(v16);
        }
        else
        {
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, v17, v16, 0);
          swift_bridgeObjectRelease(v21);
          if ((v24 & 1) == 0)
          {
LABEL_22:
            v31 = v11;
            goto LABEL_23;
          }
        }
        v25 = *a3;
        if (!*(_QWORD *)(*a3 + 16))
          goto LABEL_22;
        v26 = a5;
        swift_bridgeObjectRetain(a5);
        v27 = sub_10001A6DC(a4, a5);
        if ((v28 & 1) != 0)
        {
          v29 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 16 * v27);
          v30 = v29[1];
          v36 = *v29;
          swift_bridgeObjectRetain(v30);
          swift_bridgeObjectRelease(a5);
          sub_1002DB0E4(v40, v36, v30);
          v26 = v40[1];
        }
        swift_bridgeObjectRelease(v11);
        v31 = v26;
LABEL_23:
        swift_bridgeObjectRelease(v31);
        goto LABEL_24;
      }
      swift_bridgeObjectRelease_n(v11, 2);
LABEL_24:
      v41 = v6;
      v33 = v6[2];
      v32 = v6[3];
      if (v33 >= v32 >> 1)
      {
        sub_1001C1B0C(v32 > 1, v33 + 1, 1);
        v6 = v41;
      }
      v9 += 2;
      v6[2] = v33 + 1;
      v34 = &v6[2 * v33];
      v34[4] = v17;
      v34[5] = v16;
      --v5;
    }
    while (v5);
  }
  return v6;
}

void sub_10045A934(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25[3];
  _QWORD *v26;

  v26 = a5;
  v23 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a1 + 64);
  v24 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v20 = v19[1];
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v25[0] = *v19;
    v25[1] = v20;
    v25[2] = v21;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    sub_10045A02C(v25, a2, a3, a4, v26);
    if (v5)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v20);
      return;
    }
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v20);
    if (v12)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v24)
      goto LABEL_26;
    v17 = *(_QWORD *)(v23 + 8 * v13);
    if (!v17)
    {
      v18 = v13 + 1;
      if (v13 + 1 >= v24)
        goto LABEL_26;
      v17 = *(_QWORD *)(v23 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 2;
      if (v13 + 2 >= v24)
        goto LABEL_26;
      v17 = *(_QWORD *)(v23 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 3;
      if (v13 + 3 >= v24)
        goto LABEL_26;
      v17 = *(_QWORD *)(v23 + 8 * v18);
      if (v17)
      {
LABEL_14:
        v13 = v18;
        goto LABEL_15;
      }
      v22 = v13 + 4;
      if (v13 + 4 >= v24)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v17 = *(_QWORD *)(v23 + 8 * v22);
      v13 += 4;
      if (!v17)
        break;
    }
LABEL_15:
    v12 = (v17 - 1) & v17;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v24)
      goto LABEL_26;
    v17 = *(_QWORD *)(v23 + 8 * v13);
    ++v22;
    if (v17)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

void sub_10045AB4C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  _QWORD v23[3];
  int64_t v24;

  v9 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a1 + 64);
  v24 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v20 = v19[1];
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v23[0] = *v19;
    v23[1] = v20;
    v23[2] = v21;
    swift_bridgeObjectRetain(v20);
    sub_10045A2A0((uint64_t)v23, a2, a3, a4);
    if (v4)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v20);
      return;
    }
    swift_bridgeObjectRelease(v20);
    if (v12)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v24)
      goto LABEL_26;
    v17 = *(_QWORD *)(v9 + 8 * v13);
    if (!v17)
    {
      v18 = v13 + 1;
      if (v13 + 1 >= v24)
        goto LABEL_26;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 2;
      if (v13 + 2 >= v24)
        goto LABEL_26;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 3;
      if (v13 + 3 >= v24)
        goto LABEL_26;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (v17)
      {
LABEL_14:
        v13 = v18;
        goto LABEL_15;
      }
      v22 = v13 + 4;
      if (v13 + 4 >= v24)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v17 = *(_QWORD *)(v9 + 8 * v22);
      v13 += 4;
      if (!v17)
        break;
    }
LABEL_15:
    v12 = (v17 - 1) & v17;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v24)
      goto LABEL_26;
    v17 = *(_QWORD *)(v9 + 8 * v13);
    ++v22;
    if (v17)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10045AD2C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10045AD50(uint64_t a1)
{
  uint64_t v1;

  return sub_100458B24(a1, v1);
}

void sub_10045AD58(uint64_t a1)
{
  uint64_t v1;

  sub_100458E00(a1, v1);
}

_QWORD *sub_10045AD78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int64_t v3;
  _QWORD *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v36[2];
  _QWORD *v37;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v37 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v3, 0);
    v4 = _swiftEmptyArrayStorage;
    v7 = (uint64_t *)(a1 + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      v10 = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain(*v7);
      if (v10)
      {
        swift_bridgeObjectRetain(v9);
        v11 = sub_10001A6DC(v8, v9);
        if ((v12 & 1) != 0)
        {
          v13 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v11);
          v15 = *v13;
          v14 = v13[1];
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRelease(v9);
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_21;
          goto LABEL_9;
        }
        swift_bridgeObjectRelease(v9);
      }
      swift_bridgeObjectRetain(v9);
      v15 = v8;
      v14 = v9;
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_21;
LABEL_9:
      swift_bridgeObjectRetain(v9);
      v16 = sub_10001A6DC(v8, v9);
      if ((v17 & 1) != 0)
      {
        v18 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v16);
        v20 = *v18;
        v19 = v18[1];
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRelease(v9);
        if (v20 == v15 && v19 == v14)
        {
          swift_bridgeObjectRelease(v14);
        }
        else
        {
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v19, v15, v14, 0);
          swift_bridgeObjectRelease(v19);
          if ((v22 & 1) == 0)
          {
LABEL_21:
            v30 = v9;
            goto LABEL_22;
          }
        }
        v23 = *a3;
        if (!*(_QWORD *)(*a3 + 16))
          goto LABEL_21;
        swift_bridgeObjectRetain(v14);
        v24 = sub_10001A6DC(v15, v14);
        if ((v25 & 1) != 0)
        {
          v26 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v24);
          v27 = *v26;
          v28 = v26[1];
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRelease(v14);
          sub_1002DB0E4(v36, v27, v28);
          v29 = v36[1];
          swift_bridgeObjectRelease(v9);
          v30 = v29;
        }
        else
        {
          swift_bridgeObjectRelease(v9);
          v30 = v14;
        }
LABEL_22:
        swift_bridgeObjectRelease(v30);
        goto LABEL_23;
      }
      swift_bridgeObjectRelease_n(v9, 2);
LABEL_23:
      v37 = v4;
      v32 = v4[2];
      v31 = v4[3];
      if (v32 >= v31 >> 1)
      {
        sub_1001C1B0C(v31 > 1, v32 + 1, 1);
        v4 = v37;
      }
      v7 += 2;
      v4[2] = v32 + 1;
      v33 = &v4[2 * v32];
      v33[4] = v15;
      v33[5] = v14;
      --v3;
    }
    while (v3);
  }
  return v4;
}

void sub_10045AFDC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  char v107;
  char v108;
  uint64_t v109;
  char v110;
  char *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  Class isa;
  id v120;
  char *v121;
  Class v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  id v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  char *v161;
  char *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  void *v166;
  void *v167;
  _QWORD v168[6];
  id v169;
  uint64_t v170;
  _BYTE v171[40];
  _QWORD v172[5];

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for REMManualOrdering.ElementType(0);
  v9 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v11 = (char *)&v150 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = 0;
  v12 = objc_msgSend(a2, "existingObjectWithID:error:", a1, &v169);
  v13 = v169;
  if (!v12)
  {
    v29 = v169;
    _convertNSErrorToError(_:)(v13);

    swift_willThrow(v30);
    return;
  }
  v14 = v12;
  v162 = v8;
  v15 = type metadata accessor for REMCDManualSortHint();
  v16 = (char *)swift_dynamicCastClass(v14, v15);
  v17 = v13;
  if (!v16)
    goto LABEL_22;
  v18 = objc_msgSend(v16, "account");
  if (!v18)
  {
    if (qword_100837508 != -1)
      swift_once(&qword_100837508, sub_100457BA4);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_10084B0A8);
    v14 = v14;
    v32 = Logger.logObject.getter(v14);
    v33 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (void *)swift_slowAlloc(32, -1);
      v36 = v16;
      v37 = v35;
      v169 = v35;
      *(_DWORD *)v34 = 136446210;
      v38 = objc_msgSend(v36, "remObjectID");
      if (v38)
      {
        v39 = v38;
        v40 = objc_msgSend(v38, "description");

        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v43 = v42;

      }
      else
      {
        v43 = 0xE300000000000000;
        v41 = 7104878;
      }
      v164 = (void *)sub_10001A820(v41, v43, (uint64_t *)&v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);

      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Cannot replaceLocalIDsInREMCDManualSortHint() against a manual sort hint without an associated account {remObjectID: %{public}s}", v34, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      return;
    }

LABEL_22:
    return;
  }
  v157 = v18;
  v156 = v6;
  v160 = v14;
  v19 = objc_msgSend(v16, "concatenatedContainerIDsWithLocalContainerIDPrefix");
  v161 = v16;
  if (v19)
  {
    v20 = v19;
    v21 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

    v169 = v21;
    v170 = v23;
    v24 = *(_QWORD *)&v161[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
                         + 8];
    v164 = *(void **)&v161[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix];
    v165 = v24;
    v25 = sub_1000E525C();
    v26 = StringProtocol.components<A>(separatedBy:)(&v164, &type metadata for String, &type metadata for String, v25, v25);
    swift_bridgeObjectRelease(v23);
    v27 = (void *)sub_10011EE40(v26);
    v28 = v26;
    v16 = v161;
    swift_bridgeObjectRelease(v28);
  }
  else
  {
    v27 = &_swiftEmptySetSingleton;
  }
  sub_100457808((uint64_t)v27, &qword_10083AA30, off_1007D6658);
  v45 = v44;
  swift_bridgeObjectRelease(v27);
  sub_10011F104(v45);
  v159 = v46;
  v47 = objc_msgSend(v16, "concatenatedElementIDsWithLocalElementIDPrefix", swift_bridgeObjectRelease(v45).n128_f64[0]);
  v155 = v5;
  if (v47)
  {
    v48 = v47;
    v49 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v51 = v50;

    v169 = v49;
    v170 = v51;
    v52 = *(_QWORD *)&v16[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix + 8];
    v164 = *(void **)&v16[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix];
    v165 = v52;
    v53 = sub_1000E525C();
    v54 = StringProtocol.components<A>(separatedBy:)(&v164, &type metadata for String, &type metadata for String, v53, v53);
    swift_bridgeObjectRelease(v51);
    v55 = (void *)sub_10011EE40(v54);
    swift_bridgeObjectRelease(v54);
  }
  else
  {
    v55 = &_swiftEmptySetSingleton;
  }
  sub_100457808((uint64_t)v55, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v57 = v56;
  swift_bridgeObjectRelease(v55);
  sub_10011F104(v57);
  v158 = v58;
  swift_bridgeObjectRelease(v57);
  v59 = v157;
  v60 = sub_10053CA80();
  v61 = type metadata accessor for RDManualSortIDCache();
  v62 = v61;
  if (qword_1008376B8 != -1)
    v61 = swift_once(&qword_1008376B8, sub_1004A3E44);
  v63 = qword_10084C438;
  __chkstk_darwin(v61);
  *(&v150 - 4) = v62;
  *(&v150 - 3) = (uint64_t)v60;
  *(&v150 - 2) = v63;
  OS_dispatch_queue.sync<A>(execute:)(&v169, sub_1001D8BB0);
  v64 = (uint64_t)v169;
  v65 = type metadata accessor for RDManualSortIDAdapter();
  swift_allocObject(v65, 33, 7);
  v66 = sub_10018C174(v64, (uint64_t)v60, 0);

  v67 = v159;
  v68 = sub_10018D910(v159);
  if (v2)
  {

    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(v158);
    swift_release(v66);
    return;
  }
  v69 = v68;
  v157 = v59;
  swift_bridgeObjectRelease(v67);
  v70 = sub_1002AF1B8((uint64_t)_swiftEmptyArrayStorage);
  v71 = sub_100456DC4(v70, v69, type metadata accessor for RDAccountManualSortID, sub_100192518, (void (*)(void))sub_1002D035C, (void (*)(void))sub_1002D7DE0);
  v72 = swift_bridgeObjectRelease(v69);
  v73 = v163;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v9 + 104))(v11, enum case for REMManualOrdering.ElementType.reminders(_:), v163, v72);
  v74 = v158;
  v75 = sub_10018DE58(v158, (uint64_t)v11, (uint64_t)a2, 100);
  v76 = v66;
  v77 = v75;
  v159 = v76;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v73);
  swift_bridgeObjectRelease(v74);
  v78 = sub_1002AF5D8((uint64_t)_swiftEmptyArrayStorage);
  v79 = sub_100456DC4(v78, v77, type metadata accessor for RDElementManualSortID, sub_1001914F4, (void (*)(void))sub_1002CC554, (void (*)(void))sub_1002D6140);
  swift_bridgeObjectRelease(v77);
  if ((v71 & 0xC000000000000001) != 0)
  {
    if (v71 < 0)
      v80 = v71;
    else
      v80 = v71 & 0xFFFFFFFFFFFFFF8;
    v81 = __CocoaDictionary.count.getter(v80);
  }
  else
  {
    v81 = *(_QWORD *)(v71 + 16);
  }
  v82 = v159;
  if (!v81)
  {
    if ((v79 & 0xC000000000000001) != 0)
    {
      v83 = v79 < 0 ? v79 : v79 & 0xFFFFFFFFFFFFFF8;
      v84 = __CocoaDictionary.count.getter(v83);
    }
    else
    {
      v84 = *(_QWORD *)(v79 + 16);
    }
    if (!v84)
    {

      swift_release(v82);
      swift_bridgeObjectRelease(v71);
      swift_bridgeObjectRelease(v79);
      return;
    }
  }
  v85 = (_QWORD *)sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  v86 = sub_100457268(v85, v71, type metadata accessor for RDAccountManualSortID);
  swift_bridgeObjectRelease(v71);
  v87 = (_QWORD *)sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  v88 = sub_100457268(v87, v79, type metadata accessor for RDElementManualSortID);
  swift_bridgeObjectRelease(v79);
  sub_10019CD04((uint64_t)v171);
  sub_100325620((uint64_t)v171, (uint64_t)v172);
  v89 = (_QWORD *)v172[0];
  if (!v172[0])
  {

    swift_release(v159);
    swift_bridgeObjectRelease(v86);
    swift_bridgeObjectRelease(v88);
    return;
  }
  v90 = v172[1];
  v91 = v172[2];
  v92 = v172[3];
  v163 = v172[4];
  v169 = &_swiftEmptySetSingleton;
  v164 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v91);
  sub_10045A4BC(v93, v88, v86, (uint64_t)&v169, &v164);
  v158 = v91;
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRelease(v88);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v89);
  v95 = sub_10045AD78(v94, v88, (uint64_t *)&v164);
  swift_bridgeObjectRelease(v89);
  swift_bridgeObjectRelease(v88);
  v167 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v90);
  sub_10045A934(v96, v88, (uint64_t *)&v164, (uint64_t)&v169, &v167);
  v97 = v90;
  swift_bridgeObjectRelease(v90);
  swift_bridgeObjectRelease_n(v88, 2);
  v166 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v92);
  sub_10045AB4C(v98, v86, (uint64_t *)&v169, &v166);
  swift_bridgeObjectRelease(v92);
  v99 = v95;
  swift_bridgeObjectRelease_n(v86, 2);
  v100 = (uint64_t)v167;
  v101 = (uint64_t)v164;
  v102 = (uint64_t)v166;
  swift_bridgeObjectRetain_n(v166, 2);
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRetain(v101);
  v103 = sub_10011E910(v102);
  sub_1000F3AF0(v99, v101, v103);
  swift_bridgeObjectRelease(v102);
  v168[1] = v99;
  v168[2] = v100;
  v168[3] = v101;
  v168[4] = v102;
  v154 = v102;
  v168[5] = v103;
  swift_bridgeObjectRelease(v101);
  swift_bridgeObjectRelease(v100);
  swift_bridgeObjectRelease(v169);
  v153 = v99;
  v104 = sub_100305764(v99, v89);
  v105 = v158;
  v152 = v101;
  v151 = v103;
  if ((v104 & 1) != 0
    && (sub_10040A5C4(v100, v97), (v106 & 1) != 0)
    && (sub_10040A830(v101, v105), (v107 & 1) != 0)
    && (sub_10040AA4C(v154, v92), (v108 & 1) != 0))
  {
    v109 = v163;
    v110 = sub_1004F6374(v103, v163);
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v89);
    v168[0] = v109;
    sub_1000F4320(v168);
    v111 = v161;
    if ((v110 & 1) != 0)
    {

      swift_release(v159);
      swift_bridgeObjectRelease(v151);
      swift_bridgeObjectRelease(v154);
      swift_bridgeObjectRelease(v152);
      swift_bridgeObjectRelease(v100);
      swift_bridgeObjectRelease(v153);
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v89);
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v105);
    v168[0] = v163;
    sub_1000F4320(v168);
    v111 = v161;
  }
  v163 = v100;
  v112 = v153;
  v113 = sub_1000F319C();
  v114 = v156;
  v115 = v154;
  v116 = v113;
  v118 = v117;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A71C8(v116, v118);
  objc_msgSend(v111, "setHintData:", isa);

  v120 = objc_msgSend(v111, "setSerializationVersion:", 1);
  v121 = v162;
  UUID.init()(v120);
  v122 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v114 + 8))(v121, v155);
  objc_msgSend(v111, "setETag:", v122);

  v123 = v151;
  swift_bridgeObjectRetain(v151);
  v125 = sub_10040E8AC(v124);
  sub_10023DC80(v125);
  v126 = v163;
  v127 = v152;
  v128 = sub_10046218C(1, v112, v163, v152);
  swift_bridgeObjectRelease(v123);
  swift_bridgeObjectRelease(v115);
  swift_bridgeObjectRelease(v127);
  swift_bridgeObjectRelease(v126);
  swift_bridgeObjectRelease(v112);
  sub_10023DC94(v128);
  objc_msgSend(v111, "updateChangeCount");
  v129 = objc_msgSend(v111, "concatenatedContainerIDsWithLocalContainerIDPrefix");
  if (v129)
  {
    v130 = v129;
    v131 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
    v133 = v132;

    v169 = v131;
    v170 = v133;
    v134 = *(_QWORD *)&v111[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
                          + 8];
    v164 = *(void **)&v111[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix];
    v165 = v134;
    v135 = sub_1000E525C();
    v136 = StringProtocol.components<A>(separatedBy:)(&v164, &type metadata for String, &type metadata for String, v135, v135);
    swift_bridgeObjectRelease(v133);
    v137 = (_QWORD *)sub_10011EE40(v136);
    swift_bridgeObjectRelease(v136);
  }
  else
  {
    v137 = &_swiftEmptySetSingleton;
  }
  v138 = v137[2];
  *(_QWORD *)&v139 = swift_bridgeObjectRelease(v137).n128_u64[0];
  v140 = v159;
  if (v138)
  {

    swift_release(v140);
  }
  else
  {
    v141 = objc_msgSend(v111, "concatenatedElementIDsWithLocalElementIDPrefix", v139);
    if (v141)
    {
      v142 = v141;
      v143 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
      v145 = v144;

      v169 = v143;
      v170 = v145;
      v146 = *(_QWORD *)&v111[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix
                            + 8];
      v164 = *(void **)&v111[OBJC_IVAR___REMCDManualSortHint_separatorInConcatenatedElementIDsWithLocalElementIDPrefix];
      v165 = v146;
      v147 = sub_1000E525C();
      v148 = StringProtocol.components<A>(separatedBy:)(&v164, &type metadata for String, &type metadata for String, v147, v147);
      swift_bridgeObjectRelease(v145);
      v149 = (void *)sub_10011EE40(v148);

      swift_release(v140);
      swift_bridgeObjectRelease(v148);
    }
    else
    {

      swift_release(v140);
      v149 = &_swiftEmptySetSingleton;
    }
    swift_bridgeObjectRelease(v149);
  }
}

void sub_10045C0C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(unint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __n128 v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  __n128 v70;
  __n128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  char *v78;
  void (*v79)(char *, uint64_t, uint64_t, __n128);
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  void (*v83)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  _QWORD *v89;

  v82 = a1;
  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v3);
  v73 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v72 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v72 - v9;
  v11 = sub_10001A630(&qword_100849710);
  __chkstk_darwin(v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v78 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v88 = (char *)&v72 - v18;
  __chkstk_darwin(v19);
  v87 = (char *)&v72 - v20;
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v72 - v23;
  v25 = *(int *)(v11 + 48);
  v79 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
  v79(v13, a2, v14, v22);
  v26 = *(_QWORD *)(a2 + v25);
  v27 = v15;
  v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v80 = v24;
  v28(v24, v13, v14);
  v29 = *(_QWORD *)(v26 + 16);
  v72 = v26;
  if (v29)
  {
    v30 = v26 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    v84 = *(_QWORD *)(v27 + 72);
    swift_bridgeObjectRetain_n(v26, 2);
    v76 = v28;
    v77 = v10;
    v74 = v7;
    v75 = v14;
    v31 = (void (*)(char *, uint64_t, uint64_t))v79;
    v81 = v27;
    while (1)
    {
      v86 = v30;
      v31(v10, v30, v14);
      v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v35(v10, 0, 1, v14);
      v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      if (v36(v10, 1, v14) == 1)
        break;
      v85 = v29;
      v37 = v87;
      v28(v87, v10, v14);
      v38 = v28;
      v39 = (uint64_t)v88;
      v31(v88, (uint64_t)v37, v14);
      v31(v7, (uint64_t)v80, v14);
      v35(v7, 0, 1, v14);
      v40 = v36(v7, 1, v14);
      v83 = v35;
      if (v40 == 1)
      {
        sub_10000882C((uint64_t)v7, (uint64_t *)&unk_100839C80);
        v41 = v82;
        swift_bridgeObjectRetain(*v82);
        v42 = sub_1002C65F8(v39);
        v44 = v43;
        swift_bridgeObjectRelease();
        v45 = v86;
        if ((v44 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v41);
          v47 = (_QWORD *)*v41;
          v89 = (_QWORD *)*v41;
          *v41 = 0x8000000000000000;
          v48 = v41;
          v49 = v81;
          v31 = (void (*)(char *, uint64_t, uint64_t))v79;
          v14 = v75;
          v28 = v76;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1002D712C();
            v49 = v81;
            v47 = v89;
          }
          v50 = v42 * v84;
          v33 = *(void (**)(unint64_t, uint64_t))(v49 + 8);
          v33(v47[6] + v42 * v84, v14);
          v51 = (uint64_t)v89;
          v52 = v89[7] + v50;
          v32 = (uint64_t)v73;
          v28(v73, (char *)v52, v14);
          sub_10028A1C4(v42, v51);
          *v48 = v51;
          v27 = v81;
          v53 = swift_bridgeObjectRelease();
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))v83)(v32, 0, 1, v14, v53);
        }
        else
        {
          v32 = (uint64_t)v73;
          v14 = v75;
          v83(v73, 1, 1, v75);
          v27 = v81;
          v33 = *(void (**)(unint64_t, uint64_t))(v81 + 8);
          v31 = (void (*)(char *, uint64_t, uint64_t))v79;
          v28 = v76;
        }
        v10 = v77;
        v33((unint64_t)v88, v14);
        sub_10000882C(v32, (uint64_t *)&unk_100839C80);
        v34 = v85;
      }
      else
      {
        v38(v78, v7, v14);
        v54 = v82;
        v55 = swift_isUniquelyReferenced_nonNull_native(*v82);
        v89 = (_QWORD *)*v54;
        v56 = v89;
        *v54 = 0x8000000000000000;
        v58 = sub_1002C65F8(v39);
        v59 = v56[2];
        v60 = (v57 & 1) == 0;
        v61 = v59 + v60;
        v45 = v86;
        if (__OFADD__(v59, v60))
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v14);
          __break(1u);
          return;
        }
        v62 = v57;
        if (v56[3] >= v61)
        {
          v31 = (void (*)(char *, uint64_t, uint64_t))v79;
          v14 = v75;
          v28 = v76;
          if ((v55 & 1) == 0)
            sub_1002D712C();
        }
        else
        {
          sub_1002CEEEC(v61, v55);
          v63 = sub_1002C65F8((uint64_t)v88);
          v31 = (void (*)(char *, uint64_t, uint64_t))v79;
          v14 = v75;
          v28 = v76;
          if ((v62 & 1) != (v64 & 1))
            goto LABEL_28;
          v58 = v63;
        }
        v34 = v85;
        v65 = v89;
        v10 = v77;
        if ((v62 & 1) != 0)
        {
          v27 = v81;
          (*(void (**)(unint64_t, char *, uint64_t))(v81 + 40))(v89[7] + v58 * v84, v78, v14);
        }
        else
        {
          v89[(v58 >> 6) + 8] |= 1 << v58;
          v66 = v58 * v84;
          v31((char *)(v65[6] + v66), (uint64_t)v88, v14);
          v28((char *)(v65[7] + v66), v78, v14);
          v67 = v65[2];
          v68 = __OFADD__(v67, 1);
          v69 = v67 + 1;
          if (v68)
            goto LABEL_27;
          v65[2] = v69;
          v27 = v81;
        }
        *v82 = (uint64_t)v89;
        v70 = swift_bridgeObjectRelease();
        v33 = *(void (**)(unint64_t, uint64_t))(v27 + 8);
        ((void (*)(char *, uint64_t, __n128))v33)(v88, v14, v70);
      }
      v33((unint64_t)v87, v14);
      v30 = v45 + v84;
      v29 = v34 - 1;
      v7 = v74;
      if (!v29)
        goto LABEL_24;
    }
  }
  else
  {
    v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    swift_bridgeObjectRetain_n(v26, 2);
LABEL_24:
    v83(v10, 1, 1, v14);
  }
  v71 = swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, __n128))(v27 + 8))(v80, v14, v71);
  swift_bridgeObjectRelease();
}

uint64_t sub_10045C6CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10045C708 + 4 * byte_1006BC9E0[a1]))(0xD000000000000020, 0x80000001006F4F90);
}

uint64_t sub_10045C708()
{
  uint64_t v0;

  return v0 + 33;
}

uint64_t sub_10045C77C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10045C7B8 + 4 * byte_1006BC9E7[a1]))(0xD000000000000020, 0x80000001006F4F90);
}

uint64_t sub_10045C7B8()
{
  uint64_t v0;

  return v0 + 33;
}

void sub_10045C82C(char *a1)
{
  sub_1002B58D0(*a1);
}

void sub_10045C838()
{
  char *v0;

  sub_1002B1E40(0, *v0);
}

void sub_10045C844(uint64_t a1)
{
  char *v1;

  sub_1002B6284(a1, *v1);
}

void sub_10045C84C(uint64_t a1)
{
  char *v1;

  sub_1002B1E40(a1, *v1);
}

unint64_t sub_10045C854@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10045D180(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10045C880@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10045C6CC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10045C8A8()
{
  unsigned __int8 *v0;

  return sub_10045C77C(*v0);
}

unint64_t sub_10045C8B0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10045D180(a1);
  *a2 = result;
  return result;
}

void sub_10045C8D4(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10045C8E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10045D8F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10045C908(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10045D8F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10045C930(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  _BYTE v28[8];
  _BYTE v29[8];
  _BYTE v30[8];

  v3 = v1;
  v5 = sub_10001A630(&qword_10084B278);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_10045D8F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedReminders.CodingKeys, &type metadata for RDSavedReminders.CodingKeys, v11, v9, v10);
  v26 = *v3;
  HIBYTE(v25) = 0;
  v12 = sub_10001A630(&qword_10083DA88);
  v13 = sub_10045DBEC(&qword_10084B280, &qword_10084B288, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, (char *)&v25 + 7, v5, v12, v13);
  if (!v2)
  {
    v26 = v3[1];
    HIBYTE(v25) = 1;
    v14 = sub_10001A630(&qword_10084B208);
    v15 = sub_10045DC70();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, (char *)&v25 + 7, v5, v14, v15);
    v26 = v3[2];
    HIBYTE(v25) = 2;
    v16 = sub_10001A630(&qword_10084B218);
    v17 = sub_10045DD1C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, (char *)&v25 + 7, v5, v16, v17);
    sub_1000A5CA8((uint64_t)(v3 + 3), (uint64_t)v30, &qword_1008452B0);
    sub_1000A5CA8((uint64_t)v30, (uint64_t)&v26, &qword_1008452B0);
    HIBYTE(v25) = 3;
    v18 = sub_10001A630(&qword_10084B228);
    v19 = sub_10045DDB8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, (char *)&v25 + 7, v5, v18, v19);
    sub_1000A5CA8((uint64_t)(v3 + 4), (uint64_t)v29, &qword_100845298);
    sub_1000A5CA8((uint64_t)v29, (uint64_t)&v26, &qword_100845298);
    HIBYTE(v25) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, (char *)&v25 + 7, v5, v12, v13);
    sub_1000A5CA8((uint64_t)(v3 + 5), (uint64_t)v28, &qword_1008452A0);
    sub_1000A5CA8((uint64_t)v28, (uint64_t)&v26, &qword_1008452A0);
    HIBYTE(v25) = 5;
    v20 = sub_10001A630(&qword_10084B250);
    v21 = sub_10045DEE0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, (char *)&v25 + 7, v5, v20, v21);
    sub_1000A5CA8((uint64_t)(v3 + 6), (uint64_t)v27, &qword_1008452A8);
    sub_1000A5CA8((uint64_t)v27, (uint64_t)&v26, &qword_1008452A8);
    HIBYTE(v25) = 6;
    v22 = sub_10001A630(&qword_10084B268);
    v23 = sub_10045DFA8(&qword_10084B2D0, &qword_10084B288, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, (char *)&v25 + 7, v5, v22, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10045CCB8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_10045CFE4((uint64_t *)v7, (uint64_t *)v8) & 1;
}

double sub_10045CD00@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_10045D1C8(a1, (unint64_t *)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_10045CD40(_QWORD *a1)
{
  return sub_10045C930(a1);
}

double destroy for RDSavedReminders(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[7]).n128_u64[0];
  return result;
}

uint64_t *initializeWithCopy for RDSavedReminders(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  v9 = a2[6];
  v10 = a2[7];
  a1[6] = v9;
  a1[7] = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t *assignWithCopy for RDSavedReminders(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = a1[4];
  v13 = a2[4];
  a1[4] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  v14 = a1[5];
  v15 = a2[5];
  a1[5] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  v16 = a1[6];
  v17 = a2[6];
  a1[6] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  v18 = a2[7];
  v19 = a1[7];
  a1[7] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

_QWORD *assignWithTake for RDSavedReminders(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a1[6]);
  v7 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for RDSavedReminders()
{
  return &type metadata for RDSavedReminders;
}

uint64_t sub_10045CFE4(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  if ((sub_100306990(*a1, *a2) & 1) == 0)
    return 0;
  sub_100408FC0(a1[1], a2[1]);
  if ((v4 & 1) == 0 || (sub_1004094C4(a1[2], a2[2]) & 1) == 0)
    return 0;
  v5 = a1[3];
  v6 = a2[3];
  if (v5)
  {
    if (!v6)
      return 0;
    swift_bridgeObjectRetain(a2[3]);
    swift_bridgeObjectRetain(v5);
    sub_10040992C(v7, v6);
    v9 = v8;
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    if ((v9 & 1) == 0)
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  v10 = a1[4];
  v11 = a2[4];
  if (v10)
  {
    if (!v11)
      return 0;
    swift_bridgeObjectRetain(a2[4]);
    swift_bridgeObjectRetain(v10);
    v13 = sub_100306990(v12, v11);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v14 = a1[5];
  v15 = a2[5];
  if (v14)
  {
    if (!v15)
      return 0;
    swift_bridgeObjectRetain(a2[5]);
    swift_bridgeObjectRetain(v14);
    sub_100409D0C(v16, v15);
    v18 = v17;
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v15);
    if ((v18 & 1) == 0)
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v19 = a1[6];
  v20 = a2[6];
  if (v19)
  {
    if (v20)
    {
      swift_bridgeObjectRetain(a2[6]);
      swift_bridgeObjectRetain(v19);
      v22 = sub_10040A134(v21, v20);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v20);
      if ((v22 & 1) != 0)
        return sub_10040A134(a1[7], a2[7]);
    }
  }
  else if (!v20)
  {
    return sub_10040A134(a1[7], a2[7]);
  }
  return 0;
}

unint64_t sub_10045D180(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007E0EF0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_10045D1C8@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t i;
  BOOL v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  __n128 v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  unint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  char v79;
  unint64_t v80;

  v76 = a2;
  v3 = sub_10001A630(&qword_100849710);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - v7;
  v9 = sub_10001A630(&qword_10084B1E8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v77 = a1;
  sub_10000A388(a1, v13);
  v15 = sub_10045D8F4();
  v16 = v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedReminders.CodingKeys, &type metadata for RDSavedReminders.CodingKeys, v15, v13, v14);
  if (v16)
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v77);
  v17 = v10;
  v74 = v5;
  v75 = v8;
  v78 = v3;
  v18 = sub_10001A630(&qword_10083DA88);
  v79 = 0;
  v19 = sub_10045DBEC(&qword_10084B1F8, &qword_10084B200, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v80, v18, &v79, v9, v18, v19);
  v20 = v17;
  v21 = v80;
  v22 = sub_10001A630(&qword_10084B208);
  v79 = 1;
  v23 = sub_10045D938();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v80, v22, &v79, v9, v22, v23);
  v73 = v21;
  v24 = v80;
  v25 = sub_10001A630(&qword_10084B218);
  v79 = 2;
  v26 = sub_10045D9E4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v80, v25, &v79, v9, v25, v26);
  v27 = v80;
  v28 = sub_10001A630(&qword_10084B228);
  v79 = 3;
  v29 = sub_10045DA80();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v80, v28, &v79, v9, v28, v29);
  v71 = v27;
  v31 = v80;
  v79 = 4;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v80, v18, &v79, v9, v18, v19);
  v68 = v80;
  v32 = sub_10001A630(&qword_10084B250);
  v79 = 5;
  v33 = sub_10045DB24();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v80, v32, &v79, v9, v32, v33);
  v34 = v73;
  v67 = v80;
  v35 = sub_10001A630(&qword_10084B268);
  v79 = 6;
  v36 = sub_10045DFA8(&qword_10084B270, &qword_10084B200, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v80, v35, &v79, v9, v35, v36);
  v64 = v9;
  v65 = v31;
  v66 = v80;
  swift_bridgeObjectRetain(v24);
  v80 = sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v37 = *(_QWORD *)(v24 + 64);
  v69 = v24 + 64;
  v38 = 1 << *(_BYTE *)(v24 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & v37;
  v70 = (unint64_t)(v38 + 63) >> 6;
  v72 = v24;
  swift_bridgeObjectRetain(v24);
  v41 = 0;
  v42 = (uint64_t)v74;
  if (!v40)
    goto LABEL_8;
LABEL_7:
  v43 = __clz(__rbit64(v40));
  v40 &= v40 - 1;
  v44 = v41;
  for (i = v43 | (v41 << 6); ; i = __clz(__rbit64(v48)) + (v47 << 6))
  {
    v50 = v72;
    v51 = *(_QWORD *)(v72 + 48);
    v52 = type metadata accessor for UUID(0);
    v53 = *(_QWORD *)(v52 - 8);
    v54 = v51 + *(_QWORD *)(v53 + 72) * i;
    v55 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v75, v54, v52);
    v56 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * i);
    *(_QWORD *)(v55 + *(int *)(v78 + 48)) = v56;
    sub_1000A5CA8(v55, v42, &qword_100849710);
    swift_bridgeObjectRetain(v56);
    sub_10045C0C0((uint64_t *)&v80, v42);
    sub_10000882C(v42, &qword_100849710);
    v34 = v73;
    v41 = v44;
    if (v40)
      goto LABEL_7;
LABEL_8:
    v46 = __OFADD__(v41, 1);
    v47 = v41 + 1;
    if (v46)
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v47 >= v70)
      goto LABEL_27;
    v48 = *(_QWORD *)(v69 + 8 * v47);
    if (!v48)
      break;
LABEL_20:
    v40 = (v48 - 1) & v48;
    v44 = v47;
  }
  v49 = v47 + 1;
  if (v47 + 1 >= v70)
    goto LABEL_27;
  v48 = *(_QWORD *)(v69 + 8 * v49);
  if (v48)
    goto LABEL_19;
  v49 = v47 + 2;
  if (v47 + 2 >= v70)
    goto LABEL_27;
  v48 = *(_QWORD *)(v69 + 8 * v49);
  if (v48)
    goto LABEL_19;
  v49 = v47 + 3;
  if (v47 + 3 >= v70)
    goto LABEL_27;
  v48 = *(_QWORD *)(v69 + 8 * v49);
  if (v48)
    goto LABEL_19;
  v49 = v47 + 4;
  if (v47 + 4 >= v70)
  {
LABEL_27:
    v57 = v64;
    v58 = v65;
    v59 = v76;
    v60 = v72;
    swift_release(v72);
    v61 = swift_bridgeObjectRelease();
    v62 = v80;
    (*(void (**)(char *, uint64_t, __n128))(v20 + 8))(v12, v57, v61);
    result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v77);
    *v59 = v34;
    v59[1] = v60;
    v59[2] = v71;
    v59[3] = v58;
    v63 = v67;
    v59[4] = v68;
    v59[5] = v63;
    v59[6] = v66;
    v59[7] = v62;
    return result;
  }
  v48 = *(_QWORD *)(v69 + 8 * v49);
  if (v48)
  {
LABEL_19:
    v47 = v49;
    goto LABEL_20;
  }
  while (1)
  {
    v47 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v47 >= v70)
      goto LABEL_27;
    v48 = *(_QWORD *)(v69 + 8 * v47);
    ++v49;
    if (v48)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  swift_bridgeObjectRelease();
  sub_10000882C(v42, &qword_100849710);
  result = swift_release(v72);
  __break(1u);
  return result;
}

unint64_t sub_10045D8F4()
{
  unint64_t result;

  result = qword_10084B1F0;
  if (!qword_10084B1F0)
  {
    result = swift_getWitnessTable(&unk_1006BCB88, &type metadata for RDSavedReminders.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084B1F0);
  }
  return result;
}

unint64_t sub_10045D938()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B210;
  if (!qword_10084B210)
  {
    v1 = sub_1000A5A94(&qword_10084B208);
    sub_10009FC50(&qword_10084B200, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_10045DBEC(&qword_10084B1F8, &qword_10084B200, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084B210);
  }
  return result;
}

unint64_t sub_10045D9E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B220;
  if (!qword_10084B220)
  {
    v1 = sub_1000A5A94(&qword_10084B218);
    sub_10009FC50(&qword_10084B200, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_10009FC50(&qword_100840F08, type metadata accessor for RDSavedReminder, (uint64_t)&unk_1006A9E88);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084B220);
  }
  return result;
}

unint64_t sub_10045DA80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B230;
  if (!qword_10084B230)
  {
    v1 = sub_1000A5A94(&qword_10084B228);
    sub_10009FC50(&qword_10084B200, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_10045DE5C(&qword_10084B238, &qword_10084B248, (uint64_t)&unk_1006B4F58, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084B230);
  }
  return result;
}

unint64_t sub_10045DB24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B258;
  if (!qword_10084B258)
  {
    v1 = sub_1000A5A94(&qword_10084B250);
    sub_10009FC50(&qword_10084B200, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_10045DBA8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084B258);
  }
  return result;
}

unint64_t sub_10045DBA8()
{
  unint64_t result;

  result = qword_10084B260;
  if (!qword_10084B260)
  {
    result = swift_getWitnessTable(&unk_1006B3FA8, &type metadata for RDSavedTemplateSection);
    atomic_store(result, (unint64_t *)&qword_10084B260);
  }
  return result;
}

uint64_t sub_10045DBEC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1000A5A94(&qword_10083DA88);
    sub_10009FC50(a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10045DC70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B290;
  if (!qword_10084B290)
  {
    v1 = sub_1000A5A94(&qword_10084B208);
    sub_10009FC50(&qword_10084B288, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_10045DBEC(&qword_10084B280, &qword_10084B288, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084B290);
  }
  return result;
}

unint64_t sub_10045DD1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B298;
  if (!qword_10084B298)
  {
    v1 = sub_1000A5A94(&qword_10084B218);
    sub_10009FC50(&qword_10084B288, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_10009FC50(&qword_10084B2A0, type metadata accessor for RDSavedReminder, (uint64_t)&unk_1006A9EB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084B298);
  }
  return result;
}

unint64_t sub_10045DDB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B2A8;
  if (!qword_10084B2A8)
  {
    v1 = sub_1000A5A94(&qword_10084B228);
    sub_10009FC50(&qword_10084B288, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_10045DE5C(&qword_10084B2B0, &qword_10084B2B8, (uint64_t)&unk_1006B4F30, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084B2A8);
  }
  return result;
}

uint64_t sub_10045DE5C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1000A5A94(&qword_10084B240);
    sub_10009FC50(a2, type metadata accessor for RDSavedURLAttachment, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10045DEE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B2C0;
  if (!qword_10084B2C0)
  {
    v1 = sub_1000A5A94(&qword_10084B250);
    sub_10009FC50(&qword_10084B288, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    sub_10045DF64();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10084B2C0);
  }
  return result;
}

unint64_t sub_10045DF64()
{
  unint64_t result;

  result = qword_10084B2C8;
  if (!qword_10084B2C8)
  {
    result = swift_getWitnessTable(&unk_1006B3F80, &type metadata for RDSavedTemplateSection);
    atomic_store(result, (unint64_t *)&qword_10084B2C8);
  }
  return result;
}

uint64_t sub_10045DFA8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1000A5A94(&qword_10084B268);
    sub_10009FC50(a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RDSavedReminders.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10045E078 + 4 * byte_1006BC9F3[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10045E0AC + 4 * byte_1006BC9EE[v4]))();
}

uint64_t sub_10045E0AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10045E0B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10045E0BCLL);
  return result;
}

uint64_t sub_10045E0C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10045E0D0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10045E0D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10045E0DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedReminders.CodingKeys()
{
  return &type metadata for RDSavedReminders.CodingKeys;
}

unint64_t sub_10045E0FC()
{
  unint64_t result;

  result = qword_10084B2D8;
  if (!qword_10084B2D8)
  {
    result = swift_getWitnessTable(&unk_1006BCB60, &type metadata for RDSavedReminders.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084B2D8);
  }
  return result;
}

unint64_t sub_10045E144()
{
  unint64_t result;

  result = qword_10084B2E0;
  if (!qword_10084B2E0)
  {
    result = swift_getWitnessTable(&unk_1006BCA98, &type metadata for RDSavedReminders.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084B2E0);
  }
  return result;
}

unint64_t sub_10045E18C()
{
  unint64_t result;

  result = qword_10084B2E8;
  if (!qword_10084B2E8)
  {
    result = swift_getWitnessTable(&unk_1006BCAC0, &type metadata for RDSavedReminders.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084B2E8);
  }
  return result;
}

uint64_t sub_10045E1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084B2F0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084B2F0);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10045E260()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v2, v3, 17);
  sub_10000A3AC();
  v5 = v4;
  result = sub_10001C744((uint64_t)v2, _s10PredicatesOMa_1);
  qword_100871F40 = v5;
  return result;
}

void sub_10045E2EC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = __chkstk_darwin(v2).n128_u64[0];
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v1, "type", v4);
  if (!v7)
  {
    v8 = &unk_1006BCC78;
LABEL_5:
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    KeyPath = swift_getKeyPath(v8);
    NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, objc_msgSend(v1, "ascending"));
    return;
  }
  if (v7 == (id)1)
  {
    v8 = &unk_1006BCC48;
    goto LABEL_5;
  }
  if (qword_100837510 != -1)
    swift_once(&qword_100837510, sub_10045E1D0);
  v10 = sub_10001AAA8(v2, (uint64_t)qword_10084B2F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v10, v2);
  v11 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  v12 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
  sub_1004A14D8((uint64_t)"unknown type", 12, 2uLL, v11, v12);
  __break(1u);
}

_QWORD *sub_10045E448(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t, __n128);
  void (*v26)(_QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(_QWORD, _QWORD);
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  double v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  Swift::String v72;
  Swift::String v73;
  NSString v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  _QWORD *v90;
  __n128 v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  id v97;
  void *v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  Class isa;
  Class v105;
  Class v106;
  Class v107;
  __n128 v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(char *, uint64_t, uint64_t, __n128);
  id v124;
  unint64_t v125;
  void (*v126)(_QWORD, _QWORD);
  uint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;

  v131 = a1;
  v1 = type metadata accessor for Logger(0);
  v129 = *(_QWORD *)(v1 - 8);
  v130 = v1;
  __chkstk_darwin(v1);
  v128 = (char *)&v114 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v114 - v4;
  __chkstk_darwin(v6);
  v8 = (char *)&v114 - v7;
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)static os_signpost_type_t.begin.getter(v13);
  v15 = (void *)objc_opt_self(REMSignpost);
  v16 = objc_msgSend(v15, "database");
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v14, &_mh_execute_header, v16, "List Fetch Storages And Parents", 31, 2, v12);

  v17 = v9;
  v18 = *(_QWORD *)(v10 + 8);
  ((void (*)(uint64_t, uint64_t))v18)(v12, v9);
  v19 = v132;
  sub_10045FEA0();
  if (v19)
    return v14;
  v21 = v20;
  v126 = (void (*)(_QWORD, _QWORD))v8;
  v127 = (uint64_t)v15;
  v132 = v5;
  v22 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v23 = NSManagedObjectContext.fetch<A>(_:)(v21, v22);
  v118 = v17;
  v124 = v21;
  if (qword_100837510 != -1)
    goto LABEL_55;
  while (1)
  {
    v24 = sub_10001AAA8(v130, (uint64_t)qword_10084B2F0);
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v129 + 16);
    v26 = v126;
    v122 = v24;
    v123 = v25;
    v27 = ((uint64_t (*)(void (*)(_QWORD, _QWORD)))v25)(v126);
    v133 = (_QWORD *)v23;
    __chkstk_darwin(v27);
    *(&v114 - 2) = (uint64_t)v26;
    v28 = sub_10001A630(&qword_10083FF50);
    v29 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v30 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    v120 = v28;
    v121 = v29;
    v119 = v30;
    v125 = Sequence.map<A>(skippingError:_:)(sub_100460630, &v114 - 4, sub_10046061C, 0, v28, v29, v30);
    v31 = v132;
    v116 = v12;
    v32 = v126;
    v126 = *(void (**)(_QWORD, _QWORD))(v129 + 8);
    v126(v32, v130);
    v33 = (unint64_t)v23 >> 62;
    if ((unint64_t)v23 >> 62)
    {
      v112 = v23 < 0 ? v23 : v23 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v23);
      v12 = _CocoaArrayWrapper.endIndex.getter(v112);
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v34 = v23;
    v117 = (void (*)(uint64_t, uint64_t))v18;
    if (!v12)
      break;
    v129 = (unint64_t)v23 >> 62;
    v135 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    if (v12 < 0)
    {
      __break(1u);
      goto LABEL_61;
    }
    v36 = 0;
    v18 = v23 & 0xC000000000000001;
    while (v12 != v36)
    {
      if (v18)
        v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v23);
      else
        v37 = *(id *)(v23 + 8 * v36 + 32);
      v38 = v37;
      v39 = objc_msgSend(v37, "account");
      if (!v39)
      {
        v66 = (void *)objc_opt_self(REMError);
        v133 = 0;
        v134 = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        *(_QWORD *)&v67 = swift_bridgeObjectRelease().n128_u64[0];
        v133 = (_QWORD *)0xD00000000000001DLL;
        v134 = 0x8000000100704A90;
        v68 = objc_msgSend(v38, "description", v67);
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
        v71 = v70;

        v72._countAndFlagsBits = v69;
        v72._object = v71;
        String.append(_:)(v72);
        swift_bridgeObjectRelease();
        v73._countAndFlagsBits = 125;
        v73._object = (void *)0xE100000000000000;
        String.append(_:)(v73);
        v74 = String._bridgeToObjectiveC()();
        objc_msgSend(v66, "internalErrorWithDebugDescription:", v74, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v75);
        v14 = v135;
LABEL_38:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release(v14);
        return v14;
      }
      v133 = 0;
      v40 = v39;
      v41 = objc_msgSend(v40, "remObjectIDWithError:", &v133);
      v42 = v133;
      if (!v41)
      {
        v76 = v133;
        _convertNSErrorToError(_:)(v42);

        swift_willThrow(v77);
        v14 = v135;
        goto LABEL_38;
      }
      v43 = v41;
      v44 = v133;
      v45 = sub_1005CCB88(v43);
      ++v36;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v46);
      v47 = v135[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
      v48 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v45);
      specialized ContiguousArray._endMutation()(v48);
      v31 = v132;
      v23 = v34;
      if (v12 == v36)
      {
        v115 = v135;
        v33 = v129;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    swift_once(&qword_100837510, sub_10045E1D0);
  }
  v115 = _swiftEmptyArrayStorage;
LABEL_17:
  v133 = _swiftEmptyArrayStorage;
  v12 = v127;
  if (!v33)
  {
    v49 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v23);
    if (!v49)
      goto LABEL_35;
    goto LABEL_19;
  }
  if (v23 < 0)
    v64 = v23;
  else
    v64 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v23);
  v49 = _CocoaArrayWrapper.endIndex.getter(v64);
  if (v49)
  {
LABEL_19:
    v129 = v23 & 0xC000000000000001;
    v18 = 4;
    while (1)
    {
      v51 = v129
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v23)
          : *(id *)(v23 + 8 * v18);
      v52 = v51;
      v23 = v18 - 3;
      if (__OFADD__(v18 - 4, 1))
        goto LABEL_54;
      v53 = objc_msgSend(v51, "parentList");
      if (v53)
      {
        v135 = 0;
        v54 = v53;
        v55 = objc_msgSend(v54, "remObjectIDWithError:", &v135);
        v56 = v135;
        if (!v55)
        {
          v84 = v135;
          _convertNSErrorToError(_:)(v56);

          swift_willThrow(v85);
          swift_bridgeObjectRelease();

          v14 = v133;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          return v14;
        }
        v57 = v55;
        v58 = v135;
        v59 = sub_1005CCB64(v57);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
        v62 = v133[2];
        v61 = v133[3];
        if (v62 >= v61 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1);
        v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v59);
        specialized Array._endMutation()(v63);
        v12 = v127;
      }
      else
      {

      }
      ++v18;
      v50 = v23 == v49;
      v23 = v34;
      if (v50)
      {
        swift_bridgeObjectRelease();
        v31 = v132;
        v65 = v133;
        goto LABEL_40;
      }
    }
  }
LABEL_35:
  swift_bridgeObjectRelease();
  v65 = _swiftEmptyArrayStorage;
LABEL_40:
  swift_bridgeObjectRelease();
  v78 = sub_1005CEFB8((uint64_t)v115, 0, 1, 0, 0);
  v79 = swift_bridgeObjectRelease();
  v80 = v123(v31, v122, v130, v79);
  v133 = v78;
  __chkstk_darwin(v80);
  *(&v114 - 2) = (uint64_t)v31;
  v81 = sub_10001A630(&qword_10083FE60);
  v82 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v83 = sub_1000C4C0C((unint64_t *)&qword_100843190, &qword_10083FE60);
  v129 = v82;
  v86 = Sequence.map<A>(skippingError:_:)(sub_1002A7AD0, &v114 - 4, sub_1002A6DFC, 0, v81, v82, v83);
  v87 = v130;
  v88 = (void (*)(char *, uint64_t))v126;
  v126(v132, v130);
  swift_bridgeObjectRelease();
  v90 = sub_1005CEADC((uint64_t)v65, 0, 1, 0, 0);
  v132 = (char *)v86;
  v91 = swift_bridgeObjectRelease();
  v92 = v128;
  v93 = v123(v128, v122, v87, v91);
  v133 = v90;
  __chkstk_darwin(v93);
  *(&v114 - 2) = (uint64_t)v92;
  v131 = Sequence.map<A>(skippingError:_:)(sub_100460630, &v114 - 4, sub_10046061C, 0, v120, v121, v119);
  v88(v92, v87);
  swift_bridgeObjectRelease();
  v35 = v125;
  if (!(v125 >> 62))
  {
    v94 = *(_QWORD *)((v125 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_45;
  }
LABEL_61:
  if (v35 < 0)
    v113 = v35;
  else
    v113 = v35 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v35);
  v94 = _CocoaArrayWrapper.endIndex.getter(v113);
  swift_bridgeObjectRelease();
  v35 = v125;
LABEL_45:
  if (v94)
  {
    v133 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v94);
    if (v94 < 0)
      __break(1u);
    v95 = 0;
    v35 = v125;
    v96 = v125 & 0xC000000000000001;
    do
    {
      if (v96)
        v97 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v95, v35);
      else
        v97 = *(id *)(v35 + 8 * v95 + 32);
      v98 = v97;
      ++v95;
      v99 = objc_msgSend(v97, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v100);
      v101 = v133[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v101);
      v102 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v101, v99);
      specialized ContiguousArray._endMutation()(v102);
      v12 = v127;
      v35 = v125;
    }
    while (v94 != v95);
  }
  v133 = (_QWORD *)v35;
  sub_1001E1A5C(v131);
  v103 = objc_allocWithZone((Class)REMFetchResult);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v105 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  v106 = Array._bridgeToObjectiveC()().super.isa;
  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v107 = Array._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v103, "initWithAccountStorages:listStorages:reminderStorages:requestedObjectIDs:metadata:", isa, v105, v106, v107, 0, swift_bridgeObjectRelease().n128_f64[0]);

  v109 = static os_signpost_type_t.end.getter(v108);
  v110 = objc_msgSend((id)v12, "database");
  v111 = v116;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v109, &_mh_execute_header, v110, "List Fetch Storages And Parents", 31, 2, v111);

  v117(v111, v118);
  return v14;
}

id sub_10045F0C4(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  Class isa;
  __n128 v32;
  uint64_t v33;
  id v34;
  _QWORD v35[3];
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a1;
  v38 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OSSignpostID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static os_signpost_type_t.begin.getter(v9);
  v11 = (void *)objc_opt_self(REMSignpost);
  v12 = objc_msgSend(v11, "database");
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v12, "List Fetch Storages", 19, 2, v8);

  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, v5);
  v14 = v40;
  sub_10045FEA0();
  if (!v14)
  {
    v16 = v15;
    v36 = v5;
    v37 = v4;
    v40 = v2;
    v17 = v38;
    v18 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v20 = NSManagedObjectContext.fetch<A>(_:)(v16, v18);
    v39 = v16;
    if (qword_100837510 != -1)
      swift_once(&qword_100837510, sub_10045E1D0);
    v21 = v17;
    v22 = sub_10001AAA8(v17, (uint64_t)qword_10084B2F0);
    v23 = v37;
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 16))(v37, v22, v17);
    v35[1] = v35;
    v35[2] = v20;
    v41 = v20;
    __chkstk_darwin(v24);
    v35[-2] = v23;
    v25 = sub_10001A630(&qword_10083FF50);
    v26 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v27 = sub_1000C4C0C((unint64_t *)&qword_10083A838, &qword_10083FF50);
    Sequence.map<A>(skippingError:_:)(sub_1000F5264, &v35[-4], sub_1000F4B44, 0, v25, v26, v27);
    v28 = v8;
    v29 = v36;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v21);
    swift_bridgeObjectRelease();
    v30 = objc_allocWithZone((Class)REMFetchResult);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v1 = objc_msgSend(v30, "initWithListStorages:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v33 = static os_signpost_type_t.end.getter(v32);
    v34 = objc_msgSend(v11, "database");
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v33, &_mh_execute_header, v34, "List Fetch Storages", 19, 2, v28);

    v13(v28, v29);
  }
  return v1;
}

_QWORD *sub_10045F44C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void (*v10)(char *, _QWORD *);
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  id v18;
  _QWORD v19[2];

  v19[1] = a1;
  v2 = (_QWORD *)type metadata accessor for OSSignpostID(0);
  v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static os_signpost_type_t.begin.getter(v6);
  v8 = (void *)objc_opt_self(REMSignpost);
  v9 = objc_msgSend(v8, "database");
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v7, &_mh_execute_header, v9, "List Fetch Count", 16, 2, v5);

  v10 = *(void (**)(char *, _QWORD *))(v3 + 8);
  v10(v5, v2);
  sub_10045FEA0();
  if (!v1)
  {
    v12 = v11;
    v13 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v15 = NSManagedObjectContext.count<A>(for:)(v12, v13);
    v17 = static os_signpost_type_t.end.getter(v16);
    v18 = objc_msgSend(v8, "database");
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)(v17, &_mh_execute_header, v18, "List Fetch Count", 16, 2, v5);

    v10(v5, v2);
    v2 = objc_msgSend(objc_allocWithZone((Class)REMFetchResult), "initWithCount:", v15);

  }
  return v2;
}

id sub_10045F620(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void (*v14)(char *, id);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char **v23;
  uint64_t v24;
  BOOL v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t KeyPath;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t inited;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  Class isa;
  id v72;
  uint64_t v74;
  void (*v75)(uint64_t, id);
  uint64_t v76;
  id v77;
  id v78;
  __int128 v79;
  void *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  char v89[64];
  uint64_t v90;

  v87 = a1;
  v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OSSignpostID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static os_signpost_type_t.begin.getter(v9);
  v11 = (void *)objc_opt_self(REMSignpost);
  v12 = objc_msgSend(v11, "database");
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v12, "List Fetch Metadata", 19, 2, v8);

  v13 = (id)v5;
  v14 = *(void (**)(char *, id))(v6 + 8);
  v15 = (uint64_t)v8;
  v14(v8, v13);
  v16 = v86;
  sub_10045FEA0();
  if (!v16)
  {
    v18 = v17;
    v85 = v2;
    v80 = v11;
    v81 = v4;
    v19 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v20 = NSManagedObjectContext.fetch<A>(_:)(v18, v19);
    v86 = 0;
    v75 = (void (*)(uint64_t, id))v14;
    v90 = (uint64_t)_swiftEmptyDictionarySingleton;
    if ((unint64_t)v20 >> 62)
      goto LABEL_34;
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v22 = v80;
      v23 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
      v24 = v85;
      v76 = v15;
      v77 = v13;
      v78 = v18;
      if (!v21)
        break;
      v83 = v20 & 0xC000000000000001;
      v15 = 4;
      v79 = xmmword_1006A3C20;
      v18 = v81;
      v82 = v20;
      while (1)
      {
        v13 = (id)(v15 - 4);
        v26 = v83
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, v20)
            : *(id *)(v20 + 8 * v15);
        v20 = (uint64_t)v26;
        v27 = v15 - 3;
        if (__OFADD__(v13, 1))
          break;
        v28 = v21;
        v29 = objc_msgSend(v26, "remObjectID");
        if (v29)
        {
          v30 = v29;
          KeyPath = swift_getKeyPath(&unk_1006BCC10);
          v32 = (id)v20;
          v33 = (void *)sub_1002E7220(KeyPath, (void *)v20);
          swift_release(KeyPath);
          v84 = v32;

          v34 = sub_10001A630(&qword_10083C4C0);
          inited = swift_initStackObject(v34, v89);
          *(_OWORD *)(inited + 16) = v79;
          if (qword_100836D70 != -1)
            swift_once(&qword_100836D70, sub_1001446A8);
          v36 = (void *)qword_100871C48;
          *(_QWORD *)(inited + 32) = qword_100871C48;
          v37 = qword_100836D78;
          v38 = v36;
          if (v37 != -1)
            v38 = (id)swift_once(&qword_100836D78, sub_1001446C8);
          v39 = (void *)qword_100871C50;
          *(_QWORD *)(inited + 40) = qword_100871C50;
          *(_QWORD *)(inited + 48) = v33;
          v88 = inited;
          specialized Array._endMutation()(v38);
          v40 = v88;
          v41 = v33;
          v42 = v39;
          v43 = (void *)sub_10000D2BC(v40);
          v44 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
          v13 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
          v45 = objc_msgSend((id)swift_getObjCClassFromMetadata(v44), "entity");
          objc_msgSend(v13, "setEntity:", v45);

          objc_msgSend(v13, "setAffectedStores:", 0);
          objc_msgSend(v13, "setPredicate:", v43);

          v46 = v86;
          v1 = v87;
          v47 = NSManagedObjectContext.count<A>(for:)(v13, v44);
          if (v46)
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            return v1;
          }
          v48 = v47;
          v86 = 0;
          v49 = objc_allocWithZone((Class)NSNumber);
          v50 = v30;
          v51 = objc_msgSend(v49, "initWithInteger:", v48);
          if (v51)
          {
            v52 = (uint64_t)v51;
            v20 = v90;
            v18 = v81;
            if ((v90 & 0xC000000000000001) != 0)
            {
              if (v90 >= 0)
                v20 = v90 & 0xFFFFFFFFFFFFFF8;
              v53 = __CocoaDictionary.count.getter(v20);
              if (__OFADD__(v53, 1))
                goto LABEL_33;
              v20 = sub_1001930B0(v20, v53 + 1);
            }
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
            v88 = v20;
            sub_10028DD6C(v52, v50, isUniquelyReferenced_nonNull_native);
            v90 = v88;

            swift_bridgeObjectRelease();
            v22 = v80;
            v23 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          }
          else
          {
            v55 = (void *)sub_1002CB7C8(v50);

            v22 = v80;
            v18 = v81;
            v23 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          }
        }
        else
        {

        }
        ++v15;
        v21 = v28;
        v25 = v27 == v28;
        v24 = v85;
        v20 = v82;
        if (v25)
          goto LABEL_27;
      }
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      if (v20 < 0)
        v74 = v20;
      else
        v74 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v21 = _CocoaArrayWrapper.endIndex.getter(v74);
      swift_bridgeObjectRelease();
    }
    v18 = v81;
LABEL_27:
    swift_bridgeObjectRelease();
    v56 = enum case for REMRemindersListDataView.ShowCompleted.off(_:);
    v57 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
    (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v18, v56, v57);
    swift_storeEnumTagMultiPayload(v18, v24, 11);
    sub_10000D2C0();
    v59 = v58;
    sub_10001C744((uint64_t)v18, _s10PredicatesOMa);
    v60 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v61 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v62 = objc_msgSend((id)swift_getObjCClassFromMetadata(v60), "entity");
    objc_msgSend(v61, "setEntity:", v62);

    objc_msgSend(v61, "setAffectedStores:", 0);
    objc_msgSend(v61, "setPredicate:", v59);

    v63 = v86;
    v64 = NSManagedObjectContext.count<A>(for:)(v61, v60);
    if (v63)
    {
      v1 = (id)v90;

      swift_bridgeObjectRelease();
    }
    else
    {
      v66 = v64;
      v67 = static os_signpost_type_t.end.getter(v65);
      v68 = objc_msgSend(v22, v23[94]);
      v69 = v76;
      static OSSignpostID.exclusive.getter();
      os_signpost(_:dso:log:name:signpostID:)(v67, &_mh_execute_header, v68, "List Fetch Metadata", 19, 2, v69);

      v75(v69, v77);
      v70 = objc_allocWithZone((Class)REMListFetchMetadata);
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      sub_10011A5DC();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v72 = objc_msgSend(v70, "initWithIncompleteReminderCounts:scheduledCount:", isa, v66, swift_bridgeObjectRelease().n128_f64[0]);

      v1 = objc_msgSend(objc_allocWithZone((Class)REMFetchResult), "initWithMetadata:", v72);
    }
  }
  return v1;
}

_QWORD *sub_10045FE00(uint64_t a1)
{
  return sub_10045E448(a1);
}

id sub_10045FE20(void *a1)
{
  return sub_10045F0C4(a1);
}

void sub_10045FE40()
{
  sub_100460584();
}

_QWORD *sub_10045FE60(uint64_t a1)
{
  return sub_10045F44C(a1);
}

id sub_10045FE80(void *a1)
{
  return sub_10045F620(a1);
}

void sub_10045FEA0()
{
  unint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  _UNKNOWN **v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Class isa;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _UNKNOWN **v53;
  char *v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;

  v2 = (_QWORD *)type metadata accessor for Logger(0);
  v3 = (_UNKNOWN **)*(v2 - 1);
  __chkstk_darwin(v2);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v7 = __chkstk_darwin(v6).n128_u64[0];
  v9 = (char *)&v52 - v8;
  v10 = objc_msgSend(v0, "predicateDescriptor", v7);
  objc_msgSend(v0, "options");
  if (objc_msgSend(v10, "type"))
  {
LABEL_35:
    if (qword_100837510 != -1)
      swift_once(&qword_100837510, sub_10045E1D0);
    v49 = sub_10001AAA8((uint64_t)v2, (uint64_t)qword_10084B2F0);
    ((void (*)(char *, uint64_t, id))v3[2])(v9, v49, v2);
    v50 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    v51 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
    sub_1004A14D8((uint64_t)"unknown type", 12, 2uLL, v50, v51);
    __break(1u);
    return;
  }
  v54 = v5;
  v58 = v1;
  if (qword_100837518 != -1)
    goto LABEL_17;
  while (1)
  {
    v11 = (id)qword_100871F40;

    v12 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
    v13 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v12), "entity");
    objc_msgSend(v13, "setEntity:", v14);

    objc_msgSend(v13, "setAffectedStores:", 0);
    v57 = v11;
    objc_msgSend(v13, "setPredicate:", v11);
    v15 = objc_msgSend(v0, "sortDescriptors");
    v16 = sub_1000151B0(0, &qword_10084B308, REMListSortDescriptor_ptr);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

    if ((unint64_t)v17 >> 62)
      break;
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v18)
      goto LABEL_22;
LABEL_5:
    v61 = (unint64_t)_swiftEmptyArrayStorage;
    v0 = &v61;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    if (v18 < 0)
    {
      __break(1u);
LABEL_32:
      if (qword_100837510 != -1)
        swift_once(&qword_100837510, sub_10045E1D0);
      v45 = v56;
      v46 = sub_10001AAA8((uint64_t)v56, (uint64_t)qword_10084B2F0);
      ((void (*)(char *, uint64_t, id))v53[2])(v54, v46, v45);
      v9 = (char *)_swiftEmptyArrayStorage;
      v47 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      v48 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
      sub_1004A14D8((uint64_t)"unknown type", 12, 2uLL, v47, v48);
      __break(1u);
      goto LABEL_35;
    }
    v55 = v13;
    v56 = v2;
    v53 = v3;
    v19 = 0;
    v2 = (_QWORD *)(v17 & 0xC000000000000001);
    v3 = NSSortDescriptor_ptr;
    while (v18 != v19)
    {
      if (v2)
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
      else
        v24 = *(id *)(v17 + 8 * v19 + 32);
      v25 = v24;
      v26 = objc_msgSend(v24, "type");
      v27 = &unk_1006BCC78;
      if (v26)
      {
        if (v26 != (id)1)
          goto LABEL_32;
        v27 = &unk_1006BCC48;
      }
      ++v19;
      sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
      KeyPath = swift_getKeyPath(v27);
      v21 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, objc_msgSend(v25, "ascending"));

      v0 = &v61;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v10 = *(id *)(v61 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v21);
      specialized ContiguousArray._endMutation()(v23);
      if (v18 == v19)
      {
        v28 = (_QWORD *)v61;
        swift_bridgeObjectRelease();
        v13 = v55;
        v2 = v56;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_17:
    swift_once(&qword_100837518, sub_10045E260);
  }
  if (v17 < 0)
    v29 = v17;
  else
    v29 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v17);
  v18 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease();
  if (v18)
    goto LABEL_5;
LABEL_22:
  swift_bridgeObjectRelease();
  v28 = _swiftEmptyArrayStorage;
LABEL_23:
  v61 = (unint64_t)v28;
  v30 = objc_msgSend((id)objc_opt_self(REMListSortDescriptor), "sortDescriptorSortingByOrderingInAccountAscending:", 1);
  sub_10045E2EC();
  v32 = v31;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
  v34 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v33 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v34 >= v33 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1);
  v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v32);
  specialized Array._endMutation()(v35);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v13, "setSortDescriptors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  if (qword_100837510 != -1)
    swift_once(&qword_100837510, sub_10045E1D0);
  sub_10001AAA8((uint64_t)v2, (uint64_t)qword_10084B2F0);
  v37 = v13;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(8, -1);
    v56 = v30;
    v42 = (_QWORD *)v41;
    *(_DWORD *)v40 = 138412290;
    v59 = v37;
    v43 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
    *v42 = v37;

    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Created list fetchRequest {fetchRequest: %@}", v40, 0xCu);
    v44 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v42, 1, v44);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

  }
}

void sub_100460584()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  sub_10045FEA0();
  if (!v0)
  {
    v2 = v1;
    v5 = sub_10001A630(&qword_10084B310);
    v4[0] = v2;
    v3 = v2;
    throwingCast<A>(_:as:failureMessage:)(&v6, v4, v5, 0, 0, v5);

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v4);
  }
}

NSObject *sub_10046061C@<X0>(void **a1@<X0>, NSObject **a2@<X8>)
{
  return sub_1000F4B44(a1, a2);
}

void sub_100460634(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_23;
      v12 = *(_QWORD *)(v2 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_23;
        v12 = *(_QWORD *)(v2 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_23;
          v12 = *(_QWORD *)(v2 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_5:
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9));
    sub_1001E190C(v10);
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_1004607A0(id *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t isUniquelyReferenced_nonNull_native;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  char v43;
  double v44;
  id v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  _QWORD *v58;
  uint64_t *v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  id v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;

  v64 = a5;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v62 = a2;
  v18 = sub_1002B18C8(v17, a2);

  v63 = a3;
  if (v18)
  {
    v61 = a7;
    v19 = *(id *)(v18 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID);
  }
  else
  {
    v20 = objc_msgSend(a3, "uncommitedElementsAccountID");
    if (!v20)
      return;
    v61 = a7;
    v19 = v20;
    v21 = v17;
    v22 = objc_msgSend(v17, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    v17 = v21;
    v23 = type metadata accessor for RDElementManualSortID(0);
    v18 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v18 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID, v16, v13);

    *(_QWORD *)(v18 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v19;
  }
  v24 = v19;
  v25 = sub_1002B1A08(v24, a4);

  if (v25)
  {
    v27 = *(_QWORD *)(v18 + 24);
    if (v27)
    {
      v28 = *(_QWORD *)(v18 + 16);
      v29 = *(_QWORD *)(v18 + 24);
    }
    else
    {
      v31._countAndFlagsBits = UUID.uuidString.getter(v26);
      v65 = 0x7C6C61636F6CLL;
      v66 = 0xE600000000000000;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v27 = 0;
      v28 = v65;
      v29 = v66;
    }
    v32 = v64;
    v33 = (_QWORD *)*v64;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v27);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
    *v32 = (uint64_t)v33;
    v35 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002C8224(0, v33[2] + 1, 1, v33);
      v33 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      *v64 = isUniquelyReferenced_nonNull_native;
    }
    v37 = v33[2];
    v36 = v33[3];
    if (v37 >= v36 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002C8224((_QWORD *)(v36 > 1), v37 + 1, 1, v33);
      v33 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      *v64 = isUniquelyReferenced_nonNull_native;
    }
    v33[2] = v37 + 1;
    v38 = &v33[2 * v37];
    v38[4] = v28;
    v38[5] = v29;
    v39 = *(_QWORD *)(v25 + 24);
    if (v39)
    {
      v40 = *(_QWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 24);
    }
    else
    {
      v42._countAndFlagsBits = UUID.uuidString.getter(isUniquelyReferenced_nonNull_native);
      v65 = 0x7C6C61636F6CLL;
      v66 = 0xE600000000000000;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v39 = 0;
      v40 = v65;
      v41 = v66;
    }
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v39);
    v43 = swift_isUniquelyReferenced_nonNull_native(*a6);
    v65 = *a6;
    *a6 = 0x8000000000000000;
    sub_10028B8BC(v40, v41, v28, v29, v43);
    *a6 = v65;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v44 = swift_bridgeObjectRelease().n128_u64[0];
    v45 = v63;
    v46 = objc_msgSend(v63, "secondaryLevelElementIDsByTopLevelElementID", v44);
    v47 = sub_1001A9820();
    v48 = sub_10001A630(&qword_10083DFA8);
    v49 = sub_10011A5DC();
    v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v46, v47, v48, v49);

    if (*(_QWORD *)(v50 + 16))
    {
      v51 = v35;
      v52 = sub_1002C66DC((uint64_t)v51);
      if ((v53 & 1) != 0)
      {
        v54 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v52);
        swift_bridgeObjectRetain(v54);

        swift_bridgeObjectRelease();
        v55 = v45;
        v56 = v62;
        swift_bridgeObjectRetain(v62);
        v57 = v55;
        v58 = sub_1004615B8(_swiftEmptyArrayStorage, v54, v56, v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v59 = v61;
        v60 = swift_isUniquelyReferenced_nonNull_native(*v61);
        v65 = *v59;
        *v59 = 0x8000000000000000;
        sub_10028C2A4((uint64_t)v58, v28, v29, v60);
        *v59 = v65;
        swift_release(v18);
        swift_release(v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }

    }
    swift_bridgeObjectRelease();
    swift_release(v18);
    swift_bridgeObjectRelease();
    v30 = v25;
  }
  else
  {
    v30 = v18;
  }
  swift_release(v30);
}

uint64_t sub_100460C5C(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t i;
  id v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v4 = a2;
  v5 = a1;
  if (a2 >> 62)
    goto LABEL_35;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  while (v6)
  {
    v31 = v6;
    v7 = 0;
    v34 = v4 + 32;
    v35 = v4 & 0xC000000000000001;
    v32 = a3;
    v33 = v4;
    while (1)
    {
      if (v35)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
        v9 = __OFADD__(v7++, 1);
        if (v9)
          break;
        goto LABEL_11;
      }
      v8 = *(id *)(v34 + 8 * v7);
      v9 = __OFADD__(v7++, 1);
      if (v9)
        break;
LABEL_11:
      v5 = (uint64_t)v8;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v11 >= v10 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1);
      v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v5);
      specialized Array._endMutation()(v12);
      v13 = objc_msgSend(a3, "secondaryLevelElementIDsByTopLevelElementID");
      v14 = sub_1001A9820();
      v15 = sub_10001A630(&qword_10083DFA8);
      v16 = sub_10011A5DC();
      v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, v14, v15, v16);

      if (*(_QWORD *)(v17 + 16))
      {
        v18 = (id)v5;
        v19 = sub_1002C66DC((uint64_t)v18);
        if ((v20 & 1) == 0)
        {

          goto LABEL_5;
        }
        v21 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v19);
        swift_bridgeObjectRetain(v21);

        swift_bridgeObjectRelease();
        if ((unint64_t)v21 >> 62)
        {
          if (v21 < 0)
            v28 = v21;
          else
            v28 = v21 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v21);
          v5 = _CocoaArrayWrapper.endIndex.getter(v28);
          if (!v5)
            goto LABEL_31;
        }
        else
        {
          v5 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v21);
          if (!v5)
            goto LABEL_31;
        }
        if (v5 < 1)
          goto LABEL_34;
        for (i = 0; i != v5; ++i)
        {
          if ((v21 & 0xC000000000000001) != 0)
            v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v21);
          else
            v23 = *(id *)(v21 + 8 * i + 32);
          v24 = v23;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
          v26 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v25 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v26 >= v25 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1);
          v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24);
          specialized Array._endMutation()(v27);
        }
LABEL_31:
        swift_bridgeObjectRelease_n(v21, 2);

        a3 = v32;
        v4 = v33;
        v6 = v31;
        if (v7 == v31)
        {
LABEL_32:
          swift_bridgeObjectRelease();
          return a1;
        }
      }
      else
      {

LABEL_5:
        swift_bridgeObjectRelease();
        if (v7 == v6)
          goto LABEL_32;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    if (v4 < 0)
      v29 = v4;
    else
      v29 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = _CocoaArrayWrapper.endIndex.getter(v29);
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100460F60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  id v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  void *v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;

  v83 = a1;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v81 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v8);
  v78 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v82 = (char *)&v72 - v11;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v12 = a2;
    else
      v12 = a2 & 0xFFFFFFFFFFFFFF8;
    v13 = __CocoaDictionary.makeIterator()(v12);
    v76 = 0;
    v14 = 0;
    v15 = 0;
    v16 = v13 | 0x8000000000000000;
  }
  else
  {
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v14 = ~v17;
    v18 = *(_QWORD *)(a2 + 64);
    v76 = a2 + 64;
    v19 = -v17;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v15 = v20 & v18;
    v16 = a2;
  }
  swift_bridgeObjectRetain(a2);
  v22 = 0;
  v74 = v16 & 0x7FFFFFFFFFFFFFFFLL;
  v75 = (unint64_t)(v14 + 64) >> 6;
  v73 = (char *)&type metadata for Swift.AnyObject + 8;
  v79 = a3;
  v80 = v16;
  v77 = v14;
  if ((v16 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_34:
  v31 = __CocoaDictionary.Iterator.next()(v21);
  if (!v31)
    goto LABEL_56;
  v33 = v32;
  swift_unknownObjectRelease(v31);
  v89 = v33;
  v34 = type metadata accessor for RDAccountManualSortID(0);
  swift_unknownObjectRetain(v33);
  swift_dynamicCast(&v87, &v89, v73, v34, 7);
  v30 = v87;
  swift_unknownObjectRelease(v33);
  v26 = v22;
  v24 = v15;
  if (!v30)
    goto LABEL_56;
  while (1)
  {
    v84 = v24;
    v85 = v26;
    v35 = *(_QWORD *)(v30 + 24);
    if (v35)
    {
      v36 = *(_QWORD *)(v30 + 16);
      v86 = *(_QWORD *)(v30 + 24);
    }
    else
    {
      v37._countAndFlagsBits = UUID.uuidString.getter(0);
      v87 = 0x7C6C61636F6CLL;
      v88 = 0xE600000000000000;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v35 = 0;
      v36 = v87;
      v86 = v88;
    }
    v38 = objc_msgSend(a3, "modifiedDate", swift_bridgeObjectRetain(v35).n128_f64[0]);
    v39 = (uint64_t)v82;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

    v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v40(v39, 0, 1, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v39, 1, v5) == 1)
    {
      v41 = v14;
      sub_10000882C(v39, (uint64_t *)&unk_1008380D0);
      v42 = v83;
      swift_bridgeObjectRetain(v83);
      v43 = sub_10001A6DC(v36, v86);
      v45 = v44;
      swift_bridgeObjectRelease();
      v46 = (uint64_t)v78;
      if ((v45 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
        v87 = v42;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1002D8A54();
          v42 = v87;
        }
        v48 = swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v6 + 32))(v46, *(_QWORD *)(v42 + 56) + *(_QWORD *)(v6 + 72) * v43, v5, v48);
        v83 = v42;
        sub_10028A818(v43, v42);
        swift_bridgeObjectRelease();
        v23 = 0;
      }
      else
      {
        v23 = 1;
      }
      v14 = v41;
      v40(v46, v23, 1, v5);
      swift_bridgeObjectRelease();
      sub_10000882C(v46, (uint64_t *)&unk_1008380D0);
      v21 = swift_release(v30);
      v15 = v84;
      v22 = v85;
      a3 = v79;
      v16 = v80;
      if ((v80 & 0x8000000000000000) != 0)
        goto LABEL_34;
    }
    else
    {
      v49 = v39;
      v50 = v6;
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
      v52 = v5;
      v51(v81, v49, v5);
      v53 = v83;
      v54 = swift_isUniquelyReferenced_nonNull_native(v83);
      v87 = v53;
      v56 = sub_10001A6DC(v36, v86);
      v57 = *(_QWORD *)(v53 + 16);
      v58 = (v55 & 1) == 0;
      v59 = v57 + v58;
      if (__OFADD__(v57, v58))
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v60 = v55;
      if (*(_QWORD *)(v53 + 24) >= v59)
      {
        if ((v54 & 1) == 0)
          sub_1002D8A54();
      }
      else
      {
        sub_1002D19A8(v59, v54);
        v61 = sub_10001A6DC(v36, v86);
        if ((v60 & 1) != (v62 & 1))
          goto LABEL_60;
        v56 = v61;
      }
      v16 = v80;
      v63 = (_QWORD *)v87;
      if ((v60 & 1) != 0)
      {
        v6 = v50;
        v64 = *(_QWORD *)(v87 + 56) + *(_QWORD *)(v50 + 72) * v56;
        v5 = v52;
        (*(void (**)(unint64_t, char *, uint64_t))(v50 + 40))(v64, v81, v52);
      }
      else
      {
        *(_QWORD *)(v87 + 8 * (v56 >> 6) + 64) |= 1 << v56;
        v65 = (uint64_t *)(v63[6] + 16 * v56);
        *v65 = v36;
        v66 = v86;
        v65[1] = v86;
        v6 = v50;
        v67 = v63[7] + *(_QWORD *)(v50 + 72) * v56;
        v5 = v52;
        v51((char *)v67, (uint64_t)v81, v52);
        v68 = v63[2];
        v69 = __OFADD__(v68, 1);
        v70 = v68 + 1;
        if (v69)
          goto LABEL_58;
        v63[2] = v70;
        swift_bridgeObjectRetain(v66);
      }
      v83 = v87;
      swift_release(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v84;
      v22 = v85;
      a3 = v79;
      v14 = v77;
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_34;
    }
LABEL_14:
    if (!v15)
      break;
    v24 = (v15 - 1) & v15;
    v25 = __clz(__rbit64(v15)) | (v22 << 6);
    v26 = v22;
LABEL_32:
    v30 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v25);
    swift_retain();
    if (!v30)
      goto LABEL_56;
  }
  v27 = v22 + 1;
  if (__OFADD__(v22, 1))
    goto LABEL_59;
  if (v27 >= v75)
    goto LABEL_56;
  v28 = *(_QWORD *)(v76 + 8 * v27);
  v26 = v22 + 1;
  if (v28)
    goto LABEL_31;
  v26 = v22 + 2;
  if (v22 + 2 >= v75)
    goto LABEL_56;
  v28 = *(_QWORD *)(v76 + 8 * v26);
  if (v28)
    goto LABEL_31;
  v26 = v22 + 3;
  if (v22 + 3 >= v75)
    goto LABEL_56;
  v28 = *(_QWORD *)(v76 + 8 * v26);
  if (v28)
    goto LABEL_31;
  v26 = v22 + 4;
  if (v22 + 4 >= v75)
    goto LABEL_56;
  v28 = *(_QWORD *)(v76 + 8 * v26);
  if (v28)
    goto LABEL_31;
  v26 = v22 + 5;
  if (v22 + 5 >= v75)
    goto LABEL_56;
  v28 = *(_QWORD *)(v76 + 8 * v26);
  if (v28)
  {
LABEL_31:
    v24 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v26 << 6);
    goto LABEL_32;
  }
  v29 = v22 + 6;
  while (v75 != v29)
  {
    v28 = *(_QWORD *)(v76 + 8 * v29++);
    if (v28)
    {
      v26 = v29 - 1;
      goto LABEL_31;
    }
  }
LABEL_56:
  sub_1000C6560(v16);
  return v83;
}

_QWORD *sub_1004615B8(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  id v25;
  id v26;
  char *v27;
  uint64_t v28;
  Swift::String v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v5 = v4;
  v42 = a4;
  v44 = a3;
  v47 = a1;
  v7 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin(v7);
  v38 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a2 >> 62)
    goto LABEL_32;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  while (v9)
  {
    v36 = v5;
    v45 = v44 & 0xC000000000000001;
    v46 = a2 & 0xC000000000000001;
    v10 = v44 & 0xFFFFFFFFFFFFFF8;
    if (v44 < 0)
      v10 = v44;
    v41 = v10;
    v11 = 4;
    v37 = (char *)&type metadata for Swift.AnyObject + 8;
    v43 = a2;
    while (1)
    {
      v12 = v46 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a2) : *(id *)(a2 + 8 * v11);
      v13 = v12;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      if (v45)
      {
        v15 = v12;
        v16 = __CocoaDictionary.lookup(_:)(v15, v41);
        if (!v16)
          goto LABEL_21;
        v17 = v16;
        v50 = v16;
        v18 = type metadata accessor for RDElementManualSortID(0);
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(&v48, &v50, v37, v18, 7);
        v19 = v48;
        swift_unknownObjectRelease(v17);

        if (v19)
          goto LABEL_15;
      }
      else
      {
        if (!*(_QWORD *)(v44 + 16))
          goto LABEL_22;
        v22 = sub_1002C66DC((uint64_t)v12);
        if ((v23 & 1) == 0)
        {
LABEL_21:

          goto LABEL_22;
        }
        v19 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v22);
        swift_retain();

        if (v19)
        {
LABEL_15:
          v20 = *(_QWORD *)(v19 + 24);
          if (!v20)
            goto LABEL_24;
          goto LABEL_16;
        }
      }
LABEL_22:
      v24 = objc_msgSend(v42, "uncommitedElementsAccountID", v36);
      if (v24)
      {
        v25 = v24;
        v26 = objc_msgSend(v13, "uuid");
        v27 = v38;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

        v28 = type metadata accessor for RDElementManualSortID(0);
        v19 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
        *(_QWORD *)(v19 + 16) = 0;
        *(_QWORD *)(v19 + 24) = 0;
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v19 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID, v27, v40);

        *(_QWORD *)(v19 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v25;
        v20 = *(_QWORD *)(v19 + 24);
        if (!v20)
        {
LABEL_24:
          v29._countAndFlagsBits = UUID.uuidString.getter(v20);
          v48 = 0x7C6C61636F6CLL;
          v49 = 0xE600000000000000;
          String.append(_:)(v29);
          swift_bridgeObjectRelease();
          v20 = 0;
          v5 = v48;
          v21 = v49;
          goto LABEL_25;
        }
LABEL_16:
        v5 = *(_QWORD *)(v19 + 16);
        v21 = v20;
LABEL_25:
        swift_bridgeObjectRetain(v20);
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v47 = sub_1002C8224(0, v47[2] + 1, 1, v47);
        v31 = v47[2];
        v30 = v47[3];
        if (v31 >= v30 >> 1)
          v47 = sub_1002C8224((_QWORD *)(v30 > 1), v31 + 1, 1, v47);
        v32 = v47;
        v47[2] = v31 + 1;
        v33 = &v32[2 * v31];
        v33[4] = v5;
        v33[5] = v21;

        swift_release(v19);
        a2 = v43;
        goto LABEL_7;
      }

LABEL_7:
      ++v11;
      if (v14 == v9)
        goto LABEL_36;
    }
    __break(1u);
LABEL_32:
    if (a2 < 0)
      v34 = a2;
    else
      v34 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v9 = _CocoaArrayWrapper.endIndex.getter(v34);
  }
LABEL_36:
  swift_bridgeObjectRelease();
  return v47;
}

void sub_100461958(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  double v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  _QWORD *v57;
  unint64_t v58;
  int64_t v59;
  void *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, unint64_t, uint64_t, __n128);
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v79;
  unint64_t v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  id v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  _QWORD *v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  char *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;

  v115 = a2;
  v105 = a5;
  v113 = type metadata accessor for Date(0);
  v111 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v117 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_10001A630(&qword_10084B318);
  __chkstk_darwin(v110);
  v112 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v116 = (uint64_t *)((char *)&v97 - v12);
  __chkstk_darwin(v13);
  v109 = (char *)&v97 - v14;
  v114 = type metadata accessor for REMManualOrdering.ElementType(0);
  v15 = *(_QWORD *)(v114 - 8);
  *(_QWORD *)&v16 = __chkstk_darwin(v114).n128_u64[0];
  v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = objc_msgSend(a1, "topLevelElementIDs", v16);
  v20 = sub_1001A9820();
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

  v22 = a1;
  v23 = sub_100460C5C((uint64_t)_swiftEmptyArrayStorage, v21, v22);
  v24 = a4;
  swift_bridgeObjectRelease();

  sub_10011F104(v23);
  v26 = v25;
  v27 = swift_bridgeObjectRelease();
  REMManualOrdering.elementType.getter(v27);
  v28 = sub_10018DE58(v26, (uint64_t)v18, (uint64_t)v24, 100);
  if (v5)
  {

    swift_release(a3);
    swift_bridgeObjectRelease();
    v29 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v18, v114, v29);
    return;
  }
  v30 = v28;
  v103 = a3;
  v104 = v24;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v114);
  *(_QWORD *)&v31 = swift_bridgeObjectRelease().n128_u64[0];
  v121 = _swiftEmptyArrayStorage;
  v119 = _swiftEmptyDictionarySingleton;
  v120 = _swiftEmptyDictionarySingleton;
  v32 = objc_msgSend(v22, "topLevelElementIDs", v31);
  v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v20);

  if (!((unint64_t)v33 >> 62))
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v33);
    v35 = v115;
    if (v34)
      goto LABEL_5;
LABEL_15:
    swift_bridgeObjectRelease_n(v33, 2);
    swift_bridgeObjectRelease();
    v40 = sub_1002B0C40((uint64_t)_swiftEmptyArrayStorage);
    v41 = v22;
    v42 = sub_100460F60(v40, v35, v41);
    v100 = 0;
    swift_bridgeObjectRelease();
    v98 = v41;

    v43 = v120;
    v44 = v119;
    v102 = v121;
    swift_bridgeObjectRetain(v121);
    v99 = v43;
    swift_bridgeObjectRetain(v43);
    v101 = v44;
    swift_bridgeObjectRetain(v44);
    v45 = (_QWORD *)sub_1002AF0A8((uint64_t)_swiftEmptyArrayStorage);
    v46 = *(_QWORD *)(v42 + 64);
    v106 = v42 + 64;
    v47 = 1 << *(_BYTE *)(v42 + 32);
    v48 = -1;
    if (v47 < 64)
      v48 = ~(-1 << v47);
    v49 = v48 & v46;
    v107 = (unint64_t)(v47 + 63) >> 6;
    v108 = v42;
    v50 = swift_bridgeObjectRetain(v42);
    v51 = 0;
    v52 = v112;
    v53 = v113;
    v55 = v110;
    v54 = v111;
    while (1)
    {
      v57 = v109;
      if (v49)
      {
        v114 = (v49 - 1) & v49;
        v115 = v51;
        v58 = __clz(__rbit64(v49)) | (v51 << 6);
      }
      else
      {
        v59 = v51 + 1;
        if (__OFADD__(v51, 1))
          goto LABEL_54;
        v61 = v103;
        v60 = v104;
        v62 = v105;
        if (v59 >= v107)
        {
LABEL_49:
          swift_release(v108);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain(v45);
          v92 = sub_10011E910(v91);
          v94 = (uint64_t)v101;
          v93 = v102;
          v95 = v100;
          sub_1000F3AF0(v102, (uint64_t)v101, v92);
          if (v95)
          {

            swift_release(v61);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n(v94, 2);
            swift_bridgeObjectRelease_n(v99, 2);
            swift_bridgeObjectRelease_n(v93, 2);
          }
          else
          {
            swift_bridgeObjectRelease();
            v96 = v99;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_release(v61);
            *v62 = v93;
            v62[1] = v96;
            v62[2] = v94;
            v62[3] = v45;
            v62[4] = v92;
          }
          return;
        }
        v63 = *(_QWORD *)(v106 + 8 * v59);
        v64 = v51 + 1;
        if (!v63)
        {
          v64 = v51 + 2;
          if (v51 + 2 >= v107)
            goto LABEL_49;
          v63 = *(_QWORD *)(v106 + 8 * v64);
          if (!v63)
          {
            v64 = v51 + 3;
            if (v51 + 3 >= v107)
              goto LABEL_49;
            v63 = *(_QWORD *)(v106 + 8 * v64);
            if (!v63)
            {
              v64 = v51 + 4;
              if (v51 + 4 >= v107)
                goto LABEL_49;
              v63 = *(_QWORD *)(v106 + 8 * v64);
              if (!v63)
              {
                v65 = v51 + 5;
                if (v51 + 5 >= v107)
                  goto LABEL_49;
                v63 = *(_QWORD *)(v106 + 8 * v65);
                if (!v63)
                {
                  while (1)
                  {
                    v64 = v65 + 1;
                    if (__OFADD__(v65, 1))
                      goto LABEL_55;
                    if (v64 >= v107)
                      goto LABEL_49;
                    v63 = *(_QWORD *)(v106 + 8 * v64);
                    ++v65;
                    if (v63)
                      goto LABEL_37;
                  }
                }
                v64 = v51 + 5;
              }
            }
          }
        }
LABEL_37:
        v114 = (v63 - 1) & v63;
        v115 = v64;
        v58 = __clz(__rbit64(v63)) + (v64 << 6);
        v52 = v112;
        v53 = v113;
      }
      v66 = (uint64_t *)(*(_QWORD *)(v108 + 48) + 16 * v58);
      v68 = *v66;
      v67 = v66[1];
      v69 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v54 + 16);
      v69(&v109[*(int *)(v55 + 48)], *(_QWORD *)(v108 + 56) + *(_QWORD *)(v54 + 72) * v58, v53, v50);
      *v57 = v68;
      v57[1] = v67;
      v70 = v116;
      sub_1004624E8((uint64_t)v57, (uint64_t)v116);
      v71 = *(int *)(v55 + 48);
      v72 = &v52[v71];
      v73 = (char *)v70 + v71;
      v75 = *v70;
      v74 = v70[1];
      ((void (*)(char *, char *, uint64_t))v69)(v72, v73, v53);
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v117, v72, v53);
      swift_bridgeObjectRetain_n(v74, 2);
      swift_bridgeObjectRetain(v67);
      v77 = Date.timeIntervalSinceReferenceDate.getter(v76);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
      v118 = v45;
      v80 = sub_10001A6DC(v75, v74);
      v81 = v45[2];
      v82 = (v79 & 1) == 0;
      v83 = v81 + v82;
      if (__OFADD__(v81, v82))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v84 = v79;
      if (v45[3] >= v83)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v45 = v118;
          if ((v79 & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          sub_1002D5F88();
          v45 = v118;
          if ((v84 & 1) != 0)
            goto LABEL_18;
        }
      }
      else
      {
        sub_1002CC238(v83, isUniquelyReferenced_nonNull_native);
        v85 = sub_10001A6DC(v75, v74);
        if ((v84 & 1) != (v86 & 1))
          goto LABEL_57;
        v80 = v85;
        v45 = v118;
        if ((v84 & 1) != 0)
        {
LABEL_18:
          *(double *)(v45[7] + 8 * v80) = v77;
          goto LABEL_19;
        }
      }
      v45[(v80 >> 6) + 8] |= 1 << v80;
      v87 = (uint64_t *)(v45[6] + 16 * v80);
      *v87 = v75;
      v87[1] = v74;
      *(double *)(v45[7] + 8 * v80) = v77;
      v88 = v45[2];
      v89 = __OFADD__(v88, 1);
      v90 = v88 + 1;
      if (v89)
        goto LABEL_53;
      v45[2] = v90;
      swift_bridgeObjectRetain(v74);
LABEL_19:
      swift_bridgeObjectRelease_n(v74, 2);
      v56 = swift_bridgeObjectRelease();
      v54 = v111;
      v53 = v113;
      (*(void (**)(char *, uint64_t, __n128))(v111 + 8))(v117, v113, v56);
      sub_10000882C((uint64_t)v116, &qword_10084B318);
      v55 = v110;
      v52 = v112;
      v49 = v114;
      v51 = v115;
    }
  }
  if (v33 < 0)
    v39 = v33;
  else
    v39 = v33 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v33);
  v34 = _CocoaArrayWrapper.endIndex.getter(v39);
  v35 = v115;
  if (!v34)
    goto LABEL_15;
LABEL_5:
  if (v34 >= 1)
  {
    v36 = 0;
    do
    {
      if ((v33 & 0xC000000000000001) != 0)
        v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v33);
      else
        v37 = *(id *)(v33 + 8 * v36 + 32);
      v38 = v37;
      ++v36;
      v118 = v37;
      sub_1004607A0((id *)&v118, v30, v22, v35, (uint64_t *)&v121, (uint64_t *)&v119, (uint64_t *)&v120);

    }
    while (v34 != v36);
    goto LABEL_15;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10046218C(char a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v39;

  if ((a1 & 1) == 0)
  {
    swift_bridgeObjectRetain(a3);
    sub_100460634(v26);
    v28 = v27;
    swift_bridgeObjectRelease(a3);
    v39 = a2;
    swift_bridgeObjectRetain(a2);
    sub_1001E190C(v28);
    goto LABEL_25;
  }
  v6 = _swiftEmptyArrayStorage;
  v39 = _swiftEmptyArrayStorage;
  v7 = a2[2];
  if (v7)
  {
    swift_bridgeObjectRetain_n(a2, 2);
    v9 = a2 + 5;
    while (1)
    {
      if (*(_QWORD *)(a4 + 16))
      {
        v11 = *(v9 - 1);
        v10 = *v9;
        swift_bridgeObjectRetain_n(*v9, 2);
        v12 = sub_10001A6DC(v11, v10);
        if ((v13 & 1) != 0)
        {
          v14 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * v12);
          v16 = *v14;
          v15 = v14[1];
          swift_bridgeObjectRetain(v15);
          swift_bridgeObjectRelease(v10);
          if (v16 == 0x6C61636F6CLL && v15 == 0xE500000000000000)
          {
            swift_bridgeObjectRelease(v10);
            swift_bridgeObjectRelease(0xE500000000000000);
            goto LABEL_5;
          }
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, 0x6C61636F6CLL, 0xE500000000000000, 0);
          swift_bridgeObjectRelease(v15);
          if ((v18 & 1) != 0)
            goto LABEL_20;
          v19 = v39;
          swift_bridgeObjectRetain(v10);
          if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
            v19 = sub_1002C8224(0, v39[2] + 1, 1, v39);
          v21 = v19[2];
          v20 = v19[3];
          if (v21 >= v20 >> 1)
            v19 = sub_1002C8224((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
          v19[2] = v21 + 1;
          v22 = &v19[2 * v21];
          v22[4] = v11;
          v22[5] = v10;
          v39 = v19;
          if (!*(_QWORD *)(a3 + 16))
            goto LABEL_20;
          swift_bridgeObjectRetain(v10);
          v23 = sub_10001A6DC(v11, v10);
          if ((v24 & 1) != 0)
          {
            v25 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v23);
            swift_bridgeObjectRetain(v25);
            swift_bridgeObjectRelease(v10);
            sub_1001E190C(v25);
LABEL_20:
            swift_bridgeObjectRelease(v10);
            goto LABEL_5;
          }
        }
        swift_bridgeObjectRelease_n(v10, 2);
      }
LABEL_5:
      v9 += 2;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n(a2, 2);
LABEL_25:
        v6 = v39;
        break;
      }
    }
  }
  v29 = v6[2];
  if (v29)
  {
    v30 = v6 + 5;
    do
    {
      v32 = *(v30 - 1);
      v31 = *v30;
      swift_bridgeObjectRetain(*v30);
      v33._countAndFlagsBits = 0x7C6C61636F6CLL;
      v33._object = (void *)0xE600000000000000;
      if (String.hasPrefix(_:)(v33))
      {
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_1001C1B0C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v35 = _swiftEmptyArrayStorage[2];
        v34 = _swiftEmptyArrayStorage[3];
        if (v35 >= v34 >> 1)
          sub_1001C1B0C(v34 > 1, v35 + 1, 1);
        _swiftEmptyArrayStorage[2] = v35 + 1;
        v36 = &_swiftEmptyArrayStorage[2 * v35];
        v36[4] = v32;
        v36[5] = v31;
      }
      else
      {
        swift_bridgeObjectRelease(v31);
      }
      v30 += 2;
      --v29;
    }
    while (v29);
  }
  swift_bridgeObjectRelease(v6);
  v37 = sub_10011EE40((uint64_t)_swiftEmptyArrayStorage);
  swift_release(_swiftEmptyArrayStorage);
  return v37;
}

uint64_t sub_1004624E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10084B318);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100462530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084B320);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084B320);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004625C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  xpc_object_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];
  _QWORD v41[4];
  _QWORD v42[2];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 16);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    swift_once(&qword_100837520, sub_100462530);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084B320);
    swift_errorRetain(v5);
    v10 = swift_errorRetain(v5);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v39 = (uint64_t)v5;
      v40[0] = v14;
      *(_DWORD *)v13 = 136446210;
      swift_errorRetain(v5);
      v15 = sub_10001A630((uint64_t *)&unk_10083AA20);
      v16 = String.init<A>(describing:)(&v39, v15);
      v18 = v17;
      v39 = sub_10001A820(v16, v17, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40);
      swift_bridgeObjectRelease(v18);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error updating significantTimeChageNotification {error: %{public}s}", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      swift_errorRelease(v5);
      return;
    }
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    goto LABEL_24;
  }
  v41[0] = 0xD00000000000002ELL;
  v41[1] = 0x8000000100704B10;
  v41[3] = 0;
  v42[0] = 0;
  v41[2] = 0;
  *(_QWORD *)((char *)v42 + 6) = 0;
  sub_100356F14((uint64_t)v41, (uint64_t)sub_100462B7C, 0);
  v19 = *(unsigned __int8 *)(v1 + 72);
  if ((v8 & 1) != 0)
  {
    if ((v19 & 1) == 0)
    {
      *(_BYTE *)(v1 + 72) = 1;
      if (qword_100837520 != -1)
        swift_once(&qword_100837520, sub_100462530);
      v20 = type metadata accessor for Logger(0);
      v21 = sub_10001AAA8(v20, (uint64_t)qword_10084B320);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "ENABLE significantTimeChageNotification XPC event", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      v25 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_string(v25, "Notification", "SignificantTimeChangeNotification");
      xpc_set_event("com.apple.notifyd.matching", "SignificantTimeChangeNotification", v25);
      swift_unknownObjectRelease(v25);
      return;
    }
    if (qword_100837520 != -1)
      swift_once(&qword_100837520, sub_100462530);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10001AAA8(v31, (uint64_t)qword_10084B320);
    v11 = Logger.logObject.getter(v32);
    v28 = static os_log_type_t.default.getter(v11);
    if (!os_log_type_enabled(v11, v28))
    {
LABEL_24:

      return;
    }
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    v30 = "ENABLE significantTimeChageNotification XPC event. Skipping because values match";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v11, v28, v30, v29, 2u);
    swift_slowDealloc(v29, -1, -1);
    goto LABEL_24;
  }
  if (v19 != 2 && (v19 & 1) == 0)
  {
    if (qword_100837520 != -1)
      swift_once(&qword_100837520, sub_100462530);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10001AAA8(v26, (uint64_t)qword_10084B320);
    v11 = Logger.logObject.getter(v27);
    v28 = static os_log_type_t.default.getter(v11);
    if (!os_log_type_enabled(v11, v28))
      goto LABEL_24;
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    v30 = "DISABLE significantTimeChageNotification XPC event. Skipping because values match";
    goto LABEL_23;
  }
  *(_BYTE *)(v1 + 72) = 0;
  if (qword_100837520 != -1)
    swift_once(&qword_100837520, sub_100462530);
  v33 = type metadata accessor for Logger(0);
  v34 = sub_10001AAA8(v33, (uint64_t)qword_10084B320);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "DISABLE significantTimeChageNotification XPC event", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

  xpc_set_event("com.apple.notifyd.matching", "SignificantTimeChangeNotification", 0);
}

void sub_100462B7C(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = _s10PredicatesOMa(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v5, v6, 61);
  sub_10000D2C0();
  v8 = v7;
  sub_1000CACA8((uint64_t)v5);
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v10 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v10), "entity");
  objc_msgSend(v9, "setEntity:", v11);

  objc_msgSend(v9, "setPredicate:", v8);
  objc_msgSend(v9, "setResultType:", 1);

  objc_msgSend(v9, "setFetchLimit:", 1);
  v12 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
  v13 = NSManagedObjectContext.fetch<A>(_:)(v9, v12);
  if (v1)
  {

  }
  else
  {
    v14 = v13;
    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0)
        v16 = v13;
      else
        v16 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v15 = _CocoaArrayWrapper.endIndex.getter(v16);

      swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease(v13);

    }
    *a1 = v15 != 0;
  }
}

uint64_t sub_100462D54()
{
  uint64_t v0;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 73, 7);
}

uint64_t type metadata accessor for RDDynamicSignificantTimeNotificationEngine()
{
  return objc_opt_self(_TtC7remindd42RDDynamicSignificantTimeNotificationEngine);
}

ValueMetadata *type metadata accessor for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter()
{
  return &type metadata for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter;
}

void sub_100462DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100462DCC(a1, a2, a3);
}

void sub_100462DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  double v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  Class v24;
  _QWORD v25[4];
  uint64_t v26;

  v4 = (*(uint64_t (**)(void))(a3 + 24))();
  if (v3)
    return;
  v5 = (void *)v4;
  v6 = sub_10001A630((uint64_t *)&unk_100839E80);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 32) = 0x696669746E656469;
  *(_QWORD *)(v7 + 40) = 0xEA00000000007265;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v9 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  v10 = NSManagedObjectContext.fetch<A>(_:)(v5, v9);
  v25[3] = sub_10001A630(&qword_10083FCF0);
  v25[0] = v10;
  v11 = sub_10001A630(&qword_10084B3F0);
  throwingCast<A>(_:as:failureMessage:)(&v26, v25, v11, 0, 0, v11);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v25);
  v12 = v26;
  v25[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0)
      v22 = v26;
    else
      v22 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v13 = _CocoaArrayWrapper.endIndex.getter(v22);
    if (v13)
      goto LABEL_6;
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = objc_allocWithZone((Class)REMFetchResult);
    sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v24 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v23, "initWithRequestedObjectIDs:", v24, swift_bridgeObjectRelease().n128_f64[0]);

    return;
  }
  v13 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v26);
  if (!v13)
    goto LABEL_21;
LABEL_6:
  if (v13 >= 1)
  {
    for (i = 0; i != v13; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0)
      {
        v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v12);
      }
      else
      {
        v16 = *(void **)(v12 + 8 * i + 32);
        *(_QWORD *)&v17 = swift_unknownObjectRetain(v16).n128_u64[0];
      }
      v18 = objc_msgSend(v16, "remObjectID", v17, v25[0]);
      v19 = swift_unknownObjectRelease(v16);
      if (v18)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
        v21 = *(_QWORD *)((v25[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v20 = *(_QWORD *)((v25[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v21 >= v20 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1);
        v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
        specialized Array._endMutation()(v15);
      }
    }
    goto LABEL_21;
  }
  __break(1u);
}

NSString sub_1004630EC(void *a1)
{
  NSString *v1;
  uint64_t v2;
  NSString v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  id v8;
  id v9;
  void *v10;
  _QWORD *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t MetatypeMetadata;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t ObjCClassFromMetadata;
  uint64_t v32;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  NSObject *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  objc_class *v49;
  Class isa;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  uint64_t v63;

  v4 = *v1;
  v62 = 0;
  v5 = objc_msgSend(a1, "remObjectIDWithError:", &v62);
  v6 = v62;
  if (!v5)
  {
    v27 = v62;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v28);
    return v4;
  }
  v7 = v5;
  v8 = v62;
  v9 = objc_msgSend(a1, "account");
  if (!v9
    || (v10 = v9, v11 = objc_msgSend(v9, "remObjectID"), v10, !v11))
  {
    if (qword_100837530 != -1)
      swift_once(&qword_100837530, sub_10046383C);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10084B410);
    v11 = v7;
    v18 = Logger.logObject.getter(v11);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      v59 = swift_slowAlloc(32, -1);
      v62 = v4;
      v63 = v59;
      *(_DWORD *)v20 = 136315394;
      MetatypeMetadata = swift_getMetatypeMetadata(v4);
      v23 = String.init<A>(describing:)(&v62, MetatypeMetadata);
      v62 = (id)sub_10001A820(v23, v24, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2112;
      v62 = v11;
      v25 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      *v21 = v7;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s: cdSmartListSection.account is nil {cdSmartListSection.remObjectID: %@}", (uint8_t *)v20, 0x16u);
      v26 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v21, 1, v26);
      swift_slowDealloc(v21, -1, -1);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

    }
    v29 = (void *)objc_opt_self(REMError);
    v30 = type metadata accessor for REMCDSmartListSection();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v30);
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v29, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v4);

    swift_willThrow(v32);
    goto LABEL_14;
  }
  v12 = objc_msgSend(a1, "displayName");
  if (!v12)
  {
    if (qword_100837530 != -1)
      swift_once(&qword_100837530, sub_10046383C);
    v34 = type metadata accessor for Logger(0);
    sub_10001AAA8(v34, (uint64_t)qword_10084B410);
    v35 = v7;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v58 = (_QWORD *)swift_slowAlloc(8, -1);
      v60 = swift_slowAlloc(32, -1);
      v62 = v4;
      v63 = v60;
      *(_DWORD *)v38 = 136315394;
      v39 = swift_getMetatypeMetadata(v4);
      v61 = v7;
      v40 = String.init<A>(describing:)(&v62, v39);
      v62 = (id)sub_10001A820(v40, v41, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2112;
      v62 = v35;
      v42 = v36;
      v43 = v35;
      v44 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      *v58 = v61;

      v35 = v43;
      _os_log_impl((void *)&_mh_execute_header, v42, v37, "%s: cdSmartListSection.displayName is nil {cdSmartListSection.remObjectID: %@}", (uint8_t *)v38, 0x16u);
      v45 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v58, 1, v45);
      swift_slowDealloc(v58, -1, -1);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

    }
    v54 = (void *)objc_opt_self(REMError);
    v55 = type metadata accessor for REMCDSmartListSection();
    v56 = swift_getObjCClassFromMetadata(v55);
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v54, "unexpectedNilPropertyWithClass:property:", v56, v4);

    swift_willThrow(v57);
LABEL_14:

    return v4;
  }
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v4 = v15;

  v16 = sub_1004640F0(a1, v7, v11, v14, (uint64_t)v4);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = v16;
    swift_bridgeObjectRelease();
    v47 = v46;
    objc_msgSend(v47, "setMinimumSupportedVersion:", objc_msgSend(a1, "minimumSupportedVersion"));

    v48 = v47;
    objc_msgSend(v48, "setEffectiveMinimumSupportedVersion:", objc_msgSend(a1, "effectiveMinimumSupportedVersion"));

    objc_msgSend(v48, "setResolutionTokenMap:", 0);
    v4 = v48;
    v49 = (objc_class *)objc_msgSend(a1, "resolutionTokenMapData");
    isa = v49;
    if (v49)
    {
      v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v53 = v52;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A71C8(v51, v53);
    }
    objc_msgSend(v4, "setResolutionTokenMapData:", isa);

  }
  return v4;
}

uint64_t sub_100463818(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084B3F8, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_10046383C(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084B410, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

void sub_100463860()
{
  __asm { BR              X10 }
}

double sub_10046389C(uint64_t a1)
{
  double result;

  String.hash(into:)(a1, 0xD000000000000017, 0x80000001006F4060);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0x80000001006F4060).n128_u64[0];
  return result;
}

unint64_t sub_10046390C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004645F0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100463938()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100463968 + 4 * byte_1006BCD74[*v0]))();
}

void sub_100463968(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000001006F4060;
}

void sub_100463988(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "creationDate");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1004639AC(_QWORD *a1@<X8>)
{
  *a1 = 0x4E79616C70736964;
  a1[1] = 0xEB00000000656D61;
}

void sub_1004639D0(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0FB8;
}

unint64_t sub_1004639E0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004645F0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100463A04()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100463A34 + 4 * byte_1006BCD78[*v0]))(0x44497463656A626FLL, 0xE800000000000000);
}

unint64_t sub_100463A34()
{
  return 0xD000000000000017;
}

uint64_t sub_100463A50()
{
  return 0x6E6F697461657263;
}

uint64_t sub_100463A70()
{
  return 0x4E79616C70736964;
}

void sub_100463A90(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  char v6;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCBA0, v3);
  swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_100463AEC(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E0FE0;
}

void sub_100463AFC(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  char v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCBA0, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_100463B5C()
{
  sub_100463B78();
}

void sub_100463B78()
{
  JUMPOUT(0x100463C88);
}

_QWORD *sub_1004640F0(void *a1, _QWORD *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  _QWORD *v21;
  id v22;
  id v23;
  NSString v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t MetatypeMetadata;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t ObjCClassFromMetadata;
  NSString v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a4;
  v49 = *v5;
  v51 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a1, "smartList", v14);
  if (v17
    && (v18 = v17, v19 = objc_msgSend(v17, "remObjectID"), v18, v19))
  {
    v49 = v10;
    v20 = objc_allocWithZone((Class)REMSmartListSectionStorage);
    v21 = a2;
    v22 = a3;
    swift_bridgeObjectRetain(a5);
    v23 = v19;
    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(v20, "initWithObjectID:accountID:parentID:displayName:", v21, v22, v23, v24, swift_bridgeObjectRelease().n128_f64[0]);

    a2 = v25;
    v26 = objc_msgSend(a1, "creationDate");
    if (v26)
    {
      v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v28 = v49;
      v29 = v51;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v16, v12, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v16, 0, 1, v29);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v16, 1, v29) == 1)
      {
        isa = 0;
      }
      else
      {
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v29);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v16, 1, 1, v51);
      isa = 0;
    }
    objc_msgSend(a2, "setCreationDate:", isa);

  }
  else
  {
    if (qword_100837530 != -1)
      swift_once(&qword_100837530, sub_10046383C);
    v31 = type metadata accessor for Logger(0);
    sub_10001AAA8(v31, (uint64_t)qword_10084B410);
    v32 = a2;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(22, -1);
      a2 = (_QWORD *)swift_slowAlloc(8, -1);
      v51 = swift_slowAlloc(32, -1);
      v52 = v51;
      *(_DWORD *)v35 = 136315394;
      v53 = v49;
      MetatypeMetadata = swift_getMetatypeMetadata(v49);
      v37 = String.init<A>(describing:)(&v53, MetatypeMetadata);
      v53 = sub_10001A820(v37, v38, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2112;
      v53 = (uint64_t)v32;
      v39 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      *a2 = v32;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s: cdSmartListSection.smartList is nil {cdSmartListSection.remObjectID: %@}", (uint8_t *)v35, 0x16u);
      v40 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(a2, 1, v40);
      swift_slowDealloc(a2, -1, -1);
      v41 = v51;
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

    }
    v42 = (void *)objc_opt_self(REMError);
    v43 = type metadata accessor for REMCDSmartListSection();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v43);
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v42, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v45);

    swift_willThrow(v46);
  }
  return a2;
}

uint64_t type metadata accessor for REMSmartListSectionStorageCDIngestor()
{
  return objc_opt_self(_TtC7remindd36REMSmartListSectionStorageCDIngestor);
}

_UNKNOWN **sub_1004645D8()
{
  return &off_1007F49F0;
}

_UNKNOWN **sub_1004645E4()
{
  return &off_1007F49C0;
}

unint64_t sub_1004645F0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DCBF0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

void sub_100464638(void *a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t MetatypeMetadata;
  uint64_t v26;
  unint64_t v27;
  double v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t ObjCClassFromMetadata;
  NSString v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t *v43;
  uint64_t v44;
  NSObject *v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v50 = a3;
  v7 = (_QWORD *)*v3;
  v8 = type metadata accessor for Date(0);
  v9 = *(uint64_t **)(v8 - 8);
  __chkstk_darwin(v8);
  v45 = ((char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v11);
  v46 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v47 = *(_QWORD **)(v13 - 8);
  v48 = v13;
  v49 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", __chkstk_darwin(v13).n128_f64[0]);
  v14 = objc_msgSend(a1, "resolutionTokenMap");
  if (v14)
  {
    v15 = v9;
    v16 = v14;
    v17 = v50;
    v18 = sub_1004064B0((uint64_t)v14, v50);
    if (*(_QWORD *)(v17 + 16))
    {
      v42[0] = v16;
      v42[1] = v4;
      v43 = v15;
      v44 = v8;
      swift_bridgeObjectRetain(v50);
      v42[2] = a2;
      __asm { BR              X9 }
    }

  }
  else
  {
    if (qword_100837528 != -1)
      swift_once(&qword_100837528, sub_100463818);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10084B3F8);
    swift_bridgeObjectRetain_n(v50, 2);
    v20 = a1;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      LODWORD(v46) = v22;
      v23 = swift_slowAlloc(32, -1);
      v24 = (_QWORD *)swift_slowAlloc(8, -1);
      v48 = swift_slowAlloc(64, -1);
      v51 = v48;
      *(_DWORD *)v23 = 136315650;
      v52 = v7;
      MetatypeMetadata = swift_getMetatypeMetadata(v7);
      v26 = String.init<A>(describing:)(&v52, MetatypeMetadata);
      v52 = (_QWORD *)sub_10001A820(v26, v27, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      *(_QWORD *)&v28 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v23 + 12) = 2114;
      v29 = objc_msgSend(v20, "objectID", v28);
      v52 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      v47 = v24;
      *v24 = v29;

      *(_WORD *)(v23 + 22) = 2082;
      v30 = *(_QWORD *)(v50 + 16);
      if (v30)
      {
        v43 = &v53;
        v44 = v23;
        v45 = v21;
        v52 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v30, 0);
        __asm { BR              X9 }
      }
      v31 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v33 = v32;
      swift_bridgeObjectRelease();
      v52 = (_QWORD *)sub_10001A820(v31, v33, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      swift_bridgeObjectRelease_n(v50, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v46, "%s: merge(storage:into cdSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v23, 0x20u);
      v34 = sub_10001A630((uint64_t *)&unk_100839E70);
      v35 = v47;
      swift_arrayDestroy(v47, 1, v34);
      swift_slowDealloc(v35, -1, -1);
      v36 = v48;
      swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v50, 2);
    }
    v37 = (void *)objc_opt_self(REMError);
    v38 = sub_100465858();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v38);
    v40 = String._bridgeToObjectiveC()();
    objc_msgSend(v37, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v40);

    swift_willThrow(v41);
  }

}

void sub_100464ECC(id a1, id a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  id v17;
  id v18;
  NSString v19;
  id v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t MetatypeMetadata;
  uint64_t v49;
  unint64_t v50;
  double v51;
  id v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t ObjCClassFromMetadata;
  NSString v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  NSObject *v61;
  id v62;
  NSObject *v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  os_log_type_t v81;
  NSObject *v82;
  os_log_type_t typea;
  os_log_type_t type[8];
  NSObject *loga;
  os_log_t log;
  uint64_t v87;
  void *v88;
  id v89;
  char v90[40];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if ((a3 & 1) != 0)
  {
    v11 = *v4;
    v12 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary");
    v13 = objc_msgSend(a1, "resolutionTokenMap");
    if (v13)
    {
      v14 = v13;
      v15 = sub_10001A630((uint64_t *)&unk_100843A30);
      inited = swift_initStackObject(v15, v90);
      *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
      *(_BYTE *)(inited + 32) = 1;
      v17 = sub_100406D5C(v14, inited);
      swift_setDeallocating(inited);
      v18 = objc_msgSend(a1, "smartListID");
      sub_10040371C(1);
      v19 = String._bridgeToObjectiveC()();
      LODWORD(inited) = objc_msgSend(v12, "mergeWithMap:forKey:", v17, v19, swift_bridgeObjectRelease().n128_f64[0]);

      if ((_DWORD)inited)
      {
        if (v18)
        {
          v20 = v18;
          sub_100400EF0(1, v20, a4);
          if (v5)
          {

            return;
          }
          v59 = v21;

        }
        else
        {
          v59 = 0;
        }
        if (qword_100837528 != -1)
          swift_once(&qword_100837528, sub_100463818);
        v60 = type metadata accessor for Logger(0);
        sub_10001AAA8(v60, (uint64_t)qword_10084B3F8);
        log = v59;
        v61 = v59;
        v62 = a2;
        v63 = v61;
        v64 = v62;
        v65 = Logger.logObject.getter(v64);
        v66 = static os_log_type_t.info.getter(v65);
        if (os_log_type_enabled(v65, v66))
        {
          v81 = v66;
          v82 = v65;
          v79 = v63;
          v89 = v12;
          v67 = swift_slowAlloc(22, -1);
          v80 = swift_slowAlloc(64, -1);
          v93 = v80;
          *(_DWORD *)v67 = 136446466;
          v68 = v64;
          v69 = objc_msgSend(v64, "remObjectID");
          v91 = (uint64_t)v69;
          v78 = sub_10001A630((uint64_t *)&unk_100844910);
          v70 = Optional.descriptionOrNil.getter(v78);
          v72 = v71;

          v91 = sub_10001A820(v70, v72, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

          *(_QWORD *)type = v68;
          *(_QWORD *)&v73 = swift_bridgeObjectRelease().n128_u64[0];
          *(_WORD *)(v67 + 12) = 2082;
          if (log)
          {
            v63 = v79;
            v74 = -[NSObject remObjectID](v79, "remObjectID", v73);
            v91 = (uint64_t)v74;
            v75 = Optional.descriptionOrNil.getter(v78);
            v77 = v76;

          }
          else
          {
            v77 = 0xEE003E7473696C74;
            v75 = 0x72616D73206F6E3CLL;
            v63 = v79;
          }
          v91 = sub_10001A820(v75, v77, &v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v82, v81, "Updating cdSmartListSection.smartList {cdSmartListSection: %{public}s, smartList: %{public}s}", (uint8_t *)v67, 0x16u);
          swift_arrayDestroy(v80, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v80, -1, -1);
          swift_slowDealloc(v67, -1, -1);

          v12 = v89;
          v64 = *(id *)type;
        }
        else
        {

        }
        objc_msgSend(v64, "setSmartList:", v63);

      }
    }
    else
    {
      if (qword_100837528 != -1)
        swift_once(&qword_100837528, sub_100463818);
      v88 = v12;
      v41 = type metadata accessor for Logger(0);
      sub_10001AAA8(v41, (uint64_t)qword_10084B3F8);
      v42 = a1;
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = swift_slowAlloc(32, -1);
        v46 = (_QWORD *)swift_slowAlloc(8, -1);
        v47 = swift_slowAlloc(64, -1);
        v91 = v47;
        *(_DWORD *)v45 = 136315650;
        v93 = v11;
        MetatypeMetadata = swift_getMetatypeMetadata(v11);
        v49 = String.init<A>(describing:)(&v93, MetatypeMetadata);
        v93 = sub_10001A820(v49, v50, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        *(_QWORD *)&v51 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v45 + 12) = 2114;
        v52 = objc_msgSend(v42, "objectID", v51);
        v93 = (uint64_t)v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        *v46 = v52;

        *(_WORD *)(v45 + 22) = 2082;
        v93 = sub_10001A820(0x4449746E65726170, 0xE800000000000000, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s: establishRelationship(onStorage:into cdSmartListSection:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v45, 0x20u);
        v53 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v46, 1, v53);
        swift_slowDealloc(v46, -1, -1);
        swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {

      }
      v54 = (void *)objc_opt_self(REMError);
      v55 = sub_100465858();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v55);
      v57 = String._bridgeToObjectiveC()();
      objc_msgSend(v54, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v57);

      swift_willThrow(v58);
    }
  }
  else
  {
    v9 = objc_msgSend(a1, "accountID");
    sub_100400EC4(0, v9, a4);
    if (v5)
    {

    }
    else
    {
      v22 = v10;
      if (qword_100837528 != -1)
        swift_once(&qword_100837528, sub_100463818);
      v23 = type metadata accessor for Logger(0);
      sub_10001AAA8(v23, (uint64_t)qword_10084B3F8);
      v24 = a2;
      v25 = v22;
      v26 = v24;
      v27 = v25;
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.info.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = swift_slowAlloc(22, -1);
        v87 = swift_slowAlloc(64, -1);
        v93 = v87;
        *(_DWORD *)v30 = 136446466;
        v31 = objc_msgSend(v26, "remObjectID");
        v32 = sub_10001A630((uint64_t *)&unk_100844910);
        loga = v28;
        v33 = Optional.descriptionOrNil.getter(v32);
        typea = v29;
        v35 = v34;

        v91 = sub_10001A820(v33, v35, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

        *(_QWORD *)&v36 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v30 + 12) = 2082;
        v37 = objc_msgSend(v27, "remObjectID", v36);
        v91 = (uint64_t)v37;
        v38 = Optional.descriptionOrNil.getter(v32);
        v40 = v39;

        v91 = sub_10001A820(v38, v40, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, loga, typea, "Updating cdSmartListSection.account {cdSmartListSection: %{public}s, account: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy(v87, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v30, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v26, "setAccount:", v27);

    }
  }
}

unint64_t sub_100465858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100840F80;
  if (!qword_100840F80)
  {
    v1 = objc_opt_self(REMSmartListSectionStorage);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100840F80);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for REMSmartListSectionStorageCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1004658E0 + 4 * byte_1006BCD81[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100465914 + 4 * byte_1006BCD7C[v4]))();
}

uint64_t sub_100465914(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10046591C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100465924);
  return result;
}

uint64_t sub_100465930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100465938);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10046593C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100465944(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListSectionStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMSmartListSectionStorageCDIngestor.RelationshipKey;
}

uint64_t storeEnumTagSinglePayload for REMSmartListSectionStorageCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1004659AC + 4 * byte_1006BCD8B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1004659E0 + 4 * byte_1006BCD86[v4]))();
}

uint64_t sub_1004659E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004659E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004659F0);
  return result;
}

uint64_t sub_1004659FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100465A04);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100465A08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100465A10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListSectionStorageCDIngestor.ValueKey()
{
  return &type metadata for REMSmartListSectionStorageCDIngestor.ValueKey;
}

uint64_t sub_100465A2C()
{
  return sub_1000BAEEC(&qword_10084B5C8, &qword_10084B5D0);
}

unint64_t sub_100465A54()
{
  unint64_t result;

  result = qword_10084B5D8;
  if (!qword_10084B5D8)
  {
    result = swift_getWitnessTable(&unk_1006BCEB4, &type metadata for REMSmartListSectionStorageCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10084B5D8);
  }
  return result;
}

uint64_t sub_100465A98()
{
  return sub_1000BAEEC(&qword_10084B5E0, &qword_10084B5E8);
}

unint64_t sub_100465AC0()
{
  unint64_t result;

  result = qword_10084B5F0;
  if (!qword_10084B5F0)
  {
    result = swift_getWitnessTable(&unk_1006BCF8C, &type metadata for REMSmartListSectionStorageCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10084B5F0);
  }
  return result;
}

uint64_t sub_100465B04(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084B630, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100465B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084B5F8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084B5F8);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100465BD0(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Subtasks;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t Configuration;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  id v46;
  void *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  double (*v51)(char *, uint64_t);
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  id v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  id v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  char *v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  void (*v94)(char *, uint64_t, __n128);
  uint64_t v95;
  uint64_t v96;
  os_log_type_t v97;
  uint64_t v98;
  __n128 v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  void (*v127)(char *, uint64_t);
  void (*v128)(char *, char *, uint64_t);
  id v129;
  uint64_t v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;

  v130 = a3;
  v122 = a2;
  v132 = a1;
  v116 = a5;
  v6 = sub_10001A630(&qword_100839AA0);
  v7 = __chkstk_darwin(v6);
  v110 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v7);
  v10 = __chkstk_darwin(v9);
  v109 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMRemindersListDataView.TemplateModel(0, v10);
  v114 = *(_QWORD *)(v12 - 8);
  v115 = v12;
  __chkstk_darwin(v12);
  v113 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v120 = (char *)&v106 - v15;
  v119 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v111 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v118 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v112 = (char *)&v106 - v18;
  __chkstk_darwin(v19);
  v117 = (char *)&v106 - v20;
  __chkstk_darwin(v21);
  v124 = (char *)&v106 - v22;
  v23 = sub_10001A630(&qword_100839A90);
  __chkstk_darwin(v23);
  v108 = (uint64_t)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v123 = (uint64_t)&v106 - v26;
  v27 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v27);
  v126 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v125);
  v30 = (char *)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v128 = (void (*)(char *, char *, uint64_t))((char *)&v106 - v32);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v34 = *(_QWORD *)(Subtasks - 8);
  v35 = __chkstk_darwin(Subtasks);
  v127 = (void (*)(char *, uint64_t))((char *)&v106 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  Configuration = type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration(0, v35);
  v38 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v40 = (char *)&v106 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v43 = (char *)&v106 - v42;
  v129 = a4;
  v45 = (void *)REMRemindersListDataView.TemplateSectionsInvocation.Parameters.templateObjectID.getter(v44);
  v46 = v131;
  sub_1001D0C64(v45, (uint64_t)v132, v130);
  if (v46)
  {

  }
  else
  {
    v106 = v34;
    v107 = Subtasks;
    v130 = 0;
    v131 = v47;
    v49 = REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter(v48);
    v50 = (uint64_t)v127;
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.fetchSubtasks.getter(v49);
    v51 = *(double (**)(char *, uint64_t))(v38 + 8);
    v52.n128_f64[0] = v51(v43, Configuration);
    v53 = REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter(v52);
    v54 = (uint64_t)v126;
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.sortingStyle.getter(v53);
    v51(v40, Configuration);
    v55 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    v56 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(v30, v55, v56);
    swift_storeEnumTagMultiPayload(v30, v125, 2);
    v57 = v128;
    sub_1004957D0(v54, (uint64_t)v30, (uint64_t)v128);
    v58 = v132;
    v59 = v130;
    v60 = sub_1001D6E14((uint64_t)v45, v132, v50, (uint64_t)v57);
    if (v59)
    {

      sub_1001D8B58((uint64_t)v57);
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v50, v107);
    }
    else
    {
      v61 = v60;
      sub_1001D8B58((uint64_t)v57);
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v50, v107);
      v62 = objc_msgSend(v131, "accountID");
      type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation(0);
      v63 = v123;
      sub_1001D0FD8(v58, v62, v123);
      v64 = objc_msgSend(v121, "fetchResultTokenToDiffAgainst");
      v65 = v124;
      sub_1001D11B4(v64);
      v129 = v62;
      v130 = 0;
      v132 = v45;

      v66 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
      v67 = v110;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v110, 1, 1, v66);
      v68 = v131;
      swift_bridgeObjectRetain(v61);
      v69 = v109;
      REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v70, v67, 2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
      v71 = v108;
      sub_100466540(v63, v108);
      v131 = v68;
      REMRemindersListDataView.TemplateModel.init(listRepresentationOfTemplate:model:manualOrderingID:)(v68, v69, v71);
      if (qword_100837540 != -1)
        swift_once(&qword_100837540, sub_100465B40);
      v72 = type metadata accessor for Logger(0);
      sub_10001AAA8(v72, (uint64_t)qword_10084B5F8);
      v73 = v111;
      v74 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
      v75 = v117;
      v76 = v119;
      v74(v117, v65, v119);
      v77 = v112;
      v128 = v74;
      v74(v112, v65, v76);
      swift_bridgeObjectRetain(v61);
      v79 = Logger.logObject.getter(v78);
      v80 = static os_log_type_t.default.getter(v79);
      v81 = os_log_type_enabled(v79, v80);
      v82 = v118;
      if (v81)
      {
        v83 = swift_slowAlloc(32, -1);
        *(_DWORD *)v83 = 134218496;
        v84 = v61[2];
        swift_bridgeObjectRelease();
        v133 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);
        swift_bridgeObjectRelease();
        *(_WORD *)(v83 + 12) = 2048;
        v86 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v85);
        if ((v86 & 0xC000000000000001) != 0)
        {
          if (v86 >= 0)
            v86 &= 0xFFFFFFFFFFFFFF8uLL;
          v87 = __CocoaSet.count.getter(v86);
        }
        else
        {
          v87 = *(_QWORD *)(v86 + 16);
        }
        v93 = swift_bridgeObjectRelease();
        v94 = *(void (**)(char *, uint64_t, __n128))(v73 + 8);
        v94(v117, v119, v93);
        v133 = v87;
        v95 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);
        *(_WORD *)(v83 + 22) = 2048;
        v96 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter(v95);
        v97 = v80;
        if ((v96 & 0xC000000000000001) != 0)
        {
          if (v96 >= 0)
            v96 &= 0xFFFFFFFFFFFFFF8uLL;
          v98 = __CocoaSet.count.getter(v96);
        }
        else
        {
          v98 = *(_QWORD *)(v96 + 16);
        }
        v99 = swift_bridgeObjectRelease();
        v90 = v119;
        ((void (*)(char *, __n128))v94)(v77, v99);
        v133 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);
        _os_log_impl((void *)&_mh_execute_header, v79, v97, "REMRemindersListDataView.TemplateInvocation: reminders %ld updated %ld inserted %ld", (uint8_t *)v83, 0x20u);
        swift_slowDealloc(v83, -1, -1);

        v92 = v114;
        v91 = v115;
        v82 = v118;
        v127 = (void (*)(char *, uint64_t))v94;
      }
      else
      {
        v88 = *(void (**)(char *, uint64_t))(v73 + 8);
        v88(v77, v76);
        v127 = v88;
        v88(v75, v76);

        v89 = swift_bridgeObjectRelease_n(v61, 2);
        v90 = v76;
        v92 = v114;
        v91 = v115;
      }
      v100 = v113;
      v101 = v120;
      (*(void (**)(char *, char *, uint64_t, __n128))(v92 + 16))(v113, v120, v91, v89);
      v102 = v82;
      v103 = v124;
      v128(v82, v124, v90);
      v104 = sub_10009FC50(&qword_10084B638, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateModel);
      v105 = sub_10009FC50(&qword_10084B640, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.TemplateModel);
      REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v100, v102, v91, v104, v105);

      (*(void (**)(char *, uint64_t))(v92 + 8))(v101, v91);
      v127(v103, v90);
      sub_100466500(v123);
    }
  }
}

uint64_t sub_100466500(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A630(&qword_100839A90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100466540(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100839A90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100466588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084B648);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084B648);
  if (qword_100837680 != -1)
    swift_once(&qword_100837680, sub_1004A196C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872160);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100466618(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void (**v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  ValueMetadata *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  double v41;
  void (**v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  __n128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  void *v54;
  void (**v55)(char *, char *, uint64_t);
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  ValueMetadata *v61;
  ValueMetadata *v62;
  __n128 v63;
  ValueMetadata *v64;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t *v67;
  os_log_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (**v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  ValueMetadata *v82;
  uint64_t v83;

  v2 = type metadata accessor for UUID(0);
  v76 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v79 = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v4);
  v6 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v66 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)v66 - v15;
  Date.init()(v17);
  v18 = objc_autoreleasePoolPush();
  v19 = (uint64_t)v81;
  sub_10046A504();
  v77 = v19;
  if (v19)
  {
    objc_autoreleasePoolPop(v18);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
  }
  else
  {
    v71 = v10;
    v72 = v6;
    v80 = a1;
    v81 = v16;
    v78 = v13;
    v74 = (void (**)(char *, char *, uint64_t))v8;
    v75 = v20;
    objc_autoreleasePoolPop(v18);
    if (qword_100837548 != -1)
      swift_once(&qword_100837548, sub_100466588);
    v22 = type metadata accessor for Logger(0);
    sub_10001AAA8(v22, (uint64_t)qword_10084B648);
    v23 = v74;
    v74[2](v78, v81, v7);
    v24 = v75;
    swift_bridgeObjectRetain_n(v75, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    v70 = v27;
    v28 = os_log_type_enabled(v26, v27);
    v30 = v76;
    v29 = v77;
    v31 = v72;
    v73 = v7;
    if (v28)
    {
      v32 = swift_slowAlloc(42, -1);
      v33 = swift_slowAlloc(64, -1);
      v69 = v33;
      *(_DWORD *)v32 = 136315906;
      v82 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
      v83 = v33;
      v34 = sub_10001A630((uint64_t *)&unk_10084B700);
      v35 = String.init<A>(describing:)(&v82, v34);
      v68 = v26;
      v82 = (ValueMetadata *)sub_10001A820(v35, v36, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      v82 = (ValueMetadata *)sub_10001A820(0xD000000000000023, 0x8000000100704E30, &v83);
      v67 = &v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      *(_WORD *)(v32 + 22) = 2050;
      v37 = *(ValueMetadata **)(v24 + 16);
      swift_bridgeObjectRelease();
      v82 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 32) = 2048;
      v66[1] = v32 + 34;
      v38 = v71;
      Date.init()(v39);
      v40 = v78;
      v41 = Date.timeIntervalSince(_:)(v78);
      v42 = (void (**)(char *, char *, uint64_t))v74[1];
      v43 = v38;
      v44 = v73;
      ((void (*)(char *, uint64_t))v42)(v43, v73);
      v82 = *(ValueMetadata **)&v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v67);
      v74 = v42;
      ((void (*)(char *, uint64_t))v42)(v40, v44);
      v45 = v68;
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v70, "[%s|%s] Did fetch identifier of all REMCDList {listIdentifiers.count: %{public}ld, cumulative elapsedSeconds: %f}", (uint8_t *)v32, 0x2Au);
      v46 = v69;
      swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {
      v47 = swift_bridgeObjectRelease_n(v24, 2);
      v74 = (void (**)(char *, char *, uint64_t))v23[1];
      ((void (*)(char *, uint64_t, __n128))v74)(v78, v7, v47);

    }
    v48 = v79;
    v83 = 0;
    v49 = *(_QWORD *)(v24 + 16);
    if (v49)
    {
      v50 = v24 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
      v51 = *(char **)(v30 + 16);
      v78 = *(char **)(v30 + 72);
      v79 = v51;
      while (1)
      {
        ((void (*)(char *, uint64_t, uint64_t))v79)(v31, v50, v2);
        v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
        v52(v31, 0, 1, v2);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v31, 1, v2) == 1)
        {
          v56 = v80;
          v57 = (uint64_t)v81;
          v55 = v74;
          goto LABEL_17;
        }
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v48, v31, v2);
        v53 = (uint64_t)v48;
        v54 = objc_autoreleasePoolPush();
        sub_100466C38(v53, v80, (uint64_t)v81, &v83);
        if (v29)
          break;
        objc_autoreleasePoolPop(v54);
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v53, v2);
        v50 += (uint64_t)v78;
        --v49;
        v48 = (char *)v53;
        if (!v49)
          goto LABEL_15;
      }
      objc_autoreleasePoolPop(v54);
      v63 = swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t, __n128))v74)(v81, v73, v63);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v53, v2);
    }
    else
    {
      v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
LABEL_15:
      v55 = v74;
      v52(v31, 1, 1, v2);
      v56 = v80;
      v57 = (uint64_t)v81;
LABEL_17:
      v58 = objc_msgSend(v56, "hasChanges", swift_bridgeObjectRelease().n128_f64[0]);
      v59 = v73;
      if (v58)
      {
        v82 = 0;
        v60 = objc_msgSend(v56, "save:", &v82);
        v61 = v82;
        if (v60)
        {
          v62 = v82;
          objc_msgSend(v56, "refreshAllObjects");
        }
        else
        {
          v64 = v82;
          _convertNSErrorToError(_:)(v61);

          swift_willThrow(v65);
        }
      }
      return ((uint64_t (*)(uint64_t, uint64_t))v55)(v57, v59);
    }
  }
}

void sub_100466C38(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  BOOL v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  __n128 v51;
  void (*v52)(uint64_t *, uint64_t *, __n128);
  uint64_t v53;
  char *v54;
  id *v55;
  uint64_t v56;
  char *v57;
  double v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  os_log_t v62;
  ValueMetadata *v63;
  uint64_t *v64;
  __n128 v65;
  __n128 v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __n128 v79;
  ValueMetadata *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  ValueMetadata *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __n128 v93;
  void (*v94)(char *, uint64_t *, __n128);
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __n128 v98;
  ValueMetadata *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  void *v121;
  BOOL v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  ValueMetadata *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  ValueMetadata *v131;
  id v132;
  ValueMetadata *v133;
  void *v134;
  uint64_t v135;
  ValueMetadata *v136;
  uint64_t v137;
  ValueMetadata *v138;
  unsigned __int8 v139;
  void *v140;
  ValueMetadata *v141;
  ValueMetadata *v142;
  __n128 v143;
  uint64_t (*v144)(char *, uint64_t, uint64_t *);
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  int v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  ValueMetadata *v154;
  uint64_t v155;
  ValueMetadata *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  int v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  __n128 v173;
  uint64_t v174;
  char *v175;
  char *v176;
  double v177;
  void (*v178)(char *, uint64_t);
  void *v179;
  ValueMetadata *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void (*v189)(char *, uint64_t, __n128);
  void (*v190)(char *, uint64_t, uint64_t);
  char *v191;
  char *v192;
  char *v193;
  unint64_t v194;
  __n128 v195;
  int64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  id *v206;
  void (*v207)(uint64_t *, id *, uint64_t *);
  ValueMetadata *v208;
  os_log_t v209;
  uint64_t v210;
  char *v211;
  void (*v212)(char *, uint64_t *, __n128);
  uint64_t v213;
  unint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  char *v217;
  char *v218;
  uint64_t *v219;
  char *v220;
  uint64_t v221;
  uint64_t *v222;
  void *v223;
  unint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  unint64_t v227;
  ValueMetadata *v228;
  char v229[8];
  char v230[8];
  ValueMetadata *v231;
  char v232[8];
  ValueMetadata *v233;
  char v234[8];
  void *v235;

  v222 = a4;
  v200 = a3;
  v6 = sub_10001A630(&qword_100848480);
  __chkstk_darwin(v6);
  v211 = (char *)&v185 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v210 = (uint64_t)&v185 - v9;
  v204 = type metadata accessor for Date(0);
  v203 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v197 = (char *)&v185 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v199 = (char *)&v185 - v12;
  __chkstk_darwin(v13);
  v220 = (char *)&v185 - v14;
  v15 = (uint64_t *)type metadata accessor for UUID(0);
  v16 = *(v15 - 1);
  __chkstk_darwin(v15);
  v18 = (char *)&v185 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v185 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v185 - v23;
  __chkstk_darwin(v25);
  v27 = (char *)&v185 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v185 - v29;
  v31 = v223;
  v32 = sub_10046A9CC(a1, a2);
  if (v31)
    return;
  v219 = (uint64_t *)v30;
  v221 = (uint64_t)v32;
  v217 = v21;
  v205 = v18;
  v213 = v16;
  v223 = a2;
  v206 = (id *)a1;
  v218 = v27;
  v191 = v24;
  v215 = 0;
  v228 = 0;
  v226 = _swiftEmptyDictionarySingleton;
  v227 = 0;
  v225 = _swiftEmptyDictionarySingleton;
  if (qword_100837548 != -1)
    goto LABEL_98;
  while (1)
  {
    v33 = type metadata accessor for Logger(0);
    v34 = sub_10001AAA8(v33, (uint64_t)qword_10084B648);
    v207 = *(void (**)(_QWORD, _QWORD, _QWORD))(v213 + 16);
    v207(v219, v206, v15);
    v35 = v203;
    v36 = v220;
    v37 = v204;
    v190 = *(void (**)(_QWORD, _QWORD, _QWORD))(v203 + 16);
    v190(v220, v200, v204);
    v38 = v221;
    swift_bridgeObjectRetain_n(v221, 2);
    v198 = v34;
    v40 = Logger.logObject.getter(v39);
    LODWORD(v212) = static os_log_type_t.default.getter(v40);
    v41 = os_log_type_enabled(v40, (os_log_type_t)v212);
    v216 = v15;
    v42 = v217;
    v214 = (unint64_t)v38 >> 62;
    if (v41)
    {
      v209 = v40;
      v43 = swift_slowAlloc(52, -1);
      v208 = (ValueMetadata *)swift_slowAlloc(96, -1);
      v233 = v208;
      *(_DWORD *)v43 = 136316162;
      v231 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
      v44 = sub_10001A630((uint64_t *)&unk_10084B700);
      v45 = String.init<A>(describing:)(&v231, v44);
      v231 = (ValueMetadata *)sub_10001A820(v45, v46, (uint64_t *)&v233);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      v231 = (ValueMetadata *)sub_10001A820(0xD000000000000023, 0x8000000100704E30, (uint64_t *)&v233);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
      *(_WORD *)(v43 + 22) = 2082;
      v47 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v48 = v219;
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v216, v47);
      v231 = (ValueMetadata *)sub_10001A820(v49, v50, (uint64_t *)&v233);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
      v51 = swift_bridgeObjectRelease();
      v52 = *(void (**)(_QWORD, _QWORD, __n128))(v213 + 8);
      v52(v48, v216, v51);
      *(_WORD *)(v43 + 32) = 2050;
      if ((unint64_t)v38 >> 62)
      {
        v184 = v221 < 0 ? v221 : v221 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v221);
        v53 = _CocoaArrayWrapper.endIndex.getter(v184);
        swift_bridgeObjectRelease();
      }
      else
      {
        v53 = *(_QWORD *)((v221 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v54 = v199;
      v55 = v206;
      swift_bridgeObjectRelease();
      v231 = (ValueMetadata *)v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 42) = 2048;
      Date.init()(v56);
      v57 = v220;
      v58 = Date.timeIntervalSince(_:)(v220);
      v59 = *(void (**)(_QWORD, _QWORD))(v203 + 8);
      v60 = v54;
      v61 = v204;
      v59(v60, v204);
      v231 = *(ValueMetadata **)&v58;
      v38 = v221;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
      v189 = (void (*)(_QWORD, _QWORD, __n128))v59;
      v59(v57, v61);
      v62 = v209;
      _os_log_impl((void *)&_mh_execute_header, v209, (os_log_type_t)v212, "[%s|%s] Did fetch NSManagedObjectID of reminders in ZREMCDOBJECT SQL table {list.identifier: %{public}s, reminders.count: %{public}ld, cumulative elapsedSeconds: %f}", (uint8_t *)v43, 0x34u);
      v63 = v208;
      swift_arrayDestroy(v208, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {
      v64 = v15;
      v65 = swift_bridgeObjectRelease();
      v52 = *(void (**)(_QWORD, _QWORD, __n128))(v213 + 8);
      v52(v219, v64, v65);
      v66 = swift_bridgeObjectRelease();
      v189 = *(void (**)(_QWORD, _QWORD, __n128))(v35 + 8);
      v189(v36, v37, v66);

      v55 = v206;
    }
    if (v214)
    {
      v183 = v38 < 0 ? v38 : v38 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v38);
      v67 = _CocoaArrayWrapper.endIndex.getter(v183);
      swift_bridgeObjectRelease();
    }
    else
    {
      v67 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v212 = v52;
    v68 = v215;
    if (!v67)
      break;
    v69 = v38 & 0xC000000000000001;
    v70 = 4;
    while (1)
    {
      v71 = v69
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v70 - 4, v38)
          : *(id *)(v38 + 8 * v70);
      v72 = v71;
      v15 = (uint64_t *)(v70 - 3);
      if (__OFADD__(v70 - 4, 1))
        break;
      v73 = objc_autoreleasePoolPush();
      sub_100468208(v223, (uint64_t)v72, (id *)&v226, (id *)&v225, v55, &v227, &v228, v222);
      if (v68)
      {
        objc_autoreleasePoolPop(v73);

        swift_bridgeObjectRelease();
        goto LABEL_92;
      }
      objc_autoreleasePoolPop(v73);

      ++v70;
      v38 = v221;
      if (v15 == (uint64_t *)v67)
        goto LABEL_18;
    }
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    swift_once(&qword_100837548, sub_100466588);
  }
LABEL_18:
  swift_bridgeObjectRelease();
  v74 = v225[8];
  v192 = (char *)(v225 + 8);
  v75 = 1 << *((_BYTE *)v225 + 32);
  v76 = -1;
  if (v75 < 64)
    v76 = ~(-1 << v75);
  v77 = v76 & v74;
  v78 = (unint64_t)(v75 + 63) >> 6;
  v185 = v78 - 1;
  v79 = swift_bridgeObjectRetain(v225);
  v80 = 0;
  v196 = v78;
  v186 = v78 - 5;
  v202 = v81;
  v187 = v81 + 104;
  v15 = &qword_100848488;
  v201 = 0x80000001006BCFF0;
  v79.n128_u64[0] = 136315906;
  v195 = v79;
  v188 = (unint64_t)"reminderInZREMCDREMINDER";
  v194 = 0x8000000100704E30;
  v193 = (char *)&type metadata for Any + 8;
  v82 = v216;
  v83 = (uint64_t)v218;
  v84 = v223;
  while (1)
  {
    v100 = v211;
    if (v77)
    {
      v209 = (os_log_t)((v77 - 1) & v77);
      v208 = v80;
      v101 = __clz(__rbit64(v77)) | ((_QWORD)v80 << 6);
LABEL_26:
      v102 = v202;
      v207(v211, *(_QWORD *)(v202 + 48) + *(_QWORD *)(v213 + 72) * v101, v82);
      v103 = *(_QWORD *)(v102 + 56);
      v104 = sub_10001A630(&qword_100848488);
      v105 = *(_QWORD *)(v103 + 8 * v101);
      *(_QWORD *)&v100[*(int *)(v104 + 48)] = v105;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v100, 0, 1, v104);
      swift_bridgeObjectRetain(v105);
      v106 = v205;
      goto LABEL_33;
    }
    v107 = (int64_t)&v80->Kind + 1;
    if (__OFADD__(v80, 1))
      goto LABEL_97;
    if (v107 >= v196)
    {
      v208 = v80;
      v106 = v205;
    }
    else
    {
      v108 = *(_QWORD *)&v192[8 * v107];
      v106 = v205;
      if (v108)
        goto LABEL_30;
      if ((uint64_t)&v80->Kind + 2 >= v196)
        goto LABEL_74;
      v108 = *(_QWORD *)&v192[8 * ((_QWORD)&v80->Kind + 2)];
      if (v108)
      {
        v107 = (int64_t)&v80->Kind + 2;
LABEL_30:
        v209 = (os_log_t)((v108 - 1) & v108);
        v101 = __clz(__rbit64(v108)) + (v107 << 6);
        v208 = (ValueMetadata *)v107;
        goto LABEL_26;
      }
      if ((uint64_t)&v80->Kind + 3 >= v196)
      {
        v208 = (ValueMetadata *)((char *)&v80->Kind + 2);
      }
      else
      {
        v108 = *(_QWORD *)&v192[8 * ((_QWORD)&v80->Kind + 3)];
        if (v108)
        {
          v107 = (int64_t)&v80->Kind + 3;
          goto LABEL_30;
        }
        v107 = (int64_t)&v80->Kind + 4;
        if ((uint64_t)&v80->Kind + 4 < v196)
        {
          v108 = *(_QWORD *)&v192[8 * v107];
          if (v108)
            goto LABEL_30;
          while ((ValueMetadata *)v186 != v80)
          {
            v108 = *(_QWORD *)(v187 + 8 * (_QWORD)v80);
            v80 = (ValueMetadata *)((char *)v80 + 1);
            if (v108)
            {
              v107 = (int64_t)&v80->Kind + 4;
              goto LABEL_30;
            }
          }
          v107 = v185;
LABEL_74:
          v208 = (ValueMetadata *)v107;
          goto LABEL_32;
        }
        v208 = (ValueMetadata *)((char *)&v80->Kind + 3);
      }
    }
LABEL_32:
    v109 = sub_10001A630(&qword_100848488);
    v100 = v211;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v211, 1, 1, v109);
    v209 = 0;
LABEL_33:
    v110 = (uint64_t)v100;
    v111 = v210;
    sub_1000A5CA8(v110, v210, &qword_100848480);
    v112 = sub_10001A630(&qword_100848488);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 48))(v111, 1, v112) == 1)
    {
      swift_release(v202);
      v158 = v191;
      v207(v191, v206, v82);
      v159 = v197;
      v160 = v204;
      v161 = ((uint64_t (*)(char *, uint64_t, uint64_t))v190)(v197, v200, v204);
      v162 = Logger.logObject.getter(v161);
      v163 = static os_log_type_t.default.getter(v162);
      v164 = v163;
      if (os_log_type_enabled(v162, v163))
      {
        v165 = swift_slowAlloc(62, -1);
        v166 = (void *)swift_slowAlloc(96, -1);
        v215 = v68;
        v223 = v166;
        v235 = v166;
        *(_DWORD *)v165 = 136316418;
        LODWORD(v222) = v164;
        v233 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
        v167 = sub_10001A630((uint64_t *)&unk_10084B700);
        v168 = String.init<A>(describing:)(&v233, v167);
        v233 = (ValueMetadata *)sub_10001A820(v168, v169, (uint64_t *)&v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v234);
        swift_bridgeObjectRelease();
        *(_WORD *)(v165 + 12) = 2080;
        v233 = (ValueMetadata *)sub_10001A820(0xD000000000000023, v188 | 0x8000000000000000, (uint64_t *)&v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v234);
        *(_WORD *)(v165 + 22) = 2082;
        v170 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v171 = dispatch thunk of CustomStringConvertible.description.getter(v82, v170);
        v233 = (ValueMetadata *)sub_10001A820(v171, v172, (uint64_t *)&v235);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, v234);
        v173 = swift_bridgeObjectRelease();
        v212(v158, v82, v173);
        *(_WORD *)(v165 + 32) = 2050;
        swift_beginAccess(&v228, &v233, 0, 0);
        v231 = v228;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, v232);
        *(_WORD *)(v165 + 42) = 2050;
        swift_beginAccess(&v227, &v231, 0, 0);
        v224 = v227;
        v174 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, &v225);
        *(_WORD *)(v165 + 52) = 2048;
        v175 = v199;
        Date.init()(v174);
        v176 = v197;
        v177 = Date.timeIntervalSince(_:)(v197);
        v178 = *(void (**)(_QWORD, _QWORD))(v203 + 8);
        v178(v175, v160);
        v224 = *(_QWORD *)&v177;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, &v225);
        v178(v176, v160);
        _os_log_impl((void *)&_mh_execute_header, v162, (os_log_type_t)v222, "[%s|%s] Did copy reminders from ZREMCDOBJECT SQL table to ZREMCDREMINDER SQL table {list.identifier: %{public}s, topLevelReminders.count: %{public}ld, subtasks.count: %{public}ld, cumulative elapsedSeconds: %f}", (uint8_t *)v165, 0x3Eu);
        v179 = v223;
        swift_arrayDestroy(v223, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v179, -1, -1);
        swift_slowDealloc(v165, -1, -1);
      }
      else
      {
        ((void (*)(char *, uint64_t *))v212)(v158, v82);
        ((void (*)(char *, uint64_t))v189)(v159, v160);
      }

      goto LABEL_92;
    }
    v221 = *(_QWORD *)(v111 + *(int *)(v112 + 48));
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(v213 + 32))(v83, v111, v82);
    v113 = objc_autoreleasePoolPush();
    sub_10046AC5C(v83, (uint64_t)v84, 0xD00000000000001DLL, v201, (uint64_t (*)(_QWORD))type metadata accessor for REMCDReminderInZREMCDREMINDER);
    if (v68)
      break;
    v115 = v114;
    if (v114)
    {
      v116 = (uint64_t *)objc_msgSend(v114, "ic_permanentObjectID");

      objc_autoreleasePoolPop(v113);
      v215 = v116;
      if (v116)
      {
        if (!((unint64_t)v221 >> 62))
        {
          v117 = *(_QWORD *)((v221 & 0xFFFFFFFFFFFFF8) + 0x10);
          v118 = v215;
          v84 = v223;
          if (v117)
            goto LABEL_39;
          goto LABEL_79;
        }
        v150 = v221;
        if (v221 < 0)
          v151 = v221;
        else
          v151 = v221 & 0xFFFFFFFFFFFFFF8;
        v152 = v215;
        swift_bridgeObjectRetain(v150);
        v117 = _CocoaArrayWrapper.endIndex.getter(v151);
        swift_bridgeObjectRelease();
        v84 = v223;
        if (!v117)
        {
LABEL_79:
          v153 = v215;

          swift_bridgeObjectRelease();
          v82 = v216;
          v94 = v212;
          goto LABEL_23;
        }
LABEL_39:
        v214 = v221 & 0xC000000000000001;
        v119 = v222;
        swift_beginAccess(v222, v230, 1, 0);
        swift_beginAccess(v119, v229, 1, 0);
        v120 = 4;
        while (2)
        {
          if (v214)
            v123 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v120 - 4, v221);
          else
            v123 = (uint64_t *)*(id *)(v221 + 8 * v120);
          v15 = v123;
          v124 = v120 - 3;
          if (__OFADD__(v120 - 4, 1))
            goto LABEL_95;
          v125 = v117;
          v220 = (char *)objc_autoreleasePoolPush();
          v233 = 0;
          v126 = objc_msgSend(v84, "existingObjectWithID:error:", v15, &v233);
          v127 = v233;
          if (!v126)
          {
            v154 = v233;
            _convertNSErrorToError(_:)(v127);

            swift_willThrow(v155);
            goto LABEL_90;
          }
          v121 = v126;
          v219 = v15;
          v15 = v68;
          v128 = type metadata accessor for REMCDReminderInZREMCDREMINDER();
          v129 = swift_dynamicCastClass(v121, v128);
          if (v129)
          {
            v130 = (void *)v129;
            v233 = 0;
            v131 = v127;
            v132 = objc_msgSend(v84, "existingObjectWithID:error:", v215, &v233);
            v133 = v233;
            if (!v132)
            {
              v156 = v233;
              _convertNSErrorToError(_:)(v133);

              swift_willThrow(v157);
              v83 = (uint64_t)v218;
              goto LABEL_89;
            }
            v134 = v132;
            v135 = swift_dynamicCastClass(v132, v128);
            v136 = v133;
            if (v135)
            {
              objc_msgSend(v130, "setParentReminder:", v135);
              v84 = v223;
              v137 = *v222 + 1;
              if (__OFADD__(*v222, 1))
                goto LABEL_96;
              *v222 = v137;
              v68 = v15;
              if (v137 < 500)
              {

                v121 = v134;
                goto LABEL_54;
              }
              v233 = 0;
              v139 = objc_msgSend(v84, "save:", &v233);
              v140 = v84;
              v141 = v233;
              v83 = (uint64_t)v218;
              if ((v139 & 1) == 0)
              {
                v180 = v233;
                _convertNSErrorToError(_:)(v141);

                swift_willThrow(v181);
LABEL_89:
                v15 = v219;
LABEL_90:
                objc_autoreleasePoolPop(v220);

                swift_release(v202);
                swift_bridgeObjectRelease();
                v182 = v215;

                goto LABEL_91;
              }
              v142 = v233;
              objc_msgSend(v140, "refreshAllObjects");
              *v222 = 0;

              v121 = v134;
              v84 = v140;
            }
            else
            {

              v121 = v134;
              v68 = v15;
              v83 = (uint64_t)v218;
              v84 = v223;
            }
          }
          else
          {
            v138 = v127;
LABEL_54:
            v83 = (uint64_t)v218;
          }

          objc_autoreleasePoolPop(v220);
          ++v120;
          v117 = v125;
          v122 = v124 == v125;
          v42 = v217;
          if (v122)
            goto LABEL_79;
          continue;
        }
      }
    }
    else
    {
      objc_autoreleasePoolPop(v113);
    }
    v143 = swift_bridgeObjectRelease();
    v82 = v216;
    v144 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v207;
    ((void (*)(char *, id *, uint64_t *, __n128))v207)(v42, v206, v216, v143);
    v145 = v144(v106, v83, v82);
    v146 = Logger.logObject.getter(v145);
    v147 = static os_log_type_t.error.getter(v146);
    v148 = v147;
    v149 = v106;
    if (os_log_type_enabled(v146, v147))
    {
      v85 = swift_slowAlloc(42, -1);
      v86 = (ValueMetadata *)swift_slowAlloc(128, -1);
      v233 = v86;
      *(_DWORD *)v85 = v195.n128_u32[0];
      v231 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
      v87 = sub_10001A630((uint64_t *)&unk_10084B700);
      v88 = String.init<A>(describing:)(&v231, v87);
      LODWORD(v221) = v148;
      *(_QWORD *)(v85 + 4) = sub_10001A820(v88, v89, (uint64_t *)&v233);
      swift_bridgeObjectRelease();
      *(_WORD *)(v85 + 12) = 2080;
      *(_QWORD *)(v85 + 14) = sub_10001A820(0xD000000000000023, v194, (uint64_t *)&v233);
      *(_WORD *)(v85 + 22) = 2082;
      v90 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v91 = dispatch thunk of CustomStringConvertible.description.getter(v216, v90);
      *(_QWORD *)(v85 + 24) = sub_10001A820(v91, v92, (uint64_t *)&v233);
      v93 = swift_bridgeObjectRelease();
      v94 = v212;
      v212(v42, v216, v93);
      *(_WORD *)(v85 + 32) = 2082;
      v95 = v90;
      v82 = v216;
      v96 = dispatch thunk of CustomStringConvertible.description.getter(v216, v95);
      *(_QWORD *)(v85 + 34) = sub_10001A820(v96, v97, (uint64_t *)&v233);
      v98 = swift_bridgeObjectRelease();
      v94(v149, v82, v98);
      _os_log_impl((void *)&_mh_execute_header, v146, (os_log_type_t)v221, "[%s|%s] Failed to fetch moID of parentReminder {list.identifier: %{public}s, parentReminderIdentifier: %{public}s}", (uint8_t *)v85, 0x2Au);
      swift_arrayDestroy(v86, 4, v193);
      v99 = v86;
      v83 = (uint64_t)v218;
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v85, -1, -1);
    }
    else
    {
      v94 = v212;
      ((void (*)(char *, uint64_t *))v212)(v42, v82);
      ((void (*)(char *, uint64_t *))v94)(v149, v82);
    }

    v84 = v223;
LABEL_23:
    v212 = v94;
    ((void (*)(uint64_t, uint64_t *))v94)(v83, v82);
    v15 = &qword_100848488;
    v80 = v208;
    v77 = (unint64_t)v209;
  }
  objc_autoreleasePoolPop(v113);
  swift_bridgeObjectRelease();
  swift_release(v202);
LABEL_91:
  ((void (*)(uint64_t, uint64_t *))v212)(v83, v216);
LABEL_92:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_100468208(void *a1, uint64_t a2, id *a3, id *a4, id *a5, unint64_t *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  void (*v53)(char *, char *, char *);
  int v54;
  _QWORD *v55;
  id v56;
  unint64_t v57;
  char v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  char *v63;
  id v64;
  id v65;
  void *v66;
  void (*v67)(id *, char *, char *);
  int v68;
  id v69;
  uint64_t v70;
  char v71;
  __n128 v72;
  void (*v73)(char *, char *, __n128);
  uint64_t v74;
  uint64_t v75;
  id v76;
  NSObject *v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  __n128 v88;
  id v89;
  void *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  void *v100;
  unint64_t v101;
  id v102;
  unint64_t *v103;
  id v104;
  uint64_t v105;
  id v106;
  char v107;
  uint64_t v108;
  void (*v109)(_QWORD *);
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  void (*v113)(id *, char *);
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  char isUniquelyReferenced_nonNull_native;
  __n128 v120;
  void (*v121)(char *, char *, __n128);
  id v122;
  void (*v123)(id *, char *);
  uint64_t v124;
  id v125;
  char *v126;
  id v127;
  id v128;
  uint64_t v129;
  id *v130;
  char *v131;
  uint64_t v132;
  id *v133;
  id *v134;
  char *v135;
  _QWORD *v136;
  id *v137;
  unint64_t *v138;
  char *v139;
  uint64_t *v140;
  id v141;
  ValueMetadata *v142;
  id v143[4];

  v140 = a8;
  v136 = a7;
  v137 = a5;
  v138 = a6;
  v133 = a4;
  v134 = a3;
  v132 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v132);
  v131 = (char *)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (id *)((char *)&v124 - v12);
  __chkstk_darwin(v14);
  v16 = (char *)&v124 - v15;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v139 = (char *)&v124 - v22;
  __chkstk_darwin(v23);
  v130 = (id *)((char *)&v124 - v24);
  __chkstk_darwin(v25);
  v27 = (char *)&v124 - v26;
  __chkstk_darwin(v28);
  v30 = (id *)((char *)&v124 - v29);
  *(_QWORD *)&v32 = __chkstk_darwin(v31).n128_u64[0];
  v135 = (char *)&v124 - v33;
  v143[0] = 0;
  v141 = a1;
  v34 = objc_msgSend(a1, "existingObjectWithID:error:", a2, v143, v32);
  v35 = v143[0];
  if (!v34)
  {
    v41 = v143[0];
    _convertNSErrorToError(_:)(v35);

    swift_willThrow(v42);
    return;
  }
  v36 = v34;
  v129 = v18;
  v37 = type metadata accessor for REMCDReminderInZREMCDOBJECT();
  v38 = v36;
  v39 = swift_dynamicCastClass(v36, v37);
  v40 = v35;
  if (!v39 || (objc_msgSend((id)v39, "markedForDeletion") & 1) != 0)
  {

    return;
  }
  v126 = (char *)v17;
  v124 = type metadata accessor for REMCDReminderInZREMCDREMINDER();
  v43 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v124));
  v44 = objc_msgSend(v43, "initWithContext:", v141);
  sub_100468EE4((void *)v39);
  v128 = (id)v39;
  v45 = objc_msgSend((id)v39, "ckCloudState");
  if (v45)
  {
    v46 = v45;
    objc_msgSend(v45, "setObject:", 0);
    objc_msgSend(v46, "setSavedAttachment:", 0);
    objc_msgSend(v46, "setSavedReminder:", 0);
    objc_msgSend(v46, "setTemplate:", 0);
    objc_msgSend(v46, "setReminderInZREMCDREMINDER:", v44);

  }
  v127 = v44;
  v47 = v128;
  v48 = objc_msgSend(v128, "parentReminder");
  v125 = v38;
  if (v48)
  {
    v39 = (uint64_t)v48;
    v49 = objc_msgSend(v48, "identifier");
    v50 = v126;
    if (v49)
    {
      v51 = v49;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

      v52 = v129;
      v53 = *(void (**)(char *, char *, char *))(v129 + 32);
      v53(v16, v27, v50);
      v30 = *(id **)(v52 + 56);
      ((void (*)(char *, _QWORD, uint64_t, char *))v30)(v16, 0, 1, v50);
      v54 = (*(uint64_t (**)(char *, uint64_t, char *))(v52 + 48))(v16, 1, v50);
      v20 = v139;
      if (v54 != 1)
      {
        v20 = v135;
        v53(v135, v16, v50);
        v55 = *v134;
        v56 = v127;
        v30 = v130;
        if (*((_QWORD *)*v134 + 2))
        {
          v57 = sub_1002C65F8((uint64_t)v20);
          if ((v58 & 1) != 0)
          {
            v59 = *(void **)(v55[7] + 8 * v57);
            v143[0] = 0;
            v60 = v59;
            v61 = objc_msgSend(v141, "existingObjectWithID:error:", v60, v143);
            v50 = (char *)v143[0];
            if (!v61)
            {
              v104 = v143[0];
              _convertNSErrorToError(_:)(v50);

              swift_willThrow(v105);
              (*(void (**)(char *, char *))(v129 + 8))(v20, v126);
              return;
            }
            v62 = v61;
            v20 = (char *)swift_dynamicCastClass(v61, v124);
            v63 = v50;
            if (v20)
            {
              v64 = v62;
              objc_msgSend(v56, "setParentReminder:", v20);

              (*(void (**)(char *, char *))(v129 + 8))(v135, v126);
              goto LABEL_42;
            }

            v50 = v126;
            v20 = v135;
          }
        }
        v106 = objc_msgSend(v56, "ic_permanentObjectID");
        if (*((_QWORD *)*v133 + 2) && (sub_1002C65F8((uint64_t)v20), (v107 & 1) != 0))
        {
          v108 = v129;
          (*(void (**)(id *, char *, char *))(v129 + 16))(v30, v20, v50);
          v109 = sub_1001D0008(v143);
          if (*v110)
          {
            v111 = v110;
            v94 = v109;
            v13 = (id *)v106;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
            v50 = *(char **)((*v111 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v101 = *(_QWORD *)((*v111 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if ((unint64_t)v50 < v101 >> 1)
            {
LABEL_40:
              v112 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v50, v13);
              specialized Array._endMutation()(v112);
              ((void (*)(id *, _QWORD))v94)(v143, 0);

              v113 = *(void (**)(id *, char *))(v129 + 8);
              v114 = v126;
              v113(v30, v126);
              v113((id *)v20, v114);
              goto LABEL_42;
            }
LABEL_48:
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1);
            goto LABEL_40;
          }
          ((void (*)(id *, _QWORD))v109)(v143, 0);

          v123 = *(void (**)(id *, char *))(v108 + 8);
          v123(v30, v50);
          v123((id *)v20, v50);
        }
        else
        {
          v115 = v129;
          (*(void (**)(char *, char *, char *))(v129 + 16))(v27, v20, v50);
          v116 = sub_10001A630((uint64_t *)&unk_10083AD90);
          v117 = swift_allocObject(v116, 40, 7);
          *(_OWORD *)(v117 + 16) = xmmword_1006A7330;
          *(_QWORD *)(v117 + 32) = v106;
          v143[0] = (id)v117;
          specialized Array._endMutation()(v117);
          v20 = v50;
          v50 = (char *)v143[0];
          v118 = v106;
          v30 = v133;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v133);
          v143[0] = *v30;
          *v30 = (id)0x8000000000000000;
          sub_10028E028((uint64_t)v50, (uint64_t)v27, isUniquelyReferenced_nonNull_native);
          *v30 = v143[0];
          v120 = swift_bridgeObjectRelease();
          v121 = *(void (**)(char *, char *, __n128))(v115 + 8);
          v121(v27, v20, v120);

          ((void (*)(char *, char *))v121)(v135, v20);
        }
LABEL_42:
        while (1)
        {
          v103 = v138;
          v101 = *v138 + 1;
          v102 = v128;
          if (!__OFADD__(*v138, 1))
            break;
          __break(1u);
LABEL_46:
          swift_once(&qword_100837548, sub_100466588);
LABEL_22:
          v74 = type metadata accessor for Logger(0);
          sub_10001AAA8(v74, (uint64_t)qword_10084B648);
          v75 = v129;
          (*(void (**)(char *, id *, char *))(v129 + 16))(v20, v137, v50);
          v56 = v127;
          v76 = v127;
          v77 = Logger.logObject.getter(v76);
          v78 = static os_log_type_t.error.getter(v77);
          if (os_log_type_enabled(v77, (os_log_type_t)v78))
          {
            LODWORD(v136) = v78;
            v137 = v30;
            v134 = (id *)v39;
            v20 = (char *)swift_slowAlloc(42, -1);
            v79 = (char *)swift_slowAlloc(128, -1);
            v135 = v79;
            *(_DWORD *)v20 = 136315906;
            v142 = &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
            v143[0] = v79;
            v80 = sub_10001A630((uint64_t *)&unk_10084B700);
            v81 = String.init<A>(describing:)(&v142, v80);
            v142 = (ValueMetadata *)sub_10001A820(v81, v82, (uint64_t *)v143);
            v30 = v143;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143);
            swift_bridgeObjectRelease();
            *((_WORD *)v20 + 6) = 2080;
            v142 = (ValueMetadata *)sub_10001A820(0xD000000000000023, 0x8000000100704E30, (uint64_t *)v143);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143);
            v83 = v75;
            *((_WORD *)v20 + 11) = 2082;
            v84 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v85 = v139;
            v86 = dispatch thunk of CustomStringConvertible.description.getter(v50, v84);
            v142 = (ValueMetadata *)sub_10001A820(v86, v87, (uint64_t *)v143);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143);
            v88 = swift_bridgeObjectRelease();
            (*(void (**)(char *, char *, __n128))(v83 + 8))(v85, v50, v88);
            *((_WORD *)v20 + 16) = 2082;
            v89 = objc_msgSend(v76, "identifier");
            if (v89)
            {
              v90 = v89;
              v91 = v131;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v89);

              v92 = 0;
              v39 = (uint64_t)v134;
            }
            else
            {
              v92 = 1;
              v39 = (uint64_t)v134;
              v91 = v131;
            }
            v93 = v132;
            ((void (*)(char *, uint64_t, uint64_t, char *))v137)(v91, v92, 1, v50);
            v50 = v20 + 34;
            v95 = Optional.descriptionOrNil.getter(v93);
            v96 = (uint64_t)v91;
            v98 = v97;
            sub_10000882C(v96, (uint64_t *)&unk_100839C80);
            v142 = (ValueMetadata *)sub_10001A820(v95, v98, (uint64_t *)v143);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v136, "[%s|%s] Failed to set parentReminder because parentReminder.identifier is nil {list.identifier: %{public}s, reminder.identifier: %{public}s}", (uint8_t *)v20, 0x2Au);
            v99 = v135;
            swift_arrayDestroy(v135, 4, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v99, -1, -1);
            swift_slowDealloc(v20, -1, -1);

            v56 = v127;
          }
          else
          {
            (*(void (**)(char *, char *))(v75 + 8))(v20, v50);

          }
        }
        goto LABEL_43;
      }
    }
    else
    {
      v30 = *(id **)(v129 + 56);
      ((void (*)(char *, uint64_t, uint64_t, char *))v30)(v16, 1, 1, v126);
      v20 = v139;
    }
    sub_10000882C((uint64_t)v16, (uint64_t *)&unk_100839C80);
    if (qword_100837548 == -1)
      goto LABEL_22;
    goto LABEL_46;
  }
  v65 = objc_msgSend(v47, "identifier");
  v50 = v126;
  if (!v65)
  {
    (*(void (**)(id *, uint64_t, uint64_t, char *))(v129 + 56))(v13, 1, 1, v126);
    v56 = v127;
    goto LABEL_27;
  }
  v66 = v65;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v65);

  v39 = v129;
  v67 = *(void (**)(id *, char *, char *))(v129 + 32);
  v67(v13, v27, v50);
  (*(void (**)(id *, _QWORD, uint64_t, char *))(v39 + 56))(v13, 0, 1, v50);
  v68 = (*(uint64_t (**)(id *, uint64_t, char *))(v39 + 48))(v13, 1, v50);
  v56 = v127;
  if (v68 == 1)
  {
LABEL_27:
    sub_10000882C((uint64_t)v13, (uint64_t *)&unk_100839C80);
    v94 = v136;
    goto LABEL_32;
  }
  v67(v30, (char *)v13, v50);
  (*(void (**)(char *, id *, char *))(v39 + 16))(v20, v30, v50);
  v69 = objc_msgSend(v56, "ic_permanentObjectID");
  if (v69)
  {
    v70 = (uint64_t)v69;
    v13 = v134;
    v71 = swift_isUniquelyReferenced_nonNull_native(*v134);
    v143[0] = *v13;
    *v13 = (id)0x8000000000000000;
    sub_10028DECC(v70, (uint64_t)v20, v71);
    *v13 = v143[0];
    v72 = swift_bridgeObjectRelease();
    v73 = *(void (**)(char *, char *, __n128))(v39 + 8);
    v73(v20, v50, v72);
  }
  else
  {
    v100 = (void *)sub_1002CB7EC((uint64_t)v20);
    v73 = *(void (**)(char *, char *, __n128))(v39 + 8);
    ((void (*)(char *, char *))v73)(v20, v50);

  }
  v94 = v136;
  ((void (*)(id *, char *))v73)(v30, v50);
LABEL_32:
  v101 = *v94 + 1;
  v102 = v128;
  if (__OFADD__(*v94, 1))
  {
    __break(1u);
    goto LABEL_48;
  }
  v103 = v94;
LABEL_43:
  *v103 = v101;
  v122 = v141;
  objc_msgSend(v141, "refreshObject:mergeChanges:", v102, 0);
  sub_10046AEC8(v140, v122);

}

id sub_100468EB0()
{
  return sub_10046A4AC((uint64_t (*)(_QWORD))type metadata accessor for REMCDReminderInZREMCDOBJECT);
}

uint64_t type metadata accessor for REMCDReminderInZREMCDOBJECT()
{
  return objc_opt_self(REMCDReminderInZREMCDOBJECT);
}

void sub_100468EE4(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  id v33;
  id v34;
  objc_class *v35;
  Class isa;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  objc_class *v40;
  Class v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  objc_class *v46;
  Class v47;
  char *v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  objc_class *v50;
  Class v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  objc_class *v56;
  Class v57;
  char *v58;
  id v59;
  id v60;
  id v61;
  objc_class *v62;
  Class v63;
  char *v64;
  id v65;
  objc_class *v66;
  Class v67;
  char *v68;
  char *v69;
  char *v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  NSURL *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  void *v84;
  void (*v85)(char *, uint64_t);
  objc_class *v86;
  Class v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  objc_class *v93;
  Class v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  objc_class *v100;
  Class v101;
  objc_class *v102;
  Class v103;
  id v104;
  objc_class *v105;
  Class v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  id v110;
  id v111;
  objc_class *v112;
  Class v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  objc_class *v117;
  Class v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  objc_class *v123;
  Class v124;
  id v125;
  id v126;
  objc_class *v127;
  Class v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  objc_class *v132;
  Class v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  id v137;
  id v138;
  Class v139;
  double v140;
  uint64_t v141;
  unint64_t v142;
  id v143;
  Class v144;
  double v145;
  uint64_t v146;
  unint64_t v147;
  id v148;
  id v149;
  id v150;
  id v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v160 = *(_QWORD *)(v4 - 8);
  v161 = v4;
  __chkstk_darwin(v4);
  v154 = (char *)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v159 = (char *)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v157 = *(_QWORD *)(v8 - 8);
  v158 = v8;
  __chkstk_darwin(v8);
  v153 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v10);
  v156 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v165 = (char *)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v15);
  v164 = (char *)&v152 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v163 = (char *)&v152 - v18;
  __chkstk_darwin(v19);
  v162 = (char *)&v152 - v20;
  __chkstk_darwin(v21);
  v155 = (char *)&v152 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v152 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v152 - v27;
  *(_QWORD *)&v30 = __chkstk_darwin(v29).n128_u64[0];
  v32 = (char *)&v152 - v31;
  objc_msgSend(v2, "setAllDay:", objc_msgSend(a1, "allDay", v30));
  objc_msgSend(v2, "setCkDirtyFlags:", objc_msgSend(a1, "ckDirtyFlags"));
  v33 = objc_msgSend(a1, "ckIdentifier");
  objc_msgSend(v2, "setCkIdentifier:", v33);

  objc_msgSend(v2, "setCkNeedsInitialFetchFromCloud:", objc_msgSend(a1, "ckNeedsInitialFetchFromCloud"));
  objc_msgSend(v2, "setCkNeedsToBeFetchedFromCloud:", objc_msgSend(a1, "ckNeedsToBeFetchedFromCloud"));
  v34 = objc_msgSend(a1, "ckParentReminderIdentifier");
  objc_msgSend(v2, "setCkParentReminderIdentifier:", v34);

  v35 = (objc_class *)objc_msgSend(a1, "ckServerRecordData");
  isa = v35;
  if (v35)
  {
    v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v39 = v38;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v37, v39);
  }
  objc_msgSend(v2, "setCkServerRecordData:", isa);

  v40 = (objc_class *)objc_msgSend(a1, "ckServerShareData");
  v41 = v40;
  if (v40)
  {
    v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

    v41 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v42, v44);
  }
  objc_msgSend(v2, "setCkServerShareData:", v41);

  v45 = objc_msgSend(a1, "ckZoneOwnerName");
  objc_msgSend(v2, "setCkZoneOwnerName:", v45);

  objc_msgSend(v2, "setCompleted:", objc_msgSend(a1, "completed"));
  v46 = (objc_class *)objc_msgSend(a1, "completionDate");
  v47 = v46;
  if (v46)
  {
    v48 = v165;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v32, v48, v12);
    v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v49(v32, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v32, 1, v12) == 1)
    {
      v47 = 0;
    }
    else
    {
      v47 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
    }
  }
  else
  {
    v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v49(v32, 1, 1, v12);
  }
  objc_msgSend(v2, "setCompletionDate:", v47);

  v50 = (objc_class *)objc_msgSend(a1, "contactHandles");
  v51 = v50;
  if (v50)
  {
    v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v54 = v53;

    v51 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v52, v54);
  }
  v55 = v158;
  objc_msgSend(v2, "setContactHandles:", v51);

  v56 = (objc_class *)objc_msgSend(a1, "creationDate");
  v57 = v56;
  if (v56)
  {
    v58 = v165;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v56);

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v28, v58, v12);
    v49(v28, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v28, 1, v12) == 1)
    {
      v57 = 0;
    }
    else
    {
      v57 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v28, v12);
    }
  }
  else
  {
    v49(v28, 1, 1, v12);
  }
  objc_msgSend(v2, "setCreationDate:", v57);

  v59 = objc_msgSend(a1, "daCalendarItemUniqueIdentifier");
  objc_msgSend(v2, "setDaCalendarItemUniqueIdentifier:", v59);

  v60 = objc_msgSend(a1, "daPushKey");
  objc_msgSend(v2, "setDaPushKey:", v60);

  v61 = objc_msgSend(a1, "daSyncToken");
  objc_msgSend(v2, "setDaSyncToken:", v61);

  v62 = (objc_class *)objc_msgSend(a1, "displayDateDate");
  v63 = v62;
  v64 = v165;
  if (v62)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v62);

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v25, v64, v12);
    v49(v25, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v25, 1, v12) == 1)
    {
      v63 = 0;
    }
    else
    {
      v63 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v25, v12);
    }
  }
  else
  {
    v49(v25, 1, 1, v12);
  }
  objc_msgSend(v2, "setDisplayDateDate:", v63);

  objc_msgSend(v2, "setDisplayDateIsAllDay:", objc_msgSend(a1, "displayDateIsAllDay"));
  v65 = objc_msgSend(a1, "displayDateTimeZone");
  objc_msgSend(v2, "setDisplayDateTimeZone:", v65);

  objc_msgSend(v2, "setDisplayDateUpdatedForSecondsFromGMT:", objc_msgSend(a1, "displayDateUpdatedForSecondsFromGMT"));
  v66 = (objc_class *)objc_msgSend(a1, "dueDate");
  v67 = v66;
  v68 = v156;
  if (v66)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v66);

    v69 = v155;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v155, v64, v12);
    v49(v69, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v69, 1, v12) == 1)
    {
      v67 = 0;
    }
    else
    {
      v70 = v69;
      v67 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v70, v12);
    }
  }
  else
  {
    v49(v155, 1, 1, v12);
  }
  objc_msgSend(v2, "setDueDate:", v67);

  objc_msgSend(v2, "setEffectiveMinimumSupportedAppVersion:", objc_msgSend(a1, "effectiveMinimumSupportedAppVersion"));
  v71 = objc_msgSend(a1, "externalIdentifier");
  objc_msgSend(v2, "setExternalIdentifier:", v71);

  v72 = objc_msgSend(a1, "externalModificationTag");
  objc_msgSend(v2, "setExternalModificationTag:", v72);

  objc_msgSend(v2, "setFlagged:", objc_msgSend(a1, "flagged"));
  objc_msgSend(v2, "setIcsDisplayOrder:", objc_msgSend(a1, "icsDisplayOrder"));
  v73 = objc_msgSend(a1, "icsUrl");
  v74 = v73;
  if (v73)
  {
    v75 = v153;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v73);

    v76 = v157;
    v77 = v75;
    v78 = v55;
    (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v68, v77, v55);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v68, 0, 1, v55);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v68, 1, v55) == 1)
    {
      v74 = 0;
    }
    else
    {
      v80 = v68;
      v81 = v78;
      v82 = v49;
      v83 = v76;
      URL._bridgeToObjectiveC()(v79);
      v74 = v84;
      v85 = *(void (**)(char *, uint64_t))(v83 + 8);
      v49 = v82;
      v85(v80, v81);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v157 + 56))(v68, 1, 1, v55);
  }
  objc_msgSend(v2, "setIcsUrl:", v74);

  v86 = (objc_class *)objc_msgSend(a1, "identifier");
  v87 = v86;
  v88 = v159;
  if (v86)
  {
    v89 = v154;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v86);

    v90 = v160;
    v91 = v161;
    (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v88, v89, v161);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v88, 0, 1, v91);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v91) == 1)
    {
      v87 = 0;
    }
    else
    {
      v92 = v90;
      v87 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v92 + 8))(v88, v91);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v160 + 56))(v159, 1, 1, v161);
  }
  objc_msgSend(v2, "setIdentifier:", v87);

  v93 = (objc_class *)objc_msgSend(a1, "importedICSData");
  v94 = v93;
  if (v93)
  {
    v95 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v93);
    v97 = v96;

    v94 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v95, v97);
  }
  v99 = v162;
  v98 = v163;
  objc_msgSend(v2, "setImportedICSData:", v94);

  v100 = (objc_class *)objc_msgSend(a1, "lastBannerPresentationDate");
  v101 = v100;
  if (v100)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v100);

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v99, v64, v12);
    v49(v99, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v99, 1, v12) == 1)
    {
      v101 = 0;
    }
    else
    {
      v101 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v99, v12);
    }
  }
  else
  {
    v49(v99, 1, 1, v12);
  }
  objc_msgSend(v2, "setLastBannerPresentationDate:", v101);

  v102 = (objc_class *)objc_msgSend(a1, "lastModifiedDate");
  v103 = v102;
  if (v102)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v102);

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v98, v64, v12);
    v49(v98, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v98, 1, v12) == 1)
    {
      v103 = 0;
    }
    else
    {
      v103 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v98, v12);
    }
  }
  else
  {
    v49(v98, 1, 1, v12);
  }
  objc_msgSend(v2, "setLastModifiedDate:", v103);

  objc_msgSend(v2, "setMarkedForDeletion:", objc_msgSend(a1, "markedForDeletion"));
  objc_msgSend(v2, "setMinimumSupportedAppVersion:", objc_msgSend(a1, "minimumSupportedAppVersion"));
  v104 = objc_msgSend(a1, "notes");
  objc_msgSend(v2, "setNotes:", v104);

  v105 = (objc_class *)objc_msgSend(a1, "notesDocument");
  v106 = v105;
  if (v105)
  {
    v107 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v105);
    v109 = v108;

    v106 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v107, v109);
  }
  objc_msgSend(v2, "setNotesDocument:", v106);

  objc_msgSend(v2, "setPriority:", objc_msgSend(a1, "priority"));
  v110 = objc_msgSend(a1, "resolutionTokenMap");
  objc_msgSend(v2, "setResolutionTokenMap:", v110);

  v111 = objc_msgSend(a1, "resolutionTokenMap_v2_JSON");
  objc_msgSend(v2, "setResolutionTokenMap_v2_JSON:", v111);

  v112 = (objc_class *)objc_msgSend(a1, "resolutionTokenMap_v3_JSONData");
  v113 = v112;
  if (v112)
  {
    v114 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v112);
    v116 = v115;

    v113 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v114, v116);
  }
  objc_msgSend(v2, "setResolutionTokenMap_v3_JSONData:", v113);

  v117 = (objc_class *)objc_msgSend(a1, "siriFoundInAppsData");
  v118 = v117;
  if (v117)
  {
    v119 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v117);
    v121 = v120;

    v118 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v119, v121);
  }
  v122 = v164;
  objc_msgSend(v2, "setSiriFoundInAppsData:", v118);

  objc_msgSend(v2, "setSpotlightIndexCount:", objc_msgSend(a1, "spotlightIndexCount"));
  v123 = (objc_class *)objc_msgSend(a1, "startDate");
  v124 = v123;
  if (v123)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v123);

    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v122, v64, v12);
    v49(v122, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v122, 1, v12) == 1)
    {
      v124 = 0;
    }
    else
    {
      v124 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v122, v12);
    }
  }
  else
  {
    v49(v122, 1, 1, v12);
  }
  objc_msgSend(v2, "setStartDate:", v124);

  v125 = objc_msgSend(a1, "timeZone");
  objc_msgSend(v2, "setTimeZone:", v125);

  v126 = objc_msgSend(a1, "title");
  objc_msgSend(v2, "setTitle:", v126);

  v127 = (objc_class *)objc_msgSend(a1, "titleDocument");
  v128 = v127;
  if (v127)
  {
    v129 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v127);
    v131 = v130;

    v128 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v129, v131);
  }
  objc_msgSend(v2, "setTitleDocument:", v128);

  v132 = (objc_class *)objc_msgSend(a1, "userActivity");
  v133 = v132;
  if (v132)
  {
    v134 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v132);
    v136 = v135;

    v133 = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v134, v136);
  }
  objc_msgSend(v2, "setUserActivity:", v133);

  v137 = objc_msgSend(a1, "account");
  objc_msgSend(v2, "setAccount:", v137);

  v138 = objc_msgSend(a1, "alarmStorage");
  objc_msgSend(v2, "setAlarmStorage:", v138);

  v139 = (Class)objc_msgSend(a1, "assignments");
  if (v139)
  {
    v141 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
    v142 = sub_100332AC0();
    static Set._unconditionallyBridgeFromObjectiveC(_:)(v139, v141, v142);

    v139 = Set._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v140 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setAssignments:", v139, v140);

  v143 = objc_msgSend(a1, "attachments");
  objc_msgSend(v2, "setAttachments:", v143);

  v144 = (Class)objc_msgSend(a1, "hashtags");
  if (v144)
  {
    v146 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
    v147 = sub_100332AC0();
    static Set._unconditionallyBridgeFromObjectiveC(_:)(v144, v146, v147);

    v144 = Set._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v145 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setHashtags:", v144, v145);

  v148 = objc_msgSend(a1, "list");
  objc_msgSend(v2, "setList:", v148);

  v149 = objc_msgSend(a1, "parentAccount");
  objc_msgSend(v2, "setParentAccount:", v149);

  v150 = objc_msgSend(a1, "recurrenceRules");
  objc_msgSend(v2, "setRecurrenceRules:", v150);

  v151 = objc_msgSend(a1, "sharedToMeReminderPlaceholder");
  objc_msgSend(v2, "setSharedToMeReminderPlaceholder:", v151);

}

id sub_10046A3C8()
{
  return sub_10046A4AC((uint64_t (*)(_QWORD))type metadata accessor for REMCDReminderInZREMCDREMINDER);
}

uint64_t type metadata accessor for REMCDReminderInZREMCDREMINDER()
{
  return objc_opt_self(REMCDReminderInZREMCDREMINDER);
}

id sub_10046A408()
{
  return sub_10046A4AC((uint64_t (*)(_QWORD))type metadata accessor for REMCDListInModelVersionV5);
}

uint64_t type metadata accessor for REMCDListInModelVersionV5()
{
  return objc_opt_self(REMCDListInModelVersionV5);
}

id sub_10046A448(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)a5(0);
  return objc_msgSendSuper2(&v8, "initWithEntity:insertIntoManagedObjectContext:", a3, a4);
}

id sub_10046A4A0()
{
  return sub_10046A4AC((uint64_t (*)(_QWORD))type metadata accessor for REMCKCloudStateInModelVersionV5);
}

id sub_10046A4AC(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for REMCKCloudStateInModelVersionV5()
{
  return objc_opt_self(REMCKCloudStateInModelVersionV5);
}

void sub_10046A504()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  char *v27;
  int v28;
  void (*v29)(char *, char *, uint64_t);
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  _OWORD v39[2];
  _BYTE v40[24];
  uint64_t v41;
  char *v42;

  v0 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v0);
  v2 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v42 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - v7;
  v9 = objc_allocWithZone((Class)NSFetchRequest);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "initWithEntityName:", v10);

  objc_msgSend(v11, "setResultType:", 2);
  v12 = sub_10001A630((uint64_t *)&unk_100839E80);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 32) = 0x696669746E656469;
  *(_QWORD *)(v13 + 40) = 0xEA00000000007265;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v15 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v16 = v38;
  v17 = NSManagedObjectContext.fetch<A>(_:)(v11, v15);
  if (v16)
  {

    return;
  }
  v18 = v17;
  v34 = v11;
  v37 = v8;
  if (!((unint64_t)v17 >> 62))
  {
    v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v17);
    v20 = v34;
    if (v19)
      goto LABEL_5;
LABEL_29:

    swift_bridgeObjectRelease();
LABEL_30:
    swift_bridgeObjectRelease();
    return;
  }
  if (v17 < 0)
    v32 = v17;
  else
    v32 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v17);
  v19 = _CocoaArrayWrapper.endIndex.getter(v32);
  v20 = v34;
  if (!v19)
    goto LABEL_29;
LABEL_5:
  if (v19 >= 1)
  {
    v33 = 0;
    v21 = 0;
    v38 = v18;
    v36 = v18 & 0xC000000000000001;
    v22 = _swiftEmptyArrayStorage;
    v35 = (char *)&type metadata for Any + 8;
    do
    {
      if (v36)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v38);
      else
        v23 = *(id *)(v38 + 8 * v21 + 32);
      v24 = v23;
      *(_QWORD *)&v39[0] = 0x696669746E656469;
      *((_QWORD *)&v39[0] + 1) = 0xEA00000000007265;
      v25 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v39, &type metadata for String);
      v26 = objc_msgSend(v24, "__swift_objectForKeyedSubscript:", v25);
      swift_unknownObjectRelease(v25);
      if (v26)
      {
        _bridgeAnyObjectToAny(_:)(v39, v26);
        swift_unknownObjectRelease(v26);
      }
      else
      {
        memset(v39, 0, sizeof(v39));
      }
      v27 = v37;
      sub_1000A5CA8((uint64_t)v39, (uint64_t)v40, (uint64_t *)&unk_10083D5B0);
      if (v41)
      {
        v28 = swift_dynamicCast(v2, v40, v35, v3, 6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, v28 ^ 1u, 1, v3);
      }
      else
      {
        sub_10000882C((uint64_t)v40, (uint64_t *)&unk_10083D5B0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
      }

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
      {
        sub_10000882C((uint64_t)v2, (uint64_t *)&unk_100839C80);
      }
      else
      {
        v29 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
        v29(v27, v2, v3);
        v29(v42, v27, v3);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          v22 = (_QWORD *)sub_1002C8EC4(0, v22[2] + 1, 1, (unint64_t)v22);
        v31 = v22[2];
        v30 = v22[3];
        if (v31 >= v30 >> 1)
          v22 = (_QWORD *)sub_1002C8EC4(v30 > 1, v31 + 1, 1, (unint64_t)v22);
        v22[2] = v31 + 1;
        ((void (*)(char *))v29)((char *)v22+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v31);
      }
      ++v21;
    }
    while (v19 != v21);

    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  __break(1u);
}

_QWORD *sub_10046A9CC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v11;
  id v12;
  id v13;
  __n128 v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  _BYTE v30[32];
  _OWORD v31[2];
  __int128 v32;
  uint64_t v33;
  unint64_t v34;

  v5 = type metadata accessor for NSFastEnumerationIterator(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10046AC5C(a1, (uint64_t)a2, 0x73694C44434D4552, 0xE900000000000074, (uint64_t (*)(_QWORD))type metadata accessor for REMCDListInModelVersionV5);
  if (!v2)
  {
    v11 = v9;
    a2 = _swiftEmptyArrayStorage;
    if (v9)
    {
      v12 = objc_msgSend(v9, "reminders");
      if (v12)
      {
        v25[1] = 0;
        v27 = v11;
        v28 = v6;
        v34 = (unint64_t)_swiftEmptyArrayStorage;
        v13 = v12;
        NSOrderedSet.makeIterator()(v14);
        v26 = v13;

        v15 = sub_10009FC50((unint64_t *)&qword_100840028, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
        dispatch thunk of IteratorProtocol.next()(&v32, v5, v15);
        if (v33)
        {
          v16 = (unint64_t *)&qword_100839930;
          do
          {
            sub_10001A6CC(&v32, v31);
            sub_10001A670((uint64_t)v31, (uint64_t)v30);
            v17 = sub_1000151B0(0, v16, NSManagedObject_ptr);
            if (swift_dynamicCast(&v29, v30, (char *)&type metadata for Any + 8, v17, 6))
            {
              v18 = v29;
              v19 = objc_msgSend(v29, "objectID");

              v20 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
              if (v19)
              {
                v21 = v16;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
                v23 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v22 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v23 >= v22 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1);
                v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v19);
                specialized Array._endMutation()(v24);
                v16 = v21;
              }
            }
            else
            {
              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v31);
            }
            dispatch thunk of IteratorProtocol.next()(&v32, v5, v15);
          }
          while (v33);
        }
        (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v5);
        a2 = (_QWORD *)v34;

      }
      else
      {

      }
    }
  }
  return a2;
}

void sub_10046AC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  NSString v15;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  v8 = objc_allocWithZone((Class)NSFetchRequest);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "initWithEntityName:", v9);

  objc_msgSend(v10, "setResultType:", 0);
  v11 = sub_10001A630((uint64_t *)&unk_100839E80);
  v12 = swift_allocObject(v11, 96, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 32) = 0x696669746E656469;
  *(_QWORD *)(v12 + 40) = 0xEA00000000007265;
  v13 = type metadata accessor for UUID(0);
  *(_QWORD *)(v12 + 88) = v13;
  v14 = sub_1000087F0((_QWORD *)(v12 + 64));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v14, a1, v13);
  v15 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v17 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v15, isa);

  objc_msgSend(v10, "setPredicate:", v17);
  objc_msgSend(v10, "setFetchLimit:", 1);
  v18 = a5(0);
  v19 = NSManagedObjectContext.fetch<A>(_:)(v10, v18);
  if (v5)
  {

    return;
  }
  v20 = v19;
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v22 = v19;
    else
      v22 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease();
    if (!v23)
      goto LABEL_8;
  }
  else if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_8:
    swift_bridgeObjectRelease();

    return;
  }
  if ((v20 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v21 = *(id *)(v20 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_10046AEC8(uint64_t *a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11[3];
  _BYTE v12[24];

  result = swift_beginAccess(a1, v12, 1, 0);
  v5 = *a1 + 1;
  if (__OFADD__(*a1, 1))
    __break(1u);
  *a1 = v5;
  if (v5 >= 500)
  {
    v11[0] = 0;
    v6 = objc_msgSend(a2, "save:", v11);
    v7 = v11[0];
    if ((v6 & 1) != 0)
    {
      v8 = v11[0];
      objc_msgSend(a2, "refreshAllObjects");
      result = swift_beginAccess(a1, v11, 1, 0);
      *a1 = 0;
    }
    else
    {
      v9 = v11[0];
      _convertNSErrorToError(_:)(v7);

      return swift_willThrow(v10);
    }
  }
  return result;
}

ValueMetadata *_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDEROMa()
{
  return &_s48MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDERON;
}

uint64_t sub_10046AFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084B710);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084B710);
  if (qword_1008375F8 != -1)
    swift_once(&qword_1008375F8, sub_1004A1790);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

char *sub_10046B068()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  char v7;
  char *result;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  char *v15;
  NSString v16;
  id v17;
  void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR____TtC7remindd17RDLocationManager_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  v7 = _dispatchPreconditionTest(_:)(v4);
  result = (char *)(*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v7 & 1) != 0)
  {
    v9 = sub_10046C768();
    v10 = -[uint8_t bundlePath](v9, "bundlePath");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v12 = v11;

    v13 = objc_allocWithZone((Class)CLLocationManager);
    v14 = v6;
    v15 = v0;
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v13, "initWithEffectiveBundlePath:delegate:onQueue:", v16, v15, v14, swift_bridgeObjectRelease(v12).n128_f64[0]);

    v18 = *(void **)&v15[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager];
    *(_QWORD *)&v15[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager] = v17;

    result = (char *)swift_unknownObjectWeakLoadStrong(&v15[OBJC_IVAR____TtC7remindd17RDLocationManager_delegate], v19);
    if (result)
    {
      v20 = result;
      sub_10046CD64(result);
      return (char *)swift_unknownObjectRelease(v20);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10046B1F8(uint64_t a1)
{
  sub_10046B64C(a1, (void (*)(void))sub_10046B204);
}

void sub_10046B204(void *a1, void *a2, void *a3)
{
  Class v5;
  uint64_t v6;
  id v7;
  objc_class *v8;
  id v9;
  id v10;
  objc_class *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = sub_10046BC28(a3);
  -[objc_class setOnBehalfOfBundleId:](v5, "setOnBehalfOfBundleId:", REMUniversalAppBundleIdentifier);
  if (qword_100837550 != -1)
    swift_once(&qword_100837550, sub_10046AFD8);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_10084B710);
  v7 = a2;
  v8 = v5;
  v9 = a1;
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v25 = v16;
    *(_DWORD *)v15 = 136315394;
    v17 = sub_10046D204(v11);
    v19 = v18;
    v24 = sub_10001A820(v17, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);

    *(_QWORD *)&v20 = swift_bridgeObjectRelease(v19).n128_u64[0];
    *(_WORD *)(v15 + 12) = 2082;
    v21 = CLAuthorizationStatus.description.getter(objc_msgSend(v12, "authorizationStatus", v20));
    v23 = v22;
    v24 = sub_10001A820(v21, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "startMonitoring: %s, authStatus: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  objc_msgSend(v12, "startMonitoringForRegion:", v11);

}

void sub_10046B470(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t);
  id v12;
  char v13;
  void (*v14)(_QWORD *, uint64_t);
  id v15;
  char v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v12 = v9;
  v13 = _dispatchPreconditionTest(_:)(v8);
  v14 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v14(v8, v5);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  *v8 = v12;
  v11(v8, v10, v5);
  v15 = v12;
  v16 = _dispatchPreconditionTest(_:)(v8);
  v14(v8, v5);
  if ((v16 & 1) == 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v17 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager);
  if (!v17)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v18 = v17;
  v19 = objc_msgSend(v18, "monitoredRegions");
  v20 = sub_1000151B0(0, (unint64_t *)&qword_100846C20, CLRegion_ptr);
  v21 = sub_10046E988();
  v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v19, v20, v21);

  swift_bridgeObjectRetain(a2);
  sub_10046CE94(v22, a1, a2);
  v24 = v23;
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(a2);
  if (v24)
  {
    v25 = v24;
    sub_10046B640((uint64_t)v25);

    v18 = v25;
  }

}

void sub_10046B640(uint64_t a1)
{
  sub_10046B64C(a1, (void (*)(void))sub_10046B788);
}

void sub_10046B64C(uint64_t a1, void (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  char v12;
  void (*v13)(_QWORD *, uint64_t);
  id v14;
  char v15;
  void *v16;
  id v17;
  uint64_t v18;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v11 = v8;
  v12 = _dispatchPreconditionTest(_:)(v7);
  v13 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v13(v7, v4);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  *v7 = v11;
  v10(v7, v9, v4);
  v14 = v11;
  v15 = _dispatchPreconditionTest(_:)(v7);
  v13(v7, v4);
  if ((v15 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v16 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager);
  if (v16)
  {
    v17 = v16;
    a2();

    return;
  }
LABEL_7:
  __break(1u);
}

id sub_10046B788(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  if (qword_100837550 != -1)
    swift_once(&qword_100837550, sub_10046AFD8);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_10084B710);
  v7 = a2;
  v8 = a3;
  v9 = v7;
  v10 = v8;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v20 = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = sub_10046D204(v10);
    v17 = v16;
    v19 = sub_10001A820(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "stopMonitoring: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

  }
  return objc_msgSend(a1, "stopMonitoringForRegion:", v10);
}

uint64_t sub_10046B968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  void (*v7)(_QWORD *, uint64_t, uint64_t);
  id v8;
  char v9;
  uint64_t (*v10)(_QWORD *, uint64_t);
  uint64_t result;
  id v12;
  char v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *v4 = v5;
  v6 = enum case for DispatchPredicate.onQueue(_:);
  v7 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 104);
  v7(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v8 = v5;
  v9 = _dispatchPreconditionTest(_:)(v4);
  v10 = *(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8);
  result = v10(v4, v1);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  *v4 = v8;
  v7(v4, v6, v1);
  v12 = v8;
  v13 = _dispatchPreconditionTest(_:)(v4);
  result = v10(v4, v1);
  if ((v13 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v14 = *(void **)(v0 + OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager);
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v15, "monitoredRegions");
    v17 = sub_1000151B0(0, (unint64_t *)&qword_100846C20, CLRegion_ptr);
    v18 = sub_10046E988();
    v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v17, v18);

    return v19;
  }
LABEL_7:
  __break(1u);
  return result;
}

id sub_10046BADC(uint64_t a1)
{
  return sub_10046BAF4(a1, (SEL *)&selRef_locationManager_didEnterRegion_);
}

id sub_10046BAE8(uint64_t a1)
{
  return sub_10046BAF4(a1, (SEL *)&selRef_locationManager_didExitRegion_);
}

id sub_10046BAF4(uint64_t a1, SEL *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t);
  id v12;
  char v13;
  uint64_t (*v14)(_QWORD *, uint64_t);
  id result;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)&v2[OBJC_IVAR____TtC7remindd17RDLocationManager_queue];
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v12 = v9;
  v13 = _dispatchPreconditionTest(_:)(v8);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8);
  result = (id)v14(v8, v5);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  *v8 = v12;
  v11(v8, v10, v5);
  v16 = v12;
  v17 = _dispatchPreconditionTest(_:)(v8);
  result = (id)v14(v8, v5);
  if ((v17 & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v18 = *(_QWORD *)&v2[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager];
  if (v18)
    return objc_msgSend(v2, *a2, v18, a1);
LABEL_7:
  __break(1u);
  return result;
}

Class sub_10046BC28(void *a1)
{
  void *v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  double v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v26;
  uint64_t v27;

  objc_msgSend((id)objc_opt_self(REMStructuredLocation), "minimumRegionMonitoringDistance");
  v3 = v2;
  v4 = objc_opt_self(CLCircularRegion);
  v5 = swift_dynamicCastObjCClass(a1, v4);
  if (!v5)
    return (Class)a1;
  v6 = (void *)v5;
  v7 = a1;
  objc_msgSend(v6, "radius");
  if (v8 >= v3)
  {

    return (Class)a1;
  }
  if (qword_100837550 != -1)
    swift_once(&qword_100837550, sub_10046AFD8);
  v9 = type metadata accessor for Logger(0);
  sub_10001AAA8(v9, (uint64_t)qword_10084B710);
  v10 = v7;
  v11 = v1;
  v12 = v10;
  v13 = v11;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v27 = v17;
    *(_DWORD *)v16 = 136315394;
    v18 = Double.description.getter(v3);
    v20 = v19;
    v26 = sub_10001A820(v18, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v16 + 12) = 2080;
    v21 = sub_10046D204(v6);
    v23 = v22;
    v26 = sub_10001A820(v21, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Radius less than minimum:%s for regionToMonitor:%s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

  }
  sub_1000151B0(0, (unint64_t *)&unk_10084B7D0, CLCircularRegion_ptr);
  return CLCircularRegion.init(circularRegion:radius:)((CLCircularRegion)v6, v3).super.super.isa;
}

id sub_10046BF10()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDLocationManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDLocationManager()
{
  return objc_opt_self(_TtC7remindd17RDLocationManager);
}

uint64_t sub_10046BFDC(uint64_t a1, void *a2, const char *a3, uint64_t a4, unint64_t a5, void (*a6)(NSObject *, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  NSObject **v31;
  uint64_t v32;
  unint64_t v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];

  v34 = a3;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (NSObject ***)((char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(a1 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v18 & 1) != 0)
  {
    if (qword_100837550 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837550, sub_10046AFD8);
LABEL_3:
  v19 = type metadata accessor for Logger(0);
  sub_10001AAA8(v19, (uint64_t)qword_10084B710);
  v20 = a2;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = (NSObject **)swift_slowAlloc(8, -1);
    v32 = a4;
    *(_DWORD *)v23 = 138412290;
    *(_QWORD *)&v35 = v20;
    v24 = v20;
    v33 = a5;
    v25 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 8);
    v26 = v31;
    *v31 = v20;

    a5 = v33;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v34, v23, 0xCu);
    v27 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v26, 1, v27);
    a4 = v32;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {

    v21 = v20;
  }

  if (qword_1008371A8 != -1)
    swift_once(&qword_1008371A8, sub_1003201E8);
  v35 = xmmword_1006BD0B0;
  v37 = 0;
  v38[0] = 0;
  v36 = 0;
  *(_QWORD *)((char *)v38 + 6) = 0;
  sub_10001B228((uint64_t)&v35, a4, a5);
  result = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC7remindd17RDLocationManager_delegate, v28);
  if (result)
  {
    v30 = result;
    a6(v20, result);
    return swift_unknownObjectRelease(v30);
  }
  return result;
}

void sub_10046C2E0(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, const char *a7, void (*a8)(NSObject *, uint64_t))
{
  id v14;
  id v15;
  id v16;

  v16 = a1;
  v14 = a4;
  v15 = a3;
  sub_10046D7F0(a5, a6, (uint64_t)v16, v14, a7, a5, (unint64_t)a6, a8);

}

uint64_t sub_10046C4B4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(a1 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    if (qword_100837550 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837550, sub_10046AFD8);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_10084B710);
  v12 = a2;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v22 = v16;
    *(_DWORD *)v15 = 136446210;
    v17 = CLAuthorizationStatus.description.getter(objc_msgSend(v12, "authorizationStatus"));
    v21 = sub_10001A820(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "didChangeAuthorization: {status: %{public}s}", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  result = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC7remindd17RDLocationManager_delegate, v19);
  if (result)
    return swift_unknownObjectRelease(result);
  return result;
}

uint8_t *sub_10046C768()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  void (*v18)(char *, char *, uint64_t);
  NSString *(__cdecl **v19)(SEL);
  id v20;
  NSURL *v21;
  void *v22;
  void *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  void (*v36)(char *, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __n128 v53;
  void (*v54)(char *, uint64_t, __n128);
  uint64_t v55;
  id v56;
  uint8_t *v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;

  v0 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v0);
  v2 = (char *)&v57 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v57 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v57 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v57 - v14;
  v16 = objc_msgSend((id)objc_opt_self(RDPaths), "locationBundleURL");
  if (v16)
  {
    v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v18 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v18(v2, v13, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
    {
      v18(v15, v2, v3);
      v19 = &NSStringFromSelector_ptr;
      v20 = objc_allocWithZone((Class)NSBundle);
      URL._bridgeToObjectiveC()(v21);
      v23 = v22;
      v24 = (uint8_t *)objc_msgSend(v20, "initWithURL:", v22);

      if (v24)
      {
        if (qword_100837550 != -1)
          swift_once(&qword_100837550, sub_10046AFD8);
        v25 = type metadata accessor for Logger(0);
        sub_10001AAA8(v25, (uint64_t)qword_10084B710);
        v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v10, v15, v3);
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.default.getter(v27);
        if (os_log_type_enabled(v27, v28))
        {
          v29 = (uint8_t *)swift_slowAlloc(12, -1);
          v30 = swift_slowAlloc(32, -1);
          v58 = v24;
          v31 = v30;
          v60 = v30;
          *(_DWORD *)v29 = 136315138;
          v57 = v29 + 4;
          v32 = URL.path.getter(v30);
          v34 = v33;
          v59 = sub_10001A820(v32, v33, &v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
          v35 = swift_bridgeObjectRelease(v34);
          v36 = *(void (**)(char *, uint64_t, __n128))(v4 + 8);
          v36(v10, v3, v35);
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "daemonLocationBundle() successfully obtained from from %s", v29, 0xCu);
          swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
          v37 = v31;
          v24 = v58;
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v29, -1, -1);

        }
        else
        {

          v36 = *(void (**)(char *, uint64_t, __n128))(v4 + 8);
          ((void (*)(char *, uint64_t))v36)(v10, v3);
        }
        ((void (*)(char *, uint64_t))v36)(v15, v3);
        return v24;
      }
      else
      {
        if (qword_100837550 != -1)
          swift_once(&qword_100837550, sub_10046AFD8);
        v44 = type metadata accessor for Logger(0);
        sub_10001AAA8(v44, (uint64_t)qword_10084B710);
        v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v15, v3);
        v46 = Logger.logObject.getter(v45);
        v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v47))
        {
          v48 = (uint8_t *)swift_slowAlloc(12, -1);
          v49 = swift_slowAlloc(32, -1);
          v60 = v49;
          *(_DWORD *)v48 = 136315138;
          v58 = v48 + 4;
          v50 = URL.path.getter(v49);
          v52 = v51;
          v59 = sub_10001A820(v50, v51, &v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
          v53 = swift_bridgeObjectRelease(v52);
          v54 = *(void (**)(char *, uint64_t, __n128))(v4 + 8);
          v54(v7, v3, v53);
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "daemonLocationBundle() cannot locate bundle at %s, using Bundle.main instead. Location services will not work. This is expected for simulator.", v48, 0xCu);
          swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
          v55 = v49;
          v19 = &NSStringFromSelector_ptr;
          swift_slowDealloc(v55, -1, -1);
          swift_slowDealloc(v48, -1, -1);
        }
        else
        {
          v54 = *(void (**)(char *, uint64_t, __n128))(v4 + 8);
          ((void (*)(char *, uint64_t))v54)(v7, v3);
        }

        v56 = objc_msgSend((id)objc_opt_self(v19[104]), "mainBundle");
        ((void (*)(char *, uint64_t))v54)(v15, v3);
        return (uint8_t *)v56;
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  }
  sub_10015CFD4((uint64_t)v2);
  if (qword_100837550 != -1)
    swift_once(&qword_100837550, sub_10046AFD8);
  v38 = type metadata accessor for Logger(0);
  v39 = sub_10001AAA8(v38, (uint64_t)qword_10084B710);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "daemonLocationBundle() does not have a URL for location bundle, using Bundle.main instead. Location services will not work. This is expected for simulator.", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  return (uint8_t *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
}

uint64_t sub_10046CD64(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (qword_100837760 != -1)
    swift_once(&qword_100837760, sub_1004E8E78);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10084D5A0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "locationManagerDidStart, reconciling all geofences", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)&a1[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  v8 = swift_allocObject(&unk_1007F4CE0, 24, 7);
  *(_QWORD *)(v8 + 16) = a1;
  v9 = a1;
  sub_1004EBD8C(v7, 0xD000000000000017, (void *)0x8000000100704F60, (uint64_t)sub_10046EA04, v8);
  return swift_release(v8);
}

void sub_10046CE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  void *v40;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_1000151B0(0, (unint64_t *)&qword_100846C20, CLRegion_ptr);
    v9 = sub_10046E988();
    v10 = Set.Iterator.init(_cocoa:)(v39, v7, v8, v9);
    v5 = v39[0];
    v35 = v39[1];
    v11 = v39[2];
    v12 = v39[3];
    v13 = v39[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v35 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v11 = v15;
    v12 = 0;
  }
  v33 = v11;
  v34 = (unint64_t)(v11 + 64) >> 6;
  v36 = v12;
  v37 = v13;
  if (v5 < 0)
    goto LABEL_13;
LABEL_11:
  if (v13)
  {
    v18 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v19 = v18 | (v12 << 6);
    goto LABEL_32;
  }
  v24 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v24 < v34)
    {
      v25 = *(_QWORD *)(v35 + 8 * v24);
      ++v12;
      if (v25)
        goto LABEL_31;
      v12 = v24 + 1;
      if (v24 + 1 >= v34)
        goto LABEL_39;
      v25 = *(_QWORD *)(v35 + 8 * v12);
      if (v25)
        goto LABEL_31;
      v12 = v24 + 2;
      if (v24 + 2 >= v34)
        goto LABEL_39;
      v25 = *(_QWORD *)(v35 + 8 * v12);
      if (v25)
        goto LABEL_31;
      v12 = v24 + 3;
      if (v24 + 3 >= v34)
        goto LABEL_39;
      v25 = *(_QWORD *)(v35 + 8 * v12);
      if (v25)
      {
LABEL_31:
        v13 = (v25 - 1) & v25;
        v19 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_32:
        v23 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v19);
        if (v23)
        {
          while (1)
          {
            v27 = a3;
            v28 = objc_msgSend(v23, "identifier", v33);
            v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
            v31 = v30;

            a3 = v27;
            if (v29 == a2 && v31 == v27)
              break;
            v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, a2, v27, 0);
            swift_bridgeObjectRelease(v31);
            if ((v32 & 1) != 0)
              goto LABEL_39;

            v36 = v12;
            v37 = v13;
            if ((v5 & 0x8000000000000000) == 0)
              goto LABEL_11;
LABEL_13:
            v20 = __CocoaSet.Iterator.next()(v10);
            if (v20)
            {
              v21 = v20;
              v38 = v20;
              v22 = sub_1000151B0(0, (unint64_t *)&qword_100846C20, CLRegion_ptr);
              swift_unknownObjectRetain(v21);
              swift_dynamicCast(&v40, &v38, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
              v23 = v40;
              swift_unknownObjectRelease(v21);
              v13 = v37;
              if (v23)
                continue;
            }
            goto LABEL_39;
          }
          swift_bridgeObjectRelease(v27);
        }
        goto LABEL_39;
      }
      v12 = v24 + 4;
      if (v24 + 4 < v34)
      {
        v25 = *(_QWORD *)(v35 + 8 * v12);
        if (!v25)
        {
          v26 = v36 + 6;
          while (v34 != v26)
          {
            v25 = *(_QWORD *)(v35 + 8 * v26++);
            if (v25)
            {
              v12 = v26 - 1;
              goto LABEL_31;
            }
          }
          goto LABEL_39;
        }
        goto LABEL_31;
      }
    }
LABEL_39:
    sub_1000C6560(v5);
    return;
  }
  __break(1u);
}

uint64_t sub_10046D204(void *a1)
{
  unsigned int v2;
  Swift::String v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;

  v2 = objc_msgSend(a1, "conservativeEntry");
  _StringGuts.grow(_:)(58);
  v3._countAndFlagsBits = 60;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4 = objc_msgSend(a1, "description");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0x4F796669746F6E20;
  v9._object = (void *)0xEF3A7972746E456ELL;
  String.append(_:)(v9);
  v10 = objc_msgSend(a1, "notifyOnEntry");
  v11 = v10 == 0;
  if (v10)
    v12 = 1702195828;
  else
    v12 = 0x65736C6166;
  if (v11)
    v13 = 0xE500000000000000;
  else
    v13 = 0xE400000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0x4F796669746F6E20;
  v15._object = (void *)0xEE003A746978456ELL;
  String.append(_:)(v15);
  v16 = objc_msgSend(a1, "notifyOnExit");
  v17 = v16 == 0;
  if (v16)
    v18 = 1702195828;
  else
    v18 = 0x65736C6166;
  if (v17)
    v19 = 0xE500000000000000;
  else
    v19 = 0xE400000000000000;
  v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease(v19);
  v21._object = (void *)0x8000000100704EF0;
  v21._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v21);
  if (v2)
    v22 = 1702195828;
  else
    v22 = 0x65736C6166;
  if (v2)
    v23 = 0xE400000000000000;
  else
    v23 = 0xE500000000000000;
  v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease(v23);
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  return 0;
}

uint64_t sub_10046D3E0(void *a1, char *a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char *v15;
  id v17;
  uint64_t v18;

  if (qword_100837760 != -1)
    swift_once(&qword_100837760, sub_1004E8E78);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_10084D5A0);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v17 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDLocationAlarmProducer didEnterRegion: %@", v8, 0xCu);
    v11 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = *(_QWORD *)&a2[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  v13 = swift_allocObject(&unk_1007F4CB8, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = v5;
  v14 = v5;
  v15 = a2;
  sub_1004EBD8C(v12, 0x7265746E45646964, (void *)0xEE006E6F69676552, (uint64_t)sub_10046E980, v13);
  return swift_release(v13);
}

uint64_t sub_10046D5E8(void *a1, char *a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char *v15;
  id v17;
  uint64_t v18;

  if (qword_100837760 != -1)
    swift_once(&qword_100837760, sub_1004E8E78);
  v4 = type metadata accessor for Logger(0);
  sub_10001AAA8(v4, (uint64_t)qword_10084D5A0);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v17 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDLocationAlarmProducer didExitRegion: %@", v8, 0xCu);
    v11 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = *(_QWORD *)&a2[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue];
  v13 = swift_allocObject(&unk_1007F4C90, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = v5;
  v14 = v5;
  v15 = a2;
  sub_1004EBD8C(v12, 0x5274697845646964, (void *)0xED00006E6F696765, (uint64_t)sub_10046E978, v13);
  return swift_release(v13);
}

void sub_10046D7F0(uint64_t a1, void *a2, uint64_t a3, void *a4, const char *a5, uint64_t a6, unint64_t a7, void (*a8)(NSObject *, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(NSObject *, uint64_t);
  void (*v38)(NSObject *, uint64_t);
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  if (qword_100837550 != -1)
    swift_once(&qword_100837550, sub_10046AFD8);
  v15 = type metadata accessor for Logger(0);
  sub_10001AAA8(v15, (uint64_t)qword_10084B710);
  v16 = swift_bridgeObjectRetain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v39 = a7;
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = a8;
    v20 = swift_slowAlloc(32, -1);
    v42 = v20;
    *(_DWORD *)v19 = 136446210;
    swift_bridgeObjectRetain(a2);
    v41 = sub_10001A820(a1, (unint64_t)a2, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "os_transaction INIT {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v21 = v20;
    a8 = v37;
    swift_slowDealloc(v21, -1, -1);
    v22 = v19;
    a7 = v39;
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v42 = 0;
  v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  v42 = 0xD00000000000002CLL;
  v43 = 0x8000000100704F30;
  v23._countAndFlagsBits = a1;
  v23._object = a2;
  String.append(_:)(v23);
  v24 = String.utf8CString.getter(v42, v43);
  swift_bridgeObjectRelease();
  v25 = os_transaction_create(v24 + 32);
  swift_release(v24);
  if (v25)
  {
    sub_10046BFDC(a3, a4, a5, a6, a7, a8);
    v26 = swift_bridgeObjectRetain_n(a2, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v42 = v30;
      *(_DWORD *)v29 = 136446210;
      swift_bridgeObjectRetain(a2);
      v41 = sub_10001A820(a1, (unint64_t)a2, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "os_transaction RELEASE {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      swift_unknownObjectRelease(v25);
    }
    else
    {

      swift_unknownObjectRelease(v25);
      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  else
  {
    v31 = swift_bridgeObjectRetain_n(a2, 2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = a8;
      v35 = swift_slowAlloc(32, -1);
      v42 = v35;
      *(_DWORD *)v34 = 136446210;
      swift_bridgeObjectRetain(a2);
      v41 = sub_10001A820(a1, (unint64_t)a2, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDLocationManagerDelegate: Couldn't create os_transaction_t for %{public}s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      v36 = v35;
      a8 = v38;
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    sub_10046BFDC(a3, a4, a5, a6, a7, a8);
  }
}

void sub_10046DCD4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  if (qword_100837550 != -1)
    swift_once(&qword_100837550, sub_10046AFD8);
  v8 = type metadata accessor for Logger(0);
  sub_10001AAA8(v8, (uint64_t)qword_10084B710);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v28 = v13;
    *(_DWORD *)v12 = 136446210;
    swift_bridgeObjectRetain(a2);
    v27 = sub_10001A820(a1, (unint64_t)a2, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "os_transaction INIT {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v28 = 0;
  v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  v28 = 0xD00000000000002CLL;
  v29 = 0x8000000100704F30;
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  v15 = String.utf8CString.getter(v28, v29);
  swift_bridgeObjectRelease();
  v16 = os_transaction_create(v15 + 32);
  swift_release(v15);
  if (v16)
  {
    sub_10046C4B4(a3, a4);
    v17 = swift_bridgeObjectRetain_n(a2, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v28 = v21;
      *(_DWORD *)v20 = 136446210;
      swift_bridgeObjectRetain(a2);
      v27 = sub_10001A820(a1, (unint64_t)a2, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "os_transaction RELEASE {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_unknownObjectRelease(v16);
    }
    else
    {

      swift_unknownObjectRelease(v16);
      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
  else
  {
    v22 = swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v28 = v26;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain(a2);
      v27 = sub_10001A820(a1, (unint64_t)a2, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "RDLocationManagerDelegate: Couldn't create os_transaction_t for %{public}s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    sub_10046C4B4(a3, a4);
  }
}

void sub_10046E178(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    if (qword_100837550 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837550, sub_10046AFD8);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_10084B710);
  v13 = a2;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v17 = (_QWORD *)swift_slowAlloc(8, -1);
    v18 = swift_slowAlloc(32, -1);
    v23 = a1;
    v24 = v18;
    *(_DWORD *)v16 = 136315394;
    v19 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v23 = sub_10001A820(v19, v20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2112;
    v23 = (uint64_t)v13;
    v21 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    *v17 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "didDetermineState: {state=%s, region=%@}", (uint8_t *)v16, 0x16u);
    v22 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v17, 1, v22);
    swift_slowDealloc(v17, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

  }
}

void sub_10046E420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (_QWORD *)((char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v1 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_100837550 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837550, sub_10046AFD8);
LABEL_3:
  v10 = type metadata accessor for Logger(0);
  sub_10001AAA8(v10, (uint64_t)qword_10084B710);
  swift_errorRetain(a1);
  v11 = swift_errorRetain(a1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v21 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_getErrorValue(a1, v20, v19);
    v16 = Error.localizedDescription.getter(v19[1], v19[2]);
    v18 = sub_10001A820(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "didFailWithError: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

}

void sub_10046E664(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[3];
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_QWORD *)((char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v2 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    if (qword_100837550 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100837550, sub_10046AFD8);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_10084B710);
  v13 = a1;
  swift_errorRetain(a2);
  v14 = v13;
  v15 = swift_errorRetain(a2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v29 = v19;
    *(_DWORD *)v18 = 136315394;
    if (a1)
    {
      v20 = objc_msgSend(v14, "description");
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

    }
    else
    {
      v23 = 0xE300000000000000;
      v21 = 7104878;
    }
    v28 = sub_10001A820(v21, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);

    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_getErrorValue(a2, v27, v26);
    v24 = Error.localizedDescription.getter(v26[1], v26[2]);
    v28 = sub_10001A820(v24, v25, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "monitoringDidFailFor: {region=%s, error=%s}", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

}

uint64_t sub_10046E94C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10046E978()
{
  uint64_t v0;

  return sub_1004EAE40(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10046E980()
{
  uint64_t v0;

  return sub_1004EACBC(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_10046E988()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084B7E0;
  if (!qword_10084B7E0)
  {
    v1 = sub_1000151B0(255, (unint64_t *)&qword_100846C20, CLRegion_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10084B7E0);
  }
  return result;
}

uint64_t sub_10046E9E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10046EA04()
{
  return sub_1004EAC9C();
}

uint64_t sub_10046EA10(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_10001A630(&qword_10084B7F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_10046F1EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RDSavedHashtag.CodingKeys, &type metadata for RDSavedHashtag.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v21, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = v3[2];
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v20, v5);
    v15 = v3[3];
    v16 = v3[4];
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10046EB4C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 1701667182;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_10046EB9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10046EEE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10046EBC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10046F1EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10046EBE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10046F1EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10046EC10@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_10046F010(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10046EC54(_QWORD *a1)
{
  return sub_10046EA10(a1);
}

uint64_t sub_10046EC68(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_10046ECB0(v5, v7) & 1;
}

uint64_t sub_10046ECB0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*a1 != *a2)
    return 0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a2[1];
  v7 = a2[2];
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    v11 = a1[3];
    v12 = a1[4];
    v13 = a2[3];
    v14 = a2[4];
    if (v11 == v13 && v12 == v14)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0);
  }
  return result;
}

uint64_t initializeWithCopy for RDSavedHashtag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for RDSavedHashtag(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for RDSavedHashtag(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedHashtag(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedHashtag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedHashtag()
{
  return &type metadata for RDSavedHashtag;
}

uint64_t sub_10046EEE0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100704FA0)
  {
    swift_bridgeObjectRelease(0x8000000100704FA0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100704FA0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_10046F010(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v5 = sub_10001A630(&qword_10084B7E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v9);
  v11 = sub_10046F1EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RDSavedHashtag.CodingKeys, &type metadata for RDSavedHashtag.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  else
  {
    v26 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
    v25 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
    v15 = v14;
    v23 = v13;
    v24 = 2;
    swift_bridgeObjectRetain(v14);
    v16 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
    v18 = v17;
    v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20 = v16;
    v19(v8, v5);
    swift_bridgeObjectRetain(v18);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v23;
    *a2 = v12;
    a2[1] = v21;
    a2[2] = v15;
    a2[3] = v20;
    a2[4] = v18;
  }
}

unint64_t sub_10046F1EC()
{
  unint64_t result;

  result = qword_10084B7F0;
  if (!qword_10084B7F0)
  {
    result = swift_getWitnessTable(&unk_1006BD28C, &type metadata for RDSavedHashtag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084B7F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RDSavedHashtag.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10046F27C + 4 * byte_1006BD139[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10046F2B0 + 4 * byte_1006BD134[v4]))();
}

uint64_t sub_10046F2B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10046F2B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10046F2C0);
  return result;
}

uint64_t sub_10046F2CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10046F2D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10046F2D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10046F2E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedHashtag.CodingKeys()
{
  return &type metadata for RDSavedHashtag.CodingKeys;
}

unint64_t sub_10046F300()
{
  unint64_t result;

  result = qword_10084B800;
  if (!qword_10084B800)
  {
    result = swift_getWitnessTable(&unk_1006BD264, &type metadata for RDSavedHashtag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084B800);
  }
  return result;
}

unint64_t sub_10046F348()
{
  unint64_t result;

  result = qword_10084B808;
  if (!qword_10084B808)
  {
    result = swift_getWitnessTable(&unk_1006BD1D4, &type metadata for RDSavedHashtag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084B808);
  }
  return result;
}

unint64_t sub_10046F390()
{
  unint64_t result;

  result = qword_10084B810;
  if (!qword_10084B810)
  {
    result = swift_getWitnessTable(&unk_1006BD1FC, &type metadata for RDSavedHashtag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10084B810);
  }
  return result;
}

double sub_10046F3D4@<D0>(uint64_t a1@<X8>)
{
  return sub_10046F3E8(a1);
}

double sub_10046F3E8@<D0>(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  double result;

  v2 = objc_msgSend((id)objc_opt_self(DABabysitter), "sharedBabysitter");
  if (v2)
  {
    v3 = v2;
    *(_QWORD *)(a1 + 24) = sub_1004704D0();
    *(_QWORD *)(a1 + 32) = &off_1007F4EC0;
    *(_QWORD *)a1 = v3;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_10046F454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __n128))(a4 + 8))(&v37, a3, a4, v11);
  if (!v38)
  {
    sub_1001B2194((uint64_t)&v37);
    return;
  }
  sub_10001BCA8(&v37, (uint64_t)v39);
  v14 = v40;
  v15 = v41;
  sub_10000A388(v39, v40);
  (*(void (**)(void *, uint64_t, uint64_t))(v15 + 16))(v4, v14, v15);
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v16 = sub_10001AAA8(v9, (uint64_t)qword_10084B820);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v16, v9);
  swift_bridgeObjectRetain_n(a2, 2);
  v17 = v4;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (!os_log_type_enabled(v18, v19))
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_9;
  }
  v33 = a1;
  v34 = v10;
  v35 = a2;
  v20 = swift_slowAlloc(22, -1);
  v32 = swift_slowAlloc(64, -1);
  v36 = v32;
  *(_DWORD *)v20 = 136446466;
  v21 = objc_msgSend(v17, "waiterID");
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

    *(_QWORD *)&v37 = sub_10001A820(v23, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8);

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    v26 = v35;
    *(_QWORD *)&v37 = v33;
    *((_QWORD *)&v37 + 1) = v35;
    v27 = sub_10001A630((uint64_t *)&unk_10083A370);
    v28 = Optional.descriptionOrNil.getter(v27);
    *(_QWORD *)&v37 = sub_10001A820(v28, v29, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8);
    swift_bridgeObjectRelease_n(v26, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Reset babysitter for {waiterID: %{public}s, event: %{public}s}", (uint8_t *)v20, 0x16u);
    v30 = v32;
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v9);
LABEL_9:
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v39);
    return;
  }

  swift_bridgeObjectRelease();
  __break(1u);
}

void sub_10046F784(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (**v20)(_QWORD, _QWORD);
  char *v21;
  _QWORD *v22;
  id v23;
  NSObject *v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  os_log_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v51 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  sub_10000A388(a1, v11);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v11, v10);
  v50 = a2;
  v13 = v52;
  v15 = sub_10046FBC8(v12, v14, a2, a3);
  if (v13)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v16 = (void *)v15;
  v49 = v3;
  v46 = 0;
  v17 = a3;
  v52 = v9;
  swift_bridgeObjectRelease();
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v18 = v51;
  v19 = sub_10001AAA8(v51, (uint64_t)qword_10084B820);
  v20 = (void (**)(_QWORD, _QWORD))v7;
  v21 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v52, v19, v18);
  v22 = a1;
  sub_100385E40((uint64_t)a1, (uint64_t)v54);
  v23 = v49;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, (os_log_type_t)v25);
  v47 = v16;
  v48 = v17;
  if (!v26)
  {

    v33 = v23;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v54);

    ((void (**)(char *, uint64_t))v20)[1](v21, v18);
    goto LABEL_9;
  }
  v44 = v25;
  v45 = v24;
  v49 = v20;
  v27 = swift_slowAlloc(22, -1);
  v43 = swift_slowAlloc(64, -1);
  v57 = v43;
  *(_DWORD *)v27 = 136446466;
  v28 = objc_msgSend(v23, "waiterID");
  if (v28)
  {
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

    v53 = sub_10001A820(v30, v32, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);

    v33 = v23;
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    v35 = v55;
    v34 = v56;
    sub_10000A388(v54, v55);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v35, v34);
    v53 = sub_10001A820(v36, v37, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v54);
    v38 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v27, 0x16u);
    v39 = v43;
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    (*((void (**)(char *, uint64_t))v49 + 1))(v52, v51);
LABEL_9:
    v40 = v22[3];
    v41 = v22[5];
    sub_10000A388(v22, v40);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
    sub_100470220(v33, (uint64_t)v22);

    return;
  }

  __break(1u);
}

uint64_t sub_10046FB38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084B820);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084B820);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10046FBC8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v5 = v4;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 8))(v13, a3, a4);
  v8 = v14;
  if (!v14)
  {
    sub_1001B2194((uint64_t)v13);
LABEL_5:
    v10 = v5;
    sub_10046FD44(a1, a2);
    swift_willThrow(v11);
    return v10;
  }
  v9 = v15;
  sub_10000A388(v13, v14);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v9 + 8))(v4, a1, a2, v8, v9);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v13);
  if (!v10)
    goto LABEL_5;
  return v10;
}

id sub_10046FCB4()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;

  result = objc_msgSend(v0, "waiterID");
  if (result)
  {
    v2 = result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v5 = v4;

    swift_bridgeObjectRetain(v5);
    v6._countAndFlagsBits = 0x646568736172632ELL;
    v6._object = (void *)0xE800000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(v5);
    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10046FD44(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t inited;
  unint64_t v13;
  __n128 v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[56];

  v5 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(REMError);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "babySatErrorWithOperationName:", v9);

  v11 = sub_10001A630((uint64_t *)&unk_10083DAB0);
  inited = swift_initStackObject(v11, v45);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = 0x696669746E656469;
  *(_QWORD *)(inited + 40) = 0xEA00000000007265;
  v41 = a1;
  *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
  v13 = sub_1002AFCB4(inited);
  type metadata accessor for Analytics(0, v14);
  v15 = v2;
  v16 = sub_10046FCB4();
  v18 = v17;
  v19 = sub_1003B0B84(v13);
  swift_bridgeObjectRelease();
  v20 = v10;
  static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)(v16, v18, v19, v10, 1);
  swift_bridgeObjectRelease();
  v21 = v20;
  swift_bridgeObjectRelease();

  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v22 = sub_10001AAA8(v5, (uint64_t)qword_10084B820);
  v23 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v7, v22, v5);
  swift_bridgeObjectRetain_n(a2, 2);
  v24 = v15;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.fault.getter();
  v27 = v23;
  v28 = a2;
  if (os_log_type_enabled(v25, v26))
  {
    v38 = v21;
    v39 = v7;
    v40 = v5;
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v44 = v30;
    *(_DWORD *)v29 = 136446466;
    swift_bridgeObjectRetain(v28);
    v43 = sub_10001A820(v41, v28, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    *(_QWORD *)&v31 = swift_bridgeObjectRelease_n(v28, 3).n128_u64[0];
    *(_WORD *)(v29 + 12) = 2082;
    v32 = objc_msgSend(v24, "waiterID", v31);
    if (v32)
    {
      v33 = v32;
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v36 = v35;

      v43 = sub_10001A820(v34, v36, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Babysitting operation because it failed too many times {operation: %{public}s, waiterID: %{public}s}", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v40);
    }
    else
    {

      __break(1u);
    }
  }
  else
  {

    v37 = swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t, __n128))(v27 + 8))(v7, v5, v37);
  }
}

id sub_10047011C(uint64_t a1)
{
  void **v1;
  void *v3;
  NSString v4;
  id v5;

  v3 = *v1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "tokenByRegisteringAccount:forOperationWithName:", a1, v4);

  return v5;
}

void sub_100470180(void *a1)
{
  void **v1;
  void *v2;
  id v3;

  v2 = *v1;
  v3 = objc_msgSend(a1, "waiterID");
  objc_msgSend(v2, "giveAccountWithIDAnotherChance:", v3);

}

uint64_t sub_1004701D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for RDSimpleExecutable()
{
  return objc_opt_self(_TtC7remindd18RDSimpleExecutable);
}

void sub_100470220(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837558 != -1)
    swift_once(&qword_100837558, sub_10046FB38);
  v8 = sub_10001AAA8(v4, (uint64_t)qword_10084B820);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_100385E40(a2, (uint64_t)v27);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v24 = v5;
    v12 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v26 = v23;
    *(_DWORD *)v12 = 136446466;
    v13 = objc_msgSend(v9, "waiterID");
    if (v13)
    {
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      v25 = sub_10001A820(v15, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      v18 = v28;
      v19 = v29;
      sub_10000A388(v27, v28);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
      v25 = sub_10001A820(v20, v21, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Released babysitter token for {waiterID: %{public}s, executable: %{public}s}", (uint8_t *)v12, 0x16u);
      v22 = v23;
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v4);
    }
    else
    {

      __break(1u);
    }
  }
  else
  {

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

unint64_t sub_1004704D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083EFE8;
  if (!qword_10083EFE8)
  {
    v1 = objc_opt_self(DABabysitter);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083EFE8);
  }
  return result;
}

uint64_t sub_10047050C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + 88);
}

uint64_t type metadata accessor for RDMentionsExtractor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDMentionsExtractor);
}

uint64_t sub_10047054C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_1004705C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v9);
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_100470684(_QWORD *a1, uint64_t a2)
{
  __n128 v4;

  v4 = swift_bridgeObjectRelease(*a1);
  return (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80), v4);
}

uint64_t *sub_1004706C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t *sub_100470738(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  v8 = swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t, __n128))(v9 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), v8);
  return a1;
}

_QWORD *sub_1004707A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_1004707F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;

  v6 = *a1;
  *a1 = *a2;
  v7 = swift_bridgeObjectRelease(v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t, __n128))(v8 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_100470860(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_100470934 + 4 * byte_1006BD390[(v9 - 1)]))();
}

void sub_1004709A4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for RDMentionsExtractor.Candidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDMentionsExtractor.Candidate);
}

uint64_t sub_100470BA4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1006BD428;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_100470C18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_100470CC8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_100470CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100470D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_100470D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100470DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_100470E58(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_100470EC8 + 4 * byte_1006BD39E[v8]))();
}

void sub_100470F20(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_100471008()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_100471010(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x100471018);
}

void sub_100471034()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_10047103C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_100471044(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x10047104CLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for RDMentionsExtractor.ExtractionResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E6C78(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RDMentionsExtractor.ExtractionResult);
}

uint64_t sub_100471070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084BA68);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084BA68);
  if (qword_1008376A0 != -1)
    swift_once(&qword_1008376A0, sub_1004A19DC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_1008721C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100471100(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  double v18;
  unint64_t v19;
  char v20;
  double v21;
  unint64_t v22;
  char v23;
  double v24;
  unint64_t v25;
  char v26;
  double v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  id v31;
  id v32;
  unint64_t v33;
  char v34;
  int v35;
  id v36;
  NSString v37;
  unint64_t v38;
  NSString v39;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  double v46;
  uint64_t v47;
  _BYTE v48[32];

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = 0;
    v7 = 0;
    goto LABEL_22;
  }
  v4 = sub_10001A6DC(0xD000000000000013, 0x8000000100705000);
  if ((v5 & 1) == 0)
  {
    v7 = 0;
    v8 = 0;
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_13;
LABEL_22:
    v13 = 0;
    v12 = 0;
    goto LABEL_23;
  }
  sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v48);
  v6 = swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (v6)
    v7 = *(_QWORD *)&v46;
  else
    v7 = 0;
  if (v6)
    v8 = v47;
  else
    v8 = 0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_22;
LABEL_13:
  v9 = sub_10001A6DC(0x7274537865486164, 0xEB00000000676E69);
  if ((v10 & 1) != 0)
  {
    sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)v48);
    v11 = swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v11)
      v12 = *(_QWORD *)&v46;
    else
      v12 = 0;
    if (v11)
      v13 = v47;
    else
      v13 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_23;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_23;
  }
  v33 = sub_10001A6DC(0xD000000000000013, 0x8000000100705020);
  if ((v34 & 1) != 0)
  {
    sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v33, (uint64_t)v48);
    v35 = swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v35)
      v14 = *(_QWORD *)&v46;
    else
      v14 = 0;
    if (v35)
      v15 = v47;
    else
      v15 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_48;
    goto LABEL_24;
  }
LABEL_23:
  v14 = 0;
  v15 = 0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_48;
LABEL_24:
  v16 = sub_10001A6DC(6579570, 0xE300000000000000);
  if ((v17 & 1) != 0)
  {
    sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)v48);
    if ((swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        v18 = v46;
        v19 = sub_10001A6DC(0x6E65657267, 0xE500000000000000);
        if ((v20 & 1) != 0)
        {
          sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v19, (uint64_t)v48);
          if ((swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
          {
            if (*(_QWORD *)(a1 + 16))
            {
              v21 = v46;
              v22 = sub_10001A6DC(1702194274, 0xE400000000000000);
              if ((v23 & 1) != 0)
              {
                sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v22, (uint64_t)v48);
                if ((swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
                {
                  if (*(_QWORD *)(a1 + 16))
                  {
                    v24 = v46;
                    v25 = sub_10001A6DC(0x6168706C61, 0xE500000000000000);
                    if ((v26 & 1) != 0)
                    {
                      sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v25, (uint64_t)v48);
                      if ((swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
                      {
                        if (*(_QWORD *)(a1 + 16))
                        {
                          v27 = v46;
                          v28 = sub_10001A6DC(0x424752726F6C6F63, 0xED00006563617053);
                          if ((v29 & 1) != 0)
                          {
                            sub_10001A670(*(_QWORD *)(a1 + 56) + 32 * v28, (uint64_t)v48);
                            if ((swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, &type metadata for UInt, 6) & 1) != 0)
                            {
                              v30 = *(_QWORD *)&v46;
                              v31 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
                              return sub_10047165C(v30, v18, v21, v24, v27, v7, v8, v12, v13, v14, v15);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_48:
  swift_bridgeObjectRelease(v15);
  if (v8)
  {
    v36 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
    v37 = String._bridgeToObjectiveC()();
    v38 = swift_bridgeObjectRelease(v8).n128_u64[0];
    if (!v13)
    {
      v39 = 0;
LABEL_54:
      v32 = objc_msgSend(v36, "initWithDASymbolicColorName:daHexString:", v37, v39, *(double *)&v38);

      return v32;
    }
LABEL_53:
    v39 = String._bridgeToObjectiveC()();
    v38 = swift_bridgeObjectRelease(v13).n128_u64[0];
    goto LABEL_54;
  }
  if (v13)
  {
    v36 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
    v37 = 0;
    goto LABEL_53;
  }
  if (qword_100837560 != -1)
    swift_once(&qword_100837560, sub_100471070);
  v41 = type metadata accessor for Logger(0);
  v42 = sub_10001AAA8(v41, (uint64_t)qword_10084BA68);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Can't construct REMColor from invalid JSON", v45, 2u);
    swift_slowDealloc(v45, -1, -1);
  }

  return 0;
}

id sub_100471638@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = sub_100471100(a1);
  *a2 = result;
  return result;
}

id sub_10047165C(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  NSString v20;
  NSString v21;
  NSString v22;
  id v23;

  if (a7)
  {
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a7);
    if (a9)
      goto LABEL_3;
LABEL_6:
    v21 = 0;
    if (a11)
      goto LABEL_4;
LABEL_7:
    v22 = 0;
    goto LABEL_8;
  }
  v20 = 0;
  if (!a9)
    goto LABEL_6;
LABEL_3:
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a9);
  if (!a11)
    goto LABEL_7;
LABEL_4:
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a11);
LABEL_8:
  v23 = objc_msgSend(v11, "initWithRed:green:blue:alpha:colorSpace:daSymbolicColorName:daHexString:ckSymbolicColorName:", a1, v20, v21, v22, a2, a3, a4, a5);

  return v23;
}

id sub_100471774(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  id v44;
  char *v45;
  id v46;
  id v47;
  id v48;
  NSString v49;
  double v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  void *v71;
  id v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  id v82;
  id v83;
  id v84;
  id v85;
  __n128 v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  int v91;
  Class v92;
  NSDate v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Class v100;
  NSDate v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, _QWORD *);
  Class v107;
  NSDateComponents v108;
  uint64_t v109;
  uint64_t v110;
  Class v111;
  id v112;
  id v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  NSString v118;
  uint64_t v119;
  int *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  NSTimeZone v125;
  char *v126;
  Class v127;
  id v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  id v143;
  Class v144;
  id v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  double v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  id v169;
  id v170;
  id v171;
  id v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  id v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t i;
  id v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  void *v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  Class v199;
  uint64_t v200;
  id v201;
  id v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  void *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  __n128 v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  Class v214;
  uint64_t v215;
  uint64_t v216;
  Class v217;
  uint64_t v218;
  id v219;
  id v220;
  Class v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  Class v225;
  id v226;
  Class v227;
  id v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  id v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  int *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  id v258;
  uint64_t v259;
  id v260;
  id v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;

  v230 = a8;
  v253 = type metadata accessor for TimeZone(0);
  v252 = *(_QWORD *)(v253 - 8);
  v16 = __chkstk_darwin(v253);
  v251 = (char *)&v229 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = type metadata accessor for Calendar.Identifier(0, v16);
  v249 = *(_QWORD *)(v250 - 8);
  __chkstk_darwin(v250);
  v248 = (char *)&v229 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = type metadata accessor for Calendar(0);
  v246 = *(_QWORD *)(v247 - 8);
  __chkstk_darwin(v247);
  v245 = (char *)&v229 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = (_QWORD *)type metadata accessor for DateComponents(0);
  v256 = *(v257 - 1);
  __chkstk_darwin(v257);
  v244 = (char *)&v229 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = type metadata accessor for Date(0);
  v255 = *(_QWORD *)(v254 - 8);
  __chkstk_darwin(v254);
  v243 = (char *)&v229 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v22);
  v231 = (char *)&v229 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v24);
  v232 = (uint64_t)&v229 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v241 = (char *)&v229 - v27;
  __chkstk_darwin(v28);
  v240 = (uint64_t)&v229 - v29;
  v30 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v30);
  v235 = (char *)&v229 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v234 = (uint64_t)&v229 - v33;
  v34 = objc_allocWithZone((Class)REMReminderStorage);
  v261 = a2;
  v260 = a4;
  v35 = objc_msgSend(v34, "initWithObjectID:listID:accountID:", a2, a3, a4);
  objc_msgSend(v35, "setParentReminderID:", a5);
  objc_msgSend(v35, "setMinimumSupportedVersion:", a6);
  objc_msgSend(v35, "setEffectiveMinimumSupportedVersion:", a7);
  v36 = type metadata accessor for RDSavedReminder(0);
  v37 = *(_QWORD *)(a1 + *(int *)(v36 + 36));
  v239 = a1;
  v238 = (int *)v36;
  if (v37)
  {
    v38 = (char *)sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)&v265 = &_swiftEmptySetSingleton;
    v259 = *(_QWORD *)(v37 + 16);
    if (v259)
    {
      v233 = v35;
      v258 = (id)objc_opt_self(REMHashtag);
      v39 = (uint64_t *)(v37 + 64);
      v237 = v37;
      swift_bridgeObjectRetain(v37);
      v40 = 1;
      while (1)
      {
        v41 = *(v39 - 2);
        v262 = *(v39 - 1);
        v42 = *v39;
        v263 = *(v39 - 4);
        swift_bridgeObjectRetain(v41);
        v264 = v42;
        *(_QWORD *)&v43 = swift_bridgeObjectRetain(v42).n128_u64[0];
        v44 = objc_msgSend(v258, "newObjectID", v43);
        v45 = v38;
        v46 = objc_allocWithZone((Class)REMHashtag);
        swift_bridgeObjectRetain(v41);
        v47 = v260;
        v48 = v261;
        v49 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v50 = swift_bridgeObjectRelease().n128_u64[0];
        v51 = v46;
        v38 = v45;
        v52 = objc_msgSend(v51, "initWithObjectID:accountID:reminderID:type:name:", v44, v47, v48, v263, v49, v50);

        v53 = v52;
        sub_1002DBE04(&v274, v53);

        if (v38)
        {
          v54 = v264;
          v55 = objc_msgSend(v53, "objectIdentifier", swift_bridgeObjectRetain(v264).n128_f64[0]);
          v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
          v58 = v57;

          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
          v274 = (uint64_t)v38;
          sub_10028B8BC(v56, v58, v262, v54, isUniquelyReferenced_nonNull_native);
          v38 = (char *)v274;
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease_n(v54, 2);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

        }
        if (v259 == v40)
          break;
        v39 += 5;
        if (__OFADD__(v40++, 1))
        {
          __break(1u);
          break;
        }
      }
      swift_bridgeObjectRelease();
      v35 = v233;
    }
    sub_1000151B0(0, &qword_10083DAC0, REMHashtag_ptr);
    sub_1000EC524((unint64_t *)&qword_10083B670, &qword_10083DAC0, REMHashtag_ptr);
    isa = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v35, "setHashtags:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    a1 = v239;
    v62 = (uint64_t)v238;
  }
  else
  {
    v62 = v36;
    v38 = 0;
  }
  v63 = v257;
  v64 = objc_msgSend(v35, "titleReplicaIDSource");
  v65 = (uint64_t *)(a1 + *(int *)(v62 + 60));
  v66 = *v65;
  v67 = v65[1];
  v68 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
  sub_1000A70E4(v66, v67);
  v69 = v242;
  v70 = sub_100259BE8((uint64_t)v64);
  if (!v69)
  {
    v71 = v70;
    sub_1000A71C8(v66, v67);

    if (v38)
    {
      v72 = v71;
      v73 = swift_bridgeObjectRetain(v38);
      v74 = REMCRMergeableStringDocument.replacingInlineHashtagIDs(newHashtagID_byOriginalHashtagID:)(v73);
      swift_bridgeObjectRelease();

      v71 = (void *)v74;
    }
    v75 = v239;
    v76 = v238;
    objc_msgSend(v35, "setTitleDocument:", v71);
    v77 = v75 + v76[10];
    v78 = *(_QWORD *)(v77 + 8);
    if (v78 >> 60 == 15)
    {
      v237 = 0;
      v79 = v255;
    }
    else
    {
      v80 = v71;
      v81 = *(_QWORD *)v77;
      sub_1000A70E4(*(_QWORD *)v77, *(_QWORD *)(v77 + 8));
      v82 = objc_msgSend(v35, "notesReplicaIDSource");
      v83 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
      sub_1000A70E4(v81, v78);
      v84 = sub_100259BE8((uint64_t)v82);
      sub_1000A71B4(v81, v78);

      if (v38)
      {
        swift_bridgeObjectRetain(v38);
        v85 = v84;
        v84 = (id)REMCRMergeableStringDocument.replacingInlineHashtagIDs(newHashtagID_byOriginalHashtagID:)(v86);
        swift_bridgeObjectRelease();

      }
      v75 = v239;
      v79 = v255;
      v237 = 0;
      objc_msgSend(v35, "setNotesDocument:", v84);
      sub_1000A71B4(v81, v78);

      v76 = v238;
      v71 = v80;
      v63 = v257;
    }
    objc_msgSend(v35, "setPriority:", *(_QWORD *)(v75 + v76[11]));
    objc_msgSend(v35, "setFlagged:", *(_QWORD *)(v75 + v76[8]));
    v87 = v234;
    sub_100008868(v75, v234, (uint64_t *)&unk_1008380D0);
    v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
    v89 = v79;
    v90 = v254;
    v91 = v88(v87, 1, v254);
    v229 = v71;
    if (v91 == 1)
    {
      v92 = 0;
    }
    else
    {
      v93.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v94 = v87;
      v92 = v93.super.isa;
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v94, v90);
    }
    objc_msgSend(v35, "setCreationDate:", v92, v229, v230);

    v95 = (uint64_t)v235;
    sub_100008868(v239, (uint64_t)v235, (uint64_t *)&unk_1008380D0);
    v96 = v88(v95, 1, v90);
    v97 = v90;
    v98 = v237;
    v99 = (uint64_t)v241;
    if (v96 == 1)
    {
      v100 = 0;
    }
    else
    {
      v101.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v102 = v95;
      v100 = v101.super.isa;
      (*(void (**)(uint64_t, uint64_t))(v255 + 8))(v102, v97);
    }
    v103 = v256;
    objc_msgSend(v35, "setLastModifiedDate:", v100);

    v104 = v239;
    v105 = v240;
    sub_100008868(v239 + v76[13], v240, (uint64_t *)&unk_100841610);
    v106 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v103 + 48);
    if (v106(v105, 1, v63) == 1)
    {
      v107 = 0;
    }
    else
    {
      v108.super.isa = DateComponents._bridgeToObjectiveC()().super.isa;
      v109 = v105;
      v107 = v108.super.isa;
      (*(void (**)(uint64_t, _QWORD *))(v256 + 8))(v109, v63);
    }
    objc_msgSend(v35, "setStartDateComponents:", v107);

    v110 = v104 + v238[7];
    sub_100008868(v110, v99, (uint64_t *)&unk_100841610);
    if (v106(v99, 1, v63) == 1)
    {
      v111 = 0;
    }
    else
    {
      v111 = DateComponents._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, _QWORD *))(v256 + 8))(v99, v63);
    }
    objc_msgSend(v35, "setDueDateComponents:", v111);

    v112 = sub_10013DE3C();
    objc_msgSend(v35, "setDisplayDate:", v112);

    v113 = sub_10013DE3C();
    if (v113)
    {
      v114 = v113;
      v115 = objc_msgSend(v113, "isAllDay");

      objc_msgSend(v35, "setAllDay:", v115);
      if ((v115 & 1) != 0)
        goto LABEL_41;
    }
    else
    {
      objc_msgSend(v35, "setAllDay:", 0);
    }
    v116 = v232;
    sub_100008868(v110, v232, (uint64_t *)&unk_100841610);
    v117 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD *))v106)(v116, 1, v63);
    if ((_DWORD)v117 != 1)
    {
      v121 = v231;
      DateComponents.timeZone.getter(v117);
      (*(void (**)(uint64_t, _QWORD *))(v256 + 8))(v116, v63);
      v122 = v252;
      v123 = v253;
      v124 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v252 + 48))(v121, 1, v253);
      v120 = v238;
      if (v124 == 1)
      {
        v118 = 0;
      }
      else
      {
        v125.super.isa = TimeZone._bridgeToObjectiveC()().super.isa;
        v126 = v121;
        v127 = v125.super.isa;
        (*(void (**)(char *, uint64_t))(v122 + 8))(v126, v123);
        v128 = -[objc_class name](v127, "name");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
        v118 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      v119 = v239;
LABEL_46:
      objc_msgSend(v35, "setTimeZone:", v118);

      v129 = (uint64_t *)(v119 + v120[5]);
      v130 = *v129;
      if (!*v129)
      {
LABEL_87:
        v200 = *(_QWORD *)(v119 + v120[6]);
        if (!v200 || !*(_QWORD *)(v200 + 16))
        {
          v189 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_102:
          if (objc_msgSend(*(id *)(v236 + 16), "includeDueDateDeltaAlerts"))
          {
            sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
            swift_bridgeObjectRetain(v189);
            v217 = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v35, "setFetchedDueDateDeltaAlerts:", v217, swift_bridgeObjectRelease().n128_f64[0]);

          }
          v218 = *(_QWORD *)(v119 + v120[12]);
          if (v218 && *(_QWORD *)(v218 + 16))
          {
            v219 = v260;
            v220 = v261;
            sub_100476F34(v218, v219, v220);

            v120 = v238;
            sub_1000151B0(0, (unint64_t *)&qword_100841640, REMRecurrenceRule_ptr);
            v221 = Array._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v35, "setRecurrenceRules:", v221, swift_bridgeObjectRelease().n128_f64[0]);

            v119 = v239;
          }
          v222 = v119 + v120[16];
          v223 = *(_QWORD *)(v222 + 8);
          if (v223 >> 60 != 15)
          {
            v224 = *(_QWORD *)v222;
            sub_1000A70E4(*(_QWORD *)v222, *(_QWORD *)(v222 + 8));
            v225 = Data._bridgeToObjectiveC()().super.isa;
            v226 = objc_msgSend((id)objc_opt_self(REMContactRepresentation), "representationFromData:", v225);

            objc_msgSend(v35, "setContactHandles:", v226);
            sub_1000A71B4(v224, v223);
          }
          objc_msgSend(v35, "setResolutionTokenMap:", 0);
          v227 = 0;
          if (a9 >> 60 != 15)
            v227 = Data._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v35, "setResolutionTokenMapData:", v227);
          swift_bridgeObjectRelease();

          goto LABEL_112;
        }
        v201 = v260;
        v202 = v261;
        v203 = v236;
        swift_retain();
        v189 = (uint64_t)sub_100477084(v200, v203, v202, v201);
        swift_release(v203);

        if (!((unint64_t)v189 >> 62))
        {
          if (*(_QWORD *)((v189 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_91:
            v204 = objc_autoreleasePoolPush();
            swift_bridgeObjectRetain(v189);
            sub_1000CD1AC(v205);
            if (v98)
            {
              swift_bridgeObjectRelease();
              objc_autoreleasePoolPop(v204);
              swift_bridgeObjectRelease();

LABEL_112:
              goto LABEL_113;
            }
            v207 = v206;
            swift_bridgeObjectRelease();
            *(_QWORD *)&v265 = v207;
            v208 = type metadata accessor for RDDueDateDeltaAlerts();
            v209 = sub_10009FC50(&qword_10083C300, (uint64_t (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts, (uint64_t)&unk_1006A7398);
            v211 = REMJSONRepresentable.toJSONData()(v208, v209, v210);
            v213 = v212;

            objc_autoreleasePoolPop(v204);
            v214 = Data._bridgeToObjectiveC()().super.isa;
            sub_1000A71C8(v211, v213);
            objc_msgSend(v35, "setDueDateDeltaAlertsData:", v214);

            goto LABEL_101;
          }
LABEL_100:
          objc_msgSend(v35, "setDueDateDeltaAlertsData:", 0);
LABEL_101:
          v119 = v239;
          v120 = v238;
          goto LABEL_102;
        }
LABEL_96:
        if (v189 < 0)
          v215 = v189;
        else
          v215 = v189 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v189);
        v216 = _CocoaArrayWrapper.endIndex.getter(v215);
        swift_bridgeObjectRelease();
        if (v216)
          goto LABEL_91;
        goto LABEL_100;
      }
      v242 = v129[3];
      v131 = v129[1];
      v241 = (char *)v129[2];
      v274 = (uint64_t)_swiftEmptyArrayStorage;
      v132 = *(_QWORD *)(v130 + 16);
      v235 = v38;
      v233 = v35;
      v240 = v131;
      if (v132)
      {
        v133 = enum case for Calendar.Identifier.gregorian(_:);
        swift_bridgeObjectRetain(v130);
        v134 = 0;
        v135 = v243;
        v136 = v245;
        do
        {
          Date.init(timeIntervalSinceReferenceDate:)(*(double *)(v130 + 8 * v134 + 32));
          v137 = v249;
          v138 = v248;
          v139 = v250;
          (*(void (**)(char *, uint64_t, uint64_t))(v249 + 104))(v248, v133, v250);
          Calendar.init(identifier:)(v138);
          v140 = (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v138, v139);
          v141 = v251;
          static TimeZone.current.getter(v140);
          v142 = v244;
          Calendar.dateComponents(in:from:)(v141, v135);
          (*(void (**)(char *, uint64_t))(v252 + 8))(v141, v253);
          (*(void (**)(char *, uint64_t))(v246 + 8))(v136, v247);
          v143 = objc_allocWithZone((Class)REMAlarmDateTrigger);
          v144 = DateComponents._bridgeToObjectiveC()().super.isa;
          v145 = objc_msgSend(v143, "initWithDateComponents:", v144);

          (*(void (**)(char *, _QWORD *))(v256 + 8))(v142, v257);
          v146 = (*(uint64_t (**)(char *, uint64_t))(v255 + 8))(v135, v254);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v146);
          v148 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v147 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v148 >= v147 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v147 > 1);
          ++v134;
          v149 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v148, v145);
          specialized Array._endMutation()(v149);
        }
        while (v132 != v134);
        swift_bridgeObjectRelease();
        v35 = v233;
        v98 = v237;
        v131 = v240;
      }
      v150 = *(_QWORD *)(v131 + 16);
      if (v150)
      {
        v237 = v98;
        swift_bridgeObjectRetain_n(v131, 2);
        v255 = v150 - 1;
        v151 = 32;
        while (1)
        {
          v254 = v151;
          v152 = (__int128 *)(v131 + v151);
          v265 = *v152;
          v153 = v152[1];
          v154 = v152[2];
          v155 = v152[4];
          v268 = v152[3];
          v269 = v155;
          v266 = v153;
          v267 = v154;
          v156 = v152[5];
          v157 = v152[6];
          v158 = v152[8];
          v272 = v152[7];
          v273 = v158;
          v270 = v156;
          v271 = v157;
          v264 = v156;
          v159 = *((_QWORD *)&v158 + 1);
          v263 = v158;
          v160 = v268;
          v262 = *((_QWORD *)&v267 + 1);
          v161 = *(double *)&v267;
          v162 = *((double *)&v268 + 1);
          v163 = *((double *)&v156 + 1);
          v164 = *((_QWORD *)&v265 + 1);
          v259 = v265;
          v165 = *((_QWORD *)&v272 + 1);
          v258 = (id)v272;
          v166 = *((_QWORD *)&v157 + 1);
          v256 = v157;
          v167 = v266;
          v168 = v269;
          v257 = objc_allocWithZone((Class)REMStructuredLocation);
          sub_1000A7044(&v265);
          sub_1000A7044(&v265);
          swift_bridgeObjectRetain(*((_QWORD *)&v167 + 1));
          swift_bridgeObjectRetain(v159);
          swift_bridgeObjectRetain(v160);
          swift_bridgeObjectRetain(v164);
          swift_bridgeObjectRetain(v165);
          swift_bridgeObjectRetain(v166);
          sub_1000A70D0(v168, *((unint64_t *)&v168 + 1));
          v169 = sub_1000A6E54(v161, v162, v163, v263, v159, v262, v160, v259, v164, (uint64_t)v258, v165, v256, v166, v167, *((uint64_t *)&v167 + 1), v168, *((unint64_t *)&v168 + 1));
          v170 = objc_allocWithZone((Class)REMAlarmLocationTrigger);
          v171 = objc_msgSend(v170, "initWithStructuredLocation:proximity:", v169, v264);
          sub_1000A7128(&v265);

          v172 = v171;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v172);
          v174 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v173 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v174 >= v173 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v173 > 1);
          v175 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v174, v172);
          specialized Array._endMutation()(v175);

          sub_1000A7128(&v265);
          if (!v255)
            break;
          --v255;
          v151 = v254 + 144;
          v131 = v240;
        }
        swift_bridgeObjectRelease_n(v240, 2);
        v35 = v233;
        v98 = v237;
      }
      v176 = *((_QWORD *)v241 + 2);
      if (v176)
      {
        v237 = v98;
        swift_bridgeObjectRetain(v241);
        v178 = 0;
        do
        {
          v179 = objc_msgSend(objc_allocWithZone((Class)REMAlarmTimeIntervalTrigger), "initWithTimeInterval:", *(double *)&v177[8 * v178 + 32]);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v179);
          v181 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v180 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v181 >= v180 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v180 > 1);
          ++v178;
          v182 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v181, v179);
          specialized Array._endMutation()(v182);
          v177 = v241;
        }
        while (v176 != v178);
        swift_bridgeObjectRelease();
        v98 = v237;
      }
      v183 = *(_QWORD *)(v242 + 16);
      if (v183)
      {
        v237 = v98;
        swift_bridgeObjectRetain(v242);
        for (i = 0; i != v183; ++i)
        {
          v185 = objc_msgSend(objc_allocWithZone((Class)REMAlarmVehicleTrigger), "initWithEvent:", *(_QWORD *)(v242 + 8 * i + 32));
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v185);
          v187 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v186 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v187 >= v186 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v186 > 1);
          v188 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v187, v185);
          specialized Array._endMutation()(v188);
        }
        swift_bridgeObjectRelease();
        v98 = v237;
      }
      v189 = v274;
      v120 = v238;
      if ((unint64_t)v274 >> 62)
      {
        if (v274 < 0)
          v198 = v274;
        else
          v198 = v274 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v274);
        v190 = _CocoaArrayWrapper.endIndex.getter(v198);
        if (v190)
          goto LABEL_74;
      }
      else
      {
        v190 = *(_QWORD *)((v274 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v274);
        if (v190)
        {
LABEL_74:
          v237 = v98;
          *(_QWORD *)&v265 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v190);
          if (v190 < 0)
          {
            __break(1u);
            goto LABEL_96;
          }
          v191 = 0;
          do
          {
            if ((v189 & 0xC000000000000001) != 0)
              v192 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v191, v189);
            else
              v192 = *(id *)(v189 + 8 * v191 + 32);
            v193 = v192;
            ++v191;
            v194 = objc_msgSend(objc_allocWithZone((Class)REMAlarm), "initWithTrigger:", v192);

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v195);
            v196 = *(_QWORD *)(v265 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v196);
            v197 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v196, v194);
            specialized ContiguousArray._endMutation()(v197);
          }
          while (v190 != v191);
          swift_bridgeObjectRelease();
          v35 = v233;
          v120 = v238;
          v98 = v237;
          goto LABEL_86;
        }
      }
      swift_bridgeObjectRelease();
LABEL_86:
      sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
      v199 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v35, "setAlarms:", v199, swift_bridgeObjectRelease().n128_f64[0]);

      swift_bridgeObjectRelease();
      v119 = v239;
      goto LABEL_87;
    }
    sub_10000882C(v116, (uint64_t *)&unk_100841610);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v252 + 56))(v231, 1, 1, v253);
LABEL_41:
    v118 = 0;
    v119 = v239;
    v120 = v238;
    goto LABEL_46;
  }
  sub_1000A71C8(v66, v67);

LABEL_113:
  swift_bridgeObjectRelease();
  return v35;
}

char *sub_100473020(void *a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  char *v15;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  char *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t MetatypeMetadata;
  uint64_t v51;
  unint64_t v52;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t ObjCClassFromMetadata;
  uint64_t v63;
  id v65;
  id v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  id v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Class isa;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  id v90;
  id v91;
  char *v92;
  _QWORD *v93;
  char *v94;
  _QWORD *v95;
  char *v96;
  id v97;
  void *v98;
  id v99;
  char *v100;

  v97 = *v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RDSavedReminder(0);
  *(_QWORD *)&v9 = __chkstk_darwin(v8).n128_u64[0];
  v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = 0;
  v12 = objc_msgSend(a1, "remObjectIDWithError:", &v99, v9);
  v13 = v99;
  if (!v12)
  {
    v24 = v99;
    _convertNSErrorToError(_:)(v13);

    swift_willThrow(v25);
    return v11;
  }
  v98 = v12;
  v14 = v99;
  v15 = (char *)objc_msgSend(a1, "account");
  if (v15)
  {
    v96 = v11;
    v99 = 0;
    v11 = v15;
    v16 = objc_msgSend(v15, "remObjectIDWithError:", &v99);
    v17 = v99;
    if (v16)
    {
      v94 = v11;
      v95 = v16;
      v18 = v99;
      v19 = objc_msgSend(a1, "template");
      if (v19)
      {
        v99 = 0;
        v20 = v19;
        v21 = (char *)objc_msgSend(v19, "remObjectIDWithError:", &v99);
        v22 = v99;
        if (v21)
        {
          v11 = v21;
          v97 = v20;
          v23 = v99;
          sub_10021A608();
          if (v2)
          {

          }
          else
          {
            v92 = v11;
            v65 = REMCDSavedReminder.parentSavedReminderObjectID.getter();
            v91 = objc_msgSend(a1, "minimumSupportedVersion");
            v89 = (uint64_t *)objc_msgSend(a1, "effectiveMinimumSupportedVersion");
            v66 = objc_msgSend(a1, "resolutionTokenMapData");
            if (v66)
            {
              v67 = v66;
              v93 = (_QWORD *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v66);
              v69 = v68;

            }
            else
            {
              v93 = 0;
              v69 = 0xF000000000000000;
            }
            v88 = (uint64_t *)v69;
            v90 = v65;
            v11 = (char *)sub_100471774((uint64_t)v96, v98, (uint64_t)v92, v95, (uint64_t)v65, (uint64_t)v91, (uint64_t)v89, (uint64_t)v93, v69);
            sub_1000A71B4((uint64_t)v93, (unint64_t)v88);

            v70 = objc_msgSend(a1, "storeControllerManagedObjectContext");
            if (v70)
            {
              v71 = v70;
              v72 = objc_msgSend(v70, "storeController");
              if (v72)
              {
                v73 = v72;
                v74 = objc_msgSend(a1, "attachments");
                if (v74)
                {
                  v75 = v74;
                  v93 = v73;
                  v91 = v71;
                  v76 = type metadata accessor for REMCDSavedAttachment();
                  v77 = sub_10009FC50((unint64_t *)&unk_100840010, (uint64_t (*)(uint64_t))type metadata accessor for REMCDSavedAttachment, (uint64_t)&protocol conformance descriptor for NSObject);
                  v78 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v75, v76, v77);

                  if (qword_100837570 != -1)
                    swift_once(&qword_100837570, sub_1004758FC);
                  v79 = sub_10001AAA8(v4, (uint64_t)qword_10084BA98);
                  v80 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v79, v4);
                  v89 = &v86;
                  __chkstk_darwin(v80);
                  v88 = &v86;
                  v90 = v78;
                  v99 = v78;
                  __chkstk_darwin(v81);
                  v85 = v7;
                  v87 = sub_10001A630(&qword_10084BC58);
                  v82 = sub_1000151B0(0, (unint64_t *)&unk_100839CE0, REMAttachment_ptr);
                  v83 = sub_1000A5F84(&qword_10084BC60, &qword_10084BC58, (uint64_t)&protocol conformance descriptor for Set<A>);
                  Sequence.map<A>(skippingError:_:)(sub_1004785D8, &v86 - 4, sub_1004785C0, &v86 - 4, v87, v82, v83);
                  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
                  swift_bridgeObjectRelease();
                  isa = Array._bridgeToObjectiveC()().super.isa;
                  objc_msgSend(v11, "setAttachments:", isa, swift_bridgeObjectRelease().n128_f64[0]);

                }
                else
                {

                }
                sub_1000D6E60((uint64_t)v96);
              }
              else
              {
                sub_1000D6E60((uint64_t)v96);

              }
            }
            else
            {
              sub_1000D6E60((uint64_t)v96);

            }
          }
          return v11;
        }
        v57 = v99;
        _convertNSErrorToError(_:)(v22);

        swift_willThrow(v58);
        v59 = (char *)v98;
      }
      else
      {
        if (qword_100837570 != -1)
          swift_once(&qword_100837570, sub_1004758FC);
        sub_10001AAA8(v4, (uint64_t)qword_10084BA98);
        v45 = v98;
        v46 = v98;
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.error.getter(v47);
        if (os_log_type_enabled(v47, v48))
        {
          v49 = swift_slowAlloc(22, -1);
          v93 = (_QWORD *)swift_slowAlloc(8, -1);
          v96 = (char *)swift_slowAlloc(32, -1);
          v100 = v96;
          *(_DWORD *)v49 = 136446466;
          v99 = v97;
          MetatypeMetadata = swift_getMetatypeMetadata(v97);
          v51 = String.init<A>(describing:)(&v99, MetatypeMetadata);
          v99 = (id)sub_10001A820(v51, v52, (uint64_t *)&v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100);
          swift_bridgeObjectRelease();
          *(_WORD *)(v49 + 12) = 2112;
          v99 = v46;
          v53 = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100);
          v54 = v93;
          *v93 = v45;

          _os_log_impl((void *)&_mh_execute_header, v47, v48, "%{public}s: cdSavedReminder.template is nil {cdSavedReminder.remObjectID: %@}", (uint8_t *)v49, 0x16u);
          v55 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v54, 1, v55);
          swift_slowDealloc(v54, -1, -1);
          v56 = (uint64_t)v96;
          swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v49, -1, -1);

        }
        else
        {

        }
        v60 = (void *)objc_opt_self(REMError);
        v61 = type metadata accessor for REMCDSavedReminder();
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v61);
        v11 = (char *)String._bridgeToObjectiveC()();
        objc_msgSend(v60, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v11);

        swift_willThrow(v63);
        v59 = v94;
      }

      v40 = v95;
    }
    else
    {
      v38 = v99;
      _convertNSErrorToError(_:)(v17);

      swift_willThrow(v39);
      v40 = v98;
    }

    return v11;
  }
  if (qword_100837570 != -1)
    swift_once(&qword_100837570, sub_1004758FC);
  sub_10001AAA8(v4, (uint64_t)qword_10084BA98);
  v26 = v98;
  v27 = v98;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(22, -1);
    v95 = (_QWORD *)swift_slowAlloc(8, -1);
    v96 = (char *)swift_slowAlloc(32, -1);
    v100 = v96;
    *(_DWORD *)v30 = 136446466;
    v99 = v97;
    v31 = swift_getMetatypeMetadata(v97);
    v32 = String.init<A>(describing:)(&v99, v31);
    v99 = (id)sub_10001A820(v32, v33, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2112;
    v99 = v27;
    v34 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100);
    v35 = v95;
    *v95 = v26;

    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%{public}s: cdSavedReminder.account is nil {cdSavedReminder.remObjectID: %@}", (uint8_t *)v30, 0x16u);
    v36 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v35, 1, v36);
    swift_slowDealloc(v35, -1, -1);
    v37 = (uint64_t)v96;
    swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

  }
  v41 = (void *)objc_opt_self(REMError);
  v42 = type metadata accessor for REMCDSavedReminder();
  v43 = swift_getObjCClassFromMetadata(v42);
  v11 = (char *)String._bridgeToObjectiveC()();
  objc_msgSend(v41, "unexpectedNilPropertyWithClass:property:", v43, v11);

  swift_willThrow(v44);
  return v11;
}

uint64_t sub_100473B70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100473BA4 + 4 * byte_1006BD4B0[a1]))(0x44497463656A626FLL, 0xE800000000000000);
}

unint64_t sub_100473BA4()
{
  return 0xD000000000000010;
}

uint64_t sub_100473D70()
{
  return 0x7367617468736168;
}

uint64_t sub_100473D84()
{
  return 0x48746361746E6F63;
}

void sub_100473DA8(void *a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t ObjCClassFromMetadata;
  NSString v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t MetatypeMetadata;
  uint64_t v63;
  unint64_t v64;
  double v65;
  id v66;
  uint64_t v67;
  _OWORD v68[2];
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  const char *v91;
  char *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  NSObject *v99;
  char *v100;
  id v101;
  _QWORD *v102;
  _QWORD *v103;
  char v104[8];
  uint64_t v105;
  uint64_t v106;

  v88 = a5;
  v84 = a4;
  v10 = *v5;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v81 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v14);
  v16 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v82 = (char *)v68 - v18;
  v83 = type metadata accessor for RDSavedReminder(0);
  __chkstk_darwin(v83);
  v85 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v20);
  v86 = (char *)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UUID(0);
  v94 = *(_QWORD *)(v22 - 8);
  v95 = v22;
  *(_QWORD *)&v23 = __chkstk_darwin(v22).n128_u64[0];
  v92 = (char *)v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v23);
  v101 = a1;
  v96 = objc_msgSend(a1, "resolutionTokenMap");
  v98 = v25;
  if (v96)
  {
    v71 = v12;
    v70 = v16;
    v72 = v11;
    v74 = v10;
    v97 = sub_100402470((uint64_t)v96, a3);
    v26 = *(_QWORD *)(a3 + 16);
    if (v26)
    {
      v75 = v6;
      v27 = swift_bridgeObjectRetain(a3);
      LODWORD(v87) = 0;
      v76 = 0;
      v77 = 0;
      LODWORD(v100) = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      v91 = "debugSyncDisabled";
      v27.n128_u64[0] = 136315138;
      v73 = v27;
      v69 = (char *)&type metadata for Any + 8;
      v27.n128_u64[0] = 136446466;
      v68[1] = v27;
      v89 = a3;
      v90 = "daIsNotificationsCollection";
      v93 = a2;
      v99 = (v26 - 1);
      __asm { BR              X9 }
    }
    v49 = objc_msgSend(a2, "metadata");
    if (v49)
    {
      v50 = v49;
      v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v53 = v52;

      sub_1000A71C8(v51, v53);
    }
    else
    {
      if (qword_100837568 != -1)
        swift_once(&qword_100837568, sub_1004758D8);
      v54 = type metadata accessor for Logger(0);
      sub_10001AAA8(v54, (uint64_t)qword_10084BA80);
      v55 = v101;
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v56, v57))
      {

        return;
      }
      v58 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(8, -1);
      v75 = v6;
      v60 = (_QWORD *)v59;
      v61 = (_QWORD *)swift_slowAlloc(32, -1);
      v103 = v61;
      *(_DWORD *)v58 = 136446466;
      v105 = v74;
      MetatypeMetadata = swift_getMetatypeMetadata(v74);
      v63 = String.init<A>(describing:)(&v105, MetatypeMetadata);
      v105 = sub_10001A820(v63, v64, (uint64_t *)&v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);
      *(_QWORD *)&v65 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v58 + 12) = 2114;
      v66 = objc_msgSend(v55, "objectID", v65);
      v105 = (uint64_t)v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106);
      *v60 = v66;

      _os_log_impl((void *)&_mh_execute_header, v56, v57, "%{public}s: '\\REMCDSavedReminder.metadata' should not be nil at the end of 'merge(storage:into:changedValueKeys:optionalCoordinator:)' {objectID: %{public}@}", (uint8_t *)v58, 0x16u);
      v67 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v60, 1, v67);
      swift_slowDealloc(v60, -1, -1);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v58, -1, -1);

    }
    v48 = v97;
  }
  else
  {
    if (qword_100837568 != -1)
      swift_once(&qword_100837568, sub_1004758D8);
    v28 = type metadata accessor for Logger(0);
    sub_10001AAA8(v28, (uint64_t)qword_10084BA80);
    swift_bridgeObjectRetain_n(a3, 2);
    v29 = a3;
    v30 = v101;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, (os_log_type_t)v32))
    {
      LODWORD(v101) = v32;
      v33 = swift_slowAlloc(22, -1);
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      v35 = (void *)swift_slowAlloc(32, -1);
      v105 = (uint64_t)v35;
      *(_DWORD *)v33 = 138543618;
      v36 = objc_msgSend(v30, "objectID");
      v103 = v36;
      v100 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104);
      v102 = v34;
      *v34 = v36;

      *(_WORD *)(v33 + 12) = 2082;
      v37 = *(_QWORD *)(v29 + 16);
      v89 = v29;
      if (v37)
      {
        v97 = v35;
        v99 = v31;
        v103 = _swiftEmptyArrayStorage;
        sub_1001C1B0C(0, v37, 0);
        __asm { BR              X9 }
      }
      v38 = Array.description.getter(_swiftEmptyArrayStorage, &type metadata for String);
      v40 = v39;
      swift_bridgeObjectRelease();
      v103 = (_QWORD *)sub_10001A820(v38, v40, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v100);
      swift_bridgeObjectRelease_n(v89, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v101, "REMReminderStorageCDIngestor: merge(storage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v33, 0x16u);
      v41 = sub_10001A630((uint64_t *)&unk_100839E70);
      v42 = v102;
      swift_arrayDestroy(v102, 1, v41);
      swift_slowDealloc(v42, -1, -1);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v29, 2);
    }
    v43 = (void *)objc_opt_self(REMError);
    v44 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v44);
    v46 = String._bridgeToObjectiveC()();
    objc_msgSend(v43, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v46);

    swift_willThrow(v47);
    v48 = v98;
  }

}

uint64_t sub_1004758D8(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084BA80, &qword_100837690, (uint64_t)qword_100872190, (uint64_t)sub_1004A19A4);
}

uint64_t sub_1004758FC(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084BA98, &qword_100837688, (uint64_t)qword_100872178, (uint64_t)sub_1004A1988);
}

uint64_t sub_100475920(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_100473B70(*a1);
  v5 = v4;
  v6 = sub_100473B70(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1004759A8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = sub_100473B70(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_100475A08(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = sub_100473B70(*v1);
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_100475A48(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = sub_100473B70(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100475AA4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1004773E8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100475AD0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100473B70(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100475AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004773E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100475B1C()
{
  unsigned __int8 *v0;

  return sub_100473B70(*v0);
}

void sub_100475B24(_QWORD *a1@<X8>)
{
  *a1 = &off_1007DCD38;
}

void sub_100475B34(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  char v6;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC850, v3);
  swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_100475B90(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  char v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007DC850, v3);
  swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *a2 = v6;
}

void sub_100475BF0(_QWORD *a1@<X8>)
{
  *a1 = &off_1007E1008;
}

void sub_100475C00()
{
  uint64_t v0;

  sub_100475C1C();
  qword_100871F50 = v0;
}

void sub_100475C1C()
{
  JUMPOUT(0x100475FCCLL);
}

id sub_1004764C0@<X0>(void **a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *v6;
  id v7;
  id v8;
  id result;
  _QWORD v10[5];

  v6 = *a1;
  v10[3] = sub_1000151B0(0, (unint64_t *)&qword_10083E538, &off_1007D65B0);
  v10[4] = (char *)&_sMXM.Parent + 3;
  v10[0] = a2;
  v7 = v6;
  v8 = a2;
  result = sub_1003C7A54(v7, v10);
  if (!v3)
    *a3 = result;
  return result;
}

void sub_100476544(void *a1, void *a2)
{
  uint64_t *v2;
  id v4;
  double v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  int64_t v38;
  id v39;
  void *v40;
  id v41;
  char v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  double v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  unint64_t v64;
  id v65;
  char v66;
  uint64_t v67;
  id v68;
  char v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t MetatypeMetadata;
  uint64_t v81;
  unint64_t v82;
  double v83;
  id v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD v100[5];
  _QWORD v101[2];

  v90 = *v2;
  v4 = objc_msgSend(a1, "attachments");
  if (v4)
  {
    v6 = v4;
    v7 = sub_1000151B0(0, (unint64_t *)&unk_100839CE0, REMAttachment_ptr);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    v9 = type metadata accessor for REMSavedAttachmentCDIngestor();
    v10 = swift_allocObject(v9, 16, 7);
    sub_1005D2470(v8, v10);
    swift_release(v10);
    v100[0] = v8;
    v11 = sub_10001A630(&qword_100851A30);
    v12 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v13 = sub_1000A5F84(&qword_1008412F8, &qword_100851A30, (uint64_t)&protocol conformance descriptor for [A]);
    v14 = sub_1000EC524((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
    v15 = Sequence.mapToSet<A>(_:)(sub_100476EBC, 0, v11, v12, v13, v14);
    *(_QWORD *)&v5 = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v15 = (uint64_t)&_swiftEmptySetSingleton;
  }
  v16 = objc_msgSend(a2, "attachments", v5);
  if (!v16)
  {
LABEL_64:
    swift_bridgeObjectRelease();
    return;
  }
  v17 = v16;
  v18 = type metadata accessor for REMCDSavedAttachment();
  v19 = sub_10009FC50((unint64_t *)&unk_100840010, (uint64_t (*)(uint64_t))type metadata accessor for REMCDSavedAttachment, (uint64_t)&protocol conformance descriptor for NSObject);
  v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v17, v18, v19);

  v88 = v18;
  if ((v20 & 0xC000000000000001) != 0)
  {
    if (v20 < 0)
      v22 = v20;
    else
      v22 = v20 & 0xFFFFFFFFFFFFFF8;
    v23 = __CocoaSet.makeIterator()(v22);
    v21 = Set.Iterator.init(_cocoa:)(v100, v23, v18, v19);
    v20 = v100[0];
    v92 = v100[1];
    v24 = v100[2];
    v25 = v100[3];
    v26 = v100[4];
  }
  else
  {
    v25 = 0;
    v27 = -1 << *(_BYTE *)(v20 + 32);
    v92 = v20 + 56;
    v24 = ~v27;
    v28 = -v27;
    if (v28 < 64)
      v29 = ~(-1 << v28);
    else
      v29 = -1;
    v26 = v29 & *(_QWORD *)(v20 + 56);
  }
  v91 = (unint64_t)(v24 + 64) >> 6;
  v94 = v15 & 0xC000000000000001;
  v30 = v15 & 0xFFFFFFFFFFFFFF8;
  if (v15 < 0)
    v30 = v15;
  v89 = v30;
  v87 = v15 + 56;
  v93 = v15;
  v97 = v20;
  while (1)
  {
    if (v20 < 0)
    {
      v34 = __CocoaSet.Iterator.next()(v21);
      if (!v34)
        goto LABEL_63;
      v35 = v34;
      v99 = v34;
      swift_unknownObjectRetain(v34);
      swift_dynamicCast(v101, &v99, (char *)&type metadata for Swift.AnyObject + 8, v88, 7);
      v36 = (id)v101[0];
      swift_unknownObjectRelease(v35);
      v33 = v25;
      v31 = v26;
      if (!v36)
        goto LABEL_63;
      goto LABEL_34;
    }
    if (!v26)
      break;
    v31 = (v26 - 1) & v26;
    v32 = __clz(__rbit64(v26)) | (v25 << 6);
    v33 = v25;
LABEL_33:
    v36 = *(id *)(*(_QWORD *)(v20 + 48) + 8 * v32);
    if (!v36)
      goto LABEL_63;
LABEL_34:
    v39 = objc_msgSend(v36, "remObjectID");
    if (v39)
    {
      v40 = v39;
      if (v94)
      {
        v41 = v39;
        v42 = __CocoaSet.contains(_:)(v41, v89);

        if ((v42 & 1) == 0)
        {
          v98 = v31;
          v96 = v33;
          goto LABEL_49;
        }

        v25 = v33;
        v26 = v31;
      }
      else
      {
        v98 = v31;
        v96 = v33;
        if (!*(_QWORD *)(v15 + 16))
          goto LABEL_49;
        v62 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v15 + 40));
        v63 = -1 << *(_BYTE *)(v15 + 32);
        v64 = v62 & ~v63;
        if (((*(_QWORD *)(v87 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) == 0)
          goto LABEL_49;
        sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
        v65 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * v64);
        v66 = static NSObject.== infix(_:_:)(v65);

        if ((v66 & 1) != 0)
        {
LABEL_48:

          v25 = v96;
          v20 = v97;
          v26 = v98;
        }
        else
        {
          v67 = ~v63;
          while (1)
          {
            v64 = (v64 + 1) & v67;
            if (((*(_QWORD *)(v87 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) == 0)
              break;
            v68 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * v64);
            v69 = static NSObject.== infix(_:_:)(v68);

            if ((v69 & 1) != 0)
              goto LABEL_48;
          }
LABEL_49:
          if (qword_100837568 != -1)
            swift_once(&qword_100837568, sub_1004758D8);
          v70 = type metadata accessor for Logger(0);
          sub_10001AAA8(v70, (uint64_t)qword_10084BA80);
          v71 = v40;
          v72 = a1;
          v73 = v71;
          v74 = v72;
          v75 = Logger.logObject.getter(v74);
          v76 = static os_log_type_t.info.getter(v75);
          if (os_log_type_enabled(v75, v76))
          {
            v77 = swift_slowAlloc(32, -1);
            v78 = (_QWORD *)swift_slowAlloc(16, -1);
            v79 = swift_slowAlloc(32, -1);
            v99 = v79;
            *(_DWORD *)v77 = 136446722;
            v101[0] = v90;
            MetatypeMetadata = swift_getMetatypeMetadata(v90);
            v81 = String.init<A>(describing:)(v101, MetatypeMetadata);
            *(_QWORD *)(v77 + 4) = sub_10001A820(v81, v82, &v99);
            *(_QWORD *)&v83 = swift_bridgeObjectRelease().n128_u64[0];
            *(_WORD *)(v77 + 12) = 2112;
            v84 = objc_msgSend(v74, "objectID", v83);
            *(_QWORD *)(v77 + 14) = v84;
            *v78 = v84;

            *(_WORD *)(v77 + 22) = 2112;
            *(_QWORD *)(v77 + 24) = v73;
            v78[1] = v40;

            _os_log_impl((void *)&_mh_execute_header, v75, v76, "%{public}s: Removing saved attachment from saved reminder {cdSavedReminder.remObjectID: %@, cdSavedAttachment.objectID: %@}", (uint8_t *)v77, 0x20u);
            v85 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v78, 2, v85);
            swift_slowDealloc(v78, -1, -1);
            swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v79, -1, -1);
            swift_slowDealloc(v77, -1, -1);

          }
          else
          {

          }
          v25 = v96;
          v20 = v97;
          objc_msgSend(v36, "setReminder:", 0);

          v26 = v98;
          v15 = v93;
        }
      }
    }
    else
    {
      if (qword_100837568 != -1)
        swift_once(&qword_100837568, sub_1004758D8);
      v43 = type metadata accessor for Logger(0);
      sub_10001AAA8(v43, (uint64_t)qword_10084BA80);
      v44 = a1;
      v45 = v36;
      v46 = v44;
      v47 = v45;
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.error.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc(32, -1);
        v51 = v33;
        v52 = (_QWORD *)swift_slowAlloc(16, -1);
        v53 = swift_slowAlloc(32, -1);
        v99 = v53;
        *(_DWORD *)v50 = 136446722;
        v101[0] = v90;
        v54 = swift_getMetatypeMetadata(v90);
        v55 = String.init<A>(describing:)(v101, v54);
        *(_QWORD *)(v50 + 4) = sub_10001A820(v55, v56, &v99);
        *(_QWORD *)&v57 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v50 + 12) = 2112;
        v58 = objc_msgSend(v46, "objectID", v57);
        *(_QWORD *)(v50 + 14) = v58;
        *v52 = v58;

        *(_WORD *)(v50 + 22) = 2112;
        v59 = objc_msgSend(v47, "objectID");
        *(_QWORD *)(v50 + 24) = v59;
        v52[1] = v59;

        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%{public}s: Can't merge saved attachment for saved reminder because cdSavedAttachment.remObjectID is nil {cdSavedReminder.remObjectID: %@, cdSavedAttachment.objectID: %@}", (uint8_t *)v50, 0x20u);
        v60 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v52, 2, v60);
        swift_slowDealloc(v52, -1, -1);
        swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
        v61 = v53;
        v15 = v93;
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v50, -1, -1);

        v25 = v51;
      }
      else
      {

        v25 = v33;
      }
      v26 = v31;
      v20 = v97;
    }
  }
  v33 = v25 + 1;
  if (!__OFADD__(v25, 1))
  {
    if (v33 >= v91)
      goto LABEL_63;
    v37 = *(_QWORD *)(v92 + 8 * v33);
    if (!v37)
    {
      v38 = v25 + 2;
      if (v25 + 2 >= v91)
        goto LABEL_63;
      v37 = *(_QWORD *)(v92 + 8 * v38);
      if (v37)
        goto LABEL_31;
      v38 = v25 + 3;
      if (v25 + 3 >= v91)
        goto LABEL_63;
      v37 = *(_QWORD *)(v92 + 8 * v38);
      if (v37)
      {
LABEL_31:
        v33 = v38;
      }
      else
      {
        v33 = v25 + 4;
        if (v25 + 4 >= v91)
          goto LABEL_63;
        v37 = *(_QWORD *)(v92 + 8 * v33);
        if (!v37)
        {
          v86 = v25 + 5;
          while (v91 != v86)
          {
            v37 = *(_QWORD *)(v92 + 8 * v86++);
            if (v37)
            {
              v33 = v86 - 1;
              goto LABEL_32;
            }
          }
LABEL_63:
          sub_1000C6560(v20);
          goto LABEL_64;
        }
      }
    }
LABEL_32:
    v31 = (v37 - 1) & v37;
    v32 = __clz(__rbit64(v37)) + (v33 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

id sub_100476EBC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "objectID");
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for REMSavedReminderStorageCDIngestor()
{
  return objc_opt_self(_TtC7remindd33REMSavedReminderStorageCDIngestor);
}

_UNKNOWN **sub_100476F1C()
{
  return &off_1007F5108;
}

_UNKNOWN **sub_100476F28()
{
  return &off_1007F50D8;
}

_QWORD *sub_100476F34(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[5];
  uint64_t v17;
  _QWORD *v18;

  v4 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v4)
  {
    v18 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    v8 = a1 + 32;
    sub_1000151B0(0, (unint64_t *)&qword_100841640, REMRecurrenceRule_ptr);
    v9 = (void *)objc_opt_self(REMRecurrenceRule);
    do
    {
      v10 = *(_OWORD *)(v8 + 48);
      v16[2] = *(_OWORD *)(v8 + 32);
      v16[3] = v10;
      v16[4] = *(_OWORD *)(v8 + 64);
      v17 = *(_QWORD *)(v8 + 80);
      v11 = *(_OWORD *)(v8 + 16);
      v16[0] = *(_OWORD *)v8;
      v16[1] = v11;
      sub_1004785E4((uint64_t *)v16);
      sub_1004785E4((uint64_t *)v16);
      v12 = sub_1002700CC((uint64_t *)v16, objc_msgSend(v9, "newObjectID"), a2, a3);
      v13 = sub_10027088C(v16);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
      v8 += 88;
      --v4;
    }
    while (v4);
    return v18;
  }
  return result;
}

_QWORD *sub_100477084(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *result;
  uint64_t v17;
  double *v18;
  double v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char *v25;
  NSUUID v26;
  NSDate v27;
  int v28;
  Class isa;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  unint64_t v53;

  v45 = a3;
  v46 = a4;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v44 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v13 - 8);
  v43 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = _swiftEmptyArrayStorage;
  v53 = (unint64_t)_swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v39[1] = v4;
    v47 = *(id *)(a2 + 16);
    swift_bridgeObjectRetain(a1);
    v39[0] = a1;
    v18 = (double *)(a1 + 48);
    v40 = v15;
    v41 = v12;
    do
    {
      v19 = *(v18 - 1);
      v20 = *(_QWORD *)v18;
      v21 = *((id *)v18 - 2);
      v22 = objc_msgSend(v47, "includeConcealed", v39[0]);
      if ((v22 & 1) != 0 || rem_currentRuntimeVersion(v22) >= v20)
      {
        v52 = (id)v20;
        v23 = objc_msgSend((id)objc_opt_self(REMDueDateDeltaAlert), "newObjectID");
        v24 = objc_msgSend(v23, "uuid");

        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v48 = v21;
        v51 = v45;
        v49 = v46;
        Date.init(timeIntervalSinceReferenceDate:)(v19);
        v25 = v44;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v44, 1, 1, v9);
        v26.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        v27.super.isa = Date._bridgeToObjectiveC()().super.isa;
        v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v25, 1, v9);
        v50 = v17;
        if (v28 == 1)
        {
          isa = 0;
        }
        else
        {
          isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v10 + 8))(v25, v9);
        }
        v30 = objc_allocWithZone((Class)REMDueDateDeltaAlert);
        v31 = v51;
        v33 = v48;
        v32 = v49;
        v52 = objc_msgSend(v30, "initWithIdentifier:reminderID:accountID:dueDateDelta:creationDate:acknowledgedDate:minimumSupportedAppVersion:", v26.super.isa, v51, v49, v48, v27.super.isa, isa, v52);

        (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v43);

        v35 = v52;
        v17 = v50;
        if (v52)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
          v37 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v36 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v37 >= v36 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1);
          v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
          specialized Array._endMutation()(v38);
        }
      }
      else
      {

      }
      v18 += 3;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    return (_QWORD *)v53;
  }
  return result;
}

uint64_t sub_1004773E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1007DC8A0, a1, a2, &unk_100837A50);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x16)
    return 22;
  else
    return v3;
}

void sub_100477438(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  char v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  char **v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  char **v37;
  char *v38;
  uint64_t v39;
  void *v40;
  Class isa;
  NSObject *v42;
  char *v43;
  uint64_t v44;

  v2 = v1;
  v4 = objc_autoreleasePoolPush();
  v5 = objc_msgSend(a1, "fetchedDueDateDeltaAlerts");
  if (v5)
  {
    v6 = v5;
    v7 = sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
    v8 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  }
  else
  {
    v13 = objc_msgSend(a1, "dueDateDeltaAlertsData");
    if (v13)
    {
      v14 = v13;
      v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      type metadata accessor for RDDueDateDeltaAlerts();
      sub_10009FC50(&qword_10083C300, (uint64_t (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlerts, (uint64_t)&unk_1006A7398);
      static REMJSONRepresentable.fromJSONData(_:)(&v43, v15, v17);
      if (v1)
      {
        sub_1000A71C8(v15, v17);
        objc_autoreleasePoolPop(v4);
        return;
      }
      sub_1000A71C8(v15, v17);
      v40 = v43;
      v8 = *(_QWORD **)&v43[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects];
      swift_bridgeObjectRetain(v8);

    }
    else
    {
      v8 = _swiftEmptyArrayStorage;
    }
  }
  objc_autoreleasePoolPop(v4);
  v9 = objc_msgSend(a1, "dueDateDeltaAlertsToUpsert");
  if (v9)
  {
    v10 = v9;
    v11 = sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
    v12 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  }
  else
  {
    v12 = 0;
  }
  v18 = objc_msgSend(a1, "dueDateDeltaAlertIdentifiersToDelete");
  if (v18)
  {
    v19 = v18;
    v20 = type metadata accessor for UUID(0);
    v21 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = (uint8_t *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v19, v20, v21);

  }
  else
  {
    v22 = 0;
  }
  v23 = sub_1002229AC(v12, v22, (uint64_t)v8);
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) != 0)
    {
      if (qword_100837568 != -1)
        swift_once(&qword_100837568, sub_1004758D8);
      v24 = type metadata accessor for Logger(0);
      sub_10001AAA8(v24, (uint64_t)qword_10084BA80);
      v25 = a1;
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v42 = v25;
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = (char **)swift_slowAlloc(8, -1);
        *(_DWORD *)v28 = 138543362;
        v30 = (char *)-[NSObject remObjectID](v25, "remObjectID");
        v43 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
        *v29 = v30;
        v25 = v42;

        _os_log_impl((void *)&_mh_execute_header, v26, v27, "REMSavedReminderStorageCDIngestor.updateDueDateDeltaAlerts: Applied early alert changes and setFetchedDueDateDeltaAlerts() {savedReminderID: %{public}@}", v28, 0xCu);
        v31 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v29, 1, v31);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);
      }
      else
      {

        v26 = v25;
      }

      sub_1000151B0(0, (unint64_t *)&unk_100850AA0, REMDueDateDeltaAlert_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      -[NSObject setFetchedDueDateDeltaAlerts:](v25, "setFetchedDueDateDeltaAlerts:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100837568 != -1)
        swift_once(&qword_100837568, sub_1004758D8);
      v32 = type metadata accessor for Logger(0);
      sub_10001AAA8(v32, (uint64_t)qword_10084BA80);
      v33 = a1;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.info.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = (char **)swift_slowAlloc(8, -1);
        *(_DWORD *)v36 = 138543362;
        v38 = (char *)objc_msgSend(v33, "remObjectID");
        v43 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
        *v37 = v38;

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "REMSavedReminderStorageCDIngestor.updateDueDateDeltaAlerts: Noop {savedReminderID: %{public}@}", v36, 0xCu);
        v39 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v37, 1, v39);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

      }
    }
  }
}

_QWORD *sub_1004779B0(id a1, char a2)
{
  uint64_t v3;
  _QWORD *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((a2 & 1) != 0)
  {
    v6 = objc_msgSend(a1, "listID");
    v7 = v6;
    v4 = _swiftEmptyArrayStorage;
    if (v6)
    {
      v8 = v6;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v10 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v10 >= v9 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1);
      v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized Array._endMutation()(v11);
      v4 = _swiftEmptyArrayStorage;
    }

  }
  else
  {
    v3 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v4 = (_QWORD *)swift_allocObject(v3, 40, 7);
    *((_OWORD *)v4 + 1) = xmmword_1006A7330;
    v5 = objc_msgSend(a1, "accountID");
    v4[4] = v5;
    specialized Array._endMutation()(v5);
  }
  return v4;
}

void sub_100477AC8(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t inited;
  void *v35;
  NSString v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t ObjCClassFromMetadata;
  NSString v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  id v62;
  NSObject *v63;
  int v64;
  uint64_t v65;
  id v66;
  void *v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  double v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  double v80;
  id v81;
  void *v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  id v87;
  os_log_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  uint64_t v92;
  NSURL *KeyPath;
  id v94;
  id v95;
  uint64_t v96;
  NSURL *v97;
  uint64_t v98;
  int v99;
  os_log_t v100;
  id v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  _BYTE v106[40];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  *(_QWORD *)&v10 = __chkstk_darwin(v9).n128_u64[0];
  v12 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) == 0)
  {
    v13 = objc_msgSend(a1, "accountID", v10);
    sub_1003FFEC0(0, v13, a4);
    v15 = v14;

    if (v4)
      return;
    if (qword_100837568 != -1)
      swift_once(&qword_100837568, sub_1004758D8);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_10084BA80);
    v17 = a2;
    v18 = v15;
    v19 = v17;
    v20 = v18;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      LODWORD(v104) = v22;
      v23 = swift_slowAlloc(22, -1);
      v105 = swift_slowAlloc(64, -1);
      v109 = v105;
      *(_DWORD *)v23 = 136446466;
      v24 = objc_msgSend(v19, "remObjectID");
      if (v24)
      {
        v25 = v24;
        v26 = objc_msgSend(v24, "description");

        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

      }
      else
      {
        v29 = 0xE300000000000000;
        v27 = 7104878;
      }
      v107 = sub_10001A820(v27, v29, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);

      *(_QWORD *)&v72 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v23 + 12) = 2082;
      v73 = objc_msgSend(v20, "remObjectID", v72);
      if (v73)
      {
        v74 = v73;
        v75 = objc_msgSend(v73, "description");

        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        v78 = v77;

      }
      else
      {
        v78 = 0xE300000000000000;
        v76 = 7104878;
      }
      v107 = sub_10001A820(v76, v78, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v104, "Updating cdSavedReminder.account {cdSavedReminder: %{public}s, cdAccount: %{public}s}", (uint8_t *)v23, 0x16u);
      v79 = v105;
      swift_arrayDestroy(v105, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

    }
    objc_msgSend(v19, "setAccount:", v20);
    goto LABEL_47;
  }
  v30 = objc_msgSend(a2, "createResolutionTokenMapIfNecessary", v10);
  v31 = objc_msgSend(a1, "resolutionTokenMap");
  if (!v31)
  {
    if (qword_100837568 != -1)
      swift_once(&qword_100837568, sub_1004758D8);
    v104 = v30;
    v43 = type metadata accessor for Logger(0);
    sub_10001AAA8(v43, (uint64_t)qword_10084BA80);
    v44 = a1;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc(22, -1);
      v48 = (_QWORD *)swift_slowAlloc(8, -1);
      v49 = swift_slowAlloc(32, -1);
      v109 = v49;
      *(_DWORD *)v47 = 138543618;
      v50 = objc_msgSend(v44, "objectID");
      v107 = (uint64_t)v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
      *v48 = v50;

      *(_WORD *)(v47 + 12) = 2082;
      v107 = sub_10001A820(0x44497473696CLL, 0xE600000000000000, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "REMSavedReminderStorageCDIngestor:establishRelationship(onStorage:into cdSavedReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v47, 0x16u);
      v51 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v48, 1, v51);
      swift_slowDealloc(v48, -1, -1);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {

    }
    v52 = (void *)objc_opt_self(REMError);
    v53 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v53);
    v55 = String._bridgeToObjectiveC()();
    objc_msgSend(v52, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v55);

    swift_willThrow(v56);
    v39 = v104;
    goto LABEL_21;
  }
  v32 = v31;
  v105 = v4;
  v33 = sub_10001A630(&qword_100843C00);
  inited = swift_initStackObject(v33, v106);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_BYTE *)(inited + 32) = 1;
  v20 = sub_1004069D0(v32, inited);
  swift_setDeallocating(inited);
  sub_100404C9C(1);
  v35 = v32;
  v36 = String._bridgeToObjectiveC()();
  LODWORD(inited) = objc_msgSend(v30, "mergeWithMap:forKey:", v20, v36, swift_bridgeObjectRelease().n128_f64[0]);

  if ((_DWORD)inited)
  {
    v103 = v20;
    v37 = objc_msgSend(a1, "listID");
    v38 = v35;
    if (v37)
    {
      v39 = v37;
      v40 = v105;
      sub_1003FFEEC(1, v39, a4);
      v42 = v30;
      v105 = v40;
      if (v40)
      {

LABEL_21:
        return;
      }
      v57 = v41;

    }
    else
    {
      v57 = 0;
      v42 = v30;
    }
    v102 = v38;
    if (qword_100837568 != -1)
      swift_once(&qword_100837568, sub_1004758D8);
    v58 = type metadata accessor for Logger(0);
    sub_10001AAA8(v58, (uint64_t)qword_10084BA80);
    v59 = v57;
    v60 = a2;
    v61 = v59;
    v62 = v60;
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.info.getter(v63);
    if (os_log_type_enabled(v63, (os_log_type_t)v64))
    {
      v99 = v64;
      v100 = v63;
      v101 = v61;
      v104 = v42;
      v65 = swift_slowAlloc(22, -1);
      v98 = swift_slowAlloc(64, -1);
      v109 = v98;
      *(_DWORD *)v65 = 136446466;
      v66 = objc_msgSend(v62, "remObjectID");
      if (v66)
      {
        v67 = v66;
        v68 = objc_msgSend(v66, "description");

        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
        v71 = v70;

      }
      else
      {
        v71 = 0xE300000000000000;
        v69 = 7104878;
      }
      v107 = sub_10001A820(v69, v71, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);

      *(_QWORD *)&v80 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v65 + 12) = 2082;
      if (v57 && (v81 = objc_msgSend(v101, "remObjectID", v80)) != 0)
      {
        v82 = v81;
        v83 = objc_msgSend(v81, "description");

        v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
        v86 = v85;

        v42 = v104;
      }
      else
      {
        v86 = 0xE300000000000000;
        v42 = v104;
        v84 = 7104878;
      }
      v107 = sub_10001A820(v84, v86, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
      v87 = v101;

      v61 = v87;
      swift_bridgeObjectRelease();
      v88 = v100;
      _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v99, "Updating cdSavedReminder.template {cdSavedReminder: %{public}s, cdTemplate: %{public}s}", (uint8_t *)v65, 0x16u);
      v89 = v98;
      swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {

    }
    v90 = v57;
    v20 = objc_msgSend(v62, "template");
    objc_msgSend(v62, "setTemplate:", v61);
    if (v20)
    {
      v91 = v20;
      static Date.now.getter(v91);
      v92 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v12, 0, 1, v92);
      KeyPath = (NSURL *)swift_getKeyPath(&unk_1006BD568);
      sub_10015087C(KeyPath, (uint64_t)v12);
      swift_release(KeyPath);
      sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);

    }
    v94 = v103;
    if (v90)
    {
      v95 = v61;
      static Date.now.getter(v95);
      v96 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v12, 0, 1, v96);
      v97 = (NSURL *)swift_getKeyPath(&unk_1006BD568);
      sub_10015087C(v97, (uint64_t)v12);
      swift_release(v97);
      sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);

      v20 = v95;
    }
    else
    {

    }
  }
  else
  {

  }
LABEL_47:

}

id sub_1004785C0@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1004764C0(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1004785D8(uint64_t a1, uint64_t a2)
{
  return sub_100381794(a2);
}

uint64_t *sub_1004785E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[8];
  v6 = a1[9];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t storeEnumTagSinglePayload for REMSavedReminderStorageCDIngestor.RelationshipKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10047869C + 4 * byte_1006BD4CB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004786D0 + 4 * byte_1006BD4C6[v4]))();
}

uint64_t sub_1004786D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004786D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004786E0);
  return result;
}

uint64_t sub_1004786EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004786F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1004786F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100478700(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMSavedReminderStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMSavedReminderStorageCDIngestor.RelationshipKey;
}

uint64_t getEnumTagSinglePayload for REMSavedReminderStorageCDIngestor.ValueKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for REMSavedReminderStorageCDIngestor.ValueKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_1004787F8 + 4 * byte_1006BD4D5[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_10047882C + 4 * byte_1006BD4D0[v4]))();
}

uint64_t sub_10047882C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100478834(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10047883CLL);
  return result;
}

uint64_t sub_100478848(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100478850);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_100478854(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047885C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for REMSavedReminderStorageCDIngestor.ValueKey()
{
  return &type metadata for REMSavedReminderStorageCDIngestor.ValueKey;
}

uint64_t sub_100478878()
{
  return sub_1000A5F84(&qword_10084BC68, &qword_10084BC70, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1004788A8()
{
  unint64_t result;

  result = qword_10084BC78;
  if (!qword_10084BC78)
  {
    result = swift_getWitnessTable(&unk_1006BD65C, &type metadata for REMSavedReminderStorageCDIngestor.ValueKey);
    atomic_store(result, (unint64_t *)&qword_10084BC78);
  }
  return result;
}

uint64_t sub_1004788EC()
{
  return sub_1000A5F84(&qword_10084BC80, &qword_10084BC88, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10047891C()
{
  unint64_t result;

  result = qword_10084BC90;
  if (!qword_10084BC90)
  {
    result = swift_getWitnessTable(&unk_1006BD734, &type metadata for REMSavedReminderStorageCDIngestor.RelationshipKey);
    atomic_store(result, (unint64_t *)&qword_10084BC90);
  }
  return result;
}

id sub_10047899C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDXPCBarebonesDaemon();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDXPCBarebonesDaemon()
{
  return objc_opt_self(_TtC7remindd20RDXPCBarebonesDaemon);
}

unint64_t sub_1004789EC()
{
  return sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1004789F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084BCC0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084BCC0);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_100478A88(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  Class v13;
  _QWORD *v14;
  __n128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  id v38;
  id v40;
  Class isa;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::Int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  char v75[8];
  uint64_t v76;
  uint64_t v77;
  char v78[8];
  uint64_t v79;
  _BYTE v80[40];
  _QWORD v81[5];
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v3 = v1;
  v72 = type metadata accessor for REMManualOrdering.Predefined(0);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMManualOrdering.ManualOrderingID(0);
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v9 = __chkstk_darwin(v7).n128_u64[0];
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v3;
  v12 = objc_msgSend(v3, "accountObjectID", v9);
  sub_1002A7E68();
  v14 = (_QWORD *)sub_1002A7B24(v12, a1, v13, 0);

  v15 = swift_bridgeObjectRelease();
  if (!v2)
  {
    v16 = (void *)a1;
    v67 = 0;
    v68 = v8;
    v69 = v7;
    v70 = v14;
    v17 = v71;
    v18 = v72;
    v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v71 + 104))(v6, enum case for REMManualOrdering.Predefined.templates(_:), v72, v15);
    REMManualOrdering.Predefined.manualOrderingID.getter(v19);
    v20 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v18);
    v21 = (void *)REMManualOrdering.ManualOrderingID.listType.getter(v20);
    v22 = REMManualOrdering.ManualOrderingID.listID.getter();
    v24 = v23;
    v25 = objc_msgSend(v73, "accountObjectID");
    if (qword_100837960 != -1)
      swift_once(&qword_100837960, sub_1005B8A54);
    v26 = qword_100872290;
    swift_retain();
    v27 = v67;
    v28 = sub_1000D19A0(v21, v22, v24, v25, v16, 1, v26);
    if (v27)
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v11, v69);
      swift_bridgeObjectRelease();

      swift_release(v26);
      if (qword_100837580 != -1)
        swift_once(&qword_100837580, sub_1004789F8);
      v29 = type metadata accessor for Logger(0);
      sub_10001AAA8(v29, (uint64_t)qword_10084BCC0);
      swift_errorRetain(v27);
      v30 = swift_errorRetain(v27);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v79 = v34;
        *(_DWORD *)v33 = 136315138;
        swift_getErrorValue(v27, v78, v75);
        v35 = Error.rem_errorDescription.getter(v76, v77);
        v74 = sub_10001A820(v35, v36, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
        swift_bridgeObjectRelease();
        swift_errorRelease(v27);
        swift_errorRelease(v27);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to fetch manual sort hint of templates {error: %s}", v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        swift_errorRelease(v27);
      }
      else
      {
        swift_errorRelease(v27);
        swift_errorRelease(v27);
        swift_errorRelease(v27);

      }
    }
    else
    {
      v37 = v28;
      swift_bridgeObjectRelease();

      swift_release(v26);
      if (v37)
      {
        sub_10019CD04((uint64_t)v80);
        sub_100325620((uint64_t)v80, (uint64_t)v81);
        v42 = v69;
        v43 = v68;
        if (v81[0])
        {
          v73 = (id)v81[0];
          v44 = v81[1];
          v45 = v81[2];
          v47 = v81[3];
          v46 = v81[4];
          v48 = objc_msgSend(v37, "account");
          if (v48)
          {
            v65 = v44;
            v66 = v45;
            v67 = v47;
            v71 = v46;
            v72 = (uint64_t)v11;
            v49 = v48;
            v50 = sub_10053CA80();
            v51 = type metadata accessor for RDManualSortIDCache();
            v52 = v51;
            if (qword_1008376B8 != -1)
              v51 = swift_once(&qword_1008376B8, sub_1004A3E44);
            v53 = qword_10084C438;
            __chkstk_darwin(v51);
            *(&v65 - 4) = v52;
            *(&v65 - 3) = (uint64_t)v50;
            *(&v65 - 2) = v53;
            OS_dispatch_queue.sync<A>(execute:)(&v79, sub_1001D8BB0);
            v54 = v79;
            v55 = type metadata accessor for RDManualSortIDAdapter();
            swift_allocObject(v55, 33, 7);
            v56 = sub_10018C174(v54, (uint64_t)v50, 0);

            v57 = (unint64_t)v70;
            swift_bridgeObjectRetain(v70);
            sub_10011F348(v58);
            v60 = v59;
            swift_bridgeObjectRelease();
            v61 = sub_1002EC488(v60);
            sub_10018D378(v61);
            v63 = v62;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v64 = sub_1001D8FF8((uint64_t)v73, v63, v57);
            swift_bridgeObjectRelease();
            swift_release(v56);
            swift_bridgeObjectRelease();
            v87 = v65;
            sub_1000F4320(&v87);
            v88 = v66;
            sub_1000F4320(&v88);
            v89 = v67;
            sub_1000F4320(&v89);
            v90 = v71;
            sub_1000F4320(&v90);
            swift_bridgeObjectRelease();

            (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v72, v69);
            v70 = v64;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v42);
            v82 = v73;
            sub_1000F4320(&v82);
            v83 = v44;
            sub_1000F4320(&v83);
            v84 = v45;
            sub_1000F4320(&v84);
            v85 = v47;
            sub_1000F4320(&v85);
            v86 = v46;
            sub_1000F4320(&v86);

          }
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v68 + 8))(v11, v69);

        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v68 + 8))(v11, v69);
      }
    }
    v38 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
    objc_msgSend(v38, "templatePublicLinkTTL");

    sub_100479554((uint64_t)v70);
    swift_bridgeObjectRelease();
    v40 = objc_allocWithZone((Class)REMTemplatesDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083D0D8, REMTemplateStorage_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v14 = objc_msgSend(v40, "initWithTemplateStorages:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  }
  return v14;
}

_QWORD *sub_100479288(uint64_t a1)
{
  return sub_100478A88(a1);
}

void sub_1004792A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  Class isa;
  uint64_t v15;
  id v16;
  id v17;
  Class v18;

  v2 = type metadata accessor for REMCDTemplate();
  v3 = objc_msgSend(v0, "objectIDs");
  v4 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v5 = sub_10011A5DC();
  v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v3, v4, v5);

  v7 = sub_1001E9108(v6);
  swift_bridgeObjectRelease();
  sub_1002A7E68();
  v9 = v8;
  swift_bridgeObjectRetain(v7);
  v11 = (void *)sub_1002A6810(v10, 1);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "entity");
  objc_msgSend(v12, "setEntity:", v13);

  objc_msgSend(v12, "setAffectedStores:", 0);
  objc_msgSend(v12, "setPredicate:", v11);

  sub_1001DFBD0(v9);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v12, "setRelationshipKeyPathsForPrefetching:", 0);
  v15 = NSManagedObjectContext.fetch<A>(_:)(v12, v2);
  swift_bridgeObjectRelease();
  swift_release_n(v7);

  if (!v1)
  {
    v16 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
    objc_msgSend(v16, "templatePublicLinkTTL");

    sub_100479554(v15);
    swift_bridgeObjectRelease();
    v17 = objc_allocWithZone((Class)REMTemplatesDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083D0D8, REMTemplateStorage_ptr);
    v18 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "initWithTemplateStorages:", v18, swift_bridgeObjectRelease().n128_f64[0]);

  }
}

void sub_100479534()
{
  sub_1004792A8();
}

void sub_100479554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = sub_10015691C(v6);
      if (v2)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return;
      }
      v10 = v9;

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
      specialized Array._endMutation()(v14);
      ++v5;
      if (v8 == v4)
        goto LABEL_19;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_19:
  swift_bridgeObjectRelease();
}

NSObject *sub_1004796D0(NSObject *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  NSObject *v5;
  id v6;
  uint64_t v7;
  __n128 v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  NSString v24;
  id v25;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  Class isa;
  _QWORD *v36;
  uint64_t v37;

  v3 = v1;
  v5 = objc_msgSend(v1, "smartListType");
  v6 = objc_msgSend(v3, "objectID");
  if (qword_100837960 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v7 = qword_100872290;
  swift_retain();
  v9 = sub_10058E6E0(v5, v6, a1, v7, v8);
  if (v2)
  {

    swift_release(v7);
    v14 = objc_msgSend(v3, "createIfNeeded");
    if ((_DWORD)v14)
    {
      v15 = objc_msgSend(v3, "smartListType");
      v16 = REMSmartListTypeCustom;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v19 = v18;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v22 = v20;
      if (v17 == v21 && v19 == v20)
      {

        swift_bridgeObjectRelease_n(v19, 2);
      }
      else
      {
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v20, 0);

        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(v22);
        if ((v23 & 1) == 0)
        {
          v5 = a1;
          v27 = sub_100300818();
          if (v27)
          {
            v28 = (void *)v27;
            v29 = objc_msgSend(v3, "smartListType");
            v30 = sub_1001A17D0(v29, (uint64_t)v28);

            v31 = sub_10001A630((uint64_t *)&unk_10083AD90);
            v32 = swift_allocObject(v31, 40, 7);
            *(_OWORD *)(v32 + 16) = xmmword_1006A7330;
            *(_QWORD *)(v32 + 32) = v30;
            v37 = v32;
            specialized Array._endMutation()(v32);
            v33 = objc_allocWithZone((Class)REMSmartListsDataViewInvocationResult);
            sub_1000151B0(0, &qword_10083B1D8, REMSmartListStorage_ptr);
            v34 = v30;
            isa = Array._bridgeToObjectiveC()().super.isa;
            v5 = objc_msgSend(v33, "initWithSmartListStorages:", isa, swift_bridgeObjectRelease(v37).n128_f64[0]);

            swift_errorRelease(v2);
            return v5;
          }
          v25 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
          goto LABEL_13;
        }
      }
      v5 = objc_opt_self(REMError);
      v24 = String._bridgeToObjectiveC()();
      -[NSObject invalidParameterErrorWithDescription:](v5, "invalidParameterErrorWithDescription:", v24);

LABEL_13:
      swift_willThrow(v25);
      swift_errorRelease(v2);
      return v5;
    }
    swift_willThrow(v14);
  }
  else
  {
    v10 = v9;

    swift_release(v7);
    v11 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v12 = swift_allocObject(v11, 40, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1006A7330;
    *(_QWORD *)(v12 + 32) = v10;
    v36 = (_QWORD *)v12;
    specialized Array._endMutation()(v12);
    v13 = v10;
    v5 = sub_10047A570(v36);
    swift_bridgeObjectRelease(v36);

  }
  return v5;
}

uint64_t sub_100479AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084BCD8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084BCD8);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

NSObject *sub_100479B30(NSObject *a1)
{
  return sub_1004796D0(a1);
}

uint64_t sub_100479B50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v3 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v5, v6, 8);
  v7 = (_QWORD *)sub_10058C44C((uint64_t)v5, a1, 0);
  if (v1)
  {
    sub_10047ADB0((uint64_t)v5);
  }
  else
  {
    a1 = sub_10047A570(v7);
    sub_10047ADB0((uint64_t)v5);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_100479C18(uint64_t a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = v2;
  v5 = _s10PredicatesOMa_3(0);
  *(_QWORD *)&v6 = __chkstk_darwin(v5).n128_u64[0];
  v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v8 = objc_msgSend(*v1, "accountObjectID", v6);
  swift_storeEnumTagMultiPayload(v8, v5, 3);
  v9 = (_QWORD *)sub_10058C44C((uint64_t)v8, a1, 0);
  if (v2)
  {
    sub_10047ADB0((uint64_t)v8);
  }
  else
  {
    v3 = sub_10047A570(v9);
    sub_10047ADB0((uint64_t)v8);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_100479D08(uint64_t a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = v2;
  v5 = _s10PredicatesOMa_3(0);
  *(_QWORD *)&v6 = __chkstk_darwin(v5).n128_u64[0];
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = objc_msgSend(*v1, "groupObjectID", v6);
  v8[8] = 1;
  swift_storeEnumTagMultiPayload(v8, v5, 4);
  v9 = (_QWORD *)sub_10058C44C((uint64_t)v8, a1, 0);
  if (v2)
  {
    sub_10047ADB0((uint64_t)v8);
  }
  else
  {
    v3 = sub_10047A570(v9);
    sub_10047ADB0((uint64_t)v8);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_100479E00(void **a1)
{
  void *v1;
  void *v2;
  Swift::String v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  NSString v9;
  uint64_t v10;

  v1 = *a1;
  v2 = (void *)objc_opt_self(REMError);
  _StringGuts.grow(_:)(119);
  v3._object = (void *)0x80000001007051C0;
  v3._countAndFlagsBits = 0xD000000000000075;
  String.append(_:)(v3);
  v4 = objc_msgSend(v1, "description", 0);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "invalidParameterErrorWithDescription:", v9, swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);

  return swift_willThrow(v10);
}

void sub_100479F04(unint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  id v53;
  void *v54;

  v5 = v4;
  v9 = a1;
  if (!(a1 >> 62))
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    if (v10)
      goto LABEL_3;
LABEL_43:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v9);
    goto LABEL_50;
  }
LABEL_39:
  if (v9 < 0)
    v35 = v9;
  else
    v35 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v9, 2);
  swift_bridgeObjectRetain(a2);
  v10 = _CocoaArrayWrapper.endIndex.getter(v35);
  swift_bridgeObjectRelease(v9);
  if (!v10)
    goto LABEL_43;
LABEL_3:
  v47 = v9 & 0xC000000000000001;
  if ((v9 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v9 + 32);
LABEL_6:
    v12 = v11;
    if ((unint64_t)a2 >> 62)
    {
      if (a2 < 0)
        v36 = a2;
      else
        v36 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v13 = _CocoaArrayWrapper.endIndex.getter(v36);
      swift_bridgeObjectRelease(a2);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13)
      {
LABEL_8:
        v49 = v5;
        v5 = 0;
        v48 = a2 & 0xC000000000000001;
        v42 = v9 & 0xFFFFFFFFFFFFFF8;
        v43 = a2 + 32;
        v45 = a2;
        v46 = v10 - 1;
        v44 = v9;
        v41 = v9 + 40;
        while (1)
        {
          if (v48)
            v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v45);
          else
            v14 = *(id *)(v43 + 8 * (_QWORD)v5);
          a2 = (uint64_t)v14;
          v54 = v12;
          v53 = v14;
          v15 = *(_QWORD **)a4;
          v17 = sub_1002C66DC((uint64_t)v12);
          v18 = v15[2];
          v19 = (v16 & 1) == 0;
          v20 = v18 + v19;
          if (__OFADD__(v18, v19))
          {
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
          v9 = v16;
          if (v15[3] >= v20)
          {
            if ((a3 & 1) != 0)
            {
              if ((v16 & 1) == 0)
                goto LABEL_22;
            }
            else
            {
              sub_1002D6134();
              if ((v9 & 1) == 0)
                goto LABEL_22;
            }
          }
          else
          {
            sub_1002CC53C(v20, a3 & 1);
            v21 = sub_1002C66DC((uint64_t)v12);
            if ((v9 & 1) != (v22 & 1))
              goto LABEL_53;
            v17 = v21;
            if ((v9 & 1) == 0)
            {
LABEL_22:
              v26 = *(_QWORD **)a4;
              *(_QWORD *)(*(_QWORD *)a4 + 8 * (v17 >> 6) + 64) |= 1 << v17;
              v27 = 8 * v17;
              *(_QWORD *)(v26[6] + v27) = v12;
              *(_QWORD *)(v26[7] + v27) = a2;
              v28 = v26[2];
              v29 = __OFADD__(v28, 1);
              v30 = v28 + 1;
              if (v29)
                goto LABEL_37;
              v26[2] = v30;
              goto LABEL_24;
            }
          }
          v23 = *(_QWORD **)a4;
          v52 = *(char **)(*(_QWORD *)(*(_QWORD *)a4 + 56) + 8 * v17);
          v24 = v52;
          sub_100479E00((void **)&v52);
          if (v49)
          {

            v52 = v49;
            swift_errorRetain(v49);
            v33 = sub_10001A630((uint64_t *)&unk_10083AA20);
            if ((swift_dynamicCast(v33, &v52, v33, &type metadata for _MergeError, 0) & 1) != 0)
              goto LABEL_54;
            swift_bridgeObjectRelease(v45);
            swift_bridgeObjectRelease(v44);
            v34 = v53;
            swift_bridgeObjectRelease(v45);
            swift_bridgeObjectRelease(v44);

            swift_errorRelease(v52);
            return;
          }

          v25 = v23[7];
          v9 = 8 * v17;
          a2 = v50;

          *(_QWORD *)(v25 + 8 * v17) = v50;
LABEL_24:
          if ((char *)v46 == v5)
          {
            a2 = v45;
            swift_bridgeObjectRelease(v45);
            v9 = v44;
            swift_bridgeObjectRelease(v44);
            goto LABEL_50;
          }
          v31 = v5 + 1;
          if (v47)
          {
            v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v44);
          }
          else
          {
            if ((unint64_t)v31 >= *(_QWORD *)(v42 + 16))
              goto LABEL_38;
            v32 = *(id *)(v41 + 8 * (_QWORD)v5);
          }
          v12 = v32;
          if (v5 == (char *)0x7FFFFFFFFFFFFFFELL)
            goto LABEL_36;
          ++v5;
          a3 = 1;
          if ((char *)v13 == v5)
          {
            a2 = v45;
            swift_bridgeObjectRelease(v45);
            v9 = v44;
            swift_bridgeObjectRelease(v44);

            goto LABEL_50;
          }
        }
      }
    }
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v9);

LABEL_50:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v9);
    return;
  }
  __break(1u);
LABEL_53:
  v37 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v37);
  __break(1u);
LABEL_54:
  v50 = 0;
  v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v38._object = (void *)0x8000000100701A20;
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v38);
  v39 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  _print_unlocked<A, B>(_:_:)(&v54, &v50, v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v40._countAndFlagsBits = 39;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v50, v51, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_10047A3F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = sub_1001A0B80(v6);
      if (v2)
      {
        swift_bridgeObjectRelease(a1);

        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        return;
      }
      v10 = v9;

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
      specialized Array._endMutation()(v14);
      ++v5;
      if (v8 == v4)
        goto LABEL_19;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_19:
  swift_bridgeObjectRelease(a1);
}

uint64_t sub_10047A570(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSArray v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  Class isa;
  Class v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t *v73;
  unint64_t v74;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = (unint64_t)a1;
  v7 = sub_10001A630((uint64_t *)&unk_100851970);
  v8 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v9 = sub_1000C4C0C((unint64_t *)&qword_100840F90, (uint64_t *)&unk_100851970);
  v10 = sub_10011A5DC();
  v11 = &v74;
  v12 = Sequence.unique<A>(by:)(sub_1003BA7EC, 0, v7, v8, v9, v10);
  if (v1)
    return (uint64_t)v11;
  v14 = v12;
  v72 = v6;
  v73 = 0;
  v71 = v4;
  v15 = (unint64_t)v12 >> 62;
  if (!((unint64_t)v12 >> 62))
  {
    v16 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_5;
LABEL_22:
    swift_bridgeObjectRelease(v14);
    v28 = objc_allocWithZone((Class)REMSmartListsDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083B1D8, REMSmartListStorage_ptr);
    v29.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v11 = (unint64_t *)objc_msgSend(v28, "initWithSmartListStorages:", v29.super.isa);
LABEL_23:

    return (uint64_t)v11;
  }
  if (v12 < 0)
    v27 = v12;
  else
    v27 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v16 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v14);
  if (!v16)
    goto LABEL_22;
LABEL_5:
  v69 = v8;
  v70 = v3;
  v68 = v10;
  v74 = (unint64_t)_swiftEmptyArrayStorage;
  if (v16 < 1)
  {
    __break(1u);
    goto LABEL_25;
  }
  swift_bridgeObjectRetain(v14);
  for (i = 0; i != v16; ++i)
  {
    if ((v14 & 0xC000000000000001) != 0)
      v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v14);
    else
      v19 = *(id *)(v14 + 8 * i + 32);
    v20 = v19;
    v21 = objc_msgSend(v19, "account", v68, v69);

    if (v21)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v24 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v23 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v24 >= v23 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1);
      v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v21);
      specialized Array._endMutation()(v18);
    }
  }
  swift_bridgeObjectRelease(v14);
  v3 = v74;
  if (v74 >> 62)
  {
LABEL_25:
    if (v3 < 0)
      v30 = v3;
    else
      v30 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v11 = (unint64_t *)_CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v3);
    v25 = v72;
    if (!v15)
      goto LABEL_17;
    goto LABEL_29;
  }
  v11 = *(unint64_t **)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
  v25 = v72;
  if (!v15)
  {
LABEL_17:
    v26 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_33;
  }
LABEL_29:
  if (v14 < 0)
    v31 = v14;
  else
    v31 = v14 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v14);
  v26 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v14);
LABEL_33:
  v32 = v73;
  if (v11 != (unint64_t *)v26)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v14);
    v34 = (void *)objc_opt_self(REMError);
    v11 = (unint64_t *)String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v34, "internalErrorWithDebugDescription:", v11);
LABEL_37:
    v35;

    swift_willThrow(v36);
    return (uint64_t)v11;
  }
  sub_10047A3F4(v14);
  if (v32)
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v3);
    return (uint64_t)v11;
  }
  v37 = v33;
  if (qword_100837588 != -1)
    swift_once(&qword_100837588, sub_100479AA0);
  v38 = v70;
  v39 = sub_10001AAA8(v70, (uint64_t)qword_10084BCD8);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 16))(v25, v39, v38);
  v73 = &v68;
  v74 = v3;
  __chkstk_darwin(v40);
  *(&v68 - 2) = (unint64_t)v25;
  v41 = sub_10001A630(&qword_10083FE60);
  v42 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
  v43 = sub_1000C4C0C((unint64_t *)&qword_100843190, &qword_10083FE60);
  v72 = (char *)v42;
  v44 = Sequence.map<A>(skippingError:_:)(sub_1002A7AD0, &v68 - 4, sub_1002A6DFC, 0, v41, v42, v43);
  v45 = 0;
  v46 = v44;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v25, v70);
  swift_bridgeObjectRelease(v3);
  if ((unint64_t)v46 >> 62)
  {
    if (v46 < 0)
      v63 = v46;
    else
      v63 = v46 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v46);
    v47 = _CocoaArrayWrapper.endIndex.getter(v63);
    swift_bridgeObjectRelease(v46);
    if (!((unint64_t)v37 >> 62))
    {
LABEL_42:
      if (v47 == *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_43;
      goto LABEL_69;
    }
  }
  else
  {
    v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!((unint64_t)v37 >> 62))
      goto LABEL_42;
  }
  if (v37 < 0)
    v64 = v37;
  else
    v64 = v37 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v37);
  v65 = _CocoaArrayWrapper.endIndex.getter(v64);
  swift_bridgeObjectRelease(v37);
  if (v47 != v65)
  {
LABEL_69:
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v14);
    v66 = (void *)objc_opt_self(REMError);
    v11 = (unint64_t *)String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v66, "internalErrorWithDebugDescription:", v11);
    goto LABEL_37;
  }
LABEL_43:
  v48 = (int64_t)_swiftEmptyArrayStorage;
  if (!v47)
  {
LABEL_51:
    if ((unint64_t)v48 >> 62)
    {
      if (v48 < 0)
        v67 = v48;
      else
        v67 = v48 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v48);
      v56 = _CocoaArrayWrapper.endIndex.getter(v67);
      swift_bridgeObjectRelease(v48);
    }
    else
    {
      v56 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v47 < v56)
      v56 = v47;
    if (v56)
    {
      sub_10001A630(&qword_10083DFD8);
      v57 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v56);
    }
    else
    {
      v57 = &_swiftEmptyDictionarySingleton;
    }
    v74 = (unint64_t)v57;
    sub_100479F04(v48, v46, 1, (uint64_t)&v74);
    v11 = (unint64_t *)v74;
    if (v45)
    {
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v37);
      swift_release(v11);
      return (uint64_t)v11;
    }
    sub_10058C8B8(v14);
    v59 = v58;
    swift_bridgeObjectRelease(v14);
    v73 = 0;
    v60 = objc_allocWithZone((Class)REMSmartListsDataViewInvocationResult);
    sub_1000151B0(0, &qword_10083B1D8, REMSmartListStorage_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v37);
    v62 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release(v11);
    sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
    v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v11 = (unint64_t *)objc_msgSend(v60, "initWithSmartListStorages:accountStorages:parentListStorages:", isa, v62, v29.super.isa, swift_bridgeObjectRelease(v59).n128_f64[0]);

    goto LABEL_23;
  }
  v71 = v46;
  v73 = 0;
  v74 = (unint64_t)_swiftEmptyArrayStorage;
  result = specialized ContiguousArray.reserveCapacity(_:)(v47);
  if ((v47 & 0x8000000000000000) == 0)
  {
    v49 = 0;
    do
    {
      if ((v37 & 0xC000000000000001) != 0)
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v49, v37);
      else
        v50 = *(id *)(v37 + 8 * v49 + 32);
      v51 = v50;
      ++v49;
      v52 = objc_msgSend(v50, "objectID", v68, v69);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v53);
      v54 = *(_QWORD *)(v74 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v54);
      v55 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v52);
      specialized ContiguousArray._endMutation()(v55);
    }
    while (v47 != v49);
    v48 = v74;
    v45 = v73;
    v46 = v71;
    goto LABEL_51;
  }
  __break(1u);
  return result;
}

uint64_t sub_10047ADB0(uint64_t a1)
{
  uint64_t v2;

  v2 = _s10PredicatesOMa_3(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10047ADEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084BCF0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084BCF0);
  if (qword_100837660 != -1)
    swift_once(&qword_100837660, sub_1004A18FC);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872100);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10047AE7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  Class isa;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  void **aBlock;
  _QWORD v27[4];
  uint64_t v28;

  if (qword_100837590 != -1)
    swift_once(&qword_100837590, sub_10047ADEC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_10084BCF0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "os_transaction INIT {name: com.apple.remindd.intentsRelevantShortcutsHandler}", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = os_transaction_create("com.apple.remindd.intentsRelevantShortcutsHandler");
  v9 = *(_QWORD *)(v1 + 16);
  v10 = (void **)_swiftEmptyArrayStorage;
  aBlock = (void **)_swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(type metadata accessor for REMWidgetRefresh.WidgetKind(0) - 8);
    v13 = v9 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain_n(v9, 2);
    do
    {
      sub_10047BE48((uint64_t)&aBlock, v13, a1);
      v13 += v14;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease_n(v9, 2);
    v10 = aBlock;
  }
  swift_bridgeObjectRetain(a1);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v18 = 134217984;
    aBlock = *(void ***)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v27);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RelevantShortcutsHandler setting %ld shortcuts", v18, 0xCu);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v19 = objc_msgSend((id)objc_opt_self(INRelevantShortcutStore), "defaultStore");
  sub_1000151B0(0, &qword_100840070, INRelevantShortcut_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v21 = (void *)REMAppBundleIdentifier;
  v22 = swift_allocObject(&unk_1007F53B0, 32, 7);
  *(_QWORD *)(v22 + 16) = v8;
  *(_QWORD *)(v22 + 24) = v10;
  v27[3] = sub_10047C3F4;
  v28 = v22;
  aBlock = _NSConcreteStackBlock;
  v27[0] = 1107296256;
  v27[1] = sub_1000E18E4;
  v27[2] = &unk_1007F53C8;
  v23 = _Block_copy(&aBlock);
  v24 = v28;
  v25 = v21;
  swift_unknownObjectRetain(v8);
  swift_release(v24);
  objc_msgSend(v19, "setRelevantShortcuts:forBundleIdentifier:completionHandler:", isa, v25, v23);
  _Block_release(v23);
  swift_unknownObjectRelease(v8);

}

void sub_10047B1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100837590 != -1)
      swift_once(&qword_100837590, sub_10047ADEC);
    v4 = type metadata accessor for Logger(0);
    sub_10001AAA8(v4, (uint64_t)qword_10084BCF0);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v28 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue(a1, v27, v26);
      v10 = Error.rem_errorDescription.getter(v26[1], v26[2]);
      v25 = sub_10001A820(v10, v11, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RelevantShortcutsHandler unable to set shortcuts because %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_100837590 != -1)
      swift_once(&qword_100837590, sub_10047ADEC);
    v13 = type metadata accessor for Logger(0);
    sub_10001AAA8(v13, (uint64_t)qword_10084BCF0);
    v14 = swift_bridgeObjectRetain_n(a3, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v17 = 134217984;
      if ((unint64_t)a3 >> 62)
      {
        if (a3 < 0)
          v24 = a3;
        else
          v24 = a3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a3);
        v18 = _CocoaArrayWrapper.endIndex.getter(v24);
        swift_bridgeObjectRelease();
      }
      else
      {
        v18 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v28 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RelevantShortcutsHandler set %ld shortcuts", v17, 0xCu);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
  }
  if (qword_100837590 != -1)
    swift_once(&qword_100837590, sub_10047ADEC);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001AAA8(v19, (uint64_t)qword_10084BCF0);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "os_transaction RELEASE {name: com.apple.remindd.intentsRelevantShortcutsHandler}", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

}

uint64_t sub_10047B58C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  NSString v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  NSDate v51;
  Class isa;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  Class v59;
  id v60;
  NSString v61;
  uint64_t v62;
  Class v63;
  char *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD v81[2];
  _QWORD *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v81[1] = a3;
  v82 = a1;
  v4 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v4);
  v92 = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630((uint64_t *)&unk_10084BDD0);
  __chkstk_darwin(v6);
  v8 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630(&qword_100839A98);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v94 = (uint64_t)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  v12 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v95 = (char *)v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630(&qword_10084BDE0);
  v15 = __chkstk_darwin(v14);
  v93 = (uint64_t)v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for INShortcut(0, v15);
  v87 = *(_QWORD *)(v17 - 8);
  v88 = v17;
  v18 = __chkstk_darwin(v17);
  v86 = (char *)v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2[1];
  v85 = *a2;
  v21 = a2[2];
  v22 = objc_allocWithZone((Class)type metadata accessor for ConfigurationIntent(0, v18));
  v89 = v20;
  v23 = objc_msgSend(v22, "init", swift_bridgeObjectRetain(v20).n128_f64[0]);
  v83 = v21;
  v84 = v23;
  v25 = *(_QWORD *)(v21 + 16);
  v81[0] = v12;
  if (v25)
    v24 = swift_bridgeObjectRetain(*(_QWORD *)(v21
                                             + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
                                             + 16));
  v26 = type metadata accessor for ConfigurationList(0, v24);
  v27 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v26));
  swift_bridgeObjectRetain(v89);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v27, "initWithIdentifier:displayString:", v28, v29, swift_bridgeObjectRelease().n128_f64[0]);

  v31 = v84;
  objc_msgSend(v84, "setList:", v30);

  v32 = v31;
  v33 = v93;
  INShortcut.init(intent:)();
  v34 = v88;
  v35 = v33;
  v36 = v87;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v35, 1, v88) == 1)
  {
    swift_bridgeObjectRelease();

    return sub_10000882C(v93, &qword_10084BDE0);
  }
  v84 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v86, v93, v34);
  v38 = _swiftEmptyArrayStorage;
  v98 = (uint64_t)_swiftEmptyArrayStorage;
  if (!v25)
    goto LABEL_19;
  v39 = v83 + ((*(unsigned __int8 *)(v81[0] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81[0] + 80));
  v93 = *(_QWORD *)(v81[0] + 72);
  swift_bridgeObjectRetain(v83);
  v40 = v91;
  v41 = v95;
  v90 = v10;
  do
  {
    sub_10047C450(v39, (uint64_t)v41);
    sub_10047C494((uint64_t)&v41[*(int *)(v40 + 24)], (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_10000882C((uint64_t)v8, (uint64_t *)&unk_10084BDD0);
      v42 = *(_QWORD *)&v41[*(int *)(v40 + 28)];
      if (!v42)
      {
        sub_10047C4DC((uint64_t)v41);
        goto LABEL_8;
      }
      v43 = objc_msgSend(objc_allocWithZone((Class)INLocationRelevanceProvider), "initWithRegion:", v42);
    }
    else
    {
      v44 = v8;
      v45 = v94;
      sub_100128FE0((uint64_t)v8, v94);
      v46 = v9;
      v47 = v45 + *(int *)(v9 + 36);
      v48 = type metadata accessor for Date(0);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = v92;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v92, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v48);
      v51.super.isa = Date._bridgeToObjectiveC()().super.isa;
      isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v50, 1, v48) != 1)
      {
        v53 = v92;
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v48);
      }
      v43 = objc_msgSend(objc_allocWithZone((Class)INDateRelevanceProvider), "initWithStartDate:endDate:", v51.super.isa, isa);

      sub_10000882C(v94, &qword_100839A98);
      v9 = v46;
      v8 = v44;
      v10 = v90;
      v40 = v91;
      v41 = v95;
    }
    v54 = sub_10047C4DC((uint64_t)v41);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
    v56 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v55 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v56 >= v55 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1);
    v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v43);
    specialized Array._endMutation()(v57);
    v41 = v95;
LABEL_8:
    v39 += v93;
    --v25;
  }
  while (v25);
  swift_bridgeObjectRelease();
  v38 = (_QWORD *)v98;
LABEL_19:
  v58 = objc_allocWithZone((Class)INRelevantShortcut);
  v59 = INShortcut._bridgeToObjectiveC()().super.isa;
  v60 = objc_msgSend(v58, "initWithShortcut:", v59);

  REMWidgetRefresh.WidgetKind.widgetKindIdentifier.getter(objc_msgSend(v60, "setShortcutRole:", 1));
  v61 = String._bridgeToObjectiveC()();
  objc_msgSend(v60, "setWidgetKind:", v61, swift_bridgeObjectRelease().n128_f64[0]);

  v62 = sub_1000151B0(0, &qword_10084BDE8, INRelevanceProvider_ptr);
  v63 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v60, "setRelevanceProviders:", v63);

  v64 = (char *)v60;
  v65 = v82;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v64);
  v67 = *(_QWORD *)((*v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v66 = *(_QWORD *)((*v65 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v67 >= v66 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1);
  v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v64);
  specialized Array._endMutation()(v68);
  v69 = v89;
  if (qword_100837590 != -1)
    swift_once(&qword_100837590, sub_10047ADEC);
  v70 = type metadata accessor for Logger(0);
  sub_10001AAA8(v70, (uint64_t)qword_10084BCF0);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v38);
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.info.getter(v72);
  if (os_log_type_enabled(v72, v73))
  {
    v74 = swift_slowAlloc(22, -1);
    v75 = swift_slowAlloc(64, -1);
    v95 = v64;
    v76 = v75;
    v98 = v75;
    *(_DWORD *)v74 = 136446466;
    swift_bridgeObjectRetain(v69);
    v96 = sub_10001A820(v85, v69, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    swift_bridgeObjectRelease_n(v69, 3);
    *(_WORD *)(v74 + 12) = 2080;
    swift_bridgeObjectRetain(v38);
    v78 = Array.description.getter(v77, v62);
    v80 = v79;
    swift_bridgeObjectRelease();
    v96 = sub_10001A820(v78, v80, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    swift_bridgeObjectRelease_n(v38, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "RDIntentsRelevantShortcutsHandler: adding relevant shortcut {identifier: %{public}s, relevanceProviders: %s}", (uint8_t *)v74, 0x16u);
    swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v74, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v69, 2);
    swift_bridgeObjectRelease_n(v38, 2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v86, v88);
}

uint64_t sub_10047BE04()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for RDIntentsRelevantShortcutsHandler()
{
  return objc_opt_self(_TtC7remindd33RDIntentsRelevantShortcutsHandler);
}

uint64_t sub_10047BE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t inited;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79[64];
  _QWORD *v80;

  v6 = sub_10001A630(&qword_10084BDB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v77 = *(_QWORD *)(v9 - 8);
  v78 = v9;
  __chkstk_darwin(v9);
  v76 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v75 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (id *)((char *)&v67 - v15);
  v17 = (_QWORD *)type metadata accessor for REMWidgetRefresh.WidgetKind(0);
  v18 = *(v17 - 1);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, _QWORD *, __n128))(v18 + 16))(v21, a2, v17, v19);
  v22 = (*(uint64_t (**)(char *, _QWORD *))(v18 + 88))(v21, v17);
  if ((_DWORD)v22 == enum case for REMWidgetRefresh.WidgetKind.widgetForAnyList(_:))
  {
    v68 = a2;
    v69 = a1;
    v17 = &_swiftEmptyDictionarySingleton;
    v80 = &_swiftEmptyDictionarySingleton;
    v23 = *(_QWORD *)(a3 + 16);
    if (v23)
    {
      v24 = *(unsigned __int8 *)(v12 + 80);
      v25 = (v24 + 32) & ~v24;
      v26 = a3 + v25;
      v27 = *(_QWORD *)(v12 + 72);
      v74 = v25;
      v71 = v24 | 7;
      v72 = v27 + v25;
      v67 = a3;
      swift_bridgeObjectRetain(a3);
      v70 = xmmword_1006A3C00;
      v73 = v27;
      while (1)
      {
        sub_10047C450(v26, (uint64_t)v16);
        v29 = objc_msgSend(*v16, "urlRepresentation");
        v30 = v76;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v29);

        v32 = URL.absoluteString.getter(v31);
        v34 = v33;
        (*(void (**)(char *, uint64_t))(v77 + 8))(v30, v78);
        v36 = sub_10001A6DC(v32, v34);
        v37 = v17[2];
        v38 = (v35 & 1) == 0;
        v39 = v37 + v38;
        if (__OFADD__(v37, v38))
          break;
        v40 = v35;
        if (v17[3] < v39)
        {
          sub_1002D306C(v39, 1);
          v17 = v80;
          v41 = sub_10001A6DC(v32, v34);
          if ((v40 & 1) != (v42 & 1))
            goto LABEL_27;
          v36 = v41;
        }
        if ((v40 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v43 = v17[7];
          sub_10023DB78((uint64_t)v16, v75);
          v44 = *(_QWORD *)(v43 + 8 * v36);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
          *(_QWORD *)(v43 + 8 * v36) = v44;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v44 = sub_1002CA0A0(0, *(_QWORD *)(v44 + 16) + 1, 1, v44);
            *(_QWORD *)(v43 + 8 * v36) = v44;
          }
          v47 = *(_QWORD *)(v44 + 16);
          v46 = *(_QWORD *)(v44 + 24);
          if (v47 >= v46 >> 1)
          {
            v44 = sub_1002CA0A0(v46 > 1, v47 + 1, 1, v44);
            *(_QWORD *)(v43 + 8 * v36) = v44;
          }
          *(_QWORD *)(v44 + 16) = v47 + 1;
          v28 = v44 + v74 + v47 * v73;
          v27 = v73;
          sub_10023DB78(v75, v28);
        }
        else
        {
          v48 = sub_10001A630((uint64_t *)&unk_10084BDC0);
          v49 = swift_allocObject(v48, v72, v71);
          *(_OWORD *)(v49 + 16) = v70;
          sub_10023DB78((uint64_t)v16, v49 + v74);
          v17[(v36 >> 6) + 8] |= 1 << v36;
          v50 = (uint64_t *)(v17[6] + 16 * v36);
          *v50 = v32;
          v50[1] = v34;
          *(_QWORD *)(v17[7] + 8 * v36) = v49;
          v51 = v17[2];
          v52 = __OFADD__(v51, 1);
          v53 = v51 + 1;
          if (v52)
            goto LABEL_26;
          v17[2] = v53;
        }
        v26 += v27;
        if (!--v23)
        {
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_28;
    }
LABEL_21:
    v54 = v68;
LABEL_24:
    __chkstk_darwin(v22);
    *(&v67 - 2) = v54;
    v65 = sub_10027BDF8((uint64_t)_swiftEmptyArrayStorage, (void (*)(uint64_t *, _QWORD *))sub_10047C438, (uint64_t)(&v67 - 4), (uint64_t)v17);
    swift_bridgeObjectRelease();
    return sub_1001E383C(v65);
  }
  v54 = a2;
  if ((_DWORD)v22 == enum case for REMWidgetRefresh.WidgetKind.widgetForTodayList(_:))
  {
    v55 = sub_10001A630(&qword_10084BDB8);
    inited = swift_initStackObject(v55, v79);
    *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
    REMNavigationSpecifier.init(_:)(REMSmartListTypeToday);
    v57 = type metadata accessor for REMNavigationSpecifier(0);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48))(v8, 1, v57);
    if ((_DWORD)v59 == 1)
    {
      sub_10000882C((uint64_t)v8, &qword_10084BDB0);
      v60 = 0xED00005941444F54;
      v61 = 0x20474E495353494DLL;
    }
    else
    {
      v62 = v76;
      REMNavigationSpecifier.url.getter(v59);
      v63 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v8, v57);
      v61 = URL.absoluteString.getter(v63);
      v60 = v64;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v62, v78);
    }
    *(_QWORD *)(inited + 32) = v61;
    *(_QWORD *)(inited + 40) = v60;
    *(_QWORD *)(inited + 48) = a3;
    swift_bridgeObjectRetain(a3);
    v22 = sub_1002B13BC(inited);
    v17 = (_QWORD *)v22;
    goto LABEL_24;
  }
LABEL_28:
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v17, v17);
  __break(1u);
  return result;
}

uint64_t sub_10047C3C8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10047C3F4(uint64_t a1)
{
  uint64_t v1;

  sub_10047B1C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(uint64_t a1)
{
  uint64_t result;

  result = qword_10084BE48;
  if (!qword_10084BE48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDIntentsRelevantShortcutsHandlerItem);
  return result;
}

uint64_t sub_10047C438(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_10047B58C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10047C450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10047C494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_10084BDD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10047C4DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RDIntentsRelevantShortcutsHandlerItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10047C518(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  void *v19;
  id v20;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v8;
    v9 = *(int *)(a3 + 24);
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = v5;
    swift_bridgeObjectRetain(v8);
    v13 = sub_10001A630(&qword_100839A98);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
    {
      v15 = sub_10001A630((uint64_t *)&unk_10084BDD0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v16 = type metadata accessor for Date(0);
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v10, v11, v16);
      v17(&v10[*(int *)(v13 + 36)], &v11[*(int *)(v13 + 36)], v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    }
    v18 = *(int *)(a3 + 28);
    v19 = *(char **)((char *)a2 + v18);
    *(_QWORD *)&a1[v18] = v19;
    v20 = v19;
  }
  return a1;
}

void sub_10047C65C(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);

  swift_bridgeObjectRelease();
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = sub_10001A630(&qword_100839A98);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for Date(0);
    v7 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v4, v6);
    v7(&v4[*(int *)(v5 + 36)], v6);
  }

}

_QWORD *sub_10047C708(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  void *v19;
  id v20;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = *(_QWORD *)(a2 + 16);
  a1[2] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = v6;
  swift_bridgeObjectRetain(v8);
  v13 = sub_10001A630(&qword_100839A98);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
  {
    v15 = sub_10001A630((uint64_t *)&unk_10084BDD0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = type metadata accessor for Date(0);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v10, v11, v16);
    v17(&v10[*(int *)(v13 + 36)], &v11[*(int *)(v13 + 36)], v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
  }
  v18 = *(int *)(a3 + 28);
  v19 = *(void **)(a2 + v18);
  *(_QWORD *)((char *)a1 + v18) = v19;
  v20 = v19;
  return a1;
}

uint64_t sub_10047C828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = sub_10001A630(&qword_100839A98);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v26 = type metadata accessor for Date(0);
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 24);
      v27(v11, v12, v26);
      v27(&v11[*(int *)(v13 + 36)], &v12[*(int *)(v13 + 36)], v26);
      goto LABEL_7;
    }
    sub_10000882C((uint64_t)v11, &qword_100839A98);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v20 = sub_10001A630((uint64_t *)&unk_10084BDD0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  v19(v11, v12, v18);
  v19(&v11[*(int *)(v13 + 36)], &v12[*(int *)(v13 + 36)], v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v21 = *(int *)(a3 + 28);
  v22 = *(void **)(a1 + v21);
  v23 = *(void **)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v23;
  v24 = v23;

  return a1;
}

uint64_t sub_10047C9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_10001A630(&qword_100839A98);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A630((uint64_t *)&unk_10084BDD0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v13(v7, v8, v12);
    v13(&v7[*(int *)(v9 + 36)], &v8[*(int *)(v9 + 36)], v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10047CAE0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = sub_10001A630(&qword_100839A98);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40);
      v23(v9, v10, v22);
      v23(&v9[*(int *)(v11 + 36)], &v10[*(int *)(v11 + 36)], v22);
      goto LABEL_7;
    }
    sub_10000882C((uint64_t)v9, &qword_100839A98);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v18 = sub_10001A630((uint64_t *)&unk_10084BDD0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v9, v10, v16);
  v17(&v9[*(int *)(v11 + 36)], &v10[*(int *)(v11 + 36)], v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v19 = *(int *)(a3 + 28);
  v20 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)((char *)a2 + v19);

  return a1;
}

uint64_t sub_10047CC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10047CC7C);
}

uint64_t sub_10047CC7C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A630((uint64_t *)&unk_10084BDD0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_10047CCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10047CD08);
}

char *sub_10047CD08(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10001A630((uint64_t *)&unk_10084BDD0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_10047CD80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_1006BD9E8;
  sub_10047CE08(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1006BDA00;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_10047CE08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10084BE58)
  {
    v2 = sub_1000A5A94(&qword_100839A98);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10084BE58);
  }
}

uint64_t sub_10047CE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084BE90);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084BE90);
  if (qword_100837690 != -1)
    swift_once(&qword_100837690, sub_1004A19A4);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872190);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10047CFB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD v11[6];
  NSObject *v12;
  uint64_t v13;

  if (a1)
  {
    ObjectType = swift_getObjectType();
    v13 = *(_QWORD *)(v1 + OBJC_IVAR___RDAccountPropertiesNotifier_lock);
    __chkstk_darwin(ObjectType);
    v11[2] = a1;
    v11[3] = v1;
    v11[4] = v4;
    v5 = type metadata accessor for UnfairLock(0);
    swift_unknownObjectRetain(a1);
    swift_retain();
    Lock.sync<A>(_:)(sub_10047E2CC, v11, v5, &type metadata for () + 1, &protocol witness table for UnfairLock);
    v6 = v13;
    swift_unknownObjectRelease(a1);
    swift_release(v6);
  }
  else
  {
    if (qword_100837598 != -1)
      swift_once(&qword_100837598, sub_10047CE60);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001AAA8(v7, (uint64_t)qword_10084BE90);
    v12 = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v9, "Trying to add observer to RDAccountPropertiesNotifier but input observer is nil", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
}

void sub_10047D154(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char isUniquelyReferenced_nonNull_native;
  __n128 v38;
  void (*v39)(uint64_t, uint64_t, __n128);
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  id v65[5];

  v62 = a3;
  v59 = a2;
  v4 = type metadata accessor for UUID(0);
  v60 = *(uint8_t **)(v4 - 8);
  v61 = v4;
  __chkstk_darwin(v4);
  v58 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630(&qword_100847A08);
  v55 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A630(&qword_10084BEE8);
  v17 = *(_QWORD *)(v16 - 8);
  v56 = v16;
  v57 = v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerREMAccountPropertiesDidUpdateNotification"), 0);

  v21 = swift_allocObject(&unk_1007F5400, 32, 7);
  v22 = v62;
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = v22;
  v23 = sub_10009FC50((unint64_t *)&qword_10084A2A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  swift_unknownObjectRetain(a1);
  Publisher.filter(_:)(sub_10047E2FC, v21, v9, v23);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v65[0] = objc_msgSend(a1, "callbackQueue");
  v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
  v25 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v26 = sub_1000A5F84((unint64_t *)&unk_100847A38, &qword_100847A08, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v27 = sub_1000A5E70();
  Publisher.receive<A>(on:options:)(v65, v8, v13, v25, v26, v27);
  sub_10000882C((uint64_t)v8, &qword_10083A970);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v13);
  v28 = swift_allocObject(&unk_1007F5428, 32, 7);
  v29 = v62;
  *(_QWORD *)(v28 + 16) = a1;
  *(_QWORD *)(v28 + 24) = v29;
  v30 = sub_1000A5F84(&qword_10084BEF0, &qword_10084BEE8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_unknownObjectRetain(a1);
  v31 = v56;
  v32 = (void *)Publisher<>.sink(receiveValue:)(sub_10047E304, v28, v56, v30);
  swift_release(v28);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v19, v31);
  v33 = objc_msgSend(a1, "uuid");
  v34 = (uint64_t)v58;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v35 = v59;
  v36 = (uint64_t *)(v59 + OBJC_IVAR___RDAccountPropertiesNotifier_l_observers);
  swift_beginAccess(v59 + OBJC_IVAR___RDAccountPropertiesNotifier_l_observers, v65, 33, 0);
  swift_unknownObjectRetain(a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v36);
  v63 = *v36;
  *v36 = 0x8000000000000000;
  sub_10028E1CC((uint64_t)a1, v34, isUniquelyReferenced_nonNull_native);
  *v36 = v63;
  v38 = swift_bridgeObjectRelease();
  v39 = (void (*)(uint64_t, uint64_t, __n128))*((_QWORD *)v60 + 1);
  v39(v34, v61, v38);
  swift_endAccess(v65);
  v40 = objc_msgSend(a1, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

  v65[3] = (id)type metadata accessor for AnyCancellable(0);
  v65[4] = &protocol witness table for AnyCancellable;
  v65[0] = v32;
  swift_beginAccess(v35 + OBJC_IVAR___RDAccountPropertiesNotifier_l_cancellables, &v63, 33, 0);
  swift_retain();
  v41 = v34;
  sub_100312310((uint64_t)v65, v34);
  swift_endAccess(&v63);
  if (qword_100837598 != -1)
    swift_once(&qword_100837598, sub_10047CE60);
  v42 = type metadata accessor for Logger(0);
  sub_10001AAA8(v42, (uint64_t)qword_10084BE90);
  v43 = swift_unknownObjectRetain_n(a1, 2);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.info.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = (void *)swift_slowAlloc(32, -1);
    v62 = v32;
    v48 = v47;
    v65[0] = v47;
    *(_DWORD *)v46 = 136315138;
    v60 = v46 + 4;
    v49 = objc_msgSend(a1, "uuid");
    v50 = v41;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

    v52 = UUID.uuidString.getter(v51);
    v54 = v53;
    ((void (*)(uint64_t, uint64_t))v39)(v50, v61);
    v63 = sub_10001A820(v52, v54, (uint64_t *)v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "RDAccountPropertiesNotifier added observer {uuid: %s}", v46, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v46, -1, -1);
    swift_release(v62);

  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
    swift_release(v32);
  }
}

uint64_t sub_10047D7BC(__n128 a1, uint64_t a2, void *a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  _OWORD v18[2];

  result = Notification.userInfo.getter(a1);
  if (result)
  {
    v5 = result;
    strcpy((char *)v18, "propertyValue");
    HIWORD(v18[0]) = -4864;
    AnyHashable.init<A>(_:)(v16, v18, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v5 + 16) && (v6 = sub_1002C6A88((uint64_t)v16), (v7 & 1) != 0))
      sub_10001A670(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)v18);
    else
      memset(v18, 0, sizeof(v18));
    swift_bridgeObjectRelease();
    sub_10020DA24((uint64_t)v16);
    sub_1000E6B28((uint64_t)v18, (uint64_t)v16);
    v8 = v17;
    if (v17)
    {
      v9 = sub_10000A388(v16, v17);
      v10 = *(_QWORD *)(v8 - 8);
      v11 = __chkstk_darwin(v9);
      v13 = (char *)&v16[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v10 + 16))(v13, v11);
      v14 = _bridgeAnythingToObjectiveC<A>(_:)(v13, v8);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v16);
    }
    else
    {
      v14 = 0;
    }
    objc_msgSend(a3, "notify:", v14);
    swift_unknownObjectRelease(v14);
    return sub_10000882C((uint64_t)v18, (uint64_t *)&unk_10083D5B0);
  }
  return result;
}

void sub_10047D950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD v9[4];
  NSObject *v10;
  uint64_t v11;

  if (a1)
  {
    v11 = *(_QWORD *)(v1 + OBJC_IVAR___RDAccountPropertiesNotifier_lock);
    v9[3] = a1;
    v3 = type metadata accessor for UnfairLock(0);
    swift_unknownObjectRetain(a1);
    swift_retain();
    Lock.sync<A>(_:)(sub_10047E2C4, v9, v3, &type metadata for () + 1, &protocol witness table for UnfairLock);
    v4 = v11;
    swift_unknownObjectRelease(a1);
    swift_release(v4);
  }
  else
  {
    if (qword_100837598 != -1)
      swift_once(&qword_100837598, sub_10047CE60);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001AAA8(v5, (uint64_t)qword_10084BE90);
    v10 = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v7, "Trying to remove observer to RDAccountPropertiesNotifier but input observer is nil", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
}

void sub_10047DAE0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  double v11;
  void (*v12)(char *, uint64_t, double);
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a2, "uuid", v6);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v9);

  v10 = a1 + OBJC_IVAR___RDAccountPropertiesNotifier_l_cancellables;
  swift_beginAccess(a1 + OBJC_IVAR___RDAccountPropertiesNotifier_l_cancellables, &v44, 33, 0);
  v11 = sub_1002CB8CC((uint64_t)v8, (uint64_t)&v46);
  v12 = *(void (**)(char *, uint64_t, double))(v5 + 8);
  v12(v8, v4, v11);
  swift_endAccess(&v44);
  if (v47)
  {
    sub_10001BCA8(&v46, (uint64_t)v48);
    v13 = v49;
    v14 = v50;
    sub_10000A388(v48, v49);
    dispatch thunk of Cancellable.cancel()(v13, v14);
    v15 = objc_msgSend(a2, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

    swift_beginAccess(a1 + OBJC_IVAR___RDAccountPropertiesNotifier_l_observers, &v46, 33, 0);
    v16 = sub_1002CB9D0((uint64_t)v8);
    ((void (*)(char *, uint64_t))v12)(v8, v4);
    swift_endAccess(&v46);
    swift_unknownObjectRelease(v16);
    v17 = objc_msgSend(a2, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    swift_beginAccess(v10, &v44, 33, 0);
    v18 = sub_1002CB8CC((uint64_t)v8, (uint64_t)&v46);
    v12(v8, v4, v18);
    sub_10000882C((uint64_t)&v46, &qword_100841488);
    swift_endAccess(&v44);
    if (qword_100837598 != -1)
      swift_once(&qword_100837598, sub_10047CE60);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10084BE90);
    v20 = swift_unknownObjectRetain_n(a2, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v46 = v24;
      v43 = (void (*)(char *, uint64_t))v12;
      *(_DWORD *)v23 = 136315138;
      v42 = v23 + 4;
      v25 = objc_msgSend(a2, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v27 = UUID.uuidString.getter(v26);
      v29 = v28;
      v43(v8, v4);
      v44 = sub_10001A820(v27, v29, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      swift_unknownObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAccountPropertiesNotifier removed observer {uuid: %s}", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(a2, 2);
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v48);
  }
  else
  {
    sub_10000882C((uint64_t)&v46, &qword_100841488);
    if (qword_100837598 != -1)
      swift_once(&qword_100837598, sub_10047CE60);
    v30 = type metadata accessor for Logger(0);
    sub_10001AAA8(v30, (uint64_t)qword_10084BE90);
    v31 = swift_unknownObjectRetain_n(a2, 2);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v48[0] = v35;
      v43 = (void (*)(char *, uint64_t))v12;
      *(_DWORD *)v34 = 136315138;
      v42 = v34 + 4;
      v36 = objc_msgSend(a2, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

      v38 = UUID.uuidString.getter(v37);
      v40 = v39;
      v43(v8, v4);
      *(_QWORD *)&v46 = sub_10001A820(v38, v40, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 8);
      swift_unknownObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDAccountPropertiesNotifier cannot unobserve as the observer is not found {uuid: %s}", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(a2, 2);
    }
  }
}

void sub_10047E054(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7;

  swift_unknownObjectRetain(a3);
  v7 = a1;
  a4(a3);
  swift_unknownObjectRelease(a3);

}

id sub_10047E0B4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  uint64_t v14;
  objc_super v15;
  _QWORD *v16;

  v1 = v0;
  v2 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR___RDAccountPropertiesNotifier_lock;
  v16 = _swiftEmptyArrayStorage;
  v7 = sub_10009FC50((unint64_t *)&qword_100838120, v6, (uint64_t)&protocol conformance descriptor for UnfairLock.Options);
  v8 = v1;
  v9 = sub_10001A630((uint64_t *)&unk_10083DBB0);
  v10 = sub_1000A5F84((unint64_t *)&qword_100838130, (uint64_t *)&unk_10083DBB0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v9, v10, v2, v7);
  v11 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)&v1[v5] = UnfairLock.init(options:)(v4);
  *(_QWORD *)&v8[OBJC_IVAR___RDAccountPropertiesNotifier_l_observers] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v8[OBJC_IVAR___RDAccountPropertiesNotifier_l_cancellables] = _swiftEmptyDictionarySingleton;

  v12 = (objc_class *)type metadata accessor for RDAccountPropertiesNotifier();
  v15.receiver = v8;
  v15.super_class = v12;
  return objc_msgSendSuper2(&v15, "init");
}

id sub_10047E22C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDAccountPropertiesNotifier();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDAccountPropertiesNotifier()
{
  return objc_opt_self(RDAccountPropertiesNotifier);
}

void sub_10047E2C4()
{
  uint64_t v0;

  sub_10047DAE0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10047E2CC()
{
  uint64_t v0;

  sub_10047D154(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10047E2D8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10047E2FC(uint64_t a1, __n128 a2)
{
  uint64_t v2;

  return sub_10047E30C(a2, a1, *(void **)(v2 + 16));
}

uint64_t sub_10047E304(uint64_t a1, __n128 a2)
{
  uint64_t v2;

  return sub_10047D7BC(a2, a1, *(void **)(v2 + 16));
}

uint64_t sub_10047E30C(__n128 a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  char v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  _QWORD v44[5];
  __int128 v45;
  __int128 v46;

  v4 = Notification.userInfo.getter(a1);
  if (!v4)
  {
    if (qword_100837598 != -1)
      swift_once(&qword_100837598, sub_10047CE60);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_10084BE90);
    v9 = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v9, v14))
      goto LABEL_22;
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = "Received RDStoreControllerREMAccountPropertiesDidUpdate has no userInfo";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v9, v14, v16, v15, 2u);
    swift_slowDealloc(v15, -1, -1);
LABEL_22:

LABEL_23:
    v19 = 0;
    return v19 & 1;
  }
  v5 = v4;
  v43[0] = 0x4F746E756F636361;
  v43[1] = 0xEF44497463656A62;
  AnyHashable.init<A>(_:)(v44, v43, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_1002C6A88((uint64_t)v44), (v7 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  sub_10020DA24((uint64_t)v44);
  if (!*((_QWORD *)&v46 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10000882C((uint64_t)&v45, (uint64_t *)&unk_10083D5B0);
LABEL_17:
    if (qword_100837598 != -1)
      swift_once(&qword_100837598, sub_10047CE60);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001AAA8(v17, (uint64_t)qword_10084BE90);
    v9 = Logger.logObject.getter(v18);
    v14 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v9, v14))
      goto LABEL_22;
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = "Received RDStoreControllerREMAccountPropertiesDidUpdate has no account REMObjectID in the userInfo";
    goto LABEL_21;
  }
  v8 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  if ((swift_dynamicCast(v43, &v45, (char *)&type metadata for Any + 8, v8, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v9 = v43[0];
  strcpy((char *)v43, "accountType");
  HIDWORD(v43[1]) = -352321536;
  AnyHashable.init<A>(_:)(v44, v43, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v10 = sub_1002C6A88((uint64_t)v44), (v11 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v5 + 56) + 32 * v10, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  sub_10020DA24((uint64_t)v44);
  if (!*((_QWORD *)&v46 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10000882C((uint64_t)&v45, (uint64_t *)&unk_10083D5B0);
    goto LABEL_33;
  }
  if ((swift_dynamicCast(v43, &v45, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_33:
    if (qword_100837598 != -1)
      swift_once(&qword_100837598, sub_10047CE60);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001AAA8(v24, (uint64_t)qword_10084BE90);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      v29 = "Received RDStoreControllerREMAccountPropertiesDidUpdate has no account type in the userInfo";
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v26, v27, v29, v28, 2u);
      swift_slowDealloc(v28, -1, -1);

      goto LABEL_23;
    }
    goto LABEL_51;
  }
  v21 = (id)v43[0];
  strcpy((char *)v43, "propertyName");
  BYTE5(v43[1]) = 0;
  HIWORD(v43[1]) = -5120;
  AnyHashable.init<A>(_:)(v44, v43, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v22 = sub_1002C6A88((uint64_t)v44), (v23 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v5 + 56) + 32 * v22, (uint64_t)&v45);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10020DA24((uint64_t)v44);
  if (!*((_QWORD *)&v46 + 1))
  {
    sub_10000882C((uint64_t)&v45, (uint64_t *)&unk_10083D5B0);
LABEL_46:
    if (qword_100837598 != -1)
      swift_once(&qword_100837598, sub_10047CE60);
    v41 = type metadata accessor for Logger(0);
    v42 = sub_10001AAA8(v41, (uint64_t)qword_10084BE90);
    v26 = Logger.logObject.getter(v42);
    v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      v29 = "Received RDStoreControllerREMAccountPropertiesDidUpdate has no property name in the userInfo";
      goto LABEL_50;
    }
LABEL_51:

    goto LABEL_22;
  }
  if ((swift_dynamicCast(v43, &v45, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_46;
  v31 = v43[0];
  v30 = v43[1];
  sub_1000151B0(0, (unint64_t *)&qword_100838010, NSObject_ptr);
  v32 = objc_msgSend(a3, "account");
  v33 = objc_msgSend(v32, "objectID");
  swift_unknownObjectRelease(v32);
  v34 = static NSObject.== infix(_:_:)(v33);

  if ((v34 & 1) == 0
    || (v35 = objc_msgSend(a3, "account"),
        v36 = objc_msgSend(v35, "type"),
        swift_unknownObjectRelease(v35),
        v36 != v21))
  {

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v37 = objc_msgSend(a3, "propertyName");
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v40 = v39;

  if (v38 == v31 && v40 == v30)
  {

    swift_bridgeObjectRelease_n(v30, 2);
    v19 = 1;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v31, v30, 0);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return v19 & 1;
}

__CFString *_sSo24ICCloudContextSyncReasona7reminddE03xpcc9InterfacecD0ABSgSo010REMXPCSyncgcD0a_tcfC_0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  __CFString **v10;
  __CFString *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonAppDelegate);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_AppDelegate;
LABEL_8:
    swift_bridgeObjectRelease_n(v4, 2);
    goto LABEL_9;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_AppDelegate;
LABEL_9:
    v11 = *v10;

    return v11;
  }
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonDebugMenu);
  v4 = v14;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v13 == v15 && v4 == v16)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_DebugMenu;
    goto LABEL_8;
  }
  v18 = v16;
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v4, v15, v16, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v18);
  if ((v19 & 1) != 0)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_DebugMenu;
    goto LABEL_9;
  }
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonRemindtoolCloudKitDeleteAll);
  v4 = v21;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v24 = v22;
  if (v20 == v23 && v4 == v22)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitDeleteAll;
    goto LABEL_8;
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v4, v23, v22, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v24);
  if ((v25 & 1) != 0)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitDeleteAll;
    goto LABEL_9;
  }
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonRemindtoolCloudKitRestart);
  v4 = v27;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v30 = v28;
  if (v26 == v29 && v4 == v28)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitRestart;
    goto LABEL_8;
  }
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v4, v29, v28, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v30);
  if ((v31 & 1) != 0)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitRestart;
    goto LABEL_9;
  }
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonRemindtoolCloudKitSync);
  v4 = v33;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v36 = v34;
  if (v32 == v35 && v4 == v34)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitSync;
    goto LABEL_8;
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v4, v35, v34, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v36);
  if ((v37 & 1) != 0)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_RemindtoolCloudKitSync;
    goto LABEL_9;
  }
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonSignificantTimeChanged);
  v4 = v39;
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v42 = v40;
  if (v38 == v41 && v4 == v40)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_SignificantTimeChange;
    goto LABEL_8;
  }
  v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v4, v41, v40, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v42);
  if ((v43 & 1) != 0)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_SignificantTimeChange;
    goto LABEL_9;
  }
  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonUpdateAccounts);
  v4 = v45;
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v48 = v46;
  if (v44 == v47 && v4 == v46)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_UpdateAccounts;
    goto LABEL_8;
  }
  v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v4, v47, v46, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v48);
  if ((v49 & 1) != 0)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_UpdateAccounts;
    goto LABEL_9;
  }
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(REMXPCSyncInterfaceSyncReasonFamilyChecklistCloudKitSync);
  v4 = v51;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v54 = v52;
  if (v50 == v53 && v4 == v52)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_FamilyChecklistCloudKitSync;
    goto LABEL_8;
  }
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v4, v53, v52, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v54);
  if ((v55 & 1) != 0)
  {
    v10 = &ICCloudContextSyncReasonSyncInterface_FamilyChecklistCloudKitSync;
    goto LABEL_9;
  }
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v56 = type metadata accessor for Logger(0);
  sub_10001AAA8(v56, (uint64_t)qword_100871F98);
  v57 = a1;
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(12, -1);
    v61 = swift_slowAlloc(32, -1);
    v66 = v61;
    *(_DWORD *)v60 = 136315138;
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v64 = v63;
    v65 = sub_10001A820(v62, v63, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);

    swift_bridgeObjectRelease(v64);
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Cannot convert to ICCloudContextSyncReason from unknown REMXPCSyncInterfaceSyncReason: %s", v60, 0xCu);
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v60, -1, -1);

  }
  else
  {

  }
  return 0;
}

char *sub_10047EF20()
{
  return sub_10047F194();
}

char *sub_10047EF34()
{
  return sub_10047F4F0();
}

id sub_10047EF48()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  uint64_t v17;

  v2 = v1;
  v3 = _s10PredicatesOMa(0);
  *(_QWORD *)&v4 = __chkstk_darwin(v3).n128_u64[0];
  v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = objc_msgSend(v0, "listID", v4);
  swift_storeEnumTagMultiPayload(v6, v3, 26);
  sub_10000D2C0();
  v8 = v7;
  v9 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
  objc_msgSend(v10, "setEntity:", v11);

  objc_msgSend(v10, "setAffectedStores:", 0);
  objc_msgSend(v10, "setPredicate:", v8);

  objc_msgSend(v10, "setFetchLimit:", 1);
  v12 = NSManagedObjectContext.count<A>(for:)(v10, v9);
  if (v1)
  {
    sub_10001C744((uint64_t)v6, _s10PredicatesOMa);

  }
  else
  {
    v13 = v12;
    v2 = objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
    v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v13);
    static String._unconditionallyBridgeFromObjectiveC(_:)(CompletedRemindersCountInList);
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "storeProperty:forKey:", v14, v15, swift_bridgeObjectRelease().n128_f64[0]);

    sub_10001C744((uint64_t)v6, _s10PredicatesOMa);
  }
  return v2;
}

id sub_10047F174()
{
  return sub_10047EF48();
}

char *sub_10047F194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSString v21;
  uint64_t v23;

  v1 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v4 = qword_100872288;
  v5 = (void *)swift_retain();
  v6 = sub_1003011F8(v5);
  swift_release(v4);

  if (!v6)
  {
    v17 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
    swift_willThrow(v17);
    return v3;
  }
  v7 = (void *)objc_opt_self(REMUserDefaults);
  v8 = objc_msgSend(v7, "daemonUserDefaults");
  v9 = objc_msgSend(v8, "tipKitCachedCountOfLists");

  if (v9)
  {
    v10 = (uint64_t)objc_msgSend(v9, "integerValue");

    if (v10 > 3)
    {
LABEL_10:
      v3 = (char *)objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
      v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v10);
      static String._unconditionallyBridgeFromObjectiveC(_:)(ListsCount);
      v21 = String._bridgeToObjectiveC()();
      objc_msgSend(v3, "storeProperty:forKey:", v20, v21, swift_bridgeObjectRelease().n128_f64[0]);

      return v3;
    }
  }
  swift_storeEnumTagMultiPayload(v3, v1, 32);
  sub_10000A3AC();
  v12 = v11;
  v13 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v14, "setEntity:", v15);

  objc_msgSend(v14, "setAffectedStores:", 0);
  objc_msgSend(v14, "setPredicate:", v12);

  objc_msgSend(v14, "setFetchLimit:", 4);
  v16 = NSManagedObjectContext.count<A>(for:)(v14, v13);
  if (!v0)
  {
    v10 = v16;
    v18 = objc_msgSend(v7, "daemonUserDefaults");
    v19 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v10);
    objc_msgSend(v18, "setTipKitCachedCountOfLists:", v19);

    sub_10001C744((uint64_t)v3, _s10PredicatesOMa_1);
    goto LABEL_10;
  }
  sub_10001C744((uint64_t)v3, _s10PredicatesOMa_1);

  return v3;
}

char *sub_10047F4F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSString v21;
  uint64_t v23;

  v1 = _s10PredicatesOMa(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v4 = qword_100872288;
  v5 = (void *)swift_retain();
  v6 = sub_1003011F8(v5);
  swift_release(v4);

  if (!v6)
  {
    v17 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
    swift_willThrow(v17);
    return v3;
  }
  v7 = (void *)objc_opt_self(REMUserDefaults);
  v8 = objc_msgSend(v7, "daemonUserDefaults");
  v9 = objc_msgSend(v8, "tipKitCachedCountOfUncompletedReminders");

  if (v9)
  {
    v10 = (uint64_t)objc_msgSend(v9, "integerValue");

    if (v10 > 5)
    {
LABEL_10:
      v3 = (char *)objc_msgSend(objc_allocWithZone((Class)REMStoreInvocationResult), "init");
      v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v10);
      static String._unconditionallyBridgeFromObjectiveC(_:)(UncompletedRemindersCount);
      v21 = String._bridgeToObjectiveC()();
      objc_msgSend(v3, "storeProperty:forKey:", v20, v21, swift_bridgeObjectRelease().n128_f64[0]);

      return v3;
    }
  }
  swift_storeEnumTagMultiPayload(v3, v1, 57);
  sub_10000D2C0();
  v12 = v11;
  v13 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v15 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "entity");
  objc_msgSend(v14, "setEntity:", v15);

  objc_msgSend(v14, "setAffectedStores:", 0);
  objc_msgSend(v14, "setPredicate:", v12);

  objc_msgSend(v14, "setFetchLimit:", 6);
  v16 = NSManagedObjectContext.count<A>(for:)(v14, v13);
  if (!v0)
  {
    v10 = v16;
    v18 = objc_msgSend(v7, "daemonUserDefaults");
    v19 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v10);
    objc_msgSend(v18, "setTipKitCachedCountOfUncompletedReminders:", v19);

    sub_10001C744((uint64_t)v3, _s10PredicatesOMa);
    goto LABEL_10;
  }
  sub_10001C744((uint64_t)v3, _s10PredicatesOMa);

  return v3;
}

uint64_t sub_10047F84C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[5];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD *__return_ptr))(a2 + 24))(v10);
  v5 = v11;
  v6 = v12;
  sub_10000A388(v10, v11);
  v9[3] = a1;
  v9[4] = a2;
  v7 = sub_1000087F0(v9);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v7, v2, a1);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 8))(v9, v5, v6);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v9);
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v10);
}

uint64_t sub_10047F8FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t);
  uint64_t v23;
  uint64_t result;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a1;
  v1 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for TimeZone(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator(0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v19 + 104))(v18, enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:));
  v20 = v12;
  v21 = v30;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v20);
  v22 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v23 = v32;
  v22(v11, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v31);
  TimeZone.init(secondsFromGMT:)(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v3, 1, v23);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v26 = v28;
    v25(v28, v3, v23);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)(v18, v15, v11, v7, 0, v26);
  }
  return result;
}

uint64_t sub_10047FB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084BEF8);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084BEF8);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10047FC00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  __n128 v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  void (*v56)(char *, uint64_t);
  os_log_t v57;
  uint64_t v58;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  os_log_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v2 = v1;
  v70 = a1;
  v3 = type metadata accessor for Date.ISO8601FormatStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v61 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v61 - v18;
  v20 = __chkstk_darwin(v17);
  v23 = (char *)&v61 - v22;
  v24 = *(double *)(v2 + 56);
  if (v24 <= 0.0)
    return static Date.distantPast.getter(v20);
  v66 = v4;
  v67 = v3;
  v69 = v21;
  v25 = *(_QWORD *)(v2 + 40);
  v26 = *(_QWORD *)(v2 + 48);
  v65 = (_QWORD *)(v2 + 16);
  sub_10000A388((_QWORD *)(v2 + 16), v25);
  v27 = sub_10047F84C(v25, v26);
  Optional<A>.orDistantPast.getter(v27);
  v28 = sub_1000EA320((uint64_t)v9);
  Date.addingTimeInterval(_:)(v28, v24);
  if (qword_1008375A0 != -1)
    swift_once(&qword_1008375A0, sub_10047FB70);
  v29 = type metadata accessor for Logger(0);
  sub_10001AAA8(v29, (uint64_t)qword_10084BEF8);
  v30 = v69;
  v31 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
  v31(v16, v23, v10);
  v68 = v19;
  v31(v13, v19, v10);
  v32 = swift_retain_n(v2, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.info.getter(v33);
  v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    v36 = swift_slowAlloc(32, -1);
    v63 = v33;
    v37 = v36;
    v64 = swift_slowAlloc(96, -1);
    v72 = v64;
    *(_DWORD *)v37 = 136446722;
    v61 = v37 + 4;
    v39 = *(_QWORD *)(v2 + 40);
    v38 = *(_QWORD *)(v2 + 48);
    sub_10000A388(v65, v39);
    v40 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 16);
    LODWORD(v65) = v35;
    v41 = v40(v39, v38);
    v43 = v42;
    v71 = sub_10001A820(v41, v42, &v72);
    v62 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v37 + 12) = 2082;
    v61 = v37 + 14;
    sub_10047F8FC((uint64_t)v6);
    v44 = Date.ISO8601Format(_:)(v6);
    v46 = v45;
    v47 = v67;
    v48 = *(void (**)(char *, uint64_t))(v66 + 8);
    v48(v6, v67);
    v71 = sub_10001A820(v44, v46, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
    v49 = swift_bridgeObjectRelease(v46);
    v66 = *(_QWORD *)(v69 + 8);
    ((void (*)(char *, uint64_t, __n128))v66)(v16, v10, v49);
    *(_WORD *)(v37 + 22) = 2082;
    v61 = v37 + 24;
    sub_10047F8FC((uint64_t)v6);
    v50 = v62;
    v51 = Date.ISO8601Format(_:)(v6);
    v53 = v52;
    v48(v6, v47);
    v71 = sub_10001A820(v51, v53, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
    v54 = v53;
    v30 = v69;
    v55 = swift_bridgeObjectRelease(v54);
    v56 = (void (*)(char *, uint64_t))v66;
    ((void (*)(char *, uint64_t, __n128))v66)(v50, v10, v55);
    v57 = v63;
    _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v65, "RDExecutionIntervalThrottlingPolicy: Calculating reset date {identifier: %{public}s, lastExecuted: %{public}s, result: %{public}s}", (uint8_t *)v37, 0x20u);
    v58 = v64;
    swift_arrayDestroy(v64, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    v56(v23, v10);
  }
  else
  {

    v60 = *(void (**)(char *, uint64_t))(v30 + 8);
    v60(v13, v10);
    v60(v16, v10);
    swift_release_n(v2, 2);
    v60(v23, v10);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v70, v68, v10);
}

uint64_t sub_1004800E4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  char *v29;
  Class isa;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, __n128);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - v7;
  static Date.now.getter(v9);
  v10 = v0 + 2;
  v11 = v0[5];
  v12 = v0[6];
  sub_10000A388(v0 + 2, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 24))(v49, v11, v12);
  v13 = v50;
  v14 = v51;
  sub_10000A388(v49, v50);
  (*(void (**)(_QWORD *, char *, uint64_t, uint64_t))(v14 + 16))(v0 + 2, v8, v13, v14);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v49);
  v15 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setDateFormat:", v16);

  if (qword_1008375A0 != -1)
    swift_once(&qword_1008375A0, sub_10047FB70);
  v17 = type metadata accessor for Logger(0);
  sub_10001AAA8(v17, (uint64_t)qword_10084BEF8);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  swift_retain_n(v1);
  v18 = v15;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v22 = swift_slowAlloc(22, -1);
    v43 = v5;
    v23 = v22;
    v47 = swift_slowAlloc(64, -1);
    v49[0] = v47;
    *(_DWORD *)v23 = 136446466;
    v45 = v3;
    v46 = v2;
    v24 = v1[5];
    v25 = v1[6];
    sub_10000A388(v10, v24);
    v26 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 16);
    v44 = v21;
    v27 = v26(v24, v25);
    v48 = sub_10001A820(v27, v28, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);
    swift_release_n(v1);
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    v29 = v43;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v31 = objc_msgSend(v18, "stringFromDate:", isa);

    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

    v48 = sub_10001A820(v32, v34, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);

    v35 = swift_bridgeObjectRelease();
    v36 = v46;
    v37 = *(void (**)(char *, uint64_t, __n128))(v45 + 8);
    v37(v29, v46, v35);
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v44, "RDExecutionIntervalThrottlingPolicy: Updated last executed date {identifier: %{public}s, date: %{public}s}", (uint8_t *)v23, 0x16u);
    v38 = v47;
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v39 = v8;
    v40 = v36;
  }
  else
  {

    v37 = *(void (**)(char *, uint64_t, __n128))(v3 + 8);
    ((void (*)(char *, uint64_t))v37)(v5, v2);

    swift_release_n(v1);
    v39 = v8;
    v40 = v2;
  }
  return ((uint64_t (*)(char *, uint64_t))v37)(v39, v40);
}

uint64_t sub_1004804B8()
{
  uint64_t v0;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for RDExecutionIntervalThrottlingPolicy()
{
  return objc_opt_self(_TtC7remindd35RDExecutionIntervalThrottlingPolicy);
}

uint64_t sub_1004804FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a3;
  v14 = a4;
  v9 = sub_1000087F0(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v9, a1, a3);
  v10 = swift_allocObject(a2, 64, 7);
  sub_10001BCA8(&v12, v10 + 16);
  *(double *)(v10 + 56) = a5;
  return v10;
}

uint64_t sub_100480584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084BFC0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084BFC0);
  if (qword_100837608 != -1)
    swift_once(&qword_100837608, sub_1004A17C8);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871FF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100480638(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t result;

  v8 = type metadata accessor for REMCDManualSortHint();
  v9 = a1;
  swift_bridgeObjectRetain(a3);
  v10 = a4;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "objectWithRecordID:accountID:context:", v9, v11, v10);

  if (v12)
  {
    result = swift_dynamicCastClass(v12, v4);
    if (result)
      return result;

  }
  return 0;
}

id sub_100480798(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MetatypeMetadata;
  uint64_t v20;
  unint64_t v21;
  double v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordID");
  v9 = objc_msgSend(v8, "recordName");

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "newObjectWithCKRecordName:context:account:", v9, a3, a2);

  if (v10)
  {
    v11 = objc_msgSend(a2, "ckIdentifier");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v10, "setAccount:", a2);
      objc_msgSend(v10, "mergeDataFromRecord:accountID:", a1, v12);

      objc_msgSend(v10, "setCkServerRecord:", a1);
      objc_msgSend(v10, "setInCloud:", 1);
      objc_msgSend(v10, "updateParentReferenceIfNecessary");
    }
    else
    {
      if (qword_1008375A8 != -1)
        swift_once(&qword_1008375A8, sub_100480584);
      v13 = type metadata accessor for Logger(0);
      sub_10001AAA8(v13, (uint64_t)qword_10084BFC0);
      v14 = a2;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(64, -1);
        v30 = v18;
        v31 = v4;
        *(_DWORD *)v17 = 136446466;
        MetatypeMetadata = swift_getMetatypeMetadata(v4);
        v20 = String.init<A>(describing:)(&v31, MetatypeMetadata);
        v31 = sub_10001A820(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
        *(_QWORD *)&v22 = swift_bridgeObjectRelease().n128_u64[0];
        *(_WORD *)(v17 + 12) = 2082;
        v23 = objc_msgSend(v14, "remObjectID", v22, v30);
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "description");

          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

        }
        else
        {
          v28 = 0xE300000000000000;
          v26 = 7104878;
        }
        v31 = sub_10001A820(v26, v28, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  return v10;
}

void sub_100480C04(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  objc_class *v30;
  id v31;
  NSString v32;
  double v33;
  NSString v34;
  double v35;
  _QWORD v36[2];
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  objc_super v51;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v42 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v36[0] = (char *)v36 - v7;
  v40 = sub_10001A630((uint64_t *)&unk_10083B370);
  __chkstk_darwin(v40);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v37);
  v36[1] = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v41 = (char *)v36 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)v36 - v14;
  __chkstk_darwin(v16);
  v43 = (char *)v36 - v17;
  __chkstk_darwin(v18);
  v49 = (char *)v36 - v19;
  __chkstk_darwin(v20);
  v45 = (char *)v36 - v21;
  __chkstk_darwin(v22);
  v39 = (char *)v36 - v23;
  __chkstk_darwin(v24);
  v46 = (char *)v36 - v25;
  v26 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v26);
  v27 = type metadata accessor for Date(0);
  __chkstk_darwin(v27);
  v48 = (char *)v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = String._bridgeToObjectiveC()();
  v30 = (objc_class *)type metadata accessor for REMCDManualSortHint();
  v51.receiver = v1;
  v51.super_class = v30;
  objc_msgSendSuper2(&v51, "mergeDataFromRecord:accountID:", a1, v29);

  v31 = objc_msgSend(a1, "recordID");
  v32 = objc_msgSend(v31, "recordName");

  if (!v32)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v32 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v33 = swift_bridgeObjectRelease().n128_u64[0];
  }
  v38 = v15;
  v44 = v9;
  v50 = v4;
  v34 = objc_msgSend(v2, "ckIdentifierFromRecordName:", v32, v33);

  if (!v34)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v34 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v35 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v2, "setCkIdentifier:", v34, v35);

  JUMPOUT(0x100480FDCLL);
}

uint64_t sub_100481B78()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  objc_class *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  const char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  objc_super v54;
  _BYTE v55[40];
  _QWORD v56[5];
  _QWORD v57[5];
  uint64_t v58[5];
  _QWORD v59[5];
  _OWORD v60[2];
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[3];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v41 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)v26 - v9;
  v11 = (objc_class *)type metadata accessor for REMCDManualSortHint();
  v54.receiver = v1;
  v54.super_class = v11;
  if (objc_msgSendSuper2(&v54, "newlyCreatedRecord"))
  {
    v44 = v3;
    v45 = v2;
    sub_10019CD04((uint64_t)v55);
    v48 = v1;
    v46 = v7;
    v43 = v10;
    sub_1000A5CA8((uint64_t)v55, (uint64_t)v60, (uint64_t *)&unk_1008458E0);
    if (*(_QWORD *)&v60[0])
    {
      v62 = v60[0];
      v63 = v60[1];
      v64 = v61;
      sub_1003A78C4(v56);
      v65 = v62;
      sub_1000F4320(&v65);
      v66 = *((_QWORD *)&v62 + 1);
      sub_1000F4320(&v66);
      v67 = v63;
      sub_1000F4320(&v67);
      v68 = *((_QWORD *)&v63 + 1);
      sub_1000F4320(&v68);
      v69 = v64;
      sub_1000F4320(&v69);
      sub_1003A7D2C(v57);
      v89[0] = v56[0];
      sub_1000F4320(v89);
      v88 = v56[1];
      sub_1000F4320(&v88);
      v87 = v56[2];
      sub_1000F4320(&v87);
      v86 = v56[3];
      sub_1000F4320(&v86);
      v85 = v56[4];
      sub_1000F4320(&v85);
      v16 = sub_1000F319C();
      v51 = v17;
      v18 = sub_10001A630((uint64_t *)&unk_10083A340);
      v19 = swift_allocObject(v18, 48, 7);
      v20 = v19;
      *(_OWORD *)(v19 + 16) = xmmword_1006A3C00;
      v21 = v19 + 32;
      if (qword_1008375C8 != -1)
        swift_once(&qword_1008375C8, sub_10048FC04);
      v22 = *(_QWORD *)algn_100871F68;
      *(_QWORD *)(v20 + 32) = qword_100871F60;
      *(_QWORD *)(v20 + 40) = v22;
      swift_bridgeObjectRetain(v22);
      v23 = sub_10011EE40(v20);
      swift_setDeallocating(v20);
      swift_arrayDestroy(v21, 1, &type metadata for String);
      swift_deallocClassInstance(v20, 32, 7);
      sub_10040ADF0(v23, v58);
      swift_bridgeObjectRelease();
      v84 = v57[0];
      sub_1000F4320(&v84);
      v83 = v57[1];
      sub_1000F4320(&v83);
      v82 = v57[2];
      sub_1000F4320(&v82);
      v81 = v57[3];
      sub_1000F4320(&v81);
      v80 = v57[4];
      sub_1000F4320(&v80);
      sub_1003A7D2C(v59);
      v79 = v58[0];
      sub_1000F4320(&v79);
      v78 = v58[1];
      sub_1000F4320(&v78);
      v77 = v58[2];
      sub_1000F4320(&v77);
      v76 = v58[3];
      sub_1000F4320(&v76);
      v75 = v58[4];
      sub_1000F4320(&v75);
      v24 = sub_1000F319C();
      v52 = v25;
      v74 = v59[0];
      sub_1000F4320(&v74);
      v73 = v59[1];
      sub_1000F4320(&v73);
      v72 = v59[2];
      sub_1000F4320(&v72);
      v71 = v59[3];
      sub_1000F4320(&v71);
      v70 = v59[4];
      sub_1000F4320(&v70);
      v12 = v24;
    }
    else
    {
      v12 = 0;
      v16 = 0;
      v51 = 0xF000000000000000;
      v52 = 0xF000000000000000;
    }
    v49 = v16;
    v50 = v12;
    v13 = __OFSUB__(HIDWORD(v12), (_DWORD)v12);
    v30 = v13;
    v28 = BYTE6(v52);
    v29 = HIDWORD(v12) - (int)v12;
    v14 = __OFSUB__(HIDWORD(v16), (_DWORD)v16);
    v27 = v14;
    v26[1] = HIDWORD(v16) - (int)v16;
    v26[0] = BYTE6(v51);
    v47 = v51 >> 60;
    v34 = "gRemindersInLocalAccountAsBytes";
    v33 = "aryAccountOnlyAsAsset";
    v39 = 0x80000001007054C0;
    v40 = 0x80000001007054F0;
    v35 = v52 >> 62;
    v36 = v51 >> 62;
    v42 = 0x8000000100705420;
    v31 = "SerializationVersion";
    v32 = "aryAccountOnlyAsBytes";
    v37 = 0x8000000100705440;
    v38 = 0x8000000100705480;
    JUMPOUT(0x100482378);
  }
  return 0;
}

void sub_100483100()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t ObjectType;
  uint64_t v11;

  if (qword_1008375A8 != -1)
    swift_once(&qword_1008375A8, sub_100480584);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084BFC0);
  v9 = v0;
  v2 = Logger.logObject.getter(v9);
  v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    ObjectType = swift_getObjectType();
    v6 = sub_10001A630((uint64_t *)&unk_10084BFD8);
    v7 = String.init<A>(describing:)(&ObjectType, v6);
    ObjectType = sub_10001A820(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v11);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
}

void sub_100483308(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  id v21;
  Class v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  id v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Class v65;
  id v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  Class v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  _QWORD v100[8];
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[40];
  _QWORD v107[5];
  uint64_t v108[3];
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD v121[2];
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD v143[3];

  v98 = a3;
  v97 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD **)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v81 - v13;
  sub_1000A70E4(a1, (unint64_t)a2);
  sub_1000F3CCC(a1, (unint64_t)a2, (uint64_t)&v101);
  v95 = a1;
  v96 = a2;
  v91 = v11;
  v92 = v14;
  v93 = v9;
  v94 = v8;
  v89 = v7;
  v90 = v5;
  v15 = v101;
  v16 = v102;
  v17 = v103;
  v18 = v104;
  v19 = v105;
  sub_10019CD04((uint64_t)v106);
  v86 = v18;
  v87 = v15;
  v88 = v16;
  sub_1000A5CA8((uint64_t)v106, (uint64_t)v121, (uint64_t *)&unk_1008458E0);
  if (!*(_QWORD *)&v121[0])
  {
    *(_QWORD *)&v123 = v87;
    sub_1000F4320(&v123);
    v116 = v88;
    sub_1000F4320(&v116);
    v111 = v17;
    sub_1000F4320(&v111);
    v108[0] = v86;
    sub_1000F4320(v108);
    v107[0] = v19;
    sub_1000F4320(v107);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v21 = v99;
    objc_msgSend(v99, "setETag:", isa);

    v22 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v21, "setHintData:", v22);

    objc_msgSend(v21, "setSerializationVersion:", 1);
    return;
  }
  v123 = v121[0];
  v124 = v121[1];
  v125 = v122;
  sub_1003A78C4(v107);
  v95 = v107[1];
  v96 = (_QWORD *)v107[0];
  v84 = v107[3];
  v85 = v107[2];
  v83 = v107[4];
  v23 = v93;
  v24 = v94;
  v26 = v91;
  v25 = v92;
  sub_10040D018((uint64_t *)&v101, 0, v108);
  v126 = v123;
  sub_1000F4320(&v126);
  v127 = *((_QWORD *)&v123 + 1);
  sub_1000F4320(&v127);
  v128 = v124;
  sub_1000F4320(&v128);
  v129 = *((_QWORD *)&v124 + 1);
  sub_1000F4320(&v129);
  v130 = v125;
  sub_1000F4320(&v130);
  v27 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  objc_msgSend(v27, "manualSortHintClientSideExpiration");
  v29 = v28;

  v31 = Date.init()(v30);
  Date.addingTimeInterval(_:)(v31, -v29);
  v32 = (uint64_t (*)(char *, uint64_t))v23[1];
  v33 = v32(v26, v24);
  v34 = Date.timeIntervalSinceReferenceDate.getter(v33);
  v32(v25, v24);
  v35 = v109;
  v36 = v110;
  v142 = v108[1];
  v143[0] = v108[0];
  v140 = v109;
  v141 = v108[2];
  sub_1000F4348(v143);
  sub_1000F4348(&v142);
  sub_1000F4348(&v141);
  sub_1000F4348(&v140);
  swift_bridgeObjectRetain(v36);
  sub_10040F228(v37, v35, v34);
  v39 = v38;
  sub_1000F4320(v143);
  sub_1000F4320(&v142);
  sub_1000F4320(&v141);
  sub_1000F4320(&v140);
  v40 = sub_10011EE40(v39);
  swift_bridgeObjectRelease();
  sub_10040ADF0(v40, (uint64_t *)&v111);
  swift_bridgeObjectRelease();
  sub_1000F4320(v143);
  sub_1000F4320(&v142);
  sub_1000F4320(&v141);
  sub_1000F4320(&v140);
  swift_bridgeObjectRelease();
  sub_1003A78C4(&v116);
  v82 = v17;
  v94 = v19;
  v41 = v116;
  v42 = v117;
  v44 = (uint64_t)v118;
  v43 = v119;
  v45 = v120;
  v46 = v96;
  if (!v96)
  {
    if (!v116)
    {
      v58 = 0;
      v53 = v119;
      v50 = v118;
      v48 = v117;
      goto LABEL_4;
    }
LABEL_14:
    v53 = v119;
    v50 = v118;
    v48 = v117;
    v59 = v94;
    sub_10048496C((uint64_t)v116, v117, (uint64_t)v118, v119, v120);
    sub_1001D8C44((uint64_t)v46, v95, v85, v84, v83);
    sub_1001D8C44((uint64_t)v41, v48, (uint64_t)v50, v53, v45);
    goto LABEL_15;
  }
  if (!v116)
    goto LABEL_14;
  LODWORD(v92) = sub_100305764(v96, v116);
  v93 = v41;
  v47 = v44;
  v48 = v42;
  v49 = v43;
  v50 = (_QWORD *)v47;
  sub_10048496C((uint64_t)v41, v42, v47, v49, v45);
  v51 = (uint64_t)v46;
  v52 = v95;
  sub_10048496C(v51, v95, v85, v84, v83);
  v53 = v49;
  v95 = v52;
  if ((v92 & 1) == 0
    || (sub_10040A5C4(v52, v42), (v54 & 1) == 0)
    || (sub_10040A830(v85, (uint64_t)v50), (v55 & 1) == 0)
    || (sub_10040AA4C(v84, v49), (v56 & 1) == 0))
  {
    v41 = v93;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001D8C44((uint64_t)v96, v52, v85, v84, v83);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59 = v94;
    goto LABEL_15;
  }
  v57 = v83;
  LODWORD(v92) = sub_1004F6374(v83, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = v93;
  swift_bridgeObjectRelease();
  sub_1001D8C44((uint64_t)v96, v52, v85, v84, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v58 = (uint64_t)v41;
  v59 = v94;
  if ((v92 & 1) != 0)
  {
LABEL_4:
    v100[0] = v111;
    sub_1000F4320(v100);
    v139 = v112;
    sub_1000F4320(&v139);
    v138 = (uint64_t)v113;
    sub_1000F4320(&v138);
    v137 = v114;
    sub_1000F4320(&v137);
    v136 = v115;
    sub_1000F4320(&v136);
    sub_1001D8C44(v58, v48, (uint64_t)v50, v53, v45);
    v135 = v101;
    sub_1000F4320(&v135);
    v134 = (uint64_t)v102;
    sub_1000F4320(&v134);
    v133 = v103;
    sub_1000F4320(&v133);
    v132 = v104;
    sub_1000F4320(&v132);
    v131 = v105;
    sub_1000F4320(&v131);
    return;
  }
LABEL_15:
  v60 = sub_1000F319C();
  v62 = v61;
  v96 = v50;
  v63 = v53;
  v64 = v45;
  v65 = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A71C8(v60, v62);
  v66 = v99;
  objc_msgSend(v99, "setHintData:", v65);

  objc_msgSend(v66, "setSerializationVersion:", 1);
  if (!v41)
  {
    sub_1001D8C44(0, v48, (uint64_t)v96, v63, v64);
    v73 = sub_1001D8C44((uint64_t)v87, (uint64_t)v88, (uint64_t)v82, v86, v59);
    v74 = v97;
    v75 = v90;
LABEL_30:
    v76 = v89;
    UUID.init()(v73);
    goto LABEL_31;
  }
  if ((sub_100305764(v41, v101) & 1) != 0)
  {
    v67 = (uint64_t)v102;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v48);
    v68 = v96;
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v64);
    sub_10040A5C4(v48, v67);
    if ((v69 & 1) != 0)
    {
      sub_10040A830((uint64_t)v68, (uint64_t)v103);
      if ((v70 & 1) != 0 && (sub_10040AA4C(v63, v104), (v71 & 1) != 0))
      {
        v72 = sub_1004F6374(v64, v105);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v72 = 0;
      }
      v68 = v96;
    }
    else
    {
      swift_bridgeObjectRelease();
      v72 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v48);
    v68 = v96;
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRelease();
    v72 = 0;
    v67 = (uint64_t)v102;
  }
  v100[0] = v67;
  sub_1000F4320(v100);
  v139 = (uint64_t)v103;
  sub_1000F4320(&v139);
  v138 = v104;
  sub_1000F4320(&v138);
  v137 = v105;
  sub_1000F4320(&v137);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v73 = sub_1001D8C44((uint64_t)v41, v48, (uint64_t)v68, v63, v64);
  v74 = v97;
  v75 = v90;
  if ((v72 & 1) == 0)
    goto LABEL_30;
  v76 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v89, v98, v97);
LABEL_31:
  v77 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v74);
  objc_msgSend(v99, "setETag:", v77);

  v136 = v115;
  swift_bridgeObjectRetain(v115);
  v79 = sub_10040E8AC(v78);
  sub_10023DC80(v79);
  v134 = v112;
  v135 = v113;
  v133 = v111;
  v80 = sub_10046218C(1, v111, v112, (uint64_t)v113);
  sub_1000F4320(&v133);
  sub_1000F4320(&v134);
  sub_1000F4320(&v135);
  v132 = v114;
  sub_1000F4320(&v132);
  sub_1000F4320(&v136);
  sub_10023DC94(v80);
}

uint64_t sub_1004845B0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008375A8 != -1)
    swift_once(&qword_1008375A8, sub_100480584);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084BFC0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630((uint64_t *)&unk_10084BFD8);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_10048476C()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t ObjectType;
  uint64_t v12;

  if (qword_1008375A8 != -1)
    swift_once(&qword_1008375A8, sub_100480584);
  v1 = type metadata accessor for Logger(0);
  sub_10001AAA8(v1, (uint64_t)qword_10084BFC0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    ObjectType = swift_getObjectType();
    v7 = sub_10001A630((uint64_t *)&unk_10084BFD8);
    v8 = String.init<A>(describing:)(&ObjectType, v7);
    ObjectType = sub_10001A820(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

unint64_t sub_100484928()
{
  unint64_t result;

  result = qword_10084BFF0;
  if (!qword_10084BFF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int16, &type metadata for Int16);
    atomic_store(result, (unint64_t *)&qword_10084BFF0);
  }
  return result;
}

uint64_t sub_10048496C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t sub_1004849C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1004849CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084C000);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084C000);
  if (qword_100837620 != -1)
    swift_once(&qword_100837620, sub_1004A181C);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100484B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  uint64_t v12;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v7 = *(void **)(v0 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter);
    objc_msgSend(v7, "setDelegate:", v0);
    objc_msgSend(v7, "setWantsNotificationResponsesDelivered");
    v8 = sub_1002430E0();
    sub_10011EEF4((uint64_t)v8);
    v10 = v9;
    swift_bridgeObjectRelease(v8);
    sub_1000151B0(0, &qword_1008440E0, UNNotificationCategory_ptr);
    sub_10048CE14();
    isa = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v7, "setNotificationCategories:", isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100484C98(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  v15 = (_QWORD *)swift_allocObject(&unk_1007F5B20, 48, 7);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_10048D018;
  v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F5B38;
  v16 = _Block_copy(aBlock);
  v17 = a1;
  v18 = a2;
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A630((uint64_t *)&unk_100838000);
  v22 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release(v28);
}

uint64_t sub_100484E94(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  id v36;
  uint64_t result;
  uint64_t v38;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (uint64_t *)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (char *)objc_msgSend(a1, "authorizationStatus", v8);
  if ((unint64_t)(v11 - 2) < 3)
  {
    v12 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
    *v10 = v12;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
    v13 = v12;
    LOBYTE(v12) = _dispatchPreconditionTest(_:)(v10);
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
    if ((v12 & 1) != 0)
    {
      v14 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter);
      return a3(v14);
    }
    __break(1u);
LABEL_25:
    swift_once(&qword_1008375B0, sub_1004849CC);
LABEL_7:
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001AAA8(v16, (uint64_t)qword_10084C000);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "User denied notification access", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
    *v10 = v21;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
    v22 = v21;
    LOBYTE(v21) = _dispatchPreconditionTest(_:)(v10);
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
    if ((v21 & 1) != 0)
      goto LABEL_22;
    __break(1u);
    goto LABEL_11;
  }
  v15 = &qword_100837000;
  if (v11)
  {
    if (v11 != (char *)1)
      goto LABEL_17;
    if (qword_1008375B0 == -1)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_11:
  if (v15[182] != -1)
    swift_once(&qword_1008375B0, sub_1004849CC);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001AAA8(v23, (uint64_t)qword_10084C000);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "User hasn't been prompted for notification access", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  v28 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *v10 = v28;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v29 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v28 & 1) != 0)
    goto LABEL_22;
  __break(1u);
LABEL_17:
  if (v15[182] != -1)
    swift_once(&qword_1008375B0, sub_1004849CC);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10001AAA8(v30, (uint64_t)qword_10084C000);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unknown notification authorization status", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  v35 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *v10 = v35;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v36 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v35 & 1) != 0)
  {
LABEL_22:
    v14 = 0;
    return a3(v14);
  }
  __break(1u);
  return result;
}

void RDUserNotificationCenter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("remindd.RDUserNotificationCenter", 32, "init()", 6, 0);
  __break(1u);
}

id RDUserNotificationCenter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDUserNotificationCenter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RDUserNotificationCenter()
{
  return objc_opt_self(_TtC7remindd24RDUserNotificationCenter);
}

uint64_t sub_1004853D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  char *v16;
  id v17;
  _QWORD v19[5];
  _QWORD *v20;

  v11 = (_QWORD *)swift_allocObject(&unk_1007F5A08, 64, 7);
  v11[2] = v5;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  v12 = *(void **)&v5[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
  v13 = (_QWORD *)swift_allocObject(&unk_1007F5A30, 40, 7);
  v13[2] = v5;
  v13[3] = sub_10048CF00;
  v13[4] = v11;
  v19[4] = sub_10048D1E8;
  v20 = v13;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_10042D6CC;
  v19[3] = &unk_1007F5A48;
  v14 = _Block_copy(v19);
  v15 = v20;
  v16 = v5;
  sub_1000E51CC(a4, a5);
  swift_bridgeObjectRetain(a2);
  v17 = a3;
  swift_retain(v11);
  swift_release(v15);
  objc_msgSend(v12, "getNotificationSettingsWithCompletionHandler:", v14);
  _Block_release(v14);
  return swift_release(v11);
}

void sub_10048551C(void *a1, char *a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  void *v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  char *v33;
  id v34;
  char *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t aBlock[5];
  _QWORD *v40;

  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char **)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v37 = a4;
    v36 = a1;
    swift_bridgeObjectRetain(a6);
    v18 = a7;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    v20 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:", v19, v18, 0);

    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_10084C000);
    v22 = swift_bridgeObjectRetain_n(a6, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v35 = a2;
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      aBlock[0] = v26;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain(a6);
      v38 = sub_10001A820(a5, a6, aBlock);
      a2 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, aBlock);
      swift_bridgeObjectRelease_n(a6, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Issuing: showNotification notificationCenter.add(request) {identifier: %{public}s}", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a6, 2);
    }
    v29 = (_QWORD *)swift_allocObject(&unk_1007F5A80, 40, 7);
    v29[2] = a2;
    v29[3] = a3;
    v30 = v37;
    v29[4] = v37;
    aBlock[4] = (uint64_t)sub_10048CF4C;
    v40 = v29;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000E18E4;
    aBlock[3] = (uint64_t)&unk_1007F5A98;
    v31 = _Block_copy(aBlock);
    v32 = v40;
    v33 = a2;
    sub_1000E51CC((uint64_t)a3, v30);
    swift_release(v32);
    v34 = v36;
    objc_msgSend(v36, "addNotificationRequest:withCompletionHandler:", v20, v31);
    _Block_release(v31);

  }
  else
  {
    v27 = *(void **)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    *v17 = v27;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
    v28 = v27;
    LOBYTE(v27) = _dispatchPreconditionTest(_:)(v17);
    (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
    if ((v27 & 1) != 0)
    {
      if (a3)
        a3(0);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1004858A8(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  char *v16;
  _QWORD aBlock[5];
  _QWORD *v18;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_QWORD *)((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)&v2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    v12 = *(void **)&v2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
    v13 = (_QWORD *)swift_allocObject(&unk_1007F5968, 40, 7);
    v13[2] = v2;
    v13[3] = a1;
    v13[4] = a2;
    aBlock[4] = sub_10048CE70;
    v18 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100485CEC;
    aBlock[3] = &unk_1007F5980;
    v14 = _Block_copy(aBlock);
    v15 = v18;
    v16 = v2;
    swift_retain();
    swift_release(v15);
    objc_msgSend(v12, "getDeliveredNotificationsWithCompletionHandler:", v14);
    _Block_release(v14);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100485A14(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  v15 = (_QWORD *)swift_allocObject(&unk_1007F59B8, 48, 7);
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = a1;
  aBlock[4] = sub_10048CEB0;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F59D0;
  v16 = _Block_copy(aBlock);
  v17 = a2;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v18);
  v25 = _swiftEmptyArrayStorage;
  v19 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A630((uint64_t *)&unk_100838000);
  v21 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v8, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release(v27);
}

uint64_t sub_100485C14(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t result;
  uint64_t v14;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(a1 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
    return a2(a4);
  __break(1u);
  return result;
}

double sub_100485CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_1000151B0(0, (unint64_t *)&unk_10084C0F0, UNNotification_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain();
  v4(v6);
  swift_release(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_100485D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  char *v20;
  _QWORD aBlock[5];
  _QWORD *v22;

  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (_QWORD *)((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)&v4[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9, v11);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) != 0)
  {
    v16 = *(void **)&v4[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
    v17 = (_QWORD *)swift_allocObject(&unk_1007F55F8, 56, 7);
    v17[2] = v4;
    v17[3] = a3;
    v17[4] = a4;
    v17[5] = a1;
    v17[6] = a2;
    aBlock[4] = sub_10048B788;
    v22 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100485CEC;
    aBlock[3] = &unk_1007F5610;
    v18 = _Block_copy(aBlock);
    v19 = v22;
    v20 = v4;
    swift_retain();
    swift_bridgeObjectRetain(a2);
    swift_release(v19);
    objc_msgSend(v16, "getDeliveredNotificationsWithCompletionHandler:", v18);
    _Block_release(v18);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100485EE0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  v18 = (_QWORD *)swift_allocObject(&unk_1007F5648, 64, 7);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a1;
  v18[6] = a5;
  v18[7] = a6;
  aBlock[4] = sub_10048B7D0;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F5660;
  v19 = _Block_copy(aBlock);
  v20 = a2;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a6);
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A630((uint64_t *)&unk_100838000);
  v24 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  return swift_release(v31);
}

void sub_1004860F0(uint64_t a1, void (*a2)(_QWORD *, __n128), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t v21;

  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(a1 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) != 0)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a4);
    v19 = sub_10048B7DC(v18, a5, a6);
    swift_bridgeObjectRelease();
    v20 = swift_bridgeObjectRelease();
    a2(v19, v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100486218()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[5];
  __int128 v11;
  __int128 v12;

  v1 = objc_msgSend(v0, "userInfo");
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v9[0] = 0xD000000000000025;
  v9[1] = 0x80000001007056B0;
  AnyHashable.init<A>(_:)(v10, v9, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_1002C6A88((uint64_t)v10), (v4 & 1) != 0))
  {
    sub_10001A670(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v11);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10020DA24((uint64_t)v10);
  if (!*((_QWORD *)&v12 + 1))
  {
    sub_10000882C((uint64_t)&v11, (uint64_t *)&unk_10083D5B0);
    goto LABEL_9;
  }
  v5 = sub_10001A630((uint64_t *)&unk_10083AE10);
  if (!swift_dynamicCast(v9, &v11, (char *)&type metadata for Any + 8, v5, 6))
  {
LABEL_9:
    v6 = _swiftEmptyArrayStorage;
    goto LABEL_10;
  }
  v6 = (_QWORD *)v9[0];
LABEL_10:
  v7 = sub_10011EE40((uint64_t)v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_100486364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  char *v30;
  id v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  _QWORD aBlock[5];
  _QWORD *v37;

  v33 = a6;
  v34 = a4;
  v35 = a5;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)&v8[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v19 & 1) != 0)
  {
    v22 = swift_allocObject(&unk_1007F5710, 81, 7);
    *(_QWORD *)(v22 + 16) = v8;
    *(_QWORD *)(v22 + 24) = a7;
    *(_QWORD *)(v22 + 32) = a8;
    *(_QWORD *)(v22 + 40) = a1;
    v23 = a2;
    *(_QWORD *)(v22 + 48) = a2;
    *(_QWORD *)(v22 + 56) = a3;
    v25 = v34;
    v24 = v35;
    *(_QWORD *)(v22 + 64) = v34;
    *(_QWORD *)(v22 + 72) = v24;
    *(_BYTE *)(v22 + 80) = v33 & 1;
    v26 = *(void **)&v8[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
    v27 = (_QWORD *)swift_allocObject(&unk_1007F5738, 40, 7);
    v27[2] = v8;
    v27[3] = sub_10048CBF0;
    v27[4] = v22;
    aBlock[4] = sub_10048D1E8;
    v37 = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10042D6CC;
    aBlock[3] = &unk_1007F5750;
    v28 = _Block_copy(aBlock);
    v29 = v37;
    v30 = v8;
    sub_1000E51CC(a7, a8);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    v31 = v24;
    swift_retain();
    swift_release(v29);
    objc_msgSend(v26, "getNotificationSettingsWithCompletionHandler:", v28);
    _Block_release(v28);
    return swift_release(v22);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10048655C(void *a1, char *a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10)
{
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  char *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v33 = a7;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (uint64_t *)((char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v22 = swift_allocObject(&unk_1007F5788, 89, 7);
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a5;
    v23 = a6;
    *(_QWORD *)(v22 + 32) = a6;
    *(_QWORD *)(v22 + 40) = a3;
    v24 = v33;
    *(_QWORD *)(v22 + 48) = a4;
    *(_QWORD *)(v22 + 56) = v24;
    *(_QWORD *)(v22 + 64) = a8;
    *(_QWORD *)(v22 + 72) = a9;
    *(_QWORD *)(v22 + 80) = a1;
    *(_BYTE *)(v22 + 88) = a10 & 1;
    aBlock[4] = sub_10048CC80;
    v35 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100485CEC;
    aBlock[3] = &unk_1007F57A0;
    v25 = _Block_copy(aBlock);
    v26 = v35;
    v27 = a1;
    v28 = a2;
    swift_bridgeObjectRetain(v23);
    sub_1000E51CC((uint64_t)a3, a4);
    swift_bridgeObjectRetain(a8);
    v29 = a9;
    swift_release(v26);
    objc_msgSend(v27, "getDeliveredNotificationsWithCompletionHandler:", v25);
    _Block_release(v25);

  }
  else
  {
    v30 = *(void **)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    *v21 = v30;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17, v19);
    v31 = v30;
    LOBYTE(v30) = _dispatchPreconditionTest(_:)(v21);
    (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
    if ((v30 & 1) != 0)
    {
      if (a3)
        a3(0);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100486744(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, unsigned __int8 a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE v34[12];
  int v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[5];
  uint64_t v45;

  v36 = a7;
  v35 = a11;
  v38 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v37 = &v34[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v19 - 8);
  v41 = v19;
  __chkstk_darwin(v19);
  v21 = &v34[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v39 = *(_QWORD *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  v22 = swift_allocObject(&unk_1007F57D8, 97, 7);
  *(_QWORD *)(v22 + 16) = a3;
  *(_QWORD *)(v22 + 24) = a4;
  *(_QWORD *)(v22 + 32) = a1;
  *(_QWORD *)(v22 + 40) = a5;
  v23 = v36;
  *(_QWORD *)(v22 + 48) = a6;
  *(_QWORD *)(v22 + 56) = v23;
  v24 = a8;
  *(_QWORD *)(v22 + 64) = a8;
  *(_QWORD *)(v22 + 72) = a9;
  *(_QWORD *)(v22 + 80) = a2;
  *(_QWORD *)(v22 + 88) = a10;
  *(_BYTE *)(v22 + 96) = v35;
  aBlock[4] = sub_10048CD18;
  v45 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F57F0;
  v25 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a1);
  sub_1000E51CC(a5, a6);
  swift_bridgeObjectRetain(v24);
  v26 = a9;
  v27 = a2;
  static DispatchQoS.unspecified.getter(a10);
  v43 = _swiftEmptyArrayStorage;
  v28 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_10001A630((uint64_t *)&unk_100838000);
  v30 = sub_1000D316C();
  v31 = v37;
  v32 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v29, v30, v38, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v31, v25);
  _Block_release(v25);
  (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v31, v32);
  (*(void (**)(_BYTE *, uint64_t))(v40 + 8))(v21, v41);
  return swift_release(v45);
}

void sub_10048699C(uint64_t a1, unint64_t a2, int64_t a3, void (*a4)(_QWORD), uint64_t a5, NSObject *a6, uint64_t a7, void *a8, char *a9, void *a10, char a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint8_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  os_log_t v59;
  void **v60;
  NSObject *v61;
  double v62;
  id v63;
  NSObject *v64;
  id v65;
  id v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t inited;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  os_log_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  BOOL v94;
  uint8_t *v95;
  void **v96;
  NSObject *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  void ***v101;
  id v102;
  void **v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  char v107;
  id v108;
  uint64_t v109;
  char v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  id v131;
  void *v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  id v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char v147;
  void (*v148)(char *, uint64_t);
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  NSObject *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t (*v165)(char *, uint64_t, uint64_t);
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  os_log_type_t v171;
  uint8_t *v172;
  void **v173;
  char *v174;
  uint64_t v175;
  NSObject *v176;
  os_log_type_t v177;
  uint8_t *v178;
  void **v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  uint8_t *v184;
  void **v185;
  void *v186;
  void *v187;
  _QWORD *v188;
  uint64_t v189;
  void *v190;
  _QWORD *v191;
  id v192;
  char v193;
  uint64_t v194;
  NSObject *v195;
  os_log_type_t v196;
  uint8_t *v197;
  void **v198;
  id v199;
  NSString v200;
  id v201;
  NSObject *v202;
  os_log_type_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  NSObject *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  NSObject *v217;
  void **v218;
  void *v219;
  _QWORD *v220;
  void *v221;
  uint64_t v222;
  _QWORD *v223;
  id v224;
  uint64_t v225;
  void (*v226)(char *, uint64_t);
  uint64_t v227;
  NSObject *v228;
  os_log_type_t v229;
  uint8_t *v230;
  void **v231;
  __n128 v232;
  void (*v233)(_QWORD);
  void *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  id v238;
  char *v239;
  __n128 v240;
  void (*v241)(char *, uint64_t, __n128);
  uint64_t v242;
  uint64_t v243;
  void **v244;
  uint64_t v245;
  os_log_t v246;
  char *v247;
  char *v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  NSObject *v265;
  uint64_t v266;
  uint64_t v267;
  void (*v268)(_QWORD);
  void **v269;
  id v270;
  char v271[40];
  void **aBlock;
  uint64_t v273;
  void (*v274)(uint64_t, void *);
  void *v275;
  uint64_t (*v276)(uint64_t);
  _QWORD *v277;
  _QWORD *v278;
  char v279[8];

  v270 = a8;
  v265 = a6;
  v266 = a7;
  v251 = type metadata accessor for DispatchPredicate(0);
  v250 = *(_QWORD *)(v251 - 8);
  __chkstk_darwin(v251);
  v249 = (void ***)((char *)&v244 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v263 = type metadata accessor for Date(0);
  v264 = *(_QWORD *)(v263 - 8);
  __chkstk_darwin(v263);
  v248 = (char *)&v244 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v252 = (char *)&v244 - v19;
  __chkstk_darwin(v20);
  v247 = (char *)&v244 - v21;
  v253 = sub_10001A630((uint64_t *)&unk_10084C100);
  __chkstk_darwin(v253);
  v255 = (char *)&v244 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v23);
  v25 = (char *)&v244 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v256 = (char *)&v244 - v27;
  __chkstk_darwin(v28);
  v254 = (char *)&v244 - v29;
  __chkstk_darwin(v30);
  v261 = (uint64_t)&v244 - v31;
  __chkstk_darwin(v32);
  v258 = (uint64_t)&v244 - v33;
  if (qword_1008375B0 != -1)
    swift_once(&qword_1008375B0, sub_1004849CC);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10001AAA8(v34, (uint64_t)qword_10084C000);
  swift_bridgeObjectRetain_n(a2, 2);
  v36 = swift_bridgeObjectRetain_n(a3, 2);
  v269 = (void **)v35;
  v37 = Logger.logObject.getter(v36);
  LODWORD(v262) = static os_log_type_t.default.getter(v37);
  v38 = os_log_type_enabled(v37, (os_log_type_t)v262);
  v267 = a5;
  v268 = a4;
  v257 = v25;
  if (v38)
  {
    v39 = swift_slowAlloc(22, -1);
    v244 = (void **)swift_slowAlloc(64, -1);
    aBlock = v244;
    *(_DWORD *)v39 = 136315394;
    swift_bridgeObjectRetain(a2);
    v278 = (_QWORD *)sub_10001A820(a1, a2, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
    v259 = (void *)a2;
    swift_bridgeObjectRelease_n(a2, 3);
    v245 = v39;
    *(_WORD *)(v39 + 12) = 2080;
    v246 = v37;
    if ((unint64_t)a3 >> 62)
    {
      if (a3 < 0)
        v243 = a3;
      else
        v243 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v40 = _CocoaArrayWrapper.endIndex.getter(v243);
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v41 = _swiftEmptyArrayStorage;
    if (v40)
    {
      v278 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v40 & ~(v40 >> 63), 0);
      if (v40 < 0)
      {
        __break(1u);
        goto LABEL_108;
      }
      v260 = a1;
      v42 = 0;
      v41 = v278;
      v43 = a3 & 0xC000000000000001;
      v44 = a3;
      do
      {
        if (v43)
          v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, a3);
        else
          v45 = *(id *)(a3 + 8 * v42 + 32);
        v46 = v45;
        v47 = objc_msgSend(v45, "request");
        v48 = objc_msgSend(v47, "identifier");

        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        v51 = v50;

        v278 = v41;
        v53 = v41[2];
        v52 = v41[3];
        if (v53 >= v52 >> 1)
        {
          sub_1001C1B0C(v52 > 1, v53 + 1, 1);
          v41 = v278;
        }
        ++v42;
        v41[2] = v53 + 1;
        v54 = &v41[2 * v53];
        v54[4] = v49;
        v54[5] = v51;
        a3 = v44;
      }
      while (v40 != v42);
      a5 = v267;
      a1 = v260;
    }
    v55 = (uint8_t *)v245;
    v56 = Array.description.getter(v41, &type metadata for String);
    v58 = v57;
    swift_bridgeObjectRelease();
    v278 = (_QWORD *)sub_10001A820(v56, v58, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease();
    v59 = v246;
    _os_log_impl((void *)&_mh_execute_header, v246, (os_log_type_t)v262, "Determine useReplaceInsteadOfAdd {identifier: %s, deliveredNotifications: %s}", v55, 0x16u);
    v60 = v244;
    swift_arrayDestroy(v244, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    a2 = (unint64_t)v259;
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_bridgeObjectRetain(a2);
  v61 = sub_10048B978(a3, a1, a2);
  *(_QWORD *)&v62 = swift_bridgeObjectRelease().n128_u64[0];
  if (!v61)
  {
    v91 = swift_bridgeObjectRetain_n(a2, 2);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.default.getter(v92);
    v94 = os_log_type_enabled(v92, v93);
    v262 = a9;
    v259 = a10;
    if (v94)
    {
      v95 = (uint8_t *)swift_slowAlloc(12, -1);
      v96 = (void **)swift_slowAlloc(32, -1);
      aBlock = v96;
      *(_DWORD *)v95 = 136446210;
      swift_bridgeObjectRetain(a2);
      v278 = (_QWORD *)sub_10001A820(a1, a2, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Strategy: no existing notification {identifier: %{public}s, useReplaceInsteadOfAdd: false}", v95, 0xCu);
      swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v95, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v278 = (_QWORD *)sub_100486218();
    v105 = v266;
    swift_bridgeObjectRetain(v266);
    sub_1002DB0E4((uint64_t *)&aBlock, (uint64_t)v265, v105);
    swift_bridgeObjectRelease();
    sub_100488624((uint64_t)v278);
    *(_QWORD *)&v106 = swift_bridgeObjectRelease().n128_u64[0];
    v107 = a11;
    if ((a11 & 1) == 0)
      goto LABEL_83;
    goto LABEL_29;
  }
  v63 = -[NSObject request](v61, "request", v62);
  v64 = v61;
  v65 = objc_msgSend(v63, "content");

  v66 = objc_msgSend(v65, "mutableCopy");
  _bridgeAnyObjectToAny(_:)(&aBlock, v66);
  swift_unknownObjectRelease(v66);
  v67 = sub_1000151B0(0, (unint64_t *)&unk_10084C110, UNMutableNotificationContent_ptr);
  if ((swift_dynamicCast(&v278, &aBlock, (char *)&type metadata for Any + 8, v67, 6) & 1) == 0)
  {
    v97 = v64;
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc(12, -1);
      v101 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v100 = 138412290;
      v102 = -[NSObject request](v97, "request");
      v103 = (void **)objc_msgSend(v102, "content");

      aBlock = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v273);
      *v101 = v103;

      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Unable to get UNMutableNotificationContent from UNNotificationContent {notification: %@}", v100, 0xCu);
      v104 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v101, 1, v104);
      swift_slowDealloc(v101, -1, -1);
      swift_slowDealloc(v100, -1, -1);
    }
    else
    {

      v98 = v97;
    }
    v89 = v97;

    if (v268)
      v268(0);
    goto LABEL_92;
  }
  v246 = v64;
  v259 = a10;
  v262 = a9;
  v260 = a1;
  v68 = v278;
  v69 = sub_100486218();

  v71 = v265;
  v70 = v266;
  LODWORD(v245) = sub_1001B2278((uint64_t)v265, v266, v69);
  v72 = v270;
  v73 = sub_100486218();
  sub_10059E118(v69, v73);
  v75 = v74;
  v76 = sub_10001A630((uint64_t *)&unk_10083A340);
  inited = swift_initStackObject(v76, v271);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = v71;
  *(_QWORD *)(inited + 40) = v70;
  swift_bridgeObjectRetain(v70);
  v78 = sub_10011EE40(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  sub_10059E118(v78, v75);
  v266 = v79;
  v80 = objc_msgSend(v72, "title");
  v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
  v83 = v82;

  v84 = objc_msgSend(v68, "title");
  v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
  v87 = v86;

  if (v81 == v85 && v83 == v87)
  {
    v88 = swift_bridgeObjectRelease_n(v83, 2).n128_u64[0];
    v89 = v246;
    v90 = v261;
  }
  else
  {
    v110 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v83, v85, v87, 0);
    swift_bridgeObjectRelease();
    v88 = swift_bridgeObjectRelease().n128_u64[0];
    v89 = v246;
    v90 = v261;
    if ((v110 & 1) == 0)
      goto LABEL_59;
  }
  v111 = objc_msgSend(v270, "subtitle", *(double *)&v88);
  v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
  v114 = v113;

  v115 = objc_msgSend(v68, "subtitle");
  v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
  v118 = v117;

  if (v112 == v116 && v114 == v118)
  {
    v119 = swift_bridgeObjectRelease_n(v114, 2).n128_u64[0];
  }
  else
  {
    v120 = _stringCompareWithSmolCheck(_:_:expecting:)(v112, v114, v116, v118, 0);
    swift_bridgeObjectRelease();
    v119 = swift_bridgeObjectRelease().n128_u64[0];
    if ((v120 & 1) == 0)
      goto LABEL_59;
  }
  v121 = objc_msgSend(v270, "body", *(double *)&v119);
  v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
  v124 = v123;

  v125 = objc_msgSend(v68, "body");
  v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
  v128 = v127;

  if (v122 == v126 && v124 == v128)
  {
    v129 = swift_bridgeObjectRelease_n(v124, 2).n128_u64[0];
    goto LABEL_42;
  }
  v130 = _stringCompareWithSmolCheck(_:_:expecting:)(v122, v124, v126, v128, 0);
  swift_bridgeObjectRelease();
  v129 = swift_bridgeObjectRelease().n128_u64[0];
  if ((v130 & 1) == 0)
  {
LABEL_59:
    if ((v245 & 1) == 0)
      goto LABEL_78;
    v157 = 1;
    goto LABEL_61;
  }
LABEL_42:
  v131 = objc_msgSend(v270, "date", *(double *)&v129);
  if (v131)
  {
    v132 = v131;
    v133 = v258;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v131);

    v134 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v264 + 56);
    v134(v133, 0, 1, v263);
  }
  else
  {
    v134 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v264 + 56);
    v133 = v258;
    v134(v258, 1, 1, v263);
  }
  v135 = (uint64_t)v255;
  v136 = (uint64_t)v254;
  v137 = objc_msgSend(v68, "date");
  if (v137)
  {
    v138 = v137;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v137);

    v139 = 0;
  }
  else
  {
    v139 = 1;
  }
  v140 = v263;
  v134(v90, v139, 1, v263);
  v141 = v140;
  v142 = v135 + *(int *)(v253 + 48);
  sub_1000CDA2C(v133, v135);
  sub_1000CDA2C(v90, v142);
  v143 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v264 + 48);
  if (v143(v135, 1, v141) == 1)
  {
    sub_10000882C(v90, (uint64_t *)&unk_1008380D0);
    sub_10000882C(v133, (uint64_t *)&unk_1008380D0);
    if (v143(v142, 1, v141) == 1)
    {
      sub_10000882C(v135, (uint64_t *)&unk_1008380D0);
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  sub_1000CDA2C(v135, v136);
  if (v143(v142, 1, v141) == 1)
  {
    sub_10000882C(v90, (uint64_t *)&unk_1008380D0);
    sub_10000882C(v133, (uint64_t *)&unk_1008380D0);
    (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v136, v141);
LABEL_53:
    sub_10000882C(v135, (uint64_t *)&unk_10084C100);
    goto LABEL_59;
  }
  v144 = v264;
  v145 = v247;
  (*(void (**)(char *, uint64_t, uint64_t))(v264 + 32))(v247, v142, v141);
  v146 = sub_10009FC50((unint64_t *)&qword_100839DB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v147 = dispatch thunk of static Equatable.== infix(_:_:)(v136, v145, v141, v146);
  v148 = *(void (**)(char *, uint64_t))(v144 + 8);
  v148(v145, v141);
  sub_10000882C(v261, (uint64_t *)&unk_1008380D0);
  sub_10000882C(v258, (uint64_t *)&unk_1008380D0);
  v148((char *)v136, v141);
  sub_10000882C(v135, (uint64_t *)&unk_1008380D0);
  if ((v147 & 1) == 0)
    goto LABEL_59;
LABEL_55:
  v149 = objc_msgSend(v270, "categoryIdentifier");
  v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
  v152 = v151;

  v153 = objc_msgSend(v68, "categoryIdentifier");
  v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
  v156 = v155;

  if (v150 == v154 && v152 == v156)
  {
    swift_bridgeObjectRelease_n(v152, 2);
    if ((v245 & 1) != 0)
    {
      v157 = 0;
      goto LABEL_61;
    }
LABEL_78:
    v194 = swift_bridgeObjectRetain_n(a2, 2);
    v195 = Logger.logObject.getter(v194);
    v196 = static os_log_type_t.default.getter(v195);
    if (os_log_type_enabled(v195, v196))
    {
      v197 = (uint8_t *)swift_slowAlloc(12, -1);
      v198 = (void **)swift_slowAlloc(32, -1);
      aBlock = v198;
      *(_DWORD *)v197 = 136446210;
      swift_bridgeObjectRetain(a2);
      v278 = (_QWORD *)sub_10001A820(v260, a2, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v195, v196, "Strategy: !alreadyRetained {identifier: %{public}s, useReplaceInsteadOfAdd: false}", v197, 0xCu);
      swift_arrayDestroy(v198, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v198, -1, -1);
      swift_slowDealloc(v197, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    a5 = v267;
    sub_100488624(v266);
    swift_bridgeObjectRelease();

    goto LABEL_82;
  }
  v193 = _stringCompareWithSmolCheck(_:_:expecting:)(v150, v152, v154, v156, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v245 & 1) == 0)
    goto LABEL_78;
  v157 = v193 ^ 1;
LABEL_61:
  v158 = v68;
  v159 = (uint64_t)v256;
  ((void (*)(void))UNNotificationContent.lastRecurringFireDate.getter)();
  v265 = v158;

  v160 = v264;
  v161 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v264 + 48);
  v162 = v263;
  v163 = v161(v159, 1, v263);
  v164 = (uint64_t)v257;
  if (v163 != 1)
  {
    v165 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v160 + 32);
    v166 = v252;
    v167 = v165(v252, v159, v162);
    UNNotificationContent.lastRecurringFireDate.getter(v167);
    v168 = v263;
    if (v161(v164, 1, v263) == 1)
    {
      (*(void (**)(char *, uint64_t))(v160 + 8))(v166, v168);
      sub_10000882C(v164, (uint64_t *)&unk_1008380D0);
      if ((v157 & 1) == 0)
        goto LABEL_94;
      goto LABEL_66;
    }
    v174 = v248;
    v165(v248, v164, v168);
    if ((static Date.> infix(_:_:)(v174, v166) & 1) == 0)
    {
      v225 = v168;
      v226 = *(void (**)(char *, uint64_t))(v264 + 8);
      v226(v174, v225);
      v226(v166, v225);
      if ((v157 & 1) == 0)
        goto LABEL_94;
      goto LABEL_66;
    }
    v175 = swift_bridgeObjectRetain_n(a2, 2);
    v176 = Logger.logObject.getter(v175);
    v177 = static os_log_type_t.default.getter(v176);
    if (os_log_type_enabled(v176, v177))
    {
      v178 = (uint8_t *)swift_slowAlloc(12, -1);
      v179 = (void **)swift_slowAlloc(32, -1);
      aBlock = v179;
      *(_DWORD *)v178 = 136446210;
      swift_bridgeObjectRetain(a2);
      v278 = (_QWORD *)sub_10001A820(v260, a2, (uint64_t *)&aBlock);
      v174 = v248;
      v89 = v246;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v176, v177, "Strategy: alreadyRetained && recurring reminder {identifier: %{public}s, useReplaceInsteadOfAdd: false}", v178, 0xCu);
      swift_arrayDestroy(v179, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v179, -1, -1);
      swift_slowDealloc(v178, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    a5 = v267;
    v239 = v252;
    sub_100488624(v266);

    v240 = swift_bridgeObjectRelease();
    v241 = *(void (**)(char *, uint64_t, __n128))(v264 + 8);
    v242 = v263;
    v241(v174, v263, v240);
    ((void (*)(char *, uint64_t))v241)(v239, v242);
LABEL_82:
    a1 = v260;
    v107 = a11;
    if ((a11 & 1) == 0)
    {
LABEL_83:
      v109 = 15;
      v108 = v270;
      goto LABEL_84;
    }
LABEL_29:
    v108 = v270;
    objc_msgSend(v270, "setSound:", 0, v106);
    v109 = 6;
LABEL_84:
    swift_bridgeObjectRetain(a2);
    v199 = v108;
    v200 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v89 = (os_log_t)objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:destinations:", v200, v199, 0, v109);

    swift_bridgeObjectRetain_n(a2, 2);
    v201 = v199;
    v202 = Logger.logObject.getter(v201);
    v203 = static os_log_type_t.default.getter(v202);
    v204 = v203;
    if (os_log_type_enabled(v202, v203))
    {
      v205 = swift_slowAlloc(32, -1);
      LODWORD(v270) = v204;
      v206 = v205;
      v269 = (void **)swift_slowAlloc(96, -1);
      aBlock = v269;
      *(_DWORD *)v206 = 136446722;
      swift_bridgeObjectRetain(a2);
      v278 = (_QWORD *)sub_10001A820(a1, a2, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v206 + 12) = 2082;
      if ((v107 & 1) != 0)
        v207 = 89;
      else
        v207 = 78;
      v278 = (_QWORD *)sub_10001A820(v207, 0xE100000000000000, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
      *(_QWORD *)&v208 = swift_bridgeObjectRelease().n128_u64[0];
      *(_WORD *)(v206 + 22) = 2080;
      v266 = v206 + 24;
      v209 = a5;
      v210 = objc_msgSend(v201, "userInfo", v208);
      v211 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v210, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v265 = v202;
      v212 = v89;
      v213 = v211;

      a5 = v209;
      v214 = Dictionary.description.getter(v213, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v216 = v215;
      v89 = v212;
      swift_bridgeObjectRelease();
      v278 = (_QWORD *)sub_10001A820(v214, v216, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);

      swift_bridgeObjectRelease();
      v217 = v265;
      _os_log_impl((void *)&_mh_execute_header, v265, (os_log_type_t)v270, "Issuing: notificationCenter.add(request) {identifier: %{public}s, skipBanner: %{public}s, userInfo: %s}", (uint8_t *)v206, 0x20u);
      v218 = v269;
      swift_arrayDestroy(v269, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v218, -1, -1);
      swift_slowDealloc(v206, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v219 = v259;
    v220 = (_QWORD *)swift_allocObject(&unk_1007F5828, 40, 7);
    v221 = v262;
    v222 = (uint64_t)v268;
    v220[2] = v262;
    v220[3] = v222;
    v220[4] = a5;
    v276 = sub_10048CD58;
    v277 = v220;
    aBlock = _NSConcreteStackBlock;
    v273 = 1107296256;
    v274 = sub_1000E18E4;
    v275 = &unk_1007F5840;
    v190 = _Block_copy(&aBlock);
    v223 = v277;
    v224 = v221;
    sub_1000E51CC(v222, a5);
    swift_release(v223);
    objc_msgSend(v219, "addNotificationRequest:withCompletionHandler:", v89, v190);
    goto LABEL_91;
  }
  sub_10000882C(v159, (uint64_t *)&unk_1008380D0);
  if ((v157 & 1) != 0)
  {
LABEL_66:
    v169 = swift_bridgeObjectRetain_n(a2, 2);
    v170 = Logger.logObject.getter(v169);
    v171 = static os_log_type_t.default.getter(v170);
    if (os_log_type_enabled(v170, v171))
    {
      v172 = (uint8_t *)swift_slowAlloc(12, -1);
      v173 = (void **)swift_slowAlloc(32, -1);
      aBlock = v173;
      *(_DWORD *)v172 = 136446210;
      swift_bridgeObjectRetain(a2);
      v278 = (_QWORD *)sub_10001A820(v260, a2, (uint64_t *)&aBlock);
      v89 = v246;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v170, v171, "Strategy: alreadyRetained && contentChanged {identifier: %{public}s, useReplaceInsteadOfAdd: true}", v172, 0xCu);
      swift_arrayDestroy(v173, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v173, -1, -1);
      swift_slowDealloc(v172, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v180 = v267;
    sub_100488624(v266);
    swift_bridgeObjectRelease();

    v181 = swift_bridgeObjectRetain_n(a2, 2);
    v182 = Logger.logObject.getter(v181);
    v183 = static os_log_type_t.default.getter(v182);
    if (os_log_type_enabled(v182, v183))
    {
      v184 = (uint8_t *)swift_slowAlloc(12, -1);
      v185 = (void **)swift_slowAlloc(32, -1);
      aBlock = v185;
      *(_DWORD *)v184 = 136446210;
      swift_bridgeObjectRetain(a2);
      v278 = (_QWORD *)sub_10001A820(v260, a2, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v182, v183, "Issuing: replaceContentForRequest() {identifier: %{public}s}", v184, 0xCu);
      swift_arrayDestroy(v185, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v185, -1, -1);
      swift_slowDealloc(v184, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v186 = v262;
    v187 = v259;
    v89 = (os_log_t)String._bridgeToObjectiveC()();
    v188 = (_QWORD *)swift_allocObject(&unk_1007F5878, 40, 7);
    v189 = (uint64_t)v268;
    v188[2] = v186;
    v188[3] = v189;
    v188[4] = v180;
    v276 = sub_10048CD90;
    v277 = v188;
    aBlock = _NSConcreteStackBlock;
    v273 = 1107296256;
    v274 = sub_1000E18E4;
    v275 = &unk_1007F5890;
    v190 = _Block_copy(&aBlock);
    v191 = v277;
    v192 = v186;
    sub_1000E51CC(v189, v180);
    swift_release(v191);
    objc_msgSend(v187, "replaceContentForRequestWithIdentifier:replacementContent:completionHandler:", v89, v270, v190);
LABEL_91:
    _Block_release(v190);
LABEL_92:

    return;
  }
LABEL_94:
  swift_bridgeObjectRelease();
  v227 = swift_bridgeObjectRetain_n(a2, 2);
  v228 = Logger.logObject.getter(v227);
  v229 = static os_log_type_t.default.getter(v228);
  if (os_log_type_enabled(v228, v229))
  {
    v230 = (uint8_t *)swift_slowAlloc(12, -1);
    v231 = (void **)swift_slowAlloc(32, -1);
    aBlock = v231;
    *(_DWORD *)v230 = 136446210;
    swift_bridgeObjectRetain(a2);
    v278 = (_QWORD *)sub_10001A820(v260, a2, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v278, v279);
    v89 = v246;
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v228, v229, "Strategy: alreadyRetained && !contentChanged, nothing to do {identifier: %{public}s}", v230, 0xCu);
    swift_arrayDestroy(v231, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v231, -1, -1);
    swift_slowDealloc(v230, -1, -1);

  }
  else
  {

    v232 = swift_bridgeObjectRelease_n(a2, 2);
  }
  v233 = v268;
  v234 = *(void **)&v262[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  v235 = v249;
  *v249 = v234;
  v236 = v250;
  v237 = v251;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v250 + 104))(v235, enum case for DispatchPredicate.onQueue(_:), v251, v232);
  v238 = v234;
  LOBYTE(v234) = _dispatchPreconditionTest(_:)(v235);
  (*(void (**)(_QWORD *, uint64_t))(v236 + 8))(v235, v237);
  if ((v234 & 1) != 0)
  {
    if (v233)
      v233(0);

    goto LABEL_92;
  }
LABEL_108:
  __break(1u);
}

void sub_100488624(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  _OWORD v11[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[5];

  v2 = v1;
  *(_QWORD *)&v13 = 0xD000000000000025;
  *((_QWORD *)&v13 + 1) = 0x80000001007056B0;
  AnyHashable.init<A>(_:)(v15, &v13, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRetain(a1);
  v5 = sub_1001E8BAC(v4);
  swift_bridgeObjectRelease();
  v6 = sub_10001A630((uint64_t *)&unk_10083AE10);
  v14 = v6;
  *(_QWORD *)&v13 = v5;
  v7 = objc_msgSend(v2, "userInfo");
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v12 = v8;
  if (v6)
  {
    sub_10001A6CC(&v13, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    sub_10028C16C(v11, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_10020DA24((uint64_t)v15);
  }
  else
  {
    sub_10000882C((uint64_t)&v13, (uint64_t *)&unk_10083D5B0);
    sub_1002CB0A0((uint64_t)v15, v11);
    sub_10020DA24((uint64_t)v15);
    sub_10000882C((uint64_t)v11, (uint64_t *)&unk_10083D5B0);
  }
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setUserInfo:", isa, swift_bridgeObjectRelease().n128_f64[0]);

}

uint64_t sub_1004887D0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v17 - 8);
  v30 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  v20 = (_QWORD *)swift_allocObject(a5, 48, 7);
  v20[2] = a1;
  v20[3] = a2;
  v20[4] = a3;
  v20[5] = a4;
  aBlock[4] = a6;
  v34 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = a7;
  v21 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  v22 = a2;
  v23 = sub_1000E51CC(a3, a4);
  static DispatchQoS.unspecified.getter(v23);
  v32 = _swiftEmptyArrayStorage;
  v24 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A630((uint64_t *)&unk_100838000);
  v26 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v25, v26, v14, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v16, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v30);
  return swift_release(v34);
}

uint64_t sub_1004889C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, const char *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  id v23;
  uint64_t result;
  _QWORD v25[2];
  uint64_t (*v26)(_QWORD);
  const char *v27;
  _QWORD v28[3];
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;

  v27 = a5;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (_QWORD *)((char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1008375B0 != -1)
    swift_once(&qword_1008375B0, sub_1004849CC);
  v13 = type metadata accessor for Logger(0);
  sub_10001AAA8(v13, (uint64_t)qword_10084C000);
  swift_errorRetain(a1);
  v14 = swift_errorRetain(a1);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v25[0] = a2;
    v25[1] = a4;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v31 = v18;
    *(_DWORD *)v17 = 136315138;
    v26 = a3;
    if (a1)
    {
      swift_getErrorValue(a1, v29, v28);
      v19 = Error.localizedDescription.getter(v28[1], v28[2]);
      v21 = v20;
    }
    else
    {
      v21 = 0xE300000000000000;
      v19 = 7104878;
    }
    v30 = sub_10001A820(v19, v21, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    swift_bridgeObjectRelease(v21);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v27, v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    a3 = v26;
    a2 = v25[0];
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
  v22 = *(void **)(a2 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *v12 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v22 & 1) != 0)
  {
    if (a3)
      return a3(a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RDUserNotificationCenter.releaseNotification(identifier:reference:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v29 = a4;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)&v6[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12, v14);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) != 0)
  {
    v20 = (_QWORD *)swift_allocObject(&unk_1007F5508, 72, 7);
    v20[2] = v6;
    v20[3] = a5;
    v21 = a5;
    v20[4] = a6;
    v20[5] = a1;
    v20[6] = a2;
    v20[7] = a3;
    v22 = v29;
    v20[8] = v29;
    v23 = *(void **)&v6[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter];
    v24 = (_QWORD *)swift_allocObject(&unk_1007F5530, 40, 7);
    v24[2] = v6;
    v24[3] = sub_10048914C;
    v24[4] = v20;
    aBlock[4] = sub_100489164;
    v31 = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10042D6CC;
    aBlock[3] = &unk_1007F5548;
    v25 = _Block_copy(aBlock);
    v26 = v31;
    v27 = v6;
    sub_1000E51CC(v21, a6);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v22);
    swift_retain();
    swift_release(v26);
    objc_msgSend(v23, "getNotificationSettingsWithCompletionHandler:", v25);
    _Block_release(v25);
    return swift_release(v20);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100488F38(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  id v25;
  char *v26;
  void (*v27)(_QWORD);
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v31 = a8;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v20 = (_QWORD *)swift_allocObject(&unk_1007F5B70, 80, 7);
    v20[2] = a2;
    v20[3] = a5;
    v21 = a6;
    v20[4] = a6;
    v20[5] = a3;
    v20[6] = a4;
    v20[7] = a7;
    v22 = v31;
    v20[8] = v31;
    v20[9] = a1;
    aBlock[4] = sub_10048D070;
    v33 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100485CEC;
    aBlock[3] = &unk_1007F5B88;
    v23 = _Block_copy(aBlock);
    v24 = v33;
    v25 = a1;
    v26 = a2;
    swift_bridgeObjectRetain(v21);
    sub_1000E51CC(a3, a4);
    swift_bridgeObjectRetain(v22);
    swift_release(v24);
    objc_msgSend(v25, "getDeliveredNotificationsWithCompletionHandler:", v23);
    _Block_release(v23);

  }
  else
  {
    v27 = (void (*)(_QWORD))a3;
    v28 = *(void **)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    *v19 = v28;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
    v29 = v28;
    LOBYTE(v28) = _dispatchPreconditionTest(_:)(v19);
    (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v19, v15);
    if ((v28 & 1) != 0)
    {
      if (v27)
        v27(0);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100489108()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_10048914C(void *a1)
{
  uint64_t v1;

  sub_100488F38(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100489164(void *a1)
{
  uint64_t v1;

  return sub_100484C98(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100489170(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[5];
  _QWORD *v39;

  v30 = a7;
  v31 = a8;
  v32 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v17 - 8);
  v35 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  v20 = (_QWORD *)swift_allocObject(&unk_1007F5BC0, 88, 7);
  v20[2] = a1;
  v20[3] = a3;
  v20[4] = a4;
  v20[5] = a2;
  v20[6] = a5;
  v20[7] = a6;
  v21 = a6;
  v22 = v31;
  v20[8] = v30;
  v20[9] = v22;
  v20[10] = a9;
  aBlock[4] = sub_10048D0F4;
  v39 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F5BD8;
  v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a4);
  v24 = a2;
  sub_1000E51CC(a5, v21);
  swift_bridgeObjectRetain(v22);
  static DispatchQoS.unspecified.getter(a9);
  v37 = _swiftEmptyArrayStorage;
  v25 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A630((uint64_t *)&unk_100838000);
  v27 = sub_1000D316C();
  v28 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v26, v27, v32, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v16, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v35);
  return swift_release(v39);
}

void sub_1004893AC(unint64_t a1, uint64_t a2, unint64_t a3, char *a4, void (*a5)(_QWORD), uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  __n128 v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  double v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  BOOL v48;
  uint64_t v49;
  uint8_t *v50;
  void *v51;
  char *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  NSString v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  id v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  Class isa;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  os_log_t v84;
  _BYTE *v85;
  uint64_t v86;
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(_QWORD);
  uint64_t aBlock[5];
  _QWORD *v96;
  uint64_t v97;
  _BYTE v98[16];

  v93 = a6;
  v94 = a5;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(char **)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain(a3);
  v92 = a2;
  v19 = sub_10048B978(a1, a2, a3);
  v20 = swift_bridgeObjectRelease();
  if (v19)
  {
    v89 = v16;
    v90 = v15;
    v91 = a4;
    v21 = objc_msgSend(v19, "request", v20.n128_f64[0]);
    v22 = objc_msgSend(v21, "content");

    v23 = objc_msgSend(v22, "mutableCopy");
    _bridgeAnyObjectToAny(_:)(aBlock, v23);
    swift_unknownObjectRelease(v23);
    v24 = sub_1000151B0(0, (unint64_t *)&unk_10084C110, UNMutableNotificationContent_ptr);
    v16 = (char *)&type metadata for Any;
    if ((swift_dynamicCast(&v97, aBlock, (char *)&type metadata for Any + 8, v24, 6) & 1) != 0)
    {
      v88 = v19;
      v25 = v97;
      aBlock[0] = sub_100486218();
      sub_10059BE6C(a7, a8);
      swift_bridgeObjectRelease();
      sub_100488624(aBlock[0]);
      swift_bridgeObjectRelease();
      if (qword_1008375B0 == -1)
        goto LABEL_4;
      goto LABEL_32;
    }
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_10001AAA8(v44, (uint64_t)qword_10084C000);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.fault.getter();
    v48 = os_log_type_enabled(v46, v47);
    v49 = v90;
    if (v48)
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unable to create UNMutableNotificationContent from UNNotificationContent", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    v51 = *(void **)&v91[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    *v18 = v51;
    v52 = v89;
    (*((void (**)(_QWORD *, _QWORD, uint64_t))v89 + 13))(v18, enum case for DispatchPredicate.onQueue(_:), v49);
    v53 = v51;
    LOBYTE(v51) = _dispatchPreconditionTest(_:)(v18);
    (*((void (**)(_QWORD *, uint64_t))v52 + 1))(v18, v49);
    if ((v51 & 1) == 0)
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v94)
      v94(0);

  }
  else
  {
    v42 = *(void **)&a4[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
    *v18 = v42;
    (*((void (**)(_QWORD *, _QWORD, uint64_t, __n128))v16 + 13))(v18, enum case for DispatchPredicate.onQueue(_:), v15, v20);
    v43 = v42;
    v25 = _dispatchPreconditionTest(_:)(v18);
    (*((void (**)(_QWORD *, uint64_t))v16 + 1))(v18, v15);
    if ((v25 & 1) == 0)
    {
      __break(1u);
LABEL_32:
      swift_once(&qword_1008375B0, sub_1004849CC);
LABEL_4:
      v26 = a9;
      v27 = type metadata accessor for Logger(0);
      sub_10001AAA8(v27, (uint64_t)qword_10084C000);
      swift_bridgeObjectRetain_n(a3, 2);
      v28 = (id)v25;
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      v31 = v30;
      if (os_log_type_enabled(v29, v30))
      {
        v32 = swift_slowAlloc(22, -1);
        v86 = swift_slowAlloc(64, -1);
        aBlock[0] = v86;
        *(_DWORD *)v32 = 136446466;
        v87 = a9;
        swift_bridgeObjectRetain(a3);
        v97 = sub_10001A820(v92, a3, aBlock);
        v85 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
        *(_QWORD *)&v33 = swift_bridgeObjectRelease_n(a3, 3).n128_u64[0];
        *(_WORD *)(v32 + 12) = 2080;
        v83 = v32 + 14;
        v34 = objc_msgSend(v28, "userInfo", v33);
        v84 = v29;
        v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for AnyHashable, v16 + 8, &protocol witness table for AnyHashable);
        HIDWORD(v82) = v31;
        v36 = v35;

        v37 = Dictionary.description.getter(v36, &type metadata for AnyHashable, v16 + 8, &protocol witness table for AnyHashable);
        v39 = v38;
        swift_bridgeObjectRelease();
        v97 = sub_10001A820(v37, v39, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v85);

        swift_bridgeObjectRelease();
        v40 = v84;
        _os_log_impl((void *)&_mh_execute_header, v84, BYTE4(v82), "releaseNotification: {identifier: %{public}s, userInfo = %s}", (uint8_t *)v32, 0x16u);
        v41 = v86;
        v26 = v87;
        swift_arrayDestroy(v86, 2, v16 + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      v54 = v28;
      v55 = sub_100486218();

      v56 = *(_QWORD *)(v55 + 16);
      swift_bridgeObjectRelease();
      v57 = swift_bridgeObjectRetain_n(a3, 2);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter(v58);
      v60 = os_log_type_enabled(v58, v59);
      if (v56)
      {
        v61 = v92;
        if (v60)
        {
          v62 = (uint8_t *)swift_slowAlloc(12, -1);
          v63 = swift_slowAlloc(32, -1);
          aBlock[0] = v63;
          *(_DWORD *)v62 = 136446210;
          swift_bridgeObjectRetain(a3);
          v97 = sub_10001A820(v61, a3, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
          swift_bridgeObjectRelease_n(a3, 3);
          _os_log_impl((void *)&_mh_execute_header, v58, v59, "Issuing: replaceContentForRequest {identifier: %{public}s}", v62, 0xCu);
          swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v63, -1, -1);
          swift_slowDealloc(v62, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a3, 2);
        }
        v67 = String._bridgeToObjectiveC()();
        v68 = (_QWORD *)swift_allocObject(&unk_1007F5C10, 56, 7);
        v69 = v91;
        v68[2] = v91;
        v68[3] = v61;
        v70 = v93;
        v71 = (uint64_t)v94;
        v68[4] = a3;
        v68[5] = v71;
        v68[6] = v70;
        aBlock[4] = (uint64_t)sub_10048D164;
        v96 = v68;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000E18E4;
        aBlock[3] = (uint64_t)&unk_1007F5C28;
        v72 = _Block_copy(aBlock);
        v73 = v96;
        swift_bridgeObjectRetain(a3);
        v74 = v69;
        sub_1000E51CC(v71, v70);
        swift_release(v73);
        objc_msgSend(v26, "replaceContentForRequestWithIdentifier:replacementContent:completionHandler:", v67, v54, v72);
        _Block_release(v72);

        return;
      }
      v87 = v26;
      v64 = v92;
      if (v60)
      {
        v65 = (uint8_t *)swift_slowAlloc(12, -1);
        v66 = swift_slowAlloc(32, -1);
        aBlock[0] = v66;
        *(_DWORD *)v65 = 136446210;
        swift_bridgeObjectRetain(a3);
        v97 = sub_10001A820(v64, a3, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Issuing: removeDeliveredNotifications since retain count is zero {identifier: %{public}s}", v65, 0xCu);
        swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v65, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      v76 = v89;
      v75 = v90;
      v77 = sub_10001A630((uint64_t *)&unk_10083A340);
      v78 = swift_allocObject(v77, 48, 7);
      *(_OWORD *)(v78 + 16) = xmmword_1006A3C00;
      *(_QWORD *)(v78 + 32) = v64;
      *(_QWORD *)(v78 + 40) = a3;
      swift_bridgeObjectRetain(a3);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v87, "removeDeliveredNotificationsWithIdentifiers:", isa, swift_bridgeObjectRelease().n128_f64[0]);

      v80 = *(void **)&v91[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
      *v18 = v80;
      (*((void (**)(_QWORD *, _QWORD, uint64_t))v76 + 13))(v18, enum case for DispatchPredicate.onQueue(_:), v75);
      v81 = v80;
      LOBYTE(v80) = _dispatchPreconditionTest(_:)(v18);
      (*((void (**)(_QWORD *, uint64_t))v76 + 1))(v18, v75);
      if ((v80 & 1) != 0)
      {
        if (v94)
          v94(0);

        return;
      }
LABEL_34:
      __break(1u);
      return;
    }
    if (v94)
      v94(0);
  }
}

uint64_t sub_100489D34(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)&a2[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue];
  v18 = (_QWORD *)swift_allocObject(&unk_1007F5C60, 64, 7);
  v18[2] = a3;
  v18[3] = a4;
  v18[4] = a1;
  v18[5] = a2;
  v18[6] = a5;
  v18[7] = a6;
  aBlock[4] = sub_10048D1C8;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F5C78;
  v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a4);
  swift_errorRetain(a1);
  v20 = a2;
  v21 = sub_1000E51CC(a5, a6);
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A630((uint64_t *)&unk_100838000);
  v24 = sub_1000D316C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  return swift_release(v31);
}

uint64_t sub_100489F48(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t result;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _BYTE v32[8];
  uint64_t v33;
  uint64_t v34;

  v29 = a4;
  v30 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1008375B0 != -1)
    swift_once(&qword_1008375B0, sub_1004849CC);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_10084C000);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(a3);
  swift_bridgeObjectRetain(a2);
  v15 = swift_errorRetain(a3);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v27 = a6;
    v28 = a5;
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v34 = v19;
    *(_DWORD *)v18 = 136446466;
    swift_bridgeObjectRetain(a2);
    v33 = sub_10001A820(a1, a2, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v18 + 12) = 2080;
    if (a3)
    {
      swift_getErrorValue(a3, v32, v31);
      v20 = Error.localizedDescription.getter(v31[1], v31[2]);
      v22 = v21;
    }
    else
    {
      v22 = 0xE300000000000000;
      v20 = 7104878;
    }
    v33 = sub_10001A820(v20, v22, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_bridgeObjectRelease();
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "releaseNotification: replaced content {identifier: %{public}s, error: %s}", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    a5 = v28;
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    swift_errorRelease(a3);
    swift_errorRelease(a3);

  }
  v23 = v30;
  v24 = *(void **)(v29 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue);
  *v13 = v24;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v23);
  v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v13);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v23);
  if ((v24 & 1) != 0)
  {
    if (a5)
      return a5(a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RDUserNotificationCenter.userNotificationCenter(_:willPresent:withCompletionHandler:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (qword_1008375B0 != -1)
    swift_once(&qword_1008375B0, sub_1004849CC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001AAA8(v4, (uint64_t)qword_10084C000);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "userNotificationCenter willPresent", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  return a3(27);
}

uint64_t RDUserNotificationCenter.userNotificationCenter(_:didReceive:withCompletionHandler:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t Strong;
  uint64_t v63;
  uint64_t v64;
  uint64_t ObjectType;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  void (*v82)(char *, uint64_t);
  id *v83;
  uint64_t v84;
  id v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  _QWORD *v89;
  id v90;
  const char *v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint8_t *v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint8_t *v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint64_t v125;
  uint8_t *v126;
  uint8_t *v127;
  uint64_t v128;
  uint8_t *v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint64_t v135;
  uint8_t *v136;
  uint8_t *v137;
  uint64_t v138;
  uint8_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t (*v145)(uint64_t);
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v145 = a3;
  v146 = a4;
  v5 = sub_10001A630(&qword_10084C028);
  __chkstk_darwin(v5);
  v7 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RDUserNotificationType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v144 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v143 = (char *)&v138 - v12;
  v13 = sub_10001A630((uint64_t *)&unk_10084C030);
  __chkstk_darwin(v13);
  v15 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for RDUserNotificationAction(0);
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)&v18 = __chkstk_darwin(v16).n128_u64[0];
  v147 = (char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend(a2, "actionIdentifier", v18);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = swift_bridgeObjectRetain(v23);
  RDUserNotificationAction.init(rawValue:)(v21, v23, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10000882C((uint64_t)v15, (uint64_t *)&unk_10084C030);
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_10084C000);
    swift_bridgeObjectRetain(v23);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v149 = v30;
      *(_DWORD *)v29 = 136315138;
      swift_bridgeObjectRetain(v23);
      v148 = sub_10001A820(v21, v23, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149);
      swift_bridgeObjectRelease_n(v23, 3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unknown notification action. {actionIdentifier: %s}", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v23, 2);
    }
    return v145(v31);
  }
  v32 = swift_bridgeObjectRelease();
  v141 = v17;
  (*(void (**)(char *, char *, uint64_t, __n128))(v17 + 32))(v147, v15, v16, v32);
  v33 = objc_msgSend(a2, "notification");
  v34 = objc_msgSend(v33, "request");

  v35 = objc_msgSend(v34, "content");
  v36 = v35;
  RDUserNotificationType.init(notificationContent:)();
  v37 = v16;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000882C((uint64_t)v7, &qword_10084C028);
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v38 = type metadata accessor for Logger(0);
    sub_10001AAA8(v38, (uint64_t)qword_10084C000);
    v39 = v36;
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v42 = 138412290;
      v149 = (uint64_t)v39;
      v44 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      *v43 = v39;

      v37 = v16;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unknown notification type from content. {content: %@}", v42, 0xCu);
      v45 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v43, 1, v45);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {

    }
    v66 = v141;

    v31 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v147, v37);
    return v145(v31);
  }
  v46 = v8;
  v47 = a2;
  v48 = v143;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v143, v7, v8);
  v49 = v144;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v144, v48, v8);
  v140 = v9;
  v50 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v49, v8);
  if (v50 == enum case for RDUserNotificationType.reminderAlarm(_:))
  {
    v51 = v8;
    v53 = v141;
    v52 = v142;
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v54 = type metadata accessor for Logger(0);
    v55 = sub_10001AAA8(v54, (uint64_t)qword_10084C000);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.info.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Forwarding .reminderAlarm notification response to reminderAlarmDelegate", v58, 2u);
      v59 = v58;
      v53 = v141;
      swift_slowDealloc(v59, -1, -1);
    }

    v60 = v52 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate;
    Strong = swift_unknownObjectWeakLoadStrong(v52 + OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate, v61);
    if (Strong)
    {
      v63 = Strong;
      v64 = *(_QWORD *)(v60 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, void *, char *, char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v64 + 8))(v52, v47, v48, v147, v145, v146, ObjectType, v64);
LABEL_30:

      swift_unknownObjectRelease(v63);
LABEL_32:
      v81 = *(void (**)(char *, uint64_t))(v140 + 8);
      v81(v48, v51);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v147, v37);
      return ((uint64_t (*)(char *, uint64_t))v81)(v144, v51);
    }
    goto LABEL_31;
  }
  v53 = v141;
  v68 = v142;
  if (v50 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    v51 = v46;
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v69 = type metadata accessor for Logger(0);
    v70 = sub_10001AAA8(v69, (uint64_t)qword_10084C000);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.info.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Forwarding .todayNotificationForSingleReminder notification response to todayNotificationDelegate", v73, 2u);
      v74 = v73;
      v53 = v141;
      swift_slowDealloc(v74, -1, -1);
    }

    v76 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate;
    goto LABEL_28;
  }
  if (v50 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    v82 = *(void (**)(char *, uint64_t))(v140 + 96);
    v83 = (id *)v144;
    v142 = v46;
    v82(v144, v46);

    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v84 = type metadata accessor for Logger(0);
    sub_10001AAA8(v84, (uint64_t)qword_10084C000);
    v85 = a2;
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.error.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      v144 = (char *)v86;
      v88 = (uint8_t *)swift_slowAlloc(12, -1);
      v89 = (_QWORD *)swift_slowAlloc(8, -1);
      v139 = v88;
      *(_DWORD *)v88 = 138412290;
      v149 = (uint64_t)v85;
      v90 = v85;
      v53 = v141;
      v86 = v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      *v89 = v85;

      v91 = "remindd didn't expect to receive actions from .caldavSharedList. {response: %@}";
LABEL_38:
      v92 = v139;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, v91, v139, 0xCu);
      v93 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v89, 1, v93);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v92, -1, -1);
LABEL_73:

      (*(void (**)(char *, uint64_t))(v140 + 8))(v48, v142);
      v31 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v147, v37);
      return v145(v31);
    }
    goto LABEL_72;
  }
  if (v50 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    (*(void (**)(char *, uint64_t))(v140 + 96))(v144, v46);
    swift_bridgeObjectRelease();
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v94 = type metadata accessor for Logger(0);
    v95 = sub_10001AAA8(v94, (uint64_t)qword_10084C000);
    v96 = Logger.logObject.getter(v95);
    v97 = static os_log_type_t.info.getter(v96);
    if (os_log_type_enabled(v96, v97))
    {
      v98 = v46;
      v99 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v99 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Forwarding .assignmentNotification response to assignmentNotificationDelegate", v99, 2u);
      v100 = v99;
      v46 = v98;
      swift_slowDealloc(v100, -1, -1);
    }

    v102 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_assignmentNotificationDelegate;
  }
  else if (v50 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    (*(void (**)(char *, uint64_t))(v140 + 96))(v144, v46);
    swift_bridgeObjectRelease();
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v103 = type metadata accessor for Logger(0);
    v104 = sub_10001AAA8(v103, (uint64_t)qword_10084C000);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.info.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      v107 = v46;
      v108 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v108 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Forwarding .shareListUpdateNotification response to sharedListUpdateNotificationDelegate", v108, 2u);
      v109 = v108;
      v46 = v107;
      swift_slowDealloc(v109, -1, -1);
    }

    v102 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_sharedListUpdateNotificationDelegate;
  }
  else
  {
    if (v50 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
    {
      v51 = v46;
      if (qword_1008375B0 != -1)
        swift_once(&qword_1008375B0, sub_1004849CC);
      v115 = type metadata accessor for Logger(0);
      v116 = sub_10001AAA8(v115, (uint64_t)qword_10084C000);
      v117 = Logger.logObject.getter(v116);
      v118 = static os_log_type_t.info.getter(v117);
      if (os_log_type_enabled(v117, v118))
      {
        v119 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v119 = 0;
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "Forwarding .dueDateDeltaAlarm notification response to reminderAlarmDelegate", v119, 2u);
        v120 = v119;
        v53 = v141;
        swift_slowDealloc(v120, -1, -1);
      }

      v76 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate;
LABEL_28:
      v77 = v68 + v76;
      v78 = swift_unknownObjectWeakLoadStrong(v68 + v76, v75);
      if (v78)
      {
        v63 = v78;
        v79 = *(_QWORD *)(v77 + 8);
        v80 = swift_getObjectType();
        (*(void (**)(uint64_t, void *, char *, char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v79 + 8))(v68, v47, v48, v147, v145, v146, v80, v79);
        goto LABEL_30;
      }
LABEL_31:

      goto LABEL_32;
    }
    if (v50 == enum case for RDUserNotificationType.todayNotification(_:))
    {
      if (qword_1008375B0 != -1)
        swift_once(&qword_1008375B0, sub_1004849CC);
      v121 = type metadata accessor for Logger(0);
      v122 = sub_10001AAA8(v121, (uint64_t)qword_10084C000);
      v123 = Logger.logObject.getter(v122);
      v124 = static os_log_type_t.info.getter(v123);
      if (os_log_type_enabled(v123, v124))
      {
        v125 = v46;
        v126 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v126 = 0;
        _os_log_impl((void *)&_mh_execute_header, v123, v124, "Forwarding .todayNotification notification response to todayNotificationDelegate", v126, 2u);
        v127 = v126;
        v46 = v125;
        swift_slowDealloc(v127, -1, -1);
      }

      v102 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate;
    }
    else
    {
      if (v50 == enum case for RDUserNotificationType.todayNotificationBadge(_:))
      {
        v142 = v46;
        if (qword_1008375B0 != -1)
          swift_once(&qword_1008375B0, sub_1004849CC);
        v128 = type metadata accessor for Logger(0);
        sub_10001AAA8(v128, (uint64_t)qword_10084C000);
        v85 = a2;
        v86 = Logger.logObject.getter(v85);
        v87 = static os_log_type_t.error.getter(v86);
        if (os_log_type_enabled(v86, v87))
        {
          v144 = (char *)v86;
          v129 = (uint8_t *)swift_slowAlloc(12, -1);
          v89 = (_QWORD *)swift_slowAlloc(8, -1);
          v139 = v129;
          *(_DWORD *)v129 = 138412290;
          v149 = (uint64_t)v85;
          v130 = v85;
          v53 = v141;
          v86 = v144;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
          *v89 = v85;

          v91 = "remindd didn't expect to receive actions from .todayNotificationBadge. {response: %@}";
          goto LABEL_38;
        }
LABEL_72:

        v36 = v85;
        goto LABEL_73;
      }
      if (v50 != enum case for RDUserNotificationType.beforeFirstUnlock(_:))
      {
        result = _diagnoseUnexpectedEnumCase<A>(type:)(v46, v46);
        __break(1u);
        return result;
      }
      if (qword_1008375B0 != -1)
        swift_once(&qword_1008375B0, sub_1004849CC);
      v131 = type metadata accessor for Logger(0);
      v132 = sub_10001AAA8(v131, (uint64_t)qword_10084C000);
      v133 = Logger.logObject.getter(v132);
      v134 = static os_log_type_t.info.getter(v133);
      if (os_log_type_enabled(v133, v134))
      {
        v135 = v46;
        v136 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v136 = 0;
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "Forwarding .beforeFirstUnlock notification response to beforeFirstUnlockReminderDelegate", v136, 2u);
        v137 = v136;
        v46 = v135;
        swift_slowDealloc(v137, -1, -1);
      }

      v102 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_beforeFirstUnlockReminderDelegate;
    }
  }
  v110 = v68 + v102;
  v111 = swift_unknownObjectWeakLoadStrong(v68 + v102, v101);
  if (v111)
  {
    v112 = v111;
    v113 = *(_QWORD *)(v110 + 8);
    v114 = swift_getObjectType();
    (*(void (**)(uint64_t, void *, char *, char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v113 + 8))(v68, v47, v48, v147, v145, v146, v114, v113);

    swift_unknownObjectRelease(v112);
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v140 + 8))(v48, v46);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v147, v37);
}

Swift::Void __swiftcall RDUserNotificationCenter.userNotificationCenter(_:openSettingsFor:)(UNUserNotificationCenter _, UNNotification_optional openSettingsFor)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;

  if (qword_1008375B0 != -1)
    swift_once(&qword_1008375B0, sub_1004849CC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001AAA8(v2, (uint64_t)qword_10084C000);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "userNotificationCenter openSettingsForNotification, but we don't have any settings pane yet so bye ;)",
      v5,
      2u);
    swift_slowDealloc(v5, -1, -1);
  }

}

uint64_t sub_10048B754()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10048B788(uint64_t a1)
{
  return sub_10048D170(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100485EE0);
}

uint64_t sub_10048B794()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10048B7D0()
{
  return sub_10048D1D4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004860F0);
}

_QWORD *sub_10048B7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
LABEL_9:
        v7 = v6;
        v8 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_15;
        v9 = objc_msgSend(v6, "request");
        v10 = objc_msgSend(v9, "content");

        v11 = sub_100486218();
        LOBYTE(v10) = sub_1001B2278(a2, a3, v11);
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
          v13 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
          v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v7);
          specialized ContiguousArray._endMutation()(v14);
        }
        else
        {

        }
        ++v5;
        if (v8 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v16 = a1;
      else
        v16 = a1 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v16);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v6 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10048B978(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = v3;
  v7 = a1;
  if (a1 >> 62)
    goto LABEL_21;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    v24 = v4;
    v25 = v7;
    v26 = v7 & 0xC000000000000001;
    v4 = 4;
    while (1)
    {
      v9 = v4 - 4;
      if (!v26)
        break;
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v7);
      v11 = v4 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_20;
LABEL_9:
      v12 = v8;
      v13 = v10;
      v14 = objc_msgSend(v10, "request", v24);
      v15 = a3;
      v16 = objc_msgSend(v14, "identifier");

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      a3 = v15;
      v20 = v17 == a2 && v19 == v15;
      if (v20)
      {
        swift_bridgeObjectRelease(v25);
LABEL_19:
        swift_bridgeObjectRelease(a3);
        return v13;
      }
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, a2, v15, 0);
      swift_bridgeObjectRelease(v19);
      if ((v21 & 1) != 0)
      {
        a3 = v25;
        goto LABEL_19;
      }

      ++v4;
      v8 = v12;
      v20 = v11 == v12;
      v7 = v25;
      if (v20)
      {
        swift_bridgeObjectRelease(v25);
        return 0;
      }
    }
    v10 = *(id *)(v7 + 8 * v4);
    v11 = v4 - 3;
    if (!__OFADD__(v9, 1))
      goto LABEL_9;
LABEL_20:
    __break(1u);
LABEL_21:
    if (v7 < 0)
      v22 = v7;
    else
      v22 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  }
  swift_bridgeObjectRelease(v7);
  return 0;
}

uint64_t sub_10048BB3C(void *a1, uint64_t a2, void (**a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  __n128 v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  _QWORD *v48;
  id v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t Strong;
  uint64_t v77;
  uint64_t v78;
  uint64_t ObjectType;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  id *v82;
  uint64_t v83;
  id v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  id v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint8_t *v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  uint8_t *v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  uint8_t *v125;
  uint8_t *v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint64_t v135;
  uint8_t *v136;
  uint8_t *v137;
  uint64_t v138;
  id v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  void (**v144)(void);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v141 = a2;
  v5 = sub_10001A630(&qword_10084C028);
  __chkstk_darwin(v5);
  v7 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for RDUserNotificationType(0);
  v8 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v142 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v140 = (char *)&v138 - v11;
  v12 = sub_10001A630((uint64_t *)&unk_10084C030);
  __chkstk_darwin(v12);
  v14 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RDUserNotificationAction(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(&unk_1007F5698, 24, 7);
  v144 = a3;
  v145 = v19;
  *(_QWORD *)(v19 + 16) = a3;
  _Block_copy(a3);
  v20 = objc_msgSend(a1, "actionIdentifier");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = v15;
  v25 = swift_bridgeObjectRetain(v23);
  RDUserNotificationAction.init(rawValue:)(v21, v23, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10000882C((uint64_t)v14, (uint64_t *)&unk_10084C030);
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v26 = type metadata accessor for Logger(0);
    sub_10001AAA8(v26, (uint64_t)qword_10084C000);
    swift_bridgeObjectRetain(v23);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    v30 = os_log_type_enabled(v28, v29);
    v31 = v145;
    if (v30)
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v147 = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain(v23);
      v146 = sub_10001A820(v21, v23, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
      swift_bridgeObjectRelease_n(v23, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unknown notification action. {actionIdentifier: %s}", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v23, 2);
    }
    goto LABEL_22;
  }
  v34 = swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t, __n128))(v16 + 32))(v18, v14, v15, v34);
  v35 = a1;
  v36 = objc_msgSend(a1, "notification");
  v37 = objc_msgSend(v36, "request");

  v38 = objc_msgSend(v37, "content");
  v139 = v38;
  RDUserNotificationType.init(notificationContent:)();
  v39 = v143;
  v40 = v18;
  v41 = v16;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v143) == 1)
  {
    sub_10000882C((uint64_t)v7, &qword_10084C028);
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v42 = type metadata accessor for Logger(0);
    sub_10001AAA8(v42, (uint64_t)qword_10084C000);
    v43 = v139;
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v142 = v40;
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(8, -1);
      v143 = v24;
      v48 = (_QWORD *)v47;
      *(_DWORD *)v46 = 138412290;
      v147 = (uint64_t)v43;
      v49 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      *v48 = v43;

      v40 = v142;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unknown notification type from content. {content: %@}", v46, 0xCu);
      v50 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v48, 1, v50);
      v51 = v48;
      v24 = v143;
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {

    }
    v31 = v145;

    goto LABEL_21;
  }
  v52 = v8;
  v53 = v140;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v140, v7, v39);
  v54 = v142;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v142, v53, v39);
  v55 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v54, v39);
  if (v55 == enum case for RDUserNotificationType.reminderAlarm(_:))
  {
    v56 = v141;
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v57 = type metadata accessor for Logger(0);
    v58 = sub_10001AAA8(v57, (uint64_t)qword_10084C000);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.info.getter(v59);
    if (!os_log_type_enabled(v59, v60))
      goto LABEL_18;
    v61 = v39;
    v62 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v62 = 0;
    v63 = "Forwarding .reminderAlarm notification response to reminderAlarmDelegate";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v59, v60, v63, v62, 2u);
    v64 = v62;
    v39 = v61;
    v56 = v141;
    swift_slowDealloc(v64, -1, -1);
LABEL_18:

    v66 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate;
LABEL_30:
    v75 = v56 + v66;
    Strong = swift_unknownObjectWeakLoadStrong(v56 + v66, v65);
    if (Strong)
    {
      v77 = Strong;
      v78 = *(_QWORD *)(v75 + 8);
      ObjectType = swift_getObjectType();
      v80 = v56;
      v31 = v145;
      (*(void (**)(uint64_t, void *, char *, char *, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v78 + 8))(v80, v35, v53, v40, sub_10048CB98, v145, ObjectType, v78);

      swift_unknownObjectRelease(v77);
    }
    else
    {

      v31 = v145;
    }
    v81 = *(void (**)(char *, uint64_t))(v8 + 8);
    v81(v53, v39);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v24);
    v81(v142, v39);
    return swift_release(v31);
  }
  v56 = v141;
  if (v55 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v68 = type metadata accessor for Logger(0);
    v69 = sub_10001AAA8(v68, (uint64_t)qword_10084C000);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.info.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      v72 = v39;
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Forwarding .todayNotificationForSingleReminder notification response to todayNotificationDelegate", v73, 2u);
      v74 = v73;
      v39 = v72;
      v56 = v141;
      swift_slowDealloc(v74, -1, -1);
    }

    v66 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate;
    goto LABEL_30;
  }
  if (v55 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    v82 = (id *)v142;
    (*(void (**)(char *, uint64_t))(v8 + 96))(v142, v39);

    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v83 = type metadata accessor for Logger(0);
    sub_10001AAA8(v83, (uint64_t)qword_10084C000);
    v84 = v35;
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter(v85);
    if (os_log_type_enabled(v85, v86))
    {
      v141 = v52;
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v138 = swift_slowAlloc(8, -1);
      *(_DWORD *)v87 = 138412290;
      v147 = (uint64_t)v84;
      v88 = v84;
      v142 = v40;
      v89 = v24;
      v90 = v88;
      v53 = v140;
      v52 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      v91 = v138;
      *(_QWORD *)v138 = v84;

      v24 = v89;
      v40 = v142;
      v92 = "remindd didn't expect to receive actions from .caldavSharedList. {response: %@}";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v85, v86, v92, v87, 0xCu);
      v93 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v91, 1, v93);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v87, -1, -1);
      v31 = v145;
      v84 = v139;
LABEL_73:

      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v143);
LABEL_21:
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v24);
LABEL_22:
      v144[2]();
      return swift_release(v31);
    }
    goto LABEL_72;
  }
  v94 = v35;
  if (v55 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    v138 = v41;
    v95 = v52;
    (*(void (**)(char *, uint64_t))(v52 + 96))(v142, v39);
    swift_bridgeObjectRelease();
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v96 = type metadata accessor for Logger(0);
    v97 = sub_10001AAA8(v96, (uint64_t)qword_10084C000);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.info.getter(v98);
    if (os_log_type_enabled(v98, v99))
    {
      v100 = v39;
      v101 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v101 = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Forwarding .assignmentNotification response to assignmentNotificationDelegate", v101, 2u);
      v102 = v101;
      v39 = v100;
      v94 = v35;
      swift_slowDealloc(v102, -1, -1);
    }

    v104 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_assignmentNotificationDelegate;
LABEL_52:
    v112 = v56 + v104;
    v113 = swift_unknownObjectWeakLoadStrong(v56 + v104, v103);
    if (v113)
    {
      v114 = v113;
      v115 = *(_QWORD *)(v112 + 8);
      v116 = swift_getObjectType();
      v117 = v56;
      v31 = v145;
      (*(void (**)(uint64_t, void *, char *, char *, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v115 + 8))(v117, v94, v53, v40, sub_10048CB98, v145, v116, v115);

      swift_unknownObjectRelease(v114);
    }
    else
    {

      v31 = v145;
    }
    (*(void (**)(char *, uint64_t))(v95 + 8))(v53, v39);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v40, v24);
    return swift_release(v31);
  }
  if (v55 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    v138 = v41;
    v95 = v52;
    (*(void (**)(char *, uint64_t))(v52 + 96))(v142, v39);
    swift_bridgeObjectRelease();
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v105 = type metadata accessor for Logger(0);
    v106 = sub_10001AAA8(v105, (uint64_t)qword_10084C000);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      v109 = v39;
      v110 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Forwarding .shareListUpdateNotification response to sharedListUpdateNotificationDelegate", v110, 2u);
      v111 = v110;
      v39 = v109;
      v94 = v35;
      swift_slowDealloc(v111, -1, -1);
    }

    v104 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_sharedListUpdateNotificationDelegate;
    goto LABEL_52;
  }
  if (v55 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
  {
    v8 = v52;
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v118 = type metadata accessor for Logger(0);
    v119 = sub_10001AAA8(v118, (uint64_t)qword_10084C000);
    v59 = Logger.logObject.getter(v119);
    v60 = static os_log_type_t.info.getter(v59);
    if (!os_log_type_enabled(v59, v60))
      goto LABEL_18;
    v61 = v39;
    v62 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v62 = 0;
    v63 = "Forwarding .dueDateDeltaAlarm notification response to reminderAlarmDelegate";
    goto LABEL_17;
  }
  if (v55 == enum case for RDUserNotificationType.todayNotification(_:))
  {
    v138 = v41;
    v95 = v52;
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v120 = type metadata accessor for Logger(0);
    v121 = sub_10001AAA8(v120, (uint64_t)qword_10084C000);
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.info.getter(v122);
    if (os_log_type_enabled(v122, v123))
    {
      v124 = v39;
      v125 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v125 = 0;
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Forwarding .todayNotification notification response to todayNotificationDelegate", v125, 2u);
      v126 = v125;
      v39 = v124;
      v94 = v35;
      swift_slowDealloc(v126, -1, -1);
    }

    v104 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate;
    goto LABEL_52;
  }
  if (v55 == enum case for RDUserNotificationType.todayNotificationBadge(_:))
  {
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v127 = type metadata accessor for Logger(0);
    sub_10001AAA8(v127, (uint64_t)qword_10084C000);
    v84 = v35;
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter(v85);
    if (os_log_type_enabled(v85, v86))
    {
      v141 = v52;
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v138 = swift_slowAlloc(8, -1);
      *(_DWORD *)v87 = 138412290;
      v147 = (uint64_t)v84;
      v128 = v84;
      v142 = v40;
      v129 = v24;
      v130 = v128;
      v53 = v140;
      v52 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      v91 = v138;
      *(_QWORD *)v138 = v84;

      v24 = v129;
      v40 = v142;
      v92 = "remindd didn't expect to receive actions from .todayNotificationBadge. {response: %@}";
      goto LABEL_39;
    }
LABEL_72:

    v31 = v145;
    goto LABEL_73;
  }
  v138 = v41;
  if (v55 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
  {
    v95 = v52;
    if (qword_1008375B0 != -1)
      swift_once(&qword_1008375B0, sub_1004849CC);
    v131 = type metadata accessor for Logger(0);
    v132 = sub_10001AAA8(v131, (uint64_t)qword_10084C000);
    v133 = Logger.logObject.getter(v132);
    v134 = static os_log_type_t.info.getter(v133);
    if (os_log_type_enabled(v133, v134))
    {
      v135 = v39;
      v136 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v136 = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, v134, "Forwarding .beforeFirstUnlock notification response to beforeFirstUnlockReminderDelegate", v136, 2u);
      v137 = v136;
      v39 = v135;
      v94 = v35;
      swift_slowDealloc(v137, -1, -1);
    }

    v104 = OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_beforeFirstUnlockReminderDelegate;
    goto LABEL_52;
  }
  swift_release(v145);
  _Block_release(v144);
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v39, v39);
  __break(1u);
  return result;
}

uint64_t sub_10048CB74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10048CB98()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10048CBA4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  return swift_deallocObject(v0, 81, 7);
}

void sub_10048CBF0(void *a1)
{
  uint64_t v1;

  sub_10048655C(a1, *(char **)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void **)(v1 + 72), *(_BYTE *)(v1 + 80));
}

uint64_t sub_10048CC2C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  return swift_deallocObject(v0, 89, 7);
}

uint64_t sub_10048CC80(uint64_t a1)
{
  uint64_t v1;

  return sub_100486744(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void **)(v1 + 72), *(void **)(v1 + 80), *(_BYTE *)(v1 + 88));
}

uint64_t sub_10048CCBC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  return swift_deallocObject(v0, 97, 7);
}

void sub_10048CD18()
{
  uint64_t v0;

  sub_10048699C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(_QWORD))(v0 + 40), *(_QWORD *)(v0 + 48), *(NSObject **)(v0 + 56), *(_QWORD *)(v0 + 64), *(void **)(v0 + 72), *(char **)(v0 + 80), *(void **)(v0 + 88), *(_BYTE *)(v0 + 96));
}

uint64_t sub_10048CD58(uint64_t a1)
{
  uint64_t v1;

  return sub_1004887D0(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t)&unk_1007F5918, (uint64_t)sub_10048CDF0, (uint64_t)&unk_1007F5930);
}

uint64_t sub_10048CD90(uint64_t a1)
{
  uint64_t v1;

  return sub_1004887D0(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t)&unk_1007F58C8, (uint64_t)sub_10048CDC8, (uint64_t)&unk_1007F58E0);
}

uint64_t sub_10048CDC8()
{
  uint64_t v0;

  return sub_1004889C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32), *(_QWORD *)(v0 + 40), "retainNotification content replaced {error: %s}");
}

uint64_t sub_10048CDF0()
{
  uint64_t v0;

  return sub_1004889C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32), *(_QWORD *)(v0 + 40), "retainNotification request added {error: %s}");
}

unint64_t sub_10048CE14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084C120;
  if (!qword_10084C120)
  {
    v1 = sub_1000151B0(255, &qword_1008440E0, UNNotificationCategory_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10084C120);
  }
  return result;
}

uint64_t sub_10048CE70(uint64_t a1)
{
  uint64_t v1;

  return sub_100485A14(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10048CE7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10048CEB0()
{
  uint64_t v0;

  return sub_100485C14(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10048CEBC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

void sub_10048CF00(void *a1)
{
  uint64_t v1;

  sub_10048551C(a1, *(char **)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_10048CF18()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10048CF4C(uint64_t a1)
{
  uint64_t v1;

  return sub_1004887D0(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t)&unk_1007F5AD0, (uint64_t)sub_10048CFC0, (uint64_t)&unk_1007F5AE8);
}

uint64_t sub_10048CF84()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10048CFC0()
{
  uint64_t v0;

  return sub_1004889C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32), *(_QWORD *)(v0 + 40), "showNotification request added {error: %s}");
}

uint64_t sub_10048CFE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10048D018()
{
  uint64_t v0;

  return sub_100484E94(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t sub_10048D024()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10048D070(uint64_t a1)
{
  uint64_t v1;

  return sub_100489170(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void **)(v1 + 72));
}

uint64_t sub_10048D0A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));

  return swift_deallocObject(v0, 88, 7);
}

void sub_10048D0F4()
{
  uint64_t v0;

  sub_1004893AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(char **)(v0 + 40), *(void (**)(_QWORD))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(void **)(v0 + 80));
}

uint64_t sub_10048D128()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10048D164(uint64_t a1)
{
  return sub_10048D170(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100489D34);
}

uint64_t sub_10048D170(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_10048D184()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));

  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10048D1C8()
{
  return sub_10048D1D4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100489F48);
}

uint64_t sub_10048D1D4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

unint64_t sub_10048D284(uint64_t a1)
{
  unint64_t result;

  result = sub_10048D2A8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10048D2A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084C168;
  if (!qword_10084C168)
  {
    v1 = type metadata accessor for REMRemindersListDataView.TodaySectionOrderingInvocation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for REMRemindersListDataView.TodaySectionOrderingInvocation, v1);
    atomic_store(result, (unint64_t *)&qword_10084C168);
  }
  return result;
}

uint64_t sub_10048D2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084C130);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084C130);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10048D380@<X0>(void *a1@<X1>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  _QWORD *v34;
  uint64_t v35;
  __n128 v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  id v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t result;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 v65;
  uint64_t i;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[3];
  _BYTE v82[8];
  _QWORD *v83;

  v4 = v3;
  v75 = a2;
  v6 = type metadata accessor for REMSmartListSection.PredefinedSectionType.Today(0, a3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v76 = (char *)v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v77 = (char *)v72 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)v72 - v12;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)v72 - v16;
  v18 = static REMSmartListSection.PredefinedSectionType.Today.allCases.getter(v15);
  v19 = *(_QWORD *)(v18 + 16);
  v79 = v7;
  if (v19)
  {
    v73 = a1;
    v74 = v3;
    v83 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v19);
    v20 = *(unsigned __int8 *)(v79 + 80);
    v72[1] = v18;
    v21 = v18 + ((v20 + 32) & ~v20);
    v78 = *(_QWORD *)(v79 + 72);
    v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 16);
    do
    {
      v23 = v22(v17, v21, v6);
      v24 = REMSmartListSection.PredefinedSectionType.Today.remObjectID.getter(v23);
      v22(v13, (uint64_t)v17, v6);
      v25 = sub_10001A630(&qword_10084C170);
      swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
      v26 = REMOrderedIdentifierMap.IdentifiableContainer.init(remObjectID:nonIdentifiable:)(v24, v13);
      v27 = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v17, v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      v28 = v6;
      v29 = v83[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
      v30 = v29;
      v6 = v28;
      v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v26);
      specialized ContiguousArray._endMutation()(v31);
      v21 += v78;
      --v19;
    }
    while (v19);
    v32 = (uint64_t)v83;
    swift_bridgeObjectRelease();
    a1 = v73;
    v4 = v74;
  }
  else
  {
    swift_bridgeObjectRelease();
    v32 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v33 = REMSmartListTypeToday;
  v34 = v77;
  if (qword_100837960 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v35 = qword_100872290;
  swift_retain();
  v37 = sub_10058E6E0(v33, 0, a1, v35, v36);
  if (v4)
  {
    swift_release(v35);
    v74 = 0;
    if (qword_1008375B8 != -1)
      swift_once(&qword_1008375B8, sub_10048D2F0);
    v48 = type metadata accessor for Logger(0);
    sub_10001AAA8(v48, (uint64_t)qword_10084C130);
    swift_errorRetain(v4);
    v49 = swift_errorRetain(v4);
    v39 = Logger.logObject.getter(v49);
    v50 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = (_QWORD *)swift_slowAlloc(32, -1);
      v83 = v52;
      *(_DWORD *)v51 = 136446210;
      v78 = (uint64_t)(v51 + 4);
      swift_getErrorValue(v4, v82, v81);
      v53 = Error.rem_errorDescription.getter(v81[1], v81[2]);
      v80 = sub_10001A820(v53, v54, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_bridgeObjectRelease();
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v39, v50, "TodaySectionOrderingInvocation: error upon retrieving ordering, use default ordering {error: %{public}s}", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      v55 = v52;
      v34 = v77;
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      swift_errorRelease(v4);
      goto LABEL_19;
    }
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
LABEL_18:

LABEL_19:
    v56 = v76;
    if (!((unint64_t)v32 >> 62))
      goto LABEL_20;
    goto LABEL_34;
  }
  v38 = v37;
  swift_release(v35);
  v39 = v38;
  v40 = -[NSObject sectionIDsOrderingAsData](v39, "sectionIDsOrderingAsData");
  if (!v40)
  {
    v74 = 0;

    goto LABEL_18;
  }
  v41 = v40;
  v42 = v34;
  v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v45 = v44;

  sub_10048DAA4();
  static REMJSONRepresentable.fromJSONData(_:)(&v83, v43, v45);
  sub_1000A71C8(v43, v45);
  v46 = v83;
  v47 = sub_10001A630(&qword_10084C170);
  v70 = REMOrderedIdentifierMap.reorder<A>(objects:)(v32, v47);
  v74 = 0;

  swift_bridgeObjectRelease();
  v32 = v70;
  v56 = v76;
  v34 = v42;
  if (!((unint64_t)v32 >> 62))
  {
LABEL_20:
    v57 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v57)
      goto LABEL_21;
LABEL_38:
    v65 = swift_bridgeObjectRelease();
    v59 = _swiftEmptyArrayStorage;
    return REMRemindersListDataView.TodaySectionOrderingModel.init(sectionOrdering:)(v59, v65);
  }
LABEL_34:
  if (v32 < 0)
    v71 = v32;
  else
    v71 = v32 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v32);
  v57 = _CocoaArrayWrapper.endIndex.getter(v71);
  swift_bridgeObjectRelease();
  if (!v57)
    goto LABEL_38;
LABEL_21:
  v83 = _swiftEmptyArrayStorage;
  result = sub_1001C1E90(0, v57 & ~(v57 >> 63), 0);
  if ((v57 & 0x8000000000000000) == 0)
  {
    v59 = v83;
    if ((v32 & 0xC000000000000001) != 0)
    {
      v60 = 0;
      do
      {
        v61 = v32;
        v62 = specialized _ArrayBuffer._getElementSlowPath(_:)(v60, v32);
        REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter(v34);
        swift_unknownObjectRelease(v62);
        v83 = v59;
        v64 = v59[2];
        v63 = v59[3];
        if (v64 >= v63 >> 1)
        {
          sub_1001C1E90(v63 > 1, v64 + 1, 1);
          v59 = v83;
        }
        ++v60;
        v59[2] = v64 + 1;
        (*(void (**)(unint64_t, _QWORD *, uint64_t))(v79 + 32))((unint64_t)v59+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(_QWORD *)(v79 + 72) * v64, v34, v6);
        v32 = v61;
      }
      while (v57 != v60);
    }
    else
    {
      v78 = v32;
      for (i = 0; i != v57; ++i)
      {
        v67 = *(_QWORD *)(v78 + 8 * i + 32);
        swift_retain();
        REMOrderedIdentifierMap.IdentifiableContainer.nonIdentifiable.getter(v56);
        swift_release(v67);
        v83 = v59;
        v69 = v59[2];
        v68 = v59[3];
        if (v69 >= v68 >> 1)
        {
          sub_1001C1E90(v68 > 1, v69 + 1, 1);
          v59 = v83;
        }
        v59[2] = v69 + 1;
        (*(void (**)(unint64_t, _QWORD *, uint64_t))(v79 + 32))((unint64_t)v59+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(_QWORD *)(v79 + 72) * v69, v56, v6);
      }
    }
    v65 = swift_bridgeObjectRelease();
    return REMRemindersListDataView.TodaySectionOrderingModel.init(sectionOrdering:)(v59, v65);
  }
  __break(1u);
  return result;
}

unint64_t sub_10048DAA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10083D440;
  if (!qword_10083D440)
  {
    v1 = objc_opt_self(REMOrderedIdentifierMap);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10083D440);
  }
  return result;
}

void sub_10048DAE0(uint64_t a1, void *a2)
{
  double v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  void *v46;
  _QWORD *v47;
  _QWORD *v48;
  id v49;
  id v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  NSString v56;
  void (**v57)(char *, uint64_t, uint64_t, _QWORD *);
  id v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  char v71;
  uint64_t *v72;
  _QWORD *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v81;
  id v82;
  id v83;
  id v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  __n128 v94;
  void *v95;
  uint64_t v96;
  id v97;
  id v98;
  int *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  __n128 v108;
  id v109;
  id v110;
  uint64_t v111;
  void (*v112)(_QWORD, _QWORD);
  uint64_t v113;
  uint64_t (*v114)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t);
  int v115;
  uint64_t v116;
  Class isa;
  NSDateComponents v118;
  void (*v119)(_QWORD, _QWORD);
  uint64_t v120;
  Class v121;
  NSDateComponents v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  Class v126;
  id v127;
  int *v128;
  uint64_t *v129;
  id v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  id v152;
  unsigned __int8 v153;
  objc_class *v154;
  Class v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  Class v164;
  id v165;
  double v166;
  id v167;
  void *v168;
  char *v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  Class v175;
  id v176;
  char *v177;
  Class v178;
  void (*v179)(char *, uint64_t);
  id v180;
  void *v181;
  char *v182;
  void (*v183)(char *, char *, uint64_t);
  char *v184;
  uint64_t v185;
  Class v186;
  id v187;
  char *v188;
  Class v189;
  void (*v190)(char *, uint64_t);
  char *v191;
  uint64_t v192;
  id v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  id v204;
  uint64_t v205;
  Class v206;
  id v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  id v212;
  void *v213;
  char *v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  void *v219;
  id v220;
  char *v221;
  Class v222;
  void (*v223)(char *, uint64_t);
  Class v224;
  id v225;
  char *v226;
  uint64_t v227;
  void (*v228)(char *, char *, uint64_t);
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  Class v233;
  Class v234;
  id v235;
  char *v236;
  Class v237;
  char *v238;
  Class v239;
  char *v240;
  void (*v241)(char *, uint64_t);
  id v242;
  double v243;
  double v244;
  id v245;
  id v246;
  void *v247;
  id v248;
  char *v249;
  id v250;
  Class v251;
  id v252;
  id v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  void (**v269)(char *, uint64_t, uint64_t, _QWORD *);
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  _QWORD *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  int *v284;
  id v285;
  id v286;
  uint64_t v287;
  id v288;
  _QWORD *v289;
  unint64_t v290;
  _OWORD v291[5];
  uint64_t v292;

  v5 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v5);
  v270 = (char *)&v257 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_1008401F8);
  __chkstk_darwin(v7);
  v268 = (char *)&v257 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  v269 = *(void (***)(char *, uint64_t, uint64_t, _QWORD *))(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v257 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = type metadata accessor for Date(0);
  v273 = *(_QWORD *)(v276 - 8);
  __chkstk_darwin(v276);
  v263 = (char *)&v257 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v272 = (char *)&v257 - v14;
  v282 = type metadata accessor for DateComponents(0);
  v280 = *(_QWORD *)(v282 - 8);
  __chkstk_darwin(v282);
  v260 = (char *)&v257 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v262 = (char *)&v257 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v257 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v257 - v22;
  __chkstk_darwin(v24);
  v275 = (char *)&v257 - v25;
  v26 = sub_10001A630((uint64_t *)&unk_100841610);
  __chkstk_darwin(v26);
  v28 = (char *)&v257 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v257 - v30;
  __chkstk_darwin(v32);
  v265 = (char *)&v257 - v33;
  __chkstk_darwin(v34);
  v261 = (char *)&v257 - v35;
  __chkstk_darwin(v36);
  v264 = (char *)&v257 - v37;
  __chkstk_darwin(v38);
  v277 = (uint64_t)&v257 - v39;
  __chkstk_darwin(v40);
  v279 = (char *)&v257 - v41;
  __chkstk_darwin(v42);
  v278 = (uint64_t *)((char *)&v257 - v43);
  v284 = (int *)type metadata accessor for RDSavedReminder(0);
  v45 = *(_QWORD *)(a1 + v284[9]);
  v46 = a2;
  v286 = a2;
  v274 = (_QWORD *)v9;
  v271 = v11;
  v267 = v31;
  v266 = v28;
  v259 = v20;
  v258 = v23;
  if (!v45)
  {
    v289 = 0;
LABEL_29:
    v50 = v46;
LABEL_30:
    v83 = objc_msgSend(v50, "storage", v44);
    v84 = objc_msgSend(v83, "titleReplicaIDSource");

    v85 = (uint64_t *)(a1 + v284[15]);
    v86 = *v85;
    v87 = v85[1];
    v88 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
    sub_1000A70E4(v86, v87);
    v89 = (uint64_t)v283;
    v90 = sub_100259BE8((uint64_t)v84);
    v91 = v89;
    sub_1000A71C8(v86, v87);

    if (v89)
      goto LABEL_95;
    v92 = (uint64_t)v289;
    if (v289)
    {
      v93 = v90;
      v94 = swift_bridgeObjectRetain(v92);
      v95 = (void *)REMCRMergeableStringDocument.replacingInlineHashtagIDs(newHashtagID_byOriginalHashtagID:)(v94);
      swift_bridgeObjectRelease();

    }
    else
    {
      v95 = v90;
    }
    v96 = v282;
    v288 = v95;
    v97 = objc_msgSend(v95, "attributedString");
    v98 = v286;
    objc_msgSend(v286, "setTitle:", v97);

    v99 = v284;
    v100 = a1 + v284[10];
    v101 = *(_QWORD *)(v100 + 8);
    if (v101 >> 60 != 15)
    {
      v102 = *(_QWORD *)v100;
      sub_1000A70E4(*(_QWORD *)v100, *(_QWORD *)(v100 + 8));
      v103 = objc_msgSend(v98, "storage");
      v104 = objc_msgSend(v103, "notesReplicaIDSource");

      v105 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
      sub_1000A70E4(v102, v101);
      v106 = sub_100259BE8((uint64_t)v104);
      sub_1000A71B4(v102, v101);

      if (v289)
      {
        swift_bridgeObjectRetain(v289);
        v107 = v106;
        v106 = (id)REMCRMergeableStringDocument.replacingInlineHashtagIDs(newHashtagID_byOriginalHashtagID:)(v108);
        swift_bridgeObjectRelease();

      }
      v109 = objc_msgSend(v106, "attributedString");
      objc_msgSend(v286, "setNotes:", v109);

      sub_1000A71B4(v102, v101);
      v96 = v282;
      v99 = v284;
      v91 = 0;
    }
    v110 = v286;
    objc_msgSend(v286, "setPriority:", *(_QWORD *)(a1 + v99[11]));
    objc_msgSend(v110, "setFlagged:", *(_QWORD *)(a1 + v99[8]));
    v111 = a1 + v99[13];
    v112 = (void (*)(_QWORD, _QWORD))v278;
    sub_10048F4C0(v111, (uint64_t)v278);
    v113 = v280;
    v114 = *(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v280 + 48);
    v115 = v114(v112, 1, v96);
    v116 = (uint64_t)v279;
    if (v115 == 1)
    {
      isa = 0;
    }
    else
    {
      v118.super.isa = DateComponents._bridgeToObjectiveC()().super.isa;
      v96 = v282;
      v119 = v112;
      isa = v118.super.isa;
      (*(void (**)(_QWORD, uint64_t))(v113 + 8))(v119, v282);
    }
    objc_msgSend(v286, "setStartDateComponents:", isa);

    v120 = a1 + v284[7];
    sub_10048F4C0(v120, v116);
    if (v114((void (*)(_QWORD, _QWORD))v116, 1, v96) == 1)
    {
      v121 = 0;
    }
    else
    {
      v122.super.isa = DateComponents._bridgeToObjectiveC()().super.isa;
      v96 = v282;
      v121 = v122.super.isa;
      (*(void (**)(uint64_t, uint64_t))(v280 + 8))(v116, v282);
    }
    objc_msgSend(v286, "setDueDateComponents:", v121);

    v123 = (uint64_t *)(a1 + v284[5]);
    if (*v123)
    {
      sub_1000A678C(*v123, v123[1], v123[2], v123[3]);
      v96 = v282;
    }
    v124 = v120;
    v125 = v277;
    sub_10048F4C0(v124, v277);
    if (v114((void (*)(_QWORD, _QWORD))v125, 1, v96) == 1)
    {
      v126 = 0;
    }
    else
    {
      v126 = DateComponents._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v280 + 8))(v125, v282);
    }
    v127 = v286;
    objc_msgSend(v286, "setDueDateComponents:", v126);

    v128 = v284;
    v129 = *(uint64_t **)(a1 + v284[6]);
    if (v129)
    {
      v130 = objc_msgSend(v127, "dueDateDeltaAlertContext");
      if (v130)
      {
        v131 = v130;
        v290 = (unint64_t)_swiftEmptyArrayStorage;
        v132 = v129[2];
        if (v132)
        {
          v285 = v114;
          v287 = v91;
          v257 = a1;
          swift_bridgeObjectRetain(v129);
          v133 = kREMSupportedVersionUnset;
          v283 = v129;
          v134 = v129 + 6;
          do
          {
            v135 = *v134;
            v136 = (id)*(v134 - 2);
            v137 = objc_msgSend(v131, "addDueDateDeltaAlertWithDueDateDelta:", v136);
            if (v133 < v135)
            {
              v138 = objc_msgSend(v131, "updateDueDateDeltaAlert:", v137);
              v139 = objc_msgSend(v138, "_setMinimumSupportedAppVersion:", v135);

              v137 = v139;
            }
            v140 = v137;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v140);
            v142 = *(_QWORD *)((v290 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v141 = *(_QWORD *)((v290 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v142 >= v141 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v141 > 1);
            v134 += 3;
            v143 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v142, v140);
            specialized Array._endMutation()(v143);

            --v132;
          }
          while (v132);
          swift_bridgeObjectRelease();
          a1 = v257;
          v91 = v287;
          v114 = (uint64_t (*)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))v285;
        }

        swift_bridgeObjectRelease();
        v128 = v284;
      }
    }
    v144 = *(_QWORD *)(a1 + v128[12]);
    if (!v144 || (v145 = *(_QWORD *)(v144 + 16)) == 0)
    {
LABEL_90:
      v59 = v286;
      goto LABEL_91;
    }
    v285 = v114;
    v287 = v91;
    v257 = a1;
    sub_1000151B0(0, (unint64_t *)&qword_100841640, REMRecurrenceRule_ptr);
    v146 = (void *)objc_opt_self(REMRecurrenceRule);
    swift_bridgeObjectRetain(v144);
    v147 = 32;
    v59 = v286;
    do
    {
      v148 = *(_OWORD *)(v144 + v147 + 16);
      v291[0] = *(_OWORD *)(v144 + v147);
      v291[1] = v148;
      v149 = *(_OWORD *)(v144 + v147 + 32);
      v150 = *(_OWORD *)(v144 + v147 + 48);
      v151 = *(_OWORD *)(v144 + v147 + 64);
      v292 = *(_QWORD *)(v144 + v147 + 80);
      v291[3] = v150;
      v291[4] = v151;
      v291[2] = v149;
      sub_1004785E4((uint64_t *)v291);
      sub_1004785E4((uint64_t *)v291);
      v152 = sub_1002700CC((uint64_t *)v291, objc_msgSend(v146, "newObjectID"), objc_msgSend(v59, "accountID"), objc_msgSend(v59, "objectID"));
      objc_msgSend(v59, "addRecurrenceRule:", v152);

      sub_10027088C(v291);
      v147 += 88;
      --v145;
    }
    while (v145);
    v153 = objc_msgSend(v59, "isOverdue", swift_bridgeObjectRelease().n128_f64[0]);
    a1 = v257;
    if ((v153 & 1) == 0)
    {
      v128 = v284;
      goto LABEL_91;
    }
    v154 = (objc_class *)objc_msgSend(v59, "dueDateComponents");
    v155 = v154;
    if (v154)
    {
      v156 = v275;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v154);

      v157 = v280;
      v158 = v264;
      v159 = v282;
      (*(void (**)(char *, char *, uint64_t))(v280 + 32))(v264, v156, v282);
      v50 = *(id *)(v157 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v50)(v158, 0, 1, v159);
      v160 = ((uint64_t (*)(char *, uint64_t, uint64_t))v285)(v158, 1, v159);
      v48 = v274;
      v28 = v265;
      if ((_DWORD)v160 == 1)
      {
        v155 = 0;
      }
      else
      {
        v161 = v158;
        v162 = v159;
        v155 = DateComponents._bridgeToObjectiveC()().super.isa;
        v160 = (*(uint64_t (**)(char *, uint64_t))(v157 + 8))(v161, v162);
      }
    }
    else
    {
      v50 = *(id *)(v280 + 56);
      v160 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v50)(v264, 1, 1, v282);
      v48 = v274;
      v28 = v265;
    }
    v163 = v272;
    static Date.now.getter(v160);
    v164 = Date._bridgeToObjectiveC()().super.isa;
    v278 = *(uint64_t **)(v273 + 8);
    ((void (*)(char *, uint64_t))v278)(v163, v276);
    v165 = v286;
    objc_msgSend(v286, "nextRecurrentAdvanceAmountForDateComponents:afterDate:", v155, v164);
    v2 = v166;

    if (v2 <= 0.0)
      goto LABEL_83;
    v167 = objc_msgSend(v165, "dueDateComponents");
    if (v167)
    {
      v168 = v167;
      v169 = v275;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v167);

      v170 = *(void (**)(char *, char *, uint64_t))(v280 + 32);
      v171 = (uint64_t)v261;
      v172 = v169;
      v173 = v282;
      v170(v261, v172, v282);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v50)(v171, 0, 1, v173);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v285)(v171, 1, v173) != 1)
      {
        v174 = v258;
        v170(v258, (char *)v171, v173);
        v175 = DateComponents._bridgeToObjectiveC()().super.isa;
        v176 = -[objc_class rem_dateComponentsByAddingTimeInterval:](v175, "rem_dateComponentsByAddingTimeInterval:", v2);

        v177 = v275;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v176);

        v178 = DateComponents._bridgeToObjectiveC()().super.isa;
        v179 = *(void (**)(char *, uint64_t))(v280 + 8);
        v179(v177, v282);
        objc_msgSend(v286, "setDueDateComponents:", v178);

        v179(v174, v282);
        v173 = v282;
LABEL_78:
        v180 = objc_msgSend(v286, "startDateComponents");
        if (v180)
        {
          v181 = v180;
          v182 = v275;
          static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v180);

          v183 = *(void (**)(char *, char *, uint64_t))(v280 + 32);
          v183(v28, v182, v173);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v50)(v28, 0, 1, v173);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v285)(v28, 1, v173) != 1)
          {
            v184 = v259;
            v183(v259, v28, v173);
            v185 = v173;
            v186 = DateComponents._bridgeToObjectiveC()().super.isa;
            v187 = -[objc_class rem_dateComponentsByAddingTimeInterval:](v186, "rem_dateComponentsByAddingTimeInterval:", v2);

            v188 = v275;
            static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v187);

            v189 = DateComponents._bridgeToObjectiveC()().super.isa;
            v190 = *(void (**)(char *, uint64_t))(v280 + 8);
            v191 = v188;
            v192 = v185;
            v190(v191, v185);
            v165 = v286;
            objc_msgSend(v286, "setStartDateComponents:", v189);

            v190(v184, v192);
            goto LABEL_83;
          }
        }
        else
        {
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v50)(v28, 1, 1, v173);
        }
        sub_10000882C((uint64_t)v28, (uint64_t *)&unk_100841610);
        v165 = v286;
LABEL_83:
        v193 = objc_msgSend(v165, "dueDateComponents");
        if (v193)
        {
          v194 = v193;
          v195 = (uint64_t)v266;
          static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v193);

          v196 = 0;
          v57 = v269;
          v197 = v282;
          v63 = v287;
        }
        else
        {
          v196 = 1;
          v57 = v269;
          v197 = v282;
          v63 = v287;
          v195 = (uint64_t)v266;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v50)(v195, v196, 1, v197);
        v198 = v195;
        v199 = (uint64_t)v267;
        sub_10048F508(v198, (uint64_t)v267);
        v200 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v285)(v199, 1, v197);
        if ((_DWORD)v200)
        {
          sub_10000882C(v199, (uint64_t *)&unk_100841610);
          v201 = (uint64_t)v268;
          v57[7](v268, 1, 1, v48);
LABEL_89:
          sub_10000882C(v201, &qword_1008401F8);
          v128 = v284;
          goto LABEL_90;
        }
        v201 = (uint64_t)v268;
        DateComponents.timeZone.getter(v200);
        sub_10000882C(v199, (uint64_t *)&unk_100841610);
        if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v57[6])(v201, 1, v48) == 1)
          goto LABEL_89;
        v61 = (uint64_t)v271;
        ((void (*)(char *, uint64_t, _QWORD *))v57[4])(v271, v201, v48);
        v59 = v286;
        v207 = objc_msgSend(v286, "alarms");
        if (v207)
        {
          v208 = v207;
          v209 = sub_1000151B0(0, &qword_10083C2F0, REMAlarm_ptr);
          v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v208, v209);

          if ((unint64_t)v61 >> 62)
            goto LABEL_120;
          v210 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v210)
            goto LABEL_124;
          goto LABEL_99;
        }
LABEL_117:
        ((void (*)(uint64_t, _QWORD *))v57[1])(v61, v48);
        goto LABEL_125;
      }
LABEL_77:
      sub_10000882C(v171, (uint64_t *)&unk_100841610);
      goto LABEL_78;
    }
LABEL_76:
    v171 = (uint64_t)v261;
    v173 = v282;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v50)(v261, 1, 1, v282);
    goto LABEL_77;
  }
  v281 = v45;
  v47 = (_QWORD *)sub_1002AF320((uint64_t)_swiftEmptyArrayStorage);
  v285 = *(id *)(v281 + 16);
  if (!v285)
  {
    v289 = v47;
    goto LABEL_29;
  }
  v257 = a1;
  v48 = (_QWORD *)(v281 + 64);
  swift_bridgeObjectRetain(v281);
  a1 = 1;
  v49 = v285;
  v50 = v46;
  while (1)
  {
    if (!v47)
      goto LABEL_5;
    v52 = *(v48 - 4);
    v53 = *(v48 - 2);
    v289 = (_QWORD *)*(v48 - 1);
    v28 = (char *)*v48;
    swift_bridgeObjectRetain_n(*v48, 2);
    v54 = objc_msgSend(v50, "hashtagContext", swift_bridgeObjectRetain(v53).n128_f64[0]);
    if (v54)
      break;
    swift_bridgeObjectRetain(v47);
    v77 = sub_10001A6DC((uint64_t)v289, (uint64_t)v28);
    v79 = v78;
    swift_bridgeObjectRelease();
    if ((v79 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v47);
      v290 = (unint64_t)v47;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002D6574();
        v47 = (_QWORD *)v290;
      }
      swift_bridgeObjectRelease();
      sub_100289B9C(v77, (uint64_t)v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v28, 2);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v28, 2);
    }
LABEL_5:
    if (v49 == (id)a1)
      goto LABEL_26;
LABEL_6:
    v48 += 5;
    v51 = __OFADD__(a1++, 1);
    if (v51)
    {
      __break(1u);
      goto LABEL_76;
    }
  }
  v55 = v54;
  v287 = v53;
  v56 = String._bridgeToObjectiveC()();
  v57 = (void (**)(char *, uint64_t, uint64_t, _QWORD *))objc_msgSend(v55, "addHashtagWithType:name:", v52, v56);

  v58 = objc_msgSend(v57, "objectIdentifier");
  v59 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
  v288 = v60;

  v61 = (uint64_t)v47;
  v62 = swift_isUniquelyReferenced_nonNull_native(v47);
  v290 = v61;
  v63 = (uint64_t)v289;
  v65 = sub_10001A6DC((uint64_t)v289, (uint64_t)v28);
  v66 = *(_QWORD *)(v61 + 16);
  v67 = (v64 & 1) == 0;
  v68 = v66 + v67;
  if (__OFADD__(v66, v67))
  {
    __break(1u);
    goto LABEL_117;
  }
  v69 = v64;
  if (*(_QWORD *)(v61 + 24) >= v68)
  {
    if ((v62 & 1) != 0)
    {
      v47 = (_QWORD *)v290;
      if ((v64 & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      v61 = (uint64_t)&v290;
      sub_1002D6574();
      v47 = (_QWORD *)v290;
      if ((v69 & 1) == 0)
        goto LABEL_13;
    }
    goto LABEL_21;
  }
  sub_1002CCF14(v68, v62);
  v61 = v290;
  v70 = sub_10001A6DC(v63, (uint64_t)v28);
  if ((v69 & 1) != (v71 & 1))
  {
LABEL_127:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }
  v65 = v70;
  v47 = (_QWORD *)v290;
  if ((v69 & 1) != 0)
  {
LABEL_21:
    v81 = (_QWORD *)(v47[7] + 16 * v65);
    swift_bridgeObjectRelease();
    v82 = v288;
    *v81 = v59;
    v81[1] = v82;
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease();
    v49 = v285;
    v50 = v286;
    if (v285 == (id)a1)
    {
LABEL_26:
      v289 = v47;
      *(_QWORD *)&v44 = swift_bridgeObjectRelease().n128_u64[0];
      a1 = v257;
      goto LABEL_30;
    }
    goto LABEL_6;
  }
LABEL_13:
  v47[(v65 >> 6) + 8] |= 1 << v65;
  v72 = (uint64_t *)(v47[6] + 16 * v65);
  *v72 = v63;
  v72[1] = (uint64_t)v28;
  v73 = (_QWORD *)(v47[7] + 16 * v65);
  v74 = v288;
  *v73 = v59;
  v73[1] = v74;
  v75 = v47[2];
  v51 = __OFADD__(v75, 1);
  v76 = v75 + 1;
  if (!v51)
  {
    v47[2] = v76;
    swift_bridgeObjectRetain(v28);
    goto LABEL_22;
  }
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  if (v61 < 0)
    v256 = v61;
  else
    v256 = v61 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v61);
  v210 = _CocoaArrayWrapper.endIndex.getter(v256);
  swift_bridgeObjectRelease();
  if (v210)
  {
LABEL_99:
    v281 = v61 & 0xC000000000000001;
    v211 = 4;
    v277 = v61;
    v279 = (char *)v210;
    while (1)
    {
      if (v281)
        v212 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v211 - 4, v61);
      else
        v212 = *(id *)(v61 + 8 * v211);
      v213 = v212;
      v59 = (_QWORD *)v280;
      v287 = v63;
      v214 = (char *)(v211 - 3);
      if (__OFADD__(v211 - 4, 1))
        goto LABEL_119;
      v215 = objc_msgSend(v212, "trigger");
      v216 = objc_opt_self(REMAlarmDateTrigger);
      v217 = swift_dynamicCastObjCClass(v215, v216);
      if (v217)
        break;

LABEL_101:
      ++v211;
      v59 = v286;
      v63 = v287;
      if (v214 == v279)
        goto LABEL_124;
    }
    v218 = (void *)v217;
    v283 = (uint64_t *)v215;
    v285 = v213;
    v219 = (void *)objc_opt_self(NSDateComponents);
    v220 = objc_msgSend(v218, "dateComponents");
    v221 = v275;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v220);

    v222 = DateComponents._bridgeToObjectiveC()().super.isa;
    v223 = (void (*)(char *, uint64_t))v59[1];
    v223(v221, v282);
    v224 = TimeZone._bridgeToObjectiveC()().super.isa;
    v225 = objc_msgSend(v219, "rem_dateWithDateComponents:timeZone:", v222, v224);

    if (v225)
    {
      v268 = (char *)v223;
      v226 = v272;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v225);

      v227 = v273;
      v228 = *(void (**)(char *, char *, uint64_t))(v273 + 32);
      v229 = (uint64_t)v270;
      v230 = v226;
      v231 = v276;
      v228(v270, v230, v276);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v227 + 56))(v229, 0, 1, v231);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v227 + 48))(v229, 1, v231) != 1)
      {
        v232 = v276;
        v228(v263, (char *)v229, v276);
        v233 = Date._bridgeToObjectiveC()().super.isa;
        v234 = TimeZone._bridgeToObjectiveC()().super.isa;
        v235 = objc_msgSend(v219, "rem_dateComponentsWithDate:timeZone:isAllDay:", v233, v234, 0);

        v236 = v262;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v235);

        v237 = DateComponents._bridgeToObjectiveC()().super.isa;
        v238 = v272;
        static Date.now.getter(v237);
        v239 = Date._bridgeToObjectiveC()().super.isa;
        v240 = v238;
        v241 = (void (*)(char *, uint64_t))v278;
        ((void (*)(char *, uint64_t))v278)(v240, v232);
        v242 = v286;
        objc_msgSend(v286, "nextRecurrentAdvanceAmountForDateComponents:afterDate:", v237, v239);
        v244 = v243;

        if (v244 <= 0.0)
        {

          ((void (*)(char *, uint64_t))v268)(v236, v282);
          v241(v263, v276);
        }
        else
        {
          v245 = v285;
          objc_msgSend(v242, "removeAlarm:", v285);
          v246 = objc_msgSend(v218, "dateComponents");
          if (!v246)
          {
            __break(1u);
            goto LABEL_127;
          }
          v247 = v246;
          v248 = objc_msgSend(v246, "rem_dateComponentsByAddingTimeInterval:", v244);

          v249 = v260;
          static DateComponents._unconditionallyBridgeFromObjectiveC(_:)(v248);

          v250 = objc_allocWithZone((Class)REMAlarmDateTrigger);
          v251 = DateComponents._bridgeToObjectiveC()().super.isa;
          v252 = objc_msgSend(v250, "initWithDateComponents:", v251);

          v253 = objc_msgSend(v242, "addAlarmWithTrigger:", v252);
          v254 = v282;
          v255 = v268;
          ((void (*)(char *, uint64_t))v268)(v249, v282);
          ((void (*)(char *, uint64_t))v255)(v262, v254);
          ((void (*)(char *, uint64_t))v278)(v263, v276);
        }
        goto LABEL_114;
      }
    }
    else
    {
      v229 = (uint64_t)v270;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v273 + 56))(v270, 1, 1, v276);
    }

    sub_10000882C(v229, (uint64_t *)&unk_1008380D0);
LABEL_114:
    v48 = v274;
    v61 = v277;
    goto LABEL_101;
  }
LABEL_124:
  swift_bridgeObjectRelease();
  ((void (*)(char *, _QWORD *))v269[1])(v271, v48);
LABEL_125:
  v128 = v284;
LABEL_91:
  v202 = a1 + v128[16];
  v203 = *(_QWORD *)(v202 + 8);
  if (v203 >> 60 == 15)
  {
    v204 = v288;
  }
  else
  {
    v205 = *(_QWORD *)v202;
    sub_1000A70E4(*(_QWORD *)v202, *(_QWORD *)(v202 + 8));
    v206 = Data._bridgeToObjectiveC()().super.isa;
    v204 = objc_msgSend((id)objc_opt_self(REMContactRepresentation), "representationFromData:", v206);

    objc_msgSend(v59, "setContactHandles:", v204);
    sub_1000A71B4(v205, v203);
  }

LABEL_95:
  swift_bridgeObjectRelease();
}

uint64_t sub_10048F4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100841610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10048F508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630((uint64_t *)&unk_100841610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10048F550(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "personID");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10048F5B4(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setPersonID:");

}

uint64_t sub_10048F610(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  void (*v17)(char *, char *, uint64_t);
  id v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(uint64_t, char *, uint64_t);
  id v41;
  uint64_t v42;
  id v43;
  char *v44;
  _QWORD v45[2];

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  v15 = objc_msgSend(a1, "identifier");
  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_5;
  }
  v16 = v15;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

  v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v17(v7, v12, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_5:

    swift_release(a2);
    sub_10011E85C((uint64_t)v7);
    return 0;
  }
  v39 = v12;
  v40 = (void (*)(uint64_t, char *, uint64_t))v17;
  v17(v14, v7, v8);
  v18 = objc_msgSend(a1, "accountTypeHost");
  v43 = v18;
  v19 = (_QWORD *)swift_allocObject(&unk_1007F5CD0, 48, 7);
  v44 = v14;
  v20 = v19;
  v19[2] = v18;
  v19[3] = a2;
  v19[4] = a1;
  v19[5] = v2;
  v21 = swift_allocObject(&unk_1007F5CF8, 24, 7);
  v22 = v2;
  v38 = v2;
  v23 = a2;
  v24 = v21;
  *(_QWORD *)(v21 + 16) = a1;
  v25 = swift_allocObject(&unk_1007F5D20, 24, 7);
  *(_QWORD *)(v25 + 16) = a1;
  v26 = swift_allocObject(&unk_1007F5D48, 24, 7);
  *(_QWORD *)(v26 + 16) = v22;
  v27 = swift_allocObject(&unk_1007F5D70, 24, 7);
  *(_QWORD *)(v27 + 16) = v22;
  v28 = swift_allocObject(&unk_1007F5D98, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_100490130;
  *(_QWORD *)(v28 + 24) = v20;
  v29 = a1;
  v30 = v23;
  v41 = v29;
  v31 = v43;
  v43 = v30;
  swift_retain(v30);
  swift_retain(v20);
  v42 = v27;
  REMAccountTypeHost.switchByAccountType<A>(primaryCloudKitBlock:nonPrimaryCloudKitBlock:calDavBlock:exchangeBlock:localBlock:localInternalBlock:anyCloudKitBlock:anyCloudAccountBlock:)(v45, 0, 0, 0, 0, sub_100490160, v24, sub_1004902C8, v25, sub_100490188, v26, sub_100490188, v27, sub_1004901CC, v28, 0, 0, &type metadata for String);
  swift_release(v24);
  swift_release(v25);
  swift_release(v26);
  swift_release(v42);
  swift_release(v28);
  swift_release(v20);

  v33 = v45[0];
  v34 = v45[1];
  v36 = v39;
  v35 = v40;
  v40((uint64_t)v39, v44, v8);
  v37 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  *(_QWORD *)(v37 + 16) = v33;
  *(_QWORD *)(v37 + 24) = v34;
  v35(v37 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_localUUID, v36, v8);
  *(_QWORD *)(v37 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_accountTypeHost) = v31;
  *(_QWORD *)(v37 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_persistenceHost) = v43;
  return v37;
}

id sub_10048FA34@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "type");
  *a2 = (_WORD)result;
  return result;
}

id sub_10048FA64(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setType:", *a1);
}

void sub_10048FA78(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = objc_msgSend(*a1, "personIDSalt_v1");
  if (v3)
  {
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10048FADC(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;
  Class v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = isa;
  objc_msgSend(v2, "setPersonIDSalt_v1:");

}

void sub_10048FB40()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006B6C10;
  *(_QWORD *)(v1 + 32) = swift_getKeyPath(&unk_1006BDE90);
  *(_QWORD *)(v1 + 40) = swift_getKeyPath(&unk_1006BDEC0);
  *(_QWORD *)(v1 + 48) = swift_getKeyPath(&unk_1006BDEF8);
  KeyPath = swift_getKeyPath(&unk_1006BDF30);
  *(_QWORD *)(v1 + 56) = KeyPath;
  specialized Array._endMutation()(KeyPath);
  if ((v1 & 0x8000000000000000) != 0 || (v1 & 0x4000000000000000) != 0)
  {
    v3 = (uint64_t)sub_1001E863C(v1);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v3 = v1 & 0xFFFFFFFFFFFFFF8;
  }
  qword_100871F58 = v3;
}

uint64_t sub_10048FC04()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("PRIMARY-CLOUDKIT"));
  qword_100871F60 = result;
  *(_QWORD *)algn_100871F68 = v1;
  return result;
}

uint64_t sub_10048FC30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  void *v7;

  sub_100017004();
  if ((static NSObject.== infix(_:_:)(a1) & 1) != 0)
  {
    if (qword_1008375C8 != -1)
      swift_once(&qword_1008375C8, sub_10048FC04);
    v5 = qword_100871F60;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100871F68);
  }
  else
  {
    v6 = objc_msgSend(a3, "personID");
    if (v6)
    {
      v7 = v6;
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_10048FD00(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(a1, "personID");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

uint64_t sub_10048FD70@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10048FD9C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_localUUID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_release(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_persistenceHost));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10048FE14()
{
  return type metadata accessor for RDAccountManualSortID(0);
}

uint64_t type metadata accessor for RDAccountManualSortID(uint64_t a1)
{
  uint64_t result;

  result = qword_10084C1A0;
  if (!qword_10084C1A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDAccountManualSortID);
  return result;
}

uint64_t sub_10048FE58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1006BDE18;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10048FEEC(uint64_t *a1, uint64_t *a2)
{
  return sub_100490254(*a1, *a2);
}

uint64_t sub_10048FEF8()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  __int128 v22;

  v1 = v0;
  _StringGuts.grow(_:)(90);
  v2._object = (void *)0x8000000100705720;
  v2._countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v2);
  v22 = *(_OWORD *)(v0 + 16);
  v3 = sub_10001A630((uint64_t *)&unk_10083A370);
  v4._countAndFlagsBits = Optional.descriptionOrNil.getter(v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x556C61636F6C202CLL;
  v5._object = (void *)0xED0000203A444955;
  String.append(_:)(v5);
  v7._countAndFlagsBits = UUID.uuidString.getter(v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x6E756F636361202CLL;
  v8._object = (void *)0xEF203A6570795474;
  String.append(_:)(v8);
  v9 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_accountTypeHost), "description", v22));
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x795474736F68202CLL;
  v14._object = (void *)0xEC000000203A6570;
  String.append(_:)(v14);
  v15 = objc_msgSend(*(id *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_persistenceHost) + 32), "description");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 15997;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  return 0;
}

uint64_t sub_1004900DC()
{
  return sub_10048FEF8();
}

uint64_t sub_1004900FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100490130()
{
  uint64_t v0;

  return sub_10048FC30(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10049013C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100490160(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_10048FD00(*(void **)(v1 + 16), a1);
}

uint64_t sub_100490178()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

double sub_100490188@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x6C61636F6CLL;
  *a1 = xmmword_1006BDDE0;
  return result;
}

uint64_t sub_100490198()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004901A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004901CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

id sub_100490200@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "type");
  *a2 = (_WORD)result;
  return result;
}

id sub_100490230(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setType:", *a1);
}

uint64_t sub_100490254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = v6 == v7 && v4 == v5;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, v7, v5, 0) & 1) != 0)
        return static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_localUUID, a2 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_localUUID);
    }
  }
  else if (!v5)
  {
    return static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_localUUID, a2 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_localUUID);
  }
  return 0;
}

void sub_1004902C8(uint64_t *a1@<X8>)
{
  sub_100490160(a1);
}

void sub_1004902E0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  char *v5;
  char *v6;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  double v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  void (*v74)(_QWORD, _QWORD, _QWORD);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  char *v79;
  _BYTE *v80;
  _QWORD *v81;
  void *v82;
  uint64_t ObjCClassFromMetadata;
  NSString v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  NSString v88;
  uint64_t v89;
  uint64_t *v90;
  void *v91;
  uint64_t v92;
  NSString v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  unint64_t v98;
  objc_class *v99;
  objc_class *v100;
  objc_class *v101;
  objc_class *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  void *v118;
  _QWORD *v119;
  unint64_t v120;
  id v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  __n128 v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v139;
  unint64_t v140;
  __n128 v141;
  uint64_t i;
  uint64_t v143;
  void (*v144)(unint64_t, uint64_t);
  unint64_t v145;
  void *v146;
  id v147;
  _BYTE *v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  char v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  int64_t v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  _BOOL8 v167;
  uint64_t v168;
  char v169;
  unint64_t v170;
  char v171;
  _QWORD *v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  unint64_t v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __n128 v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  __n128 v197;
  _QWORD *v198;
  __n128 v199;
  _QWORD *v200;
  __n128 v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  _BYTE *v212;
  unint64_t v213;
  _BYTE *v214;
  char *v215;
  unint64_t v216;
  __n128 v217;
  uint64_t v218;
  void (*v219)(unint64_t, uint64_t);
  unsigned int (*v220)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v221;
  _BYTE *v222;
  _QWORD *v223;
  _BYTE *v224;
  unint64_t v225;
  char v226;
  char v227;
  char v228;
  uint64_t v229;
  unint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  unint64_t v233;
  _BYTE *v234;
  int64_t v235;
  __n128 v236;
  _BYTE *v237;
  char v238;
  uint64_t v239;
  _BOOL8 v240;
  uint64_t v241;
  char v242;
  unint64_t v243;
  char v244;
  _QWORD *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  __n128 v249;
  uint64_t v250;
  id v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  id v256;
  void *v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int *v262;
  uint64_t *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _BYTE *v268;
  _QWORD *v269;
  _BYTE *v270;
  _BYTE *v271;
  _BYTE *v272;
  _BYTE *v273;
  _QWORD *v274;
  unint64_t v275;
  _QWORD *v276;
  _BYTE *v277;
  _QWORD *v278;
  __n128 v279;
  _BYTE v280[4];
  int v281;
  uint64_t v282;
  char *v283;
  _QWORD *v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  id v294;
  uint64_t v295;
  void *v296;
  unint64_t v297;
  uint64_t v298;
  char *v299;
  _BYTE *v300;
  void *v301;
  _BYTE *v302;
  char *v303;
  _BYTE *v304;
  uint64_t v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  void (*v309)(_QWORD, _QWORD, _QWORD);
  _BYTE *v310;
  _BYTE *v311;
  _BYTE *v312;
  _BYTE *v313;
  _BYTE *v314;
  _BYTE *v315;
  uint64_t v316;
  uint64_t v317;
  _BYTE *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  _QWORD *Subtasks;
  _BYTE *v323;
  id v324;
  _BYTE *v325;
  uint64_t v326;
  _BYTE *v327;
  _BYTE *v328;
  _BYTE *v329;
  _BYTE *v330;
  _BYTE *v331;
  unint64_t v332;
  char *v333;
  _BYTE *v334;
  _BYTE *v335;
  _BYTE *v336;
  char *v337;
  _BYTE *v338;
  _BYTE *v339;
  _QWORD *v340;
  _QWORD *v341;
  _QWORD *v342;
  void *v343;
  _BYTE *v344;
  _BYTE *v345;
  _QWORD *v346;
  uint64_t v347;

  v6 = v5;
  v305 = a4;
  v301 = a3;
  ObjectType = swift_getObjectType(v5);
  v316 = sub_10001A630(&qword_100849710);
  __chkstk_darwin(v316);
  v315 = &v280[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v323 = &v280[-v13];
  __chkstk_darwin(v14);
  v314 = &v280[-v15];
  v317 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v337 = *(char **)(v317 - 8);
  __chkstk_darwin(v317);
  v302 = &v280[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v335 = &v280[-v18];
  v326 = type metadata accessor for UUID(0);
  v332 = *(_QWORD *)(v326 - 8);
  __chkstk_darwin(v326);
  v328 = &v280[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v334 = &v280[-v21];
  __chkstk_darwin(v22);
  v339 = &v280[-v23];
  __chkstk_darwin(v24);
  v331 = &v280[-v25];
  __chkstk_darwin(v26);
  v327 = &v280[-v27];
  __chkstk_darwin(v28);
  v338 = &v280[-v29];
  __chkstk_darwin(v30);
  v300 = &v280[-v31];
  __chkstk_darwin(v32);
  v304 = &v280[-v33];
  __chkstk_darwin(v34);
  v336 = &v280[-v35];
  v308 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v307 = *(_QWORD *)(v308 - 8);
  __chkstk_darwin(v308);
  v310 = &v280[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v37);
  v325 = &v280[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v39);
  v329 = &v280[-v40];
  __chkstk_darwin(v41);
  v330 = &v280[-v42];
  __chkstk_darwin(v43);
  v318 = &v280[-v44];
  __chkstk_darwin(v45);
  v333 = &v280[-v46];
  __chkstk_darwin(v47);
  v306 = &v280[-v48];
  v50 = __chkstk_darwin(v49);
  v312 = &v280[-v51];
  v319 = type metadata accessor for REMRemindersListDataView.SectionLite(0, v50);
  v320 = *(_QWORD *)(v319 - 8);
  __chkstk_darwin(v319);
  v313 = &v280[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v53 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v53);
  v55 = &v280[-((v54 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v56 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v56);
  v58 = &v280[-((v57 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v59);
  v311 = &v280[-v60];
  Subtasks = (_QWORD *)type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v61 = (_BYTE *)*(Subtasks - 1);
  *(_QWORD *)&v62 = __chkstk_darwin(Subtasks).n128_u64[0];
  v321 = (uint64_t)&v280[-((v63 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v324 = objc_msgSend(v6, "storeControllerManagedObjectContext", v62);
  if (!v324)
  {
    v82 = (void *)objc_opt_self(REMError);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
    v84 = String._bridgeToObjectiveC()();
    objc_msgSend(v82, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v84);

    swift_willThrow(v85);
    return;
  }
  v303 = (char *)objc_msgSend(v6, "remObjectID");
  if (!v303)
  {
    v86 = (void *)objc_opt_self(REMError);
    v87 = swift_getObjCClassFromMetadata(ObjectType);
    v88 = String._bridgeToObjectiveC()();
    objc_msgSend(v86, "unexpectedNilPropertyWithClass:property:", v87, v88);

    swift_willThrow(v89);
    v90 = &v347;
LABEL_12:

    return;
  }
  v293 = a2;
  v64 = objc_msgSend(v6, "name");
  if (!v64)
  {
    v91 = (void *)objc_opt_self(REMError);
    v92 = swift_getObjCClassFromMetadata(ObjectType);
    v93 = String._bridgeToObjectiveC()();
    objc_msgSend(v91, "unexpectedNilPropertyWithClass:property:", v92, v93);

    swift_willThrow(v94);
    v90 = (uint64_t *)&v335;
    goto LABEL_12;
  }
  v65 = v64;
  v292 = ObjectType;
  v298 = a1;
  v288 = a5;
  v287 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  v295 = v66;

  v67 = objc_msgSend(v6, "sortingStyle");
  if (!v67
    || (v68 = v67,
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67),
        v71 = v70,
        v68,
        (v72 = (id)REMSortingStyle.init(stringValue:)(v69, v71)) == 0))
  {
    v72 = REMSortingStyleDefault;
  }
  v73 = v72;
  v74 = v309;
  v346 = _swiftEmptyArrayStorage;
  v344 = &_swiftEmptyDictionarySingleton;
  v345 = &_swiftEmptyDictionarySingleton;
  v342 = _swiftEmptyArrayStorage;
  v343 = &_swiftEmptyDictionarySingleton;
  v297 = sub_1002B0F08((uint64_t)_swiftEmptyArrayStorage);
  v309 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v296 = objc_autoreleasePoolPush();
  v75 = v321;
  (*((void (**)(uint64_t, _QWORD, _QWORD *))v61 + 13))(v321, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
  v294 = v73;
  REMSortingStyle.dataViewSortingStyle.getter(v73);
  v76 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v77 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 104))(v58, v76, v77);
  swift_storeEnumTagMultiPayload(v58, v56, 2);
  v78 = v311;
  sub_1004957D0((uint64_t)v55, (uint64_t)v58, (uint64_t)v311);
  v79 = v303;
  v80 = sub_1001D6E14((uint64_t)v303, v324, v75, (uint64_t)v78);
  if (v74)
  {
    v81 = v309;
LABEL_17:
    sub_10001C744((uint64_t)v78, _s9UtilitiesO12SortingStyleOMa);
    (*((void (**)(uint64_t, _QWORD *))v61 + 1))(v321, Subtasks);
    objc_autoreleasePoolPop(v296);
    v106 = v342;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v297);
    swift_bridgeObjectRelease(v81);

    swift_bridgeObjectRelease(v295);
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v343);
    swift_bridgeObjectRelease(v344);
    swift_bridgeObjectRelease(v345);
    swift_bridgeObjectRelease(v346);
    return;
  }
  v95 = v80;
  v96 = 0;
  v97 = qword_1008372C0;
  v283 = v79;
  v98 = (unint64_t)v79;
  if (v97 != -1)
    goto LABEL_142;
LABEL_14:
  v99 = (objc_class *)qword_100871E70;
  sub_1003746B0();
  v101 = v100;
  v102 = (objc_class *)sub_100374B40();
  v103 = sub_100374DD8(v98, 1, (uint64_t)v324, v99, v101, v102);
  v81 = v309;
  if (v96)
  {
    swift_bridgeObjectRelease(v95);

    swift_bridgeObjectRelease(v101);
    swift_bridgeObjectRelease(v102);
    v79 = v303;
    v78 = v311;
    goto LABEL_17;
  }
  v104 = v103;
  swift_bridgeObjectRelease(v101);
  swift_bridgeObjectRelease(v102);
  v105 = (_QWORD *)sub_1001DFF24(v104);
  swift_bridgeObjectRelease(v104);
  v107 = sub_1001327A0(v105, (uint64_t)v95);
  v282 = 0;
  swift_bridgeObjectRelease(v95);

  swift_bridgeObjectRelease(v105);
  sub_10001C744((uint64_t)v311, _s9UtilitiesO12SortingStyleOMa);
  (*((void (**)(uint64_t, _QWORD *))v61 + 1))(v321, Subtasks);
  objc_autoreleasePoolPop(v296);
  v108 = *(char **)(v107 + 16);
  v299 = v6;
  v289 = v108;
  if (v108)
  {
    v109 = 0;
    v110 = *(unsigned __int8 *)(v320 + 80);
    v290 = v107;
    v286 = v107 + ((v110 + 32) & ~v110);
    v285 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:);
    v281 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:);
    v284 = _swiftEmptyArrayStorage;
    v111 = v326;
    v96 = v335;
    v61 = v310;
    v112 = v313;
    v95 = (_BYTE *)v317;
    while (1)
    {
      if (v109 >= *(_QWORD *)(v290 + 16))
      {
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        swift_once(&qword_1008372C0, sub_100374590);
        goto LABEL_14;
      }
      v113 = *(_QWORD *)(v320 + 72);
      v303 = (char *)v109;
      v114 = (*(uint64_t (**)(_BYTE *, unint64_t, uint64_t))(v320 + 16))(v112, v286 + v113 * v109, v319);
      REMRemindersListDataView.SectionLite.type.getter(v114);
      v115 = v307;
      v116 = v308;
      v117 = (*(uint64_t (**)(_BYTE *, uint64_t))(v307 + 88))(v61, v308);
      if (v117 == v285)
      {
        (*(void (**)(_BYTE *, unint64_t))(v115 + 96))(v61, v116);
        v118 = *(void **)v61;
        v119 = v61;
        v120 = v332;
        v296 = (void *)v119[1];
        v321 = v119[2];
        v121 = objc_msgSend(v118, "uuid", swift_bridgeObjectRelease(v119[4]).n128_f64[0]);
        v122 = v312;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v121);

        v96 = v335;
        Subtasks = *(_QWORD **)(v120 + 56);
        v123 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t, uint64_t))Subtasks)(v122, 0, 1, v111);
      }
      else
      {
        if (v117 != v281)
          goto LABEL_145;
        v120 = v332;
        v122 = v312;
        Subtasks = *(_QWORD **)(v332 + 56);
        v123 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t))Subtasks)(v312, 1, 1, v111);
        v296 = 0;
        v321 = 0;
      }
      v124 = v313;
      v125 = REMRemindersListDataView.SectionLite.reminders.getter(v123);
      swift_bridgeObjectRetain(v125);
      sub_1001E23F0(v126);
      v127 = (uint64_t)v122;
      v128 = (uint64_t)v122;
      v98 = (unint64_t)v306;
      sub_10011D420(v127, (uint64_t)v306);
      v311 = *(_BYTE **)(v120 + 48);
      if (((unsigned int (*)(unint64_t, uint64_t, uint64_t))v311)(v98, 1, v111) == 1)
      {
        swift_bridgeObjectRelease(v125);
        swift_bridgeObjectRelease(v321);
        sub_10000882C(v128, (uint64_t *)&unk_100839C80);
        (*(void (**)(_BYTE *, uint64_t))(v320 + 8))(v124, v319);
        sub_10000882C(v98, (uint64_t *)&unk_100839C80);
        v61 = v310;
        v112 = v124;
      }
      else
      {
        v291 = v125;
        v129 = v336;
        v309 = *(void (**)(_QWORD, _QWORD, _QWORD))(v120 + 32);
        v309(v336, v98, v111);
        v98 = v321;
        if (v321)
        {
          v130 = (unint64_t)v284;
          v6 = v299;
          if (v284)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v332 + 16))(v304, v336, v111);
            if ((swift_isUniquelyReferenced_nonNull_native(v130) & 1) == 0)
              v130 = sub_1002C8EC4(0, *(_QWORD *)(v130 + 16) + 1, 1, v130);
            v284 = (_QWORD *)v130;
            v132 = *(_QWORD *)(v130 + 16);
            v131 = *(_QWORD *)(v130 + 24);
            if (v132 >= v131 >> 1)
              v284 = (_QWORD *)sub_1002C8EC4(v131 > 1, v132 + 1, 1, (unint64_t)v284);
            v133 = v284;
            v284[2] = v132 + 1;
            v309((char *)v133+ ((*(unsigned __int8 *)(v332 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v332 + 80))+ *(_QWORD *)(v332 + 72) * v132, v304, v111);
            v96 = v335;
          }
          else
          {
            v284 = 0;
          }
          v135 = v297;
          if (v297)
          {
            v136 = v332;
            v137 = (uint64_t)v300;
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v332 + 16))(v300, v336, v111);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v135);
            v341 = (_QWORD *)v135;
            v139 = v136;
            v96 = v335;
            sub_10028D440((uint64_t)v296, v98, v137, isUniquelyReferenced_nonNull_native);
            v140 = v139;
            v297 = (unint64_t)v341;
            v141 = swift_bridgeObjectRelease(0x8000000000000000);
            (*(void (**)(uint64_t, uint64_t, __n128))(v139 + 8))(v137, v111, v141);
          }
          else
          {
            swift_bridgeObjectRelease(v98);
            v297 = 0;
            v140 = v332;
          }
          v61 = *(_BYTE **)(v291 + 16);
          if (v61)
          {
            v116 = v291 + ((v337[80] + 32) & ~(unint64_t)v337[80]);
            v321 = *((_QWORD *)v337 + 9);
            v6 = (char *)*((_QWORD *)v337 + 2);
            for (i = ((uint64_t (*)(_BYTE *, unint64_t, _BYTE *))v6)(v96, v116, v95);
                  ;
                  i = ((uint64_t (*)(_BYTE *, unint64_t, _BYTE *))v6)(v96, v116, v95))
            {
              if (!v81)
                goto LABEL_45;
              v145 = v140;
              v146 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(i);
              v147 = objc_msgSend(v146, "uuid");

              v148 = v338;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v147);

              v96 = *(_BYTE **)(v145 + 16);
              v149 = (uint64_t)v333;
              ((void (*)(char *, _BYTE *, uint64_t))v96)(v333, v336, v111);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))Subtasks)(v149, 0, 1, v111);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v311)(v149, 1, v111) != 1)
                break;
              sub_10000882C(v149, (uint64_t *)&unk_100839C80);
              swift_bridgeObjectRetain(v81);
              v150 = sub_1002C65F8((uint64_t)v148);
              v152 = v151;
              swift_bridgeObjectRelease(v81);
              if ((v152 & 1) != 0)
              {
                v153 = swift_isUniquelyReferenced_nonNull_native(v81);
                v341 = v81;
                if ((v153 & 1) == 0)
                {
                  sub_1002D712C();
                  v81 = v341;
                }
                v154 = v81[6];
                v155 = v332;
                v156 = *(_QWORD *)(v332 + 72) * v150;
                v144 = *(void (**)(unint64_t, uint64_t))(v332 + 8);
                v144(v154 + v156, v111);
                v157 = (uint64_t)v341;
                v158 = v341[7] + v156;
                v143 = (uint64_t)v318;
                v309(v318, v158, v111);
                v159 = v150;
                v98 = v155;
                v81 = (_QWORD *)v157;
                sub_10028A1C4(v159, v157);
                v160 = swift_bridgeObjectRelease(0x8000000000000000);
                ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))Subtasks)(v143, 0, 1, v111, v160);
                v95 = (_BYTE *)v317;
              }
              else
              {
                v143 = (uint64_t)v318;
                ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))Subtasks)(v318, 1, 1, v111);
                v98 = v332;
                v144 = *(void (**)(unint64_t, uint64_t))(v332 + 8);
              }
              v144((unint64_t)v338, v111);
              sub_10000882C(v143, (uint64_t *)&unk_100839C80);
              v96 = v335;
              v140 = v98;
LABEL_45:
              (*((void (**)(_BYTE *, _BYTE *))v337 + 1))(v96, v95);
              v116 += v321;
              if (!--v61)
              {
                v178 = swift_bridgeObjectRelease(v291);
                v6 = v299;
                goto LABEL_67;
              }
            }
            v309(v327, v149, v111);
            v161 = swift_isUniquelyReferenced_nonNull_native(v81);
            v162 = (uint64_t)v148;
            v163 = v81;
            v164 = v161;
            v341 = v163;
            v98 = sub_1002C65F8(v162);
            v166 = v163[2];
            v167 = (v165 & 1) == 0;
            v168 = v166 + v167;
            if (__OFADD__(v166, v167))
            {
LABEL_138:
              __break(1u);
              goto LABEL_139;
            }
            v169 = v165;
            if (v163[3] >= v168)
            {
              if ((v164 & 1) != 0)
              {
                v172 = v341;
                if ((v165 & 1) == 0)
                  goto LABEL_57;
              }
              else
              {
                sub_1002D712C();
                v172 = v341;
                if ((v169 & 1) == 0)
                  goto LABEL_57;
              }
            }
            else
            {
              sub_1002CEEEC(v168, v164);
              v170 = sub_1002C65F8((uint64_t)v338);
              if ((v169 & 1) != (v171 & 1))
                goto LABEL_144;
              v98 = v170;
              v172 = v341;
              if ((v169 & 1) == 0)
              {
LABEL_57:
                v172[(v98 >> 6) + 8] |= 1 << v98;
                v98 *= *(_QWORD *)(v332 + 72);
                v111 = v326;
                ((void (*)(unint64_t, _BYTE *, uint64_t))v96)(v172[6] + v98, v338, v326);
                v309(v172[7] + v98, v327, v111);
                v173 = v172[2];
                v174 = __OFADD__(v173, 1);
                v175 = v173 + 1;
                if (v174)
                  goto LABEL_140;
                v172[2] = v175;
                v140 = v332;
                goto LABEL_62;
              }
            }
            v176 = v172[7] + *(_QWORD *)(v332 + 72) * v98;
            v140 = v332;
            v111 = v326;
            (*(void (**)(unint64_t, _BYTE *, uint64_t))(v332 + 40))(v176, v327, v326);
LABEL_62:
            v96 = v335;
            v81 = v341;
            v177 = swift_bridgeObjectRelease(0x8000000000000000);
            (*(void (**)(_BYTE *, uint64_t, __n128))(v140 + 8))(v338, v111, v177);
            goto LABEL_45;
          }
          v178 = swift_bridgeObjectRelease(v291);
LABEL_67:
          (*(void (**)(_BYTE *, uint64_t, __n128))(v140 + 8))(v336, v111, v178);
          sub_10000882C((uint64_t)v312, (uint64_t *)&unk_100839C80);
          v112 = v313;
          (*(void (**)(_BYTE *, uint64_t))(v320 + 8))(v313, v319);
          v61 = v310;
          goto LABEL_22;
        }
        v134 = swift_bridgeObjectRelease(v291);
        (*(void (**)(_BYTE *, uint64_t, __n128))(v120 + 8))(v129, v111, v134);
        sub_10000882C((uint64_t)v312, (uint64_t *)&unk_100839C80);
        v112 = v313;
        (*(void (**)(_BYTE *, uint64_t))(v320 + 8))(v313, v319);
        v61 = v310;
      }
      v6 = v299;
LABEL_22:
      v109 = (unint64_t)(v303 + 1);
      if (v303 + 1 == v289)
      {
        v309 = (void (*)(_QWORD, _QWORD, _QWORD))v81;
        v179 = swift_bridgeObjectRelease(v290);
        goto LABEL_70;
      }
    }
  }
  v179 = swift_bridgeObjectRelease(v107);
  v284 = _swiftEmptyArrayStorage;
  v111 = v326;
  v95 = (_BYTE *)v317;
LABEL_70:
  v341 = 0;
  v180 = v342[2];
  v181 = v298;
  if (v180)
  {
    v182 = v337[80];
    v338 = v342;
    v183 = (char *)v342 + ((v182 + 32) & ~v182);
    v184 = v95;
    v185 = *((_QWORD *)v337 + 9);
    v61 = (_BYTE *)*((_QWORD *)v337 + 2);
    v186 = (uint64_t)v302;
    ((void (*)(_BYTE *, char *, _BYTE *, __n128))v61)(v302, v183, v184, v179);
    while (1)
    {
      v189 = v305;
      if ((uint64_t)v341 < v305)
      {
        v98 = (unint64_t)objc_autoreleasePoolPush();
        v190 = v282;
        sub_100492208(v186, (uint64_t)v324, &v346, (uint64_t)&v344, v301, (uint64_t *)&v343, &v341, v189, &v345, v292);
        v282 = v190;
        if (v190)
        {
          objc_autoreleasePoolPop((void *)v98);
          swift_bridgeObjectRelease(v295);

          v279 = swift_bridgeObjectRelease(v338);
          (*((void (**)(_BYTE *, uint64_t, __n128))v337 + 1))(v302, v317, v279);
          swift_bridgeObjectRelease(v309);
          swift_bridgeObjectRelease(v297);
          swift_bridgeObjectRelease(v284);
          swift_bridgeObjectRelease(v343);
          swift_bridgeObjectRelease(v344);
          swift_bridgeObjectRelease(v345);
          v278 = v346;
LABEL_135:
          swift_bridgeObjectRelease(v278);
          return;
        }
        objc_autoreleasePoolPop((void *)v98);
        v186 = (uint64_t)v302;
      }
      v187 = v317;
      (*((void (**)(uint64_t, uint64_t))v337 + 1))(v186, v317);
      v183 += v185;
      if (!--v180)
        break;
      ((void (*)(uint64_t, char *, uint64_t, __n128))v61)(v186, v183, v187, v188);
    }
    swift_bridgeObjectRelease(v338);
    v181 = v298;
    v111 = v326;
  }
  else
  {
    swift_bridgeObjectRelease(v342);
  }
  v96 = v346;
  v191 = v344;
  v95 = v345;
  v116 = (unint64_t)v343;
  swift_bridgeObjectRetain(v309);
  swift_bridgeObjectRetain_n(v95, 2);
  v311 = v96;
  swift_bridgeObjectRetain(v96);
  v312 = v191;
  swift_bridgeObjectRetain(v191);
  v313 = (_BYTE *)v116;
  swift_bridgeObjectRetain(v116);
  swift_bridgeObjectRetain(v284);
  swift_bridgeObjectRetain(v297);
  v192 = sub_1002B01C8((uint64_t)_swiftEmptyArrayStorage);
  v193 = *((_QWORD *)v95 + 8);
  v317 = (uint64_t)(v95 + 64);
  v194 = 1 << v95[32];
  v195 = -1;
  if (v194 < 64)
    v195 = ~(-1 << v194);
  v196 = v195 & v193;
  v318 = (_BYTE *)((unint64_t)(v194 + 63) >> 6);
  v197 = swift_bridgeObjectRetain(v95);
  v198 = 0;
  v319 = (uint64_t)v95;
  while (1)
  {
    v336 = (_BYTE *)v192;
    if (v196)
    {
      v321 = (v196 - 1) & v196;
      Subtasks = v198;
      v202 = __clz(__rbit64(v196)) | ((_QWORD)v198 << 6);
      goto LABEL_98;
    }
    v174 = __OFADD__(v198, 1);
    v203 = (uint64_t)v198 + 1;
    if (v174)
      goto LABEL_141;
    if (v203 >= (uint64_t)v318)
    {
LABEL_127:
      swift_release(v95);
      v339 = objc_msgSend(v6, "color", swift_bridgeObjectRelease(v95).n128_f64[0]);
      v251 = objc_msgSend(v6, "badgeEmblem");
      if (v251)
      {
        v252 = v251;
        v253 = v181;
        v338 = (_BYTE *)static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
        v255 = v254;

      }
      else
      {
        v253 = v181;
        v338 = 0;
        v255 = 0;
      }
      v256 = objc_msgSend(v6, "sortingStyle");
      if (v256)
      {
        v257 = v256;
        v258 = v95;
        v259 = static String._unconditionallyBridgeFromObjectiveC(_:)(v256);
        v261 = v260;

      }
      else
      {
        v258 = v95;

        v259 = 0;
        v261 = 0;
      }
      v262 = (int *)type metadata accessor for RDPublicTemplate(0);
      v263 = v288;
      (*(void (**)(char *, uint64_t, uint64_t))(v332 + 16))((char *)v288 + v262[8], v253, v326);
      v264 = (char *)v263 + v262[9];
      v265 = type metadata accessor for Date(0);
      v266 = *(_QWORD *)(v265 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v266 + 16))(v264, v293, v265);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v266 + 56))(v264, 0, 1, v265);
      v267 = v295;
      *v263 = v287;
      v263[1] = v267;
      v268 = v338;
      v263[2] = (uint64_t)v339;
      v263[3] = (uint64_t)v268;
      v263[4] = v255;
      v263[5] = v259;
      v263[6] = v261;
      v269 = (uint64_t *)((char *)v263 + v262[10]);
      v270 = v311;
      *v269 = v311;
      v269[1] = v258;
      v271 = v258;
      v272 = v312;
      v273 = v313;
      v269[2] = v312;
      v269[3] = v273;
      v274 = v284;
      v275 = v297;
      v269[4] = v284;
      v269[5] = v275;
      v276 = v309;
      v277 = v336;
      v269[6] = v309;
      v269[7] = v277;
      swift_bridgeObjectRelease(v270);
      swift_bridgeObjectRelease(v271);
      swift_bridgeObjectRelease(v272);
      swift_bridgeObjectRelease(v273);
      swift_bridgeObjectRelease(v274);
      swift_bridgeObjectRelease(v275);
      v278 = v276;
      goto LABEL_135;
    }
    v204 = *(_QWORD *)(v317 + 8 * v203);
    if (!v204)
      break;
LABEL_97:
    v321 = (v204 - 1) & v204;
    Subtasks = (_QWORD *)v203;
    v202 = __clz(__rbit64(v204)) + (v203 << 6);
LABEL_98:
    v206 = *((_QWORD *)v95 + 6);
    v98 = v332;
    v335 = *(_BYTE **)(v332 + 72);
    v61 = *(_BYTE **)(v332 + 16);
    v207 = (uint64_t)v314;
    ((void (*)(_BYTE *, unint64_t, uint64_t, __n128))v61)(v314, v206 + (_QWORD)v335 * v202, v111, v197);
    v208 = *(_QWORD *)(*((_QWORD *)v95 + 7) + 8 * v202);
    v209 = v316;
    *(_QWORD *)(v207 + *(int *)(v316 + 48)) = v208;
    v210 = v323;
    sub_100492C58(v207, (uint64_t)v323);
    v211 = *(int *)(v209 + 48);
    v212 = v315;
    v327 = v61;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v61)(v315, v210, v111);
    v213 = *(_QWORD *)&v210[v211];
    v214 = *(_BYTE **)(v98 + 32);
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v214)(v331, v212, v111);
    v215 = *(char **)(v213 + 16);
    v320 = v213;
    if (v215)
    {
      v333 = v214;
      v216 = v213 + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
      swift_bridgeObjectRetain_n(v213, 2);
      v217 = swift_bridgeObjectRetain(v208);
      v61 = v334;
      v96 = v330;
      v200 = (_QWORD *)v98;
      v98 = (unint64_t)v327;
      ((void (*)(_BYTE *, unint64_t, uint64_t, __n128))v327)(v330, v216, v111, v217);
      while (1)
      {
        v95 = (_BYTE *)v200[7];
        ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v95)(v96, 0, 1, v111);
        v220 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v200[6];
        if (v220(v96, 1, v111) == 1)
          break;
        v337 = v215;
        v221 = v96;
        v222 = v339;
        v6 = v333;
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v333)(v339, v221, v111);
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v98)(v61, v222, v111);
        v96 = v329;
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v98)(v329, v331, v111);
        v338 = v95;
        ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v95)(v96, 0, 1, v111);
        if (v220(v96, 1, v111) == 1)
        {
          v223 = v200;
          sub_10000882C((uint64_t)v96, (uint64_t *)&unk_100839C80);
          v224 = v336;
          swift_bridgeObjectRetain(v336);
          v225 = sub_1002C65F8((uint64_t)v61);
          v227 = v226;
          swift_bridgeObjectRelease(v224);
          if ((v227 & 1) != 0)
          {
            v228 = swift_isUniquelyReferenced_nonNull_native(v224);
            v340 = v224;
            v6 = v337;
            v95 = v338;
            if ((v228 & 1) == 0)
            {
              sub_1002D712C();
              v224 = v340;
            }
            v229 = *((_QWORD *)v224 + 6);
            v230 = v225 * (_QWORD)v335;
            v231 = (_QWORD *)v332;
            v219 = *(void (**)(unint64_t, uint64_t))(v332 + 8);
            v219(v229 + v225 * (_QWORD)v335, v111);
            v232 = (uint64_t)v340;
            v233 = v340[7] + v230;
            v234 = v325;
            ((void (*)(_BYTE *, unint64_t, uint64_t))v333)(v325, v233, v111);
            v235 = v225;
            v218 = (uint64_t)v234;
            v200 = v231;
            v336 = (_BYTE *)v232;
            sub_10028A1C4(v235, v232);
            v236 = swift_bridgeObjectRelease(0x8000000000000000);
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))v95)(v218, 0, 1, v111, v236);
          }
          else
          {
            v218 = (uint64_t)v325;
            v95 = v338;
            ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v338)(v325, 1, 1, v111);
            v200 = v223;
            v219 = (void (*)(unint64_t, uint64_t))v223[1];
            v6 = v337;
          }
          v61 = v334;
          v219((unint64_t)v334, v111);
          sub_10000882C(v218, (uint64_t *)&unk_100839C80);
          v98 = (unint64_t)v327;
        }
        else
        {
          ((void (*)(_BYTE *, _BYTE *, uint64_t))v6)(v328, v96, v111);
          v237 = v336;
          v98 = swift_isUniquelyReferenced_nonNull_native(v336);
          v340 = v237;
          v116 = sub_1002C65F8((uint64_t)v61);
          v239 = *((_QWORD *)v237 + 2);
          v240 = (v238 & 1) == 0;
          v241 = v239 + v240;
          if (__OFADD__(v239, v240))
          {
            __break(1u);
LABEL_137:
            __break(1u);
            goto LABEL_138;
          }
          v242 = v238;
          if (*((_QWORD *)v237 + 3) >= v241)
          {
            v6 = v337;
            v95 = v338;
            if ((v98 & 1) == 0)
              sub_1002D712C();
          }
          else
          {
            sub_1002CEEEC(v241, v98);
            v243 = sub_1002C65F8((uint64_t)v334);
            v6 = v337;
            v95 = v338;
            if ((v242 & 1) != (v244 & 1))
              goto LABEL_144;
            v116 = v243;
          }
          v96 = (_BYTE *)v332;
          v98 = (unint64_t)v327;
          v245 = v340;
          if ((v242 & 1) != 0)
          {
            v200 = (_QWORD *)v332;
            v111 = v326;
            (*(void (**)(unint64_t, _BYTE *, uint64_t))(v332 + 40))(v340[7] + v116 * (_QWORD)v335, v328, v326);
          }
          else
          {
            v340[(v116 >> 6) + 8] |= 1 << v116;
            v246 = v116 * (_QWORD)v335;
            v111 = v326;
            ((void (*)(unint64_t, _BYTE *, uint64_t))v98)(v245[6] + v246, v334, v326);
            ((void (*)(unint64_t, _BYTE *, uint64_t))v333)(v245[7] + v246, v328, v111);
            v247 = v245[2];
            v174 = __OFADD__(v247, 1);
            v248 = v247 + 1;
            if (v174)
              goto LABEL_137;
            v245[2] = v248;
            v200 = v96;
          }
          v336 = v340;
          v249 = swift_bridgeObjectRelease(0x8000000000000000);
          v219 = (void (*)(unint64_t, uint64_t))v200[1];
          v61 = v334;
          ((void (*)(_BYTE *, uint64_t, __n128))v219)(v334, v111, v249);
        }
        v219((unint64_t)v339, v111);
        v216 += (unint64_t)v335;
        v215 = v6 - 1;
        v96 = v330;
        if (!v215)
          goto LABEL_83;
        ((void (*)(_BYTE *, unint64_t, uint64_t, __n128))v98)(v330, v216, v111, v199);
      }
    }
    else
    {
      swift_bridgeObjectRetain_n(v213, 2);
      v199 = swift_bridgeObjectRetain(v208);
      v95 = *(_BYTE **)(v98 + 56);
      v96 = v330;
      v200 = (_QWORD *)v98;
LABEL_83:
      ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))v95)(v96, 1, 1, v111, v199);
    }
    v116 = v320;
    v201 = swift_bridgeObjectRelease(v320);
    ((void (*)(_BYTE *, uint64_t, __n128))v200[1])(v331, v111, v201);
    swift_bridgeObjectRelease(v116);
    sub_10000882C((uint64_t)v323, &qword_100849710);
    v181 = v298;
    v6 = v299;
    v95 = (_BYTE *)v319;
    v192 = (unint64_t)v336;
    v198 = Subtasks;
    v196 = v321;
  }
  v205 = v203 + 1;
  if (v203 + 1 >= (uint64_t)v318)
    goto LABEL_127;
  v204 = *(_QWORD *)(v317 + 8 * v205);
  if (v204)
    goto LABEL_96;
  v205 = v203 + 2;
  if (v203 + 2 >= (uint64_t)v318)
    goto LABEL_127;
  v204 = *(_QWORD *)(v317 + 8 * v205);
  if (v204)
    goto LABEL_96;
  v205 = v203 + 3;
  if (v203 + 3 >= (uint64_t)v318)
    goto LABEL_127;
  v204 = *(_QWORD *)(v317 + 8 * v205);
  if (v204)
  {
LABEL_96:
    v203 = v205;
    goto LABEL_97;
  }
  v250 = v203 + 4;
  if (v203 + 4 >= (uint64_t)v318)
    goto LABEL_127;
  v204 = *(_QWORD *)(v317 + 8 * v250);
  v203 += 4;
  if (v204)
    goto LABEL_97;
  while (1)
  {
    v203 = v250 + 1;
    if (__OFADD__(v250, 1))
      break;
    if (v203 >= (uint64_t)v318)
      goto LABEL_127;
    v204 = *(_QWORD *)(v317 + 8 * v203);
    ++v250;
    if (v204)
      goto LABEL_97;
  }
  __break(1u);
LABEL_144:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v326);
  __break(1u);
LABEL_145:
  _diagnoseUnexpectedEnumCase<A>(type:)(v116, v116);
  __break(1u);
}

void sub_100492208(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, void *a5, uint64_t *a6, _QWORD *a7, uint64_t a8, _QWORD *a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t *v58;
  char v59;
  _QWORD *v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  id v74;
  char v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  _QWORD *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;

  v97 = a8;
  v98 = a7;
  v92 = a6;
  v87 = a5;
  v95 = a4;
  v85 = a3;
  v12 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v93 = *(_QWORD *)(v12 - 8);
  v94 = v12;
  __chkstk_darwin(v12);
  v91 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_100839CD0);
  __chkstk_darwin(v14);
  v86 = (uint64_t)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for UUID(0);
  v88 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v84 = (char *)&v79 - v19;
  v20 = type metadata accessor for RDSavedReminder(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v79 - v25;
  v27 = type metadata accessor for REMCDSavedReminder();
  v89 = a1;
  v28 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v27);
  v29 = v96;
  sub_1004B33B8(v28, a2);

  if (!v29)
  {
    v79 = v23;
    v80 = v21;
    v81 = v20;
    v82 = v17;
    v96 = a2;
    v83 = v26;
    v31 = v90;
    v32 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v30);
    v33 = objc_msgSend(v32, "uuid");

    v34 = v84;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

    v35 = v85;
    v36 = *v85;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v85);
    *v35 = v36;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v36 = sub_1002C8EC4(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
      *v35 = v36;
    }
    v38 = (uint64_t)v82;
    v40 = *(_QWORD *)(v36 + 16);
    v39 = *(_QWORD *)(v36 + 24);
    if (v40 >= v39 >> 1)
    {
      v78 = sub_1002C8EC4(v39 > 1, v40 + 1, 1, v36);
      v41 = v34;
      v36 = v78;
      *v35 = v78;
    }
    else
    {
      v41 = v34;
    }
    *(_QWORD *)(v36 + 16) = v40 + 1;
    v42 = v88;
    v43 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v88 + 32))(v36+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v88 + 72) * v40, v41, v31);
    v44 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v43);
    v45 = objc_msgSend(v44, "uuid");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v46 = (uint64_t)v83;
    v47 = (uint64_t)v79;
    sub_1000D6E9C((uint64_t)v83, (uint64_t)v79);
    v48 = v87;
    v49 = v86;
    sub_10014032C(v47, v48, v86);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v80 + 56))(v49, 0, 1, v81);
    v50 = sub_1003123F4(v49, v38);
    v51 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v50);
    sub_1004930B8(v51);
    v53 = v52;
    v87 = v48;

    v55 = v42;
    if (v53)
    {
      v56 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v54);
      v57 = objc_msgSend(v56, "uuid");

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v46 = (uint64_t)v83;
      v58 = v92;
      v59 = swift_isUniquelyReferenced_nonNull_native(*v92);
      v100 = (_QWORD *)*v58;
      *v58 = 0x8000000000000000;
      sub_10028E34C(v53, v38, v59);
      v60 = (_QWORD *)*v58;
      *v58 = (uint64_t)v100;
      v61 = swift_bridgeObjectRelease(v60);
      v54 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v55 + 8))(v38, v90, v61);
    }
    v63 = v93;
    v62 = v94;
    if (__OFADD__(*v98, 1))
    {
      __break(1u);
    }
    else
    {
      ++*v98;
      v85 = (_QWORD *)REMRemindersListDataView.ReminderLite.subtasks.getter(v54);
      if (v85)
      {
        v100 = _swiftEmptyArrayStorage;
        v64 = v85[2];
        if (v64)
        {
          v86 = a10;
          v65 = (char *)v85
              + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80));
          v66 = *(_QWORD *)(v63 + 72);
          v67 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
          v68 = (uint64_t)v91;
          v69 = v98;
          v67(v91, v65, v62);
          while (1)
          {
            if (*v69 < v97)
            {
              v70 = objc_autoreleasePoolPush();
              sub_100492838(v68, v96, (unint64_t *)&v100, v95, v87, v92, v69);
              objc_autoreleasePoolPop(v70);
              v63 = v93;
              v62 = v94;
              v68 = (uint64_t)v91;
            }
            (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v68, v62);
            v65 += v66;
            if (!--v64)
              break;
            v67((char *)v68, v65, v62);
          }
          swift_bridgeObjectRelease(v85);
          v72 = v100;
          v55 = v88;
          v38 = (uint64_t)v82;
        }
        else
        {
          swift_bridgeObjectRelease(v85);
          v72 = _swiftEmptyArrayStorage;
        }
        v73 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v71);
        v74 = objc_msgSend(v73, "uuid");

        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v74);
        swift_bridgeObjectRetain(v72);
        v75 = swift_isUniquelyReferenced_nonNull_native(*a9);
        v99 = *a9;
        *a9 = 0x8000000000000000;
        sub_10028E328((uint64_t)v72, v38, v75);
        v76 = *a9;
        *a9 = v99;
        v77 = swift_bridgeObjectRelease(v76);
        (*(void (**)(uint64_t, uint64_t, __n128))(v55 + 8))(v38, v90, v77);
        sub_10001C744((uint64_t)v83, type metadata accessor for RDSavedReminder);
        swift_bridgeObjectRelease(v100);
      }
      else
      {
        sub_10001C744(v46, type metadata accessor for RDSavedReminder);
      }
    }
  }
}

void sub_100492838(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, void *a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t *v51;
  char v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v60 = a6;
  v61 = a7;
  v66 = a5;
  v68 = a4;
  v64 = a3;
  v9 = sub_10001A630((uint64_t *)&unk_100839CD0);
  __chkstk_darwin(v9);
  v67 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for UUID(0);
  v70 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v69 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v62 = (char *)&v56 - v13;
  v14 = type metadata accessor for RDSavedReminder(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v56 - v19;
  v21 = type metadata accessor for REMCDSavedReminder();
  v63 = a1;
  v22 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v21);
  v23 = v71;
  sub_1004B33B8(v22, a2);

  if (!v23)
  {
    v58 = v17;
    v59 = v15;
    v71 = v14;
    v25 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v24);
    v26 = objc_msgSend(v25, "uuid");

    v27 = v62;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v28 = v64;
    v29 = *v64;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v64);
    *v28 = v29;
    v57 = 0;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v31 = (uint64_t *)v28;
    }
    else
    {
      v29 = sub_1002C8EC4(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
      v31 = (uint64_t *)v28;
      *v28 = v29;
    }
    v33 = *(_QWORD *)(v29 + 16);
    v32 = *(_QWORD *)(v29 + 24);
    v34 = v70;
    if (v33 >= v32 >> 1)
    {
      v55 = sub_1002C8EC4(v32 > 1, v33 + 1, 1, v29);
      v34 = v70;
      v29 = v55;
      *v31 = v55;
    }
    *(_QWORD *)(v29 + 16) = v33 + 1;
    v35 = v65;
    v36 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v34 + 32))(v29+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v33, v27, v65);
    v37 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v36);
    v38 = objc_msgSend(v37, "uuid");

    v39 = (uint64_t)v69;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

    v40 = (uint64_t)v58;
    sub_1000D6E9C((uint64_t)v20, (uint64_t)v58);
    v41 = v66;
    v42 = v67;
    sub_10014032C(v40, v41, v67);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v42, 0, 1, v71);
    v43 = sub_1003123F4(v42, v39);
    v44 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v43);
    v45 = v57;
    sub_1004930B8(v44);
    if (v45)
    {
      sub_10001C744((uint64_t)v20, type metadata accessor for RDSavedReminder);

    }
    else
    {
      v47 = v46;

      if (v47)
      {
        v49 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v48);
        v50 = objc_msgSend(v49, "uuid");

        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v50);
        v51 = v60;
        v52 = swift_isUniquelyReferenced_nonNull_native(*v60);
        v72 = *v51;
        *v51 = 0x8000000000000000;
        sub_10028E34C(v47, v39, v52);
        v53 = *v51;
        *v51 = v72;
        v54 = swift_bridgeObjectRelease(v53);
        (*(void (**)(uint64_t, uint64_t, __n128))(v70 + 8))(v39, v35, v54);
      }
      sub_10001C744((uint64_t)v20, type metadata accessor for RDSavedReminder);
      if (__OFADD__(*v61, 1))
        __break(1u);
      else
        ++*v61;
    }
  }
}

uint64_t sub_100492C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_100849710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100492CA0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[5];
  uint64_t v52;

  v3 = v2;
  v49 = a2;
  v5 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  __chkstk_darwin(v5);
  v44 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630(&qword_10084C240);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)type metadata accessor for RDSavedURLAttachment(0);
  v50 = *(v10 - 1);
  __chkstk_darwin(v10);
  v48 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v42 = (uint64_t)&v40 - v13;
  if ((unint64_t)a1 >> 62)
    goto LABEL_26;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v14; v14 = _CocoaArrayWrapper.endIndex.getter(v38))
  {
    v52 = v3;
    v15 = _swiftEmptyArrayStorage;
    v46 = a1;
    v47 = a1 & 0xC000000000000001;
    v16 = 4;
    v45 = v10;
    while (1)
    {
      v17 = v47 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, a1) : *(id *)(a1 + 8 * v16);
      a1 = (uint64_t)v17;
      v18 = v16 - 3;
      if (__OFADD__(v16 - 4, 1))
        break;
      v19 = (unint64_t)v15;
      v3 = v14;
      v51[3] = sub_1000151B0(0, (unint64_t *)&qword_10083E538, &off_1007D65B0);
      v51[4] = (char *)&_sMXM.Parent + 3;
      v20 = v49;
      v51[0] = v49;
      v10 = (id)a1;
      v21 = v20;
      v22 = v52;
      v23 = sub_1003C7A54(v10, v51);
      v52 = v22;
      if (v22)
      {
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v46);

        return v15;
      }
      if (v24)
      {

        v25 = 1;
        v26 = v45;
      }
      else
      {
        v27 = v23;
        v28 = objc_msgSend(v27, "url");
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v28);

        v29 = objc_msgSend(v27, "metadata");
        if (v29)
        {
          v30 = v29;
          v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
          v32 = v31;

        }
        else
        {

          v43 = 0;
          v32 = 0xF000000000000000;
        }
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v9, v44, v41);
        v25 = 0;
        v26 = v45;
        v33 = (uint64_t *)&v9[*((int *)v45 + 5)];
        *v33 = v43;
        v33[1] = v32;
      }
      v34 = v50;
      (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v50 + 56))(v9, v25, 1, v26);

      if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v34 + 48))(v9, 1, v26) == 1)
      {
        sub_10000882C((uint64_t)v9, &qword_10084C240);
        v14 = v3;
        v15 = (_QWORD *)v19;
      }
      else
      {
        v35 = v42;
        sub_100493494((uint64_t)v9, v42);
        sub_100493494(v35, v48);
        v15 = (_QWORD *)v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
          v15 = (_QWORD *)sub_1002CAA04(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
        v37 = v15[2];
        v36 = v15[3];
        if (v37 >= v36 >> 1)
          v15 = (_QWORD *)sub_1002CAA04(v36 > 1, v37 + 1, 1, (unint64_t)v15);
        v15[2] = v37 + 1;
        sub_100493494(v48, (uint64_t)v15+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v37);
        v14 = v3;
      }
      ++v16;
      a1 = v46;
      if (v18 == v14)
      {
        swift_bridgeObjectRelease(v46);
        return v15;
      }
    }
    __break(1u);
LABEL_26:
    if (a1 < 0)
      v38 = a1;
    else
      v38 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void sub_1004930B8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *ObjCClassFromMetadata;
  id v11;
  Class isa;
  _QWORD *v13;
  Class v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  NSString v24;
  uint64_t v25;
  void *v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = type metadata accessor for REMCDSavedAttachment();
  sub_10050E618();
  v5 = v4;
  v6 = a1;
  sub_10050DEE8((uint64_t)a1, 32);
  v8 = v7;
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v3);
  v11 = objc_msgSend(ObjCClassFromMetadata, "entity");
  objc_msgSend(v9, "setEntity:", v11);

  objc_msgSend(v9, "setAffectedStores:", 0);
  objc_msgSend(v9, "setPredicate:", v8);

  if (qword_100837800 != -1)
    swift_once(&qword_100837800, sub_10050E594);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setSortDescriptors:", isa);

  v13 = sub_1001DFBD0(v5);
  v14 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setPropertiesToFetch:", v14, swift_bridgeObjectRelease(v13).n128_f64[0]);

  v15 = NSManagedObjectContext.fetch<A>(_:)(v9, v3);
  swift_bridgeObjectRelease(v5);

  if (!v1)
  {
    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0)
        v29 = v15;
      else
        v29 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v30 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v15);
      if (v30)
      {
LABEL_7:
        if ((v15 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain(v15);
          v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
          swift_bridgeObjectRelease(v15);
        }
        else
        {
          if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v16 = *(id *)(v15 + 32);
        }
        v17 = objc_msgSend(v16, "storeControllerManagedObjectContext");
        if (v17)
        {
          v18 = v17;
          v19 = objc_msgSend(v17, "storeController");
          if (v19)
          {
            v20 = v19;
            v21 = sub_100492CA0(v15, v20);
            swift_bridgeObjectRelease(v15);

            if (v21[2])
              return;
            v22 = v21;
LABEL_22:
            swift_bridgeObjectRelease(v22);
            return;
          }
          swift_bridgeObjectRelease(v15);
          v26 = (void *)objc_opt_self(REMError);
          v27 = String._bridgeToObjectiveC()();
          objc_msgSend(v26, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v27);

          swift_willThrow(v28);
        }
        else
        {
          swift_bridgeObjectRelease(v15);
          v23 = (void *)objc_opt_self(REMError);
          v24 = String._bridgeToObjectiveC()();
          objc_msgSend(v23, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v24);

          swift_willThrow(v25);
          v18 = v16;
        }

        return;
      }
    }
    else if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_7;
    }
    v22 = (_QWORD *)v15;
    goto LABEL_22;
  }
}

uint64_t sub_100493494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RDSavedURLAttachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1004934D8(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t KeyPath;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  Class isa;
  id v13;
  id v14;
  id v15;
  NSString v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  void *v20;
  id v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  unsigned int v40;
  id v41;
  BOOL v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[24];
  uint64_t v57;
  void *v58;

  v3 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v4 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "entity");
  objc_msgSend(v3, "setEntity:", v5);

  objc_msgSend(v3, "setAffectedStores:", 0);
  objc_msgSend(v3, "setPredicate:", a2);
  objc_msgSend(v3, "setResultType:", 2);
  v6 = sub_1000151B0(0, &qword_10083AEE8, NSExpression_ptr);
  KeyPath = swift_getKeyPath(&unk_1006BDFA0);
  v8 = (void *)NSExpression.init<A, B>(forKeyPath:)(KeyPath);
  v9 = sub_10001A630((uint64_t *)&unk_100839E80);
  v10 = swift_allocObject(v9, 64, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v10 + 56) = v6;
  *(_QWORD *)(v10 + 32) = v8;
  v52 = v8;
  v11 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v13 = objc_msgSend((id)objc_opt_self(NSExpression), "expressionForFunction:arguments:", v11, isa);

  v14 = objc_msgSend(objc_allocWithZone((Class)NSExpressionDescription), "init");
  objc_msgSend(v14, "setExpression:", v13);
  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setName:", v16);

  objc_msgSend(v15, "setExpressionResultType:", 300);
  objc_msgSend(v3, "setReturnsObjectsAsFaults:", 0);
  v17 = swift_allocObject(v9, 64, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 32) = 0x6574656C706D6F63;
  *(_QWORD *)(v17 + 40) = 0xE900000000000064;
  v18 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "setPropertiesToGroupBy:", v18, swift_bridgeObjectRelease().n128_f64[0]);

  v19 = swift_allocObject(v9, 96, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1006A3C40;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 32) = 0x6574656C706D6F63;
  *(_QWORD *)(v19 + 40) = 0xE900000000000064;
  v20 = v3;
  *(_QWORD *)(v19 + 88) = sub_1000151B0(0, (unint64_t *)&unk_10083AEF0, NSExpressionDescription_ptr);
  *(_QWORD *)(v19 + 64) = v15;
  v21 = v15;
  v22 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "setPropertiesToFetch:", v22, swift_bridgeObjectRelease().n128_f64[0]);

  objc_msgSend(v3, "setResultType:", 2);
  v23 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
  v24 = NSManagedObjectContext.fetch<A>(_:)(v3, v23);
  if (v53)
  {

    return;
  }
  v25 = v24;
  v48 = v21;
  v49 = v13;
  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v46 = v24;
    else
      v46 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v26 = _CocoaArrayWrapper.endIndex.getter(v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v27 = v52;
  v28 = v49;
  if (!v26)
  {
    v43 = swift_bridgeObjectRelease();
    v44 = 0;
    v45 = 0;
    goto LABEL_35;
  }
  if (v26 < 1)
  {
LABEL_41:
    __break(1u);
    return;
  }
  v47 = v20;
  v51 = 0;
  v50 = 0;
  v29 = 0;
  v30 = v25 & 0xC000000000000001;
  while (1)
  {
    if (v30)
      v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v25);
    else
      v31 = *(id *)(v25 + 8 * v29 + 32);
    v32 = v31;
    *(_QWORD *)&v54 = 0x6574656C706D6F63;
    *((_QWORD *)&v54 + 1) = 0xE900000000000064;
    v33 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v54, &type metadata for String);
    v34 = objc_msgSend(v32, "__swift_objectForKeyedSubscript:", v33);
    swift_unknownObjectRelease(v33);
    if (v34)
    {
      _bridgeAnyObjectToAny(_:)(&v54, v34);
      swift_unknownObjectRelease(v34);
    }
    else
    {
      v54 = 0u;
      v55 = 0u;
    }
    sub_1000A5CA8((uint64_t)&v54, (uint64_t)v56, (uint64_t *)&unk_10083D5B0);
    if (!v57)
    {

      sub_10000882C((uint64_t)v56, (uint64_t *)&unk_10083D5B0);
      goto LABEL_9;
    }
    v35 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    if ((swift_dynamicCast(&v58, v56, (char *)&type metadata for Any + 8, v35, 6) & 1) == 0)
    {

      goto LABEL_9;
    }
    v36 = v58;
    *(_QWORD *)&v54 = 0x746E756F63;
    *((_QWORD *)&v54 + 1) = 0xE500000000000000;
    v37 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v54, &type metadata for String);
    v38 = objc_msgSend(v32, "__swift_objectForKeyedSubscript:", v37);
    swift_unknownObjectRelease(v37);
    if (v38)
    {
      _bridgeAnyObjectToAny(_:)(&v54, v38);
      swift_unknownObjectRelease(v38);
    }
    else
    {
      v54 = 0u;
      v55 = 0u;
    }
    sub_1000A5CA8((uint64_t)&v54, (uint64_t)v56, (uint64_t *)&unk_10083D5B0);
    if (!v57)
    {

      sub_10000882C((uint64_t)v56, (uint64_t *)&unk_10083D5B0);
      v30 = v25 & 0xC000000000000001;
      goto LABEL_9;
    }
    if ((swift_dynamicCast(&v58, v56, (char *)&type metadata for Any + 8, v35, 6) & 1) == 0)
    {

      v30 = v25 & 0xC000000000000001;
      goto LABEL_9;
    }
    v39 = v58;
    v40 = objc_msgSend(v36, "BOOLValue");
    v41 = objc_msgSend(v39, "integerValue");

    if (v40)
    {
      v42 = __OFADD__(v50, v41);
      v50 += (uint64_t)v41;
      v30 = v25 & 0xC000000000000001;
      if (v42)
      {
        __break(1u);
        goto LABEL_41;
      }
      goto LABEL_9;
    }
    v42 = __OFADD__(v51, v41);
    v51 += (uint64_t)v41;
    v30 = v25 & 0xC000000000000001;
    if (v42)
      break;
LABEL_9:
    if (v26 == ++v29)
      goto LABEL_33;
  }
  __break(1u);
LABEL_33:
  v43 = swift_bridgeObjectRelease();
  v44 = v51;
  v20 = v47;
  v27 = v52;
  v28 = v49;
  v45 = v50;
LABEL_35:
  REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)(v45, v44, v43);

}

void sub_100493C24(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char **v16;
  id v17;
  BOOL v18;
  unint64_t v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint32_t *p_ivar_base_size;
  id v48;
  void *v49;
  id v50;
  char **v51;
  id v52;
  char v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  id v81;
  char v82;
  double v83;
  id v84;
  uint64_t v85;
  id v86;
  __n128 v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  id v93;
  char v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  uint64_t v100;
  id v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  _QWORD *v105;
  NSObject *v106;
  os_log_type_t v107;
  const char *v108;
  uint64_t v109;
  id v110;
  os_log_type_t v111;
  uint64_t v112;
  _QWORD *v113;
  NSObject *v114;
  os_log_type_t v115;
  const char *v116;
  uint64_t v117;
  id v118;
  os_log_type_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  id v125;
  os_log_type_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  os_log_type_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  NSObject *v137;
  os_log_type_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  NSObject *v142;
  uint64_t v143;
  os_log_type_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  id v149;
  id v150;
  id v151;
  void *v152;
  id v153;
  void *v154;
  void *v155;
  NSObject *v156;
  uint64_t v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  char *v185;
  void *v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  id v190;
  unint64_t v191;
  NSObject *v192;
  __n128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  id ObjCClassFromMetadata;
  unint64_t v201;
  id v202;
  id v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;

  v189 = type metadata accessor for NSFastEnumerationIterator(0);
  __chkstk_darwin(v189);
  v188 = (char *)&v173 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    v4 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
      goto LABEL_153;
    v158 = &_swiftEmptySetSingleton;
    goto LABEL_140;
  }
  v174 = v8;
  v175 = a3;
  v211 = &_swiftEmptySetSingleton;
  v209 = &_swiftEmptySetSingleton;
  v210 = &_swiftEmptySetSingleton;
  v207 = &_swiftEmptySetSingleton;
  v208 = &_swiftEmptySetSingleton;
  v10 = a1;
  sub_100502B8C(v10);
  if (v3)
  {
LABEL_161:

    return;
  }
  v13 = v11;
  v197 = a2;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v170 = v11;
    else
      v170 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v14 = _CocoaArrayWrapper.endIndex.getter(v170);
    v12 = swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_5;
    goto LABEL_159;
  }
  v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
  {
LABEL_159:
    swift_bridgeObjectRelease();
    v168 = &_swiftEmptySetSingleton;
    v167 = &_swiftEmptySetSingleton;
    v165 = &_swiftEmptySetSingleton;
    v166 = &_swiftEmptySetSingleton;
    v164 = &_swiftEmptySetSingleton;
LABEL_160:
    swift_bridgeObjectRetain(v164);
    REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)(v171, v166, v165, v167, v168);
    swift_bridgeObjectRelease();
    goto LABEL_161;
  }
LABEL_5:
  v15 = 0;
  v187 = v13 & 0xC000000000000001;
  v177 = v13 & 0xFFFFFFFFFFFFFF8;
  v176 = v13 + 32;
  v183 = RDGroceryOperationAuthor;
  v12.n128_u64[0] = 138412290;
  v193 = v12;
  v16 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
  v185 = (char *)&type metadata for Any + 8;
  v181 = 0;
  v180 = v10;
  v179 = v13;
  v178 = v14;
  while (1)
  {
    while (1)
    {
      if (v187)
      {
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
        v18 = __OFADD__(v15, 1);
        v19 = v15 + 1;
        if (v18)
          goto LABEL_151;
      }
      else
      {
        if (v15 >= *(_QWORD *)(v177 + 16))
          goto LABEL_152;
        v17 = *(id *)(v176 + 8 * v15);
        v18 = __OFADD__(v15, 1);
        v19 = v15 + 1;
        if (v18)
          goto LABEL_151;
      }
      v191 = v19;
      v20 = v17;
      v21 = objc_msgSend(v17, "changes");
      if (v21)
        break;
      if (qword_1008375D0 != -1)
        swift_once(&qword_1008375D0, sub_100497804);
      v32 = type metadata accessor for Logger(0);
      sub_10001AAA8(v32, (uint64_t)qword_10084C248);
      v33 = v20;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.info.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v4 = swift_slowAlloc(12, -1);
        v36 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v4 = v193.n128_u32[0];
        *(_QWORD *)(v4 + 4) = v33;
        *v36 = v33;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Skipping transaction because it contains no changes {transaction: %@}", (uint8_t *)v4, 0xCu);
        v37 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v36, 1, v37);
        v38 = v36;
        v16 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v4, -1, -1);

      }
      else
      {

      }
LABEL_6:
      v15 = v191;
      if (v191 == v14)
      {
LABEL_146:
        swift_bridgeObjectRelease();
        v164 = v211;
        v165 = v209;
        v166 = v210;
        v168 = v207;
        v167 = v208;
        goto LABEL_160;
      }
    }
    v22 = v21;
    v23 = sub_1000151B0(0, &qword_10083FB80, NSPersistentHistoryChange_ptr);
    v196 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

    v190 = v20;
    v24 = objc_msgSend(v20, "author");
    if (!v24)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
      goto LABEL_29;
    }
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;

    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
    if (!v28)
      goto LABEL_29;
    if (v26 == v29 && v28 == v30)
    {
      v31 = swift_bridgeObjectRelease_n(v28, 2).n128_u64[0];
    }
    else
    {
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v29, v30, 0);
      swift_bridgeObjectRelease();
      v31 = swift_bridgeObjectRelease().n128_u64[0];
      if ((v39 & 1) == 0)
        goto LABEL_30;
    }
    v40 = objc_msgSend(v190, "contextName", *(double *)&v31);
    if (v40)
    {
      v41 = v40;
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v4 = v43;

      sub_1002DB0E4((uint64_t *)&v205, v42, v4);
LABEL_29:
      swift_bridgeObjectRelease();
    }
LABEL_30:
    if ((unint64_t)v196 >> 62)
    {
      v157 = v196 < 0 ? v196 : v196 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v196);
      v44 = _CocoaArrayWrapper.endIndex.getter(v157);
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = *(_QWORD *)((v196 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v15 = v191;
    if (v44)
      break;

    swift_bridgeObjectRelease();
    if (v15 == v14)
      goto LABEL_146;
  }
  v182 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata(v182);
  v45 = sub_1000151B0(0, (unint64_t *)&unk_1008479F0, NSEntityDescription_ptr);
  v46 = 0;
  v201 = v196 & 0xC000000000000001;
  v195 = v196 & 0xFFFFFFFFFFFFFF8;
  v194 = v196 + 32;
  p_ivar_base_size = &RDDataAccess.ivar_base_size;
  v198 = v45;
  v199 = v44;
  while (1)
  {
    if (v201)
    {
      v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v196);
    }
    else
    {
      if (v46 >= *(_QWORD *)(v195 + 16))
        goto LABEL_150;
      v48 = *(id *)(v194 + 8 * v46);
    }
    v49 = v48;
    v18 = __OFADD__(v46++, 1);
    if (v18)
      break;
    v50 = objc_msgSend(v48, *((SEL *)p_ivar_base_size + 482));
    v4 = (uint64_t)objc_msgSend(v50, v16[214]);
    v51 = v16;
    v52 = objc_msgSend(ObjCClassFromMetadata, v16[214]);
    v53 = static NSObject.== infix(_:_:)(v52);

    if ((v53 & 1) != 0)
    {

      v54 = sub_100500E7C(v50);
      if (!v54)
        goto LABEL_66;
      v4 = (uint64_t)v54;
      v55 = objc_opt_self(REMCDReminder);
      v56 = swift_dynamicCastObjCClass(v4, v55);
      if (v56)
      {
        v57 = (void *)v56;
        v58 = (id)v4;
        v59 = objc_msgSend(v57, "remObjectID");
        if (v59)
        {
          v4 = (uint64_t)v59;
          v60 = objc_msgSend(v49, "changeType");
          if (v60 != (id)2)
          {
            if (v60 == (id)1)
            {
              v61 = (void *)REMObjectID.codable.getter(1);
              goto LABEL_98;
            }
            if (!v60)
            {
              v61 = (void *)REMObjectID.codable.getter(0);
LABEL_98:
              sub_1002DB304((Swift::Int *)&v205, v61);

LABEL_99:
              goto LABEL_109;
            }
          }

        }
        else
        {
          if (qword_1008375D0 != -1)
            swift_once(&qword_1008375D0, sub_100497804);
          v109 = type metadata accessor for Logger(0);
          sub_10001AAA8(v109, (uint64_t)qword_10084C248);
          v110 = v50;
          v102 = Logger.logObject.getter(v110);
          v111 = static os_log_type_t.error.getter(v102);
          v4 = v111;
          if (os_log_type_enabled(v102, v111))
          {
            v112 = swift_slowAlloc(12, -1);
            v113 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v112 = v193.n128_u32[0];
            *(_QWORD *)(v112 + 4) = v110;
            *v113 = v110;

            v114 = v102;
            v115 = v4;
            v116 = "Failed to get remObjectID from REMCDReminder {objectID: %@}";
            goto LABEL_105;
          }

        }
      }
      else
      {
        if (qword_1008375D0 != -1)
          swift_once(&qword_1008375D0, sub_100497804);
        v100 = type metadata accessor for Logger(0);
        sub_10001AAA8(v100, (uint64_t)qword_10084C248);
        v101 = v50;
        v102 = Logger.logObject.getter(v101);
        v103 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v102, v103))
        {
          v104 = swift_slowAlloc(12, -1);
          v105 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v104 = v193.n128_u32[0];
          *(_QWORD *)(v104 + 4) = v101;
          *v105 = v101;

          v106 = v102;
          v107 = v103;
          v108 = "Failed to cast managedObject to REMCDReminder {objectID: %@}";
          goto LABEL_89;
        }

      }
    }
    else
    {
      v62 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
      v63 = swift_getObjCClassFromMetadata(v62);
      v4 = (uint64_t)(id)v4;
      v64 = objc_msgSend((id)v63, v51[214]);
      LOBYTE(v63) = static NSObject.== infix(_:_:)(v64);

      if ((v63 & 1) == 0)
      {
        v89 = type metadata accessor for REMCDListSection();
        v90 = swift_getObjCClassFromMetadata(v89);
        v4 = (uint64_t)(id)v4;
        v91 = objc_msgSend((id)v90, v51[214]);
        LOBYTE(v90) = static NSObject.== infix(_:_:)(v91);

        if ((v90 & 1) != 0)
        {

        }
        else
        {
          v92 = type metadata accessor for REMCDSmartListSection();
          v93 = objc_msgSend((id)swift_getObjCClassFromMetadata(v92), v51[214]);
          v94 = static NSObject.== infix(_:_:)(v93);

          if ((v94 & 1) == 0)
          {
            if (qword_1008375D0 != -1)
              swift_once(&qword_1008375D0, sub_100497804);
            v117 = type metadata accessor for Logger(0);
            sub_10001AAA8(v117, (uint64_t)qword_10084C248);
            v118 = v50;
            v102 = Logger.logObject.getter(v118);
            v119 = static os_log_type_t.debug.getter();
            v4 = v119;
            if (os_log_type_enabled(v102, v119))
            {
              v120 = swift_slowAlloc(12, -1);
              v121 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v120 = v193.n128_u32[0];
              *(_QWORD *)(v120 + 4) = v118;
              *v121 = v118;
              _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v4, "Skipping change unhandled type {objectID: %@}", (uint8_t *)v120, 0xCu);
              v122 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v121, 1, v122);
              v123 = v121;
              p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
              swift_slowDealloc(v123, -1, -1);
              swift_slowDealloc(v120, -1, -1);

              goto LABEL_107;
            }

            goto LABEL_108;
          }
        }
        v95 = sub_100500E7C(v50);
        if (v95)
        {
          v4 = (uint64_t)v95;
          v96 = type metadata accessor for REMCDBaseSection();
          v97 = swift_dynamicCastClass(v4, v96);
          if (!v97)
          {
            if (qword_1008375D0 != -1)
              swift_once(&qword_1008375D0, sub_100497804);
            v131 = type metadata accessor for Logger(0);
            sub_10001AAA8(v131, (uint64_t)qword_10084C248);
            v101 = v50;
            v102 = Logger.logObject.getter(v101);
            v132 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v102, v132))
            {
              v104 = swift_slowAlloc(12, -1);
              v105 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v104 = v193.n128_u32[0];
              *(_QWORD *)(v104 + 4) = v101;
              *v105 = v101;
              v106 = v102;
              v107 = v132;
              v108 = "Failed to cast managedObject to REMCDBaseSection {objectID: %@}";
LABEL_89:
              _os_log_impl((void *)&_mh_execute_header, v106, v107, v108, (uint8_t *)v104, 0xCu);
              v133 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v105, 1, v133);
              swift_slowDealloc(v105, -1, -1);
              v134 = v104;
              p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
              swift_slowDealloc(v134, -1, -1);

              goto LABEL_107;
            }

LABEL_108:
            goto LABEL_109;
          }
          v98 = (void *)v97;
          v58 = (id)v4;
          v99 = objc_msgSend(v98, "remObjectID");
          if (!v99)
          {
            if (qword_1008375D0 != -1)
              swift_once(&qword_1008375D0, sub_100497804);
            v143 = type metadata accessor for Logger(0);
            sub_10001AAA8(v143, (uint64_t)qword_10084C248);
            v110 = v50;
            v102 = Logger.logObject.getter(v110);
            v144 = static os_log_type_t.error.getter(v102);
            v4 = v144;
            if (os_log_type_enabled(v102, v144))
            {
              v112 = swift_slowAlloc(12, -1);
              v113 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v112 = v193.n128_u32[0];
              *(_QWORD *)(v112 + 4) = v110;
              *v113 = v110;
              v114 = v102;
              v115 = v4;
              v116 = "Failed to get remObjectID from REMCDBaseSection {objectID: %@}";
LABEL_105:
              _os_log_impl((void *)&_mh_execute_header, v114, v115, v116, (uint8_t *)v112, 0xCu);
              v145 = sub_10001A630((uint64_t *)&unk_100839E70);
              swift_arrayDestroy(v113, 1, v145);
              swift_slowDealloc(v113, -1, -1);
              v146 = v112;
              p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
              swift_slowDealloc(v146, -1, -1);

LABEL_106:
LABEL_107:

              goto LABEL_108;
            }

LABEL_124:
            goto LABEL_108;
          }
          v4 = (uint64_t)v99;
          if (objc_msgSend(v49, "changeType") == (id)1)
          {
            v152 = (void *)REMObjectID.codable.getter(1);
            sub_1002DB304((Swift::Int *)&v205, v152);

            goto LABEL_99;
          }

        }
LABEL_66:

        goto LABEL_109;
      }

      v65 = sub_100500E7C(v50);
      if (!v65)
        goto LABEL_66;
      v58 = v65;
      v66 = objc_opt_self(REMCDList);
      v67 = swift_dynamicCastObjCClass(v58, v66);
      if (!v67)
      {
        if (qword_1008375D0 != -1)
          swift_once(&qword_1008375D0, sub_100497804);
        v124 = type metadata accessor for Logger(0);
        sub_10001AAA8(v124, (uint64_t)qword_10084C248);
        v125 = v50;
        v102 = Logger.logObject.getter(v125);
        v126 = static os_log_type_t.fault.getter();
        v4 = v126;
        if (os_log_type_enabled(v102, v126))
        {
          v127 = swift_slowAlloc(12, -1);
          v128 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v127 = v193.n128_u32[0];
          *(_QWORD *)(v127 + 4) = v125;
          *v128 = v125;
          _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v4, "Failed to cast managedObject to REMCDList {objectID: %@}", (uint8_t *)v127, 0xCu);
          v129 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v128, 1, v129);
          swift_slowDealloc(v128, -1, -1);
          v130 = v127;
          p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
          swift_slowDealloc(v130, -1, -1);

          goto LABEL_106;
        }

        goto LABEL_124;
      }
      v4 = v67;
      v192 = v58;
      v68 = objc_msgSend((id)v4, "remObjectID");
      if (v68)
      {
        v69 = v68;
        v70 = objc_msgSend(v49, "updatedProperties");
        v16 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
        if (v70)
        {
          v71 = v70;
          v186 = v69;
          v72 = sub_1000151B0(0, (unint64_t *)&unk_100846C30, NSPropertyDescription_ptr);
          v73 = sub_1000EC524((unint64_t *)&qword_100849078, (unint64_t *)&unk_100846C30, NSPropertyDescription_ptr);
          v74 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v71, v72, v73);

          v75 = objc_msgSend(v50, "entity");
          v76 = objc_msgSend(v75, "relationshipsByName");

          v77 = sub_1000151B0(0, &qword_100851910, NSRelationshipDescription_ptr);
          v78 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v76, &type metadata for String, v77, &protocol witness table for String);

          if (!*(_QWORD *)(v78 + 16))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v16 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
            goto LABEL_122;
          }
          v79 = sub_10001A6DC(0x73656572616873, 0xE700000000000000);
          v16 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
          v69 = v186;
          if ((v80 & 1) != 0)
          {
            v81 = *(id *)(*(_QWORD *)(v78 + 56) + 8 * v79);
            swift_bridgeObjectRelease();
            v184 = v81;
            v82 = sub_1001B2544(v81, v74);
            *(_QWORD *)&v83 = swift_bridgeObjectRelease().n128_u64[0];
            if ((v82 & 1) != 0)
            {
              v84 = objc_msgSend((id)v4, "reminders", v83);
              v85 = v182;
              if (v84)
              {
                v86 = v84;
                NSOrderedSet.makeIterator()(v87);
                v173 = v86;

                v4 = sub_10009FC50((unint64_t *)&qword_100840028, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
                v16 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
                dispatch thunk of IteratorProtocol.next()(&v205, v189, v4);
                v88 = v184;
                while (v206)
                {
                  sub_10001A6CC(&v205, &v204);
                  sub_10001A670((uint64_t)&v204, (uint64_t)&v203);
                  if (swift_dynamicCast(&v202, &v203, v185, v85, 6))
                  {
                    v150 = v202;
                    v151 = objc_msgSend(v202, "remObjectID");
                    if (v151)
                    {
                      v147 = v151;
                      v148 = (void *)REMObjectID.codable.getter(v151);

                      v149 = v148;
                      sub_1002DB304((Swift::Int *)&v203, v149);

                      v16 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
                    }
                    else
                    {

                    }
                    v88 = v184;
                  }
                  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v204);
                  dispatch thunk of IteratorProtocol.next()(&v205, v189, v4);
                }
                (*(void (**)(char *, uint64_t))(v174 + 8))(v188, v189);

              }
              else
              {

              }
LABEL_122:
              v69 = v186;
            }
            else
            {

            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        v153 = objc_msgSend(v49, "changeType");
        if (v153 == (id)1)
        {
          v154 = (void *)REMObjectID.codable.getter(1);
          sub_1002DB304((Swift::Int *)&v205, v154);

        }
        v155 = (void *)REMObjectID.codable.getter(v153);
        sub_1002DB304((Swift::Int *)&v205, v155);

        v156 = v192;
        p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
        goto LABEL_110;
      }
      if (qword_1008375D0 != -1)
        swift_once(&qword_1008375D0, sub_100497804);
      v135 = type metadata accessor for Logger(0);
      sub_10001AAA8(v135, (uint64_t)qword_10084C248);
      v136 = v50;
      v137 = Logger.logObject.getter(v136);
      v138 = static os_log_type_t.error.getter(v137);
      v4 = v138;
      if (os_log_type_enabled(v137, v138))
      {
        v139 = swift_slowAlloc(12, -1);
        v140 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v139 = v193.n128_u32[0];
        *(_QWORD *)(v139 + 4) = v136;
        *v140 = v136;
        _os_log_impl((void *)&_mh_execute_header, v137, (os_log_type_t)v4, "Failed to get remObjectID from REMCDList {objectID: %@}", (uint8_t *)v139, 0xCu);
        v141 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v140, 1, v141);
        swift_slowDealloc(v140, -1, -1);
        swift_slowDealloc(v139, -1, -1);

        v142 = v192;
      }
      else
      {

        v137 = v192;
      }

      p_ivar_base_size = (_DWORD *)(&RDDataAccess + 8);
    }
LABEL_109:
    v16 = &selRef_clearTransformedCKServerValueCachesOnDidTurnIntoFault;
LABEL_110:
    if (v46 == v199)
    {

      swift_bridgeObjectRelease();
      v10 = v180;
      v13 = v179;
      v14 = v178;
      goto LABEL_6;
    }
  }
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
    v158 = v169;
    goto LABEL_163;
  }
  v158 = &_swiftEmptySetSingleton;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
    goto LABEL_140;
LABEL_163:
  if (!_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
LABEL_140:
    v159 = &_swiftEmptySetSingleton;
    if ((v4 & 0xC000000000000000) != 0)
      goto LABEL_141;
    goto LABEL_143;
  }
  sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
  v159 = v172;
LABEL_141:
  if (!_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
LABEL_143:
    v161 = &_swiftEmptySetSingleton;
    v162 = &_swiftEmptySetSingleton;
    if ((v4 & 0xC000000000000000) != 0)
      goto LABEL_144;
    goto LABEL_148;
  }
  sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
  v161 = v160;
LABEL_144:
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1002E7B70((uint64_t)_swiftEmptyArrayStorage);
    v162 = v163;
  }
  else
  {
    v162 = &_swiftEmptySetSingleton;
  }
LABEL_148:
  REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)(v158, v159, v161, v162, &_swiftEmptySetSingleton);
}

id sub_100495248(Class isa, uint64_t a2)
{
  id v4;
  uint64_t v5;
  id v6;

  v4 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v5 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "entity");
  objc_msgSend(v4, "setEntity:", v6);

  if (isa)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v4, "setAffectedStores:", isa);

  objc_msgSend(v4, "setPredicate:", a2);
  objc_msgSend(v4, "setResultType:", 2);
  return v4;
}

id sub_100495348(Class isa, uint64_t a2)
{
  id v4;
  uint64_t v5;
  id v6;

  v4 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v5 = type metadata accessor for REMCDManualSortHint();
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "entity");
  objc_msgSend(v4, "setEntity:", v6);

  if (isa)
  {
    sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v4, "setAffectedStores:", isa);

  objc_msgSend(v4, "setPredicate:", a2);
  objc_msgSend(v4, "setResultType:", 2);
  return v4;
}

_QWORD *sub_100495438(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void (*v34)(char *, char *, _QWORD *);
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;

  v4 = v3;
  v45 = a2;
  v46 = a3;
  v6 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v6);
  v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  v50 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v43 = (char *)v42 - v13;
  if ((unint64_t)a1 >> 62)
    goto LABEL_33;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v14; v14 = _CocoaArrayWrapper.endIndex.getter(v40))
  {
    v42[1] = v4;
    v49 = a1 & 0xC000000000000001;
    v15 = _swiftEmptyArrayStorage;
    v4 = 4;
    v44 = a1;
    v47 = v9;
    v48 = v14;
    while (1)
    {
      v51 = v15;
      v17 = v49
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
          : *(id *)(a1 + 8 * v4);
      v9 = v17;
      v18 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v19 = objc_msgSend(v17, "remObjectID");
      if (v19)
      {
        v20 = v19;
        v21 = *v45;
        if (*(_QWORD *)(*v45 + 16))
        {
          v22 = v19;
          v23 = sub_1002C66DC((uint64_t)v22);
          if ((v24 & 1) != 0)
            v25 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v23);
          else
            v25 = 0;

        }
        else
        {
          v25 = 0;
        }
        v27 = *v46;
        if (*(_QWORD *)(*v46 + 16))
        {
          v28 = v20;
          v29 = sub_1002C66DC((uint64_t)v28);
          if ((v30 & 1) != 0)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v29);
            swift_bridgeObjectRetain(v31);
          }
          else
          {
            v31 = 0;
          }

        }
        else
        {
          v31 = 0;
        }
        v32 = v9;
        sub_100495DE8(v32, v25, v31, (uint64_t)v8);

        a1 = v44;
        v26 = v47;
      }
      else
      {
        v26 = v47;
        (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v10 + 56))(v8, 1, 1, v47);
        v20 = v9;
      }

      if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v10 + 48))(v8, 1, v26) == 1)
      {
        sub_10000882C((uint64_t)v8, &qword_10083FB68);
        v16 = v48;
        v15 = v51;
      }
      else
      {
        v33 = v26;
        v34 = *(void (**)(char *, char *, _QWORD *))(v10 + 32);
        v35 = v43;
        v34(v43, v8, v33);
        v34(v50, v35, v33);
        v36 = (unint64_t)v51;
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          v36 = sub_1002C8478(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
        v38 = *(_QWORD *)(v36 + 16);
        v37 = *(_QWORD *)(v36 + 24);
        v39 = v36;
        if (v38 >= v37 >> 1)
          v39 = sub_1002C8478(v37 > 1, v38 + 1, 1, v36);
        *(_QWORD *)(v39 + 16) = v38 + 1;
        v15 = (_QWORD *)v39;
        v34((char *)(v39+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v38), v50, v33);
        v16 = v48;
      }
      ++v4;
      if (v18 == v16)
      {
        swift_bridgeObjectRelease(a1);
        return v15;
      }
    }
    __break(1u);
LABEL_33:
    if (a1 < 0)
      v40 = a1;
    else
      v40 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1004957D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v6 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v8);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v11 == enum case for REMRemindersListDataView.SortingStyle.displayDate(_:))
  {
    sub_10001C744(a2, _s9UtilitiesO12SortingStyleOMa);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    v12 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a3, v10, v12);
    v13 = _s9UtilitiesO12SortingStyleOMa(0);
    v14 = a3;
    v15 = 0;
  }
  else if (v11 == enum case for REMRemindersListDataView.SortingStyle.priority(_:))
  {
    sub_10001C744(a2, _s9UtilitiesO12SortingStyleOMa);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    v16 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a3, v10, v16);
    v13 = _s9UtilitiesO12SortingStyleOMa(0);
    v14 = a3;
    v15 = 1;
  }
  else if (v11 == enum case for REMRemindersListDataView.SortingStyle.creationDate(_:))
  {
    sub_10001C744(a2, _s9UtilitiesO12SortingStyleOMa);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    v17 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a3, v10, v17);
    v13 = _s9UtilitiesO12SortingStyleOMa(0);
    v14 = a3;
    v15 = 2;
  }
  else if (v11 == enum case for REMRemindersListDataView.SortingStyle.title(_:))
  {
    sub_10001C744(a2, _s9UtilitiesO12SortingStyleOMa);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    v18 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a3, v10, v18);
    v13 = _s9UtilitiesO12SortingStyleOMa(0);
    v14 = a3;
    v15 = 3;
  }
  else
  {
    if (v11 == enum case for REMRemindersListDataView.SortingStyle.default(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
      return sub_1003BFBD0(a2, a3);
    }
    if (v11 != enum case for REMRemindersListDataView.SortingStyle.manual(_:))
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v6, v6);
      __break(1u);
      return result;
    }
    sub_10001C744(a2, _s9UtilitiesO12SortingStyleOMa);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v13 = _s9UtilitiesO12SortingStyleOMa(0);
    v14 = a3;
    v15 = 5;
  }
  return swift_storeEnumTagMultiPayload(v14, v13, v15);
}

_QWORD *sub_100495AE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, NSObject *a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  id v31;
  void *v32;

  v13 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v28 - v17;
  sub_1004961B4((uint64_t)v15, a1, a6, a3);
  if (!v6)
  {
    sub_1003BFBD0((uint64_t)v15, (uint64_t)v18);
    v19 = objc_msgSend(a1, "persistentStoreCoordinator");
    v20 = v19;
    if (v19)
    {
      v30 = a5;
      v21 = objc_msgSend(v19, "persistentStores");

      v22 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
      v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

      v32 = &_swiftEmptySetSingleton;
      if ((sub_10053CEF8(a6, 1) & 1) == 0)
      {
        v23 = objc_msgSend((id)objc_opt_self(REMAccount), "localAccountID");
        v24 = objc_msgSend(a1, "persistentStoreOfAccountWithAccountID:", v23);

        if (v24)
        {
          sub_1002DBCEC((Swift::Int *)&v31, v24);

        }
      }
      if ((sub_10053CEF8(a6, 5) & 1) == 0)
      {
        v25 = objc_msgSend((id)objc_opt_self(REMAccount), "localInternalAccountID");
        v26 = objc_msgSend(a1, "persistentStoreOfAccountWithAccountID:", v25);

        if (v26)
        {
          sub_1002DBCEC((Swift::Int *)&v31, v26);

        }
      }
      v20 = sub_10049E0A0(v29, (uint64_t *)&v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a5 = v30;
    }
    a5 = sub_100496780((uint64_t)a1, a2, (uint64_t)v18, 0, 0, a4, (uint64_t)a5, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v20, 0);
    swift_bridgeObjectRelease();
    sub_10001C744((uint64_t)v18, _s9UtilitiesO12SortingStyleOMa);
    swift_bridgeObjectRelease();
  }
  return a5;
}

void sub_100495DE8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  id v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v8 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v47 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v46 = (char *)&v38 - v15;
  __chkstk_darwin(v16);
  v45 = (char *)&v38 - v17;
  *(_QWORD *)&v19 = __chkstk_darwin(v18).n128_u64[0];
  v44 = (char *)&v38 - v20;
  v21 = objc_msgSend(a1, "remObjectID", v19);
  if (!v21)
  {

    v34 = swift_bridgeObjectRelease(a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v12 + 56))(a4, 1, 1, v11, v34);
    return;
  }
  v22 = v21;
  if (a3)
  {
    v41 = a1;
    v39 = v21;
    if ((unint64_t)a3 >> 62)
    {
      if (a3 >= 0)
        v37 = a3 & 0xFFFFFFFFFFFFFF8;
      else
        v37 = a3;
      swift_bridgeObjectRetain(a3);
      v23 = _CocoaArrayWrapper.endIndex.getter(v37);
    }
    else
    {
      v23 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a3);
    }
    v42 = a4;
    v40 = a2;
    if (v23)
    {
      if (v23 < 1)
      {
        __break(1u);
        return;
      }
      v24 = 0;
      v25 = a3 & 0xC000000000000001;
      v26 = (char *)_swiftEmptyArrayStorage;
      v43 = a3;
      do
      {
        if (v25)
          v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, a3);
        else
          v27 = *(id *)(a3 + 8 * v24 + 32);
        sub_100495DE8(v27, 0, 0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
        {
          sub_10000882C((uint64_t)v10, &qword_10083FB68);
        }
        else
        {
          v28 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
          v29 = v46;
          v28(v46, v10, v11);
          v30 = v45;
          v28(v45, v29, v11);
          v31 = v44;
          v28(v44, v30, v11);
          v28(v47, v31, v11);
          if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
            v26 = (char *)sub_1002C8478(0, *((_QWORD *)v26 + 2) + 1, 1, (unint64_t)v26);
          v33 = *((_QWORD *)v26 + 2);
          v32 = *((_QWORD *)v26 + 3);
          if (v33 >= v32 >> 1)
            v26 = (char *)sub_1002C8478(v32 > 1, v33 + 1, 1, (unint64_t)v26);
          *((_QWORD *)v26 + 2) = v33 + 1;
          v28(&v26[((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v33], v47, v11);
          a3 = v43;
        }
        ++v24;
      }
      while (v23 != v24);
    }
    else
    {
      v26 = (char *)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease_n(a3, 2);
    a1 = v41;
    a4 = v42;
    v22 = v39;
    a2 = v40;
  }
  else
  {
    v26 = 0;
  }
  v35 = REMObjectID.codable.getter(v21);
  v36 = objc_msgSend(a1, "completed");
  if (v26)
  {
    if (!*((_QWORD *)v26 + 2))
    {
      swift_bridgeObjectRelease(v26);
      v26 = 0;
    }
  }
  REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtaskCount:subtasks:)(v35, v36, a2, v26);

  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a4, 0, 1, v11);
}

NSObject *sub_1004961B4(uint64_t a1, void *a2, NSObject *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  __n128 v13;
  NSObject *v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int EnumCaseMultiPayload;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  char v63[8];
  uint64_t v64;
  _QWORD v65[3];
  uint64_t v66[5];
  char v67[8];

  v9 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v9);
  v61 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151E8(a4, a1, v11);
  if (qword_100837960 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v12 = qword_100872290;
  swift_retain();
  v14 = sub_10058E6E0(a3, 0, a2, v12, v13);
  if (v4)
  {
    swift_release(v12);
    swift_getErrorValue(v4, v67, v65);
    v15 = Error.isREMError(withErrorCode:)(-3006, v65[1], v65[2]);
    v60 = a4;
    if ((v15 & 1) != 0)
    {
      if (qword_1008375D0 != -1)
        swift_once(&qword_1008375D0, sub_100497804);
      v16 = type metadata accessor for Logger(0);
      sub_10001AAA8(v16, (uint64_t)qword_10084C248);
      v17 = a3;
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v56 = a2;
        v20 = swift_slowAlloc(12, -1);
        v58 = a3;
        v21 = (uint8_t *)v20;
        v22 = swift_slowAlloc(32, -1);
        v66[0] = v22;
        v59 = v9;
        *(_DWORD *)v21 = 136446210;
        v57 = (uint64_t *)a1;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v64 = sub_10001A820(v23, v24, v66);
        a1 = (uint64_t)v57;
        v9 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);

        a2 = v56;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "REMCDSmartList for pre-defined smart list type not found {pre-defined smart list type: %{public}s}", v21, 0xCu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        v25 = v21;
        a3 = v58;
        swift_slowDealloc(v25, -1, -1);

        swift_errorRelease(v4);
      }
      else
      {

        swift_errorRelease(v4);
      }
      v26 = 0;
    }
    else
    {
      if (qword_1008375D0 != -1)
        swift_once(&qword_1008375D0, sub_100497804);
      v27 = type metadata accessor for Logger(0);
      sub_10001AAA8(v27, (uint64_t)qword_10084C248);
      v58 = a3;
      v28 = a3;
      swift_errorRetain(v4);
      v29 = v28;
      v30 = swift_errorRetain(v4);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc(22, -1);
        v59 = v9;
        v34 = v33;
        v57 = (uint64_t *)swift_slowAlloc(64, -1);
        v66[0] = (uint64_t)v57;
        *(_DWORD *)v34 = 136446466;
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v64 = sub_10001A820(v35, v36, v66);
        v56 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);

        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2082;
        swift_getErrorValue(v4, v63, v62);
        v37 = Error.rem_errorDescription.getter(v62[1], v62[2]);
        v64 = sub_10001A820(v37, v38, v66);
        a2 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
        swift_bridgeObjectRelease();
        swift_errorRelease(v4);
        swift_errorRelease(v4);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to fetch REMCDSmartList for pre-defined smart list type {smart list type: %{public}s, error: %{public}s}", (uint8_t *)v34, 0x16u);
        v39 = (uint64_t)v57;
        swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        v40 = v34;
        v9 = v59;
        swift_slowDealloc(v40, -1, -1);

        swift_errorRelease(v4);
      }
      else
      {
        swift_errorRelease(v4);

        swift_errorRelease(v4);
        swift_errorRelease(v4);

      }
      v26 = 0;
      a3 = v58;
    }
    a4 = v60;
  }
  else
  {
    v26 = v14;
    swift_release(v12);
  }
  if ((REMSmartListType.hasPredefinedManualOrderingObjectID.getter(a3) & 1) != 0)
  {
    v41 = a4;
    v42 = v61;
    sub_1000151E8(v41, v61, _s9UtilitiesO12SortingStyleOMa);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v42, v9);
    sub_10001C744(v42, _s9UtilitiesO12SortingStyleOMa);
    if (EnumCaseMultiPayload == 5)
    {
      v59 = v9;
      v57 = (uint64_t *)a1;
      v44 = sub_100300818();
      if (v44)
      {
        v45 = (void *)v44;
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
        sub_10049A714(a2, 1, v46, v47, v45, (uint64_t)v66);
        v48 = v66[0];
        v49 = v66[1];
        v50 = v66[2];
        v51 = v66[3];
        v52 = v66[4];

        swift_bridgeObjectRelease();
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v52 = 0;
      }
      v53 = v57;
      sub_10001C744((uint64_t)v57, _s9UtilitiesO12SortingStyleOMa);
      *v53 = v48;
      v53[1] = v49;
      v53[2] = v50;
      v53[3] = v51;
      v53[4] = v52;
      v53[5] = 0;
      swift_storeEnumTagMultiPayload(v53, v59, 4);
    }
  }
  return v26;
}

_QWORD *sub_100496780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Predicate;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  Class isa;
  double v59;
  id v60;
  NSArray v61;
  NSArray v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  __n128 v70;
  unint64_t *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  uint64_t *v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t *, uint64_t);
  int v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t *v98;
  int v99;
  void (*v100)(uint64_t *, void *, __n128);
  __n128 v101;
  void *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  int v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  Swift::String v127;
  uint64_t v128;
  _QWORD **v129;
  void **v130;
  _QWORD v131[2];
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  unint64_t *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  v140 = a7;
  v137 = a5;
  v148 = a4;
  v16 = sub_10001A630(&qword_100844170);
  v17 = *(_QWORD *)(v16 - 8);
  v155 = v16;
  v156 = v17;
  __chkstk_darwin(v16);
  v154 = (char *)v131 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v20 = (char *)v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v131[0] = (char *)v131 - v22;
  v146 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v146);
  v136 = (char *)v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v135 = (uint64_t)v131 - v25;
  __chkstk_darwin(v26);
  v139 = (_QWORD *)((char *)v131 - v27);
  v144 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v132 = (_QWORD *)((char *)v131 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v29);
  v138 = (char *)v131 - v30;
  v152 = a1;
  sub_100497B30();
  v32 = v31;
  if (qword_1008375D8 != -1)
    swift_once(&qword_1008375D8, sub_100497894);
  v158 = qword_100871F88;
  swift_bridgeObjectRetain(qword_100871F88);
  swift_bridgeObjectRetain(a9);
  sub_1001E12FC(v33);
  v165 = v158;
  v164 = (uint64_t)_swiftEmptyArrayStorage;
  sub_10049AAF8(a3);
  sub_1001E12FC(v34);
  v153 = a3;
  sub_10049ACB4(a3);
  sub_1001E12FC(v35);
  v36 = v164;
  v162 = v164;
  v163 = v165;
  v142 = a8;
  v158 = a8;
  swift_bridgeObjectRetain(v165);
  swift_bridgeObjectRetain(v36);
  v37 = sub_10001A630(&qword_100846700);
  v38 = sub_1000A5F84(&qword_100846708, &qword_100846700, (uint64_t)&protocol conformance descriptor for [A]);
  Predicate = Sequence<>.postFetchPredicateTypes.getter(v37, v38);
  sub_1001A8790(Predicate);
  sub_1001E1320(v40);
  sub_1001A879C(Predicate);
  v42 = v41;
  swift_bridgeObjectRelease(Predicate);
  sub_1001E1320(v42);
  v43 = sub_10001A630(&qword_10083FD30);
  v44 = &protocol witness table for AnyKeyPath;
  Array<A>.removeDuplicates()(v43, &protocol witness table for AnyKeyPath);
  Array<A>.removeDuplicates()(v43, &protocol witness table for AnyKeyPath);
  Array<A>.removeDuplicates()(v43, &protocol witness table for AnyKeyPath);
  Array<A>.removeDuplicates()(v43, &protocol witness table for AnyKeyPath);
  v45 = v165;
  swift_bridgeObjectRetain(v165);
  v141 = a10;
  v147 = (id)sub_100358798(v46, 0, a10, a2);
  v145 = v45;
  swift_bridgeObjectRelease(v45);
  v47 = v164;
  if ((unint64_t)v164 >> 62)
  {
    if (v164 < 0)
      v126 = v164;
    else
      v126 = v164 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v164, 2);
    v48 = _CocoaArrayWrapper.endIndex.getter(v126);
    swift_bridgeObjectRelease(v47);
  }
  else
  {
    v48 = *(_QWORD *)((v164 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v164);
  }
  v150 = (_QWORD *)a6;
  v131[1] = v20;
  v151 = v32;
  if (v48)
  {
    v161 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v48 & ~(v48 >> 63), 0);
    if (v48 < 0)
    {
      __break(1u);
LABEL_61:
      v158 = 0;
      v159 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v127._object = (void *)0x80000001006F8C10;
      v127._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v127);
      v160 = (void *)v47;
      v128 = sub_10001A630((uint64_t *)&unk_10083AEC0);
      _print_unlocked<A, B>(_:_:)(&v160, &v158, v128, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v158, v159, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
      __break(1u);
      goto LABEL_62;
    }
    v49 = 0;
    v50 = v161;
    v157 = v47 & 0xC000000000000001;
    v51 = v47;
    while (v48 != v49)
    {
      if (v157)
      {
        v52 = specialized _ArrayBuffer._getElementSlowPath(_:)(v49, v47);
        v47 = v52;
      }
      else
      {
        v47 = *(_QWORD *)(v47 + 8 * v49 + 32);
        v52 = swift_retain();
      }
      v53 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v52);
      if (!v54)
        goto LABEL_61;
      v44 = (void *)v53;
      v55 = v54;
      swift_release(v47);
      v161 = v50;
      v43 = v50[2];
      v56 = v50[3];
      if (v43 >= v56 >> 1)
      {
        sub_1001C1B0C(v56 > 1, v43 + 1, 1);
        v50 = v161;
      }
      ++v49;
      v50[2] = v43 + 1;
      v57 = &v50[2 * v43];
      v57[4] = v44;
      v57[5] = v55;
      v47 = v51;
      if (v48 == v49)
      {
        swift_bridgeObjectRelease(v51);
        a6 = (uint64_t)v150;
        v32 = v151;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_53:
    v117 = enum case for REMRemindersListDataView.ShowCompleted.on(_:);
    swift_retain();
    swift_bridgeObjectRetain(v43);
    if ((_DWORD)v36 == v117)
      goto LABEL_54;
LABEL_62:
    _diagnoseUnexpectedEnumCase<A>(type:)(v44, v44);
    __break(1u);
    JUMPOUT(0x1004977ECLL);
  }
  swift_bridgeObjectRelease(v47);
  v50 = _swiftEmptyArrayStorage;
LABEL_18:
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v59 = swift_bridgeObjectRelease(v50).n128_u64[0];
  v60 = v147;
  objc_msgSend(v147, "setRelationshipKeyPathsForPrefetching:", isa, v59);

  if (v148)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v61.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    sub_10049ADC0(v153, a6, v137);
    v64 = v63;
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    v61.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v62.super.isa = (Class)swift_bridgeObjectRelease(v64).n128_u64[0];
  }
  v65 = (_QWORD *)v152;
  objc_msgSend(v60, "setSortDescriptors:", v61.super.isa, *(double *)&v62.super.isa);

  v66 = swift_allocObject(&unk_1007F5E58, 24, 7);
  v67 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v68 = v149;
  v69 = NSManagedObjectContext.fetch<A>(_:)(v60, v67);
  v48 = (uint64_t)v68;
  if (v68)
  {
    swift_bridgeObjectRelease(v145);
    swift_bridgeObjectRelease(v47);

    swift_release(v32);
    swift_bridgeObjectRelease(v162);
    v70 = swift_bridgeObjectRelease(v163);
    swift_deallocUninitializedObject(v66, 24, 7, v70);
    return v65;
  }
  v157 = v66;
  v71 = (unint64_t *)(v66 + 16);
  *(_QWORD *)(v66 + 16) = v69;

  v72 = v143;
  v73 = *(void (**)(char *, uint64_t, uint64_t))(v143 + 16);
  v74 = (uint64_t *)v138;
  v75 = v144;
  v73(v138, a6, v144);
  v76 = *(uint64_t (**)(uint64_t *, uint64_t))(v72 + 88);
  v77 = v76(v74, v75);
  v78 = enum case for REMRemindersListDataView.ShowCompleted.after(_:);
  v149 = v71;
  if (v77 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v72 + 8))(v74, v75);
    v79 = &_swiftEmptySetSingleton;
LABEL_27:
    v86 = v142;
    goto LABEL_28;
  }
  if (v77 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v72 + 96))(v74, v75);
    v80 = *v74;
    v158 = v80;
    v81 = sub_10001A630(&qword_10084C260);
    v82 = type metadata accessor for UUID(0);
    v83 = sub_1000A5F84(&qword_10084C268, &qword_10084C260, (uint64_t)&protocol conformance descriptor for Set<A>);
    v84 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v85 = v81;
    v71 = v149;
    v79 = (_QWORD *)Sequence.mapToSet<A>(_:)(sub_10033CBC0, 0, v85, v82, v83, v84);
    swift_bridgeObjectRelease(v80);
    goto LABEL_27;
  }
  v79 = &_swiftEmptySetSingleton;
  v86 = v142;
  if (v77 != enum case for REMRemindersListDataView.ShowCompleted.off(_:)
    && v77 != enum case for REMRemindersListDataView.ShowCompleted.on(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)(v75, v75);
    __break(1u);
    goto LABEL_40;
  }
LABEL_28:
  v87 = *v71;
  v88 = *(_QWORD *)(v86 + 16);
  swift_bridgeObjectRetain(*v71);
  if (v88)
  {
    swift_bridgeObjectRetain(v86);
    v89 = sub_10033F168(v87, v79, v86);
    swift_bridgeObjectRelease(v87);
    swift_bridgeObjectRelease(v79);
    swift_bridgeObjectRelease(v86);
    v87 = (uint64_t)v89;
  }
  else
  {
    swift_bridgeObjectRelease(v79);
  }
  v90 = *v71;
  *v71 = v87;
  swift_bridgeObjectRelease(v90);
  v91 = v139;
  sub_1000151E8(v153, (uint64_t)v139, _s9UtilitiesO12SortingStyleOMa);
  if (swift_getEnumCaseMultiPayload(v91, v146) != 4)
  {
    v148 = 0;
    sub_10001C744((uint64_t)v91, _s9UtilitiesO12SortingStyleOMa);
    goto LABEL_42;
  }
  v92 = v91;
  v51 = *v91;
  v94 = v92[1];
  v93 = v92[2];
  v96 = v92[3];
  v95 = v92[4];

  if (!v51)
  {
LABEL_40:
    v148 = 0;
    goto LABEL_42;
  }
  swift_bridgeObjectRelease(v94);
  swift_bridgeObjectRelease(v93);
  swift_bridgeObjectRelease(v96);
  v97 = swift_bridgeObjectRelease(v95);
  if (v151)
  {
    v43 = *v149;
    v98 = v132;
    v44 = (void *)v144;
    ((void (*)(uint64_t *, _QWORD *, uint64_t, __n128))v73)(v132, v150, v144, v97);
    v99 = v76(v98, (uint64_t)v44);
    if (v99 == v78)
    {
      v100 = *(void (**)(uint64_t *, void *, __n128))(v143 + 8);
      v49 = v151;
      swift_retain();
      v101 = swift_bridgeObjectRetain(v43);
      v100(v98, v44, v101);
      v102 = &_swiftEmptySetSingleton;
    }
    else
    {
      LODWORD(v36) = v99;
      v49 = v151;
      if (v99 != enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
      {
        v50 = v150;
        v47 = v157;
        if (v99 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
        {
          swift_retain();
          swift_bridgeObjectRetain(v43);
LABEL_54:
          v102 = &_swiftEmptySetSingleton;
          goto LABEL_55;
        }
        goto LABEL_53;
      }
      (*(void (**)(uint64_t *, void *))(v143 + 96))(v98, v44);
      v115 = *v98;
      swift_retain();
      swift_bridgeObjectRetain(v43);
      v102 = (void *)sub_1002EBC10(v115);
      swift_bridgeObjectRelease(v115);
    }
    v50 = v150;
    v47 = v157;
LABEL_55:
    swift_bridgeObjectRetain(v43);
    v119 = sub_10049B990(v118, (uint64_t)v102);
    v148 = v48;
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v102);
    sub_10011F128((uint64_t)v119);
    v121 = v120;
    swift_bridgeObjectRelease(v119);
    sub_10018BB4C(v121);
    v123 = v122;
    swift_bridgeObjectRelease(v121);
    v124 = sub_1001D61DC(v51, v123, v43);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v51);
    swift_release(v49);
    swift_bridgeObjectRelease(v123);
    v125 = *v149;
    *v149 = (unint64_t)v124;
    swift_bridgeObjectRelease(v125);
    v103 = v50;
    goto LABEL_43;
  }
  v148 = 0;
  swift_bridgeObjectRelease(v51);
LABEL_42:
  v103 = v150;
  v49 = v151;
  v47 = v157;
LABEL_43:
  v104 = swift_allocObject(&unk_1007F5E80, 24, 7);
  *(_QWORD *)(v104 + 16) = 0;
  v105 = swift_allocObject(&unk_1007F5EA8, 24, 7);
  *(_QWORD *)(v105 + 16) = 0;
  v160 = &_swiftEmptyDictionarySingleton;
  v161 = &_swiftEmptyDictionarySingleton;
  v106 = *(_QWORD *)(v47 + 16);
  __chkstk_darwin(v105);
  v107 = v153;
  v108 = v140;
  v131[-14] = v153;
  v131[-13] = v108;
  v109 = v152;
  v131[-12] = v110;
  v131[-11] = v109;
  v131[-10] = v47;
  v131[-9] = v103;
  v131[-8] = &v163;
  v131[-7] = &v162;
  v131[-6] = v141;
  LOBYTE(v131[-5]) = a11 & 1;
  v131[-4] = v49;
  v131[-3] = v104;
  v129 = &v161;
  v130 = &v160;
  swift_bridgeObjectRetain(v106);
  v111 = v148;
  sub_1003507E4((void (*)(unsigned __int8 **))sub_10049EB2C, (uint64_t)&v131[-16], v106);
  if (!v111)
  {
    v148 = v105;
    v152 = v104;
    swift_bridgeObjectRelease(v106);
    v113 = v135;
    sub_1000151E8(v107, v135, _s9UtilitiesO12SortingStyleOMa);
    v114 = (char *)&loc_100497244 + dword_1004977EC[swift_getEnumCaseMultiPayload(v113, v146)];
    __asm { BR              X10 }
  }
  swift_bridgeObjectRelease(v106);
  swift_release(v49);
  swift_bridgeObjectRelease(v164);
  swift_bridgeObjectRelease(v165);
  swift_bridgeObjectRelease(v160);
  v65 = v161;
  swift_release(v104);
  swift_release(v105);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v162);
  v112 = v163;
  swift_release(v47);
  swift_bridgeObjectRelease(v112);
  return v65;
}

uint64_t sub_100497804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084C248);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084C248);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100497894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A8550;
  *(_QWORD *)(v1 + 32) = swift_getKeyPath(&unk_1006BE010);
  KeyPath = swift_getKeyPath(&unk_1006BDFA0);
  *(_QWORD *)(v1 + 40) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_100871F88 = v1;
  return result;
}

uint64_t sub_100497914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006AAD80;
  *(_QWORD *)(v1 + 32) = swift_getKeyPath(&unk_1006BE080);
  *(_QWORD *)(v1 + 40) = swift_getKeyPath(&unk_1006BE0F8);
  KeyPath = swift_getKeyPath(&unk_1006BE138);
  *(_QWORD *)(v1 + 48) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_100871F90 = v1;
  return result;
}

void sub_1004979A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151E8(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_100497A30 + 4 * byte_1006BDF60[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_100497A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v1, v2);
  v3 = enum case for REMRemindersListDataView.SortingStyle.displayDate(_:);
  v4 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v0, v3, v4);
}

void sub_100497B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151E8(v0, (uint64_t)v3, v4);
  v5 = (char *)&loc_100497BBC + *((int *)qword_100498418 + swift_getEnumCaseMultiPayload(v3, v1));
  __asm { BR              X10 }
}

uint64_t sub_100497BCC()
{
  uint64_t v0;

  sub_10001C744(v0, _s9UtilitiesO12SortingStyleOMa);
  return 0;
}

void sub_100497C04()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = (void *)v0[5];
  sub_1001D8C44(*v0, v0[1], v0[2], v0[3], v0[4]);
  if (!v6)
  {
    v30 = sub_10049A8FC();
    if (!v30)
LABEL_44:
      JUMPOUT(0x100497BDCLL);
    v31 = v30;
    *(_QWORD *)(v5 - 88) = 0;
    __chkstk_darwin(v30);
    swift_retain();
    v32 = v1;
    NSManagedObjectContext.performAndWait<A>(_:)(sub_10049FF44);
    if (v1)
    {
      swift_release(v31);
      swift_bridgeObjectRelease();
      if (qword_1008375D0 != -1)
        swift_once(&qword_1008375D0, sub_100497804);
      v33 = type metadata accessor for Logger(0);
      sub_10001AAA8(v33, (uint64_t)qword_10084C248);
      swift_errorRetain(v1);
      v34 = swift_errorRetain(v1);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v5 - 88) = v38;
        *(_DWORD *)v37 = 136446210;
        swift_getErrorValue(v32, v5 - 144, v5 - 168);
        v39 = Error.rem_errorDescription.getter(*(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 152));
        *(_QWORD *)(v5 - 104) = sub_10001A820(v39, v40, (uint64_t *)(v5 - 88));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 104, v5 - 96);
        swift_bridgeObjectRelease();
        swift_errorRelease(v32);
        swift_errorRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to fetch signed-in accounts when getting manualSortIDAdapter for {error: %{public}s}", v37, 0xCu);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);

        swift_errorRelease(v32);
      }
      else
      {

        swift_errorRelease(v1);
        swift_errorRelease(v1);
        swift_errorRelease(v1);

      }
    }
    else
    {
      if (!*(_QWORD *)(v5 - 88))
        sub_1002AF1B8((uint64_t)_swiftEmptyArrayStorage);
      swift_release(v31);
      swift_bridgeObjectRelease();
    }
LABEL_43:
    JUMPOUT(0x100497BE0);
  }
  v7 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v8 + 32) = v6;
  *(_QWORD *)(v5 - 88) = v8;
  specialized Array._endMutation()(v8);
  v9 = *(_QWORD *)(v5 - 88);
  v10 = v6;
  sub_10034B07C(v9, 0, 6);
  v12 = v11;
  swift_bridgeObjectRelease();
  if (qword_1008375C0 != -1)
    swift_once(&qword_1008375C0, sub_10048FB40);
  v13 = (void *)sub_100357FC0(qword_100871F58, 0, 0, (uint64_t)v12);

  v14 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v15 = v1;
  v16 = NSManagedObjectContext.fetch<A>(_:)(v13, v14);
  if (v1)
  {
    if (qword_1008375D0 != -1)
      swift_once(&qword_1008375D0, sub_100497804);
    v17 = type metadata accessor for Logger(0);
    sub_10001AAA8(v17, (uint64_t)qword_10084C248);
    v18 = v10;
    swift_errorRetain(v1);
    v19 = v18;
    v20 = swift_errorRetain(v1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (!os_log_type_enabled(v21, v22))
    {

      swift_errorRelease(v1);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

      goto LABEL_44;
    }
    v23 = swift_slowAlloc(22, -1);
    v24 = (_QWORD *)swift_slowAlloc(8, -1);
    v25 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v5 - 184) = v25;
    *(_QWORD *)(v5 - 88) = v25;
    *(_DWORD *)v23 = 138543618;
    *(_QWORD *)(v5 - 104) = v19;
    *(_QWORD *)(v5 - 176) = v13;
    v10 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 104, v5 - 96);
    *v24 = v6;

    *(_WORD *)(v23 + 12) = 2082;
    swift_getErrorValue(v15, v5 - 112, v5 - 136);
    v26 = Error.rem_errorDescription.getter(*(_QWORD *)(v5 - 128), *(_QWORD *)(v5 - 120));
    *(_QWORD *)(v5 - 104) = sub_10001A820(v26, v27, (uint64_t *)(v5 - 88));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 104, v5 - 96);
    swift_bridgeObjectRelease();
    swift_errorRelease(v15);
    swift_errorRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to fetch specific host account when getting manualSortIDAdapter for {accountID: %{public}@, error: %{public}s}", (uint8_t *)v23, 0x16u);
    v28 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v24, 1, v28);
    swift_slowDealloc(v24, -1, -1);
    v29 = *(_QWORD *)(v5 - 184);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    swift_errorRelease(v15);
    goto LABEL_26;
  }
  v41 = v16;
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v52 = v16;
    else
      v52 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v42 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease();
    if (v42)
    {
LABEL_17:
      if ((v41 & 0xC000000000000001) != 0)
      {
        v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v41);
      }
      else
      {
        if (!*(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_41:
          v47 = swift_once(&qword_1008376B8, sub_1004A3E44);
LABEL_23:
          __chkstk_darwin(v47);
          OS_dispatch_queue.sync<A>(execute:)((_QWORD *)(v5 - 88), sub_1001D8BB0);
          v48 = *(_QWORD *)(v5 - 88);
          v49 = type metadata accessor for RDManualSortIDAdapter();
          swift_allocObject(v49, 33, 7);
          v50 = sub_10018C174(v48, (uint64_t)v42, 0);

          *(_QWORD *)(v5 - 88) = 0;
          __chkstk_darwin(v51);
          swift_retain();
          NSManagedObjectContext.performAndWait<A>(_:)(sub_1001D8BCC);
          if (!*(_QWORD *)(v5 - 88))
            sub_1002AF1B8((uint64_t)_swiftEmptyArrayStorage);
          swift_release(v50);

          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
        v43 = *(id *)(v41 + 32);
      }
      v3 = v43;
      v44 = objc_msgSend(v43, "remObjectID", swift_bridgeObjectRelease().n128_f64[0]);
      if (!v44)
        goto LABEL_25;
      v45 = v44;
      sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      v2 = v10;
      v46 = v45;
      LOBYTE(v45) = static NSObject.== infix(_:_:)(v46);

      if ((v45 & 1) == 0)
      {
LABEL_25:

LABEL_26:
        goto LABEL_44;
      }
      v4 = v13;
      v42 = sub_10053CA80();
      v47 = type metadata accessor for RDManualSortIDCache();
      if (qword_1008376B8 == -1)
        goto LABEL_23;
      goto LABEL_41;
    }
  }
  else
  {
    v42 = *(_QWORD **)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v42)
      goto LABEL_17;
  }

  swift_bridgeObjectRelease();
  goto LABEL_43;
}

void sub_100498430(uint64_t a1, id a2, id a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  NSString v32;
  Class isa;
  id v34;
  id v35;
  id v36;
  NSString v37;
  uint64_t v38;
  Class v39;
  uint64_t v40;
  id v41;
  Class v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  Swift::Int v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  _QWORD *v60;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  id v83;
  char *v84;
  unint64_t v85;
  __int128 v86;
  id v87;
  id v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[3];
  uint64_t v92;
  _QWORD *v93;

  v5 = v4;
  v10 = _s10PredicatesOMa(0);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v75 = a1;
    else
      v75 = a1 & 0xFFFFFFFFFFFFFF8;
    *(_QWORD *)&v86 = v11;
    swift_bridgeObjectRetain(a1);
    v76 = _CocoaArrayWrapper.endIndex.getter(v75);
    swift_bridgeObjectRelease(a1);
    if (v76)
    {
      v87 = a2;
      swift_bridgeObjectRetain(a1);
      v14 = _CocoaArrayWrapper.endIndex.getter(v75);
      swift_bridgeObjectRelease(a1);
      v22 = _swiftEmptyArrayStorage;
      if (!v14)
        goto LABEL_64;
      v91[0] = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v14);
      a2 = v87;
      if ((v14 & 0x8000000000000000) == 0)
        goto LABEL_4;
      __break(1u);
    }
LABEL_62:
    sub_1002AF838((uint64_t)_swiftEmptyArrayStorage);
    return;
  }
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
    goto LABEL_62;
  *(_QWORD *)&v86 = v11;
  v91[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v14);
LABEL_4:
  v87 = a2;
  v84 = (char *)a4;
  v85 = (unint64_t)a3;
  v82 = v4;
  v15 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, a1);
    else
      v16 = *(id *)(a1 + 8 * v15 + 32);
    v17 = v16;
    ++v15;
    v18 = objc_msgSend(v16, "objectID");

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
    v20 = *(_QWORD *)(v91[0] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
    v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
    specialized ContiguousArray._endMutation()(v21);
  }
  while (v14 != v15);
  v22 = (_QWORD *)v91[0];
  v5 = v82;
  a4 = (unint64_t)v84;
  while (1)
  {
    v23 = (char *)v13 + *(int *)(sub_10001A630(&qword_1008466B8) + 48);
    *v13 = v22;
    v24 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
    (*(void (**)(char *, id, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, v87, v24);
    swift_storeEnumTagMultiPayload(v13, v86, 10);
    sub_10000D2C0();
    v26 = v25;
    sub_10001C744((uint64_t)v13, _s10PredicatesOMa);
    v83 = v26;
    v27 = sub_100495248((Class)a4, (uint64_t)v26);
    v28 = sub_10001A630((uint64_t *)&unk_100839E80);
    v29 = swift_allocObject(v28, 64, 7);
    v86 = xmmword_1006A3C00;
    *(_OWORD *)(v29 + 16) = xmmword_1006A3C00;
    v30 = (void *)objc_opt_self(NSExpression);
    v31 = objc_msgSend(v30, "expressionForEvaluatedObject");
    *(_QWORD *)(v29 + 56) = sub_1000151B0(0, &qword_10083AEE8, NSExpression_ptr);
    *(_QWORD *)(v29 + 32) = v31;
    v32 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    v34 = objc_msgSend(v30, "expressionForFunction:arguments:", v32, isa, swift_bridgeObjectRelease(v29).n128_f64[0]);

    v35 = objc_msgSend(objc_allocWithZone((Class)NSExpressionDescription), "init");
    v87 = v34;
    objc_msgSend(v35, "setExpression:", v34);
    v36 = v35;
    v37 = String._bridgeToObjectiveC()();
    objc_msgSend(v36, "setName:", v37);

    objc_msgSend(v36, "setExpressionResultType:", 300);
    objc_msgSend(v27, "setReturnsObjectsAsFaults:", 0);
    v38 = swift_allocObject(v28, 64, 7);
    *(_OWORD *)(v38 + 16) = v86;
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    strcpy((char *)(v38 + 32), "parentReminder");
    *(_BYTE *)(v38 + 47) = -18;
    v39 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v27, "setPropertiesToGroupBy:", v39, swift_bridgeObjectRelease(v38).n128_f64[0]);

    v40 = swift_allocObject(v28, 96, 7);
    *(_OWORD *)(v40 + 16) = xmmword_1006A3C40;
    *(_QWORD *)(v40 + 56) = &type metadata for String;
    strcpy((char *)(v40 + 32), "parentReminder");
    *(_BYTE *)(v40 + 47) = -18;
    *(_QWORD *)(v40 + 88) = sub_1000151B0(0, (unint64_t *)&unk_10083AEF0, NSExpressionDescription_ptr);
    *(_QWORD *)(v40 + 64) = v36;
    v41 = v36;
    v42 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v27, "setPropertiesToFetch:", v42, swift_bridgeObjectRelease(v40).n128_f64[0]);

    objc_msgSend(v27, "setResultType:", 2);
    v43 = sub_1000151B0(0, &qword_10083E320, NSDictionary_ptr);
    v44 = NSManagedObjectContext.fetch<A>(_:)(v27, v43);
    if (v5)
    {

      return;
    }
    v45 = v44;
    v80 = v41;
    v81 = v27;
    v93 = &_swiftEmptyDictionarySingleton;
    v46 = (unint64_t)v44 >> 62;
    if ((unint64_t)v44 >> 62)
    {
      v77 = v44 < 0 ? v44 : v44 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v44);
      v47 = _CocoaArrayWrapper.endIndex.getter(v77);
      swift_bridgeObjectRelease(v45);
    }
    else
    {
      v47 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v48 = v83;
    v82 = 0;
    sub_10001A630(&qword_10084C278);
    Dictionary.reserveCapacity(_:)(v47);
    if (v46)
    {
      if (v45 < 0)
        v50 = v45;
      else
        v50 = v45 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v45);
      v51 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease(v45);
      v49 = v87;
      *(_QWORD *)&v86 = v51;
      if (!v51)
      {
LABEL_54:

        swift_bridgeObjectRelease(v45);
        return;
      }
    }
    else
    {
      v49 = v87;
      *(_QWORD *)&v86 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!(_QWORD)v86)
        goto LABEL_54;
    }
    if ((uint64_t)v86 < 1)
      break;
    v5 = 0;
    v84 = (char *)&type metadata for Any + 8;
    v85 = v45 & 0xC000000000000001;
    while (1)
    {
      if (v85)
        v52 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v45);
      else
        v52 = *(id *)(v45 + 8 * v5 + 32);
      v22 = v52;
      *(_QWORD *)&v89 = 0x746E756F63;
      *((_QWORD *)&v89 + 1) = 0xE500000000000000;
      v53 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v89, &type metadata for String);
      v54 = objc_msgSend(v22, "__swift_objectForKeyedSubscript:", v53);
      swift_unknownObjectRelease(v53);
      if (v54)
      {
        _bridgeAnyObjectToAny(_:)(&v89, v54);
        swift_unknownObjectRelease(v54);
      }
      else
      {
        v89 = 0u;
        v90 = 0u;
      }
      sub_1000A5CA8((uint64_t)&v89, (uint64_t)v91, (uint64_t *)&unk_10083D5B0);
      if (!v92)
      {

        sub_10000882C((uint64_t)v91, (uint64_t *)&unk_10083D5B0);
        goto LABEL_24;
      }
      v55 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
      if ((swift_dynamicCast(&v88, v91, v84, v55, 6) & 1) == 0)
      {

        goto LABEL_24;
      }
      v56 = v88;
      a3 = objc_msgSend(v88, "integerValue");

      if ((uint64_t)a3 <= 0)
        goto LABEL_44;
      strcpy((char *)&v89, "parentReminder");
      HIBYTE(v89) = -18;
      v13 = (_QWORD *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v89, &type metadata for String);
      v57 = objc_msgSend(v22, "__swift_objectForKeyedSubscript:", v13);
      swift_unknownObjectRelease(v13);
      if (v57)
      {
        _bridgeAnyObjectToAny(_:)(&v89, v57);
        swift_unknownObjectRelease(v57);
      }
      else
      {
        v89 = 0u;
        v90 = 0u;
      }
      sub_1000A5CA8((uint64_t)&v89, (uint64_t)v91, (uint64_t *)&unk_10083D5B0);
      if (!v92)
      {

        sub_10000882C((uint64_t)v91, (uint64_t *)&unk_10083D5B0);
        goto LABEL_46;
      }
      v58 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
      if ((swift_dynamicCast(&v88, v91, (char *)&type metadata for Any + 8, v58, 6) & 1) == 0)
      {
LABEL_44:

LABEL_46:
        v48 = v83;
        goto LABEL_24;
      }
      v79 = v58;
      v59 = v88;
      v60 = v93;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v93);
      v91[0] = v60;
      v93 = (_QWORD *)0x8000000000000000;
      a4 = sub_1002C6690((uint64_t)v59);
      v63 = v60[2];
      v64 = (v62 & 1) == 0;
      v65 = v63 + v64;
      if (__OFADD__(v63, v64))
        break;
      v66 = v62;
      if (v60[3] >= v65)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1002D6904();
      }
      else
      {
        sub_1002CD5BC(v65, isUniquelyReferenced_nonNull_native);
        v67 = sub_1002C6690((uint64_t)v59);
        if ((v66 & 1) != (v68 & 1))
          goto LABEL_71;
        a4 = v67;
      }
      v69 = (_QWORD *)v91[0];
      if ((v66 & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(v91[0] + 56) + 8 * a4) = a3;
      }
      else
      {
        *(_QWORD *)(v91[0] + 8 * (a4 >> 6) + 64) |= 1 << a4;
        v70 = 8 * a4;
        *(_QWORD *)(v69[6] + v70) = v59;
        *(_QWORD *)(v69[7] + v70) = a3;
        v71 = v69[2];
        v72 = __OFADD__(v71, 1);
        v73 = v71 + 1;
        if (v72)
          goto LABEL_70;
        v69[2] = v73;
        v74 = v59;
      }
      v48 = v83;
      v93 = v69;

      swift_bridgeObjectRelease(0x8000000000000000);
LABEL_24:
      ++v5;
      v49 = v87;
      if ((_QWORD)v86 == v5)
        goto LABEL_54;
    }
    __break(1u);
LABEL_64:
    v85 = (unint64_t)a3;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v79);
  __break(1u);
}

void sub_100498E18(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, _QWORD *a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, unint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Subtasks;
  uint64_t v39;
  double v40;
  uint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t inited;
  void *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  void (*v99)(uint64_t *, uint64_t, __n128);
  __n128 v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  id v109;
  uint64_t *v110;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  int64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  id v159;
  char v160[8];
  uint64_t v161;

  v147 = a8;
  v155 = a7;
  v156 = a6;
  v157 = a5;
  v158 = a3;
  v154 = a4;
  v20 = sub_10001A630(&qword_100844170);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v140 = (char *)&v128 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v139 = (char *)&v128 - v24;
  __chkstk_darwin(v25);
  v136 = (char *)&v128 - v26;
  v144 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v135 = (char *)&v128 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v138 = (char *)&v128 - v29;
  __chkstk_darwin(v30);
  v141 = (char *)&v128 - v31;
  v134 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v132 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v133 = (uint64_t *)((char *)&v128 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v146 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v146);
  v137 = (char *)&v128 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v145 = (char *)&v128 - v35;
  __chkstk_darwin(v36);
  v142 = (uint64_t)&v128 - v37;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v39 = *(_QWORD *)(Subtasks - 8);
  *(_QWORD *)&v40 = __chkstk_darwin(Subtasks).n128_u64[0];
  v42 = (char *)&v128 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *a1;
  v159 = objc_msgSend(v43, "remObjectID", v40);
  if (v159)
  {
    v151 = v20;
    v152 = v21;
    v150 = a9;
    v44 = a2;
    v153 = v43;
    sub_100499FFC(a2);
    v148 = v45;
    v47 = v46;
    LODWORD(v149) = v46 & 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v42, v158, Subtasks);
    v48 = (*(uint64_t (**)(char *, uint64_t))(v39 + 88))(v42, Subtasks);
    if (v48 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:))
    {
      v131 = a15;
      v50 = v150;
      v49 = v151;
      v51 = v159;
      goto LABEL_4;
    }
    v51 = v159;
    v130 = a16;
    if (v48 == enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
    {
      v56 = (uint64_t)v157;
      v57 = sub_10049F1E4(v154, (uint64_t)v157, v156);
      if (!v16)
      {
        v58 = v57;
        LODWORD(v158) = v47;
        v59 = sub_1001B23AC(v51, v57);
        swift_bridgeObjectRelease(v58);
        if ((v59 & 1) == 0)
        {
          v131 = a15;
          v50 = v150;
          v49 = v151;
          goto LABEL_4;
        }
        v60 = *v147;
        v61 = *a10;
        swift_bridgeObjectRetain(*v147);
        swift_bridgeObjectRetain(v61);
        v62 = (int64_t)sub_10049F2D0(v153, v44, (uint64_t)v155, v56, v61, a11, a12 & 1);
        swift_bridgeObjectRelease(v60);
        swift_bridgeObjectRelease(v61);
        if ((unint64_t)v62 >> 62)
        {
          if (v62 < 0)
            v126 = v62;
          else
            v126 = v62 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v62);
          v63 = _CocoaArrayWrapper.endIndex.getter(v126);
          swift_bridgeObjectRelease(v62);
        }
        else
        {
          v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v64 = v44;
        v131 = a15;
        if (v63)
        {
          v65 = v142;
          sub_1000151E8(v44, v142, _s9UtilitiesO12SortingStyleOMa);
          if (swift_getEnumCaseMultiPayload(v65, v146) == 4)
          {
            v66 = *(_QWORD **)(v65 + 8);
            v157 = *(void **)v65;
            v67 = v65;
            v69 = *(_QWORD *)(v65 + 16);
            v68 = *(_QWORD *)(v65 + 24);
            v70 = *(_QWORD *)(v67 + 32);

            if (a13)
            {
              v129 = v70;
              v147 = v66;
              v154 = v68;
              v142 = v69;
              v156 = v62;
              swift_retain();
              v71 = v153;
              v72 = objc_msgSend(v153, "remObjectID");
              if (v72)
              {
                v73 = v72;
                v74 = sub_10001A630((uint64_t *)&unk_10083AD90);
                inited = swift_initStackObject(v74, v160);
                *(_OWORD *)(inited + 16) = xmmword_1006A7330;
                *(_QWORD *)(inited + 32) = v71;
                v161 = inited;
                v76 = v71;
                specialized Array._endMutation()(inited);
                v77 = v161;
                v78 = v76;
                sub_10011F128(v77);
                v80 = v79;
                swift_bridgeObjectRelease(v77);
                sub_10018BB4C(v80);
                v82 = v81;
                swift_bridgeObjectRelease(v80);
                v83 = v73;
                v84 = sub_1002B18C8(v83, v82);
                v85 = v82;
                v86 = (void *)v84;
                swift_bridgeObjectRelease(v85);

                v87 = v154;
                v88 = v147;
                v89 = (uint64_t)v157;
                if (v86)
                {
                  v128 = a13;
                  v62 = v156;
                  if (v157
                    && (v90 = sub_100239574((uint64_t)v86, (uint64_t)v147),
                        swift_bridgeObjectRelease(v129),
                        swift_bridgeObjectRelease(v87),
                        swift_bridgeObjectRelease(v142),
                        swift_bridgeObjectRelease(v88),
                        v91 = swift_bridgeObjectRelease(v89),
                        v90))
                  {
                    v92 = v90;
                    v93 = *(_QWORD *)(v90 + 16);
                    v64 = v44;
                    v94 = (uint64_t)v145;
                    if (!v93)
                    {
                      swift_release(v128);
                      swift_release(v86);
                      swift_bridgeObjectRelease(v92);
                      goto LABEL_44;
                    }
                    v157 = v86;
                    v95 = v132;
                    v96 = v133;
                    v97 = v134;
                    (*(void (**)(uint64_t *, void *, uint64_t, __n128))(v132 + 16))(v133, v155, v134, v91);
                    v98 = (*(uint64_t (**)(uint64_t *, uint64_t))(v95 + 88))(v96, v97);
                    if (v98 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
                    {
                      v99 = *(void (**)(uint64_t *, uint64_t, __n128))(v95 + 8);
                      v100 = swift_bridgeObjectRetain(v62);
                      v99(v96, v97, v100);
                      v101 = &_swiftEmptySetSingleton;
                    }
                    else
                    {
                      v113 = v98;
                      if (v98 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
                      {
                        (*(void (**)(uint64_t *, uint64_t))(v95 + 96))(v96, v97);
                        v114 = *v96;
                        swift_bridgeObjectRetain(v62);
                        v101 = (void *)sub_1002EBC10(v114);
                        swift_bridgeObjectRelease(v114);
                      }
                      else if (v98 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
                      {
                        v62 = v156;
                        swift_bridgeObjectRetain(v156);
                        v101 = &_swiftEmptySetSingleton;
                        v64 = v44;
                      }
                      else
                      {
                        v115 = enum case for REMRemindersListDataView.ShowCompleted.on(_:);
                        swift_bridgeObjectRetain(v156);
                        if (v113 != v115)
                        {
                          _diagnoseUnexpectedEnumCase<A>(type:)(v134, v134);
                          __break(1u);
                          JUMPOUT(0x100499FE4);
                        }
                        v101 = &_swiftEmptySetSingleton;
                        v64 = v44;
                        v62 = v156;
                      }
                    }
                    swift_bridgeObjectRetain(v62);
                    v117 = sub_10049B990(v116, (uint64_t)v101);
                    swift_bridgeObjectRelease(v62);
                    swift_bridgeObjectRelease(v101);
                    sub_10011F128((uint64_t)v117);
                    v119 = v118;
                    swift_bridgeObjectRelease(v117);
                    v120 = v128;
                    sub_10018BB4C(v119);
                    v122 = v121;
                    swift_bridgeObjectRelease(v119);
                    v123 = sub_1001D61DC(v92, v122, v62);
                    v124 = v62;
                    v62 = (int64_t)v123;
                    swift_bridgeObjectRelease_n(v124, 2);
                    swift_bridgeObjectRelease(v92);
                    swift_release(v157);
                    swift_release(v120);
                    swift_bridgeObjectRelease(v122);
                  }
                  else
                  {
                    swift_release(v86);
                    swift_release(v128);
                    v64 = v44;
                  }
                }
                else
                {
                  swift_release(a13);
                  sub_1001D8C44(v89, (uint64_t)v88, v142, v87, v129);
                  v62 = v156;
                  v64 = v44;
                }
              }
              else
              {
                swift_release(a13);
                sub_1001D8C44((uint64_t)v157, (uint64_t)v147, v142, v154, v129);
                v62 = v156;
                v64 = v44;
              }
            }
            else
            {
              sub_1001D8C44((uint64_t)v157, (uint64_t)v66, v69, v68, v70);
              v64 = v44;
            }
          }
          else
          {
            sub_10001C744(v65, _s9UtilitiesO12SortingStyleOMa);
          }
        }
        v94 = (uint64_t)v145;
LABEL_44:
        if ((unint64_t)v62 >> 62)
        {
          if (v62 >= 0)
            v127 = v62 & 0xFFFFFFFFFFFFFF8;
          else
            v127 = v62;
          swift_bridgeObjectRetain(v62);
          _CocoaArrayWrapper.endIndex.getter(v127);
          swift_bridgeObjectRelease(v62);
        }
        sub_1000151E8(v64, v94, _s9UtilitiesO12SortingStyleOMa);
        v125 = (char *)&loc_1004998F0 + dword_100499FE4[swift_getEnumCaseMultiPayload(v94, v146)];
        __asm { BR              X10 }
      }
    }
    else
    {
      if (v48 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)(Subtasks, Subtasks);
        __break(1u);
        JUMPOUT(0x100499FC0);
      }
      v102 = sub_10049EB78(a14, v156, v155, v157, a11);
      if (!v16)
      {
        v103 = v102;
        v131 = a15;
        v104 = objc_msgSend(v153, "objectID");
        v105 = v104;
        v50 = v150;
        if (*(_QWORD *)(v103 + 16))
        {
          v106 = sub_1002C6690((uint64_t)v104);
          if ((v107 & 1) != 0)
          {
            v108 = *(_QWORD *)(*(_QWORD *)(v103 + 56) + 8 * v106);

            swift_bridgeObjectRelease(v103);
            v109 = v51;
            v110 = v131;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v131);
            v161 = *v110;
            *v110 = 0x8000000000000000;
            sub_10028E4F4(v108, v109, isUniquelyReferenced_nonNull_native);
            v112 = *v110;
            *v110 = v161;
            swift_bridgeObjectRelease(v112);
            v49 = v151;
            goto LABEL_5;
          }
        }

        swift_bridgeObjectRelease(v103);
        v49 = v151;
LABEL_4:
        sub_1002CBCC0((uint64_t)v51);
LABEL_5:
        v52 = sub_1002CBBF4((uint64_t)v51);

        swift_bridgeObjectRelease(v52);
        v53 = v153;
        v161 = (uint64_t)v153;
        v54 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
        v55 = v53;
        REMSortableElement.init(element:sortIndex:)(&v161, v148, v149, v54);

        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v152 + 56))(v50, 0, 1, v49);
        swift_bridgeObjectRelease(0);
        return;
      }
    }

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(a9, 1, 1, v20);
  }
}

void sub_100499FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v2 = type metadata accessor for Date(0);
  __chkstk_darwin(v2);
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v5 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151E8(a1, (uint64_t)v7, v8);
  v9 = (char *)&loc_10049A118 + dword_10049A2C4[swift_getEnumCaseMultiPayload(v7, v5)];
  __asm { BR              X10 }
}

uint64_t sub_10049A128()
{
  uint64_t v0;

  sub_10001C744(v0, _s9UtilitiesO12SortingStyleOMa);
  return 0;
}

uint64_t sub_10049A2DC(id *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v10;

  v10 = *a1;
  v3 = v10;
  sub_100499FFC(a2);
  v5 = v4;
  v7 = v6 & 1;
  v8 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  return REMSortableElement.init(element:sortIndex:)(&v10, v5, v7, v8);
}

uint64_t sub_10049A368(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t *a6)
{
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  os_log_t oslog[2];
  _OWORD v26[2];
  uint64_t v27;

  if (qword_100837960 != -1)
    swift_once(&qword_100837960, sub_1005B8A54);
  v12 = qword_100872290;
  swift_retain();
  v13 = sub_1000D19A0(a1, a2, a3, a4, a5, 1, v12);
  swift_release(v12);
  if (v13)
  {
    v14 = v13;
    sub_10019CD04((uint64_t)v26);
    v24 = v26[1];
    *(_OWORD *)oslog = v26[0];
    v15 = v27;

    v17 = v24;
    v16 = *(_OWORD *)oslog;
  }
  else
  {
    v15 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
  }
  v18 = *a6;
  v19 = a6[1];
  v20 = a6[2];
  v21 = a6[3];
  v22 = a6[4];
  *(_OWORD *)a6 = v16;
  *((_OWORD *)a6 + 1) = v17;
  a6[4] = v15;
  return sub_1001D8C44(v18, v19, v20, v21, v22);
}

uint64_t sub_10049A714@<X0>(void *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _QWORD aBlock[5];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v12 = swift_allocObject(&unk_1007F5DE0, 64, 7);
  *(_WORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = a4;
  *(_QWORD *)(v12 + 40) = a5;
  *(_QWORD *)(v12 + 48) = a1;
  *(_QWORD *)(v12 + 56) = &v24;
  v13 = swift_allocObject(&unk_1007F5E08, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_10049A8D8;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_1000098E4;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000098C4;
  aBlock[3] = &unk_1007F5E20;
  v14 = _Block_copy(aBlock);
  v15 = v23;
  swift_bridgeObjectRetain(a4);
  v16 = a5;
  v17 = a1;
  swift_retain();
  swift_release(v15);
  objc_msgSend(v17, "performBlockAndWait:", v14);
  _Block_release(v14);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation(v13, "", 126, 651, 45, 1);
  result = swift_release(v13);
  if ((v17 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v20 = v25;
    v21 = v24;
    v19 = v26;
    result = swift_release(v12);
    *(_OWORD *)a6 = v21;
    *(_OWORD *)(a6 + 16) = v20;
    *(_QWORD *)(a6 + 32) = v19;
  }
  return result;
}

uint64_t sub_10049A8A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10049A8D8()
{
  uint64_t v0;

  return sub_10049A368((void *)*(unsigned __int16 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(uint64_t **)(v0 + 56));
}

uint64_t sub_10049A8EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10049A8FC()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v0 = qword_100872288;
  v1 = (void *)swift_retain();
  v2 = sub_1003011F8(v1);
  swift_release(v0);
  if (v2)
  {
    v3 = sub_10053CA80();
    v4 = type metadata accessor for RDManualSortIDCache();
    if (qword_1008376B8 != -1)
      v4 = swift_once(&qword_1008376B8, sub_1004A3E44);
    __chkstk_darwin(v4);
    OS_dispatch_queue.sync<A>(execute:)(&v14, sub_1001D92EC);
    v5 = v14;
    v6 = type metadata accessor for RDManualSortIDAdapter();
    swift_allocObject(v6, 33, 7);
    v7 = sub_10018C174(v5, (uint64_t)v3, 0);

  }
  else
  {
    if (qword_1008375D0 != -1)
      swift_once(&qword_1008375D0, sub_100497804);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001AAA8(v8, (uint64_t)qword_10084C248);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No primary active CloudKit account found when trying to fetch reminders in REMRemindersListDataView invocation with .manualWithSortHint sorting style", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    return 0;
  }
  return v7;
}

void sub_10049AAF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v2 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151E8(a1, (uint64_t)v4, v5);
  v6 = (char *)sub_10049AB8C + 4 * byte_1006BDF66[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_10049AB8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006BE080);
  *(_QWORD *)(v3 + 32) = KeyPath;
  *(_QWORD *)(v1 - 40) = v3;
  specialized Array._endMutation()(KeyPath);
  v5 = *(_QWORD *)(v1 - 40);
  sub_10001C744(v0, _s9UtilitiesO12SortingStyleOMa);
  return v5;
}

void sub_10049ACB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v2 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151E8(a1, (uint64_t)v4, v5);
  v6 = (char *)sub_10049AD48 + 4 * byte_1006BDF6C[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

_QWORD *sub_10049AD48()
{
  uint64_t v0;

  sub_10001C744(v0, _s9UtilitiesO12SortingStyleOMa);
  return _swiftEmptyArrayStorage;
}

void sub_10049ADC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  _QWORD v14[10];

  v14[3] = a3;
  v14[6] = a2;
  v4 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v14[4] = *(_QWORD *)(v4 - 8);
  v14[5] = v4;
  __chkstk_darwin(v4);
  v5 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v9 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v9);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151E8(a1, (uint64_t)v11, v12);
  v13 = (char *)sub_10049AF24 + 4 * byte_1006BDF72[swift_getEnumCaseMultiPayload(v11, v9)];
  __asm { BR              X10 }
}

uint64_t sub_10049AF24()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v4, v2, v3);
  *(_QWORD *)(v6 - 88) = _swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 104))(v5, enum case for REMRemindersListDataView.SortingDirection.descending(_:), v3);
  v7 = sub_10009FC50((unint64_t *)&qword_10083A850, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SortingDirection, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.SortingDirection);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v6 - 96), v3, v7);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v6 - 104), v3, v7);
  v9 = *(_QWORD *)(v6 - 104);
  v8 = *(_QWORD *)(v6 - 96);
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
  v10(v5, v3);
  if (v8 == v9)
  {
    if (qword_100837250 != -1)
      swift_once(&qword_100837250, sub_10033CFAC);
    v11 = (id)qword_100871E38;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
    v13 = *(_QWORD *)((*(_QWORD *)(v6 - 88) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v12 = *(_QWORD *)((*(_QWORD *)(v6 - 88) & 0xFFFFFFFFFFFFFF8) + 0x18);
    v14 = *(_QWORD *)(v6 - 128);
    if (v13 >= v12 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
    v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
    specialized Array._endMutation()(v15);
  }
  else
  {
    if (qword_100837248 != -1)
      swift_once(&qword_100837248, sub_10033CF30);
    v14 = *(_QWORD *)(v6 - 128);
    if (qword_100871E30)
    {
      v16 = (id)qword_100871E30;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v18 = *(_QWORD *)((*(_QWORD *)(v6 - 88) & 0xFFFFFFFFFFFFFF8) + 0x10);
      v17 = *(_QWORD *)((*(_QWORD *)(v6 - 88) & 0xFFFFFFFFFFFFFF8) + 0x18);
      v19 = *(_QWORD *)(v6 - 112);
      if (v18 >= v17 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1);
      v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
      specialized Array._endMutation()(v20);

      v21 = *(_QWORD *)(v6 - 136);
      if (v21)
        goto LABEL_24;
      goto LABEL_13;
    }
    if (qword_1008375D0 != -1)
      swift_once(&qword_1008375D0, sub_100497804);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10001AAA8(v30, (uint64_t)qword_10084C248);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "REMCDReminder.displayDateSortDescriptor should not be nil", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

  }
  v19 = *(_QWORD *)(v6 - 112);
  v21 = *(_QWORD *)(v6 - 136);
  if (v21)
  {
LABEL_24:
    v28 = v21;
    goto LABEL_25;
  }
LABEL_13:
  v22 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v23 = swift_allocObject(v22, 48, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1006A8550;
  if (qword_100837228 != -1)
    swift_once(&qword_100837228, sub_10033CED0);
  v24 = (void *)qword_100871E10;
  *(_QWORD *)(v23 + 32) = qword_100871E10;
  v25 = qword_100837210;
  v26 = v24;
  if (v25 != -1)
    v26 = (id)swift_once(&qword_100837210, sub_10033CE28);
  v27 = (void *)qword_100871DF8;
  *(_QWORD *)(v23 + 40) = qword_100871DF8;
  *(_QWORD *)(v6 - 96) = v23;
  specialized Array._endMutation()(v26);
  v28 = *(_QWORD *)(v6 - 96);
  v29 = v27;
  v21 = *(_QWORD *)(v6 - 136);
LABEL_25:
  swift_bridgeObjectRetain(v21);
  sub_1001E0B4C(v28);
  v10(v4, v3);
  v35 = *(_QWORD *)(v6 - 120);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v14 + 16))(v1, v19, v35);
  v36 = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 88))(v1, v35);
  if (v36 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v1, v35);
    return *(_QWORD *)(v6 - 88);
  }
  if (v36 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v14 + 96))(v1, v35);
    swift_bridgeObjectRelease(*v1);
    return *(_QWORD *)(v6 - 88);
  }
  if (v36 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
    return *(_QWORD *)(v6 - 88);
  if (v36 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
  {
    v37 = sub_10001A630((uint64_t *)&unk_10083AD90);
    v38 = swift_allocObject(v37, 40, 7);
    *(_OWORD *)(v38 + 16) = xmmword_1006A7330;
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    KeyPath = swift_getKeyPath(&unk_1006BDFA0);
    v40 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
    *(_QWORD *)(v38 + 32) = v40;
    *(_QWORD *)(v6 - 96) = v38;
    specialized Array._endMutation()(v40);
    v41 = *(_QWORD *)(v6 - 88);
    *(_QWORD *)(v6 - 96) = *(_QWORD *)(v6 - 96);
    sub_1001E0B4C(v41);
    *(_QWORD *)(v6 - 88) = *(_QWORD *)(v6 - 96);
    return *(_QWORD *)(v6 - 88);
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v35, v35);
  __break(1u);
  return result;
}

_QWORD *sub_10049B990(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  id v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_9:
        v6 = v5;
        v7 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_19;
        v8 = objc_msgSend(v5, "remObjectID");
        if (v8)
        {
          v9 = v8;
          if (!objc_msgSend(v6, "completed"))
          {

LABEL_15:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
            v12 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
            v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v6);
            specialized ContiguousArray._endMutation()(v13);
            goto LABEL_5;
          }
          v10 = sub_1001B23AC(v9, a2);

          if ((v10 & 1) != 0)
            goto LABEL_15;
        }

LABEL_5:
        ++v4;
        if (v7 == v3)
          return _swiftEmptyArrayStorage;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      if (a1 < 0)
        v15 = a1;
      else
        v15 = a1 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v15);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10049BB18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  __n128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  void *v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  id v87;
  id v88;
  id v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  objc_class *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t, uint64_t);
  _QWORD v110[2];

  v10 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v108 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v107 = (char *)&v93 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v93 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v93 - v19;
  if (a1 < 1)
    return _swiftEmptyArrayStorage;
  v95 = a5;
  v96 = a3;
  v94 = a4;
  v21 = sub_10001A630(&qword_10084C280);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v23 = MutableOrderedSet.init(_:)(v22);
  v102 = *(_QWORD *)(a2 + 16);
  if (v102)
  {
    v97 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
    v101 = a2 + v97;
    v25 = *(_QWORD *)(v108 + 72);
    v109 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 16);
    v93 = a2;
    v26 = swift_bridgeObjectRetain(a2);
    v27 = 0;
    v26.n128_u64[0] = 138543362;
    v103 = v26;
    v104 = a1;
    v28 = v107;
    v106 = v25;
    v98 = v12;
    v99 = v20;
    while (1)
    {
      v105 = v27;
      v31 = v109(v20, v101 + v25 * v27, v10);
      v32 = MutableOrderedSet.count.getter(v31);
      if (v32 >= a1)
        break;
      v33 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v32);
      v110[0] = v33;
      v34 = MutableOrderedSet.contains(_:)(v110);

      if ((v34 & 1) != 0)
      {
        if (qword_1008375D0 != -1)
          swift_once(&qword_1008375D0, sub_100497804);
        v36 = type metadata accessor for Logger(0);
        sub_10001AAA8(v36, (uint64_t)qword_10084C248);
        v37 = v109(v12, (uint64_t)v20, v10);
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v38, v39))
        {
          v40 = swift_slowAlloc(12, -1);
          v41 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v40 = v103.n128_u32[0];
          v42 = REMRemindersListDataView.ReminderLite.objectID.getter(v41);
          *(_QWORD *)(v40 + 4) = v42;
          *v41 = v42;
          v29 = *(void (**)(char *, uint64_t))(v108 + 8);
          v29(v12, v10);
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "Attempted to fetch duplicate initial reminders {reminderLite.objectID: %{public}@}", (uint8_t *)v40, 0xCu);
          v43 = sub_10001A630((uint64_t *)&unk_100839E70);
          swift_arrayDestroy(v41, 1, v43);
          v44 = v41;
          a1 = v104;
          swift_slowDealloc(v44, -1, -1);
          v45 = v40;
          v28 = v107;
          swift_slowDealloc(v45, -1, -1);

        }
        else
        {

          v29 = *(void (**)(char *, uint64_t))(v108 + 8);
          v29(v12, v10);
        }
        v25 = v106;
      }
      else
      {
        v46 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v35);
        v110[0] = v46;
        MutableOrderedSet.add(_:)(v110, v47);

        v49 = (_QWORD *)REMRemindersListDataView.ReminderLite.subtasks.getter(v48);
        if (!v49)
          v49 = _swiftEmptyArrayStorage;
        v50 = v49[2];
        if (v50)
        {
          v100 = v49;
          v51 = (char *)v49 + v97;
          while (1)
          {
            v54 = v109(v17, (uint64_t)v51, v10);
            v55 = MutableOrderedSet.count.getter(v54);
            if (v55 >= a1)
              break;
            v56 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v55);
            v110[0] = v56;
            v57 = MutableOrderedSet.contains(_:)(v110);

            if ((v57 & 1) != 0)
            {
              if (qword_1008375D0 != -1)
                swift_once(&qword_1008375D0, sub_100497804);
              v59 = type metadata accessor for Logger(0);
              sub_10001AAA8(v59, (uint64_t)qword_10084C248);
              v60 = v109(v28, (uint64_t)v17, v10);
              v61 = Logger.logObject.getter(v60);
              v62 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v61, v62))
              {
                v63 = swift_slowAlloc(12, -1);
                v64 = (uint64_t *)swift_slowAlloc(8, -1);
                *(_DWORD *)v63 = v103.n128_u32[0];
                v65 = REMRemindersListDataView.ReminderLite.objectID.getter(v64);
                *(_QWORD *)(v63 + 4) = v65;
                *v64 = v65;
                v29 = *(void (**)(char *, uint64_t))(v108 + 8);
                v29(v107, v10);
                _os_log_impl((void *)&_mh_execute_header, v61, v62, "Attempted to fetch duplicate initial reminders {subtask.objectID: %{public}@}", (uint8_t *)v63, 0xCu);
                v66 = sub_10001A630((uint64_t *)&unk_100839E70);
                swift_arrayDestroy(v64, 1, v66);
                v67 = v64;
                a1 = v104;
                swift_slowDealloc(v67, -1, -1);
                v68 = v63;
                v28 = v107;
                swift_slowDealloc(v68, -1, -1);

              }
              else
              {

                v29 = *(void (**)(char *, uint64_t))(v108 + 8);
                v29(v28, v10);
              }
              v29(v17, v10);
              v25 = v106;
            }
            else
            {
              v52 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v58);
              v110[0] = v52;
              MutableOrderedSet.add(_:)(v110, v53);

              v29 = *(void (**)(char *, uint64_t))(v108 + 8);
              v29(v17, v10);
            }
            v51 += v25;
            if (!--v50)
              goto LABEL_29;
          }
          v29 = *(void (**)(char *, uint64_t))(v108 + 8);
          v29(v17, v10);
LABEL_29:
          swift_bridgeObjectRelease();
          v12 = v98;
        }
        else
        {
          swift_bridgeObjectRelease();
          v29 = *(void (**)(char *, uint64_t))(v108 + 8);
        }
        v20 = v99;
      }
      v30 = v105 + 1;
      v29(v20, v10);
      v27 = v30;
      if (v30 == v102)
        goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v108 + 8))(v20, v10);
LABEL_32:
    v24 = swift_bridgeObjectRelease();
  }
  v69 = MutableOrderedSet.array.getter(v24);
  v70 = v69;
  v110[0] = _swiftEmptyArrayStorage;
  if (v69 >> 62)
    goto LABEL_46;
  v71 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v69);
  if (v71)
  {
LABEL_35:
    v72 = 4;
    while (1)
    {
      v73 = v72 - 4;
      if ((v70 & 0xC000000000000001) != 0)
      {
        v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v72 - 4, v70);
        v75 = v72 - 3;
        if (__OFADD__(v73, 1))
          goto LABEL_45;
      }
      else
      {
        v74 = *(id *)(v70 + 8 * v72);
        v75 = v72 - 3;
        if (__OFADD__(v73, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          if (v70 < 0)
            v83 = v70;
          else
            v83 = v70 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v70);
          v71 = _CocoaArrayWrapper.endIndex.getter(v83);
          if (!v71)
            break;
          goto LABEL_35;
        }
      }
      v76 = v74;
      v77 = sub_1005CBC20(v76);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
      v80 = *(_QWORD *)(v110[0] + 16);
      v79 = *(_QWORD *)(v110[0] + 24);
      if (v80 >= v79 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1);
      v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
      specialized Array._endMutation()(v81);
      ++v72;
      if (v75 == v71)
      {
        swift_bridgeObjectRelease();
        v82 = (_QWORD *)v110[0];
        goto LABEL_51;
      }
    }
  }
  swift_bridgeObjectRelease();
  v82 = _swiftEmptyArrayStorage;
LABEL_51:
  swift_bridgeObjectRelease();
  sub_10033F648();
  v84 = v96;
  v86 = sub_1005CEA9C((uint64_t)v82, 0, 1, v85, v95);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v87 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
  v88 = objc_msgSend(v87, "fetchOptionsIncludingDueDateDeltaAlerts");

  v89 = v88;
  sub_100340768((uint64_t)v86, v89, v84, v94);
  v92 = v91;
  swift_release(v23);
  swift_bridgeObjectRelease();

  return (_QWORD *)v92;
}

_QWORD *sub_10049C4C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  void (*v29)(char *, uint64_t, __n128);
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *result;
  char *v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  objc_class *v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  objc_class *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;

  v10 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v75 - v16;
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v19 = v18((char *)&v75 - v16, a2, v10, v15);
  if (a1 < 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    return _swiftEmptyArrayStorage;
  }
  v78 = a4;
  v79 = a5;
  v20 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v19);
  if ((v20 & 0xC000000000000001) != 0)
  {
    if (v20 >= 0)
      v20 &= 0xFFFFFFFFFFFFFF8uLL;
    v21 = __CocoaSet.count.getter(v20);
  }
  else
  {
    v21 = *(_QWORD *)(v20 + 16);
  }
  v22 = swift_bridgeObjectRelease();
  v23 = v18(v13, (uint64_t)v17, v10, v22);
  if (v21)
  {
    v24 = *(void (**)(char *, uint64_t))(v11 + 8);
    v24(v13, v10);
    v25 = ((uint64_t (*)(char *, uint64_t))v24)(v17, v10);
    goto LABEL_16;
  }
  v26 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter(v23);
  if ((v26 & 0xC000000000000001) != 0)
  {
    if (v26 >= 0)
      v26 &= 0xFFFFFFFFFFFFFF8uLL;
    v27 = __CocoaSet.count.getter(v26);
  }
  else
  {
    v27 = *(_QWORD *)(v26 + 16);
  }
  v28 = swift_bridgeObjectRelease();
  v29 = *(void (**)(char *, uint64_t, __n128))(v11 + 8);
  v29(v13, v10, v28);
  v25 = ((uint64_t (*)(char *, uint64_t))v29)(v17, v10);
  if (!v27)
    return _swiftEmptyArrayStorage;
LABEL_16:
  v30 = (void *)REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter(v25);
  v31 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter(v30);
  sub_10059DA70(v31, v30);
  v33 = (uint64_t)sub_1001E8984(v32);
  swift_bridgeObjectRelease();
  LODWORD(v34) = v33 < 0 || (v33 & 0x4000000000000000) != 0;
  if ((_DWORD)v34 == 1)
    goto LABEL_49;
  if (*(_QWORD *)(v33 + 16) >= a1)
    v35 = a1;
  else
    v35 = *(_QWORD *)(v33 + 16);
  while (1)
  {
    if ((v33 & 0xC000000000000001) != 0 && v35)
    {
      type metadata accessor for REMObjectID_Codable(0);
      v36 = 0;
      do
      {
        a1 = v36 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v36);
        v36 = a1;
      }
      while (v35 != a1);
    }
    if ((_DWORD)v34)
    {
      swift_bridgeObjectRetain(v33);
      v37 = _CocoaArrayWrapper.subscript.getter(0, v35, v33);
      v39 = v38;
      v41 = v40;
      a1 = v42;
      swift_release_n(v33);
      v35 = (unint64_t)a1 >> 1;
      v33 = v37;
    }
    else
    {
      v41 = 0;
      v39 = (uint64_t **)(v33 + 32);
    }
    v43 = v35 - v41;
    if (__OFSUB__(v35, v41))
      goto LABEL_56;
    if (!v43)
      break;
    v82 = _swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v35 - v41);
    if (v43 < 0)
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      return result;
    }
    v76 = a3;
    v77 = v33;
    v33 = 0;
    a1 = 0;
    a3 = (uint64_t)&v39[v41];
    while (1)
    {
      v45 = (char *)(v33 + 1);
      if (__OFADD__(v33, 1))
        break;
      if (v41 + v33 >= v35 || v33 >= v43)
        goto LABEL_48;
      v46 = *(id *)(a3 + 8 * v33);
      v47 = sub_1005CBC20(v46);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v48);
      v34 = v82[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
      v49 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v47);
      specialized ContiguousArray._endMutation()(v49);
      ++v33;
      if (v45 == (char *)v43)
      {
        v50 = v82;
        swift_unknownObjectRelease(v77);
        a3 = v76;
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRetain(v33);
    v70 = _CocoaArrayWrapper.endIndex.getter(v69);
    result = (_QWORD *)swift_release(v33);
    if (v70 >= a1)
      v35 = a1;
    else
      v35 = v70;
    if (v35 < 0)
      goto LABEL_58;
    swift_bridgeObjectRetain(v33);
    v72 = _CocoaArrayWrapper.endIndex.getter(v71);
    result = (_QWORD *)swift_release(v33);
    if (v72 < 0)
      goto LABEL_59;
    swift_bridgeObjectRetain(v33);
    v74 = _CocoaArrayWrapper.endIndex.getter(v73);
    swift_release(v33);
    if (v74 < v35)
    {
      __break(1u);
LABEL_56:
      __break(1u);
      swift_once(&qword_1008375D0, sub_100497804);
      v58 = type metadata accessor for Logger(0);
      sub_10001AAA8(v58, (uint64_t)qword_10084C248);
      swift_errorRetain(a1);
      v59 = swift_errorRetain(a1);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter(v60);
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(12, -1);
        v63 = (_QWORD *)swift_slowAlloc(32, -1);
        v82 = v63;
        *(_DWORD *)v62 = 136446210;
        v80 = a1;
        swift_errorRetain(a1);
        v64 = sub_10001A630((uint64_t *)&unk_10083AA20);
        v65 = String.init<A>(describing:)(&v80, v64);
        v80 = sub_10001A820(v65, v66, (uint64_t *)&v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
        swift_bridgeObjectRelease();
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to fetch reminders from reminderLites. Not returning initial reminder {error: %{public}s}", v62, 0xCu);
        swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v63, -1, -1);
        swift_slowDealloc(v62, -1, -1);
      }
      else
      {
        swift_errorRelease(a1);
        swift_errorRelease(a1);
      }

      swift_errorRelease(a1);
      return _swiftEmptyArrayStorage;
    }
  }
  swift_unknownObjectRelease(v33);
  v50 = _swiftEmptyArrayStorage;
LABEL_40:
  v51 = v79;
  sub_10033F648();
  v53 = sub_1005CEA9C((uint64_t)v50, 0, 1, v52, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v54 = objc_msgSend((id)objc_opt_self(REMReminderFetchOptions), "defaultFetchOptions");
  v55 = a3;
  v56 = objc_msgSend(v54, "fetchOptionsIncludingDueDateDeltaAlerts");

  v57 = v56;
  sub_100340768((uint64_t)v53, v57, v55, v78);
  v68 = v67;
  swift_bridgeObjectRelease();

  return (_QWORD *)v68;
}

_QWORD *sub_10049CB18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint8_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  void (*v71)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  _QWORD *v103;
  void *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  char *v114;
  _QWORD *v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint8_t *v120;
  _QWORD *v121;
  uint64_t v122[2];

  v110 = a1;
  v9 = _s10PredicatesOMa(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v111 = (uint64_t)&v104 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v104 - v15;
  v17 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(a2);
  v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v114 = (char *)&v104 - v23;
  v24 = _swiftEmptyArrayStorage;
  v118 = *(_QWORD *)(v22 + 16);
  if (v118)
  {
    v104 = a4;
    v105 = v11;
    v107 = v9;
    v108 = a5;
    v109 = a3;
    v122[0] = (uint64_t)_swiftEmptyArrayStorage;
    v25 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v112 = (uint64_t *)v16;
    v113 = v25;
    v117 = v22 + v25;
    v26 = *(_QWORD *)(v18 + 72);
    v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16);
    v106 = v22;
    swift_bridgeObjectRetain(v22);
    v28 = 0;
    v116 = xmmword_1006A7330;
    v29 = v114;
    do
    {
      v34 = v27(v29, v117 + v26 * v28, v17);
      v35 = REMRemindersListDataView.ReminderLite.subtasks.getter(v34);
      if (v35)
      {
        v36 = v35;
        v119 = v28;
        v37 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v38 = swift_allocObject(v37, 40, 7);
        v120 = (uint8_t *)v36;
        v39 = (_QWORD *)v38;
        *(_OWORD *)(v38 + 16) = v116;
        v40 = REMRemindersListDataView.ReminderLite.objectID.getter(v38);
        v39[4] = v40;
        v121 = v39;
        v41 = v120;
        specialized Array._endMutation()(v40);
        v42 = v121;
        v43 = *((_QWORD *)v41 + 2);
        if (v43)
        {
          v115 = v121;
          v121 = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v43);
          v44 = &v41[v113];
          do
          {
            v45 = v27(v20, (uint64_t)v44, v17);
            v46 = REMRemindersListDataView.ReminderLite.objectID.getter(v45);
            v47 = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v47);
            v48 = v121[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v48);
            v49 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
            specialized ContiguousArray._endMutation()(v49);
            v44 += v26;
            --v43;
          }
          while (v43);
          v50 = v121;
          swift_bridgeObjectRelease();
          v29 = v114;
          v42 = v115;
        }
        else
        {
          swift_bridgeObjectRelease();
          v50 = _swiftEmptyArrayStorage;
        }
        v121 = v42;
        sub_1001E0B58((uint64_t)v50);
        v33 = (uint64_t)v121;
        v28 = v119;
      }
      else
      {
        v30 = sub_10001A630((uint64_t *)&unk_10083AD90);
        v31 = swift_allocObject(v30, 40, 7);
        *(_OWORD *)(v31 + 16) = v116;
        v32 = REMRemindersListDataView.ReminderLite.objectID.getter(v31);
        *(_QWORD *)(v31 + 32) = v32;
        v121 = (_QWORD *)v31;
        specialized Array._endMutation()(v32);
        v33 = (uint64_t)v121;
      }
      ++v28;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v29, v17);
      sub_1001E0B58(v33);
    }
    while (v28 != v118);
    swift_bridgeObjectRelease();
    v51 = v122[0];
    if (qword_1008375D0 != -1)
      swift_once(&qword_1008375D0, sub_100497804);
    v52 = type metadata accessor for Logger(0);
    sub_10001AAA8(v52, (uint64_t)qword_10084C248);
    v53 = swift_bridgeObjectRetain_n(v51, 2);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v122[0] = v57;
      *(_DWORD *)v56 = 136315138;
      v58 = sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
      swift_bridgeObjectRetain(v51);
      v60 = Array.description.getter(v59, v58);
      v62 = v61;
      swift_bridgeObjectRelease();
      v121 = (_QWORD *)sub_10001A820(v60, v62, v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
      swift_bridgeObjectRelease_n(v51, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "fetchRemindersDue objectIDs %s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v51, 2);
    }
    v63 = v112;
    v64 = sub_10001A630(&qword_1008466C8);
    v65 = (char *)v63 + *(int *)(v64 + 48);
    v66 = (char *)v63 + *(int *)(v64 + 64);
    *v63 = v51;
    v67 = type metadata accessor for Date(0);
    v68 = *(_QWORD *)(v67 - 8);
    v69 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
    v70 = v110;
    v69(v65, v110, v67);
    v71 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56);
    v71(v65, 0, 1, v67);
    v72 = sub_10001A630(&qword_100839A98);
    v69(v66, v70 + *(int *)(v72 + 36), v67);
    v71(v66, 0, 1, v67);
    v73 = v107;
    swift_storeEnumTagMultiPayload(v63, v107, 4);
    v74 = v111;
    v75 = sub_1000151E8((uint64_t)v63, v111, _s10PredicatesOMa);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.default.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(12, -1);
      v79 = swift_slowAlloc(32, -1);
      v122[0] = v79;
      *(_DWORD *)v78 = 136315138;
      v80 = (uint64_t)v105;
      sub_1000151E8(v74, (uint64_t)v105, _s10PredicatesOMa);
      v81 = String.init<A>(describing:)(v80, v73);
      v121 = (_QWORD *)sub_10001A820(v81, v82, v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
      v63 = v112;
      swift_bridgeObjectRelease();
      sub_10001C744(v74, _s10PredicatesOMa);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "fetchRemindersDue predicate %s", v78, 0xCu);
      swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v78, -1, -1);
    }
    else
    {
      sub_10001C744(v74, _s10PredicatesOMa);
    }

    v84 = v108;
    v83 = v109;
    if (qword_100837260 != -1)
      swift_once(&qword_100837260, sub_10033CFDC);
    v85 = sub_100340EC0((uint64_t)v63, (objc_class *)qword_100871E48, v83, (uint64_t)_swiftEmptyArrayStorage, 0, 0, 0, (uint64_t)_swiftEmptyArrayStorage, v84);
    v86 = swift_bridgeObjectRetain_n(v85, 2);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.default.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = swift_slowAlloc(32, -1);
      v122[0] = v90;
      *(_DWORD *)v89 = 136315138;
      v120 = v89 + 4;
      v91 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      swift_bridgeObjectRetain(v85);
      v93 = Array.description.getter(v92, v91);
      v95 = v94;
      swift_bridgeObjectRelease();
      v121 = (_QWORD *)sub_10001A820(v93, v95, v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
      swift_bridgeObjectRelease_n(v85, 2);
      v63 = v112;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "fetchRemindersDue cdReminders %s", v89, 0xCu);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v89, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v85, 2);
    }
    v96 = (void *)objc_opt_self(REMReminderFetchOptions);
    v97 = objc_msgSend(v96, "defaultFetchOptions");
    v98 = v97;
    if (!v97)
      v98 = objc_msgSend(v96, "defaultFetchOptions");
    v99 = v97;
    v100 = objc_msgSend(v98, "fetchOptionsIncludingDueDateDeltaAlerts");

    v101 = v100;
    sub_100340768(v85, v101, v109, v104);
    v24 = v103;

    sub_10001C744((uint64_t)v63, _s10PredicatesOMa);
    swift_bridgeObjectRelease();

  }
  return v24;
}

id sub_10049D5F4(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  return sub_1000D0FA8(a1, a2, a3, a4, a5);
}

_QWORD *sub_10049D928(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5, uint64_t a6)
{
  return sub_10049D954(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, __n128))&type metadata accessor for REMRemindersListDataView.DatesModel.Group, (uint64_t (*)(uint64_t))&REMRemindersListDataView.DatesModel.Group.reminders.getter);
}

_QWORD *sub_10049D940(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5, uint64_t a6)
{
  return sub_10049D954(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD, __n128))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist, (uint64_t (*)(uint64_t))&REMRemindersListDataView.ListsModel.Sublist.reminders.getter);
}

_QWORD *sub_10049D954(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5, uint64_t a6, uint64_t (*a7)(_QWORD, __n128), uint64_t (*a8)(uint64_t))
{
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *result;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  objc_class *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;

  v51 = a3;
  v52 = a4;
  v49 = (objc_class *)a2;
  v13 = sub_10001A630(&qword_100839A98);
  v14 = __chkstk_darwin(v13);
  v50 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a7(0, v14);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v48 - v18;
  v20 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (uint64_t *)((char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v21 + 16))(v24, a1, v20, v22);
  v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v21 + 88))(v24, v20);
  if (v25 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    v26 = *v24;
    v27 = _swiftEmptyArrayStorage;
    v53 = _swiftEmptyArrayStorage;
    v28 = *(_QWORD *)(a6 + 16);
    if (v28)
    {
      v49 = a5;
      v50 = v26;
      v29 = a6 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v30 = *(_QWORD *)(v17 + 72);
      v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16);
      do
      {
        v32 = v31(v19, v29, v16);
        v33 = a8(v32);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
        sub_1001E23F0(v33);
        v29 += v30;
        --v28;
      }
      while (v28);
      v27 = v53;
      a5 = v49;
      v26 = v50;
    }
    v34 = sub_10049BB18(v26, (uint64_t)v27, v51, v52, a5);
    swift_bridgeObjectRelease();
    return v34;
  }
  if (v25 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    return sub_10049C4C8(*v24, (uint64_t)v49, v51, v52, a5);
  }
  if (v25 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 96))(v24, v20);
    v36 = *v24;
    v37 = sub_10001A630(&qword_100839AA8);
    sub_1000A5CA8((uint64_t)v24 + *(int *)(v37 + 48), v50, &qword_100839A98);
    v38 = _swiftEmptyArrayStorage;
    v53 = _swiftEmptyArrayStorage;
    v39 = *(_QWORD *)(a6 + 16);
    if (v39)
    {
      v48 = v36;
      v49 = a5;
      v40 = a6 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v41 = *(_QWORD *)(v17 + 72);
      v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16);
      do
      {
        v43 = v42(v19, v40, v16);
        v44 = a8(v43);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
        sub_1001E23F0(v44);
        v40 += v41;
        --v39;
      }
      while (v39);
      v38 = v53;
      v36 = v48;
      a5 = v49;
    }
    v46 = v51;
    v45 = v52;
    v34 = sub_10049BB18(v36, (uint64_t)v38, v51, v52, a5);
    v47 = v50;
    sub_10049CB18(v50, (uint64_t)v38, v46, v45, (uint64_t)a5);
    swift_bridgeObjectRelease();
    sub_10000882C(v47, &qword_100839A98);
    return v34;
  }
  if (v25 == enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  result = (_QWORD *)_diagnoseUnexpectedEnumCase<A>(type:)(v20, v20);
  __break(1u);
  return result;
}

_QWORD *sub_10049DCEC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, objc_class *a5, uint64_t a6)
{
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  objc_class *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  objc_class *v52;
  _QWORD *v53;

  v51 = a4;
  v52 = a5;
  v50 = a3;
  v9 = sub_10001A630(&qword_100839A98);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (uint64_t *)((char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, a1, v17, v19);
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 88))(v21, v17);
  if (v22 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v18 + 96))(v21, v17);
    v23 = *v21;
    v24 = _swiftEmptyArrayStorage;
    v53 = _swiftEmptyArrayStorage;
    v25 = *(_QWORD *)(a6 + 16);
    if (v25)
    {
      v26 = a6 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v27 = *(_QWORD *)(v14 + 72);
      v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
      do
      {
        v29 = v28(v16, v26, v13);
        v30 = REMRemindersListDataView.ListsSectionsModel.List.sections.getter(v29);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        sub_1001E305C(v30);
        v26 += v27;
        --v25;
      }
      while (v25);
      v24 = v53;
    }
    v31 = Array<A>.reminders.getter(v24);
    swift_bridgeObjectRelease();
    v32 = sub_10049BB18(v23, v31, v50, v51, v52);
    swift_bridgeObjectRelease();
    return v32;
  }
  if (v22 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v18 + 96))(v21, v17);
    return sub_10049C4C8(*v21, a2, v50, v51, v52);
  }
  if (v22 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v18 + 96))(v21, v17);
    v34 = *v21;
    v35 = sub_10001A630(&qword_100839AA8);
    sub_1000A5CA8((uint64_t)v21 + *(int *)(v35 + 48), (uint64_t)v12, &qword_100839A98);
    v36 = _swiftEmptyArrayStorage;
    v53 = _swiftEmptyArrayStorage;
    v37 = *(_QWORD *)(a6 + 16);
    if (v37)
    {
      v49 = v34;
      v38 = a6 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v39 = *(_QWORD *)(v14 + 72);
      v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
      do
      {
        v41 = v40(v16, v38, v13);
        v42 = REMRemindersListDataView.ListsSectionsModel.List.sections.getter(v41);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        sub_1001E305C(v42);
        v38 += v39;
        --v37;
      }
      while (v37);
      v36 = v53;
      v34 = v49;
    }
    v43 = Array<A>.reminders.getter(v36);
    swift_bridgeObjectRelease();
    v44 = v34;
    v46 = v50;
    v45 = v51;
    v47 = v52;
    v32 = sub_10049BB18(v44, v43, v50, v51, v52);
    sub_10049CB18((uint64_t)v12, v43, v46, v45, (uint64_t)v47);
    swift_bridgeObjectRelease();
    sub_10000882C((uint64_t)v12, &qword_100839A98);
    return v32;
  }
  if (v22 == enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  result = (_QWORD *)_diagnoseUnexpectedEnumCase<A>(type:)(v17, v17);
  __break(1u);
  return result;
}

_QWORD *sub_10049E0A0(unint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;

  v3 = a1;
  v33 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_28;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v27 = v3;
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v7 = v3 & 0xFFFFFFFFFFFFFF8;
      v31 = a2;
      v32 = v3 + 32;
      v29 = v3 & 0xC000000000000001;
      v30 = v4;
      v28 = v3 & 0xFFFFFFFFFFFFFF8;
      while (v6)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v27);
LABEL_10:
        v11 = v8;
        if (__OFADD__(v5++, 1))
          goto LABEL_27;
        v13 = *a2;
        if ((*a2 & 0xC000000000000001) != 0)
        {
          if (v13 < 0)
            v14 = *a2;
          else
            v14 = v13 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a2);
          v3 = v11;
          v15 = __CocoaSet.contains(_:)(v3, v14);
          swift_bridgeObjectRelease();

          if ((v15 & 1) != 0)
          {

            goto LABEL_6;
          }
        }
        else if (*(_QWORD *)(v13 + 16))
        {
          v16 = *(_QWORD *)(v13 + 40);
          swift_bridgeObjectRetain(*a2);
          v17 = NSObject._rawHashValue(seed:)(v16);
          v18 = -1 << *(_BYTE *)(v13 + 32);
          v19 = v17 & ~v18;
          if (((*(_QWORD *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
          {
            v3 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
            v20 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * v19);
            v21 = static NSObject.== infix(_:_:)(v20);

            if ((v21 & 1) != 0)
            {
LABEL_23:

              swift_bridgeObjectRelease();
              v4 = v30;
              a2 = v31;
              v7 = v28;
              v6 = v29;
              goto LABEL_6;
            }
            v22 = ~v18;
            while (1)
            {
              v19 = (v19 + 1) & v22;
              if (((*(_QWORD *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
                break;
              v23 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * v19);
              v24 = static NSObject.== infix(_:_:)(v23);

              if ((v24 & 1) != 0)
                goto LABEL_23;
            }
          }
          swift_bridgeObjectRelease();
          v4 = v30;
          a2 = v31;
          v7 = v28;
          v6 = v29;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        v9 = v33[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
        v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v11);
        v3 = (uint64_t)&v33;
        specialized ContiguousArray._endMutation()(v10);
LABEL_6:
        if (v5 == v4)
          return v33;
      }
      if (v5 < *(_QWORD *)(v7 + 16))
        break;
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      if (v3 < 0)
        v26 = v3;
      else
        v26 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v26);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(id *)(v32 + 8 * v5);
    goto LABEL_10;
  }
  return _swiftEmptyArrayStorage;
}

id sub_10049E31C(void *a1, void *a2, uint64_t a3, id a4)
{
  uint64_t v4;
  id v6;
  NSObject *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  void *v23;
  NSString v24;
  uint64_t v25;
  void *v27;
  id v28;
  id v29;

  if (a1)
  {
    v6 = a1;
    v7 = sub_1001A0B80(v6);
    if (v4)
    {

    }
    else
    {
      v20 = v7;
      v21 = objc_msgSend(objc_allocWithZone((Class)REMSmartList), "initWithStore:storage:", a4, v7);
      v22 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable(0));
      a4 = (id)REMSmartList_Codable.init(_:)(v21);

    }
    return a4;
  }
  v9 = REMSmartListTypeCustom;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  if (v10 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease_n(v12, 2);
    goto LABEL_14;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
LABEL_14:
    v23 = (void *)objc_opt_self(REMError);
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "invalidParameterErrorWithDescription:", v24);

    swift_willThrow(v25);
    return a4;
  }
  v17 = sub_100300818();
  if (!v17)
    return 0;
  v18 = (void *)v17;
  v19 = sub_1001A17D0(a2, v17);
  if (v4)
  {

  }
  else
  {
    v27 = v19;
    v28 = objc_allocWithZone((Class)type metadata accessor for REMSmartList_Codable(0));
    v29 = a4;
    a4 = objc_msgSend(v28, "initWithStore:storage:", v29, v27);

  }
  return a4;
}

uint64_t sub_10049E524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t result;
  char *v41;
  int v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = a5;
  v57 = a4;
  v49 = a2;
  v50 = a1;
  v6 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v52 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v51 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v54 = (char *)&v48 - v12;
  v13 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v48 - v17;
  v19 = sub_10001A630(&qword_10084C288);
  __chkstk_darwin(v19);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v48 - v23;
  v26 = (char *)&v48 + *(int *)(v25 + 48) - v23;
  sub_100129028(a3, (uint64_t)&v48 - v23);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v27(v26, v57, v8);
  *(_QWORD *)&v24[*(int *)(v19 + 64)] = v58;
  v28 = &v21[*(int *)(v19 + 48)];
  sub_100129028((uint64_t)v24, (uint64_t)v21);
  v27(v28, (uint64_t)v26, v8);
  v29 = (uint64_t)v21;
  v30 = v8;
  v31 = v54;
  sub_1000A5CA8(v29, (uint64_t)v18, &qword_100839AA0);
  v57 = v9;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v31, v28, v30);
  sub_100129028((uint64_t)v18, (uint64_t)v15);
  v32 = v55;
  v33 = v56;
  if ((*(unsigned int (**)(char *, uint64_t))(v55 + 48))(v15, 1) == 1)
  {
    v34 = v58;
    swift_bridgeObjectRetain(v58);
    sub_10000882C((uint64_t)v15, &qword_100839AA0);
    if (*(_QWORD *)(v34 + 16))
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v30);
      sub_10000882C((uint64_t)v18, &qword_100839AA0);
      sub_10000882C((uint64_t)v24, &qword_10084C288);
      LOBYTE(v35) = 1;
      return v35 & 1;
    }
    v41 = v51;
    v27(v51, (uint64_t)v31, v30);
    v42 = (*(uint64_t (**)(char *, uint64_t))(v57 + 88))(v41, v30);
    if (v42 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v41, v30);
LABEL_12:
      v43 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
      v35 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
      v44 = objc_msgSend((id)swift_getObjCClassFromMetadata(v43), "entity");
      objc_msgSend((id)v35, "setEntity:", v44);

      objc_msgSend((id)v35, "setAffectedStores:", 0);
      objc_msgSend((id)v35, "setPredicate:", v49);
      objc_msgSend((id)v35, "setFetchLimit:", 1);
      objc_msgSend((id)v35, "setAffectedStores:", 0);
      v45 = v53;
      v46 = NSManagedObjectContext.count<A>(for:)(v35, v43);
      if (v45)
      {

      }
      else
      {
        v47 = v46;

        LOBYTE(v35) = v47 > 0;
      }
      (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v30);
      sub_10000882C((uint64_t)v18, &qword_100839AA0);
      sub_10000882C((uint64_t)v24, &qword_10084C288);
      return v35 & 1;
    }
    if (v42 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
    {
      (*(void (**)(char *, uint64_t))(v57 + 96))(v41, v30);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    if (v42 == enum case for REMRemindersListDataView.ShowCompleted.off(_:))
      goto LABEL_12;
    if (v42 == enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v30);
      sub_10000882C((uint64_t)v18, &qword_100839AA0);
      sub_10000882C((uint64_t)v24, &qword_10084C288);
      LOBYTE(v35) = 0;
      return v35 & 1;
    }
  }
  else
  {
    v36 = v52;
    v37 = v33;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v52, v15, v33);
    v38 = swift_bridgeObjectRetain(v58);
    v35 = REMRemindersListDataView.CountByCompleted.incomplete.getter(v38);
    v39 = REMRemindersListDataView.CountByCompleted.completed.getter();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v37);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v30);
    sub_10000882C((uint64_t)v18, &qword_100839AA0);
    sub_10000882C((uint64_t)v24, &qword_10084C288);
    if (!__OFADD__(v35, v39))
    {
      LOBYTE(v35) = v35 + v39 > 0;
      return v35 & 1;
    }
    __break(1u);
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v30, v30);
  __break(1u);
  return result;
}

uint64_t _s9UtilitiesO12SortingStyleOMa(uint64_t a1)
{
  uint64_t result;

  result = qword_10084C300;
  if (!qword_10084C300)
    return swift_getSingletonMetadata(a1, &_s9UtilitiesO12SortingStyleOMn);
  return result;
}

uint64_t sub_10049EB08()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10049EB2C(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100498E18(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(_QWORD *)(v2 + 48), *(void **)(v2 + 56), *(_QWORD **)(v2 + 64), a2, *(uint64_t **)(v2 + 72), *(_QWORD *)(v2 + 80), *(_BYTE *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104), *(uint64_t **)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_10049EB78(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];

  v11 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v21, 0, 0);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    swift_beginAccess(a2 + 16, v20, 0, 0);
    v14 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(v14);
    sub_100498430(v15, a3, a4, a5);
    v13 = v16;
    swift_bridgeObjectRelease(v14);
    if (v5)
      return v13;
    swift_beginAccess(v11, v19, 1, 0);
    v18 = *v11;
    *v11 = v13;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(v18);
    v12 = 0;
  }
  swift_bridgeObjectRetain(v12);
  return v13;
}

void sub_10049EC78(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  _BYTE v53[40];
  _BYTE v54[48];
  unint64_t v55;

  v3 = v2;
  v5 = sub_10001A630(&qword_10083C4C0);
  inited = swift_initStackObject(v5, v54);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  v7 = (unint64_t)a2 >> 62;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v49 = a2;
    else
      v49 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v52 = v3;
  if (v8)
  {
    v55 = (unint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_38;
    }
    v51 = (unint64_t)a2 >> 62;
    v9 = 0;
    do
    {
      if ((a2 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a2);
      else
        v10 = *(id *)(a2 + 8 * v9 + 32);
      v11 = v10;
      ++v9;
      v12 = objc_msgSend(v10, "objectID", v51);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = *(_QWORD *)(v55 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
    }
    while (v8 != v9);
    v16 = (_QWORD *)v55;
    v7 = v51;
  }
  else
  {
    v16 = _swiftEmptyArrayStorage;
  }
  sub_1000151B0(0, (unint64_t *)&unk_100839910, NSPredicate_ptr);
  v17 = sub_10001A630((uint64_t *)&unk_10083A270);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v18 + 56) = sub_10001A630((uint64_t *)&unk_100846CB0);
  *(_QWORD *)(v18 + 64) = sub_1000A5F84(&qword_10084C270, (uint64_t *)&unk_100846CB0, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v18 + 32) = v16;
  *(_QWORD *)(inited + 32) = NSPredicate.init(format:_:)(0x204E4920464C4553, 0xEA00000000004025, v18, v19);
  KeyPath = swift_getKeyPath(&unk_1006BDFD8);
  v21 = sub_10033E0AC(KeyPath, 0);
  v22 = swift_release(KeyPath);
  *(_QWORD *)(inited + 40) = v21;
  v55 = inited;
  specialized Array._endMutation()(v22);
  inited = sub_10000D2BC(v55);
  v23 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v24 = swift_initStackObject(v23, v53);
  *(_OWORD *)(v24 + 16) = xmmword_1006A7330;
  v25 = swift_getKeyPath(&unk_1006BE010);
  *(_QWORD *)(v24 + 32) = v25;
  v55 = v24;
  specialized Array._endMutation()(v25);
  v26 = v55;
  if (v7)
  {
    if (a2 < 0)
      v28 = a2;
    else
      v28 = a2 & 0xFFFFFFFFFFFFFF8;
    v29 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    swift_bridgeObjectRetain(a2);
    v30 = _bridgeCocoaArray<A>(_:)(v28, v29);
    swift_bridgeObjectRelease(a2);
    a2 = v30;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v27);
    sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  }
  v55 = a2;
  v31 = sub_10001A630(&qword_10083FCF0);
  v32 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v33 = sub_1000A5F84((unint64_t *)&qword_10083FC48, &qword_10083FCF0, (uint64_t)&protocol conformance descriptor for [A]);
  v34 = sub_1000EC524((unint64_t *)&qword_10083FE40, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v35 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v31, v32, v33, v34);
  v36 = sub_1001E8870(v35);
  swift_bridgeObjectRelease(v35);
  v3 = (void *)sub_100358798(v26, 0, (uint64_t)v36, inited);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(a2);
  swift_release(v36);
  v37 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v38 = NSManagedObjectContext.fetch<A>(_:)(v3, v37);
  if (v52)
  {

LABEL_44:
    return;
  }
  a2 = v38;
  v55 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(v38 >> 62))
  {
    v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v38);
    if (v39)
      goto LABEL_22;
LABEL_42:
    swift_bridgeObjectRelease(a2);
    v48 = _swiftEmptyArrayStorage;
LABEL_43:
    swift_bridgeObjectRelease(a2);
    sub_10011F104((uint64_t)v48);

    swift_bridgeObjectRelease(v48);
    goto LABEL_44;
  }
LABEL_38:
  if (a2 < 0)
    v50 = a2;
  else
    v50 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v39 = _CocoaArrayWrapper.endIndex.getter(v50);
  if (!v39)
    goto LABEL_42;
LABEL_22:
  if (v39 >= 1)
  {
    for (i = 0; i != v39; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
      else
        v42 = *(id *)(a2 + 8 * i + 32);
      v43 = v42;
      v44 = objc_msgSend(v42, "remObjectID");

      if (v44)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v45);
        v47 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v46 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v47 >= v46 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1);
        v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v44);
        specialized Array._endMutation()(v41);
      }
    }
    swift_bridgeObjectRelease(a2);
    v48 = (_QWORD *)v55;
    goto LABEL_43;
  }
  __break(1u);
}

uint64_t sub_10049F1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];

  v7 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v16, 0, 0);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    swift_beginAccess(a3 + 16, v15, 0, 0);
    v10 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain(v10);
    sub_10049EC78(a2, v10);
    v9 = v11;
    swift_bridgeObjectRelease(v10);
    if (v3)
      return v9;
    swift_beginAccess(v7, v14, 1, 0);
    v13 = *v7;
    *v7 = v9;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease(v13);
    v8 = 0;
  }
  swift_bridgeObjectRetain(v8);
  return v9;
}

id sub_10049F2D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  id v32;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  id v38;

  v36 = a6;
  v37 = a2;
  v13 = _s10PredicatesOMa(0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (_QWORD *)((char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = 0;
  v17 = objc_msgSend(a1, "remObjectIDWithError:", &v38, v14);
  v18 = v38;
  if (v17)
  {
    v19 = v17;
    v35[0] = a4;
    v35[1] = v7;
    v20 = sub_10001A630(&qword_1008466C0);
    v21 = (char *)v16 + *(int *)(v20 + 48);
    v22 = *(int *)(v20 + 64);
    *v16 = v19;
    v23 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, a3, v23);
    *((_BYTE *)v16 + v22) = a7 & 1;
    swift_storeEnumTagMultiPayload(v16, v13, 9);
    v24 = v18;
    sub_10000D2C0();
    v26 = v25;
    if (qword_1008375D8 != -1)
      swift_once(&qword_1008375D8, sub_100497894);
    v27 = (void *)sub_100358798(qword_100871F88, a5, v36, (uint64_t)v26);

    sub_10049ADC0(v37, a3, 0);
    v29 = v28;
    sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v27, "setSortDescriptors:", isa, swift_bridgeObjectRelease(v29).n128_f64[0]);

    v31 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
    v32 = (id)NSManagedObjectContext.fetch<A>(_:)(v27, v31);
    sub_10001C744((uint64_t)v16, _s10PredicatesOMa);

  }
  else
  {
    v32 = v38;
    _convertNSErrorToError(_:)(v18);

    swift_willThrow(v33);
  }
  return v32;
}

uint64_t sub_10049F53C(id *a1)
{
  uint64_t v1;

  return sub_10049A2DC(a1, *(_QWORD *)(v1 + 16));
}

ValueMetadata *_s9UtilitiesOMa()
{
  return &_s9UtilitiesON;
}

_QWORD *sub_10049F5A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  id v21;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v12 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v13 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v14 = *a2;
        if (*a2)
        {
          v15 = a2[1];
          v16 = a2[2];
          *a1 = v14;
          a1[1] = v15;
          v17 = a2[3];
          v18 = a2[4];
          a1[2] = v16;
          a1[3] = v17;
          a1[4] = v18;
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRetain(v15);
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRetain(v18);
        }
        else
        {
          v19 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v19;
          a1[4] = a2[4];
        }
        v20 = (void *)a2[5];
        a1[5] = v20;
        v21 = v20;
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void sub_10049F790(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
      v3 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 4u:
      if (*(_QWORD *)a1)
      {
        swift_bridgeObjectRelease(*(_QWORD *)a1);
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
      }

      break;
    default:
      return;
  }
}

_QWORD *sub_10049F834(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  id v20;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_11;
    case 1u:
      v10 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_11;
    case 2u:
      v11 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_11;
    case 3u:
      v12 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_11;
    case 4u:
      v13 = *a2;
      if (*a2)
      {
        v14 = a2[1];
        v15 = a2[2];
        *a1 = v13;
        a1[1] = v14;
        v16 = a2[3];
        v17 = a2[4];
        a1[2] = v15;
        a1[3] = v16;
        a1[4] = v17;
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
      }
      else
      {
        v18 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v18;
        a1[4] = a2[4];
      }
      v19 = (void *)a2[5];
      a1[5] = v19;
      v20 = v19;
      v7 = a1;
      v8 = a3;
      v9 = 4;
LABEL_11:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_10049F9EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  id v21;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, _s9UtilitiesO12SortingStyleOMa);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_12;
      case 1u:
        v10 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_12;
      case 2u:
        v11 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_12;
      case 3u:
        v12 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_12;
      case 4u:
        v13 = *a2;
        if (*a2)
        {
          *a1 = v13;
          v14 = a2[1];
          a1[1] = v14;
          v15 = a2[2];
          a1[2] = v15;
          v16 = a2[3];
          a1[3] = v16;
          v17 = a2[4];
          a1[4] = v17;
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRetain(v15);
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v17);
        }
        else
        {
          v18 = *(_OWORD *)a2;
          v19 = *((_OWORD *)a2 + 1);
          a1[4] = a2[4];
          *(_OWORD *)a1 = v18;
          *((_OWORD *)a1 + 1) = v19;
        }
        v20 = (void *)a2[5];
        a1[5] = v20;
        v21 = v20;
        v7 = a1;
        v8 = a3;
        v9 = 4;
LABEL_12:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10049FBCC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_7;
    case 1u:
      v10 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_7;
    case 2u:
      v11 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_7;
    case 3u:
      v12 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v7 = a1;
      v8 = a3;
      v9 = 3;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_10049FD04(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, _s9UtilitiesO12SortingStyleOMa);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_8;
      case 1u:
        v10 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_8;
      case 2u:
        v11 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_8;
      case 3u:
        v12 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v7 = a1;
        v8 = a3;
        v9 = 3;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10049FE54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for REMRemindersListDataView.SortingDirection(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = "0";
    swift_initEnumMetadataMultiPayload(a1, 256, 5, v4);
    return 0;
  }
  return result;
}

void **_s9UtilitiesO29ManualSortHintPersistenceHostOwca(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

void **_s9UtilitiesO29ManualSortHintPersistenceHostOwta(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *_s9UtilitiesO29ManualSortHintPersistenceHostOMa()
{
  return &_s9UtilitiesO29ManualSortHintPersistenceHostON;
}

void sub_10049FF44()
{
  sub_1001D8BCC();
}

uint64_t sub_10049FF58(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084C358, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AllSectionsInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AllSectionsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double sub_10049FF94@<D0>(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Configuration;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  __n128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double result;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v88 = a2;
  v81 = a3;
  v84 = a5;
  v7 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel(0);
  v85 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  __chkstk_darwin(v7);
  v82 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v83 = (char *)&v71 - v10;
  v11 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v79 = *(_QWORD *)(v11 - 8);
  v80 = v11;
  __chkstk_darwin(v11);
  v78 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v13 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v71 - v17;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v90 = *(_QWORD *)(Configuration - 8);
  v91 = Configuration;
  __chkstk_darwin(Configuration);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v71 - v23;
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v71 - v27;
  v29 = a4;
  REMRemindersListDataView.AllSectionsInvocation.Parameters.configuration.getter(v26);
  v30 = v92;
  sub_10011DD08((unint64_t)a1, (uint64_t)v28);
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v90 + 8))(v28, v91);
  }
  else
  {
    v33 = v31;
    v92 = v32;
    v76 = v24;
    v77 = v29;
    v72 = v21;
    v73 = v15;
    v74 = v13;
    v75 = v18;
    v34 = v89;
    v35 = sub_10011DB60(a1);
    swift_bridgeObjectRetain(v33);
    v36 = v92;
    swift_bridgeObjectRetain(v92);
    v37 = a1;
    sub_1004A11EC((uint64_t)v35, v33, v36, (uint64_t)v37);
    v71 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v33, 2);
    swift_bridgeObjectRelease_n(v36, 2);

    v39 = *(void (**)(char *, uint64_t))(v90 + 8);
    v40 = v28;
    v41 = v91;
    v39(v40, v91);
    v42 = v76;
    v44 = REMRemindersListDataView.AllSectionsInvocation.Parameters.configuration.getter(v43);
    v45 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v44);
    v39(v42, v41);
    v46 = sub_10011E698((uint64_t)v37, v45 & 1);
    v48 = v47;
    v49 = objc_msgSend(v87, "fetchResultTokenToDiffAgainst");
    v50 = (uint64_t)v37;
    v51 = (uint64_t)v75;
    v92 = v50;
    sub_100493C24(v49, v50, (uint64_t)v75);

    LODWORD(v90) = v48 & 1;
    v52 = v72;
    v54 = REMRemindersListDataView.AllSectionsInvocation.Parameters.configuration.getter(v53);
    v55 = (uint64_t)v78;
    REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v54);
    v39(v52, v41);
    v56 = v46;
    v57 = v71;
    swift_bridgeObjectRetain(v71);
    v58 = sub_10049D93C(v55, v51, v92, v81, 0, v57);
    v60 = v59;
    v61 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v79 + 8))(v55, v80, v61);
    v92 = 0;
    v62 = v83;
    REMRemindersListDataView.ListsSectionsModel.init(lists:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v57, v56, v90, 2, v58, v60);
    v63 = v85;
    v64 = v86;
    v65 = v82;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v82, v62, v86);
    v66 = v73;
    v67 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, v51, v34);
    v68 = sub_10009FC50(&qword_100843608, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListsSectionsModel);
    v69 = sub_10009FC50(&qword_100843610, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListsSectionsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v65, v66, v64, v68, v69);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v75, v34);
  }
  return result;
}

void sub_1004A0458(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  id v29;
  void *v30;
  void (*v31)(char *, char *, uint64_t);
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  Class v37;
  id v38;
  uint64_t v39;
  id v40;
  objc_class *v41;
  objc_class *v42;
  objc_class *v43;
  objc_class *v44;
  uint64_t v45;
  __n128 v46;
  __n128 v47;
  uint64_t v48;
  void *v49;
  Class isa;
  id v51;
  uint64_t v52;
  id v53;
  objc_class *v54;
  objc_class *v55;
  objc_class *v56;
  objc_class *v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  id v85;
  unsigned int v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void *v91;
  Class v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  id v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v121 = a4;
  v122 = a5;
  v10 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List.ListType(0, a6);
  v119 = *(_QWORD *)(v10 - 8);
  v120 = v10;
  __chkstk_darwin(v10);
  v117 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v115 = (char *)&v110 - v13;
  __chkstk_darwin(v14);
  v118 = (char *)&v110 - v15;
  v16 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType(0);
  v112 = *(_QWORD *)(v16 - 8);
  v113 = v16;
  __chkstk_darwin(v16);
  v114 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v18);
  v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v26 = __chkstk_darwin(v25).n128_u64[0];
  v28 = (char *)&v110 - v27;
  v116 = *a1;
  v29 = objc_msgSend(v116, "identifier", v26);
  if (!v29)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
    goto LABEL_10;
  }
  v30 = v29;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

  v31 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v31(v20, v24, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
LABEL_10:
    sub_10000882C((uint64_t)v20, (uint64_t *)&unk_100839C80);
    v48 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, v47);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v122, 1, 1, v48);
    return;
  }
  v31(v28, v20, v21);
  if (!*(_QWORD *)(a2 + 16) || (v32 = sub_1002C65F8((uint64_t)v28), (v33 & 1) == 0))
  {
    v49 = (void *)objc_opt_self(REMList);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v51 = objc_msgSend(v49, "objectIDWithUUID:", isa);

    v52 = qword_100837750;
    v53 = v51;
    if (v52 != -1)
      swift_once(&qword_100837750, sub_1004E80E4);
    v54 = (objc_class *)qword_1008721E8;
    sub_1004E8204();
    v56 = v55;
    v57 = (objc_class *)sub_1004E8694();
    v58 = sub_1004E892C((uint64_t)v51, 1, v121, v54, v56, v57);
    if (v6)
    {

      swift_bridgeObjectRelease();
      v59 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v22 + 8))(v28, v21, v59);

      return;
    }
    v60 = v58;
    v121 = 0;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((unint64_t)v60 >> 62)
    {
      if (v60 < 0)
        v69 = v60;
      else
        v69 = v60 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v60);
      v70 = _CocoaArrayWrapper.endIndex.getter(v69);
      swift_bridgeObjectRelease();
      if (v70)
        goto LABEL_17;
    }
    else if (*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_17:
      v61 = (_QWORD *)sub_1001DFD2C(v60);
      swift_bridgeObjectRelease();
      v62 = v121;
      v63 = sub_1001327A0(v61, (uint64_t)_swiftEmptyArrayStorage);
      v121 = v62;
      if (v62)
      {
        (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_23:
        swift_bridgeObjectRelease();
        return;
      }
      v110 = v63;
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();
    v71 = sub_10001A630(&qword_100844030);
    v73 = *(_QWORD *)(type metadata accessor for REMRemindersListDataView.SectionLite(0, v72) - 8);
    v74 = swift_allocObject(v71, ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(_QWORD *)(v73 + 72), *(unsigned __int8 *)(v73 + 80) | 7);
    *(_OWORD *)(v74 + 16) = xmmword_1006A3C00;
    v110 = v74;
    v75 = v114;
    (*(void (**)(char *, _QWORD, unint64_t))(v112 + 104))(v114, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v113);
    v76 = _swiftEmptyArrayStorage;
    v77 = v75;
LABEL_37:
    REMRemindersListDataView.SectionLite.init(type:reminders:)(v77, v76);
    goto LABEL_38;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v32);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v34);
  v111 = sub_1004A0D14(v35, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = (void *)objc_opt_self(REMList);
  v37 = UUID._bridgeToObjectiveC()().super.isa;
  v38 = objc_msgSend(v36, "objectIDWithUUID:", v37);

  v39 = qword_100837750;
  v40 = v38;
  if (v39 != -1)
    swift_once(&qword_100837750, sub_1004E80E4);
  v41 = (objc_class *)qword_1008721E8;
  sub_1004E8204();
  v43 = v42;
  v44 = (objc_class *)sub_1004E8694();
  v45 = sub_1004E892C((uint64_t)v38, 1, v121, v41, v43, v44);
  if (v6)
  {

    swift_bridgeObjectRelease();
    v46 = swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, __n128))(v22 + 8))(v28, v21, v46);
    swift_bridgeObjectRelease();

    return;
  }
  v64 = v45;
  v121 = 0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)v64 >> 62)
  {
    if (v64 < 0)
      v78 = v64;
    else
      v78 = v64 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v64);
    v79 = _CocoaArrayWrapper.endIndex.getter(v78);
    swift_bridgeObjectRelease();
    if (v79)
      goto LABEL_21;
    goto LABEL_36;
  }
  if (!*(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_36:
    swift_bridgeObjectRelease();
    v80 = sub_10001A630(&qword_100844030);
    v82 = *(_QWORD *)(type metadata accessor for REMRemindersListDataView.SectionLite(0, v81) - 8);
    v83 = swift_allocObject(v80, ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(_QWORD *)(v82 + 72), *(unsigned __int8 *)(v82 + 80) | 7);
    *(_OWORD *)(v83 + 16) = xmmword_1006A3C00;
    v110 = v83;
    v84 = v114;
    (*(void (**)(char *, _QWORD, unint64_t))(v112 + 104))(v114, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v113);
    v77 = v84;
    v76 = v111;
    goto LABEL_37;
  }
LABEL_21:
  v65 = (_QWORD *)sub_1001DFD2C(v64);
  swift_bridgeObjectRelease();
  v66 = v121;
  v67 = sub_1001327A0(v65, (uint64_t)v111);
  v121 = v66;
  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v110 = v67;
  swift_bridgeObjectRelease();
LABEL_26:
  *(_QWORD *)&v68 = swift_bridgeObjectRelease().n128_u64[0];
LABEL_38:
  v85 = v116;
  v86 = objc_msgSend(v116, "shouldCategorizeGroceryItems", v68, v110);
  v87 = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.grocery(_:);
  v89 = v119;
  v88 = v120;
  if (!v86)
    v87 = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.regular(_:);
  v90 = v115;
  (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v115, *v87, v120);
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v118, v90, v88);
  v91 = (void *)objc_opt_self(REMList);
  v92 = UUID._bridgeToObjectiveC()().super.isa;
  v93 = objc_msgSend(v91, "objectIDWithUUID:", v92);

  v95 = REMObjectID.codable.getter(v94);
  v96 = objc_msgSend(v85, "displayName");
  v115 = (char *)v95;
  if (v96)
  {
    v97 = v96;
    v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    v113 = v99;
    v114 = (char *)v98;

  }
  else
  {
    v113 = 0xE000000000000000;
    v114 = 0;
  }
  v100 = objc_msgSend(v85, "color");
  if (v100)
  {
    v101 = v100;
    v102 = REMColor.codable.getter();

  }
  else
  {
    v102 = 0;
  }
  v104 = v118;
  v103 = v119;
  v105 = v117;
  v106 = v120;
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v117, v118, v120);
  v107 = v122;
  REMRemindersListDataView.ListsSectionsModel.List.init(listID:listName:listColor:listType:sections:)(v115, v114, v113, v102, v105, v110);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v106);
  v108.n128_f64[0] = (*(double (**)(char *, uint64_t))(v22 + 8))(v28, v21);
  v109 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, v108);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v107, 0, 1, v109);
}

_QWORD *sub_1004A0D14(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *result;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, __n128);
  __n128 v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  _QWORD v55[2];
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;

  v3 = v2;
  v6 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v6);
  v8 = (unint64_t)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v55 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)v55 - v13;
  v15 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v15);
  v17 = (char *)v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  v63 = *(_QWORD *)(v18 - 8);
  v64 = v18;
  __chkstk_darwin(v18);
  v62 = (char *)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v57 = (char *)v55 - v21;
  if ((unint64_t)a1 >> 62)
  {
LABEL_35:
    if (a1 < 0)
      v54 = a1;
    else
      v54 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v22 = _CocoaArrayWrapper.endIndex.getter(v54);
    if (v22)
      goto LABEL_3;
LABEL_39:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v22)
    goto LABEL_39;
LABEL_3:
  v58 = v8;
  v55[1] = v3;
  v61 = a1 & 0xC000000000000001;
  v65 = _swiftEmptyArrayStorage;
  v23 = 4;
  v59 = a1;
  v60 = v22;
  v56 = v17;
  while (1)
  {
    if (v61)
      v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, a1);
    else
      v24 = *(id *)(a1 + 8 * v23);
    v3 = v24;
    if (__OFADD__(v23 - 4, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    v66 = v23 - 3;
    v25 = objc_msgSend(v24, "identifier");
    if (v25)
    {
      v26 = v25;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v27 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 0, 1, v27);
    }
    else
    {
      v27 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 1, 1, v27);
    }
    sub_1000F2CE4((uint64_t)v11, (uint64_t)v14);
    type metadata accessor for UUID(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    if (v29(v14, 1, v27) == 1)
      goto LABEL_21;
    v30 = (uint64_t)v14;
    v31 = v11;
    v32 = (char *)v30;
    v33 = v58;
    sub_10011D420(v30, v58);
    result = (_QWORD *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v29)(v33, 1, v27);
    if ((_DWORD)result == 1)
      break;
    v35 = v58;
    v11 = v31;
    if (*(_QWORD *)(a2 + 16))
    {
      v36 = sub_1002C65F8(v58);
      if ((v37 & 1) != 0)
      {
        v38 = v35;
        v39 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v36);
        v40 = *(void (**)(uint64_t, uint64_t, __n128))(v28 + 8);
        v41 = swift_bridgeObjectRetain(v39);
        v40(v38, v27, v41);
        if ((unint64_t)v39 >> 62)
        {
          if (v39 < 0)
            v52 = v39;
          else
            v52 = v39 & 0xFFFFFFFFFFFFFF8;
          v53 = v3;
          swift_bridgeObjectRetain(v39);
          v42 = _CocoaArrayWrapper.endIndex.getter(v52);
          swift_bridgeObjectRelease();
        }
        else
        {
          v42 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
          v43 = v3;
        }
        v11 = v31;
        v14 = v32;
        v17 = v56;
        goto LABEL_22;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v35, v27);
    v14 = v32;
    v17 = v56;
LABEL_21:
    v44 = v3;
    v42 = 0;
    v39 = 0;
LABEL_22:
    v8 = v63;
    sub_100495DE8(v3, v42, v39, (uint64_t)v17);
    sub_10000882C((uint64_t)v14, (uint64_t *)&unk_100839C80);

    v45 = v64;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v64) == 1)
    {
      sub_10000882C((uint64_t)v17, &qword_10083FB68);
      a1 = v59;
    }
    else
    {
      v46 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v47 = v57;
      v46(v57, v17, v45);
      v46(v62, v47, v45);
      swift_isUniquelyReferenced_nonNull_native(v65);
      a1 = v59;
      if ((v48 & 1) != 0)
        v49 = (unint64_t)v65;
      else
        v49 = sub_1002C8478(0, v65[2] + 1, 1, (unint64_t)v65);
      v8 = *(_QWORD *)(v49 + 16);
      v50 = *(_QWORD *)(v49 + 24);
      if (v8 >= v50 >> 1)
        v49 = sub_1002C8478(v50 > 1, v8 + 1, 1, v49);
      *(_QWORD *)(v49 + 16) = v8 + 1;
      v51 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
      v65 = (_QWORD *)v49;
      v46((char *)(v49 + v51 + *(_QWORD *)(v63 + 72) * v8), v62, v64);
    }
    ++v23;
    if (v66 == v60)
    {
      swift_bridgeObjectRelease();
      return v65;
    }
  }
  __break(1u);
  return result;
}

void sub_1004A11EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;

  v5 = v4;
  v37 = a3;
  v38 = a4;
  v36 = a2;
  v7 = sub_10001A630(&qword_100843618);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List(0, v8);
  v12 = *(unsigned __int8 **)(v11 - 8);
  __chkstk_darwin(v11);
  v34 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v31 = (char *)&v30 - v15;
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v16; v16 = _CocoaArrayWrapper.endIndex.getter(v29))
  {
    v39 = v11;
    v33 = a1 & 0xC000000000000001;
    v35 = _swiftEmptyArrayStorage;
    v11 = 4;
    v32 = v10;
    v30 = a1;
    while (1)
    {
      v17 = v12;
      v18 = v33
          ? (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1)
          : (unsigned __int8 *)*(id *)(a1 + 8 * v11);
      v12 = v18;
      v20 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v40 = v18;
      sub_1004A0458((id *)&v40, v36, v37, v38, (uint64_t)v10, v19);
      if (v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      v12 = v17;
      v21 = v39;
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v17 + 6))(v10, 1, v39) == 1)
      {
        sub_10000882C((uint64_t)v10, &qword_100843618);
      }
      else
      {
        v22 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v17 + 4);
        v23 = v31;
        v22(v31, v10, v21);
        v22(v34, v23, v21);
        v24 = (unint64_t)v35;
        swift_isUniquelyReferenced_nonNull_native(v35);
        if ((v25 & 1) == 0)
          v24 = sub_1002C8738(0, *(_QWORD *)(v24 + 16) + 1, 1, v24);
        v27 = *(_QWORD *)(v24 + 16);
        v26 = *(_QWORD *)(v24 + 24);
        if (v27 >= v26 >> 1)
          v24 = sub_1002C8738(v26 > 1, v27 + 1, 1, v24);
        *(_QWORD *)(v24 + 16) = v27 + 1;
        v12 = v17;
        v28 = (v17[80] + 32) & ~(unint64_t)v17[80];
        v35 = (_QWORD *)v24;
        v22((char *)(v24 + v28 + *((_QWORD *)v17 + 9) * v27), v34, v39);
        a1 = v30;
      }
      ++v11;
      v10 = v32;
      if (v20 == v16)
        goto LABEL_24;
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v29 = a1;
    else
      v29 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_24:
  swift_bridgeObjectRelease();
}

void sub_1004A14D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  swift_bridgeObjectRetain_n(a4, 2);
  v10 = swift_bridgeObjectRetain_n(a5, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.fault.getter();
  v26 = a1;
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(32, -1);
    v24 = swift_slowAlloc(96, -1);
    v28 = v24;
    *(_DWORD *)v13 = 136446722;
    v14 = StaticString.description.getter(a1, a2, a3);
    v16 = v15;
    v27 = sub_10001A820(v14, v15, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v25 = a3;
    v17 = Dictionary.description.getter(a4, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v19 = v18;
    swift_bridgeObjectRelease(a4);
    v27 = sub_10001A820(v17, v19, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v13 + 22) = 2082;
    v20 = swift_bridgeObjectRetain(a5);
    v21 = Dictionary.description.getter(v20, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    a3 = v22;
    swift_bridgeObjectRelease(a5);
    v27 = sub_10001A820(v21, a3, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_bridgeObjectRelease_n(a5, 2);
    v23 = a3;
    LOBYTE(a3) = v25;
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s; UserInfo=%s; PublicUserInfo=%{public}s",
      (uint8_t *)v13,
      0x20u);
    swift_arrayDestroy(v24, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(a4, 2);
  }

  if ((a3 & 1) != 0)
    goto LABEL_7;
  if (v26)
  {
    rdi_os_crash();
LABEL_7:
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1004A1758(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100871F98, REMLog_ptr, (SEL *)&selRef_xpc);
}

uint64_t sub_1004A1774(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100871FB0, REMLog_ptr, (SEL *)&selRef_changeTracking);
}

uint64_t sub_1004A1790(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100871FC8, REMLog_ptr, (SEL *)&selRef_alarmEngine);
}

uint64_t sub_1004A17AC(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100871FE0, REMLog_ptr, (SEL *)&selRef_housekeepingingActivityScheduler);
}

uint64_t sub_1004A17C8(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100871FF8, REMLog_ptr, (SEL *)&selRef_cloudkit);
}

uint64_t sub_1004A17E4(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872010, REMLog_ptr, (SEL *)&selRef_migration);
}

uint64_t sub_1004A1800(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872028, REMLog_ptr, (SEL *)&selRef_dataAccess);
}

uint64_t sub_1004A181C(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872040, REMLog_ptr, (SEL *)&selRef_notification);
}

uint64_t sub_1004A1838(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872058, REMLog_ptr, (SEL *)&selRef_utility);
}

uint64_t sub_1004A1854(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872070, REMLog_ptr, (SEL *)&selRef_suggestedAttributes);
}

uint64_t sub_1004A1870(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872088, REMLog_ptr, (SEL *)&selRef_intelligentGrocery);
}

uint64_t sub_1004A188C(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_1008720A0, REMLog_ptr, (SEL *)&selRef_account);
}

uint64_t sub_1004A18A8(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_1008720B8, REMLog_ptr, (SEL *)&selRef_analytics);
}

uint64_t sub_1004A18C4(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_1008720D0, REMLog_ptr, (SEL *)&selRef_siriKit);
}

uint64_t sub_1004A18E0(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_1008720E8, REMLog_ptr, (SEL *)&selRef_applicationShortcut);
}

uint64_t sub_1004A18FC(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872100, REMLog_ptr, (SEL *)&selRef_timelineEngine);
}

uint64_t sub_1004A1918(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872118, REMLog_ptr, (SEL *)&selRef_inlineTagAutoConvertEngine);
}

uint64_t sub_1004A1934(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872130, REMLog_ptr, (SEL *)&selRef_templates);
}

uint64_t sub_1004A1950(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872148, REMLogStore_ptr, (SEL *)&selRef_container);
}

uint64_t sub_1004A196C(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872160, REMLogStore_ptr, (SEL *)&selRef_stagedLightweightCoreDataMigration);
}

uint64_t sub_1004A1988(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872178, REMLogStore_ptr, (SEL *)&selRef_read);
}

uint64_t sub_1004A19A4(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_100872190, REMLogStore_ptr, (SEL *)&selRef_write);
}

uint64_t sub_1004A19C0(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_1008721A8, REMLogStore_ptr, (SEL *)&selRef_search);
}

uint64_t sub_1004A19DC(uint64_t a1)
{
  return sub_1004A19F8(a1, qword_1008721C0, REMLogStore_ptr, (SEL *)&selRef_utility);
}

uint64_t sub_1004A19F8(uint64_t a1, uint64_t *a2, _QWORD *a3, SEL *a4)
{
  uint64_t v7;
  id v8;

  v7 = type metadata accessor for Logger(0);
  sub_10009EF3C(v7, a2);
  sub_10001AAA8(v7, (uint64_t)a2);
  v8 = objc_msgSend((id)objc_opt_self(*a3), *a4);
  return Logger.init(_:)(v8);
}

uint64_t sub_1004A1A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084C360);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084C360);
  if (qword_1008375E8 != -1)
    swift_once(&qword_1008375E8, sub_1004A1758);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100871F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004A1AF8(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  unint64_t v12;
  void *v13;
  uint64_t KeyPath;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  Class isa;
  char v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  id v74;
  id v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;

  v4 = v3;
  v81 = a1;
  v76 = a3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2;
  v12 = sub_10001853C();
  v13 = v11;
  if (a2)
  {
    v80 = (uint64_t)v3;
    if (v11)
    {
      KeyPath = swift_getKeyPath(&unk_1006BE218);
      v82 = 0;
      v83 = 0xE000000000000000;
      v15 = objc_msgSend(v10, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

      v17 = UUID.uuidString.getter(v16);
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_bridgeObjectRelease();
      v82 = v17;
      v83 = v19;
      v20._countAndFlagsBits = 47;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      v21._countAndFlagsBits = v12;
      v21._object = v13;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22 = sub_1002E8D50(KeyPath, v82, v83);

      swift_release(KeyPath);
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = swift_getKeyPath(&unk_1006BE218);
      v26 = objc_msgSend(v10, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v28 = UUID.uuidString.getter(v27);
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v82 = v28;
      v83 = v30;
      swift_bridgeObjectRetain(v30);
      v31._countAndFlagsBits = 47;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v22 = (uint64_t)sub_1004A23E8(v25, v82, v83, 6, 18, 0x4E49474542204B25, 0xED00004854495753, &qword_1008440C8);

      swift_release(v25);
    }
    v4 = (_QWORD *)v80;
  }
  else if (v11)
  {
    v23 = swift_getKeyPath(&unk_1006BE218);
    v82 = 47;
    v83 = 0xE100000000000000;
    v24._countAndFlagsBits = v12;
    v24._object = v13;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v22 = (uint64_t)sub_1004A23E8(v23, v82, v83, 6, 16, 0x5753444E45204B25, 0xEB00000000485449, &qword_1008440C8);
    swift_release(v23);
  }
  else
  {
    v22 = 0;
  }
  v32 = sub_1004A30F4();
  v33 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v34 = objc_msgSend((id)swift_getObjCClassFromMetadata(v32), "entity");
  objc_msgSend((id)v33, "setEntity:", v34);

  objc_msgSend((id)v33, "setAffectedStores:", 0);
  objc_msgSend((id)v33, "setPredicate:", v22);
  objc_msgSend((id)v33, "setReturnsObjectsAsFaults:", 0);
  v35 = NSManagedObjectContext.fetch<A>(_:)(v33, v32);
  v36 = v4;
  if (v4)
  {

    return;
  }
  v37 = v35;
  v84 = sub_10001A630(&qword_10084C418);
  v82 = v37;
  throwingCast<A>(_:as:failureMessage:)(&v85, &v82, v84, 0, 0, v84);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v82);
  v38 = v85;
  if (v85 >> 62)
  {
LABEL_50:
    if (v38 < 0)
      v72 = v38;
    else
      v72 = v38 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v38);
    v39 = _CocoaArrayWrapper.endIndex.getter(v72);
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v73[1] = v36;
  v74 = (id)v33;
  v75 = (id)v22;
  if (!v39)
  {
    v36 = _swiftEmptyDictionarySingleton;
LABEL_46:

    swift_bridgeObjectRelease();
    *v76 = v36;
    return;
  }
  v79 = v38 & 0xC000000000000001;
  v36 = _swiftEmptyDictionarySingleton;
  v40 = 4;
  v77 = v39;
  v78 = v38;
  while (1)
  {
    if (v79)
      v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40 - 4, v38);
    else
      v41 = *(id *)(v38 + 8 * v40);
    v42 = v41;
    v43 = v40 - 3;
    if (__OFADD__(v40 - 4, 1))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v44 = objc_msgSend(v41, "identifier");
    if (v44)
      break;

LABEL_16:
    ++v40;
    if (v43 == v39)
      goto LABEL_46;
  }
  v45 = v44;
  v80 = v40 - 3;
  v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v47 = v46;

  v48 = objc_msgSend(v42, "managerData");
  if (v48)
  {
    v49 = v48;
    v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v52 = v51;

  }
  else
  {
    v50 = 0;
    v52 = 0xC000000000000000;
  }
  v53 = (unint64_t)objc_msgSend(v42, "version");
  if ((v53 & 0x8000000000000000) == 0)
  {
    v54 = v53;
    v55 = objc_allocWithZone((Class)REMReplicaManagerSerializedData);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v22 = (uint64_t)objc_msgSend(v55, "initWithManagerData:version:", isa, v54);
    sub_1000A71C8(v50, v52);

    if (!v22)
    {
      swift_bridgeObjectRetain(v36);
      v33 = sub_10001A6DC(v81, v47);
      v22 = v65;
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
        v82 = (uint64_t)v36;
        v39 = v77;
        v38 = v78;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1002DA560();
          v36 = (_QWORD *)v82;
        }
        swift_bridgeObjectRelease();
        v22 = *(_QWORD *)(v36[7] + 8 * v33);
        sub_100289D70(v33, (uint64_t)v36);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v43 = v80;
        goto LABEL_16;
      }

      goto LABEL_44;
    }
    v38 = swift_isUniquelyReferenced_nonNull_native(v36);
    v82 = (uint64_t)v36;
    v33 = v47;
    v58 = sub_10001A6DC(v81, v47);
    v59 = v36[2];
    v60 = (v57 & 1) == 0;
    v61 = v59 + v60;
    if (__OFADD__(v59, v60))
      goto LABEL_48;
    v62 = v57;
    if (v36[3] < v61)
    {
      sub_1002D4540(v61, v38);
      v63 = sub_10001A6DC(v81, v47);
      if ((v62 & 1) != (v64 & 1))
        goto LABEL_55;
      v58 = v63;
      v36 = (_QWORD *)v82;
      if ((v62 & 1) == 0)
        goto LABEL_41;
LABEL_38:
      v67 = v36[7];

      *(_QWORD *)(v67 + 8 * v58) = v22;
      v33 = v47;
LABEL_43:

      swift_bridgeObjectRelease();
LABEL_44:
      swift_bridgeObjectRelease();
      v39 = v77;
      v38 = v78;
      v43 = v80;
      goto LABEL_16;
    }
    if ((v38 & 1) != 0)
    {
      v36 = (_QWORD *)v82;
      if ((v57 & 1) != 0)
        goto LABEL_38;
    }
    else
    {
      sub_1002DA560();
      v36 = (_QWORD *)v82;
      if ((v62 & 1) != 0)
        goto LABEL_38;
    }
LABEL_41:
    v36[(v58 >> 6) + 8] |= 1 << v58;
    v68 = (_QWORD *)(v36[6] + 16 * v58);
    *v68 = v81;
    v68[1] = v47;
    *(_QWORD *)(v36[7] + 8 * v58) = v22;
    v69 = v36[2];
    v70 = __OFADD__(v69, 1);
    v71 = v69 + 1;
    if (v70)
      goto LABEL_49;
    v36[2] = v71;
    swift_bridgeObjectRetain(v47);
    goto LABEL_43;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_55:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1004A22AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "identifier");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1004A2310(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setIdentifier:");

}

uint64_t type metadata accessor for RDReplicaManagerUtilities()
{
  return objc_opt_self(_TtC7remindd25RDReplicaManagerUtilities);
}

id sub_1004A238C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1004A23E8(a1, a2, a3, a4, 18, 0x4E49474542204B25, 0xED00004854495753, (uint64_t *)&unk_10083AEC0);
}

id sub_1004A23BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1004A23E8(a1, a2, a3, a4, 16, 0x5753444E45204B25, 0xEB00000000485449, (uint64_t *)&unk_10083AEC0);
}

id sub_1004A23E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, Swift::Int a5, uint64_t a6, unint64_t a7, uint64_t *a8)
{
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  Class isa;
  id v26;
  id result;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  _StringGuts.grow(_:)(a5);
  swift_bridgeObjectRelease();
  v31 = a6;
  v32 = a7;
  v15._countAndFlagsBits = sub_100303B04(a4);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 4203808;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  v17 = sub_10001A630((uint64_t *)&unk_100839E80);
  v18 = swift_allocObject(v17, 96, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1006A3C40;
  v19 = swift_retain();
  v20 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v19);
  if (v21)
  {
    v22 = v20;
    v23 = v21;
    swift_release(a1);
    *(_QWORD *)(v18 + 32) = v22;
    *(_QWORD *)(v18 + 40) = v23;
    *(_QWORD *)(v18 + 88) = &type metadata for String;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = a2;
    *(_QWORD *)(v18 + 72) = a3;
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v26 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v24, isa);

    return v26;
  }
  else
  {
    v31 = 0;
    v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v28._object = (void *)0x80000001006F8C10;
    v28._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v28);
    v30 = a1;
    v29 = sub_10001A630(a8);
    _print_unlocked<A, B>(_:_:)(&v30, &v31, v29, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v31, v32, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

_QWORD *sub_1004A2608(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *result;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  unint64_t v45;

  KeyPath = swift_getKeyPath(&unk_1006BE218);
  v6 = sub_1001DFA94(a1);
  v7 = (void *)sub_100342954(KeyPath, (uint64_t)v6);
  swift_release(KeyPath);
  v8 = sub_1004A30F4();
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "entity");
  objc_msgSend(v9, "setEntity:", v10);

  objc_msgSend(v9, "setAffectedStores:", 0);
  objc_msgSend(v9, "setPredicate:", v7);

  v11 = NSManagedObjectContext.fetch<A>(_:)(v9, v8);
  if (v2)
  {

    return a2;
  }
  v12 = v11;
  v39 = v9;
  v44 = sub_10001A630(&qword_10084C418);
  v43[0] = v12;
  throwingCast<A>(_:as:failureMessage:)(&v45, v43, v44, 0, 0, v44);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v43);
  v13 = v45;
  if (v45 >> 62)
  {
LABEL_29:
    if (v13 < 0)
      v37 = v13;
    else
      v37 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v14 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_5;
LABEL_33:

    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  v14 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
    goto LABEL_33;
LABEL_5:
  v42 = v13 & 0xC000000000000001;
  a2 = _swiftEmptyDictionarySingleton;
  v15 = 4;
  v40 = v14;
  v41 = v13;
  while (1)
  {
    if (v42)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, v13);
    else
      v16 = *(id *)(v13 + 8 * v15);
    v17 = v16;
    v9 = (id)(v15 - 3);
    if (__OFADD__(v15 - 4, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v18 = objc_msgSend(v16, "identifier");
    if (v18)
      break;

LABEL_7:
    ++v15;
    if (v9 == (id)v14)
    {

      swift_bridgeObjectRelease();
      return a2;
    }
  }
  v19 = v18;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v13 = v21;

  v22 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v43[0] = a2;
  v25 = sub_10001A6DC(v20, v13);
  v26 = a2[2];
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
    goto LABEL_27;
  v29 = v24;
  if (a2[3] >= v28)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      a2 = (_QWORD *)v43[0];
      if ((v24 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      sub_1002DA56C();
      a2 = (_QWORD *)v43[0];
      if ((v29 & 1) != 0)
        goto LABEL_20;
    }
LABEL_22:
    a2[(v25 >> 6) + 8] |= 1 << v25;
    v33 = (uint64_t *)(a2[6] + 16 * v25);
    *v33 = v20;
    v33[1] = v13;
    *(_QWORD *)(a2[7] + 8 * v25) = v22;
    v34 = a2[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_28;
    a2[2] = v36;
    swift_bridgeObjectRetain(v13);
    goto LABEL_24;
  }
  sub_1002D454C(v28, isUniquelyReferenced_nonNull_native);
  v30 = sub_10001A6DC(v20, v13);
  if ((v29 & 1) == (v31 & 1))
  {
    v25 = v30;
    a2 = (_QWORD *)v43[0];
    if ((v29 & 1) == 0)
      goto LABEL_22;
LABEL_20:
    v32 = a2[7];

    *(_QWORD *)(v32 + 8 * v25) = v22;
LABEL_24:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v40;
    v13 = v41;
    goto LABEL_7;
  }
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1004A29D8(uint64_t a1, _QWORD *a2, void *a3)
{
  void *v3;
  id v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  void **v13;
  int64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  __n128 v35;
  uint64_t v36;
  void **v37;
  char **v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  Swift::String v51;
  Swift::String v52;
  unint64_t v53;
  char v54;
  NSObject *v55;
  id v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  uint64_t v60;
  NSString v61;
  id v62;
  unint64_t v63;
  void *ObjCClassFromMetadata;
  id v65;
  id v66;
  void *v67;
  id v68;
  NSObject *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  NSString v77;
  id v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  Class isa;
  unint64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_type_t v88;
  _BOOL4 v89;
  uint64_t v90;
  os_log_type_t v91;
  uint64_t v92;
  _QWORD v93[2];
  __n128 v94;
  uint64_t v95;
  id v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  int64_t v100;
  id v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v103 = *(_QWORD *)(v8 - 8);
  v104 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  v96 = a3;
  v97 = a2;
  v95 = a1;
  if (v11)
  {
    v102 = v3;
    v107 = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v11, 0);
    v13 = (void **)(a1 + 56);
    v100 = v11;
    v14 = v11;
    do
    {
      v15 = *(v13 - 3);
      v16 = (uint64_t)*(v13 - 2);
      v18 = *(v13 - 1);
      v17 = *v13;
      v105 = 0;
      v106 = 0xE000000000000000;
      v19 = v15;
      swift_bridgeObjectRetain(v18);
      v20 = v17;
      v21 = objc_msgSend(v19, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v103 + 8))(v10, v104);
      swift_bridgeObjectRelease();
      v105 = v23;
      v106 = v25;
      v26._countAndFlagsBits = 47;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      v27._countAndFlagsBits = v16;
      v27._object = v18;
      String.append(_:)(v27);

      swift_bridgeObjectRelease();
      v28 = v105;
      v29 = v106;
      v12 = v107;
      if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
      {
        sub_1001C1B0C(0, v12[2] + 1, 1);
        v12 = v107;
      }
      v31 = v12[2];
      v30 = v12[3];
      if (v31 >= v30 >> 1)
      {
        sub_1001C1B0C(v30 > 1, v31 + 1, 1);
        v12 = v107;
      }
      v12[2] = v31 + 1;
      v32 = &v12[2 * v31];
      v32[4] = v28;
      v32[5] = v29;
      v13 += 4;
      --v14;
    }
    while (v14);
    a2 = v97;
    v11 = v100;
    v4 = v102;
  }
  v33 = sub_1004A2608((uint64_t)v12, a2);
  if (v4 || (v34 = v33, swift_bridgeObjectRelease(), !v11))
  {
    swift_bridgeObjectRelease();
    return;
  }
  v93[1] = 0;
  v35 = swift_bridgeObjectRetain(v95);
  v37 = (void **)(v36 + 56);
  v38 = &selRef_subscriptionOwnerUserRecordID;
  v35.n128_u64[0] = 134218240;
  v94 = v35;
  v98 = v34;
  while (1)
  {
    v100 = v11;
    v40 = *(v37 - 3);
    v41 = (uint64_t)*(v37 - 2);
    v42 = *(v37 - 1);
    v43 = *v37;
    v105 = 0;
    v106 = 0xE000000000000000;
    v44 = v40;
    swift_bridgeObjectRetain(v42);
    v101 = v43;
    v102 = v44;
    v45 = objc_msgSend(v44, v38[121]);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

    v47 = UUID.uuidString.getter(v46);
    v49 = v48;
    v50 = *(void (**)(char *, uint64_t))(v103 + 8);
    v50(v10, v104);
    swift_bridgeObjectRelease();
    v105 = v47;
    v106 = v49;
    v51._countAndFlagsBits = 47;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    v52._countAndFlagsBits = v41;
    v52._object = v42;
    String.append(_:)(v52);
    if (!v34[2])
      goto LABEL_21;
    v53 = sub_10001A6DC(v105, v106);
    if ((v54 & 1) != 0)
    {
      v55 = *(id *)(v34[7] + 8 * v53);
      v56 = objc_msgSend(v101, "version", swift_bridgeObjectRelease().n128_f64[0]);
      v57 = (unint64_t)-[NSObject version](v55, "version");
      if ((v57 & 0x8000000000000000) != 0)
        goto LABEL_33;
      v58 = v57;
      if (v57 >= (unint64_t)v56)
      {
        if (qword_1008376A8 != -1)
          swift_once(&qword_1008376A8, sub_1004A1A68);
        v86 = type metadata accessor for Logger(0);
        v87 = sub_10001AAA8(v86, (uint64_t)qword_10084C360);
        v39 = Logger.logObject.getter(v87);
        v88 = static os_log_type_t.info.getter(v39);
        v89 = os_log_type_enabled(v39, v88);
        v85 = v100;
        if (v89)
        {
          v90 = swift_slowAlloc(22, -1);
          v91 = v88;
          v92 = v90;
          *(_DWORD *)v90 = v94.n128_u32[0];
          *(_QWORD *)(v90 + 4) = v56;
          *(_WORD *)(v90 + 12) = 2048;
          *(_QWORD *)(v90 + 14) = v58;
          _os_log_impl((void *)&_mh_execute_header, v39, v91, "Skipping replica manager update. Version in database is newer {inputVersion: %llu, currentVersion: %llu}", (uint8_t *)v90, 0x16u);
          swift_slowDealloc(v92, -1, -1);

        }
        else
        {

          v39 = v55;
        }
        v38 = &selRef_subscriptionOwnerUserRecordID;
        goto LABEL_15;
      }
      v99 = v41;
      v39 = v55;
    }
    else
    {
LABEL_21:
      v99 = v41;
      v59 = objc_msgSend(v102, v38[121], swift_bridgeObjectRelease().n128_f64[0]);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

      UUID.uuidString.getter(v60);
      v50(v10, v104);
      v61 = String._bridgeToObjectiveC()();
      v62 = objc_msgSend(v96, "storeForAccountIdentifier:", v61, swift_bridgeObjectRelease().n128_f64[0]);

      v63 = sub_1004A30F4();
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v63);
      v65 = objc_msgSend(ObjCClassFromMetadata, "entity");
      v66 = objc_allocWithZone((Class)ObjCClassFromMetadata);
      v67 = v97;
      v39 = objc_msgSend(v66, "initWithEntity:insertIntoManagedObjectContext:", v65, v97);
      if (v62)
      {
        v68 = v62;
        v69 = v39;
        objc_msgSend(v67, "assignObject:toPersistentStore:", v69, v68);

      }
    }
    v105 = 0;
    v106 = 0xE000000000000000;
    v38 = &selRef_subscriptionOwnerUserRecordID;
    v70 = objc_msgSend(v102, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v70);

    v72 = UUID.uuidString.getter(v71);
    v74 = v73;
    v50(v10, v104);
    swift_bridgeObjectRelease();
    v105 = v72;
    v106 = v74;
    v75._countAndFlagsBits = 47;
    v75._object = (void *)0xE100000000000000;
    String.append(_:)(v75);
    v76._countAndFlagsBits = v99;
    v76._object = v42;
    String.append(_:)(v76);
    v77 = String._bridgeToObjectiveC()();
    -[NSObject setIdentifier:](v39, "setIdentifier:", v77, swift_bridgeObjectRelease().n128_f64[0]);

    v78 = v101;
    v79 = objc_msgSend(v101, "managerData");
    v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v79);
    v82 = v81;

    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v80, v82);
    -[NSObject setManagerData:](v39, "setManagerData:", isa);

    v84 = (unint64_t)objc_msgSend(v78, "version");
    if ((v84 & 0x8000000000000000) != 0)
      break;
    -[NSObject setVersion:](v39, "setVersion:", v84);
    v85 = v100;
LABEL_15:

    swift_bridgeObjectRelease();
    v37 += 4;
    v11 = v85 - 1;
    v34 = v98;
    if (!v11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_33:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
}

unint64_t sub_1004A30F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084C410;
  if (!qword_10084C410)
  {
    v1 = objc_opt_self(REMCDReplicaManager);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10084C410);
  }
  return result;
}

void destroy for RDReplicaManagerPayload(uint64_t a1)
{

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *initializeWithCopy for RDReplicaManagerPayload(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v7 = v3;
  swift_bridgeObjectRetain(v5);
  v8 = v6;
  return a1;
}

uint64_t assignWithCopy for RDReplicaManagerPayload(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(void **)(a2 + 24);
  v10 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  v11 = v9;

  return a1;
}

uint64_t assignWithTake for RDReplicaManagerPayload(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for RDReplicaManagerPayload()
{
  return &type metadata for RDReplicaManagerPayload;
}

uint64_t sub_1004A3288(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v4 = v3;
  v25 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v4 + 16);
  static DispatchWorkItemFlags.barrier.getter(v13);
  v16 = swift_allocObject(&unk_1007F6038, 24, 7);
  v17 = swift_weakInit(v16 + 16, v4);
  if ((a1 & 1) != 0)
  {
    __chkstk_darwin(v17);
    *(&v24 - 4) = v16;
    *(&v24 - 3) = a2;
    *(&v24 - 2) = a3;
    OS_dispatch_queue.sync<A>(flags:execute:)(v15, sub_1004A44B4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v22 = v16;
  }
  else
  {
    v18 = (_QWORD *)swift_allocObject(&unk_1007F6060, 40, 7);
    v18[2] = v16;
    v18[3] = a2;
    v18[4] = a3;
    aBlock[4] = sub_1004A44FC;
    v28 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007F6078;
    v19 = _Block_copy(aBlock);
    swift_retain(v16);
    v20 = swift_retain(a3);
    static DispatchQoS.unspecified.getter(v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v15, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v25);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v21 = v28;
    swift_release(v16);
    v22 = (uint64_t)v21;
  }
  return swift_release(v22);
}

uint64_t sub_1004A34B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084C420);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084C420);
  if (qword_100837628 != -1)
    swift_once(&qword_100837628, sub_1004A1838);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872058);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004A3544@<X0>(uint64_t a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v15[24];

  if (qword_1008376C0 != -1)
    swift_once(&qword_1008376C0, sub_1004A408C);
  swift_beginAccess(&qword_10084C440, v15, 32, 0);
  v6 = qword_10084C440;
  v7 = swift_retain(a1);
  v8 = (_QWORD *)sub_1002B1C64(v7, v6);
  swift_release(a1);
  if (v8)
  {
    result = swift_endAccess(v15);
  }
  else
  {
    swift_endAccess(v15);
    v10 = type metadata accessor for RDManualSortIDCache();
    v8 = (_QWORD *)swift_allocObject(v10, 40, 7);
    v8[4] = 0;
    v8[2] = a2;
    v11 = type metadata accessor for RDManualSortIDCacheContext();
    swift_allocObject(v11, 48, 7);
    v12 = a2;
    v13 = sub_1003CA1CC(0);
    v8[3] = v13;
    v13[5] = &off_1007F6018;
    swift_unknownObjectWeakAssign(v13 + 4, v8);
    swift_beginAccess(&qword_10084C440, v15, 33, 0);
    swift_retain(a1);
    v14 = swift_retain(v8);
    sub_1001913E0(v14, a1);
    swift_endAccess(v15);
    result = swift_release(a1);
  }
  *a3 = v8;
  return result;
}

uint64_t sub_1004A36AC(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  return sub_1004A36C4(a1, a2, a3, (uint64_t)&off_1007F2430);
}

uint64_t sub_1004A36B8(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  return sub_1004A36C4(a1, a2, a3, (uint64_t)&off_1007F2408);
}

uint64_t sub_1004A36C4(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];
  _BYTE v11[24];

  v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)(result + 24);
    v10[3] = type metadata accessor for RDManualSortIDCacheContext();
    v10[4] = a4;
    v10[0] = v9;
    swift_retain(v9);
    a2(v10);
    swift_release(v8);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v10);
  }
  return result;
}

uint64_t sub_1004A375C(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 24);
    v7[3] = type metadata accessor for RDManualSortIDCacheContext();
    v7[4] = &off_1007F2408;
    v7[0] = v6;
    swift_retain(v6);
    a2(v7);
    swift_release(v5);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v7);
  }
  return result;
}

uint64_t sub_1004A3800(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  sub_1004A3288(a1 & 1, (uint64_t)sub_1004A3910, 0);
  if (qword_1008376B0 != -1)
    swift_once(&qword_1008376B0, sub_1004A34B4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_10084C420);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDManualSortIDCache cancels observing account changes", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(_QWORD *)(v2 + 32);
  if (v8)
  {
    swift_retain(*(_QWORD *)(v2 + 32));
    AnyCancellable.cancel()();
    swift_release(v8);
    v9 = *(_QWORD *)(v2 + 32);
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v2 + 32) = 0;
  return swift_release(v9);
}

void sub_1004A3910(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE v8[24];

  v1 = *sub_10000A388(a1, a1[3]);
  swift_beginAccess(v1 + 16, v8, 1, 0);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = &_swiftEmptyDictionarySingleton;
  objc_msgSend(*(id *)(v1 + 24), "removeAllObjects", swift_bridgeObjectRelease(v2).n128_f64[0]);
  if (qword_1008373E0 != -1)
    swift_once(&qword_1008373E0, sub_1003CA13C);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_100848630);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDManualSortIDCacheContext > cleared all", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

uint64_t sub_1004A3A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;

  v0 = sub_10001A630(&qword_10083A970);
  __chkstk_darwin(v0);
  v41 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10001A630((uint64_t *)&unk_100838070);
  v39 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10001A630((uint64_t *)&unk_10083A960);
  v43 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100838080);
  v12 = *(_QWORD *)(v11 - 8);
  v44 = v11;
  v45 = v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(CFSTR("RDStoreControllerDidDisableAccountsNotification"), 0);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RDStoreControllerDidDisableAccountsNotificationAccountStoragesKey"));
  v18 = v17;
  v19 = (void *)sub_100398054(v16, v17, (void *)0xD000000000000013, 0x80000001006BE260, 0);
  v20 = swift_bridgeObjectRelease(v18);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v20);
  v46 = v19;
  v21 = sub_10001A630((uint64_t *)&unk_10084D080);
  v22 = sub_10001A630((uint64_t *)&unk_100838090);
  v23 = sub_1000A5F84(&qword_100847B20, (uint64_t *)&unk_10084D080, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_1004A4448, 0, v21, v22, v23);
  v24 = sub_1000A5F84((unint64_t *)&unk_1008380A0, (uint64_t *)&unk_100838070, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher.filter(_:)(sub_1000F27FC, 0, v2, v24);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v4, v2);
  swift_release(v19);
  v25 = v42;
  v46 = *(id *)(v42 + 16);
  v26 = v46;
  v27 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v28 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v41, 1, 1, v27);
  v29 = sub_1000D30A4();
  v30 = sub_1000A5F84(&qword_10083EEE0, (uint64_t *)&unk_10083A960, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v31 = sub_10009FC50((unint64_t *)&qword_1008380B0, (uint64_t (*)(uint64_t))sub_1000D30A4, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v32 = v26;
  v33 = v40;
  Publisher.receive<A>(on:options:)(&v46, v28, v40, v29, v30, v31);
  sub_100205CE8(v28);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v33);
  v34 = swift_allocObject(&unk_1007F6038, 24, 7);
  swift_weakInit(v34 + 16, v25);
  v35 = sub_1000A5F84((unint64_t *)&unk_10083AA00, (uint64_t *)&unk_100838080, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v36 = v44;
  v37 = Publisher<>.sink(receiveValue:)(sub_1004A44AC, v34, v44, v35);
  swift_release(v34);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v36);
  return v37;
}

uint64_t sub_1004A3E44()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v25 = *(_QWORD *)(v0 - 8);
  v26 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D30A4();
  v27 = (_QWORD *)type metadata accessor for RDManualSortIDCache();
  v13 = sub_10001A630(&qword_10084C4F8);
  v14 = String.init<A>(reflecting:)(&v27, v13);
  v23 = v15;
  v24 = v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v16 = static OS_dispatch_queue.global(qos:)(v12);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static DispatchQoS.unspecified.getter(v17);
  v27 = _swiftEmptyArrayStorage;
  v18 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v20 = sub_1000A5F84((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v19, v20, v3, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v24, v23, v8, v5, v2, v16);
  qword_10084C438 = result;
  return result;
}

unint64_t sub_1004A408C()
{
  unint64_t result;

  result = sub_1002B13C8((uint64_t)_swiftEmptyArrayStorage);
  qword_10084C440 = result;
  return result;
}

uint64_t sub_1004A40B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1004A3800(0);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1004A4108()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for RDManualSortIDCache()
{
  return objc_opt_self(_TtC7remindd19RDManualSortIDCache);
}

unint64_t *sub_1004A415C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_1004A42B8((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = swift_release(v2);
    if (v1)
      swift_willThrow(v9);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v7, -1);
    bzero(v10, v7);
    v8 = sub_1004A42B8((unint64_t *)v10, v6, v2);
    swift_release(v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v8;
}

unint64_t *sub_1004A42B8(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v17;
  unint64_t *v18;

  v17 = a2;
  v18 = result;
  v4 = 0;
  v5 = 0;
  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v13 >= v10)
      goto LABEL_22;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_22;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
        break;
    }
LABEL_18:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    result = (unint64_t *)objc_msgSend(*(id *)(*(_QWORD *)(a3 + 48) + 24 * v12 + 8), "isCloudKit", v17);
    if ((_DWORD)result)
    {
      *(unint64_t *)((char *)v18 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_22:
        swift_retain(a3);
        return (unint64_t *)sub_1002182CC(v18, v17, v4, a3);
      }
    }
  }
  v15 = v13 + 2;
  if (v15 >= v10)
    goto LABEL_22;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_22;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_24:
  __break(1u);
  return result;
}

unint64_t *sub_1004A4448@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X8>)
{
  uint64_t v3;
  unint64_t *result;

  v3 = swift_bridgeObjectRetain(*a1);
  result = sub_1004A415C(v3);
  *a2 = result;
  return result;
}

uint64_t sub_1004A4488()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004A44AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1004A40B0(a1, v1);
}

uint64_t sub_1004A44B4()
{
  uint64_t v0;

  return sub_1004A375C(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24));
}

uint64_t sub_1004A44D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004A44FC()
{
  uint64_t v0;

  return sub_1004A36C4(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t)&off_1007F2408);
}

uint64_t *sub_1004A4520(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_1004A45C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1004A4624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_1004A46A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_1004A471C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_1004A4798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1004A4814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004A4820);
}

uint64_t sub_1004A4820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1004A4894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004A48A0);
}

uint64_t sub_1004A48A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for RDPermanentlyHiddenReminder(uint64_t a1)
{
  uint64_t result;

  result = qword_10084C558;
  if (!qword_10084C558)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RDPermanentlyHiddenReminder);
  return result;
}

uint64_t sub_1004A4958(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

Swift::Int sub_1004A49DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v5, v0, v1);
  v2 = type metadata accessor for Date(0);
  v3 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1004A4A94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  v4 = type metadata accessor for Date(0);
  v5 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
}

Swift::Int sub_1004A4B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_10009FC50((unint64_t *)&qword_100843670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v6, v1, v2);
  v3 = type metadata accessor for Date(0);
  v4 = sub_10009FC50(&qword_100843918, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1004A4BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;

  __chkstk_darwin(a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - v9;
  v13 = static UUID.== infix(_:_:)(v11, v12);
  sub_10011FECC(a1, (uint64_t)v10);
  sub_10011FECC(a2, (uint64_t)v7);
  if ((v13 & 1) != 0)
    v14 = static Date.== infix(_:_:)(&v10[*(int *)(a3 + 20)], &v7[*(int *)(a3 + 20)]);
  else
    v14 = 0;
  sub_10011FF54((uint64_t)v7);
  sub_10011FF54((uint64_t)v10);
  return v14 & 1;
}

uint64_t sub_1004A4CBC()
{
  return sub_10009FC50(&qword_10084C590, type metadata accessor for RDPermanentlyHiddenReminder, (uint64_t)&unk_1006BE2CC);
}

uint64_t sub_1004A4CE8(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084C5B8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AllInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.AllInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1004A4D24(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v59 = a2;
  v52 = a3;
  v55 = a4;
  v5 = type metadata accessor for REMRemindersListDataView.ListsModel(0);
  v6 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  v57 = v6;
  __chkstk_darwin(v5);
  v53 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v54 = (char *)&v45 - v9;
  v10 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v45 - v19;
  v60 = (uint64_t)a1;
  v21 = v61;
  v22 = sub_1004A5660(a1);
  if (!v21)
  {
    v61 = (uint64_t)v22;
    v46 = v13;
    v47 = v11;
    v48 = v10;
    v49 = v17;
    v50 = v15;
    v51 = v20;
    v23 = REMRemindersListDataView.AllInvocation.Parameters.countCompleted.getter(v22);
    v24 = v60;
    v25 = sub_10011E698(v60, v23 & 1);
    v27 = v26;
    v28 = objc_msgSend(v58, "fetchResultTokenToDiffAgainst");
    v29 = (uint64_t)v51;
    sub_100493C24(v28, v24, (uint64_t)v51);

    LODWORD(v59) = v27 & 1;
    v30 = v25;
    v31 = (uint64_t)v46;
    REMRemindersListDataView.AllInvocation.Parameters.remindersPrefetch.getter();
    v32 = v61;
    swift_bridgeObjectRetain(v61);
    v33 = sub_10049D940(v31, v29, v24, v52, 0, v32);
    v35 = v34;
    v36 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v47 + 8))(v31, v48, v36);
    v37 = v54;
    REMRemindersListDataView.ListsModel.init(groups:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v32, v30, v59, 2, v33, v35);
    v38 = v56;
    v39 = v53;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v53, v37, v56);
    v40 = v29;
    v42 = v49;
    v41 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v40, v14);
    v43 = sub_10009FC50(&qword_10084C5C0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListsModel);
    v44 = sub_10009FC50(&qword_10084C5C8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.ListsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v39, v42, v38, v43, v44);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v51, v14);
  }
}

uint64_t sub_1004A5048@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  void *v20;
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  Class isa;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a4;
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v15 = __chkstk_darwin(v14).n128_u64[0];
  v17 = (char *)&v44 - v16;
  v18 = *a1;
  v19 = objc_msgSend(*a1, "identifier", v15);
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_7;
  }
  v20 = v19;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v21(v9, v13, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_7:
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
    v27 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v45, 1, 1, v27);
  }
  v21(v17, v9, v10);
  if (*(_QWORD *)(a2 + 16) && (v22 = sub_1002C65F8((uint64_t)v17), (v23 & 1) != 0))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v22);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v24);
    v25 = v46;
    v44 = sub_1004A0D14(v26, a3);
    v46 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = _swiftEmptyArrayStorage;
  }
  v29 = (void *)objc_opt_self(REMList);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v31 = objc_msgSend(v29, "objectIDWithUUID:", isa);

  v33 = REMObjectID.codable.getter(v32);
  v34 = objc_msgSend(v18, "displayName");
  if (v34)
  {
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v38 = v37;

  }
  else
  {
    v36 = 0;
    v38 = 0xE000000000000000;
  }
  v39 = objc_msgSend(v18, "color", v44);
  if (v39)
  {
    v40 = v39;
    v41 = REMColor.codable.getter();

  }
  else
  {
    v41 = 0;
  }
  v42 = v45;
  REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)(v33, v36, v38, v41, v44, 0);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  v43 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 0, 1, v43);
}

void sub_1004A5374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;

  v4 = v3;
  v35 = a2;
  v36 = a3;
  v6 = sub_10001A630(&qword_10084C5D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  v10 = *(unsigned __int8 **)(v9 - 8);
  __chkstk_darwin(v9);
  v33 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v30 = (char *)&v28 - v13;
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v14; v14 = _CocoaArrayWrapper.endIndex.getter(v27))
  {
    v37 = v9;
    v32 = a1 & 0xC000000000000001;
    v34 = _swiftEmptyArrayStorage;
    v15 = 4;
    v31 = v8;
    v29 = a1;
    while (1)
    {
      v16 = v10;
      v17 = v32
          ? (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, a1)
          : (unsigned __int8 *)*(id *)(a1 + 8 * v15);
      v10 = v17;
      v18 = v15 - 3;
      if (__OFADD__(v15 - 4, 1))
        break;
      v38 = v17;
      sub_1004A5048((id *)&v38, v35, v36, (uint64_t)v8);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
      v9 = v14;

      v10 = v16;
      v19 = v37;
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v16 + 6))(v8, 1, v37) == 1)
      {
        sub_10000882C((uint64_t)v8, &qword_10084C5D0);
      }
      else
      {
        v20 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v16 + 4);
        v21 = v30;
        v20(v30, v8, v19);
        v20(v33, v21, v19);
        v22 = (unint64_t)v34;
        swift_isUniquelyReferenced_nonNull_native(v34);
        if ((v23 & 1) == 0)
          v22 = sub_1002C84F0(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
        v25 = *(_QWORD *)(v22 + 16);
        v24 = *(_QWORD *)(v22 + 24);
        if (v25 >= v24 >> 1)
          v22 = sub_1002C84F0(v24 > 1, v25 + 1, 1, v22);
        *(_QWORD *)(v22 + 16) = v25 + 1;
        v10 = v16;
        v26 = (v16[80] + 32) & ~(unint64_t)v16[80];
        v34 = (_QWORD *)v22;
        v20((char *)(v22 + v26 + *((_QWORD *)v16 + 9) * v25), v33, v37);
        a1 = v29;
      }
      ++v15;
      v14 = v9;
      v8 = v31;
      if (v18 == v9)
        goto LABEL_24;
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v27 = a1;
    else
      v27 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_24:
  swift_bridgeObjectRelease();
}

void *sub_1004A5660(void *a1)
{
  uint64_t Subtasks;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Configuration;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  v34 = a1;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v32 = *(_QWORD *)(Subtasks - 8);
  v33 = Subtasks;
  __chkstk_darwin(Subtasks);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v14 = *(_QWORD *)(Configuration - 8);
  v15 = __chkstk_darwin(Configuration);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = REMRemindersListDataView.AllInvocation.Parameters.sortingStyle.getter(v15);
  v19 = REMRemindersListDataView.AllInvocation.Parameters.showCompleted.getter(v18);
  v20 = REMRemindersListDataView.AllInvocation.Parameters.countCompleted.getter(v19);
  REMRemindersListDataView.AllInvocation.Parameters.remindersPrefetch.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v3, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), v33);
  v21 = v20 & 1;
  v22 = v34;
  REMRemindersListDataView.FetchConfiguration.init(sortingStyle:showCompleted:countCompleted:remindersPrefetch:fetchSubtasks:)(v12, v9, v21, v6, v3);
  v23 = v35;
  sub_10011DD08((unint64_t)v22, (uint64_t)v17);
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, Configuration);
  }
  else
  {
    v26 = v24;
    v27 = v25;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, Configuration);
    v29 = sub_10011DB60(v22);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    sub_1004A5374((uint64_t)v29, v26, v27);
    v22 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v26, 2);
    swift_bridgeObjectRelease_n(v27, 2);
  }
  return v22;
}

void sub_1004A58D8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSString v9;
  _QWORD v10[3];
  uint64_t v11;

  v2 = *(void **)(v1 + 16);
  sub_1000E6B28(a1, (uint64_t)v10);
  v3 = v11;
  if (v11)
  {
    v4 = sub_10000A388(v10, v11);
    v5 = *(_QWORD *)(v3 - 8);
    __chkstk_darwin(v4);
    v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v5 + 16))(v7);
    v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v3);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v10);
  }
  else
  {
    v8 = 0;
  }
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", v8, v9);
  swift_unknownObjectRelease(v8);

}

uint64_t sub_1004A59E4(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084C5F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.RecentlyDeletedInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.RecentlyDeletedInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004A5A20@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v48 = a2;
  v45 = a3;
  v46 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v4 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v53 = (uint64_t)&v40 - v8;
  v9 = sub_10001A630(&qword_100839AA0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersListDataView.FlatModel(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v50 = (char *)&v40 - v18;
  v19 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
  v51 = *(_QWORD *)(v19 - 8);
  v52 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a1;
  v22 = v54;
  result = sub_1004A613C(a1);
  if (!v22)
  {
    v24 = result;
    v41 = v16;
    v42 = v6;
    v54 = v14;
    v43 = v4;
    v44 = v13;
    v25 = v46;
    swift_bridgeObjectRetain(result);
    v26 = (uint64_t)v21;
    REMRemindersListDataView.CountByCompleted.init(reminders:)(v27);
    v29 = v51;
    v28 = v52;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v12, v21, v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v12, 0, 1, v28);
    v30 = v50;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v24, v12, 2, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    v31 = objc_msgSend(v47, "fetchResultTokenToDiffAgainst");
    sub_100493C24(v31, v49, v53);

    v32 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v33 = v41;
    v49 = v26;
    v34 = v44;
    v32(v41, v30, v44);
    v35 = v42;
    v36 = v43;
    v37 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v53, v25);
    v38 = sub_10009FC50(&qword_10083BAE8, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
    v39 = sub_10009FC50((unint64_t *)&unk_10083BAF0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FlatModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v33, v35, v34, v38, v39);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v25);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v34);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v49, v52);
  }
  return result;
}

char *sub_1004A5D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *result;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  __n128 v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t, __n128);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, __n128);
  char *v55;
  char *v56;

  v5 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v52 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v55 = (char *)&v40 - v12;
  v51 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  __chkstk_darwin(v51);
  v47 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v50 = (char *)&v40 - v17;
  result = (char *)_swiftEmptyArrayStorage;
  v56 = (char *)_swiftEmptyArrayStorage;
  v46 = *(_QWORD *)(a1 + 16);
  if (v46)
  {
    v19 = 0;
    v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v48 = *(_QWORD *)(v15 + 72);
    v40 = v2;
    v41 = v20;
    v43 = a1 + v20;
    v44 = v15;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
    v45 = a2;
    do
    {
      v49 = v19;
      v22 = v42(v50, v43 + v48 * v19, v51, v16);
      v23 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter(v22);
      v24 = objc_msgSend(v23, "uuid");

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v25 = *(_QWORD *)(a2 + 16);
      if (v25)
      {
        v26 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
        v27 = swift_bridgeObjectRetain(a2);
        v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
        v53 = *(_QWORD *)(v9 + 72);
        v54 = v28;
        while (1)
        {
          v54(v7, v26, v8, v27);
          v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
          v29(v7, 0, 1, v8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
            break;
          v30 = v52;
          (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v52, v7, v8);
          v31 = sub_10009FC50((unint64_t *)&qword_10083B380, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v32 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v55, v8, v31);
          v33 = *(void (**)(char *, uint64_t))(v9 + 8);
          v33(v30, v8);
          if ((v32 & 1) != 0)
          {
            a2 = v45;
            v21 = swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t, __n128))v33)(v55, v8, v21);
            (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v51);
            goto LABEL_4;
          }
          v26 += v53;
          if (!--v25)
            goto LABEL_12;
        }
      }
      else
      {
        swift_bridgeObjectRetain(a2);
        v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
LABEL_12:
        v29(v7, 1, 1, v8);
      }
      a2 = v45;
      v34 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v55, v8, v34);
      v35 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
      v35(v47, v50, v51);
      v36 = v56;
      swift_isUniquelyReferenced_nonNull_native(v56);
      if ((v37 & 1) == 0)
      {
        sub_1001C1E1C(0, *((_QWORD *)v36 + 2) + 1, 1);
        v36 = v56;
      }
      v39 = *((_QWORD *)v36 + 2);
      v38 = *((_QWORD *)v36 + 3);
      if (v39 >= v38 >> 1)
      {
        sub_1001C1E1C(v38 > 1, v39 + 1, 1);
        v36 = v56;
      }
      *((_QWORD *)v36 + 2) = v39 + 1;
      v35(&v36[v41 + v39 * v48], v47, v51);
      v56 = v36;
LABEL_4:
      v19 = v49 + 1;
    }
    while (v49 + 1 != v46);
    return v56;
  }
  return result;
}

uint64_t sub_1004A613C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Subtasks;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  int64_t v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (**v73)(_QWORD, _QWORD, _QWORD);
  uint64_t v74;
  _QWORD *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;

  v75 = (_QWORD *)a1;
  v1 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v71 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v70 = (uint64_t)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v69 = (uint64_t)&v66 - v4;
  v5 = type metadata accessor for UUID(0);
  v80 = *(_QWORD *)(v5 - 8);
  v81 = v5;
  __chkstk_darwin(v5);
  v79 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v82 = *(_QWORD *)(Subtasks - 8);
  v83 = Subtasks;
  __chkstk_darwin(Subtasks);
  v9 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v77 = *(_QWORD *)(v10 - 8);
  v78 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v73 = *(void (***)(_QWORD, _QWORD, _QWORD))(v13 - 8);
  v74 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v72);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (uint64_t)&v66 - v19;
  v21 = _s10PredicatesOMa(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A630(&qword_1008466A8);
  *(_QWORD *)v23 = REMRemindersListDataView.RecentlyDeletedInvocation.Parameters.accountID.getter();
  REMRemindersListDataView.RecentlyDeletedInvocation.Parameters.deletedAfterDate.getter();
  v23[8] = 1;
  swift_storeEnumTagMultiPayload(v23, v21, 16);
  sub_10000D2C0();
  v25 = v24;
  sub_10001C744((uint64_t)v23, _s10PredicatesOMa);
  v26 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v27 = swift_allocObject(v26, 40, 7);
  v28 = (_QWORD *)v27;
  *(_OWORD *)(v27 + 16) = xmmword_1006A7330;
  if (qword_100837238 != -1)
    v27 = swift_once(&qword_100837238, sub_10033CF00);
  v29 = (void *)qword_100871E20;
  v28[4] = qword_100871E20;
  v84 = v28;
  specialized Array._endMutation()(v27);
  v30 = (uint64_t)v84;
  ((void (**)(char *, _QWORD, uint64_t))v73)[13](v15, enum case for REMRemindersListDataView.SortingStyle.default(_:), v74);
  swift_storeEnumTagMultiPayload(v17, v72, 5);
  v31 = v29;
  sub_1004957D0((uint64_t)v15, (uint64_t)v17, v20);
  v33 = (char *)v77;
  v32 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v12, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v78);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 104))(v9, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), v83);
  v34 = (uint64_t)v76;
  v35 = sub_100496780((uint64_t)v75, (uint64_t)v25, v20, v30, 0, (uint64_t)v12, v9, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 1);
  v37 = v34;
  if (v34)
  {
    swift_bridgeObjectRelease();

LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v9, v83);
    (*((void (**)(char *, uint64_t))v33 + 1))(v12, v32);
    return sub_10001C744(v20, _s9UtilitiesO12SortingStyleOMa);
  }
  else
  {
    v39 = v36;
    v75 = v35;
    v76 = v25;
    swift_bridgeObjectRelease();
    if ((unint64_t)v39 >> 62)
      goto LABEL_33;
    if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      while (1)
      {
        if ((v39 & 0xC000000000000001) != 0)
        {
          v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v39);
        }
        else
        {
          if (!*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            JUMPOUT(0x1004A6938);
          }
          v40 = *(id *)(v39 + 32);
        }
        v41 = v40;
        v42 = objc_msgSend(v40, "account", swift_bridgeObjectRelease().n128_f64[0]);

        v43 = v76;
        if (!v42)
          break;
        v44 = objc_msgSend(v42, "recentlyDeletedInfoAsData");
        if (!v44)
        {

          break;
        }
        v45 = v44;
        v73 = (void (**)(_QWORD, _QWORD, _QWORD))v42;
        v74 = v20;
        v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
        v48 = v47;

        type metadata accessor for RDRecentlyDeletedInfo(0);
        sub_10009FC50(&qword_100841B08, type metadata accessor for RDRecentlyDeletedInfo, (uint64_t)&unk_1006C45CC);
        static REMJSONRepresentable.fromJSONData(_:)(&v84, v46, v48);
        if (v37)
        {
          sub_1000A71C8(v46, v48);
          swift_bridgeObjectRelease();

          v20 = v74;
          goto LABEL_5;
        }
        v68 = 0;
        v72 = (uint64_t)v12;
        sub_1000A71C8(v46, v48);
        v67 = v84;
        v12 = (char *)v84[2];
        v39 = *((_QWORD *)v12 + 2);
        v49 = _swiftEmptyArrayStorage;
        v50 = v83;
        if (!v39)
        {
          v62 = v82;
LABEL_29:
          swift_bridgeObjectRetain(v49);
          v63 = sub_1004A5D5C((uint64_t)v75, (uint64_t)v49);
          swift_release(v67);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v9, v50);
          (*((void (**)(uint64_t, uint64_t))v33 + 1))(v72, v32);
          sub_10001C744(v74, _s9UtilitiesO12SortingStyleOMa);
          swift_bridgeObjectRelease();
          return (uint64_t)v63;
        }
        v66 = v9;
        v84 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v12);
        sub_1001C1BE4(0, v39, 0);
        v20 = sub_10028F928(v12);
        v37 = v51;
        v9 = v52 & 1;
        v33 = v12 + 56;
        while ((v20 & 0x8000000000000000) == 0 && v20 < 1 << v12[32])
        {
          if (((*(_QWORD *)&v33[((unint64_t)v20 >> 3) & 0xFFFFFFFFFFFFF8] >> v20) & 1) == 0)
            goto LABEL_31;
          if (*((_DWORD *)v12 + 9) != (_DWORD)v37)
            goto LABEL_32;
          v53 = v69;
          sub_10011FECC(*((_QWORD *)v12 + 6) + *(_QWORD *)(v71 + 72) * v20, v69);
          v54 = v53;
          v55 = v70;
          sub_10011FF10(v54, v70);
          (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v55, v81);
          sub_10001C744(v55, type metadata accessor for RDPermanentlyHiddenReminder);
          v49 = v84;
          swift_isUniquelyReferenced_nonNull_native(v84);
          if ((v56 & 1) == 0)
          {
            sub_1001C1BE4(0, v49[2] + 1, 1);
            v49 = v84;
          }
          v58 = v49[2];
          v57 = v49[3];
          v32 = v58 + 1;
          if (v58 >= v57 >> 1)
          {
            sub_1001C1BE4(v57 > 1, v58 + 1, 1);
            v49 = v84;
          }
          v49[2] = v32;
          (*(void (**)(unint64_t, char *, uint64_t))(v80 + 32))((unint64_t)v49+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(_QWORD *)(v80 + 72) * v58, v79, v81);
          v84 = v49;
          v59 = sub_10036456C(v20, v37, v9 & 1, v12);
          v20 = v59;
          v37 = v60;
          v9 = v61 & 1;
          if (!--v39)
          {
            sub_1000E515C(v59, v60, v61 & 1);
            swift_bridgeObjectRelease();
            v62 = v82;
            v50 = v83;
            v33 = (char *)v77;
            v32 = v78;
            v9 = v66;
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        if (v39 < 0)
          v64 = v39;
        else
          v64 = v39 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v39);
        v65 = _CocoaArrayWrapper.endIndex.getter(v64);
        swift_bridgeObjectRelease();
        if (!v65)
          goto LABEL_37;
      }
    }
    else
    {
LABEL_37:
      swift_bridgeObjectRelease();
      v43 = v76;
    }

    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v9, v83);
    (*((void (**)(char *, uint64_t))v33 + 1))(v12, v32);
    sub_10001C744(v20, _s9UtilitiesO12SortingStyleOMa);
    return (uint64_t)v75;
  }
}

id sub_1004A69C8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "parentAccount");
  *a2 = result;
  return result;
}

id sub_1004A6A00(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setParentAccount:", *a1);
}

_QWORD *sub_1004A6A14(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  id v25;
  id v26;
  Class isa;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  id v35;
  uint64_t v36;

  v4 = v2;
  v7 = _s10PredicatesOMa(0);
  *(_QWORD *)&v8 = __chkstk_darwin(v7).n128_u64[0];
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(v4, "remObjectID", v8);
  if (!v11)
    return _swiftEmptyArrayStorage;
  v12 = v11;
  v34 = a1;
  *(_QWORD *)v10 = v11;
  v10[8] = 1;
  *((_QWORD *)v10 + 2) = a2;
  swift_storeEnumTagMultiPayload(v10, v7, 5);
  v35 = v12;
  sub_10000D2C0();
  v14 = v13;
  sub_10001C744((uint64_t)v10, _s10PredicatesOMa);
  v15 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v16 + 32) = v4;
  v36 = v16;
  specialized Array._endMutation()(v16);
  v17 = v4;
  v18 = sub_10001A630(&qword_10083FCF0);
  v19 = sub_1000151B0(0, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v20 = sub_1000A5F84((unint64_t *)&qword_10083FC48, &qword_10083FCF0, (uint64_t)&protocol conformance descriptor for [A]);
  v21 = sub_1000EC524((unint64_t *)&qword_10083FE40, (unint64_t *)&qword_10083FBF0, NSPersistentStore_ptr);
  v22 = Sequence.compactMapToSet<A>(_:)(sub_100303BB8, 0, v18, v19, v20, v21);
  v23 = sub_1001E8870(v22);
  swift_bridgeObjectRelease();
  v24 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v25 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v26 = objc_msgSend((id)swift_getObjCClassFromMetadata(v24), "entity");
  objc_msgSend(v25, "setEntity:", v26);

  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "setAffectedStores:", isa);

  objc_msgSend(v25, "setPredicate:", v14);
  swift_bridgeObjectRelease();
  swift_release(v23);
  if (qword_100837260 != -1)
    swift_once(&qword_100837260, sub_10033CFDC);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v28 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, "setSortDescriptors:", v28);

  v29 = v34;
  v30 = NSManagedObjectContext.fetch<A>(_:)(v25, v24);
  if (v3)
  {

  }
  else
  {
    v36 = v30;
    v31 = sub_10001A630(&qword_10083D590);
    v32 = sub_1000A5F84((unint64_t *)&qword_10083FB70, &qword_10083D590, (uint64_t)&protocol conformance descriptor for [A]);
    v29 = Sequence.elements<A>(ofType:)(v24, v31, v24, v32);
    swift_bridgeObjectRelease();

  }
  return (_QWORD *)v29;
}

uint64_t sub_1004A6DC0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_mostRecentTargetTemplateIdentifierByCurrentUser, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1004A6DDC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setMostRecentTargetTemplateIdentifierByCurrentUser_);
}

uint64_t sub_1004A6E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084C600);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084C600);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004A6E90(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "sharees");
  if (v3)
  {
    v4 = v3;
    v5 = sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    v6 = sub_1000EC524((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718);
    v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
}

void sub_1004A6F38(_QWORD *a1, void **a2)
{
  void *v2;
  NSSet v3;
  Class isa;

  v2 = *a2;
  if (*a1)
  {
    sub_1000151B0(0, (unint64_t *)&qword_100839928, off_1007D6718);
    sub_1000EC524((unint64_t *)&unk_100843650, (unint64_t *)&qword_100839928, off_1007D6718);
    v3.super.isa = Set._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.isa = 0;
  }
  isa = v3.super.isa;
  objc_msgSend(v2, "setSharees:");

}

id sub_1004A6FE0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isPinnedByCurrentUser");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1004A7010(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsPinnedByCurrentUser:", *a1);
}

uint64_t sub_1004A7024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006A7330;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1006BE3E8);
  v3 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 1);
  *(_QWORD *)(v1 + 32) = v3;
  result = specialized Array._endMutation()(v3);
  qword_1008721D8 = v1;
  return result;
}

id sub_1004A70B8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "parentAccount");
  *a2 = result;
  return result;
}

id sub_1004A70F0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setParentAccount:", *a1);
}

uint64_t sub_1004A7104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t result;

  v0 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1006AAD80;
  *(_QWORD *)(v1 + 32) = swift_getKeyPath(&unk_1006BE9D8);
  *(_QWORD *)(v1 + 40) = swift_getKeyPath(&unk_1006BE3E8);
  KeyPath = swift_getKeyPath(&unk_1006BE420);
  *(_QWORD *)(v1 + 48) = KeyPath;
  result = specialized Array._endMutation()(KeyPath);
  qword_1008721E0 = v1;
  return result;
}

_QWORD *sub_1004A7194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v4)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v9 = dispatch thunk of REMStoreObjectsContainer.storedList(with:)();

      if (v2)
        return (_QWORD *)swift_release(_swiftEmptyArrayStorage);
      ++v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized ContiguousArray._endMutation()(v12);
      if (v4 == v6)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_1004A72E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;
  id v10;
  uint64_t result;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = sub_10001A630((uint64_t *)&unk_100839E80);
  v5 = swift_allocObject(v4, 96, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1006A3C40;
  v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v5);
  if (v7)
  {
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = v7;
    *(_QWORD *)(v5 + 88) = &type metadata for Int;
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = a2;
    v8 = String._bridgeToObjectiveC()();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v10 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v8, isa);

    return (uint64_t)v10;
  }
  else
  {
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v12._object = (void *)0x80000001006F8C10;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    v14 = a1;
    v13 = sub_10001A630(&qword_100843760);
    _print_unlocked<A, B>(_:_:)(&v14, &v15, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A7484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s10PredicatesOMa_1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004A74E0()
{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  KeyPath = swift_getKeyPath(&unk_1006BE948);
  v1 = sub_10033DD60(KeyPath, 0);
  v2 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
  v4 = _swiftEmptyArrayStorage[2];
  v3 = _swiftEmptyArrayStorage[3];
  if (v4 >= v3 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1);
  v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v1);
  specialized Array._endMutation()(v5);
  v6 = swift_getKeyPath(&unk_1006BE658);
  v7 = sub_10033DD10(v6, 2);
  v8 = swift_release(v6);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  v10 = _swiftEmptyArrayStorage[2];
  v9 = _swiftEmptyArrayStorage[3];
  if (v10 >= v9 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1);
  v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v7);
  specialized Array._endMutation()(v11);
  return sub_10000D2BC(_swiftEmptyArrayStorage);
}

const char *sub_1004A75F8()
{
  return "isGroup";
}

id sub_1004A7604@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isGroup");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1004A7634(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsGroup:", *a1);
}

const char *sub_1004A7688()
{
  return "badgeEmblem";
}

void sub_1004A7694(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_badgeEmblem, a2);
}

void sub_1004A76B0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setBadgeEmblem_);
}

void sub_1004A76DC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1000D0DEC(a1, (SEL *)&selRef_externalIdentifier, a2);
}

void sub_1004A76F8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000D0E58(a1, a2, a3, a4, (SEL *)&selRef_setExternalIdentifier_);
}

uint64_t sub_1004A7724@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_mostRecentTargetTemplateIdentifierByCurrentUser, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1004A7750(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setMostRecentTargetTemplateIdentifierByCurrentUser_);
}

const char *sub_1004A7784()
{
  return "pinnedDate";
}

uint64_t sub_1004A7790@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_pinnedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1004A77BC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setPinnedDate_);
}

const char *sub_1004A77F0()
{
  return "isPinnedByCurrentUser";
}

id sub_1004A77FC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isPinnedByCurrentUser");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1004A782C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsPinnedByCurrentUser:", *a1);
}

const char *sub_1004A7840()
{
  return "sharees";
}

void sub_1004A786C(_QWORD *a1, id *a2, uint64_t *a3)
{
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  _QWORD *v31;
  id v33;
  id v34;
  id v35;

  v5 = *a2;
  v34 = objc_msgSend(*a2, "account");
  _StringGuts.grow(_:)(33);
  v33 = objc_msgSend(v5, "remObjectID", swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);
  v6 = sub_10001A630((uint64_t *)&unk_100844910);
  v7 = Optional.descriptionOrNil.getter(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 125;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = sub_10001A630((uint64_t *)&unk_10083ADA0);
  Optional.tryUnwrap(_:file:line:)(&v35, 0xD00000000000001ELL, 0x80000001007058D0, 0xD000000000000060, 0x8000000100705860, 612, v12);
  swift_bridgeObjectRelease(0x80000001007058D0);

  if (!v3)
  {
    v31 = a1;
    v13 = v35;
    v14 = objc_msgSend(v35, "remObjectID");
    _StringGuts.grow(_:)(46);
    v15 = objc_msgSend(v13, "objectID", swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);
    v16 = objc_msgSend(v15, "description");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);

    swift_bridgeObjectRelease(v19);
    v21._countAndFlagsBits = 125;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    Optional.tryUnwrap(_:file:line:)(&v35, 0xD00000000000002BLL, 0x80000001007058F0, 0xD000000000000060, 0x8000000100705860, 613, v6);
    swift_bridgeObjectRelease(0x80000001007058F0);

    v22 = *a3;
    v23 = v35;
    v24 = sub_1002B1D3C(v23, v22);

    if (!v24)
    {
      v29 = sub_100259474(v13);
      v30 = v23;
      v24 = v29;
      sub_1001913F4((uint64_t)v24, (uint64_t)v30);

    }
    v25 = v24;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
    v27 = *(_QWORD *)((*v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v26 = *(_QWORD *)((*v31 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v27 >= v26 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1);
    v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
    specialized Array._endMutation()(v28);

  }
}

void sub_1004A7BD0(_QWORD *a1, void **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  int v22;
  uint8_t *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  double v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  NSObject *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  os_log_t v51;
  uint64_t v52;
  NSObject *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  id v62;
  id v63;
  uint64_t v64;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v55 - v14;
  v16 = *a2;
  v17 = objc_msgSend(v16, "parentList");
  if (v17)
  {
    v18 = v17;
    if ((objc_msgSend(v17, "isDeleted") & 1) != 0)
    {
      if (qword_1008376C8 != -1)
        swift_once(&qword_1008376C8, sub_1004A6E00);
      v19 = type metadata accessor for Logger(0);
      sub_10001AAA8(v19, (uint64_t)qword_10084C600);
      v20 = v16;
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, (os_log_type_t)v22))
      {
        v57 = v22;
        v58 = v21;
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = swift_slowAlloc(32, -1);
        v60 = v56;
        *(_DWORD *)v23 = 136315138;
        v24 = objc_msgSend(v20, "identifier");
        if (v24)
        {
          v25 = v24;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

          v26 = 0;
        }
        else
        {
          v26 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, v26, 1, v6);
        sub_1000F2CE4((uint64_t)v13, (uint64_t)v15);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
        {
          sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
          v47 = 0xE300000000000000;
          v48 = 7104878;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
          v49 = sub_10000882C((uint64_t)v15, (uint64_t *)&unk_100839C80);
          v48 = UUID.uuidString.getter(v49);
          v47 = v50;
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        }
        v63 = (id)sub_10001A820(v48, v47, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);

        swift_bridgeObjectRelease(v47);
        v51 = v58;
        _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v57, "REMCDList's parentList is unexpectedly deleted {identifier: %s}", v23, 0xCu);
        v52 = v56;
        swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v23, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v27 = objc_msgSend(v18, "remObjectID");
      v60 = 0;
      v61 = 0xE000000000000000;
      v62 = v27;
      _StringGuts.grow(_:)(47);
      *(_QWORD *)&v28 = swift_bridgeObjectRelease(v61).n128_u64[0];
      v60 = 0xD00000000000002CLL;
      v61 = 0x8000000100705830;
      v29 = objc_msgSend(v18, "objectID", v28);
      v30 = objc_msgSend(v29, "description");
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v33 = v32;

      v34._countAndFlagsBits = v31;
      v34._object = v33;
      String.append(_:)(v34);

      swift_bridgeObjectRelease(v33);
      v35._countAndFlagsBits = 125;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      v37 = v60;
      v36 = v61;
      v38 = sub_10001A630((uint64_t *)&unk_100844910);
      v39 = v59;
      Optional.tryUnwrap(_:file:line:)(&v63, v37, v36, 0xD000000000000060, 0x8000000100705860, 644, v38);
      if (v39)
      {

        swift_bridgeObjectRelease(v36);
      }
      else
      {
        swift_bridgeObjectRelease(v36);

        v40 = *a3;
        v41 = v63;
        v42 = sub_1002B1D58(v41, v40);

        if (!v42)
        {
          v53 = sub_100534CF0(v18);
          v54 = v41;
          v42 = v53;
          sub_100191408((uint64_t)v42, (uint64_t)v54);

        }
        v43 = v42;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
        v45 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v44 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v45 >= v44 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1);
        v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v43);
        specialized Array._endMutation()(v46);

      }
    }
  }
}

void *sub_1004A8130(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void **, id *, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  void *v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v17;
  void *v18;

  v18 = a1;
  v6 = v4;
  v9 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    for (i = 4; ; ++i)
    {
      v12 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      v9 = v12;
      v13 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v17 = v12;
      a4(&v18, &v17, a3);
      if (v6)
      {
        v14 = v18;
        swift_bridgeObjectRelease(a2);

        swift_bridgeObjectRelease(v14);
        return v9;
      }

      if (v13 == v10)
      {
        swift_bridgeObjectRelease(a2);
        return v18;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v15 = a2;
    else
      v15 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v9;
}

void *sub_1004A8268(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v4;
  void *v6;
  void *v7;

  v7 = &_swiftEmptyDictionarySingleton;
  v4 = sub_1004A8130(_swiftEmptyArrayStorage, a1, (uint64_t)&v7, (void (*)(void **, id *, uint64_t))sub_1004A786C);
  if (v2)
  {
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v1 = v4;
    v6 = &_swiftEmptyDictionarySingleton;
    sub_1004A8130(_swiftEmptyArrayStorage, a1, (uint64_t)&v6, (void (*)(void **, id *, uint64_t))sub_1004A7BD0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
  }
  return v1;
}

void sub_1004A8330(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  __n128 v41;
  uint64_t v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char v47[16];
  _QWORD *v48;

  v44 = a2;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMListStorageCDIngestor();
  inited = swift_initStackObject(v7, v47);
  if (qword_1008376C8 != -1)
    swift_once(&qword_1008376C8, sub_1004A6E00);
  v9 = sub_10001AAA8(v3, (uint64_t)qword_10084C600);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9, v3);
  v46 = a1;
  v48 = (_QWORD *)a1;
  __chkstk_darwin(v10);
  *(&v43 - 2) = v6;
  v11 = sub_10001A630(&qword_10083FF50);
  v12 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  v13 = sub_1000A5F84((unint64_t *)&qword_10083A838, &qword_10083FF50, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = v45;
  v15 = Sequence.map<A>(skippingError:_:)(sub_1000F5264, &v43 - 4, sub_1000F4B44, inited, v11, v12, v13);
  if (v14)
  {
    swift_errorRelease(v14);
    v16 = _swiftEmptyArrayStorage;
  }
  else
  {
    v16 = (_QWORD *)v15;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v17 = sub_1004A8268(v46);
  v43 = v18;
  v48 = v16;
  KeyPath = swift_getKeyPath(&unk_1006BEA10);
  v20 = swift_getKeyPath(&unk_1006BEA40);
  v21 = sub_10001A630(&qword_10083FEA0);
  v22 = sub_1000A5F84(&qword_10083AC20, &qword_10083FEA0, (uint64_t)&protocol conformance descriptor for [A]);
  sub_1000EC524((unint64_t *)&qword_10083A1F0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v45 = v22;
  v46 = v21;
  v23 = Sequence.indexBy<A, B>(key:value:)(KeyPath, v20, v21, v22);
  swift_bridgeObjectRelease();
  swift_release(KeyPath);
  swift_release(v20);
  v24 = sub_1003B07B8(v23);
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v48 = _swiftEmptyDictionarySingleton;
  sub_10033D520(v24, (uint64_t)sub_10033D4E4, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v48);
  v26 = v48;
  swift_bridgeObjectRelease();
  v48 = v17;
  v27 = swift_getKeyPath(&unk_1006BEA58);
  v28 = swift_getKeyPath(&unk_1006BEA80);
  v29 = sub_10001A630(&qword_10083FFE0);
  v30 = sub_1000A5F84(&qword_100846738, &qword_10083FFE0, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = Sequence.indexBy<A, B>(key:value:)(v27, v28, v29, v30);
  swift_bridgeObjectRelease();
  swift_release(v27);
  swift_release(v28);
  v32 = sub_1003B0348(v31);
  swift_bridgeObjectRelease();
  v33 = swift_isUniquelyReferenced_nonNull_native(v26);
  v48 = v26;
  sub_10033D520(v32, (uint64_t)sub_10033D4E4, 0, v33, (uint64_t)&v48);
  v34 = v48;
  swift_bridgeObjectRelease();
  v48 = v43;
  v35 = swift_getKeyPath(&unk_1006BEA10);
  v36 = swift_getKeyPath(&unk_1006BEA40);
  v37 = Sequence.indexBy<A, B>(key:value:)(v35, v36, v46, v45);
  swift_bridgeObjectRelease();
  swift_release(v35);
  swift_release(v36);
  v38 = sub_1003B07B8(v37);
  swift_bridgeObjectRelease();
  v39 = swift_isUniquelyReferenced_nonNull_native(v34);
  v48 = v34;
  sub_10033D520(v38, (uint64_t)sub_10033D4E4, 0, v39, (uint64_t)&v48);
  v40 = v48;
  v41 = swift_bridgeObjectRelease();
  v42 = type metadata accessor for REMStoreObjectsContainer(0, v41);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  REMStoreObjectsContainer.init(store:storages:)(v44, v40);
}

void sub_1004A87E4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v6)
  {
    sub_1004A8330(a1, a2);
    if (!v3)
    {
      if (v6 < 1)
      {
        __break(1u);
      }
      else
      {
        v17 = v7;
        swift_bridgeObjectRetain(a1);
        for (i = 0; i != v6; ++i)
        {
          if ((a1 & 0xC000000000000001) != 0)
            v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
          else
            v10 = *(id *)(a1 + 8 * i + 32);
          v11 = v10;
          v12 = objc_msgSend(v10, "remObjectID");

          if (v12)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
            v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
            v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v15 >= v14 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1);
            v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
            specialized Array._endMutation()(v9);
          }
        }
        swift_bridgeObjectRelease();
        swift_retain();
        sub_1004A7194((uint64_t)_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease();
        swift_release_n(v17);
      }
    }
  }
}

char *sub_1004A89B0(char *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  void *v8;
  id v9;
  char *v10;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *(char **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = &v10[(v6 + 16) & ~(unint64_t)v6];
    swift_retain(v10);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v9 = v8;
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v12 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v13 = v12;
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v14 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v15 = v14;
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v16 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v17 = v16;
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v18 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v18);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v19 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v19);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v20 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v21 = v20;
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        v22 = type metadata accessor for UUID(0);
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      case 8u:
        v23 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v24 = v23;
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      case 9u:
        v25 = *(void **)a2;
        v26 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = v25;
        *((_QWORD *)a1 + 1) = v26;
        v27 = v25;
        swift_bridgeObjectRetain(v26);
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 0xAu:
        v28 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v28);
        swift_storeEnumTagMultiPayload(a1, a3, 10);
        break;
      case 0xBu:
        v29 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v29);
        swift_storeEnumTagMultiPayload(a1, a3, 11);
        break;
      case 0xCu:
        v30 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v30;
        v31 = (void *)*((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 2) = v31;
        swift_bridgeObjectRetain(v30);
        v32 = v31;
        swift_storeEnumTagMultiPayload(a1, a3, 12);
        break;
      case 0xDu:
        v33 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v34 = v33;
        swift_storeEnumTagMultiPayload(a1, a3, 13);
        break;
      case 0xEu:
        v35 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v36 = v35;
        swift_storeEnumTagMultiPayload(a1, a3, 14);
        break;
      case 0xFu:
        v37 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v38 = v37;
        swift_storeEnumTagMultiPayload(a1, a3, 15);
        break;
      case 0x10u:
        v39 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v39);
        swift_storeEnumTagMultiPayload(a1, a3, 16);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

_BYTE *sub_1004A8C9C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  void *v6;
  id v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, _s10PredicatesOMa_1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v7 = v6;
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_21;
      case 1u:
        v11 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v12 = v11;
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_21;
      case 2u:
        v13 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v14 = v13;
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_21;
      case 3u:
        v15 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v16 = v15;
        v8 = a1;
        v9 = a3;
        v10 = 3;
        goto LABEL_21;
      case 4u:
        v17 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v17);
        v8 = a1;
        v9 = a3;
        v10 = 4;
        goto LABEL_21;
      case 5u:
        v18 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v18);
        v8 = a1;
        v9 = a3;
        v10 = 5;
        goto LABEL_21;
      case 6u:
        v19 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v20 = v19;
        v8 = a1;
        v9 = a3;
        v10 = 6;
        goto LABEL_21;
      case 7u:
        v21 = type metadata accessor for UUID(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
        v8 = a1;
        v9 = a3;
        v10 = 7;
        goto LABEL_21;
      case 8u:
        v22 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v23 = v22;
        v8 = a1;
        v9 = a3;
        v10 = 8;
        goto LABEL_21;
      case 9u:
        v24 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v25 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v25;
        v26 = v24;
        swift_bridgeObjectRetain(v25);
        v8 = a1;
        v9 = a3;
        v10 = 9;
        goto LABEL_21;
      case 0xAu:
        v27 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v27);
        v8 = a1;
        v9 = a3;
        v10 = 10;
        goto LABEL_21;
      case 0xBu:
        v28 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v28);
        v8 = a1;
        v9 = a3;
        v10 = 11;
        goto LABEL_21;
      case 0xCu:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v29 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v29;
        v30 = (void *)*((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 2) = v30;
        swift_bridgeObjectRetain(v29);
        v31 = v30;
        v8 = a1;
        v9 = a3;
        v10 = 12;
        goto LABEL_21;
      case 0xDu:
        v32 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v33 = v32;
        v8 = a1;
        v9 = a3;
        v10 = 13;
        goto LABEL_21;
      case 0xEu:
        v34 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v35 = v34;
        v8 = a1;
        v9 = a3;
        v10 = 14;
        goto LABEL_21;
      case 0xFu:
        v36 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v37 = v36;
        v8 = a1;
        v9 = a3;
        v10 = 15;
        goto LABEL_21;
      case 0x10u:
        v38 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v38);
        v8 = a1;
        v9 = a3;
        v10 = 16;
LABEL_21:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_1004A8F48(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 7)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 7);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1004A8FD4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10001C744((uint64_t)a1, _s10PredicatesOMa_1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 7)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 7);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1004A9078(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[17];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = "\t";
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[9] = &unk_1006BEAC8;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[12] = &unk_1006BEAE0;
    v4[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 17, v4);
    return 0;
  }
  return result;
}

uint64_t sub_1004A9134()
{
  void **v0;
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;

  v1 = *v0;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "unsafeUntilSystemReady_displayedHostnameOfICloudACAccountWithAccountIdentifier:", v2);

  if (!v3)
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

uint64_t sub_1004A91B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084C6C0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084C6C0);
  if (qword_100837618 != -1)
    swift_once(&qword_100837618, sub_1004A1800);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872028);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004A9240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  int v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD v72[3];
  char v73[8];
  _QWORD v74[3];
  char v75[8];
  _QWORD *v76;
  uint64_t aBlock[5];
  _QWORD *v78;

  v65 = a3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v11;
  v69 = v12;
  v66 = v16;
  v67 = a4;
  if (v16)
  {
    v64 = v9;
    v19 = qword_1008376E0;
    v20 = v16;
    if (v19 != -1)
      swift_once(&qword_1008376E0, sub_1004A91B0);
    v21 = sub_10001AAA8(v14, (uint64_t)qword_10084C6C0);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v21, v14);
    swift_errorRetain(a1);
    v22 = v20;
    swift_errorRetain(a1);
    v23 = v22;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      v61 = v25;
      v62 = v24;
      v63 = v8;
      v59 = a5;
      v26 = swift_slowAlloc(22, -1);
      v60 = swift_slowAlloc(64, -1);
      aBlock[0] = v60;
      *(_DWORD *)v26 = 136315394;
      v27 = objc_msgSend(v23, "transactionId");
      if (!v27)
      {
        swift_errorRelease(a1);

        __break(1u);
        return;
      }
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

      v76 = (_QWORD *)sub_10001A820(v29, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, aBlock);

      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v26 + 12) = 2080;
      if (a1)
      {
        swift_getErrorValue(a1, v73, v72);
        v32 = Error.localizedDescription.getter(v72[1], v72[2]);
        v34 = v33;
      }
      else
      {
        v32 = 7104878;
        v34 = 0xE300000000000000;
      }
      a5 = v59;
      v76 = (_QWORD *)sub_10001A820(v32, v34, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, aBlock);
      swift_bridgeObjectRelease(v34);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v44 = v62;
      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v61, "DADREMShareResponseDelegate has completed with DATransaction {transactionId: %s, error: %s}", (uint8_t *)v26, 0x16u);
      v45 = v60;
      swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      v8 = v63;
    }
    else
    {

      swift_errorRelease(a1);
      swift_errorRelease(a1);

      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
    v9 = v64;
  }
  else
  {
    if (qword_1008376E0 != -1)
      swift_once(&qword_1008376E0, sub_1004A91B0);
    sub_10001AAA8(v14, (uint64_t)qword_10084C6C0);
    swift_errorRetain(a1);
    v35 = swift_errorRetain(a1);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = v9;
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      aBlock[0] = v40;
      *(_DWORD *)v39 = 136315138;
      if (a1)
      {
        swift_getErrorValue(a1, v75, v74);
        v41 = Error.localizedDescription.getter(v74[1], v74[2]);
        v43 = v42;
      }
      else
      {
        v41 = 7104878;
        v43 = 0xE300000000000000;
      }
      v76 = (_QWORD *)sub_10001A820(v41, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, aBlock);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "DADREMShareResponseDelegate has completed, but DATransaction was nil?! {error: %s}", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v9 = v38;
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  v46 = v70;
  v47 = v67;
  if (qword_100836F10 != -1)
    swift_once(&qword_100836F10, sub_1001BA718);
  v48 = (_QWORD *)swift_allocObject(&unk_1007F61E0, 48, 7);
  v48[2] = v65;
  v48[3] = v47;
  v49 = v66;
  v48[4] = a1;
  v48[5] = v49;
  aBlock[4] = (uint64_t)sub_1004AA788;
  v78 = v48;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000094C8;
  aBlock[3] = (uint64_t)&unk_1007F61F8;
  v50 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  v51 = v49;
  v52 = swift_retain();
  v53 = v68;
  static DispatchQoS.unspecified.getter(v52);
  v76 = _swiftEmptyArrayStorage;
  v54 = sub_1000D3124();
  v55 = sub_10001A630((uint64_t *)&unk_100838000);
  v56 = sub_1000D316C();
  v57 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v55, v56, v8, v54);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v53, v57, v50);
  _Block_release(v50);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v57, v8);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v53, v46);
  swift_release(v78);
  objc_msgSend(a5, "setRemXPCCompletion:", 0);
}

void sub_1004A992C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  _QWORD v40[3];
  _BYTE v41[8];
  _QWORD v42[3];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(a3);
  if (a4)
  {
    v11 = qword_1008376E0;
    v12 = a4;
    if (v11 != -1)
      swift_once(&qword_1008376E0, sub_1004A91B0);
    v13 = sub_10001AAA8(v7, (uint64_t)qword_10084C6C0);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v13, v7);
    swift_errorRetain(a3);
    v14 = v12;
    swift_errorRetain(a3);
    v15 = v14;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      LODWORD(v39) = v17;
      v37 = v8;
      v18 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(64, -1);
      v45 = v38;
      *(_DWORD *)v18 = 136315394;
      v19 = objc_msgSend(v15, "transactionId");
      if (v19)
      {
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v23 = v22;

        v44 = sub_10001A820(v21, v23, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);

        swift_bridgeObjectRelease(v23);
        *(_WORD *)(v18 + 12) = 2080;
        if (a3)
        {
          swift_getErrorValue(a3, v41, v40);
          v24 = Error.localizedDescription.getter(v40[1], v40[2]);
          v26 = v25;
        }
        else
        {
          v24 = 7104878;
          v26 = 0xE300000000000000;
        }
        v34 = v37;
        v44 = sub_10001A820(v24, v26, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
        swift_bridgeObjectRelease(v26);
        swift_errorRelease(a3);
        swift_errorRelease(a3);
        _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v39, "DADREMShareResponseDelegate has done calling XPC completion with DATransaction {transactionId: %s, error: %s}", (uint8_t *)v18, 0x16u);
        v35 = v38;
        swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v18, -1, -1);

        (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v7);
      }
      else
      {
        swift_errorRelease(a3);

        __break(1u);
      }
    }
    else
    {

      swift_errorRelease(a3);
      swift_errorRelease(a3);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  else
  {
    if (qword_1008376E0 != -1)
      swift_once(&qword_1008376E0, sub_1004A91B0);
    sub_10001AAA8(v7, (uint64_t)qword_10084C6C0);
    swift_errorRetain(a3);
    v27 = swift_errorRetain(a3);
    v39 = Logger.logObject.getter(v27);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v45 = v30;
      *(_DWORD *)v29 = 136315138;
      if (a3)
      {
        swift_getErrorValue(a3, v43, v42);
        v31 = Error.localizedDescription.getter(v42[1], v42[2]);
        v33 = v32;
      }
      else
      {
        v31 = 7104878;
        v33 = 0xE300000000000000;
      }
      v44 = sub_10001A820(v31, v33, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v39, v28, "DADREMShareResponseDelegate has done calling XPC completion, but DATransaction was nil?! {error: %s}", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
  }
}

uint64_t type metadata accessor for RDDACalDAVShareRequestHandler()
{
  return objc_opt_self(_TtC7remindd29RDDACalDAVShareRequestHandler);
}

uint64_t sub_1004A9E04(void (*a1)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_1008379F0 != -1)
    swift_once(&qword_1008379F0, sub_100673F84);
  if ((byte_100872349 & 1) == 0)
  {
    if (qword_1008376E0 != -1)
      swift_once(&qword_1008376E0, sub_1004A91B0);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001AAA8(v9, (uint64_t)qword_10084C6C0);
    v5 = Logger.logObject.getter(v10);
    v6 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v5, v6))
      goto LABEL_18;
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "RDDACalDAVShareRequestHandler: Attempted to call DADREMShareResponseDelegate when DataAccess is disabled, aborting...";
    goto LABEL_17;
  }
  if (byte_100872348 == 1 && gDADOperationQueue != 0)
  {
    v11 = objc_msgSend((id)objc_opt_self(DADAgentManager), "sharedManager");
    v12 = objc_msgSend(v11, "rem_storeProvider");
    swift_unknownObjectRelease(v12);
    if (v12)
    {
      v13 = objc_msgSend(v11, "activeAgents");
      if (v13)
      {
        v14 = v13;
        v15 = sub_1004AA794();
        v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

        if ((unint64_t)v16 >> 62)
        {
          v27 = v16 < 0 ? v16 : v16 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v16);
          v17 = _CocoaArrayWrapper.endIndex.getter(v27);
          swift_bridgeObjectRelease(v16);
        }
        else
        {
          v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease(v16);
        if (v17)
        {

          return 1;
        }
      }
      if (qword_1008376E0 != -1)
        swift_once(&qword_1008376E0, sub_1004A91B0);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_10001AAA8(v19, (uint64_t)qword_10084C6C0);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v21, v22))
        goto LABEL_34;
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      v24 = "RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager has no active"
            " accounts, aborting...";
    }
    else
    {
      if (qword_1008376E0 != -1)
        swift_once(&qword_1008376E0, sub_1004A91B0);
      v25 = type metadata accessor for Logger(0);
      v26 = sub_10001AAA8(v25, (uint64_t)qword_10084C6C0);
      v21 = Logger.logObject.getter(v26);
      v22 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v21, v22))
        goto LABEL_34;
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      v24 = "RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager is not yet se"
            "t up properly, aborting...";
    }
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v24, v23, 2u);
    swift_slowDealloc(v23, -1, -1);
LABEL_34:

    a1(0);
    return 0;
  }
  if (qword_1008376E0 != -1)
    swift_once(&qword_1008376E0, sub_1004A91B0);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001AAA8(v3, (uint64_t)qword_10084C6C0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DataAccess is not yet up and run"
         "ning, aborting...";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
LABEL_18:

  a1(0);
  return 0;
}

void sub_1004AA1E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(_QWORD), uint64_t a7)
{
  void (*v8)(_QWORD);
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  NSString v27;
  NSString v28;
  id v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  id v41;
  id v42;
  void **v43;
  os_log_type_t v44;
  uint64_t v45;
  void (*v46)(_QWORD);
  uint64_t v47;
  id v48;
  uint64_t v49;
  void **aBlock;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  _QWORD *v55;

  v8 = a6;
  if ((sub_1004A9E04(a6) & 1) != 0)
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)DATransaction), "init");
    if (qword_1008376E0 != -1)
      swift_once(&qword_1008376E0, sub_1004A91B0);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_10084C6C0);
    v48 = v14;
    v16 = v14;
    swift_bridgeObjectRetain_n(a5, 2);
    swift_bridgeObjectRetain_n(a3, 2);
    v17 = v16;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v44 = v19;
      v45 = a2;
      v46 = v8;
      v20 = 1819047278;
      v21 = swift_slowAlloc(32, -1);
      v43 = (void **)swift_slowAlloc(96, -1);
      aBlock = v43;
      *(_DWORD *)v21 = 136315650;
      v47 = a1;
      if (v17 && (v22 = objc_msgSend(v17, "transactionId")) != 0)
      {
        v23 = v22;
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

      }
      else
      {
        v25 = 0xE400000000000000;
      }
      v49 = sub_10001A820(v20, v25, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &aBlock);

      swift_bridgeObjectRelease(v25);
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain(a5);
      v49 = sub_10001A820(a4, a5, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &aBlock);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v21 + 22) = 2080;
      swift_bridgeObjectRetain(a3);
      v49 = sub_10001A820(v45, a3, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &aBlock);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v18, v44, "RDDACalDAVShareRequestHandler: Creating a DADREMShareResponseDelegate to call onto respondToShareRequest() {DATransaction.id: %s, accountID: %s, calendarURL: %s}", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy(v43, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      v8 = v46;
      a1 = v47;
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease_n(a5, 2);

    }
    v26 = objc_allocWithZone((Class)DADREMShareResponseDelegate);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a3);
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a5);
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v26, "initWithAccountID:calendarID:", v27, v28, swift_bridgeObjectRelease(a3).n128_f64[0]);

    v30 = (_QWORD *)swift_allocObject(&unk_1007F6140, 48, 7);
    v30[2] = v48;
    v30[3] = v8;
    v30[4] = a7;
    v30[5] = v29;
    v54 = sub_1004AA714;
    v55 = v30;
    aBlock = _NSConcreteStackBlock;
    v51 = 1107296256;
    v52 = sub_1000E18E4;
    v53 = &unk_1007F6158;
    v31 = _Block_copy(&aBlock);
    v32 = v55;
    v33 = v29;
    v34 = v17;
    v35 = v33;
    swift_retain();
    swift_release(v32);
    objc_msgSend(v35, "setRemXPCCompletion:", v31);
    _Block_release(v31);

    v36 = objc_msgSend((id)objc_opt_self(DADMain), "sharedMain");
    if (v36)
    {
      v37 = v36;
      v38 = swift_allocObject(&unk_1007F6190, 32, 7);
      *(_QWORD *)(v38 + 16) = v35;
      *(_QWORD *)(v38 + 24) = a1;
      v54 = sub_1004AA744;
      v55 = (_QWORD *)v38;
      aBlock = _NSConcreteStackBlock;
      v51 = 1107296256;
      v52 = sub_1000094C8;
      v53 = &unk_1007F61A8;
      v39 = _Block_copy(&aBlock);
      v40 = v55;
      v41 = v35;
      v42 = v37;
      swift_release(v40);
      objc_msgSend(v42, "addToOperationsQueueDisabledCheckAndGoBlock:wrappedBlock:", 0, v39);

      _Block_release(v39);
      v34 = v42;
    }
    else
    {

    }
  }
}

uint64_t sub_1004AA6E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1004AA714(uint64_t a1)
{
  uint64_t v1;

  sub_1004A9240(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1004AA720()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1004AA744()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "respondToShareRequestWithResponse:", *(_QWORD *)(v0 + 24));
}

uint64_t sub_1004AA754()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_1004AA788()
{
  uint64_t v0;

  sub_1004A992C(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

unint64_t sub_1004AA794()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10084C770;
  if (!qword_10084C770)
  {
    v1 = objc_opt_self(DAAgent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10084C770);
  }
  return result;
}

uint64_t sub_1004AA7E0(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084C7B0, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.GroupInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.GroupInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004AA81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084C778);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084C778);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004AA8AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;

  v66 = a3;
  v62 = a1;
  v60 = a6;
  v61 = type metadata accessor for REMRemindersListDataView.ListsModel(0);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v58 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v57 = (char *)&v50 - v11;
  v56 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v12 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v50 - v21;
  v64 = a5;
  v23 = (void *)REMRemindersListDataView.GroupInvocation.Parameters.group.getter(v20);
  v67 = a2;
  v63 = a4;
  v24 = (uint64_t)v68;
  sub_1004ABE50(a2, a4, v23);
  v26 = v25;

  if (!v24)
  {
    v51 = v14;
    v52 = v12;
    v53 = v18;
    v54 = v15;
    v68 = v22;
    v55 = v16;
    v27 = v63;
    v28 = v67;
    v29 = v65;
    v30 = sub_1004AABCC(v62, v67, v66, v63, v64);
    v32 = v31;
    v62 = v30;
    v33 = objc_msgSend(v29, "fetchResultTokenToDiffAgainst");
    v34 = (uint64_t)v68;
    sub_100493C24(v33, v28, (uint64_t)v68);
    v66 = 0;

    v35 = (uint64_t)v51;
    REMRemindersListDataView.GroupInvocation.Parameters.remindersPrefetch.getter(v36);
    v37 = v62;
    swift_bridgeObjectRetain(v62);
    v38 = sub_10049D940(v35, v34, v28, v27, 0, v37);
    v40 = v39;
    v41 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v52 + 8))(v35, v56, v41);
    v42 = v57;
    REMRemindersListDataView.ListsModel.init(groups:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)(v37, v32, 0, 2, v38, v40);
    v43 = v59;
    v44 = v34;
    v45 = v58;
    v46 = v61;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v58, v42, v61);
    v47 = v54;
    v48 = v55;
    v49 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v53, v44, v54);
    REMRemindersListDataView.GroupInvocation.Result.init(model:diff:group:)(v45, v49, v26);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v46);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v44, v47);
  }
}

uint64_t sub_1004AABCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  char v15;
  char v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v40;
  _QWORD *v41;
  __n128 v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  __n128 v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;

  v63 = a4;
  v57 = a1;
  v58 = a3;
  v59 = _s10PredicatesOMa_3(0);
  __chkstk_darwin(v59);
  v60 = (uint64_t *)((char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = _s10PredicatesOMa_1(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)REMRemindersListDataView.GroupInvocation.Parameters.group.getter(v10);
  v14 = objc_msgSend(v13, "objectID");

  v15 = REMRemindersListDataView.GroupInvocation.Parameters.includePinnedSublists.getter();
  *(_QWORD *)v12 = v14;
  v16 = v15 & 1;
  v12[8] = v15 & 1;
  swift_storeEnumTagMultiPayload(v12, v9, 3);
  v17 = qword_1008376D8;
  v18 = v14;
  if (v17 != -1)
    swift_once(&qword_1008376D8, sub_1004A7104);
  v62 = a5;
  v19 = qword_1008721E0;
  sub_10000A3AC();
  v21 = (void *)v20;
  v22 = (void *)sub_100358F8C(0, v19, 0, v20);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v22, "setSortDescriptors:", isa);

  v24 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v25 = NSManagedObjectContext.fetch<A>(_:)(v22, v24);
  if (v5)
  {

    sub_10001C744((uint64_t)v12, _s10PredicatesOMa_1);
  }
  else
  {
    v56 = a2;
    v65 = v25;
    v26 = sub_10001A630(&qword_10083FF50);
    v27 = sub_1000EC4D8();
    v28 = Sequence.elements<A>(ofType:)(v24, v26, v24, v27);
    swift_bridgeObjectRelease();

    sub_10001C744((uint64_t)v12, _s10PredicatesOMa_1);
    v29 = v63;
    sub_1004A87E4(v28, v63);
    v31 = v30;
    swift_bridgeObjectRelease();
    v65 = 0;
    __chkstk_darwin(v32);
    v33 = v62;
    v34 = v56;
    *(&v55 - 4) = (uint64_t)v61;
    *(&v55 - 3) = v34;
    *(&v55 - 2) = v33;
    *(&v55 - 1) = (uint64_t)&v65;
    v35 = sub_1002002B8((void (*)(id *, uint64_t *))sub_1004AC190, (uint64_t)(&v55 - 6), v31);
    v36 = v59;
    v37 = (uint64_t)v60;
    *v60 = v18;
    *(_BYTE *)(v37 + 8) = v16;
    swift_storeEnumTagMultiPayload(v37, v36, 4);
    v38 = v18;
    v40 = sub_10058C44C(v37, v34, 0);
    sub_10001C744(v37, _s10PredicatesOMa_3);
    v41 = sub_10058CE80(v40, v29);
    v42 = swift_bridgeObjectRelease();
    v43 = type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation(0, v42);
    v44 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v43)), "init");
    __chkstk_darwin(v44);
    v61 = v45;
    v46 = v57;
    *(&v55 - 8) = (uint64_t)v45;
    *(&v55 - 7) = v46;
    v47 = v58;
    *(&v55 - 6) = v34;
    *(&v55 - 5) = v47;
    *(&v55 - 4) = (uint64_t)v29;
    *(&v55 - 3) = v33;
    *(&v55 - 2) = (uint64_t)&v65;
    v48 = (uint64_t)v41;
    v49 = sub_1002002B8((void (*)(id *, uint64_t *))sub_1004AC1B0, (uint64_t)(&v55 - 10), (uint64_t)v41);
    v64 = (_QWORD *)v35;
    sub_1001E1FD0(v49);
    v50 = (void *)v34;
    v51 = v64;
    v53 = (void *)REMRemindersListDataView.GroupInvocation.Parameters.group.getter(v52);
    v54 = objc_msgSend(v53, "accountID");

    v24 = sub_1004AC4E0(v51, v31, v48, (uint64_t)v54, v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  return v24;
}

void sub_1004AB100(id *a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  v50 = a5;
  v47 = a4;
  v48 = a6;
  v49 = _s10PredicatesOMa(0);
  __chkstk_darwin(v49);
  v46 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)&v15 = __chkstk_darwin(v13).n128_u64[0];
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v19 = objc_msgSend(*a1, "objectID", v15);
  REMRemindersListDataView.GroupInvocation.Parameters.sortingStyle.getter();
  v20 = a2;
  v21 = v51;
  v22 = sub_1004ACFA8(v19, a2, a3, (uint64_t)v17);
  v51 = v21;
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v23 = v51;
LABEL_3:

    *v50 = v23;
    return;
  }
  v24 = v49;
  v43 = v20;
  v44 = v22;
  v45 = v12;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);

  v19 = objc_msgSend(v18, "objectID");
  v25 = v18;
  if ((REMRemindersListDataView.GroupInvocation.Parameters.countCompleted.getter() & 1) != 0)
  {
    v26 = (uint64_t)v46;
    *v46 = v19;
    swift_storeEnumTagMultiPayload(v26, v24, 6);
    v27 = v19;
    sub_10000D2C0();
    v19 = v28;
    sub_10001C744(v26, _s10PredicatesOMa);
    v29 = (uint64_t)v45;
    v30 = v51;
    sub_1004934D8(v43, (uint64_t)v19);
    v23 = v30;
    if (v30)
    {

      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    v31 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v29, 0, 1, v31);

  }
  else
  {
    v31 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    v29 = (uint64_t)v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v45, 1, 1, v31);
  }

  type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v29, 1, v31) == 1)
  {
    sub_10000882C(v29, &qword_100839AA0);
    v33 = 0;
  }
  else
  {
    v33 = REMRemindersListDataView.CountByCompleted.completed.getter();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v29, v31);
  }
  if (__OFADD__(*v47, v33))
  {
    __break(1u);
  }
  else
  {
    *v47 += v33;
    v34 = objc_msgSend(v25, "objectID");
    v35 = REMObjectID.codable.getter(v34);

    v36 = objc_msgSend(v25, "displayName");
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    v40 = objc_msgSend(v25, "color");
    if (v40)
    {
      v41 = v40;
      v42 = REMColor.codable.getter();

    }
    else
    {
      v42 = 0;
    }
    REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)(v35, v37, v39, v42, v44, 0);
  }
}

uint64_t sub_1004AB4AC@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, _QWORD *a7@<X7>, uint64_t a8@<X8>, __n128 a9@<Q0>, _QWORD *a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Subtasks;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;

  v68 = a7;
  v79 = a2;
  v80 = a6;
  v77 = a4;
  v78 = a5;
  v76 = a3;
  v66 = a8;
  v71 = type metadata accessor for REMRemindersListDataView.FlatModel(0, a9);
  v69 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v65 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v67 = (char *)&v63 - v13;
  v14 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v14);
  v70 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v74 = *(_QWORD *)(Subtasks - 8);
  v75 = Subtasks;
  __chkstk_darwin(Subtasks);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Parameters(0, v26);
  v72 = *(_QWORD *)(v29 - 8);
  v73 = v29;
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v63 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for REMRemindersListDataView.CustomSmartListInvocation.Result(0, v30);
  v33 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v35 = (char *)&v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *a1;
  v37 = REMRemindersListDataView.GroupInvocation.Parameters.sortingStyle.getter();
  v38 = REMRemindersListDataView.GroupInvocation.Parameters.showCompleted.getter(v37);
  REMRemindersListDataView.GroupInvocation.Parameters.remindersPrefetch.getter(v38);
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v18, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), v75);
  REMRemindersListDataView.CustomSmartListInvocation.Parameters.init(smartList:sortingStyle:showCompleted:countCompleted:remindersPrefetch:fetchSubtasks:shouldFetchManualOrderingID:)(v36, v28, v24, 1, v21, v18, 0);
  v39 = v81;
  sub_1005095D0(v77, v78, v80, (uint64_t)v35);
  if (v39)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v32, v73);
    *a10 = v39;
  }
  else
  {
    v81 = v33;
    v41 = v68;
    v42 = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v32, v73);
    v43 = v67;
    v80 = v35;
    v44 = REMRemindersListDataView.CustomSmartListInvocation.Result.model.getter(v42);
    v45 = (uint64_t)v70;
    REMRemindersListDataView.FlatModel.remindersCount.getter(v44);
    v46 = *(void (**)(char *, uint64_t))(v69 + 8);
    v46(v43, v71);
    v47 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v45, 1, v47) == 1)
    {
      result = sub_10000882C(v45, &qword_100839AA0);
      v49 = 0;
    }
    else
    {
      v49 = REMRemindersListDataView.CountByCompleted.completed.getter();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v45, v47);
    }
    if (__OFADD__(*v41, v49))
    {
      __break(1u);
    }
    else
    {
      *v41 += v49;
      v50 = objc_msgSend(v36, "objectID");
      v79 = REMObjectID.codable.getter(v50);

      v51 = objc_msgSend(v36, "name");
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      v55 = objc_msgSend(v36, "color");
      if (v55)
      {
        v56 = v55;
        v57 = v46;
        v58 = REMColor.codable.getter();

      }
      else
      {
        v57 = v46;
        v58 = 0;
      }
      v59 = v65;
      v60 = v80;
      v61 = REMRemindersListDataView.CustomSmartListInvocation.Result.model.getter(v55);
      v62 = REMRemindersListDataView.FlatModel.reminders.getter(v61);
      v57(v59, v71);
      REMRemindersListDataView.ListsModel.Sublist.init(listID:listName:listColor:reminders:isCustomSmartList:)(v79, v52, v54, v58, v62, 1);
      return (*(uint64_t (**)(void *, uint64_t))(v81 + 8))(v60, v64);
    }
  }
  return result;
}

uint64_t _s19PolymorphicListItemCMa_0()
{
  return objc_opt_self(_TtCE7reminddCO19ReminderKitInternal24REMRemindersListDataView15GroupInvocationP33_5EA99FF5FE7301BEB158BAF5BFFE0E3319PolymorphicListItem);
}

ValueMetadata *_s19PolymorphicListItemC5ModelOMa_0()
{
  return &_s19PolymorphicListItemC5ModelON_0;
}

void sub_1004AB9B8(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;
  Swift::String v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;

  v7 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630(&qword_10083F588);
  __chkstk_darwin(v11);
  v15 = (void **)((char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v62) = a2;
  v58[1] = v3;
  v59 = v16;
  v17 = (char *)v15 + *(int *)(v12 + 48);
  v58[0] = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v58[0];
  v64 = *(_QWORD *)(v13 + 72);
  v61 = a1;
  swift_bridgeObjectRetain(a1);
  sub_1004ACF60(v18, (uint64_t)v15);
  v69 = *v15;
  v19 = (uint64_t)v69;
  v60 = v8;
  v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v63 = v17;
  v65 = v7;
  v20(v10, v17, v7);
  v21 = (_QWORD *)*a3;
  v23 = sub_1002C6730(v19);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_23;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v62 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1002D68F0();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v34 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    *(_QWORD *)(v34[6] + 8 * v23) = v19;
    v35 = v34[7];
    v62 = *(_QWORD *)(v60 + 72);
    v36 = v65;
    v20((char *)(v35 + v62 * v23), v10, v65);
    v37 = v34[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v34[2] = v39;
    v40 = v59 - 1;
    if (v59 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(v61, 2);
      return;
    }
    v41 = v61 + v64 + v58[0];
    while (1)
    {
      sub_1004ACF60(v41, (uint64_t)v15);
      v69 = *v15;
      v42 = (uint64_t)v69;
      v20(v10, v63, v36);
      v43 = (_QWORD *)*a3;
      v44 = sub_1002C6730(v42);
      v46 = v43[2];
      v47 = (v45 & 1) == 0;
      v38 = __OFADD__(v46, v47);
      v48 = v46 + v47;
      if (v38)
        break;
      v49 = v45;
      if (v43[3] < v48)
      {
        sub_1002CD584(v48, 1);
        v44 = sub_1002C6730(v42);
        if ((v49 & 1) != (v50 & 1))
          goto LABEL_25;
      }
      if ((v49 & 1) != 0)
        goto LABEL_10;
      v51 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      *(_QWORD *)(v51[6] + 8 * v44) = v42;
      v36 = v65;
      v20((char *)(v51[7] + v62 * v44), v10, v65);
      v52 = v51[2];
      v38 = __OFADD__(v52, 1);
      v53 = v52 + 1;
      if (v38)
        goto LABEL_24;
      v51[2] = v53;
      v41 += v64;
      if (!--v40)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1002CD584(v26, v62 & 1);
  v28 = sub_1002C6730(v19);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v30 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v30);
    v68 = v30;
    swift_errorRetain(v30);
    v31 = sub_10001A630((uint64_t *)&unk_10083AA20);
    if ((swift_dynamicCast(v31, &v68, v31, &type metadata for _MergeError, 0) & 1) == 0)
    {
      v32 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v60 + 8))(v10, v65, v32);
      v33 = v69;
      swift_bridgeObjectRelease();

      swift_errorRelease(v68);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  v54 = type metadata accessor for REMObjectID_Codable(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v54);
  __break(1u);
LABEL_26:
  v66 = 0;
  v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v55._object = (void *)0x8000000100701A20;
  v55._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v55);
  v56 = type metadata accessor for REMObjectID_Codable(0);
  _print_unlocked<A, B>(_:_:)(&v69, &v66, v56, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v57._countAndFlagsBits = 39;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v66, v67, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_1004ABE50(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1006A7330;
  v11 = objc_msgSend(a3, "objectID");
  *(_QWORD *)(v10 + 32) = v11;
  v28 = v10;
  specialized Array._endMutation()(v11);
  *v8 = v28;
  swift_storeEnumTagMultiPayload(v8, v6, 4);
  if (qword_1008376D8 != -1)
    swift_once(&qword_1008376D8, sub_1004A7104);
  v12 = qword_1008721E0;
  sub_10000A3AC();
  v14 = (void *)v13;
  v15 = (void *)sub_100358F8C(0, v12, 0, v13);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v15, "setSortDescriptors:", isa);

  v17 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v18 = NSManagedObjectContext.fetch<A>(_:)(v15, v17);
  if (v3)
  {

    sub_10001C744((uint64_t)v8, _s10PredicatesOMa_1);
    return;
  }
  v28 = v18;
  v19 = sub_10001A630(&qword_10083FF50);
  v20 = sub_1000EC4D8();
  v21 = Sequence.elements<A>(ofType:)(v17, v19, v17, v20);
  swift_bridgeObjectRelease();

  sub_1004A87E4(v21, a2);
  v23 = v22;
  swift_bridgeObjectRelease();
  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v25 = v23;
    else
      v25 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v26 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease();
    if (v26)
      goto LABEL_9;
LABEL_17:
    swift_bridgeObjectRelease();
    sub_10001C744((uint64_t)v8, _s10PredicatesOMa_1);
    a3;
    return;
  }
  if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_17;
LABEL_9:
  if ((v23 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v24 = *(id *)(v23 + 32);
LABEL_12:
    swift_bridgeObjectRelease();
    sub_10001C744((uint64_t)v8, _s10PredicatesOMa_1);
    return;
  }
  __break(1u);
}

void sub_1004AC190(id *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_1004AB100(a1, *(_QWORD *)(v3 + 24), *(_QWORD **)(v3 + 32), *(_QWORD **)(v3 + 40), a2, a3);
}

uint64_t sub_1004AC1B0@<X0>(id *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;

  return sub_1004AB4AC(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(void **)(v4 + 32), *(_QWORD *)(v4 + 40), *(void **)(v4 + 48), *(_QWORD **)(v4 + 64), a3, a4, a2);
}

_QWORD *sub_1004AC1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  _QWORD v33[2];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;

  v3 = v2;
  v39 = a2;
  v5 = sub_10001A630(&qword_10084C5D0);
  __chkstk_darwin(v5);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v38 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v34 = (char *)v33 - v12;
  if ((unint64_t)a1 >> 62)
    goto LABEL_23;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter(v32))
  {
    v33[1] = v3;
    v37 = a1 & 0xC000000000000001;
    v40 = _swiftEmptyArrayStorage;
    v14 = 4;
    v35 = v13;
    v36 = a1;
    while (1)
    {
      v3 = v14 - 4;
      v15 = v37 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1) : *(id *)(a1 + 8 * v14);
      v16 = v15;
      v17 = v14 - 3;
      if (__OFADD__(v3, 1))
        break;
      v18 = REMObjectID.codable.getter(v15);
      v19 = (void *)v18;
      v20 = v39;
      if (*(_QWORD *)(v39 + 16) && (v21 = sub_1002C6730(v18), (v22 & 1) != 0))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, *(_QWORD *)(v20 + 56) + *(_QWORD *)(v9 + 72) * v21, v8);
        v23 = 0;
      }
      else
      {
        v23 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v23, 1, v8);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_10000882C((uint64_t)v7, &qword_10084C5D0);
      }
      else
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v25 = v34;
        v24(v34, v7, v8);
        v24(v38, v25, v8);
        swift_isUniquelyReferenced_nonNull_native(v40);
        if ((v26 & 1) != 0)
          v27 = (unint64_t)v40;
        else
          v27 = sub_1002C84F0(0, v40[2] + 1, 1, (unint64_t)v40);
        v29 = *(_QWORD *)(v27 + 16);
        v28 = *(_QWORD *)(v27 + 24);
        if (v29 >= v28 >> 1)
          v27 = sub_1002C84F0(v28 > 1, v29 + 1, 1, v27);
        *(_QWORD *)(v27 + 16) = v29 + 1;
        v30 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        v40 = (_QWORD *)v27;
        v24((char *)(v27 + v30 + *(_QWORD *)(v9 + 72) * v29), v38, v8);
      }
      a1 = v36;
      ++v14;
      if (v17 == v35)
      {
        swift_bridgeObjectRelease();
        return v40;
      }
    }
    __break(1u);
LABEL_23:
    if (a1 < 0)
      v32 = a1;
    else
      v32 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1004AC4E0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  __n128 v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint8_t *v54;
  uint64_t v55;
  id v56;
  id v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  int64_t v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t result;
  uint64_t v95;
  void *v96;
  _QWORD *v97;
  char *v98;
  id v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD v108[6];
  _QWORD v109[3];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v6 = v5;
  v12 = sub_10001A630(&qword_10083F588);
  v103 = *(_QWORD *)(v12 - 8);
  v104 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = a2;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v63 = a2;
    else
      v63 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v15 = _CocoaArrayWrapper.endIndex.getter(v63);
    swift_bridgeObjectRelease();
    if (!v15)
      goto LABEL_57;
  }
  else
  {
    v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      goto LABEL_57;
  }
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v64 = a3;
    else
      v64 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v16 = _CocoaArrayWrapper.endIndex.getter(v64);
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_5;
LABEL_57:
    swift_bridgeObjectRetain(a1);
    return (uint64_t)a1;
  }
  v16 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v16)
    goto LABEL_57;
LABEL_5:
  v113 = (uint64_t)_swiftEmptyArrayStorage;
  if (v15 < 1)
  {
    __break(1u);
    goto LABEL_59;
  }
  v106 = v16;
  v101 = a3;
  v96 = a5;
  v99 = (id)a4;
  v97 = a1;
  v98 = v14;
  v100 = v6;
  v17 = v102;
  v105 = v102 & 0xC000000000000001;
  swift_bridgeObjectRetain(v102);
  for (i = 0; i != v15; ++i)
  {
    if (v105)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v17);
    else
      v20 = *(id *)(v17 + 8 * i + 32);
    v21 = v20;
    v16 = _s19PolymorphicListItemCMa_0();
    v22 = swift_allocObject(v16, 24, 7);
    v23 = type metadata accessor for REMList_Codable(0);
    v110 = v23;
    v111 = sub_10009FC50(&qword_1008490F0, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
    v112 = sub_10009FC50(&qword_1008490F8, (uint64_t (*)(uint64_t))&type metadata accessor for REMList_Codable, (uint64_t)&protocol conformance descriptor for REMList_Codable);
    v109[0] = v21;
    sub_100385E40((uint64_t)v109, (uint64_t)v108);
    v24 = sub_10001A630(&qword_100849100);
    if (swift_dynamicCast(&v107, v108, v24, v23, 0))
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v109);
      v25 = v107;
LABEL_16:
      *(_QWORD *)(v22 + 16) = v25;
      v27 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v108);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      a4 = *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v28 = *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (a4 >= v28 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1);
      v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a4, v22);
      specialized Array._endMutation()(v29);
      continue;
    }
    v26 = type metadata accessor for REMSmartList_Codable(0);
    if (swift_dynamicCast(&v107, v108, v24, v26, 0))
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v109);
      v25 = v107 | 0x8000000000000000;
      goto LABEL_16;
    }
    if (qword_1008376E8 != -1)
      swift_once(&qword_1008376E8, sub_1004AA81C);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10001AAA8(v30, (uint64_t)qword_10084C778);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.fault.getter();
    a4 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)a4, "unknown or unsupported REM object type for PolymorphicListItem", v34, 2u);
      v35 = v34;
      v17 = v102;
      swift_slowDealloc(v35, -1, -1);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v109);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v108);
    swift_deallocPartialClassInstance(v22, v16, 24, 7, v19);
  }
  swift_bridgeObjectRelease();
  v36 = v113;
  v113 = (uint64_t)_swiftEmptyArrayStorage;
  if (v106 < 1)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v102 = v36;
  v37 = v101;
  v105 = v101 & 0xC000000000000001;
  swift_bridgeObjectRetain(v101);
  v38 = 0;
  do
  {
    if (v105)
      v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v37);
    else
      v40 = *(id *)(v37 + 8 * v38 + 32);
    v41 = v40;
    v42 = swift_allocObject(v16, 24, 7);
    v43 = type metadata accessor for REMSmartList_Codable(0);
    v110 = v43;
    v111 = sub_10009FC50(&qword_100849108, (uint64_t (*)(uint64_t))&type metadata accessor for REMSmartList_Codable, (uint64_t)&protocol conformance descriptor for REMSmartList_Codable);
    v112 = sub_10009FC50(&qword_100849110, (uint64_t (*)(uint64_t))&type metadata accessor for REMSmartList_Codable, (uint64_t)&protocol conformance descriptor for REMSmartList_Codable);
    v109[0] = v41;
    sub_100385E40((uint64_t)v109, (uint64_t)v108);
    if (swift_dynamicCast(&v107, v108, v24, v23, 0))
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v109);
      v44 = v107;
LABEL_34:
      *(_QWORD *)(v42 + 16) = v44;
      v45 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v108);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v45);
      v47 = *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v46 = *(_QWORD *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v47 >= v46 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1);
      v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v42);
      specialized Array._endMutation()(v48);
      goto LABEL_26;
    }
    if (swift_dynamicCast(&v107, v108, v24, v43, 0))
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v109);
      v44 = v107 | 0x8000000000000000;
      goto LABEL_34;
    }
    if (qword_1008376E8 != -1)
      swift_once(&qword_1008376E8, sub_1004AA81C);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10001AAA8(v49, (uint64_t)qword_10084C778);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "unknown or unsupported REM object type for PolymorphicListItem", v53, 2u);
      v54 = v53;
      v37 = v101;
      swift_slowDealloc(v54, -1, -1);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v109);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v108);
    swift_deallocPartialClassInstance(v42, v16, 24, 7, v39);
LABEL_26:
    ++v38;
  }
  while (v106 != v38);
  swift_bridgeObjectRelease();
  v109[0] = v102;
  sub_1001E1DF8(v113);
  a4 = v109[0];
  if (!(v109[0] >> 62))
  {
    v55 = *(_QWORD *)((v109[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    v56 = v99;
    v57 = v99;
    if (v55 > 1)
      goto LABEL_43;
LABEL_64:

    v61 = 0;
    v60 = v100;
    goto LABEL_65;
  }
LABEL_60:
  if (a4 < 0)
    v65 = a4;
  else
    v65 = a4 & 0xFFFFFFFFFFFFFF8;
  v56 = v99;
  v66 = v99;
  swift_bridgeObjectRetain(a4);
  v67 = _CocoaArrayWrapper.endIndex.getter(v65);
  swift_bridgeObjectRelease();
  if (v67 <= 1)
    goto LABEL_64;
LABEL_43:
  v58 = v100;
  sub_100204328(v56, v96);
  v60 = v58;
  if (v58)
  {

    swift_errorRelease(v58);
    v61 = 0;
    v60 = 0;
  }
  else if (v59)
  {
    v61 = v59;
    v62 = REMOrderedIdentifierMap.reorder<A>(objects:)(a4, v16);
    swift_bridgeObjectRelease();

    a4 = v62;
  }
  else
  {

    v61 = 0;
  }
LABEL_65:
  v105 = (unint64_t)v61;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0)
      v77 = a4;
    else
      v77 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    v68 = _CocoaArrayWrapper.endIndex.getter(v77);
    swift_bridgeObjectRelease();
    if (!v68)
      goto LABEL_78;
LABEL_67:
    v109[0] = _swiftEmptyArrayStorage;
    v69 = v109;
    specialized ContiguousArray.reserveCapacity(_:)(v68);
    if ((v68 & 0x8000000000000000) == 0)
    {
      v70 = 0;
      do
      {
        if ((a4 & 0xC000000000000001) != 0)
        {
          v71 = specialized _ArrayBuffer._getElementSlowPath(_:)(v70, a4);
        }
        else
        {
          v71 = *(_QWORD *)(a4 + 8 * v70 + 32);
          swift_retain();
        }
        v72 = objc_msgSend((id)(*(_QWORD *)(v71 + 16) & 0x7FFFFFFFFFFFFFFFLL), "remObjectID");
        v73 = swift_release(v71);
        ++v70;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v73);
        v74 = *(_QWORD *)(v109[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v74);
        v75 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v74, v72);
        specialized ContiguousArray._endMutation()(v75);
      }
      while (v68 != v70);
      v76 = (_QWORD *)v109[0];
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
    __break(1u);
    goto LABEL_92;
  }
  v68 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v68)
    goto LABEL_67;
LABEL_78:
  swift_bridgeObjectRelease();
  v76 = _swiftEmptyArrayStorage;
LABEL_79:
  v78 = v97;
  v79 = v97[2];
  v80 = _swiftEmptyArrayStorage;
  v81 = v98;
  if (v79)
  {
    v102 = (uint64_t)v76;
    v100 = v60;
    v109[0] = _swiftEmptyArrayStorage;
    sub_1001C1D40(0, v79, 0);
    v80 = (_QWORD *)v109[0];
    v106 = type metadata accessor for REMRemindersListDataView.ListsModel.Sublist(0);
    v82 = *(_QWORD *)(v106 - 8);
    v83 = (uint64_t)v78 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
    v84 = *(_QWORD *)(v82 + 72);
    v85 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 16);
    do
    {
      v86 = v85(&v81[*(int *)(v104 + 48)], v83, v106);
      *(_QWORD *)v81 = REMRemindersListDataView.ListsModel.Sublist.listID.getter(v86);
      v109[0] = v80;
      v88 = v80[2];
      v87 = v80[3];
      if (v88 >= v87 >> 1)
      {
        sub_1001C1D40(v87 > 1, v88 + 1, 1);
        v80 = (_QWORD *)v109[0];
      }
      v80[2] = v88 + 1;
      sub_1004ACF18((uint64_t)v81, (uint64_t)v80+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(_QWORD *)(v103 + 72) * v88);
      v83 += v84;
      --v79;
    }
    while (v79);
    v60 = v100;
    v76 = (_QWORD *)v102;
  }
  v89 = v80[2];
  v90 = (void *)v105;
  if (v89)
  {
    sub_10001A630(&qword_100844548);
    v91 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v89);
  }
  else
  {
    v91 = _swiftEmptyDictionarySingleton;
  }
  v109[0] = v91;
  swift_bridgeObjectRetain(v80);
  sub_1004AB9B8(v92, 1, v109);
  v69 = v60;
  if (v60)
  {
LABEL_92:
    result = swift_unexpectedError(v69, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v93 = v109[0];
  swift_retain();
  a1 = sub_1004AC1E4((uint64_t)v76, v93);
  swift_bridgeObjectRelease();

  swift_release_n(v93);
  return (uint64_t)a1;
}

uint64_t sub_1004ACF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10083F588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004ACF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A630(&qword_10083F588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1004ACFA8(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t Subtasks;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v45 = a2;
  v43 = a4;
  v41 = a3;
  Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v42 = *(_QWORD *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v38 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = _s9UtilitiesO12SortingStyleOMa(0);
  __chkstk_darwin(v40);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - v14;
  v16 = _s10PredicatesOMa(0);
  __chkstk_darwin(v16);
  v18 = (char **)((char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001A630(&qword_100846690);
  *v18 = a1;
  v19 = a1;
  v20 = (uint64_t)v6;
  v21 = v41;
  REMRemindersListDataView.GroupInvocation.Parameters.showCompleted.getter(v19);
  swift_storeEnumTagMultiPayload(v18, v16, 8);
  sub_10000D2C0();
  v23 = v22;
  v24 = (uint64_t)v18;
  v25 = v42;
  sub_10001C744(v24, _s10PredicatesOMa);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v27 = (uint64_t)v38;
  v28 = (uint64_t)v39;
  v26(v38, v43, v8);
  v29 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  v30 = type metadata accessor for REMRemindersListDataView.SortingDirection(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v12, v29, v30);
  swift_storeEnumTagMultiPayload(v12, v40, 2);
  v31 = (uint64_t)v12;
  v32 = Subtasks;
  v33 = sub_1004957D0(v27, v31, (uint64_t)v15);
  v34 = v21;
  REMRemindersListDataView.GroupInvocation.Parameters.showCompleted.getter(v33);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v20, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), v32);
  v35 = v46;
  v36 = sub_100496780(v45, (uint64_t)v23, (uint64_t)v15, 0, 0, v28, v20, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v35)
  {
    v34 = v36;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v20, v32);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v28, v48);
  sub_10001C744((uint64_t)v15, _s9UtilitiesO12SortingStyleOMa);
  return v34;
}

id sub_1004AD454(void *a1, int a2, int a3, void *aBlock, uint64_t (*a5)(void))
{
  void *v7;
  id v8;
  void *v9;

  v7 = _Block_copy(aBlock);
  _Block_copy(v7);
  v8 = a1;
  v9 = (void *)a5();
  _Block_release(v7);
  _Block_release(v7);

  return v9;
}

void sub_1004AD4C4(void *a1, int a2, int a3, void *aBlock, const void *a5, uint64_t (*a6)(void))
{
  void (**v9)(void *, uint64_t);
  void *v10;
  uint64_t v11;
  id v12;

  v9 = (void (**)(void *, uint64_t))_Block_copy(aBlock);
  v10 = _Block_copy(a5);
  _Block_copy(v10);
  v12 = a1;
  v11 = a6();
  _Block_release(v10);
  if (v11)
  {
    v9[2](v9, v11);
    swift_unknownObjectRelease(v11);
  }
  _Block_release(v10);
  _Block_release(v9);

}

uint64_t type metadata accessor for RDDaemonController()
{
  return objc_opt_self(_TtC7remindd18RDDaemonController);
}

id sub_1004AD610(uint64_t a1, uint64_t a2, uint64_t a3, Class a4, uint64_t a5, uint64_t a6)
{
  char *v11;
  char *v12;
  objc_super v14;

  v11 = (char *)objc_allocWithZone(a4);
  v12 = &v11[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a6;
  sub_1000184A8(a2, (uint64_t)&v11[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity]);
  *(_QWORD *)&v11[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken] = a3;
  v14.receiver = v11;
  v14.super_class = a4;
  return objc_msgSendSuper2(&v14, "init");
}

void sub_1004AD6A4(uint64_t a1)
{
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_1004AD70C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t result;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  _DWORD v11[23];
  __int16 v12;

  v11[22] = a1;
  v12 = WORD2(a1) & 0x3FFF;
  sub_10001ABA4(16, 2147483519);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v4 + 8))(v11, *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken), ObjectType, v4);
  if (!result)
  {
    v7 = (void *)objc_opt_self(REMError);
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "xpcPerformerUnavailableErrorWithDescription:", v8);

    swift_willThrow(v10);
    v3 = (void *)_convertErrorToNSError(_:)(v9);
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

    swift_errorRelease(v9);
    return 0;
  }
  return result;
}

void sub_1004AD83C(uint64_t a1)
{
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_1004AD8A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t result;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  _DWORD v11[23];
  __int16 v12;

  v11[22] = a1;
  v12 = WORD2(a1) & 0x3FFF;
  sub_10001ABA4(32, 2147483519);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v4 + 16))(v11, *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken), ObjectType, v4);
  if (!result)
  {
    v7 = (void *)objc_opt_self(REMError);
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "xpcPerformerUnavailableErrorWithDescription:", v8);

    swift_willThrow(v10);
    v3 = (void *)_convertErrorToNSError(_:)(v9);
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

    swift_errorRelease(v9);
    return 0;
  }
  return result;
}

void sub_1004AD9D4()
{
  uint64_t v0;
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(v0 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_1004ADA4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(id);
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  NSString v11;
  id v12;
  uint64_t v13;
  _DWORD v14[23];
  __int16 v15;

  v14[22] = a1;
  v15 = WORD2(a1) & 0x3FFF;
  swift_retain();
  sub_10001ABA4(32, 2147483519);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v5 + 16))(v14, *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken), ObjectType, v5);
  if (v7)
  {
    v8 = v7;
    swift_release(v1);
    v4(v8);
    return swift_unknownObjectRelease(v8);
  }
  else
  {
    v10 = (void *)objc_opt_self(REMError);
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v10, "xpcPerformerUnavailableErrorWithDescription:", v11);

    swift_willThrow(v13);
    v3(v12);
    swift_errorRelease(v12);
    return swift_release(v1);
  }
}

void sub_1004ADBA0(uint64_t a1)
{
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_1004ADC08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t result;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  _DWORD v11[23];
  __int16 v12;

  v11[22] = a1;
  v12 = WORD2(a1) & 0x3FFF;
  sub_10001ABA4(1, 2147483519);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v4 + 24))(v11, *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken), ObjectType, v4);
  if (!result)
  {
    v7 = (void *)objc_opt_self(REMError);
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "xpcPerformerUnavailableErrorWithDescription:", v8);

    swift_willThrow(v10);
    v3 = (void *)_convertErrorToNSError(_:)(v9);
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

    swift_errorRelease(v9);
    return 0;
  }
  return result;
}

void sub_1004ADD38(uint64_t a1)
{
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_1004ADDA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t result;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  _DWORD v11[23];
  __int16 v12;

  v11[22] = a1;
  v12 = WORD2(a1) & 0x3FFF;
  sub_10001ABA4(8, 2147483519);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v4 + 32))(v11, 0, ObjectType, v4);
  if (!result)
  {
    v7 = (void *)objc_opt_self(REMError);
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "xpcPerformerUnavailableErrorWithDescription:", v8);

    swift_willThrow(v10);
    v3 = (void *)_convertErrorToNSError(_:)(v9);
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

    swift_errorRelease(v9);
    return 0;
  }
  return result;
}

void sub_1004ADEC4(uint64_t a1)
{
  _BYTE v1[48];
  _BYTE v2[40];

  sub_1000184A8(a1 + OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity, (uint64_t)v1);
  sub_1000184A8((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_1004ADF2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t result;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  _DWORD v11[23];
  __int16 v12;

  v11[22] = a1;
  v12 = WORD2(a1) & 0x3FFF;
  sub_10001ABA4(64, 2147483519);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon + 8);
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v4 + 40))(v11, ObjectType, v4);
  if (!result)
  {
    v7 = (void *)objc_opt_self(REMError);
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "xpcPerformerUnavailableErrorWithDescription:", v8);

    swift_willThrow(v10);
    v3 = (void *)_convertErrorToNSError(_:)(v9);
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

    swift_errorRelease(v9);
    return 0;
  }
  return result;
}

uint64_t sub_1004AE04C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1004AE074(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *(_QWORD *)(type metadata accessor for RDPermanentlyHiddenReminder(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1001D6174(v3);
  v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1004AE9D8(v5);
  *a1 = v3;
}

uint64_t sub_1004AE0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  double v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  void *v58;
  Class isa;
  double v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  void *v83;
  __int128 v84;
  void *v85;

  v79 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v76 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v78 = (uint64_t)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v68 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100843FD0);
  __chkstk_darwin(v9);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  v13 = sub_1001EA650(v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v84 = v13;
  swift_bridgeObjectRetain(v13);
  sub_1004AE074(&v84);
  if (v1)
  {
    result = swift_release(v84);
    __break(1u);
  }
  else
  {
    v70 = v8;
    v73 = 0;
    swift_release(v13);
    v14 = v84;
    v15 = *(_QWORD *)(v84 + 16);
    v71 = v6;
    v72 = v5;
    v69 = v0;
    if (v15)
    {
      v16 = v84 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
      v75 = *(_QWORD *)(v76 + 72);
      v67 = v84;
      swift_retain();
      v17 = _swiftEmptyArrayStorage;
      v74 = (char *)&type metadata for Any + 8;
      v18 = v78;
      do
      {
        sub_10011FECC(v16, (uint64_t)v11);
        v19 = v76;
        v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
        v21 = v79;
        v20(v11, 0, 1, v79);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v21) == 1)
        {
          v48 = (uint64_t)v68;
          v14 = v67;
          goto LABEL_25;
        }
        sub_10011FF10((uint64_t)v11, v18);
        v22 = type metadata accessor for UUID(0);
        v85 = (void *)v22;
        v23 = sub_1000087F0(&v84);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v23, v18, v22);
        v24._countAndFlagsBits = 0x7265646E696D6572;
        v77 = v17;
        v80 = 0;
        v81 = 0xE000000000000000;
        v24._object = (void *)0xEA00000000004449;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._countAndFlagsBits = 58;
        v25._object = (void *)0xE100000000000000;
        String.append(_:)(v25);
        _print_unlocked<A, B>(_:_:)(&v84, &v80, v74, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v27 = v80;
        v26 = v81;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v84);
        v28 = _swiftEmptyArrayStorage;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002C8224(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
          v28 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v31 = v28[2];
        v30 = v28[3];
        if (v31 >= v30 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002C8224((_QWORD *)(v30 > 1), v31 + 1, 1, v28);
          v28 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v28[2] = v31 + 1;
        v32 = &v28[2 * v31];
        v32[4] = v27;
        v32[5] = v26;
        v33 = Date.timeIntervalSinceReferenceDate.getter(isUniquelyReferenced_nonNull_native);
        v85 = &type metadata for Double;
        *(double *)&v84 = v33;
        v34._countAndFlagsBits = 0x44646574656C6564;
        v80 = 0;
        v81 = 0xE000000000000000;
        v34._object = (void *)0xEB00000000657461;
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 58;
        v35._object = (void *)0xE100000000000000;
        String.append(_:)(v35);
        _print_unlocked<A, B>(_:_:)(&v84, &v80, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v36 = v80;
        v37 = v81;
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v84);
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
          v28 = sub_1002C8224(0, v28[2] + 1, 1, v28);
        v39 = v28[2];
        v38 = v28[3];
        if (v39 >= v38 >> 1)
          v28 = sub_1002C8224((_QWORD *)(v38 > 1), v39 + 1, 1, v28);
        v28[2] = v39 + 1;
        v40 = &v28[2 * v39];
        v40[4] = v36;
        v40[5] = v37;
        *(_QWORD *)&v84 = v28;
        v41 = sub_10001A630((uint64_t *)&unk_10083AE10);
        v42 = sub_1001CC40C();
        v43 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v41, v42);
        v45 = v44;
        swift_bridgeObjectRelease();
        v83 = &type metadata for String;
        *(_QWORD *)&v82 = v43;
        *((_QWORD *)&v82 + 1) = v45;
        v18 = v78;
        sub_10011FF54(v78);
        if (v83)
        {
          sub_10001A6CC(&v82, &v84);
          sub_10001A6CC(&v84, &v82);
          v17 = v77;
          if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) == 0)
            v17 = sub_1002C8358(0, v17[2] + 1, 1, v17);
          v47 = v17[2];
          v46 = v17[3];
          if (v47 >= v46 >> 1)
            v17 = sub_1002C8358((_QWORD *)(v46 > 1), v47 + 1, 1, v17);
          v17[2] = v47 + 1;
          sub_10001A6CC(&v82, &v17[4 * v47 + 4]);
        }
        else
        {
          sub_10000882C((uint64_t)&v82, (uint64_t *)&unk_10083D5B0);
          v17 = v77;
        }
        v16 += v75;
        --v15;
      }
      while (v15);
      v14 = v67;
    }
    else
    {
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
      swift_retain();
      v17 = _swiftEmptyArrayStorage;
    }
    v20(v11, 1, 1, v79);
    v48 = (uint64_t)v68;
LABEL_25:
    swift_release_n(v14);
    sub_1000CDA2C(v69 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, v48);
    v50 = v71;
    v49 = v72;
    v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v48, 1, v72);
    v52 = v70;
    if (v51 == 1)
    {
      sub_10000882C(v48, (uint64_t *)&unk_1008380D0);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v70, v48, v49);
      *(_QWORD *)&v84 = 0;
      *((_QWORD *)&v84 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      v53._object = (void *)0x8000000100705A60;
      v53._countAndFlagsBits = 0xD00000000000002ALL;
      String.append(_:)(v53);
      Date.timeIntervalSinceReferenceDate.getter(v54);
      Double.write<A>(to:)(&v84, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v85 = &type metadata for String;
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        v17 = sub_1002C8358(0, v17[2] + 1, 1, v17);
      v56 = v17[2];
      v55 = v17[3];
      if (v56 >= v55 >> 1)
        v17 = sub_1002C8358((_QWORD *)(v55 > 1), v56 + 1, 1, v17);
      v17[2] = v56 + 1;
      sub_10001A6CC(&v84, &v17[4 * v56 + 4]);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
    }
    v57 = objc_autoreleasePoolPush();
    v58 = (void *)objc_opt_self(NSJSONSerialization);
    swift_bridgeObjectRetain(v17);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v60 = swift_bridgeObjectRelease().n128_u64[0];
    *(_QWORD *)&v84 = 0;
    v61 = objc_msgSend(v58, "dataWithJSONObject:options:error:", isa, 0, &v84, v60);

    v62 = (id)v84;
    if (v61)
    {
      v63 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);

    }
    else
    {
      v63 = v62;
      _convertNSErrorToError(_:)(v62);

      swift_willThrow(v64);
    }
    objc_autoreleasePoolPop(v57);
    swift_bridgeObjectRelease();
    return (uint64_t)v63;
  }
  return result;
}

uint64_t sub_1004AE9B8()
{
  return sub_1004AE0F4();
}

void sub_1004AE9D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::Int v27;
  unint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::Int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  Swift::Int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  Swift::Int v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  Swift::Int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  Swift::Int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;

  v2 = v1;
  v148 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v4 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v142 = (uint64_t)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v152 = (uint64_t)&v134 - v7;
  __chkstk_darwin(v8);
  v154 = (uint64_t)&v134 - v9;
  __chkstk_darwin(v10);
  v153 = (uint64_t)&v134 - v11;
  __chkstk_darwin(v12);
  v145 = (uint64_t)&v134 - v13;
  __chkstk_darwin(v14);
  v144 = (uint64_t)&v134 - v15;
  __chkstk_darwin(v16);
  v140 = (uint64_t)&v134 - v17;
  __chkstk_darwin(v18);
  v139 = (uint64_t)&v134 - v19;
  v155 = a1;
  v20 = a1[1];
  v21 = _minimumMergeRunLength(_:)(v20);
  if (v21 >= v20)
  {
    if (v20 < 0)
      goto LABEL_149;
    if (v20)
      sub_1004AF484(0, v20, 1, v155);
    return;
  }
  if (v20 >= 0)
    v22 = v20;
  else
    v22 = v20 + 1;
  if (v20 < -1)
    goto LABEL_157;
  v137 = v21;
  v147 = v4;
  if (v20 < 2)
  {
    v26 = (char *)_swiftEmptyArrayStorage;
    v146 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v136 = _swiftEmptyArrayStorage;
    if (v20 != 1)
    {
      v28 = _swiftEmptyArrayStorage[2];
LABEL_115:
      v127 = v26;
      if (v28 >= 2)
      {
        v128 = *v155;
        do
        {
          v129 = v28 - 2;
          if (v28 < 2)
            goto LABEL_144;
          if (!v128)
            goto LABEL_156;
          v130 = *(_QWORD *)&v127[16 * v129 + 32];
          v131 = *(_QWORD *)&v127[16 * v28 + 24];
          sub_1004AF6F4(v128 + *(_QWORD *)(v4 + 72) * v130, v128 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v127[16 * v28 + 16], v128 + *(_QWORD *)(v4 + 72) * v131, v146);
          if (v2)
            break;
          if (v131 < v130)
            goto LABEL_145;
          if ((swift_isUniquelyReferenced_nonNull_native(v127) & 1) == 0)
            v127 = sub_1001D52E4((uint64_t)v127);
          if (v129 >= *((_QWORD *)v127 + 2))
            goto LABEL_146;
          v132 = &v127[16 * v129 + 32];
          *(_QWORD *)v132 = v130;
          *((_QWORD *)v132 + 1) = v131;
          v133 = *((_QWORD *)v127 + 2);
          if (v28 > v133)
            goto LABEL_147;
          memmove(&v127[16 * v28 + 16], &v127[16 * v28 + 32], 16 * (v133 - v28));
          *((_QWORD *)v127 + 2) = v133 - 1;
          v28 = v133 - 1;
          v4 = v147;
        }
        while (v133 > 2);
      }
LABEL_126:
      swift_bridgeObjectRelease();
      v136[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v23 = v22 >> 1;
    v24 = static Array._allocateBufferUninitialized(minimumCapacity:)(v22 >> 1, v148);
    *(_QWORD *)(v24 + 16) = v23;
    v25 = *(unsigned __int8 *)(v4 + 80);
    v136 = (_QWORD *)v24;
    v146 = v24 + ((v25 + 32) & ~v25);
  }
  v27 = 0;
  v26 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v29 = v27 + 1;
    v143 = v27;
    if (v27 + 1 >= v20)
    {
      v38 = v27 + 1;
      goto LABEL_67;
    }
    v151 = v20;
    v30 = *v155;
    v31 = *(_QWORD *)(v4 + 72);
    sub_10011FECC(*v155 + v31 * v29, v139);
    v141 = v30;
    v32 = sub_10011FECC(v30 + v31 * v27, v140);
    v33 = UUID.uuidString.getter(v32);
    v35 = v34;
    v36 = UUID.uuidString.getter(v33);
    if (v36 == v33 && v37 == v35)
      LODWORD(v150) = 0;
    else
      LODWORD(v150) = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v33, v35, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10011FF54(v140);
    sub_10011FF54(v139);
    v38 = v27 + 2;
    if (v27 + 2 < v151)
    {
      v138 = v26;
      v149 = v31 * v29;
      v39 = v141;
      v40 = v31 * v38;
      while (1)
      {
        v41 = v38;
        sub_10011FECC(v39 + v40, v144);
        v42 = sub_10011FECC(v39 + v149, v145);
        v43 = UUID.uuidString.getter(v42);
        v45 = v44;
        v46 = UUID.uuidString.getter(v43);
        if (v46 == v43 && v47 == v45)
          v48 = 0;
        else
          v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v43, v45, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10011FF54(v145);
        sub_10011FF54(v144);
        if (((v150 ^ v48) & 1) != 0)
          break;
        ++v38;
        v39 += v31;
        if (v151 == v41 + 1)
        {
          v38 = v151;
          v4 = v147;
          v26 = v138;
          goto LABEL_31;
        }
      }
      v4 = v147;
      v26 = v138;
LABEL_31:
      v27 = v143;
    }
    if ((v150 & 1) != 0)
    {
      if (v38 < v27)
        goto LABEL_150;
      if (v27 < v38)
      {
        v138 = v26;
        v135 = v2;
        v49 = 0;
        v50 = v31 * (v38 - 1);
        v51 = v38 * v31;
        v52 = v27 * v31;
        do
        {
          if (v27 != v38 + v49 - 1)
          {
            v55 = v141;
            if (!v141)
              goto LABEL_155;
            v56 = v141 + v52;
            v150 = v141 + v50;
            sub_10011FF10(v141 + v52, v142);
            if (v52 < v50 || v56 >= v55 + v51)
            {
              v53 = v55 + v52;
              v54 = v150;
              swift_arrayInitWithTakeFrontToBack(v53);
            }
            else
            {
              v54 = v150;
              if (v52 != v50)
                swift_arrayInitWithTakeBackToFront(v56);
            }
            sub_10011FF10(v142, v54);
          }
          ++v27;
          --v49;
          v50 -= v31;
          v51 -= v31;
          v52 += v31;
        }
        while (v27 < v38 + v49);
        v2 = v135;
        v4 = v147;
        v26 = v138;
        v27 = v143;
      }
    }
    if (v38 < v151)
    {
      if (__OFSUB__(v38, v27))
        goto LABEL_148;
      if (v38 - v27 < v137)
        break;
    }
LABEL_67:
    if (v38 < v27)
      goto LABEL_143;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    v151 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v26 = sub_1001D4DF0(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
    v77 = *((_QWORD *)v26 + 2);
    v76 = *((_QWORD *)v26 + 3);
    v28 = v77 + 1;
    if (v77 >= v76 >> 1)
      v26 = sub_1001D4DF0((char *)(v76 > 1), v77 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v28;
    v78 = v26 + 32;
    v79 = &v26[16 * v77 + 32];
    v80 = v151;
    *(_QWORD *)v79 = v27;
    *((_QWORD *)v79 + 1) = v80;
    if (v77)
    {
      while (1)
      {
        v81 = v28 - 1;
        if (v28 >= 4)
        {
          v86 = &v78[16 * v28];
          v87 = *((_QWORD *)v86 - 8);
          v88 = *((_QWORD *)v86 - 7);
          v92 = __OFSUB__(v88, v87);
          v89 = v88 - v87;
          if (v92)
            goto LABEL_132;
          v91 = *((_QWORD *)v86 - 6);
          v90 = *((_QWORD *)v86 - 5);
          v92 = __OFSUB__(v90, v91);
          v84 = v90 - v91;
          v85 = v92;
          if (v92)
            goto LABEL_133;
          v93 = v28 - 2;
          v94 = &v78[16 * v28 - 32];
          v96 = *(_QWORD *)v94;
          v95 = *((_QWORD *)v94 + 1);
          v92 = __OFSUB__(v95, v96);
          v97 = v95 - v96;
          if (v92)
            goto LABEL_135;
          v92 = __OFADD__(v84, v97);
          v98 = v84 + v97;
          if (v92)
            goto LABEL_138;
          if (v98 >= v89)
          {
            v116 = &v78[16 * v81];
            v118 = *(_QWORD *)v116;
            v117 = *((_QWORD *)v116 + 1);
            v92 = __OFSUB__(v117, v118);
            v119 = v117 - v118;
            if (v92)
              goto LABEL_142;
            v109 = v84 < v119;
            goto LABEL_104;
          }
        }
        else
        {
          if (v28 != 3)
          {
            v110 = *((_QWORD *)v26 + 4);
            v111 = *((_QWORD *)v26 + 5);
            v92 = __OFSUB__(v111, v110);
            v103 = v111 - v110;
            v104 = v92;
            goto LABEL_98;
          }
          v83 = *((_QWORD *)v26 + 4);
          v82 = *((_QWORD *)v26 + 5);
          v92 = __OFSUB__(v82, v83);
          v84 = v82 - v83;
          v85 = v92;
        }
        if ((v85 & 1) != 0)
          goto LABEL_134;
        v93 = v28 - 2;
        v99 = &v78[16 * v28 - 32];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v102 = __OFSUB__(v100, v101);
        v103 = v100 - v101;
        v104 = v102;
        if (v102)
          goto LABEL_137;
        v105 = &v78[16 * v81];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v92 = __OFSUB__(v106, v107);
        v108 = v106 - v107;
        if (v92)
          goto LABEL_140;
        if (__OFADD__(v103, v108))
          goto LABEL_141;
        if (v103 + v108 >= v84)
        {
          v109 = v84 < v108;
LABEL_104:
          if (v109)
            v81 = v93;
          goto LABEL_106;
        }
LABEL_98:
        if ((v104 & 1) != 0)
          goto LABEL_136;
        v112 = &v78[16 * v81];
        v114 = *(_QWORD *)v112;
        v113 = *((_QWORD *)v112 + 1);
        v92 = __OFSUB__(v113, v114);
        v115 = v113 - v114;
        if (v92)
          goto LABEL_139;
        if (v115 < v103)
          goto LABEL_14;
LABEL_106:
        v120 = v81 - 1;
        if (v81 - 1 >= v28)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!*v155)
          goto LABEL_154;
        v121 = v26;
        v122 = &v78[16 * v120];
        v123 = *(_QWORD *)v122;
        v124 = &v78[16 * v81];
        v125 = *((_QWORD *)v124 + 1);
        sub_1004AF6F4(*v155 + *(_QWORD *)(v147 + 72) * *(_QWORD *)v122, *v155 + *(_QWORD *)(v147 + 72) * *(_QWORD *)v124, *v155 + *(_QWORD *)(v147 + 72) * v125, v146);
        if (v2)
          goto LABEL_126;
        if (v125 < v123)
          goto LABEL_129;
        if (v81 > *((_QWORD *)v121 + 2))
          goto LABEL_130;
        *(_QWORD *)v122 = v123;
        *(_QWORD *)&v78[16 * v120 + 8] = v125;
        v126 = *((_QWORD *)v121 + 2);
        if (v81 >= v126)
          goto LABEL_131;
        v26 = v121;
        v28 = v126 - 1;
        memmove(&v78[16 * v81], v124 + 16, 16 * (v126 - 1 - v81));
        *((_QWORD *)v121 + 2) = v126 - 1;
        if (v126 <= 2)
          goto LABEL_14;
      }
    }
    v28 = 1;
LABEL_14:
    v20 = v155[1];
    v27 = v151;
    v4 = v147;
    if (v151 >= v20)
      goto LABEL_115;
  }
  if (__OFADD__(v27, v137))
    goto LABEL_151;
  if (v27 + v137 >= v151)
    v57 = v151;
  else
    v57 = v27 + v137;
  if (v57 >= v27)
  {
    if (v38 != v57)
    {
      v138 = v26;
      v135 = v2;
      v58 = *(_QWORD *)(v4 + 72);
      v59 = v58 * (v38 - 1);
      v149 = v58;
      v60 = v38 * v58;
      v141 = v57;
      do
      {
        v62 = 0;
        v150 = v60;
        v151 = v38;
        while (1)
        {
          v63 = *v155;
          sub_10011FECC(v60 + v62 + *v155, v153);
          v64 = v59;
          v65 = sub_10011FECC(v59 + v62 + v63, v154);
          v66 = UUID.uuidString.getter(v65);
          v68 = v67;
          v69 = UUID.uuidString.getter(v66);
          if (v69 == v66 && v70 == v68)
            break;
          v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, v66, v68, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10011FF54(v154);
          sub_10011FF54(v153);
          if ((v71 & 1) == 0)
            goto LABEL_57;
          v72 = *v155;
          v60 = v150;
          if (!*v155)
            goto LABEL_153;
          v73 = v72 + v150 + v62;
          v59 = v64;
          v74 = v72 + v64 + v62;
          sub_10011FF10(v73, v152);
          swift_arrayInitWithTakeFrontToBack(v73);
          sub_10011FF10(v152, v74);
          v62 -= v149;
          ++v27;
          v61 = v151;
          if (v151 == v27)
            goto LABEL_58;
        }
        swift_bridgeObjectRelease_n(v68, 2);
        sub_10011FF54(v154);
        sub_10011FF54(v153);
LABEL_57:
        v60 = v150;
        v61 = v151;
        v59 = v64;
LABEL_58:
        v38 = v61 + 1;
        v59 += v149;
        v60 += v149;
        v27 = v143;
      }
      while (v38 != v141);
      v38 = v141;
      v2 = v135;
      v26 = v138;
    }
    goto LABEL_67;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_1004AF484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a4;
  v31 = a1;
  v32 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  __chkstk_darwin(v32);
  v36 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v39 = (uint64_t)&v29 - v8;
  __chkstk_darwin(v9);
  v38 = (uint64_t)&v29 - v11;
  v35 = a3;
  v30 = a2;
  if (a3 != a2)
  {
    v12 = *(_QWORD *)(v10 + 72);
    v13 = v12 * (v35 - 1);
    v33 = v12;
    v14 = v12 * v35;
LABEL_6:
    v15 = 0;
    v16 = v31;
    v34 = v14;
    while (1)
    {
      v17 = *v37;
      sub_10011FECC(v14 + v15 + *v37, v38);
      v18 = v13;
      v19 = sub_10011FECC(v13 + v15 + v17, v39);
      v20 = UUID.uuidString.getter(v19);
      v22 = v21;
      v23 = UUID.uuidString.getter(v20);
      if (v23 == v20 && v24 == v22)
      {
        swift_bridgeObjectRelease_n(v22, 2);
        sub_10011FF54(v39);
        sub_10011FF54(v38);
        v13 = v18;
        v14 = v34;
LABEL_5:
        v13 += v33;
        v14 += v33;
        if (++v35 == v30)
          return;
        goto LABEL_6;
      }
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v20, v22, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10011FF54(v39);
      sub_10011FF54(v38);
      v13 = v18;
      v14 = v34;
      if ((v25 & 1) == 0)
        goto LABEL_5;
      v26 = *v37;
      if (!*v37)
        break;
      v27 = v26 + v34 + v15;
      v28 = v26 + v18 + v15;
      sub_10011FF10(v27, v36);
      swift_arrayInitWithTakeFrontToBack(v27);
      sub_10011FF10(v36, v28);
      v15 -= v33;
      if (v35 == ++v16)
        goto LABEL_5;
    }
    __break(1u);
  }
}

uint64_t sub_1004AF6F4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t result;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;

  v54 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  __chkstk_darwin(v54);
  v56 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v55 = (uint64_t)&v52 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - v12;
  __chkstk_darwin(v14);
  v17 = (char *)&v52 - v16;
  v18 = *(_QWORD *)(v15 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v19 = *(_QWORD *)(v15 + 72);
  if (a2 - a1 == 0x8000000000000000 && v19 == -1)
    goto LABEL_68;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1)
    goto LABEL_69;
  v21 = (uint64_t)(a2 - a1) / v18;
  v59 = a1;
  v58 = a4;
  v22 = v20 / v18;
  if (v21 >= v20 / v19)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v19;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v37 = a4 + v24;
      v57 = a4 + v24;
      v59 = a2;
      v53 = a1;
      if (v24 >= 1 && a1 < a2)
      {
        v39 = -v19;
        v40 = v56;
        do
        {
          sub_10011FECC(v37 + v39, v55);
          v41 = a2 + v39;
          v42 = sub_10011FECC(a2 + v39, v40);
          v43 = UUID.uuidString.getter(v42);
          v45 = v44;
          v46 = UUID.uuidString.getter(v43);
          if (v46 == v43 && v47 == v45)
            v48 = 0;
          else
            v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v43, v45, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v49 = a3 + v39;
          sub_10011FF54(v56);
          sub_10011FF54(v55);
          if ((v48 & 1) != 0)
          {
            if (a3 < a2 || v49 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v39);
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v39);
            }
            v59 += v39;
          }
          else
          {
            v50 = v57;
            v57 += v39;
            if (a3 < v50 || v49 >= v50)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v39);
            }
            else if (a3 != v50)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v39);
            }
            v41 = a2;
          }
          v37 = v57;
          if (v57 <= a4)
            break;
          a2 = v41;
          a3 += v39;
        }
        while (v41 > v53);
      }
LABEL_66:
      sub_1001D51CC(&v59, &v58, (uint64_t *)&v57);
      return 1;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v19;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v25 = a4 + v23;
    v57 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_10011FECC(a2, (uint64_t)v17);
        v27 = sub_10011FECC(a4, (uint64_t)v13);
        v28 = UUID.uuidString.getter(v27);
        v30 = v29;
        v31 = UUID.uuidString.getter(v28);
        if (v31 == v28 && v32 == v30)
          break;
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v28, v30, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10011FF54((uint64_t)v13);
        sub_10011FF54((uint64_t)v17);
        if ((v33 & 1) == 0)
          goto LABEL_30;
        v34 = v59;
        v35 = a2 + v19;
        if (v59 < a2 || v59 >= v35)
        {
          swift_arrayInitWithTakeFrontToBack(v59);
        }
        else if (v59 == a2)
        {
          v34 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v59);
        }
LABEL_36:
        v59 = v34 + v19;
        a4 = v58;
        if (v58 < v25)
        {
          a2 = v35;
          if (v35 < a3)
            continue;
        }
        goto LABEL_66;
      }
      swift_bridgeObjectRelease_n(v30, 2);
      sub_10011FF54((uint64_t)v13);
      sub_10011FF54((uint64_t)v17);
LABEL_30:
      v34 = v59;
      v36 = v58 + v19;
      if (v59 < v58 || v59 >= v36)
      {
        swift_arrayInitWithTakeFrontToBack(v59);
      }
      else if (v59 != v58)
      {
        swift_arrayInitWithTakeBackToFront(v59);
      }
      v58 = v36;
      v35 = a2;
      goto LABEL_36;
    }
    goto LABEL_66;
  }
LABEL_70:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1004AFC38@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t inited;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48[88];
  unint64_t v49;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  v43 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630((uint64_t *)&unk_10083A280);
  inited = swift_initStackObject(v8, v48);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x80000001006F4570;
  v10 = Date.timeIntervalSinceReferenceDate.getter(inited);
  *(_QWORD *)(inited + 72) = &type metadata for Double;
  *(double *)(inited + 48) = v10;
  v11 = sub_10016E7E4(inited);
  v12 = v11;
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales);
  if (v13)
  {
    v38 = v8;
    v39 = a1;
    v14 = *(_QWORD *)(v13 + 16);
    v15 = _swiftEmptyArrayStorage;
    if (v14)
    {
      v36 = v11;
      v37 = v2;
      *(_QWORD *)&v46 = _swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v14, 0);
      v16 = v13 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
      v17 = *(_QWORD *)(v43 + 72);
      v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 16);
      v41 = v17;
      do
      {
        v18 = v42;
        v19 = v40(v7, v16, v42);
        v20 = Locale.identifier.getter(v19);
        v22 = v21;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v18);
        v15 = (_QWORD *)v46;
        if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
        {
          sub_1001C1B0C(0, v15[2] + 1, 1);
          v15 = (_QWORD *)v46;
        }
        v24 = v15[2];
        v23 = v15[3];
        if (v24 >= v23 >> 1)
        {
          sub_1001C1B0C(v23 > 1, v24 + 1, 1);
          v15 = (_QWORD *)v46;
        }
        v15[2] = v24 + 1;
        v25 = &v15[2 * v24];
        v25[4] = v20;
        v25[5] = v22;
        v16 += v41;
        --v14;
      }
      while (v14);
      v12 = v36;
    }
    v26 = swift_initStackObject(v38, &v45);
    *(_OWORD *)(v26 + 16) = xmmword_1006A3C40;
    *(_QWORD *)(v26 + 32) = 0x657079546D756E65;
    *(_QWORD *)(v26 + 40) = 0xE800000000000000;
    *(_QWORD *)(v26 + 48) = 0x646469727265766FLL;
    *(_QWORD *)(v26 + 56) = 0xEA00000000006E65;
    *(_QWORD *)(v26 + 72) = &type metadata for String;
    *(_QWORD *)(v26 + 80) = 0x73656C61636F6CLL;
    *(_QWORD *)(v26 + 88) = 0xE700000000000000;
    *(_QWORD *)(v26 + 120) = sub_10001A630((uint64_t *)&unk_10083AE10);
    *(_QWORD *)(v26 + 96) = v15;
    v27 = sub_10016E7E4(v26);
    v47 = sub_10001A630((uint64_t *)&unk_1008473E0);
    *(_QWORD *)&v46 = v27;
    sub_10001A6CC(&v46, v44);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
    v49 = v12;
    sub_10028CB74(v44, 0xD000000000000017, 0x8000000100702050, isUniquelyReferenced_nonNull_native);
    v29 = v49;
    swift_bridgeObjectRelease();
    a1 = v39;
  }
  else
  {
    v30 = sub_1002AF320((uint64_t)&off_1007E10B8);
    v47 = sub_10001A630(&qword_10083AEB8);
    *(_QWORD *)&v46 = v30;
    sub_10001A6CC(&v46, v44);
    v31 = swift_isUniquelyReferenced_nonNull_native(v12);
    v49 = v12;
    sub_10028CB74(v44, 0xD000000000000017, 0x8000000100702050, v31);
    v29 = v49;
    swift_bridgeObjectRelease();
  }
  *a1 = v29;
  v32 = enum case for REMJSONType.jsonObject(_:);
  v33 = type metadata accessor for REMJSONType(0);
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(a1, v32, v33);
}

uint64_t sub_1004AFFF8@<X0>(unint64_t *a1@<X8>)
{
  return sub_1004AFC38(a1);
}

uint64_t sub_1004B0018@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1004B0040(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1004B0040(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __n128 v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  _QWORD *v43;
  __n128 v44;
  _QWORD *v45;
  void (*v46)(char *, char *, uint64_t, __n128);
  char *v47;
  uint64_t v48;
  __n128 v49;
  char *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;

  v2 = type metadata accessor for Locale(0);
  v71 = *(_QWORD *)(v2 - 8);
  v72 = v2;
  __chkstk_darwin(v2);
  v66 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A630(&qword_10084C960);
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  __chkstk_darwin(v4);
  v69 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A630(&qword_10084C968);
  v74 = *(_QWORD *)(v6 - 8);
  v75 = v6;
  __chkstk_darwin(v6);
  v73 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A630(&qword_10084C970);
  v77 = *(_QWORD *)(v8 - 8);
  v78 = v8;
  __chkstk_darwin(v8);
  v76 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100842E10);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v79 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v70 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v66 - v17;
  v19 = type metadata accessor for REMJSONType(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (uint64_t *)((char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v20 + 16))(v23, a1, v19, v21);
  v24 = (*(uint64_t (**)(uint64_t *, uint64_t))(v20 + 88))(v23, v19);
  if (v24 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v20 + 96))(v23, v19);
    v25 = *v23;
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:), v10);
    v26 = v82;
    Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD000000000000010, 0x80000001006F4570, v13, v25, v14);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (v26)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = v14;
      v32 = v76;
      v31 = v77;
      v33 = v78;
      (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, enum case for Dictionary<>.DeserializableValueType.remJSONObject<A, B><A1>(_:), v78);
      v34 = sub_10001A630((uint64_t *)&unk_1008473E0);
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0xD000000000000017, 0x8000000100702050, v32, v25, v34);
      v35 = v18;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
      v36 = swift_bridgeObjectRelease();
      v37 = v80;
      v39 = v73;
      v38 = v74;
      v40 = v75;
      (*(void (**)(char *, _QWORD, uint64_t, __n128))(v74 + 104))(v73, enum case for Dictionary<>.DeserializableValueType.string<A, B><A1>(_:), v75, v36);
      Dictionary<>.deserializeRequired<A>(key:valueType:)(0x657079546D756E65, 0xE800000000000000, v39, v37, &type metadata for String);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      v43 = v80;
      v42 = v81;
      if (v80 == (_QWORD *)0x6974616D6F747561 && v81 == 0xE900000000000063
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v80, v81, 0x6974616D6F747561, 0xE900000000000063, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v44 = swift_bridgeObjectRelease();
        v45 = 0;
      }
      else
      {
        if (v43 == (_QWORD *)0x646469727265766FLL && v42 == 0xEA00000000006E65)
        {
          v49 = swift_bridgeObjectRelease();
          v50 = v69;
        }
        else
        {
          v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v42, 0x646469727265766FLL, 0xEA00000000006E65, 0);
          v49 = swift_bridgeObjectRelease();
          v50 = v69;
          if ((v51 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v25 = type metadata accessor for REMJSONDeserializationError(0);
            v63 = sub_1002A222C();
            swift_allocError(v25, v63, 0, 0);
            v65 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v64, enum case for REMJSONDeserializationError.invalidData(_:), v25);
            swift_willThrow(v65);
            (*(void (**)(char *, uint64_t))(v79 + 8))(v35, v30);
            return v25;
          }
        }
        v53 = v67;
        v52 = v68;
        (*(void (**)(char *, _QWORD, uint64_t, __n128))(v67 + 104))(v50, enum case for Dictionary<>.DeserializableValueType.arrayOfStrings<A, B><A1>(_:), v68, v49);
        v54 = sub_10001A630((uint64_t *)&unk_10083AE10);
        Dictionary<>.deserializeRequired<A>(key:valueType:)(0x73656C61636F6CLL, 0xE700000000000000, v50, v37, v54);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
        swift_bridgeObjectRelease();
        v55 = v80;
        v56 = v80[2];
        if (v56)
        {
          v82 = v30;
          v80 = _swiftEmptyArrayStorage;
          sub_1001C23E0(0, v56, 0);
          v45 = v80;
          v78 = (uint64_t)v55;
          v57 = v55 + 5;
          v58 = v66;
          do
          {
            v60 = *(v57 - 1);
            v59 = *v57;
            swift_bridgeObjectRetain(*v57);
            Locale.init(identifier:)(v60, v59);
            v80 = v45;
            v62 = v45[2];
            v61 = v45[3];
            if (v62 >= v61 >> 1)
            {
              sub_1001C23E0(v61 > 1, v62 + 1, 1);
              v45 = v80;
            }
            v57 += 2;
            v45[2] = v62 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))((unint64_t)v45+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v62, v58, v72);
            --v56;
          }
          while (v56);
          v44 = swift_bridgeObjectRelease();
          v30 = v82;
        }
        else
        {
          v44 = swift_bridgeObjectRelease();
          v45 = _swiftEmptyArrayStorage;
        }
      }
      v46 = *(void (**)(char *, char *, uint64_t, __n128))(v79 + 32);
      v47 = v70;
      v46(v70, v35, v30, v44);
      v48 = type metadata accessor for RDSecondaryGroceryLocalesInfo(0);
      v25 = swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
      ((void (*)(uint64_t, char *, uint64_t))v46)(v25 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate, v47, v30);
      *(_QWORD *)(v25 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales) = v45;
    }
    return v25;
  }
  if (v24 == enum case for REMJSONType.jsonArray(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v20 + 96))(v23, v19);
    swift_bridgeObjectRelease();
    v25 = type metadata accessor for REMJSONDeserializationError(0);
    v27 = sub_1002A222C();
    swift_allocError(v25, v27, 0, 0);
    v29 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v28, enum case for REMJSONDeserializationError.invalidData(_:), v25);
    swift_willThrow(v29);
    return v25;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v19, v19);
  __break(1u);
  return result;
}

uint64_t sub_1004B0824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084C978);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084C978);
  if (qword_100837668 != -1)
    swift_once(&qword_100837668, sub_1004A1918);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872118);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1004B08B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  unsigned int v55;
  char v56;
  objc_class *v57;
  _BYTE *v58;
  id v59;
  void *v60;
  _QWORD *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  char *v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int64_t v108;
  char *v109;
  uint64_t v110;
  __n128 v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  objc_super v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  _QWORD v121[3];
  char v122[16];
  uint64_t v123;
  uint64_t v124;

  v6 = dispatch thunk of Collection.count.getter(a2, a3);
  v7 = sub_10001A630(&qword_10083BE90);
  v123 = Dictionary.init(minimumCapacity:)(v6, &type metadata for String, v7, &protocol witness table for String);
  v8 = sub_10001A630(&qword_10084CA48);
  v9 = a2;
  v10 = 0;
  Sequence.reduce<A>(into:_:)(&v118, &v123, sub_1004B2068, v3, v9, v8, *(_QWORD *)(a3 + 8));
  v11 = v118;
  v12 = swift_bridgeObjectRetain(v118);
  v13 = sub_1001E927C(v12);
  swift_bridgeObjectRelease(v11);
  v23 = sub_1004B1CD0(v13);
  swift_release(v13);
  v118 = v23;
  KeyPath = swift_getKeyPath(&unk_1006BECA8);
  v25 = swift_getKeyPath(&unk_1006BECD8);
  v26 = sub_10001A630(&qword_10083D590);
  v27 = sub_10031FFA8();
  v28 = Sequence.compactIndexBy<A, B>(key:value:)(KeyPath, v25, v26, v27, &protocol witness table for String);
  v29 = v23;
  v30 = v28;
  swift_bridgeObjectRelease(v29);
  swift_release(KeyPath);
  v31 = swift_release(v25);
  __chkstk_darwin(v31);
  v100[2] = v30;
  v101 = v3;
  v106 = sub_1004B2A58(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_1004B2088, (uint64_t)v100);
  v32 = swift_bridgeObjectRelease(v11);
  v33 = 0;
  v34 = *(_QWORD *)(v30 + 64);
  v103 = v30 + 64;
  v35 = 1 << *(_BYTE *)(v30 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & v34;
  v104 = (unint64_t)(v35 + 63) >> 6;
  v32.n128_u64[0] = 136446210;
  v111 = v32;
  v109 = (char *)&type metadata for Any + 8;
  v102 = v3;
  v105 = v30;
  while (1)
  {
    if (v37)
    {
      v107 = (v37 - 1) & v37;
      v38 = __clz(__rbit64(v37)) | (v33 << 6);
      v39 = v106;
    }
    else
    {
      v40 = v33 + 1;
      v39 = v106;
      if (__OFADD__(v33, 1))
        goto LABEL_68;
      if (v40 >= v104)
      {
LABEL_65:
        swift_release(v106);
        swift_release(v30);
        return;
      }
      v41 = *(_QWORD *)(v103 + 8 * v40);
      ++v33;
      if (!v41)
      {
        v33 = v40 + 1;
        if (v40 + 1 >= v104)
          goto LABEL_65;
        v41 = *(_QWORD *)(v103 + 8 * v33);
        if (!v41)
        {
          v33 = v40 + 2;
          if (v40 + 2 >= v104)
            goto LABEL_65;
          v41 = *(_QWORD *)(v103 + 8 * v33);
          if (!v41)
          {
            v42 = v40 + 3;
            if (v42 >= v104)
              goto LABEL_65;
            v41 = *(_QWORD *)(v103 + 8 * v42);
            if (!v41)
            {
              while (1)
              {
                v33 = v42 + 1;
                if (__OFADD__(v42, 1))
                  goto LABEL_69;
                if (v33 >= v104)
                  goto LABEL_65;
                v41 = *(_QWORD *)(v103 + 8 * v33);
                ++v42;
                if (v41)
                  goto LABEL_23;
              }
            }
            v33 = v42;
          }
        }
      }
LABEL_23:
      v107 = (v41 - 1) & v41;
      v38 = __clz(__rbit64(v41)) + (v33 << 6);
    }
    v108 = v33;
    v43 = *(void **)(*(_QWORD *)(v30 + 56) + 8 * v38);
    if (*(_QWORD *)(v39 + 16))
    {
      v44 = v39;
      v45 = *(_QWORD *)(v30 + 48) + 16 * v38;
      v10 = *(void **)v45;
      v46 = *(_QWORD *)(v45 + 8);
      swift_bridgeObjectRetain(v46);
      v47 = v43;
      v48 = sub_10001A6DC((uint64_t)v10, v46);
      if ((v49 & 1) != 0)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v48);
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRelease(v46);
        goto LABEL_30;
      }
      swift_bridgeObjectRelease(v46);
    }
    else
    {
      v51 = v43;
    }
    v50 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_30:
    v113 = v43;
    if ((unint64_t)v50 >> 62)
      break;
    v52 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v52)
      goto LABEL_32;
LABEL_7:

    swift_bridgeObjectRelease(v50);
    v30 = v105;
    v33 = v108;
    v37 = v107;
  }
  if (v50 < 0)
    v99 = v50;
  else
    v99 = v50 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v50);
  v52 = _CocoaArrayWrapper.endIndex.getter(v99);
  swift_bridgeObjectRelease(v50);
  if (!v52)
    goto LABEL_7;
LABEL_32:
  if (v52 >= 1)
  {
    v53 = 0;
    v112 = *(void **)(v102 + 16);
    v115 = v52;
    v116 = v50 & 0xC000000000000001;
    v114 = v50;
    while (1)
    {
      if (v116)
        v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v53, v50);
      else
        v54 = *(id *)(v50 + 8 * v53 + 32);
      v10 = v54;
      v55 = objc_msgSend(v54, "activityTypeRawValue");
      if (v55 == 2)
      {
        v56 = 0;
      }
      else
      {
        if ((unsigned __int16)v55 != 3)
        {
          v76 = objc_msgSend(v10, "activityTypeRawValue");
          v72 = 0;
          v75 = 0;
          if (v76 >= 6)
            v70 = 6;
          else
            v70 = qword_1006BECF8[v76];
          goto LABEL_54;
        }
        v56 = 1;
      }
      v57 = (objc_class *)type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter();
      v58 = objc_allocWithZone(v57);
      v60 = v112;
      v59 = v113;
      *(_QWORD *)&v58[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_reminder] = v113;
      v58[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_field] = v56;
      *(_QWORD *)&v58[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_storeObjectContext] = v60;
      v61 = &v58[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_onlySpecificCanonicalName];
      *v61 = 0;
      v61[1] = 0;
      v62 = objc_allocWithZone((Class)RDPersistentStoreLookupForREMCDObject);
      v63 = v59;
      v64 = v60;
      v65 = v63;
      v66 = v64;
      v67 = v58;
      v68 = objc_msgSend(v62, "init:", v65);
      *(_QWORD *)&v67[OBJC_IVAR____TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter_persistentStoreLookup] = v68;

      v117.receiver = v67;
      v117.super_class = v57;
      v69 = objc_msgSendSuper2(&v117, "init");

      v70 = sub_10012B28C();
      v72 = v71;
      v74 = v73;

      if (!(v74 >> 6))
      {
        if (qword_1008376F0 != -1)
          swift_once(&qword_1008376F0, sub_1004B0824);
        v77 = type metadata accessor for Logger(0);
        sub_10001AAA8(v77, (uint64_t)qword_10084C978);
        sub_10013140C(v70, v72, v74);
        v78 = sub_10013140C(v70, v72, v74);
        v79 = Logger.logObject.getter(v78);
        v80 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v79, v80))
        {
          v81 = swift_slowAlloc(12, -1);
          v110 = swift_slowAlloc(32, -1);
          v123 = v110;
          *(_DWORD *)v81 = v111.n128_u32[0];
          v118 = v70;
          v119 = v72;
          v120 = v74;
          v82 = sub_1001664A8();
          v83 = Error.rem_errorDescription.getter(&type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError, v82);
          v85 = v84;
          *(_QWORD *)(v81 + 4) = sub_10001A820(v83, v84, &v123);
          swift_bridgeObjectRelease(v85);
          sub_10016648C(v70, v72, v74);
          sub_10016648C(v70, v72, v74);
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: Error autoconverting hashtags. Deleting activity anyway {error: %{public}s}", (uint8_t *)v81, 0xCu);
          v86 = v110;
          swift_arrayDestroy(v110, 1, v109);
          swift_slowDealloc(v86, -1, -1);
          swift_slowDealloc(v81, -1, -1);
        }
        else
        {
          sub_10016648C(v70, v72, v74);
          sub_10016648C(v70, v72, v74);
        }

        v50 = v114;
        objc_msgSend(v66, "deleteObject:", v10);

        sub_10016648C(v70, v72, v74);
        v52 = v115;
        goto LABEL_35;
      }
      v50 = v114;
      v52 = v115;
      if (v74 >> 6 == 1)
      {
        v75 = v74 & 0x3F;
LABEL_54:
        if (qword_1008376F0 != -1)
          swift_once(&qword_1008376F0, sub_1004B0824);
        v87 = type metadata accessor for Logger(0);
        sub_10001AAA8(v87, (uint64_t)qword_10084C978);
        sub_10013140C(v70, v72, v75);
        v88 = sub_10013140C(v70, v72, v75);
        v89 = Logger.logObject.getter(v88);
        v90 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v89, v90))
        {
          v91 = swift_slowAlloc(12, -1);
          v92 = swift_slowAlloc(32, -1);
          v123 = v92;
          *(_DWORD *)v91 = v111.n128_u32[0];
          v118 = v70;
          v119 = v72;
          v120 = v75;
          v93 = sub_1001664A8();
          v94 = Error.rem_errorDescription.getter(&type metadata for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.AutoConversionError, v93);
          v96 = v95;
          *(_QWORD *)(v91 + 4) = sub_10001A820(v94, v95, &v123);
          swift_bridgeObjectRelease(v96);
          sub_100131448(v70, v72, v75);
          sub_100131448(v70, v72, v75);
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: Error autoconverting hashtags. Not deleting activity {error: %{public}s}", (uint8_t *)v91, 0xCu);
          swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
          v97 = v92;
          v50 = v114;
          swift_slowDealloc(v97, -1, -1);
          v98 = v91;
          v52 = v115;
          swift_slowDealloc(v98, -1, -1);

          sub_100131448(v70, v72, v75);
        }
        else
        {

          sub_100131448(v70, v72, v75);
          sub_100131448(v70, v72, v75);
          sub_100131448(v70, v72, v75);

        }
        goto LABEL_35;
      }
      objc_msgSend(v66, "deleteObject:", v10);

LABEL_35:
      if (v52 == ++v53)
        goto LABEL_7;
    }
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  swift_once(&qword_1008376F0, sub_1004B0824);
  v14 = type metadata accessor for Logger(0);
  sub_10001AAA8(v14, (uint64_t)qword_10084C978);
  swift_errorRetain(v10);
  v15 = swift_errorRetain(v10);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v118 = v19;
    *(_DWORD *)v18 = 136446210;
    swift_getErrorValue(v10, v122, v121);
    v20 = Error.rem_errorDescription.getter(v121[1], v121[2]);
    v22 = v21;
    v123 = sub_10001A820(v20, v21, &v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124);
    swift_bridgeObjectRelease(v22);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: CoreData error fetching REMCDReminders: {error: %{public}s}", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
}

void sub_1004B1400(_QWORD *a1, id *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  uint8_t *v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)&v51 - v15;
  v17 = *a2;
  v18 = objc_msgSend(*a2, "ckIdentifier", v14);
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

    v23 = *a1;
    if (*(_QWORD *)(*a1 + 16))
    {
      swift_bridgeObjectRetain(v22);
      v24 = sub_10001A6DC(v20, v22);
      if ((v25 & 1) != 0)
      {
        v26 = *(_QWORD **)(*(_QWORD *)(v23 + 56) + 8 * v24);
        swift_bridgeObjectRetain(v26);
      }
      else
      {
        v26 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      v26 = _swiftEmptyArrayStorage;
    }
    v57 = (uint64_t)v26;
    v36 = v17;
    swift_bridgeObjectRetain(v26);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
    v39 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v38 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v39 >= v38 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1);
    v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v36);
    specialized Array._endMutation()(v40);
    v41 = v57;
    swift_bridgeObjectRelease(v26);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v57 = *a1;
    *a1 = 0x8000000000000000;
    sub_10028EA80(v41, v20, v22, isUniquelyReferenced_nonNull_native);
    v43 = *a1;
    *a1 = v57;
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v43);
  }
  else
  {
    v53 = v9;
    v54 = a3;
    if (qword_1008376F0 != -1)
      swift_once(&qword_1008376F0, sub_1004B0824);
    v27 = type metadata accessor for Logger(0);
    sub_10001AAA8(v27, (uint64_t)qword_10084C978);
    v28 = v17;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      v31 = v7;
      v52 = v30;
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = swift_slowAlloc(32, -1);
      v57 = v51;
      *(_DWORD *)v32 = 136446210;
      v33 = objc_msgSend(v28, "uuidForChangeTracking");
      if (v33)
      {
        v34 = v33;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

        v35 = 0;
      }
      else
      {
        v35 = 1;
      }
      v45 = v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v12, v35, 1, v6);
      sub_1000F2CE4((uint64_t)v12, (uint64_t)v16);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v16, 1, v6))
      {
        sub_10011E85C((uint64_t)v16);
        v46 = 0xE90000000000003ELL;
        v47 = 0x64697575206F6E3CLL;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v45, v16, v6);
        v48 = sub_10011E85C((uint64_t)v16);
        v47 = UUID.uuidString.getter(v48);
        v46 = v49;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v45, v6);
      }
      v44 = v54;
      v55 = sub_10001A820(v47, v46, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);

      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v52, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: REMCKSharedEntitySyncActivity[%{public}s] did not have a ckIdentifier; deleting",
        v32,
        0xCu);
      v50 = v51;
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      v44 = v54;
    }
    objc_msgSend(*(id *)(v44 + 16), "deleteObject:", v28);
  }
}

void sub_1004B1878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;

  v56 = a2;
  v53 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v46 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v52 = (uint64_t)&v44 - v15;
  if (*(_QWORD *)(a4 + 16))
  {
    swift_bridgeObjectRetain(a4);
    sub_10001A6DC(a1, v56);
    v17 = v16;
    swift_bridgeObjectRelease(a4);
    if ((v17 & 1) != 0)
      return;
  }
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v43 = a3;
    else
      v43 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v18 = _CocoaArrayWrapper.endIndex.getter(v43);
    if (v18)
      goto LABEL_5;
LABEL_26:
    swift_bridgeObjectRelease(a3);
    return;
  }
  v18 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v19 = swift_bridgeObjectRetain(a3);
  if (!v18)
    goto LABEL_26;
LABEL_5:
  if (v18 >= 1)
  {
    v20 = 0;
    v21 = *(void **)(a5 + 16);
    v54 = a3 & 0xC000000000000001;
    v55 = v21;
    v19.n128_u64[0] = 136446466;
    v48 = v19;
    v47 = (char *)&type metadata for Any + 8;
    v50 = a1;
    v51 = a3;
    v45 = v13;
    v49 = v18;
    do
    {
      if (v54)
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, a3);
      else
        v22 = *(id *)(a3 + 8 * v20 + 32);
      v23 = v22;
      if (qword_1008376F0 != -1)
        swift_once(&qword_1008376F0, sub_1004B0824);
      v24 = type metadata accessor for Logger(0);
      sub_10001AAA8(v24, (uint64_t)qword_10084C978);
      v25 = v23;
      swift_bridgeObjectRetain_n(v56, 2);
      v26 = v25;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc(22, -1);
        v30 = swift_slowAlloc(64, -1);
        v57 = v30;
        *(_DWORD *)v29 = v48.n128_u32[0];
        v31 = objc_msgSend(v26, "uuidForChangeTracking");
        if (v31)
        {
          v32 = v31;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

          v33 = 0;
        }
        else
        {
          v33 = 1;
        }
        v34 = v53;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v13, v33, 1, v53);
        v35 = v52;
        sub_1000F2CE4((uint64_t)v13, v52);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v35, 1, v34))
        {
          sub_10011E85C(v35);
          v36 = 0xE90000000000003ELL;
          v37 = 0x646975752D6F6E3CLL;
        }
        else
        {
          v38 = v46;
          (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v46, v35, v34);
          v39 = sub_10011E85C(v35);
          v37 = UUID.uuidString.getter(v39);
          v36 = v40;
          v41 = v38;
          v13 = v45;
          (*(void (**)(char *, uint64_t))(v9 + 8))(v41, v53);
        }
        *(_QWORD *)(v29 + 4) = sub_10001A820(v37, v36, &v57);

        swift_bridgeObjectRelease(v36);
        *(_WORD *)(v29 + 12) = 2082;
        v42 = v56;
        swift_bridgeObjectRetain(v56);
        *(_QWORD *)(v29 + 14) = sub_10001A820(v50, v42, &v57);
        swift_bridgeObjectRelease_n(v42, 3);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "#️⃣ RDNewlySharedToMeTagAutoConvertRunner: REMCKSharedEntitySyncActivity[%{public}s] had ckIdentifier[%{public}s] that did not correspond to a reminder; deleting activity",
          (uint8_t *)v29,
          0x16u);
        swift_arrayDestroy(v30, 2, v47);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        a3 = v51;
        v18 = v49;
      }
      else
      {

        swift_bridgeObjectRelease_n(v56, 2);
      }
      ++v20;
      objc_msgSend(v55, "deleteObject:", v26);

    }
    while (v18 != v20);
    goto LABEL_26;
  }
  __break(1u);
}

uint64_t sub_1004B1CD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  Class v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v4 = a1;
  swift_storeEnumTagMultiPayload(v4, v5, 42);
  swift_bridgeObjectRetain(a1);
  sub_10000D2C0();
  v7 = v6;
  sub_1000CACA8((uint64_t)v4);
  v8 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v9 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "entity");
  objc_msgSend(v9, "setEntity:", v10);

  objc_msgSend(v9, "setAffectedStores:", 0);
  objc_msgSend(v9, "setPredicate:", v7);

  v11 = sub_10001A630((uint64_t *)&unk_100839E80);
  v12 = swift_allocObject(v11, 160, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1006A5130;
  strcpy((char *)(v12 + 32), "ckIdentifier");
  *(_BYTE *)(v12 + 45) = 0;
  *(_WORD *)(v12 + 46) = -5120;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = 0x696669746E656469;
  *(_QWORD *)(v12 + 72) = 0xEA00000000007265;
  *(_QWORD *)(v12 + 88) = &type metadata for String;
  strcpy((char *)(v12 + 96), "titleDocument");
  *(_WORD *)(v12 + 110) = -4864;
  *(_QWORD *)(v12 + 152) = &type metadata for String;
  *(_QWORD *)(v12 + 120) = &type metadata for String;
  strcpy((char *)(v12 + 128), "notesDocument");
  *(_WORD *)(v12 + 142) = -4864;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setPropertiesToFetch:", isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

  v14 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setRelationshipKeyPathsForPrefetching:", v14);

  v15 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1006A7330;
  v17 = objc_allocWithZone((Class)NSSortDescriptor);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "initWithKey:ascending:", v18, 0);

  *(_QWORD *)(v16 + 32) = v19;
  v26 = v16;
  specialized Array._endMutation()(v20);
  v21 = v26;
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v22 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setSortDescriptors:", v22, swift_bridgeObjectRelease(v21).n128_f64[0]);

  v23 = NSManagedObjectContext.fetch<A>(_:)(v9, v8);
  return v23;
}

uint64_t type metadata accessor for RDNewlySharedToMeTagAutoConvertRunner()
{
  return objc_opt_self(_TtC7remindd37RDNewlySharedToMeTagAutoConvertRunner);
}

void sub_1004B2048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1004B08B4(a1, a2, a3);
}

void sub_1004B2068(_QWORD *a1, id *a2)
{
  uint64_t v2;

  sub_1004B1400(a1, a2, v2);
}

void sub_1004B2088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1004B1878(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

Swift::Int sub_1004B2090(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B2320(a1, a2, a3, a4, (uint64_t *)&unk_100844160);
}

uint64_t sub_1004B209C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10001A630(&qword_1008445B0);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_43;
      if (v15 >= a2)
        return v9;
      v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = a1[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = a1[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_44;
                if (v11 >= a2)
                  return v9;
                v16 = a1[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = 8 * v14;
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + v18);
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    v21 = (v19 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? v19 : 0;
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v21);
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = 8 * v25;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v30) = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v30) = v20;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

Swift::Int sub_1004B2308(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B25C0(a1, a2, a3, a4, &qword_100844120);
}

Swift::Int sub_1004B2314(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B2320(a1, a2, a3, a4, (uint64_t *)&unk_1008436C0);
}

Swift::Int sub_1004B2320(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t *v34;
  uint64_t v35;
  _QWORD v36[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v5 = a4;
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v5;
  }
  sub_10001A630(a5);
  result = static _DictionaryStorage.allocate(capacity:)(v6);
  v10 = result;
  v34 = a1;
  v35 = a2;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 64;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
    }
    else
    {
      v16 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_40;
      if (v16 >= v35)
        return v10;
      v17 = v34[v16];
      ++v12;
      if (!v17)
      {
        v12 = v16 + 1;
        if (v16 + 1 >= v35)
          return v10;
        v17 = v34[v12];
        if (!v17)
        {
          v12 = v16 + 2;
          if (v16 + 2 >= v35)
            return v10;
          v17 = v34[v12];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v35)
              return v10;
            v17 = v34[v18];
            if (!v17)
            {
              while (1)
              {
                v12 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_41;
                if (v12 >= v35)
                  return v10;
                v17 = v34[v12];
                ++v18;
                if (v17)
                  goto LABEL_24;
              }
            }
            v12 = v18;
          }
        }
      }
LABEL_24:
      v11 = (v17 - 1) & v17;
      v15 = __clz(__rbit64(v17)) + (v12 << 6);
    }
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v15);
    Hasher.init(_seed:)(v36, *(_QWORD *)(v10 + 40));
    swift_bridgeObjectRetain(v20);
    v23 = v22;
    String.hash(into:)(v36, v21, v20);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v10 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v31 == -1);
      v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v27);
    *v32 = v21;
    v32[1] = v20;
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v27) = v23;
    ++*(_QWORD *)(v10 + 16);
    if (__OFSUB__(v6--, 1))
      break;
    if (!v6)
      return v10;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_1004B25B4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1004B25C0(a1, a2, a3, a4, &qword_1008445B8);
}

Swift::Int sub_1004B25C0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v33;
  uint64_t v34;
  _QWORD v35[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v5 = a4;
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v5;
  }
  sub_10001A630(a5);
  result = static _DictionaryStorage.allocate(capacity:)(v6);
  v10 = result;
  v33 = a1;
  v34 = a2;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 64;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
    }
    else
    {
      v16 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_40;
      if (v16 >= v34)
        return v10;
      v17 = v33[v16];
      ++v12;
      if (!v17)
      {
        v12 = v16 + 1;
        if (v16 + 1 >= v34)
          return v10;
        v17 = v33[v12];
        if (!v17)
        {
          v12 = v16 + 2;
          if (v16 + 2 >= v34)
            return v10;
          v17 = v33[v12];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v34)
              return v10;
            v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                v12 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_41;
                if (v12 >= v34)
                  return v10;
                v17 = v33[v12];
                ++v18;
                if (v17)
                  goto LABEL_24;
              }
            }
            v12 = v18;
          }
        }
      }
LABEL_24:
      v11 = (v17 - 1) & v17;
      v15 = __clz(__rbit64(v17)) + (v12 << 6);
    }
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
    Hasher.init(_seed:)(v35, *(_QWORD *)(v10 + 40));
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v35, v21, v20);
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v10 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v30 == -1);
      v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    v31 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v26);
    *v31 = v21;
    v31[1] = v20;
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v26) = v22;
    ++*(_QWORD *)(v10 + 16);
    if (__OFSUB__(v6--, 1))
      break;
    if (!v6)
      return v10;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_1004B2854(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, __n128))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v24 = 0;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v26 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    v18 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v26)
      goto LABEL_24;
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v6;
    if (!v19)
    {
      v6 = v18 + 1;
      if (v18 + 1 >= v26)
        goto LABEL_24;
      v19 = *(_QWORD *)(v25 + 8 * v6);
      if (!v19)
      {
        v6 = v18 + 2;
        if (v18 + 2 >= v26)
          goto LABEL_24;
        v19 = *(_QWORD *)(v25 + 8 * v6);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v9 = (v19 - 1) & v19;
    v11 = __clz(__rbit64(v19)) + (v6 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v14);
    v16 = swift_bridgeObjectRetain(v15);
    v17 = a4(v13, v14, v15, v16);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v15);
    if ((v17 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        sub_1004B25C0(a1, a2, v24, a3, &qword_1008440D8);
        return;
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v26)
    goto LABEL_24;
  v19 = *(_QWORD *)(v25 + 8 * v20);
  if (v19)
  {
    v6 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v6 >= v26)
      goto LABEL_24;
    v19 = *(_QWORD *)(v25 + 8 * v6);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1004B2A58(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, __n128), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    sub_1004B2854((unint64_t *)((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0)), v10, v6, a2);
    if (v3)
      swift_willThrow(v12);
    else
      return v12;
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v11, -1);
    bzero(v13, v11);
    sub_1004B2854((unint64_t *)v13, v10, v6, a2);
    a3 = v14;
    swift_slowDealloc(v13, -1, -1);
  }
  return a3;
}

void sub_1004B2BC8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10001A630((uint64_t *)&unk_100839C80);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1004B2C6C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  KeyPath = swift_getKeyPath(&unk_1006BEEF8);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 >= 0)
      v27 = v1 & 0xFFFFFFFFFFFFFF8;
    else
      v27 = v1;
    swift_bridgeObjectRetain(v1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v27);
    sub_1004B4830((id)v1, v0);
  }
  else
  {
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    *(_QWORD *)(v4 - 112) = KeyPath;
    *(_DWORD *)(v4 - 100) = v0;
    *(_QWORD *)(v4 - 96) = _swiftEmptyArrayStorage;
    sub_1001C1BB8(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
      __break(1u);
      JUMPOUT(0x1004B3298);
    }
    v8 = 0;
    v7 = *(_QWORD **)(v4 - 96);
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v1);
      else
        v9 = *(id *)(v1 + 8 * v8 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

      v12 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v2, 0, 1, v12);

      *(_QWORD *)(v4 - 96) = v7;
      v14 = v7[2];
      v13 = v7[3];
      if (v14 >= v13 >> 1)
      {
        sub_1001C1BB8(v13 > 1, v14 + 1, 1);
        v7 = *(_QWORD **)(v4 - 96);
      }
      ++v8;
      v7[2] = v14 + 1;
      sub_1000F2CE4(v2, (uint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v14);
    }
    while (v6 != v8);
    v0 = *(_DWORD *)(v4 - 100);
    KeyPath = *(_QWORD *)(v4 - 112);
  }
  v21 = sub_100341928(KeyPath, (uint64_t)v7);
  v22 = swift_release(KeyPath);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
  v23 = *(_QWORD *)(v4 - 88);
  v25 = *(_QWORD *)(v23 + 16);
  v24 = *(_QWORD *)(v23 + 24);
  if (v25 >= v24 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1);
  v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v21);
  specialized Array._endMutation()(v26);
  if ((v0 & 1) != 0)
  {
    v15 = sub_1000153F4(0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
    v16 = *(_QWORD *)(v4 - 88);
    v18 = *(_QWORD *)(v16 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    if (v18 >= v17 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1);
    v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v15);
    specialized Array._endMutation()(v19);
  }
  return sub_10000D2BC(*(_QWORD *)(v4 - 88));
}

uint64_t sub_1004B32B0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_parentSavedReminderIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1004B32CC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setParentSavedReminderIdentifier_);
}

void sub_1004B32F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = objc_msgSend(*a1, "metadata");
  if (v3)
  {
    v4 = v3;
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1004B3354(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;
  Class v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v4 = isa;
  objc_msgSend(v2, "setMetadata:");

}

void sub_1004B33B8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v8;
  objc_class *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  id v19;
  Swift::String v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26[40];
  objc_class *v27;

  v5 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v5, v26);
  *(_OWORD *)(inited + 16) = xmmword_1006A7330;
  KeyPath = swift_getKeyPath(&unk_1006BED40);
  *(_QWORD *)(inited + 32) = KeyPath;
  v24 = inited;
  specialized Array._endMutation()(KeyPath);
  v8 = inited;
  v27 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001C1B0C(0, 1, 0);
  v9 = v27;
  v22 = a1;
  if ((inited & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, inited);
    v11 = v10;
  }
  else
  {
    v11 = *(_QWORD *)(inited + 32);
    v10 = swift_retain();
  }
  v12 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(v10);
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    swift_release(v11);
    v17 = *((_QWORD *)v9 + 2);
    v16 = *((_QWORD *)v9 + 3);
    if (v17 >= v16 >> 1)
    {
      sub_1001C1B0C(v16 > 1, v17 + 1, 1);
      v9 = v27;
    }
    *((_QWORD *)v9 + 2) = v17 + 1;
    v18 = (_QWORD *)((char *)v9 + 16 * v17);
    v18[4] = v14;
    v18[5] = v15;
    swift_bridgeObjectRelease(v8);
    v19 = sub_1004B4340(v22, a2, 1, v9, 0);
    swift_release(v9);
    if (!v2)
    {
      sub_10021A608();

    }
  }
  else
  {
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v20._object = (void *)0x80000001006F8C10;
    v20._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v20);
    v23 = v11;
    v21 = sub_10001A630(&qword_1008437F0);
    _print_unlocked<A, B>(_:_:)(&v23, &v24, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v24, v25, "remindd/TypedPredicate.swift", 28, 2, 19, 0);
    __break(1u);
  }
}

uint64_t sub_1004B35E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_10009EF3C(v0, qword_10084CA50);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084CA50);
  if (qword_100837688 != -1)
    swift_once(&qword_100837688, sub_1004A1988);
  v2 = sub_10001AAA8(v0, (uint64_t)qword_100872178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1004B3678@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v4;
  id v5;
  id result;

  v4 = *a1;
  v5 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  objc_msgSend(v5, "templatePublicLinkTTL");

  result = sub_100157260(v4);
  if (!v2)
    *a2 = result;
  return result;
}

const char *sub_1004B36EC()
{
  return "metadata";
}

uint64_t sub_1004B3700(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  char v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  void *ObjCClassFromMetadata;
  Class isa;
  id v41;
  uint64_t v42;
  char v43;
  id v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t result;
  uint64_t v49;
  char *v50;
  uint64_t (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t **v61;
  char v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  id v67;
  id v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t inited;
  char *v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  id v104;
  uint64_t v105;
  void *v106;
  void *v107;
  Swift::String v108;
  Swift::String v109;
  NSString v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  id v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  unint64_t v125;
  uint64_t (*v126)(char *, char *, uint64_t);
  _QWORD *v127;
  id v128;
  unint64_t v129;
  _QWORD *v130;
  char v131[24];
  uint64_t v132;
  unint64_t v133;
  void *v134;

  v122 = type metadata accessor for Logger(0);
  v120 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v115 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v117 = (char *)&v113 - v8;
  __chkstk_darwin(v9);
  v119 = (char *)&v113 - v10;
  v11 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v11);
  v13 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v124 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v123 = (char *)&v113 - v18;
  v134 = &_swiftEmptySetSingleton;
  v132 = (uint64_t)&_swiftEmptySetSingleton;
  v133 = (unint64_t)_swiftEmptyArrayStorage;
  v19 = (_QWORD *)(a1 >> 62);
  if (a1 >> 62)
  {
    if ((a1 & 0x8000000000000000) != 0)
      v82 = a1;
    else
      v82 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v20 = _CocoaArrayWrapper.endIndex.getter(v82);
  }
  else
  {
    v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
  }
  v125 = a1;
  v114 = a1 >> 62;
  v118 = a2;
  v116 = a3;
  if (v20)
  {
    if (v20 >= 1)
    {
      a3 = 0;
      v126 = (uint64_t (*)(char *, char *, uint64_t))(a1 & 0xC000000000000001);
      v127 = (_QWORD *)v20;
      while (1)
      {
        if (v126)
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a3, a1);
        else
          v21 = *(id *)(a1 + 8 * a3 + 32);
        v22 = v21;
        v23 = objc_msgSend(v21, "template");
        if (v23)
        {
          v24 = v23;
          v25 = objc_msgSend(v23, "remObjectID");
          if (v25)
          {
            v26 = v25;
            v27 = (uint64_t)v134;
            swift_bridgeObjectRetain(v134);
            v28 = sub_1001B23AC(v26, v27);
            swift_bridgeObjectRelease();
            if ((v28 & 1) == 0)
            {
              v29 = v26;
              sub_1002DB2CC((Swift::Int *)&v128, v29);

              v26 = v24;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
              v31 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v30 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v31 >= v30 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1);
              v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v26);
              specialized Array._endMutation()(v32);
              v24 = v29;
            }

            v24 = v26;
          }

          a1 = v125;
        }
        v33 = objc_msgSend(v22, "parentSavedReminderIdentifier");
        if (!v33)
          break;
        v34 = v33;
        v35 = v124;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

        v36 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
        v36(v13, v35, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
          goto LABEL_7;
        v37 = v123;
        v36(v123, v13, v14);
        v38 = type metadata accessor for REMCDSavedReminder();
        ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v38);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v41 = objc_msgSend(ObjCClassFromMetadata, "objectIDWithUUID:", isa);

        (*(void (**)(char *, uint64_t))(v15 + 8))(v37, v14);
        if (v41)
        {
          v42 = v132;
          swift_bridgeObjectRetain(v132);
          v43 = sub_1001B23AC(v41, v42);
          swift_bridgeObjectRelease();
          if ((v43 & 1) == 0)
          {
            v44 = v41;
            sub_1002DB2CC((Swift::Int *)&v128, v44);

            goto LABEL_9;
          }

        }
LABEL_8:

LABEL_9:
        if (v127 == (_QWORD *)++a3)
        {
          swift_bridgeObjectRelease();
          v19 = (_QWORD *)v133;
          goto LABEL_29;
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
LABEL_7:
      sub_10011E85C((uint64_t)v13);
      goto LABEL_8;
    }
    __break(1u);
LABEL_52:
    swift_once(&qword_1008376F8, sub_1004B35E8);
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  v19 = _swiftEmptyArrayStorage;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v19);
  v45 = (char *)v121;
  v47 = sub_1002A7334(v46);
  v13 = v45;
  v14 = v122;
  if (v45)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a3;
  }
  a3 = (uint64_t)v47;
  swift_bridgeObjectRelease();
  if (qword_1008376F8 != -1)
    goto LABEL_52;
LABEL_33:
  v49 = sub_10001AAA8(v14, (uint64_t)qword_10084CA50);
  v50 = v119;
  v51 = *(uint64_t (**)(char *, char *, uint64_t))(v120 + 16);
  v124 = (char *)v49;
  v126 = v51;
  v52 = ((uint64_t (*)(char *))v51)(v119);
  v128 = v19;
  __chkstk_darwin(v52);
  *(&v113 - 2) = (uint64_t)v50;
  v53 = sub_10001A630(&qword_100851900);
  v54 = sub_1000151B0(0, (unint64_t *)&unk_100844190, REMListStorage_ptr);
  v55 = sub_1000C4C0C(&qword_10083FB78, &qword_100851900);
  v56 = Sequence.map<A>(skippingError:_:)(sub_1004B4B04, &v113 - 4, sub_1004B3678, 0, v53, v54, v55);
  if (v13)
  {
    swift_errorRelease(v13);
    v127 = _swiftEmptyArrayStorage;
  }
  else
  {
    v127 = (_QWORD *)v56;
  }
  v57 = *(void (**)(char *, uint64_t))(v120 + 8);
  v57(v119, v14);
  swift_bridgeObjectRelease();
  v58 = v132;
  if ((v132 & 0xC000000000000001) != 0)
  {
    if (v132 < 0)
      v59 = v132;
    else
      v59 = v132 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v132);
    v60 = __CocoaSet.count.getter(v59);
    swift_bridgeObjectRelease();
    if (v60)
      goto LABEL_41;
  }
  else if (*(_QWORD *)(v132 + 16))
  {
LABEL_41:
    v61 = sub_1001E9108(v58);
    v62 = objc_msgSend(v118, "includeConcealed", swift_bridgeObjectRelease().n128_f64[0]) ^ 1;
    swift_bridgeObjectRetain(v61);
    sub_1004B2BC8(v63, v62);
    v65 = v64;
    v66 = type metadata accessor for REMCDSavedReminder();
    v67 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
    v68 = objc_msgSend((id)swift_getObjCClassFromMetadata(v66), "entity");
    objc_msgSend(v67, "setEntity:", v68);

    objc_msgSend(v67, "setAffectedStores:", 0);
    objc_msgSend(v67, "setPredicate:", v65);

    objc_msgSend(v67, "setPropertiesToFetch:", 0);
    objc_msgSend(v67, "setRelationshipKeyPathsForPrefetching:", 0);
    v69 = (_QWORD *)NSManagedObjectContext.fetch<A>(_:)(v67, v66);
    v123 = (char *)v57;
    swift_release_n(v61);

    goto LABEL_44;
  }
  v123 = (char *)v57;
  swift_bridgeObjectRelease();
  v69 = _swiftEmptyArrayStorage;
LABEL_44:
  v70 = type metadata accessor for REMSavedReminderStorageCDIngestor();
  inited = swift_initStackObject(v70, v131);
  v72 = v117;
  v73 = v118;
  *(_QWORD *)(inited + 16) = v118;
  v74 = v126(v72, v124, v122);
  v128 = v69;
  __chkstk_darwin(v74);
  *(&v113 - 2) = (uint64_t)v72;
  v75 = v73;
  v76 = sub_10001A630(&qword_1008519F0);
  v77 = sub_1000151B0(0, &qword_10083FEE8, REMReminderStorage_ptr);
  v78 = sub_1000C4C0C(&qword_10083FB60, &qword_1008519F0);
  v121 = inited;
  Sequence.map<A>(skippingError:_:)(sub_1004B4B10, &v113 - 4, sub_1003D6CD0, inited, v76, v77, v78);
  v79 = v122;
  ((void (*)(char *, uint64_t))v123)(v117, v122);
  swift_bridgeObjectRelease();
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v83 = a3;
    else
      v83 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v84 = _CocoaArrayWrapper.endIndex.getter(v83);
    swift_bridgeObjectRelease();
    v80 = v125;
    if (v84)
      goto LABEL_46;
  }
  else
  {
    v80 = v125;
    if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_46:
      v81 = v121;
      swift_setDeallocating(v121);

      return a3;
    }
  }
  v85 = swift_bridgeObjectRelease();
  if (v114)
  {
    if (v80 < 0)
      v87 = v80;
    else
      v87 = v80 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v80);
    v86 = _CocoaArrayWrapper.endIndex.getter(v87);
    v85 = swift_bridgeObjectRelease();
  }
  else
  {
    v86 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v88 = _swiftEmptyArrayStorage;
  if (!v86)
  {
LABEL_73:
    v98 = v115;
    v99 = ((uint64_t (*)(char *, char *, uint64_t, __n128))v126)(v115, v124, v79, v85);
    v128 = v88;
    __chkstk_darwin(v99);
    *(&v113 - 2) = (uint64_t)v98;
    v100 = sub_10001A630(&qword_10083FE60);
    v101 = sub_1000151B0(0, &qword_10083FF70, REMAccountStorage_ptr);
    v102 = sub_1000C4C0C((unint64_t *)&qword_100843190, &qword_10083FE60);
    a3 = Sequence.map<A>(skippingError:_:)(sub_1002A7AD0, &v113 - 4, sub_1002A6DFC, 0, v100, v101, v102);
    swift_release(v121);
    ((void (*)(char *, uint64_t))v123)(v115, v79);
    swift_bridgeObjectRelease();
    return a3;
  }
  v130 = _swiftEmptyArrayStorage;
  result = specialized ContiguousArray.reserveCapacity(_:)(v86);
  if ((v86 & 0x8000000000000000) == 0)
  {
    v89 = 0;
    v90 = v125 & 0xC000000000000001;
    while (v86 != v89)
    {
      if (v90)
        v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v89, v125);
      else
        v91 = *(id *)(v125 + 8 * v89 + 32);
      v92 = v91;
      v93 = objc_msgSend(v91, "account");
      if (!v93)
      {
        a3 = objc_opt_self(REMError);
        v128 = 0;
        v129 = 0xE000000000000000;
        _StringGuts.grow(_:)(42);
        *(_QWORD *)&v103 = swift_bridgeObjectRelease().n128_u64[0];
        v128 = (id)0xD000000000000027;
        v129 = 0x8000000100705AD0;
        v104 = objc_msgSend(v92, "description", v103);
        v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v107 = v106;

        v108._countAndFlagsBits = v105;
        v108._object = v107;
        String.append(_:)(v108);
        swift_bridgeObjectRelease();
        v109._countAndFlagsBits = 125;
        v109._object = (void *)0xE100000000000000;
        String.append(_:)(v109);
        v110 = String._bridgeToObjectiveC()();
        objc_msgSend((id)a3, "internalErrorWithDebugDescription:", v110, swift_bridgeObjectRelease().n128_f64[0]);

        swift_willThrow(v111);
        v112 = v130;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release(v121);
        swift_release(v112);
        return a3;
      }
      v94 = v93;
      ++v89;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v95);
      v96 = v130[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v96);
      v97 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v96, v94);
      result = specialized ContiguousArray._endMutation()(v97);
      if (v86 == v89)
      {
        v88 = v130;
        v79 = v122;
        goto LABEL_73;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1004B4340(void *a1, uint64_t a2, char a3, Class isa, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *log;
  id type;
  os_log_type_t typea;
  id v40;
  uint64_t v41;

  v10 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v11 + 32) = a1;
  v40 = (id)v11;
  specialized Array._endMutation()(v11);
  v12 = v40;
  type = a1;
  swift_bridgeObjectRetain(v40);
  sub_1004B2BC8(v13, a3 & 1);
  v15 = v14;
  v16 = type metadata accessor for REMCDSavedReminder();
  v17 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(v16), "entity");
  objc_msgSend(v17, "setEntity:", v18);

  objc_msgSend(v17, "setAffectedStores:", 0);
  objc_msgSend(v17, "setPredicate:", v15);

  if (isa)
  {
    v20 = sub_1001DFBD0((uint64_t)isa);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v19 = swift_bridgeObjectRelease(v20).n128_u64[0];
  }
  objc_msgSend(v17, "setPropertiesToFetch:", isa, v19);

  if (a5)
    a5 = (uint64_t)Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v17, "setRelationshipKeyPathsForPrefetching:", a5);

  v21 = NSManagedObjectContext.fetch<A>(_:)(v17, v16);
  swift_bridgeObjectRelease_n(v40, 2);

  if (!v5)
  {
    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0)
        v35 = v21;
      else
        v35 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      if (_CocoaArrayWrapper.endIndex.getter(v35))
      {
LABEL_9:
        if ((v21 & 0xC000000000000001) != 0)
        {
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
        }
        else
        {
          if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_30;
          }
          v24 = *(id *)(v21 + 32);
        }
        v12 = v24;
        swift_bridgeObjectRelease(v21);
        if ((unint64_t)v21 >> 62)
        {
          if (v21 < 0)
            v25 = v21;
          else
            v25 = v21 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v21);
          a5 = _CocoaArrayWrapper.endIndex.getter(v25);
          swift_bridgeObjectRelease(v21);
          if (a5 < 2)
            goto LABEL_14;
        }
        else
        {
          a5 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (a5 < 2)
          {
LABEL_14:
            swift_bridgeObjectRelease(v21);
            return v12;
          }
        }
        if (qword_1008376F8 == -1)
        {
LABEL_20:
          v26 = type metadata accessor for Logger(0);
          sub_10001AAA8(v26, (uint64_t)qword_10084CA50);
          v27 = type;
          swift_bridgeObjectRetain(v21);
          v29 = Logger.logObject.getter(v28);
          v30 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v29, v30))
          {
            typea = v30;
            v31 = swift_slowAlloc(22, -1);
            v32 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v31 = 138412546;
            v40 = v27;
            log = v29;
            v33 = v27;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
            *v32 = v27;

            *(_WORD *)(v31 + 12) = 2048;
            swift_bridgeObjectRelease(v21);
            v40 = (id)a5;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
            swift_bridgeObjectRelease(v21);
            _os_log_impl((void *)&_mh_execute_header, log, typea, "Found multiple instances of REMCDSavedReminder with identical objectID {objectID: %@, matches: %ld}", (uint8_t *)v31, 0x16u);
            v34 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v32, 1, v34);
            swift_slowDealloc(v32, -1, -1);
            swift_slowDealloc(v31, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v21, 2);
          }
          return v12;
        }
LABEL_30:
        swift_once(&qword_1008376F8, sub_1004B35E8);
        goto LABEL_20;
      }
    }
    else
    {
      v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v21);
      if (v23)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease_n(v21, 2);
    v36 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", type);
    swift_willThrow(v36);
  }
  return v12;
}

uint64_t sub_1004B47D0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_parentSavedReminderIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1004B47FC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_100839C80, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(void))&UUID._bridgeToObjectiveC(), (SEL *)&selRef_setParentSavedReminderIdentifier_);
}

double sub_1004B4830(id a1, unsigned __int8 a2)
{
  double result;

  switch(a2 >> 5)
  {
    case 0:
      *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:

      break;
    default:
      return result;
  }
  return result;
}

const char *sub_1004B4870()
{
  return "hasLocationTriggersOrVehicleEventTriggers";
}

id sub_1004B487C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "hasLocationTriggersOrVehicleEventTriggers");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1004B48AC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setHasLocationTriggersOrVehicleEventTriggers:", *a1);
}

const char *sub_1004B48C0()
{
  return "hasHashtags";
}

id sub_1004B48CC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "hasHashtags");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1004B48FC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setHasHashtags:", *a1);
}

uint64_t sub_1004B4910@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFFB4(a1, (SEL *)&selRef_displayDateDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1004B493C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  sub_1000CFE28(a1, a2, a3, a4, (uint64_t *)&unk_1008380D0, (uint64_t (*)(_QWORD))&type metadata accessor for Date, (uint64_t (*)(void))&Date._bridgeToObjectiveC(), (SEL *)&selRef_setDisplayDateDate_);
}

uint64_t sub_1004B4978(uint64_t a1, uint64_t a2, char a3, Class isa, Class a5)
{
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  double v15;
  _QWORD *v16;
  uint64_t v17;

  swift_bridgeObjectRetain(a1);
  sub_1004B2BC8(v9, a3 & 1);
  v11 = v10;
  v12 = type metadata accessor for REMCDSavedReminder();
  v13 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v12), "entity");
  objc_msgSend(v13, "setEntity:", v14);

  objc_msgSend(v13, "setAffectedStores:", 0);
  objc_msgSend(v13, "setPredicate:", v11);

  if (isa)
  {
    v16 = sub_1001DFBD0((uint64_t)isa);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v15 = swift_bridgeObjectRelease(v16).n128_u64[0];
  }
  objc_msgSend(v13, "setPropertiesToFetch:", isa, v15);

  if (a5)
    a5 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v13, "setRelationshipKeyPathsForPrefetching:", a5);

  v17 = NSManagedObjectContext.fetch<A>(_:)(v13, v12);
  swift_bridgeObjectRelease(a1);

  return v17;
}

uint64_t sub_1004B4B04(uint64_t a1, uint64_t a2)
{
  return sub_100380298(a2);
}

uint64_t sub_1004B4B10(uint64_t a1, uint64_t a2)
{
  return sub_1003D5CA0(a1, a2);
}

uint64_t sub_1004B4B18(uint64_t a1)
{
  uint64_t result;

  result = sub_10009FC50(&qword_10084CA88, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CompletedByDateBucketsInvocation, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CompletedByDateBucketsInvocation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1004B4B54(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  swift_isUniquelyReferenced_nonNull_native(*a1);
  if ((v3 & 1) == 0)
    v2 = (_QWORD *)sub_1001D60AC(v2);
  v4 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v4;
  sub_1004B6720(v5);
  *a1 = v2;
}

void sub_1004B4BBC(void *a1@<X1>, void (*a2)(char *, char *, uint64_t)@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  char *v51;
  __n128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  __n128 v69;
  char *v70;
  void *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  char *v81;
  BOOL v82;
  void (*v83)(char *, char *, uint64_t);
  int v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  uint64_t (*v94)(char *, char *, uint64_t, __n128);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  int64_t v99;
  int v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  __n128 v126;
  char *v127;
  void *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  char *v137;
  void (*v138)(char *, char *, uint64_t);
  char *v139;
  int v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t (*v149)(char *, char *, uint64_t, __n128);
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int64_t v154;
  int64_t v155;
  int v156;
  int64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t Configuration;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  void (*v205)(char *, char *, uint64_t);
  char *v206;
  char *v207;
  void *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  _QWORD *v222;

  v216 = (char *)a4;
  v208 = a3;
  v205 = a2;
  v195 = a5;
  v199 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel(0);
  v196 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v215 = (char *)&v183 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v210 = (char *)&v183 - v8;
  v9 = sub_10001A630(&qword_100839A98);
  __chkstk_darwin(v9);
  v194 = (uint64_t)&v183 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Day(0);
  v12 = *(_QWORD *)(v11 - 8);
  v219 = v11;
  v220 = v12;
  __chkstk_darwin(v11);
  v218 = (char *)&v183 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v221 = (char *)&v183 - v15;
  v17 = __chkstk_darwin(v16);
  v207 = (char *)&v183 - v18;
  v213 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket(0, v17);
  v209 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v201 = (char *)&v183 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v202 = (char *)&v183 - v21;
  __chkstk_darwin(v22);
  v206 = (char *)&v183 - v23;
  __chkstk_darwin(v24);
  v212 = (char *)&v183 - v25;
  v200 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch(0);
  v204 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v198 = (uint64_t *)((char *)&v183 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  v203 = (char *)&v183 - v28;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v29 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v31 = (char *)&v183 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for REMRemindersListDataView.Diff(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v183 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v38 = (char *)&v183 - v37;
  v39 = sub_10001A630(&qword_100839AA0);
  __chkstk_darwin(v39);
  v41 = (char *)&v183 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v44 = (char *)&v183 - v43;
  v214 = (uint64_t)a1;
  v45 = v217;
  v46 = sub_1004B82E0(a1, (uint64_t)v216);
  if (v45)
    return;
  v190 = v31;
  v191 = v29;
  v192 = v41;
  v188 = v35;
  v193 = v38;
  v189 = v33;
  v217 = v32;
  v47 = v46;
  swift_bridgeObjectRetain(v46);
  v48 = v214;
  v49 = v211;
  sub_1004B5C70(v47, (uint64_t)v44);
  v187 = v47;
  v50 = objc_msgSend(v49, "fetchResultTokenToDiffAgainst");
  sub_100493C24(v50, v48, (uint64_t)v193);
  v186 = 0;
  v185 = v44;

  v51 = v190;
  v53 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v52);
  v54 = v203;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter(v53);
  (*(void (**)(char *, uint64_t))(v191 + 8))(v51, Configuration);
  v55 = v204;
  v56 = v198;
  v57 = v200;
  (*(void (**)(uint64_t *, char *, uint64_t))(v204 + 16))(v198, v54, v200);
  v58 = (*(uint64_t (**)(uint64_t *, uint64_t))(v55 + 88))(v56, v57);
  if (v58 != enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    v61 = v199;
    v62 = v210;
    v63 = v215;
    v64 = v217;
    v65 = (uint64_t)v192;
    if (v58 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v55 + 96))(v56, v57);
      v117 = sub_10049C4C8(*v56, (uint64_t)v193, v214, v208, 0);
      v118 = _swiftEmptyArrayStorage;
    }
    else
    {
      if (v58 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v55 + 96))(v56, v57);
        v119 = v56;
        v120 = *v56;
        v121 = sub_10001A630(&qword_100839AA8);
        v122 = v194;
        sub_100128FE0((uint64_t)v119 + *(int *)(v121 + 48), v194);
        v123 = _swiftEmptyArrayStorage;
        v222 = _swiftEmptyArrayStorage;
        v216 = *(char **)(v187 + 16);
        if (v216)
        {
          v183 = v120;
          v124 = v209;
          v212 = (char *)(v187
                        + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80)));
          LODWORD(v211) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.day(_:);
          LODWORD(Configuration) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastSevenDays(_:);
          LODWORD(v191) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastThirtyDays(_:);
          LODWORD(v190) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.month(_:);
          LODWORD(v184) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.year(_:);
          v125 = *(char **)(v209 + 72);
          v205 = *(void (**)(char *, char *, uint64_t))(v209 + 16);
          v206 = v125;
          v126 = swift_bridgeObjectRetain(v187);
          v127 = 0;
          v128 = v208;
          v129 = v213;
          v130 = v202;
          do
          {
            v138 = v205;
            v221 = v127;
            ((void (*)(char *, char *, uint64_t, __n128))v205)(v130, &v212[(_QWORD)v206 * (_QWORD)v127], v129, v126);
            v139 = v201;
            v138(v201, v130, v129);
            v140 = (*(uint64_t (**)(char *, uint64_t))(v124 + 88))(v139, v129);
            v57 = v129;
            if (v140 == (_DWORD)v211)
            {
              (*(void (**)(char *, uint64_t))(v124 + 96))(v139, v129);
              v131 = v219;
              v132 = v220;
              v133 = v207;
              v134 = (*(uint64_t (**)(char *, char *, uint64_t))(v220 + 32))(v207, v139, v219);
              v135 = (_QWORD *)REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter(v134);
              v136 = v133;
              v57 = v213;
              (*(void (**)(char *, uint64_t))(v132 + 8))(v136, v131);
            }
            else
            {
              if (v140 == (_DWORD)Configuration || v140 == (_DWORD)v191 || v140 == (_DWORD)v190)
              {
                (*(void (**)(char *, uint64_t))(v209 + 96))(v139, v129);
                v141 = &v139[*(int *)(sub_10001A630(&qword_10084CAA8) + 48)];
                v142 = type metadata accessor for Date(0);
              }
              else
              {
                if (v140 != (_DWORD)v184)
                  goto LABEL_97;
                (*(void (**)(char *, uint64_t))(v209 + 96))(v139, v129);
                v141 = &v139[*(int *)(sub_10001A630(&qword_10084CAA0) + 48)];
                v142 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.RepresentativeDate(0);
              }
              v143 = *(char **)v141;
              (*(void (**)(char *, uint64_t))(*(_QWORD *)(v142 - 8) + 8))(v139, v142);
              v144 = *((_QWORD *)v143 + 2);
              if (v144)
              {
                v145 = v220;
                v146 = &v143[(*(unsigned __int8 *)(v220 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v220 + 80)];
                v198 = (uint64_t *)v143;
                v147 = swift_bridgeObjectRetain(v143);
                v148 = *(_QWORD *)(v145 + 72);
                v149 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v145 + 16);
                v135 = _swiftEmptyArrayStorage;
                v150 = v218;
                do
                {
                  v151 = v219;
                  v152 = v149(v150, v146, v219, v147);
                  v57 = REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter(v152);
                  (*(void (**)(char *, uint64_t))(v145 + 8))(v150, v151);
                  v153 = *(_QWORD *)(v57 + 16);
                  v154 = v135[2];
                  v155 = v154 + v153;
                  if (__OFADD__(v154, v153))
                    goto LABEL_91;
                  swift_isUniquelyReferenced_nonNull_native(v135);
                  if (!v156 || v155 > v135[3] >> 1)
                  {
                    if (v154 <= v155)
                      v157 = v154 + v153;
                    else
                      v157 = v154;
                    v135 = (_QWORD *)sub_1002C8478(v156, v157, 1, (unint64_t)v135);
                  }
                  v150 = v218;
                  if (*(_QWORD *)(v57 + 16))
                  {
                    v158 = v135[2];
                    v159 = (v135[3] >> 1) - v158;
                    v160 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
                    if (v159 < v153)
                      goto LABEL_93;
                    v161 = *(_QWORD *)(v160 - 8);
                    v162 = (*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
                    v163 = *(_QWORD *)(v161 + 72);
                    v164 = (char *)v135 + v162 + v163 * v158;
                    v165 = v57 + v162;
                    v166 = v163 * v153;
                    v167 = &v164[v166];
                    v168 = v165 + v166;
                    v169 = v165 >= (unint64_t)v167 || (unint64_t)v164 >= v168;
                    v150 = v218;
                    if (!v169)
                      goto LABEL_95;
                    swift_arrayInitWithCopy(v164);
                    if (v153)
                    {
                      v170 = v135[2];
                      v115 = __OFADD__(v170, v153);
                      v171 = v170 + v153;
                      if (v115)
                        goto LABEL_94;
                      v135[2] = v171;
                    }
                  }
                  else if (v153)
                  {
                    goto LABEL_92;
                  }
                  v147 = swift_bridgeObjectRelease();
                  v146 += v148;
                  --v144;
                  v145 = v220;
                }
                while (v144);
                swift_bridgeObjectRelease_n(v198, 2);
                v63 = v215;
                v128 = v208;
                v64 = v217;
                v57 = v213;
              }
              else
              {
                swift_bridgeObjectRelease();
                v135 = _swiftEmptyArrayStorage;
                v128 = v208;
              }
              v124 = v209;
            }
            v137 = v221 + 1;
            v130 = v202;
            (*(void (**)(char *, uint64_t))(v124 + 8))(v202, v57);
            v129 = v57;
            sub_1001E23F0((uint64_t)v135);
            v127 = v137;
            v82 = v137 == v216;
            v62 = v210;
          }
          while (!v82);
          swift_bridgeObjectRelease();
          v123 = v222;
          v122 = v194;
          v120 = v183;
          v65 = (uint64_t)v192;
        }
        else
        {
          v128 = v208;
        }
        v179 = v120;
        v180 = v214;
        v181 = sub_10049BB18(v179, (uint64_t)v123, v214, v128, 0);
        v182 = v128;
        v117 = v181;
        v118 = sub_10049CB18(v122, (uint64_t)v123, v180, v182, 0);
        swift_bridgeObjectRelease();
        sub_10000882C(v122, &qword_100839A98);
        v57 = v200;
        v172 = v203;
        v61 = v199;
        goto LABEL_82;
      }
      if (v58 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
        goto LABEL_96;
      v118 = _swiftEmptyArrayStorage;
      v117 = _swiftEmptyArrayStorage;
    }
LABEL_81:
    v172 = v203;
LABEL_82:
    (*(void (**)(char *, uint64_t))(v204 + 8))(v172, v57);
    sub_100008868((uint64_t)v185, v65, &qword_100839AA0);
    REMRemindersListDataView.CompletedDateBucketsModel.init(buckets:remindersCount:prefetchedReminders:prefetchedDueReminders:)(v187, v65, v117, v118);
    v173 = v196;
    (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v63, v62, v61);
    v174 = v189;
    v175 = v188;
    v176 = (uint64_t)v193;
    (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v188, v193, v64);
    v177 = sub_10009FC50(&qword_10084CA90, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CompletedDateBucketsModel);
    v178 = sub_10009FC50(&qword_10084CA98, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.CompletedDateBucketsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)(v63, v175, v61, v177, v178);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v210, v61);
    (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v176, v64);
    sub_10000882C((uint64_t)v185, &qword_100839AA0);
    swift_bridgeObjectRelease();
    return;
  }
  (*(void (**)(uint64_t *, uint64_t))(v55 + 96))(v56, v57);
  v59 = *v56;
  v60 = _swiftEmptyArrayStorage;
  v222 = _swiftEmptyArrayStorage;
  v61 = v199;
  v62 = v210;
  v63 = v215;
  v64 = v217;
  v65 = (uint64_t)v192;
  v216 = *(char **)(v187 + 16);
  if (!v216)
  {
    v71 = v208;
LABEL_78:
    v117 = sub_10049BB18(v59, (uint64_t)v60, v214, v71, 0);
    swift_bridgeObjectRelease();
    v118 = _swiftEmptyArrayStorage;
    v57 = v200;
    goto LABEL_81;
  }
  v66 = v210;
  v184 = v59;
  v67 = v209;
  v211 = (char *)(v187 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80)));
  LODWORD(v205) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.day(_:);
  LODWORD(Configuration) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastSevenDays(_:);
  LODWORD(v194) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastThirtyDays(_:);
  LODWORD(v191) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.month(_:);
  LODWORD(v190) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.year(_:);
  v68 = *(char **)(v209 + 72);
  v201 = *(char **)(v209 + 16);
  v202 = v68;
  v69 = swift_bridgeObjectRetain(v187);
  v70 = 0;
  v71 = v208;
  v73 = v212;
  v72 = v213;
  v74 = v206;
  while (1)
  {
    v83 = (void (*)(char *, char *, uint64_t))v201;
    v218 = v70;
    ((void (*)(char *, char *, uint64_t, __n128))v201)(v73, &v211[(_QWORD)v202 * (_QWORD)v70], v72, v69);
    v83(v74, v73, v72);
    v84 = (*(uint64_t (**)(char *, uint64_t))(v67 + 88))(v74, v72);
    v57 = v72;
    if (v84 != (_DWORD)v205)
      break;
    (*(void (**)(char *, uint64_t))(v67 + 96))(v74, v72);
    v75 = v219;
    v76 = v220;
    v77 = v207;
    v78 = (*(uint64_t (**)(char *, char *, uint64_t))(v220 + 32))(v207, v74, v219);
    v79 = (_QWORD *)REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter(v78);
    v80 = v77;
    v57 = v213;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v80, v75);
LABEL_6:
    v81 = v218 + 1;
    v73 = v212;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v212, v57);
    v72 = v57;
    sub_1001E23F0((uint64_t)v79);
    v70 = v81;
    v64 = v217;
    v82 = v81 == v216;
    v63 = v215;
    if (v82)
    {
      swift_bridgeObjectRelease();
      v60 = v222;
      v61 = v199;
      v65 = (uint64_t)v192;
      v59 = v184;
      v62 = v66;
      goto LABEL_78;
    }
  }
  v85 = v221;
  if (v84 == (_DWORD)Configuration || v84 == (_DWORD)v194 || v84 == (_DWORD)v191)
  {
    (*(void (**)(char *, uint64_t))(v67 + 96))(v74, v72);
    v86 = &v74[*(int *)(sub_10001A630(&qword_10084CAA8) + 48)];
    v87 = type metadata accessor for Date(0);
  }
  else
  {
    if (v84 != (_DWORD)v190)
      goto LABEL_97;
    (*(void (**)(char *, uint64_t))(v67 + 96))(v74, v72);
    v86 = &v74[*(int *)(sub_10001A630(&qword_10084CAA0) + 48)];
    v87 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.RepresentativeDate(0);
  }
  v88 = *(char **)v86;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v74, v87);
  v89 = *((_QWORD *)v88 + 2);
  if (!v89)
  {
    swift_bridgeObjectRelease();
    v79 = _swiftEmptyArrayStorage;
    v66 = v210;
    v71 = v208;
LABEL_35:
    v67 = v209;
    v74 = v206;
    goto LABEL_6;
  }
  v90 = v220;
  v91 = &v88[(*(unsigned __int8 *)(v220 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v220 + 80)];
  v198 = (uint64_t *)v88;
  v92 = swift_bridgeObjectRetain(v88);
  v93 = *(_QWORD *)(v90 + 72);
  v94 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v90 + 16);
  v79 = _swiftEmptyArrayStorage;
  while (1)
  {
    v95 = v219;
    v96 = v94(v85, v91, v219, v92);
    v57 = REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter(v96);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v85, v95);
    v97 = *(_QWORD *)(v57 + 16);
    v98 = v79[2];
    v99 = v98 + v97;
    if (__OFADD__(v98, v97))
      break;
    swift_isUniquelyReferenced_nonNull_native(v79);
    if (!v100 || v99 > v79[3] >> 1)
    {
      if (v98 <= v99)
        v101 = v98 + v97;
      else
        v101 = v98;
      v79 = (_QWORD *)sub_1002C8478(v100, v101, 1, (unint64_t)v79);
    }
    v85 = v221;
    if (*(_QWORD *)(v57 + 16))
    {
      v102 = v79[2];
      v103 = (v79[3] >> 1) - v102;
      v104 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
      if (v103 < v97)
        goto LABEL_89;
      v105 = *(_QWORD *)(v104 - 8);
      v106 = (*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
      v107 = *(_QWORD *)(v105 + 72);
      v108 = (char *)v79 + v106 + v107 * v102;
      v109 = v57 + v106;
      v110 = v107 * v97;
      v111 = &v108[v110];
      v112 = v109 + v110;
      if (v109 < (unint64_t)v111 && (unint64_t)v108 < v112)
        goto LABEL_95;
      swift_arrayInitWithCopy(v108);
      v85 = v221;
      if (v97)
      {
        v114 = v79[2];
        v115 = __OFADD__(v114, v97);
        v116 = v114 + v97;
        if (v115)
          goto LABEL_90;
        v79[2] = v116;
      }
    }
    else if (v97)
    {
      goto LABEL_88;
    }
    v92 = swift_bridgeObjectRelease();
    v91 += v93;
    --v89;
    v90 = v220;
    if (!v89)
    {
      swift_bridgeObjectRelease_n(v198, 2);
      v66 = v210;
      v71 = v208;
      v57 = v213;
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
LABEL_96:
  swift_bridgeObjectRelease();
LABEL_97:
  _diagnoseUnexpectedEnumCase<A>(type:)(v57, v57);
  __break(1u);
}

uint64_t sub_1004B5C70@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Configuration;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t, __n128);
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Day(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket(0, v6);
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  __chkstk_darwin(v9);
  v63 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v64 = (char *)&v54 - v12;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v14 = *(_QWORD *)(Configuration - 8);
  v15 = __chkstk_darwin(Configuration);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v15);
  v19 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter(v18);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, Configuration);
  if ((v19 & 1) == 0)
  {
    v50 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(a2, 1, 1, v50);
  }
  v56 = a2;
  v70 = *(_QWORD *)(a1 + 16);
  if (!v70)
  {
    v25 = 0;
LABEL_26:
    v52 = v56;
    REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)(v25, 0, v20);
    v53 = type metadata accessor for REMRemindersListDataView.CountByCompleted(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 0, 1, v53);
  }
  v21 = v59;
  v69 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  v68 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.day(_:);
  v61 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastSevenDays(_:);
  v58 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastThirtyDays(_:);
  v57 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.month(_:);
  v55 = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.year(_:);
  v22 = *(_QWORD *)(v59 + 72);
  v66 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  v67 = v22;
  v54 = a1;
  v23 = swift_bridgeObjectRetain(a1);
  v24 = 0;
  v25 = 0;
  v26 = v60;
  v28 = v63;
  v27 = v64;
  while (1)
  {
    v71 = v24;
    v31 = v69 + v67 * v24;
    v32 = v66;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v66)(v27, v31, v26, v23);
    v32(v28, v27, v26);
    v33 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v28, v26);
    if (v33 != v68)
      break;
    (*(void (**)(char *, uint64_t))(v21 + 96))(v28, v26);
    v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v8, v28, v4);
    v35 = v25;
    v36 = *(_QWORD *)(REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter(v34) + 16);
    v37 = swift_bridgeObjectRelease();
    v30 = __OFADD__(v35, v36);
    v25 = v35 + v36;
    if (v30)
      goto LABEL_29;
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v37);
    v27 = v64;
    v38 = v71;
LABEL_6:
    v24 = v38 + 1;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v26);
    if (v24 == v70)
    {
      v20 = swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
  v65 = v25;
  if (v33 == v61)
  {
    (*(void (**)(char *, uint64_t))(v21 + 96))(v28, v26);
    v39 = &v28[*(int *)(sub_10001A630(&qword_10084CAA8) + 48)];
    v40 = type metadata accessor for Date(0);
    v38 = v71;
  }
  else
  {
    v38 = v71;
    if (v33 == v58 || v33 == v57)
    {
      (*(void (**)(char *, uint64_t))(v21 + 96))(v28, v26);
      v39 = &v28[*(int *)(sub_10001A630(&qword_10084CAA8) + 48)];
      v41 = type metadata accessor for Date(0);
    }
    else
    {
      if (v33 != v55)
        goto LABEL_31;
      (*(void (**)(char *, uint64_t))(v21 + 96))(v28, v26);
      v39 = &v28[*(int *)(sub_10001A630(&qword_10084CAA0) + 48)];
      v41 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.RepresentativeDate(0);
    }
    v40 = v41;
  }
  v42 = *(_QWORD *)v39;
  (*(void (**)(char *))(*(_QWORD *)(v40 - 8) + 8))(v28);
  v43 = *(_QWORD *)(v42 + 16);
  if (!v43)
  {
    swift_bridgeObjectRelease();
    v29 = 0;
LABEL_5:
    v30 = __OFADD__(v65, v29);
    v25 = v65 + v29;
    v28 = v63;
    if (v30)
      goto LABEL_30;
    goto LABEL_6;
  }
  v26 = v42 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v62 = v42;
  v44 = swift_bridgeObjectRetain(v42);
  v29 = 0;
  v45 = *(_QWORD *)(v5 + 72);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  while (1)
  {
    v47 = v46(v8, v26, v4, v44);
    v48 = *(_QWORD *)(REMRemindersListDataView.CompletedDateBucketsModel.Day.reminders.getter(v47) + 16);
    v49 = swift_bridgeObjectRelease();
    v30 = __OFADD__(v29, v48);
    v29 += v48;
    if (v30)
      break;
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v8, v4, v49);
    v26 += v45;
    if (!--v43)
    {
      swift_bridgeObjectRelease_n(v62, 2);
      v21 = v59;
      v26 = v60;
      v27 = v64;
      v38 = v71;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v26, v26);
  __break(1u);
  return result;
}

uint64_t sub_1004B6138(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int *a4, __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v9 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket(0, a5);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(int *)(sub_10001A630(&qword_10084CAA8) + 48);
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, a3, v14);
  *(_QWORD *)&v12[v13] = a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *a4, v9);
  v15 = *a2;
  swift_bridgeObjectRetain(a1);
  swift_isUniquelyReferenced_nonNull_native(v15);
  *a2 = v15;
  if ((v16 & 1) == 0)
  {
    v15 = sub_1002C8774(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    *a2 = v15;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    v15 = sub_1002C8774(v17 > 1, v18 + 1, 1, v15);
    *a2 = v15;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v18, v12, v9);
}

uint64_t sub_1004B629C@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, _QWORD, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t result;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v31 = a5;
  v29 = a4;
  v30 = a3;
  v32 = a2;
  v6 = type metadata accessor for Calendar.Component(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v18 = __chkstk_darwin(v17).n128_u64[0];
  v20 = (char *)&v29 - v19;
  v21 = objc_msgSend(*a1, "completionDate", v18, v29);
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    goto LABEL_5;
  }
  v22 = v21;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

  v23 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v23(v12, v16, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
LABEL_5:
    result = sub_10000882C((uint64_t)v12, (uint64_t *)&unk_1008380D0);
    v26 = v30;
    goto LABEL_6;
  }
  v23(v20, v12, v13);
  v24 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v24(v9, enum case for Calendar.Component.era(_:), v6);
  v32 = Calendar.component(_:from:)(v9, v20);
  v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v25(v9, v6);
  v24(v9, enum case for Calendar.Component.year(_:), v6);
  v26 = Calendar.component(_:from:)(v9, v20);
  v25(v9, v6);
  result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, v13);
LABEL_6:
  v28 = v31;
  *v31 = v32;
  v28[1] = v26;
  return result;
}

uint64_t sub_1004B64F4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "completionDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 1, v5);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 1, 1, v7);
  }
}

BOOL sub_1004B658C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 1;
  return *a1 == *a2 && a1[1] < a2[1];
}

BOOL sub_1004B65B8(_QWORD *a1, _QWORD *a2)
{
  if (*a2 < *a1)
    return 0;
  return *a2 != *a1 || a2[1] >= a1[1];
}

BOOL sub_1004B65E4(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0;
  return *a1 != *a2 || a1[1] >= a2[1];
}

BOOL sub_1004B6610(_QWORD *a1, _QWORD *a2)
{
  if (*a2 < *a1)
    return 1;
  return *a2 == *a1 && a2[1] < a1[1];
}

Swift::Int sub_1004B663C()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1004B6694()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1004B66CC(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1004B6720(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL4 v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  Swift::Int v107;
  Swift::Int v108;
  uint64_t v109;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      sub_1004B6E5C(0, v3, 1, v2);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v6 = v4;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      v94 = v13;
      v106 = v10;
      if (v14 >= 2)
      {
        v95 = *v2;
        do
        {
          v96 = v14 - 2;
          if (v14 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v14 + 24];
          sub_1004B6EF8((char *)(v95 + 24 * v98), (char *)(v95 + 24 * *(_QWORD *)&v94[16 * v14 + 16]), v95 + 24 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          swift_isUniquelyReferenced_nonNull_native(v97);
          if ((v100 & 1) == 0)
            v97 = sub_1001D52E4((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v101 = &v97[16 * v96 + 32];
          *(_QWORD *)v101 = v98;
          *((_QWORD *)v101 + 1) = v99;
          v102 = *((_QWORD *)v97 + 2);
          if (v14 > v102)
            goto LABEL_150;
          memmove(&v97[16 * v14 + 16], &v97[16 * v14 + 32], 16 * (v102 - v14));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v102 - 1;
          v14 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v106[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
    v106 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_10001A630(&qword_10083F578);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v106 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *v2;
  v105 = *v2 + 8;
  v103 = v2;
  v104 = *v2 - 24;
  v13 = (char *)_swiftEmptyArrayStorage;
  v107 = v6;
  v108 = v3;
  v109 = *v2;
  while (1)
  {
    v15 = v11++;
    if (v11 >= v3)
      goto LABEL_47;
    v16 = (uint64_t *)(v12 + 24 * v11);
    v17 = *v16;
    v18 = v16[1];
    v19 = (_QWORD *)(v12 + 24 * v15);
    if (*v19 >= v17)
    {
      if (*v19 == v17)
      {
        v20 = v19[1] < v18;
        v11 = v15 + 2;
        if (v15 + 2 >= v3)
        {
LABEL_38:
          if (!v20)
            goto LABEL_47;
LABEL_39:
          if (v11 < v15)
            goto LABEL_153;
          goto LABEL_40;
        }
      }
      else
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v3)
          goto LABEL_47;
        v20 = 0;
      }
LABEL_25:
      if (v3 <= v11 + 1)
        v21 = v11 + 1;
      else
        v21 = v3;
      v22 = (uint64_t *)(v105 + 24 * v11);
      do
      {
        v23 = v17;
        v17 = *(v22 - 1);
        v24 = *v22;
        if (v23 < v17)
        {
          if (!v20)
            goto LABEL_47;
        }
        else if (v23 == v17)
        {
          if (((v20 ^ (v18 >= v24)) & 1) == 0)
            goto LABEL_38;
        }
        else if (v20)
        {
          goto LABEL_39;
        }
        v22 += 3;
        ++v11;
        v18 = v24;
      }
      while (v11 < v3);
      v11 = v21;
      goto LABEL_38;
    }
    v11 = v15 + 2;
    if (v15 + 2 < v3)
    {
      v20 = 1;
      goto LABEL_25;
    }
LABEL_40:
    if (v15 < v11)
    {
      v25 = 24 * v11;
      v26 = 24 * v15;
      v27 = v11;
      v28 = v15;
      do
      {
        if (v28 != --v27)
        {
          if (!v12)
            goto LABEL_158;
          v29 = v12 + v26;
          v30 = v12 + v25;
          v31 = *(_QWORD *)(v12 + v26 + 16);
          v32 = *(_OWORD *)(v12 + v26);
          v33 = *(_QWORD *)(v12 + v25 - 8);
          *(_OWORD *)v29 = *(_OWORD *)(v12 + v25 - 24);
          *(_QWORD *)(v29 + 16) = v33;
          *(_OWORD *)(v30 - 24) = v32;
          *(_QWORD *)(v30 - 8) = v31;
        }
        ++v28;
        v25 -= 24;
        v26 += 24;
      }
      while (v28 < v27);
    }
LABEL_47:
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_151;
      if (v11 - v15 < v6)
        break;
    }
LABEL_68:
    if (v11 < v15)
      goto LABEL_146;
    swift_isUniquelyReferenced_nonNull_native(v13);
    if ((v42 & 1) == 0)
      v13 = sub_1001D4DF0(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v44 = *((_QWORD *)v13 + 2);
    v43 = *((_QWORD *)v13 + 3);
    v14 = v44 + 1;
    v12 = v109;
    if (v44 >= v43 >> 1)
    {
      v93 = sub_1001D4DF0((char *)(v43 > 1), v44 + 1, 1, v13);
      v12 = v109;
      v13 = v93;
    }
    *((_QWORD *)v13 + 2) = v14;
    v45 = v13 + 32;
    v46 = &v13[16 * v44 + 32];
    *(_QWORD *)v46 = v15;
    *((_QWORD *)v46 + 1) = v11;
    if (v44)
    {
      while (1)
      {
        v47 = v14 - 1;
        if (v14 >= 4)
        {
          v52 = &v45[16 * v14];
          v53 = *((_QWORD *)v52 - 8);
          v54 = *((_QWORD *)v52 - 7);
          v58 = __OFSUB__(v54, v53);
          v55 = v54 - v53;
          if (v58)
            goto LABEL_135;
          v57 = *((_QWORD *)v52 - 6);
          v56 = *((_QWORD *)v52 - 5);
          v58 = __OFSUB__(v56, v57);
          v50 = v56 - v57;
          v51 = v58;
          if (v58)
            goto LABEL_136;
          v59 = v14 - 2;
          v60 = &v45[16 * v14 - 32];
          v62 = *(_QWORD *)v60;
          v61 = *((_QWORD *)v60 + 1);
          v58 = __OFSUB__(v61, v62);
          v63 = v61 - v62;
          if (v58)
            goto LABEL_138;
          v58 = __OFADD__(v50, v63);
          v64 = v50 + v63;
          if (v58)
            goto LABEL_141;
          if (v64 >= v55)
          {
            v82 = &v45[16 * v47];
            v84 = *(_QWORD *)v82;
            v83 = *((_QWORD *)v82 + 1);
            v58 = __OFSUB__(v83, v84);
            v85 = v83 - v84;
            if (v58)
              goto LABEL_145;
            v75 = v50 < v85;
            goto LABEL_105;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v76 = *((_QWORD *)v13 + 4);
            v77 = *((_QWORD *)v13 + 5);
            v58 = __OFSUB__(v77, v76);
            v69 = v77 - v76;
            v70 = v58;
            goto LABEL_99;
          }
          v49 = *((_QWORD *)v13 + 4);
          v48 = *((_QWORD *)v13 + 5);
          v58 = __OFSUB__(v48, v49);
          v50 = v48 - v49;
          v51 = v58;
        }
        if ((v51 & 1) != 0)
          goto LABEL_137;
        v59 = v14 - 2;
        v65 = &v45[16 * v14 - 32];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v68 = __OFSUB__(v66, v67);
        v69 = v66 - v67;
        v70 = v68;
        if (v68)
          goto LABEL_140;
        v71 = &v45[16 * v47];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v58 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v58)
          goto LABEL_143;
        if (__OFADD__(v69, v74))
          goto LABEL_144;
        if (v69 + v74 >= v50)
        {
          v75 = v50 < v74;
LABEL_105:
          if (v75)
            v47 = v59;
          goto LABEL_107;
        }
LABEL_99:
        if ((v70 & 1) != 0)
          goto LABEL_139;
        v78 = &v45[16 * v47];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v58 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v58)
          goto LABEL_142;
        if (v81 < v69)
          goto LABEL_15;
LABEL_107:
        v86 = v47 - 1;
        if (v47 - 1 >= v14)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
          goto LABEL_155;
        }
        if (!v12)
          goto LABEL_157;
        v87 = &v45[16 * v86];
        v88 = *(_QWORD *)v87;
        v89 = v45;
        v90 = &v45[16 * v47];
        v91 = *((_QWORD *)v90 + 1);
        sub_1004B6EF8((char *)(v12 + 24 * *(_QWORD *)v87), (char *)(v12 + 24 * *(_QWORD *)v90), v12 + 24 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v88)
          goto LABEL_132;
        if (v47 > *((_QWORD *)v13 + 2))
          goto LABEL_133;
        *(_QWORD *)v87 = v88;
        *(_QWORD *)&v89[16 * v86 + 8] = v91;
        v92 = *((_QWORD *)v13 + 2);
        if (v47 >= v92)
          goto LABEL_134;
        v14 = v92 - 1;
        memmove(v90, v90 + 16, 16 * (v92 - 1 - v47));
        v45 = v89;
        *((_QWORD *)v13 + 2) = v92 - 1;
        v12 = v109;
        if (v92 <= 2)
          goto LABEL_15;
      }
    }
    v14 = 1;
LABEL_15:
    v6 = v107;
    v3 = v108;
    if (v11 >= v108)
    {
      v10 = v106;
      v2 = v103;
      goto LABEL_118;
    }
  }
  v34 = v15 + v6;
  if (__OFADD__(v15, v6))
    goto LABEL_154;
  if (v34 >= v3)
    v34 = v3;
  if (v34 >= v15)
  {
    if (v11 != v34)
    {
      v35 = v104 + 24 * v11;
      do
      {
        v36 = *(_QWORD *)(v12 + 24 * v11);
        v37 = v15;
        v38 = v35;
        do
        {
          if (*(_QWORD *)v38 >= v36 && (*(_QWORD *)v38 != v36 || *(_QWORD *)(v38 + 8) >= *(_QWORD *)(v38 + 32)))
            break;
          if (!v12)
            goto LABEL_156;
          v40 = *(_QWORD *)(v38 + 32);
          v41 = *(_QWORD *)(v38 + 40);
          *(_OWORD *)(v38 + 24) = *(_OWORD *)v38;
          *(_QWORD *)(v38 + 40) = *(_QWORD *)(v38 + 16);
          *(_QWORD *)v38 = v36;
          *(_QWORD *)(v38 + 8) = v40;
          *(_QWORD *)(v38 + 16) = v41;
          v38 -= 24;
          ++v37;
        }
        while (v11 != v37);
        ++v11;
        v35 += 24;
      }
      while (v11 != v34);
      v11 = v34;
    }
    goto LABEL_68;
  }
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_1004B6E5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 24 * a3 - 24;
LABEL_5:
    v6 = *(_QWORD *)(v4 + 24 * a3);
    v7 = result;
    v8 = v5;
    while (1)
    {
      if (*(_QWORD *)v8 >= v6 && (*(_QWORD *)v8 != v6 || *(_QWORD *)(v8 + 8) >= *(_QWORD *)(v8 + 32)))
      {
LABEL_4:
        ++a3;
        v5 += 24;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      v10 = *(_QWORD *)(v8 + 32);
      v11 = *(_QWORD *)(v8 + 40);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)v8;
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 16);
      *(_QWORD *)v8 = v6;
      *(_QWORD *)(v8 + 8) = v10;
      *(_QWORD *)(v8 + 16) = v11;
      v8 -= 24;
      if (a3 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1004B6EF8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  uint64_t result;
  char *v28;
  char *v29;
  char *v30;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v30 = __src;
  v29 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v17 = &v4[24 * v11];
      v28 = v17;
      v30 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v18 = a3 - 24;
        v19 = v6;
        while (1)
        {
          v20 = (char *)(v18 + 24);
          v21 = *((_QWORD *)v17 - 3);
          v23 = *((_QWORD *)v19 - 3);
          v19 -= 24;
          v22 = v23;
          if (v23 < v21 || (v22 == v21 ? (v24 = *((_QWORD *)v6 - 2) < *((_QWORD *)v17 - 2)) : (v24 = 0), v24))
          {
            if (v20 != v6 || v18 >= (unint64_t)v6)
            {
              v26 = *(_OWORD *)v19;
              *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
              *(_OWORD *)v18 = v26;
            }
            v30 = v19;
            if (v19 <= v7)
              goto LABEL_46;
          }
          else
          {
            v28 = v17 - 24;
            if (v20 < v17 || v18 >= (unint64_t)v17 || v20 != v17)
            {
              v25 = *(_OWORD *)(v17 - 24);
              *(_QWORD *)(v18 + 16) = *((_QWORD *)v17 - 1);
              *(_OWORD *)v18 = v25;
            }
            v19 = v6;
            v17 -= 24;
            if (v6 <= v7)
              goto LABEL_46;
          }
          v18 -= 24;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v28 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (*(_QWORD *)v4 < *(_QWORD *)v6
          || (*(_QWORD *)v4 == *(_QWORD *)v6 ? (v13 = *((_QWORD *)v4 + 1) < *((_QWORD *)v6 + 1)) : (v13 = 0), v13))
        {
          v15 = v6 + 24;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            v16 = *(_OWORD *)v6;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v7 = v16;
          }
        }
        else
        {
          if (v7 != v4)
          {
            v14 = *(_OWORD *)v4;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
            *(_OWORD *)v7 = v14;
          }
          v4 += 24;
          v29 = v4;
          v15 = v6;
        }
        v7 += 24;
        if (v4 >= v12)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v30 = v7;
    }
LABEL_46:
    sub_1001D4EE8((void **)&v30, (const void **)&v29, &v28);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_1004B71D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a5;
  v29 = a2;
  v26 = a1;
  v7 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v25 - v15;
  v17 = a4 >> 1;
  v27 = a3;
  if (a4 >> 1 != a3)
  {
    v25[1] = a4;
    v18 = a4 & 1 | (2 * a3);
    while (1)
    {
      if (a3 >= v17)
      {
        __break(1u);
        return;
      }
      v19 = *(id *)(v29 + 8 * a3);
      v20 = objc_msgSend(v19, "completionDate");
      if (!v20)
        break;
      v21 = v20;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

      v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v22(v9, v13, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
        goto LABEL_4;
      v22(v16, v9, v10);
      v23 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v24 = dispatch thunk of static Comparable.< infix(_:_:)(v28, v16, v10, v23);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);

      if ((v24 & 1) == 0)
      {
        if (a3 <= v27)
        {
          v29 = 0;
          return;
        }
        if (a3 < 0)
          __break(1u);
        goto LABEL_13;
      }
LABEL_5:
      ++a3;
      v18 += 2;
      if (v17 == a3)
        goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_4:
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_1008380D0);

    goto LABEL_5;
  }
LABEL_13:
  swift_unknownObjectRetain(v26);
}

void sub_1004B7430(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v10 = sub_10001A630(&qword_10083FB68);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for REMRemindersListDataView.ReminderLite(0);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  v18 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    v33 = (char *)&v32 - v15;
    v35 = v17;
    v37 = v16;
    swift_unknownObjectRetain(a1);
    v19 = (char *)_swiftEmptyArrayStorage;
    v36 = a2;
    v34 = v18;
    while (a3 < v18)
    {
      v20 = *(id *)(a2 + 8 * a3);
      v21 = objc_msgSend(v20, "objectID");
      v22 = v21;
      if (*(_QWORD *)(a5 + 16) && (v23 = sub_1002C6690((uint64_t)v21), (v24 & 1) != 0))
        v25 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v23);
      else
        v25 = 0;

      sub_100495DE8(v20, v25, 0, (uint64_t)v12);
      v26 = v37;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v12, 1, v13) == 1)
      {
        sub_10000882C((uint64_t)v12, &qword_10083FB68);
      }
      else
      {
        v27 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
        v28 = v33;
        v27(v33, v12, v13);
        v27(v35, v28, v13);
        swift_isUniquelyReferenced_nonNull_native(v19);
        if ((v29 & 1) == 0)
          v19 = (char *)sub_1002C8478(0, *((_QWORD *)v19 + 2) + 1, 1, (unint64_t)v19);
        v31 = *((_QWORD *)v19 + 2);
        v30 = *((_QWORD *)v19 + 3);
        if (v31 >= v30 >> 1)
          v19 = (char *)sub_1002C8478(v30 > 1, v31 + 1, 1, (unint64_t)v19);
        *((_QWORD *)v19 + 2) = v31 + 1;
        v27(&v19[((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v31], v35, v13);
      }
      ++a3;
      v18 = v34;
      a2 = v36;
      if (v34 == a3)
      {
        swift_unknownObjectRelease(a1);
        return;
      }
    }
    __break(1u);
  }
}

_QWORD *sub_1004B76C8(uint64_t a1, uint64_t a2, id a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __n128 v35;
  void (*v36)(__n128);
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, char *);
  void (*v45)(char *, char *, char *);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  BOOL v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(uint64_t, char *, char *);
  char *v58;
  void (*v59)(char *, char *);
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  char *v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(__n128);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  void (*v88)(char *, char *, char *, __n128);
  char *v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  int64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  void (*v118)(uint64_t, char *, char *);
  void (*v119)(__n128);
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;

  v102 = a7;
  v109 = a5;
  v105 = a2;
  v111 = a1;
  v9 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Day(0);
  v103 = *(_QWORD *)(v9 - 8);
  v104 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v108 = (char *)&v95 - v13;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v114 = (char *)&v95 - v19;
  __chkstk_darwin(v20);
  v121 = (char *)&v95 - v21;
  __chkstk_darwin(v22);
  v117 = (char *)&v95 - v23;
  v24 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v24);
  v99 = (uint64_t)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v95 - v27;
  __chkstk_darwin(v29);
  v115 = (uint64_t)&v95 - v30;
  __chkstk_darwin(v31);
  v33 = (char *)&v95 - v32;
  v35 = __chkstk_darwin(v34);
  v36 = *(void (**)(__n128))(v15 + 56);
  v120 = (char *)&v95 - v37;
  v101 = (char *)v14;
  v36(v35);
  v38 = a4 >> 1;
  v123 = (a4 >> 1) - (_QWORD)a3;
  v124 = v15;
  v106 = (uint64_t)a3;
  if ((id)(a4 >> 1) != a3)
  {
    if ((uint64_t)(a4 >> 1) <= (uint64_t)a3)
      goto LABEL_48;
    v100 = a4 >> 1;
    v96 = v17;
    v97 = v11;
    v95 = a4;
    v98 = a4 & 1;
    swift_unknownObjectRetain(v111);
    v39 = 0;
    v122 = v105 + 8 * v106;
    v116 = _swiftEmptyArrayStorage;
    v107 = (void *)v106;
    v11 = v101;
    v112 = v33;
    v113 = v28;
    v119 = v36;
    while (1)
    {
      if (__OFADD__(v39, 1))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        v116 = (_QWORD *)sub_1002C8760(0, v116[2] + 1, 1, (unint64_t)v116);
LABEL_37:
        v92 = v116[2];
        v91 = v116[3];
        if (v92 >= v91 >> 1)
          v116 = (_QWORD *)sub_1002C8760(v91 > 1, v92 + 1, 1, (unint64_t)v116);
        v93 = v116;
        v116[2] = v92 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v103 + 32))((unint64_t)v93+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(_QWORD *)(v103 + 72) * v92, v11, v104);
        swift_unknownObjectRelease(v111);
        (*(void (**)(char *, char *))(v124 + 8))(v17, v101);
        v82 = (uint64_t)a3;
        goto LABEL_40;
      }
      a3 = *(id *)(v122 + 8 * v39);
      v40 = objc_msgSend(a3, "completionDate");
      if (!v40)
        break;
      v41 = v40;
      v42 = v121;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

      v43 = v124;
      v44 = *(void (**)(char *, char *, char *))(v124 + 32);
      v44(v33, v42, v11);
      ((void (*)(char *, _QWORD, uint64_t, char *))v36)(v33, 0, 1, v11);
      v17 = *(char **)(v43 + 48);
      if (((unsigned int (*)(char *, uint64_t, char *))v17)(v33, 1, v11) == 1)
        goto LABEL_6;
      v45 = v44;
      v46 = v117;
      v118 = (void (*)(uint64_t, char *, char *))v45;
      v45(v117, v33, v11);
      v47 = (uint64_t)v120;
      v48 = v115;
      sub_100008868((uint64_t)v120, v115, (uint64_t *)&unk_1008380D0);
      v49 = ((uint64_t (*)(uint64_t, uint64_t, char *))v17)(v48, 1, v11);
      v50 = v48;
      v36 = v119;
      sub_10000882C(v50, (uint64_t *)&unk_1008380D0);
      v51 = v49 == 1;
      v52 = v46;
      if (v51)
      {
        sub_10000882C(v47, (uint64_t *)&unk_1008380D0);
        (*(void (**)(uint64_t, char *, char *))(v124 + 16))(v47, v46, v11);
        ((void (*)(uint64_t, _QWORD, uint64_t, char *))v36)(v47, 0, 1, v11);
      }
      v53 = v47;
      v54 = (uint64_t)v113;
      sub_100008868(v53, (uint64_t)v113, (uint64_t *)&unk_1008380D0);
      if (((unsigned int (*)(uint64_t, uint64_t, char *))v17)(v54, 1, v11) == 1)
      {
        (*(void (**)(char *, char *))(v124 + 8))(v46, v11);

        sub_10000882C(v54, (uint64_t *)&unk_1008380D0);
LABEL_18:
        v33 = v112;
        goto LABEL_7;
      }
      v55 = v54;
      v56 = v114;
      v57 = v118;
      v118((uint64_t)v114, (char *)v55, v11);
      if ((Calendar.isDate(_:inSameDayAs:)(v52, v56) & 1) != 0)
      {

        v58 = v56;
        v59 = *(void (**)(char *, char *))(v124 + 8);
        v59(v58, v11);
        v59(v52, v11);
        v36 = v119;
        goto LABEL_18;
      }
      v60 = v106 + v39;
      v33 = v112;
      if (__OFADD__(v106, v39))
        goto LABEL_42;
      v61 = (uint64_t)v107;
      if (v60 < (uint64_t)v107)
        goto LABEL_43;
      if (v100 < (uint64_t)v107)
        goto LABEL_44;
      if ((uint64_t)v107 < v106)
        goto LABEL_45;
      if (v100 < v60)
        goto LABEL_46;
      if (v60 < 0)
        goto LABEL_47;
      v62 = v98 | (2 * v60);
      v63 = v111;
      swift_unknownObjectRetain(v111);
      v64 = v102;
      swift_bridgeObjectRetain(v102);
      v65 = v62;
      v66 = v110;
      sub_1004B7430(v63, v105, v61, v65, v64);
      v68 = v67;
      v110 = v66;
      v69 = swift_bridgeObjectRelease();
      v70 = v121;
      (*(void (**)(char *, char *, char *, __n128))(v124 + 16))(v121, v114, v11, v69);
      REMRemindersListDataView.CompletedDateBucketsModel.Day.init(date:reminders:)(v70, v68);
      swift_isUniquelyReferenced_nonNull_native(v116);
      if ((v71 & 1) == 0)
        v116 = (_QWORD *)sub_1002C8760(0, v116[2] + 1, 1, (unint64_t)v116);
      v17 = (char *)&unk_1008380D0;
      v73 = v116[2];
      v72 = v116[3];
      if (v73 >= v72 >> 1)
        v116 = (_QWORD *)sub_1002C8760(v72 > 1, v73 + 1, 1, (unint64_t)v116);
      v74 = v116;
      v116[2] = v73 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v103 + 32))((unint64_t)v74+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(_QWORD *)(v103 + 72) * v73, v108, v104);
      swift_unknownObjectRelease(v111);

      (*(void (**)(char *, char *))(v124 + 8))(v114, v11);
      v75 = (uint64_t)v120;
      sub_10000882C((uint64_t)v120, (uint64_t *)&unk_1008380D0);
      v57(v75, v117, v11);
      v76 = v75;
      v77 = v119;
      ((void (*)(uint64_t, _QWORD, uint64_t, char *))v119)(v76, 0, 1, v11);
      v107 = (void *)v60;
      v36 = v77;
LABEL_7:
      if (v123 == ++v39)
      {
        swift_unknownObjectRelease(v111);
        v11 = v97;
        v17 = v96;
        a4 = v95;
        v38 = v100;
        a3 = v107;
        goto LABEL_31;
      }
    }
    ((void (*)(char *, uint64_t, uint64_t, char *))v36)(v33, 1, 1, v11);
LABEL_6:

    sub_10000882C((uint64_t)v33, (uint64_t *)&unk_1008380D0);
    goto LABEL_7;
  }
  v116 = _swiftEmptyArrayStorage;
LABEL_31:
  v78 = v99;
  v79 = v124;
  if ((uint64_t)a3 >= v38)
  {
    v82 = (uint64_t)v120;
  }
  else
  {
    v80 = (uint64_t)a3;
    a3 = v120;
    sub_100008868((uint64_t)v120, v99, (uint64_t *)&unk_1008380D0);
    v81 = v101;
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v79 + 48))(v78, 1, v101) != 1)
    {
      (*(void (**)(char *, uint64_t, char *))(v79 + 32))(v17, v78, v81);
      if (v80 < v106)
        goto LABEL_49;
      a3 = v120;
      v83 = v111;
      swift_unknownObjectRetain(v111);
      v84 = v102;
      swift_bridgeObjectRetain(v102);
      sub_1004B7430(v83, v105, v80, a4, v84);
      v86 = v85;
      v87 = swift_bridgeObjectRelease();
      v88 = *(void (**)(char *, char *, char *, __n128))(v79 + 16);
      v89 = v121;
      v88(v121, v17, v81, v87);
      REMRemindersListDataView.CompletedDateBucketsModel.Day.init(date:reminders:)(v89, v86);
      swift_isUniquelyReferenced_nonNull_native(v116);
      if ((v90 & 1) == 0)
        goto LABEL_50;
      goto LABEL_37;
    }
    sub_10000882C((uint64_t)a3, (uint64_t *)&unk_1008380D0);
    v82 = v78;
  }
LABEL_40:
  sub_10000882C(v82, (uint64_t *)&unk_1008380D0);
  return v116;
}

uint64_t sub_1004B7F88(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Configuration;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t result;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66[24];
  char v67[24];
  uint64_t v68;

  v57 = a7;
  v58 = a8;
  v60 = a6;
  v61 = a4;
  v62 = a3;
  v63 = a5;
  v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v64 = *(_QWORD *)(v11 - 8);
  v65 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v15 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2, v67, 0, 0);
  v18 = *a2;
  v19 = a2[1];
  v20 = a2[2];
  v21 = a2[3];
  v59 = a2;
  swift_unknownObjectRetain(v18);
  sub_1004B71D4(v22, v19, v20, v21, a1);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  result = swift_unknownObjectRelease(v18);
  if (v24)
  {
    v33 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v32);
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v33);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, Configuration);
    v34 = v68;
    v35 = sub_1004B76C8(v24, v26, v28, v30, v62, (uint64_t)v13, v63);
    if (v34)
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v65);
      return swift_unknownObjectRelease(v24);
    }
    v36 = (uint64_t)v35;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v65);
    v37 = v30 >> 1;
    v38 = v60;
    v39 = (unint64_t)v60 >> 62;
    if ((unint64_t)v60 >> 62)
    {
      if (v60 < 0)
        v52 = v60;
      else
        v52 = v60 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v60);
      v53 = _CocoaArrayWrapper.endIndex.getter(v52);
      if (v53 < v37)
        goto LABEL_31;
      v30 = v53;
      swift_bridgeObjectRetain(v38);
      v54 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease();
      if (v54 < v37)
        goto LABEL_32;
      swift_bridgeObjectRetain(v38);
      v55 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease();
      if (v55 >= (uint64_t)v30)
        goto LABEL_33;
      __break(1u);
    }
    else
    {
      v30 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v30 >= v37)
      {
        swift_bridgeObjectRetain(v60);
        if ((v38 & 0xC000000000000001) != 0)
        {
          while (v37 != v30)
          {
            if (v37 < (uint64_t)v30)
            {
              sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
              v40 = v37;
              do
              {
                v41 = v40 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v40);
                v40 = v41;
              }
              while (v30 != v41);
              break;
            }
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            v38 = v60;
            if ((v60 & 0xC000000000000001) == 0)
              break;
          }
        }
        if (v39)
        {
          if (v38 < 0)
            v45 = v38;
          else
            v45 = v38 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v38);
          v42 = _CocoaArrayWrapper.subscript.getter(v37, v30, v45);
          v43 = v46;
          v37 = v47;
          v44 = v48;
          swift_bridgeObjectRelease_n(v38, 2);
        }
        else
        {
          v42 = v38 & 0xFFFFFFFFFFFFFF8;
          v43 = (v38 & 0xFFFFFFFFFFFFFF8) + 32;
          v44 = (2 * v30) | 1;
        }
        v49 = v59;
        swift_beginAccess(v59, v66, 1, 0);
        v50 = *v49;
        *v49 = v42;
        v49[1] = v43;
        v49[2] = v37;
        v49[3] = v44;
        swift_unknownObjectRelease(v50);
        if (*(_QWORD *)(v36 + 16))
          sub_1004B6138(v36, v57, v58, a9, v51);
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease(v24);
      }
    }
    __break(1u);
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_1004B82E0(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *Subtasks;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t Configuration;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  double (*v92)(char *, uint64_t);
  void (*v93)(char *, uint64_t);
  __n128 v94;
  uint64_t v95;
  char *v96;
  int64_t v97;
  void (*v98)(unint64_t);
  uint64_t v99;
  void (*v100)(_QWORD, _QWORD, _QWORD);
  uint64_t v101;
  char v102;
  char *v103;
  __n128 v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t KeyPath;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  void (*v124)(_QWORD, _QWORD);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  id v131;
  void *v132;
  id v133;
  Class isa;
  double v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t);
  __n128 v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(_QWORD, _QWORD, _QWORD);
  int64_t v152;
  char *v153;
  int v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  Swift::Int v163;
  Swift::Int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  Swift::Int v178;
  uint64_t v179;
  Swift::Int v180;
  int64_t v181;
  Swift::Int v182;
  uint64_t v183;
  void (*v184)(_QWORD, _QWORD, _QWORD);
  uint64_t v185;
  uint64_t v186;
  void (*v187)(_QWORD, _QWORD, _QWORD);
  Swift::Int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  char **v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  char *v196;
  unint64_t v197;
  char *v198;
  __n128 v199;
  char *v200;
  id v201;
  id v202;
  void *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  unsigned int (*v207)(uint64_t, uint64_t, uint64_t);
  uint64_t v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  Swift::Int v215;
  Swift::Int v216;
  uint64_t v217;
  void (*v218)(_QWORD, _QWORD, _QWORD);
  uint64_t v219;
  void (*v220)(_QWORD, _QWORD, _QWORD);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  unint64_t v226;
  char v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(char *, uint64_t);
  __n128 v245;
  char *v246;
  __n128 v247;
  char *v248;
  void (*v249)(char *, uint64_t);
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  __n128 v253;
  uint64_t v254;
  id v255;
  id v256;
  void *v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  _QWORD *v263;
  int64_t v264;
  char *v265;
  Swift::Int v266;
  int64_t v267;
  Swift::Int v268;
  uint64_t v269;
  void (*v270)(_QWORD, _QWORD, _QWORD);
  uint64_t v271;
  uint64_t v272;
  void (*v273)(_QWORD, _QWORD, _QWORD);
  int64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  unint64_t v279;
  uint64_t v280;
  char v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  int v290;
  char *v291;
  __n128 v292;
  void (*v293)(uint64_t, uint64_t);
  uint64_t v294;
  __n128 v295;
  char *v296;
  uint64_t v297;
  void (*v298)(char *, _QWORD, uint64_t);
  uint64_t v299;
  void (*v300)(char *, uint64_t);
  uint64_t v301;
  void (*v302)(_QWORD, _QWORD, _QWORD);
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  __n128 v311;
  unint64_t v312;
  _QWORD *v313;
  char *v314;
  uint64_t v315;
  uint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  __n128 v323;
  __n128 v324;
  char *v325;
  char *v326;
  __n128 v327;
  uint64_t v328;
  Swift::Int v330;
  Swift::Int v331;
  void *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  unint64_t v338;
  char *v339;
  uint64_t v340;
  char *v341;
  _QWORD *v342;
  _QWORD *v343;
  uint64_t v344;
  char *v345;
  unint64_t v346;
  char v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  __n128 v353;
  uint64_t v354;
  void (*v355)(char *, uint64_t, __n128);
  __n128 v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  void (*v363)(char *, uint64_t);
  void (*v364)(uint64_t, uint64_t);
  id v365;
  id v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  char *v377;
  char *v378;
  char **v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  char *v387;
  char *v388;
  uint64_t v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  char *v397;
  char *v398;
  char *v399;
  char *v400;
  char *v401;
  uint64_t v402;
  char *v403;
  uint64_t v404;
  unint64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  char *v409;
  uint64_t v410;
  uint64_t v411;
  id v412;
  char *v413;
  char *v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  char *v420;
  char *v421;
  char *v422;
  unint64_t v423;
  char *v424;
  int64_t v425;
  void (*v426)(_QWORD, _QWORD, _QWORD);
  uint64_t v427;
  uint64_t v428;
  char *v429;
  char v430[8];
  uint64_t v431;
  void (*v432)(_QWORD, _QWORD, _QWORD);
  uint64_t v433;
  unint64_t v434;
  _QWORD *v435;

  v412 = a1;
  v375 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.DateFormattingStyle(0);
  v374 = *(_QWORD *)(v375 - 8);
  __chkstk_darwin(v375);
  v373 = (char *)&v362 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v382 = type metadata accessor for REMRemindersListDataView.DateBucketsModel.RepresentativeDate(0);
  v381 = *(_QWORD *)(v382 - 8);
  __chkstk_darwin(v382);
  v383 = (char *)&v362 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v402 = type metadata accessor for Calendar.Component(0);
  v389 = *(_QWORD *)(v402 - 8);
  v5 = __chkstk_darwin(v402);
  v401 = (char *)&v362 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket(0, v5);
  v417 = *(_QWORD *)(v7 - 8);
  v418 = v7;
  __chkstk_darwin(v7);
  v380 = (char *)&v362 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v400 = (char *)&v362 - v10;
  __chkstk_darwin(v11);
  v415 = (char *)&v362 - v12;
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v13);
  v376 = (char *)&v362 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v398 = (char *)&v362 - v16;
  __chkstk_darwin(v17);
  v409 = (char *)&v362 - v18;
  __chkstk_darwin(v19);
  v379 = (char **)((char *)&v362 - v20);
  __chkstk_darwin(v21);
  v388 = (char *)&v362 - v22;
  __chkstk_darwin(v23);
  v25 = (uint64_t)&v362 - v24;
  v26 = type metadata accessor for Date(0);
  v427 = *(_QWORD *)(v26 - 8);
  v428 = v26;
  __chkstk_darwin(v26);
  v370 = (char *)&v362 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v397 = (char *)&v362 - v29;
  __chkstk_darwin(v30);
  v396 = (char *)&v362 - v31;
  __chkstk_darwin(v32);
  v406 = (char *)&v362 - v33;
  __chkstk_darwin(v34);
  v407 = (char *)&v362 - v35;
  __chkstk_darwin(v36);
  v378 = (char *)&v362 - v37;
  __chkstk_darwin(v38);
  v377 = (char *)&v362 - v39;
  __chkstk_darwin(v40);
  v386 = (char *)&v362 - v41;
  __chkstk_darwin(v42);
  v387 = (char *)&v362 - v43;
  __chkstk_darwin(v44);
  v421 = (char *)&v362 - v45;
  __chkstk_darwin(v46);
  v399 = (char *)&v362 - v47;
  __chkstk_darwin(v48);
  v424 = (char *)&v362 - v49;
  __chkstk_darwin(v50);
  v422 = (char *)&v362 - v51;
  v385 = type metadata accessor for Calendar(0);
  v384 = *(_QWORD *)(v385 - 8);
  __chkstk_darwin(v385);
  v416 = (uint64_t)&v362 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v404 = _s10PredicatesOMa(0);
  __chkstk_darwin(v404);
  v405 = (unint64_t)&v362 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v408 = type metadata accessor for REMRemindersListDataView.ShowCompleted(0);
  v419 = *(char **)(v408 - 8);
  __chkstk_darwin(v408);
  v372 = (char *)&v362 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  v395 = (char *)&v362 - v56;
  __chkstk_darwin(v57);
  v393 = (char *)&v362 - v58;
  __chkstk_darwin(v59);
  v414 = (char *)&v362 - v60;
  __chkstk_darwin(v61);
  v413 = (char *)&v362 - v62;
  Subtasks = (_QWORD *)type metadata accessor for REMRemindersListDataView.FetchSubtasks(0);
  v425 = *(Subtasks - 1);
  v426 = (void (*)(_QWORD, _QWORD, _QWORD))Subtasks;
  __chkstk_darwin(Subtasks);
  v392 = (char *)&v362 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  v403 = (char *)&v362 - v66;
  __chkstk_darwin(v67);
  v423 = (unint64_t)&v362 - v68;
  __chkstk_darwin(v69);
  v420 = (char *)&v362 - v70;
  v71 = type metadata accessor for REMRemindersListDataView.SortingStyle(0);
  v72 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v74 = (char *)&v362 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v75);
  v77 = (char *)&v362 - v76;
  Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration(0);
  v79 = *(_QWORD *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  v371 = (char *)&v362 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v81);
  v394 = (char *)&v362 - v82;
  __chkstk_darwin(v83);
  v391 = (char *)&v362 - v84;
  __chkstk_darwin(v85);
  v390 = (char *)&v362 - v86;
  v88 = __chkstk_darwin(v87);
  v90 = (char *)&v362 - v89;
  v411 = a2;
  v91 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v88);
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter(v91);
  v92 = *(double (**)(char *, uint64_t))(v79 + 8);
  v92(v90, Configuration);
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v74, enum case for REMRemindersListDataView.SortingStyle.default(_:), v71);
  LOBYTE(a2) = static REMRemindersListDataView.SortingStyle.== infix(_:_:)(v77, v74);
  v93 = *(void (**)(char *, uint64_t))(v72 + 8);
  v93(v74, v71);
  v93(v77, v71);
  if ((a2 & 1) == 0)
    goto LABEL_3;
  v95 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v94);
  v96 = v420;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v95);
  v369 = Configuration;
  v92(v90, Configuration);
  v97 = v425;
  v98 = *(void (**)(unint64_t))(v425 + 104);
  v99 = v423;
  LODWORD(v368) = enum case for REMRemindersListDataView.FetchSubtasks.on(_:);
  v100 = v426;
  v98(v423);
  v101 = sub_10009FC50(&qword_100841010, (uint64_t (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FetchSubtasks, (uint64_t)&protocol conformance descriptor for REMRemindersListDataView.FetchSubtasks);
  v102 = dispatch thunk of static Equatable.== infix(_:_:)(v96, v99, v100, v101);
  v103 = *(char **)(v97 + 8);
  ((void (*)(uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))v103)(v99, v100);
  ((void (*)(char *, void (*)(_QWORD, _QWORD, _QWORD)))v103)(v96, v100);
  if ((v102 & 1) != 0)
    goto LABEL_3;
  v420 = v103;
  v109 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v104);
  v110 = v413;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v109);
  v92(v90, v369);
  v111 = (uint64_t)v419;
  v112 = v414;
  v113 = v408;
  (*((void (**)(char *, _QWORD, uint64_t))v419 + 13))(v414, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v408);
  v114 = static REMRemindersListDataView.ShowCompleted.== infix(_:_:)(v110, v112);
  v115 = *(void (**)(char *, uint64_t))(v111 + 8);
  v115(v112, v113);
  v115(v110, v113);
  if ((v114 & 1) == 0)
  {
LABEL_3:
    v105 = (void *)objc_opt_self(REMError);
    v106 = (uint64_t)String._bridgeToObjectiveC()();
    objc_msgSend(v105, "internalErrorWithDebugDescription:", v106);

    swift_willThrow(v107);
    return v106;
  }
  v364 = (void (*)(uint64_t, uint64_t))v115;
  v363 = (void (*)(char *, uint64_t))v92;
  v116 = v405;
  swift_storeEnumTagMultiPayload(v405, v404, 52);
  sub_10000D2C0();
  v118 = v117;
  sub_1000CACA8(v116);
  if (qword_1008375D8 != -1)
    goto LABEL_202;
LABEL_7:
  v119 = qword_100871F88;
  KeyPath = swift_getKeyPath(&unk_1006BEF60);
  v431 = v119;
  swift_bridgeObjectRetain(v119);
  v121 = swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v121);
  v123 = *(_QWORD *)((v431 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v122 = *(_QWORD *)((v431 & 0xFFFFFFFFFFFFFF8) + 0x18);
  v124 = (void (*)(_QWORD, _QWORD))v420;
  if (v123 >= v122 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v122 > 1);
  v125 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v123, KeyPath);
  specialized Array._endMutation()(v125);
  v126 = v431;
  swift_release(KeyPath);
  v365 = (id)v118;
  v366 = (id)sub_100358798(v126, 0, 0, v118);
  swift_bridgeObjectRelease();
  v127 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v128 = swift_allocObject(v127, 48, 7);
  *(_OWORD *)(v128 + 16) = xmmword_1006A8550;
  if (qword_100837258 != -1)
    swift_once(&qword_100837258, sub_10033CFC4);
  v129 = (void *)qword_100871E40;
  *(_QWORD *)(v128 + 32) = qword_100871E40;
  v130 = qword_100837230;
  v131 = v129;
  if (v130 != -1)
    v131 = (id)swift_once(&qword_100837230, sub_10033CEE8);
  v132 = (void *)qword_100871E18;
  *(_QWORD *)(v128 + 40) = qword_100871E18;
  v431 = v128;
  specialized Array._endMutation()(v131);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  v133 = v132;
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v135 = swift_bridgeObjectRelease().n128_u64[0];
  v136 = v366;
  objc_msgSend(v366, "setSortDescriptors:", isa, v135);

  v137 = sub_1000151B0(0, (unint64_t *)&qword_10083AE90, off_1007D6708);
  v106 = (uint64_t)v412;
  v138 = v410;
  v139 = NSManagedObjectContext.fetch<A>(_:)(v136, v137);
  if (v138)
  {

    return v106;
  }
  v423 = v139;
  v404 = v137;
  v414 = 0;
  v141 = v390;
  v142 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v140);
  v143 = v403;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter(v142);
  v144 = v141;
  v145 = v369;
  v146 = v363;
  v147.n128_f64[0] = ((double (*)(char *, uint64_t))v363)(v144, v369);
  v148 = v391;
  v149 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v147);
  v150 = (uint64_t)v393;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v149);
  v146(v148, v145);
  v152 = v425;
  v151 = v426;
  v153 = v392;
  (*(void (**)(char *, char *, _QWORD))(v425 + 16))(v392, v143, v426);
  v154 = (*(uint64_t (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v152 + 88))(v153, v151);
  if (v154 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:) || v154 == (_DWORD)v368)
  {
    v405 = sub_1002AF838((uint64_t)_swiftEmptyArrayStorage);
    v155 = v422;
  }
  else
  {
    v155 = v422;
    if (v154 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
      goto LABEL_224;
    v106 = v423;
    v156 = v414;
    sub_100498430(v423, (id)v150, v412, 0);
    if (v156)
    {

      v364(v150, v408);
      v124(v403, v426);
      swift_bridgeObjectRelease();
      return v106;
    }
    v405 = v157;
    v414 = 0;
  }
  v364(v150, v408);
  v158 = ((uint64_t (*)(char *, void (*)(_QWORD, _QWORD, _QWORD)))v124)(v403, v426);
  v159 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.calendar.getter(v158);
  v160 = v424;
  REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.today.getter(v159);
  Calendar.startOfDay(for:)(v160);
  v420 = *(char **)(v427 + 8);
  ((void (*)(char *, uint64_t))v420)(v160, v428);
  v161 = (uint64_t)v399;
  Calendar.beginningOfNextDay(_:)(v155);
  v435 = _swiftEmptyArrayStorage;
  v162 = v423;
  v413 = (char *)(v423 >> 62);
  if (v423 >> 62)
    goto LABEL_206;
  v150 = *(_QWORD *)((v423 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v423);
  while (1)
  {
    v403 = (char *)(v162 & 0xC000000000000001);
    if ((v162 & 0xC000000000000001) != 0 && v150)
    {
      v163 = 0;
      do
      {
        v164 = v163 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v163);
        v163 = v164;
      }
      while (v150 != v164);
    }
    v425 = v150;
    if (v413)
    {
      if (v162 < 0)
        v169 = v162;
      else
        v169 = v162 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v162);
      v106 = _CocoaArrayWrapper.subscript.getter(0, v150, v169);
      v167 = v170;
      v165 = v171;
      v172 = v162;
      v168 = v173;
      swift_bridgeObjectRelease_n(v172, 2);
    }
    else
    {
      v165 = 0;
      v106 = v162 & 0xFFFFFFFFFFFFFF8;
      v166 = v150;
      v167 = (v162 & 0xFFFFFFFFFFFFFF8) + 32;
      v168 = (2 * v166) | 1;
    }
    v431 = v106;
    v432 = (void (*)(_QWORD, _QWORD, _QWORD))v167;
    v433 = v165;
    v434 = v168;
    swift_unknownObjectRetain(v106);
    sub_1004B71D4(v174, v167, v165, v168, v161);
    v176 = v175;
    v150 = v177;
    swift_unknownObjectRelease(v106);
    if (v176)
    {
      v178 = (unint64_t)v150 >> 1;
      if (v425 < (uint64_t)((unint64_t)v150 >> 1))
        goto LABEL_214;
      if (v413)
      {
        if ((v423 & 0x8000000000000000) != 0)
          v179 = v423;
        else
          v179 = v423 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v423, 2);
        v150 = _CocoaArrayWrapper.endIndex.getter(v179);
        swift_bridgeObjectRelease();
      }
      else
      {
        v150 = *(_QWORD *)((v423 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v423);
      }
      if (v150 >= v178)
      {
        if (!v403 || v178 == v425)
        {
          v161 = v423;
        }
        else
        {
          if (v178 >= v425)
            goto LABEL_216;
          v180 = v178;
          v161 = v423;
          v181 = v425;
          do
          {
            v182 = v180 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v180);
            v180 = v182;
          }
          while (v181 != v182);
        }
        v183 = v161 & 0xFFFFFFFFFFFFFF8;
        if (v413)
        {
          if (v161 < 0)
            v186 = v161;
          else
            v186 = v161 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v161);
          v183 = _CocoaArrayWrapper.subscript.getter(v178, v425, v186);
          v184 = v187;
          v178 = v188;
          v185 = v189;
          swift_unknownObjectRelease(v106);
          swift_bridgeObjectRelease_n(v161, 2);
        }
        else
        {
          swift_unknownObjectRelease(v106);
          v184 = (void (*)(_QWORD, _QWORD, _QWORD))(v183 + 32);
          v185 = (2 * v425) | 1;
        }
        swift_unknownObjectRelease(v176);
        v431 = v183;
        v432 = v184;
        v433 = v178;
        v434 = v185;
        goto LABEL_58;
      }
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      _diagnoseUnexpectedEnumCase<A>(type:)(v426, v426);
      __break(1u);
      goto LABEL_225;
    }
LABEL_58:
    v190 = 0;
    v191 = v423;
    if ((v423 & 0x8000000000000000) == 0)
      v191 = v423 & 0xFFFFFFFFFFFFFF8;
    v392 = (char *)v191;
    v393 = (char *)(v423 & 0xFFFFFFFFFFFFFF8);
    v368 = (v423 & 0xFFFFFFFFFFFFFF8) + 32;
    v150 = v425;
    v367 = (2 * v425) | 1;
    LODWORD(v390) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.day(_:);
    v192 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
    do
    {
      LODWORD(v410) = v190;
      v426 = v432;
      v193 = v433;
      v197 = v434;
      v198 = (char *)(v434 >> 1);
      v419 = (char *)v431;
      v199 = swift_unknownObjectRetain(v431);
      v412 = (id)v193;
      if ((char *)v193 == v198)
      {
        v193 = v197 >> 1;
        v200 = v414;
        v162 = v423;
        goto LABEL_78;
      }
      v391 = (char *)v197;
      v197 = v197 & 1 | (2 * v193);
      v162 = v423;
      while (1)
      {
        if (v193 >= (uint64_t)v198)
        {
          __break(1u);
LABEL_107:
          ((void (*)(char *, uint64_t, __n128))v25)(v198, v161, v199);
          v243 = (uint64_t)v377;
          v426(v377, v192, v161);
          goto LABEL_108;
        }
        v201 = *((id *)v426 + v193);
        v202 = objc_msgSend(v201, v192[409]);
        if (v202)
          break;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v427 + 56))(v25, 1, 1, v428);
LABEL_68:
        sub_10000882C(v25, (uint64_t *)&unk_1008380D0);

LABEL_69:
        ++v193;
        v197 += 2;
        v150 = v425;
        if (v198 == (char *)v193)
        {
          v193 = (uint64_t)v198;
          v197 = (unint64_t)v391;
          v200 = v414;
          goto LABEL_78;
        }
      }
      v203 = v202;
      v204 = v424;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v202);

      v205 = v427;
      v106 = *(_QWORD *)(v427 + 32);
      v206 = v204;
      v161 = v428;
      ((void (*)(uint64_t, char *, uint64_t))v106)(v25, v206, v428);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v205 + 56))(v25, 0, 1, v161);
      v207 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v205 + 48);
      v162 = v423;
      if (v207(v25, 1, v161) == 1)
        goto LABEL_68;
      v208 = v25;
      v209 = v421;
      v161 = v428;
      ((void (*)(char *, uint64_t, uint64_t))v106)(v421, v208, v428);
      v210 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v106 = dispatch thunk of static Comparable.< infix(_:_:)(v422, v209, v161, v210);
      v211 = v209;
      v25 = v208;
      v192 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
      ((void (*)(char *, uint64_t))v420)(v211, v161);

      if ((v106 & 1) != 0)
        goto LABEL_69;
      v150 = v425;
      if ((uint64_t)v412 >= v193)
      {
        swift_unknownObjectRelease(v419);
        v194 = v427;
        v161 = v428;
        v193 = (uint64_t)v422;
        v106 = v416;
        goto LABEL_62;
      }
      v200 = v414;
      if (v193 < 0)
        goto LABEL_205;
LABEL_78:
      v106 = v405;
      swift_bridgeObjectRetain(v405);
      sub_1004B7430((uint64_t)v419, (uint64_t)v426, (uint64_t)v412, v197, v106);
      v213 = v212;
      v118 = (uint64_t)v200;
      swift_bridgeObjectRelease();
      if (v150 < v193)
      {
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease(v193);
        v364(v118, v408);
        (*(void (**)(char *, uint64_t))(v381 + 8))(v383, v382);
        swift_release(v413);
        v354 = v428;
        v355 = (void (*)(char *, uint64_t, __n128))v420;
        ((void (*)(char *, uint64_t))v420)(v399, v428);
        (*(void (**)(uint64_t, uint64_t))(v384 + 8))(v106, v385);
        swift_unknownObjectRelease(v431);
        v356 = swift_bridgeObjectRelease();
        v355(v422, v354, v356);
        return v106;
      }
      v161 = v428;
      if (v413)
      {
        swift_bridgeObjectRetain_n(v162, 2);
        v214 = _CocoaArrayWrapper.endIndex.getter(v392);
        swift_bridgeObjectRelease();
      }
      else
      {
        v214 = *((_QWORD *)v393 + 2);
        swift_bridgeObjectRetain(v162);
      }
      v106 = v416;
      if (v214 < v193)
        goto LABEL_199;
      v414 = v200;
      if (v403 && v193 != v150)
      {
        if (v193 >= v150)
        {
          __break(1u);
LABEL_202:
          swift_once(&qword_1008375D8, sub_100497894);
          goto LABEL_7;
        }
        v215 = v193;
        do
        {
          v216 = v215 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v215);
          v215 = v216;
        }
        while (v150 != v216);
      }
      if (v413)
      {
        swift_bridgeObjectRetain(v162);
        v217 = _CocoaArrayWrapper.subscript.getter(v193, v150, v392);
        v218 = v220;
        v193 = v221;
        v222 = v162;
        v219 = v223;
        swift_bridgeObjectRelease_n(v222, 2);
      }
      else
      {
        v217 = (uint64_t)v393;
        v218 = (void (*)(_QWORD, _QWORD, _QWORD))v368;
        v219 = v367;
      }
      swift_unknownObjectRelease(v431);
      v431 = v217;
      v432 = v218;
      v433 = v193;
      v434 = v219;
      if (!*(_QWORD *)(v213 + 16))
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease(v419);
        v193 = (uint64_t)v422;
        v194 = v427;
        v150 = v425;
        v192 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
LABEL_62:
        v195 = v410;
        goto LABEL_63;
      }
      v194 = v427;
      v224 = v424;
      v193 = (uint64_t)v422;
      (*(void (**)(char *, char *, uint64_t))(v427 + 16))(v424, v422, v161);
      v225 = v415;
      REMRemindersListDataView.CompletedDateBucketsModel.Day.init(date:reminders:)(v224, v213);
      (*(void (**)(char *, _QWORD, uint64_t))(v417 + 104))(v225, v390, v418);
      v226 = (unint64_t)v435;
      swift_isUniquelyReferenced_nonNull_native(v435);
      if ((v227 & 1) == 0)
        v226 = sub_1002C8774(0, *(_QWORD *)(v226 + 16) + 1, 1, v226);
      v195 = v410;
      v229 = *(_QWORD *)(v226 + 16);
      v228 = *(_QWORD *)(v226 + 24);
      if (v229 >= v228 >> 1)
        v226 = sub_1002C8774(v228 > 1, v229 + 1, 1, v226);
      *(_QWORD *)(v226 + 16) = v229 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v417 + 32))(v226+ ((*(unsigned __int8 *)(v417 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v417 + 80))+ *(_QWORD *)(v417 + 72) * v229, v415, v418);
      swift_unknownObjectRelease(v419);
      v435 = (_QWORD *)v226;
      v150 = v425;
      v192 = &selRef_hasFailedLoadingAccountStoresFromDiskDueToDiskFull;
LABEL_63:
      v196 = v424;
      Calendar.beginningOfPreviousDay(_:)(v193);
      v162 = *(_QWORD *)(v194 + 40);
      ((void (*)(uint64_t, char *, uint64_t))v162)(v193, v196, v161);
      v190 = 1;
    }
    while ((v195 & 1) == 0);
    v230 = v389;
    v231 = *(char **)(v389 + 104);
    v232 = v401;
    LODWORD(v419) = enum case for Calendar.Component.day(_:);
    v233 = v402;
    v391 = v231;
    ((void (*)(char *))v231)(v401);
    v234 = (uint64_t)v388;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v232, -6, v193, 0);
    v390 = *(char **)(v230 + 8);
    ((void (*)(char *, uint64_t))v390)(v232, v233);
    v235 = v427;
    v236 = v386;
    v415 = *(char **)(v427 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v415)(v386, v193, v161);
    v421 = *(char **)(v235 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v421)(v234, 1, v161) == 1)
    {
      v237 = (uint64_t)v387;
      v426 = *(void (**)(_QWORD, _QWORD, _QWORD))(v235 + 32);
      v426(v387, v236, v161);
      sub_10000882C(v234, (uint64_t *)&unk_1008380D0);
    }
    else
    {
      ((void (*)(char *, uint64_t))v420)(v236, v161);
      v237 = (uint64_t)v387;
      v426 = *(void (**)(_QWORD, _QWORD, _QWORD))(v235 + 32);
      v426(v387, v234, v161);
    }
    v238 = v414;
    sub_1004B7F88(v237, &v431, v106, v411, v405, v423, (unint64_t *)&v435, v193, (unsigned int *)&enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastSevenDays(_:));
    if (v238)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v239 = v237;
LABEL_110:
      v244 = (void (*)(char *, uint64_t))v420;
      ((void (*)(uint64_t, uint64_t))v420)(v239, v161);
      v244(v399, v161);
      (*(void (**)(uint64_t, uint64_t))(v384 + 8))(v106, v385);
      swift_unknownObjectRelease(v431);
      v245 = swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t, __n128))v244)(v193, v161, v245);
      return v106;
    }
    v150 = 0;
    v240 = v424;
    Calendar.beginningOfPreviousDay(_:)(v237);
    v25 = (uint64_t)v420;
    ((void (*)(uint64_t, uint64_t))v420)(v237, v161);
    ((void (*)(uint64_t, char *, uint64_t))v162)(v193, v240, v161);
    v241 = v401;
    v242 = v402;
    ((void (*)(char *, _QWORD, uint64_t))v391)(v401, v419, v402);
    v192 = v379;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v241, -29, v193, 0);
    ((void (*)(char *, uint64_t))v390)(v241, v242);
    v198 = v378;
    ((void (*)(char *, uint64_t, uint64_t))v415)(v378, v193, v161);
    if (((unsigned int (*)(char **, uint64_t, uint64_t))v421)(v192, 1, v161) != 1)
      goto LABEL_107;
    v243 = (uint64_t)v377;
    v426(v377, v198, v161);
    sub_10000882C((uint64_t)v192, (uint64_t *)&unk_1008380D0);
LABEL_108:
    sub_1004B7F88(v243, &v431, v106, v411, v405, v423, (unint64_t *)&v435, v193, (unsigned int *)&enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.pastThirtyDays(_:));
    if (v150)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v239 = v243;
      goto LABEL_110;
    }
    v414 = 0;
    v246 = v424;
    Calendar.beginningOfPreviousDay(_:)(v243);
    ((void (*)(uint64_t, uint64_t))v420)(v243, v161);
    ((void (*)(uint64_t, char *, uint64_t))v162)(v193, v246, v161);
    v118 = 1;
    v247 = swift_beginAccess(&v431, v430, 1, 0);
    LODWORD(v387) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.month(_:);
    LODWORD(v389) = enum case for Calendar.Component.month(_:);
LABEL_114:
    v410 = v118;
    Calendar.startOfMonth(for:)(v193, v247);
    v193 = (uint64_t)v432;
    v250 = v433;
    v251 = v434;
    v252 = v434 >> 1;
    v419 = (char *)v431;
    v253 = swift_unknownObjectRetain(v431);
    v412 = (id)v250;
    if (v250 == v252)
      goto LABEL_127;
    v388 = (char *)v251;
    v251 = v251 & 1 | (2 * v250);
    while (2)
    {
      if (v250 >= v252)
        goto LABEL_200;
      v255 = *(id *)(v193 + 8 * v250);
      v256 = objc_msgSend(v255, "completionDate");
      if (!v256)
      {
        v254 = (uint64_t)v409;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v427 + 56))(v409, 1, 1, v428);
LABEL_117:
        sub_10000882C(v254, (uint64_t *)&unk_1008380D0);

LABEL_118:
        ++v250;
        v251 += 2;
        if (v252 == v250)
        {
          v251 = (unint64_t)v388;
LABEL_127:
          v259 = v414;
          v150 = (uint64_t)v364;
          v260 = (uint64_t)v395;
          goto LABEL_128;
        }
        continue;
      }
      break;
    }
    v257 = v256;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v256);

    v254 = (uint64_t)v409;
    v106 = v428;
    ((void (*)(void))v426)();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v427 + 56))(v254, 0, 1, v106);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v421)(v254, 1, v106) == 1)
      goto LABEL_117;
    v118 = (uint64_t)v406;
    v106 = v428;
    v426(v406, v254, v428);
    v258 = sub_10009FC50((unint64_t *)&qword_100842190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v25 = dispatch thunk of static Comparable.< infix(_:_:)(v407, v118, v106, v258);
    ((void (*)(uint64_t, uint64_t))v420)(v118, v106);

    if ((v25 & 1) != 0)
      goto LABEL_118;
    if ((uint64_t)v412 >= v250)
    {
      swift_unknownObjectRelease(v419);
      v25 = v428;
      v193 = (uint64_t)v422;
      v106 = v416;
      v265 = v414;
      v280 = (uint64_t)v398;
      goto LABEL_150;
    }
    v259 = v414;
    v150 = (uint64_t)v364;
    v260 = (uint64_t)v395;
    if (v250 < 0)
      goto LABEL_219;
LABEL_128:
    v261 = v394;
    v262 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v253);
    REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v262);
    v363(v261, v369);
    v263 = sub_1004B76C8((uint64_t)v419, v193, v412, v251, v416, v260, v405);
    if (v259)
    {
      ((void (*)(uint64_t, uint64_t))v150)(v260, v408);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease(v419);
      v294 = v428;
      v106 = (uint64_t)v420;
      ((void (*)(char *, uint64_t))v420)(v407, v428);
      ((void (*)(char *, uint64_t))v106)(v399, v294);
      (*(void (**)(uint64_t, uint64_t))(v384 + 8))(v416, v385);
      swift_unknownObjectRelease(v431);
      v295 = swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t, __n128))v106)(v422, v294, v295);
      return v106;
    }
    v25 = (uint64_t)v263;
    ((void (*)(uint64_t, uint64_t))v150)(v260, v408);
    v264 = v251 >> 1;
    if (v425 >= (uint64_t)(v251 >> 1))
      break;
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    if (v162 < 0)
      v357 = v162;
    else
      v357 = v162 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v162, 2);
    v358 = _CocoaArrayWrapper.endIndex.getter(v357);
    swift_bridgeObjectRelease();
    if (v358 < 0)
      goto LABEL_220;
    v150 = v358;
    swift_bridgeObjectRetain(v423);
    v359 = _CocoaArrayWrapper.endIndex.getter(v357);
    swift_bridgeObjectRelease();
    if (v359 < 0)
      goto LABEL_221;
    swift_bridgeObjectRetain(v423);
    v360 = _CocoaArrayWrapper.endIndex.getter(v357);
    swift_bridgeObjectRelease();
    if (v360 < v358)
    {
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
      goto LABEL_215;
    }
LABEL_226:
    v161 = (uint64_t)v399;
    v162 = v423;
  }
  if (v413)
  {
    swift_bridgeObjectRetain_n(v423, 2);
    v150 = _CocoaArrayWrapper.endIndex.getter(v392);
    swift_bridgeObjectRelease();
  }
  else
  {
    v150 = *((_QWORD *)v393 + 2);
    swift_bridgeObjectRetain(v423);
  }
  if (v150 < v264)
    goto LABEL_204;
  v265 = 0;
  if (!v403 || v264 == v425)
    goto LABEL_139;
  if (v264 >= v425)
    goto LABEL_213;
  v266 = v251 >> 1;
  v267 = v425;
  do
  {
    v268 = v266 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v266);
    v266 = v268;
  }
  while (v267 != v268);
LABEL_139:
  if (v413)
  {
    v272 = v423;
    swift_bridgeObjectRetain(v423);
    v269 = _CocoaArrayWrapper.subscript.getter(v264, v425, v392);
    v270 = v273;
    v264 = v274;
    v271 = v275;
    swift_bridgeObjectRelease_n(v272, 2);
  }
  else
  {
    v269 = (uint64_t)v393;
    v270 = (void (*)(_QWORD, _QWORD, _QWORD))v368;
    v271 = v367;
  }
  v276 = v431;
  v431 = v269;
  v432 = v270;
  v433 = v264;
  v434 = v271;
  swift_unknownObjectRelease(v276);
  if (*(_QWORD *)(v25 + 16))
  {
    v277 = *(int *)(sub_10001A630(&qword_10084CAA8) + 48);
    v278 = v400;
    v193 = (uint64_t)v422;
    ((void (*)(char *, char *, uint64_t))v415)(v400, v422, v428);
    *(_QWORD *)&v278[v277] = v25;
    (*(void (**)(char *, _QWORD, uint64_t))(v417 + 104))(v278, v387, v418);
    v279 = (unint64_t)v435;
    swift_bridgeObjectRetain(v25);
    swift_isUniquelyReferenced_nonNull_native(v279);
    v106 = v416;
    v280 = (uint64_t)v398;
    if ((v281 & 1) == 0)
      v279 = sub_1002C8774(0, *(_QWORD *)(v279 + 16) + 1, 1, v279);
    v283 = *(_QWORD *)(v279 + 16);
    v282 = *(_QWORD *)(v279 + 24);
    if (v283 >= v282 >> 1)
      v279 = sub_1002C8774(v282 > 1, v283 + 1, 1, v279);
    *(_QWORD *)(v279 + 16) = v283 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v417 + 32))(v279+ ((*(unsigned __int8 *)(v417 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v417 + 80))+ *(_QWORD *)(v417 + 72) * v283, v400, v418);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v419);
    v435 = (_QWORD *)v279;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v419);
    v193 = (uint64_t)v422;
    v106 = v416;
    v280 = (uint64_t)v398;
  }
  v25 = v428;
LABEL_150:
  v284 = v401;
  v285 = v402;
  ((void (*)(char *, _QWORD, uint64_t))v391)(v401, v389, v402);
  v286 = v407;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v284, -1, v407, 0);
  v287 = v284;
  v288 = v286;
  ((void (*)(char *, uint64_t))v390)(v287, v285);
  v289 = v397;
  ((void (*)(char *, char *, uint64_t))v415)(v397, v286, v25);
  v290 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v421)(v280, 1, v25);
  v414 = v265;
  if (v290 == 1)
  {
    v248 = v396;
    v426(v396, v289, v25);
    sub_10000882C(v280, (uint64_t *)&unk_1008380D0);
    v249 = (void (*)(char *, uint64_t))v420;
  }
  else
  {
    v291 = v289;
    v249 = (void (*)(char *, uint64_t))v420;
    ((void (*)(char *, uint64_t))v420)(v291, v25);
    v248 = v396;
    v426(v396, v280, v25);
  }
  v249(v288, v25);
  ((void (*)(uint64_t, char *, uint64_t))v162)(v193, v248, v25);
  v118 = v410 + 1;
  if (v410 != 12)
    goto LABEL_114;
  v292 = swift_bridgeObjectRelease();
  if (v433 == v434 >> 1)
  {
    v293 = (void (*)(uint64_t, uint64_t))v420;
    ((void (*)(char *, uint64_t, __n128))v420)(v399, v25, v292);
    swift_bridgeObjectRelease();

    goto LABEL_197;
  }
  v296 = v401;
  v297 = v402;
  v298 = (void (*)(char *, _QWORD, uint64_t))v391;
  ((void (*)(char *, _QWORD, uint64_t, __n128))v391)(v401, enum case for Calendar.Component.era(_:), v402, v292);
  v299 = Calendar.component(_:from:)(v296, v193);
  v300 = (void (*)(char *, uint64_t))v390;
  ((void (*)(char *, uint64_t))v390)(v296, v297);
  v298(v296, enum case for Calendar.Component.year(_:), v297);
  v301 = Calendar.component(_:from:)(v296, v193);
  v300(v296, v297);
  v302 = v432;
  v304 = v433;
  v303 = v434;
  __chkstk_darwin(v431);
  v427 = v299;
  *(&v362 - 4) = v299;
  *(&v362 - 3) = v301;
  v425 = v301;
  v361 = v106;
  swift_unknownObjectRetain(v305);
  v306 = (uint64_t)v302;
  v307 = v414;
  v150 = sub_100514764(v308, v306, v304, v303, (void (*)(Swift::UInt *__return_ptr, id *))sub_1004BAD00);
  swift_bridgeObjectRetain(v150);
  v310 = (char *)sub_1001E8EFC(v309);
  swift_bridgeObjectRelease();
  v429 = v310;
  sub_1004B4B54(&v429);
  if (v307)
  {
LABEL_225:
    swift_release(v429);
    __break(1u);
    goto LABEL_226;
  }
  v414 = 0;
  v311 = swift_bridgeObjectRelease();
  v150 = (uint64_t)v429;
  v423 = *((_QWORD *)v429 + 2);
  if (v423)
  {
    v312 = 0;
    v419 = v429 + 32;
    LODWORD(v409) = enum case for REMRemindersListDataView.DateBucketsModel.DateFormattingStyle.allOf(_:);
    LODWORD(v410) = enum case for REMRemindersListDataView.DateBucketsModel.DateFormattingStyle.restOfUnlessFirstDay(_:);
    LODWORD(v412) = enum case for REMRemindersListDataView.CompletedDateBucketsModel.Bucket.year(_:);
    v313 = v376;
    v413 = v429;
    do
    {
      if (v312 >= *(_QWORD *)(v150 + 16))
        goto LABEL_217;
      v314 = &v419[24 * v312];
      v315 = *((_QWORD *)v314 + 2);
      if (*(_QWORD *)v314 == v427 && *((_QWORD *)v314 + 1) == v425)
      {
        v325 = v424;
        ((void (*)(char *, uint64_t, uint64_t, __n128))v415)(v424, v193, v25, v311);
        v326 = v373;
        (*(void (**)(char *, _QWORD, uint64_t))(v374 + 104))(v373, v410, v375);
        v327 = swift_bridgeObjectRetain(v315);
        REMRemindersListDataView.DateBucketsModel.RepresentativeDate.init(date:formattingStyle:)(v325, v326, v327);
      }
      else
      {
        v429 = (char *)*((_QWORD *)v314 + 2);
        swift_bridgeObjectRetain(v315);
        v317 = sub_10001A630(&qword_10083D590);
        v318 = sub_10031FFA8();
        v319 = v414;
        Sequence.firstMap<A>(_:)(v313, sub_1004B64F4, 0, v317, v25, v318);
        v414 = v319;
        if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v421)(v313, 1, v25) == 1)
        {
          swift_bridgeObjectRelease();
          sub_10000882C((uint64_t)v313, (uint64_t *)&unk_1008380D0);
          v106 = v416;
          goto LABEL_160;
        }
        v320 = v370;
        v426(v370, v313, v25);
        v321 = v424;
        ((void (*)(char *, char *, uint64_t))v415)(v424, v320, v25);
        v322 = v373;
        (*(void (**)(char *, _QWORD, uint64_t))(v374 + 104))(v373, v409, v375);
        REMRemindersListDataView.DateBucketsModel.RepresentativeDate.init(date:formattingStyle:)(v321, v322, v323);
        ((void (*)(char *, uint64_t))v420)(v320, v25);
      }
      if ((unint64_t)v315 >> 62)
      {
        if (v315 < 0)
          v350 = v315;
        else
          v350 = v315 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v315);
        v328 = _CocoaArrayWrapper.endIndex.getter(v350);
        swift_bridgeObjectRelease();
        if (v328 < 0)
          goto LABEL_222;
        swift_bridgeObjectRetain(v315);
        v351 = _CocoaArrayWrapper.endIndex.getter(v350);
        swift_bridgeObjectRelease();
        if (v351 < 0)
          goto LABEL_223;
        swift_bridgeObjectRetain(v315);
        v352 = _CocoaArrayWrapper.endIndex.getter(v350);
        v324 = swift_bridgeObjectRelease();
        if (v352 < v328)
          goto LABEL_218;
      }
      else
      {
        v328 = *(_QWORD *)((v315 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if ((v315 & 0xC000000000000001) != 0 && v328 != 0)
      {
        v330 = 0;
        do
        {
          v331 = v330 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v330);
          v330 = v331;
        }
        while (v328 != v331);
      }
      if ((unint64_t)v315 >> 62)
      {
        if (v315 < 0)
          v335 = v315;
        else
          v335 = v315 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v315);
        v193 = _CocoaArrayWrapper.subscript.getter(0, v328, v335);
        v333 = v336;
        v332 = v337;
        v334 = v338;
        v324 = swift_bridgeObjectRelease_n(v315, 2);
      }
      else
      {
        v332 = 0;
        v193 = v315 & 0xFFFFFFFFFFFFFF8;
        v333 = (v315 & 0xFFFFFFFFFFFFFF8) + 32;
        v334 = (2 * v328) | 1;
      }
      v339 = v371;
      v340 = REMRemindersListDataView.CompletedByDateBucketsInvocation.Parameters.configuration.getter(v324);
      v118 = (uint64_t)v372;
      REMRemindersListDataView.FetchConfiguration.showCompleted.getter(v340);
      v363(v339, v369);
      v106 = v416;
      v341 = v414;
      v342 = sub_1004B76C8(v193, v333, v332, v334, v416, v118, v405);
      v414 = v341;
      if (v341)
        goto LABEL_201;
      v343 = v342;
      v364(v118, v408);
      swift_unknownObjectRelease(v193);
      v344 = *(int *)(sub_10001A630(&qword_10084CAA0) + 48);
      v345 = v380;
      (*(void (**)(char *, char *, uint64_t))(v381 + 16))(v380, v383, v382);
      *(_QWORD *)&v345[v344] = v343;
      (*(void (**)(char *, _QWORD, uint64_t))(v417 + 104))(v345, v412, v418);
      v346 = (unint64_t)v435;
      swift_isUniquelyReferenced_nonNull_native(v435);
      v25 = v428;
      if ((v347 & 1) == 0)
        v346 = sub_1002C8774(0, *(_QWORD *)(v346 + 16) + 1, 1, v346);
      v193 = (uint64_t)v422;
      v349 = *(_QWORD *)(v346 + 16);
      v348 = *(_QWORD *)(v346 + 24);
      if (v349 >= v348 >> 1)
        v346 = sub_1002C8774(v348 > 1, v349 + 1, 1, v346);
      *(_QWORD *)(v346 + 16) = v349 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v417 + 32))(v346+ ((*(unsigned __int8 *)(v417 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v417 + 80))+ *(_QWORD *)(v417 + 72) * v349, v380, v418);
      v435 = (_QWORD *)v346;
      (*(void (**)(char *, uint64_t))(v381 + 8))(v383, v382);
      v313 = v376;
      v150 = (uint64_t)v413;
LABEL_160:
      ++v312;
    }
    while (v312 != v423);
  }

  swift_release(v150);
  v353 = swift_bridgeObjectRelease();
  v293 = (void (*)(uint64_t, uint64_t))v420;
  ((void (*)(char *, uint64_t, __n128))v420)(v399, v25, v353);
LABEL_197:
  (*(void (**)(uint64_t, uint64_t))(v384 + 8))(v106, v385);
  swift_unknownObjectRelease(v431);
  v106 = (uint64_t)v435;
  v293(v193, v25);
  return v106;
}

uint64_t sub_1004BAD00@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_1004B629C(a1, v2[2], v2[3], v2[4], a2);
}

ValueMetadata *type metadata accessor for EraAndYear()
{
  return &type metadata for EraAndYear;
}

unint64_t sub_1004BAD30()
{
  unint64_t result;

  result = qword_10084CAB0;
  if (!qword_10084CAB0)
  {
    result = swift_getWitnessTable(&unk_1006BEF94, &type metadata for EraAndYear);
    atomic_store(result, (unint64_t *)&qword_10084CAB0);
  }
  return result;
}

uint64_t destroy for RDDARequest(uint64_t a1)
{
  return sub_10019E538(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for RDDARequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_10019E498(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for RDDARequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_10019E498(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_10019E538(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for RDDARequest(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_10019E538(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDDARequest(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDARequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDARequest()
{
  return &type metadata for RDDARequest;
}

uint64_t sub_1004BAF90()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  _QWORD v14[2];
  _QWORD v15[6];
  char v16;

  sub_1000A5B8C(v0, (uint64_t)v15);
  if (v16)
  {
    v1 = v15[0];
    v2 = (void *)v15[1];
    v3 = v15[2];
    v4 = (void *)v15[3];
    v14[0] = 0;
    v14[1] = 0xE000000000000000;
    if (v16 == 1)
    {
      _StringGuts.grow(_:)(57);
      v5 = 0x8000000100705BF0;
      v6 = 0xD000000000000027;
    }
    else
    {
      _StringGuts.grow(_:)(58);
      v6 = 0xD000000000000028;
      v5 = 0x8000000100705BC0;
    }
    String.append(_:)(*(Swift::String *)&v6);
    v9._countAndFlagsBits = v1;
    v9._object = v2;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0x6E756F636361202CLL;
    v10._object = (void *)0xED0000203A444974;
    String.append(_:)(v10);
    v11._countAndFlagsBits = v3;
    v11._object = v4;
    String.append(_:)(v11);
  }
  else
  {
    strcpy((char *)v14, "{accountIDs ");
    BYTE5(v14[1]) = 0;
    HIWORD(v14[1]) = -5120;
    v7._countAndFlagsBits = Array.description.getter(v15[0], &type metadata for String);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
  }
  v12._countAndFlagsBits = 125;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return v14[0];
}

void sub_1004BB10C(void *a1, uint64_t a2)
{
  sub_1004BB1C0(a1, a2, &qword_10083FD08, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))sub_1005CEFB8);
}

void sub_1004BB130(void *a1, uint64_t a2)
{
  sub_1004BB1C0(a1, a2, &qword_10083FDC8, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))sub_1005CEA9C);
}

void sub_1004BB154(void *a1, uint64_t a2)
{
  sub_1004BB1C0(a1, a2, &qword_10083FDD0, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))sub_1005CEFF8);
}

void sub_1004BB178(void *a1, uint64_t a2)
{
  sub_1004BB1C0(a1, a2, &qword_10083FD00, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))sub_1005CF038);
}

void sub_1004BB19C(void *a1, uint64_t a2)
{
  sub_1004BB1C0(a1, a2, &qword_10083D118, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))sub_1005CEADC);
}

void sub_1004BB1C0(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  Swift::String v29;
  id v30;
  char *v31;
  uint64_t v32;
  Swift::String v33;
  void *object;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  NSString v40;
  Class isa;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  char v46[80];
  uint64_t (*v47)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t);

  v47 = a4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(a3);
  v13 = swift_allocObject(v12, 40, 7);
  v43 = xmmword_1006A3C00;
  *(_OWORD *)(v13 + 16) = xmmword_1006A3C00;
  *(_QWORD *)(v13 + 32) = a1;
  v44 = v13;
  specialized Array._endMutation()(v13);
  v14 = v44;
  v15 = a1;
  v16 = v47(v14, 0, 1, 0, a2);
  swift_bridgeObjectRelease(v14);
  if (v4)
    return;
  v17 = v11;
  if (!((unint64_t)v16 >> 62))
  {
    v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    v19 = v9;
    if (v18 < 2)
    {
      if (!v18)
        goto LABEL_8;
      goto LABEL_5;
    }
LABEL_15:
    swift_bridgeObjectRelease(v16);
    static String._unconditionallyBridgeFromObjectiveC(_:)(REMErrorDomain);
    v25 = v24;
    v26 = sub_10001A630((uint64_t *)&unk_10083A280);
    inited = swift_initStackObject(v26, v46);
    *(_OWORD *)(inited + 16) = v43;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
    *(_QWORD *)(inited + 40) = v28;
    v44 = 0;
    v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v29._object = (void *)0x80000001007060C0;
    v29._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v29);
    v30 = objc_msgSend(v15, "uuid");
    v31 = v17;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

    v32 = sub_10009FC50((unint64_t *)&qword_10083FA40, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v32);
    object = v33._object;
    String.append(_:)(v33);
    v35 = swift_bridgeObjectRelease(object);
    (*(void (**)(char *, uint64_t, __n128))(v19 + 8))(v31, v8, v35);
    v36 = v44;
    v37 = v45;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v36;
    *(_QWORD *)(inited + 56) = v37;
    v38 = sub_10016E7E4(inited);
    v39 = objc_allocWithZone((Class)NSError);
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v39, "initWithDomain:code:userInfo:", v40, -1, isa, swift_bridgeObjectRelease(v38).n128_f64[0]);

    swift_willThrow(v42);
    return;
  }
  if (v16 < 0)
    v21 = v16;
  else
    v21 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v22 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v16);
  v19 = v9;
  if (v22 > 1)
    goto LABEL_15;
  swift_bridgeObjectRetain(v16);
  v23 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v16);
  if (!v23)
    goto LABEL_8;
LABEL_5:
  if ((v16 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v20 = *(id *)(v16 + 32);
LABEL_8:
    swift_bridgeObjectRelease(v16);
    return;
  }
  __break(1u);
}

uint64_t sub_1004BB544(uint64_t a1)
{
  return sub_1004BB58C(a1, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
}

uint64_t sub_1004BB568(uint64_t a1)
{
  return sub_1004BB58C(a1, &qword_10084CC90, off_1007D6730);
}

uint64_t sub_1004BB58C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t result;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v5 = sub_1000151B0(0, a2, a3);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(v5), "entity");
  objc_msgSend(v6, "setEntity:", v7);

  objc_msgSend(v6, "setAffectedStores:", 0);
  objc_msgSend(v6, "setPredicate:", a1);
  v11 = sub_10001A630(&qword_10084B310);
  v10[0] = v6;
  v8 = v6;
  throwingCast<A>(_:as:failureMessage:)(&v12, v10, v11, 0, 0, v11);

  result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v10);
  if (!v3)
    return v12;
  return result;
}

uint64_t sub_1004BB6A4(uint64_t a1)
{
  return sub_1004BB58C(a1, (unint64_t *)&qword_10083AE90, off_1007D6708);
}

uint64_t sub_1004BB6C8(uint64_t a1)
{
  return sub_1004BB6E4(a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDGroceryOperationQueueItem);
}

uint64_t sub_1004BB6E4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v4 = a2(0);
  v5 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "entity");
  objc_msgSend(v5, "setEntity:", v6);

  objc_msgSend(v5, "setAffectedStores:", 0);
  objc_msgSend(v5, "setPredicate:", a1);
  v10 = sub_10001A630(&qword_10084B310);
  v9[0] = v5;
  v7 = v5;
  throwingCast<A>(_:as:failureMessage:)(&v11, v9, v10, 0, 0, v10);

  result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v9);
  if (!v2)
    return v11;
  return result;
}

uint64_t sub_1004BB7FC(uint64_t a1)
{
  return sub_1004BB6E4(a1, (uint64_t (*)(_QWORD))type metadata accessor for REMCDTemplateOperationQueueItem);
}

void sub_1004BB81C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[56];

  v2 = v1;
  sub_1000A5B8C(a1, (uint64_t)v19);
  if (qword_100837400 != -1)
    swift_once(&qword_100837400, sub_1003CF614);
  v3 = type metadata accessor for Logger(0);
  sub_10001AAA8(v3, (uint64_t)qword_100848A60);
  v4 = swift_retain_n(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v18 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = *(_QWORD *)(v1 + 16);
    v10 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v10);
    v17 = sub_10001A820(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease(v10);
    *(_WORD *)(v7 + 12) = 2080;
    v11 = sub_1003CF760();
    v13 = v12;
    v17 = sub_10001A820(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Putting event {identifier: %s, reader: %s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v14 = *(_QWORD *)(v2 + 40);
  v15 = *(void (**)(_BYTE *))(v14 + 48);
  if (v15)
  {
    v16 = *(_QWORD *)(v14 + 56);
    swift_retain();
    v15(v19);
    sub_1000A5C24((uint64_t)v15, v16);
  }
}

void sub_1004BBA30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  if (qword_100837400 != -1)
    swift_once(&qword_100837400, sub_1003CF614);
  v2 = type metadata accessor for Logger(0);
  sub_10001AAA8(v2, (uint64_t)qword_100848A60);
  v3 = swift_retain_n(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = v1[2];
    v9 = v1[3];
    swift_bridgeObjectRetain(v9);
    v15 = sub_10001A820(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v10 = sub_1003CF760();
    v15 = sub_10001A820(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    swift_release_n(v1);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Putting event {identifier: %s, reader: %s}", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v12 = v1[5];
  v13 = *(void (**)(uint64_t *))(v12 + 48);
  if (v13)
  {
    v14 = *(_QWORD *)(v12 + 56);
    swift_retain();
    v13(&v17);
    sub_1000A5C24((uint64_t)v13, v14);
  }
}

void sub_1004BBC40(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Class isa;

  v3 = v2;
  v4 = v1;
  if (!a1)
  {
    sub_10014B398(0, 0);
    objc_msgSend(v1, "setSecondaryGroceryLocalesInfoAsData:", 0);
    return;
  }
  v6 = type metadata accessor for RDSecondaryGroceryLocalesInfo(0);
  v7 = sub_10009FC50(&qword_10084CBA8, type metadata accessor for RDSecondaryGroceryLocalesInfo, (uint64_t)&unk_1006ADF10);
  swift_retain();
  v8 = REMChecksumRepresentable.rem_checksum.getter(v6, v7);
  if (v3)
  {
LABEL_3:
    swift_release(a1);
    return;
  }
  v10 = v8;
  v11 = v9;
  v12 = objc_msgSend(v1, "secondaryGroceryLocalesInfoChecksum", swift_bridgeObjectRetain(v9).n128_f64[0]);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v16 = v15;

  if (v10 == v14 && v11 == v16)
  {
    swift_release(a1);
    swift_bridgeObjectRelease_n(v11, 3);
    return;
  }
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v14, v16, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
LABEL_11:
    v18 = sub_10009FC50((unint64_t *)&unk_100850770, type metadata accessor for RDSecondaryGroceryLocalesInfo, (uint64_t)&unk_1006BEC18);
    v20 = REMJSONRepresentable.toJSONData()(v6, v18, v19);
    v22 = v21;
    sub_10014B398(v10, v11);
    swift_bridgeObjectRelease();
    sub_1000A70E4(v20, v22);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v20, v22);
    objc_msgSend(v4, "setSecondaryGroceryLocalesInfoAsData:", isa);

    sub_1000A71C8(v20, v22);
    goto LABEL_3;
  }
  swift_release(a1);
  swift_bridgeObjectRelease();
}

void sub_1004BBE70(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Class isa;
  uint64_t v25;

  v4 = v3;
  v5 = v2;
  if (!a1)
  {
    sub_1003A24F0(0, 0, a2 & 1);
    objc_msgSend(v2, "setRecentlyDeletedInfoAsData:", 0);
    return;
  }
  v8 = type metadata accessor for RDRecentlyDeletedInfo(0);
  v9 = sub_10009FC50(&qword_10084CB78, type metadata accessor for RDRecentlyDeletedInfo, (uint64_t)&unk_1006BEBE8);
  swift_retain();
  v10 = REMChecksumRepresentable.rem_checksum.getter(v8, v9);
  if (v4)
  {
LABEL_3:
    swift_release(a1);
    return;
  }
  v12 = v11;
  v25 = v10;
  v13 = objc_msgSend(v2, "recentlyDeletedInfoChecksum", swift_bridgeObjectRetain(v11).n128_f64[0]);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v17 = v16;

  if (v25 == v15 && v12 == v17)
  {
    swift_release(a1);
    swift_bridgeObjectRelease_n(v12, 3);
    return;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v12, v15, v17, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
LABEL_11:
    v19 = sub_10009FC50(&qword_100841B08, type metadata accessor for RDRecentlyDeletedInfo, (uint64_t)&unk_1006C45CC);
    v21 = REMJSONRepresentable.toJSONData()(v8, v19, v20);
    v23 = v22;
    sub_1003A24F0(v25, v12, a2 & 1);
    swift_bridgeObjectRelease();
    sub_1000A70E4(v21, v23);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A71C8(v21, v23);
    objc_msgSend(v5, "setRecentlyDeletedInfoAsData:", isa);

    sub_1000A71C8(v21, v23);
    goto LABEL_3;
  }
  swift_release(a1);
  swift_bridgeObjectRelease();
}

uint64_t sub_1004BC0B4(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084CAB8, &qword_1008375E8, (uint64_t)qword_100871F98, (uint64_t)sub_1004A1758);
}

uint64_t sub_1004BC0D8(uint64_t a1)
{
  return sub_1001489A4(a1, qword_10084CAD0, &qword_100837638, (uint64_t)qword_100872088, (uint64_t)sub_1004A1870);
}

unint64_t sub_1004BC100()
{
  unint64_t result;

  result = qword_10084CAF0;
  if (!qword_10084CAF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PermanentlyHideError, &type metadata for PermanentlyHideError);
    atomic_store(result, (unint64_t *)&qword_10084CAF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PermanentlyHideError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1004BC184 + 4 * byte_1006BF090[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1004BC1A4 + 4 * byte_1006BF095[v4]))();
}

_BYTE *sub_1004BC184(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1004BC1A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1004BC1AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1004BC1B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1004BC1BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1004BC1C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PermanentlyHideError()
{
  return &type metadata for PermanentlyHideError;
}

NSObject *sub_1004BC1E0(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint8_t *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject **v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  NSObject *v33;
  id v34;
  os_log_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  os_log_t *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  NSObject **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_t v52;
  os_log_t v53;
  _QWORD v54[3];
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v50 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v52 = (os_log_t)((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v8 = sub_10001AAA8(v6, (uint64_t)qword_10084CAB8);
  v9 = a2;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v51 = v6;
  if (v12)
  {
    v49 = v2;
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 138412290;
    v55 = v9;
    v14 = v9;
    v59 = a1;
    v15 = v14;
    v3 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    v16 = v48;
    *v48 = v9;

    a1 = v59;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Performing query in daemon {fetchRequest: %@}", v13, 0xCu);
    v17 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v16, 1, v17);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

  }
  v18 = -[NSObject fetchExecutor](v9, "fetchExecutor");
  v54[2] = sub_1000151B0(0, &qword_10084CC80, _REMFetchExecutor_ptr);
  v53 = v18;
  v19 = sub_10001A630(&qword_10084CC88);
  throwingCast<A>(_:as:failureMessage:)(&v55, &v53, v19, 0, 0, v19);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v53);
  if (!v3)
  {
    switch((unint64_t)-[NSObject type](v9, "type"))
    {
      case 0uLL:
        v20 = v57;
        v21 = v58;
        sub_10000A388(&v55, v57);
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 8))(a1, v20, v21);
        break;
      case 1uLL:
        v29 = v57;
        v30 = v58;
        sub_10000A388(&v55, v57);
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(a1, v29, v30);
        break;
      case 2uLL:
        v25 = v57;
        v26 = v58;
        sub_10000A388(&v55, v57);
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(a1, v25, v26);
        break;
      case 3uLL:
        v27 = v57;
        v28 = v58;
        sub_10000A388(&v55, v57);
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 40))(a1, v27, v28);
        break;
      case 4uLL:
        v23 = v57;
        v24 = v58;
        sub_10000A388(&v55, v57);
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 56))(a1, v23, v24);
        break;
      default:
        (*(void (**)(os_log_t, uint64_t, uint64_t))(v50 + 16))(v52, v8, v51);
        v46 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        v47 = sub_10016E7E4((uint64_t)_swiftEmptyArrayStorage);
        sub_1004A14D8((uint64_t)"unknown type", 12, 2uLL, v46, v47);
        __break(1u);
        JUMPOUT(0x1004BC708);
    }
    v32 = (void *)v22;
    v33 = v9;
    v34 = v32;
    v35 = v33;
    v9 = v34;
    v36 = Logger.logObject.getter(v9);
    v37 = static os_log_type_t.info.getter(v36);
    v38 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      v39 = swift_slowAlloc(22, -1);
      LODWORD(v59) = v38;
      v40 = v39;
      v41 = (os_log_t *)swift_slowAlloc(16, -1);
      *(_DWORD *)v40 = 138412546;
      v53 = v35;
      v42 = v35;
      v52 = v36;
      v43 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
      *v41 = v35;

      *(_WORD *)(v40 + 12) = 2112;
      v53 = v9;
      v44 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
      v41[1] = v9;

      v35 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v59, "Finished performing query in daemon {fetchRequest: %@, result: %@}", (uint8_t *)v40, 0x16u);
      v45 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v41, 2, v45);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {

    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v55);
  }
  return v9;
}

uint64_t sub_1004BC71C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _BYTE v8[24];

  swift_beginAccess(a1 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordID, v8, 33, 0);
  if (a3)
  {
    v5 = a2;
    sub_10019141C((uint64_t)a3, (uint64_t)v5);
  }
  else
  {
    v6 = a2;
    v5 = (id)sub_1002CBD98(v6);

  }
  return swift_endAccess(v8);
}

uint64_t sub_1004BC934@<X0>(void *a1@<X0>, void **a2@<X1>, _QWORD *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t (*a11)(uint64_t))
{
  uint64_t v11;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(id *, void *, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  id v41[4];

  v41[0] = 0;
  v18 = objc_msgSend(a1, "latestFetchResultTokenWithError:", v41);
  v19 = v41[0];
  if (v18)
  {
    v20 = v18;
    v36 = a9;
    v37 = a8;
    v21 = *a2;
    *a2 = v18;
    v22 = v19;
    v23 = v20;

    v24 = a3[3];
    v25 = a3[4];
    sub_10000A388(a3, v24);
    v41[3] = (id)a11(a10);
    v41[0] = a4;
    v26 = *(uint64_t (**)(id *, void *, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8);
    v27 = a4;
    v28 = v26(v41, a1, v23, a5, a6, a7, v37, v24, v25);
    v30 = v29;
    v32 = v31;

    result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v41);
    if (!v11)
    {
      *v36 = v28;
      v36[1] = v30;
      v36[2] = v32;
    }
  }
  else
  {
    v34 = v41[0];
    _convertNSErrorToError(_:)(v19);

    return swift_willThrow(v35);
  }
  return result;
}

uint64_t sub_1004BCC88(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch(sub_1004BCCD0, 0, 0);
}

uint64_t sub_1004BCCD0()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  void (**v5)(_QWORD, _QWORD, _QWORD, __n128);
  Class isa;
  __n128 v7;

  v1 = objc_msgSend((id)objc_opt_self(ICCloudConfiguration), "sharedConfiguration");
  v2 = objc_msgSend(v1, "minimumSearchTermLengthByBaseLanguage");

  v3 = *(void **)(v0 + 16);
  if (v2)
  {
    v4 = sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, v4, &protocol witness table for String);

  }
  else
  {
    sub_1002B083C((uint64_t)_swiftEmptyArrayStorage);
  }

  v5 = *(void (***)(_QWORD, _QWORD, _QWORD, __n128))(v0 + 24);
  sub_1000151B0(0, (unint64_t *)&qword_100839DE0, NSNumber_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v7 = swift_bridgeObjectRelease();
  ((void (**)(_QWORD, Class, _QWORD, __n128))v5)[2](v5, isa, 0, v7);

  _Block_release(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004BCE0C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, void (*a16)(_QWORD))
{
  __n128 v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *inited;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  os_log_type_t v56;
  NSObject *log;
  uint64_t v58;
  _QWORD *v61;
  uint64_t v63;
  _BYTE v64[16];
  uint64_t v65;
  id v66[2];
  char v67[24];
  char v68[40];
  _BYTE v69[56];

  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v22 = static OS_dispatch_queue.main.getter(v21);
  v23 = *(void **)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController];
  v24 = type metadata accessor for RDDatabaseSaver();
  inited = (_QWORD *)swift_initStackObject(v24, v68);
  inited[2] = v22;
  inited[3] = v23;
  inited[4] = a2;
  swift_beginAccess(a12 + 16, v67, 0, 0);
  v26 = *(_QWORD *)(a12 + 16);
  sub_1000184A8((uint64_t)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity], (uint64_t)v69);
  v27 = v23;
  swift_bridgeObjectRetain(v26);
  v28 = a8;
  v29 = inited;
  v30 = a7;
  v31 = a3;
  v61 = v29;
  sub_100651C74(a3, a4, a5, a6, v30, v28, a9, a10, a11, v26, a13, a14, (uint64_t)v69);
  v58 = a4;
  swift_bridgeObjectRelease();
  sub_10000A388(&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler], *(_QWORD *)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler + 24]);
  sub_100339230(a10);
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v32 = type metadata accessor for Logger(0);
  sub_10001AAA8(v32, (uint64_t)qword_10084CAB8);
  v33 = a1;
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain_n(v58, 2);
  swift_bridgeObjectRetain_n(a5, 2);
  swift_bridgeObjectRetain_n(a6, 2);
  v34 = v30;
  swift_bridgeObjectRetain_n(v30, 2);
  swift_bridgeObjectRetain_n(a10, 2);
  swift_retain_n(a12);
  v35 = v33;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v56 = v37;
    log = v36;
    v38 = swift_slowAlloc(82, -1);
    v55 = (void *)swift_slowAlloc(32, -1);
    v66[0] = v55;
    *(_DWORD *)v38 = 136448002;
    sub_1000181B8();
    v63 = sub_10001A820(v39, v40, (uint64_t *)v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);

    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2048;
    if ((unint64_t)v31 >> 62)
    {
      if (v31 < 0)
        v49 = v31;
      else
        v49 = v31 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v31);
      v41 = _CocoaArrayWrapper.endIndex.getter(v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      v41 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v63 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 22) = 2048;
    v42 = a16;
    if ((unint64_t)v58 >> 62)
    {
      if (v58 < 0)
        v50 = v58;
      else
        v50 = v58 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v58);
      v43 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v63 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 32) = 2048;
    if ((unint64_t)a5 >> 62)
    {
      if (a5 < 0)
        v51 = a5;
      else
        v51 = a5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a5);
      v44 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v63 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 42) = 2048;
    if ((unint64_t)a6 >> 62)
    {
      if (a6 < 0)
        v52 = a6;
      else
        v52 = a6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a6);
      v45 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease();
    }
    else
    {
      v45 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v63 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 52) = 2048;
    if ((unint64_t)v34 >> 62)
    {
      if (v34 < 0)
        v53 = v34;
      else
        v53 = v34 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v34);
      v46 = _CocoaArrayWrapper.endIndex.getter(v53);
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v63 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 62) = 2048;
    if ((unint64_t)a10 >> 62)
    {
      if (a10 < 0)
        v54 = a10;
      else
        v54 = a10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a10);
      v47 = _CocoaArrayWrapper.endIndex.getter(v54);
      swift_bridgeObjectRelease();
    }
    else
    {
      v47 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v63 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 72) = 2048;
    swift_beginAccess(a12 + 16, &v63, 0, 0);
    v48 = *(_QWORD *)(*(_QWORD *)(a12 + 16) + 16);
    swift_release(a12);
    v65 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
    swift_release(a12);
    _os_log_impl((void *)&_mh_execute_header, log, v56, "(daemon) SAVE END {author: %{public}s, accountStorages.count: %ld, listStorages.count: %ld, listSectionStorages.count: %ld, smartListStorages.count: %ld, smartListSectionStorages.count: %ld, reminderStorages.count: %ld, replicaManagers.count: %ld}", (uint8_t *)v38, 0x52u);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v31, 2);
    swift_bridgeObjectRelease_n(v58, 2);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(a6, 2);
    swift_bridgeObjectRelease_n(v34, 2);
    swift_bridgeObjectRelease_n(a10, 2);
    swift_release_n(a12);
    v42 = a16;
  }
  v42(0);
  swift_setDeallocating(v61);

}

void sub_1004BDD48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  void **v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void **v16;
  uint64_t v17;
  uint8_t *v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  id v28;
  id v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSObject **v34;
  NSObject *v35;
  uint64_t v36;
  id v37;
  void ***v38;
  uint64_t v39;
  void **aBlock;
  _QWORD v41[4];
  _QWORD *v42;
  uint64_t v43;

  v6 = v5;
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v11 = type metadata accessor for Logger(0);
  sub_10001AAA8(v11, (uint64_t)qword_10084CAB8);
  v12 = a2;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v43 = a5;
    v39 = a3;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    aBlock = v12;
    v38 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v15 = 138543362;
    v16 = v12;
    a5 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v41);
    *v38 = v12;

    v6 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "fetchShareForObject: Fetching object with ID {objectID: %{public}@}", v15, 0xCu);
    v17 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v38, 1, v17);
    swift_slowDealloc(v38, -1, -1);
    v18 = v15;
    a3 = v39;
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  v19 = v12;
  v20 = (void *)sub_1005CDB04((uint64_t)v19);
  if (!v6)
  {
    v21 = v20;
    sub_1004BB1C0(v20, 0, &qword_10083FD00, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))sub_1005CF038);
    v23 = v22;

    if (v23)
    {
      v24 = objc_msgSend(objc_allocWithZone((Class)ICCollaborationController), "initWithCloudContext:", a3);
      v25 = (_QWORD *)swift_allocObject(&unk_1007F6F78, 48, 7);
      v25[2] = a4;
      v25[3] = a5;
      v25[4] = v24;
      v25[5] = v23;
      v41[3] = sub_1004D2B78;
      v42 = v25;
      aBlock = _NSConcreteStackBlock;
      v41[0] = 1107296256;
      v41[1] = sub_1000E18E4;
      v41[2] = &unk_1007F6F90;
      v26 = _Block_copy(&aBlock);
      v27 = v42;
      swift_retain();
      v28 = v24;
      v29 = v23;
      swift_release(v27);
      objc_msgSend(v28, "fetchShareIfNecessaryForObject:completionHandler:", v29, v26);
      _Block_release(v26);

    }
    else
    {
      v30 = v19;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v33 = 138543362;
        aBlock = (void **)&v30->isa;
        v35 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v41);
        *v34 = v30;

        _os_log_impl((void *)&_mh_execute_header, v31, v32, "fetchShareForObject: Tried to fetch non-existent object {remObjectID: %{public}@}", v33, 0xCu);
        v36 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v34, 1, v36);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {

        v31 = v30;
      }

      v37 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v30);
      swift_willThrow(v37);
    }
  }
}

void sub_1004BE184(int a1, void (*a2)(id, _QWORD), int a3, void *a4, id a5)
{
  id v7;
  id v8;

  v7 = objc_msgSend(a5, "objectID");
  v8 = objc_msgSend(a4, "fetchShareForObjectWithManagedObjectID:", v7);

  a2(v8, 0);
}

void sub_1004BE214(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  void **v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void ***v17;
  void **v18;
  uint64_t v19;
  void **v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  Class isa;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  NSObject **v32;
  NSObject *v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  id v41;
  uint8_t *buf;
  void **aBlock;
  _QWORD v47[4];
  _QWORD *v48;
  unint64_t v49;

  v9 = v8;
  v49 = a5;
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v12 = type metadata accessor for Logger(0);
  sub_10001AAA8(v12, (uint64_t)qword_10084CAB8);
  v13 = a2;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = (void ***)swift_slowAlloc(8, -1);
    buf = v16;
    *(_DWORD *)v16 = 138543362;
    aBlock = v13;
    v18 = v13;
    v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v47);
    *v17 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "createShareForObject: Fetching object with ID {objectID: %{public}@}", buf, 0xCu);
    v19 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v17, 1, v19);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(buf, -1, -1);

  }
  else
  {

  }
  v20 = v13;
  v21 = (void *)sub_1005CDB04((uint64_t)v20);
  if (!v9)
  {
    v22 = v21;
    sub_1004BB1C0(v21, 0, &qword_10083FD00, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))sub_1005CF038);
    v24 = v23;

    if (v24)
    {
      v25 = objc_msgSend(objc_allocWithZone((Class)ICCollaborationController), "initWithCloudContext:", a3);
      v26 = objc_msgSend(v24, "objectID");
      if (v49 >> 60 == 15)
        isa = 0;
      else
        isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
      v36 = (void *)static OS_dispatch_queue.main.getter(v35);
      v37 = swift_allocObject(&unk_1007F6CD0, 24, 7);
      swift_unknownObjectWeakInit(v37 + 16, a6);
      v38 = (_QWORD *)swift_allocObject(&unk_1007F6F00, 40, 7);
      v38[2] = v37;
      v38[3] = a7;
      v38[4] = a8;
      v47[3] = sub_1004D2B1C;
      v48 = v38;
      aBlock = _NSConcreteStackBlock;
      v47[0] = 1107296256;
      v47[1] = sub_1000FF8C4;
      v47[2] = &unk_1007F6F18;
      v39 = _Block_copy(&aBlock);
      v40 = v48;
      swift_retain();
      swift_release(v40);
      objc_msgSend(v25, "createShareForObjectWithManagedObjectID:appIconData:queue:completionHandler:", v26, isa, v36, v39);
      _Block_release(v39);

    }
    else
    {
      v28 = v20;
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.error.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v31 = 138543362;
        aBlock = (void **)&v28->isa;
        v33 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v47);
        *v32 = v28;

        _os_log_impl((void *)&_mh_execute_header, v29, v30, "createShareForObject: Tried to fetch non-existent object {remObjectID: %{public}@}", v31, 0xCu);
        v34 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v32, 1, v34);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);
      }
      else
      {

        v29 = v28;
      }

      v41 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v28);
      swift_willThrow(v41);
    }
  }
}

uint64_t sub_1004BE6D4(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t Strong;
  char *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[6];
  uint64_t v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void *, uint64_t);
  uint64_t v44;
  id v45;
  uint64_t v46;

  if (!a1)
    return a4(a1, a2);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("RootRecord"));
  v12 = v11;
  v13 = a1;
  v14 = CKRecord.subscript.getter(v10, v12);

  swift_bridgeObjectRelease();
  if (!v14)
  {
LABEL_9:

    return a4(a1, a2);
  }
  v15 = objc_opt_self(CKReference);
  v16 = swift_dynamicCastObjCClass(v14, v15);
  if (!v16)
  {
    swift_unknownObjectRelease(v14);
    goto LABEL_9;
  }
  v17 = (void *)v16;
  v40 = (uint64_t *)(a3 + 16);
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v18 = type metadata accessor for Logger(0);
  sub_10001AAA8(v18, (uint64_t)qword_10084CAB8);
  v19 = v13;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  v42 = a5;
  v43 = a4;
  v41 = a2;
  if (os_log_type_enabled(v20, v21))
  {
    v39 = v17;
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v22 = 138477827;
    v24 = objc_msgSend(v19, "recordID", v22 + 4);
    v45 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    *v23 = v24;

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "createShareForObject: Adding mapping for share recordID {recordID: %{private}@}", v22, 0xCu);
    v25 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v23, 1, v25);
    swift_slowDealloc(v23, -1, -1);
    v26 = v22;
    v17 = v39;
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

  }
  swift_beginAccess(v40, &v45, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v40, v27);
  if (Strong)
  {
    v29 = (char *)Strong;
    v30 = v19;
    v31 = objc_msgSend(v19, "recordID");
    v32 = objc_msgSend(v17, "recordID");
    v40 = &v38;
    v44 = *(_QWORD *)&v29[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordIDLock];
    __chkstk_darwin(v32);
    v37[2] = v29;
    v37[3] = v31;
    v37[4] = v33;
    v34 = type metadata accessor for UnfairLock(0);
    swift_retain();
    Lock.sync<A>(_:)(sub_1004D2F68, v37, v34, &type metadata for () + 1, &protocol witness table for UnfairLock);
    v35 = v44;

    swift_unknownObjectRelease(v14);
    swift_release(v35);
  }
  else
  {
    swift_unknownObjectRelease(v14);

  }
  a4 = v43;
  a2 = v41;
  return a4(a1, a2);
}

double sub_1004BEB2C(void *a1, int a2, void *a3, uint64_t a4, void *aBlock, void (*a6)(id, uint64_t, uint64_t, id, void *))
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  double result;

  v10 = _Block_copy(aBlock);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = v12;
  _Block_copy(v10);
  v14 = a3;
  v15 = a1;
  a6(v14, v11, v13, v15, v10);
  _Block_release(v10);
  _Block_release(v10);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  return result;
}

void sub_1004BEBCC(void *a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  id v23;
  os_log_type_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t Strong;
  void *v36;
  NSObject *log;
  uint64_t v38;
  os_log_t oslog;
  uint64_t v40;
  _BYTE v41[16];
  _QWORD v42[3];
  char v43[8];
  uint64_t v44;
  uint64_t v45;

  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v21 = type metadata accessor for Logger(0);
    sub_10001AAA8(v21, (uint64_t)qword_10084CAB8);
    sub_10013D030(a2, 1);
    v22 = a1;
    sub_10013D030(a2, 1);
    v23 = v22;
    oslog = (os_log_t)Logger.logObject.getter(v23);
    v24 = static os_log_type_t.error.getter(oslog);
    if (!os_log_type_enabled(oslog, v24))
    {
      sub_1001172E0(a2, 1);

      sub_1001172E0(a2, 1);
      sub_1001172E0(a2, 1);

      return;
    }
    v25 = swift_slowAlloc(22, -1);
    v26 = (_QWORD *)swift_slowAlloc(8, -1);
    v27 = swift_slowAlloc(32, -1);
    v40 = v27;
    *(_DWORD *)v25 = 138412546;
    v44 = (uint64_t)v23;
    v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    *v26 = v23;

    *(_WORD *)(v25 + 12) = 2080;
    swift_getErrorValue(a2, v43, v42);
    v29 = Error.localizedDescription.getter(v42[1], v42[2]);
    v44 = sub_10001A820(v29, v30, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    swift_bridgeObjectRelease();
    sub_1001172E0(a2, 1);
    sub_1001172E0(a2, 1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v24, "CKSystemSharingUIObserver: failed to save: {recordID: %@ error: %s}", (uint8_t *)v25, 0x16u);
    v31 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v26, 1, v31);
    swift_slowDealloc(v26, -1, -1);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v32 = a2;
    v33 = 1;
  }
  else
  {
    v6 = a4 + 16;
    v7 = qword_100837700;
    v8 = a2;
    if (v7 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v9 = type metadata accessor for Logger(0);
    sub_10001AAA8(v9, (uint64_t)qword_10084CAB8);
    sub_10013D030(a2, 0);
    v10 = a1;
    sub_10013D030(a2, 0);
    v11 = v10;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v38 = v6;
      v15 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v14 = 138412546;
      v40 = (uint64_t)v11;
      log = v12;
      v16 = v8;
      v17 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41);
      *v15 = v11;

      v8 = v16;
      *(_WORD *)(v14 + 12) = 2112;
      v40 = (uint64_t)v16;
      v18 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41);
      v15[1] = a2;
      sub_1001172E0(a2, 0);
      sub_1001172E0(a2, 0);
      v12 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v13, "CKSystemSharingUIObserver: didSave: {recordID: %@ share: %@}", (uint8_t *)v14, 0x16u);
      v19 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v15, 2, v19);
      v20 = v15;
      v6 = v38;
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {

      sub_1001172E0(a2, 0);
      sub_1001172E0(a2, 0);
    }

    swift_beginAccess(v6, &v40, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v6, v34);
    if (Strong)
    {
      v36 = (void *)Strong;
      sub_1004BF0CC(v8);
      sub_1001172E0(a2, 0);

      return;
    }
    v32 = a2;
    v33 = 0;
  }
  sub_1001172E0(v32, v33);
}

void sub_1004BF0CC(void *a1)
{
  char *v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  void *v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = objc_msgSend(a1, "recordID");
  aBlock[0] = *(_QWORD *)&v1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordIDLock];
  v10 = v1;
  v11 = v4;
  v12 = 0;
  v5 = type metadata accessor for UnfairLock(0);
  swift_retain();
  Lock.sync<A>(_:)(sub_1004D2AA8, &v9, v5, &type metadata for () + 1, &protocol witness table for UnfairLock);
  v6 = aBlock[0];

  swift_release(v6);
  v7 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1004BF844;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E18E4;
  aBlock[3] = &unk_1007F6D60;
  v8 = _Block_copy(aBlock);
  objc_msgSend(v2, "updateShare:accountID:completion:", a1, v7, v8);
  _Block_release(v8);

}

void sub_1004BF210(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Strong;
  void *v34;
  uint64_t v35;
  NSObject *oslog;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  char v40[8];
  uint64_t v41;
  uint64_t v42;

  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v20 = type metadata accessor for Logger(0);
    sub_10001AAA8(v20, (uint64_t)qword_10084CAB8);
    v21 = a1;
    sub_1000D026C(a2, 1);
    v22 = v21;
    v23 = sub_1000D026C(a2, 1);
    oslog = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v26 = (_QWORD *)swift_slowAlloc(8, -1);
      v27 = swift_slowAlloc(32, -1);
      v37 = v27;
      *(_DWORD *)v25 = 138412546;
      v41 = (uint64_t)v22;
      v28 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      *v26 = v22;

      *(_WORD *)(v25 + 12) = 2080;
      swift_getErrorValue(a2, v40, v39);
      v29 = Error.localizedDescription.getter(v39[1], v39[2]);
      v41 = sub_10001A820(v29, v30, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease();
      sub_1000D0278(a2, 1);
      sub_1000D0278(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v24, "CKSystemSharingUIObserver: stopped sharing failed: {recordID: %@ error: %s}", (uint8_t *)v25, 0x16u);
      v31 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v26, 1, v31);
      swift_slowDealloc(v26, -1, -1);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      sub_1000D0278(a2, 1);
    }
    else
    {
      sub_1000D0278(a2, 1);

      sub_1000D0278(a2, 1);
      sub_1000D0278(a2, 1);

    }
  }
  else
  {
    v9 = a4 + 16;
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v10 = type metadata accessor for Logger(0);
    sub_10001AAA8(v10, (uint64_t)qword_10084CAB8);
    v11 = a1;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      v37 = (uint64_t)v11;
      v35 = v9;
      v16 = a5;
      v17 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      *v15 = v11;

      a5 = v16;
      v9 = v35;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "CKSystemSharingUIObserver: stopped sharing: {recordID: %@}", v14, 0xCu);
      v18 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v15, 1, v18);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
    swift_beginAccess(v9, &v37, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v9, v32);
    if (Strong)
    {
      v34 = (void *)Strong;
      sub_1004BF674((uint64_t)v11, a5, a6);

    }
  }
}

void sub_1004BF674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD v16[8];
  NSObject *v17;
  uint64_t v18;

  v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v3
                                                             + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "cloudContext"));
  if (v7)
  {
    v8 = v7;
    v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordIDLock);
    __chkstk_darwin(v7);
    v16[2] = v3;
    v16[3] = a1;
    v16[4] = v9;
    v16[5] = a2;
    v16[6] = a3;
    v10 = type metadata accessor for UnfairLock(0);
    swift_retain();
    Lock.sync<A>(_:)(sub_1004D2A98, v16, v10, &type metadata for () + 1, &protocol witness table for UnfairLock);
    v11 = v18;

    swift_release(v11);
  }
  else
  {
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001AAA8(v12, (uint64_t)qword_10084CAB8);
    v17 = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v14, "shareDidStop: Cloud Context is not intialized", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

  }
}

void sub_1004BF844(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  _QWORD v11[3];
  _BYTE v12[8];
  uint64_t v13;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v2 = type metadata accessor for Logger(0);
    sub_10001AAA8(v2, (uint64_t)qword_10084CAB8);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v13 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_getErrorValue(a1, v12, v11);
      v7 = Error.localizedDescription.getter(v11[1], v11[2]);
      v10 = sub_10001A820(v7, v8, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to update share {error: %s}", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

void sub_1004BFA34(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  NSString v12;
  __n128 v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  NSObject **v20;
  NSObject *v21;
  uint64_t v22;
  void **aBlock;
  _QWORD v24[5];
  char v25[24];

  v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordID);
  swift_beginAccess(a1 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_shareRecordIDToRootRecordID, v25, 0, 0);
  v6 = *v5;
  v7 = a2;
  swift_bridgeObjectRetain(v6);
  v8 = sub_1002B1D74(v7, v6);

  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_beginAccess(v5, &aBlock, 33, 0);
    v9 = v7;
    v10 = (void *)sub_1002CBD98(v9);
    swift_endAccess(&aBlock);

    v11 = objc_msgSend(objc_allocWithZone((Class)ICCollaborationController), "initWithCloudContext:", a3);
    v12 = String._bridgeToObjectiveC()();
    sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v14 = static OS_dispatch_queue.main.getter(v13);
    v24[3] = sub_1004BFD30;
    v24[4] = 0;
    aBlock = _NSConcreteStackBlock;
    v24[0] = 1107296256;
    v24[1] = sub_10042D6CC;
    v24[2] = &unk_1007F6D38;
    v15 = _Block_copy(&aBlock);
    objc_msgSend(v11, "didStopSharingRecordID:accountID:queue:completionHandler:", v8, v12, v14, v15);
    _Block_release(v15);

  }
  else
  {
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v16 = type metadata accessor for Logger(0);
    sub_10001AAA8(v16, (uint64_t)qword_10084CAB8);
    v17 = v7;
    v14 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      aBlock = (void **)&v17->isa;
      v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v24);
      *v20 = v17;

      _os_log_impl((void *)&_mh_execute_header, v14, v18, "No mapping for share record, cannot stop share. {recordID: %@}", v19, 0xCu);
      v22 = sub_10001A630((uint64_t *)&unk_100839E70);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {

      v14 = v17;
    }
  }

}

void sub_1004BFD30()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001AAA8(v0, (uint64_t)qword_10084CAB8);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "shareDidStop: Stopped share successfully.", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

void sub_1004BFDFC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  v10 = swift_allocObject(&unk_1007F6C58, 32, 7);
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  v11 = swift_allocObject(&unk_1007F6C80, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1004D2A08;
  *(_QWORD *)(v11 + 24) = v10;
  v14[4] = sub_1000098EC;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1004BFF1C;
  v14[3] = &unk_1007F6C98;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain();
  swift_release(v13);
  objc_msgSend(a1, "acceptShareWithMetadata:callbackQueue:completionHandler:", a2, v9, v12);
  _Block_release(v12);

}

double sub_1004BFF1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  id v9;
  double result;

  v6 = *(void (**)(void))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  swift_retain(v5);
  v9 = a2;
  v6();
  swift_release(v5);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

void sub_1004BFFAC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v8;
  uint64_t v9;
  id v10;

  if (!a3)
  {
    v8 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  v8 = String._bridgeToObjectiveC()();
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v9 = _convertErrorToNSError(_:)(a4);
LABEL_6:
  v10 = (id)v9;
  (*(void (**)(uint64_t, _QWORD, NSString))(a5 + 16))(a5, a1 & 1, v8);

}

double sub_1004C0040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  double result;
  _QWORD v11[6];
  char v12;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a6;
  v12 = a8;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  swift_retain();
  sub_1004BB81C((uint64_t)v11);
  swift_release(a6);
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_1004C00D0(uint64_t a1, void *a2, void (*a3)(id, id))
{
  uint64_t v3;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  id v12;
  id v13;
  id v14;

  v7 = sub_1004C0280(a2);
  if (!v3)
  {
    if (v7)
    {
      v8 = sub_1004C03C8((uint64_t)a2);
      v9 = sub_1004C04B4((uint64_t)a2, a1, 64, (uint64_t (*)(uint64_t, uint64_t))sub_1004B2BC8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder);
      v10 = sub_1004C04B4((uint64_t)a2, a1, 96, (uint64_t (*)(uint64_t, uint64_t))sub_1004B2BC8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder);
      v11 = sub_1004C04B4((uint64_t)a2, a1, 128, (uint64_t (*)(uint64_t, uint64_t))sub_1004B2BC8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedReminder);
      v12 = objc_msgSend(objc_allocWithZone((Class)REMTemplateContentAttributes), "initWithReminderCount:hasDisplayDate:hasHashtags:hasLocationTriggersOrVehicleEventTriggers:hasImageAttachments:", v8, v9, v10, v11, sub_1004C04B4((uint64_t)a2, a1, 66, (uint64_t (*)(uint64_t, uint64_t))sub_10050DEE8, (uint64_t (*)(_QWORD))type metadata accessor for REMCDSavedAttachment));
      v13 = v12;
      v14 = 0;
    }
    else
    {
      v13 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", a2);
      v12 = 0;
      v14 = v13;
    }
    a3(v12, v14);

  }
}

BOOL sub_1004C0280(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v2 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v3 + 32) = a1;
  v11 = v3;
  specialized Array._endMutation()(v3);
  v4 = a1;
  v5 = (void *)sub_1002A6810(v11, 1);
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for REMCDTemplate();
  v7 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "entity");
  objc_msgSend(v7, "setEntity:", v8);

  objc_msgSend(v7, "setAffectedStores:", 0);
  objc_msgSend(v7, "setPredicate:", v5);

  v9 = NSManagedObjectContext.count<A>(for:)(v7, v6);
  return v9 > 0;
}

uint64_t sub_1004C03C8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;

  sub_1004B2BC8(a1, 32);
  v2 = v1;
  v3 = type metadata accessor for REMCDSavedReminder();
  v4 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "entity");
  objc_msgSend(v4, "setEntity:", v5);

  objc_msgSend(v4, "setAffectedStores:", 0);
  objc_msgSend(v4, "setPredicate:", v2);

  v6 = NSManagedObjectContext.count<A>(for:)(v4, v3);
  return v6;
}

BOOL sub_1004C04B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t (*a5)(_QWORD))
{
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;

  v6 = (void *)a4(a1, a3);
  v7 = a5(0);
  v8 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v7), "entity");
  objc_msgSend(v8, "setEntity:", v9);

  objc_msgSend(v8, "setAffectedStores:", 0);
  objc_msgSend(v8, "setPredicate:", v6);

  v10 = NSManagedObjectContext.count<A>(for:)(v8, v7);
  return v10 > 0;
}

void sub_1004C05B4(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  void *v12;
  uint64_t updated;
  void *v14;
  id v15;
  id v16;
  id v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  double v30;
  double v31;
  id v32;
  void (*v33)(_QWORD, _QWORD);
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v12 = (void *)sub_100300818();

  if (v12)
  {
    updated = type metadata accessor for RDTemplateOperationCreateOrUpdateTemplatePublicLink();
    sub_100018618(a6, (uint64_t)v35);
    v14 = (void *)objc_opt_self(ICCloudConfiguration);
    v15 = a4;
    v16 = a5;
    v33 = a2;
    v17 = objc_msgSend(v14, "sharedConfiguration");
    objc_msgSend(v17, "templatePublicLinkTTL");
    v19 = v18;

    v21 = v36;
    v20 = v37;
    v34 = a1;
    v22 = sub_10001BA38((uint64_t)v35, v36);
    v23 = __chkstk_darwin(v22);
    v25 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v26 + 16))(v25, v23);
    v27 = sub_10050015C((uint64_t)v15, (uint64_t)v16, (uint64_t)v25, 0, 1000, updated, v21, v20, v19);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v35);
    v28 = swift_allocObject(&unk_1007F6AA0, 32, 7);
    *(_QWORD *)(v28 + 16) = v33;
    *(_QWORD *)(v28 + 24) = a3;
    swift_retain();
    v29 = objc_msgSend(v14, "sharedConfiguration");
    objc_msgSend(v29, "templatePublicLinkOperationTimeoutInterval");
    v31 = v30;

    sub_1004FB494(v34, (void (*)(uint64_t, uint64_t))sub_100117308, v28, v31);
    swift_release(v27);
    swift_release(v28);
  }
  else
  {
    v32 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
    a2(0, v32);

  }
}

void sub_1004C07FC(void *a1, void (*a2)(_QWORD, id), uint64_t a3, void *a4, void *a5)
{
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TemplatePublicContentPreview;
  uint64_t inited;
  uint64_t v19;
  id v20;
  uint64_t v21;

  v10 = (void *)sub_100300818();

  if (v10)
  {
    v11 = (void *)objc_opt_self(ICCloudConfiguration);
    v12 = a4;
    v13 = a5;
    v14 = objc_msgSend(v11, "sharedConfiguration");
    objc_msgSend(v14, "templatePublicLinkTTL");
    v16 = v15;

    TemplatePublicContentPreview = type metadata accessor for RDTemplateOperationCreateTemplatePublicContentPreview();
    inited = swift_initStackObject(TemplatePublicContentPreview, &v21);
    *(_QWORD *)(inited + 16) = v12;
    *(_QWORD *)(inited + 24) = v13;
    *(_QWORD *)(inited + 32) = 1000;
    *(_QWORD *)(inited + 40) = v16;
    v19 = swift_allocObject(&unk_1007F6A50, 32, 7);
    *(_QWORD *)(v19 + 16) = a2;
    *(_QWORD *)(v19 + 24) = a3;
    swift_retain();
    sub_10030CA64(a1, (uint64_t (*)(uint64_t, _QWORD))sub_1004D3088, v19);
    swift_release(v19);
    swift_setDeallocating(inited);

  }
  else
  {
    v20 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
    a2(0, v20);

  }
}

void sub_1004C0980(void *a1, int a2, void *a3, void *a4, void *aBlock, void (*a6)(id, id, id, void *))
{
  void *v10;
  id v11;
  id v12;
  id v13;

  v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  v11 = a3;
  v12 = a4;
  v13 = a1;
  a6(v11, v12, v13, v10);
  _Block_release(v10);
  _Block_release(v10);

}

void sub_1004C0A18(uint64_t a1, void (*a2)(_QWORD, id), uint64_t a3, void *a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  double v24;
  double v25;
  id v26;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v10 = (void *)sub_100300818();

  if (v10)
  {
    v11 = type metadata accessor for RDTemplateOperationRevokeTemplatePublicLink();
    sub_100018618(a5, (uint64_t)v28);
    v12 = v29;
    v13 = v30;
    v14 = sub_10001BA38((uint64_t)v28, v29);
    v15 = __chkstk_darwin(v14);
    v17 = (char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v18 + 16))(v17, v15);
    v19 = sub_1000D0068((uint64_t)a4, (uint64_t)v17, 0, v11, v12, v13);
    v20 = a4;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v28);
    v21 = swift_allocObject(&unk_1007F6A00, 32, 7);
    *(_QWORD *)(v21 + 16) = a2;
    *(_QWORD *)(v21 + 24) = a3;
    v22 = (void *)objc_opt_self(ICCloudConfiguration);
    swift_retain();
    v23 = objc_msgSend(v22, "sharedConfiguration");
    objc_msgSend(v23, "templatePublicLinkOperationTimeoutInterval");
    v25 = v24;

    sub_1000CDCC8(a1, (void (*)(_QWORD, _QWORD))sub_1004D3088, v21, v25);
    swift_release(v19);
    swift_release(v21);
  }
  else
  {
    v26 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
    a2(0, v26);

  }
}

void sub_1004C0C08(void *a1, void (*a2)(_QWORD, id), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  double v20;
  double v21;
  id v22;
  uint64_t v23;
  __int128 v24[2];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)sub_100300818();

  if (v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
    sub_100018618(a5, (uint64_t)v24);
    v15 = type metadata accessor for RDTemplateOperationDownloadPublicTemplate(0);
    v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v16 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicLinkURLUUID, v13, v10);
    sub_10001BCA8(v24, v16 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController);
    *(_BYTE *)(v16 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_isUnitTestMode) = 0;
    v17 = swift_allocObject(&unk_1007F69B0, 32, 7);
    *(_QWORD *)(v17 + 16) = a2;
    *(_QWORD *)(v17 + 24) = a3;
    v18 = (void *)objc_opt_self(ICCloudConfiguration);
    swift_retain();
    v19 = objc_msgSend(v18, "sharedConfiguration");
    objc_msgSend(v19, "templatePublicLinkOperationTimeoutInterval");
    v21 = v20;

    sub_100376608(a1, (uint64_t)sub_1001172BC, v17, v21);
    swift_release(v17);
    swift_setDeallocating(v16);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v16 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicLinkURLUUID, v10);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v16 + OBJC_IVAR____TtC7remindd41RDTemplateOperationDownloadPublicTemplate_publicCloudDatabaseController));
    swift_deallocClassInstance(v16, *(unsigned int *)(*(_QWORD *)v16 + 48), *(unsigned __int16 *)(*(_QWORD *)v16 + 52));
  }
  else
  {
    v22 = objc_msgSend((id)objc_opt_self(REMError), "noPrimaryActiveCloudKitAccountError");
    a2(0, v22);

  }
}

void sub_1004C0EF4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Class isa;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSDictionary v29;
  __n128 v30;
  Class v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  NSString v47;
  id v48;
  NSString v49;
  Class v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  double v60;
  unsigned __int8 v61;
  id v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  _BYTE v87[40];
  char v88[64];

  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v84 = (uint64_t)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v7, v8, 28);
  v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
  inited = swift_initStackObject(v9, v88);
  *(_OWORD *)(inited + 16) = xmmword_1006B6C10;
  *(_QWORD *)(inited + 32) = swift_getKeyPath(&unk_1006BF240);
  *(_QWORD *)(inited + 40) = swift_getKeyPath(&unk_1006BF290);
  *(_QWORD *)(inited + 48) = swift_getKeyPath(&unk_1006BF2B8);
  KeyPath = swift_getKeyPath(&unk_1006BF2F0);
  *(_QWORD *)(inited + 56) = KeyPath;
  v86 = (id)inited;
  specialized Array._endMutation()(KeyPath);
  v12 = (uint64_t)v86;
  v13 = swift_initStackObject(v9, v87);
  *(_OWORD *)(v13 + 16) = xmmword_1006A7330;
  v14 = swift_getKeyPath(&unk_1006BF328);
  *(_QWORD *)(v13 + 32) = v14;
  v86 = (id)v13;
  specialized Array._endMutation()(v14);
  v15 = (uint64_t)v86;
  sub_10000A3AC();
  v17 = (void *)v16;
  v18 = (void *)sub_100358F8C(v12, v15, 0, v16);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v18, "setSortDescriptors:", isa);

  v20 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v21 = (void *)NSManagedObjectContext.fetch<A>(_:)(v18, v20);
  if (v1)
  {

    sub_10001C744((uint64_t)v7, _s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v80 = 0;
  v81 = a1;
  v86 = v21;
  v22 = sub_10001A630(&qword_10083FF50);
  v23 = sub_1000A5F84((unint64_t *)&qword_10083A838, &qword_10083FF50, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = Sequence.elements<A>(ofType:)(v20, v22, v20, v23);
  swift_bridgeObjectRelease();

  sub_10001C744((uint64_t)v7, _s10PredicatesOMa_1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)v24 >> 62)
  {
    if (v24 < 0)
      v74 = v24;
    else
      v74 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v75 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease();
    v85 = v75;
    v25 = v84;
    if (v75)
      goto LABEL_7;
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  v85 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
  v25 = v84;
  if (!v85)
    goto LABEL_12;
LABEL_7:
  v26 = sub_1002B14E4((uint64_t)_swiftEmptyArrayStorage);
  static Date.now.getter(v26);
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  sub_1000151B0(0, &qword_1008428A8, REMTimestampedUUID_ptr);
  v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v30 = swift_bridgeObjectRelease();
  v31 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v28 + 48))(v25, 1, v27, v30) != 1)
  {
    v31 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v25, v27);
  }
  v32 = objc_msgSend(objc_allocWithZone((Class)REMTextMemberships), "initWithMemberships:lastResetDate:", v29.super.isa, v31);

  v86 = v32;
  v33 = sub_1000151B0(0, &qword_100844770, REMTextMemberships_ptr);
  v34 = v80;
  v36 = REMJSONRepresentable.toJSONData()(v33, &protocol witness table for REMTextMemberships, v35);
  if (v34)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v38 = v36;
  v39 = v37;
  v86 = v32;
  v40 = REMChecksumRepresentable.rem_checksum.getter(v33, &protocol witness table for REMTextMemberships);
  v80 = 0;
  v83 = (unint64_t)v39;
  v84 = v38;
  v78 = v32;
  v77 = (unint64_t)v24 >> 62;
  if (v85 < 1)
  {
    __break(1u);
    goto LABEL_47;
  }
  v42 = v40;
  v43 = v41;
  v82 = v24 & 0xC000000000000001;
  swift_bridgeObjectRetain(v24);
  v44 = 0;
  v79 = 0x80000001006BF200;
  v45 = v81;
  v46 = v24;
  do
  {
    if (v82)
      v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v24);
    else
      v51 = *(id *)(v24 + 8 * v44 + 32);
    v52 = v51;
    v53 = objc_msgSend(v51, "groceryLocalCorrectionsChecksum", swift_bridgeObjectRetain(v43).n128_f64[0]);
    if (!v53)
    {
LABEL_15:
      v47 = String._bridgeToObjectiveC()();
      objc_msgSend(v52, "setGroceryLocalCorrectionsChecksum:", v47);

      v48 = objc_msgSend(v52, "createResolutionTokenMapIfNecessary");
      v49 = String._bridgeToObjectiveC()();
      objc_msgSend(v48, "updateForKey:", v49);
      swift_bridgeObjectRelease();

      goto LABEL_16;
    }
    v54 = v53;
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v57 = v56;

    v58 = v55 == v42 && v57 == v43;
    if (v58)
    {
      swift_bridgeObjectRelease_n(v43, 2);
      v45 = v81;
    }
    else
    {
      v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, v42, v43, 0);
      swift_bridgeObjectRelease();
      v45 = v81;
      if ((v59 & 1) == 0)
        goto LABEL_15;
      swift_bridgeObjectRelease();
    }
LABEL_16:
    ++v44;
    v50 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v52, "setGroceryLocalCorrectionsAsData:", v50);

    objc_msgSend(v52, "updateChangeCount");
    v24 = v46;
  }
  while (v85 != v44);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v60 = swift_bridgeObjectRelease().n128_u64[0];
  v86 = 0;
  v61 = objc_msgSend(v45, "save:", &v86, v60);
  v62 = v86;
  if ((v61 & 1) != 0)
  {
    v63 = qword_100837708;
    v64 = v86;
    v58 = v63 == -1;
    v39 = v78;
    v38 = v84;
    if (!v58)
LABEL_47:
      swift_once(&qword_100837708, sub_1004BC0D8);
    v65 = type metadata accessor for Logger(0);
    sub_10001AAA8(v65, (uint64_t)qword_10084CAD0);
    swift_bridgeObjectRetain(v24);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v69 = 134217984;
      if (v77)
      {
        if (v24 < 0)
          v73 = v24;
        else
          v73 = v24 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v24);
        v70 = (void *)_CocoaArrayWrapper.endIndex.getter(v73);
        swift_bridgeObjectRelease();
      }
      else
      {
        v70 = *(void **)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v86 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Cleared grocery local corrections of list owned by current user {lists.count: %ld}", v69, 0xCu);
      swift_slowDealloc(v69, -1, -1);
      sub_1000A71C8(v38, v83);

    }
    else
    {

      swift_bridgeObjectRelease_n(v24, 2);
      sub_1000A71C8(v38, v83);

    }
  }
  else
  {
    v71 = v86;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v62);

    swift_willThrow(v72);
    sub_1000A71C8(v84, v83);
  }
}

uint64_t sub_1004C17BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1004C17D8, 0, 0);
}

uint64_t sub_1004C17D8()
{
  uint64_t v0;
  __n128 v1;

  sub_1001C6154(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0, 1);
  (*(void (**)(void))(v0 + 32))();
  v1 = swift_bridgeObjectRelease();
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

void sub_1004C19AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSArray v5;
  uint64_t v6;
  id v7;

  if (!a1)
  {
    v5.super.isa = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

uint64_t sub_1004C1A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  char v16;

  *(_BYTE *)(v8 + 224) = v16;
  *(_QWORD *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 112) = v14;
  *(_QWORD *)(v8 + 96) = a7;
  *(_QWORD *)(v8 + 104) = a8;
  *(_QWORD *)(v8 + 80) = a5;
  *(_QWORD *)(v8 + 88) = a6;
  *(_QWORD *)(v8 + 72) = a4;
  v9 = ((uint64_t (*)(_QWORD))type metadata accessor for REMTrialNamespace)(0);
  *(_QWORD *)(v8 + 136) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 144) = v10;
  *(_QWORD *)(v8 + 152) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  *(_QWORD *)(v8 + 160) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 168) = v12;
  *(_QWORD *)(v8 + 176) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004C1AD4, 0, 0);
}

uint64_t sub_1004C1AD4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void (**v3)(char *, uint64_t);
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t result;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD, id);
  void *v35;
  NSString v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(_QWORD, id);
  void *v56;
  uint64_t v57;
  void *v58;
  Swift::String v59;
  NSString v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;

  v1 = sub_10015EC88(*(_QWORD *)(v0 + 72));
  if ((sub_1001A560C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), v1) & 1) == 0)
  {
    v34 = *(void (**)(_QWORD, id))(v0 + 96);
    swift_bridgeObjectRelease();
    v35 = (void *)objc_opt_self(REMError);
    v36 = String._bridgeToObjectiveC()();
    v37 = objc_msgSend(v35, "invalidParameterErrorWithDescription:", v36);

    v34(0, v37);
LABEL_24:
    v62 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = v1[2];
  if (!v2)
  {
    v29 = _swiftEmptyDictionarySingleton;
LABEL_19:
    *(_QWORD *)(v0 + 184) = v29;
    swift_bridgeObjectRelease();
    if (v29[2])
    {
      v38 = *(_QWORD *)(v0 + 80);
      v39 = *(_QWORD *)(v0 + 88);
      swift_bridgeObjectRetain(v39);
      v40 = sub_10001A6DC(v38, v39);
      if ((v41 & 1) != 0)
      {
        v71 = v0 + 48;
        v69 = *(_BYTE *)(v0 + 224);
        v42 = (_QWORD *)v0;
        v43 = *(_QWORD *)(v0 + 120);
        v44 = *(_QWORD *)(v0 + 128);
        v45 = *(_QWORD *)(v0 + 112);
        v46 = *(_QWORD *)(v0 + 72);
        v47 = (char *)*(id *)(v29[7] + 8 * v40);
        swift_bridgeObjectRelease();
        v48 = *(_QWORD *)&v47[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale];
        v49 = *(_QWORD *)&v47[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8];
        v42[24] = v49;
        swift_bridgeObjectRetain(v49);

        v42[7] = v45;
        v42[8] = sub_1002B1604((uint64_t)_swiftEmptyArrayStorage);
        v50 = swift_task_alloc(80);
        v42[25] = v50;
        *(_QWORD *)(v50 + 16) = v46;
        *(_QWORD *)(v50 + 24) = v29;
        *(_QWORD *)(v50 + 32) = v43;
        *(_QWORD *)(v50 + 40) = v44;
        *(_BYTE *)(v50 + 48) = v69;
        *(_QWORD *)(v50 + 56) = v48;
        *(_QWORD *)(v50 + 64) = v49;
        v51 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncReduce<A>(_:_:)[1]);
        v42[26] = v51;
        v52 = sub_10001A630(&qword_100841A60);
        v53 = sub_10001A630(&qword_10084CBE0);
        v54 = sub_1000A5F84((unint64_t *)&qword_100841A68, &qword_100841A60, (uint64_t)&protocol conformance descriptor for Set<A>);
        *v51 = v42;
        v51[1] = sub_1004C2218;
        return Sequence.asyncReduce<A>(_:_:)(v71, v42 + 8, &unk_10084CBD8, v50, v52, v53, v54);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v55 = *(void (**)(_QWORD, id))(v0 + 96);
    v57 = *(_QWORD *)(v0 + 80);
    v56 = *(void **)(v0 + 88);
    v58 = (void *)objc_opt_self(REMError);
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = v57;
    v59._object = v56;
    String.append(_:)(v59);
    v60 = String._bridgeToObjectiveC()();
    v61 = objc_msgSend(v58, "invalidParameterErrorWithDescription:", v60, swift_bridgeObjectRelease().n128_f64[0]);

    v55(0, v61);
    goto LABEL_24;
  }
  v65 = *(_QWORD *)(v0 + 144);
  v66 = *(_QWORD *)(v0 + 168);
  v64 = enum case for REMTrialNamespace.grocery(_:);
  swift_bridgeObjectRetain(v1);
  v3 = (void (**)(char *, uint64_t))(v1 + 5);
  v4 = _swiftEmptyDictionarySingleton;
  v63 = v0;
  while (1)
  {
    v5 = (uint64_t)*(v3 - 1);
    v6 = *v3;
    swift_bridgeObjectRetain_n(*v3, 2);
    swift_bridgeObjectRetain(v4);
    Date.init()(v7);
    v9 = type metadata accessor for REMTrialClient(0, v8);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v10 = (char *)REMTrialClient.init()();
    v70 = v4;
    v67 = v2;
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 136);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v65 + 104))(v11, v64, v12);
    v68 = dispatch thunk of REMTrialClient.deploymentId(for:)(v11);
    v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v11, v12);
    swift_retain();
    v15 = sub_1001C9B14(v5, v6, v10);
    v16 = *(_QWORD *)(v0 + 176);
    v17 = (uint64_t)v15;
    v18 = *(_QWORD *)(v0 + 160);
    swift_release(v10);
    v19 = REMGroceryClassifier.modelTypesDescription.getter();
    sub_1006738E0(v16, v19, v20, 1, 2, v68, v14, v5, (uint64_t)v6, 0xD00000000000001ELL, 0x8000000100705FA0, 0, 0);
    swift_release(v10);
    swift_bridgeObjectRelease();
    v21 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, __n128))(v66 + 8))(v16, v18, v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v70);
    v24 = sub_10001A6DC(v5, (uint64_t)v6);
    v25 = v70[2];
    v26 = (v23 & 1) == 0;
    result = v25 + v26;
    if (__OFADD__(v25, v26))
      break;
    v28 = v23;
    if (v70[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v29 = v70;
        if ((v23 & 1) != 0)
          goto LABEL_13;
      }
      else
      {
        sub_1002D8A34();
        v29 = v70;
        if ((v28 & 1) != 0)
          goto LABEL_13;
      }
    }
    else
    {
      sub_1002D1988(result, isUniquelyReferenced_nonNull_native);
      v29 = v70;
      v30 = sub_10001A6DC(v5, (uint64_t)v6);
      if ((v28 & 1) != (v31 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v24 = v30;
      if ((v28 & 1) != 0)
      {
LABEL_13:
        v32 = v29[7];
        v33 = 8 * v24;

        *(_QWORD *)(v32 + v33) = v17;
        goto LABEL_5;
      }
    }
    sub_10028F274(v24, v5, (uint64_t)v6, v17, v29);
    swift_bridgeObjectRetain(v6);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 += 2;
    v4 = v29;
    v2 = v67 - 1;
    v0 = v63;
    if (v67 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1004C2218()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 200);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v4);
    v5 = sub_1004C2398;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 200);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v6);
    v5 = sub_1004C22D4;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1004C22D4()
{
  uint64_t v0;
  void (*v1)(id, _QWORD);
  id v2;
  Class isa;
  id v4;
  uint64_t v5;

  v1 = *(void (**)(id, _QWORD))(v0 + 96);
  v2 = objc_allocWithZone((Class)REMGrocerySuggestions);
  sub_10001A630(&qword_10084CBE8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, "initWithSuggestedSectionsByReminderTitle:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v1(v4, 0);
  v5 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C2398()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD, uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(void (**)(_QWORD, uint64_t))(v0 + 96);
  swift_errorRetain(v1);
  v2(0, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C2408(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v8 + 216) = a8;
  *(_QWORD *)(v8 + 104) = a7;
  *(_QWORD *)(v8 + 112) = v12;
  *(_QWORD *)(v8 + 88) = a5;
  *(_QWORD *)(v8 + 96) = a6;
  *(_QWORD *)(v8 + 72) = a1;
  *(_QWORD *)(v8 + 80) = a4;
  v9 = *a2;
  *(_QWORD *)(v8 + 120) = v13;
  *(_QWORD *)(v8 + 128) = v9;
  v10 = a3[1];
  *(_QWORD *)(v8 + 136) = *a3;
  *(_QWORD *)(v8 + 144) = v10;
  return swift_task_switch(sub_1004C2444, 0, 0);
}

uint64_t sub_1004C2444()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  id v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char isUniquelyReferenced_nonNull_native;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD **)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = (void *)objc_opt_self(ICCloudConfiguration);
  v7 = objc_msgSend(v6, "sharedConfiguration", swift_bridgeObjectRetain(v3).n128_f64[0]);
  v8 = sub_1000151B0(0, &qword_100838058, off_1007D6260);
  *(_QWORD *)(v0 + 16) = v7;
  *(_QWORD *)(v0 + 40) = v8;
  *(_QWORD *)(v0 + 48) = &off_1007E2D20;
  sub_1000C54A4(v2, v1, v5, (_QWORD *)(v0 + 16), v4, v9);
  *(_QWORD *)(v0 + 152) = v10;
  v11 = v10;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((_QWORD *)(v0 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v0 + 160) = v12;
  if (!v12)
    goto LABEL_11;
  v13 = *(_QWORD *)(v11 + 32);
  v14 = *(id *)(v11 + 40);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0
    || !_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v15 = *(void **)(v0 + 96);
    *(_QWORD *)(v0 + 168) = v14;
    *(_QWORD *)(v0 + 176) = 1;
    if (v15)
    {
      objc_msgSend(v15, "floatValue");
      v17 = v16;
      v18 = *(void **)(v0 + 104);
      if (v18)
      {
LABEL_5:
        v19 = objc_msgSend(v18, "integerValue");
        v20 = *(_QWORD *)(v0 + 104) == 0;
LABEL_8:
        v21 = *(_QWORD *)(v0 + 96) == 0;
        *(_QWORD *)(v0 + 56) = v13;
        v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v24 = v23;
        *(_QWORD *)(v0 + 184) = v23;
        v25 = (_QWORD *)swift_task_alloc(dword_10083F324);
        *(_QWORD *)(v0 + 192) = v25;
        *v25 = v0;
        v25[1] = sub_1004C26FC;
        return REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), v17 | ((unint64_t)v21 << 32), (uint64_t)v19, v20, v22, v24, 0xD000000000000016);
      }
    }
    else
    {
      v17 = 0;
      v18 = *(void **)(v0 + 104);
      if (v18)
        goto LABEL_5;
    }
    v19 = 0;
    v20 = 1;
    goto LABEL_8;
  }

LABEL_11:
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v0 + 136);
  v27 = *(_QWORD *)(v0 + 144);
  v29 = *(_QWORD *)(v0 + 128);
  v30 = *(_QWORD **)(v0 + 72);
  swift_bridgeObjectRetain(v27);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
  sub_10028EC08((uint64_t)_swiftEmptyArrayStorage, v28, v27, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v30 = v29;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004C26FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 192);
  *(_QWORD *)(v3 + 200) = a1;
  *(_QWORD *)(v3 + 208) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_1004C2B50;
  }
  else
  {
    v5 = sub_1004C278C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1004C278C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  char **v6;
  void *v7;
  __n128 v8;
  uint64_t (*v9)(__n128);
  char **v10;
  char *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int32 v15;
  id v16;
  NSString v17;
  __n128 v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  char **v35;
  uint64_t v36;
  double v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  id v42;
  char v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(id *)(v0 + 168);
  swift_bridgeObjectRetain(v3);
  v6 = (char **)sub_1004C9D18(v1, (uint64_t)v5, v4, v3);
  v7 = *(void **)(v0 + 168);
  if (v2)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = swift_bridgeObjectRelease();
    v9 = *(uint64_t (**)(__n128))(v0 + 8);
    return v9(v8);
  }
  v10 = v6;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v11 = v10[2];
  if (v11)
  {
    *(_QWORD *)(v0 + 64) = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v11);
    v12 = v10 + 7;
    v10 = &selRef_showRemindersAsOverdue;
    do
    {
      v13 = *((_QWORD *)v12 - 3);
      v14 = *((_QWORD *)v12 - 1);
      v15 = *v12;
      v12 += 8;
      v16 = objc_allocWithZone((Class)REMGrocerySuggestedSection);
      swift_bridgeObjectRetain(v14);
      v17 = String._bridgeToObjectiveC()();
      v18 = swift_bridgeObjectRelease();
      v18.n128_u32[0] = v15;
      v19 = objc_msgSend(v16, "initWithLabelIndex:sectionCanonicalName:confidenceScore:", v13, v17, v18.n128_f64[0]);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v7 = *(void **)(*(_QWORD *)(v0 + 64) + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
      v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v19);
      specialized ContiguousArray._endMutation()(v21);
      --v11;
    }
    while (v11);
    v22 = *(_QWORD *)(v0 + 64);

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    v22 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 152);
  if (v23 == *(_QWORD *)(v0 + 160))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)(v0 + 136);
    v28 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 128);
    v31 = *(_QWORD **)(v0 + 72);
    swift_bridgeObjectRetain(v28);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
    sub_10028EC08(v22, v29, v28, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v8 = swift_bridgeObjectRelease();
    *v31 = v30;
    v9 = *(uint64_t (**)(__n128))(v0 + 8);
    return v9(v8);
  }
  if (v23 >= *(_QWORD *)(v24 + 16))
  {
    __break(1u);
LABEL_16:
    if (v22 < 0)
      v34 = v22;
    else
      v34 = v22 & 0xFFFFFFFFFFFFFF8;
    v35 = v10;
    swift_bridgeObjectRetain(v22);
    v36 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease();
    if (v36)
      goto LABEL_12;
    goto LABEL_20;
  }
  v25 = v24 + 16 * v23;
  v7 = *(void **)(v25 + 32);
  v10 = *(char ***)(v25 + 40);
  if ((unint64_t)v22 >> 62)
    goto LABEL_16;
  v26 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  v27 = v10;
  if (v26)
  {
LABEL_12:

    goto LABEL_13;
  }
LABEL_20:
  *(_QWORD *)&v37 = swift_bridgeObjectRelease().n128_u64[0];
  *(_QWORD *)(v0 + 168) = v10;
  *(_QWORD *)(v0 + 176) = v23 + 1;
  v38 = *(void **)(v0 + 96);
  if (!v38)
  {
    v40 = 0;
    v41 = *(void **)(v0 + 104);
    if (v41)
      goto LABEL_22;
LABEL_24:
    v42 = 0;
    v43 = 1;
    goto LABEL_25;
  }
  objc_msgSend(v38, "floatValue", v37);
  v40 = v39;
  v41 = *(void **)(v0 + 104);
  if (!v41)
    goto LABEL_24;
LABEL_22:
  v42 = objc_msgSend(v41, "integerValue");
  v43 = *(_QWORD *)(v0 + 104) == 0;
LABEL_25:
  v44 = *(_QWORD *)(v0 + 96) == 0;
  *(_QWORD *)(v0 + 56) = v7;
  v45 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v47 = v46;
  *(_QWORD *)(v0 + 184) = v46;
  v48 = (_QWORD *)swift_task_alloc(dword_10083F324);
  *(_QWORD *)(v0 + 192) = v48;
  *v48 = v0;
  v48[1] = sub_1004C26FC;
  return REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), v40 | ((unint64_t)v44 << 32), (uint64_t)v42, v43, v45, v47, 0xD000000000000016);
}

uint64_t sub_1004C2B50()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004C2C74(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void **v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  char v38[40];
  uint64_t v39;

  v6 = _s10PredicatesOMa_1(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)&v38[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v10 = swift_allocObject(v9, 40, 7);
  v37 = xmmword_1006A7330;
  *(_OWORD *)(v10 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v10 + 32) = a2;
  v39 = v10;
  specialized Array._endMutation()(v10);
  *v8 = v39;
  swift_storeEnumTagMultiPayload(v8, v6, 4);
  inited = swift_initStackObject(v9, v38);
  *(_OWORD *)(inited + 16) = v37;
  KeyPath = swift_getKeyPath(&unk_1006BF1F0);
  *(_QWORD *)(inited + 32) = KeyPath;
  v39 = inited;
  specialized Array._endMutation()(KeyPath);
  v13 = v39;
  v14 = a2;
  sub_10000A3AC();
  v16 = (void *)v15;
  v17 = (void *)sub_100358F8C(v13, 0, 0, v15);

  if (qword_1008376D0 != -1)
    swift_once(&qword_1008376D0, sub_1004A7024);
  sub_1000151B0(0, (unint64_t *)&qword_100840BE0, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v17, "setSortDescriptors:", isa);

  v19 = sub_1000151B0(0, (unint64_t *)&qword_100839900, off_1007D66E0);
  v20 = NSManagedObjectContext.fetch<A>(_:)(v17, v19);
  if (v3)
  {

    sub_10001C744((uint64_t)v8, _s10PredicatesOMa_1);
    swift_bridgeObjectRelease();
    return;
  }
  *(_QWORD *)&v37 = a3;
  v39 = v20;
  v21 = sub_10001A630(&qword_10083FF50);
  v22 = sub_1000A5F84((unint64_t *)&qword_10083A838, &qword_10083FF50, (uint64_t)&protocol conformance descriptor for [A]);
  v23 = Sequence.elements<A>(ofType:)(v19, v21, v19, v22);
  swift_bridgeObjectRelease();

  sub_10001C744((uint64_t)v8, _s10PredicatesOMa_1);
  swift_bridgeObjectRelease();
  if (!((unint64_t)v23 >> 62))
  {
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_7;
LABEL_18:
    swift_bridgeObjectRelease();
    v36 = objc_msgSend((id)objc_opt_self(REMError), "noSuchObjectErrorWithObjectID:", v14);
    swift_willThrow(v36);
    return;
  }
  if (v23 < 0)
    v34 = v23;
  else
    v34 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v23);
  v35 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_bridgeObjectRelease();
  if (!v35)
    goto LABEL_18;
LABEL_7:
  if ((v23 & 0xC000000000000001) != 0)
  {
    v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
    v24 = (void **)v37;
  }
  else
  {
    v24 = (void **)v37;
    if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v25 = *(id *)(v23 + 32);
  }
  v26 = objc_msgSend(v25, "groceryLocalCorrectionsAsData", swift_bridgeObjectRelease().n128_f64[0]);
  if (v26)
  {
    v27 = v26;
    v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

    sub_1000151B0(0, &qword_100844770, REMTextMemberships_ptr);
    static REMJSONRepresentable.fromJSONData(_:)(&v39, v28, v30);
    sub_1000A71C8(v28, v30);
    v31 = (void *)v39;
    v24 = (void **)v37;
  }
  else
  {
    v31 = 0;
  }
  v32 = v24;
  v33 = *v24;
  *v32 = v31;

}

uint64_t sub_1004C3078(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;

  v11 = sub_10001A630(&qword_100839A10);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(__n128))(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeProvider))(v12);
  if (!v5)
  {
    v16 = result;
    v17 = type metadata accessor for RDGroceryOperationSuggestConversionToGroceryList();
    v18 = swift_allocObject(v17, 56, 7);
    *(_BYTE *)(v18 + 16) = 2;
    *(_QWORD *)(v18 + 24) = a3;
    *(_QWORD *)(v18 + 32) = v16;
    *(_QWORD *)(v18 + 40) = sub_1004C31C4;
    *(_QWORD *)(v18 + 48) = 0;
    v19 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 1, 1, v19);
    v20 = (_QWORD *)swift_allocObject(&unk_1007F68C0, 64, 7);
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = v18;
    v20[5] = a1;
    v20[6] = a4;
    v20[7] = a5;
    v21 = a3;
    v22 = a1;
    swift_retain();
    v23 = sub_1002845AC((uint64_t)v14, (uint64_t)&unk_10084CBB8, (uint64_t)v20);
    return swift_release(v23);
  }
  return result;
}

char *sub_1004C31C4(uint64_t a1, void (*a2)(char *, uint64_t), __n128 a3)
{
  return sub_100673B80(a1, a2, 0xD000000000000022, 0x8000000100705F00, a3);
}

uint64_t sub_1004C31F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;

  v7[2] = a6;
  v7[3] = a7;
  v9 = (_QWORD *)swift_task_alloc(dword_10084E234);
  v7[4] = v9;
  *v9 = v7;
  v9[1] = sub_1004C3248;
  return sub_10051AC54(a5);
}

uint64_t sub_1004C3248(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_BYTE *)(v4 + 40) = a1 & 1;
  return swift_task_switch(sub_1004C32C8, 0, 0);
}

uint64_t sub_1004C32C8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 40), 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1004C337C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, a1 & 1);

}

void sub_1004C33D4(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[16];
  uint64_t v4;
  _BYTE v5[48];

  sub_1000184A8(v1 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v5);
  v4 = a1;
  sub_10035288C((uint64_t)v5, (uint64_t)sub_1004D2420, (uint64_t)v3);
}

void sub_1004C3678(void *a1, void *a2)
{
  uint64_t v2;
  NSObject *v5;
  NSObject *v6;
  unsigned int v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;

  v5 = sub_10034E0EC((uint64_t)a1);
  if (!v2)
  {
    v6 = v5;
    if (v5)
    {
      type metadata accessor for RDGroceryOperationQueue();

      v26 = 0;
      v7 = objc_msgSend(a1, "save:", &v26);
      v8 = v26;
      if (v7)
      {
        v9 = qword_100837708;
        v10 = v26;
        if (v9 != -1)
          swift_once(&qword_100837708, sub_1004BC0D8);
        v11 = type metadata accessor for Logger(0);
        sub_10001AAA8(v11, (uint64_t)qword_10084CAD0);
        v12 = a2;
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.default.getter(v13);
        if (!os_log_type_enabled(v13, v14))
        {

          return;
        }
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = (_QWORD *)swift_slowAlloc(8, -1);
        v26 = v12;
        *(_DWORD *)v15 = 138543362;
        v16 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
        *v25 = a2;

        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Inserted grocery operation queue item for determine whether to suggest to convert this list into a grocery list {listObjectID: %{public}@}", v15, 0xCu);
        v17 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v25, 1, v17);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v15, -1, -1);

      }
      else
      {
        v23 = v26;
        _convertNSErrorToError(_:)(v8);

        swift_willThrow(v24);
      }

    }
    else
    {
      if (qword_100837708 != -1)
        swift_once(&qword_100837708, sub_1004BC0D8);
      v18 = type metadata accessor for Logger(0);
      v19 = sub_10001AAA8(v18, (uint64_t)qword_10084CAD0);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Skipped inserting grocery operation queue item for downloading grocery model assets from Trial because there are no active CloudKit accounts.", v22, 2u);
        swift_slowDealloc(v22, -1, -1);
      }

    }
  }
}

void sub_1004C39E4(void *a1, void (*a2)(_QWORD, id), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *ObjCClassFromMetadata;
  id v29;
  id v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __n128 v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  NSString v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  BOOL *v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  __n128 v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, _QWORD, __n128);
  id v91;
  BOOL *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t (*v99)(char *, unint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;

  v5 = v4;
  v10 = type metadata accessor for Date(0);
  v96 = *(_QWORD *)(v10 - 8);
  v97 = v10;
  __chkstk_darwin(v10);
  v95 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for REMAnalyticsEvent(0);
  v93 = *(_QWORD *)(v12 - 8);
  v94 = v12;
  __chkstk_darwin(v12);
  v92 = (BOOL *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A630((uint64_t *)&unk_10083FBE0);
  __chkstk_darwin(v14);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale(0);
  v18 = *(_QWORD *)(v17 - 8);
  v101 = v17;
  v102 = v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v86 - v22;
  if (qword_100837958 != -1)
    swift_once(&qword_100837958, sub_1005B83A8);
  v24 = qword_100872288;
  v25 = (void *)swift_retain();
  v91 = a1;
  v26 = sub_1003011F8(v25);
  swift_release(v24);
  v98 = v26;
  if (!v26)
  {
    v46 = (void *)objc_opt_self(REMError);
    v47 = String._bridgeToObjectiveC()();
    v48 = objc_msgSend(v46, "internalErrorWithDebugDescription:", v47);

    a2(0, v48);
    return;
  }
  v90 = (void (*)(uint64_t, _QWORD, __n128))a2;
  v27 = sub_1000151B0(0, (unint64_t *)&qword_100838020, REMDaemonUserDefaults_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v27);
  v29 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  objc_msgSend(v29, "setAutomaticSecondaryGroceryLocalesLastModifiedDate:", 0);

  v30 = objc_msgSend(ObjCClassFromMetadata, "daemonUserDefaults");
  objc_msgSend(v30, "setAutomaticSecondaryGroceryLocales:", 0);

  v89 = a3;
  if (a4)
  {
    v31 = *(_QWORD *)(a4 + 16);
    if (v31)
    {
      v88 = v4;
      v104 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain_n(a4, 2);
      sub_1001C1B0C(0, v31, 0);
      v32 = v102;
      v33 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      v87 = a4;
      v34 = a4 + v33;
      v35 = *(_QWORD *)(v102 + 72);
      v99 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v102 + 16);
      v100 = v35;
      do
      {
        v36 = v101;
        v37 = v99(v20, v34, v101);
        v38 = Locale.identifier.getter(v37);
        v40 = v39;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v36);
        v41 = v104;
        if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
        {
          sub_1001C1B0C(0, v41[2] + 1, 1);
          v41 = v104;
        }
        v44 = v41[2];
        v43 = v41[3];
        if (v44 >= v43 >> 1)
        {
          sub_1001C1B0C(v43 > 1, v44 + 1, 1);
          v41 = v104;
        }
        v41[2] = v44 + 1;
        v45 = &v41[2 * v44];
        v45[4] = v38;
        v45[5] = v40;
        v34 += v100;
        --v31;
        v32 = v102;
      }
      while (v31);
      v49 = v87;
      v5 = v88;
      v50 = v87;
    }
    else
    {
      v42 = swift_bridgeObjectRetain_n(a4, 2);
      v49 = a4;
      v41 = _swiftEmptyArrayStorage;
      v50 = v49;
    }
  }
  else
  {
    sub_10039F460(0, (uint64_t)v16);
    v52 = v101;
    v51 = v102;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v16, 1, v101) == 1)
    {
      sub_10000882C((uint64_t)v16, (uint64_t *)&unk_10083FBE0);
      v41 = 0;
      v50 = 0;
    }
    else
    {
      v53 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      v53(v23, v16, v52);
      v54 = sub_10001A630(&qword_10083F420);
      v55 = *(_QWORD *)(v51 + 72);
      v56 = *(unsigned __int8 *)(v51 + 80);
      v57 = (v56 + 32) & ~v56;
      v50 = swift_allocObject(v54, v57 + v55, v56 | 7);
      *(_OWORD *)(v50 + 16) = xmmword_1006A3C00;
      v53((char *)(v50 + v57), v23, v52);
      v41 = 0;
    }
    v49 = 0;
  }
  type metadata accessor for REMAnalyticsManager(0, v42);
  v59 = static REMAnalyticsManager.shared.getter(v58);
  v61 = v92;
  v60 = v93;
  *v92 = v49 == 0;
  *((_QWORD *)v61 + 1) = v41;
  v62 = v94;
  v63.n128_f64[0] = (*(double (**)(BOOL *, _QWORD, uint64_t))(v60 + 104))(v61, enum case for REMAnalyticsEvent.groceryAdditionalLanguages(_:), v94);
  REMAnalyticsManager.post(event:)(v61, v63);
  swift_release(v59);
  v64 = (*(uint64_t (**)(BOOL *, uint64_t))(v60 + 8))(v61, v62);
  v65 = v95;
  Date.init()(v64);
  v66 = type metadata accessor for RDSecondaryGroceryLocalesInfo(0);
  v67 = swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v67 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_lastModifiedDate, v65, v97);
  *(_QWORD *)(v67 + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales) = v49;
  swift_bridgeObjectRetain(v49);
  v68 = swift_retain();
  v69 = v98;
  sub_1004BBC40(v68);
  if (v5)
  {

    swift_release_n(v67);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release(v67);
    objc_msgSend(v69, "updateChangeCount");
    v104 = 0;
    v70 = objc_msgSend(v91, "save:", &v104);
    v71 = v104;
    if (!v70)
    {
      v84 = v104;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)(v71);

      swift_willThrow(v85);
      swift_release(v67);
      return;
    }
    v72 = qword_100837708;
    v73 = v104;
    if (v72 != -1)
      swift_once(&qword_100837708, sub_1004BC0D8);
    v74 = type metadata accessor for Logger(0);
    sub_10001AAA8(v74, (uint64_t)qword_10084CAD0);
    swift_bridgeObjectRetain(v49);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.default.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v102 = v50;
      v78 = (uint8_t *)swift_slowAlloc(12, -1);
      v79 = (_QWORD *)swift_slowAlloc(32, -1);
      v104 = v79;
      v88 = 0;
      *(_DWORD *)v78 = 136446210;
      v80 = sub_10039FAA0(v49);
      v103 = sub_10001A820(v80, v81, (uint64_t *)&v104);
      v50 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
      swift_bridgeObjectRelease_n(v49, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "set secondary grocery localeIDs: %{public}s", v78, 0xCu);
      swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
      v82 = v79;
      v69 = v98;
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v78, -1, -1);

    }
    else
    {

      v83 = swift_bridgeObjectRelease_n(v49, 2);
    }
    v90(v50, 0, v83);
    swift_release(v67);

  }
  swift_bridgeObjectRelease();
}

void sub_1004C423C(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa;
  uint64_t v6;
  id v7;

  isa = a1;
  if (a1)
  {
    type metadata accessor for Locale(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    v6 = _convertErrorToNSError(_:)(a2);
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

void sub_1004C42C0(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Class isa;
  Class v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject **v28;
  NSObject *v29;
  uint64_t v30;
  uint8_t *buf;
  char v33[24];
  NSObject *v34;
  uint64_t v35;
  char v36[24];

  v2 = *a1;
  v3 = swift_allocObject(&unk_1007F6848, 24, 7);
  *(_QWORD *)(v3 + 16) = _swiftEmptyArrayStorage;
  v4 = (uint64_t *)(v3 + 16);
  v5 = swift_allocObject(&unk_1007F6848, 24, 7);
  *(_QWORD *)(v5 + 16) = _swiftEmptyArrayStorage;
  buf = (uint8_t *)(v5 + 16);
  v6 = objc_msgSend(v2, "personHandle");
  if (v6)
  {
    v7 = v6;
    sub_1004C46FC(v6, v2, v5, v3);

  }
  v8 = objc_msgSend(v2, "aliases");
  if (v8)
  {
    v9 = v8;
    v10 = sub_1000151B0(0, &qword_10084CB98, INPersonHandle_ptr);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  }
  else
  {
    v11 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v16 = v11;
    else
      v16 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v12 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v12)
      goto LABEL_18;
  }
  if (v12 < 1)
  {
    __break(1u);
LABEL_28:
    swift_once(&qword_100837700, sub_1004BC0B4);
    goto LABEL_23;
  }
  for (i = 0; i != v12; ++i)
  {
    if ((v11 & 0xC000000000000001) != 0)
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
    else
      v14 = *(id *)(v11 + 8 * i + 32);
    v15 = v14;
    sub_1004C46FC(v14, v2, v5, v3);

  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_beginAccess(v4, v36, 0, 0);
  v17 = *v4;
  if (*(_QWORD *)(v17 + 16) || (swift_beginAccess(buf, v33, 0, 0), *(_QWORD *)(*(_QWORD *)buf + 16)))
  {
    swift_beginAccess(buf, &v34, 0, 0);
    v18 = *(_QWORD *)(v5 + 16);
    v19 = objc_allocWithZone((Class)REMContactRepresentation);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v21 = Array._bridgeToObjectiveC()().super.isa;
    v22 = objc_msgSend(v19, "initWithPhones:emails:", isa, v21, swift_bridgeObjectRelease().n128_f64[0]);
    swift_release(v3);
    swift_release(v5);

    goto LABEL_21;
  }
  if (qword_100837700 != -1)
    goto LABEL_28;
LABEL_23:
  v23 = type metadata accessor for Logger(0);
  sub_10001AAA8(v23, (uint64_t)qword_10084CAB8);
  v24 = v2;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v27 = 138412290;
    v34 = v24;
    v29 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    *v28 = v24;

    _os_log_impl((void *)&_mh_execute_header, v25, v26, "INPerson has no phone numbers or emails. Skipping {person: %@}", v27, 0xCu);
    v30 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v28, 1, v30);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
    swift_release(v5);
  }
  else
  {
    swift_release(v5);

    v25 = v24;
  }

  swift_release(v3);
  v22 = 0;
LABEL_21:
  *a2 = v22;
}

void sub_1004C46FC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  const char *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  id v41;
  id v42;
  _BYTE v43[16];

  v8 = objc_msgSend(a1, "value");
  if (!v8)
  {
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v25 = type metadata accessor for Logger(0);
    sub_10001AAA8(v25, (uint64_t)qword_10084CAB8);
    v26 = a2;
    v27 = a1;
    v41 = v26;
    v17 = v27;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v20 = 138412546;
      v42 = v41;
      v28 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);
      *v21 = v41;

      *(_WORD *)(v20 + 12) = 2112;
      v42 = v17;
      v29 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);
      v21[1] = v17;

      v24 = "INPerson alias has missing value. Skipping {person: %@, handle: %@}";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v12 = v11;

  v13 = objc_msgSend(a1, "type");
  if (v13 == (id)2)
  {
    v32 = (_QWORD *)(a4 + 16);
  }
  else
  {
    if (v13 != (id)1)
    {
      if (v13)
      {
        swift_bridgeObjectRelease();
        if (qword_100837700 != -1)
          swift_once(&qword_100837700, sub_1004BC0B4);
        v38 = type metadata accessor for Logger(0);
        sub_10001AAA8(v38, (uint64_t)qword_10084CAB8);
        v41 = a1;
        v18 = Logger.logObject.getter(v41);
        v39 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v18, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v40 = 134349056;
          v42 = objc_msgSend(v41, "type");
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);

          _os_log_impl((void *)&_mh_execute_header, v18, v39, "notifyOfInteraction: unknown INPersonHandleType: %{public}ld", v40, 0xCu);
          v31 = (uint64_t)v40;
          goto LABEL_26;
        }

        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
      if (qword_100837700 != -1)
        swift_once(&qword_100837700, sub_1004BC0B4);
      v14 = type metadata accessor for Logger(0);
      sub_10001AAA8(v14, (uint64_t)qword_10084CAB8);
      v15 = a2;
      v16 = a1;
      v41 = v15;
      v17 = v16;
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.error.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc(22, -1);
        v21 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v20 = 138412546;
        v42 = v41;
        v22 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);
        *v21 = v41;

        *(_WORD *)(v20 + 12) = 2112;
        v42 = v17;
        v23 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);
        v21[1] = v17;

        v24 = "INPerson has unknown alias type. Skipping {person: %@, handle: %@}";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v18, v19, v24, (uint8_t *)v20, 0x16u);
        v30 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v21, 2, v30);
        swift_slowDealloc(v21, -1, -1);
        v31 = v20;
LABEL_26:
        swift_slowDealloc(v31, -1, -1);

        return;
      }
LABEL_14:

LABEL_28:
      return;
    }
    v32 = (_QWORD *)(a3 + 16);
  }
  swift_beginAccess(v32, &v42, 33, 0);
  v33 = (_QWORD *)*v32;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
  *v32 = v33;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v33 = sub_1002C8224(0, v33[2] + 1, 1, v33);
    *v32 = v33;
  }
  v36 = v33[2];
  v35 = v33[3];
  if (v36 >= v35 >> 1)
  {
    v33 = sub_1002C8224((_QWORD *)(v35 > 1), v36 + 1, 1, v33);
    *v32 = v33;
  }
  v33[2] = v36 + 1;
  v37 = &v33[2 * v36];
  v37[4] = v10;
  v37[5] = v12;
  swift_endAccess(&v42);
}

void sub_1004C4D54(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;

  if (a3)
    v7 = _convertErrorToNSError(_:)(a3);
  else
    v7 = 0;
  v8 = (id)v7;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(a4 + 16))(a4, a1 & 1, a2 & 1);

}

void sub_1004C4FB0()
{
  uint64_t v0;
  _BYTE v1[48];

  sub_1000184A8(v0 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v1);
  sub_10035288C((uint64_t)v1, (uint64_t)sub_1004C51B8, 0);
}

void sub_1004C51B8(void *a1)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  unsigned int v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  id v21;

  v3 = sub_10034E0EC((uint64_t)a1);
  if (!v1)
  {
    v4 = v3;
    if (v3)
    {
      type metadata accessor for RDGroceryOperationQueue();

      v21 = 0;
      v5 = objc_msgSend(a1, "save:", &v21);
      v6 = v21;
      if (v5)
      {
        v7 = qword_100837708;
        v8 = v21;
        if (v7 != -1)
          swift_once(&qword_100837708, sub_1004BC0D8);
        v9 = type metadata accessor for Logger(0);
        v10 = sub_10001AAA8(v9, (uint64_t)qword_10084CAD0);
        v11 = Logger.logObject.getter(v10);
        v12 = static os_log_type_t.default.getter(v11);
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "Inserted grocery operation queue item for downloading grocery model assets from Trial", v13, 2u);
          swift_slowDealloc(v13, -1, -1);
        }

      }
      else
      {
        v19 = v21;
        _convertNSErrorToError(_:)(v6);

        swift_willThrow(v20);
      }

    }
    else
    {
      if (qword_100837708 != -1)
        swift_once(&qword_100837708, sub_1004BC0D8);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10001AAA8(v14, (uint64_t)qword_10084CAD0);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Skipped inserting grocery operation queue item for downloading grocery model assets from Trial because there are no active CloudKit accounts.", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

    }
  }
}

void sub_1004C55B0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[56];

  ObjectType = swift_getObjectType();
  sub_1000184A8(v4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v15);
  v10[2] = a1;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = ObjectType;
  sub_10035288C((uint64_t)v15, (uint64_t)sub_1004D2314, (uint64_t)v10);
}

double sub_1004C5804(uint64_t a1, uint64_t a2, int a3, void (*a4)(__n128))
{
  uint64_t v4;
  void *v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  __n128 v13;

  v9 = objc_autoreleasePoolPush();
  sub_1004C58C8(a2, a3, a1);
  if (v4)
  {
    objc_autoreleasePoolPop(v9);
    *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  }
  else
  {
    v12 = v10;
    swift_bridgeObjectRelease();
    objc_autoreleasePoolPop(v9);
    v13 = swift_bridgeObjectRetain(v12);
    a4(v13);
    *(_QWORD *)&result = swift_bridgeObjectRelease_n(v12, 2).n128_u64[0];
  }
  return result;
}

void sub_1004C58C8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint8_t *v40;
  unint64_t v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  void (*v68)(char *, uint64_t);
  uint8_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  id v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  os_log_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint8_t *v99;
  os_log_t v100;
  uint64_t v101;
  uint64_t v102;
  os_log_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint8_t *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _BYTE v111[16];
  uint64_t v112[4];
  uint64_t v113;

  v4 = v3;
  LODWORD(v6) = a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v95 - v13;
  Date.init()(v15);
  v113 = (uint64_t)_swiftEmptyArrayStorage;
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v106 = v11;
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001AAA8(v16, (uint64_t)qword_10084CAB8);
  swift_bridgeObjectRetain_n(a1, 2);
  v105 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, (os_log_type_t)v20);
  v108 = a1;
  if (v21)
  {
    v98 = v20;
    v100 = v19;
    v102 = v9;
    v22 = swift_slowAlloc(22, -1);
    v97 = swift_slowAlloc(64, -1);
    v112[0] = v97;
    *(_DWORD *)v22 = 136446466;
    LODWORD(v103) = v6;
    v23 = Bool.yesno.getter(v6 & 1);
    v110 = sub_10001A820(v23, v24, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
    swift_bridgeObjectRelease();
    v99 = (uint8_t *)v22;
    *(_WORD *)(v22 + 12) = 2082;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v86 = a1;
      else
        v86 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v25 = _CocoaArrayWrapper.endIndex.getter(v86);
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v26 = _swiftEmptyArrayStorage;
    v101 = a3;
    if (v25)
    {
      v110 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1001C1B0C(0, v25 & ~(v25 >> 63), 0);
      if (v25 < 0)
      {
        __break(1u);
        goto LABEL_51;
      }
      v95 = v4;
      v96 = v8;
      v104 = v14;
      v27 = 0;
      v26 = (_QWORD *)v110;
      v28 = a1 & 0xC000000000000001;
      do
      {
        if (v28)
          v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, a1);
        else
          v29 = *(id *)(a1 + 8 * v27 + 32);
        v30 = v29;
        v31 = objc_msgSend(v29, "stringRepresentation", v95);
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v34 = v33;

        v110 = (uint64_t)v26;
        v36 = v26[2];
        v35 = v26[3];
        if (v36 >= v35 >> 1)
        {
          sub_1001C1B0C(v35 > 1, v36 + 1, 1);
          v26 = (_QWORD *)v110;
        }
        ++v27;
        v26[2] = v36 + 1;
        v37 = &v26[2 * v36];
        v37[4] = v32;
        v37[5] = v34;
        a1 = v108;
      }
      while (v25 != v27);
      v4 = v95;
      v8 = v96;
      v39 = v104;
    }
    else
    {
      v39 = v14;
    }
    v40 = v99;
    v6 = Array.description.getter(v26, &type metadata for String);
    v42 = v41;
    swift_bridgeObjectRelease();
    v110 = sub_10001A820(v6, v42, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    v43 = v100;
    _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v98, "validatePhantomObjects: Validating {shouldRepair: %{public}s, childrenObjectIDs: %{public}s}", v40, 0x16u);
    v44 = v97;
    swift_arrayDestroy(v97, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    LOBYTE(v6) = (_BYTE)v103;
    v14 = v39;
    a3 = v101;
    v9 = v102;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  __chkstk_darwin(v38);
  *(&v95 - 6) = a1;
  *(&v95 - 5) = a3;
  *(&v95 - 4) = (uint64_t)&v113;
  *((_BYTE *)&v95 - 24) = v6 & 1;
  *(&v95 - 2) = (uint64_t)v107;
  NSManagedObjectContext.rem_performAndWait<A>(_:)(&type metadata for (), sub_1004D2338, &v95 - 8, &type metadata for () + 1);
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    swift_bridgeObjectRelease();
    return;
  }
  v45 = v106;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v106, v14, v8);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  swift_bridgeObjectRetain_n(a1, 2);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter(v47);
  if (!os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    swift_bridgeObjectRelease_n(a1, 2);

    v68 = *(void (**)(char *, uint64_t))(v9 + 8);
    v68(v45, v8);
    v68(v14, v8);
LABEL_61:
    swift_beginAccess(&v113, v112, 0, 0);
    return;
  }
  LODWORD(v102) = v48;
  v103 = v47;
  v104 = v14;
  v105 = 0;
  v49 = swift_slowAlloc(48, -1);
  v101 = swift_slowAlloc(96, -1);
  v112[0] = v101;
  *(_DWORD *)v49 = 68158722;
  LODWORD(v110) = 4;
  v50 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, (char *)&v110 + 4);
  *(_WORD *)(v49 + 8) = 2048;
  v110 = Date.rem_elapsedInMilliseconds.getter(v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
  v51 = *(char **)(v9 + 8);
  v96 = v8;
  v106 = v51;
  ((void (*)(char *, uint64_t))v51)(v45, v8);
  *(_WORD *)(v49 + 18) = 2082;
  v52 = Bool.yesno.getter(v6 & 1);
  v110 = sub_10001A820(v52, v53, v112);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
  swift_bridgeObjectRelease();
  v107 = (uint8_t *)v49;
  *(_WORD *)(v49 + 28) = 2082;
  if (!((unint64_t)a1 >> 62))
  {
    v54 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_24;
  }
LABEL_51:
  if (a1 < 0)
    v87 = a1;
  else
    v87 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v54 = _CocoaArrayWrapper.endIndex.getter(v87);
  swift_bridgeObjectRelease();
LABEL_24:
  v55 = _swiftEmptyArrayStorage;
  v56 = v104;
  if (v54)
  {
    v110 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v54 & ~(v54 >> 63), 0);
    if (v54 < 0)
    {
      __break(1u);
      goto LABEL_63;
    }
    v57 = 0;
    v55 = (_QWORD *)v110;
    v58 = a1 & 0xC000000000000001;
    do
    {
      if (v58)
        v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v57, v108);
      else
        v59 = *(id *)(v108 + 8 * v57 + 32);
      v60 = v59;
      v61 = objc_msgSend(v59, "stringRepresentation");
      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      v64 = v63;

      v110 = (uint64_t)v55;
      v66 = v55[2];
      v65 = v55[3];
      if (v66 >= v65 >> 1)
      {
        sub_1001C1B0C(v65 > 1, v66 + 1, 1);
        v55 = (_QWORD *)v110;
      }
      ++v57;
      v55[2] = v66 + 1;
      v67 = &v55[2 * v66];
      v67[4] = v62;
      v67[5] = v64;
    }
    while (v54 != v57);
    v56 = v104;
    a1 = v108;
  }
  v69 = v107;
  v70 = Array.description.getter(v55, &type metadata for String);
  v72 = v71;
  swift_bridgeObjectRelease();
  v110 = sub_10001A820(v70, v72, v112);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
  swift_bridgeObjectRelease_n(a1, 2);
  swift_bridgeObjectRelease();
  *((_WORD *)v69 + 19) = 2082;
  swift_beginAccess(&v113, &v110, 0, 0);
  v73 = v113;
  if (!((unint64_t)v113 >> 62))
  {
    v74 = *(_QWORD *)((v113 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v113);
    if (v74)
      goto LABEL_37;
LABEL_59:
    swift_bridgeObjectRelease();
    v76 = _swiftEmptyArrayStorage;
LABEL_60:
    v89 = v107;
    v90 = Array.description.getter(v76, &type metadata for String);
    v92 = v91;
    swift_bridgeObjectRelease();
    v109 = (_QWORD *)sub_10001A820(v90, v92, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
    swift_bridgeObjectRelease();
    v93 = v103;
    _os_log_impl((void *)&_mh_execute_header, v103, (os_log_type_t)v102, "validatePhantomObjects: Done validating {elapsed: %.*f ms, shouldRepair: %{public}s, childrenObjectIDs: %{public}s, phantomIDs: %{public}s}", v89, 0x30u);
    v94 = v101;
    swift_arrayDestroy(v101, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1, -1);
    swift_slowDealloc(v89, -1, -1);

    ((void (*)(char *, uint64_t))v106)(v56, v96);
    goto LABEL_61;
  }
  if (v113 < 0)
    v88 = v113;
  else
    v88 = v113 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v113);
  v74 = _CocoaArrayWrapper.endIndex.getter(v88);
  if (!v74)
    goto LABEL_59;
LABEL_37:
  v109 = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v74 & ~(v74 >> 63), 0);
  if ((v74 & 0x8000000000000000) == 0)
  {
    v75 = 0;
    v76 = v109;
    do
    {
      if ((v73 & 0xC000000000000001) != 0)
        v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v75, v73);
      else
        v77 = *(id *)(v73 + 8 * v75 + 32);
      v78 = v77;
      v79 = objc_msgSend(v77, "stringRepresentation");
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
      v82 = v81;

      v109 = v76;
      v84 = v76[2];
      v83 = v76[3];
      if (v84 >= v83 >> 1)
      {
        sub_1001C1B0C(v83 > 1, v84 + 1, 1);
        v76 = v109;
      }
      ++v75;
      v76[2] = v84 + 1;
      v85 = &v76[2 * v84];
      v85[4] = v80;
      v85[5] = v82;
    }
    while (v74 != v75);
    swift_bridgeObjectRelease();
    v56 = v104;
    goto LABEL_60;
  }
LABEL_63:
  __break(1u);
}

void sub_1004C632C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSArray v5;
  uint64_t v6;
  id v7;

  sub_1000151B0(0, (unint64_t *)&qword_10083A1E0, REMObjectID_ptr);
  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2)
    v6 = _convertErrorToNSError(_:)(a2);
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

void sub_1004C63BC(void *a1, void *a2)
{
  void *v4;

  v4 = objc_autoreleasePoolPush();
  sub_1004C6420(a2, a1);
  objc_autoreleasePoolPop(v4);
}

uint64_t sub_1004C6420(void *a1, void *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t v44;
  Class isa;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  Class v50;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  id v59;
  id v60;
  char v61[104];
  __int128 v62;
  __int128 v63;

  v53 = a2;
  v56 = _s10PredicatesOMa(0);
  __chkstk_darwin(v56);
  v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.Component(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v13);
  v58 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for Date(0);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = Date.init()(v17);
  static Calendar.current.getter(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Calendar.Component.day(_:), v5);
  if (a1)
  {
    v19 = (uint64_t)objc_msgSend(a1, "integerValue");
    if (v19 != 0x8000000000000000)
      goto LABEL_5;
    __break(1u);
  }
  v19 = 0;
LABEL_5:
  v20 = v58;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v8, -v19, v16, 0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v21 = *(int *)(sub_10001A630(&qword_1008466A0) + 48);
  sub_100008868(v20, (uint64_t)v4, (uint64_t *)&unk_1008380D0);
  v4[v21] = 1;
  swift_storeEnumTagMultiPayload(v4, v56, 17);
  sub_10000D2C0();
  v23 = v22;
  sub_10001C744((uint64_t)v4, _s10PredicatesOMa);
  v24 = v57;
  v25 = sub_1004BB58C((uint64_t)v23, (unint64_t *)&qword_10083AE90, off_1007D6708);
  if (v24)
  {

    v26 = v20;
LABEL_14:
    sub_10000882C(v26, (uint64_t *)&unk_1008380D0);
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v16, v55);
  }
  v27 = (void *)v25;

  v28 = objc_msgSend(objc_allocWithZone((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v27);
  objc_msgSend(v28, "setResultType:", 1);
  v59 = 0;
  v29 = objc_msgSend(v53, "executeRequest:error:", v28, &v59);
  v30 = v59;
  if (!v29)
  {
    v34 = v59;
    _convertNSErrorToError(_:)(v30);

    swift_willThrow(v35);
    v26 = v58;
    goto LABEL_14;
  }
  v31 = v29;
  *((_QWORD *)&v63 + 1) = sub_1000151B0(0, (unint64_t *)&unk_100846CA0, NSPersistentStoreResult_ptr);
  *(_QWORD *)&v62 = v31;
  v32 = sub_1000151B0(0, (unint64_t *)&unk_10083AE80, NSBatchDeleteResult_ptr);
  v33 = v30;
  throwingCast<A>(_:as:failureMessage:)(&v60, &v62, v32, 0, 0, v32);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(&v62);
  v36 = v60;
  v37 = objc_msgSend(v60, "result");
  if (v37)
  {
    v38 = v37;
    _bridgeAnyObjectToAny(_:)(&v62, v37);
    swift_unknownObjectRelease(v38);
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  v39 = sub_10001A630((uint64_t *)&unk_100846CB0);
  throwingCast<A>(_:as:failureMessage:)(&v60, &v62, v39, 0, 0, v39);
  sub_10000882C((uint64_t)&v62, (uint64_t *)&unk_10083D5B0);
  v40 = v60;
  v41 = (void *)objc_opt_self(NSManagedObjectContext);
  v42 = sub_10001A630(&qword_10083ADC0);
  inited = swift_initStackObject(v42, v61);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C00;
  v57 = v16;
  *(_QWORD *)&v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDeletedObjectsKey);
  *((_QWORD *)&v62 + 1) = v44;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v62, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = v39;
  *(_QWORD *)(inited + 72) = v40;
  sub_1002B007C(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v46 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v47 = swift_allocObject(v46, 40, 7);
  *(_OWORD *)(v47 + 16) = xmmword_1006A7330;
  v48 = v53;
  *(_QWORD *)(v47 + 32) = v53;
  *(_QWORD *)&v62 = v47;
  specialized Array._endMutation()(v47);
  sub_1000151B0(0, (unint64_t *)&unk_100846CC0, NSManagedObjectContext_ptr);
  v49 = v48;
  v50 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v41, "mergeChangesFromRemoteContextSave:intoContexts:", isa, v50, swift_bridgeObjectRelease().n128_f64[0]);

  sub_10000882C(v58, (uint64_t *)&unk_1008380D0);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v57, v55);
}

void sub_1004C6B0C(void *a1, void *a2, void (*a3)(void), uint64_t a4, uint8_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  id v55;
  _QWORD *v56;
  uint8_t *v57;
  uint64_t v58;
  void (*v59)(void);
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void (*v63)(void);
  uint64_t v64;
  uint8_t *v65;
  id v66;
  uint64_t v67;

  v64 = a4;
  v65 = a5;
  v9 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630((uint64_t *)&unk_10083AD90);
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1006A7330;
  *(_QWORD *)(v13 + 32) = a2;
  v66 = (id)v13;
  specialized Array._endMutation()(v13);
  v14 = (uint64_t)v66;
  v15 = a2;
  sub_10034B07C(v14, 0, 1);
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = sub_1000151B0(0, &qword_10083AA30, off_1007D6658);
  v19 = objc_msgSend(objc_allocWithZone((Class)NSFetchRequest), "init");
  v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(v18), "entity");
  objc_msgSend(v19, "setEntity:", v20);

  objc_msgSend(v19, "setAffectedStores:", 0);
  objc_msgSend(v19, "setPredicate:", v17);

  v21 = NSManagedObjectContext.fetch<A>(_:)(v19, v18);
  if (v5)
  {
LABEL_2:

    return;
  }
  v22 = v21;
  v23 = v65;
  v63 = a3;
  if (!((unint64_t)v21 >> 62))
  {
    v24 = a1;
    if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_19:
    swift_bridgeObjectRelease();
    if (qword_100837700 == -1)
    {
LABEL_20:
      v50 = type metadata accessor for Logger(0);
      sub_10001AAA8(v50, (uint64_t)qword_10084CAB8);
      v51 = v15;
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.error.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(12, -1);
        v62 = (_QWORD *)swift_slowAlloc(8, -1);
        v65 = v54;
        v66 = v51;
        *(_DWORD *)v54 = 138412290;
        v55 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
        v56 = v62;
        *v62 = v51;

        v57 = v65;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "permanentlyHideReminders: Failed to get account for %@.", v65, 0xCu);
        v58 = sub_10001A630((uint64_t *)&unk_100839E70);
        swift_arrayDestroy(v56, 1, v58);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v57, -1, -1);

      }
      else
      {

      }
      v59 = v63;
      v60 = sub_1004D22B0();
      v61 = swift_allocError(&type metadata for PermanentlyHideError, v60, 0, 0);
      v59();
      swift_errorRelease(v61);
      goto LABEL_2;
    }
LABEL_26:
    swift_once(&qword_100837700, sub_1004BC0B4);
    goto LABEL_20;
  }
  if (v21 < 0)
    v48 = v21;
  else
    v48 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  v49 = _CocoaArrayWrapper.endIndex.getter(v48);
  swift_bridgeObjectRelease();
  v24 = a1;
  if (!v49)
    goto LABEL_19;
LABEL_5:
  if ((v22 & 0xC000000000000001) != 0)
  {
    v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
    goto LABEL_8;
  }
  if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_26;
  }
  v25 = *(id *)(v22 + 32);
LABEL_8:
  v26 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v23);
  sub_1004C9E7C(v27, (uint64_t)v23);
  v29 = v28;
  swift_bridgeObjectRelease();
  v30 = sub_10011FD1C(v29);
  swift_bridgeObjectRelease();
  v31 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v11, 1, 1, v31);
  v32 = type metadata accessor for RDRecentlyDeletedInfo(0);
  v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  *(_QWORD *)(v33 + 16) = v30;
  sub_1000A5CA8((uint64_t)v11, v33 + OBJC_IVAR____TtC7remindd21RDRecentlyDeletedInfo_lastPermanentlyHiddenRemindersCleanupDate, (uint64_t *)&unk_1008380D0);
  v34 = objc_msgSend(v26, "recentlyDeletedInfoAsData");
  if (v34)
  {
    v35 = v34;
    v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v38 = v37;

    sub_10009FC50(&qword_100841B08, type metadata accessor for RDRecentlyDeletedInfo, (uint64_t)&unk_1006C45CC);
    static REMJSONRepresentable.fromJSONData(_:)(&v66, v36, v38);
    sub_1000A71C8(v36, v38);
    v39 = v66;
    sub_1004ECD80(v33);
    v41 = v40;
    swift_release(v39);
  }
  else
  {
    swift_retain();
    v41 = v33;
  }
  v42 = swift_retain();
  sub_1004BBE70(v42, 1);
  swift_release(v41);
  objc_msgSend(v26, "updateChangeCount");
  v66 = 0;
  v43 = objc_msgSend(v24, "save:", &v66);
  v44 = v66;
  if (v43)
  {
    v45 = v66;
    ((void (*)(_QWORD))v63)(0);
  }
  else
  {
    v46 = v66;
    _convertNSErrorToError(_:)(v44);

    swift_willThrow(v47);
  }

  swift_release(v33);
  swift_release(v41);
}

uint64_t sub_1004C71C8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v20 = *(_QWORD *)(v0 - 8);
  v21 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.userInteractive(_:), v9);
  v13 = static OS_dispatch_queue.global(qos:)(v12);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A630((uint64_t *)&unk_10083DBD0);
  v17 = sub_1000A5F84((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v3, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v21);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x8000000100706060, v8, v5, v2, v13);
  qword_10084CAE8 = result;
  return result;
}

void sub_1004C7410(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  NSObject *KeyPath;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *ObjCClassFromMetadata;
  id v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  NSObject *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint8_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  NSObject *v67;
  id v68;
  __n128 v69;
  BOOL v70;
  NSObject *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int64_t v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  int64_t v81;
  unint64_t v82;
  int64_t v83;
  NSString v84;
  id v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  double v114;
  id *v115;
  uint64_t v116;
  id v117;
  id v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  double v123;
  id *v124;
  uint64_t v125;
  id v126;
  id v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  Class isa;
  uint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  unint64_t v154;
  uint64_t v155;
  NSObject *v156;
  NSObject *v157;
  uint64_t v158;
  id v159;
  _OWORD v160[2];
  uint64_t v161[4];
  _QWORD *v162;
  char v163[56];
  uint64_t v164;
  uint64_t v165;

  v5 = v4;
  v149 = a4;
  v148 = a3;
  v150 = a2;
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = (uint64_t)_swiftEmptyArrayStorage;
  v11 = sub_10001A630(&qword_1008470F0);
  inited = swift_initStackObject(v11, v163);
  *(_OWORD *)(inited + 16) = xmmword_1006A3C40;
  KeyPath = swift_getKeyPath(&unk_1006BF1A0);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v40 = a1;
    else
      v40 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v147 = v5;
  if (v14)
  {
    v161[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001C1BB8(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_173;
    }
    v157 = KeyPath;
    v158 = inited;
    v15 = 0;
    v16 = (_QWORD *)v161[0];
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, a1);
      else
        v17 = *(id *)(a1 + 8 * v15 + 32);
      v18 = v17;
      v19 = objc_msgSend(v17, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

      v20 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 0, 1, v20);

      v161[0] = (uint64_t)v16;
      v22 = v16[2];
      v21 = v16[3];
      if (v22 >= v21 >> 1)
      {
        sub_1001C1BB8(v21 > 1, v22 + 1, 1);
        v16 = (_QWORD *)v161[0];
      }
      ++v15;
      v16[2] = v22 + 1;
      sub_1000A5CA8(v10, (uint64_t)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v22, (uint64_t *)&unk_100839C80);
    }
    while (v14 != v15);
    v10 = (uint64_t)_swiftEmptyArrayStorage;
    KeyPath = v157;
    inited = v158;
  }
  else
  {
    v16 = _swiftEmptyArrayStorage;
    v10 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v23 = sub_100342968((uint64_t)KeyPath, (uint64_t)v16);
  swift_release(KeyPath);
  *(_QWORD *)(inited + 32) = v23;
  v24 = sub_1000153F4(0);
  *(_QWORD *)(inited + 40) = v24;
  v161[0] = inited;
  specialized Array._endMutation()(v24);
  v25 = (void *)sub_10000D2BC(v161[0]);
  v158 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v158);
  v145 = v25;
  v27 = objc_msgSend(ObjCClassFromMetadata, "ic_objectsMatchingPredicate:context:", v25, v150);
  v28 = sub_1000151B0(0, (unint64_t *)&qword_100839930, NSManagedObject_ptr);
  v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

  v30 = sub_1004C8580(v29);
  swift_bridgeObjectRelease();
  if (v30)
    v8 = (uint64_t)v30;
  else
    v8 = (uint64_t)_swiftEmptyArrayStorage;
  v161[0] = (uint64_t)_swiftEmptyArrayStorage;
  *(_QWORD *)&v160[0] = _swiftEmptyArrayStorage;
  if (!((unint64_t)v8 >> 62))
  {
    a1 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v8);
    if (a1)
      goto LABEL_19;
LABEL_40:
    swift_bridgeObjectRelease();
    a1 = (uint64_t)_swiftEmptyArrayStorage;
    v14 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_41;
  }
  if (v8 < 0)
    v41 = v8;
  else
    v41 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  a1 = _CocoaArrayWrapper.endIndex.getter(v41);
  if (!a1)
    goto LABEL_40;
LABEL_19:
  if (a1 < 1)
  {
LABEL_173:
    __break(1u);
    goto LABEL_174;
  }
  v10 = 0;
  do
  {
    if ((v8 & 0xC000000000000001) != 0)
      v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
    else
      v34 = *(id *)(v8 + 8 * v10 + 32);
    v35 = v34;
    v36 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
    v37 = objc_msgSend(v35, "isConnectedToAccountObject:", v36);

    if (v37)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
      v32 = *(_QWORD *)((v161[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v39 = *(_QWORD *)((v161[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v32 >= v39 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1);
    }
    else
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
      v32 = *(_QWORD *)((*(_QWORD *)&v160[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v31 = *(_QWORD *)((*(_QWORD *)&v160[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v32 >= v31 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1);
    }
    v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v35);
    specialized Array._endMutation()(v33);
    ++v10;
  }
  while (a1 != v10);
  swift_bridgeObjectRelease();
  v14 = v161[0];
  a1 = *(_QWORD *)&v160[0];
LABEL_41:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a1);
  sub_1001E2950(v42);
  if (qword_100837700 != -1)
    goto LABEL_108;
  while (1)
  {
    v43 = type metadata accessor for Logger(0);
    v44 = sub_10001AAA8(v43, (uint64_t)qword_10084CAB8);
    swift_bridgeObjectRetain_n(a1, 2);
    swift_bridgeObjectRetain_n(v14, 2);
    v146 = v44;
    KeyPath = Logger.logObject.getter(v45);
    LODWORD(v8) = static os_log_type_t.info.getter(KeyPath);
    v46 = os_log_type_enabled(KeyPath, (os_log_type_t)v8);
    v155 = v14;
    if (v46)
    {
      v47 = swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v161[0] = v10;
      LODWORD(v47->isa) = 136446210;
      v157 = v47;
      if (!((unint64_t)a1 >> 62))
      {
        v48 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_45;
      }
      goto LABEL_175;
    }

    swift_bridgeObjectRelease_n(a1, 3);
    swift_bridgeObjectRelease_n(v14, 2);
LABEL_60:
    v162 = _swiftEmptyArrayStorage;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v91 = v14;
      else
        v91 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v66 = _CocoaArrayWrapper.endIndex.getter(v91);
      swift_bridgeObjectRelease();
      if (!v66)
      {
LABEL_113:
        swift_bridgeObjectRelease();
        v90 = (unint64_t)_swiftEmptyArrayStorage;
        goto LABEL_114;
      }
    }
    else
    {
      v66 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v66)
        goto LABEL_113;
    }
    v67 = 0;
    v154 = v14 & 0xC000000000000001;
    v152 = v14 & 0xFFFFFFFFFFFFFF8;
    v151 = v14 + 32;
    v157 = ((char *)&type metadata for Any + 8);
    v153 = v66;
LABEL_65:
    if (v154)
    {
      v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v67, v14);
      goto LABEL_69;
    }
    if ((unint64_t)v67 < *(_QWORD *)(v152 + 16))
      break;
LABEL_107:
    __break(1u);
LABEL_108:
    swift_once(&qword_100837700, sub_1004BC0B4);
  }
  v68 = *(id *)(v151 + 8 * (_QWORD)v67);
LABEL_69:
  a1 = (uint64_t)v68;
  v70 = __OFADD__(v67, 1);
  v71 = ((char *)&v67->isa + 1);
  if (v70)
  {
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  v156 = v71;
  v72 = objc_msgSend((id)swift_getObjCClassFromObject(v68, v69), "keyPathsForValuesAffectingEffectiveMinimumSupportedVersion");
  v73 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v72, &type metadata for String, &protocol witness table for String);

  v14 = v73 + 56;
  v74 = 1 << *(_BYTE *)(v73 + 32);
  if (v74 < 64)
    v75 = ~(-1 << v74);
  else
    v75 = -1;
  v76 = v75 & *(_QWORD *)(v73 + 56);
  v77 = (unint64_t)(v74 + 63) >> 6;
  swift_bridgeObjectRetain(v73);
  v78 = 0;
  do
  {
    while (2)
    {
      if (v76)
      {
        v79 = __clz(__rbit64(v76));
        v76 &= v76 - 1;
        v80 = v79 | (v78 << 6);
      }
      else
      {
        v81 = v78 + 1;
        if (__OFADD__(v78, 1))
        {
          __break(1u);
          goto LABEL_105;
        }
        if (v81 >= v77)
        {
LABEL_63:
          swift_release(v73);
          swift_bridgeObjectRelease();

          goto LABEL_64;
        }
        v82 = *(_QWORD *)(v14 + 8 * v81);
        ++v78;
        if (!v82)
        {
          v78 = v81 + 1;
          if (v81 + 1 >= v77)
            goto LABEL_63;
          v82 = *(_QWORD *)(v14 + 8 * v78);
          if (!v82)
          {
            v78 = v81 + 2;
            if (v81 + 2 >= v77)
              goto LABEL_63;
            v82 = *(_QWORD *)(v14 + 8 * v78);
            if (!v82)
            {
              v78 = v81 + 3;
              if (v81 + 3 >= v77)
                goto LABEL_63;
              v82 = *(_QWORD *)(v14 + 8 * v78);
              if (!v82)
              {
                v78 = v81 + 4;
                if (v81 + 4 >= v77)
                  goto LABEL_63;
                v82 = *(_QWORD *)(v14 + 8 * v78);
                if (!v82)
                {
                  v83 = v81 + 5;
                  if (v83 >= v77)
                    goto LABEL_63;
                  v82 = *(_QWORD *)(v14 + 8 * v83);
                  if (!v82)
                  {
                    while (1)
                    {
                      v78 = v83 + 1;
                      if (__OFADD__(v83, 1))
                        goto LABEL_106;
                      if (v78 >= v77)
                        goto LABEL_63;
                      v82 = *(_QWORD *)(v14 + 8 * v78);
                      ++v83;
                      if (v82)
                        goto LABEL_95;
                    }
                  }
                  v78 = v83;
                }
              }
            }
          }
        }
LABEL_95:
        v76 = (v82 - 1) & v82;
        v80 = __clz(__rbit64(v82)) + (v78 << 6);
      }
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v73 + 48) + 16 * v80 + 8));
      v84 = String._bridgeToObjectiveC()();
      v85 = objc_msgSend((id)a1, "valueForKey:", v84);

      if (v85)
      {
        _bridgeAnyObjectToAny(_:)(v160, v85);
        swift_unknownObjectRelease(v85);
      }
      else
      {
        memset(v160, 0, sizeof(v160));
      }
      v10 = (uint64_t)&unk_10083D5B0;
      sub_1000A5CA8((uint64_t)v160, (uint64_t)v161, (uint64_t *)&unk_10083D5B0);
      if (!v161[3])
      {
        sub_10000882C((uint64_t)v161, (uint64_t *)&unk_10083D5B0);
LABEL_75:
        swift_bridgeObjectRelease();
        continue;
      }
      break;
    }
    if ((swift_dynamicCast(&v159, v161, v157, v158, 6) & 1) == 0)
      goto LABEL_75;
    v10 = (uint64_t)v159;
    v86 = objc_msgSend(v159, "isConcealed");
    swift_bridgeObjectRelease();

  }
  while ((v86 & 1) == 0);
  swift_release(v73);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v87);
  v88 = v162[2];
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v88);
  v89 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v88, a1);
  specialized ContiguousArray._endMutation()(v89);
LABEL_64:
  v14 = v155;
  v67 = v156;
  if (v156 != v153)
    goto LABEL_65;
  swift_bridgeObjectRelease();
  v90 = (unint64_t)v162;
LABEL_114:
  swift_bridgeObjectRetain(v90);
  sub_1001E2950(v92);
  v93 = swift_retain();
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.info.getter(v94);
  if (!os_log_type_enabled(v94, (os_log_type_t)v95))
  {

    swift_release_n(v90);
    goto LABEL_133;
  }
  v10 = swift_slowAlloc(12, -1);
  v96 = swift_slowAlloc(32, -1);
  v161[0] = v96;
  *(_DWORD *)v10 = 136446210;
  if ((v90 & 0x8000000000000000) != 0 || (v90 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v90);
    v97 = _CocoaArrayWrapper.endIndex.getter(v141);
    swift_release(v90);
  }
  else
  {
    v97 = *(_QWORD *)(v90 + 16);
  }
  v98 = _swiftEmptyArrayStorage;
  if (!v97)
    goto LABEL_132;
  *(_QWORD *)&v160[0] = _swiftEmptyArrayStorage;
  sub_1001C1B0C(0, v97 & ~(v97 >> 63), 0);
  if (v97 < 0)
    goto LABEL_186;
  v155 = v96;
  LODWORD(v156) = v95;
  v157 = v10;
  v158 = (uint64_t)v94;
  v99 = 0;
  v98 = *(_QWORD **)&v160[0];
  do
  {
    if ((v90 & 0xC000000000000001) != 0)
      v100 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v99, v90);
    else
      v100 = *(id *)(v90 + 8 * v99 + 32);
    v101 = v100;
    v102 = objc_msgSend(v100, "remObjectID");
    if (v102)
    {
      v103 = v102;
      v104 = objc_msgSend(v102, "description");

      v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
      v107 = v106;

    }
    else
    {

      v107 = 0xE300000000000000;
      v105 = 7104878;
    }
    *(_QWORD *)&v160[0] = v98;
    v109 = v98[2];
    v108 = v98[3];
    if (v109 >= v108 >> 1)
    {
      sub_1001C1B0C(v108 > 1, v109 + 1, 1);
      v98 = *(_QWORD **)&v160[0];
    }
    ++v99;
    v98[2] = v109 + 1;
    v110 = &v98[2 * v109];
    v110[4] = v105;
    v110[5] = v107;
  }
  while (v97 != v99);
  v10 = (uint64_t)v157;
  v94 = v158;
  LOBYTE(v95) = (_BYTE)v156;
  v96 = v155;
LABEL_132:
  v111 = Array.description.getter(v98, &type metadata for String);
  v113 = v112;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v160[0] = sub_10001A820(v111, v113, v161);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v160, (char *)v160 + 8);
  swift_release_n(v90);
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v94, (os_log_type_t)v95, "validatePhantomObjects: {objectsWithConcealedParent: %{public}s}", (uint8_t *)v10, 0xCu);
  swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v96, -1, -1);
  swift_slowDealloc(v10, -1, -1);

LABEL_133:
  a1 = v164;
  v161[0] = (uint64_t)_swiftEmptyArrayStorage;
  v14 = (unint64_t)v164 >> 62;
  if ((unint64_t)v164 >> 62)
  {
    if (v164 < 0)
      v139 = v164;
    else
      v139 = v164 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v164);
    v8 = _CocoaArrayWrapper.endIndex.getter(v139);
  }
  else
  {
    v8 = *(_QWORD *)((v164 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)&v114 = swift_bridgeObjectRetain(v164).n128_u64[0];
  }
  KeyPath = _swiftEmptyArrayStorage;
  if (!v8)
  {
    v121 = _swiftEmptyArrayStorage;
    goto LABEL_145;
  }
  if (v8 < 1)
  {
LABEL_174:
    __break(1u);
LABEL_175:
    if (a1 < 0)
      v140 = a1;
    else
      v140 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v48 = _CocoaArrayWrapper.endIndex.getter(v140);
    swift_bridgeObjectRelease();
LABEL_45:
    v49 = _swiftEmptyArrayStorage;
    LODWORD(v156) = v8;
    v154 = v10;
    if (!v48)
      goto LABEL_59;
    *(_QWORD *)&v160[0] = _swiftEmptyArrayStorage;
    sub_1001C1B0C(0, v48 & ~(v48 >> 63), 0);
    if ((v48 & 0x8000000000000000) == 0)
    {
      v153 = KeyPath;
      v50 = 0;
      v49 = *(_QWORD **)&v160[0];
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, a1);
        else
          v51 = *(id *)(a1 + 8 * v50 + 32);
        v52 = v51;
        v53 = objc_msgSend(v51, "remObjectID");
        if (v53)
        {
          v54 = v53;
          v55 = objc_msgSend(v53, "description");

          v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
          v58 = v57;

        }
        else
        {

          v58 = 0xE300000000000000;
          v56 = 7104878;
        }
        *(_QWORD *)&v160[0] = v49;
        v60 = v49[2];
        v59 = v49[3];
        if (v60 >= v59 >> 1)
        {
          sub_1001C1B0C(v59 > 1, v60 + 1, 1);
          v49 = *(_QWORD **)&v160[0];
        }
        ++v50;
        v49[2] = v60 + 1;
        v61 = &v49[2 * v60];
        v61[4] = v56;
        v61[5] = v58;
      }
      while (v48 != v50);
      v14 = v155;
      KeyPath = v153;
LABEL_59:
      v62 = (uint8_t *)v157;
      v10 = Array.description.getter(v49, &type metadata for String);
      v64 = v63;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v160[0] = sub_10001A820(v10, v64, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v160, (char *)v160 + 8);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease_n(v14, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, KeyPath, (os_log_type_t)v156, "validatePhantomObjects: {disconnected: %{public}s}", v62, 0xCu);
      v65 = v154;
      swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v62, -1, -1);
      swift_bridgeObjectRelease();

      goto LABEL_60;
    }
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    return;
  }
  v115 = (id *)(a1 + 32);
  do
  {
    v117 = objc_msgSend(*v115, "remObjectID", v114);
    if (v117)
    {
      v118 = v117;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v117);
      v120 = *(_QWORD *)((v161[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v119 = *(_QWORD *)((v161[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v120 >= v119 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1);
      v116 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v120, v118);
      specialized Array._endMutation()(v116);
    }
    ++v115;
    --v8;
  }
  while (v8);
  v121 = (_QWORD *)v161[0];
LABEL_145:
  swift_bridgeObjectRelease();
  sub_1001E0B58((uint64_t)v121);
  if ((v149 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v161[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (v14)
  {
    if (a1 < 0)
      v131 = a1;
    else
      v131 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v122 = _CocoaArrayWrapper.endIndex.getter(v131);
    if (!v122)
      goto LABEL_161;
LABEL_148:
    if (v122 >= 1)
    {
      v124 = (id *)(a1 + 32);
      do
      {
        v126 = objc_msgSend(*v124, "objectID", v123);
        if (v126)
        {
          v127 = v126;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v126);
          v129 = *(_QWORD *)((v161[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
          v128 = *(_QWORD *)((v161[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v129 >= v128 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v128 > 1);
          v125 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v129, v127);
          specialized Array._endMutation()(v125);
        }
        ++v124;
        --v122;
      }
      while (v122);
      v130 = v161[0];
      goto LABEL_162;
    }
    goto LABEL_187;
  }
  v122 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  *(_QWORD *)&v123 = swift_bridgeObjectRetain(a1).n128_u64[0];
  if (v122)
    goto LABEL_148;
LABEL_161:
  v130 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_162:
  swift_bridgeObjectRelease_n(a1, 2);
  if ((unint64_t)v130 >> 62)
  {
    if (v130 < 0)
      v142 = v130;
    else
      v142 = v130 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v130);
    v143 = _CocoaArrayWrapper.endIndex.getter(v142);
    swift_bridgeObjectRelease();
    if (!v143)
      goto LABEL_184;
LABEL_164:
    v132 = sub_1000151B0(0, &qword_100843EA0, NSManagedObjectID_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v134 = (uint64_t)v150;
    v135 = objc_msgSend(v150, "_debug_managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation:", isa);

    v136 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v135, v132);
    __chkstk_darwin(v137);
    *(&v144 - 4) = v136;
    *(&v144 - 3) = v134;
    *(&v144 - 2) = v130;
    v138 = v147;
    NSManagedObjectContext.rem_performAndWait<A>(_:)(&v165, sub_1004D2364, &v144 - 6, &type metadata for () + 1);
    if (v138)
    {

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();

    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)((v130 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_164;
LABEL_184:
    swift_bridgeObjectRelease();

  }
}

_QWORD *sub_1004C8580(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        v5 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v6 = v4;
        v7 = objc_opt_self(REMCDObject);
        v8 = swift_dynamicCastObjCClass(v6, v7);
        if (!v8)
        {
          swift_unknownObjectRelease(v6);
          goto LABEL_15;
        }
        v9 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        v10 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
        specialized ContiguousArray._endMutation()(v11);
        if (v5 == v2)
          return _swiftEmptyArrayStorage;
      }
      __break(1u);
    }
    else
    {
      v12 = 0;
      v13 = v1 + 32;
      while (1)
      {
        v14 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        v15 = *(void **)(v13 + 8 * v12);
        v16 = objc_opt_self(REMCDObject);
        v17 = swift_dynamicCastObjCClass(v15, v16);
        if (!v17)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0;
        }
        v1 = v17;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v18 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v1);
        specialized ContiguousArray._endMutation()(v19);
        ++v12;
        if (v14 == v2)
          return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    if (v1 < 0)
      v21 = v1;
    else
      v21 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
    specialized ContiguousArray.reserveCapacity(_:)(v22);
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_1004C8764(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  unsigned __int8 v41;
  __n128 v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  double v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  void *v76;
  double v77;
  unsigned int v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  id v89;
  uint64_t v91;
  uint64_t v92;
  id v93;
  _QWORD v94[2];

  v6 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_51;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v9)
  {
    while (1)
    {
      if (v9 < 1)
        goto LABEL_69;
      v84 = a3;
      v87 = 0;
      v88 = 0;
      v4 = 0;
      a3 = a1;
      v89 = a2;
      v92 = v9;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a3);
        else
          v11 = *(id *)(a3 + 8 * (_QWORD)v4 + 32);
        v12 = v11;
        v93 = 0;
        v13 = objc_msgSend(a2, "existingObjectWithID:error:", v11, &v93);
        v14 = v93;
        if (!v13)
        {
          v22 = v93;
          v23 = _convertNSErrorToError(_:)(v14);

          swift_willThrow(v24);
          swift_errorRelease(v23);
          v6 = 0;
          goto LABEL_17;
        }
        v5 = v13;
        v15 = objc_opt_self(REMCDObject);
        v16 = (void *)swift_dynamicCastObjCClass(v5, v15);
        v17 = v14;
        if (!v16)
        {

LABEL_17:
          if (qword_100837700 != -1)
            swift_once(&qword_100837700, sub_1004BC0B4);
          v25 = type metadata accessor for Logger(0);
          sub_10001AAA8(v25, (uint64_t)qword_10084CAB8);
          v26 = v12;
          v27 = Logger.logObject.getter(v26);
          v28 = static os_log_type_t.error.getter(v27);
          if (os_log_type_enabled(v27, v28))
          {
            v29 = swift_slowAlloc(12, -1);
            v30 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v29 = 138543362;
            *(_QWORD *)(v29 + 4) = v26;
            *v30 = v26;
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "repairPhantomObjects: Couldn't get an REMCDObject, skipping {moid: %{public}@}", (uint8_t *)v29, 0xCu);
            v31 = sub_10001A630((uint64_t *)&unk_100839E70);
            swift_arrayDestroy(v30, 1, v31);
            v32 = v30;
            a3 = a1;
            swift_slowDealloc(v32, -1, -1);
            swift_slowDealloc(v29, -1, -1);

          }
          else
          {

          }
LABEL_6:
          v10 = (void *)v92;
          goto LABEL_7;
        }
        v18 = objc_msgSend(v16, "remObjectID");
        if (v18)
        {
          v19 = v18;
          v20 = objc_msgSend(v18, "description");

          v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          a2 = v21;

        }
        else
        {
          a2 = (void *)0xE300000000000000;
          v91 = 7104878;
        }
        if ((objc_msgSend(v16, "isConcealed") & 1) != 0)
        {
          if (qword_100837700 != -1)
            swift_once(&qword_100837700, sub_1004BC0B4);
          v33 = type metadata accessor for Logger(0);
          sub_10001AAA8(v33, (uint64_t)qword_10084CAB8);
          swift_bridgeObjectRetain(a2);
          v35 = Logger.logObject.getter(v34);
          v36 = static os_log_type_t.error.getter(v35);
          if (os_log_type_enabled(v35, v36))
          {
            v37 = swift_slowAlloc(12, -1);
            v38 = (void *)swift_slowAlloc(32, -1);
            v93 = v38;
            *(_DWORD *)v37 = 136446210;
            swift_bridgeObjectRetain(a2);
            *(_QWORD *)(v37 + 4) = sub_10001A820(v91, (unint64_t)a2, (uint64_t *)&v93);
            swift_bridgeObjectRelease_n(a2, 3);
            _os_log_impl((void *)&_mh_execute_header, v35, v36, "repairPhantomObjects: Attempted to repair a non-phantom object which is already concealed {remObjectID: %{public}s}", (uint8_t *)v37, 0xCu);
            swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
            v39 = v38;
            a3 = a1;
            swift_slowDealloc(v39, -1, -1);
            swift_slowDealloc(v37, -1, -1);

LABEL_43:
            a2 = v89;
            goto LABEL_6;
          }

          swift_bridgeObjectRelease_n(a2, 2);
LABEL_42:

          goto LABEL_43;
        }
        v40 = objc_msgSend(objc_allocWithZone((Class)NSMutableDictionary), "init");
        v41 = objc_msgSend(v16, "isConnectedToAccountObject:", v40);

        if ((v41 & 1) == 0)
          break;
LABEL_36:
        if (!objc_msgSend(v16, "validateEffectiveMinimumSupportedVersionApplyingChange:", 0))
        {

          swift_bridgeObjectRelease();
          goto LABEL_42;
        }
        v55 = objc_msgSend(v89, "managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion");
        v56 = objc_msgSend(v16, "ic_permanentObjectID");
        objc_msgSend(v55, "addObject:", v56);

        if (qword_100837700 != -1)
          swift_once(&qword_100837700, sub_1004BC0B4);
        v57 = type metadata accessor for Logger(0);
        sub_10001AAA8(v57, (uint64_t)qword_10084CAB8);
        v5 = v5;
        swift_bridgeObjectRetain(a2);
        v59 = Logger.logObject.getter(v58);
        v60 = static os_log_type_t.default.getter(v59);
        if (os_log_type_enabled(v59, v60))
        {
          v86 = v6;
          v61 = swift_slowAlloc(22, -1);
          v85 = (void *)swift_slowAlloc(64, -1);
          v93 = v85;
          *(_DWORD *)v61 = 136446466;
          swift_bridgeObjectRetain(a2);
          *(_QWORD *)(v61 + 4) = sub_10001A820(v91, (unint64_t)a2, (uint64_t *)&v93);
          *(_QWORD *)&v62 = swift_bridgeObjectRelease_n(a2, 3).n128_u64[0];
          *(_WORD *)(v61 + 12) = 2082;
          objc_msgSend(v16, "effectiveMinimumSupportedVersion", v62);
          v63 = sub_1000D2474();
          v64 = BinaryInteger.description.getter(&type metadata for Int, v63);
          *(_QWORD *)(v61 + 14) = sub_10001A820(v64, v65, (uint64_t *)&v93);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "repairPhantomObjects: Repaired effectiveMiniumSupportedVersion for {remObjectID: %{public}s, newValue: %{public}s}", (uint8_t *)v61, 0x16u);
          swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1, -1);
          v66 = v61;
          v6 = v86;
          swift_slowDealloc(v66, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a2, 2);
        }
        v67 = __OFADD__(v88++, 1);
        a2 = v89;
        a3 = a1;
        v10 = (void *)v92;
        if (v67)
          goto LABEL_50;
LABEL_7:
        v4 = (char *)v4 + 1;
        if (v10 == v4)
        {
          swift_bridgeObjectRelease();
          a3 = v84;
          v68 = v87;
          v4 = v88;
          goto LABEL_56;
        }
      }
      v43 = objc_msgSend((id)swift_getObjCClassFromObject(v16, v42), "keyPathsForValuesAffectingEffectiveMinimumSupportedVersion");
      v44 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v43, &type metadata for String, &protocol witness table for String);

      v45 = v5;
      swift_bridgeObjectRetain(a2);
      v46 = v6;
      sub_1004C98F0(v44, v16, v91, (unint64_t)a2);
      swift_bridgeObjectRelease();

      objc_msgSend(v16, "markForDeletion", swift_bridgeObjectRelease().n128_f64[0]);
      if (qword_100837700 != -1)
        swift_once(&qword_100837700, sub_1004BC0B4);
      v47 = type metadata accessor for Logger(0);
      sub_10001AAA8(v47, (uint64_t)qword_10084CAB8);
      swift_bridgeObjectRetain_n(a2, 2);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.default.getter(v49);
      if (os_log_type_enabled(v49, v50))
      {
        v51 = swift_slowAlloc(12, -1);
        v52 = (void *)swift_slowAlloc(32, -1);
        v93 = v52;
        *(_DWORD *)v51 = 136446210;
        swift_bridgeObjectRetain(a2);
        *(_QWORD *)(v51 + 4) = sub_10001A820(v91, (unint64_t)a2, (uint64_t *)&v93);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "repairPhantomObjects: Repaired markedForDeletion state for {remObjectID: %{public}s}", (uint8_t *)v51, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        v53 = v52;
        v6 = v46;
        swift_slowDealloc(v53, -1, -1);
        v54 = v51;
        a3 = a1;
        swift_slowDealloc(v54, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      if (!__OFADD__(v87, 1))
        break;
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      if (a1 < 0)
        v69 = a1;
      else
        v69 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v9 = _CocoaArrayWrapper.endIndex.getter(v69);
      if (!v9)
        goto LABEL_55;
    }
    ++v87;
    goto LABEL_36;
  }
LABEL_55:
  swift_bridgeObjectRelease();
  v4 = 0;
  v68 = 0;
LABEL_56:
  v5 = v68;
  v67 = __OFADD__(v68, v4);
  v70 = (uint64_t)v4 + (_QWORD)v68;
  if (v67)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    swift_once(&qword_100837700, sub_1004BC0B4);
    goto LABEL_59;
  }
  if (v70 <= 0)
    return;
  if (qword_100837700 != -1)
    goto LABEL_70;
LABEL_59:
  v71 = type metadata accessor for Logger(0);
  sub_10001AAA8(v71, (uint64_t)qword_10084CAB8);
  swift_bridgeObjectRetain_n(a3, 2);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.default.getter(v73);
  if (os_log_type_enabled(v73, v74))
  {
    v75 = swift_slowAlloc(32, -1);
    *(_DWORD *)v75 = 134218496;
    if ((unint64_t)a3 >> 62)
    {
      if (a3 < 0)
        v83 = a3;
      else
        v83 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v76 = (void *)_CocoaArrayWrapper.endIndex.getter(v83);
      swift_bridgeObjectRelease();
    }
    else
    {
      v76 = *(void **)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v93 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2048;
    v93 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
    *(_WORD *)(v75 + 22) = 2048;
    v93 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "repairPhantomObjects: Saving repaired objects... {inputCount: %ld, disconnectedCount: %ld, unsupportedCount: %ld}", (uint8_t *)v75, 0x20u);
    swift_slowDealloc(v75, -1, -1);

  }
  else
  {

    *(_QWORD *)&v77 = swift_bridgeObjectRelease_n(a3, 2).n128_u64[0];
  }
  v93 = 0;
  v78 = objc_msgSend(a2, "save:", &v93, v77);
  v79 = v93;
  if (v78)
  {
    v80 = v93;
  }
  else
  {
    v81 = v93;
    _convertNSErrorToError(_:)(v79);

    swift_willThrow(v82);
  }
}

void sub_1004C928C(uint64_t *a1, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id aBlock[5];
  _QWORD *v26;

  v8 = *a1;
  v7 = a1[1];
  v9 = (void *)objc_opt_self(REMError);
  v10 = (_QWORD *)swift_allocObject(&unk_1007F65F0, 40, 7);
  v10[2] = a2;
  v10[3] = v8;
  v10[4] = v7;
  aBlock[4] = sub_1004D23AC;
  v26 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000094C8;
  aBlock[3] = &unk_1007F6608;
  v11 = _Block_copy(aBlock);
  v12 = v26;
  v13 = a2;
  swift_bridgeObjectRetain(v7);
  swift_release(v12);
  aBlock[0] = 0;
  LODWORD(a2) = objc_msgSend(v9, "catchObjCException:error:", v11, aBlock);
  _Block_release(v11);
  v14 = aBlock[0];
  if (!(_DWORD)a2)
  {
    v15 = v14;
    v16 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v17);
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v18 = type metadata accessor for Logger(0);
    sub_10001AAA8(v18, (uint64_t)qword_10084CAB8);
    swift_bridgeObjectRetain_n(v7, 2);
    swift_bridgeObjectRetain_n(a4, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = (void *)swift_slowAlloc(64, -1);
      aBlock[0] = v23;
      *(_DWORD *)v22 = 136446466;
      swift_bridgeObjectRetain(v7);
      v24 = sub_10001A820(v8, v7, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, aBlock);
      swift_bridgeObjectRelease_n(v7, 3);
      *(_WORD *)(v22 + 12) = 2082;
      swift_bridgeObjectRetain(a4);
      v24 = sub_10001A820(a3, a4, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, aBlock);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "repairPhantomObjects: Unknown parent key to try to unset {key %{public}s, remObjectiD: %{public}s}", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
      swift_errorRelease(v16);

    }
    else
    {
      swift_errorRelease(v16);

      swift_bridgeObjectRelease_n(a4, 2);
      swift_bridgeObjectRelease_n(v7, 2);
    }
  }
}

void sub_1004C95B8(void *a1)
{
  NSString v2;
  id v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  _OWORD v8[2];
  _BYTE v9[24];
  uint64_t v10;

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(a1, "valueForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v8, v3);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_1000A5CA8((uint64_t)v8, (uint64_t)v9, (uint64_t *)&unk_10083D5B0);
  if (v10)
  {
    v4 = sub_1000151B0(0, (unint64_t *)&unk_10083ADB0, off_1007D66F0);
    if ((swift_dynamicCast(&v7, v9, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
    {
      v5 = v7;
      objc_msgSend(v7, "updateChangeCount");

    }
  }
  else
  {
    sub_10000882C((uint64_t)v9, (uint64_t *)&unk_10083D5B0);
  }
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setValue:forKey:", 0, v6);

}

uint64_t sub_1004C96FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1000CB064;
  return v6();
}

uint64_t sub_1004C9750(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1000CB064;
  return v7();
}

uint64_t sub_1004C97A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_10000882C(a1, &qword_100839A10);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_1007F7108, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, &type metadata for () + 1, &unk_10084CC40, v17);
}

void sub_1004C98F0(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22[2];
  int64_t v23;

  v9 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a1 + 56);
  v23 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v20 = v19[1];
    v22[0] = *v19;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
    sub_1004C928C(v22, a2, a3, a4);
    if (v4)
    {
      swift_release(a1);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v23)
      goto LABEL_26;
    v17 = *(_QWORD *)(v9 + 8 * v13);
    if (!v17)
    {
      v18 = v13 + 1;
      if (v13 + 1 >= v23)
        goto LABEL_26;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 2;
      if (v13 + 2 >= v23)
        goto LABEL_26;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 3;
      if (v13 + 3 >= v23)
        goto LABEL_26;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (v17)
      {
LABEL_14:
        v13 = v18;
        goto LABEL_15;
      }
      v21 = v13 + 4;
      if (v13 + 4 >= v23)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v17 = *(_QWORD *)(v9 + 8 * v21);
      v13 += 4;
      if (!v17)
        break;
    }
LABEL_15:
    v12 = (v17 - 1) & v17;
  }
  while (1)
  {
    v13 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v13 >= v23)
      goto LABEL_26;
    v17 = *(_QWORD *)(v9 + 8 * v13);
    ++v21;
    if (v17)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1004C9AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  void (*v29)(_QWORD *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD v36[4];
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;

  v4 = a1;
  v34 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v5 = __CocoaDictionary.count.getter(a1);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
  }
  result = (uint64_t)_swiftEmptyArrayStorage;
  if (v5)
  {
    v40 = _swiftEmptyArrayStorage;
    sub_1001C240C(0, v5 & ~(v5 >> 63), 0);
    result = sub_1000E1B18(v4);
    v37 = result;
    v38 = v7;
    v39 = v8 & 1;
    if (v5 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      v9 = v4 & 0xFFFFFFFFFFFFFF8;
      if (v4 < 0)
        v9 = v4;
      v31 = v9;
      v32 = v4;
      v33 = a3;
      do
      {
        while (1)
        {
          v16 = v37;
          v17 = v38;
          v18 = v39;
          sub_1000E1F40(v36, v37, v38, v39, v4);
          v20 = v19;
          v21 = v36[0];
          v22 = v40;
          swift_bridgeObjectRetain(a3);
          result = swift_isUniquelyReferenced_nonNull_native(v22);
          if ((result & 1) == 0)
          {
            result = sub_1001C240C(0, v22[2] + 1, 1);
            v22 = v40;
          }
          v24 = v22[2];
          v23 = v22[3];
          if (v24 >= v23 >> 1)
          {
            result = sub_1001C240C(v23 > 1, v24 + 1, 1);
            v22 = v40;
          }
          v22[2] = v24 + 1;
          v25 = &v22[4 * v24];
          v25[4] = v20;
          v25[5] = a2;
          a3 = v33;
          v25[6] = v33;
          v25[7] = v21;
          if (v34)
            break;
          v4 = v32;
          sub_1000E1AF8(v16, v17, v18, v32);
          v11 = v10;
          v13 = v12;
          v15 = v14;
          sub_1000E515C(v16, v17, v18);
          v37 = v11;
          v38 = v13;
          v39 = v15 & 1;
          if (!--v5)
            goto LABEL_22;
        }
        v4 = v32;
        if ((v18 & 1) == 0)
          goto LABEL_25;
        v26 = __CocoaDictionary.Index.handleBitPattern.getter(v16, v17);
        if (v26)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v28 = sub_10001A630(&qword_10084CC00);
        v29 = (void (*)(_QWORD *, _QWORD))Dictionary.Index._asCocoa.modify(v36, v28);
        __CocoaDictionary.formIndex(after:isUnique:)(v30, isUniquelyReferenced_nonNull_native, v31);
        v29(v36, 0);
        --v5;
      }
      while (v5);
LABEL_22:
      sub_1000E515C(v37, v38, v39);
      return (uint64_t)v40;
    }
  }
  return result;
}

_QWORD *sub_1004C9D18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  _DWORD *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  unint64_t v26;
  uint64_t v27;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_1001C2088(0, v6, 0);
    v26 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8);
    v27 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
    for (i = (_DWORD *)(a1 + 56); ; i += 8)
    {
      v10 = *((_QWORD *)i - 3);
      v11 = *((_QWORD *)i - 2);
      v12 = *((_QWORD *)i - 1);
      v13 = *(float *)i;
      swift_bridgeObjectRetain(v12);
      v17 = sub_1000C5160(v10, v11, v12, v27, v26, a3, a4, v13);
      if (v5)
        break;
      v18 = v14;
      v19 = v15;
      v20 = v16;
      v21 = v17;
      swift_bridgeObjectRelease();
      v23 = _swiftEmptyArrayStorage[2];
      v22 = _swiftEmptyArrayStorage[3];
      if (v23 >= v22 >> 1)
        sub_1001C2088(v22 > 1, v23 + 1, 1);
      _swiftEmptyArrayStorage[2] = v23 + 1;
      v24 = (float *)&_swiftEmptyArrayStorage[4 * v23];
      *((_QWORD *)v24 + 4) = v18;
      *((_QWORD *)v24 + 5) = v19;
      *((_QWORD *)v24 + 6) = v20;
      v24[14] = v21;
      if (!--v6)
        return _swiftEmptyArrayStorage;
    }
    swift_release(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void sub_1004C9E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int64_t v83;

  v77 = a2;
  v3 = sub_10001A630((uint64_t *)&unk_1008380D0);
  __chkstk_darwin(v3);
  v73 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v76 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v69 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A630((uint64_t *)&unk_100839C80);
  __chkstk_darwin(v7);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v79 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A630((uint64_t *)&unk_100843FD0);
  __chkstk_darwin(v13);
  v82 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RDPermanentlyHiddenReminder(0);
  v80 = *(_QWORD *)(v15 - 8);
  v81 = v15;
  __chkstk_darwin(v15);
  v67 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v66 = (uint64_t)&v65 - v18;
  v19 = *(_QWORD *)(a1 + 64);
  v74 = a1 + 64;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v75 = (unint64_t)(v20 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v23 = 0;
  v68 = _swiftEmptyArrayStorage;
  v78 = v5;
  v70 = v9;
  v71 = v10;
  v72 = a1;
  if (v22)
    goto LABEL_8;
LABEL_14:
  v36 = v23 + 1;
  if (!__OFADD__(v23, 1))
  {
    if (v36 < v75)
    {
      v37 = *(_QWORD *)(v74 + 8 * v36);
      v38 = v23 + 1;
      if (v37)
        goto LABEL_29;
      v38 = v23 + 2;
      if (v23 + 2 >= v75)
        goto LABEL_39;
      v37 = *(_QWORD *)(v74 + 8 * v38);
      if (v37)
        goto LABEL_29;
      v38 = v23 + 3;
      if (v23 + 3 >= v75)
        goto LABEL_39;
      v37 = *(_QWORD *)(v74 + 8 * v38);
      if (v37)
        goto LABEL_29;
      v38 = v23 + 4;
      if (v23 + 4 >= v75)
        goto LABEL_39;
      v37 = *(_QWORD *)(v74 + 8 * v38);
      if (v37)
      {
LABEL_29:
        v22 = (v37 - 1) & v37;
        v83 = v38;
        for (i = __clz(__rbit64(v37)) + (v38 << 6); ; i = v29 | (v23 << 6))
        {
          v40 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
          v42 = *v40;
          v41 = v40[1];
          swift_bridgeObjectRetain(v41);
          UUID.init(uuidString:)(v42, v41);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
          {
            sub_10000882C((uint64_t)v9, (uint64_t *)&unk_100839C80);
            v24 = 1;
            goto LABEL_6;
          }
          v43 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
          v43(v79, v9, v10);
          if (!*(_QWORD *)(v77 + 16))
            break;
          swift_bridgeObjectRetain(v41);
          v44 = v77;
          v45 = sub_10001A6DC(v42, v41);
          if ((v46 & 1) != 0)
          {
            v47 = v76;
            v48 = v73;
            (*(void (**)(char *, unint64_t, uint64_t))(v76 + 16))(v73, *(_QWORD *)(v44 + 56) + *(_QWORD *)(v76 + 72) * v45, v78);
            v49 = v48;
            v50 = 0;
          }
          else
          {
            v50 = 1;
            v49 = v73;
            v47 = v76;
          }
          v51 = v78;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v49, v50, 1, v78);
          v52 = swift_bridgeObjectRelease();
          v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v47 + 48))(v49, 1, v51, v52);
          v9 = v70;
          if (v53 == 1)
            goto LABEL_37;
          v56 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
          v57 = v69;
          v58 = v49;
          v59 = v78;
          v56(v69, v58, v78);
          v60 = v82;
          v61 = v11;
          v62 = v71;
          v43(v82, v79, v71);
          v63 = v57;
          v9 = v70;
          v64 = v59;
          v10 = v62;
          v11 = v61;
          v56(&v60[*(int *)(v81 + 20)], v63, v64);
          v24 = 0;
          a1 = v72;
LABEL_6:
          v26 = v80;
          v25 = v81;
          v27 = (uint64_t)v82;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v82, v24, 1, v81);
          v28 = swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 48))(v27, 1, v25, v28) == 1)
          {
            sub_10000882C(v27, (uint64_t *)&unk_100843FD0);
            v23 = v83;
            if (!v22)
              goto LABEL_14;
          }
          else
          {
            v31 = v66;
            sub_10011FF10(v27, v66);
            sub_10011FF10(v31, v67);
            if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
              v68 = (_QWORD *)sub_1002CAA18(0, v68[2] + 1, 1, (unint64_t)v68);
            v33 = v68[2];
            v32 = v68[3];
            if (v33 >= v32 >> 1)
              v68 = (_QWORD *)sub_1002CAA18(v32 > 1, v33 + 1, 1, (unint64_t)v68);
            v34 = v67;
            v35 = v68;
            v68[2] = v33 + 1;
            sub_10011FF10(v34, (uint64_t)v35+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(_QWORD *)(v80 + 72) * v33);
            v23 = v83;
            if (!v22)
              goto LABEL_14;
          }
LABEL_8:
          v29 = __clz(__rbit64(v22));
          v22 &= v22 - 1;
          v83 = v23;
        }
        v49 = v73;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v73, 1, 1, v78);
LABEL_37:
        v54 = v71;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v79, v71);
        v55 = (uint64_t)v49;
        v10 = v54;
        sub_10000882C(v55, (uint64_t *)&unk_1008380D0);
        v24 = 1;
        a1 = v72;
        goto LABEL_6;
      }
      v39 = v23 + 5;
      if (v23 + 5 < v75)
      {
        v37 = *(_QWORD *)(v74 + 8 * v39);
        if (v37)
        {
          v38 = v23 + 5;
          goto LABEL_29;
        }
        while (1)
        {
          v38 = v39 + 1;
          if (__OFADD__(v39, 1))
            goto LABEL_41;
          if (v38 >= v75)
            break;
          v37 = *(_QWORD *)(v74 + 8 * v38);
          ++v39;
          if (v37)
            goto LABEL_29;
        }
      }
    }
LABEL_39:
    swift_release(a1);
    return;
  }
  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_1004CA494(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1004CA4A0(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1004CA4A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  Class isa;
  Class v19;
  id v20;
  void (*v21)(uint64_t, id, _QWORD);
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  _QWORD v27[7];

  v26[5] = a5;
  v27[3] = sub_1000151B0(0, &qword_10084CC48, REMStoreSwiftInvocation_ptr);
  v27[0] = a1;
  v10 = sub_10001A630(&qword_10084CC50);
  v11 = a1;
  throwingCast<A>(_:as:failureMessage:)(v26, v27, v10, 0xD00000000000005DLL, 0x8000000100706120, v10);
  v12 = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v27);
  v13 = (*(uint64_t (**)(uint64_t))(a6 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeProvider))(v12);
  v14 = sub_1000184A8(a6 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v27);
  __chkstk_darwin(v14);
  sub_1003549A4((uint64_t)v27);
  sub_1000A70E4(v23, v24);
  sub_1003B16A0(v25);
  swift_bridgeObjectRelease();
  v15 = (void *)v13;
  v16 = objc_allocWithZone((Class)REMStoreSwiftInvocationResult);
  v17 = 0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v19 = Dictionary._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v16, "initWithResultData:storages:latestFetchResultToken:", isa, v19, v17, swift_bridgeObjectRelease().n128_f64[0]);

  sub_1000A71C8(v23, v24);
  v21 = *(void (**)(uint64_t, id, _QWORD))(a7 + 16);
  v22 = v20;
  v21(a7, v22, 0);

  sub_1000A71C8(v23, v24);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v26);

}

void sub_1004CA9D0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;

  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v6 = type metadata accessor for Logger(0);
  sub_10001AAA8(v6, (uint64_t)qword_10084CAB8);
  v7 = a1;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    v17 = v7;
    v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    *v11 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Executing fetch request {fetchRequest: %@}", v10, 0xCu);
    v13 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v14 = sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)&v17);
  __chkstk_darwin(v14);
  sub_100357748((uint64_t)&v17);
  v16 = v15;
  (*(void (**)(uint64_t, void *, _QWORD))(a3 + 16))(a3, v15, 0);

}

void sub_1004CADBC(uint64_t a1, uint64_t a2)
{
  _BYTE v2[48];
  _BYTE v3[40];

  sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v2);
  sub_1000184A8((uint64_t)v2, (uint64_t)v3);
  __asm { BR              X11 }
}

void sub_1004CAE2C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(v3 - 56) = a1;
  *(_WORD *)(v3 - 52) = WORD2(a1) & 0x3FFF;
  v4 = sub_10001ABA4(512, 2147483519);
  __chkstk_darwin(v4);
  v12 = v2;
  v13 = v3 - 144;
  sub_100357324(v3 - 144, (uint64_t)sub_1004D3044, (uint64_t)&v11);
  sub_10027BB6C(v5);
  v7 = v6;
  v9 = v8;
  v10 = swift_bridgeObjectRelease();
  if (v7)
    v10 = swift_bridgeObjectRelease();
  else
    v9 = 0;
  (*(void (**)(uint64_t, void *, _QWORD, __n128))(v1 + 16))(v1, v9, 0, v10);

}

void sub_1004CAF4C(uint64_t a1, uint64_t a2)
{
  _BYTE v2[48];
  _BYTE v3[40];

  sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v2);
  sub_1000184A8((uint64_t)v2, (uint64_t)v3);
  __asm { BR              X11 }
}

void sub_1004CAFBC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(v3 - 56) = a1;
  *(_WORD *)(v3 - 52) = WORD2(a1) & 0x3FFF;
  v4 = sub_10001ABA4(0x7FFFFFFFLL, 2147483519);
  __chkstk_darwin(v4);
  v7 = v2;
  v8 = v3 - 144;
  sub_100357324(v3 - 144, (uint64_t)sub_1004D2EA8, (uint64_t)&v6);
  sub_1000151B0(0, &qword_10083A208, REMReplicaManagerSerializedData_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, _QWORD))(v1 + 16))(v1, isa, 0);
  swift_bridgeObjectRelease();

}

uint64_t sub_1004CB0F4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Class isa;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  _BYTE v31[16];
  _BYTE v32[16];
  uint64_t v33;
  _BYTE v34[48];

  v6 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A630((uint64_t *)&unk_100839C70);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A630(&qword_100840200);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v34);
  v16 = type metadata accessor for SymmetricKey(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  v17 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
  v18 = v15;
  sub_10001BAE8((uint64_t)v34);
  v19 = a1;
  static TimeZone.current.getter(v19);
  v30[0] = &type metadata for SystemRandomNumberGenerator;
  v30[1] = &protocol witness table for SystemRandomNumberGenerator;
  v20 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = sub_1001EFDA8(v18, (uint64_t)v34, v19, (uint64_t)v14, (uint64_t)v8, &v28, (uint64_t)v11);
  sub_1001F0C74((uint64_t)&v28);
  v22 = sub_1001F3FF4();
  v24 = v23;
  v33 = v28;
  sub_1000F4320(&v33);
  sub_1000A5CA8((uint64_t)&v29, (uint64_t)v32, (uint64_t *)&unk_10083A370);
  sub_1001CB094((uint64_t)v32);
  sub_1000A5CA8((uint64_t)v30, (uint64_t)v31, (uint64_t *)&unk_10083A370);
  sub_1001CB094((uint64_t)v31);
  sub_1000A70E4(v22, v24);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, _QWORD))(a3 + 16))(a3, isa, 0);

  sub_1000A71C8(v22, v24);
  sub_1000A71C8(v22, v24);
  return swift_release(v21);
}

void sub_1004CB4A4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16)
{
  __n128 v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  os_log_type_t v51;
  NSObject *log;
  uint64_t v53;
  _QWORD *v57;
  uint64_t v58;
  _BYTE v59[16];
  uint64_t v60;
  id v61[2];
  char v62[24];
  char v63[40];
  _BYTE v64[56];

  sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
  v22 = static OS_dispatch_queue.main.getter(v21);
  v23 = *(void **)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController];
  v24 = type metadata accessor for RDDatabaseSaver();
  inited = (_QWORD *)swift_initStackObject(v24, v63);
  inited[2] = v22;
  inited[3] = v23;
  inited[4] = a2;
  swift_beginAccess(a12 + 16, v62, 0, 0);
  v26 = *(_QWORD *)(a12 + 16);
  sub_1000184A8((uint64_t)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity], (uint64_t)v64);
  v23;
  swift_bridgeObjectRetain(v26);
  v27 = a8;
  v57 = inited;
  sub_100651C74(a3, a4, a5, a6, a7, v27, a9, a10, a11, v26, a13, a14, (uint64_t)v64);
  v53 = a4;
  swift_bridgeObjectRelease();
  sub_10000A388(&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler], *(_QWORD *)&a1[OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_coreSuggestionsHandler + 24]);
  sub_100339230(a10);
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v28 = type metadata accessor for Logger(0);
  sub_10001AAA8(v28, (uint64_t)qword_10084CAB8);
  v29 = a1;
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain_n(v53, 2);
  swift_bridgeObjectRetain_n(a5, 2);
  swift_bridgeObjectRetain_n(a6, 2);
  swift_bridgeObjectRetain_n(a7, 2);
  swift_bridgeObjectRetain_n(a10, 2);
  swift_retain_n(a12);
  v30 = v29;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v51 = v32;
    log = v31;
    v33 = swift_slowAlloc(82, -1);
    v50 = (void *)swift_slowAlloc(32, -1);
    v61[0] = v50;
    *(_DWORD *)v33 = 136448002;
    sub_1000181B8();
    v58 = sub_10001A820(v34, v35, (uint64_t *)v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);

    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2048;
    if ((unint64_t)a3 >> 62)
    {
      if (a3 < 0)
        v44 = a3;
      else
        v44 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v36 = _CocoaArrayWrapper.endIndex.getter(v44);
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v58 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2048;
    v37 = a16;
    if ((unint64_t)v53 >> 62)
    {
      if (v53 < 0)
        v45 = v53;
      else
        v45 = v53 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v53);
      v38 = _CocoaArrayWrapper.endIndex.getter(v45);
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v58 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 32) = 2048;
    if ((unint64_t)a5 >> 62)
    {
      if (a5 < 0)
        v46 = a5;
      else
        v46 = a5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a5);
      v39 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v58 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 42) = 2048;
    if ((unint64_t)a6 >> 62)
    {
      if (a6 < 0)
        v47 = a6;
      else
        v47 = a6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a6);
      v40 = _CocoaArrayWrapper.endIndex.getter(v47);
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v58 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 52) = 2048;
    if ((unint64_t)a7 >> 62)
    {
      if (a7 < 0)
        v48 = a7;
      else
        v48 = a7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a7);
      v41 = _CocoaArrayWrapper.endIndex.getter(v48);
      swift_bridgeObjectRelease();
    }
    else
    {
      v41 = *(_QWORD *)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v58 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 62) = 2048;
    if ((unint64_t)a10 >> 62)
    {
      if (a10 < 0)
        v49 = a10;
      else
        v49 = a10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a10);
      v42 = _CocoaArrayWrapper.endIndex.getter(v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      v42 = *(_QWORD *)((a10 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v58 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 72) = 2048;
    swift_beginAccess(a12 + 16, &v58, 0, 0);
    v43 = *(_QWORD *)(*(_QWORD *)(a12 + 16) + 16);
    swift_release(a12);
    v60 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);
    swift_release(a12);
    _os_log_impl((void *)&_mh_execute_header, log, v51, "(daemon) SAVE END {author: %{public}s, accountStorages.count: %ld, listStorages.count: %ld, listSectionStorages.count: %ld, smartListStorages.count: %ld, smartListSectionStorages.count: %ld, reminderStorages.count: %ld, replicaManagers.count: %ld}", (uint8_t *)v33, 0x52u);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(v53, 2);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(a6, 2);
    swift_bridgeObjectRelease_n(a7, 2);
    swift_bridgeObjectRelease_n(a10, 2);
    swift_release_n(a12);
    v37 = a16;
  }
  (*(void (**)(uint64_t, _QWORD))(v37 + 16))(v37, 0);
  swift_setDeallocating(v57);

}

uint64_t sub_1004CC088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15, void *a16, const void *a17)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void **v136;
  const void *v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  void **aBlock;
  uint64_t v152;
  uint64_t (*v153)(uint64_t);
  void *v154;
  void (*v155)();
  uint64_t v156;
  uint64_t v157;
  char v158[8];
  char v159[8];

  v141 = a7;
  v144 = a6;
  v140 = a5;
  v134 = type metadata accessor for DispatchWorkItemFlags(0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v132 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v127 = (char *)&v122 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v123);
  v124 = (char *)&v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for DispatchQoS(0);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v129 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = swift_allocObject(&unk_1007F6FC8, 24, 7);
  *(_QWORD *)(v149 + 16) = a17;
  v137 = a17;
  _Block_copy(a17);
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v139 = a13;
  v26 = type metadata accessor for Logger(0);
  v27 = sub_10001AAA8(v26, (uint64_t)qword_10084CAB8);
  v28 = a16;
  swift_bridgeObjectRetain_n(a1, 2);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_bridgeObjectRetain_n(a4, 2);
  swift_bridgeObjectRetain_n(a8, 2);
  swift_bridgeObjectRetain_n(a9, 2);
  swift_bridgeObjectRetain_n(a10, 2);
  v29 = v28;
  v30 = a1;
  v122 = v27;
  v31 = Logger.logObject.getter(v29);
  LODWORD(v145) = static os_log_type_t.default.getter(v31);
  v32 = os_log_type_enabled(v31, (os_log_type_t)v145);
  v143 = a3;
  v142 = a4;
  v148 = a9;
  v147 = v30;
  v146 = a8;
  if (v32)
  {
    v33 = swift_slowAlloc(72, -1);
    v136 = (void **)swift_slowAlloc(32, -1);
    aBlock = v136;
    *(_DWORD *)v33 = 136447746;
    sub_1000184A8((uint64_t)v29 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v159);
    sub_1000181B8();
    v157 = sub_10001A820(v34, v35, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);

    v138 = v29;
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2048;
    if ((unint64_t)v30 >> 62)
    {
      if (v30 < 0)
        v117 = v30;
      else
        v117 = v30 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v30);
      v36 = _CocoaArrayWrapper.endIndex.getter(v117);
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v37 = v146;
    swift_bridgeObjectRelease();
    v157 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2048;
    if ((unint64_t)a2 >> 62)
    {
      if (a2 < 0)
        v118 = a2;
      else
        v118 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v38 = _CocoaArrayWrapper.endIndex.getter(v118);
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v157 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 32) = 2048;
    if ((unint64_t)a4 >> 62)
    {
      if (a4 < 0)
        v119 = a4;
      else
        v119 = a4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a4);
      v39 = _CocoaArrayWrapper.endIndex.getter(v119);
      swift_bridgeObjectRelease();
    }
    else
    {
      v39 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v157 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 42) = 2048;
    if ((unint64_t)v37 >> 62)
    {
      if (v37 < 0)
        v120 = v37;
      else
        v120 = v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v37);
      v40 = _CocoaArrayWrapper.endIndex.getter(v120);
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v157 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 52) = 2048;
    v41 = *(_QWORD *)(v148 + 16);
    swift_bridgeObjectRelease();
    v157 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 62) = 2048;
    if ((a10 & 0xC000000000000001) != 0)
    {
      if (a10 < 0)
        v42 = a10;
      else
        v42 = a10 & 0xFFFFFFFFFFFFFF8;
      v43 = __CocoaDictionary.count.getter(v42);
    }
    else
    {
      v43 = *(_QWORD *)(a10 + 16);
    }
    a3 = v143;
    swift_bridgeObjectRelease();
    v157 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v145, "(daemon) SAVE START {author: %{public}s, accountStorage.count: %ld, listStorage.count: %ld, smartListStorages.count: %ld, reminderStorage.count: %ld, changedKeys.count: %ld, replicaManagers.count: %ld", (uint8_t *)v33, 0x48u);
    v45 = (char *)v136;
    swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v44 = v138;
  }
  else
  {

    swift_bridgeObjectRelease_n(v30, 2);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a8, 2);
    swift_bridgeObjectRelease_n(a9, 2);
    swift_bridgeObjectRelease_n(a10, 2);
    v44 = v29;
  }
  LODWORD(v135) = a15;
  LODWORD(v136) = a14;
  v145 = a12;
  v138 = (id)a11;
  v46 = swift_allocObject(&unk_1007F6FF0, 24, 7);
  *(_QWORD *)(v46 + 16) = _swiftEmptyArrayStorage;
  sub_1000184A8((uint64_t)v44 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)&v157);
  v47 = sub_10001853C();
  if (v48)
  {
    v49 = sub_1004C9AC8(a10, v47, v48);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v46 + 16) = v49;
    swift_bridgeObjectRelease();
LABEL_32:
    v52 = v144;
    goto LABEL_33;
  }
  if ((a10 & 0xC000000000000001) != 0)
  {
    if (a10 < 0)
      v50 = a10;
    else
      v50 = a10 & 0xFFFFFFFFFFFFFF8;
    v51 = __CocoaDictionary.count.getter(v50);
  }
  else
  {
    v51 = *(_QWORD *)(a10 + 16);
  }
  v52 = v144;
  if (v51)
  {
    v53 = Logger.logObject.getter(v51);
    v54 = static os_log_type_t.error.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Will not save replica managers. Bundle ID is missing", v55, 2u);
      v56 = v55;
      a3 = v143;
      swift_slowDealloc(v56, -1, -1);
    }

    goto LABEL_32;
  }
LABEL_33:
  v57 = swift_allocObject(&unk_1007F7018, 152, 7);
  v58 = v139;
  *(_QWORD *)(v57 + 16) = v44;
  *(_QWORD *)(v57 + 24) = v58;
  *(_QWORD *)(v57 + 32) = v147;
  *(_QWORD *)(v57 + 40) = a2;
  v59 = a2;
  v60 = v142;
  *(_QWORD *)(v57 + 48) = a3;
  *(_QWORD *)(v57 + 56) = v60;
  v61 = v140;
  *(_QWORD *)(v57 + 64) = v140;
  *(_QWORD *)(v57 + 72) = v52;
  v62 = v141;
  v63 = v146;
  *(_QWORD *)(v57 + 80) = v141;
  *(_QWORD *)(v57 + 88) = v63;
  v64 = v148;
  *(_QWORD *)(v57 + 96) = v148;
  *(_QWORD *)(v57 + 104) = v46;
  v65 = v145;
  *(_QWORD *)(v57 + 112) = v138;
  *(_QWORD *)(v57 + 120) = v65;
  v66 = v62;
  v67 = a3;
  v68 = v135 & 1;
  *(_BYTE *)(v57 + 128) = v135 & 1;
  v69 = v149;
  *(_QWORD *)(v57 + 136) = sub_100119B24;
  *(_QWORD *)(v57 + 144) = v69;
  if ((v136 & 1) != 0)
  {
    v70 = v66;
    v128 = v46;
    v135 = v59;
    v71 = v67;
    _Block_copy(v137);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v71);
    v72 = v128;
    swift_retain();
    v136 = v44;
    v73 = v147;
    swift_bridgeObjectRetain(v147);
    v74 = v135;
    swift_bridgeObjectRetain(v135);
    swift_bridgeObjectRetain(v60);
    v75 = v146;
    swift_bridgeObjectRetain(v146);
    swift_bridgeObjectRetain(v64);
    v76 = v149;
    swift_retain();
    v77 = v137;
    LOBYTE(v121) = v68;
    sub_1004CB4A4((char *)v136, v139, v73, v74, v143, v60, v140, v144, v141, v75, v64, v72, (uint64_t)v138, v145, v121, (uint64_t)v137);
    _Block_release(v77);
    swift_release(v76);
    swift_release(v72);
    v78 = v57;
  }
  else
  {
    v79 = v46;
    v80 = v66;
    v81 = v59;
    v82 = v61;
    if (v58 == 4499)
    {
      v139 = sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
      swift_bridgeObjectRetain(v145);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v143);
      v128 = v79;
      swift_retain();
      v83 = v44;
      swift_bridgeObjectRetain(v147);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v142);
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v148);
      v84 = v149;
      v85 = swift_retain();
      v86 = v129;
      static DispatchQoS.unspecified.getter(v85);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v87 = sub_10009FC50((unint64_t *)&qword_10083A990, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      v88 = sub_10001A630((uint64_t *)&unk_10083DBD0);
      v89 = sub_1000A5F84((unint64_t *)&qword_10083A9A0, (uint64_t *)&unk_10083DBD0, (uint64_t)&protocol conformance descriptor for [A]);
      v90 = v124;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v88, v89, v123, v87);
      v91 = v127;
      (*(void (**)(char *, _QWORD, uint64_t))(v125 + 104))(v127, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v126);
      v92 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000018, 0x8000000100706100, v86, v90, v91, 0);
      v155 = sub_1004D2C2C;
      v156 = v57;
      aBlock = _NSConcreteStackBlock;
      v152 = 1107296256;
      v153 = sub_1000094C8;
      v154 = &unk_1007F7058;
      v93 = _Block_copy(&aBlock);
      v94 = swift_retain();
      static DispatchQoS.unspecified.getter(v94);
      v150 = _swiftEmptyArrayStorage;
      v95 = v84;
      v96 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v97 = sub_10001A630((uint64_t *)&unk_100838000);
      v98 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
      v99 = v132;
      v100 = v134;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v150, v97, v98, v134, v96);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v86, v99, v93);
      _Block_release(v93);
      swift_release(v57);

      (*(void (**)(char *, uint64_t))(v133 + 8))(v99, v100);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v86, v131);
      v101 = v156;
      swift_release(v95);
      v102 = v128;
    }
    else
    {
      v103 = v52;
      v104 = qword_100836F20;
      v105 = v44;
      swift_bridgeObjectRetain(v147);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v142);
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v148);
      v106 = v149;
      swift_retain();
      swift_bridgeObjectRetain(v145);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v143);
      swift_retain();
      if (v104 != -1)
        swift_once(&qword_100836F20, sub_1001BA770);
      v155 = sub_1004D2C2C;
      v156 = v57;
      aBlock = _NSConcreteStackBlock;
      v152 = 1107296256;
      v153 = sub_1000094C8;
      v154 = &unk_1007F7030;
      v107 = _Block_copy(&aBlock);
      v108 = swift_retain();
      v109 = v129;
      static DispatchQoS.unspecified.getter(v108);
      v150 = _swiftEmptyArrayStorage;
      v110 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v111 = sub_10001A630((uint64_t *)&unk_100838000);
      v112 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
      v113 = v132;
      v114 = v111;
      v115 = v134;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v150, v114, v112, v134, v110);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v109, v113, v107);
      _Block_release(v107);
      swift_release(v57);
      (*(void (**)(char *, uint64_t))(v133 + 8))(v113, v115);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v109, v131);
      v101 = v156;
      swift_release(v106);
      v102 = v79;
    }
    swift_release(v102);
    v78 = v101;
  }
  return swift_release(v78);
}

void sub_1004CCFC4(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  _QWORD v24[7];
  uint64_t v25;
  _QWORD v26[3];
  _BYTE v27[8];
  uint64_t v28;
  _BYTE v29[48];

  v6 = swift_allocObject(&unk_1007F6F50, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  v7 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a3);
  v8 = objc_msgSend(v7, "cloudContext");
  if (v8)
  {
    v9 = v8;
    v10 = sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v29);
    __chkstk_darwin(v10);
    v24[2] = a1;
    v24[3] = v9;
    v24[4] = sub_100009434;
    v24[5] = v6;
    sub_10035288C((uint64_t)v29, (uint64_t)sub_1004D2B28, (uint64_t)v24);
    swift_release(v6);

  }
  else
  {
    v11 = (void *)objc_opt_self(REMError);
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "internalErrorWithDebugDescription:", v12);

    swift_willThrow(v14);
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v15 = type metadata accessor for Logger(0);
    sub_10001AAA8(v15, (uint64_t)qword_10084CAB8);
    swift_errorRetain(v13);
    v16 = swift_errorRetain(v13);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v28 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_getErrorValue(v13, v27, v26);
      v21 = Error.localizedDescription.getter(v26[1], v26[2]);
      v25 = sub_10001A820(v21, v22, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
      swift_bridgeObjectRelease();
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to fetch share object. {error: %s}", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_errorRelease(v13);
      swift_errorRelease(v13);
    }

    swift_errorRetain(v13);
    v23 = (void *)_convertErrorToNSError(_:)(v13);
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v23);

    swift_errorRelease(v13);
    swift_errorRelease(v13);
    swift_release(v6);
  }
}

void sub_1004CD300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  _QWORD v28[11];
  uint64_t v29;
  _QWORD v30[3];
  _BYTE v31[8];
  uint64_t v32;
  _BYTE v33[48];

  v10 = swift_allocObject(&unk_1007F6ED8, 24, 7);
  *(_QWORD *)(v10 + 16) = a5;
  v11 = *(void **)(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a5);
  v12 = objc_msgSend(v11, "cloudContext");
  if (v12)
  {
    v13 = v12;
    v14 = sub_1000184A8(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v33);
    __chkstk_darwin(v14);
    v28[2] = a1;
    v28[3] = v13;
    v28[4] = a2;
    v28[5] = a3;
    v28[6] = a4;
    v28[7] = sub_100009434;
    v28[8] = v10;
    sub_10035288C((uint64_t)v33, (uint64_t)sub_1004D2AB4, (uint64_t)v28);
    swift_release(v10);

  }
  else
  {
    v15 = (void *)objc_opt_self(REMError);
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v15, "internalErrorWithDebugDescription:", v16);

    swift_willThrow(v18);
    if (qword_100837700 != -1)
      swift_once(&qword_100837700, sub_1004BC0B4);
    v19 = type metadata accessor for Logger(0);
    sub_10001AAA8(v19, (uint64_t)qword_10084CAB8);
    swift_errorRetain(v17);
    v20 = swift_errorRetain(v17);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v32 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_getErrorValue(v17, v31, v30);
      v25 = Error.localizedDescription.getter(v30[1], v30[2]);
      v29 = sub_10001A820(v25, v26, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
      swift_bridgeObjectRelease();
      swift_errorRelease(v17);
      swift_errorRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to create share. {error: %s}", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(v17);
      swift_errorRelease(v17);
    }

    swift_errorRetain(v17);
    v27 = (void *)_convertErrorToNSError(_:)(v17);
    ((void (**)(_QWORD, _QWORD, void *))a5)[2](a5, 0, v27);

    swift_errorRelease(v17);
    swift_errorRelease(v17);
    swift_release(v10);
  }
}

void sub_1004CD64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSString v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  NSString v21;
  id v22;
  id v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v8 = swift_allocObject(&unk_1007F6E38, 24, 7);
  *(_QWORD *)(v8 + 16) = a5;
  v9 = *(void **)(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a5);
  v10 = objc_msgSend(v9, "cloudContext");
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(objc_allocWithZone((Class)ICCollaborationController), "initWithCloudContext:", v10);
    v13 = String._bridgeToObjectiveC()();
    sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v15 = (void *)static OS_dispatch_queue.main.getter(v14);
    v16 = swift_allocObject(&unk_1007F6E60, 32, 7);
    *(_QWORD *)(v16 + 16) = sub_100119B24;
    *(_QWORD *)(v16 + 24) = v8;
    v17 = swift_allocObject(&unk_1007F6E88, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_100119B20;
    *(_QWORD *)(v17 + 24) = v16;
    aBlock[4] = sub_100119B20;
    v25 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10042D6CC;
    aBlock[3] = &unk_1007F6EA0;
    v18 = _Block_copy(aBlock);
    v19 = v25;
    swift_retain();
    swift_release(v19);
    objc_msgSend(v12, "didSaveShare:accountID:queue:completionHandler:", a1, v13, v15, v18);
    _Block_release(v18);
    swift_release(v8);

  }
  else
  {
    v20 = (void *)objc_opt_self(REMError);
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "internalErrorWithDebugDescription:", v21);

    v23 = (id)_convertErrorToNSError(_:)(v22);
    ((void (**)(_QWORD, id))a5)[2](a5, v23);
    swift_release(v8);

  }
}

void sub_1004CD8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSString v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  NSString v21;
  id v22;
  id v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v8 = swift_allocObject(&unk_1007F6D98, 24, 7);
  *(_QWORD *)(v8 + 16) = a5;
  v9 = *(void **)(a4 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a5);
  v10 = objc_msgSend(v9, "cloudContext");
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(objc_allocWithZone((Class)ICCollaborationController), "initWithCloudContext:", v10);
    v13 = String._bridgeToObjectiveC()();
    sub_1000151B0(0, (unint64_t *)&qword_100837FE0, OS_dispatch_queue_ptr);
    v15 = (void *)static OS_dispatch_queue.main.getter(v14);
    v16 = swift_allocObject(&unk_1007F6DC0, 32, 7);
    *(_QWORD *)(v16 + 16) = sub_100119B24;
    *(_QWORD *)(v16 + 24) = v8;
    v17 = swift_allocObject(&unk_1007F6DE8, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_100119B20;
    *(_QWORD *)(v17 + 24) = v16;
    aBlock[4] = sub_1000098EC;
    v25 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10042D6CC;
    aBlock[3] = &unk_1007F6E00;
    v18 = _Block_copy(aBlock);
    v19 = v25;
    swift_retain();
    swift_release(v19);
    objc_msgSend(v12, "didStopSharing:accountID:queue:completionHandler:", a1, v13, v15, v18);
    _Block_release(v18);
    swift_release(v8);

  }
  else
  {
    v20 = (void *)objc_opt_self(REMError);
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "internalErrorWithDebugDescription:", v21);

    v23 = (id)_convertErrorToNSError(_:)(v22);
    ((void (**)(_QWORD, id))a5)[2](a5, v23);
    swift_release(v8);

  }
}

void sub_1004CDB1C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  __n128 v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  void *v14;
  NSString v15;
  id v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *log;
  void *v34;
  uint64_t v35;
  uint64_t v36[3];
  char v37[24];

  v8 = (uint64_t *)(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_sharingObserverForAccountID);
  v9.n128_u64[0] = swift_beginAccess(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_sharingObserverForAccountID, v37, 0, 0).n128_u64[0];
  v10 = *v8;
  if (*(_QWORD *)(*v8 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v10);
    sub_10001A6DC(a1, a2);
    v12 = v11;
    swift_bridgeObjectRelease();
    v9 = swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
      goto LABEL_10;
  }
  v13 = objc_msgSend(*(id *)(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController), "cloudContext", v9.n128_f64[0]);
  if (!v13)
    goto LABEL_10;
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "containerForAccountID:", v15);

  if (!v16)
  {

LABEL_10:
    (*(void (**)(uint64_t, _QWORD, __n128))(a4 + 16))(a4, 0, v9);
    return;
  }
  v34 = v14;
  v17 = objc_msgSend(objc_allocWithZone((Class)CKSystemSharingUIObserver), "initWithContainer:", v16);
  v18 = swift_allocObject(&unk_1007F6CD0, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, a3);
  v19 = (_QWORD *)swift_allocObject(&unk_1007F6CF8, 40, 7);
  v19[2] = v18;
  v19[3] = a1;
  v19[4] = a2;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  sub_1000E51CC((uint64_t)sub_1004D2A6C, (uint64_t)v19);
  CKSystemSharingUIObserver.systemSharingUIDidSaveShareBlock.setter(sub_1004D2A6C, v19);
  swift_release(v18);
  swift_release(v19);
  v20 = swift_allocObject(&unk_1007F6CD0, 24, 7);
  swift_unknownObjectWeakInit(v20 + 16, a3);
  v21 = (_QWORD *)swift_allocObject(&unk_1007F6D20, 40, 7);
  v21[2] = v20;
  v21[3] = a1;
  v21[4] = a2;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  sub_1000E51CC((uint64_t)sub_1004D2A88, (uint64_t)v21);
  CKSystemSharingUIObserver.systemSharingUIDidStopSharingBlock.setter(sub_1004D2A88, v21);
  swift_release(v20);
  swift_release(v21);
  swift_beginAccess(v8, v36, 33, 0);
  swift_bridgeObjectRetain(a2);
  v22 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v35 = *v8;
  *v8 = 0x8000000000000000;
  sub_10028EBF4((uint64_t)v22, a1, a2, isUniquelyReferenced_nonNull_native);
  *v8 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess(v36);
  if (qword_100837700 != -1)
    swift_once(&qword_100837700, sub_1004BC0B4);
  v24 = type metadata accessor for Logger(0);
  sub_10001AAA8(v24, (uint64_t)qword_10084CAB8);
  swift_bridgeObjectRetain_n(a2, 2);
  v25 = v16;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  log = v26;
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    v29 = (_QWORD *)swift_slowAlloc(8, -1);
    v32 = swift_slowAlloc(32, -1);
    v36[0] = v32;
    *(_DWORD *)v28 = 138412546;
    v30 = objc_msgSend(v25, "containerID");
    v35 = (uint64_t)v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);
    *v29 = v30;

    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v35 = sub_10001A820(a1, a2, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, log, v27, "CKSystemSharingUIObserver: Added observer for container: {containerID: %@, accountID: %s}", (uint8_t *)v28, 0x16u);
    v31 = sub_10001A630((uint64_t *)&unk_100839E70);
    swift_arrayDestroy(v29, 1, v31);
    swift_slowDealloc(v29, -1, -1);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(uint64_t, _QWORD))(a4 + 16))(a4, 0);

}

void sub_1004CE008(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  NSString v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(_QWORD, _QWORD);
  _QWORD *v37;
  _QWORD aBlock[5];
  _QWORD *v39;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(void (***)(_QWORD, _QWORD))(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_1007F6BE0, 24, 7);
  *(_QWORD *)(v14 + 16) = a3;
  v15 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a3);
  v16 = objc_msgSend(v15, "cloudContext");
  if (v16)
  {
    v17 = v16;
    v34 = v11;
    v35 = v10;
    v36 = v7;
    v18 = objc_msgSend(objc_allocWithZone((Class)ICCollaborationController), "initWithCloudContext:", v16);
    if (qword_100837710 != -1)
      swift_once(&qword_100837710, sub_1004C71C8);
    v19 = (void *)qword_10084CAE8;
    v20 = (_QWORD *)swift_allocObject(&unk_1007F6C08, 48, 7);
    v20[2] = v18;
    v20[3] = a1;
    v20[4] = sub_1004D29C0;
    v20[5] = v14;
    aBlock[4] = sub_1004D29FC;
    v39 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007F6C20;
    v21 = _Block_copy(aBlock);
    v22 = v19;
    v33 = v18;
    v23 = a1;
    v24 = swift_retain();
    static DispatchQoS.unspecified.getter(v24);
    v37 = _swiftEmptyArrayStorage;
    v25 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_10001A630((uint64_t *)&unk_100838000);
    v27 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v26, v27, v6, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v21);
    _Block_release(v21);

    ((void (**)(char *, uint64_t))v36)[1](v9, v6);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
    v28 = v39;
    swift_release(v14);
    swift_release(v28);
  }
  else
  {
    v29 = (void *)objc_opt_self(REMError);
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v29, "internalErrorWithDebugDescription:", v30);

    v36 = (void (**)(_QWORD, _QWORD))_convertErrorToNSError(_:)(v31);
    ((void (**)(_QWORD, _QWORD, _QWORD, void (**)(_QWORD, _QWORD)))a3)[2](a3, 0, 0, v36);
    swift_release(v14);

  }
}

uint64_t sub_1004CE380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(_QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v26 = a1;
  v27 = a3;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(&unk_1007F6B68, 24, 7);
  *(_QWORD *)(v17 + 16) = a6;
  _Block_copy(a6);
  if (qword_1008379F0 != -1)
    swift_once(&qword_1008379F0, sub_100673F84);
  if (byte_100872349 == 1)
  {
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v25[1] = qword_100871CD0;
    v18 = (_QWORD *)swift_allocObject(&unk_1007F6B90, 72, 7);
    v18[2] = v26;
    v18[3] = a2;
    v18[4] = v27;
    v18[5] = a4;
    v18[6] = sub_100119B24;
    v18[7] = v17;
    v18[8] = a5;
    aBlock[4] = sub_1004D2990;
    v31 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007F6BA8;
    v19 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_retain();
    static DispatchQoS.unspecified.getter(a5);
    v29 = _swiftEmptyArrayStorage;
    v20 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v21 = sub_10001A630((uint64_t *)&unk_100838000);
    v22 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v10, v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v23 = v31;
    swift_release(v17);
    return swift_release(v23);
  }
  else
  {
    a6[2](a6, 0);
    return swift_release(v17);
  }
}

uint64_t sub_1004CE678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(_QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v26 = a1;
  v27 = a3;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(&unk_1007F6AF0, 24, 7);
  *(_QWORD *)(v17 + 16) = a6;
  _Block_copy(a6);
  if (qword_1008379F0 != -1)
    swift_once(&qword_1008379F0, sub_100673F84);
  if (byte_100872349 == 1)
  {
    if (qword_100836F10 != -1)
      swift_once(&qword_100836F10, sub_1001BA718);
    v25[1] = qword_100871CD0;
    v18 = (_QWORD *)swift_allocObject(&unk_1007F6B18, 72, 7);
    v18[2] = v26;
    v18[3] = a2;
    v18[4] = v27;
    v18[5] = a4;
    v18[6] = sub_100119B24;
    v18[7] = v17;
    v18[8] = a5;
    aBlock[4] = sub_1004D2948;
    v31 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000094C8;
    aBlock[3] = &unk_1007F6B30;
    v19 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_retain();
    static DispatchQoS.unspecified.getter(a5);
    v29 = _swiftEmptyArrayStorage;
    v20 = sub_10009FC50((unint64_t *)&qword_10083A210, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v21 = sub_10001A630((uint64_t *)&unk_100838000);
    v22 = sub_1000A5F84((unint64_t *)&qword_10083A220, (uint64_t *)&unk_100838000, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v10, v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v23 = v31;
    swift_release(v17);
    return swift_release(v23);
  }
  else
  {
    a6[2](a6, 0);
    return swift_release(v17);
  }
}

uint64_t sub_1004CE970(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  _QWORD v8[6];
  _BYTE v9[48];

  v6 = swift_allocObject(&unk_1007F6AC8, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v9);
  v8[2] = a1;
  v8[3] = sub_100009434;
  v8[4] = v6;
  _Block_copy(a3);
  sub_10035288C((uint64_t)v9, (uint64_t)sub_1004D2928, (uint64_t)v8);
  return swift_release(v6);
}

void sub_1004CEA60(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t ObjCClassFromMetadata;
  NSString v15;
  id v16;
  void *v17;
  _QWORD v18[9];
  id v19;
  _QWORD v20[5];
  __int128 v21;
  uint64_t v22;

  v8 = swift_allocObject(&unk_1007F6A78, 24, 7);
  *(_QWORD *)(v8 + 16) = a4;
  v9 = *(void **)(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a4);
  if (objc_msgSend(v9, "supportsTemplateOperation"))
  {
    sub_100008868(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_publicCloudDatabaseController, (uint64_t)&v21, &qword_100846568);
    if (v22)
    {
      sub_10001BCA8(&v21, (uint64_t)v20);
      v10 = sub_1000184A8(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)&v21);
      __chkstk_darwin(v10);
      v18[2] = sub_100009434;
      v18[3] = v8;
      v18[4] = a1;
      v18[5] = a2;
      v18[6] = v20;
      sub_10035288C((uint64_t)&v21, (uint64_t)sub_1004D2908, (uint64_t)v18);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v20);
      swift_release(v8);
    }
    else
    {
      sub_10000882C((uint64_t)&v21, &qword_100846568);
      v12 = (void *)objc_opt_self(REMError);
      v13 = type metadata accessor for RDXPCStorePerformer();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v13);
      v15 = String._bridgeToObjectiveC()();
      v16 = objc_msgSend(v12, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v15);

      v17 = (void *)_convertErrorToNSError(_:)(v16);
      ((void (**)(_QWORD, _QWORD, void *))a4)[2](a4, 0, v17);
      swift_release(v8);

    }
  }
  else
  {
    v11 = objc_msgSend((id)objc_opt_self(REMError), "notSupportedError");
    v19 = (id)_convertErrorToNSError(_:)(v11);
    ((void (**)(_QWORD, _QWORD, id))a4)[2](a4, 0, v19);
    swift_release(v8);

  }
}

uint64_t sub_1004CED00(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  _QWORD v10[8];
  _BYTE v11[48];

  v8 = swift_allocObject(&unk_1007F6A28, 24, 7);
  *(_QWORD *)(v8 + 16) = a4;
  sub_1000184A8(a3 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)v11);
  v10[2] = sub_100009434;
  v10[3] = v8;
  v10[4] = a1;
  v10[5] = a2;
  _Block_copy(a4);
  sub_10035288C((uint64_t)v11, (uint64_t)sub_1004D28EC, (uint64_t)v10);
  return swift_release(v8);
}

void sub_1004CEDF4(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t ObjCClassFromMetadata;
  NSString v13;
  id v14;
  void *v15;
  _QWORD v16[7];
  id v17;
  _QWORD v18[5];
  __int128 v19;
  uint64_t v20;

  v6 = swift_allocObject(&unk_1007F69D8, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  v7 = *(void **)(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_storeController);
  _Block_copy(a3);
  if (objc_msgSend(v7, "supportsTemplateOperation"))
  {
    sub_100008868(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_publicCloudDatabaseController, (uint64_t)&v19, &qword_100846568);
    if (v20)
    {
      sub_10001BCA8(&v19, (uint64_t)v18);
      v8 = sub_1000184A8(a2 + OBJC_IVAR____TtC7remindd19RDXPCStorePerformer_clientIdentity, (uint64_t)&v19);
      __chkstk_darwin(v8);
      v16[2] = sub_100009434;
      v16[3] = v6;
      v16[4] = a1;
      v16[5] = v18;
      sub_10035288C((uint64_t)&v19, (uint64_t)sub_1004D28D0, (uint64_t)v16);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v18);
      swift_release(v6);
    }
    else
    {
      sub_10000882C((uint64_t)&v19, &qword_100846568);
      v10 = (void *)objc_opt_self(REMError);
      v11 = type metadata accessor for RDXPCStorePerformer();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v11);
      v13 = String._bridgeToObjectiveC()();
      v14 = objc_msgSend(v10, "unexpectedNilPropertyWithClass:property:", ObjCClassFromMetadata, v13);

      v15 = (void *)_convertErrorToNSError(_:)(v14);
      ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v15);
      swift_release(v6);

    }
  }
  else
  {
    v9 = objc_msgSend((id)objc_opt_self(REMError), "notSupportedError");
    v17 = (id)_convertErrorToNSError(_:)(v9);
    ((void (**)(_QWORD, _QWORD, id))a3)[2](a3, 0, v17);
    swift_release(v6);

  }
}

